
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f5fc  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801f898  0801f898  0002f898  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fc60  0801fc60  000301f4  2**0
                  CONTENTS
  4 .ARM          00000008  0801fc60  0801fc60  0002fc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fc68  0801fc68  000301f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fc68  0801fc68  0002fc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fc6c  0801fc6c  0002fc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  24000000  0801fc70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001dbc  240001f8  0801fe64  000301f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001fb4  0801fe64  00031fb4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ee69  00000000  00000000  00030222  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fc4  00000000  00000000  0005f08b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001890  00000000  00000000  00064050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001680  00000000  00000000  000658e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b6e7  00000000  00000000  00066f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a70b  00000000  00000000  000a2647  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00165405  00000000  00000000  000bcd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00222157  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a54  00000000  00000000  002221d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f8 	.word	0x240001f8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f87c 	.word	0x0801f87c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001fc 	.word	0x240001fc
 80002d4:	0801f87c 	.word	0x0801f87c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <G_q>:
 *                creal_T b_G_q[6]
 * Return Type  : void
 */
void G_q(double g, double theta2, double theta3, double theta4, double theta5,
         creal_T b_G_q[6])
{
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4bc1      	ldr	r3, [pc, #772]	; (80008f8 <G_q+0x310>)
 80005f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80005f8:	443a      	add	r2, r7
 80005fa:	4413      	add	r3, r2
 80005fc:	ed83 0b00 	vstr	d0, [r3]
 8000600:	4bbe      	ldr	r3, [pc, #760]	; (80008fc <G_q+0x314>)
 8000602:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000606:	443a      	add	r2, r7
 8000608:	4413      	add	r3, r2
 800060a:	ed83 1b00 	vstr	d1, [r3]
 800060e:	4bbc      	ldr	r3, [pc, #752]	; (8000900 <G_q+0x318>)
 8000610:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000614:	443a      	add	r2, r7
 8000616:	4413      	add	r3, r2
 8000618:	ed83 2b00 	vstr	d2, [r3]
 800061c:	f107 0310 	add.w	r3, r7, #16
 8000620:	ed83 3b00 	vstr	d3, [r3]
 8000624:	4bb7      	ldr	r3, [pc, #732]	; (8000904 <G_q+0x31c>)
 8000626:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800062a:	443a      	add	r2, r7
 800062c:	4413      	add	r3, r2
 800062e:	ed83 4b00 	vstr	d4, [r3]
 8000632:	4bb5      	ldr	r3, [pc, #724]	; (8000908 <G_q+0x320>)
 8000634:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000638:	443a      	add	r2, r7
 800063a:	4413      	add	r3, r2
 800063c:	6018      	str	r0, [r3, #0]
  double t74_re;
  double t74_im;
  double t76_re;
  double t58_im;
  double t60_re;
  if (isInitialized_G_q == false) {
 800063e:	4bb3      	ldr	r3, [pc, #716]	; (800090c <G_q+0x324>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b00      	cmp	r3, #0
 8000644:	d101      	bne.n	800064a <G_q+0x62>
    G_q_initialize();
 8000646:	f010 f8cf 	bl	80107e8 <G_q_initialize>
  }

  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     24-May-2020 14:27:08 */
  t299.re = theta2 * 0.0;
 800064a:	4bac      	ldr	r3, [pc, #688]	; (80008fc <G_q+0x314>)
 800064c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000650:	443a      	add	r2, r7
 8000652:	4413      	add	r3, r2
 8000654:	ed93 7b00 	vldr	d7, [r3]
 8000658:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80008f0 <G_q+0x308>
 800065c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000660:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000664:	ed83 7b00 	vstr	d7, [r3]
  t299.im = theta2;
 8000668:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800066c:	4ba3      	ldr	r3, [pc, #652]	; (80008fc <G_q+0x314>)
 800066e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000672:	4439      	add	r1, r7
 8000674:	440b      	add	r3, r1
 8000676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800067a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t298.re = -t299.re;
 800067e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000682:	ed93 7b00 	vldr	d7, [r3]
 8000686:	eeb1 7b47 	vneg.f64	d7, d7
 800068a:	f241 2330 	movw	r3, #4656	; 0x1230
 800068e:	443b      	add	r3, r7
 8000690:	ed83 7b00 	vstr	d7, [r3]
  t298.im = -theta2;
 8000694:	4b99      	ldr	r3, [pc, #612]	; (80008fc <G_q+0x314>)
 8000696:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800069a:	443a      	add	r2, r7
 800069c:	4413      	add	r3, r2
 800069e:	ed93 7b00 	vldr	d7, [r3]
 80006a2:	eeb1 7b47 	vneg.f64	d7, d7
 80006a6:	f241 2330 	movw	r3, #4656	; 0x1230
 80006aa:	443b      	add	r3, r7
 80006ac:	ed83 7b02 	vstr	d7, [r3, #8]
  t293.re = t299.re;
 80006b0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80006b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80006b8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80006bc:	e9c2 3400 	strd	r3, r4, [r2]
  t293.im = theta2;
 80006c0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80006c4:	4b8d      	ldr	r3, [pc, #564]	; (80008fc <G_q+0x314>)
 80006c6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80006ca:	4439      	add	r1, r7
 80006cc:	440b      	add	r3, r1
 80006ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80006d2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t292.re = -t299.re;
 80006d6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80006da:	ed93 7b00 	vldr	d7, [r3]
 80006de:	eeb1 7b47 	vneg.f64	d7, d7
 80006e2:	f241 2310 	movw	r3, #4624	; 0x1210
 80006e6:	443b      	add	r3, r7
 80006e8:	ed83 7b00 	vstr	d7, [r3]
  t292.im = -theta2;
 80006ec:	4b83      	ldr	r3, [pc, #524]	; (80008fc <G_q+0x314>)
 80006ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80006f2:	443a      	add	r2, r7
 80006f4:	4413      	add	r3, r2
 80006f6:	ed93 7b00 	vldr	d7, [r3]
 80006fa:	eeb1 7b47 	vneg.f64	d7, d7
 80006fe:	f241 2310 	movw	r3, #4624	; 0x1210
 8000702:	443b      	add	r3, r7
 8000704:	ed83 7b02 	vstr	d7, [r3, #8]
  t291.re = t299.re;
 8000708:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800070c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000710:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8000714:	e9c2 3400 	strd	r3, r4, [r2]
  t291.im = theta2;
 8000718:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800071c:	4b77      	ldr	r3, [pc, #476]	; (80008fc <G_q+0x314>)
 800071e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000722:	4439      	add	r1, r7
 8000724:	440b      	add	r3, r1
 8000726:	e9d3 3400 	ldrd	r3, r4, [r3]
 800072a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t290.re = -t299.re;
 800072e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000732:	ed93 7b00 	vldr	d7, [r3]
 8000736:	eeb1 7b47 	vneg.f64	d7, d7
 800073a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800073e:	443b      	add	r3, r7
 8000740:	ed83 7b00 	vstr	d7, [r3]
  t290.im = -theta2;
 8000744:	4b6d      	ldr	r3, [pc, #436]	; (80008fc <G_q+0x314>)
 8000746:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800074a:	443a      	add	r2, r7
 800074c:	4413      	add	r3, r2
 800074e:	ed93 7b00 	vldr	d7, [r3]
 8000752:	eeb1 7b47 	vneg.f64	d7, d7
 8000756:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800075a:	443b      	add	r3, r7
 800075c:	ed83 7b02 	vstr	d7, [r3, #8]
  t287.re = t299.re;
 8000760:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000764:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000768:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800076c:	e9c2 3400 	strd	r3, r4, [r2]
  t287.im = theta2;
 8000770:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8000774:	4b61      	ldr	r3, [pc, #388]	; (80008fc <G_q+0x314>)
 8000776:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800077a:	4439      	add	r1, r7
 800077c:	440b      	add	r3, r1
 800077e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000782:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t286.re = -t299.re;
 8000786:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800078a:	ed93 7b00 	vldr	d7, [r3]
 800078e:	eeb1 7b47 	vneg.f64	d7, d7
 8000792:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8000796:	443b      	add	r3, r7
 8000798:	ed83 7b00 	vstr	d7, [r3]
  t286.im = -theta2;
 800079c:	4b57      	ldr	r3, [pc, #348]	; (80008fc <G_q+0x314>)
 800079e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80007a2:	443a      	add	r2, r7
 80007a4:	4413      	add	r3, r2
 80007a6:	ed93 7b00 	vldr	d7, [r3]
 80007aa:	eeb1 7b47 	vneg.f64	d7, d7
 80007ae:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80007b2:	443b      	add	r3, r7
 80007b4:	ed83 7b02 	vstr	d7, [r3, #8]
  t281.re = t299.re;
 80007b8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80007bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80007c0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80007c4:	e9c2 3400 	strd	r3, r4, [r2]
  t281.im = theta2;
 80007c8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80007cc:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <G_q+0x314>)
 80007ce:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80007d2:	4439      	add	r1, r7
 80007d4:	440b      	add	r3, r1
 80007d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80007da:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t280.re = -t299.re;
 80007de:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80007e2:	ed93 7b00 	vldr	d7, [r3]
 80007e6:	eeb1 7b47 	vneg.f64	d7, d7
 80007ea:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80007ee:	443b      	add	r3, r7
 80007f0:	ed83 7b00 	vstr	d7, [r3]
  t280.im = -theta2;
 80007f4:	4b41      	ldr	r3, [pc, #260]	; (80008fc <G_q+0x314>)
 80007f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80007fa:	443a      	add	r2, r7
 80007fc:	4413      	add	r3, r2
 80007fe:	ed93 7b00 	vldr	d7, [r3]
 8000802:	eeb1 7b47 	vneg.f64	d7, d7
 8000806:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800080a:	443b      	add	r3, r7
 800080c:	ed83 7b02 	vstr	d7, [r3, #8]
  t277.re = t299.re;
 8000810:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000814:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000818:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800081c:	e9c2 3400 	strd	r3, r4, [r2]
  t277.im = theta2;
 8000820:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8000824:	4b35      	ldr	r3, [pc, #212]	; (80008fc <G_q+0x314>)
 8000826:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800082a:	4439      	add	r1, r7
 800082c:	440b      	add	r3, r1
 800082e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000832:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t276.re = -t299.re;
 8000836:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800083a:	ed93 7b00 	vldr	d7, [r3]
 800083e:	eeb1 7b47 	vneg.f64	d7, d7
 8000842:	f241 1390 	movw	r3, #4496	; 0x1190
 8000846:	443b      	add	r3, r7
 8000848:	ed83 7b00 	vstr	d7, [r3]
  t276.im = -theta2;
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <G_q+0x314>)
 800084e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000852:	443a      	add	r2, r7
 8000854:	4413      	add	r3, r2
 8000856:	ed93 7b00 	vldr	d7, [r3]
 800085a:	eeb1 7b47 	vneg.f64	d7, d7
 800085e:	f241 1390 	movw	r3, #4496	; 0x1190
 8000862:	443b      	add	r3, r7
 8000864:	ed83 7b02 	vstr	d7, [r3, #8]
  t273.re = t299.re;
 8000868:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800086c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000870:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8000874:	e9c2 3400 	strd	r3, r4, [r2]
  t273.im = theta2;
 8000878:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <G_q+0x314>)
 800087e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000882:	4439      	add	r1, r7
 8000884:	440b      	add	r3, r1
 8000886:	e9d3 3400 	ldrd	r3, r4, [r3]
 800088a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t272.re = -t299.re;
 800088e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000892:	ed93 7b00 	vldr	d7, [r3]
 8000896:	eeb1 7b47 	vneg.f64	d7, d7
 800089a:	f241 1370 	movw	r3, #4464	; 0x1170
 800089e:	443b      	add	r3, r7
 80008a0:	ed83 7b00 	vstr	d7, [r3]
  t272.im = -theta2;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <G_q+0x314>)
 80008a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80008aa:	443a      	add	r2, r7
 80008ac:	4413      	add	r3, r2
 80008ae:	ed93 7b00 	vldr	d7, [r3]
 80008b2:	eeb1 7b47 	vneg.f64	d7, d7
 80008b6:	f241 1370 	movw	r3, #4464	; 0x1170
 80008ba:	443b      	add	r3, r7
 80008bc:	ed83 7b02 	vstr	d7, [r3, #8]
  t269.re = t299.re;
 80008c0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80008c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008c8:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80008cc:	e9c2 3400 	strd	r3, r4, [r2]
  t269.im = theta2;
 80008d0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80008d4:	4b09      	ldr	r3, [pc, #36]	; (80008fc <G_q+0x314>)
 80008d6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80008da:	4439      	add	r1, r7
 80008dc:	440b      	add	r3, r1
 80008de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80008e2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t268.re = -t299.re;
 80008e6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80008ea:	ed93 7b00 	vldr	d7, [r3]
 80008ee:	e00f      	b.n	8000910 <G_q+0x328>
	...
 80008f8:	ffffec58 	.word	0xffffec58
 80008fc:	ffffec50 	.word	0xffffec50
 8000900:	ffffec48 	.word	0xffffec48
 8000904:	ffffec38 	.word	0xffffec38
 8000908:	ffffec34 	.word	0xffffec34
 800090c:	24000214 	.word	0x24000214
 8000910:	eeb1 7b47 	vneg.f64	d7, d7
 8000914:	f241 1350 	movw	r3, #4432	; 0x1150
 8000918:	443b      	add	r3, r7
 800091a:	ed83 7b00 	vstr	d7, [r3]
  t268.im = -theta2;
 800091e:	4bc0      	ldr	r3, [pc, #768]	; (8000c20 <G_q+0x638>)
 8000920:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000924:	443a      	add	r2, r7
 8000926:	4413      	add	r3, r2
 8000928:	ed93 7b00 	vldr	d7, [r3]
 800092c:	eeb1 7b47 	vneg.f64	d7, d7
 8000930:	f241 1350 	movw	r3, #4432	; 0x1150
 8000934:	443b      	add	r3, r7
 8000936:	ed83 7b02 	vstr	d7, [r3, #8]
  t263.re = t299.re;
 800093a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800093e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000942:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8000946:	e9c2 3400 	strd	r3, r4, [r2]
  t263.im = theta2;
 800094a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800094e:	4bb4      	ldr	r3, [pc, #720]	; (8000c20 <G_q+0x638>)
 8000950:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000954:	4439      	add	r1, r7
 8000956:	440b      	add	r3, r1
 8000958:	e9d3 3400 	ldrd	r3, r4, [r3]
 800095c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t262.re = -t299.re;
 8000960:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000964:	ed93 7b00 	vldr	d7, [r3]
 8000968:	eeb1 7b47 	vneg.f64	d7, d7
 800096c:	f241 1330 	movw	r3, #4400	; 0x1130
 8000970:	443b      	add	r3, r7
 8000972:	ed83 7b00 	vstr	d7, [r3]
  t262.im = -theta2;
 8000976:	4baa      	ldr	r3, [pc, #680]	; (8000c20 <G_q+0x638>)
 8000978:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800097c:	443a      	add	r2, r7
 800097e:	4413      	add	r3, r2
 8000980:	ed93 7b00 	vldr	d7, [r3]
 8000984:	eeb1 7b47 	vneg.f64	d7, d7
 8000988:	f241 1330 	movw	r3, #4400	; 0x1130
 800098c:	443b      	add	r3, r7
 800098e:	ed83 7b02 	vstr	d7, [r3, #8]
  t259.re = t299.re;
 8000992:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800099a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800099e:	e9c2 3400 	strd	r3, r4, [r2]
  t259.im = theta2;
 80009a2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80009a6:	4b9e      	ldr	r3, [pc, #632]	; (8000c20 <G_q+0x638>)
 80009a8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80009ac:	4439      	add	r1, r7
 80009ae:	440b      	add	r3, r1
 80009b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009b4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t258.re = -t299.re;
 80009b8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80009bc:	ed93 7b00 	vldr	d7, [r3]
 80009c0:	eeb1 7b47 	vneg.f64	d7, d7
 80009c4:	f241 1310 	movw	r3, #4368	; 0x1110
 80009c8:	443b      	add	r3, r7
 80009ca:	ed83 7b00 	vstr	d7, [r3]
  t258.im = -theta2;
 80009ce:	4b94      	ldr	r3, [pc, #592]	; (8000c20 <G_q+0x638>)
 80009d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80009d4:	443a      	add	r2, r7
 80009d6:	4413      	add	r3, r2
 80009d8:	ed93 7b00 	vldr	d7, [r3]
 80009dc:	eeb1 7b47 	vneg.f64	d7, d7
 80009e0:	f241 1310 	movw	r3, #4368	; 0x1110
 80009e4:	443b      	add	r3, r7
 80009e6:	ed83 7b02 	vstr	d7, [r3, #8]
  t251.re = t299.re;
 80009ea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80009ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009f2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80009f6:	e9c2 3400 	strd	r3, r4, [r2]
  t251.im = theta2;
 80009fa:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80009fe:	4b88      	ldr	r3, [pc, #544]	; (8000c20 <G_q+0x638>)
 8000a00:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000a04:	4439      	add	r1, r7
 8000a06:	440b      	add	r3, r1
 8000a08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a0c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t250.re = -t299.re;
 8000a10:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000a14:	ed93 7b00 	vldr	d7, [r3]
 8000a18:	eeb1 7b47 	vneg.f64	d7, d7
 8000a1c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000a20:	443b      	add	r3, r7
 8000a22:	ed83 7b00 	vstr	d7, [r3]
  t250.im = -theta2;
 8000a26:	4b7e      	ldr	r3, [pc, #504]	; (8000c20 <G_q+0x638>)
 8000a28:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000a2c:	443a      	add	r2, r7
 8000a2e:	4413      	add	r3, r2
 8000a30:	ed93 7b00 	vldr	d7, [r3]
 8000a34:	eeb1 7b47 	vneg.f64	d7, d7
 8000a38:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8000a3c:	443b      	add	r3, r7
 8000a3e:	ed83 7b02 	vstr	d7, [r3, #8]
  t249.re = t299.re;
 8000a42:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a4a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000a4e:	e9c2 3400 	strd	r3, r4, [r2]
  t249.im = theta2;
 8000a52:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8000a56:	4b72      	ldr	r3, [pc, #456]	; (8000c20 <G_q+0x638>)
 8000a58:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000a5c:	4439      	add	r1, r7
 8000a5e:	440b      	add	r3, r1
 8000a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000a64:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t248.re = -t299.re;
 8000a68:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000a6c:	ed93 7b00 	vldr	d7, [r3]
 8000a70:	eeb1 7b47 	vneg.f64	d7, d7
 8000a74:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8000a78:	443b      	add	r3, r7
 8000a7a:	ed83 7b00 	vstr	d7, [r3]
  t248.im = -theta2;
 8000a7e:	4b68      	ldr	r3, [pc, #416]	; (8000c20 <G_q+0x638>)
 8000a80:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000a84:	443a      	add	r2, r7
 8000a86:	4413      	add	r3, r2
 8000a88:	ed93 7b00 	vldr	d7, [r3]
 8000a8c:	eeb1 7b47 	vneg.f64	d7, d7
 8000a90:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8000a94:	443b      	add	r3, r7
 8000a96:	ed83 7b02 	vstr	d7, [r3, #8]
  t245.re = t299.re;
 8000a9a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000a9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000aa2:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000aa6:	e9c2 3400 	strd	r3, r4, [r2]
  t245.im = theta2;
 8000aaa:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8000aae:	4b5c      	ldr	r3, [pc, #368]	; (8000c20 <G_q+0x638>)
 8000ab0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000ab4:	4439      	add	r1, r7
 8000ab6:	440b      	add	r3, r1
 8000ab8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000abc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t244.re = -t299.re;
 8000ac0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000ac4:	ed93 7b00 	vldr	d7, [r3]
 8000ac8:	eeb1 7b47 	vneg.f64	d7, d7
 8000acc:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8000ad0:	443b      	add	r3, r7
 8000ad2:	ed83 7b00 	vstr	d7, [r3]
  t244.im = -theta2;
 8000ad6:	4b52      	ldr	r3, [pc, #328]	; (8000c20 <G_q+0x638>)
 8000ad8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000adc:	443a      	add	r2, r7
 8000ade:	4413      	add	r3, r2
 8000ae0:	ed93 7b00 	vldr	d7, [r3]
 8000ae4:	eeb1 7b47 	vneg.f64	d7, d7
 8000ae8:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8000aec:	443b      	add	r3, r7
 8000aee:	ed83 7b02 	vstr	d7, [r3, #8]
  t239.re = t299.re;
 8000af2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000af6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000afa:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000afe:	e9c2 3400 	strd	r3, r4, [r2]
  t239.im = theta2;
 8000b02:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8000b06:	4b46      	ldr	r3, [pc, #280]	; (8000c20 <G_q+0x638>)
 8000b08:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000b0c:	4439      	add	r1, r7
 8000b0e:	440b      	add	r3, r1
 8000b10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b14:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t238.re = -t299.re;
 8000b18:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000b1c:	ed93 7b00 	vldr	d7, [r3]
 8000b20:	eeb1 7b47 	vneg.f64	d7, d7
 8000b24:	f241 0390 	movw	r3, #4240	; 0x1090
 8000b28:	443b      	add	r3, r7
 8000b2a:	ed83 7b00 	vstr	d7, [r3]
  t238.im = -theta2;
 8000b2e:	4b3c      	ldr	r3, [pc, #240]	; (8000c20 <G_q+0x638>)
 8000b30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000b34:	443a      	add	r2, r7
 8000b36:	4413      	add	r3, r2
 8000b38:	ed93 7b00 	vldr	d7, [r3]
 8000b3c:	eeb1 7b47 	vneg.f64	d7, d7
 8000b40:	f241 0390 	movw	r3, #4240	; 0x1090
 8000b44:	443b      	add	r3, r7
 8000b46:	ed83 7b02 	vstr	d7, [r3, #8]
  t237.re = t299.re;
 8000b4a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000b4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b52:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8000b56:	e9c2 3400 	strd	r3, r4, [r2]
  t237.im = theta2;
 8000b5a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8000b5e:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <G_q+0x638>)
 8000b60:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000b64:	4439      	add	r1, r7
 8000b66:	440b      	add	r3, r1
 8000b68:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000b6c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t236.re = -t299.re;
 8000b70:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000b74:	ed93 7b00 	vldr	d7, [r3]
 8000b78:	eeb1 7b47 	vneg.f64	d7, d7
 8000b7c:	f241 0370 	movw	r3, #4208	; 0x1070
 8000b80:	443b      	add	r3, r7
 8000b82:	ed83 7b00 	vstr	d7, [r3]
  t236.im = -theta2;
 8000b86:	4b26      	ldr	r3, [pc, #152]	; (8000c20 <G_q+0x638>)
 8000b88:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000b8c:	443a      	add	r2, r7
 8000b8e:	4413      	add	r3, r2
 8000b90:	ed93 7b00 	vldr	d7, [r3]
 8000b94:	eeb1 7b47 	vneg.f64	d7, d7
 8000b98:	f241 0370 	movw	r3, #4208	; 0x1070
 8000b9c:	443b      	add	r3, r7
 8000b9e:	ed83 7b02 	vstr	d7, [r3, #8]
  t233.re = t299.re;
 8000ba2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000ba6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000baa:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000bae:	e9c2 3400 	strd	r3, r4, [r2]
  t233.im = theta2;
 8000bb2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <G_q+0x638>)
 8000bb8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000bbc:	4439      	add	r1, r7
 8000bbe:	440b      	add	r3, r1
 8000bc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000bc4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t232.re = -t299.re;
 8000bc8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000bcc:	ed93 7b00 	vldr	d7, [r3]
 8000bd0:	eeb1 7b47 	vneg.f64	d7, d7
 8000bd4:	f241 0350 	movw	r3, #4176	; 0x1050
 8000bd8:	443b      	add	r3, r7
 8000bda:	ed83 7b00 	vstr	d7, [r3]
  t232.im = -theta2;
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <G_q+0x638>)
 8000be0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000be4:	443a      	add	r2, r7
 8000be6:	4413      	add	r3, r2
 8000be8:	ed93 7b00 	vldr	d7, [r3]
 8000bec:	eeb1 7b47 	vneg.f64	d7, d7
 8000bf0:	f241 0350 	movw	r3, #4176	; 0x1050
 8000bf4:	443b      	add	r3, r7
 8000bf6:	ed83 7b02 	vstr	d7, [r3, #8]
  t227.re = t299.re;
 8000bfa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000bfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c02:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000c06:	e9c2 3400 	strd	r3, r4, [r2]
  t227.im = theta2;
 8000c0a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8000c0e:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <G_q+0x638>)
 8000c10:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000c14:	4439      	add	r1, r7
 8000c16:	440b      	add	r3, r1
 8000c18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c1c:	e002      	b.n	8000c24 <G_q+0x63c>
 8000c1e:	bf00      	nop
 8000c20:	ffffec50 	.word	0xffffec50
 8000c24:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t226.re = -t299.re;
 8000c28:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000c2c:	ed93 7b00 	vldr	d7, [r3]
 8000c30:	eeb1 7b47 	vneg.f64	d7, d7
 8000c34:	f241 0330 	movw	r3, #4144	; 0x1030
 8000c38:	443b      	add	r3, r7
 8000c3a:	ed83 7b00 	vstr	d7, [r3]
  t226.im = -theta2;
 8000c3e:	4bc4      	ldr	r3, [pc, #784]	; (8000f50 <G_q+0x968>)
 8000c40:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000c44:	443a      	add	r2, r7
 8000c46:	4413      	add	r3, r2
 8000c48:	ed93 7b00 	vldr	d7, [r3]
 8000c4c:	eeb1 7b47 	vneg.f64	d7, d7
 8000c50:	f241 0330 	movw	r3, #4144	; 0x1030
 8000c54:	443b      	add	r3, r7
 8000c56:	ed83 7b02 	vstr	d7, [r3, #8]
  t223.re = t299.re;
 8000c5a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000c5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c62:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c66:	e9c2 3400 	strd	r3, r4, [r2]
  t223.im = theta2;
 8000c6a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8000c6e:	4bb8      	ldr	r3, [pc, #736]	; (8000f50 <G_q+0x968>)
 8000c70:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000c74:	4439      	add	r1, r7
 8000c76:	440b      	add	r3, r1
 8000c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000c7c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t222.re = -t299.re;
 8000c80:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000c84:	ed93 7b00 	vldr	d7, [r3]
 8000c88:	eeb1 7b47 	vneg.f64	d7, d7
 8000c8c:	f241 0310 	movw	r3, #4112	; 0x1010
 8000c90:	443b      	add	r3, r7
 8000c92:	ed83 7b00 	vstr	d7, [r3]
  t222.im = -theta2;
 8000c96:	4bae      	ldr	r3, [pc, #696]	; (8000f50 <G_q+0x968>)
 8000c98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000c9c:	443a      	add	r2, r7
 8000c9e:	4413      	add	r3, r2
 8000ca0:	ed93 7b00 	vldr	d7, [r3]
 8000ca4:	eeb1 7b47 	vneg.f64	d7, d7
 8000ca8:	f241 0310 	movw	r3, #4112	; 0x1010
 8000cac:	443b      	add	r3, r7
 8000cae:	ed83 7b02 	vstr	d7, [r3, #8]
  t217.re = t299.re;
 8000cb2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000cb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cba:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000cbe:	e9c2 3400 	strd	r3, r4, [r2]
  t217.im = theta2;
 8000cc2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8000cc6:	4ba2      	ldr	r3, [pc, #648]	; (8000f50 <G_q+0x968>)
 8000cc8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000ccc:	4439      	add	r1, r7
 8000cce:	440b      	add	r3, r1
 8000cd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cd4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t216.re = -t299.re;
 8000cd8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000cdc:	ed93 7b00 	vldr	d7, [r3]
 8000ce0:	eeb1 7b47 	vneg.f64	d7, d7
 8000ce4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8000ce8:	ed83 7b00 	vstr	d7, [r3]
  t216.im = -theta2;
 8000cec:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <G_q+0x968>)
 8000cee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000cf2:	443a      	add	r2, r7
 8000cf4:	4413      	add	r3, r2
 8000cf6:	ed93 7b00 	vldr	d7, [r3]
 8000cfa:	eeb1 7b47 	vneg.f64	d7, d7
 8000cfe:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8000d02:	ed83 7b02 	vstr	d7, [r3, #8]
  t213.re = t299.re;
 8000d06:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000d0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d0e:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8000d12:	e9c2 3400 	strd	r3, r4, [r2]
  t213.im = theta2;
 8000d16:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8000d1a:	4b8d      	ldr	r3, [pc, #564]	; (8000f50 <G_q+0x968>)
 8000d1c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000d20:	4439      	add	r1, r7
 8000d22:	440b      	add	r3, r1
 8000d24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d28:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t212.re = -t299.re;
 8000d2c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000d30:	ed93 7b00 	vldr	d7, [r3]
 8000d34:	eeb1 7b47 	vneg.f64	d7, d7
 8000d38:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8000d3c:	ed83 7b00 	vstr	d7, [r3]
  t212.im = -theta2;
 8000d40:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <G_q+0x968>)
 8000d42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000d46:	443a      	add	r2, r7
 8000d48:	4413      	add	r3, r2
 8000d4a:	ed93 7b00 	vldr	d7, [r3]
 8000d4e:	eeb1 7b47 	vneg.f64	d7, d7
 8000d52:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8000d56:	ed83 7b02 	vstr	d7, [r3, #8]
  t205.re = t299.re;
 8000d5a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000d5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d62:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8000d66:	e9c2 3400 	strd	r3, r4, [r2]
  t205.im = theta2;
 8000d6a:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8000d6e:	4b78      	ldr	r3, [pc, #480]	; (8000f50 <G_q+0x968>)
 8000d70:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000d74:	4439      	add	r1, r7
 8000d76:	440b      	add	r3, r1
 8000d78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000d7c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t204.re = -t299.re;
 8000d80:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000d84:	ed93 7b00 	vldr	d7, [r3]
 8000d88:	eeb1 7b47 	vneg.f64	d7, d7
 8000d8c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8000d90:	ed83 7b00 	vstr	d7, [r3]
  t204.im = -theta2;
 8000d94:	4b6e      	ldr	r3, [pc, #440]	; (8000f50 <G_q+0x968>)
 8000d96:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000d9a:	443a      	add	r2, r7
 8000d9c:	4413      	add	r3, r2
 8000d9e:	ed93 7b00 	vldr	d7, [r3]
 8000da2:	eeb1 7b47 	vneg.f64	d7, d7
 8000da6:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8000daa:	ed83 7b02 	vstr	d7, [r3, #8]
  t203.re = t299.re;
 8000dae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000db2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000db6:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8000dba:	e9c2 3400 	strd	r3, r4, [r2]
  t203.im = theta2;
 8000dbe:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8000dc2:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <G_q+0x968>)
 8000dc4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000dc8:	4439      	add	r1, r7
 8000dca:	440b      	add	r3, r1
 8000dcc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dd0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t202.re = -t299.re;
 8000dd4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000dd8:	ed93 7b00 	vldr	d7, [r3]
 8000ddc:	eeb1 7b47 	vneg.f64	d7, d7
 8000de0:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8000de4:	ed83 7b00 	vstr	d7, [r3]
  t202.im = -theta2;
 8000de8:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <G_q+0x968>)
 8000dea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000dee:	443a      	add	r2, r7
 8000df0:	4413      	add	r3, r2
 8000df2:	ed93 7b00 	vldr	d7, [r3]
 8000df6:	eeb1 7b47 	vneg.f64	d7, d7
 8000dfa:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8000dfe:	ed83 7b02 	vstr	d7, [r3, #8]
  t199.re = t299.re;
 8000e02:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000e06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e0a:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8000e0e:	e9c2 3400 	strd	r3, r4, [r2]
  t199.im = theta2;
 8000e12:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8000e16:	4b4e      	ldr	r3, [pc, #312]	; (8000f50 <G_q+0x968>)
 8000e18:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000e1c:	4439      	add	r1, r7
 8000e1e:	440b      	add	r3, r1
 8000e20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e24:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t198.re = -t299.re;
 8000e28:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000e2c:	ed93 7b00 	vldr	d7, [r3]
 8000e30:	eeb1 7b47 	vneg.f64	d7, d7
 8000e34:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8000e38:	ed83 7b00 	vstr	d7, [r3]
  t198.im = -theta2;
 8000e3c:	4b44      	ldr	r3, [pc, #272]	; (8000f50 <G_q+0x968>)
 8000e3e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000e42:	443a      	add	r2, r7
 8000e44:	4413      	add	r3, r2
 8000e46:	ed93 7b00 	vldr	d7, [r3]
 8000e4a:	eeb1 7b47 	vneg.f64	d7, d7
 8000e4e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8000e52:	ed83 7b02 	vstr	d7, [r3, #8]
  t193.re = t299.re;
 8000e56:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000e5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e5e:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8000e62:	e9c2 3400 	strd	r3, r4, [r2]
  t193.im = theta2;
 8000e66:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8000e6a:	4b39      	ldr	r3, [pc, #228]	; (8000f50 <G_q+0x968>)
 8000e6c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000e70:	4439      	add	r1, r7
 8000e72:	440b      	add	r3, r1
 8000e74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000e78:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t192.re = -t299.re;
 8000e7c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000e80:	ed93 7b00 	vldr	d7, [r3]
 8000e84:	eeb1 7b47 	vneg.f64	d7, d7
 8000e88:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8000e8c:	ed83 7b00 	vstr	d7, [r3]
  t192.im = -theta2;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <G_q+0x968>)
 8000e92:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000e96:	443a      	add	r2, r7
 8000e98:	4413      	add	r3, r2
 8000e9a:	ed93 7b00 	vldr	d7, [r3]
 8000e9e:	eeb1 7b47 	vneg.f64	d7, d7
 8000ea2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8000ea6:	ed83 7b02 	vstr	d7, [r3, #8]
  t189.re = t299.re;
 8000eaa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000eae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eb2:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8000eb6:	e9c2 3400 	strd	r3, r4, [r2]
  t189.im = theta2;
 8000eba:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <G_q+0x968>)
 8000ec0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000ec4:	4439      	add	r1, r7
 8000ec6:	440b      	add	r3, r1
 8000ec8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000ecc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t188.re = -t299.re;
 8000ed0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000ed4:	ed93 7b00 	vldr	d7, [r3]
 8000ed8:	eeb1 7b47 	vneg.f64	d7, d7
 8000edc:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8000ee0:	ed83 7b00 	vstr	d7, [r3]
  t188.im = -theta2;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <G_q+0x968>)
 8000ee6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000eea:	443a      	add	r2, r7
 8000eec:	4413      	add	r3, r2
 8000eee:	ed93 7b00 	vldr	d7, [r3]
 8000ef2:	eeb1 7b47 	vneg.f64	d7, d7
 8000ef6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8000efa:	ed83 7b02 	vstr	d7, [r3, #8]
  t181.re = t299.re;
 8000efe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000f02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f06:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8000f0a:	e9c2 3400 	strd	r3, r4, [r2]
  t181.im = theta2;
 8000f0e:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <G_q+0x968>)
 8000f14:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000f18:	4439      	add	r1, r7
 8000f1a:	440b      	add	r3, r1
 8000f1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f20:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t180.re = -t299.re;
 8000f24:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000f28:	ed93 7b00 	vldr	d7, [r3]
 8000f2c:	eeb1 7b47 	vneg.f64	d7, d7
 8000f30:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8000f34:	ed83 7b00 	vstr	d7, [r3]
  t180.im = -theta2;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <G_q+0x968>)
 8000f3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000f3e:	443a      	add	r2, r7
 8000f40:	4413      	add	r3, r2
 8000f42:	ed93 7b00 	vldr	d7, [r3]
 8000f46:	eeb1 7b47 	vneg.f64	d7, d7
 8000f4a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8000f4e:	e001      	b.n	8000f54 <G_q+0x96c>
 8000f50:	ffffec50 	.word	0xffffec50
 8000f54:	ed83 7b02 	vstr	d7, [r3, #8]
  t179.re = t299.re;
 8000f58:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000f5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f60:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8000f64:	e9c2 3400 	strd	r3, r4, [r2]
  t179.im = theta2;
 8000f68:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8000f6c:	4bc3      	ldr	r3, [pc, #780]	; (800127c <G_q+0xc94>)
 8000f6e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000f72:	4439      	add	r1, r7
 8000f74:	440b      	add	r3, r1
 8000f76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000f7a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t178.re = -t299.re;
 8000f7e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000f82:	ed93 7b00 	vldr	d7, [r3]
 8000f86:	eeb1 7b47 	vneg.f64	d7, d7
 8000f8a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8000f8e:	ed83 7b00 	vstr	d7, [r3]
  t178.im = -theta2;
 8000f92:	4bba      	ldr	r3, [pc, #744]	; (800127c <G_q+0xc94>)
 8000f94:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000f98:	443a      	add	r2, r7
 8000f9a:	4413      	add	r3, r2
 8000f9c:	ed93 7b00 	vldr	d7, [r3]
 8000fa0:	eeb1 7b47 	vneg.f64	d7, d7
 8000fa4:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8000fa8:	ed83 7b02 	vstr	d7, [r3, #8]
  t175.re = t299.re;
 8000fac:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000fb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fb4:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8000fb8:	e9c2 3400 	strd	r3, r4, [r2]
  t175.im = theta2;
 8000fbc:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8000fc0:	4bae      	ldr	r3, [pc, #696]	; (800127c <G_q+0xc94>)
 8000fc2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8000fc6:	4439      	add	r1, r7
 8000fc8:	440b      	add	r3, r1
 8000fca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000fce:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t174.re = -t299.re;
 8000fd2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8000fd6:	ed93 7b00 	vldr	d7, [r3]
 8000fda:	eeb1 7b47 	vneg.f64	d7, d7
 8000fde:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8000fe2:	ed83 7b00 	vstr	d7, [r3]
  t174.im = -theta2;
 8000fe6:	4ba5      	ldr	r3, [pc, #660]	; (800127c <G_q+0xc94>)
 8000fe8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8000fec:	443a      	add	r2, r7
 8000fee:	4413      	add	r3, r2
 8000ff0:	ed93 7b00 	vldr	d7, [r3]
 8000ff4:	eeb1 7b47 	vneg.f64	d7, d7
 8000ff8:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8000ffc:	ed83 7b02 	vstr	d7, [r3, #8]
  t171.re = t299.re;
 8001000:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001004:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001008:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 800100c:	e9c2 3400 	strd	r3, r4, [r2]
  t171.im = theta2;
 8001010:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8001014:	4b99      	ldr	r3, [pc, #612]	; (800127c <G_q+0xc94>)
 8001016:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800101a:	4439      	add	r1, r7
 800101c:	440b      	add	r3, r1
 800101e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001022:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t170.re = -t299.re;
 8001026:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800102a:	ed93 7b00 	vldr	d7, [r3]
 800102e:	eeb1 7b47 	vneg.f64	d7, d7
 8001032:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8001036:	ed83 7b00 	vstr	d7, [r3]
  t170.im = -theta2;
 800103a:	4b90      	ldr	r3, [pc, #576]	; (800127c <G_q+0xc94>)
 800103c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001040:	443a      	add	r2, r7
 8001042:	4413      	add	r3, r2
 8001044:	ed93 7b00 	vldr	d7, [r3]
 8001048:	eeb1 7b47 	vneg.f64	d7, d7
 800104c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8001050:	ed83 7b02 	vstr	d7, [r3, #8]
  t167.re = t299.re;
 8001054:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001058:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105c:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8001060:	e9c2 3400 	strd	r3, r4, [r2]
  t167.im = theta2;
 8001064:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8001068:	4b84      	ldr	r3, [pc, #528]	; (800127c <G_q+0xc94>)
 800106a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800106e:	4439      	add	r1, r7
 8001070:	440b      	add	r3, r1
 8001072:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001076:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t166.re = -t299.re;
 800107a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800107e:	ed93 7b00 	vldr	d7, [r3]
 8001082:	eeb1 7b47 	vneg.f64	d7, d7
 8001086:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800108a:	ed83 7b00 	vstr	d7, [r3]
  t166.im = -theta2;
 800108e:	4b7b      	ldr	r3, [pc, #492]	; (800127c <G_q+0xc94>)
 8001090:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001094:	443a      	add	r2, r7
 8001096:	4413      	add	r3, r2
 8001098:	ed93 7b00 	vldr	d7, [r3]
 800109c:	eeb1 7b47 	vneg.f64	d7, d7
 80010a0:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 80010a4:	ed83 7b02 	vstr	d7, [r3, #8]
  t161.re = t299.re;
 80010a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80010ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010b0:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 80010b4:	e9c2 3400 	strd	r3, r4, [r2]
  t161.im = theta2;
 80010b8:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 80010bc:	4b6f      	ldr	r3, [pc, #444]	; (800127c <G_q+0xc94>)
 80010be:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80010c2:	4439      	add	r1, r7
 80010c4:	440b      	add	r3, r1
 80010c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80010ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t160.re = -t299.re;
 80010ce:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80010d2:	ed93 7b00 	vldr	d7, [r3]
 80010d6:	eeb1 7b47 	vneg.f64	d7, d7
 80010da:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80010de:	ed83 7b00 	vstr	d7, [r3]
  t160.im = -theta2;
 80010e2:	4b66      	ldr	r3, [pc, #408]	; (800127c <G_q+0xc94>)
 80010e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80010e8:	443a      	add	r2, r7
 80010ea:	4413      	add	r3, r2
 80010ec:	ed93 7b00 	vldr	d7, [r3]
 80010f0:	eeb1 7b47 	vneg.f64	d7, d7
 80010f4:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80010f8:	ed83 7b02 	vstr	d7, [r3, #8]
  t157.re = t299.re;
 80010fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001100:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001104:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8001108:	e9c2 3400 	strd	r3, r4, [r2]
  t157.im = theta2;
 800110c:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8001110:	4b5a      	ldr	r3, [pc, #360]	; (800127c <G_q+0xc94>)
 8001112:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001116:	4439      	add	r1, r7
 8001118:	440b      	add	r3, r1
 800111a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800111e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t156.re = -t299.re;
 8001122:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001126:	ed93 7b00 	vldr	d7, [r3]
 800112a:	eeb1 7b47 	vneg.f64	d7, d7
 800112e:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8001132:	ed83 7b00 	vstr	d7, [r3]
  t156.im = -theta2;
 8001136:	4b51      	ldr	r3, [pc, #324]	; (800127c <G_q+0xc94>)
 8001138:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800113c:	443a      	add	r2, r7
 800113e:	4413      	add	r3, r2
 8001140:	ed93 7b00 	vldr	d7, [r3]
 8001144:	eeb1 7b47 	vneg.f64	d7, d7
 8001148:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800114c:	ed83 7b02 	vstr	d7, [r3, #8]
  t149.re = t299.re;
 8001150:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001154:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001158:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 800115c:	e9c2 3400 	strd	r3, r4, [r2]
  t149.im = theta2;
 8001160:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8001164:	4b45      	ldr	r3, [pc, #276]	; (800127c <G_q+0xc94>)
 8001166:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800116a:	4439      	add	r1, r7
 800116c:	440b      	add	r3, r1
 800116e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001172:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t148.re = -t299.re;
 8001176:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800117a:	ed93 7b00 	vldr	d7, [r3]
 800117e:	eeb1 7b47 	vneg.f64	d7, d7
 8001182:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8001186:	ed83 7b00 	vstr	d7, [r3]
  t148.im = -theta2;
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <G_q+0xc94>)
 800118c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001190:	443a      	add	r2, r7
 8001192:	4413      	add	r3, r2
 8001194:	ed93 7b00 	vldr	d7, [r3]
 8001198:	eeb1 7b47 	vneg.f64	d7, d7
 800119c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80011a0:	ed83 7b02 	vstr	d7, [r3, #8]
  t147.re = t299.re;
 80011a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80011a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011ac:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 80011b0:	e9c2 3400 	strd	r3, r4, [r2]
  t147.im = theta2;
 80011b4:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <G_q+0xc94>)
 80011ba:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80011be:	4439      	add	r1, r7
 80011c0:	440b      	add	r3, r1
 80011c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011c6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t146.re = -t299.re;
 80011ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80011ce:	ed93 7b00 	vldr	d7, [r3]
 80011d2:	eeb1 7b47 	vneg.f64	d7, d7
 80011d6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80011da:	ed83 7b00 	vstr	d7, [r3]
  t146.im = -theta2;
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <G_q+0xc94>)
 80011e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80011e4:	443a      	add	r2, r7
 80011e6:	4413      	add	r3, r2
 80011e8:	ed93 7b00 	vldr	d7, [r3]
 80011ec:	eeb1 7b47 	vneg.f64	d7, d7
 80011f0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80011f4:	ed83 7b02 	vstr	d7, [r3, #8]
  t143.re = t299.re;
 80011f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80011fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001200:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 8001204:	e9c2 3400 	strd	r3, r4, [r2]
  t143.im = theta2;
 8001208:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <G_q+0xc94>)
 800120e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001212:	4439      	add	r1, r7
 8001214:	440b      	add	r3, r1
 8001216:	e9d3 3400 	ldrd	r3, r4, [r3]
 800121a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t142.re = -t299.re;
 800121e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001222:	ed93 7b00 	vldr	d7, [r3]
 8001226:	eeb1 7b47 	vneg.f64	d7, d7
 800122a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800122e:	ed83 7b00 	vstr	d7, [r3]
  t142.im = -theta2;
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <G_q+0xc94>)
 8001234:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001238:	443a      	add	r2, r7
 800123a:	4413      	add	r3, r2
 800123c:	ed93 7b00 	vldr	d7, [r3]
 8001240:	eeb1 7b47 	vneg.f64	d7, d7
 8001244:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8001248:	ed83 7b02 	vstr	d7, [r3, #8]
  t139.re = t299.re;
 800124c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001250:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001254:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8001258:	e9c2 3400 	strd	r3, r4, [r2]
  t139.im = theta2;
 800125c:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <G_q+0xc94>)
 8001262:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001266:	4439      	add	r1, r7
 8001268:	440b      	add	r3, r1
 800126a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800126e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t138.re = -t299.re;
 8001272:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001276:	ed93 7b00 	vldr	d7, [r3]
 800127a:	e001      	b.n	8001280 <G_q+0xc98>
 800127c:	ffffec50 	.word	0xffffec50
 8001280:	eeb1 7b47 	vneg.f64	d7, d7
 8001284:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8001288:	ed83 7b00 	vstr	d7, [r3]
  t138.im = -theta2;
 800128c:	4bc4      	ldr	r3, [pc, #784]	; (80015a0 <G_q+0xfb8>)
 800128e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001292:	443a      	add	r2, r7
 8001294:	4413      	add	r3, r2
 8001296:	ed93 7b00 	vldr	d7, [r3]
 800129a:	eeb1 7b47 	vneg.f64	d7, d7
 800129e:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80012a2:	ed83 7b02 	vstr	d7, [r3, #8]
  t133.re = t299.re;
 80012a6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80012aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012ae:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80012b2:	e9c2 3400 	strd	r3, r4, [r2]
  t133.im = theta2;
 80012b6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 80012ba:	4bb9      	ldr	r3, [pc, #740]	; (80015a0 <G_q+0xfb8>)
 80012bc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80012c0:	4439      	add	r1, r7
 80012c2:	440b      	add	r3, r1
 80012c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80012c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t132.re = -t299.re;
 80012cc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80012d0:	ed93 7b00 	vldr	d7, [r3]
 80012d4:	eeb1 7b47 	vneg.f64	d7, d7
 80012d8:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80012dc:	ed83 7b00 	vstr	d7, [r3]
  t132.im = -theta2;
 80012e0:	4baf      	ldr	r3, [pc, #700]	; (80015a0 <G_q+0xfb8>)
 80012e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80012e6:	443a      	add	r2, r7
 80012e8:	4413      	add	r3, r2
 80012ea:	ed93 7b00 	vldr	d7, [r3]
 80012ee:	eeb1 7b47 	vneg.f64	d7, d7
 80012f2:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80012f6:	ed83 7b02 	vstr	d7, [r3, #8]
  t127.re = t299.re;
 80012fa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80012fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001302:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 8001306:	e9c2 3400 	strd	r3, r4, [r2]
  t127.im = theta2;
 800130a:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 800130e:	4ba4      	ldr	r3, [pc, #656]	; (80015a0 <G_q+0xfb8>)
 8001310:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001314:	4439      	add	r1, r7
 8001316:	440b      	add	r3, r1
 8001318:	e9d3 3400 	ldrd	r3, r4, [r3]
 800131c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t126.re = -t299.re;
 8001320:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001324:	ed93 7b00 	vldr	d7, [r3]
 8001328:	eeb1 7b47 	vneg.f64	d7, d7
 800132c:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8001330:	ed83 7b00 	vstr	d7, [r3]
  t126.im = -theta2;
 8001334:	4b9a      	ldr	r3, [pc, #616]	; (80015a0 <G_q+0xfb8>)
 8001336:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800133a:	443a      	add	r2, r7
 800133c:	4413      	add	r3, r2
 800133e:	ed93 7b00 	vldr	d7, [r3]
 8001342:	eeb1 7b47 	vneg.f64	d7, d7
 8001346:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800134a:	ed83 7b02 	vstr	d7, [r3, #8]
  t119.re = t299.re;
 800134e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001352:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001356:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 800135a:	e9c2 3400 	strd	r3, r4, [r2]
  t119.im = theta2;
 800135e:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 8001362:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <G_q+0xfb8>)
 8001364:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001368:	4439      	add	r1, r7
 800136a:	440b      	add	r3, r1
 800136c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001370:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t118.re = -t299.re;
 8001374:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001378:	ed93 7b00 	vldr	d7, [r3]
 800137c:	eeb1 7b47 	vneg.f64	d7, d7
 8001380:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8001384:	ed83 7b00 	vstr	d7, [r3]
  t118.im = -theta2;
 8001388:	4b85      	ldr	r3, [pc, #532]	; (80015a0 <G_q+0xfb8>)
 800138a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800138e:	443a      	add	r2, r7
 8001390:	4413      	add	r3, r2
 8001392:	ed93 7b00 	vldr	d7, [r3]
 8001396:	eeb1 7b47 	vneg.f64	d7, d7
 800139a:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800139e:	ed83 7b02 	vstr	d7, [r3, #8]
  t117.re = t299.re;
 80013a2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80013a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013aa:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80013ae:	e9c2 3400 	strd	r3, r4, [r2]
  t117.im = theta2;
 80013b2:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80013b6:	4b7a      	ldr	r3, [pc, #488]	; (80015a0 <G_q+0xfb8>)
 80013b8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80013bc:	4439      	add	r1, r7
 80013be:	440b      	add	r3, r1
 80013c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t116.re = -t299.re;
 80013c8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80013cc:	ed93 7b00 	vldr	d7, [r3]
 80013d0:	eeb1 7b47 	vneg.f64	d7, d7
 80013d4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80013d8:	ed83 7b00 	vstr	d7, [r3]
  t116.im = -theta2;
 80013dc:	4b70      	ldr	r3, [pc, #448]	; (80015a0 <G_q+0xfb8>)
 80013de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80013e2:	443a      	add	r2, r7
 80013e4:	4413      	add	r3, r2
 80013e6:	ed93 7b00 	vldr	d7, [r3]
 80013ea:	eeb1 7b47 	vneg.f64	d7, d7
 80013ee:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80013f2:	ed83 7b02 	vstr	d7, [r3, #8]
  t111.re = t299.re;
 80013f6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80013fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80013fe:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 8001402:	e9c2 3400 	strd	r3, r4, [r2]
  t111.im = theta2;
 8001406:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 800140a:	4b65      	ldr	r3, [pc, #404]	; (80015a0 <G_q+0xfb8>)
 800140c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001410:	4439      	add	r1, r7
 8001412:	440b      	add	r3, r1
 8001414:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001418:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t110.re = -t299.re;
 800141c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001420:	ed93 7b00 	vldr	d7, [r3]
 8001424:	eeb1 7b47 	vneg.f64	d7, d7
 8001428:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800142c:	ed83 7b00 	vstr	d7, [r3]
  t110.im = -theta2;
 8001430:	4b5b      	ldr	r3, [pc, #364]	; (80015a0 <G_q+0xfb8>)
 8001432:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001436:	443a      	add	r2, r7
 8001438:	4413      	add	r3, r2
 800143a:	ed93 7b00 	vldr	d7, [r3]
 800143e:	eeb1 7b47 	vneg.f64	d7, d7
 8001442:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8001446:	ed83 7b02 	vstr	d7, [r3, #8]
  t105.re = t299.re;
 800144a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800144e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001452:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8001456:	e9c2 3400 	strd	r3, r4, [r2]
  t105.im = theta2;
 800145a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800145e:	4b50      	ldr	r3, [pc, #320]	; (80015a0 <G_q+0xfb8>)
 8001460:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001464:	4439      	add	r1, r7
 8001466:	440b      	add	r3, r1
 8001468:	e9d3 3400 	ldrd	r3, r4, [r3]
 800146c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t104.re = -t299.re;
 8001470:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001474:	ed93 7b00 	vldr	d7, [r3]
 8001478:	eeb1 7b47 	vneg.f64	d7, d7
 800147c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8001480:	ed83 7b00 	vstr	d7, [r3]
  t104.im = -theta2;
 8001484:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <G_q+0xfb8>)
 8001486:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800148a:	443a      	add	r2, r7
 800148c:	4413      	add	r3, r2
 800148e:	ed93 7b00 	vldr	d7, [r3]
 8001492:	eeb1 7b47 	vneg.f64	d7, d7
 8001496:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800149a:	ed83 7b02 	vstr	d7, [r3, #8]
  t97.re = t299.re;
 800149e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014a6:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80014aa:	e9c2 3400 	strd	r3, r4, [r2]
  t97.im = theta2;
 80014ae:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80014b2:	4b3b      	ldr	r3, [pc, #236]	; (80015a0 <G_q+0xfb8>)
 80014b4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80014b8:	4439      	add	r1, r7
 80014ba:	440b      	add	r3, r1
 80014bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t96.re = -t299.re;
 80014c4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014c8:	ed93 7b00 	vldr	d7, [r3]
 80014cc:	eeb1 7b47 	vneg.f64	d7, d7
 80014d0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80014d4:	ed83 7b00 	vstr	d7, [r3]
  t96.im = -theta2;
 80014d8:	4b31      	ldr	r3, [pc, #196]	; (80015a0 <G_q+0xfb8>)
 80014da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80014de:	443a      	add	r2, r7
 80014e0:	4413      	add	r3, r2
 80014e2:	ed93 7b00 	vldr	d7, [r3]
 80014e6:	eeb1 7b47 	vneg.f64	d7, d7
 80014ea:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80014ee:	ed83 7b02 	vstr	d7, [r3, #8]
  t95.re = t299.re;
 80014f2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80014f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014fa:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80014fe:	e9c2 3400 	strd	r3, r4, [r2]
  t95.im = theta2;
 8001502:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <G_q+0xfb8>)
 8001508:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800150c:	4439      	add	r1, r7
 800150e:	440b      	add	r3, r1
 8001510:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001514:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t94.re = -t299.re;
 8001518:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800151c:	ed93 7b00 	vldr	d7, [r3]
 8001520:	eeb1 7b47 	vneg.f64	d7, d7
 8001524:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8001528:	ed83 7b00 	vstr	d7, [r3]
  t94.im = -theta2;
 800152c:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <G_q+0xfb8>)
 800152e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001532:	443a      	add	r2, r7
 8001534:	4413      	add	r3, r2
 8001536:	ed93 7b00 	vldr	d7, [r3]
 800153a:	eeb1 7b47 	vneg.f64	d7, d7
 800153e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8001542:	ed83 7b02 	vstr	d7, [r3, #8]
  t83.re = t299.re;
 8001546:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800154a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800154e:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8001552:	e9c2 3400 	strd	r3, r4, [r2]
  t83.im = theta2;
 8001556:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <G_q+0xfb8>)
 800155c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001560:	4439      	add	r1, r7
 8001562:	440b      	add	r3, r1
 8001564:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001568:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t82.re = -t299.re;
 800156c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001570:	ed93 7b00 	vldr	d7, [r3]
 8001574:	eeb1 7b47 	vneg.f64	d7, d7
 8001578:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800157c:	ed83 7b00 	vstr	d7, [r3]
  t82.im = -theta2;
 8001580:	4b07      	ldr	r3, [pc, #28]	; (80015a0 <G_q+0xfb8>)
 8001582:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001586:	443a      	add	r2, r7
 8001588:	4413      	add	r3, r2
 800158a:	ed93 7b00 	vldr	d7, [r3]
 800158e:	eeb1 7b47 	vneg.f64	d7, d7
 8001592:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8001596:	ed83 7b02 	vstr	d7, [r3, #8]
  t79.re = t299.re;
 800159a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800159e:	e001      	b.n	80015a4 <G_q+0xfbc>
 80015a0:	ffffec50 	.word	0xffffec50
 80015a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015a8:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80015ac:	e9c2 3400 	strd	r3, r4, [r2]
  t79.im = theta2;
 80015b0:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80015b4:	4bc3      	ldr	r3, [pc, #780]	; (80018c4 <G_q+0x12dc>)
 80015b6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80015ba:	4439      	add	r1, r7
 80015bc:	440b      	add	r3, r1
 80015be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t78.re = -t299.re;
 80015c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80015ca:	ed93 7b00 	vldr	d7, [r3]
 80015ce:	eeb1 7b47 	vneg.f64	d7, d7
 80015d2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80015d6:	ed83 7b00 	vstr	d7, [r3]
  t78.im = -theta2;
 80015da:	4bba      	ldr	r3, [pc, #744]	; (80018c4 <G_q+0x12dc>)
 80015dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80015e0:	443a      	add	r2, r7
 80015e2:	4413      	add	r3, r2
 80015e4:	ed93 7b00 	vldr	d7, [r3]
 80015e8:	eeb1 7b47 	vneg.f64	d7, d7
 80015ec:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80015f0:	ed83 7b02 	vstr	d7, [r3, #8]
  t77.re = t299.re;
 80015f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80015f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80015fc:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8001600:	e9c2 3400 	strd	r3, r4, [r2]
  t77.im = theta2;
 8001604:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8001608:	4bae      	ldr	r3, [pc, #696]	; (80018c4 <G_q+0x12dc>)
 800160a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800160e:	4439      	add	r1, r7
 8001610:	440b      	add	r3, r1
 8001612:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001616:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t76.re = -t299.re;
 800161a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800161e:	ed93 7b00 	vldr	d7, [r3]
 8001622:	eeb1 7b47 	vneg.f64	d7, d7
 8001626:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800162a:	ed83 7b00 	vstr	d7, [r3]
  t76.im = -theta2;
 800162e:	4ba5      	ldr	r3, [pc, #660]	; (80018c4 <G_q+0x12dc>)
 8001630:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001634:	443a      	add	r2, r7
 8001636:	4413      	add	r3, r2
 8001638:	ed93 7b00 	vldr	d7, [r3]
 800163c:	eeb1 7b47 	vneg.f64	d7, d7
 8001640:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8001644:	ed83 7b02 	vstr	d7, [r3, #8]
  t71.re = t299.re;
 8001648:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800164c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001650:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8001654:	e9c2 3400 	strd	r3, r4, [r2]
  t71.im = theta2;
 8001658:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 800165c:	4b99      	ldr	r3, [pc, #612]	; (80018c4 <G_q+0x12dc>)
 800165e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001662:	4439      	add	r1, r7
 8001664:	440b      	add	r3, r1
 8001666:	e9d3 3400 	ldrd	r3, r4, [r3]
 800166a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t70.re = -t299.re;
 800166e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001672:	ed93 7b00 	vldr	d7, [r3]
 8001676:	eeb1 7b47 	vneg.f64	d7, d7
 800167a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 800167e:	ed83 7b00 	vstr	d7, [r3]
  t70.im = -theta2;
 8001682:	4b90      	ldr	r3, [pc, #576]	; (80018c4 <G_q+0x12dc>)
 8001684:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001688:	443a      	add	r2, r7
 800168a:	4413      	add	r3, r2
 800168c:	ed93 7b00 	vldr	d7, [r3]
 8001690:	eeb1 7b47 	vneg.f64	d7, d7
 8001694:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8001698:	ed83 7b02 	vstr	d7, [r3, #8]
  t67.re = t299.re;
 800169c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80016a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80016a8:	e9c2 3400 	strd	r3, r4, [r2]
  t67.im = theta2;
 80016ac:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <G_q+0x12dc>)
 80016b2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80016b6:	4439      	add	r1, r7
 80016b8:	440b      	add	r3, r1
 80016ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016be:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t66.re = -t299.re;
 80016c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80016c6:	ed93 7b00 	vldr	d7, [r3]
 80016ca:	eeb1 7b47 	vneg.f64	d7, d7
 80016ce:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80016d2:	ed83 7b00 	vstr	d7, [r3]
  t66.im = -theta2;
 80016d6:	4b7b      	ldr	r3, [pc, #492]	; (80018c4 <G_q+0x12dc>)
 80016d8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80016dc:	443a      	add	r2, r7
 80016de:	4413      	add	r3, r2
 80016e0:	ed93 7b00 	vldr	d7, [r3]
 80016e4:	eeb1 7b47 	vneg.f64	d7, d7
 80016e8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80016ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t63.re = t299.re;
 80016f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80016f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016f8:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 80016fc:	e9c2 3400 	strd	r3, r4, [r2]
  t63.im = theta2;
 8001700:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8001704:	4b6f      	ldr	r3, [pc, #444]	; (80018c4 <G_q+0x12dc>)
 8001706:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800170a:	4439      	add	r1, r7
 800170c:	440b      	add	r3, r1
 800170e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001712:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t62.re = -t299.re;
 8001716:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800171a:	ed93 7b00 	vldr	d7, [r3]
 800171e:	eeb1 7b47 	vneg.f64	d7, d7
 8001722:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001726:	ed83 7b00 	vstr	d7, [r3]
  t62.im = -theta2;
 800172a:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <G_q+0x12dc>)
 800172c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001730:	443a      	add	r2, r7
 8001732:	4413      	add	r3, r2
 8001734:	ed93 7b00 	vldr	d7, [r3]
 8001738:	eeb1 7b47 	vneg.f64	d7, d7
 800173c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8001740:	ed83 7b02 	vstr	d7, [r3, #8]
  t61.re = t299.re;
 8001744:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800174c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001750:	e9c2 3400 	strd	r3, r4, [r2]
  t61.im = theta2;
 8001754:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8001758:	4b5a      	ldr	r3, [pc, #360]	; (80018c4 <G_q+0x12dc>)
 800175a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800175e:	4439      	add	r1, r7
 8001760:	440b      	add	r3, r1
 8001762:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001766:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t60.re = -t299.re;
 800176a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800176e:	ed93 7b00 	vldr	d7, [r3]
 8001772:	eeb1 7b47 	vneg.f64	d7, d7
 8001776:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 800177a:	ed83 7b00 	vstr	d7, [r3]
  t60.im = -theta2;
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <G_q+0x12dc>)
 8001780:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001784:	443a      	add	r2, r7
 8001786:	4413      	add	r3, r2
 8001788:	ed93 7b00 	vldr	d7, [r3]
 800178c:	eeb1 7b47 	vneg.f64	d7, d7
 8001790:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8001794:	ed83 7b02 	vstr	d7, [r3, #8]
  t57.re = t299.re;
 8001798:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800179c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017a0:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80017a4:	e9c2 3400 	strd	r3, r4, [r2]
  t57.im = theta2;
 80017a8:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80017ac:	4b45      	ldr	r3, [pc, #276]	; (80018c4 <G_q+0x12dc>)
 80017ae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80017b2:	4439      	add	r1, r7
 80017b4:	440b      	add	r3, r1
 80017b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t56.re = -t299.re;
 80017be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80017c2:	ed93 7b00 	vldr	d7, [r3]
 80017c6:	eeb1 7b47 	vneg.f64	d7, d7
 80017ca:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80017ce:	ed83 7b00 	vstr	d7, [r3]
  t56.im = -theta2;
 80017d2:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <G_q+0x12dc>)
 80017d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80017d8:	443a      	add	r2, r7
 80017da:	4413      	add	r3, r2
 80017dc:	ed93 7b00 	vldr	d7, [r3]
 80017e0:	eeb1 7b47 	vneg.f64	d7, d7
 80017e4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80017e8:	ed83 7b02 	vstr	d7, [r3, #8]
  t50.re = t299.re;
 80017ec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80017f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80017f4:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 80017f8:	e9c2 3400 	strd	r3, r4, [r2]
  t50.im = theta2;
 80017fc:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8001800:	4b30      	ldr	r3, [pc, #192]	; (80018c4 <G_q+0x12dc>)
 8001802:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001806:	4439      	add	r1, r7
 8001808:	440b      	add	r3, r1
 800180a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800180e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t49.re = -t299.re;
 8001812:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001816:	ed93 7b00 	vldr	d7, [r3]
 800181a:	eeb1 7b47 	vneg.f64	d7, d7
 800181e:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8001822:	ed83 7b00 	vstr	d7, [r3]
  t49.im = -theta2;
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <G_q+0x12dc>)
 8001828:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800182c:	443a      	add	r2, r7
 800182e:	4413      	add	r3, r2
 8001830:	ed93 7b00 	vldr	d7, [r3]
 8001834:	eeb1 7b47 	vneg.f64	d7, d7
 8001838:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800183c:	ed83 7b02 	vstr	d7, [r3, #8]
  t46.re = t299.re;
 8001840:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001844:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001848:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800184c:	e9c2 3400 	strd	r3, r4, [r2]
  t46.im = theta2;
 8001850:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8001854:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <G_q+0x12dc>)
 8001856:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800185a:	4439      	add	r1, r7
 800185c:	440b      	add	r3, r1
 800185e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001862:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t45.re = -t299.re;
 8001866:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800186a:	ed93 7b00 	vldr	d7, [r3]
 800186e:	eeb1 7b47 	vneg.f64	d7, d7
 8001872:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8001876:	ed83 7b00 	vstr	d7, [r3]
  t45.im = -theta2;
 800187a:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <G_q+0x12dc>)
 800187c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001880:	443a      	add	r2, r7
 8001882:	4413      	add	r3, r2
 8001884:	ed93 7b00 	vldr	d7, [r3]
 8001888:	eeb1 7b47 	vneg.f64	d7, d7
 800188c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8001890:	ed83 7b02 	vstr	d7, [r3, #8]
  t44.re = t299.re;
 8001894:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800189c:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80018a0:	e9c2 3400 	strd	r3, r4, [r2]
  t44.im = theta2;
 80018a4:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <G_q+0x12dc>)
 80018aa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80018ae:	4439      	add	r1, r7
 80018b0:	440b      	add	r3, r1
 80018b2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018b6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t43.re = -t299.re;
 80018ba:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80018be:	ed93 7b00 	vldr	d7, [r3]
 80018c2:	e001      	b.n	80018c8 <G_q+0x12e0>
 80018c4:	ffffec50 	.word	0xffffec50
 80018c8:	eeb1 7b47 	vneg.f64	d7, d7
 80018cc:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80018d0:	ed83 7b00 	vstr	d7, [r3]
  t43.im = -theta2;
 80018d4:	4bc6      	ldr	r3, [pc, #792]	; (8001bf0 <G_q+0x1608>)
 80018d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80018da:	443a      	add	r2, r7
 80018dc:	4413      	add	r3, r2
 80018de:	ed93 7b00 	vldr	d7, [r3]
 80018e2:	eeb1 7b47 	vneg.f64	d7, d7
 80018e6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80018ea:	ed83 7b02 	vstr	d7, [r3, #8]
  t40.re = t299.re;
 80018ee:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80018f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018f6:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 80018fa:	e9c2 3400 	strd	r3, r4, [r2]
  t40.im = theta2;
 80018fe:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8001902:	4bbb      	ldr	r3, [pc, #748]	; (8001bf0 <G_q+0x1608>)
 8001904:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001908:	4439      	add	r1, r7
 800190a:	440b      	add	r3, r1
 800190c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001910:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t39.re = -t299.re;
 8001914:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001918:	ed93 7b00 	vldr	d7, [r3]
 800191c:	eeb1 7b47 	vneg.f64	d7, d7
 8001920:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001924:	ed83 7b00 	vstr	d7, [r3]
  t39.im = -theta2;
 8001928:	4bb1      	ldr	r3, [pc, #708]	; (8001bf0 <G_q+0x1608>)
 800192a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800192e:	443a      	add	r2, r7
 8001930:	4413      	add	r3, r2
 8001932:	ed93 7b00 	vldr	d7, [r3]
 8001936:	eeb1 7b47 	vneg.f64	d7, d7
 800193a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800193e:	ed83 7b02 	vstr	d7, [r3, #8]
  t34.re = t299.re;
 8001942:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001946:	e9d3 3400 	ldrd	r3, r4, [r3]
 800194a:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 800194e:	e9c2 3400 	strd	r3, r4, [r2]
  t34.im = theta2;
 8001952:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8001956:	4ba6      	ldr	r3, [pc, #664]	; (8001bf0 <G_q+0x1608>)
 8001958:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800195c:	4439      	add	r1, r7
 800195e:	440b      	add	r3, r1
 8001960:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001964:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t33.re = -t299.re;
 8001968:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800196c:	ed93 7b00 	vldr	d7, [r3]
 8001970:	eeb1 7b47 	vneg.f64	d7, d7
 8001974:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001978:	ed83 7b00 	vstr	d7, [r3]
  t33.im = -theta2;
 800197c:	4b9c      	ldr	r3, [pc, #624]	; (8001bf0 <G_q+0x1608>)
 800197e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001982:	443a      	add	r2, r7
 8001984:	4413      	add	r3, r2
 8001986:	ed93 7b00 	vldr	d7, [r3]
 800198a:	eeb1 7b47 	vneg.f64	d7, d7
 800198e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8001992:	ed83 7b02 	vstr	d7, [r3, #8]
  t30.re = t299.re;
 8001996:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800199a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800199e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80019a2:	e9c2 3400 	strd	r3, r4, [r2]
  t30.im = theta2;
 80019a6:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80019aa:	4b91      	ldr	r3, [pc, #580]	; (8001bf0 <G_q+0x1608>)
 80019ac:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80019b0:	4439      	add	r1, r7
 80019b2:	440b      	add	r3, r1
 80019b4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t29.re = -t299.re;
 80019bc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80019c0:	ed93 7b00 	vldr	d7, [r3]
 80019c4:	eeb1 7b47 	vneg.f64	d7, d7
 80019c8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80019cc:	ed83 7b00 	vstr	d7, [r3]
  t29.im = -theta2;
 80019d0:	4b87      	ldr	r3, [pc, #540]	; (8001bf0 <G_q+0x1608>)
 80019d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80019d6:	443a      	add	r2, r7
 80019d8:	4413      	add	r3, r2
 80019da:	ed93 7b00 	vldr	d7, [r3]
 80019de:	eeb1 7b47 	vneg.f64	d7, d7
 80019e2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80019e6:	ed83 7b02 	vstr	d7, [r3, #8]
  t26.re = t299.re;
 80019ea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80019ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80019f2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80019f6:	e9c2 3400 	strd	r3, r4, [r2]
  t26.im = theta2;
 80019fa:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80019fe:	4b7c      	ldr	r3, [pc, #496]	; (8001bf0 <G_q+0x1608>)
 8001a00:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001a04:	4439      	add	r1, r7
 8001a06:	440b      	add	r3, r1
 8001a08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a0c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t25.re = -t299.re;
 8001a10:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001a14:	ed93 7b00 	vldr	d7, [r3]
 8001a18:	eeb1 7b47 	vneg.f64	d7, d7
 8001a1c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8001a20:	ed83 7b00 	vstr	d7, [r3]
  t25.im = -theta2;
 8001a24:	4b72      	ldr	r3, [pc, #456]	; (8001bf0 <G_q+0x1608>)
 8001a26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001a2a:	443a      	add	r2, r7
 8001a2c:	4413      	add	r3, r2
 8001a2e:	ed93 7b00 	vldr	d7, [r3]
 8001a32:	eeb1 7b47 	vneg.f64	d7, d7
 8001a36:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8001a3a:	ed83 7b02 	vstr	d7, [r3, #8]
  t24.re = t299.re;
 8001a3e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001a42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a46:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8001a4a:	e9c2 3400 	strd	r3, r4, [r2]
  t24.im = theta2;
 8001a4e:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8001a52:	4b67      	ldr	r3, [pc, #412]	; (8001bf0 <G_q+0x1608>)
 8001a54:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001a58:	4439      	add	r1, r7
 8001a5a:	440b      	add	r3, r1
 8001a5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a60:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t23.re = -t299.re;
 8001a64:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001a68:	ed93 7b00 	vldr	d7, [r3]
 8001a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8001a70:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001a74:	ed83 7b00 	vstr	d7, [r3]
  t23.im = -theta2;
 8001a78:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <G_q+0x1608>)
 8001a7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001a7e:	443a      	add	r2, r7
 8001a80:	4413      	add	r3, r2
 8001a82:	ed93 7b00 	vldr	d7, [r3]
 8001a86:	eeb1 7b47 	vneg.f64	d7, d7
 8001a8a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001a8e:	ed83 7b02 	vstr	d7, [r3, #8]
  t15.re = t299.re;
 8001a92:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001a96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a9a:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8001a9e:	e9c2 3400 	strd	r3, r4, [r2]
  t15.im = theta2;
 8001aa2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <G_q+0x1608>)
 8001aa8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001aac:	4439      	add	r1, r7
 8001aae:	440b      	add	r3, r1
 8001ab0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ab4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t14.re = -t299.re;
 8001ab8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001abc:	ed93 7b00 	vldr	d7, [r3]
 8001ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8001ac4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001ac8:	ed83 7b00 	vstr	d7, [r3]
  t14.im = -theta2;
 8001acc:	4b48      	ldr	r3, [pc, #288]	; (8001bf0 <G_q+0x1608>)
 8001ace:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001ad2:	443a      	add	r2, r7
 8001ad4:	4413      	add	r3, r2
 8001ad6:	ed93 7b00 	vldr	d7, [r3]
 8001ada:	eeb1 7b47 	vneg.f64	d7, d7
 8001ade:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001ae2:	ed83 7b02 	vstr	d7, [r3, #8]
  t11.re = t299.re;
 8001ae6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001aea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aee:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8001af2:	e9c2 3400 	strd	r3, r4, [r2]
  t11.im = theta2;
 8001af6:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8001afa:	4b3d      	ldr	r3, [pc, #244]	; (8001bf0 <G_q+0x1608>)
 8001afc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001b00:	4439      	add	r1, r7
 8001b02:	440b      	add	r3, r1
 8001b04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b08:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t10.re = -t299.re;
 8001b0c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001b10:	ed93 7b00 	vldr	d7, [r3]
 8001b14:	eeb1 7b47 	vneg.f64	d7, d7
 8001b18:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001b1c:	ed83 7b00 	vstr	d7, [r3]
  t10.im = -theta2;
 8001b20:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <G_q+0x1608>)
 8001b22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001b26:	443a      	add	r2, r7
 8001b28:	4413      	add	r3, r2
 8001b2a:	ed93 7b00 	vldr	d7, [r3]
 8001b2e:	eeb1 7b47 	vneg.f64	d7, d7
 8001b32:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001b36:	ed83 7b02 	vstr	d7, [r3, #8]
  t6.re = t299.re;
 8001b3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001b3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b42:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8001b46:	e9c2 3400 	strd	r3, r4, [r2]
  t6.im = theta2;
 8001b4a:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <G_q+0x1608>)
 8001b50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001b54:	4439      	add	r1, r7
 8001b56:	440b      	add	r3, r1
 8001b58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t5.re = -t299.re;
 8001b60:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001b64:	ed93 7b00 	vldr	d7, [r3]
 8001b68:	eeb1 7b47 	vneg.f64	d7, d7
 8001b6c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001b70:	ed83 7b00 	vstr	d7, [r3]
  t5.im = -theta2;
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <G_q+0x1608>)
 8001b76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001b7a:	443a      	add	r2, r7
 8001b7c:	4413      	add	r3, r2
 8001b7e:	ed93 7b00 	vldr	d7, [r3]
 8001b82:	eeb1 7b47 	vneg.f64	d7, d7
 8001b86:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001b8a:	ed83 7b02 	vstr	d7, [r3, #8]
  t4.re = t299.re;
 8001b8e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001b92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b96:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8001b9a:	e9c2 3400 	strd	r3, r4, [r2]
  t4.im = theta2;
 8001b9e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8001ba2:	4b13      	ldr	r3, [pc, #76]	; (8001bf0 <G_q+0x1608>)
 8001ba4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001ba8:	4439      	add	r1, r7
 8001baa:	440b      	add	r3, r1
 8001bac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bb0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t3.re = -t299.re;
 8001bb4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8001bb8:	ed93 7b00 	vldr	d7, [r3]
 8001bbc:	eeb1 7b47 	vneg.f64	d7, d7
 8001bc0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001bc4:	ed83 7b00 	vstr	d7, [r3]
  t3.im = -theta2;
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <G_q+0x1608>)
 8001bca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001bce:	443a      	add	r2, r7
 8001bd0:	4413      	add	r3, r2
 8001bd2:	ed93 7b00 	vldr	d7, [r3]
 8001bd6:	eeb1 7b47 	vneg.f64	d7, d7
 8001bda:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001bde:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t3);
 8001be2:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8001be6:	4618      	mov	r0, r3
 8001be8:	f00e fe0a 	bl	8010800 <b_exp>
 8001bec:	e002      	b.n	8001bf4 <G_q+0x160c>
 8001bee:	bf00      	nop
 8001bf0:	ffffec50 	.word	0xffffec50
  t297.re = theta3 * 0.0;
 8001bf4:	4bc6      	ldr	r3, [pc, #792]	; (8001f10 <G_q+0x1928>)
 8001bf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001bfa:	443a      	add	r2, r7
 8001bfc:	4413      	add	r3, r2
 8001bfe:	ed93 7b00 	vldr	d7, [r3]
 8001c02:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8001f08 <G_q+0x1920>
 8001c06:	ee27 7b06 	vmul.f64	d7, d7, d6
 8001c0a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001c0e:	ed83 7b00 	vstr	d7, [r3]
  t297.im = theta3;
 8001c12:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 8001c16:	4bbe      	ldr	r3, [pc, #760]	; (8001f10 <G_q+0x1928>)
 8001c18:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001c1c:	4439      	add	r1, r7
 8001c1e:	440b      	add	r3, r1
 8001c20:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c24:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t296.re = -t297.re;
 8001c28:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001c2c:	ed93 7b00 	vldr	d7, [r3]
 8001c30:	eeb1 7b47 	vneg.f64	d7, d7
 8001c34:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8001c38:	ed83 7b00 	vstr	d7, [r3]
  t296.im = -theta3;
 8001c3c:	4bb4      	ldr	r3, [pc, #720]	; (8001f10 <G_q+0x1928>)
 8001c3e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001c42:	443a      	add	r2, r7
 8001c44:	4413      	add	r3, r2
 8001c46:	ed93 7b00 	vldr	d7, [r3]
 8001c4a:	eeb1 7b47 	vneg.f64	d7, d7
 8001c4e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8001c52:	ed83 7b02 	vstr	d7, [r3, #8]
  t295.re = t297.re;
 8001c56:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c5e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8001c62:	e9c2 3400 	strd	r3, r4, [r2]
  t295.im = theta3;
 8001c66:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8001c6a:	4ba9      	ldr	r3, [pc, #676]	; (8001f10 <G_q+0x1928>)
 8001c6c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001c70:	4439      	add	r1, r7
 8001c72:	440b      	add	r3, r1
 8001c74:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c78:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t294.re = -t297.re;
 8001c7c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001c80:	ed93 7b00 	vldr	d7, [r3]
 8001c84:	eeb1 7b47 	vneg.f64	d7, d7
 8001c88:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8001c8c:	ed83 7b00 	vstr	d7, [r3]
  t294.im = -theta3;
 8001c90:	4b9f      	ldr	r3, [pc, #636]	; (8001f10 <G_q+0x1928>)
 8001c92:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001c96:	443a      	add	r2, r7
 8001c98:	4413      	add	r3, r2
 8001c9a:	ed93 7b00 	vldr	d7, [r3]
 8001c9e:	eeb1 7b47 	vneg.f64	d7, d7
 8001ca2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8001ca6:	ed83 7b02 	vstr	d7, [r3, #8]
  t289.re = t297.re;
 8001caa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001cae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001cb2:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8001cb6:	e9c2 3400 	strd	r3, r4, [r2]
  t289.im = theta3;
 8001cba:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8001cbe:	4b94      	ldr	r3, [pc, #592]	; (8001f10 <G_q+0x1928>)
 8001cc0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001cc4:	4439      	add	r1, r7
 8001cc6:	440b      	add	r3, r1
 8001cc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ccc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t288.re = -t297.re;
 8001cd0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001cd4:	ed93 7b00 	vldr	d7, [r3]
 8001cd8:	eeb1 7b47 	vneg.f64	d7, d7
 8001cdc:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8001ce0:	ed83 7b00 	vstr	d7, [r3]
  t288.im = -theta3;
 8001ce4:	4b8a      	ldr	r3, [pc, #552]	; (8001f10 <G_q+0x1928>)
 8001ce6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001cea:	443a      	add	r2, r7
 8001cec:	4413      	add	r3, r2
 8001cee:	ed93 7b00 	vldr	d7, [r3]
 8001cf2:	eeb1 7b47 	vneg.f64	d7, d7
 8001cf6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8001cfa:	ed83 7b02 	vstr	d7, [r3, #8]
  t283.re = t297.re;
 8001cfe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001d02:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d06:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8001d0a:	e9c2 3400 	strd	r3, r4, [r2]
  t283.im = theta3;
 8001d0e:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8001d12:	4b7f      	ldr	r3, [pc, #508]	; (8001f10 <G_q+0x1928>)
 8001d14:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001d18:	4439      	add	r1, r7
 8001d1a:	440b      	add	r3, r1
 8001d1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d20:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t282.re = -t297.re;
 8001d24:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001d28:	ed93 7b00 	vldr	d7, [r3]
 8001d2c:	eeb1 7b47 	vneg.f64	d7, d7
 8001d30:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8001d34:	ed83 7b00 	vstr	d7, [r3]
  t282.im = -theta3;
 8001d38:	4b75      	ldr	r3, [pc, #468]	; (8001f10 <G_q+0x1928>)
 8001d3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001d3e:	443a      	add	r2, r7
 8001d40:	4413      	add	r3, r2
 8001d42:	ed93 7b00 	vldr	d7, [r3]
 8001d46:	eeb1 7b47 	vneg.f64	d7, d7
 8001d4a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8001d4e:	ed83 7b02 	vstr	d7, [r3, #8]
  t275.re = t297.re;
 8001d52:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d5a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8001d5e:	e9c2 3400 	strd	r3, r4, [r2]
  t275.im = theta3;
 8001d62:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8001d66:	4b6a      	ldr	r3, [pc, #424]	; (8001f10 <G_q+0x1928>)
 8001d68:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001d6c:	4439      	add	r1, r7
 8001d6e:	440b      	add	r3, r1
 8001d70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d74:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t274.re = -t297.re;
 8001d78:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001d7c:	ed93 7b00 	vldr	d7, [r3]
 8001d80:	eeb1 7b47 	vneg.f64	d7, d7
 8001d84:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001d88:	ed83 7b00 	vstr	d7, [r3]
  t274.im = -theta3;
 8001d8c:	4b60      	ldr	r3, [pc, #384]	; (8001f10 <G_q+0x1928>)
 8001d8e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001d92:	443a      	add	r2, r7
 8001d94:	4413      	add	r3, r2
 8001d96:	ed93 7b00 	vldr	d7, [r3]
 8001d9a:	eeb1 7b47 	vneg.f64	d7, d7
 8001d9e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8001da2:	ed83 7b02 	vstr	d7, [r3, #8]
  t271.re = t297.re;
 8001da6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001daa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dae:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8001db2:	e9c2 3400 	strd	r3, r4, [r2]
  t271.im = theta3;
 8001db6:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8001dba:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <G_q+0x1928>)
 8001dbc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001dc0:	4439      	add	r1, r7
 8001dc2:	440b      	add	r3, r1
 8001dc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dc8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t270.re = -t297.re;
 8001dcc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001dd0:	ed93 7b00 	vldr	d7, [r3]
 8001dd4:	eeb1 7b47 	vneg.f64	d7, d7
 8001dd8:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8001ddc:	ed83 7b00 	vstr	d7, [r3]
  t270.im = -theta3;
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <G_q+0x1928>)
 8001de2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001de6:	443a      	add	r2, r7
 8001de8:	4413      	add	r3, r2
 8001dea:	ed93 7b00 	vldr	d7, [r3]
 8001dee:	eeb1 7b47 	vneg.f64	d7, d7
 8001df2:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8001df6:	ed83 7b02 	vstr	d7, [r3, #8]
  t261.re = t297.re;
 8001dfa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001dfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e02:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8001e06:	e9c2 3400 	strd	r3, r4, [r2]
  t261.im = theta3;
 8001e0a:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8001e0e:	4b40      	ldr	r3, [pc, #256]	; (8001f10 <G_q+0x1928>)
 8001e10:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001e14:	4439      	add	r1, r7
 8001e16:	440b      	add	r3, r1
 8001e18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e1c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t260.re = -t297.re;
 8001e20:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001e24:	ed93 7b00 	vldr	d7, [r3]
 8001e28:	eeb1 7b47 	vneg.f64	d7, d7
 8001e2c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8001e30:	ed83 7b00 	vstr	d7, [r3]
  t260.im = -theta3;
 8001e34:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <G_q+0x1928>)
 8001e36:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001e3a:	443a      	add	r2, r7
 8001e3c:	4413      	add	r3, r2
 8001e3e:	ed93 7b00 	vldr	d7, [r3]
 8001e42:	eeb1 7b47 	vneg.f64	d7, d7
 8001e46:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8001e4a:	ed83 7b02 	vstr	d7, [r3, #8]
  t257.re = t297.re;
 8001e4e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001e52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e56:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8001e5a:	e9c2 3400 	strd	r3, r4, [r2]
  t257.im = theta3;
 8001e5e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8001e62:	4b2b      	ldr	r3, [pc, #172]	; (8001f10 <G_q+0x1928>)
 8001e64:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001e68:	4439      	add	r1, r7
 8001e6a:	440b      	add	r3, r1
 8001e6c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e70:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t256.re = -t297.re;
 8001e74:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001e78:	ed93 7b00 	vldr	d7, [r3]
 8001e7c:	eeb1 7b47 	vneg.f64	d7, d7
 8001e80:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001e84:	ed83 7b00 	vstr	d7, [r3]
  t256.im = -theta3;
 8001e88:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <G_q+0x1928>)
 8001e8a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001e8e:	443a      	add	r2, r7
 8001e90:	4413      	add	r3, r2
 8001e92:	ed93 7b00 	vldr	d7, [r3]
 8001e96:	eeb1 7b47 	vneg.f64	d7, d7
 8001e9a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8001e9e:	ed83 7b02 	vstr	d7, [r3, #8]
  t253.re = t297.re;
 8001ea2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001ea6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eaa:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8001eae:	e9c2 3400 	strd	r3, r4, [r2]
  t253.im = theta3;
 8001eb2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <G_q+0x1928>)
 8001eb8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001ebc:	4439      	add	r1, r7
 8001ebe:	440b      	add	r3, r1
 8001ec0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ec4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t252.re = -t297.re;
 8001ec8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001ecc:	ed93 7b00 	vldr	d7, [r3]
 8001ed0:	eeb1 7b47 	vneg.f64	d7, d7
 8001ed4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8001ed8:	ed83 7b00 	vstr	d7, [r3]
  t252.im = -theta3;
 8001edc:	4b0c      	ldr	r3, [pc, #48]	; (8001f10 <G_q+0x1928>)
 8001ede:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001ee2:	443a      	add	r2, r7
 8001ee4:	4413      	add	r3, r2
 8001ee6:	ed93 7b00 	vldr	d7, [r3]
 8001eea:	eeb1 7b47 	vneg.f64	d7, d7
 8001eee:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8001ef2:	ed83 7b02 	vstr	d7, [r3, #8]
  t247.re = t297.re;
 8001ef6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001efa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001efe:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8001f02:	e007      	b.n	8001f14 <G_q+0x192c>
 8001f04:	f3af 8000 	nop.w
	...
 8001f10:	ffffec48 	.word	0xffffec48
 8001f14:	e9c2 3400 	strd	r3, r4, [r2]
  t247.im = theta3;
 8001f18:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8001f1c:	4bc3      	ldr	r3, [pc, #780]	; (800222c <G_q+0x1c44>)
 8001f1e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001f22:	4439      	add	r1, r7
 8001f24:	440b      	add	r3, r1
 8001f26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f2a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t246.re = -t297.re;
 8001f2e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001f32:	ed93 7b00 	vldr	d7, [r3]
 8001f36:	eeb1 7b47 	vneg.f64	d7, d7
 8001f3a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001f3e:	ed83 7b00 	vstr	d7, [r3]
  t246.im = -theta3;
 8001f42:	4bba      	ldr	r3, [pc, #744]	; (800222c <G_q+0x1c44>)
 8001f44:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001f48:	443a      	add	r2, r7
 8001f4a:	4413      	add	r3, r2
 8001f4c:	ed93 7b00 	vldr	d7, [r3]
 8001f50:	eeb1 7b47 	vneg.f64	d7, d7
 8001f54:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8001f58:	ed83 7b02 	vstr	d7, [r3, #8]
  t241.re = t297.re;
 8001f5c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f64:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8001f68:	e9c2 3400 	strd	r3, r4, [r2]
  t241.im = theta3;
 8001f6c:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8001f70:	4bae      	ldr	r3, [pc, #696]	; (800222c <G_q+0x1c44>)
 8001f72:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001f76:	4439      	add	r1, r7
 8001f78:	440b      	add	r3, r1
 8001f7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f7e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t240.re = -t297.re;
 8001f82:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001f86:	ed93 7b00 	vldr	d7, [r3]
 8001f8a:	eeb1 7b47 	vneg.f64	d7, d7
 8001f8e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001f92:	ed83 7b00 	vstr	d7, [r3]
  t240.im = -theta3;
 8001f96:	4ba5      	ldr	r3, [pc, #660]	; (800222c <G_q+0x1c44>)
 8001f98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001f9c:	443a      	add	r2, r7
 8001f9e:	4413      	add	r3, r2
 8001fa0:	ed93 7b00 	vldr	d7, [r3]
 8001fa4:	eeb1 7b47 	vneg.f64	d7, d7
 8001fa8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8001fac:	ed83 7b02 	vstr	d7, [r3, #8]
  t235.re = t297.re;
 8001fb0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001fb4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fb8:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8001fbc:	e9c2 3400 	strd	r3, r4, [r2]
  t235.im = theta3;
 8001fc0:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8001fc4:	4b99      	ldr	r3, [pc, #612]	; (800222c <G_q+0x1c44>)
 8001fc6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8001fca:	4439      	add	r1, r7
 8001fcc:	440b      	add	r3, r1
 8001fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fd2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t234.re = -t297.re;
 8001fd6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8001fda:	ed93 7b00 	vldr	d7, [r3]
 8001fde:	eeb1 7b47 	vneg.f64	d7, d7
 8001fe2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8001fe6:	ed83 7b00 	vstr	d7, [r3]
  t234.im = -theta3;
 8001fea:	4b90      	ldr	r3, [pc, #576]	; (800222c <G_q+0x1c44>)
 8001fec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8001ff0:	443a      	add	r2, r7
 8001ff2:	4413      	add	r3, r2
 8001ff4:	ed93 7b00 	vldr	d7, [r3]
 8001ff8:	eeb1 7b47 	vneg.f64	d7, d7
 8001ffc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8002000:	ed83 7b02 	vstr	d7, [r3, #8]
  t225.re = t297.re;
 8002004:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002008:	e9d3 3400 	ldrd	r3, r4, [r3]
 800200c:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8002010:	e9c2 3400 	strd	r3, r4, [r2]
  t225.im = theta3;
 8002014:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8002018:	4b84      	ldr	r3, [pc, #528]	; (800222c <G_q+0x1c44>)
 800201a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800201e:	4439      	add	r1, r7
 8002020:	440b      	add	r3, r1
 8002022:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002026:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t224.re = -t297.re;
 800202a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800202e:	ed93 7b00 	vldr	d7, [r3]
 8002032:	eeb1 7b47 	vneg.f64	d7, d7
 8002036:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800203a:	ed83 7b00 	vstr	d7, [r3]
  t224.im = -theta3;
 800203e:	4b7b      	ldr	r3, [pc, #492]	; (800222c <G_q+0x1c44>)
 8002040:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002044:	443a      	add	r2, r7
 8002046:	4413      	add	r3, r2
 8002048:	ed93 7b00 	vldr	d7, [r3]
 800204c:	eeb1 7b47 	vneg.f64	d7, d7
 8002050:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8002054:	ed83 7b02 	vstr	d7, [r3, #8]
  t221.re = t297.re;
 8002058:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800205c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002060:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8002064:	e9c2 3400 	strd	r3, r4, [r2]
  t221.im = theta3;
 8002068:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800206c:	4b6f      	ldr	r3, [pc, #444]	; (800222c <G_q+0x1c44>)
 800206e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002072:	4439      	add	r1, r7
 8002074:	440b      	add	r3, r1
 8002076:	e9d3 3400 	ldrd	r3, r4, [r3]
 800207a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t220.re = -t297.re;
 800207e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002082:	ed93 7b00 	vldr	d7, [r3]
 8002086:	eeb1 7b47 	vneg.f64	d7, d7
 800208a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800208e:	ed83 7b00 	vstr	d7, [r3]
  t220.im = -theta3;
 8002092:	4b66      	ldr	r3, [pc, #408]	; (800222c <G_q+0x1c44>)
 8002094:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002098:	443a      	add	r2, r7
 800209a:	4413      	add	r3, r2
 800209c:	ed93 7b00 	vldr	d7, [r3]
 80020a0:	eeb1 7b47 	vneg.f64	d7, d7
 80020a4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80020a8:	ed83 7b02 	vstr	d7, [r3, #8]
  t215.re = t297.re;
 80020ac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80020b0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020b4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80020b8:	e9c2 3400 	strd	r3, r4, [r2]
  t215.im = theta3;
 80020bc:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80020c0:	4b5a      	ldr	r3, [pc, #360]	; (800222c <G_q+0x1c44>)
 80020c2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80020c6:	4439      	add	r1, r7
 80020c8:	440b      	add	r3, r1
 80020ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020ce:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t214.re = -t297.re;
 80020d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80020d6:	ed93 7b00 	vldr	d7, [r3]
 80020da:	eeb1 7b47 	vneg.f64	d7, d7
 80020de:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80020e2:	ed83 7b00 	vstr	d7, [r3]
  t214.im = -theta3;
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <G_q+0x1c44>)
 80020e8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80020ec:	443a      	add	r2, r7
 80020ee:	4413      	add	r3, r2
 80020f0:	ed93 7b00 	vldr	d7, [r3]
 80020f4:	eeb1 7b47 	vneg.f64	d7, d7
 80020f8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80020fc:	ed83 7b02 	vstr	d7, [r3, #8]
  t211.re = t297.re;
 8002100:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002104:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002108:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 800210c:	e9c2 3400 	strd	r3, r4, [r2]
  t211.im = theta3;
 8002110:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8002114:	4b45      	ldr	r3, [pc, #276]	; (800222c <G_q+0x1c44>)
 8002116:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800211a:	4439      	add	r1, r7
 800211c:	440b      	add	r3, r1
 800211e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002122:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t210.re = -t297.re;
 8002126:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800212a:	ed93 7b00 	vldr	d7, [r3]
 800212e:	eeb1 7b47 	vneg.f64	d7, d7
 8002132:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8002136:	ed83 7b00 	vstr	d7, [r3]
  t210.im = -theta3;
 800213a:	4b3c      	ldr	r3, [pc, #240]	; (800222c <G_q+0x1c44>)
 800213c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002140:	443a      	add	r2, r7
 8002142:	4413      	add	r3, r2
 8002144:	ed93 7b00 	vldr	d7, [r3]
 8002148:	eeb1 7b47 	vneg.f64	d7, d7
 800214c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8002150:	ed83 7b02 	vstr	d7, [r3, #8]
  t207.re = t297.re;
 8002154:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002158:	e9d3 3400 	ldrd	r3, r4, [r3]
 800215c:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8002160:	e9c2 3400 	strd	r3, r4, [r2]
  t207.im = theta3;
 8002164:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8002168:	4b30      	ldr	r3, [pc, #192]	; (800222c <G_q+0x1c44>)
 800216a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800216e:	4439      	add	r1, r7
 8002170:	440b      	add	r3, r1
 8002172:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002176:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t206.re = -t297.re;
 800217a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800217e:	ed93 7b00 	vldr	d7, [r3]
 8002182:	eeb1 7b47 	vneg.f64	d7, d7
 8002186:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800218a:	ed83 7b00 	vstr	d7, [r3]
  t206.im = -theta3;
 800218e:	4b27      	ldr	r3, [pc, #156]	; (800222c <G_q+0x1c44>)
 8002190:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002194:	443a      	add	r2, r7
 8002196:	4413      	add	r3, r2
 8002198:	ed93 7b00 	vldr	d7, [r3]
 800219c:	eeb1 7b47 	vneg.f64	d7, d7
 80021a0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 80021a4:	ed83 7b02 	vstr	d7, [r3, #8]
  t201.re = t297.re;
 80021a8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80021ac:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021b0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80021b4:	e9c2 3400 	strd	r3, r4, [r2]
  t201.im = theta3;
 80021b8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 80021bc:	4b1b      	ldr	r3, [pc, #108]	; (800222c <G_q+0x1c44>)
 80021be:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80021c2:	4439      	add	r1, r7
 80021c4:	440b      	add	r3, r1
 80021c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021ca:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t200.re = -t297.re;
 80021ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80021d2:	ed93 7b00 	vldr	d7, [r3]
 80021d6:	eeb1 7b47 	vneg.f64	d7, d7
 80021da:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80021de:	ed83 7b00 	vstr	d7, [r3]
  t200.im = -theta3;
 80021e2:	4b12      	ldr	r3, [pc, #72]	; (800222c <G_q+0x1c44>)
 80021e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80021e8:	443a      	add	r2, r7
 80021ea:	4413      	add	r3, r2
 80021ec:	ed93 7b00 	vldr	d7, [r3]
 80021f0:	eeb1 7b47 	vneg.f64	d7, d7
 80021f4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80021f8:	ed83 7b02 	vstr	d7, [r3, #8]
  t191.re = t297.re;
 80021fc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002200:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002204:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8002208:	e9c2 3400 	strd	r3, r4, [r2]
  t191.im = theta3;
 800220c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <G_q+0x1c44>)
 8002212:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002216:	4439      	add	r1, r7
 8002218:	440b      	add	r3, r1
 800221a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800221e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t190.re = -t297.re;
 8002222:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002226:	ed93 7b00 	vldr	d7, [r3]
 800222a:	e001      	b.n	8002230 <G_q+0x1c48>
 800222c:	ffffec48 	.word	0xffffec48
 8002230:	eeb1 7b47 	vneg.f64	d7, d7
 8002234:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002238:	ed83 7b00 	vstr	d7, [r3]
  t190.im = -theta3;
 800223c:	4bc4      	ldr	r3, [pc, #784]	; (8002550 <G_q+0x1f68>)
 800223e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002242:	443a      	add	r2, r7
 8002244:	4413      	add	r3, r2
 8002246:	ed93 7b00 	vldr	d7, [r3]
 800224a:	eeb1 7b47 	vneg.f64	d7, d7
 800224e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8002252:	ed83 7b02 	vstr	d7, [r3, #8]
  t187.re = t297.re;
 8002256:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800225a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800225e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8002262:	e9c2 3400 	strd	r3, r4, [r2]
  t187.im = theta3;
 8002266:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800226a:	4bb9      	ldr	r3, [pc, #740]	; (8002550 <G_q+0x1f68>)
 800226c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002270:	4439      	add	r1, r7
 8002272:	440b      	add	r3, r1
 8002274:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002278:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t186.re = -t297.re;
 800227c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002280:	ed93 7b00 	vldr	d7, [r3]
 8002284:	eeb1 7b47 	vneg.f64	d7, d7
 8002288:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800228c:	ed83 7b00 	vstr	d7, [r3]
  t186.im = -theta3;
 8002290:	4baf      	ldr	r3, [pc, #700]	; (8002550 <G_q+0x1f68>)
 8002292:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002296:	443a      	add	r2, r7
 8002298:	4413      	add	r3, r2
 800229a:	ed93 7b00 	vldr	d7, [r3]
 800229e:	eeb1 7b47 	vneg.f64	d7, d7
 80022a2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 80022a6:	ed83 7b02 	vstr	d7, [r3, #8]
  t183.re = t297.re;
 80022aa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80022ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022b2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80022b6:	e9c2 3400 	strd	r3, r4, [r2]
  t183.im = theta3;
 80022ba:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 80022be:	4ba4      	ldr	r3, [pc, #656]	; (8002550 <G_q+0x1f68>)
 80022c0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80022c4:	4439      	add	r1, r7
 80022c6:	440b      	add	r3, r1
 80022c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80022cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t182.re = -t297.re;
 80022d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80022d4:	ed93 7b00 	vldr	d7, [r3]
 80022d8:	eeb1 7b47 	vneg.f64	d7, d7
 80022dc:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80022e0:	ed83 7b00 	vstr	d7, [r3]
  t182.im = -theta3;
 80022e4:	4b9a      	ldr	r3, [pc, #616]	; (8002550 <G_q+0x1f68>)
 80022e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80022ea:	443a      	add	r2, r7
 80022ec:	4413      	add	r3, r2
 80022ee:	ed93 7b00 	vldr	d7, [r3]
 80022f2:	eeb1 7b47 	vneg.f64	d7, d7
 80022f6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80022fa:	ed83 7b02 	vstr	d7, [r3, #8]
  t177.re = t297.re;
 80022fe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002302:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002306:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800230a:	e9c2 3400 	strd	r3, r4, [r2]
  t177.im = theta3;
 800230e:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8002312:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <G_q+0x1f68>)
 8002314:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002318:	4439      	add	r1, r7
 800231a:	440b      	add	r3, r1
 800231c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002320:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t176.re = -t297.re;
 8002324:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002328:	ed93 7b00 	vldr	d7, [r3]
 800232c:	eeb1 7b47 	vneg.f64	d7, d7
 8002330:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8002334:	ed83 7b00 	vstr	d7, [r3]
  t176.im = -theta3;
 8002338:	4b85      	ldr	r3, [pc, #532]	; (8002550 <G_q+0x1f68>)
 800233a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800233e:	443a      	add	r2, r7
 8002340:	4413      	add	r3, r2
 8002342:	ed93 7b00 	vldr	d7, [r3]
 8002346:	eeb1 7b47 	vneg.f64	d7, d7
 800234a:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800234e:	ed83 7b02 	vstr	d7, [r3, #8]
  t169.re = t297.re;
 8002352:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002356:	e9d3 3400 	ldrd	r3, r4, [r3]
 800235a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800235e:	e9c2 3400 	strd	r3, r4, [r2]
  t169.im = theta3;
 8002362:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8002366:	4b7a      	ldr	r3, [pc, #488]	; (8002550 <G_q+0x1f68>)
 8002368:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800236c:	4439      	add	r1, r7
 800236e:	440b      	add	r3, r1
 8002370:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002374:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t168.re = -t297.re;
 8002378:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800237c:	ed93 7b00 	vldr	d7, [r3]
 8002380:	eeb1 7b47 	vneg.f64	d7, d7
 8002384:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8002388:	ed83 7b00 	vstr	d7, [r3]
  t168.im = -theta3;
 800238c:	4b70      	ldr	r3, [pc, #448]	; (8002550 <G_q+0x1f68>)
 800238e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002392:	443a      	add	r2, r7
 8002394:	4413      	add	r3, r2
 8002396:	ed93 7b00 	vldr	d7, [r3]
 800239a:	eeb1 7b47 	vneg.f64	d7, d7
 800239e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80023a2:	ed83 7b02 	vstr	d7, [r3, #8]
  t165.re = t297.re;
 80023a6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80023aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023ae:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80023b2:	e9c2 3400 	strd	r3, r4, [r2]
  t165.im = theta3;
 80023b6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <G_q+0x1f68>)
 80023bc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80023c0:	4439      	add	r1, r7
 80023c2:	440b      	add	r3, r1
 80023c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023c8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t164.re = -t297.re;
 80023cc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80023d0:	ed93 7b00 	vldr	d7, [r3]
 80023d4:	eeb1 7b47 	vneg.f64	d7, d7
 80023d8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80023dc:	ed83 7b00 	vstr	d7, [r3]
  t164.im = -theta3;
 80023e0:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <G_q+0x1f68>)
 80023e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80023e6:	443a      	add	r2, r7
 80023e8:	4413      	add	r3, r2
 80023ea:	ed93 7b00 	vldr	d7, [r3]
 80023ee:	eeb1 7b47 	vneg.f64	d7, d7
 80023f2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80023f6:	ed83 7b02 	vstr	d7, [r3, #8]
  t163.re = t297.re;
 80023fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80023fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002402:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8002406:	e9c2 3400 	strd	r3, r4, [r2]
  t163.im = theta3;
 800240a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800240e:	4b50      	ldr	r3, [pc, #320]	; (8002550 <G_q+0x1f68>)
 8002410:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002414:	4439      	add	r1, r7
 8002416:	440b      	add	r3, r1
 8002418:	e9d3 3400 	ldrd	r3, r4, [r3]
 800241c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t162.re = -t297.re;
 8002420:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002424:	ed93 7b00 	vldr	d7, [r3]
 8002428:	eeb1 7b47 	vneg.f64	d7, d7
 800242c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8002430:	ed83 7b00 	vstr	d7, [r3]
  t162.im = -theta3;
 8002434:	4b46      	ldr	r3, [pc, #280]	; (8002550 <G_q+0x1f68>)
 8002436:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800243a:	443a      	add	r2, r7
 800243c:	4413      	add	r3, r2
 800243e:	ed93 7b00 	vldr	d7, [r3]
 8002442:	eeb1 7b47 	vneg.f64	d7, d7
 8002446:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800244a:	ed83 7b02 	vstr	d7, [r3, #8]
  t155.re = t297.re;
 800244e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002452:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002456:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800245a:	e9c2 3400 	strd	r3, r4, [r2]
  t155.im = theta3;
 800245e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <G_q+0x1f68>)
 8002464:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002468:	4439      	add	r1, r7
 800246a:	440b      	add	r3, r1
 800246c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002470:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t154.re = -t297.re;
 8002474:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002478:	ed93 7b00 	vldr	d7, [r3]
 800247c:	eeb1 7b47 	vneg.f64	d7, d7
 8002480:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8002484:	ed83 7b00 	vstr	d7, [r3]
  t154.im = -theta3;
 8002488:	4b31      	ldr	r3, [pc, #196]	; (8002550 <G_q+0x1f68>)
 800248a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800248e:	443a      	add	r2, r7
 8002490:	4413      	add	r3, r2
 8002492:	ed93 7b00 	vldr	d7, [r3]
 8002496:	eeb1 7b47 	vneg.f64	d7, d7
 800249a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800249e:	ed83 7b02 	vstr	d7, [r3, #8]
  t151.re = t297.re;
 80024a2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80024a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024aa:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80024ae:	e9c2 3400 	strd	r3, r4, [r2]
  t151.im = theta3;
 80024b2:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80024b6:	4b26      	ldr	r3, [pc, #152]	; (8002550 <G_q+0x1f68>)
 80024b8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80024bc:	4439      	add	r1, r7
 80024be:	440b      	add	r3, r1
 80024c0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024c4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t150.re = -t297.re;
 80024c8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80024cc:	ed93 7b00 	vldr	d7, [r3]
 80024d0:	eeb1 7b47 	vneg.f64	d7, d7
 80024d4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80024d8:	ed83 7b00 	vstr	d7, [r3]
  t150.im = -theta3;
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <G_q+0x1f68>)
 80024de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80024e2:	443a      	add	r2, r7
 80024e4:	4413      	add	r3, r2
 80024e6:	ed93 7b00 	vldr	d7, [r3]
 80024ea:	eeb1 7b47 	vneg.f64	d7, d7
 80024ee:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80024f2:	ed83 7b02 	vstr	d7, [r3, #8]
  t145.re = t297.re;
 80024f6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80024fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024fe:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 8002502:	e9c2 3400 	strd	r3, r4, [r2]
  t145.im = theta3;
 8002506:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800250a:	4b11      	ldr	r3, [pc, #68]	; (8002550 <G_q+0x1f68>)
 800250c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002510:	4439      	add	r1, r7
 8002512:	440b      	add	r3, r1
 8002514:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002518:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t144.re = -t297.re;
 800251c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002520:	ed93 7b00 	vldr	d7, [r3]
 8002524:	eeb1 7b47 	vneg.f64	d7, d7
 8002528:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800252c:	ed83 7b00 	vstr	d7, [r3]
  t144.im = -theta3;
 8002530:	4b07      	ldr	r3, [pc, #28]	; (8002550 <G_q+0x1f68>)
 8002532:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002536:	443a      	add	r2, r7
 8002538:	4413      	add	r3, r2
 800253a:	ed93 7b00 	vldr	d7, [r3]
 800253e:	eeb1 7b47 	vneg.f64	d7, d7
 8002542:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8002546:	ed83 7b02 	vstr	d7, [r3, #8]
  t141.re = t297.re;
 800254a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800254e:	e001      	b.n	8002554 <G_q+0x1f6c>
 8002550:	ffffec48 	.word	0xffffec48
 8002554:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002558:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800255c:	e9c2 3400 	strd	r3, r4, [r2]
  t141.im = theta3;
 8002560:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8002564:	4bc3      	ldr	r3, [pc, #780]	; (8002874 <G_q+0x228c>)
 8002566:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800256a:	4439      	add	r1, r7
 800256c:	440b      	add	r3, r1
 800256e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002572:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t140.re = -t297.re;
 8002576:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800257a:	ed93 7b00 	vldr	d7, [r3]
 800257e:	eeb1 7b47 	vneg.f64	d7, d7
 8002582:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8002586:	ed83 7b00 	vstr	d7, [r3]
  t140.im = -theta3;
 800258a:	4bba      	ldr	r3, [pc, #744]	; (8002874 <G_q+0x228c>)
 800258c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002590:	443a      	add	r2, r7
 8002592:	4413      	add	r3, r2
 8002594:	ed93 7b00 	vldr	d7, [r3]
 8002598:	eeb1 7b47 	vneg.f64	d7, d7
 800259c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80025a0:	ed83 7b02 	vstr	d7, [r3, #8]
  t137.re = t297.re;
 80025a4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80025a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025ac:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80025b0:	e9c2 3400 	strd	r3, r4, [r2]
  t137.im = theta3;
 80025b4:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80025b8:	4bae      	ldr	r3, [pc, #696]	; (8002874 <G_q+0x228c>)
 80025ba:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80025be:	4439      	add	r1, r7
 80025c0:	440b      	add	r3, r1
 80025c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025c6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t136.re = -t297.re;
 80025ca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80025ce:	ed93 7b00 	vldr	d7, [r3]
 80025d2:	eeb1 7b47 	vneg.f64	d7, d7
 80025d6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80025da:	ed83 7b00 	vstr	d7, [r3]
  t136.im = -theta3;
 80025de:	4ba5      	ldr	r3, [pc, #660]	; (8002874 <G_q+0x228c>)
 80025e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025e4:	443a      	add	r2, r7
 80025e6:	4413      	add	r3, r2
 80025e8:	ed93 7b00 	vldr	d7, [r3]
 80025ec:	eeb1 7b47 	vneg.f64	d7, d7
 80025f0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80025f4:	ed83 7b02 	vstr	d7, [r3, #8]
  t131.re = t297.re;
 80025f8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80025fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002600:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8002604:	e9c2 3400 	strd	r3, r4, [r2]
  t131.im = theta3;
 8002608:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800260c:	4b99      	ldr	r3, [pc, #612]	; (8002874 <G_q+0x228c>)
 800260e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002612:	4439      	add	r1, r7
 8002614:	440b      	add	r3, r1
 8002616:	e9d3 3400 	ldrd	r3, r4, [r3]
 800261a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t130.re = -t297.re;
 800261e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002622:	ed93 7b00 	vldr	d7, [r3]
 8002626:	eeb1 7b47 	vneg.f64	d7, d7
 800262a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800262e:	ed83 7b00 	vstr	d7, [r3]
  t130.im = -theta3;
 8002632:	4b90      	ldr	r3, [pc, #576]	; (8002874 <G_q+0x228c>)
 8002634:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002638:	443a      	add	r2, r7
 800263a:	4413      	add	r3, r2
 800263c:	ed93 7b00 	vldr	d7, [r3]
 8002640:	eeb1 7b47 	vneg.f64	d7, d7
 8002644:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8002648:	ed83 7b02 	vstr	d7, [r3, #8]
  t129.re = t297.re;
 800264c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002650:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002654:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8002658:	e9c2 3400 	strd	r3, r4, [r2]
  t129.im = theta3;
 800265c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8002660:	4b84      	ldr	r3, [pc, #528]	; (8002874 <G_q+0x228c>)
 8002662:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002666:	4439      	add	r1, r7
 8002668:	440b      	add	r3, r1
 800266a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800266e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t128.re = -t297.re;
 8002672:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002676:	ed93 7b00 	vldr	d7, [r3]
 800267a:	eeb1 7b47 	vneg.f64	d7, d7
 800267e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8002682:	ed83 7b00 	vstr	d7, [r3]
  t128.im = -theta3;
 8002686:	4b7b      	ldr	r3, [pc, #492]	; (8002874 <G_q+0x228c>)
 8002688:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800268c:	443a      	add	r2, r7
 800268e:	4413      	add	r3, r2
 8002690:	ed93 7b00 	vldr	d7, [r3]
 8002694:	eeb1 7b47 	vneg.f64	d7, d7
 8002698:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800269c:	ed83 7b02 	vstr	d7, [r3, #8]
  t121.re = t297.re;
 80026a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80026a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026a8:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80026ac:	e9c2 3400 	strd	r3, r4, [r2]
  t121.im = theta3;
 80026b0:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80026b4:	4b6f      	ldr	r3, [pc, #444]	; (8002874 <G_q+0x228c>)
 80026b6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80026ba:	4439      	add	r1, r7
 80026bc:	440b      	add	r3, r1
 80026be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t120.re = -t297.re;
 80026c6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80026ca:	ed93 7b00 	vldr	d7, [r3]
 80026ce:	eeb1 7b47 	vneg.f64	d7, d7
 80026d2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80026d6:	ed83 7b00 	vstr	d7, [r3]
  t120.im = -theta3;
 80026da:	4b66      	ldr	r3, [pc, #408]	; (8002874 <G_q+0x228c>)
 80026dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80026e0:	443a      	add	r2, r7
 80026e2:	4413      	add	r3, r2
 80026e4:	ed93 7b00 	vldr	d7, [r3]
 80026e8:	eeb1 7b47 	vneg.f64	d7, d7
 80026ec:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80026f0:	ed83 7b02 	vstr	d7, [r3, #8]
  t115.re = t297.re;
 80026f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80026f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026fc:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8002700:	e9c2 3400 	strd	r3, r4, [r2]
  t115.im = theta3;
 8002704:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8002708:	4b5a      	ldr	r3, [pc, #360]	; (8002874 <G_q+0x228c>)
 800270a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800270e:	4439      	add	r1, r7
 8002710:	440b      	add	r3, r1
 8002712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002716:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t114.re = -t297.re;
 800271a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800271e:	ed93 7b00 	vldr	d7, [r3]
 8002722:	eeb1 7b47 	vneg.f64	d7, d7
 8002726:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800272a:	ed83 7b00 	vstr	d7, [r3]
  t114.im = -theta3;
 800272e:	4b51      	ldr	r3, [pc, #324]	; (8002874 <G_q+0x228c>)
 8002730:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002734:	443a      	add	r2, r7
 8002736:	4413      	add	r3, r2
 8002738:	ed93 7b00 	vldr	d7, [r3]
 800273c:	eeb1 7b47 	vneg.f64	d7, d7
 8002740:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8002744:	ed83 7b02 	vstr	d7, [r3, #8]
  t109.re = t297.re;
 8002748:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800274c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002750:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8002754:	e9c2 3400 	strd	r3, r4, [r2]
  t109.im = theta3;
 8002758:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <G_q+0x228c>)
 800275e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002762:	4439      	add	r1, r7
 8002764:	440b      	add	r3, r1
 8002766:	e9d3 3400 	ldrd	r3, r4, [r3]
 800276a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t108.re = -t297.re;
 800276e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002772:	ed93 7b00 	vldr	d7, [r3]
 8002776:	eeb1 7b47 	vneg.f64	d7, d7
 800277a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800277e:	ed83 7b00 	vstr	d7, [r3]
  t108.im = -theta3;
 8002782:	4b3c      	ldr	r3, [pc, #240]	; (8002874 <G_q+0x228c>)
 8002784:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002788:	443a      	add	r2, r7
 800278a:	4413      	add	r3, r2
 800278c:	ed93 7b00 	vldr	d7, [r3]
 8002790:	eeb1 7b47 	vneg.f64	d7, d7
 8002794:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8002798:	ed83 7b02 	vstr	d7, [r3, #8]
  t107.re = t297.re;
 800279c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80027a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027a4:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80027a8:	e9c2 3400 	strd	r3, r4, [r2]
  t107.im = theta3;
 80027ac:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80027b0:	4b30      	ldr	r3, [pc, #192]	; (8002874 <G_q+0x228c>)
 80027b2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80027b6:	4439      	add	r1, r7
 80027b8:	440b      	add	r3, r1
 80027ba:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027be:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t106.re = -t297.re;
 80027c2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80027c6:	ed93 7b00 	vldr	d7, [r3]
 80027ca:	eeb1 7b47 	vneg.f64	d7, d7
 80027ce:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80027d2:	ed83 7b00 	vstr	d7, [r3]
  t106.im = -theta3;
 80027d6:	4b27      	ldr	r3, [pc, #156]	; (8002874 <G_q+0x228c>)
 80027d8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80027dc:	443a      	add	r2, r7
 80027de:	4413      	add	r3, r2
 80027e0:	ed93 7b00 	vldr	d7, [r3]
 80027e4:	eeb1 7b47 	vneg.f64	d7, d7
 80027e8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80027ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t99.re = t297.re;
 80027f0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80027f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027f8:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80027fc:	e9c2 3400 	strd	r3, r4, [r2]
  t99.im = theta3;
 8002800:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <G_q+0x228c>)
 8002806:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800280a:	4439      	add	r1, r7
 800280c:	440b      	add	r3, r1
 800280e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002812:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t98.re = -t297.re;
 8002816:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800281a:	ed93 7b00 	vldr	d7, [r3]
 800281e:	eeb1 7b47 	vneg.f64	d7, d7
 8002822:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8002826:	ed83 7b00 	vstr	d7, [r3]
  t98.im = -theta3;
 800282a:	4b12      	ldr	r3, [pc, #72]	; (8002874 <G_q+0x228c>)
 800282c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002830:	443a      	add	r2, r7
 8002832:	4413      	add	r3, r2
 8002834:	ed93 7b00 	vldr	d7, [r3]
 8002838:	eeb1 7b47 	vneg.f64	d7, d7
 800283c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8002840:	ed83 7b02 	vstr	d7, [r3, #8]
  t93.re = t297.re;
 8002844:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002848:	e9d3 3400 	ldrd	r3, r4, [r3]
 800284c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8002850:	e9c2 3400 	strd	r3, r4, [r2]
  t93.im = theta3;
 8002854:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8002858:	4b06      	ldr	r3, [pc, #24]	; (8002874 <G_q+0x228c>)
 800285a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800285e:	4439      	add	r1, r7
 8002860:	440b      	add	r3, r1
 8002862:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002866:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t92.re = -t297.re;
 800286a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800286e:	ed93 7b00 	vldr	d7, [r3]
 8002872:	e001      	b.n	8002878 <G_q+0x2290>
 8002874:	ffffec48 	.word	0xffffec48
 8002878:	eeb1 7b47 	vneg.f64	d7, d7
 800287c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8002880:	ed83 7b00 	vstr	d7, [r3]
  t92.im = -theta3;
 8002884:	4bc4      	ldr	r3, [pc, #784]	; (8002b98 <G_q+0x25b0>)
 8002886:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800288a:	443a      	add	r2, r7
 800288c:	4413      	add	r3, r2
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	eeb1 7b47 	vneg.f64	d7, d7
 8002896:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800289a:	ed83 7b02 	vstr	d7, [r3, #8]
  t85.re = t297.re;
 800289e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80028a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028a6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80028aa:	e9c2 3400 	strd	r3, r4, [r2]
  t85.im = theta3;
 80028ae:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80028b2:	4bb9      	ldr	r3, [pc, #740]	; (8002b98 <G_q+0x25b0>)
 80028b4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80028b8:	4439      	add	r1, r7
 80028ba:	440b      	add	r3, r1
 80028bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t84.re = -t297.re;
 80028c4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80028c8:	ed93 7b00 	vldr	d7, [r3]
 80028cc:	eeb1 7b47 	vneg.f64	d7, d7
 80028d0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80028d4:	ed83 7b00 	vstr	d7, [r3]
  t84.im = -theta3;
 80028d8:	4baf      	ldr	r3, [pc, #700]	; (8002b98 <G_q+0x25b0>)
 80028da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80028de:	443a      	add	r2, r7
 80028e0:	4413      	add	r3, r2
 80028e2:	ed93 7b00 	vldr	d7, [r3]
 80028e6:	eeb1 7b47 	vneg.f64	d7, d7
 80028ea:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80028ee:	ed83 7b02 	vstr	d7, [r3, #8]
  t81.re = t297.re;
 80028f2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80028f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028fa:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80028fe:	e9c2 3400 	strd	r3, r4, [r2]
  t81.im = theta3;
 8002902:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8002906:	4ba4      	ldr	r3, [pc, #656]	; (8002b98 <G_q+0x25b0>)
 8002908:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800290c:	4439      	add	r1, r7
 800290e:	440b      	add	r3, r1
 8002910:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002914:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t80.re = -t297.re;
 8002918:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800291c:	ed93 7b00 	vldr	d7, [r3]
 8002920:	eeb1 7b47 	vneg.f64	d7, d7
 8002924:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002928:	ed83 7b00 	vstr	d7, [r3]
  t80.im = -theta3;
 800292c:	4b9a      	ldr	r3, [pc, #616]	; (8002b98 <G_q+0x25b0>)
 800292e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002932:	443a      	add	r2, r7
 8002934:	4413      	add	r3, r2
 8002936:	ed93 7b00 	vldr	d7, [r3]
 800293a:	eeb1 7b47 	vneg.f64	d7, d7
 800293e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8002942:	ed83 7b02 	vstr	d7, [r3, #8]
  t75.re = t297.re;
 8002946:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800294a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800294e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8002952:	e9c2 3400 	strd	r3, r4, [r2]
  t75.im = theta3;
 8002956:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800295a:	4b8f      	ldr	r3, [pc, #572]	; (8002b98 <G_q+0x25b0>)
 800295c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002960:	4439      	add	r1, r7
 8002962:	440b      	add	r3, r1
 8002964:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002968:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t74.re = -t297.re;
 800296c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002970:	ed93 7b00 	vldr	d7, [r3]
 8002974:	eeb1 7b47 	vneg.f64	d7, d7
 8002978:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800297c:	ed83 7b00 	vstr	d7, [r3]
  t74.im = -theta3;
 8002980:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <G_q+0x25b0>)
 8002982:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002986:	443a      	add	r2, r7
 8002988:	4413      	add	r3, r2
 800298a:	ed93 7b00 	vldr	d7, [r3]
 800298e:	eeb1 7b47 	vneg.f64	d7, d7
 8002992:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8002996:	ed83 7b02 	vstr	d7, [r3, #8]
  t73.re = t297.re;
 800299a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800299e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029a2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80029a6:	e9c2 3400 	strd	r3, r4, [r2]
  t73.im = theta3;
 80029aa:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80029ae:	4b7a      	ldr	r3, [pc, #488]	; (8002b98 <G_q+0x25b0>)
 80029b0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80029b4:	4439      	add	r1, r7
 80029b6:	440b      	add	r3, r1
 80029b8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029bc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t72.re = -t297.re;
 80029c0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80029c4:	ed93 7b00 	vldr	d7, [r3]
 80029c8:	eeb1 7b47 	vneg.f64	d7, d7
 80029cc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029d0:	ed83 7b00 	vstr	d7, [r3]
  t72.im = -theta3;
 80029d4:	4b70      	ldr	r3, [pc, #448]	; (8002b98 <G_q+0x25b0>)
 80029d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029da:	443a      	add	r2, r7
 80029dc:	4413      	add	r3, r2
 80029de:	ed93 7b00 	vldr	d7, [r3]
 80029e2:	eeb1 7b47 	vneg.f64	d7, d7
 80029e6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80029ea:	ed83 7b02 	vstr	d7, [r3, #8]
  t69.re = t297.re;
 80029ee:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80029f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029f6:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80029fa:	e9c2 3400 	strd	r3, r4, [r2]
  t69.im = theta3;
 80029fe:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8002a02:	4b65      	ldr	r3, [pc, #404]	; (8002b98 <G_q+0x25b0>)
 8002a04:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a08:	4439      	add	r1, r7
 8002a0a:	440b      	add	r3, r1
 8002a0c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a10:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t68.re = -t297.re;
 8002a14:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002a18:	ed93 7b00 	vldr	d7, [r3]
 8002a1c:	eeb1 7b47 	vneg.f64	d7, d7
 8002a20:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002a24:	ed83 7b00 	vstr	d7, [r3]
  t68.im = -theta3;
 8002a28:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <G_q+0x25b0>)
 8002a2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a2e:	443a      	add	r2, r7
 8002a30:	4413      	add	r3, r2
 8002a32:	ed93 7b00 	vldr	d7, [r3]
 8002a36:	eeb1 7b47 	vneg.f64	d7, d7
 8002a3a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8002a3e:	ed83 7b02 	vstr	d7, [r3, #8]
  t65.re = t297.re;
 8002a42:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002a46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a4a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002a4e:	e9c2 3400 	strd	r3, r4, [r2]
  t65.im = theta3;
 8002a52:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8002a56:	4b50      	ldr	r3, [pc, #320]	; (8002b98 <G_q+0x25b0>)
 8002a58:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a5c:	4439      	add	r1, r7
 8002a5e:	440b      	add	r3, r1
 8002a60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a64:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t64.re = -t297.re;
 8002a68:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002a6c:	ed93 7b00 	vldr	d7, [r3]
 8002a70:	eeb1 7b47 	vneg.f64	d7, d7
 8002a74:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002a78:	ed83 7b00 	vstr	d7, [r3]
  t64.im = -theta3;
 8002a7c:	4b46      	ldr	r3, [pc, #280]	; (8002b98 <G_q+0x25b0>)
 8002a7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a82:	443a      	add	r2, r7
 8002a84:	4413      	add	r3, r2
 8002a86:	ed93 7b00 	vldr	d7, [r3]
 8002a8a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a8e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8002a92:	ed83 7b02 	vstr	d7, [r3, #8]
  t52.re = t297.re;
 8002a96:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002a9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a9e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8002aa2:	e9c2 3400 	strd	r3, r4, [r2]
  t52.im = theta3;
 8002aa6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8002aaa:	4b3b      	ldr	r3, [pc, #236]	; (8002b98 <G_q+0x25b0>)
 8002aac:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ab0:	4439      	add	r1, r7
 8002ab2:	440b      	add	r3, r1
 8002ab4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ab8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t51.re = -t297.re;
 8002abc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002ac0:	ed93 7b00 	vldr	d7, [r3]
 8002ac4:	eeb1 7b47 	vneg.f64	d7, d7
 8002ac8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002acc:	ed83 7b00 	vstr	d7, [r3]
  t51.im = -theta3;
 8002ad0:	4b31      	ldr	r3, [pc, #196]	; (8002b98 <G_q+0x25b0>)
 8002ad2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ad6:	443a      	add	r2, r7
 8002ad8:	4413      	add	r3, r2
 8002ada:	ed93 7b00 	vldr	d7, [r3]
 8002ade:	eeb1 7b47 	vneg.f64	d7, d7
 8002ae2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8002ae6:	ed83 7b02 	vstr	d7, [r3, #8]
  t48.re = t297.re;
 8002aea:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002aee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af2:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8002af6:	e9c2 3400 	strd	r3, r4, [r2]
  t48.im = theta3;
 8002afa:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8002afe:	4b26      	ldr	r3, [pc, #152]	; (8002b98 <G_q+0x25b0>)
 8002b00:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b04:	4439      	add	r1, r7
 8002b06:	440b      	add	r3, r1
 8002b08:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b0c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t47.re = -t297.re;
 8002b10:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002b14:	ed93 7b00 	vldr	d7, [r3]
 8002b18:	eeb1 7b47 	vneg.f64	d7, d7
 8002b1c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002b20:	ed83 7b00 	vstr	d7, [r3]
  t47.im = -theta3;
 8002b24:	4b1c      	ldr	r3, [pc, #112]	; (8002b98 <G_q+0x25b0>)
 8002b26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b2a:	443a      	add	r2, r7
 8002b2c:	4413      	add	r3, r2
 8002b2e:	ed93 7b00 	vldr	d7, [r3]
 8002b32:	eeb1 7b47 	vneg.f64	d7, d7
 8002b36:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8002b3a:	ed83 7b02 	vstr	d7, [r3, #8]
  t38.re = t297.re;
 8002b3e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002b42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b46:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8002b4a:	e9c2 3400 	strd	r3, r4, [r2]
  t38.im = theta3;
 8002b4e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <G_q+0x25b0>)
 8002b54:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b58:	4439      	add	r1, r7
 8002b5a:	440b      	add	r3, r1
 8002b5c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b60:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t37.re = -t297.re;
 8002b64:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002b68:	ed93 7b00 	vldr	d7, [r3]
 8002b6c:	eeb1 7b47 	vneg.f64	d7, d7
 8002b70:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002b74:	ed83 7b00 	vstr	d7, [r3]
  t37.im = -theta3;
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <G_q+0x25b0>)
 8002b7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b7e:	443a      	add	r2, r7
 8002b80:	4413      	add	r3, r2
 8002b82:	ed93 7b00 	vldr	d7, [r3]
 8002b86:	eeb1 7b47 	vneg.f64	d7, d7
 8002b8a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8002b8e:	ed83 7b02 	vstr	d7, [r3, #8]
  t36.re = t297.re;
 8002b92:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002b96:	e001      	b.n	8002b9c <G_q+0x25b4>
 8002b98:	ffffec48 	.word	0xffffec48
 8002b9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ba0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8002ba4:	e9c2 3400 	strd	r3, r4, [r2]
  t36.im = theta3;
 8002ba8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8002bac:	4bc4      	ldr	r3, [pc, #784]	; (8002ec0 <G_q+0x28d8>)
 8002bae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002bb2:	4439      	add	r1, r7
 8002bb4:	440b      	add	r3, r1
 8002bb6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bba:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t35.re = -t297.re;
 8002bbe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002bc2:	ed93 7b00 	vldr	d7, [r3]
 8002bc6:	eeb1 7b47 	vneg.f64	d7, d7
 8002bca:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002bce:	ed83 7b00 	vstr	d7, [r3]
  t35.im = -theta3;
 8002bd2:	4bbb      	ldr	r3, [pc, #748]	; (8002ec0 <G_q+0x28d8>)
 8002bd4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002bd8:	443a      	add	r2, r7
 8002bda:	4413      	add	r3, r2
 8002bdc:	ed93 7b00 	vldr	d7, [r3]
 8002be0:	eeb1 7b47 	vneg.f64	d7, d7
 8002be4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8002be8:	ed83 7b02 	vstr	d7, [r3, #8]
  t32.re = t297.re;
 8002bec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002bf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bf4:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002bf8:	e9c2 3400 	strd	r3, r4, [r2]
  t32.im = theta3;
 8002bfc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8002c00:	4baf      	ldr	r3, [pc, #700]	; (8002ec0 <G_q+0x28d8>)
 8002c02:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c06:	4439      	add	r1, r7
 8002c08:	440b      	add	r3, r1
 8002c0a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c0e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t31.re = -t297.re;
 8002c12:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002c16:	ed93 7b00 	vldr	d7, [r3]
 8002c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8002c1e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002c22:	ed83 7b00 	vstr	d7, [r3]
  t31.im = -theta3;
 8002c26:	4ba6      	ldr	r3, [pc, #664]	; (8002ec0 <G_q+0x28d8>)
 8002c28:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c2c:	443a      	add	r2, r7
 8002c2e:	4413      	add	r3, r2
 8002c30:	ed93 7b00 	vldr	d7, [r3]
 8002c34:	eeb1 7b47 	vneg.f64	d7, d7
 8002c38:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8002c3c:	ed83 7b02 	vstr	d7, [r3, #8]
  t28.re = t297.re;
 8002c40:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002c44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c48:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002c4c:	e9c2 3400 	strd	r3, r4, [r2]
  t28.im = theta3;
 8002c50:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8002c54:	4b9a      	ldr	r3, [pc, #616]	; (8002ec0 <G_q+0x28d8>)
 8002c56:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c5a:	4439      	add	r1, r7
 8002c5c:	440b      	add	r3, r1
 8002c5e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c62:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t27.re = -t297.re;
 8002c66:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002c6a:	ed93 7b00 	vldr	d7, [r3]
 8002c6e:	eeb1 7b47 	vneg.f64	d7, d7
 8002c72:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c76:	ed83 7b00 	vstr	d7, [r3]
  t27.im = -theta3;
 8002c7a:	4b91      	ldr	r3, [pc, #580]	; (8002ec0 <G_q+0x28d8>)
 8002c7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c80:	443a      	add	r2, r7
 8002c82:	4413      	add	r3, r2
 8002c84:	ed93 7b00 	vldr	d7, [r3]
 8002c88:	eeb1 7b47 	vneg.f64	d7, d7
 8002c8c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8002c90:	ed83 7b02 	vstr	d7, [r3, #8]
  t17.re = t297.re;
 8002c94:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002c98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c9c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002ca0:	e9c2 3400 	strd	r3, r4, [r2]
  t17.im = theta3;
 8002ca4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8002ca8:	4b85      	ldr	r3, [pc, #532]	; (8002ec0 <G_q+0x28d8>)
 8002caa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002cae:	4439      	add	r1, r7
 8002cb0:	440b      	add	r3, r1
 8002cb2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cb6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t16.re = -t297.re;
 8002cba:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002cbe:	ed93 7b00 	vldr	d7, [r3]
 8002cc2:	eeb1 7b47 	vneg.f64	d7, d7
 8002cc6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002cca:	ed83 7b00 	vstr	d7, [r3]
  t16.im = -theta3;
 8002cce:	4b7c      	ldr	r3, [pc, #496]	; (8002ec0 <G_q+0x28d8>)
 8002cd0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002cd4:	443a      	add	r2, r7
 8002cd6:	4413      	add	r3, r2
 8002cd8:	ed93 7b00 	vldr	d7, [r3]
 8002cdc:	eeb1 7b47 	vneg.f64	d7, d7
 8002ce0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8002ce4:	ed83 7b02 	vstr	d7, [r3, #8]
  t13.re = t297.re;
 8002ce8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002cec:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cf0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8002cf4:	e9c2 3400 	strd	r3, r4, [r2]
  t13.im = theta3;
 8002cf8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8002cfc:	4b70      	ldr	r3, [pc, #448]	; (8002ec0 <G_q+0x28d8>)
 8002cfe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d02:	4439      	add	r1, r7
 8002d04:	440b      	add	r3, r1
 8002d06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d0a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t12.re = -t297.re;
 8002d0e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002d12:	ed93 7b00 	vldr	d7, [r3]
 8002d16:	eeb1 7b47 	vneg.f64	d7, d7
 8002d1a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002d1e:	ed83 7b00 	vstr	d7, [r3]
  t12.im = -theta3;
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <G_q+0x28d8>)
 8002d24:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d28:	443a      	add	r2, r7
 8002d2a:	4413      	add	r3, r2
 8002d2c:	ed93 7b00 	vldr	d7, [r3]
 8002d30:	eeb1 7b47 	vneg.f64	d7, d7
 8002d34:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8002d38:	ed83 7b02 	vstr	d7, [r3, #8]
  t9.re = t297.re;
 8002d3c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002d40:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d44:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <G_q+0x28dc>)
 8002d46:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002d4a:	4438      	add	r0, r7
 8002d4c:	4403      	add	r3, r0
 8002d4e:	e9c3 1200 	strd	r1, r2, [r3]
  t9.im = theta3;
 8002d52:	4b5c      	ldr	r3, [pc, #368]	; (8002ec4 <G_q+0x28dc>)
 8002d54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d58:	443a      	add	r2, r7
 8002d5a:	4413      	add	r3, r2
 8002d5c:	4a58      	ldr	r2, [pc, #352]	; (8002ec0 <G_q+0x28d8>)
 8002d5e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d62:	4439      	add	r1, r7
 8002d64:	440a      	add	r2, r1
 8002d66:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002d6a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t8.re = -t297.re;
 8002d6e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002d72:	ed93 7b00 	vldr	d7, [r3]
 8002d76:	eeb1 7b47 	vneg.f64	d7, d7
 8002d7a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d7e:	ed83 7b00 	vstr	d7, [r3]
  t8.im = -theta3;
 8002d82:	4b4f      	ldr	r3, [pc, #316]	; (8002ec0 <G_q+0x28d8>)
 8002d84:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d88:	443a      	add	r2, r7
 8002d8a:	4413      	add	r3, r2
 8002d8c:	ed93 7b00 	vldr	d7, [r3]
 8002d90:	eeb1 7b47 	vneg.f64	d7, d7
 8002d94:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002d98:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t8);
 8002d9c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f00d fd2d 	bl	8010800 <b_exp>
  t285.re = theta4 * 0.0;
 8002da6:	f107 0310 	add.w	r3, r7, #16
 8002daa:	ed93 7b00 	vldr	d7, [r3]
 8002dae:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8002eb8 <G_q+0x28d0>
 8002db2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <G_q+0x28e0>)
 8002db8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dbc:	443a      	add	r2, r7
 8002dbe:	4413      	add	r3, r2
 8002dc0:	ed83 7b00 	vstr	d7, [r3]
  t285.im = theta4;
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <G_q+0x28e0>)
 8002dc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dca:	443a      	add	r2, r7
 8002dcc:	4413      	add	r3, r2
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002dd6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t284.re = -t285.re;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <G_q+0x28e0>)
 8002ddc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002de0:	443a      	add	r2, r7
 8002de2:	4413      	add	r3, r2
 8002de4:	ed93 7b00 	vldr	d7, [r3]
 8002de8:	eeb1 7b47 	vneg.f64	d7, d7
 8002dec:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002df0:	ed83 7b00 	vstr	d7, [r3]
  t284.im = -theta4;
 8002df4:	f107 0310 	add.w	r3, r7, #16
 8002df8:	ed93 7b00 	vldr	d7, [r3]
 8002dfc:	eeb1 7b47 	vneg.f64	d7, d7
 8002e00:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8002e04:	ed83 7b02 	vstr	d7, [r3, #8]
  t279.re = t285.re;
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <G_q+0x28e0>)
 8002e0a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e0e:	443a      	add	r2, r7
 8002e10:	4413      	add	r3, r2
 8002e12:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e16:	4b2d      	ldr	r3, [pc, #180]	; (8002ecc <G_q+0x28e4>)
 8002e18:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002e1c:	4438      	add	r0, r7
 8002e1e:	4403      	add	r3, r0
 8002e20:	e9c3 1200 	strd	r1, r2, [r3]
  t279.im = theta4;
 8002e24:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <G_q+0x28e4>)
 8002e26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e2a:	443a      	add	r2, r7
 8002e2c:	4413      	add	r3, r2
 8002e2e:	f107 0210 	add.w	r2, r7, #16
 8002e32:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002e36:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t278.re = -t285.re;
 8002e3a:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <G_q+0x28e0>)
 8002e3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e40:	443a      	add	r2, r7
 8002e42:	4413      	add	r3, r2
 8002e44:	ed93 7b00 	vldr	d7, [r3]
 8002e48:	eeb1 7b47 	vneg.f64	d7, d7
 8002e4c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e50:	ed83 7b00 	vstr	d7, [r3]
  t278.im = -theta4;
 8002e54:	f107 0310 	add.w	r3, r7, #16
 8002e58:	ed93 7b00 	vldr	d7, [r3]
 8002e5c:	eeb1 7b47 	vneg.f64	d7, d7
 8002e60:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8002e64:	ed83 7b02 	vstr	d7, [r3, #8]
  t255.re = t285.re;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <G_q+0x28e0>)
 8002e6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e6e:	443a      	add	r2, r7
 8002e70:	4413      	add	r3, r2
 8002e72:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <G_q+0x28e8>)
 8002e78:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002e7c:	4438      	add	r0, r7
 8002e7e:	4403      	add	r3, r0
 8002e80:	e9c3 1200 	strd	r1, r2, [r3]
  t255.im = theta4;
 8002e84:	4b12      	ldr	r3, [pc, #72]	; (8002ed0 <G_q+0x28e8>)
 8002e86:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e8a:	443a      	add	r2, r7
 8002e8c:	4413      	add	r3, r2
 8002e8e:	f107 0210 	add.w	r2, r7, #16
 8002e92:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002e96:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t254.re = -t285.re;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <G_q+0x28e0>)
 8002e9c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ea0:	443a      	add	r2, r7
 8002ea2:	4413      	add	r3, r2
 8002ea4:	ed93 7b00 	vldr	d7, [r3]
 8002ea8:	eeb1 7b47 	vneg.f64	d7, d7
 8002eac:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002eb0:	ed83 7b00 	vstr	d7, [r3]
 8002eb4:	e00e      	b.n	8002ed4 <G_q+0x28ec>
 8002eb6:	bf00      	nop
	...
 8002ec0:	ffffec48 	.word	0xffffec48
 8002ec4:	ffffeff0 	.word	0xffffeff0
 8002ec8:	ffffefd0 	.word	0xffffefd0
 8002ecc:	ffffefb0 	.word	0xffffefb0
 8002ed0:	ffffef90 	.word	0xffffef90
  t254.im = -theta4;
 8002ed4:	f107 0310 	add.w	r3, r7, #16
 8002ed8:	ed93 7b00 	vldr	d7, [r3]
 8002edc:	eeb1 7b47 	vneg.f64	d7, d7
 8002ee0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8002ee4:	ed83 7b02 	vstr	d7, [r3, #8]
  t243.re = t285.re;
 8002ee8:	4bbd      	ldr	r3, [pc, #756]	; (80031e0 <G_q+0x2bf8>)
 8002eea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002eee:	443a      	add	r2, r7
 8002ef0:	4413      	add	r3, r2
 8002ef2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002ef6:	4bbb      	ldr	r3, [pc, #748]	; (80031e4 <G_q+0x2bfc>)
 8002ef8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002efc:	4438      	add	r0, r7
 8002efe:	4403      	add	r3, r0
 8002f00:	e9c3 1200 	strd	r1, r2, [r3]
  t243.im = theta4;
 8002f04:	4bb7      	ldr	r3, [pc, #732]	; (80031e4 <G_q+0x2bfc>)
 8002f06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f0a:	443a      	add	r2, r7
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f107 0210 	add.w	r2, r7, #16
 8002f12:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002f16:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t242.re = -t285.re;
 8002f1a:	4bb1      	ldr	r3, [pc, #708]	; (80031e0 <G_q+0x2bf8>)
 8002f1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f20:	443a      	add	r2, r7
 8002f22:	4413      	add	r3, r2
 8002f24:	ed93 7b00 	vldr	d7, [r3]
 8002f28:	eeb1 7b47 	vneg.f64	d7, d7
 8002f2c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002f30:	ed83 7b00 	vstr	d7, [r3]
  t242.im = -theta4;
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	ed93 7b00 	vldr	d7, [r3]
 8002f3c:	eeb1 7b47 	vneg.f64	d7, d7
 8002f40:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8002f44:	ed83 7b02 	vstr	d7, [r3, #8]
  t231.re = t285.re;
 8002f48:	4ba5      	ldr	r3, [pc, #660]	; (80031e0 <G_q+0x2bf8>)
 8002f4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f4e:	443a      	add	r2, r7
 8002f50:	4413      	add	r3, r2
 8002f52:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002f56:	4ba4      	ldr	r3, [pc, #656]	; (80031e8 <G_q+0x2c00>)
 8002f58:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002f5c:	4438      	add	r0, r7
 8002f5e:	4403      	add	r3, r0
 8002f60:	e9c3 1200 	strd	r1, r2, [r3]
  t231.im = theta4;
 8002f64:	4ba0      	ldr	r3, [pc, #640]	; (80031e8 <G_q+0x2c00>)
 8002f66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f6a:	443a      	add	r2, r7
 8002f6c:	4413      	add	r3, r2
 8002f6e:	f107 0210 	add.w	r2, r7, #16
 8002f72:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002f76:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t230.re = -t285.re;
 8002f7a:	4b99      	ldr	r3, [pc, #612]	; (80031e0 <G_q+0x2bf8>)
 8002f7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f80:	443a      	add	r2, r7
 8002f82:	4413      	add	r3, r2
 8002f84:	ed93 7b00 	vldr	d7, [r3]
 8002f88:	eeb1 7b47 	vneg.f64	d7, d7
 8002f8c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002f90:	ed83 7b00 	vstr	d7, [r3]
  t230.im = -theta4;
 8002f94:	f107 0310 	add.w	r3, r7, #16
 8002f98:	ed93 7b00 	vldr	d7, [r3]
 8002f9c:	eeb1 7b47 	vneg.f64	d7, d7
 8002fa0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8002fa4:	ed83 7b02 	vstr	d7, [r3, #8]
  t229.re = t285.re;
 8002fa8:	4b8d      	ldr	r3, [pc, #564]	; (80031e0 <G_q+0x2bf8>)
 8002faa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fae:	443a      	add	r2, r7
 8002fb0:	4413      	add	r3, r2
 8002fb2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002fb6:	4b8d      	ldr	r3, [pc, #564]	; (80031ec <G_q+0x2c04>)
 8002fb8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8002fbc:	4438      	add	r0, r7
 8002fbe:	4403      	add	r3, r0
 8002fc0:	e9c3 1200 	strd	r1, r2, [r3]
  t229.im = theta4;
 8002fc4:	4b89      	ldr	r3, [pc, #548]	; (80031ec <G_q+0x2c04>)
 8002fc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fca:	443a      	add	r2, r7
 8002fcc:	4413      	add	r3, r2
 8002fce:	f107 0210 	add.w	r2, r7, #16
 8002fd2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8002fd6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t228.re = -t285.re;
 8002fda:	4b81      	ldr	r3, [pc, #516]	; (80031e0 <G_q+0x2bf8>)
 8002fdc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fe0:	443a      	add	r2, r7
 8002fe2:	4413      	add	r3, r2
 8002fe4:	ed93 7b00 	vldr	d7, [r3]
 8002fe8:	eeb1 7b47 	vneg.f64	d7, d7
 8002fec:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002ff0:	ed83 7b00 	vstr	d7, [r3]
  t228.im = -theta4;
 8002ff4:	f107 0310 	add.w	r3, r7, #16
 8002ff8:	ed93 7b00 	vldr	d7, [r3]
 8002ffc:	eeb1 7b47 	vneg.f64	d7, d7
 8003000:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8003004:	ed83 7b02 	vstr	d7, [r3, #8]
  t209.re = t285.re;
 8003008:	4b75      	ldr	r3, [pc, #468]	; (80031e0 <G_q+0x2bf8>)
 800300a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800300e:	443a      	add	r2, r7
 8003010:	4413      	add	r3, r2
 8003012:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003016:	4b76      	ldr	r3, [pc, #472]	; (80031f0 <G_q+0x2c08>)
 8003018:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800301c:	4438      	add	r0, r7
 800301e:	4403      	add	r3, r0
 8003020:	e9c3 1200 	strd	r1, r2, [r3]
  t209.im = theta4;
 8003024:	4b72      	ldr	r3, [pc, #456]	; (80031f0 <G_q+0x2c08>)
 8003026:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800302a:	443a      	add	r2, r7
 800302c:	4413      	add	r3, r2
 800302e:	f107 0210 	add.w	r2, r7, #16
 8003032:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003036:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t208.re = -t285.re;
 800303a:	4b69      	ldr	r3, [pc, #420]	; (80031e0 <G_q+0x2bf8>)
 800303c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003040:	443a      	add	r2, r7
 8003042:	4413      	add	r3, r2
 8003044:	ed93 7b00 	vldr	d7, [r3]
 8003048:	eeb1 7b47 	vneg.f64	d7, d7
 800304c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003050:	ed83 7b00 	vstr	d7, [r3]
  t208.im = -theta4;
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	ed93 7b00 	vldr	d7, [r3]
 800305c:	eeb1 7b47 	vneg.f64	d7, d7
 8003060:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8003064:	ed83 7b02 	vstr	d7, [r3, #8]
  t197.re = t285.re;
 8003068:	4b5d      	ldr	r3, [pc, #372]	; (80031e0 <G_q+0x2bf8>)
 800306a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800306e:	443a      	add	r2, r7
 8003070:	4413      	add	r3, r2
 8003072:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003076:	4b5f      	ldr	r3, [pc, #380]	; (80031f4 <G_q+0x2c0c>)
 8003078:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800307c:	4438      	add	r0, r7
 800307e:	4403      	add	r3, r0
 8003080:	e9c3 1200 	strd	r1, r2, [r3]
  t197.im = theta4;
 8003084:	4b5b      	ldr	r3, [pc, #364]	; (80031f4 <G_q+0x2c0c>)
 8003086:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800308a:	443a      	add	r2, r7
 800308c:	4413      	add	r3, r2
 800308e:	f107 0210 	add.w	r2, r7, #16
 8003092:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003096:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t196.re = -t285.re;
 800309a:	4b51      	ldr	r3, [pc, #324]	; (80031e0 <G_q+0x2bf8>)
 800309c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030a0:	443a      	add	r2, r7
 80030a2:	4413      	add	r3, r2
 80030a4:	ed93 7b00 	vldr	d7, [r3]
 80030a8:	eeb1 7b47 	vneg.f64	d7, d7
 80030ac:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80030b0:	ed83 7b00 	vstr	d7, [r3]
  t196.im = -theta4;
 80030b4:	f107 0310 	add.w	r3, r7, #16
 80030b8:	ed93 7b00 	vldr	d7, [r3]
 80030bc:	eeb1 7b47 	vneg.f64	d7, d7
 80030c0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80030c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t185.re = t285.re;
 80030c8:	4b45      	ldr	r3, [pc, #276]	; (80031e0 <G_q+0x2bf8>)
 80030ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030ce:	443a      	add	r2, r7
 80030d0:	4413      	add	r3, r2
 80030d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80030d6:	4b48      	ldr	r3, [pc, #288]	; (80031f8 <G_q+0x2c10>)
 80030d8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80030dc:	4438      	add	r0, r7
 80030de:	4403      	add	r3, r0
 80030e0:	e9c3 1200 	strd	r1, r2, [r3]
  t185.im = theta4;
 80030e4:	4b44      	ldr	r3, [pc, #272]	; (80031f8 <G_q+0x2c10>)
 80030e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030ea:	443a      	add	r2, r7
 80030ec:	4413      	add	r3, r2
 80030ee:	f107 0210 	add.w	r2, r7, #16
 80030f2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80030f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t184.re = -t285.re;
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <G_q+0x2bf8>)
 80030fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003100:	443a      	add	r2, r7
 8003102:	4413      	add	r3, r2
 8003104:	ed93 7b00 	vldr	d7, [r3]
 8003108:	eeb1 7b47 	vneg.f64	d7, d7
 800310c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003110:	ed83 7b00 	vstr	d7, [r3]
  t184.im = -theta4;
 8003114:	f107 0310 	add.w	r3, r7, #16
 8003118:	ed93 7b00 	vldr	d7, [r3]
 800311c:	eeb1 7b47 	vneg.f64	d7, d7
 8003120:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8003124:	ed83 7b02 	vstr	d7, [r3, #8]
  t173.re = t285.re;
 8003128:	4b2d      	ldr	r3, [pc, #180]	; (80031e0 <G_q+0x2bf8>)
 800312a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800312e:	443a      	add	r2, r7
 8003130:	4413      	add	r3, r2
 8003132:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003136:	4b31      	ldr	r3, [pc, #196]	; (80031fc <G_q+0x2c14>)
 8003138:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800313c:	4438      	add	r0, r7
 800313e:	4403      	add	r3, r0
 8003140:	e9c3 1200 	strd	r1, r2, [r3]
  t173.im = theta4;
 8003144:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <G_q+0x2c14>)
 8003146:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800314a:	443a      	add	r2, r7
 800314c:	4413      	add	r3, r2
 800314e:	f107 0210 	add.w	r2, r7, #16
 8003152:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003156:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t172.re = -t285.re;
 800315a:	4b21      	ldr	r3, [pc, #132]	; (80031e0 <G_q+0x2bf8>)
 800315c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003160:	443a      	add	r2, r7
 8003162:	4413      	add	r3, r2
 8003164:	ed93 7b00 	vldr	d7, [r3]
 8003168:	eeb1 7b47 	vneg.f64	d7, d7
 800316c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003170:	ed83 7b00 	vstr	d7, [r3]
  t172.im = -theta4;
 8003174:	f107 0310 	add.w	r3, r7, #16
 8003178:	ed93 7b00 	vldr	d7, [r3]
 800317c:	eeb1 7b47 	vneg.f64	d7, d7
 8003180:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8003184:	ed83 7b02 	vstr	d7, [r3, #8]
  t159.re = t285.re;
 8003188:	4b15      	ldr	r3, [pc, #84]	; (80031e0 <G_q+0x2bf8>)
 800318a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800318e:	443a      	add	r2, r7
 8003190:	4413      	add	r3, r2
 8003192:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003196:	4b1a      	ldr	r3, [pc, #104]	; (8003200 <G_q+0x2c18>)
 8003198:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800319c:	4438      	add	r0, r7
 800319e:	4403      	add	r3, r0
 80031a0:	e9c3 1200 	strd	r1, r2, [r3]
  t159.im = theta4;
 80031a4:	4b16      	ldr	r3, [pc, #88]	; (8003200 <G_q+0x2c18>)
 80031a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031aa:	443a      	add	r2, r7
 80031ac:	4413      	add	r3, r2
 80031ae:	f107 0210 	add.w	r2, r7, #16
 80031b2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80031b6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t158.re = -t285.re;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <G_q+0x2bf8>)
 80031bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031c0:	443a      	add	r2, r7
 80031c2:	4413      	add	r3, r2
 80031c4:	ed93 7b00 	vldr	d7, [r3]
 80031c8:	eeb1 7b47 	vneg.f64	d7, d7
 80031cc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80031d0:	ed83 7b00 	vstr	d7, [r3]
  t158.im = -theta4;
 80031d4:	f107 0310 	add.w	r3, r7, #16
 80031d8:	ed93 7b00 	vldr	d7, [r3]
 80031dc:	e012      	b.n	8003204 <G_q+0x2c1c>
 80031de:	bf00      	nop
 80031e0:	ffffefd0 	.word	0xffffefd0
 80031e4:	ffffef70 	.word	0xffffef70
 80031e8:	ffffef50 	.word	0xffffef50
 80031ec:	ffffef30 	.word	0xffffef30
 80031f0:	ffffef10 	.word	0xffffef10
 80031f4:	ffffeef0 	.word	0xffffeef0
 80031f8:	ffffeed0 	.word	0xffffeed0
 80031fc:	ffffeeb0 	.word	0xffffeeb0
 8003200:	ffffee90 	.word	0xffffee90
 8003204:	eeb1 7b47 	vneg.f64	d7, d7
 8003208:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800320c:	ed83 7b02 	vstr	d7, [r3, #8]
  t153.re = t285.re;
 8003210:	4bbd      	ldr	r3, [pc, #756]	; (8003508 <G_q+0x2f20>)
 8003212:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003216:	443a      	add	r2, r7
 8003218:	4413      	add	r3, r2
 800321a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800321e:	4bbb      	ldr	r3, [pc, #748]	; (800350c <G_q+0x2f24>)
 8003220:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003224:	4438      	add	r0, r7
 8003226:	4403      	add	r3, r0
 8003228:	e9c3 1200 	strd	r1, r2, [r3]
  t153.im = theta4;
 800322c:	4bb7      	ldr	r3, [pc, #732]	; (800350c <G_q+0x2f24>)
 800322e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003232:	443a      	add	r2, r7
 8003234:	4413      	add	r3, r2
 8003236:	f107 0210 	add.w	r2, r7, #16
 800323a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800323e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t152.re = -t285.re;
 8003242:	4bb1      	ldr	r3, [pc, #708]	; (8003508 <G_q+0x2f20>)
 8003244:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003248:	443a      	add	r2, r7
 800324a:	4413      	add	r3, r2
 800324c:	ed93 7b00 	vldr	d7, [r3]
 8003250:	eeb1 7b47 	vneg.f64	d7, d7
 8003254:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003258:	ed83 7b00 	vstr	d7, [r3]
  t152.im = -theta4;
 800325c:	f107 0310 	add.w	r3, r7, #16
 8003260:	ed93 7b00 	vldr	d7, [r3]
 8003264:	eeb1 7b47 	vneg.f64	d7, d7
 8003268:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800326c:	ed83 7b02 	vstr	d7, [r3, #8]
  t135.re = t285.re;
 8003270:	4ba5      	ldr	r3, [pc, #660]	; (8003508 <G_q+0x2f20>)
 8003272:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003276:	443a      	add	r2, r7
 8003278:	4413      	add	r3, r2
 800327a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800327e:	4ba4      	ldr	r3, [pc, #656]	; (8003510 <G_q+0x2f28>)
 8003280:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003284:	4438      	add	r0, r7
 8003286:	4403      	add	r3, r0
 8003288:	e9c3 1200 	strd	r1, r2, [r3]
  t135.im = theta4;
 800328c:	4ba0      	ldr	r3, [pc, #640]	; (8003510 <G_q+0x2f28>)
 800328e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003292:	443a      	add	r2, r7
 8003294:	4413      	add	r3, r2
 8003296:	f107 0210 	add.w	r2, r7, #16
 800329a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800329e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t134.re = -t285.re;
 80032a2:	4b99      	ldr	r3, [pc, #612]	; (8003508 <G_q+0x2f20>)
 80032a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032a8:	443a      	add	r2, r7
 80032aa:	4413      	add	r3, r2
 80032ac:	ed93 7b00 	vldr	d7, [r3]
 80032b0:	eeb1 7b47 	vneg.f64	d7, d7
 80032b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80032b8:	ed83 7b00 	vstr	d7, [r3]
  t134.im = -theta4;
 80032bc:	f107 0310 	add.w	r3, r7, #16
 80032c0:	ed93 7b00 	vldr	d7, [r3]
 80032c4:	eeb1 7b47 	vneg.f64	d7, d7
 80032c8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80032cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t123.re = t285.re;
 80032d0:	4b8d      	ldr	r3, [pc, #564]	; (8003508 <G_q+0x2f20>)
 80032d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032d6:	443a      	add	r2, r7
 80032d8:	4413      	add	r3, r2
 80032da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80032de:	4b8d      	ldr	r3, [pc, #564]	; (8003514 <G_q+0x2f2c>)
 80032e0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80032e4:	4438      	add	r0, r7
 80032e6:	4403      	add	r3, r0
 80032e8:	e9c3 1200 	strd	r1, r2, [r3]
  t123.im = theta4;
 80032ec:	4b89      	ldr	r3, [pc, #548]	; (8003514 <G_q+0x2f2c>)
 80032ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032f2:	443a      	add	r2, r7
 80032f4:	4413      	add	r3, r2
 80032f6:	f107 0210 	add.w	r2, r7, #16
 80032fa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80032fe:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t122.re = -t285.re;
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <G_q+0x2f20>)
 8003304:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003308:	443a      	add	r2, r7
 800330a:	4413      	add	r3, r2
 800330c:	ed93 7b00 	vldr	d7, [r3]
 8003310:	eeb1 7b47 	vneg.f64	d7, d7
 8003314:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003318:	ed83 7b00 	vstr	d7, [r3]
  t122.im = -theta4;
 800331c:	f107 0310 	add.w	r3, r7, #16
 8003320:	ed93 7b00 	vldr	d7, [r3]
 8003324:	eeb1 7b47 	vneg.f64	d7, d7
 8003328:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800332c:	ed83 7b02 	vstr	d7, [r3, #8]
  t103.re = t285.re;
 8003330:	4b75      	ldr	r3, [pc, #468]	; (8003508 <G_q+0x2f20>)
 8003332:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003336:	443a      	add	r2, r7
 8003338:	4413      	add	r3, r2
 800333a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800333e:	4b76      	ldr	r3, [pc, #472]	; (8003518 <G_q+0x2f30>)
 8003340:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003344:	4438      	add	r0, r7
 8003346:	4403      	add	r3, r0
 8003348:	e9c3 1200 	strd	r1, r2, [r3]
  t103.im = theta4;
 800334c:	4b72      	ldr	r3, [pc, #456]	; (8003518 <G_q+0x2f30>)
 800334e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003352:	443a      	add	r2, r7
 8003354:	4413      	add	r3, r2
 8003356:	f107 0210 	add.w	r2, r7, #16
 800335a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800335e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t102.re = -t285.re;
 8003362:	4b69      	ldr	r3, [pc, #420]	; (8003508 <G_q+0x2f20>)
 8003364:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003368:	443a      	add	r2, r7
 800336a:	4413      	add	r3, r2
 800336c:	ed93 7b00 	vldr	d7, [r3]
 8003370:	eeb1 7b47 	vneg.f64	d7, d7
 8003374:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003378:	ed83 7b00 	vstr	d7, [r3]
  t102.im = -theta4;
 800337c:	f107 0310 	add.w	r3, r7, #16
 8003380:	ed93 7b00 	vldr	d7, [r3]
 8003384:	eeb1 7b47 	vneg.f64	d7, d7
 8003388:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800338c:	ed83 7b02 	vstr	d7, [r3, #8]
  t101.re = t285.re;
 8003390:	4b5d      	ldr	r3, [pc, #372]	; (8003508 <G_q+0x2f20>)
 8003392:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003396:	443a      	add	r2, r7
 8003398:	4413      	add	r3, r2
 800339a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800339e:	4b5f      	ldr	r3, [pc, #380]	; (800351c <G_q+0x2f34>)
 80033a0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80033a4:	4438      	add	r0, r7
 80033a6:	4403      	add	r3, r0
 80033a8:	e9c3 1200 	strd	r1, r2, [r3]
  t101.im = theta4;
 80033ac:	4b5b      	ldr	r3, [pc, #364]	; (800351c <G_q+0x2f34>)
 80033ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033b2:	443a      	add	r2, r7
 80033b4:	4413      	add	r3, r2
 80033b6:	f107 0210 	add.w	r2, r7, #16
 80033ba:	e9d2 1200 	ldrd	r1, r2, [r2]
 80033be:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t100.re = -t285.re;
 80033c2:	4b51      	ldr	r3, [pc, #324]	; (8003508 <G_q+0x2f20>)
 80033c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033c8:	443a      	add	r2, r7
 80033ca:	4413      	add	r3, r2
 80033cc:	ed93 7b00 	vldr	d7, [r3]
 80033d0:	eeb1 7b47 	vneg.f64	d7, d7
 80033d4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80033d8:	ed83 7b00 	vstr	d7, [r3]
  t100.im = -theta4;
 80033dc:	f107 0310 	add.w	r3, r7, #16
 80033e0:	ed93 7b00 	vldr	d7, [r3]
 80033e4:	eeb1 7b47 	vneg.f64	d7, d7
 80033e8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80033ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t87.re = t285.re;
 80033f0:	4b45      	ldr	r3, [pc, #276]	; (8003508 <G_q+0x2f20>)
 80033f2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033f6:	443a      	add	r2, r7
 80033f8:	4413      	add	r3, r2
 80033fa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80033fe:	4b48      	ldr	r3, [pc, #288]	; (8003520 <G_q+0x2f38>)
 8003400:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003404:	4438      	add	r0, r7
 8003406:	4403      	add	r3, r0
 8003408:	e9c3 1200 	strd	r1, r2, [r3]
  t87.im = theta4;
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <G_q+0x2f38>)
 800340e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003412:	443a      	add	r2, r7
 8003414:	4413      	add	r3, r2
 8003416:	f107 0210 	add.w	r2, r7, #16
 800341a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800341e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t86.re = -t285.re;
 8003422:	4b39      	ldr	r3, [pc, #228]	; (8003508 <G_q+0x2f20>)
 8003424:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003428:	443a      	add	r2, r7
 800342a:	4413      	add	r3, r2
 800342c:	ed93 7b00 	vldr	d7, [r3]
 8003430:	eeb1 7b47 	vneg.f64	d7, d7
 8003434:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003438:	ed83 7b00 	vstr	d7, [r3]
  t86.im = -theta4;
 800343c:	f107 0310 	add.w	r3, r7, #16
 8003440:	ed93 7b00 	vldr	d7, [r3]
 8003444:	eeb1 7b47 	vneg.f64	d7, d7
 8003448:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800344c:	ed83 7b02 	vstr	d7, [r3, #8]
  t59.re = t285.re;
 8003450:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <G_q+0x2f20>)
 8003452:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003456:	443a      	add	r2, r7
 8003458:	4413      	add	r3, r2
 800345a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800345e:	4b31      	ldr	r3, [pc, #196]	; (8003524 <G_q+0x2f3c>)
 8003460:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003464:	4438      	add	r0, r7
 8003466:	4403      	add	r3, r0
 8003468:	e9c3 1200 	strd	r1, r2, [r3]
  t59.im = theta4;
 800346c:	4b2d      	ldr	r3, [pc, #180]	; (8003524 <G_q+0x2f3c>)
 800346e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003472:	443a      	add	r2, r7
 8003474:	4413      	add	r3, r2
 8003476:	f107 0210 	add.w	r2, r7, #16
 800347a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800347e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t58.re = -t285.re;
 8003482:	4b21      	ldr	r3, [pc, #132]	; (8003508 <G_q+0x2f20>)
 8003484:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003488:	443a      	add	r2, r7
 800348a:	4413      	add	r3, r2
 800348c:	ed93 7b00 	vldr	d7, [r3]
 8003490:	eeb1 7b47 	vneg.f64	d7, d7
 8003494:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003498:	ed83 7b00 	vstr	d7, [r3]
  t58.im = -theta4;
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	ed93 7b00 	vldr	d7, [r3]
 80034a4:	eeb1 7b47 	vneg.f64	d7, d7
 80034a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80034ac:	ed83 7b02 	vstr	d7, [r3, #8]
  t42.re = t285.re;
 80034b0:	4b15      	ldr	r3, [pc, #84]	; (8003508 <G_q+0x2f20>)
 80034b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034b6:	443a      	add	r2, r7
 80034b8:	4413      	add	r3, r2
 80034ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <G_q+0x2f40>)
 80034c0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80034c4:	4438      	add	r0, r7
 80034c6:	4403      	add	r3, r0
 80034c8:	e9c3 1200 	strd	r1, r2, [r3]
  t42.im = theta4;
 80034cc:	4b16      	ldr	r3, [pc, #88]	; (8003528 <G_q+0x2f40>)
 80034ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034d2:	443a      	add	r2, r7
 80034d4:	4413      	add	r3, r2
 80034d6:	f107 0210 	add.w	r2, r7, #16
 80034da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80034de:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t41.re = -t285.re;
 80034e2:	4b09      	ldr	r3, [pc, #36]	; (8003508 <G_q+0x2f20>)
 80034e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034e8:	443a      	add	r2, r7
 80034ea:	4413      	add	r3, r2
 80034ec:	ed93 7b00 	vldr	d7, [r3]
 80034f0:	eeb1 7b47 	vneg.f64	d7, d7
 80034f4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80034f8:	ed83 7b00 	vstr	d7, [r3]
  t41.im = -theta4;
 80034fc:	f107 0310 	add.w	r3, r7, #16
 8003500:	ed93 7b00 	vldr	d7, [r3]
 8003504:	e012      	b.n	800352c <G_q+0x2f44>
 8003506:	bf00      	nop
 8003508:	ffffefd0 	.word	0xffffefd0
 800350c:	ffffee70 	.word	0xffffee70
 8003510:	ffffee50 	.word	0xffffee50
 8003514:	ffffee30 	.word	0xffffee30
 8003518:	ffffee10 	.word	0xffffee10
 800351c:	ffffedf0 	.word	0xffffedf0
 8003520:	ffffedd0 	.word	0xffffedd0
 8003524:	ffffedb0 	.word	0xffffedb0
 8003528:	ffffed90 	.word	0xffffed90
 800352c:	eeb1 7b47 	vneg.f64	d7, d7
 8003530:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003534:	ed83 7b02 	vstr	d7, [r3, #8]
  t22.re = t285.re;
 8003538:	4bbd      	ldr	r3, [pc, #756]	; (8003830 <G_q+0x3248>)
 800353a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800353e:	443a      	add	r2, r7
 8003540:	4413      	add	r3, r2
 8003542:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003546:	4bbb      	ldr	r3, [pc, #748]	; (8003834 <G_q+0x324c>)
 8003548:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800354c:	4438      	add	r0, r7
 800354e:	4403      	add	r3, r0
 8003550:	e9c3 1200 	strd	r1, r2, [r3]
  t22.im = theta4;
 8003554:	4bb7      	ldr	r3, [pc, #732]	; (8003834 <G_q+0x324c>)
 8003556:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800355a:	443a      	add	r2, r7
 800355c:	4413      	add	r3, r2
 800355e:	f107 0210 	add.w	r2, r7, #16
 8003562:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003566:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t21.re = -t285.re;
 800356a:	4bb1      	ldr	r3, [pc, #708]	; (8003830 <G_q+0x3248>)
 800356c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003570:	443a      	add	r2, r7
 8003572:	4413      	add	r3, r2
 8003574:	ed93 7b00 	vldr	d7, [r3]
 8003578:	eeb1 7b47 	vneg.f64	d7, d7
 800357c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003580:	ed83 7b00 	vstr	d7, [r3]
  t21.im = -theta4;
 8003584:	f107 0310 	add.w	r3, r7, #16
 8003588:	ed93 7b00 	vldr	d7, [r3]
 800358c:	eeb1 7b47 	vneg.f64	d7, d7
 8003590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003594:	ed83 7b02 	vstr	d7, [r3, #8]
  t20.re = t285.re;
 8003598:	4ba5      	ldr	r3, [pc, #660]	; (8003830 <G_q+0x3248>)
 800359a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800359e:	443a      	add	r2, r7
 80035a0:	4413      	add	r3, r2
 80035a2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80035a6:	4ba4      	ldr	r3, [pc, #656]	; (8003838 <G_q+0x3250>)
 80035a8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80035ac:	4438      	add	r0, r7
 80035ae:	4403      	add	r3, r0
 80035b0:	e9c3 1200 	strd	r1, r2, [r3]
  t20.im = theta4;
 80035b4:	4ba0      	ldr	r3, [pc, #640]	; (8003838 <G_q+0x3250>)
 80035b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035ba:	443a      	add	r2, r7
 80035bc:	4413      	add	r3, r2
 80035be:	f107 0210 	add.w	r2, r7, #16
 80035c2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80035c6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t19.re = -t285.re;
 80035ca:	4b99      	ldr	r3, [pc, #612]	; (8003830 <G_q+0x3248>)
 80035cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035d0:	443a      	add	r2, r7
 80035d2:	4413      	add	r3, r2
 80035d4:	ed93 7b00 	vldr	d7, [r3]
 80035d8:	eeb1 7b47 	vneg.f64	d7, d7
 80035dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035e0:	ed83 7b00 	vstr	d7, [r3]
  t19.im = -theta4;
 80035e4:	f107 0310 	add.w	r3, r7, #16
 80035e8:	ed93 7b00 	vldr	d7, [r3]
 80035ec:	eeb1 7b47 	vneg.f64	d7, d7
 80035f0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035f4:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t19);
 80035f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80035fc:	4618      	mov	r0, r3
 80035fe:	f00d f8ff 	bl	8010800 <b_exp>
  t267.re = theta5 * 0.0;
 8003602:	4b8e      	ldr	r3, [pc, #568]	; (800383c <G_q+0x3254>)
 8003604:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003608:	443a      	add	r2, r7
 800360a:	4413      	add	r3, r2
 800360c:	ed93 7b00 	vldr	d7, [r3]
 8003610:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8003828 <G_q+0x3240>
 8003614:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003618:	4b89      	ldr	r3, [pc, #548]	; (8003840 <G_q+0x3258>)
 800361a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800361e:	443a      	add	r2, r7
 8003620:	4413      	add	r3, r2
 8003622:	ed83 7b00 	vstr	d7, [r3]
  t267.im = theta5;
 8003626:	4b86      	ldr	r3, [pc, #536]	; (8003840 <G_q+0x3258>)
 8003628:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800362c:	443a      	add	r2, r7
 800362e:	4413      	add	r3, r2
 8003630:	4a82      	ldr	r2, [pc, #520]	; (800383c <G_q+0x3254>)
 8003632:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003636:	4439      	add	r1, r7
 8003638:	440a      	add	r2, r1
 800363a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800363e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t266.re = -t267.re;
 8003642:	4b7f      	ldr	r3, [pc, #508]	; (8003840 <G_q+0x3258>)
 8003644:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003648:	443a      	add	r2, r7
 800364a:	4413      	add	r3, r2
 800364c:	ed93 7b00 	vldr	d7, [r3]
 8003650:	eeb1 7b47 	vneg.f64	d7, d7
 8003654:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003658:	ed83 7b00 	vstr	d7, [r3]
  t266.im = -theta5;
 800365c:	4b77      	ldr	r3, [pc, #476]	; (800383c <G_q+0x3254>)
 800365e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003662:	443a      	add	r2, r7
 8003664:	4413      	add	r3, r2
 8003666:	ed93 7b00 	vldr	d7, [r3]
 800366a:	eeb1 7b47 	vneg.f64	d7, d7
 800366e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003672:	ed83 7b02 	vstr	d7, [r3, #8]
  t265.re = t267.re;
 8003676:	4b72      	ldr	r3, [pc, #456]	; (8003840 <G_q+0x3258>)
 8003678:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800367c:	443a      	add	r2, r7
 800367e:	4413      	add	r3, r2
 8003680:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003684:	4b6f      	ldr	r3, [pc, #444]	; (8003844 <G_q+0x325c>)
 8003686:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800368a:	4438      	add	r0, r7
 800368c:	4403      	add	r3, r0
 800368e:	e9c3 1200 	strd	r1, r2, [r3]
  t265.im = theta5;
 8003692:	4b6c      	ldr	r3, [pc, #432]	; (8003844 <G_q+0x325c>)
 8003694:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003698:	443a      	add	r2, r7
 800369a:	4413      	add	r3, r2
 800369c:	4a67      	ldr	r2, [pc, #412]	; (800383c <G_q+0x3254>)
 800369e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80036a2:	4439      	add	r1, r7
 80036a4:	440a      	add	r2, r1
 80036a6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80036aa:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t264.re = -t267.re;
 80036ae:	4b64      	ldr	r3, [pc, #400]	; (8003840 <G_q+0x3258>)
 80036b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036b4:	443a      	add	r2, r7
 80036b6:	4413      	add	r3, r2
 80036b8:	ed93 7b00 	vldr	d7, [r3]
 80036bc:	eeb1 7b47 	vneg.f64	d7, d7
 80036c0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036c4:	ed83 7b00 	vstr	d7, [r3]
  t264.im = -theta5;
 80036c8:	4b5c      	ldr	r3, [pc, #368]	; (800383c <G_q+0x3254>)
 80036ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036ce:	443a      	add	r2, r7
 80036d0:	4413      	add	r3, r2
 80036d2:	ed93 7b00 	vldr	d7, [r3]
 80036d6:	eeb1 7b47 	vneg.f64	d7, d7
 80036da:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80036de:	ed83 7b02 	vstr	d7, [r3, #8]
  t219.re = t267.re;
 80036e2:	4b57      	ldr	r3, [pc, #348]	; (8003840 <G_q+0x3258>)
 80036e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036e8:	443a      	add	r2, r7
 80036ea:	4413      	add	r3, r2
 80036ec:	e9d3 1200 	ldrd	r1, r2, [r3]
 80036f0:	4b55      	ldr	r3, [pc, #340]	; (8003848 <G_q+0x3260>)
 80036f2:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80036f6:	4438      	add	r0, r7
 80036f8:	4403      	add	r3, r0
 80036fa:	e9c3 1200 	strd	r1, r2, [r3]
  t219.im = theta5;
 80036fe:	4b52      	ldr	r3, [pc, #328]	; (8003848 <G_q+0x3260>)
 8003700:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003704:	443a      	add	r2, r7
 8003706:	4413      	add	r3, r2
 8003708:	4a4c      	ldr	r2, [pc, #304]	; (800383c <G_q+0x3254>)
 800370a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800370e:	4439      	add	r1, r7
 8003710:	440a      	add	r2, r1
 8003712:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003716:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t218.re = -t267.re;
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <G_q+0x3258>)
 800371c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003720:	443a      	add	r2, r7
 8003722:	4413      	add	r3, r2
 8003724:	ed93 7b00 	vldr	d7, [r3]
 8003728:	eeb1 7b47 	vneg.f64	d7, d7
 800372c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003730:	ed83 7b00 	vstr	d7, [r3]
  t218.im = -theta5;
 8003734:	4b41      	ldr	r3, [pc, #260]	; (800383c <G_q+0x3254>)
 8003736:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800373a:	443a      	add	r2, r7
 800373c:	4413      	add	r3, r2
 800373e:	ed93 7b00 	vldr	d7, [r3]
 8003742:	eeb1 7b47 	vneg.f64	d7, d7
 8003746:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800374a:	ed83 7b02 	vstr	d7, [r3, #8]
  t195.re = t267.re;
 800374e:	4b3c      	ldr	r3, [pc, #240]	; (8003840 <G_q+0x3258>)
 8003750:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003754:	443a      	add	r2, r7
 8003756:	4413      	add	r3, r2
 8003758:	e9d3 1200 	ldrd	r1, r2, [r3]
 800375c:	4b3b      	ldr	r3, [pc, #236]	; (800384c <G_q+0x3264>)
 800375e:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8003762:	4438      	add	r0, r7
 8003764:	4403      	add	r3, r0
 8003766:	e9c3 1200 	strd	r1, r2, [r3]
  t195.im = theta5;
 800376a:	4b38      	ldr	r3, [pc, #224]	; (800384c <G_q+0x3264>)
 800376c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003770:	443a      	add	r2, r7
 8003772:	4413      	add	r3, r2
 8003774:	4a31      	ldr	r2, [pc, #196]	; (800383c <G_q+0x3254>)
 8003776:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800377a:	4439      	add	r1, r7
 800377c:	440a      	add	r2, r1
 800377e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8003782:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t194.re = -t267.re;
 8003786:	4b2e      	ldr	r3, [pc, #184]	; (8003840 <G_q+0x3258>)
 8003788:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800378c:	443a      	add	r2, r7
 800378e:	4413      	add	r3, r2
 8003790:	ed93 7b00 	vldr	d7, [r3]
 8003794:	eeb1 7b47 	vneg.f64	d7, d7
 8003798:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800379c:	ed83 7b00 	vstr	d7, [r3]
  t194.im = -theta5;
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <G_q+0x3254>)
 80037a2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037a6:	443a      	add	r2, r7
 80037a8:	4413      	add	r3, r2
 80037aa:	ed93 7b00 	vldr	d7, [r3]
 80037ae:	eeb1 7b47 	vneg.f64	d7, d7
 80037b2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80037b6:	ed83 7b02 	vstr	d7, [r3, #8]
  t125.re = t267.re;
 80037ba:	4b21      	ldr	r3, [pc, #132]	; (8003840 <G_q+0x3258>)
 80037bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037c0:	443a      	add	r2, r7
 80037c2:	4413      	add	r3, r2
 80037c4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80037c8:	4b21      	ldr	r3, [pc, #132]	; (8003850 <G_q+0x3268>)
 80037ca:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80037ce:	4438      	add	r0, r7
 80037d0:	4403      	add	r3, r0
 80037d2:	e9c3 1200 	strd	r1, r2, [r3]
  t125.im = theta5;
 80037d6:	4b1e      	ldr	r3, [pc, #120]	; (8003850 <G_q+0x3268>)
 80037d8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037dc:	443a      	add	r2, r7
 80037de:	4413      	add	r3, r2
 80037e0:	4a16      	ldr	r2, [pc, #88]	; (800383c <G_q+0x3254>)
 80037e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80037e6:	4439      	add	r1, r7
 80037e8:	440a      	add	r2, r1
 80037ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80037ee:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t124.re = -t267.re;
 80037f2:	4b13      	ldr	r3, [pc, #76]	; (8003840 <G_q+0x3258>)
 80037f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037f8:	443a      	add	r2, r7
 80037fa:	4413      	add	r3, r2
 80037fc:	ed93 7b00 	vldr	d7, [r3]
 8003800:	eeb1 7b47 	vneg.f64	d7, d7
 8003804:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003808:	ed83 7b00 	vstr	d7, [r3]
  t124.im = -theta5;
 800380c:	4b0b      	ldr	r3, [pc, #44]	; (800383c <G_q+0x3254>)
 800380e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003812:	443a      	add	r2, r7
 8003814:	4413      	add	r3, r2
 8003816:	ed93 7b00 	vldr	d7, [r3]
 800381a:	eeb1 7b47 	vneg.f64	d7, d7
 800381e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003822:	e017      	b.n	8003854 <G_q+0x326c>
 8003824:	f3af 8000 	nop.w
	...
 8003830:	ffffefd0 	.word	0xffffefd0
 8003834:	ffffed70 	.word	0xffffed70
 8003838:	ffffed50 	.word	0xffffed50
 800383c:	ffffec38 	.word	0xffffec38
 8003840:	ffffed30 	.word	0xffffed30
 8003844:	ffffed10 	.word	0xffffed10
 8003848:	ffffecf0 	.word	0xffffecf0
 800384c:	ffffecd0 	.word	0xffffecd0
 8003850:	ffffecb0 	.word	0xffffecb0
 8003854:	ed83 7b02 	vstr	d7, [r3, #8]
  t113.re = t267.re;
 8003858:	4be2      	ldr	r3, [pc, #904]	; (8003be4 <G_q+0x35fc>)
 800385a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800385e:	443a      	add	r2, r7
 8003860:	4413      	add	r3, r2
 8003862:	e9d3 1200 	ldrd	r1, r2, [r3]
 8003866:	4be0      	ldr	r3, [pc, #896]	; (8003be8 <G_q+0x3600>)
 8003868:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800386c:	4438      	add	r0, r7
 800386e:	4403      	add	r3, r0
 8003870:	e9c3 1200 	strd	r1, r2, [r3]
  t113.im = theta5;
 8003874:	4bdc      	ldr	r3, [pc, #880]	; (8003be8 <G_q+0x3600>)
 8003876:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800387a:	443a      	add	r2, r7
 800387c:	4413      	add	r3, r2
 800387e:	4adb      	ldr	r2, [pc, #876]	; (8003bec <G_q+0x3604>)
 8003880:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003884:	4439      	add	r1, r7
 8003886:	440a      	add	r2, r1
 8003888:	e9d2 1200 	ldrd	r1, r2, [r2]
 800388c:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t112.re = -t267.re;
 8003890:	4bd4      	ldr	r3, [pc, #848]	; (8003be4 <G_q+0x35fc>)
 8003892:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003896:	443a      	add	r2, r7
 8003898:	4413      	add	r3, r2
 800389a:	ed93 7b00 	vldr	d7, [r3]
 800389e:	eeb1 7b47 	vneg.f64	d7, d7
 80038a2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038a6:	ed83 7b00 	vstr	d7, [r3]
  t112.im = -theta5;
 80038aa:	4bd0      	ldr	r3, [pc, #832]	; (8003bec <G_q+0x3604>)
 80038ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038b0:	443a      	add	r2, r7
 80038b2:	4413      	add	r3, r2
 80038b4:	ed93 7b00 	vldr	d7, [r3]
 80038b8:	eeb1 7b47 	vneg.f64	d7, d7
 80038bc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80038c0:	ed83 7b02 	vstr	d7, [r3, #8]
  t55.re = t267.re;
 80038c4:	4bc7      	ldr	r3, [pc, #796]	; (8003be4 <G_q+0x35fc>)
 80038c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038ca:	443a      	add	r2, r7
 80038cc:	4413      	add	r3, r2
 80038ce:	e9d3 1200 	ldrd	r1, r2, [r3]
 80038d2:	4bc7      	ldr	r3, [pc, #796]	; (8003bf0 <G_q+0x3608>)
 80038d4:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80038d8:	4438      	add	r0, r7
 80038da:	4403      	add	r3, r0
 80038dc:	e9c3 1200 	strd	r1, r2, [r3]
  t55.im = theta5;
 80038e0:	4bc3      	ldr	r3, [pc, #780]	; (8003bf0 <G_q+0x3608>)
 80038e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038e6:	443a      	add	r2, r7
 80038e8:	4413      	add	r3, r2
 80038ea:	4ac0      	ldr	r2, [pc, #768]	; (8003bec <G_q+0x3604>)
 80038ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80038f0:	4439      	add	r1, r7
 80038f2:	440a      	add	r2, r1
 80038f4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80038f8:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t54.re = -t267.re;
 80038fc:	4bb9      	ldr	r3, [pc, #740]	; (8003be4 <G_q+0x35fc>)
 80038fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003902:	443a      	add	r2, r7
 8003904:	4413      	add	r3, r2
 8003906:	ed93 7b00 	vldr	d7, [r3]
 800390a:	eeb1 7b47 	vneg.f64	d7, d7
 800390e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003912:	ed83 7b00 	vstr	d7, [r3]
  t54.im = -theta5;
 8003916:	4bb5      	ldr	r3, [pc, #724]	; (8003bec <G_q+0x3604>)
 8003918:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800391c:	443a      	add	r2, r7
 800391e:	4413      	add	r3, r2
 8003920:	ed93 7b00 	vldr	d7, [r3]
 8003924:	eeb1 7b47 	vneg.f64	d7, d7
 8003928:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800392c:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t54);
 8003930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003934:	4618      	mov	r0, r3
 8003936:	f00c ff63 	bl	8010800 <b_exp>
  b_exp(&t87);
 800393a:	4bae      	ldr	r3, [pc, #696]	; (8003bf4 <G_q+0x360c>)
 800393c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003940:	443a      	add	r2, r7
 8003942:	4413      	add	r3, r2
 8003944:	4618      	mov	r0, r3
 8003946:	f00c ff5b 	bl	8010800 <b_exp>
  b_exp(&t83);
 800394a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800394e:	4618      	mov	r0, r3
 8003950:	f00c ff56 	bl	8010800 <b_exp>
  b_exp(&t85);
 8003954:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8003958:	4618      	mov	r0, r3
 800395a:	f00c ff51 	bl	8010800 <b_exp>
  b_exp(&t55);
 800395e:	4ba4      	ldr	r3, [pc, #656]	; (8003bf0 <G_q+0x3608>)
 8003960:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003964:	443a      	add	r2, r7
 8003966:	4413      	add	r3, r2
 8003968:	4618      	mov	r0, r3
 800396a:	f00c ff49 	bl	8010800 <b_exp>
  b_exp(&t33);
 800396e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003972:	4618      	mov	r0, r3
 8003974:	f00c ff44 	bl	8010800 <b_exp>
  b_exp(&t34);
 8003978:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800397c:	4618      	mov	r0, r3
 800397e:	f00c ff3f 	bl	8010800 <b_exp>
  b_exp(&t35);
 8003982:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8003986:	4618      	mov	r0, r3
 8003988:	f00c ff3a 	bl	8010800 <b_exp>
  b_exp(&t36);
 800398c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8003990:	4618      	mov	r0, r3
 8003992:	f00c ff35 	bl	8010800 <b_exp>
  b_exp(&t37);
 8003996:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800399a:	4618      	mov	r0, r3
 800399c:	f00c ff30 	bl	8010800 <b_exp>
  b_exp(&t38);
 80039a0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00c ff2b 	bl	8010800 <b_exp>
  b_exp(&t39);
 80039aa:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80039ae:	4618      	mov	r0, r3
 80039b0:	f00c ff26 	bl	8010800 <b_exp>
  b_exp(&t40);
 80039b4:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80039b8:	4618      	mov	r0, r3
 80039ba:	f00c ff21 	bl	8010800 <b_exp>
  b_exp(&t10);
 80039be:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80039c2:	4618      	mov	r0, r3
 80039c4:	f00c ff1c 	bl	8010800 <b_exp>
  b_exp(&t11);
 80039c8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f00c ff17 	bl	8010800 <b_exp>
  b_exp(&t12);
 80039d2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f00c ff12 	bl	8010800 <b_exp>
  b_exp(&t13);
 80039dc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80039e0:	4618      	mov	r0, r3
 80039e2:	f00c ff0d 	bl	8010800 <b_exp>
  b_exp(&t14);
 80039e6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80039ea:	4618      	mov	r0, r3
 80039ec:	f00c ff08 	bl	8010800 <b_exp>
  b_exp(&t15);
 80039f0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00c ff03 	bl	8010800 <b_exp>
  b_exp(&t16);
 80039fa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80039fe:	4618      	mov	r0, r3
 8003a00:	f00c fefe 	bl	8010800 <b_exp>
  b_exp(&t17);
 8003a04:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f00c fef9 	bl	8010800 <b_exp>
  b_exp(&t20);
 8003a0e:	4b7a      	ldr	r3, [pc, #488]	; (8003bf8 <G_q+0x3610>)
 8003a10:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a14:	443a      	add	r2, r7
 8003a16:	4413      	add	r3, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f00c fef1 	bl	8010800 <b_exp>
  b_exp(&t21);
 8003a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003a22:	4618      	mov	r0, r3
 8003a24:	f00c feec 	bl	8010800 <b_exp>
  b_exp(&t22);
 8003a28:	4b74      	ldr	r3, [pc, #464]	; (8003bfc <G_q+0x3614>)
 8003a2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a2e:	443a      	add	r2, r7
 8003a30:	4413      	add	r3, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f00c fee4 	bl	8010800 <b_exp>
  b_exp(&t23);
 8003a38:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00c fedf 	bl	8010800 <b_exp>
  b_exp(&t24);
 8003a42:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003a46:	4618      	mov	r0, r3
 8003a48:	f00c feda 	bl	8010800 <b_exp>
  b_exp(&t27);
 8003a4c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8003a50:	4618      	mov	r0, r3
 8003a52:	f00c fed5 	bl	8010800 <b_exp>
  b_exp(&t28);
 8003a56:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f00c fed0 	bl	8010800 <b_exp>
  b_exp(&t25);
 8003a60:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003a64:	4618      	mov	r0, r3
 8003a66:	f00c fecb 	bl	8010800 <b_exp>
  b_exp(&t26);
 8003a6a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f00c fec6 	bl	8010800 <b_exp>
  b_exp(&t31);
 8003a74:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f00c fec1 	bl	8010800 <b_exp>
  b_exp(&t32);
 8003a7e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8003a82:	4618      	mov	r0, r3
 8003a84:	f00c febc 	bl	8010800 <b_exp>
  b_exp(&t29);
 8003a88:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f00c feb7 	bl	8010800 <b_exp>
  b_exp(&t30);
 8003a92:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003a96:	4618      	mov	r0, r3
 8003a98:	f00c feb2 	bl	8010800 <b_exp>
  b_exp(&t9);
 8003a9c:	4b58      	ldr	r3, [pc, #352]	; (8003c00 <G_q+0x3618>)
 8003a9e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003aa2:	443a      	add	r2, r7
 8003aa4:	4413      	add	r3, r2
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00c feaa 	bl	8010800 <b_exp>
  b_exp(&t5);
 8003aac:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f00c fea5 	bl	8010800 <b_exp>
  b_exp(&t6);
 8003ab6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8003aba:	4618      	mov	r0, r3
 8003abc:	f00c fea0 	bl	8010800 <b_exp>
  b_exp(&t4);
 8003ac0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f00c fe9b 	bl	8010800 <b_exp>
  b_exp(&t41);
 8003aca:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f00c fe96 	bl	8010800 <b_exp>
  b_exp(&t42);
 8003ad4:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <G_q+0x361c>)
 8003ad6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ada:	443a      	add	r2, r7
 8003adc:	4413      	add	r3, r2
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f00c fe8e 	bl	8010800 <b_exp>
  b_exp(&t43);
 8003ae4:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f00c fe89 	bl	8010800 <b_exp>
  b_exp(&t44);
 8003aee:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00c fe84 	bl	8010800 <b_exp>
  b_exp(&t47);
 8003af8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8003afc:	4618      	mov	r0, r3
 8003afe:	f00c fe7f 	bl	8010800 <b_exp>
  b_exp(&t48);
 8003b02:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8003b06:	4618      	mov	r0, r3
 8003b08:	f00c fe7a 	bl	8010800 <b_exp>
  b_exp(&t45);
 8003b0c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8003b10:	4618      	mov	r0, r3
 8003b12:	f00c fe75 	bl	8010800 <b_exp>
  b_exp(&t46);
 8003b16:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f00c fe70 	bl	8010800 <b_exp>
  b_exp(&t51);
 8003b20:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8003b24:	4618      	mov	r0, r3
 8003b26:	f00c fe6b 	bl	8010800 <b_exp>
  b_exp(&t52);
 8003b2a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f00c fe66 	bl	8010800 <b_exp>
  b_exp(&t49);
 8003b34:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f00c fe61 	bl	8010800 <b_exp>
  b_exp(&t50);
 8003b3e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f00c fe5c 	bl	8010800 <b_exp>
  b_exp(&t56);
 8003b48:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f00c fe57 	bl	8010800 <b_exp>
  b_exp(&t57);
 8003b52:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00c fe52 	bl	8010800 <b_exp>
  b_exp(&t70);
 8003b5c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8003b60:	4618      	mov	r0, r3
 8003b62:	f00c fe4d 	bl	8010800 <b_exp>
  b_exp(&t71);
 8003b66:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f00c fe48 	bl	8010800 <b_exp>
  b_exp(&t72);
 8003b70:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8003b74:	4618      	mov	r0, r3
 8003b76:	f00c fe43 	bl	8010800 <b_exp>
  b_exp(&t73);
 8003b7a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f00c fe3e 	bl	8010800 <b_exp>
  b_exp(&t74);
 8003b84:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f00c fe39 	bl	8010800 <b_exp>
  b_exp(&t75);
 8003b8e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8003b92:	4618      	mov	r0, r3
 8003b94:	f00c fe34 	bl	8010800 <b_exp>
  b_exp(&t76);
 8003b98:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f00c fe2f 	bl	8010800 <b_exp>
  b_exp(&t77);
 8003ba2:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f00c fe2a 	bl	8010800 <b_exp>
  b_exp(&t58);
 8003bac:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f00c fe25 	bl	8010800 <b_exp>
  b_exp(&t59);
 8003bb6:	4b14      	ldr	r3, [pc, #80]	; (8003c08 <G_q+0x3620>)
 8003bb8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bbc:	443a      	add	r2, r7
 8003bbe:	4413      	add	r3, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f00c fe1d 	bl	8010800 <b_exp>
  b_exp(&t60);
 8003bc6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f00c fe18 	bl	8010800 <b_exp>
  b_exp(&t61);
 8003bd0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f00c fe13 	bl	8010800 <b_exp>
  b_exp(&t64);
 8003bda:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8003bde:	4618      	mov	r0, r3
 8003be0:	e014      	b.n	8003c0c <G_q+0x3624>
 8003be2:	bf00      	nop
 8003be4:	ffffed30 	.word	0xffffed30
 8003be8:	ffffec90 	.word	0xffffec90
 8003bec:	ffffec38 	.word	0xffffec38
 8003bf0:	ffffec70 	.word	0xffffec70
 8003bf4:	ffffedd0 	.word	0xffffedd0
 8003bf8:	ffffed50 	.word	0xffffed50
 8003bfc:	ffffed70 	.word	0xffffed70
 8003c00:	ffffeff0 	.word	0xffffeff0
 8003c04:	ffffed90 	.word	0xffffed90
 8003c08:	ffffedb0 	.word	0xffffedb0
 8003c0c:	f00c fdf8 	bl	8010800 <b_exp>
  b_exp(&t65);
 8003c10:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f00c fdf3 	bl	8010800 <b_exp>
  b_exp(&t62);
 8003c1a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f00c fdee 	bl	8010800 <b_exp>
  b_exp(&t63);
 8003c24:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f00c fde9 	bl	8010800 <b_exp>
  b_exp(&t68);
 8003c2e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8003c32:	4618      	mov	r0, r3
 8003c34:	f00c fde4 	bl	8010800 <b_exp>
  b_exp(&t69);
 8003c38:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f00c fddf 	bl	8010800 <b_exp>
  b_exp(&t66);
 8003c42:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003c46:	4618      	mov	r0, r3
 8003c48:	f00c fdda 	bl	8010800 <b_exp>
  b_exp(&t67);
 8003c4c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8003c50:	4618      	mov	r0, r3
 8003c52:	f00c fdd5 	bl	8010800 <b_exp>
  b_exp(&t78);
 8003c56:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f00c fdd0 	bl	8010800 <b_exp>
  b_exp(&t79);
 8003c60:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8003c64:	4618      	mov	r0, r3
 8003c66:	f00c fdcb 	bl	8010800 <b_exp>
  b_exp(&t80);
 8003c6a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f00c fdc6 	bl	8010800 <b_exp>
  b_exp(&t81);
 8003c74:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f00c fdc1 	bl	8010800 <b_exp>
  b_exp(&t82);
 8003c7e:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8003c82:	4618      	mov	r0, r3
 8003c84:	f00c fdbc 	bl	8010800 <b_exp>
  b_exp(&t84);
 8003c88:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f00c fdb7 	bl	8010800 <b_exp>
  b_exp(&t86);
 8003c92:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8003c96:	4618      	mov	r0, r3
 8003c98:	f00c fdb2 	bl	8010800 <b_exp>
  b_exp(&t154);
 8003c9c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f00c fdad 	bl	8010800 <b_exp>
  b_exp(&t155);
 8003ca6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8003caa:	4618      	mov	r0, r3
 8003cac:	f00c fda8 	bl	8010800 <b_exp>
  b_exp(&t156);
 8003cb0:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f00c fda3 	bl	8010800 <b_exp>
  b_exp(&t157);
 8003cba:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f00c fd9e 	bl	8010800 <b_exp>
  b_exp(&t112);
 8003cc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f00c fd99 	bl	8010800 <b_exp>
  b_exp(&t113);
 8003cce:	4bf3      	ldr	r3, [pc, #972]	; (800409c <G_q+0x3ab4>)
 8003cd0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003cd4:	443a      	add	r2, r7
 8003cd6:	4413      	add	r3, r2
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f00c fd91 	bl	8010800 <b_exp>
  b_exp(&t98);
 8003cde:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f00c fd8c 	bl	8010800 <b_exp>
  b_exp(&t99);
 8003ce8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8003cec:	4618      	mov	r0, r3
 8003cee:	f00c fd87 	bl	8010800 <b_exp>
  b_exp(&t96);
 8003cf2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f00c fd82 	bl	8010800 <b_exp>
  b_exp(&t97);
 8003cfc:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8003d00:	4618      	mov	r0, r3
 8003d02:	f00c fd7d 	bl	8010800 <b_exp>
  b_exp(&t92);
 8003d06:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f00c fd78 	bl	8010800 <b_exp>
  b_exp(&t93);
 8003d10:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8003d14:	4618      	mov	r0, r3
 8003d16:	f00c fd73 	bl	8010800 <b_exp>
  b_exp(&t94);
 8003d1a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f00c fd6e 	bl	8010800 <b_exp>
  b_exp(&t95);
 8003d24:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f00c fd69 	bl	8010800 <b_exp>
  b_exp(&t100);
 8003d2e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8003d32:	4618      	mov	r0, r3
 8003d34:	f00c fd64 	bl	8010800 <b_exp>
  b_exp(&t101);
 8003d38:	4bd9      	ldr	r3, [pc, #868]	; (80040a0 <G_q+0x3ab8>)
 8003d3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d3e:	443a      	add	r2, r7
 8003d40:	4413      	add	r3, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	f00c fd5c 	bl	8010800 <b_exp>
  b_exp(&t104);
 8003d48:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f00c fd57 	bl	8010800 <b_exp>
  b_exp(&t105);
 8003d52:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8003d56:	4618      	mov	r0, r3
 8003d58:	f00c fd52 	bl	8010800 <b_exp>
  b_exp(&t106);
 8003d5c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8003d60:	4618      	mov	r0, r3
 8003d62:	f00c fd4d 	bl	8010800 <b_exp>
  b_exp(&t107);
 8003d66:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f00c fd48 	bl	8010800 <b_exp>
  b_exp(&t108);
 8003d70:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8003d74:	4618      	mov	r0, r3
 8003d76:	f00c fd43 	bl	8010800 <b_exp>
  b_exp(&t109);
 8003d7a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f00c fd3e 	bl	8010800 <b_exp>
  b_exp(&t110);
 8003d84:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f00c fd39 	bl	8010800 <b_exp>
  b_exp(&t111);
 8003d8e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8003d92:	4618      	mov	r0, r3
 8003d94:	f00c fd34 	bl	8010800 <b_exp>
  b_exp(&t102);
 8003d98:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f00c fd2f 	bl	8010800 <b_exp>
  b_exp(&t103);
 8003da2:	4bc0      	ldr	r3, [pc, #768]	; (80040a4 <G_q+0x3abc>)
 8003da4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003da8:	443a      	add	r2, r7
 8003daa:	4413      	add	r3, r2
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00c fd27 	bl	8010800 <b_exp>
  b_exp(&t124);
 8003db2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003db6:	4618      	mov	r0, r3
 8003db8:	f00c fd22 	bl	8010800 <b_exp>
  b_exp(&t125);
 8003dbc:	4bba      	ldr	r3, [pc, #744]	; (80040a8 <G_q+0x3ac0>)
 8003dbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003dc2:	443a      	add	r2, r7
 8003dc4:	4413      	add	r3, r2
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f00c fd1a 	bl	8010800 <b_exp>
  b_exp(&t136);
 8003dcc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00c fd15 	bl	8010800 <b_exp>
  b_exp(&t137);
 8003dd6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f00c fd10 	bl	8010800 <b_exp>
  b_exp(&t138);
 8003de0:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00c fd0b 	bl	8010800 <b_exp>
  b_exp(&t139);
 8003dea:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8003dee:	4618      	mov	r0, r3
 8003df0:	f00c fd06 	bl	8010800 <b_exp>
  b_exp(&t152);
 8003df4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f00c fd01 	bl	8010800 <b_exp>
  b_exp(&t153);
 8003dfe:	4bab      	ldr	r3, [pc, #684]	; (80040ac <G_q+0x3ac4>)
 8003e00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e04:	443a      	add	r2, r7
 8003e06:	4413      	add	r3, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f00c fcf9 	bl	8010800 <b_exp>
  b_exp(&t150);
 8003e0e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8003e12:	4618      	mov	r0, r3
 8003e14:	f00c fcf4 	bl	8010800 <b_exp>
  b_exp(&t151);
 8003e18:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f00c fcef 	bl	8010800 <b_exp>
  b_exp(&t148);
 8003e22:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8003e26:	4618      	mov	r0, r3
 8003e28:	f00c fcea 	bl	8010800 <b_exp>
  b_exp(&t149);
 8003e2c:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00c fce5 	bl	8010800 <b_exp>
  b_exp(&t144);
 8003e36:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f00c fce0 	bl	8010800 <b_exp>
  b_exp(&t145);
 8003e40:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8003e44:	4618      	mov	r0, r3
 8003e46:	f00c fcdb 	bl	8010800 <b_exp>
  b_exp(&t146);
 8003e4a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f00c fcd6 	bl	8010800 <b_exp>
  b_exp(&t147);
 8003e54:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f00c fcd1 	bl	8010800 <b_exp>
  b_exp(&t134);
 8003e5e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8003e62:	4618      	mov	r0, r3
 8003e64:	f00c fccc 	bl	8010800 <b_exp>
  b_exp(&t135);
 8003e68:	4b91      	ldr	r3, [pc, #580]	; (80040b0 <G_q+0x3ac8>)
 8003e6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e6e:	443a      	add	r2, r7
 8003e70:	4413      	add	r3, r2
 8003e72:	4618      	mov	r0, r3
 8003e74:	f00c fcc4 	bl	8010800 <b_exp>
  b_exp(&t126);
 8003e78:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f00c fcbf 	bl	8010800 <b_exp>
  b_exp(&t127);
 8003e82:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8003e86:	4618      	mov	r0, r3
 8003e88:	f00c fcba 	bl	8010800 <b_exp>
  b_exp(&t128);
 8003e8c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8003e90:	4618      	mov	r0, r3
 8003e92:	f00c fcb5 	bl	8010800 <b_exp>
  b_exp(&t129);
 8003e96:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f00c fcb0 	bl	8010800 <b_exp>
  b_exp(&t130);
 8003ea0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f00c fcab 	bl	8010800 <b_exp>
  b_exp(&t131);
 8003eaa:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f00c fca6 	bl	8010800 <b_exp>
  b_exp(&t132);
 8003eb4:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f00c fca1 	bl	8010800 <b_exp>
  b_exp(&t133);
 8003ebe:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f00c fc9c 	bl	8010800 <b_exp>
  b_exp(&t140);
 8003ec8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f00c fc97 	bl	8010800 <b_exp>
  b_exp(&t141);
 8003ed2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f00c fc92 	bl	8010800 <b_exp>
  b_exp(&t142);
 8003edc:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f00c fc8d 	bl	8010800 <b_exp>
  b_exp(&t143);
 8003ee6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8003eea:	4618      	mov	r0, r3
 8003eec:	f00c fc88 	bl	8010800 <b_exp>
  b_exp(&t168);
 8003ef0:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f00c fc83 	bl	8010800 <b_exp>
  b_exp(&t169);
 8003efa:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8003efe:	4618      	mov	r0, r3
 8003f00:	f00c fc7e 	bl	8010800 <b_exp>
  b_exp(&t170);
 8003f04:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f00c fc79 	bl	8010800 <b_exp>
  b_exp(&t171);
 8003f0e:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f00c fc74 	bl	8010800 <b_exp>
  b_exp(&t120);
 8003f18:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00c fc6f 	bl	8010800 <b_exp>
  b_exp(&t121);
 8003f22:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8003f26:	4618      	mov	r0, r3
 8003f28:	f00c fc6a 	bl	8010800 <b_exp>
  b_exp(&t118);
 8003f2c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8003f30:	4618      	mov	r0, r3
 8003f32:	f00c fc65 	bl	8010800 <b_exp>
  b_exp(&t119);
 8003f36:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f00c fc60 	bl	8010800 <b_exp>
  b_exp(&t114);
 8003f40:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8003f44:	4618      	mov	r0, r3
 8003f46:	f00c fc5b 	bl	8010800 <b_exp>
  b_exp(&t115);
 8003f4a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f00c fc56 	bl	8010800 <b_exp>
  b_exp(&t116);
 8003f54:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f00c fc51 	bl	8010800 <b_exp>
  b_exp(&t117);
 8003f5e:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8003f62:	4618      	mov	r0, r3
 8003f64:	f00c fc4c 	bl	8010800 <b_exp>
  b_exp(&t122);
 8003f68:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f00c fc47 	bl	8010800 <b_exp>
  b_exp(&t123);
 8003f72:	4b50      	ldr	r3, [pc, #320]	; (80040b4 <G_q+0x3acc>)
 8003f74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f78:	443a      	add	r2, r7
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f00c fc3f 	bl	8010800 <b_exp>
  b_exp(&t160);
 8003f82:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8003f86:	4618      	mov	r0, r3
 8003f88:	f00c fc3a 	bl	8010800 <b_exp>
  b_exp(&t161);
 8003f8c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8003f90:	4618      	mov	r0, r3
 8003f92:	f00c fc35 	bl	8010800 <b_exp>
  b_exp(&t162);
 8003f96:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f00c fc30 	bl	8010800 <b_exp>
  b_exp(&t163);
 8003fa0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f00c fc2b 	bl	8010800 <b_exp>
  b_exp(&t164);
 8003faa:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f00c fc26 	bl	8010800 <b_exp>
  b_exp(&t165);
 8003fb4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f00c fc21 	bl	8010800 <b_exp>
  b_exp(&t166);
 8003fbe:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f00c fc1c 	bl	8010800 <b_exp>
  b_exp(&t167);
 8003fc8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f00c fc17 	bl	8010800 <b_exp>
  b_exp(&t158);
 8003fd2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f00c fc12 	bl	8010800 <b_exp>
  b_exp(&t159);
 8003fdc:	4b36      	ldr	r3, [pc, #216]	; (80040b8 <G_q+0x3ad0>)
 8003fde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003fe2:	443a      	add	r2, r7
 8003fe4:	4413      	add	r3, r2
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f00c fc0a 	bl	8010800 <b_exp>
  b_exp(&t194);
 8003fec:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f00c fc05 	bl	8010800 <b_exp>
  b_exp(&t195);
 8003ff6:	4b31      	ldr	r3, [pc, #196]	; (80040bc <G_q+0x3ad4>)
 8003ff8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ffc:	443a      	add	r2, r7
 8003ffe:	4413      	add	r3, r2
 8004000:	4618      	mov	r0, r3
 8004002:	f00c fbfd 	bl	8010800 <b_exp>
  b_exp(&t172);
 8004006:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800400a:	4618      	mov	r0, r3
 800400c:	f00c fbf8 	bl	8010800 <b_exp>
  b_exp(&t173);
 8004010:	4b2b      	ldr	r3, [pc, #172]	; (80040c0 <G_q+0x3ad8>)
 8004012:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004016:	443a      	add	r2, r7
 8004018:	4413      	add	r3, r2
 800401a:	4618      	mov	r0, r3
 800401c:	f00c fbf0 	bl	8010800 <b_exp>
  b_exp(&t174);
 8004020:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8004024:	4618      	mov	r0, r3
 8004026:	f00c fbeb 	bl	8010800 <b_exp>
  b_exp(&t175);
 800402a:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800402e:	4618      	mov	r0, r3
 8004030:	f00c fbe6 	bl	8010800 <b_exp>
  b_exp(&t182);
 8004034:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8004038:	4618      	mov	r0, r3
 800403a:	f00c fbe1 	bl	8010800 <b_exp>
  b_exp(&t183);
 800403e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8004042:	4618      	mov	r0, r3
 8004044:	f00c fbdc 	bl	8010800 <b_exp>
  b_exp(&t180);
 8004048:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800404c:	4618      	mov	r0, r3
 800404e:	f00c fbd7 	bl	8010800 <b_exp>
  b_exp(&t181);
 8004052:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8004056:	4618      	mov	r0, r3
 8004058:	f00c fbd2 	bl	8010800 <b_exp>
  b_exp(&t176);
 800405c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8004060:	4618      	mov	r0, r3
 8004062:	f00c fbcd 	bl	8010800 <b_exp>
  b_exp(&t177);
 8004066:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800406a:	4618      	mov	r0, r3
 800406c:	f00c fbc8 	bl	8010800 <b_exp>
  b_exp(&t178);
 8004070:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8004074:	4618      	mov	r0, r3
 8004076:	f00c fbc3 	bl	8010800 <b_exp>
  b_exp(&t179);
 800407a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800407e:	4618      	mov	r0, r3
 8004080:	f00c fbbe 	bl	8010800 <b_exp>
  b_exp(&t186);
 8004084:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8004088:	4618      	mov	r0, r3
 800408a:	f00c fbb9 	bl	8010800 <b_exp>
  b_exp(&t187);
 800408e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8004092:	4618      	mov	r0, r3
 8004094:	f00c fbb4 	bl	8010800 <b_exp>
 8004098:	e014      	b.n	80040c4 <G_q+0x3adc>
 800409a:	bf00      	nop
 800409c:	ffffec90 	.word	0xffffec90
 80040a0:	ffffedf0 	.word	0xffffedf0
 80040a4:	ffffee10 	.word	0xffffee10
 80040a8:	ffffecb0 	.word	0xffffecb0
 80040ac:	ffffee70 	.word	0xffffee70
 80040b0:	ffffee50 	.word	0xffffee50
 80040b4:	ffffee30 	.word	0xffffee30
 80040b8:	ffffee90 	.word	0xffffee90
 80040bc:	ffffecd0 	.word	0xffffecd0
 80040c0:	ffffeeb0 	.word	0xffffeeb0
  b_exp(&t188);
 80040c4:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 80040c8:	4618      	mov	r0, r3
 80040ca:	f00c fb99 	bl	8010800 <b_exp>
  b_exp(&t189);
 80040ce:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 80040d2:	4618      	mov	r0, r3
 80040d4:	f00c fb94 	bl	8010800 <b_exp>
  b_exp(&t190);
 80040d8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80040dc:	4618      	mov	r0, r3
 80040de:	f00c fb8f 	bl	8010800 <b_exp>
  b_exp(&t191);
 80040e2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80040e6:	4618      	mov	r0, r3
 80040e8:	f00c fb8a 	bl	8010800 <b_exp>
  b_exp(&t192);
 80040ec:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80040f0:	4618      	mov	r0, r3
 80040f2:	f00c fb85 	bl	8010800 <b_exp>
  b_exp(&t193);
 80040f6:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 80040fa:	4618      	mov	r0, r3
 80040fc:	f00c fb80 	bl	8010800 <b_exp>
  b_exp(&t184);
 8004100:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004104:	4618      	mov	r0, r3
 8004106:	f00c fb7b 	bl	8010800 <b_exp>
  b_exp(&t185);
 800410a:	4bec      	ldr	r3, [pc, #944]	; (80044bc <G_q+0x3ed4>)
 800410c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004110:	443a      	add	r2, r7
 8004112:	4413      	add	r3, r2
 8004114:	4618      	mov	r0, r3
 8004116:	f00c fb73 	bl	8010800 <b_exp>
  b_exp(&t196);
 800411a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800411e:	4618      	mov	r0, r3
 8004120:	f00c fb6e 	bl	8010800 <b_exp>
  b_exp(&t197);
 8004124:	4be6      	ldr	r3, [pc, #920]	; (80044c0 <G_q+0x3ed8>)
 8004126:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800412a:	443a      	add	r2, r7
 800412c:	4413      	add	r3, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f00c fb66 	bl	8010800 <b_exp>
  b_exp(&t198);
 8004134:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8004138:	4618      	mov	r0, r3
 800413a:	f00c fb61 	bl	8010800 <b_exp>
  b_exp(&t199);
 800413e:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 8004142:	4618      	mov	r0, r3
 8004144:	f00c fb5c 	bl	8010800 <b_exp>
  b_exp(&t206);
 8004148:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800414c:	4618      	mov	r0, r3
 800414e:	f00c fb57 	bl	8010800 <b_exp>
  b_exp(&t207);
 8004152:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8004156:	4618      	mov	r0, r3
 8004158:	f00c fb52 	bl	8010800 <b_exp>
  b_exp(&t204);
 800415c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8004160:	4618      	mov	r0, r3
 8004162:	f00c fb4d 	bl	8010800 <b_exp>
  b_exp(&t205);
 8004166:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800416a:	4618      	mov	r0, r3
 800416c:	f00c fb48 	bl	8010800 <b_exp>
  b_exp(&t200);
 8004170:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8004174:	4618      	mov	r0, r3
 8004176:	f00c fb43 	bl	8010800 <b_exp>
  b_exp(&t201);
 800417a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800417e:	4618      	mov	r0, r3
 8004180:	f00c fb3e 	bl	8010800 <b_exp>
  b_exp(&t202);
 8004184:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8004188:	4618      	mov	r0, r3
 800418a:	f00c fb39 	bl	8010800 <b_exp>
  b_exp(&t203);
 800418e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8004192:	4618      	mov	r0, r3
 8004194:	f00c fb34 	bl	8010800 <b_exp>
  b_exp(&t210);
 8004198:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800419c:	4618      	mov	r0, r3
 800419e:	f00c fb2f 	bl	8010800 <b_exp>
  b_exp(&t211);
 80041a2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 80041a6:	4618      	mov	r0, r3
 80041a8:	f00c fb2a 	bl	8010800 <b_exp>
  b_exp(&t212);
 80041ac:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 80041b0:	4618      	mov	r0, r3
 80041b2:	f00c fb25 	bl	8010800 <b_exp>
  b_exp(&t213);
 80041b6:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 80041ba:	4618      	mov	r0, r3
 80041bc:	f00c fb20 	bl	8010800 <b_exp>
  b_exp(&t214);
 80041c0:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80041c4:	4618      	mov	r0, r3
 80041c6:	f00c fb1b 	bl	8010800 <b_exp>
  b_exp(&t215);
 80041ca:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80041ce:	4618      	mov	r0, r3
 80041d0:	f00c fb16 	bl	8010800 <b_exp>
  b_exp(&t216);
 80041d4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80041d8:	4618      	mov	r0, r3
 80041da:	f00c fb11 	bl	8010800 <b_exp>
  b_exp(&t217);
 80041de:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80041e2:	4618      	mov	r0, r3
 80041e4:	f00c fb0c 	bl	8010800 <b_exp>
  b_exp(&t208);
 80041e8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80041ec:	4618      	mov	r0, r3
 80041ee:	f00c fb07 	bl	8010800 <b_exp>
  b_exp(&t209);
 80041f2:	4bb4      	ldr	r3, [pc, #720]	; (80044c4 <G_q+0x3edc>)
 80041f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80041f8:	443a      	add	r2, r7
 80041fa:	4413      	add	r3, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f00c faff 	bl	8010800 <b_exp>
  b_exp(&t230);
 8004202:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004206:	4618      	mov	r0, r3
 8004208:	f00c fafa 	bl	8010800 <b_exp>
  b_exp(&t231);
 800420c:	4bae      	ldr	r3, [pc, #696]	; (80044c8 <G_q+0x3ee0>)
 800420e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004212:	443a      	add	r2, r7
 8004214:	4413      	add	r3, r2
 8004216:	4618      	mov	r0, r3
 8004218:	f00c faf2 	bl	8010800 <b_exp>
  b_exp(&t232);
 800421c:	f241 0350 	movw	r3, #4176	; 0x1050
 8004220:	443b      	add	r3, r7
 8004222:	4618      	mov	r0, r3
 8004224:	f00c faec 	bl	8010800 <b_exp>
  b_exp(&t233);
 8004228:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800422c:	4618      	mov	r0, r3
 800422e:	f00c fae7 	bl	8010800 <b_exp>
  b_exp(&t240);
 8004232:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8004236:	4618      	mov	r0, r3
 8004238:	f00c fae2 	bl	8010800 <b_exp>
  b_exp(&t241);
 800423c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8004240:	4618      	mov	r0, r3
 8004242:	f00c fadd 	bl	8010800 <b_exp>
  b_exp(&t238);
 8004246:	f241 0390 	movw	r3, #4240	; 0x1090
 800424a:	443b      	add	r3, r7
 800424c:	4618      	mov	r0, r3
 800424e:	f00c fad7 	bl	8010800 <b_exp>
  b_exp(&t239);
 8004252:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8004256:	4618      	mov	r0, r3
 8004258:	f00c fad2 	bl	8010800 <b_exp>
  b_exp(&t234);
 800425c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8004260:	4618      	mov	r0, r3
 8004262:	f00c facd 	bl	8010800 <b_exp>
  b_exp(&t235);
 8004266:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800426a:	4618      	mov	r0, r3
 800426c:	f00c fac8 	bl	8010800 <b_exp>
  b_exp(&t236);
 8004270:	f241 0370 	movw	r3, #4208	; 0x1070
 8004274:	443b      	add	r3, r7
 8004276:	4618      	mov	r0, r3
 8004278:	f00c fac2 	bl	8010800 <b_exp>
  b_exp(&t237);
 800427c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8004280:	4618      	mov	r0, r3
 8004282:	f00c fabd 	bl	8010800 <b_exp>
  b_exp(&t228);
 8004286:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800428a:	4618      	mov	r0, r3
 800428c:	f00c fab8 	bl	8010800 <b_exp>
  b_exp(&t229);
 8004290:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <G_q+0x3ee4>)
 8004292:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004296:	443a      	add	r2, r7
 8004298:	4413      	add	r3, r2
 800429a:	4618      	mov	r0, r3
 800429c:	f00c fab0 	bl	8010800 <b_exp>
  b_exp(&t220);
 80042a0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 80042a4:	4618      	mov	r0, r3
 80042a6:	f00c faab 	bl	8010800 <b_exp>
  b_exp(&t221);
 80042aa:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f00c faa6 	bl	8010800 <b_exp>
  b_exp(&t222);
 80042b4:	f241 0310 	movw	r3, #4112	; 0x1010
 80042b8:	443b      	add	r3, r7
 80042ba:	4618      	mov	r0, r3
 80042bc:	f00c faa0 	bl	8010800 <b_exp>
  b_exp(&t223);
 80042c0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80042c4:	4618      	mov	r0, r3
 80042c6:	f00c fa9b 	bl	8010800 <b_exp>
  b_exp(&t224);
 80042ca:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80042ce:	4618      	mov	r0, r3
 80042d0:	f00c fa96 	bl	8010800 <b_exp>
  b_exp(&t225);
 80042d4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80042d8:	4618      	mov	r0, r3
 80042da:	f00c fa91 	bl	8010800 <b_exp>
  b_exp(&t226);
 80042de:	f241 0330 	movw	r3, #4144	; 0x1030
 80042e2:	443b      	add	r3, r7
 80042e4:	4618      	mov	r0, r3
 80042e6:	f00c fa8b 	bl	8010800 <b_exp>
  b_exp(&t227);
 80042ea:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80042ee:	4618      	mov	r0, r3
 80042f0:	f00c fa86 	bl	8010800 <b_exp>
  b_exp(&t218);
 80042f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80042f8:	4618      	mov	r0, r3
 80042fa:	f00c fa81 	bl	8010800 <b_exp>
  b_exp(&t219);
 80042fe:	4b74      	ldr	r3, [pc, #464]	; (80044d0 <G_q+0x3ee8>)
 8004300:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004304:	443a      	add	r2, r7
 8004306:	4413      	add	r3, r2
 8004308:	4618      	mov	r0, r3
 800430a:	f00c fa79 	bl	8010800 <b_exp>
  b_exp(&t264);
 800430e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8004312:	4618      	mov	r0, r3
 8004314:	f00c fa74 	bl	8010800 <b_exp>
  b_exp(&t265);
 8004318:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <G_q+0x3eec>)
 800431a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800431e:	443a      	add	r2, r7
 8004320:	4413      	add	r3, r2
 8004322:	4618      	mov	r0, r3
 8004324:	f00c fa6c 	bl	8010800 <b_exp>
  b_exp(&t242);
 8004328:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800432c:	4618      	mov	r0, r3
 800432e:	f00c fa67 	bl	8010800 <b_exp>
  b_exp(&t243);
 8004332:	4b69      	ldr	r3, [pc, #420]	; (80044d8 <G_q+0x3ef0>)
 8004334:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004338:	443a      	add	r2, r7
 800433a:	4413      	add	r3, r2
 800433c:	4618      	mov	r0, r3
 800433e:	f00c fa5f 	bl	8010800 <b_exp>
  b_exp(&t244);
 8004342:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8004346:	443b      	add	r3, r7
 8004348:	4618      	mov	r0, r3
 800434a:	f00c fa59 	bl	8010800 <b_exp>
  b_exp(&t245);
 800434e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8004352:	4618      	mov	r0, r3
 8004354:	f00c fa54 	bl	8010800 <b_exp>
  b_exp(&t252);
 8004358:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800435c:	4618      	mov	r0, r3
 800435e:	f00c fa4f 	bl	8010800 <b_exp>
  b_exp(&t253);
 8004362:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8004366:	4618      	mov	r0, r3
 8004368:	f00c fa4a 	bl	8010800 <b_exp>
  b_exp(&t250);
 800436c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8004370:	443b      	add	r3, r7
 8004372:	4618      	mov	r0, r3
 8004374:	f00c fa44 	bl	8010800 <b_exp>
  b_exp(&t251);
 8004378:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800437c:	4618      	mov	r0, r3
 800437e:	f00c fa3f 	bl	8010800 <b_exp>
  b_exp(&t246);
 8004382:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8004386:	4618      	mov	r0, r3
 8004388:	f00c fa3a 	bl	8010800 <b_exp>
  b_exp(&t247);
 800438c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8004390:	4618      	mov	r0, r3
 8004392:	f00c fa35 	bl	8010800 <b_exp>
  b_exp(&t248);
 8004396:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800439a:	443b      	add	r3, r7
 800439c:	4618      	mov	r0, r3
 800439e:	f00c fa2f 	bl	8010800 <b_exp>
  b_exp(&t249);
 80043a2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80043a6:	4618      	mov	r0, r3
 80043a8:	f00c fa2a 	bl	8010800 <b_exp>
  b_exp(&t256);
 80043ac:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80043b0:	4618      	mov	r0, r3
 80043b2:	f00c fa25 	bl	8010800 <b_exp>
  b_exp(&t257);
 80043b6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80043ba:	4618      	mov	r0, r3
 80043bc:	f00c fa20 	bl	8010800 <b_exp>
  b_exp(&t258);
 80043c0:	f241 1310 	movw	r3, #4368	; 0x1110
 80043c4:	443b      	add	r3, r7
 80043c6:	4618      	mov	r0, r3
 80043c8:	f00c fa1a 	bl	8010800 <b_exp>
  b_exp(&t259);
 80043cc:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80043d0:	4618      	mov	r0, r3
 80043d2:	f00c fa15 	bl	8010800 <b_exp>
  b_exp(&t260);
 80043d6:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80043da:	4618      	mov	r0, r3
 80043dc:	f00c fa10 	bl	8010800 <b_exp>
  b_exp(&t261);
 80043e0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80043e4:	4618      	mov	r0, r3
 80043e6:	f00c fa0b 	bl	8010800 <b_exp>
  b_exp(&t262);
 80043ea:	f241 1330 	movw	r3, #4400	; 0x1130
 80043ee:	443b      	add	r3, r7
 80043f0:	4618      	mov	r0, r3
 80043f2:	f00c fa05 	bl	8010800 <b_exp>
  b_exp(&t263);
 80043f6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00c fa00 	bl	8010800 <b_exp>
  b_exp(&t254);
 8004400:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004404:	4618      	mov	r0, r3
 8004406:	f00c f9fb 	bl	8010800 <b_exp>
  b_exp(&t255);
 800440a:	4b34      	ldr	r3, [pc, #208]	; (80044dc <G_q+0x3ef4>)
 800440c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004410:	443a      	add	r2, r7
 8004412:	4413      	add	r3, r2
 8004414:	4618      	mov	r0, r3
 8004416:	f00c f9f3 	bl	8010800 <b_exp>
  b_exp(&t266);
 800441a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800441e:	4618      	mov	r0, r3
 8004420:	f00c f9ee 	bl	8010800 <b_exp>
  b_exp(&t267);
 8004424:	4b2e      	ldr	r3, [pc, #184]	; (80044e0 <G_q+0x3ef8>)
 8004426:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800442a:	443a      	add	r2, r7
 800442c:	4413      	add	r3, r2
 800442e:	4618      	mov	r0, r3
 8004430:	f00c f9e6 	bl	8010800 <b_exp>
  b_exp(&t268);
 8004434:	f241 1350 	movw	r3, #4432	; 0x1150
 8004438:	443b      	add	r3, r7
 800443a:	4618      	mov	r0, r3
 800443c:	f00c f9e0 	bl	8010800 <b_exp>
  b_exp(&t269);
 8004440:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8004444:	4618      	mov	r0, r3
 8004446:	f00c f9db 	bl	8010800 <b_exp>
  b_exp(&t280);
 800444a:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800444e:	443b      	add	r3, r7
 8004450:	4618      	mov	r0, r3
 8004452:	f00c f9d5 	bl	8010800 <b_exp>
  b_exp(&t281);
 8004456:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800445a:	4618      	mov	r0, r3
 800445c:	f00c f9d0 	bl	8010800 <b_exp>
  b_exp(&t282);
 8004460:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8004464:	4618      	mov	r0, r3
 8004466:	f00c f9cb 	bl	8010800 <b_exp>
  b_exp(&t283);
 800446a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800446e:	4618      	mov	r0, r3
 8004470:	f00c f9c6 	bl	8010800 <b_exp>
  b_exp(&t284);
 8004474:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004478:	4618      	mov	r0, r3
 800447a:	f00c f9c1 	bl	8010800 <b_exp>
  b_exp(&t285);
 800447e:	4b19      	ldr	r3, [pc, #100]	; (80044e4 <G_q+0x3efc>)
 8004480:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004484:	443a      	add	r2, r7
 8004486:	4413      	add	r3, r2
 8004488:	4618      	mov	r0, r3
 800448a:	f00c f9b9 	bl	8010800 <b_exp>
  b_exp(&t286);
 800448e:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8004492:	443b      	add	r3, r7
 8004494:	4618      	mov	r0, r3
 8004496:	f00c f9b3 	bl	8010800 <b_exp>
  b_exp(&t287);
 800449a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800449e:	4618      	mov	r0, r3
 80044a0:	f00c f9ae 	bl	8010800 <b_exp>
  b_exp(&t294);
 80044a4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80044a8:	4618      	mov	r0, r3
 80044aa:	f00c f9a9 	bl	8010800 <b_exp>
  b_exp(&t295);
 80044ae:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80044b2:	4618      	mov	r0, r3
 80044b4:	f00c f9a4 	bl	8010800 <b_exp>
 80044b8:	e016      	b.n	80044e8 <G_q+0x3f00>
 80044ba:	bf00      	nop
 80044bc:	ffffeed0 	.word	0xffffeed0
 80044c0:	ffffeef0 	.word	0xffffeef0
 80044c4:	ffffef10 	.word	0xffffef10
 80044c8:	ffffef50 	.word	0xffffef50
 80044cc:	ffffef30 	.word	0xffffef30
 80044d0:	ffffecf0 	.word	0xffffecf0
 80044d4:	ffffed10 	.word	0xffffed10
 80044d8:	ffffef70 	.word	0xffffef70
 80044dc:	ffffef90 	.word	0xffffef90
 80044e0:	ffffed30 	.word	0xffffed30
 80044e4:	ffffefd0 	.word	0xffffefd0
  b_exp(&t292);
 80044e8:	f241 2310 	movw	r3, #4624	; 0x1210
 80044ec:	443b      	add	r3, r7
 80044ee:	4618      	mov	r0, r3
 80044f0:	f00c f986 	bl	8010800 <b_exp>
  b_exp(&t293);
 80044f4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80044f8:	4618      	mov	r0, r3
 80044fa:	f00c f981 	bl	8010800 <b_exp>
  b_exp(&t288);
 80044fe:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8004502:	4618      	mov	r0, r3
 8004504:	f00c f97c 	bl	8010800 <b_exp>
  b_exp(&t289);
 8004508:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800450c:	4618      	mov	r0, r3
 800450e:	f00c f977 	bl	8010800 <b_exp>
  b_exp(&t290);
 8004512:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8004516:	443b      	add	r3, r7
 8004518:	4618      	mov	r0, r3
 800451a:	f00c f971 	bl	8010800 <b_exp>
  b_exp(&t291);
 800451e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8004522:	4618      	mov	r0, r3
 8004524:	f00c f96c 	bl	8010800 <b_exp>
  b_exp(&t278);
 8004528:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800452c:	4618      	mov	r0, r3
 800452e:	f00c f967 	bl	8010800 <b_exp>
  b_exp(&t279);
 8004532:	4bd5      	ldr	r3, [pc, #852]	; (8004888 <G_q+0x42a0>)
 8004534:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004538:	443a      	add	r2, r7
 800453a:	4413      	add	r3, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f00c f95f 	bl	8010800 <b_exp>
  b_exp(&t270);
 8004542:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8004546:	4618      	mov	r0, r3
 8004548:	f00c f95a 	bl	8010800 <b_exp>
  b_exp(&t271);
 800454c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8004550:	4618      	mov	r0, r3
 8004552:	f00c f955 	bl	8010800 <b_exp>
  b_exp(&t272);
 8004556:	f241 1370 	movw	r3, #4464	; 0x1170
 800455a:	443b      	add	r3, r7
 800455c:	4618      	mov	r0, r3
 800455e:	f00c f94f 	bl	8010800 <b_exp>
  b_exp(&t273);
 8004562:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8004566:	4618      	mov	r0, r3
 8004568:	f00c f94a 	bl	8010800 <b_exp>
  b_exp(&t274);
 800456c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8004570:	4618      	mov	r0, r3
 8004572:	f00c f945 	bl	8010800 <b_exp>
  b_exp(&t275);
 8004576:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800457a:	4618      	mov	r0, r3
 800457c:	f00c f940 	bl	8010800 <b_exp>
  b_exp(&t276);
 8004580:	f241 1390 	movw	r3, #4496	; 0x1190
 8004584:	443b      	add	r3, r7
 8004586:	4618      	mov	r0, r3
 8004588:	f00c f93a 	bl	8010800 <b_exp>
  b_exp(&t277);
 800458c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8004590:	4618      	mov	r0, r3
 8004592:	f00c f935 	bl	8010800 <b_exp>
  b_exp(&t296);
 8004596:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800459a:	4618      	mov	r0, r3
 800459c:	f00c f930 	bl	8010800 <b_exp>
  b_exp(&t297);
 80045a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045a4:	4618      	mov	r0, r3
 80045a6:	f00c f92b 	bl	8010800 <b_exp>
  b_exp(&t298);
 80045aa:	f241 2330 	movw	r3, #4656	; 0x1230
 80045ae:	443b      	add	r3, r7
 80045b0:	4618      	mov	r0, r3
 80045b2:	f00c f925 	bl	8010800 <b_exp>
  b_exp(&t299);
 80045b6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80045ba:	4618      	mov	r0, r3
 80045bc:	f00c f920 	bl	8010800 <b_exp>
  b_G_q[0].re = 0.0;
 80045c0:	4bb2      	ldr	r3, [pc, #712]	; (800488c <G_q+0x42a4>)
 80045c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045c6:	443a      	add	r2, r7
 80045c8:	4413      	add	r3, r2
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	f04f 0400 	mov.w	r4, #0
 80045d4:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[0].im = 0.0;
 80045d8:	4bac      	ldr	r3, [pc, #688]	; (800488c <G_q+0x42a4>)
 80045da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045de:	443a      	add	r2, r7
 80045e0:	4413      	add	r3, r2
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	f04f 0300 	mov.w	r3, #0
 80045e8:	f04f 0400 	mov.w	r4, #0
 80045ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  if (t33.im == 0.0) {
 80045f0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80045f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80045f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	d115      	bne.n	800462e <G_q+0x4046>
    t33_re = t33.re / 2.0;
 8004602:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004606:	ed93 6b00 	vldr	d6, [r3]
 800460a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800460e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004612:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8004616:	443b      	add	r3, r7
 8004618:	ed83 7b00 	vstr	d7, [r3]
    t33_im = 0.0;
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	f04f 0400 	mov.w	r4, #0
 8004624:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8004628:	e9c2 3400 	strd	r3, r4, [r2]
 800462c:	e037      	b.n	800469e <G_q+0x40b6>
  } else if (t33.re == 0.0) {
 800462e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004632:	ed93 7b00 	vldr	d7, [r3]
 8004636:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800463a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800463e:	d115      	bne.n	800466c <G_q+0x4084>
    t33_re = 0.0;
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	f04f 0400 	mov.w	r4, #0
 8004648:	f241 32c8 	movw	r2, #5064	; 0x13c8
 800464c:	443a      	add	r2, r7
 800464e:	e9c2 3400 	strd	r3, r4, [r2]
    t33_im = t33.im / 2.0;
 8004652:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004656:	ed93 6b02 	vldr	d6, [r3, #8]
 800465a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800465e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004662:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004666:	ed83 7b00 	vstr	d7, [r3]
 800466a:	e018      	b.n	800469e <G_q+0x40b6>
  } else {
    t33_re = t33.re / 2.0;
 800466c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8004670:	ed93 6b00 	vldr	d6, [r3]
 8004674:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004678:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800467c:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8004680:	443b      	add	r3, r7
 8004682:	ed83 7b00 	vstr	d7, [r3]
    t33_im = t33.im / 2.0;
 8004686:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800468a:	ed93 6b02 	vldr	d6, [r3, #8]
 800468e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004692:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004696:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800469a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t34.im == 0.0) {
 800469e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80046a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80046a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80046aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ae:	d116      	bne.n	80046de <G_q+0x40f6>
    t34_re = t34.re / 2.0;
 80046b0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80046b4:	ed93 6b00 	vldr	d6, [r3]
 80046b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80046bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80046c0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80046c4:	443b      	add	r3, r7
 80046c6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80046ca:	f04f 0300 	mov.w	r3, #0
 80046ce:	f04f 0400 	mov.w	r4, #0
 80046d2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80046d6:	443a      	add	r2, r7
 80046d8:	e9c2 3400 	strd	r3, r4, [r2]
 80046dc:	e039      	b.n	8004752 <G_q+0x416a>
  } else if (t34.re == 0.0) {
 80046de:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80046e2:	ed93 7b00 	vldr	d7, [r3]
 80046e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80046ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ee:	d116      	bne.n	800471e <G_q+0x4136>
    t34_re = 0.0;
 80046f0:	f04f 0300 	mov.w	r3, #0
 80046f4:	f04f 0400 	mov.w	r4, #0
 80046f8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80046fc:	443a      	add	r2, r7
 80046fe:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t34.im / 2.0;
 8004702:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004706:	ed93 6b02 	vldr	d6, [r3, #8]
 800470a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800470e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004712:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004716:	443b      	add	r3, r7
 8004718:	ed83 7b00 	vstr	d7, [r3]
 800471c:	e019      	b.n	8004752 <G_q+0x416a>
  } else {
    t34_re = t34.re / 2.0;
 800471e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8004722:	ed93 6b00 	vldr	d6, [r3]
 8004726:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800472a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800472e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004732:	443b      	add	r3, r7
 8004734:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t34.im / 2.0;
 8004738:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800473c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004740:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004744:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004748:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800474c:	443b      	add	r3, r7
 800474e:	ed83 7b00 	vstr	d7, [r3]
  }

  t33_re += t34_re;
 8004752:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8004756:	443b      	add	r3, r7
 8004758:	ed93 6b00 	vldr	d6, [r3]
 800475c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004760:	443b      	add	r3, r7
 8004762:	ed93 7b00 	vldr	d7, [r3]
 8004766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800476a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800476e:	443b      	add	r3, r7
 8004770:	ed83 7b00 	vstr	d7, [r3]
  t33_im += t34_im;
 8004774:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8004778:	ed93 6b00 	vldr	d6, [r3]
 800477c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004780:	443b      	add	r3, r7
 8004782:	ed93 7b00 	vldr	d7, [r3]
 8004786:	ee36 7b07 	vadd.f64	d7, d6, d7
 800478a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800478e:	ed83 7b00 	vstr	d7, [r3]
  t35_re = (t35.re * 0.0 - t35.im * 0.5) - (t36.re * 0.0 - t36.im * 0.5);
 8004792:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004796:	ed93 7b00 	vldr	d7, [r3]
 800479a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8004880 <G_q+0x4298>
 800479e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80047a2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80047a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80047aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80047ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80047b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80047b6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80047ba:	ed93 7b00 	vldr	d7, [r3]
 80047be:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8004880 <G_q+0x4298>
 80047c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80047c6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80047ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80047ce:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80047d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80047d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80047da:	f241 2398 	movw	r3, #4760	; 0x1298
 80047de:	443b      	add	r3, r7
 80047e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80047e4:	ed83 7b00 	vstr	d7, [r3]
  t35_im = (t35.re * 0.5 + t35.im * 0.0) - (t36.re * 0.5 + t36.im * 0.0);
 80047e8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80047ec:	ed93 7b00 	vldr	d7, [r3]
 80047f0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80047f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80047f8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80047fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8004800:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8004880 <G_q+0x4298>
 8004804:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004808:	ee36 6b07 	vadd.f64	d6, d6, d7
 800480c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004810:	ed93 7b00 	vldr	d7, [r3]
 8004814:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004818:	ee27 5b05 	vmul.f64	d5, d7, d5
 800481c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8004820:	ed93 7b02 	vldr	d7, [r3, #8]
 8004824:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8004880 <G_q+0x4298>
 8004828:	ee27 7b04 	vmul.f64	d7, d7, d4
 800482c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004830:	f241 2390 	movw	r3, #4752	; 0x1290
 8004834:	443b      	add	r3, r7
 8004836:	ee36 7b47 	vsub.f64	d7, d6, d7
 800483a:	ed83 7b00 	vstr	d7, [r3]
  if (t37.im == 0.0) {
 800483e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004842:	ed93 7b02 	vldr	d7, [r3, #8]
 8004846:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800484a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484e:	d11f      	bne.n	8004890 <G_q+0x42a8>
    t37_re = t37.re / 2.0;
 8004850:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004854:	ed93 6b00 	vldr	d6, [r3]
 8004858:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800485c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004860:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8004864:	443b      	add	r3, r7
 8004866:	ed83 7b00 	vstr	d7, [r3]
    t37_im = 0.0;
 800486a:	f04f 0300 	mov.w	r3, #0
 800486e:	f04f 0400 	mov.w	r4, #0
 8004872:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8004876:	e9c2 3400 	strd	r3, r4, [r2]
 800487a:	e041      	b.n	8004900 <G_q+0x4318>
 800487c:	f3af 8000 	nop.w
	...
 8004888:	ffffefb0 	.word	0xffffefb0
 800488c:	ffffec34 	.word	0xffffec34
  } else if (t37.re == 0.0) {
 8004890:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004894:	ed93 7b00 	vldr	d7, [r3]
 8004898:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800489c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a0:	d115      	bne.n	80048ce <G_q+0x42e6>
    t37_re = 0.0;
 80048a2:	f04f 0300 	mov.w	r3, #0
 80048a6:	f04f 0400 	mov.w	r4, #0
 80048aa:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80048ae:	443a      	add	r2, r7
 80048b0:	e9c2 3400 	strd	r3, r4, [r2]
    t37_im = t37.im / 2.0;
 80048b4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80048b8:	ed93 6b02 	vldr	d6, [r3, #8]
 80048bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80048c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048c4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80048c8:	ed83 7b00 	vstr	d7, [r3]
 80048cc:	e018      	b.n	8004900 <G_q+0x4318>
  } else {
    t37_re = t37.re / 2.0;
 80048ce:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80048d2:	ed93 6b00 	vldr	d6, [r3]
 80048d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80048da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048de:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80048e2:	443b      	add	r3, r7
 80048e4:	ed83 7b00 	vstr	d7, [r3]
    t37_im = t37.im / 2.0;
 80048e8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80048ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80048f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80048f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80048f8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80048fc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t38.im == 0.0) {
 8004900:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004904:	ed93 7b02 	vldr	d7, [r3, #8]
 8004908:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800490c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004910:	d116      	bne.n	8004940 <G_q+0x4358>
    t34_re = t38.re / 2.0;
 8004912:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004916:	ed93 6b00 	vldr	d6, [r3]
 800491a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800491e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004922:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004926:	443b      	add	r3, r7
 8004928:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800492c:	f04f 0300 	mov.w	r3, #0
 8004930:	f04f 0400 	mov.w	r4, #0
 8004934:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8004938:	443a      	add	r2, r7
 800493a:	e9c2 3400 	strd	r3, r4, [r2]
 800493e:	e039      	b.n	80049b4 <G_q+0x43cc>
  } else if (t38.re == 0.0) {
 8004940:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004944:	ed93 7b00 	vldr	d7, [r3]
 8004948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800494c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004950:	d116      	bne.n	8004980 <G_q+0x4398>
    t34_re = 0.0;
 8004952:	f04f 0300 	mov.w	r3, #0
 8004956:	f04f 0400 	mov.w	r4, #0
 800495a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800495e:	443a      	add	r2, r7
 8004960:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t38.im / 2.0;
 8004964:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004968:	ed93 6b02 	vldr	d6, [r3, #8]
 800496c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004974:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004978:	443b      	add	r3, r7
 800497a:	ed83 7b00 	vstr	d7, [r3]
 800497e:	e019      	b.n	80049b4 <G_q+0x43cc>
  } else {
    t34_re = t38.re / 2.0;
 8004980:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8004984:	ed93 6b00 	vldr	d6, [r3]
 8004988:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800498c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004990:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004994:	443b      	add	r3, r7
 8004996:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t38.im / 2.0;
 800499a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800499e:	ed93 6b02 	vldr	d6, [r3, #8]
 80049a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80049a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80049aa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80049ae:	443b      	add	r3, r7
 80049b0:	ed83 7b00 	vstr	d7, [r3]
  }

  t37_re += t34_re;
 80049b4:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80049b8:	443b      	add	r3, r7
 80049ba:	ed93 6b00 	vldr	d6, [r3]
 80049be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80049c2:	443b      	add	r3, r7
 80049c4:	ed93 7b00 	vldr	d7, [r3]
 80049c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049cc:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80049d0:	443b      	add	r3, r7
 80049d2:	ed83 7b00 	vstr	d7, [r3]
  t37_im += t34_im;
 80049d6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80049da:	ed93 6b00 	vldr	d6, [r3]
 80049de:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80049e2:	443b      	add	r3, r7
 80049e4:	ed93 7b00 	vldr	d7, [r3]
 80049e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80049ec:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80049f0:	ed83 7b00 	vstr	d7, [r3]
  t39_re = (t39.re * 0.0 - t39.im * 0.5) - (t40.re * 0.0 - t40.im * 0.5);
 80049f4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80049f8:	ed93 7b00 	vldr	d7, [r3]
 80049fc:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8004d38 <G_q+0x4750>
 8004a00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a04:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004a08:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a0c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004a10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004a14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004a18:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004a1c:	ed93 7b00 	vldr	d7, [r3]
 8004a20:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8004d38 <G_q+0x4750>
 8004a24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004a28:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004a2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8004a34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004a38:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004a3c:	f241 2388 	movw	r3, #4744	; 0x1288
 8004a40:	443b      	add	r3, r7
 8004a42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a46:	ed83 7b00 	vstr	d7, [r3]
  t39_im = (t39.re * 0.5 + t39.im * 0.0) - (t40.re * 0.5 + t40.im * 0.0);
 8004a4a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004a4e:	ed93 7b00 	vldr	d7, [r3]
 8004a52:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8004a56:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004a5a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8004a5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a62:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8004d38 <G_q+0x4750>
 8004a66:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004a6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004a6e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004a72:	ed93 7b00 	vldr	d7, [r3]
 8004a76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004a7a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004a7e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8004a82:	ed93 7b02 	vldr	d7, [r3, #8]
 8004a86:	ed9f 4bac 	vldr	d4, [pc, #688]	; 8004d38 <G_q+0x4750>
 8004a8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004a8e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004a92:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8004a96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004a9a:	ed83 7b00 	vstr	d7, [r3]
  if (t10.im == 0.0) {
 8004a9e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004aa2:	ed93 7b02 	vldr	d7, [r3, #8]
 8004aa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aae:	d116      	bne.n	8004ade <G_q+0x44f6>
    t10_re = t10.re / 2.0;
 8004ab0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004ab4:	ed93 6b00 	vldr	d6, [r3]
 8004ab8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004abc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ac0:	f241 3398 	movw	r3, #5016	; 0x1398
 8004ac4:	443b      	add	r3, r7
 8004ac6:	ed83 7b00 	vstr	d7, [r3]
    t10_im = 0.0;
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	f241 3290 	movw	r2, #5008	; 0x1390
 8004ad6:	443a      	add	r2, r7
 8004ad8:	e9c2 3400 	strd	r3, r4, [r2]
 8004adc:	e039      	b.n	8004b52 <G_q+0x456a>
  } else if (t10.re == 0.0) {
 8004ade:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004ae2:	ed93 7b00 	vldr	d7, [r3]
 8004ae6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aee:	d116      	bne.n	8004b1e <G_q+0x4536>
    t10_re = 0.0;
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	f04f 0400 	mov.w	r4, #0
 8004af8:	f241 3298 	movw	r2, #5016	; 0x1398
 8004afc:	443a      	add	r2, r7
 8004afe:	e9c2 3400 	strd	r3, r4, [r2]
    t10_im = t10.im / 2.0;
 8004b02:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004b06:	ed93 6b02 	vldr	d6, [r3, #8]
 8004b0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b12:	f241 3390 	movw	r3, #5008	; 0x1390
 8004b16:	443b      	add	r3, r7
 8004b18:	ed83 7b00 	vstr	d7, [r3]
 8004b1c:	e019      	b.n	8004b52 <G_q+0x456a>
  } else {
    t10_re = t10.re / 2.0;
 8004b1e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004b22:	ed93 6b00 	vldr	d6, [r3]
 8004b26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b2e:	f241 3398 	movw	r3, #5016	; 0x1398
 8004b32:	443b      	add	r3, r7
 8004b34:	ed83 7b00 	vstr	d7, [r3]
    t10_im = t10.im / 2.0;
 8004b38:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8004b3c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004b40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b48:	f241 3390 	movw	r3, #5008	; 0x1390
 8004b4c:	443b      	add	r3, r7
 8004b4e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t11.im == 0.0) {
 8004b52:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004b56:	ed93 7b02 	vldr	d7, [r3, #8]
 8004b5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b62:	d116      	bne.n	8004b92 <G_q+0x45aa>
    t34_re = t11.re / 2.0;
 8004b64:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004b68:	ed93 6b00 	vldr	d6, [r3]
 8004b6c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004b70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004b74:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004b78:	443b      	add	r3, r7
 8004b7a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8004b7e:	f04f 0300 	mov.w	r3, #0
 8004b82:	f04f 0400 	mov.w	r4, #0
 8004b86:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8004b8a:	443a      	add	r2, r7
 8004b8c:	e9c2 3400 	strd	r3, r4, [r2]
 8004b90:	e039      	b.n	8004c06 <G_q+0x461e>
  } else if (t11.re == 0.0) {
 8004b92:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004b96:	ed93 7b00 	vldr	d7, [r3]
 8004b9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ba2:	d116      	bne.n	8004bd2 <G_q+0x45ea>
    t34_re = 0.0;
 8004ba4:	f04f 0300 	mov.w	r3, #0
 8004ba8:	f04f 0400 	mov.w	r4, #0
 8004bac:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8004bb0:	443a      	add	r2, r7
 8004bb2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t11.im / 2.0;
 8004bb6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004bba:	ed93 6b02 	vldr	d6, [r3, #8]
 8004bbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004bc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004bc6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004bca:	443b      	add	r3, r7
 8004bcc:	ed83 7b00 	vstr	d7, [r3]
 8004bd0:	e019      	b.n	8004c06 <G_q+0x461e>
  } else {
    t34_re = t11.re / 2.0;
 8004bd2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004bd6:	ed93 6b00 	vldr	d6, [r3]
 8004bda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004bde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004be2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004be6:	443b      	add	r3, r7
 8004be8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t11.im / 2.0;
 8004bec:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8004bf0:	ed93 6b02 	vldr	d6, [r3, #8]
 8004bf4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004bf8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004bfc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004c00:	443b      	add	r3, r7
 8004c02:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t12.im == 0.0) {
 8004c06:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004c0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8004c0e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c16:	d115      	bne.n	8004c44 <G_q+0x465c>
    t12_re = t12.re / 2.0;
 8004c18:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004c1c:	ed93 6b00 	vldr	d6, [r3]
 8004c20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c28:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c2c:	443b      	add	r3, r7
 8004c2e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8004c32:	f04f 0300 	mov.w	r3, #0
 8004c36:	f04f 0400 	mov.w	r4, #0
 8004c3a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8004c3e:	e9c2 3400 	strd	r3, r4, [r2]
 8004c42:	e037      	b.n	8004cb4 <G_q+0x46cc>
  } else if (t12.re == 0.0) {
 8004c44:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004c48:	ed93 7b00 	vldr	d7, [r3]
 8004c4c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d115      	bne.n	8004c82 <G_q+0x469a>
    t12_re = 0.0;
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c62:	443a      	add	r2, r7
 8004c64:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t12.im / 2.0;
 8004c68:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004c6c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004c70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c78:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004c7c:	ed83 7b00 	vstr	d7, [r3]
 8004c80:	e018      	b.n	8004cb4 <G_q+0x46cc>
  } else {
    t12_re = t12.re / 2.0;
 8004c82:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004c86:	ed93 6b00 	vldr	d6, [r3]
 8004c8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004c8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004c92:	f241 3388 	movw	r3, #5000	; 0x1388
 8004c96:	443b      	add	r3, r7
 8004c98:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t12.im / 2.0;
 8004c9c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004ca0:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ca4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ca8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004cac:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004cb0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t13.im == 0.0) {
 8004cb4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004cb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8004cbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc4:	d116      	bne.n	8004cf4 <G_q+0x470c>
    t13_re = t13.re / 2.0;
 8004cc6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004cca:	ed93 6b00 	vldr	d6, [r3]
 8004cce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004cd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004cd6:	f241 3378 	movw	r3, #4984	; 0x1378
 8004cda:	443b      	add	r3, r7
 8004cdc:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	f04f 0400 	mov.w	r4, #0
 8004ce8:	f241 3270 	movw	r2, #4976	; 0x1370
 8004cec:	443a      	add	r2, r7
 8004cee:	e9c2 3400 	strd	r3, r4, [r2]
 8004cf2:	e03f      	b.n	8004d74 <G_q+0x478c>
  } else if (t13.re == 0.0) {
 8004cf4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004cf8:	ed93 7b00 	vldr	d7, [r3]
 8004cfc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d04:	d11c      	bne.n	8004d40 <G_q+0x4758>
    t13_re = 0.0;
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	f04f 0400 	mov.w	r4, #0
 8004d0e:	f241 3278 	movw	r2, #4984	; 0x1378
 8004d12:	443a      	add	r2, r7
 8004d14:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t13.im / 2.0;
 8004d18:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004d1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8004d20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d28:	f241 3370 	movw	r3, #4976	; 0x1370
 8004d2c:	443b      	add	r3, r7
 8004d2e:	ed83 7b00 	vstr	d7, [r3]
 8004d32:	e01f      	b.n	8004d74 <G_q+0x478c>
 8004d34:	f3af 8000 	nop.w
	...
  } else {
    t13_re = t13.re / 2.0;
 8004d40:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004d44:	ed93 6b00 	vldr	d6, [r3]
 8004d48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d50:	f241 3378 	movw	r3, #4984	; 0x1378
 8004d54:	443b      	add	r3, r7
 8004d56:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t13.im / 2.0;
 8004d5a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8004d5e:	ed93 6b02 	vldr	d6, [r3, #8]
 8004d62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004d66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004d6a:	f241 3370 	movw	r3, #4976	; 0x1370
 8004d6e:	443b      	add	r3, r7
 8004d70:	ed83 7b00 	vstr	d7, [r3]
  }

  t10_re += t34_re;
 8004d74:	f241 3398 	movw	r3, #5016	; 0x1398
 8004d78:	443b      	add	r3, r7
 8004d7a:	ed93 6b00 	vldr	d6, [r3]
 8004d7e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004d82:	443b      	add	r3, r7
 8004d84:	ed93 7b00 	vldr	d7, [r3]
 8004d88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004d8c:	f241 3398 	movw	r3, #5016	; 0x1398
 8004d90:	443b      	add	r3, r7
 8004d92:	ed83 7b00 	vstr	d7, [r3]
  t10_im += t34_im;
 8004d96:	f241 3390 	movw	r3, #5008	; 0x1390
 8004d9a:	443b      	add	r3, r7
 8004d9c:	ed93 6b00 	vldr	d6, [r3]
 8004da0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004da4:	443b      	add	r3, r7
 8004da6:	ed93 7b00 	vldr	d7, [r3]
 8004daa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dae:	f241 3390 	movw	r3, #5008	; 0x1390
 8004db2:	443b      	add	r3, r7
 8004db4:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t13_re;
 8004db8:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dbc:	443b      	add	r3, r7
 8004dbe:	ed93 6b00 	vldr	d6, [r3]
 8004dc2:	f241 3378 	movw	r3, #4984	; 0x1378
 8004dc6:	443b      	add	r3, r7
 8004dc8:	ed93 7b00 	vldr	d7, [r3]
 8004dcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004dd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8004dd4:	443b      	add	r3, r7
 8004dd6:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 8004dda:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004dde:	ed93 6b00 	vldr	d6, [r3]
 8004de2:	f241 3370 	movw	r3, #4976	; 0x1370
 8004de6:	443b      	add	r3, r7
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8004df0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8004df4:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t14.re * 0.0 - t14.im * 0.5) - (t15.re * 0.0 - t15.im * 0.5);
 8004df8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004dfc:	ed93 7b00 	vldr	d7, [r3]
 8004e00:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8004d38 <G_q+0x4750>
 8004e04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004e08:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e10:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004e14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004e18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004e1c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004e20:	ed93 7b00 	vldr	d7, [r3]
 8004e24:	ed1f 5b3c 	vldr	d5, [pc, #-240]	; 8004d38 <G_q+0x4750>
 8004e28:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004e2c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004e30:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e34:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8004e38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004e3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004e40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e44:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8004e48:	443b      	add	r3, r7
 8004e4a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t14.re * 0.5 + t14.im * 0.0) - (t15.re * 0.5 + t15.im * 0.0);
 8004e4e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e52:	ed93 7b00 	vldr	d7, [r3]
 8004e56:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8004e5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004e5e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8004e62:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e66:	ed1f 5b4c 	vldr	d5, [pc, #-304]	; 8004d38 <G_q+0x4750>
 8004e6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004e6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004e72:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004e76:	ed93 7b00 	vldr	d7, [r3]
 8004e7a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004e7e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004e82:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8004e86:	ed93 7b02 	vldr	d7, [r3, #8]
 8004e8a:	ed1f 4b55 	vldr	d4, [pc, #-340]	; 8004d38 <G_q+0x4750>
 8004e8e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004e92:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004e96:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004e9a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8004e9e:	443b      	add	r3, r7
 8004ea0:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16.re * 0.0 - t16.im * 0.5) - (t17.re * 0.0 - t17.im * 0.5);
 8004ea4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004ea8:	ed93 7b00 	vldr	d7, [r3]
 8004eac:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8004d38 <G_q+0x4750>
 8004eb0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004eb4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004eb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8004ebc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004ec0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004ec4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004ec8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004ecc:	ed93 7b00 	vldr	d7, [r3]
 8004ed0:	ed1f 5b67 	vldr	d5, [pc, #-412]	; 8004d38 <G_q+0x4750>
 8004ed4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004ed8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004edc:	ed93 7b02 	vldr	d7, [r3, #8]
 8004ee0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8004ee4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004ee8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004eec:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004ef0:	f241 3368 	movw	r3, #4968	; 0x1368
 8004ef4:	443b      	add	r3, r7
 8004ef6:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16.re * 0.5 + t16.im * 0.0) - (t17.re * 0.5 + t17.im * 0.0);
 8004efa:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004efe:	ed93 7b00 	vldr	d7, [r3]
 8004f02:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8004f06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8004f0a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004f0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f12:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8004d38 <G_q+0x4750>
 8004f16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8004f1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8004f1e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004f22:	ed93 7b00 	vldr	d7, [r3]
 8004f26:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004f2a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8004f2e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8004f32:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f36:	ed1f 4b80 	vldr	d4, [pc, #-512]	; 8004d38 <G_q+0x4750>
 8004f3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004f3e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8004f42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8004f46:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8004f4a:	ed83 7b00 	vstr	d7, [r3]
  if (t19.im == 0.0) {
 8004f4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f52:	ed93 7b02 	vldr	d7, [r3, #8]
 8004f56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5e:	d116      	bne.n	8004f8e <G_q+0x49a6>
    t19_re = t19.re / 2.0;
 8004f60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f64:	ed93 6b00 	vldr	d6, [r3]
 8004f68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004f6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004f70:	f241 3358 	movw	r3, #4952	; 0x1358
 8004f74:	443b      	add	r3, r7
 8004f76:	ed83 7b00 	vstr	d7, [r3]
    t19_im = 0.0;
 8004f7a:	f04f 0300 	mov.w	r3, #0
 8004f7e:	f04f 0400 	mov.w	r4, #0
 8004f82:	f241 3250 	movw	r2, #4944	; 0x1350
 8004f86:	443a      	add	r2, r7
 8004f88:	e9c2 3400 	strd	r3, r4, [r2]
 8004f8c:	e039      	b.n	8005002 <G_q+0x4a1a>
  } else if (t19.re == 0.0) {
 8004f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004f92:	ed93 7b00 	vldr	d7, [r3]
 8004f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9e:	d116      	bne.n	8004fce <G_q+0x49e6>
    t19_re = 0.0;
 8004fa0:	f04f 0300 	mov.w	r3, #0
 8004fa4:	f04f 0400 	mov.w	r4, #0
 8004fa8:	f241 3258 	movw	r2, #4952	; 0x1358
 8004fac:	443a      	add	r2, r7
 8004fae:	e9c2 3400 	strd	r3, r4, [r2]
    t19_im = t19.im / 2.0;
 8004fb2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fb6:	ed93 6b02 	vldr	d6, [r3, #8]
 8004fba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004fbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fc2:	f241 3350 	movw	r3, #4944	; 0x1350
 8004fc6:	443b      	add	r3, r7
 8004fc8:	ed83 7b00 	vstr	d7, [r3]
 8004fcc:	e019      	b.n	8005002 <G_q+0x4a1a>
  } else {
    t19_re = t19.re / 2.0;
 8004fce:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fd2:	ed93 6b00 	vldr	d6, [r3]
 8004fd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004fda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004fde:	f241 3358 	movw	r3, #4952	; 0x1358
 8004fe2:	443b      	add	r3, r7
 8004fe4:	ed83 7b00 	vstr	d7, [r3]
    t19_im = t19.im / 2.0;
 8004fe8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004fec:	ed93 6b02 	vldr	d6, [r3, #8]
 8004ff0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8004ff4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8004ff8:	f241 3350 	movw	r3, #4944	; 0x1350
 8004ffc:	443b      	add	r3, r7
 8004ffe:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t20.im == 0.0) {
 8005002:	4bcb      	ldr	r3, [pc, #812]	; (8005330 <G_q+0x4d48>)
 8005004:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005008:	443a      	add	r2, r7
 800500a:	4413      	add	r3, r2
 800500c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005010:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005018:	d118      	bne.n	800504c <G_q+0x4a64>
    t20_re = t20.re / 2.0;
 800501a:	4bc5      	ldr	r3, [pc, #788]	; (8005330 <G_q+0x4d48>)
 800501c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005020:	443a      	add	r2, r7
 8005022:	4413      	add	r3, r2
 8005024:	ed93 6b00 	vldr	d6, [r3]
 8005028:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800502c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005030:	f241 3348 	movw	r3, #4936	; 0x1348
 8005034:	443b      	add	r3, r7
 8005036:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	f04f 0400 	mov.w	r4, #0
 8005042:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005046:	e9c2 3400 	strd	r3, r4, [r2]
 800504a:	e043      	b.n	80050d4 <G_q+0x4aec>
  } else if (t20.re == 0.0) {
 800504c:	4bb8      	ldr	r3, [pc, #736]	; (8005330 <G_q+0x4d48>)
 800504e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005052:	443a      	add	r2, r7
 8005054:	4413      	add	r3, r2
 8005056:	ed93 7b00 	vldr	d7, [r3]
 800505a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800505e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005062:	d118      	bne.n	8005096 <G_q+0x4aae>
    t20_re = 0.0;
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	f04f 0400 	mov.w	r4, #0
 800506c:	f241 3248 	movw	r2, #4936	; 0x1348
 8005070:	443a      	add	r2, r7
 8005072:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t20.im / 2.0;
 8005076:	4bae      	ldr	r3, [pc, #696]	; (8005330 <G_q+0x4d48>)
 8005078:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800507c:	443a      	add	r2, r7
 800507e:	4413      	add	r3, r2
 8005080:	ed93 6b02 	vldr	d6, [r3, #8]
 8005084:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800508c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005090:	ed83 7b00 	vstr	d7, [r3]
 8005094:	e01e      	b.n	80050d4 <G_q+0x4aec>
  } else {
    t20_re = t20.re / 2.0;
 8005096:	4ba6      	ldr	r3, [pc, #664]	; (8005330 <G_q+0x4d48>)
 8005098:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800509c:	443a      	add	r2, r7
 800509e:	4413      	add	r3, r2
 80050a0:	ed93 6b00 	vldr	d6, [r3]
 80050a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80050a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80050ac:	f241 3348 	movw	r3, #4936	; 0x1348
 80050b0:	443b      	add	r3, r7
 80050b2:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t20.im / 2.0;
 80050b6:	4b9e      	ldr	r3, [pc, #632]	; (8005330 <G_q+0x4d48>)
 80050b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050bc:	443a      	add	r2, r7
 80050be:	4413      	add	r3, r2
 80050c0:	ed93 6b02 	vldr	d6, [r3, #8]
 80050c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80050c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80050cc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80050d0:	ed83 7b00 	vstr	d7, [r3]
  }

  b_t10_re = (t10_re * t12_re - t10_im * t12_im) + (t34_re * t16_re - t34_im *
 80050d4:	f241 3398 	movw	r3, #5016	; 0x1398
 80050d8:	443b      	add	r3, r7
 80050da:	ed93 6b00 	vldr	d6, [r3]
 80050de:	f241 3388 	movw	r3, #5000	; 0x1388
 80050e2:	443b      	add	r3, r7
 80050e4:	ed93 7b00 	vldr	d7, [r3]
 80050e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80050ec:	f241 3390 	movw	r3, #5008	; 0x1390
 80050f0:	443b      	add	r3, r7
 80050f2:	ed93 5b00 	vldr	d5, [r3]
 80050f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80050fa:	ed93 7b00 	vldr	d7, [r3]
 80050fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005102:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005106:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800510a:	443b      	add	r3, r7
 800510c:	ed93 5b00 	vldr	d5, [r3]
 8005110:	f241 3368 	movw	r3, #4968	; 0x1368
 8005114:	443b      	add	r3, r7
 8005116:	ed93 7b00 	vldr	d7, [r3]
 800511a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800511e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005122:	443b      	add	r3, r7
 8005124:	ed93 4b00 	vldr	d4, [r3]
 8005128:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800512c:	ed93 7b00 	vldr	d7, [r3]
 8005130:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005134:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005138:	ee36 7b07 	vadd.f64	d7, d6, d7
 800513c:	f241 3338 	movw	r3, #4920	; 0x1338
 8005140:	443b      	add	r3, r7
 8005142:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t10_im = (t10_re * t12_im + t10_im * t12_re) + (t34_re * t16_im + t34_im *
 8005146:	f241 3398 	movw	r3, #5016	; 0x1398
 800514a:	443b      	add	r3, r7
 800514c:	ed93 6b00 	vldr	d6, [r3]
 8005150:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005154:	ed93 7b00 	vldr	d7, [r3]
 8005158:	ee26 6b07 	vmul.f64	d6, d6, d7
 800515c:	f241 3390 	movw	r3, #5008	; 0x1390
 8005160:	443b      	add	r3, r7
 8005162:	ed93 5b00 	vldr	d5, [r3]
 8005166:	f241 3388 	movw	r3, #5000	; 0x1388
 800516a:	443b      	add	r3, r7
 800516c:	ed93 7b00 	vldr	d7, [r3]
 8005170:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005174:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005178:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800517c:	443b      	add	r3, r7
 800517e:	ed93 5b00 	vldr	d5, [r3]
 8005182:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005186:	ed93 7b00 	vldr	d7, [r3]
 800518a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800518e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005192:	443b      	add	r3, r7
 8005194:	ed93 4b00 	vldr	d4, [r3]
 8005198:	f241 3368 	movw	r3, #4968	; 0x1368
 800519c:	443b      	add	r3, r7
 800519e:	ed93 7b00 	vldr	d7, [r3]
 80051a2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80051a6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80051aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051ae:	f241 3390 	movw	r3, #5008	; 0x1390
 80051b2:	443b      	add	r3, r7
 80051b4:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t19_re += t20_re;
 80051b8:	f241 3358 	movw	r3, #4952	; 0x1358
 80051bc:	443b      	add	r3, r7
 80051be:	ed93 6b00 	vldr	d6, [r3]
 80051c2:	f241 3348 	movw	r3, #4936	; 0x1348
 80051c6:	443b      	add	r3, r7
 80051c8:	ed93 7b00 	vldr	d7, [r3]
 80051cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051d0:	f241 3358 	movw	r3, #4952	; 0x1358
 80051d4:	443b      	add	r3, r7
 80051d6:	ed83 7b00 	vstr	d7, [r3]
  t19_im += t20_im;
 80051da:	f241 3350 	movw	r3, #4944	; 0x1350
 80051de:	443b      	add	r3, r7
 80051e0:	ed93 6b00 	vldr	d6, [r3]
 80051e4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80051e8:	ed93 7b00 	vldr	d7, [r3]
 80051ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80051f0:	f241 3350 	movw	r3, #4944	; 0x1350
 80051f4:	443b      	add	r3, r7
 80051f6:	ed83 7b00 	vstr	d7, [r3]
  if (t25.im == 0.0) {
 80051fa:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80051fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8005202:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800520a:	d116      	bne.n	800523a <G_q+0x4c52>
    t13_re = t25.re / 2.0;
 800520c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005210:	ed93 6b00 	vldr	d6, [r3]
 8005214:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005218:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800521c:	f241 3378 	movw	r3, #4984	; 0x1378
 8005220:	443b      	add	r3, r7
 8005222:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8005226:	f04f 0300 	mov.w	r3, #0
 800522a:	f04f 0400 	mov.w	r4, #0
 800522e:	f241 3270 	movw	r2, #4976	; 0x1370
 8005232:	443a      	add	r2, r7
 8005234:	e9c2 3400 	strd	r3, r4, [r2]
 8005238:	e039      	b.n	80052ae <G_q+0x4cc6>
  } else if (t25.re == 0.0) {
 800523a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800523e:	ed93 7b00 	vldr	d7, [r3]
 8005242:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800524a:	d116      	bne.n	800527a <G_q+0x4c92>
    t13_re = 0.0;
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	f04f 0400 	mov.w	r4, #0
 8005254:	f241 3278 	movw	r2, #4984	; 0x1378
 8005258:	443a      	add	r2, r7
 800525a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t25.im / 2.0;
 800525e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005262:	ed93 6b02 	vldr	d6, [r3, #8]
 8005266:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800526a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800526e:	f241 3370 	movw	r3, #4976	; 0x1370
 8005272:	443b      	add	r3, r7
 8005274:	ed83 7b00 	vstr	d7, [r3]
 8005278:	e019      	b.n	80052ae <G_q+0x4cc6>
  } else {
    t13_re = t25.re / 2.0;
 800527a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800527e:	ed93 6b00 	vldr	d6, [r3]
 8005282:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005286:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800528a:	f241 3378 	movw	r3, #4984	; 0x1378
 800528e:	443b      	add	r3, r7
 8005290:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t25.im / 2.0;
 8005294:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005298:	ed93 6b02 	vldr	d6, [r3, #8]
 800529c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80052a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052a4:	f241 3370 	movw	r3, #4976	; 0x1370
 80052a8:	443b      	add	r3, r7
 80052aa:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t26.im == 0.0) {
 80052ae:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80052b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80052b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052be:	d116      	bne.n	80052ee <G_q+0x4d06>
    t34_re = t26.re / 2.0;
 80052c0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80052c4:	ed93 6b00 	vldr	d6, [r3]
 80052c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80052cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80052d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80052d4:	443b      	add	r3, r7
 80052d6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f04f 0400 	mov.w	r4, #0
 80052e2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80052e6:	443a      	add	r2, r7
 80052e8:	e9c2 3400 	strd	r3, r4, [r2]
 80052ec:	e03c      	b.n	8005368 <G_q+0x4d80>
  } else if (t26.re == 0.0) {
 80052ee:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80052f2:	ed93 7b00 	vldr	d7, [r3]
 80052f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80052fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fe:	d119      	bne.n	8005334 <G_q+0x4d4c>
    t34_re = 0.0;
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800530c:	443a      	add	r2, r7
 800530e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t26.im / 2.0;
 8005312:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005316:	ed93 6b02 	vldr	d6, [r3, #8]
 800531a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800531e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005322:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005326:	443b      	add	r3, r7
 8005328:	ed83 7b00 	vstr	d7, [r3]
 800532c:	e01c      	b.n	8005368 <G_q+0x4d80>
 800532e:	bf00      	nop
 8005330:	ffffed50 	.word	0xffffed50
  } else {
    t34_re = t26.re / 2.0;
 8005334:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005338:	ed93 6b00 	vldr	d6, [r3]
 800533c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005340:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005344:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005348:	443b      	add	r3, r7
 800534a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t26.im / 2.0;
 800534e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005352:	ed93 6b02 	vldr	d6, [r3, #8]
 8005356:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800535a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800535e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005362:	443b      	add	r3, r7
 8005364:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 8005368:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800536c:	ed93 7b00 	vldr	d7, [r3]
 8005370:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8005738 <G_q+0x5150>
 8005374:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005378:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800537c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005380:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8005740 <G_q+0x5158>
 8005384:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005388:	ee36 6b47 	vsub.f64	d6, d6, d7
 800538c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005390:	ed93 7b00 	vldr	d7, [r3]
 8005394:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8005738 <G_q+0x5150>
 8005398:	ee27 5b05 	vmul.f64	d5, d7, d5
    t28.im * 3.061616997868383E-17);
 800539c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80053a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80053a4:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8005740 <G_q+0x5158>
 80053a8:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 80053ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80053b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80053b4:	f241 3368 	movw	r3, #4968	; 0x1368
 80053b8:	443b      	add	r3, r7
 80053ba:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 80053be:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053c2:	ed93 7b00 	vldr	d7, [r3]
 80053c6:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8005740 <G_q+0x5158>
 80053ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80053ce:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80053d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80053d6:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8005738 <G_q+0x5150>
 80053da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80053de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80053e2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80053e6:	ed93 7b00 	vldr	d7, [r3]
 80053ea:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 8005740 <G_q+0x5158>
 80053ee:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t28.im * 0.0);
 80053f2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80053f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80053fa:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 8005738 <G_q+0x5150>
 80053fe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005402:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 8005406:	ee36 7b47 	vsub.f64	d7, d6, d7
 800540a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800540e:	ed83 7b00 	vstr	d7, [r3]
  t13_re += t34_re;
 8005412:	f241 3378 	movw	r3, #4984	; 0x1378
 8005416:	443b      	add	r3, r7
 8005418:	ed93 6b00 	vldr	d6, [r3]
 800541c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005420:	443b      	add	r3, r7
 8005422:	ed93 7b00 	vldr	d7, [r3]
 8005426:	ee36 7b07 	vadd.f64	d7, d6, d7
 800542a:	f241 3378 	movw	r3, #4984	; 0x1378
 800542e:	443b      	add	r3, r7
 8005430:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8005434:	f241 3370 	movw	r3, #4976	; 0x1370
 8005438:	443b      	add	r3, r7
 800543a:	ed93 6b00 	vldr	d6, [r3]
 800543e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005442:	443b      	add	r3, r7
 8005444:	ed93 7b00 	vldr	d7, [r3]
 8005448:	ee36 7b07 	vadd.f64	d7, d6, d7
 800544c:	f241 3370 	movw	r3, #4976	; 0x1370
 8005450:	443b      	add	r3, r7
 8005452:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t31.re * 3.061616997868383E-17 + t32.re * 3.061616997868383E-17;
 8005456:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800545a:	ed93 7b00 	vldr	d7, [r3]
 800545e:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8005740 <G_q+0x5158>
 8005462:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005466:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800546a:	ed93 7b00 	vldr	d7, [r3]
 800546e:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8005740 <G_q+0x5158>
 8005472:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005476:	ee36 7b07 	vadd.f64	d7, d6, d7
 800547a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800547e:	443b      	add	r3, r7
 8005480:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t31.im * 3.061616997868383E-17 + t32.im * 3.061616997868383E-17;
 8005484:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005488:	ed93 7b02 	vldr	d7, [r3, #8]
 800548c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8005740 <G_q+0x5158>
 8005490:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005494:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005498:	ed93 7b02 	vldr	d7, [r3, #8]
 800549c:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8005740 <G_q+0x5158>
 80054a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80054a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80054a8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80054ac:	443b      	add	r3, r7
 80054ae:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t29.re * 0.0 - t29.im * 0.5) - (t30.re * 0.0 - t30.im * 0.5);
 80054b2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80054b6:	ed93 7b00 	vldr	d7, [r3]
 80054ba:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8005738 <G_q+0x5150>
 80054be:	ee27 6b06 	vmul.f64	d6, d7, d6
 80054c2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80054c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80054ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80054ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80054d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80054d6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80054da:	ed93 7b00 	vldr	d7, [r3]
 80054de:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8005738 <G_q+0x5150>
 80054e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80054e6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80054ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80054ee:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80054f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80054f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80054fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80054fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8005502:	443b      	add	r3, r7
 8005504:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t29.re * 0.5 + t29.im * 0.0) - (t30.re * 0.5 + t30.im * 0.0);
 8005508:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800550c:	ed93 7b00 	vldr	d7, [r3]
 8005510:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005514:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005518:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800551c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005520:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8005738 <G_q+0x5150>
 8005524:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005528:	ee36 6b07 	vadd.f64	d6, d6, d7
 800552c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8005530:	ed93 7b00 	vldr	d7, [r3]
 8005534:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005538:	ee27 5b05 	vmul.f64	d5, d7, d5
 800553c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8005540:	ed93 7b02 	vldr	d7, [r3, #8]
 8005544:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8005738 <G_q+0x5150>
 8005548:	ee27 7b04 	vmul.f64	d7, d7, d4
 800554c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005550:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005554:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005558:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t21.re * 0.0 - t21.im * 0.5) - (t22.re * 0.0 - t22.im * 0.5);
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	ed93 7b00 	vldr	d7, [r3]
 8005564:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8005738 <G_q+0x5150>
 8005568:	ee27 6b06 	vmul.f64	d6, d7, d6
 800556c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005570:	ed93 7b02 	vldr	d7, [r3, #8]
 8005574:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005578:	ee27 7b05 	vmul.f64	d7, d7, d5
 800557c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005580:	4b73      	ldr	r3, [pc, #460]	; (8005750 <G_q+0x5168>)
 8005582:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005586:	443a      	add	r2, r7
 8005588:	4413      	add	r3, r2
 800558a:	ed93 7b00 	vldr	d7, [r3]
 800558e:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8005738 <G_q+0x5150>
 8005592:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005596:	4b6e      	ldr	r3, [pc, #440]	; (8005750 <G_q+0x5168>)
 8005598:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800559c:	443a      	add	r2, r7
 800559e:	4413      	add	r3, r2
 80055a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80055a4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80055a8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80055ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 80055b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80055b4:	f241 3348 	movw	r3, #4936	; 0x1348
 80055b8:	443b      	add	r3, r7
 80055ba:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t21.re * 0.5 + t21.im * 0.0) - (t22.re * 0.5 + t22.im * 0.0);
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	ed93 7b00 	vldr	d7, [r3]
 80055c6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80055ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80055d6:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8005738 <G_q+0x5150>
 80055da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80055de:	ee36 6b07 	vadd.f64	d6, d6, d7
 80055e2:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <G_q+0x5168>)
 80055e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055e8:	443a      	add	r2, r7
 80055ea:	4413      	add	r3, r2
 80055ec:	ed93 7b00 	vldr	d7, [r3]
 80055f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80055f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80055f8:	4b55      	ldr	r3, [pc, #340]	; (8005750 <G_q+0x5168>)
 80055fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055fe:	443a      	add	r2, r7
 8005600:	4413      	add	r3, r2
 8005602:	ed93 7b02 	vldr	d7, [r3, #8]
 8005606:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8005738 <G_q+0x5150>
 800560a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800560e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005612:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005616:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800561a:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 800561e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005622:	ed93 7b00 	vldr	d7, [r3]
 8005626:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8005738 <G_q+0x5150>
 800562a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800562e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005632:	ed93 7b02 	vldr	d7, [r3, #8]
 8005636:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8005748 <G_q+0x5160>
 800563a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800563e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005642:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005646:	ed93 7b00 	vldr	d7, [r3]
 800564a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8005738 <G_q+0x5150>
 800564e:	ee27 5b05 	vmul.f64	d5, d7, d5
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 8005652:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005656:	ed93 7b02 	vldr	d7, [r3, #8]
 800565a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8005748 <G_q+0x5160>
 800565e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8005662:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005666:	ee36 6b47 	vsub.f64	d6, d6, d7
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 800566a:	f241 3368 	movw	r3, #4968	; 0x1368
 800566e:	443b      	add	r3, r7
 8005670:	ed93 5b00 	vldr	d5, [r3]
 8005674:	f241 3378 	movw	r3, #4984	; 0x1378
 8005678:	443b      	add	r3, r7
 800567a:	ed93 7b00 	vldr	d7, [r3]
 800567e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005682:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005686:	ed93 4b00 	vldr	d4, [r3]
 800568a:	f241 3370 	movw	r3, #4976	; 0x1370
 800568e:	443b      	add	r3, r7
 8005690:	ed93 7b00 	vldr	d7, [r3]
 8005694:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005698:	ee35 7b47 	vsub.f64	d7, d5, d7
 800569c:	ee36 6b47 	vsub.f64	d6, d6, d7
             t13_im)) + (t34_re * t12_re - t34_im * t12_im);
 80056a0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80056a4:	443b      	add	r3, r7
 80056a6:	ed93 5b00 	vldr	d5, [r3]
 80056aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80056ae:	443b      	add	r3, r7
 80056b0:	ed93 7b00 	vldr	d7, [r3]
 80056b4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80056b8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80056bc:	443b      	add	r3, r7
 80056be:	ed93 4b00 	vldr	d4, [r3]
 80056c2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80056c6:	ed93 7b00 	vldr	d7, [r3]
 80056ca:	ee24 7b07 	vmul.f64	d7, d4, d7
 80056ce:	ee35 7b47 	vsub.f64	d7, d5, d7
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 80056d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80056d6:	f241 3330 	movw	r3, #4912	; 0x1330
 80056da:	443b      	add	r3, r7
 80056dc:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 80056e0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80056e4:	ed93 7b00 	vldr	d7, [r3]
 80056e8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8005748 <G_q+0x5160>
 80056ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 80056f0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80056f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80056f8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8005738 <G_q+0x5150>
 80056fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005700:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005704:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005708:	ed93 7b00 	vldr	d7, [r3]
 800570c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8005748 <G_q+0x5160>
 8005710:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8005714:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005718:	ed93 7b02 	vldr	d7, [r3, #8]
 800571c:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8005738 <G_q+0x5150>
 8005720:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005724:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8005728:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800572c:	f241 3368 	movw	r3, #4968	; 0x1368
 8005730:	e010      	b.n	8005754 <G_q+0x516c>
 8005732:	bf00      	nop
 8005734:	f3af 8000 	nop.w
	...
 8005740:	33145c07 	.word	0x33145c07
 8005744:	3c81a626 	.word	0x3c81a626
 8005748:	33145c07 	.word	0x33145c07
 800574c:	3c91a626 	.word	0x3c91a626
 8005750:	ffffed70 	.word	0xffffed70
 8005754:	443b      	add	r3, r7
 8005756:	ed93 5b00 	vldr	d5, [r3]
 800575a:	f241 3370 	movw	r3, #4976	; 0x1370
 800575e:	443b      	add	r3, r7
 8005760:	ed93 7b00 	vldr	d7, [r3]
 8005764:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8005768:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800576c:	ed93 4b00 	vldr	d4, [r3]
 8005770:	f241 3378 	movw	r3, #4984	; 0x1378
 8005774:	443b      	add	r3, r7
 8005776:	ed93 7b00 	vldr	d7, [r3]
 800577a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800577e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005782:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8005786:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800578a:	443b      	add	r3, r7
 800578c:	ed93 5b00 	vldr	d5, [r3]
 8005790:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005794:	ed93 7b00 	vldr	d7, [r3]
 8005798:	ee25 5b07 	vmul.f64	d5, d5, d7
 800579c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80057a0:	443b      	add	r3, r7
 80057a2:	ed93 4b00 	vldr	d4, [r3]
 80057a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80057aa:	443b      	add	r3, r7
 80057ac:	ed93 7b00 	vldr	d7, [r3]
 80057b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80057b4:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 80057b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80057bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80057c0:	443b      	add	r3, r7
 80057c2:	ed83 7b00 	vstr	d7, [r3]
  t54_re = (t54.re * 0.0 - t54.im * 0.5) - (t55.re * 0.0 - t55.im * 0.5);
 80057c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057ca:	ed93 7b00 	vldr	d7, [r3]
 80057ce:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8005b60 <G_q+0x5578>
 80057d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80057d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057da:	ed93 7b02 	vldr	d7, [r3, #8]
 80057de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80057e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80057e6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80057ea:	4bdf      	ldr	r3, [pc, #892]	; (8005b68 <G_q+0x5580>)
 80057ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057f0:	443a      	add	r2, r7
 80057f2:	4413      	add	r3, r2
 80057f4:	ed93 7b00 	vldr	d7, [r3]
 80057f8:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8005b60 <G_q+0x5578>
 80057fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005800:	4bd9      	ldr	r3, [pc, #868]	; (8005b68 <G_q+0x5580>)
 8005802:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005806:	443a      	add	r2, r7
 8005808:	4413      	add	r3, r2
 800580a:	ed93 7b02 	vldr	d7, [r3, #8]
 800580e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005812:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005816:	ee35 7b47 	vsub.f64	d7, d5, d7
 800581a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800581e:	f241 3328 	movw	r3, #4904	; 0x1328
 8005822:	443b      	add	r3, r7
 8005824:	ed83 7b00 	vstr	d7, [r3]
  t54_im = (t54.re * 0.5 + t54.im * 0.0) - (t55.re * 0.5 + t55.im * 0.0);
 8005828:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800582c:	ed93 7b00 	vldr	d7, [r3]
 8005830:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005834:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005838:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800583c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005840:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8005b60 <G_q+0x5578>
 8005844:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005848:	ee36 6b07 	vadd.f64	d6, d6, d7
 800584c:	4bc6      	ldr	r3, [pc, #792]	; (8005b68 <G_q+0x5580>)
 800584e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005852:	443a      	add	r2, r7
 8005854:	4413      	add	r3, r2
 8005856:	ed93 7b00 	vldr	d7, [r3]
 800585a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800585e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005862:	4bc1      	ldr	r3, [pc, #772]	; (8005b68 <G_q+0x5580>)
 8005864:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005868:	443a      	add	r2, r7
 800586a:	4413      	add	r3, r2
 800586c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005870:	ed9f 4bbb 	vldr	d4, [pc, #748]	; 8005b60 <G_q+0x5578>
 8005874:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005878:	ee35 7b07 	vadd.f64	d7, d5, d7
 800587c:	f241 2378 	movw	r3, #4728	; 0x1278
 8005880:	443b      	add	r3, r7
 8005882:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005886:	ed83 7b00 	vstr	d7, [r3]
  t10_re = (b_t10_re * t19_re - t10_im * t19_im) + (t20_re * t23_re - t20_im *
 800588a:	f241 3338 	movw	r3, #4920	; 0x1338
 800588e:	443b      	add	r3, r7
 8005890:	ed93 6b00 	vldr	d6, [r3]
 8005894:	f241 3358 	movw	r3, #4952	; 0x1358
 8005898:	443b      	add	r3, r7
 800589a:	ed93 7b00 	vldr	d7, [r3]
 800589e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80058a2:	f241 3390 	movw	r3, #5008	; 0x1390
 80058a6:	443b      	add	r3, r7
 80058a8:	ed93 5b00 	vldr	d5, [r3]
 80058ac:	f241 3350 	movw	r3, #4944	; 0x1350
 80058b0:	443b      	add	r3, r7
 80058b2:	ed93 7b00 	vldr	d7, [r3]
 80058b6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80058ba:	ee36 6b47 	vsub.f64	d6, d6, d7
 80058be:	f241 3348 	movw	r3, #4936	; 0x1348
 80058c2:	443b      	add	r3, r7
 80058c4:	ed93 5b00 	vldr	d5, [r3]
 80058c8:	f241 3330 	movw	r3, #4912	; 0x1330
 80058cc:	443b      	add	r3, r7
 80058ce:	ed93 7b00 	vldr	d7, [r3]
 80058d2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80058d6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80058da:	ed93 4b00 	vldr	d4, [r3]
 80058de:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80058e2:	443b      	add	r3, r7
 80058e4:	ed93 7b00 	vldr	d7, [r3]
 80058e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80058ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 80058f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80058f4:	f241 3398 	movw	r3, #5016	; 0x1398
 80058f8:	443b      	add	r3, r7
 80058fa:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t10_im = (b_t10_re * t19_im + t10_im * t19_re) + (t20_re * t34_re + t20_im *
 80058fe:	f241 3338 	movw	r3, #4920	; 0x1338
 8005902:	443b      	add	r3, r7
 8005904:	ed93 6b00 	vldr	d6, [r3]
 8005908:	f241 3350 	movw	r3, #4944	; 0x1350
 800590c:	443b      	add	r3, r7
 800590e:	ed93 7b00 	vldr	d7, [r3]
 8005912:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005916:	f241 3390 	movw	r3, #5008	; 0x1390
 800591a:	443b      	add	r3, r7
 800591c:	ed93 5b00 	vldr	d5, [r3]
 8005920:	f241 3358 	movw	r3, #4952	; 0x1358
 8005924:	443b      	add	r3, r7
 8005926:	ed93 7b00 	vldr	d7, [r3]
 800592a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800592e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005932:	f241 3348 	movw	r3, #4936	; 0x1348
 8005936:	443b      	add	r3, r7
 8005938:	ed93 5b00 	vldr	d5, [r3]
 800593c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005940:	443b      	add	r3, r7
 8005942:	ed93 7b00 	vldr	d7, [r3]
 8005946:	ee25 5b07 	vmul.f64	d5, d5, d7
 800594a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800594e:	ed93 4b00 	vldr	d4, [r3]
 8005952:	f241 3330 	movw	r3, #4912	; 0x1330
 8005956:	443b      	add	r3, r7
 8005958:	ed93 7b00 	vldr	d7, [r3]
 800595c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005960:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005964:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005968:	f241 3390 	movw	r3, #5008	; 0x1390
 800596c:	443b      	add	r3, r7
 800596e:	ed83 7b00 	vstr	d7, [r3]
    t23_re);
  t13_re = (t8.re * 0.0 - t8.im * 0.5) - (t9.re * 0.0 - t9.im * 0.5);
 8005972:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005976:	ed93 7b00 	vldr	d7, [r3]
 800597a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8005b60 <G_q+0x5578>
 800597e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005982:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005986:	ed93 7b02 	vldr	d7, [r3, #8]
 800598a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800598e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005992:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005996:	4b75      	ldr	r3, [pc, #468]	; (8005b6c <G_q+0x5584>)
 8005998:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800599c:	443a      	add	r2, r7
 800599e:	4413      	add	r3, r2
 80059a0:	ed93 7b00 	vldr	d7, [r3]
 80059a4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8005b60 <G_q+0x5578>
 80059a8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80059ac:	4b6f      	ldr	r3, [pc, #444]	; (8005b6c <G_q+0x5584>)
 80059ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059b2:	443a      	add	r2, r7
 80059b4:	4413      	add	r3, r2
 80059b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80059ba:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80059be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80059c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80059c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80059ca:	f241 3378 	movw	r3, #4984	; 0x1378
 80059ce:	443b      	add	r3, r7
 80059d0:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t8.re * 0.5 + t8.im * 0.0) - (t9.re * 0.5 + t9.im * 0.0);
 80059d4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80059d8:	ed93 7b00 	vldr	d7, [r3]
 80059dc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80059e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80059e4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80059e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80059ec:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8005b60 <G_q+0x5578>
 80059f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80059f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80059f8:	4b5c      	ldr	r3, [pc, #368]	; (8005b6c <G_q+0x5584>)
 80059fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059fe:	443a      	add	r2, r7
 8005a00:	4413      	add	r3, r2
 8005a02:	ed93 7b00 	vldr	d7, [r3]
 8005a06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005a0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a0e:	4b57      	ldr	r3, [pc, #348]	; (8005b6c <G_q+0x5584>)
 8005a10:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a14:	443a      	add	r2, r7
 8005a16:	4413      	add	r3, r2
 8005a18:	ed93 7b02 	vldr	d7, [r3, #8]
 8005a1c:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8005b60 <G_q+0x5578>
 8005a20:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005a24:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005a28:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a2c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005a30:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t5.re * 0.0 - t5.im * 0.5) - (t6.re * 0.0 - t6.im * 0.5);
 8005a34:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a38:	ed93 7b00 	vldr	d7, [r3]
 8005a3c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8005b60 <G_q+0x5578>
 8005a40:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a44:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a48:	ed93 7b02 	vldr	d7, [r3, #8]
 8005a4c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005a50:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005a54:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005a58:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005a5c:	ed93 7b00 	vldr	d7, [r3]
 8005a60:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8005b60 <G_q+0x5578>
 8005a64:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005a68:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005a6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8005a70:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8005a74:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005a78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005a7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005a80:	f241 3370 	movw	r3, #4976	; 0x1370
 8005a84:	443b      	add	r3, r7
 8005a86:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t5.re * 0.5 + t5.im * 0.0) - (t6.re * 0.5 + t6.im * 0.0);
 8005a8a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a8e:	ed93 7b00 	vldr	d7, [r3]
 8005a92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005a96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005a9a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005aa2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8005b60 <G_q+0x5578>
 8005aa6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005aaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005aae:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005ab2:	ed93 7b00 	vldr	d7, [r3]
 8005ab6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005aba:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005abe:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005ac2:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ac6:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8005b60 <G_q+0x5578>
 8005aca:	ee27 7b04 	vmul.f64	d7, d7, d4
 8005ace:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005ad2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ad6:	f241 3368 	movw	r3, #4968	; 0x1368
 8005ada:	443b      	add	r3, r7
 8005adc:	ed83 7b00 	vstr	d7, [r3]
  if (t8.im == 0.0) {
 8005ae0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005ae4:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ae8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005af0:	d115      	bne.n	8005b1e <G_q+0x5536>
    t16_im = t8.re / 2.0;
 8005af2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005af6:	ed93 6b00 	vldr	d6, [r3]
 8005afa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005afe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b02:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005b06:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	f04f 0400 	mov.w	r4, #0
 8005b12:	f241 3248 	movw	r2, #4936	; 0x1348
 8005b16:	443a      	add	r2, r7
 8005b18:	e9c2 3400 	strd	r3, r4, [r2]
 8005b1c:	e041      	b.n	8005ba2 <G_q+0x55ba>
  } else if (t8.re == 0.0) {
 8005b1e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005b22:	ed93 7b00 	vldr	d7, [r3]
 8005b26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b2e:	d11f      	bne.n	8005b70 <G_q+0x5588>
    t16_im = 0.0;
 8005b30:	f04f 0300 	mov.w	r3, #0
 8005b34:	f04f 0400 	mov.w	r4, #0
 8005b38:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8005b3c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t8.im / 2.0;
 8005b40:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005b44:	ed93 6b02 	vldr	d6, [r3, #8]
 8005b48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005b4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b50:	f241 3348 	movw	r3, #4936	; 0x1348
 8005b54:	443b      	add	r3, r7
 8005b56:	ed83 7b00 	vstr	d7, [r3]
 8005b5a:	e022      	b.n	8005ba2 <G_q+0x55ba>
 8005b5c:	f3af 8000 	nop.w
	...
 8005b68:	ffffec70 	.word	0xffffec70
 8005b6c:	ffffeff0 	.word	0xffffeff0
  } else {
    t16_im = t8.re / 2.0;
 8005b70:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005b74:	ed93 6b00 	vldr	d6, [r3]
 8005b78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005b7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b80:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005b84:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t8.im / 2.0;
 8005b88:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8005b8c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005b90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005b94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005b98:	f241 3348 	movw	r3, #4936	; 0x1348
 8005b9c:	443b      	add	r3, r7
 8005b9e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t85.im == 0.0) {
 8005ba2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005ba6:	ed93 7b02 	vldr	d7, [r3, #8]
 8005baa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bb2:	d115      	bne.n	8005be0 <G_q+0x55f8>
    t12_im = t85.re / 2.0;
 8005bb4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005bb8:	ed93 6b00 	vldr	d6, [r3]
 8005bbc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005bc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005bc4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005bc8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	f04f 0400 	mov.w	r4, #0
 8005bd4:	f241 3218 	movw	r2, #4888	; 0x1318
 8005bd8:	443a      	add	r2, r7
 8005bda:	e9c2 3400 	strd	r3, r4, [r2]
 8005bde:	e037      	b.n	8005c50 <G_q+0x5668>
  } else if (t85.re == 0.0) {
 8005be0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005be4:	ed93 7b00 	vldr	d7, [r3]
 8005be8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf0:	d115      	bne.n	8005c1e <G_q+0x5636>
    t12_im = 0.0;
 8005bf2:	f04f 0300 	mov.w	r3, #0
 8005bf6:	f04f 0400 	mov.w	r4, #0
 8005bfa:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8005bfe:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t85.im / 2.0;
 8005c02:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005c06:	ed93 6b02 	vldr	d6, [r3, #8]
 8005c0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005c12:	f241 3318 	movw	r3, #4888	; 0x1318
 8005c16:	443b      	add	r3, r7
 8005c18:	ed83 7b00 	vstr	d7, [r3]
 8005c1c:	e018      	b.n	8005c50 <G_q+0x5668>
  } else {
    t12_im = t85.re / 2.0;
 8005c1e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005c22:	ed93 6b00 	vldr	d6, [r3]
 8005c26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005c2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005c2e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005c32:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t85.im / 2.0;
 8005c36:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005c3a:	ed93 6b02 	vldr	d6, [r3, #8]
 8005c3e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005c42:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005c46:	f241 3318 	movw	r3, #4888	; 0x1318
 8005c4a:	443b      	add	r3, r7
 8005c4c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t3.im == 0.0) {
 8005c50:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005c54:	ed93 7b02 	vldr	d7, [r3, #8]
 8005c58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c60:	d115      	bne.n	8005c8e <G_q+0x56a6>
    t20_im = t3.re / 2.0;
 8005c62:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005c66:	ed93 6b00 	vldr	d6, [r3]
 8005c6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005c6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005c72:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005c76:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	f04f 0400 	mov.w	r4, #0
 8005c82:	f241 3210 	movw	r2, #4880	; 0x1310
 8005c86:	443a      	add	r2, r7
 8005c88:	e9c2 3400 	strd	r3, r4, [r2]
 8005c8c:	e037      	b.n	8005cfe <G_q+0x5716>
  } else if (t3.re == 0.0) {
 8005c8e:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005c92:	ed93 7b00 	vldr	d7, [r3]
 8005c96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c9e:	d115      	bne.n	8005ccc <G_q+0x56e4>
    t20_im = 0.0;
 8005ca0:	f04f 0300 	mov.w	r3, #0
 8005ca4:	f04f 0400 	mov.w	r4, #0
 8005ca8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8005cac:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t3.im / 2.0;
 8005cb0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005cb4:	ed93 6b02 	vldr	d6, [r3, #8]
 8005cb8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005cbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005cc0:	f241 3310 	movw	r3, #4880	; 0x1310
 8005cc4:	443b      	add	r3, r7
 8005cc6:	ed83 7b00 	vstr	d7, [r3]
 8005cca:	e018      	b.n	8005cfe <G_q+0x5716>
  } else {
    t20_im = t3.re / 2.0;
 8005ccc:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005cd0:	ed93 6b00 	vldr	d6, [r3]
 8005cd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005cd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005cdc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005ce0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t3.im / 2.0;
 8005ce4:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8005ce8:	ed93 6b02 	vldr	d6, [r3, #8]
 8005cec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005cf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005cf4:	f241 3310 	movw	r3, #4880	; 0x1310
 8005cf8:	443b      	add	r3, r7
 8005cfa:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t4.im == 0.0) {
 8005cfe:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d02:	ed93 7b02 	vldr	d7, [r3, #8]
 8005d06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d0e:	d116      	bne.n	8005d3e <G_q+0x5756>
    t34_re = t4.re / 2.0;
 8005d10:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d14:	ed93 6b00 	vldr	d6, [r3]
 8005d18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005d1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005d20:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005d24:	443b      	add	r3, r7
 8005d26:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8005d2a:	f04f 0300 	mov.w	r3, #0
 8005d2e:	f04f 0400 	mov.w	r4, #0
 8005d32:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8005d36:	443a      	add	r2, r7
 8005d38:	e9c2 3400 	strd	r3, r4, [r2]
 8005d3c:	e039      	b.n	8005db2 <G_q+0x57ca>
  } else if (t4.re == 0.0) {
 8005d3e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d42:	ed93 7b00 	vldr	d7, [r3]
 8005d46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d4e:	d116      	bne.n	8005d7e <G_q+0x5796>
    t34_re = 0.0;
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	f04f 0400 	mov.w	r4, #0
 8005d58:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8005d5c:	443a      	add	r2, r7
 8005d5e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t4.im / 2.0;
 8005d62:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d66:	ed93 6b02 	vldr	d6, [r3, #8]
 8005d6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005d6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005d72:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005d76:	443b      	add	r3, r7
 8005d78:	ed83 7b00 	vstr	d7, [r3]
 8005d7c:	e019      	b.n	8005db2 <G_q+0x57ca>
  } else {
    t34_re = t4.re / 2.0;
 8005d7e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d82:	ed93 6b00 	vldr	d6, [r3]
 8005d86:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005d8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005d8e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005d92:	443b      	add	r3, r7
 8005d94:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t4.im / 2.0;
 8005d98:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005d9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8005da0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8005da4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8005da8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005dac:	443b      	add	r3, r7
 8005dae:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im += t12_im;
 8005db2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005db6:	ed93 6b00 	vldr	d6, [r3]
 8005dba:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8005dbe:	ed93 7b00 	vldr	d7, [r3]
 8005dc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005dc6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005dca:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t85_im;
 8005dce:	f241 3348 	movw	r3, #4936	; 0x1348
 8005dd2:	443b      	add	r3, r7
 8005dd4:	ed93 6b00 	vldr	d6, [r3]
 8005dd8:	f241 3318 	movw	r3, #4888	; 0x1318
 8005ddc:	443b      	add	r3, r7
 8005dde:	ed93 7b00 	vldr	d7, [r3]
 8005de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005de6:	f241 3348 	movw	r3, #4936	; 0x1348
 8005dea:	443b      	add	r3, r7
 8005dec:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_re;
 8005df0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005df4:	ed93 6b00 	vldr	d6, [r3]
 8005df8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8005dfc:	443b      	add	r3, r7
 8005dfe:	ed93 7b00 	vldr	d7, [r3]
 8005e02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e06:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005e0a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 8005e0e:	f241 3310 	movw	r3, #4880	; 0x1310
 8005e12:	443b      	add	r3, r7
 8005e14:	ed93 6b00 	vldr	d6, [r3]
 8005e18:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8005e1c:	443b      	add	r3, r7
 8005e1e:	ed93 7b00 	vldr	d7, [r3]
 8005e22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005e26:	f241 3310 	movw	r3, #4880	; 0x1310
 8005e2a:	443b      	add	r3, r7
 8005e2c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = t87.re * 0.0;
 8005e30:	4bc5      	ldr	r3, [pc, #788]	; (8006148 <G_q+0x5b60>)
 8005e32:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e36:	443a      	add	r2, r7
 8005e38:	4413      	add	r3, r2
 8005e3a:	ed93 7b00 	vldr	d7, [r3]
 8005e3e:	f241 2370 	movw	r3, #4720	; 0x1270
 8005e42:	443b      	add	r3, r7
 8005e44:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8006140 <G_q+0x5b58>
 8005e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005e4c:	ed83 7b00 	vstr	d7, [r3]
  t19_re = (t19.re * 0.0 - t19.im * 0.5) - (t19_re_tmp - t87.im * 0.5);
 8005e50:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e54:	ed93 7b00 	vldr	d7, [r3]
 8005e58:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8006140 <G_q+0x5b58>
 8005e5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005e60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005e64:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e68:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005e6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005e70:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005e74:	4bb4      	ldr	r3, [pc, #720]	; (8006148 <G_q+0x5b60>)
 8005e76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e7a:	443a      	add	r2, r7
 8005e7c:	4413      	add	r3, r2
 8005e7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8005e82:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005e86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005e8a:	f241 2370 	movw	r3, #4720	; 0x1270
 8005e8e:	443b      	add	r3, r7
 8005e90:	ed93 5b00 	vldr	d5, [r3]
 8005e94:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005e98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005e9c:	f241 3358 	movw	r3, #4952	; 0x1358
 8005ea0:	443b      	add	r3, r7
 8005ea2:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = t87.im * 0.0;
 8005ea6:	4ba8      	ldr	r3, [pc, #672]	; (8006148 <G_q+0x5b60>)
 8005ea8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005eac:	443a      	add	r2, r7
 8005eae:	4413      	add	r3, r2
 8005eb0:	ed93 7b02 	vldr	d7, [r3, #8]
 8005eb4:	f241 2368 	movw	r3, #4712	; 0x1268
 8005eb8:	443b      	add	r3, r7
 8005eba:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8006140 <G_q+0x5b58>
 8005ebe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005ec2:	ed83 7b00 	vstr	d7, [r3]
  t19_im = (t19.re * 0.5 + t19.im * 0.0) - (t87.re * 0.5 + t19_im_tmp);
 8005ec6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eca:	ed93 7b00 	vldr	d7, [r3]
 8005ece:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8005ed2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8005ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005eda:	ed93 7b02 	vldr	d7, [r3, #8]
 8005ede:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8006140 <G_q+0x5b58>
 8005ee2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8005ee6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005eea:	4b97      	ldr	r3, [pc, #604]	; (8006148 <G_q+0x5b60>)
 8005eec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ef0:	443a      	add	r2, r7
 8005ef2:	4413      	add	r3, r2
 8005ef4:	ed93 7b00 	vldr	d7, [r3]
 8005ef8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8005efc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8005f00:	f241 2368 	movw	r3, #4712	; 0x1268
 8005f04:	443b      	add	r3, r7
 8005f06:	ed93 7b00 	vldr	d7, [r3]
 8005f0a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005f0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005f12:	f241 3350 	movw	r3, #4944	; 0x1350
 8005f16:	443b      	add	r3, r7
 8005f18:	ed83 7b00 	vstr	d7, [r3]
  t8_re = (t13_re * t13_im - t8_im * t16_re) + (t16_im * t20_im - t20_re * t3_im);
 8005f1c:	f241 3378 	movw	r3, #4984	; 0x1378
 8005f20:	443b      	add	r3, r7
 8005f22:	ed93 6b00 	vldr	d6, [r3]
 8005f26:	f241 3370 	movw	r3, #4976	; 0x1370
 8005f2a:	443b      	add	r3, r7
 8005f2c:	ed93 7b00 	vldr	d7, [r3]
 8005f30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005f34:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005f38:	ed93 5b00 	vldr	d5, [r3]
 8005f3c:	f241 3368 	movw	r3, #4968	; 0x1368
 8005f40:	443b      	add	r3, r7
 8005f42:	ed93 7b00 	vldr	d7, [r3]
 8005f46:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005f4a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005f4e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005f52:	ed93 5b00 	vldr	d5, [r3]
 8005f56:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005f5a:	ed93 7b00 	vldr	d7, [r3]
 8005f5e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005f62:	f241 3348 	movw	r3, #4936	; 0x1348
 8005f66:	443b      	add	r3, r7
 8005f68:	ed93 4b00 	vldr	d4, [r3]
 8005f6c:	f241 3310 	movw	r3, #4880	; 0x1310
 8005f70:	443b      	add	r3, r7
 8005f72:	ed93 7b00 	vldr	d7, [r3]
 8005f76:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005f7a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005f7e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8005f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005f86:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t13_re * t16_re + t8_im * t13_im) + (t16_im * t3_im + t20_re * t20_im);
 8005f8a:	f241 3378 	movw	r3, #4984	; 0x1378
 8005f8e:	443b      	add	r3, r7
 8005f90:	ed93 6b00 	vldr	d6, [r3]
 8005f94:	f241 3368 	movw	r3, #4968	; 0x1368
 8005f98:	443b      	add	r3, r7
 8005f9a:	ed93 7b00 	vldr	d7, [r3]
 8005f9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8005fa2:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005fa6:	ed93 5b00 	vldr	d5, [r3]
 8005faa:	f241 3370 	movw	r3, #4976	; 0x1370
 8005fae:	443b      	add	r3, r7
 8005fb0:	ed93 7b00 	vldr	d7, [r3]
 8005fb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8005fb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8005fbc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8005fc0:	ed93 5b00 	vldr	d5, [r3]
 8005fc4:	f241 3310 	movw	r3, #4880	; 0x1310
 8005fc8:	443b      	add	r3, r7
 8005fca:	ed93 7b00 	vldr	d7, [r3]
 8005fce:	ee25 5b07 	vmul.f64	d5, d5, d7
 8005fd2:	f241 3348 	movw	r3, #4936	; 0x1348
 8005fd6:	443b      	add	r3, r7
 8005fd8:	ed93 4b00 	vldr	d4, [r3]
 8005fdc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8005fe0:	ed93 7b00 	vldr	d7, [r3]
 8005fe4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8005fe8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8005fec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8005ff0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8005ff4:	ed83 7b00 	vstr	d7, [r3]
  if (t41.im == 0.0) {
 8005ff8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005ffc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006000:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006008:	d115      	bne.n	8006036 <G_q+0x5a4e>
    t41_re = t41.re / 2.0;
 800600a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800600e:	ed93 6b00 	vldr	d6, [r3]
 8006012:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800601a:	f241 3308 	movw	r3, #4872	; 0x1308
 800601e:	443b      	add	r3, r7
 8006020:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	f04f 0400 	mov.w	r4, #0
 800602c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8006030:	e9c2 3400 	strd	r3, r4, [r2]
 8006034:	e037      	b.n	80060a6 <G_q+0x5abe>
  } else if (t41.re == 0.0) {
 8006036:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800603a:	ed93 7b00 	vldr	d7, [r3]
 800603e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006046:	d115      	bne.n	8006074 <G_q+0x5a8c>
    t41_re = 0.0;
 8006048:	f04f 0300 	mov.w	r3, #0
 800604c:	f04f 0400 	mov.w	r4, #0
 8006050:	f241 3208 	movw	r2, #4872	; 0x1308
 8006054:	443a      	add	r2, r7
 8006056:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t41.im / 2.0;
 800605a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800605e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006062:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006066:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800606a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800606e:	ed83 7b00 	vstr	d7, [r3]
 8006072:	e018      	b.n	80060a6 <G_q+0x5abe>
  } else {
    t41_re = t41.re / 2.0;
 8006074:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006078:	ed93 6b00 	vldr	d6, [r3]
 800607c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006080:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006084:	f241 3308 	movw	r3, #4872	; 0x1308
 8006088:	443b      	add	r3, r7
 800608a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t41.im / 2.0;
 800608e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8006092:	ed93 6b02 	vldr	d6, [r3, #8]
 8006096:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800609a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800609e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80060a2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t42.im == 0.0) {
 80060a6:	4b29      	ldr	r3, [pc, #164]	; (800614c <G_q+0x5b64>)
 80060a8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060ac:	443a      	add	r2, r7
 80060ae:	4413      	add	r3, r2
 80060b0:	ed93 7b02 	vldr	d7, [r3, #8]
 80060b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80060b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060bc:	d118      	bne.n	80060f0 <G_q+0x5b08>
    t16_re = t42.re / 2.0;
 80060be:	4b23      	ldr	r3, [pc, #140]	; (800614c <G_q+0x5b64>)
 80060c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060c4:	443a      	add	r2, r7
 80060c6:	4413      	add	r3, r2
 80060c8:	ed93 6b00 	vldr	d6, [r3]
 80060cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80060d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80060d4:	f241 3368 	movw	r3, #4968	; 0x1368
 80060d8:	443b      	add	r3, r7
 80060da:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 80060de:	f04f 0300 	mov.w	r3, #0
 80060e2:	f04f 0400 	mov.w	r4, #0
 80060e6:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80060ea:	e9c2 3400 	strd	r3, r4, [r2]
 80060ee:	e04e      	b.n	800618e <G_q+0x5ba6>
  } else if (t42.re == 0.0) {
 80060f0:	4b16      	ldr	r3, [pc, #88]	; (800614c <G_q+0x5b64>)
 80060f2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060f6:	443a      	add	r2, r7
 80060f8:	4413      	add	r3, r2
 80060fa:	ed93 7b00 	vldr	d7, [r3]
 80060fe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006106:	d123      	bne.n	8006150 <G_q+0x5b68>
    t16_re = 0.0;
 8006108:	f04f 0300 	mov.w	r3, #0
 800610c:	f04f 0400 	mov.w	r4, #0
 8006110:	f241 3268 	movw	r2, #4968	; 0x1368
 8006114:	443a      	add	r2, r7
 8006116:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t42.im / 2.0;
 800611a:	4b0c      	ldr	r3, [pc, #48]	; (800614c <G_q+0x5b64>)
 800611c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006120:	443a      	add	r2, r7
 8006122:	4413      	add	r3, r2
 8006124:	ed93 6b02 	vldr	d6, [r3, #8]
 8006128:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800612c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006130:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006134:	ed83 7b00 	vstr	d7, [r3]
 8006138:	e029      	b.n	800618e <G_q+0x5ba6>
 800613a:	bf00      	nop
 800613c:	f3af 8000 	nop.w
	...
 8006148:	ffffedd0 	.word	0xffffedd0
 800614c:	ffffed90 	.word	0xffffed90
  } else {
    t16_re = t42.re / 2.0;
 8006150:	4b5a      	ldr	r3, [pc, #360]	; (80062bc <G_q+0x5cd4>)
 8006152:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006156:	443a      	add	r2, r7
 8006158:	4413      	add	r3, r2
 800615a:	ed93 6b00 	vldr	d6, [r3]
 800615e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006166:	f241 3368 	movw	r3, #4968	; 0x1368
 800616a:	443b      	add	r3, r7
 800616c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t42.im / 2.0;
 8006170:	4b52      	ldr	r3, [pc, #328]	; (80062bc <G_q+0x5cd4>)
 8006172:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006176:	443a      	add	r2, r7
 8006178:	4413      	add	r3, r2
 800617a:	ed93 6b02 	vldr	d6, [r3, #8]
 800617e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006182:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006186:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800618a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t45.im == 0.0) {
 800618e:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8006192:	ed93 7b02 	vldr	d7, [r3, #8]
 8006196:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800619a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619e:	d115      	bne.n	80061cc <G_q+0x5be4>
    t20_re = t45.re / 2.0;
 80061a0:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80061a4:	ed93 6b00 	vldr	d6, [r3]
 80061a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80061ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80061b0:	f241 3348 	movw	r3, #4936	; 0x1348
 80061b4:	443b      	add	r3, r7
 80061b6:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	f04f 0400 	mov.w	r4, #0
 80061c2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80061c6:	e9c2 3400 	strd	r3, r4, [r2]
 80061ca:	e037      	b.n	800623c <G_q+0x5c54>
  } else if (t45.re == 0.0) {
 80061cc:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80061d0:	ed93 7b00 	vldr	d7, [r3]
 80061d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80061d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061dc:	d115      	bne.n	800620a <G_q+0x5c22>
    t20_re = 0.0;
 80061de:	f04f 0300 	mov.w	r3, #0
 80061e2:	f04f 0400 	mov.w	r4, #0
 80061e6:	f241 3248 	movw	r2, #4936	; 0x1348
 80061ea:	443a      	add	r2, r7
 80061ec:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t45.im / 2.0;
 80061f0:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80061f4:	ed93 6b02 	vldr	d6, [r3, #8]
 80061f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80061fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006200:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006204:	ed83 7b00 	vstr	d7, [r3]
 8006208:	e018      	b.n	800623c <G_q+0x5c54>
  } else {
    t20_re = t45.re / 2.0;
 800620a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 800620e:	ed93 6b00 	vldr	d6, [r3]
 8006212:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006216:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800621a:	f241 3348 	movw	r3, #4936	; 0x1348
 800621e:	443b      	add	r3, r7
 8006220:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t45.im / 2.0;
 8006224:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8006228:	ed93 6b02 	vldr	d6, [r3, #8]
 800622c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006230:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006234:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006238:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t46.im == 0.0) {
 800623c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8006240:	ed93 7b02 	vldr	d7, [r3, #8]
 8006244:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800624c:	d116      	bne.n	800627c <G_q+0x5c94>
    t34_re = t46.re / 2.0;
 800624e:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8006252:	ed93 6b00 	vldr	d6, [r3]
 8006256:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800625a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800625e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006262:	443b      	add	r3, r7
 8006264:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	f04f 0400 	mov.w	r4, #0
 8006270:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006274:	443a      	add	r2, r7
 8006276:	e9c2 3400 	strd	r3, r4, [r2]
 800627a:	e03b      	b.n	80062f4 <G_q+0x5d0c>
  } else if (t46.re == 0.0) {
 800627c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8006280:	ed93 7b00 	vldr	d7, [r3]
 8006284:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800628c:	d118      	bne.n	80062c0 <G_q+0x5cd8>
    t34_re = 0.0;
 800628e:	f04f 0300 	mov.w	r3, #0
 8006292:	f04f 0400 	mov.w	r4, #0
 8006296:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800629a:	443a      	add	r2, r7
 800629c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t46.im / 2.0;
 80062a0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80062a4:	ed93 6b02 	vldr	d6, [r3, #8]
 80062a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80062ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80062b0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80062b4:	443b      	add	r3, r7
 80062b6:	ed83 7b00 	vstr	d7, [r3]
 80062ba:	e01b      	b.n	80062f4 <G_q+0x5d0c>
 80062bc:	ffffed90 	.word	0xffffed90
  } else {
    t34_re = t46.re / 2.0;
 80062c0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80062c4:	ed93 6b00 	vldr	d6, [r3]
 80062c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80062cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80062d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80062d4:	443b      	add	r3, r7
 80062d6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t46.im / 2.0;
 80062da:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80062de:	ed93 6b02 	vldr	d6, [r3, #8]
 80062e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80062e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80062ea:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80062ee:	443b      	add	r3, r7
 80062f0:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 80062f4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80062f8:	ed93 7b00 	vldr	d7, [r3]
 80062fc:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80066c0 <G_q+0x60d8>
 8006300:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006304:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8006308:	ed93 7b02 	vldr	d7, [r3, #8]
 800630c:	ed9f 5bee 	vldr	d5, [pc, #952]	; 80066c8 <G_q+0x60e0>
 8006310:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006314:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006318:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800631c:	ed93 7b00 	vldr	d7, [r3]
 8006320:	ed9f 5be7 	vldr	d5, [pc, #924]	; 80066c0 <G_q+0x60d8>
 8006324:	ee27 5b05 	vmul.f64	d5, d7, d5
    t48.im * 3.061616997868383E-17);
 8006328:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800632c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006330:	ed9f 4be5 	vldr	d4, [pc, #916]	; 80066c8 <G_q+0x60e0>
 8006334:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8006338:	ee35 7b47 	vsub.f64	d7, d5, d7
 800633c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006340:	f241 3388 	movw	r3, #5000	; 0x1388
 8006344:	443b      	add	r3, r7
 8006346:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 800634a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800634e:	ed93 7b00 	vldr	d7, [r3]
 8006352:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 80066c8 <G_q+0x60e0>
 8006356:	ee27 6b06 	vmul.f64	d6, d7, d6
 800635a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800635e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006362:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80066c0 <G_q+0x60d8>
 8006366:	ee27 7b05 	vmul.f64	d7, d7, d5
 800636a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800636e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8006372:	ed93 7b00 	vldr	d7, [r3]
 8006376:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 80066c8 <G_q+0x60e0>
 800637a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t48.im * 0.0);
 800637e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8006382:	ed93 7b02 	vldr	d7, [r3, #8]
 8006386:	ed9f 4bce 	vldr	d4, [pc, #824]	; 80066c0 <G_q+0x60d8>
 800638a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800638e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 8006392:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006396:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800639a:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_re;
 800639e:	f241 3348 	movw	r3, #4936	; 0x1348
 80063a2:	443b      	add	r3, r7
 80063a4:	ed93 6b00 	vldr	d6, [r3]
 80063a8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80063ac:	443b      	add	r3, r7
 80063ae:	ed93 7b00 	vldr	d7, [r3]
 80063b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063b6:	f241 3348 	movw	r3, #4936	; 0x1348
 80063ba:	443b      	add	r3, r7
 80063bc:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 80063c0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80063c4:	ed93 6b00 	vldr	d6, [r3]
 80063c8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80063cc:	443b      	add	r3, r7
 80063ce:	ed93 7b00 	vldr	d7, [r3]
 80063d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063d6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80063da:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t51.re * 3.061616997868383E-17 + t52.re * 3.061616997868383E-17;
 80063de:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80063e2:	ed93 7b00 	vldr	d7, [r3]
 80063e6:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80066c8 <G_q+0x60e0>
 80063ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 80063ee:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80063f2:	ed93 7b00 	vldr	d7, [r3]
 80063f6:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 80066c8 <G_q+0x60e0>
 80063fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80063fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006402:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006406:	443b      	add	r3, r7
 8006408:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t51.im * 3.061616997868383E-17 + t52.im * 3.061616997868383E-17;
 800640c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8006410:	ed93 7b02 	vldr	d7, [r3, #8]
 8006414:	ed9f 6bac 	vldr	d6, [pc, #688]	; 80066c8 <G_q+0x60e0>
 8006418:	ee27 6b06 	vmul.f64	d6, d7, d6
 800641c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8006420:	ed93 7b02 	vldr	d7, [r3, #8]
 8006424:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80066c8 <G_q+0x60e0>
 8006428:	ee27 7b05 	vmul.f64	d7, d7, d5
 800642c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006430:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006434:	443b      	add	r3, r7
 8006436:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t49.re * 0.0 - t49.im * 0.5) - (t50.re * 0.0 - t50.im * 0.5);
 800643a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800643e:	ed93 7b00 	vldr	d7, [r3]
 8006442:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80066c0 <G_q+0x60d8>
 8006446:	ee27 6b06 	vmul.f64	d6, d7, d6
 800644a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800644e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006452:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006456:	ee27 7b05 	vmul.f64	d7, d7, d5
 800645a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800645e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8006462:	ed93 7b00 	vldr	d7, [r3]
 8006466:	ed9f 5b96 	vldr	d5, [pc, #600]	; 80066c0 <G_q+0x60d8>
 800646a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800646e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8006472:	ed93 7b02 	vldr	d7, [r3, #8]
 8006476:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800647a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800647e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006482:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006486:	f241 3378 	movw	r3, #4984	; 0x1378
 800648a:	443b      	add	r3, r7
 800648c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t49.re * 0.5 + t49.im * 0.0) - (t50.re * 0.5 + t50.im * 0.0);
 8006490:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8006494:	ed93 7b00 	vldr	d7, [r3]
 8006498:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800649c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064a0:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80064a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80064a8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80066c0 <G_q+0x60d8>
 80064ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80064b0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80064b4:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80064b8:	ed93 7b00 	vldr	d7, [r3]
 80064bc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80064c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80064c4:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80064c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80064cc:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 80066c0 <G_q+0x60d8>
 80064d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80064d4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80064d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80064dc:	f241 3370 	movw	r3, #4976	; 0x1370
 80064e0:	443b      	add	r3, r7
 80064e2:	ed83 7b00 	vstr	d7, [r3]
  t41_re += t16_re;
 80064e6:	f241 3308 	movw	r3, #4872	; 0x1308
 80064ea:	443b      	add	r3, r7
 80064ec:	ed93 6b00 	vldr	d6, [r3]
 80064f0:	f241 3368 	movw	r3, #4968	; 0x1368
 80064f4:	443b      	add	r3, r7
 80064f6:	ed93 7b00 	vldr	d7, [r3]
 80064fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064fe:	f241 3308 	movw	r3, #4872	; 0x1308
 8006502:	443b      	add	r3, r7
 8006504:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t16_im;
 8006508:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800650c:	ed93 6b00 	vldr	d6, [r3]
 8006510:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006514:	ed93 7b00 	vldr	d7, [r3]
 8006518:	ee36 7b07 	vadd.f64	d7, d6, d7
 800651c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8006520:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8006524:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8006528:	ed93 7b00 	vldr	d7, [r3]
 800652c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80066c0 <G_q+0x60d8>
 8006530:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006534:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8006538:	ed93 7b02 	vldr	d7, [r3, #8]
 800653c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80066d0 <G_q+0x60e8>
 8006540:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006544:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006548:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800654c:	ed93 7b00 	vldr	d7, [r3]
 8006550:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80066c0 <G_q+0x60d8>
 8006554:	ee27 5b05 	vmul.f64	d5, d7, d5
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8006558:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800655c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006560:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 80066d0 <G_q+0x60e8>
 8006564:	ee27 7b04 	vmul.f64	d7, d7, d4
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8006568:	ee35 7b47 	vsub.f64	d7, d5, d7
 800656c:	ee36 6b47 	vsub.f64	d6, d6, d7
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8006570:	f241 3388 	movw	r3, #5000	; 0x1388
 8006574:	443b      	add	r3, r7
 8006576:	ed93 5b00 	vldr	d5, [r3]
 800657a:	f241 3348 	movw	r3, #4936	; 0x1348
 800657e:	443b      	add	r3, r7
 8006580:	ed93 7b00 	vldr	d7, [r3]
 8006584:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006588:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800658c:	ed93 4b00 	vldr	d4, [r3]
 8006590:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006594:	ed93 7b00 	vldr	d7, [r3]
 8006598:	ee24 7b07 	vmul.f64	d7, d4, d7
 800659c:	ee35 7b47 	vsub.f64	d7, d5, d7
 80065a0:	ee36 6b47 	vsub.f64	d6, d6, d7
             t20_im)) + (t34_re * t13_re - t34_im * t13_im);
 80065a4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80065a8:	443b      	add	r3, r7
 80065aa:	ed93 5b00 	vldr	d5, [r3]
 80065ae:	f241 3378 	movw	r3, #4984	; 0x1378
 80065b2:	443b      	add	r3, r7
 80065b4:	ed93 7b00 	vldr	d7, [r3]
 80065b8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80065bc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80065c0:	443b      	add	r3, r7
 80065c2:	ed93 4b00 	vldr	d4, [r3]
 80065c6:	f241 3370 	movw	r3, #4976	; 0x1370
 80065ca:	443b      	add	r3, r7
 80065cc:	ed93 7b00 	vldr	d7, [r3]
 80065d0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80065d4:	ee35 7b47 	vsub.f64	d7, d5, d7
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 80065d8:	f241 2358 	movw	r3, #4696	; 0x1258
 80065dc:	443b      	add	r3, r7
 80065de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80065e2:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80065e6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80065ea:	ed93 7b00 	vldr	d7, [r3]
 80065ee:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80066d0 <G_q+0x60e8>
 80065f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80065f6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80065fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80065fe:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80066c0 <G_q+0x60d8>
 8006602:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006606:	ee36 6b07 	vadd.f64	d6, d6, d7
 800660a:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800660e:	ed93 7b00 	vldr	d7, [r3]
 8006612:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80066d0 <G_q+0x60e8>
 8006616:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800661a:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800661e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006622:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80066c0 <G_q+0x60d8>
 8006626:	ee27 7b04 	vmul.f64	d7, d7, d4
 800662a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800662e:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8006632:	f241 3388 	movw	r3, #5000	; 0x1388
 8006636:	443b      	add	r3, r7
 8006638:	ed93 5b00 	vldr	d5, [r3]
 800663c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006640:	ed93 7b00 	vldr	d7, [r3]
 8006644:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8006648:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800664c:	ed93 4b00 	vldr	d4, [r3]
 8006650:	f241 3348 	movw	r3, #4936	; 0x1348
 8006654:	443b      	add	r3, r7
 8006656:	ed93 7b00 	vldr	d7, [r3]
 800665a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800665e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006662:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8006666:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800666a:	443b      	add	r3, r7
 800666c:	ed93 5b00 	vldr	d5, [r3]
 8006670:	f241 3370 	movw	r3, #4976	; 0x1370
 8006674:	443b      	add	r3, r7
 8006676:	ed93 7b00 	vldr	d7, [r3]
 800667a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800667e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006682:	443b      	add	r3, r7
 8006684:	ed93 4b00 	vldr	d4, [r3]
 8006688:	f241 3378 	movw	r3, #4984	; 0x1378
 800668c:	443b      	add	r3, r7
 800668e:	ed93 7b00 	vldr	d7, [r3]
 8006692:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006696:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800669a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800669e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80066a2:	443b      	add	r3, r7
 80066a4:	ed83 7b00 	vstr	d7, [r3]
  if (t54.im == 0.0) {
 80066a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80066b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	d125      	bne.n	8006706 <G_q+0x611e>
 80066ba:	e00d      	b.n	80066d8 <G_q+0x60f0>
 80066bc:	f3af 8000 	nop.w
	...
 80066c8:	33145c07 	.word	0x33145c07
 80066cc:	3c81a626 	.word	0x3c81a626
 80066d0:	33145c07 	.word	0x33145c07
 80066d4:	3c91a626 	.word	0x3c91a626
    b_t54_re = t54.re / 2.0;
 80066d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80066dc:	ed93 6b00 	vldr	d6, [r3]
 80066e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066e8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80066ec:	443b      	add	r3, r7
 80066ee:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 80066f2:	f04f 0300 	mov.w	r3, #0
 80066f6:	f04f 0400 	mov.w	r4, #0
 80066fa:	f241 22e8 	movw	r2, #4840	; 0x12e8
 80066fe:	443a      	add	r2, r7
 8006700:	e9c2 3400 	strd	r3, r4, [r2]
 8006704:	e039      	b.n	800677a <G_q+0x6192>
  } else if (t54.re == 0.0) {
 8006706:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800670a:	ed93 7b00 	vldr	d7, [r3]
 800670e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006716:	d116      	bne.n	8006746 <G_q+0x615e>
    b_t54_re = 0.0;
 8006718:	f04f 0300 	mov.w	r3, #0
 800671c:	f04f 0400 	mov.w	r4, #0
 8006720:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8006724:	443a      	add	r2, r7
 8006726:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t54.im / 2.0;
 800672a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800672e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006732:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006736:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800673a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800673e:	443b      	add	r3, r7
 8006740:	ed83 7b00 	vstr	d7, [r3]
 8006744:	e019      	b.n	800677a <G_q+0x6192>
  } else {
    b_t54_re = t54.re / 2.0;
 8006746:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800674a:	ed93 6b00 	vldr	d6, [r3]
 800674e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006752:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006756:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800675a:	443b      	add	r3, r7
 800675c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t54.im / 2.0;
 8006760:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006764:	ed93 6b02 	vldr	d6, [r3, #8]
 8006768:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800676c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006770:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8006774:	443b      	add	r3, r7
 8006776:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t55.im == 0.0) {
 800677a:	4bdd      	ldr	r3, [pc, #884]	; (8006af0 <G_q+0x6508>)
 800677c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006780:	443a      	add	r2, r7
 8006782:	4413      	add	r3, r2
 8006784:	ed93 7b02 	vldr	d7, [r3, #8]
 8006788:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800678c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006790:	d118      	bne.n	80067c4 <G_q+0x61dc>
    t55_re = t55.re / 2.0;
 8006792:	4bd7      	ldr	r3, [pc, #860]	; (8006af0 <G_q+0x6508>)
 8006794:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006798:	443a      	add	r2, r7
 800679a:	4413      	add	r3, r2
 800679c:	ed93 6b00 	vldr	d6, [r3]
 80067a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067a8:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80067ac:	ed83 7b00 	vstr	d7, [r3]
    t55_im = 0.0;
 80067b0:	f04f 0300 	mov.w	r3, #0
 80067b4:	f04f 0400 	mov.w	r4, #0
 80067b8:	f241 22d8 	movw	r2, #4824	; 0x12d8
 80067bc:	443a      	add	r2, r7
 80067be:	e9c2 3400 	strd	r3, r4, [r2]
 80067c2:	e043      	b.n	800684c <G_q+0x6264>
  } else if (t55.re == 0.0) {
 80067c4:	4bca      	ldr	r3, [pc, #808]	; (8006af0 <G_q+0x6508>)
 80067c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80067ca:	443a      	add	r2, r7
 80067cc:	4413      	add	r3, r2
 80067ce:	ed93 7b00 	vldr	d7, [r3]
 80067d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80067d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067da:	d118      	bne.n	800680e <G_q+0x6226>
    t55_re = 0.0;
 80067dc:	f04f 0300 	mov.w	r3, #0
 80067e0:	f04f 0400 	mov.w	r4, #0
 80067e4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80067e8:	e9c2 3400 	strd	r3, r4, [r2]
    t55_im = t55.im / 2.0;
 80067ec:	4bc0      	ldr	r3, [pc, #768]	; (8006af0 <G_q+0x6508>)
 80067ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80067f2:	443a      	add	r2, r7
 80067f4:	4413      	add	r3, r2
 80067f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80067fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006802:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8006806:	443b      	add	r3, r7
 8006808:	ed83 7b00 	vstr	d7, [r3]
 800680c:	e01e      	b.n	800684c <G_q+0x6264>
  } else {
    t55_re = t55.re / 2.0;
 800680e:	4bb8      	ldr	r3, [pc, #736]	; (8006af0 <G_q+0x6508>)
 8006810:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006814:	443a      	add	r2, r7
 8006816:	4413      	add	r3, r2
 8006818:	ed93 6b00 	vldr	d6, [r3]
 800681c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006824:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8006828:	ed83 7b00 	vstr	d7, [r3]
    t55_im = t55.im / 2.0;
 800682c:	4bb0      	ldr	r3, [pc, #704]	; (8006af0 <G_q+0x6508>)
 800682e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006832:	443a      	add	r2, r7
 8006834:	4413      	add	r3, r2
 8006836:	ed93 6b02 	vldr	d6, [r3, #8]
 800683a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800683e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006842:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8006846:	443b      	add	r3, r7
 8006848:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t70.im == 0.0) {
 800684c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8006850:	ed93 7b02 	vldr	d7, [r3, #8]
 8006854:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800685c:	d116      	bne.n	800688c <G_q+0x62a4>
    t70_re = t70.re / 2.0;
 800685e:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8006862:	ed93 6b00 	vldr	d6, [r3]
 8006866:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800686a:	443b      	add	r3, r7
 800686c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006870:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006874:	ed83 7b00 	vstr	d7, [r3]
    t70_im = 0.0;
 8006878:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800687c:	443a      	add	r2, r7
 800687e:	f04f 0300 	mov.w	r3, #0
 8006882:	f04f 0400 	mov.w	r4, #0
 8006886:	e9c2 3400 	strd	r3, r4, [r2]
 800688a:	e039      	b.n	8006900 <G_q+0x6318>
  } else if (t70.re == 0.0) {
 800688c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8006890:	ed93 7b00 	vldr	d7, [r3]
 8006894:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800689c:	d116      	bne.n	80068cc <G_q+0x62e4>
    t70_re = 0.0;
 800689e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80068a2:	443a      	add	r2, r7
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	f04f 0400 	mov.w	r4, #0
 80068ac:	e9c2 3400 	strd	r3, r4, [r2]
    t70_im = t70.im / 2.0;
 80068b0:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80068b4:	ed93 6b02 	vldr	d6, [r3, #8]
 80068b8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80068bc:	443b      	add	r3, r7
 80068be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068c6:	ed83 7b00 	vstr	d7, [r3]
 80068ca:	e019      	b.n	8006900 <G_q+0x6318>
  } else {
    t70_re = t70.re / 2.0;
 80068cc:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80068d0:	ed93 6b00 	vldr	d6, [r3]
 80068d4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80068d8:	443b      	add	r3, r7
 80068da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068e2:	ed83 7b00 	vstr	d7, [r3]
    t70_im = t70.im / 2.0;
 80068e6:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80068ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80068ee:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80068f2:	443b      	add	r3, r7
 80068f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068fc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t71.im == 0.0) {
 8006900:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8006904:	ed93 7b02 	vldr	d7, [r3, #8]
 8006908:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800690c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006910:	d116      	bne.n	8006940 <G_q+0x6358>
    t34_re = t71.re / 2.0;
 8006912:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8006916:	ed93 6b00 	vldr	d6, [r3]
 800691a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800691e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006922:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006926:	443b      	add	r3, r7
 8006928:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	f04f 0400 	mov.w	r4, #0
 8006934:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006938:	443a      	add	r2, r7
 800693a:	e9c2 3400 	strd	r3, r4, [r2]
 800693e:	e039      	b.n	80069b4 <G_q+0x63cc>
  } else if (t71.re == 0.0) {
 8006940:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8006944:	ed93 7b00 	vldr	d7, [r3]
 8006948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800694c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006950:	d116      	bne.n	8006980 <G_q+0x6398>
    t34_re = 0.0;
 8006952:	f04f 0300 	mov.w	r3, #0
 8006956:	f04f 0400 	mov.w	r4, #0
 800695a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800695e:	443a      	add	r2, r7
 8006960:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t71.im / 2.0;
 8006964:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8006968:	ed93 6b02 	vldr	d6, [r3, #8]
 800696c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006974:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006978:	443b      	add	r3, r7
 800697a:	ed83 7b00 	vstr	d7, [r3]
 800697e:	e019      	b.n	80069b4 <G_q+0x63cc>
  } else {
    t34_re = t71.re / 2.0;
 8006980:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8006984:	ed93 6b00 	vldr	d6, [r3]
 8006988:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800698c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006990:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006994:	443b      	add	r3, r7
 8006996:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t71.im / 2.0;
 800699a:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800699e:	ed93 6b02 	vldr	d6, [r3, #8]
 80069a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069aa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80069ae:	443b      	add	r3, r7
 80069b0:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_re += t34_re;
 80069b4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80069b8:	443b      	add	r3, r7
 80069ba:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80069be:	443a      	add	r2, r7
 80069c0:	ed92 6b00 	vldr	d6, [r2]
 80069c4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80069c8:	443a      	add	r2, r7
 80069ca:	ed92 7b00 	vldr	d7, [r2]
 80069ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069d2:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t34_im;
 80069d6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80069da:	443b      	add	r3, r7
 80069dc:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80069e0:	443a      	add	r2, r7
 80069e2:	ed92 6b00 	vldr	d6, [r2]
 80069e6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80069ea:	443a      	add	r2, r7
 80069ec:	ed92 7b00 	vldr	d7, [r2]
 80069f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069f4:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t72.re * 0.0 - t72.im * 0.5) - (t73.re * 0.0 - t73.im * 0.5);
 80069f8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80069fc:	ed93 7b00 	vldr	d7, [r3]
 8006a00:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006ae8 <G_q+0x6500>
 8006a04:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a08:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8006a0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a10:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006a14:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006a18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006a1c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006a20:	ed93 7b00 	vldr	d7, [r3]
 8006a24:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006ae8 <G_q+0x6500>
 8006a28:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006a2c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006a30:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a34:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006a38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a3c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006a40:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8006a44:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006a48:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t72.re * 0.5 + t72.im * 0.0) - (t73.re * 0.5 + t73.im * 0.0);
 8006a4c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8006a50:	ed93 7b00 	vldr	d7, [r3]
 8006a54:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006a58:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a5c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8006a60:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a64:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8006ae8 <G_q+0x6500>
 8006a68:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006a6c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a70:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006a74:	ed93 7b00 	vldr	d7, [r3]
 8006a78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006a7c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006a80:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8006a84:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a88:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8006ae8 <G_q+0x6500>
 8006a8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a90:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006a94:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006a98:	f241 3338 	movw	r3, #4920	; 0x1338
 8006a9c:	443b      	add	r3, r7
 8006a9e:	ed83 7b00 	vstr	d7, [r3]
  if (t74.im == 0.0) {
 8006aa2:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006aa6:	ed93 7b02 	vldr	d7, [r3, #8]
 8006aaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006aae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ab2:	d11f      	bne.n	8006af4 <G_q+0x650c>
    t74_re = t74.re / 2.0;
 8006ab4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006ab8:	ed93 6b00 	vldr	d6, [r3]
 8006abc:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8006ac0:	443b      	add	r3, r7
 8006ac2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ac6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006aca:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 8006ace:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8006ad2:	443a      	add	r2, r7
 8006ad4:	f04f 0300 	mov.w	r3, #0
 8006ad8:	f04f 0400 	mov.w	r4, #0
 8006adc:	e9c2 3400 	strd	r3, r4, [r2]
 8006ae0:	e042      	b.n	8006b68 <G_q+0x6580>
 8006ae2:	bf00      	nop
 8006ae4:	f3af 8000 	nop.w
	...
 8006af0:	ffffec70 	.word	0xffffec70
  } else if (t74.re == 0.0) {
 8006af4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006af8:	ed93 7b00 	vldr	d7, [r3]
 8006afc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b04:	d116      	bne.n	8006b34 <G_q+0x654c>
    t74_re = 0.0;
 8006b06:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8006b0a:	443a      	add	r2, r7
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	f04f 0400 	mov.w	r4, #0
 8006b14:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t74.im / 2.0;
 8006b18:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006b1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b20:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8006b24:	443b      	add	r3, r7
 8006b26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b2e:	ed83 7b00 	vstr	d7, [r3]
 8006b32:	e019      	b.n	8006b68 <G_q+0x6580>
  } else {
    t74_re = t74.re / 2.0;
 8006b34:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006b38:	ed93 6b00 	vldr	d6, [r3]
 8006b3c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8006b40:	443b      	add	r3, r7
 8006b42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b4a:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t74.im / 2.0;
 8006b4e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8006b52:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b56:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8006b5a:	443b      	add	r3, r7
 8006b5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b64:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t75.im == 0.0) {
 8006b68:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006b6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b78:	d116      	bne.n	8006ba8 <G_q+0x65c0>
    t34_re = t75.re / 2.0;
 8006b7a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006b7e:	ed93 6b00 	vldr	d6, [r3]
 8006b82:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b86:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b8a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006b8e:	443b      	add	r3, r7
 8006b90:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006b94:	f04f 0300 	mov.w	r3, #0
 8006b98:	f04f 0400 	mov.w	r4, #0
 8006b9c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006ba0:	443a      	add	r2, r7
 8006ba2:	e9c2 3400 	strd	r3, r4, [r2]
 8006ba6:	e039      	b.n	8006c1c <G_q+0x6634>
  } else if (t75.re == 0.0) {
 8006ba8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006bac:	ed93 7b00 	vldr	d7, [r3]
 8006bb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb8:	d116      	bne.n	8006be8 <G_q+0x6600>
    t34_re = 0.0;
 8006bba:	f04f 0300 	mov.w	r3, #0
 8006bbe:	f04f 0400 	mov.w	r4, #0
 8006bc2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006bc6:	443a      	add	r2, r7
 8006bc8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t75.im / 2.0;
 8006bcc:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006bd0:	ed93 6b02 	vldr	d6, [r3, #8]
 8006bd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006bd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006bdc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006be0:	443b      	add	r3, r7
 8006be2:	ed83 7b00 	vstr	d7, [r3]
 8006be6:	e019      	b.n	8006c1c <G_q+0x6634>
  } else {
    t34_re = t75.re / 2.0;
 8006be8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006bec:	ed93 6b00 	vldr	d6, [r3]
 8006bf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006bf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006bf8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006bfc:	443b      	add	r3, r7
 8006bfe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t75.im / 2.0;
 8006c02:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8006c06:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006c16:	443b      	add	r3, r7
 8006c18:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re += t34_re;
 8006c1c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8006c20:	443b      	add	r3, r7
 8006c22:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8006c26:	443a      	add	r2, r7
 8006c28:	ed92 6b00 	vldr	d6, [r2]
 8006c2c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006c30:	443a      	add	r2, r7
 8006c32:	ed92 7b00 	vldr	d7, [r2]
 8006c36:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c3a:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 8006c3e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8006c42:	443b      	add	r3, r7
 8006c44:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8006c48:	443a      	add	r2, r7
 8006c4a:	ed92 6b00 	vldr	d6, [r2]
 8006c4e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006c52:	443a      	add	r2, r7
 8006c54:	ed92 7b00 	vldr	d7, [r2]
 8006c58:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006c5c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t76.re * 0.0 - t76.im * 0.5) - (t77.re * 0.0 - t77.im * 0.5);
 8006c60:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8006c64:	ed93 7b00 	vldr	d7, [r3]
 8006c68:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8006e40 <G_q+0x6858>
 8006c6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c70:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8006c74:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006c7c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006c80:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006c84:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8006c88:	ed93 7b00 	vldr	d7, [r3]
 8006c8c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8006e40 <G_q+0x6858>
 8006c90:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006c94:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8006c98:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c9c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006ca0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006ca4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ca8:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8006cac:	443b      	add	r3, r7
 8006cae:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006cb2:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t76.re * 0.5 + t76.im * 0.0) - (t77.re * 0.5 + t77.im * 0.0);
 8006cb6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8006cba:	ed93 7b00 	vldr	d7, [r3]
 8006cbe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006cc2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006cc6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8006cca:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cce:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8006e40 <G_q+0x6858>
 8006cd2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006cd6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006cda:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8006cde:	ed93 7b00 	vldr	d7, [r3]
 8006ce2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006ce6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006cea:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8006cee:	ed93 7b02 	vldr	d7, [r3, #8]
 8006cf2:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8006e40 <G_q+0x6858>
 8006cf6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006cfa:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006cfe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006d02:	f241 3310 	movw	r3, #4880	; 0x1310
 8006d06:	443b      	add	r3, r7
 8006d08:	ed83 7b00 	vstr	d7, [r3]
  if (t62.im == 0.0) {
 8006d0c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006d10:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d1c:	d115      	bne.n	8006d4a <G_q+0x6762>
    t16_re = t62.re / 2.0;
 8006d1e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006d22:	ed93 6b00 	vldr	d6, [r3]
 8006d26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d2e:	f241 3368 	movw	r3, #4968	; 0x1368
 8006d32:	443b      	add	r3, r7
 8006d34:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8006d38:	f04f 0300 	mov.w	r3, #0
 8006d3c:	f04f 0400 	mov.w	r4, #0
 8006d40:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8006d44:	e9c2 3400 	strd	r3, r4, [r2]
 8006d48:	e037      	b.n	8006dba <G_q+0x67d2>
  } else if (t62.re == 0.0) {
 8006d4a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006d4e:	ed93 7b00 	vldr	d7, [r3]
 8006d52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d5a:	d115      	bne.n	8006d88 <G_q+0x67a0>
    t16_re = 0.0;
 8006d5c:	f04f 0300 	mov.w	r3, #0
 8006d60:	f04f 0400 	mov.w	r4, #0
 8006d64:	f241 3268 	movw	r2, #4968	; 0x1368
 8006d68:	443a      	add	r2, r7
 8006d6a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t62.im / 2.0;
 8006d6e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006d72:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d7e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006d82:	ed83 7b00 	vstr	d7, [r3]
 8006d86:	e018      	b.n	8006dba <G_q+0x67d2>
  } else {
    t16_re = t62.re / 2.0;
 8006d88:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006d8c:	ed93 6b00 	vldr	d6, [r3]
 8006d90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d98:	f241 3368 	movw	r3, #4968	; 0x1368
 8006d9c:	443b      	add	r3, r7
 8006d9e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t62.im / 2.0;
 8006da2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8006da6:	ed93 6b02 	vldr	d6, [r3, #8]
 8006daa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006dae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006db2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006db6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t63.im == 0.0) {
 8006dba:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006dbe:	ed93 7b02 	vldr	d7, [r3, #8]
 8006dc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dca:	d116      	bne.n	8006dfa <G_q+0x6812>
    t34_re = t63.re / 2.0;
 8006dcc:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006dd0:	ed93 6b00 	vldr	d6, [r3]
 8006dd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ddc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006de0:	443b      	add	r3, r7
 8006de2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006de6:	f04f 0300 	mov.w	r3, #0
 8006dea:	f04f 0400 	mov.w	r4, #0
 8006dee:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006df2:	443a      	add	r2, r7
 8006df4:	e9c2 3400 	strd	r3, r4, [r2]
 8006df8:	e044      	b.n	8006e84 <G_q+0x689c>
  } else if (t63.re == 0.0) {
 8006dfa:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006dfe:	ed93 7b00 	vldr	d7, [r3]
 8006e02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006e06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0a:	d121      	bne.n	8006e50 <G_q+0x6868>
    t34_re = 0.0;
 8006e0c:	f04f 0300 	mov.w	r3, #0
 8006e10:	f04f 0400 	mov.w	r4, #0
 8006e14:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006e18:	443a      	add	r2, r7
 8006e1a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t63.im / 2.0;
 8006e1e:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006e22:	ed93 6b02 	vldr	d6, [r3, #8]
 8006e26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e2e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006e32:	443b      	add	r3, r7
 8006e34:	ed83 7b00 	vstr	d7, [r3]
 8006e38:	e024      	b.n	8006e84 <G_q+0x689c>
 8006e3a:	bf00      	nop
 8006e3c:	f3af 8000 	nop.w
	...
 8006e48:	33145c07 	.word	0x33145c07
 8006e4c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t63.re / 2.0;
 8006e50:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006e54:	ed93 6b00 	vldr	d6, [r3]
 8006e58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006e64:	443b      	add	r3, r7
 8006e66:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t63.im / 2.0;
 8006e6a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8006e6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006e72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006e76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006e7e:	443b      	add	r3, r7
 8006e80:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8006e84:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8006e88:	ed93 7b00 	vldr	d7, [r3]
 8006e8c:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8006e40 <G_q+0x6858>
 8006e90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e94:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8006e98:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e9c:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8006e48 <G_q+0x6860>
 8006ea0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ea4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ea8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8006eac:	ed93 7b00 	vldr	d7, [r3]
 8006eb0:	ed1f 5b1d 	vldr	d5, [pc, #-116]	; 8006e40 <G_q+0x6858>
 8006eb4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t65.im * 3.061616997868383E-17);
 8006eb8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8006ebc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ec0:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8006e48 <G_q+0x6860>
 8006ec4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8006ec8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ecc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ed0:	f241 3348 	movw	r3, #4936	; 0x1348
 8006ed4:	443b      	add	r3, r7
 8006ed6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8006eda:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8006ede:	ed93 7b00 	vldr	d7, [r3]
 8006ee2:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8006e48 <G_q+0x6860>
 8006ee6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006eea:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8006eee:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ef2:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 8006e40 <G_q+0x6858>
 8006ef6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006efa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006efe:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8006f02:	ed93 7b00 	vldr	d7, [r3]
 8006f06:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8006e48 <G_q+0x6860>
 8006f0a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t65.im * 0.0);
 8006f0e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8006f12:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f16:	ed1f 4b36 	vldr	d4, [pc, #-216]	; 8006e40 <G_q+0x6858>
 8006f1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006f1e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8006f22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f26:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006f2a:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_re;
 8006f2e:	f241 3368 	movw	r3, #4968	; 0x1368
 8006f32:	443b      	add	r3, r7
 8006f34:	ed93 6b00 	vldr	d6, [r3]
 8006f38:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006f3c:	443b      	add	r3, r7
 8006f3e:	ed93 7b00 	vldr	d7, [r3]
 8006f42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f46:	f241 3368 	movw	r3, #4968	; 0x1368
 8006f4a:	443b      	add	r3, r7
 8006f4c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8006f50:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006f54:	ed93 6b00 	vldr	d6, [r3]
 8006f58:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006f5c:	443b      	add	r3, r7
 8006f5e:	ed93 7b00 	vldr	d7, [r3]
 8006f62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f66:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006f6a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t68.re * 3.061616997868383E-17 + t69.re * 3.061616997868383E-17;
 8006f6e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8006f72:	ed93 7b00 	vldr	d7, [r3]
 8006f76:	ed1f 6b4c 	vldr	d6, [pc, #-304]	; 8006e48 <G_q+0x6860>
 8006f7a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f7e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006f82:	ed93 7b00 	vldr	d7, [r3]
 8006f86:	ed1f 5b50 	vldr	d5, [pc, #-320]	; 8006e48 <G_q+0x6860>
 8006f8a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006f8e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f92:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006f96:	443b      	add	r3, r7
 8006f98:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t68.im * 3.061616997868383E-17 + t69.im * 3.061616997868383E-17;
 8006f9c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8006fa0:	ed93 7b02 	vldr	d7, [r3, #8]
 8006fa4:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8006e48 <G_q+0x6860>
 8006fa8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fac:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8006fb0:	ed93 7b02 	vldr	d7, [r3, #8]
 8006fb4:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8006e48 <G_q+0x6860>
 8006fb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006fbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006fc0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006fc4:	443b      	add	r3, r7
 8006fc6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t66.re * 0.0 - t66.im * 0.5) - (t67.re * 0.0 - t67.im * 0.5);
 8006fca:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8006fce:	ed93 7b00 	vldr	d7, [r3]
 8006fd2:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8006e40 <G_q+0x6858>
 8006fd6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006fda:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8006fde:	ed93 7b02 	vldr	d7, [r3, #8]
 8006fe2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006fe6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006fea:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006fee:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8006ff2:	ed93 7b00 	vldr	d7, [r3]
 8006ff6:	ed1f 5b6e 	vldr	d5, [pc, #-440]	; 8006e40 <G_q+0x6858>
 8006ffa:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006ffe:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8007002:	ed93 7b02 	vldr	d7, [r3, #8]
 8007006:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800700a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800700e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007012:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007016:	f241 3378 	movw	r3, #4984	; 0x1378
 800701a:	443b      	add	r3, r7
 800701c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t66.re * 0.5 + t66.im * 0.0) - (t67.re * 0.5 + t67.im * 0.0);
 8007020:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8007024:	ed93 7b00 	vldr	d7, [r3]
 8007028:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800702c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007030:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8007034:	ed93 7b02 	vldr	d7, [r3, #8]
 8007038:	ed1f 5b7f 	vldr	d5, [pc, #-508]	; 8006e40 <G_q+0x6858>
 800703c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007040:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007044:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8007048:	ed93 7b00 	vldr	d7, [r3]
 800704c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007050:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007054:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8007058:	ed93 7b02 	vldr	d7, [r3, #8]
 800705c:	ed1f 4b88 	vldr	d4, [pc, #-544]	; 8006e40 <G_q+0x6858>
 8007060:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007064:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007068:	ee36 7b47 	vsub.f64	d7, d6, d7
 800706c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007070:	443b      	add	r3, r7
 8007072:	ed83 7b00 	vstr	d7, [r3]
  t23_re = t58.re * 3.061616997868383E-17 + t59.re * 3.061616997868383E-17;
 8007076:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800707a:	ed93 7b00 	vldr	d7, [r3]
 800707e:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8006e48 <G_q+0x6860>
 8007082:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007086:	4bca      	ldr	r3, [pc, #808]	; (80073b0 <G_q+0x6dc8>)
 8007088:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800708c:	443a      	add	r2, r7
 800708e:	4413      	add	r3, r2
 8007090:	ed93 7b00 	vldr	d7, [r3]
 8007094:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 8007398 <G_q+0x6db0>
 8007098:	ee27 7b05 	vmul.f64	d7, d7, d5
 800709c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070a0:	f241 3330 	movw	r3, #4912	; 0x1330
 80070a4:	443b      	add	r3, r7
 80070a6:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t58.im * 3.061616997868383E-17 + t59.im * 3.061616997868383E-17;
 80070aa:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80070ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80070b2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8007398 <G_q+0x6db0>
 80070b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070ba:	4bbd      	ldr	r3, [pc, #756]	; (80073b0 <G_q+0x6dc8>)
 80070bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80070c0:	443a      	add	r2, r7
 80070c2:	4413      	add	r3, r2
 80070c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80070c8:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8007398 <G_q+0x6db0>
 80070cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070d0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80070d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80070d8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 80070dc:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80070e0:	ed93 7b00 	vldr	d7, [r3]
 80070e4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80073a0 <G_q+0x6db8>
 80070e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070ec:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80070f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80070f4:	ed9f 5bac 	vldr	d5, [pc, #688]	; 80073a8 <G_q+0x6dc0>
 80070f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007100:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007104:	ed93 7b00 	vldr	d7, [r3]
 8007108:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 80073a0 <G_q+0x6db8>
 800710c:	ee27 5b05 	vmul.f64	d5, d7, d5
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8007110:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8007114:	ed93 7b02 	vldr	d7, [r3, #8]
 8007118:	ed9f 4ba3 	vldr	d4, [pc, #652]	; 80073a8 <G_q+0x6dc0>
 800711c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8007120:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007124:	ee36 6b47 	vsub.f64	d6, d6, d7
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8007128:	f241 3348 	movw	r3, #4936	; 0x1348
 800712c:	443b      	add	r3, r7
 800712e:	ed93 5b00 	vldr	d5, [r3]
 8007132:	f241 3368 	movw	r3, #4968	; 0x1368
 8007136:	443b      	add	r3, r7
 8007138:	ed93 7b00 	vldr	d7, [r3]
 800713c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007140:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007144:	ed93 4b00 	vldr	d4, [r3]
 8007148:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800714c:	ed93 7b00 	vldr	d7, [r3]
 8007150:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007154:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007158:	ee36 6b47 	vsub.f64	d6, d6, d7
             t16_im)) + (t34_re * t13_re - t34_im * t13_im);
 800715c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007160:	443b      	add	r3, r7
 8007162:	ed93 5b00 	vldr	d5, [r3]
 8007166:	f241 3378 	movw	r3, #4984	; 0x1378
 800716a:	443b      	add	r3, r7
 800716c:	ed93 7b00 	vldr	d7, [r3]
 8007170:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007174:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007178:	443b      	add	r3, r7
 800717a:	ed93 4b00 	vldr	d4, [r3]
 800717e:	f241 3370 	movw	r3, #4976	; 0x1370
 8007182:	443b      	add	r3, r7
 8007184:	ed93 7b00 	vldr	d7, [r3]
 8007188:	ee24 7b07 	vmul.f64	d7, d4, d7
 800718c:	ee35 7b47 	vsub.f64	d7, d5, d7
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8007190:	f241 2350 	movw	r3, #4688	; 0x1250
 8007194:	443b      	add	r3, r7
 8007196:	ee36 7b07 	vadd.f64	d7, d6, d7
 800719a:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 800719e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80071a2:	ed93 7b00 	vldr	d7, [r3]
 80071a6:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80073a8 <G_q+0x6dc0>
 80071aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80071ae:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80071b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80071b6:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 80073a0 <G_q+0x6db8>
 80071ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80071c2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80071c6:	ed93 7b00 	vldr	d7, [r3]
 80071ca:	ed9f 5b77 	vldr	d5, [pc, #476]	; 80073a8 <G_q+0x6dc0>
 80071ce:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80071d2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80071d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80071da:	ed9f 4b71 	vldr	d4, [pc, #452]	; 80073a0 <G_q+0x6db8>
 80071de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80071e2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 80071e6:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80071ea:	f241 3348 	movw	r3, #4936	; 0x1348
 80071ee:	443b      	add	r3, r7
 80071f0:	ed93 5b00 	vldr	d5, [r3]
 80071f4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80071f8:	ed93 7b00 	vldr	d7, [r3]
 80071fc:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 8007200:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007204:	ed93 4b00 	vldr	d4, [r3]
 8007208:	f241 3368 	movw	r3, #4968	; 0x1368
 800720c:	443b      	add	r3, r7
 800720e:	ed93 7b00 	vldr	d7, [r3]
 8007212:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 8007216:	ee35 7b07 	vadd.f64	d7, d5, d7
 800721a:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 800721e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007222:	443b      	add	r3, r7
 8007224:	ed93 5b00 	vldr	d5, [r3]
 8007228:	f241 3370 	movw	r3, #4976	; 0x1370
 800722c:	443b      	add	r3, r7
 800722e:	ed93 7b00 	vldr	d7, [r3]
 8007232:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007236:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800723a:	443b      	add	r3, r7
 800723c:	ed93 4b00 	vldr	d4, [r3]
 8007240:	f241 3378 	movw	r3, #4984	; 0x1378
 8007244:	443b      	add	r3, r7
 8007246:	ed93 7b00 	vldr	d7, [r3]
 800724a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800724e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8007252:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007256:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800725a:	ed83 7b00 	vstr	d7, [r3]
  if (t78.im == 0.0) {
 800725e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007262:	ed93 7b02 	vldr	d7, [r3, #8]
 8007266:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726e:	d116      	bne.n	800729e <G_q+0x6cb6>
    t16_re = t78.re / 2.0;
 8007270:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8007274:	ed93 6b00 	vldr	d6, [r3]
 8007278:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800727c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007280:	f241 3368 	movw	r3, #4968	; 0x1368
 8007284:	443b      	add	r3, r7
 8007286:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800728a:	f04f 0300 	mov.w	r3, #0
 800728e:	f04f 0400 	mov.w	r4, #0
 8007292:	f241 3288 	movw	r2, #5000	; 0x1388
 8007296:	443a      	add	r2, r7
 8007298:	e9c2 3400 	strd	r3, r4, [r2]
 800729c:	e039      	b.n	8007312 <G_q+0x6d2a>
  } else if (t78.re == 0.0) {
 800729e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80072a2:	ed93 7b00 	vldr	d7, [r3]
 80072a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072ae:	d116      	bne.n	80072de <G_q+0x6cf6>
    t16_re = 0.0;
 80072b0:	f04f 0300 	mov.w	r3, #0
 80072b4:	f04f 0400 	mov.w	r4, #0
 80072b8:	f241 3268 	movw	r2, #4968	; 0x1368
 80072bc:	443a      	add	r2, r7
 80072be:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t78.im / 2.0;
 80072c2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80072c6:	ed93 6b02 	vldr	d6, [r3, #8]
 80072ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80072ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80072d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072d6:	443b      	add	r3, r7
 80072d8:	ed83 7b00 	vstr	d7, [r3]
 80072dc:	e019      	b.n	8007312 <G_q+0x6d2a>
  } else {
    t16_re = t78.re / 2.0;
 80072de:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80072e2:	ed93 6b00 	vldr	d6, [r3]
 80072e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80072ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80072ee:	f241 3368 	movw	r3, #4968	; 0x1368
 80072f2:	443b      	add	r3, r7
 80072f4:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t78.im / 2.0;
 80072f8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80072fc:	ed93 6b02 	vldr	d6, [r3, #8]
 8007300:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007304:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007308:	f241 3388 	movw	r3, #5000	; 0x1388
 800730c:	443b      	add	r3, r7
 800730e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t79.im == 0.0) {
 8007312:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8007316:	ed93 7b02 	vldr	d7, [r3, #8]
 800731a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800731e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007322:	d116      	bne.n	8007352 <G_q+0x6d6a>
    t34_re = t79.re / 2.0;
 8007324:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8007328:	ed93 6b00 	vldr	d6, [r3]
 800732c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007330:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007334:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007338:	443b      	add	r3, r7
 800733a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	f04f 0400 	mov.w	r4, #0
 8007346:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800734a:	443a      	add	r2, r7
 800734c:	e9c2 3400 	strd	r3, r4, [r2]
 8007350:	e04a      	b.n	80073e8 <G_q+0x6e00>
  } else if (t79.re == 0.0) {
 8007352:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8007356:	ed93 7b00 	vldr	d7, [r3]
 800735a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800735e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007362:	d127      	bne.n	80073b4 <G_q+0x6dcc>
    t34_re = 0.0;
 8007364:	f04f 0300 	mov.w	r3, #0
 8007368:	f04f 0400 	mov.w	r4, #0
 800736c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007370:	443a      	add	r2, r7
 8007372:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t79.im / 2.0;
 8007376:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800737a:	ed93 6b02 	vldr	d6, [r3, #8]
 800737e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007382:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007386:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800738a:	443b      	add	r3, r7
 800738c:	ed83 7b00 	vstr	d7, [r3]
 8007390:	e02a      	b.n	80073e8 <G_q+0x6e00>
 8007392:	bf00      	nop
 8007394:	f3af 8000 	nop.w
 8007398:	33145c07 	.word	0x33145c07
 800739c:	3c81a626 	.word	0x3c81a626
	...
 80073a8:	33145c07 	.word	0x33145c07
 80073ac:	3c91a626 	.word	0x3c91a626
 80073b0:	ffffedb0 	.word	0xffffedb0
  } else {
    t34_re = t79.re / 2.0;
 80073b4:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80073b8:	ed93 6b00 	vldr	d6, [r3]
 80073bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80073c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073c4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80073c8:	443b      	add	r3, r7
 80073ca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t79.im / 2.0;
 80073ce:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80073d2:	ed93 6b02 	vldr	d6, [r3, #8]
 80073d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80073da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80073de:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80073e2:	443b      	add	r3, r7
 80073e4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t80.im == 0.0) {
 80073e8:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80073ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80073f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80073f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f8:	d115      	bne.n	8007426 <G_q+0x6e3e>
    t16_im = t80.re / 2.0;
 80073fa:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80073fe:	ed93 6b00 	vldr	d6, [r3]
 8007402:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007406:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800740a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800740e:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8007412:	f04f 0300 	mov.w	r3, #0
 8007416:	f04f 0400 	mov.w	r4, #0
 800741a:	f241 3248 	movw	r2, #4936	; 0x1348
 800741e:	443a      	add	r2, r7
 8007420:	e9c2 3400 	strd	r3, r4, [r2]
 8007424:	e037      	b.n	8007496 <G_q+0x6eae>
  } else if (t80.re == 0.0) {
 8007426:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800742a:	ed93 7b00 	vldr	d7, [r3]
 800742e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007432:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007436:	d115      	bne.n	8007464 <G_q+0x6e7c>
    t16_im = 0.0;
 8007438:	f04f 0300 	mov.w	r3, #0
 800743c:	f04f 0400 	mov.w	r4, #0
 8007440:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007444:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t80.im / 2.0;
 8007448:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800744c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007450:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007454:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007458:	f241 3348 	movw	r3, #4936	; 0x1348
 800745c:	443b      	add	r3, r7
 800745e:	ed83 7b00 	vstr	d7, [r3]
 8007462:	e018      	b.n	8007496 <G_q+0x6eae>
  } else {
    t16_im = t80.re / 2.0;
 8007464:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8007468:	ed93 6b00 	vldr	d6, [r3]
 800746c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007470:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007474:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007478:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t80.im / 2.0;
 800747c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8007480:	ed93 6b02 	vldr	d6, [r3, #8]
 8007484:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007488:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800748c:	f241 3348 	movw	r3, #4936	; 0x1348
 8007490:	443b      	add	r3, r7
 8007492:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t81.im == 0.0) {
 8007496:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800749a:	ed93 7b02 	vldr	d7, [r3, #8]
 800749e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074a6:	d116      	bne.n	80074d6 <G_q+0x6eee>
    t13_re = t81.re / 2.0;
 80074a8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80074ac:	ed93 6b00 	vldr	d6, [r3]
 80074b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80074b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074b8:	f241 3378 	movw	r3, #4984	; 0x1378
 80074bc:	443b      	add	r3, r7
 80074be:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80074c2:	f04f 0300 	mov.w	r3, #0
 80074c6:	f04f 0400 	mov.w	r4, #0
 80074ca:	f241 3270 	movw	r2, #4976	; 0x1370
 80074ce:	443a      	add	r2, r7
 80074d0:	e9c2 3400 	strd	r3, r4, [r2]
 80074d4:	e039      	b.n	800754a <G_q+0x6f62>
  } else if (t81.re == 0.0) {
 80074d6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80074da:	ed93 7b00 	vldr	d7, [r3]
 80074de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80074e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e6:	d116      	bne.n	8007516 <G_q+0x6f2e>
    t13_re = 0.0;
 80074e8:	f04f 0300 	mov.w	r3, #0
 80074ec:	f04f 0400 	mov.w	r4, #0
 80074f0:	f241 3278 	movw	r2, #4984	; 0x1378
 80074f4:	443a      	add	r2, r7
 80074f6:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t81.im / 2.0;
 80074fa:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80074fe:	ed93 6b02 	vldr	d6, [r3, #8]
 8007502:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007506:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800750a:	f241 3370 	movw	r3, #4976	; 0x1370
 800750e:	443b      	add	r3, r7
 8007510:	ed83 7b00 	vstr	d7, [r3]
 8007514:	e019      	b.n	800754a <G_q+0x6f62>
  } else {
    t13_re = t81.re / 2.0;
 8007516:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800751a:	ed93 6b00 	vldr	d6, [r3]
 800751e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007522:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007526:	f241 3378 	movw	r3, #4984	; 0x1378
 800752a:	443b      	add	r3, r7
 800752c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t81.im / 2.0;
 8007530:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8007534:	ed93 6b02 	vldr	d6, [r3, #8]
 8007538:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800753c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007540:	f241 3370 	movw	r3, #4976	; 0x1370
 8007544:	443b      	add	r3, r7
 8007546:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 800754a:	f241 3368 	movw	r3, #4968	; 0x1368
 800754e:	443b      	add	r3, r7
 8007550:	ed93 6b00 	vldr	d6, [r3]
 8007554:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007558:	443b      	add	r3, r7
 800755a:	ed93 7b00 	vldr	d7, [r3]
 800755e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007562:	f241 3368 	movw	r3, #4968	; 0x1368
 8007566:	443b      	add	r3, r7
 8007568:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800756c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007570:	443b      	add	r3, r7
 8007572:	ed93 6b00 	vldr	d6, [r3]
 8007576:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800757a:	443b      	add	r3, r7
 800757c:	ed93 7b00 	vldr	d7, [r3]
 8007580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007584:	f241 3388 	movw	r3, #5000	; 0x1388
 8007588:	443b      	add	r3, r7
 800758a:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t13_re;
 800758e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007592:	ed93 6b00 	vldr	d6, [r3]
 8007596:	f241 3378 	movw	r3, #4984	; 0x1378
 800759a:	443b      	add	r3, r7
 800759c:	ed93 7b00 	vldr	d7, [r3]
 80075a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075a4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80075a8:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t13_im;
 80075ac:	f241 3348 	movw	r3, #4936	; 0x1348
 80075b0:	443b      	add	r3, r7
 80075b2:	ed93 6b00 	vldr	d6, [r3]
 80075b6:	f241 3370 	movw	r3, #4976	; 0x1370
 80075ba:	443b      	add	r3, r7
 80075bc:	ed93 7b00 	vldr	d7, [r3]
 80075c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80075c4:	f241 3348 	movw	r3, #4936	; 0x1348
 80075c8:	443b      	add	r3, r7
 80075ca:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t83.re * 0.0 - t83.im * 0.5) - (t82.re * 0.0 - t82.im * 0.5);
 80075ce:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80075d2:	ed93 7b00 	vldr	d7, [r3]
 80075d6:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8007988 <G_q+0x73a0>
 80075da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80075de:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80075e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80075e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80075ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80075ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075f2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80075f6:	ed93 7b00 	vldr	d7, [r3]
 80075fa:	ed9f 5be3 	vldr	d5, [pc, #908]	; 8007988 <G_q+0x73a0>
 80075fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007602:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8007606:	ed93 7b02 	vldr	d7, [r3, #8]
 800760a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800760e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007612:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007616:	ee36 7b47 	vsub.f64	d7, d6, d7
 800761a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800761e:	443b      	add	r3, r7
 8007620:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t83.re * 0.5 + t83.im * 0.0) - (t82.re * 0.5 + t82.im * 0.0);
 8007624:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007628:	ed93 7b00 	vldr	d7, [r3]
 800762c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007630:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007634:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007638:	ed93 7b02 	vldr	d7, [r3, #8]
 800763c:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 8007988 <G_q+0x73a0>
 8007640:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007644:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007648:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800764c:	ed93 7b00 	vldr	d7, [r3]
 8007650:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007654:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007658:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800765c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007660:	ed9f 4bc9 	vldr	d4, [pc, #804]	; 8007988 <G_q+0x73a0>
 8007664:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007668:	ee35 7b07 	vadd.f64	d7, d5, d7
 800766c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007670:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007674:	443b      	add	r3, r7
 8007676:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t85.re * 0.0 - t85.im * 0.5) - (t84.re * 0.0 - t84.im * 0.5);
 800767a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800767e:	ed93 7b00 	vldr	d7, [r3]
 8007682:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8007988 <G_q+0x73a0>
 8007686:	ee27 6b06 	vmul.f64	d6, d7, d6
 800768a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800768e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007692:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007696:	ee27 7b05 	vmul.f64	d7, d7, d5
 800769a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800769e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80076a2:	ed93 7b00 	vldr	d7, [r3]
 80076a6:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 8007988 <G_q+0x73a0>
 80076aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80076ae:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80076b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80076b6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80076ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076be:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076c6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80076ca:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t85.re * 0.5 + t85.im * 0.0) - (t84.re * 0.5 + t84.im * 0.0);
 80076ce:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80076d2:	ed93 7b00 	vldr	d7, [r3]
 80076d6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80076da:	ee27 6b06 	vmul.f64	d6, d7, d6
 80076de:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80076e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80076e6:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8007988 <G_q+0x73a0>
 80076ea:	ee27 7b05 	vmul.f64	d7, d7, d5
 80076ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 80076f2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80076f6:	ed93 7b00 	vldr	d7, [r3]
 80076fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80076fe:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007702:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8007706:	ed93 7b02 	vldr	d7, [r3, #8]
 800770a:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 8007988 <G_q+0x73a0>
 800770e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007712:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007716:	ee36 7b47 	vsub.f64	d7, d6, d7
 800771a:	f241 3318 	movw	r3, #4888	; 0x1318
 800771e:	443b      	add	r3, r7
 8007720:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t16_re * t16_im - t12_re * t20_re) + (t34_re * t12_im - t34_im *
 8007724:	f241 3368 	movw	r3, #4968	; 0x1368
 8007728:	443b      	add	r3, r7
 800772a:	ed93 6b00 	vldr	d6, [r3]
 800772e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007732:	ed93 7b00 	vldr	d7, [r3]
 8007736:	ee26 6b07 	vmul.f64	d6, d6, d7
 800773a:	f241 3388 	movw	r3, #5000	; 0x1388
 800773e:	443b      	add	r3, r7
 8007740:	ed93 5b00 	vldr	d5, [r3]
 8007744:	f241 3348 	movw	r3, #4936	; 0x1348
 8007748:	443b      	add	r3, r7
 800774a:	ed93 7b00 	vldr	d7, [r3]
 800774e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007752:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007756:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800775a:	443b      	add	r3, r7
 800775c:	ed93 5b00 	vldr	d5, [r3]
 8007760:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007764:	ed93 7b00 	vldr	d7, [r3]
 8007768:	ee25 5b07 	vmul.f64	d5, d5, d7
 800776c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007770:	443b      	add	r3, r7
 8007772:	ed93 4b00 	vldr	d4, [r3]
 8007776:	f241 3318 	movw	r3, #4888	; 0x1318
 800777a:	443b      	add	r3, r7
 800777c:	ed93 7b00 	vldr	d7, [r3]
 8007780:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007784:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007788:	ee36 7b07 	vadd.f64	d7, d6, d7
 800778c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007790:	443b      	add	r3, r7
 8007792:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t12_re = (t16_re * t20_re + t12_re * t16_im) + (t34_re * t85_im + t34_im *
 8007796:	f241 3368 	movw	r3, #4968	; 0x1368
 800779a:	443b      	add	r3, r7
 800779c:	ed93 6b00 	vldr	d6, [r3]
 80077a0:	f241 3348 	movw	r3, #4936	; 0x1348
 80077a4:	443b      	add	r3, r7
 80077a6:	ed93 7b00 	vldr	d7, [r3]
 80077aa:	ee26 6b07 	vmul.f64	d6, d6, d7
 80077ae:	f241 3388 	movw	r3, #5000	; 0x1388
 80077b2:	443b      	add	r3, r7
 80077b4:	ed93 5b00 	vldr	d5, [r3]
 80077b8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80077bc:	ed93 7b00 	vldr	d7, [r3]
 80077c0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80077c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80077c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80077cc:	443b      	add	r3, r7
 80077ce:	ed93 5b00 	vldr	d5, [r3]
 80077d2:	f241 3318 	movw	r3, #4888	; 0x1318
 80077d6:	443b      	add	r3, r7
 80077d8:	ed93 7b00 	vldr	d7, [r3]
 80077dc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80077e0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80077e4:	443b      	add	r3, r7
 80077e6:	ed93 4b00 	vldr	d4, [r3]
 80077ea:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80077ee:	ed93 7b00 	vldr	d7, [r3]
 80077f2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80077f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80077fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80077fe:	f241 3388 	movw	r3, #5000	; 0x1388
 8007802:	443b      	add	r3, r7
 8007804:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8007808:	4b65      	ldr	r3, [pc, #404]	; (80079a0 <G_q+0x73b8>)
 800780a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800780e:	443a      	add	r2, r7
 8007810:	4413      	add	r3, r2
 8007812:	ed93 7b02 	vldr	d7, [r3, #8]
 8007816:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8007990 <G_q+0x73a8>
 800781a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800781e:	f241 2370 	movw	r3, #4720	; 0x1270
 8007822:	443b      	add	r3, r7
 8007824:	ed93 6b00 	vldr	d6, [r3]
 8007828:	ee36 6b47 	vsub.f64	d6, d6, d7
 800782c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007830:	ed93 7b00 	vldr	d7, [r3]
 8007834:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8007988 <G_q+0x73a0>
 8007838:	ee27 5b05 	vmul.f64	d5, d7, d5
    t86.im * 3.061616997868383E-17);
 800783c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007840:	ed93 7b02 	vldr	d7, [r3, #8]
 8007844:	ed9f 4b52 	vldr	d4, [pc, #328]	; 8007990 <G_q+0x73a8>
 8007848:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 800784c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007850:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007854:	f241 3378 	movw	r3, #4984	; 0x1378
 8007858:	443b      	add	r3, r7
 800785a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 800785e:	4b50      	ldr	r3, [pc, #320]	; (80079a0 <G_q+0x73b8>)
 8007860:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007864:	443a      	add	r2, r7
 8007866:	4413      	add	r3, r2
 8007868:	ed93 7b00 	vldr	d7, [r3]
 800786c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8007990 <G_q+0x73a8>
 8007870:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007874:	f241 2368 	movw	r3, #4712	; 0x1268
 8007878:	443b      	add	r3, r7
 800787a:	ed93 7b00 	vldr	d7, [r3]
 800787e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007882:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007886:	ed93 7b00 	vldr	d7, [r3]
 800788a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8007990 <G_q+0x73a8>
 800788e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t86.im * 0.0);
 8007892:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8007896:	ed93 7b02 	vldr	d7, [r3, #8]
 800789a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8007988 <G_q+0x73a0>
 800789e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80078a2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 80078a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80078aa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80078ae:	443b      	add	r3, r7
 80078b0:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t55_re;
 80078b4:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80078b8:	443b      	add	r3, r7
 80078ba:	ed93 6b00 	vldr	d6, [r3]
 80078be:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80078c2:	ed93 7b00 	vldr	d7, [r3]
 80078c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80078ca:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80078ce:	443b      	add	r3, r7
 80078d0:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t55_im;
 80078d4:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80078d8:	443b      	add	r3, r7
 80078da:	ed93 6b00 	vldr	d6, [r3]
 80078de:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80078e2:	443b      	add	r3, r7
 80078e4:	ed93 7b00 	vldr	d7, [r3]
 80078e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80078ec:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80078f0:	443b      	add	r3, r7
 80078f2:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 80078f6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80078fa:	ed93 7b00 	vldr	d7, [r3]
 80078fe:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8007988 <G_q+0x73a0>
 8007902:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007906:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800790a:	ed93 7b02 	vldr	d7, [r3, #8]
 800790e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8007998 <G_q+0x73b0>
 8007912:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007916:	ee36 6b47 	vsub.f64	d6, d6, d7
 800791a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800791e:	ed93 7b00 	vldr	d7, [r3]
 8007922:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8007988 <G_q+0x73a0>
 8007926:	ee27 5b05 	vmul.f64	d5, d7, d5
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 800792a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800792e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007932:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8007998 <G_q+0x73b0>
 8007936:	ee27 7b04 	vmul.f64	d7, d7, d4
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 800793a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800793e:	ee36 6b47 	vsub.f64	d6, d6, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8007942:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8007946:	443a      	add	r2, r7
 8007948:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800794c:	ed92 5b00 	vldr	d5, [r2]
 8007950:	ed93 7b00 	vldr	d7, [r3]
 8007954:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007958:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800795c:	443b      	add	r3, r7
 800795e:	ed93 4b00 	vldr	d4, [r3]
 8007962:	f241 3338 	movw	r3, #4920	; 0x1338
 8007966:	443b      	add	r3, r7
 8007968:	ed93 7b00 	vldr	d7, [r3]
 800796c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007970:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007974:	ee36 6b07 	vadd.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8007978:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800797c:	443a      	add	r2, r7
 800797e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8007982:	443b      	add	r3, r7
 8007984:	e00e      	b.n	80079a4 <G_q+0x73bc>
 8007986:	bf00      	nop
	...
 8007990:	33145c07 	.word	0x33145c07
 8007994:	3c81a626 	.word	0x3c81a626
 8007998:	858a5d48 	.word	0x858a5d48
 800799c:	393377ce 	.word	0x393377ce
 80079a0:	ffffedd0 	.word	0xffffedd0
 80079a4:	ed92 5b00 	vldr	d5, [r2]
 80079a8:	ed93 7b00 	vldr	d7, [r3]
 80079ac:	ee25 5b07 	vmul.f64	d5, d5, d7
 80079b0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80079b4:	443b      	add	r3, r7
 80079b6:	ed93 4b00 	vldr	d4, [r3]
 80079ba:	f241 3310 	movw	r3, #4880	; 0x1310
 80079be:	443b      	add	r3, r7
 80079c0:	ed93 7b00 	vldr	d7, [r3]
 80079c4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80079c8:	ee35 7b47 	vsub.f64	d7, d5, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 80079cc:	ee36 6b47 	vsub.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 80079d0:	f241 2350 	movw	r3, #4688	; 0x1250
 80079d4:	443b      	add	r3, r7
 80079d6:	f241 3230 	movw	r2, #4912	; 0x1330
 80079da:	443a      	add	r2, r7
 80079dc:	ed92 5b00 	vldr	d5, [r2]
 80079e0:	ed93 7b00 	vldr	d7, [r3]
 80079e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80079e8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80079ec:	ed93 4b00 	vldr	d4, [r3]
 80079f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80079f4:	ed93 7b00 	vldr	d7, [r3]
 80079f8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80079fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a00:	ee36 6b07 	vadd.f64	d6, d6, d7
             t20_im)) + (t13_im * t13_re - t12_re * t34_re);
 8007a04:	f241 3370 	movw	r3, #4976	; 0x1370
 8007a08:	443b      	add	r3, r7
 8007a0a:	ed93 5b00 	vldr	d5, [r3]
 8007a0e:	f241 3378 	movw	r3, #4984	; 0x1378
 8007a12:	443b      	add	r3, r7
 8007a14:	ed93 7b00 	vldr	d7, [r3]
 8007a18:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007a1c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007a20:	443b      	add	r3, r7
 8007a22:	ed93 4b00 	vldr	d4, [r3]
 8007a26:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007a2a:	443b      	add	r3, r7
 8007a2c:	ed93 7b00 	vldr	d7, [r3]
 8007a30:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007a34:	ee35 7b47 	vsub.f64	d7, d5, d7
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8007a38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007a3c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007a40:	443b      	add	r3, r7
 8007a42:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8007a46:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8007a4a:	ed93 7b00 	vldr	d7, [r3]
 8007a4e:	ed9f 6be8 	vldr	d6, [pc, #928]	; 8007df0 <G_q+0x7808>
 8007a52:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007a56:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8007a5a:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a5e:	ed9f 5be6 	vldr	d5, [pc, #920]	; 8007df8 <G_q+0x7810>
 8007a62:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007a66:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007a6a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8007a6e:	ed93 7b00 	vldr	d7, [r3]
 8007a72:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8007df0 <G_q+0x7808>
 8007a76:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8007a7a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8007a7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a82:	ed9f 4bdd 	vldr	d4, [pc, #884]	; 8007df8 <G_q+0x7810>
 8007a86:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a8a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8007a8e:	ee36 6b47 	vsub.f64	d6, d6, d7
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8007a92:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8007a96:	443b      	add	r3, r7
 8007a98:	ed93 5b00 	vldr	d5, [r3]
 8007a9c:	f241 3338 	movw	r3, #4920	; 0x1338
 8007aa0:	443b      	add	r3, r7
 8007aa2:	ed93 7b00 	vldr	d7, [r3]
 8007aa6:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007aaa:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8007aae:	443a      	add	r2, r7
 8007ab0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8007ab4:	ed92 4b00 	vldr	d4, [r2]
 8007ab8:	ed93 7b00 	vldr	d7, [r3]
 8007abc:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007ac0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007ac4:	ee36 6b07 	vadd.f64	d6, d6, d7
    t72_re)) - (t74_re * t3_im + t74_im * t76_re)) + (t23_re * t20_im + t58_im *
 8007ac8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8007acc:	443b      	add	r3, r7
 8007ace:	ed93 5b00 	vldr	d5, [r3]
 8007ad2:	f241 3310 	movw	r3, #4880	; 0x1310
 8007ad6:	443b      	add	r3, r7
 8007ad8:	ed93 7b00 	vldr	d7, [r3]
 8007adc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007ae0:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8007ae4:	443a      	add	r2, r7
 8007ae6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8007aea:	443b      	add	r3, r7
 8007aec:	ed92 4b00 	vldr	d4, [r2]
 8007af0:	ed93 7b00 	vldr	d7, [r3]
 8007af4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007af8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007afc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007b00:	f241 3330 	movw	r3, #4912	; 0x1330
 8007b04:	443b      	add	r3, r7
 8007b06:	ed93 5b00 	vldr	d5, [r3]
 8007b0a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007b0e:	ed93 7b00 	vldr	d7, [r3]
 8007b12:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007b16:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8007b1a:	f241 2350 	movw	r3, #4688	; 0x1250
 8007b1e:	443b      	add	r3, r7
 8007b20:	ed92 4b00 	vldr	d4, [r2]
 8007b24:	ed93 7b00 	vldr	d7, [r3]
 8007b28:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007b2c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007b30:	ee36 6b07 	vadd.f64	d6, d6, d7
             t60_re)) + (t13_im * t34_re + t12_re * t13_re);
 8007b34:	f241 3370 	movw	r3, #4976	; 0x1370
 8007b38:	443b      	add	r3, r7
 8007b3a:	ed93 5b00 	vldr	d5, [r3]
 8007b3e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b42:	443b      	add	r3, r7
 8007b44:	ed93 7b00 	vldr	d7, [r3]
 8007b48:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007b4c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007b50:	443b      	add	r3, r7
 8007b52:	ed93 4b00 	vldr	d4, [r3]
 8007b56:	f241 3378 	movw	r3, #4984	; 0x1378
 8007b5a:	443b      	add	r3, r7
 8007b5c:	ed93 7b00 	vldr	d7, [r3]
 8007b60:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007b64:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8007b68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007b6c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b70:	443b      	add	r3, r7
 8007b72:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8007b76:	4bae      	ldr	r3, [pc, #696]	; (8007e30 <G_q+0x7848>)
 8007b78:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007b7c:	443a      	add	r2, r7
 8007b7e:	4413      	add	r3, r2
 8007b80:	ed93 7b00 	vldr	d7, [r3]
 8007b84:	eeb1 6b47 	vneg.f64	d6, d7
 8007b88:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007b8c:	ed93 7b00 	vldr	d7, [r3]
 8007b90:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8007e00 <G_q+0x7818>
 8007b94:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007b98:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007b9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ba0:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8007e08 <G_q+0x7820>
 8007ba4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ba8:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8007bac:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007bb0:	ed93 7b00 	vldr	d7, [r3]
 8007bb4:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8007e00 <G_q+0x7818>
 8007bb8:	ee27 4b04 	vmul.f64	d4, d7, d4
 8007bbc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007bc0:	ed93 7b02 	vldr	d7, [r3, #8]
 8007bc4:	ed9f 3b90 	vldr	d3, [pc, #576]	; 8007e08 <G_q+0x7820>
 8007bc8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007bcc:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8007bd0:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8007bd4:	f241 2398 	movw	r3, #4760	; 0x1298
 8007bd8:	443b      	add	r3, r7
 8007bda:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8007bde:	443a      	add	r2, r7
 8007be0:	ed92 4b00 	vldr	d4, [r2]
 8007be4:	ed93 7b00 	vldr	d7, [r3]
 8007be8:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8007bec:	f241 2390 	movw	r3, #4752	; 0x1290
 8007bf0:	443b      	add	r3, r7
 8007bf2:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007bf6:	ed92 3b00 	vldr	d3, [r2]
 8007bfa:	ed93 7b00 	vldr	d7, [r3]
 8007bfe:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8007c02:	ee34 7b47 	vsub.f64	d7, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8007c06:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8007e10 <G_q+0x7828>
 8007c0a:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8007c0e:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8007c12:	f241 2388 	movw	r3, #4744	; 0x1288
 8007c16:	443b      	add	r3, r7
 8007c18:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8007c1c:	443a      	add	r2, r7
 8007c1e:	ed92 4b00 	vldr	d4, [r2]
 8007c22:	ed93 7b00 	vldr	d7, [r3]
 8007c26:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007c2a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8007c2e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8007c32:	ed92 3b00 	vldr	d3, [r2]
 8007c36:	ed93 7b00 	vldr	d7, [r3]
 8007c3a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007c3e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8007c42:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8007e10 <G_q+0x7828>
 8007c46:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c4a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8007c4e:	f241 3328 	movw	r3, #4904	; 0x1328
 8007c52:	443b      	add	r3, r7
 8007c54:	ed93 4b00 	vldr	d4, [r3]
 8007c58:	f241 3398 	movw	r3, #5016	; 0x1398
 8007c5c:	443b      	add	r3, r7
 8007c5e:	ed93 7b00 	vldr	d7, [r3]
 8007c62:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007c66:	f241 2378 	movw	r3, #4728	; 0x1278
 8007c6a:	443b      	add	r3, r7
 8007c6c:	ed93 3b00 	vldr	d3, [r3]
 8007c70:	f241 3390 	movw	r3, #5008	; 0x1390
 8007c74:	443b      	add	r3, r7
 8007c76:	ed93 7b00 	vldr	d7, [r3]
 8007c7a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007c7e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8007c82:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8007e18 <G_q+0x7830>
 8007c86:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8007c8a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8007c8e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8007c92:	f241 3258 	movw	r2, #4952	; 0x1358
 8007c96:	443a      	add	r2, r7
 8007c98:	ed92 4b00 	vldr	d4, [r2]
 8007c9c:	ed93 7b00 	vldr	d7, [r3]
 8007ca0:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007ca4:	f241 3350 	movw	r3, #4944	; 0x1350
 8007ca8:	443b      	add	r3, r7
 8007caa:	ed93 3b00 	vldr	d3, [r3]
 8007cae:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007cb2:	ed93 7b00 	vldr	d7, [r3]
 8007cb6:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007cba:	ee34 7b47 	vsub.f64	d7, d4, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8007cbe:	ed9f 4b58 	vldr	d4, [pc, #352]	; 8007e20 <G_q+0x7838>
 8007cc2:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8007cc6:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8007cca:	f241 2358 	movw	r3, #4696	; 0x1258
 8007cce:	443b      	add	r3, r7
 8007cd0:	f241 3208 	movw	r2, #4872	; 0x1308
 8007cd4:	443a      	add	r2, r7
 8007cd6:	ed92 4b00 	vldr	d4, [r2]
 8007cda:	ed93 7b00 	vldr	d7, [r3]
 8007cde:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007ce2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8007ce6:	ed93 3b00 	vldr	d3, [r3]
 8007cea:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8007cee:	443b      	add	r3, r7
 8007cf0:	ed93 7b00 	vldr	d7, [r3]
 8007cf4:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007cf8:	ee34 7b47 	vsub.f64	d7, d4, d7
 8007cfc:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8007e20 <G_q+0x7838>
 8007d00:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d04:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8007d08:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8007d0c:	443b      	add	r3, r7
 8007d0e:	ed93 4b00 	vldr	d4, [r3]
 8007d12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007d16:	443b      	add	r3, r7
 8007d18:	ed93 7b00 	vldr	d7, [r3]
 8007d1c:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007d20:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8007d24:	443b      	add	r3, r7
 8007d26:	ed93 3b00 	vldr	d3, [r3]
 8007d2a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007d2e:	443b      	add	r3, r7
 8007d30:	ed93 7b00 	vldr	d7, [r3]
 8007d34:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007d38:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_re) * 0.0215);
 8007d3c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8007e18 <G_q+0x7830>
 8007d40:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8007d44:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8007d48:	4b3a      	ldr	r3, [pc, #232]	; (8007e34 <G_q+0x784c>)
 8007d4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007d4e:	443a      	add	r2, r7
 8007d50:	4413      	add	r3, r2
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3310      	adds	r3, #16
 8007d56:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007d5a:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8007d5e:	4b34      	ldr	r3, [pc, #208]	; (8007e30 <G_q+0x7848>)
 8007d60:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007d64:	443a      	add	r2, r7
 8007d66:	4413      	add	r3, r2
 8007d68:	ed93 7b00 	vldr	d7, [r3]
 8007d6c:	eeb1 6b47 	vneg.f64	d6, d7
 8007d70:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007d74:	ed93 7b00 	vldr	d7, [r3]
 8007d78:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8007e08 <G_q+0x7820>
 8007d7c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007d80:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007d84:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d88:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8007e00 <G_q+0x7818>
 8007d8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007d90:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8007d94:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007d98:	ed93 7b00 	vldr	d7, [r3]
 8007d9c:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8007e28 <G_q+0x7840>
 8007da0:	ee27 4b04 	vmul.f64	d4, d7, d4
 8007da4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8007da8:	ed93 7b02 	vldr	d7, [r3, #8]
 8007dac:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8007e00 <G_q+0x7818>
 8007db0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007db4:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8007db8:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8007dbc:	f241 2390 	movw	r3, #4752	; 0x1290
 8007dc0:	443b      	add	r3, r7
 8007dc2:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8007dc6:	443a      	add	r2, r7
 8007dc8:	ed92 4b00 	vldr	d4, [r2]
 8007dcc:	ed93 7b00 	vldr	d7, [r3]
 8007dd0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8007dd4:	f241 2398 	movw	r3, #4760	; 0x1298
 8007dd8:	443b      	add	r3, r7
 8007dda:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8007dde:	ed92 3b00 	vldr	d3, [r2]
 8007de2:	ed93 7b00 	vldr	d7, [r3]
 8007de6:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8007dea:	ee34 7b07 	vadd.f64	d7, d4, d7
 8007dee:	e023      	b.n	8007e38 <G_q+0x7850>
 8007df0:	858a5d48 	.word	0x858a5d48
 8007df4:	393377ce 	.word	0x393377ce
	...
 8007e00:	2b020c4a 	.word	0x2b020c4a
 8007e04:	3fc11687 	.word	0x3fc11687
 8007e08:	558ec760 	.word	0x558ec760
 8007e0c:	3c5621c2 	.word	0x3c5621c2
 8007e10:	75f6fd22 	.word	0x75f6fd22
 8007e14:	3fc19ce0 	.word	0x3fc19ce0
 8007e18:	9374bc6a 	.word	0x9374bc6a
 8007e1c:	3f960418 	.word	0x3f960418
 8007e20:	2ba953a1 	.word	0x2ba953a1
 8007e24:	3c3848f9 	.word	0x3c3848f9
 8007e28:	558ec760 	.word	0x558ec760
 8007e2c:	bc5621c2 	.word	0xbc5621c2
 8007e30:	ffffec58 	.word	0xffffec58
 8007e34:	ffffec34 	.word	0xffffec34
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8007e38:	ed9f 4ba1 	vldr	d4, [pc, #644]	; 80080c0 <G_q+0x7ad8>
 8007e3c:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8007e40:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8007e44:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8007e48:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8007e4c:	443a      	add	r2, r7
 8007e4e:	ed92 4b00 	vldr	d4, [r2]
 8007e52:	ed93 7b00 	vldr	d7, [r3]
 8007e56:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007e5a:	f241 2388 	movw	r3, #4744	; 0x1288
 8007e5e:	443b      	add	r3, r7
 8007e60:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8007e64:	ed92 3b00 	vldr	d3, [r2]
 8007e68:	ed93 7b00 	vldr	d7, [r3]
 8007e6c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007e70:	ee34 7b07 	vadd.f64	d7, d4, d7
 8007e74:	ed9f 4b92 	vldr	d4, [pc, #584]	; 80080c0 <G_q+0x7ad8>
 8007e78:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007e7c:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8007e80:	f241 3328 	movw	r3, #4904	; 0x1328
 8007e84:	443b      	add	r3, r7
 8007e86:	ed93 4b00 	vldr	d4, [r3]
 8007e8a:	f241 3390 	movw	r3, #5008	; 0x1390
 8007e8e:	443b      	add	r3, r7
 8007e90:	ed93 7b00 	vldr	d7, [r3]
 8007e94:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007e98:	f241 2378 	movw	r3, #4728	; 0x1278
 8007e9c:	443b      	add	r3, r7
 8007e9e:	ed93 3b00 	vldr	d3, [r3]
 8007ea2:	f241 3398 	movw	r3, #5016	; 0x1398
 8007ea6:	443b      	add	r3, r7
 8007ea8:	ed93 7b00 	vldr	d7, [r3]
 8007eac:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007eb0:	ee34 7b07 	vadd.f64	d7, d4, d7
 8007eb4:	ed9f 4b84 	vldr	d4, [pc, #528]	; 80080c8 <G_q+0x7ae0>
 8007eb8:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8007ebc:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8007ec0:	f241 3358 	movw	r3, #4952	; 0x1358
 8007ec4:	443b      	add	r3, r7
 8007ec6:	ed93 4b00 	vldr	d4, [r3]
 8007eca:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007ece:	ed93 7b00 	vldr	d7, [r3]
 8007ed2:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007ed6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8007eda:	f241 3250 	movw	r2, #4944	; 0x1350
 8007ede:	443a      	add	r2, r7
 8007ee0:	ed92 3b00 	vldr	d3, [r2]
 8007ee4:	ed93 7b00 	vldr	d7, [r3]
 8007ee8:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007eec:	ee34 7b07 	vadd.f64	d7, d4, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8007ef0:	ed9f 4b77 	vldr	d4, [pc, #476]	; 80080d0 <G_q+0x7ae8>
 8007ef4:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8007ef8:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8007efc:	f241 3308 	movw	r3, #4872	; 0x1308
 8007f00:	443b      	add	r3, r7
 8007f02:	ed93 4b00 	vldr	d4, [r3]
 8007f06:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8007f0a:	443b      	add	r3, r7
 8007f0c:	ed93 7b00 	vldr	d7, [r3]
 8007f10:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007f14:	f241 2358 	movw	r3, #4696	; 0x1258
 8007f18:	443b      	add	r3, r7
 8007f1a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8007f1e:	ed92 3b00 	vldr	d3, [r2]
 8007f22:	ed93 7b00 	vldr	d7, [r3]
 8007f26:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007f2a:	ee34 7b07 	vadd.f64	d7, d4, d7
 8007f2e:	ed9f 4b68 	vldr	d4, [pc, #416]	; 80080d0 <G_q+0x7ae8>
 8007f32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007f36:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8007f3a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8007f3e:	443b      	add	r3, r7
 8007f40:	ed93 4b00 	vldr	d4, [r3]
 8007f44:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007f48:	443b      	add	r3, r7
 8007f4a:	ed93 7b00 	vldr	d7, [r3]
 8007f4e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8007f52:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8007f56:	443b      	add	r3, r7
 8007f58:	ed93 3b00 	vldr	d3, [r3]
 8007f5c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007f60:	443b      	add	r3, r7
 8007f62:	ed93 7b00 	vldr	d7, [r3]
 8007f66:	ee23 7b07 	vmul.f64	d7, d3, d7
 8007f6a:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_im) * 0.0215);
 8007f6e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 80080c8 <G_q+0x7ae0>
 8007f72:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8007f76:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8007f7a:	4b57      	ldr	r3, [pc, #348]	; (80080d8 <G_q+0x7af0>)
 8007f7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007f80:	443a      	add	r2, r7
 8007f82:	4413      	add	r3, r2
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	3310      	adds	r3, #16
 8007f88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007f8c:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t154.im == 0.0) {
 8007f90:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8007f94:	ed93 7b02 	vldr	d7, [r3, #8]
 8007f98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fa0:	d115      	bne.n	8007fce <G_q+0x79e6>
    t8_im = t154.re / 2.0;
 8007fa2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8007fa6:	ed93 6b00 	vldr	d6, [r3]
 8007faa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007fae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007fb2:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007fb6:	ed83 7b00 	vstr	d7, [r3]
    t54_re = 0.0;
 8007fba:	f04f 0300 	mov.w	r3, #0
 8007fbe:	f04f 0400 	mov.w	r4, #0
 8007fc2:	f241 3228 	movw	r2, #4904	; 0x1328
 8007fc6:	443a      	add	r2, r7
 8007fc8:	e9c2 3400 	strd	r3, r4, [r2]
 8007fcc:	e037      	b.n	800803e <G_q+0x7a56>
  } else if (t154.re == 0.0) {
 8007fce:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8007fd2:	ed93 7b00 	vldr	d7, [r3]
 8007fd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fde:	d115      	bne.n	800800c <G_q+0x7a24>
    t8_im = 0.0;
 8007fe0:	f04f 0300 	mov.w	r3, #0
 8007fe4:	f04f 0400 	mov.w	r4, #0
 8007fe8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8007fec:	e9c2 3400 	strd	r3, r4, [r2]
    t54_re = t154.im / 2.0;
 8007ff0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8007ff4:	ed93 6b02 	vldr	d6, [r3, #8]
 8007ff8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ffc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008000:	f241 3328 	movw	r3, #4904	; 0x1328
 8008004:	443b      	add	r3, r7
 8008006:	ed83 7b00 	vstr	d7, [r3]
 800800a:	e018      	b.n	800803e <G_q+0x7a56>
  } else {
    t8_im = t154.re / 2.0;
 800800c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8008010:	ed93 6b00 	vldr	d6, [r3]
 8008014:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008018:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800801c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8008020:	ed83 7b00 	vstr	d7, [r3]
    t54_re = t154.im / 2.0;
 8008024:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8008028:	ed93 6b02 	vldr	d6, [r3, #8]
 800802c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008030:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008034:	f241 3328 	movw	r3, #4904	; 0x1328
 8008038:	443b      	add	r3, r7
 800803a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t155.im == 0.0) {
 800803e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8008042:	ed93 7b02 	vldr	d7, [r3, #8]
 8008046:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800804a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800804e:	d116      	bne.n	800807e <G_q+0x7a96>
    t34_re = t155.re / 2.0;
 8008050:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8008054:	ed93 6b00 	vldr	d6, [r3]
 8008058:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800805c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008060:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008064:	443b      	add	r3, r7
 8008066:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800806a:	f04f 0300 	mov.w	r3, #0
 800806e:	f04f 0400 	mov.w	r4, #0
 8008072:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008076:	443a      	add	r2, r7
 8008078:	e9c2 3400 	strd	r3, r4, [r2]
 800807c:	e048      	b.n	8008110 <G_q+0x7b28>
  } else if (t155.re == 0.0) {
 800807e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8008082:	ed93 7b00 	vldr	d7, [r3]
 8008086:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800808a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808e:	d125      	bne.n	80080dc <G_q+0x7af4>
    t34_re = 0.0;
 8008090:	f04f 0300 	mov.w	r3, #0
 8008094:	f04f 0400 	mov.w	r4, #0
 8008098:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800809c:	443a      	add	r2, r7
 800809e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t155.im / 2.0;
 80080a2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80080a6:	ed93 6b02 	vldr	d6, [r3, #8]
 80080aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080b2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80080b6:	443b      	add	r3, r7
 80080b8:	ed83 7b00 	vstr	d7, [r3]
 80080bc:	e028      	b.n	8008110 <G_q+0x7b28>
 80080be:	bf00      	nop
 80080c0:	75f6fd22 	.word	0x75f6fd22
 80080c4:	3fc19ce0 	.word	0x3fc19ce0
 80080c8:	9374bc6a 	.word	0x9374bc6a
 80080cc:	3f960418 	.word	0x3f960418
 80080d0:	2ba953a1 	.word	0x2ba953a1
 80080d4:	3c3848f9 	.word	0x3c3848f9
 80080d8:	ffffec34 	.word	0xffffec34
  } else {
    t34_re = t155.re / 2.0;
 80080dc:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80080e0:	ed93 6b00 	vldr	d6, [r3]
 80080e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080ec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80080f0:	443b      	add	r3, r7
 80080f2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t155.im / 2.0;
 80080f6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80080fa:	ed93 6b02 	vldr	d6, [r3, #8]
 80080fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008102:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008106:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800810a:	443b      	add	r3, r7
 800810c:	ed83 7b00 	vstr	d7, [r3]
  }

  t8_im += t34_re;
 8008110:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8008114:	ed93 6b00 	vldr	d6, [r3]
 8008118:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800811c:	443b      	add	r3, r7
 800811e:	ed93 7b00 	vldr	d7, [r3]
 8008122:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008126:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800812a:	ed83 7b00 	vstr	d7, [r3]
  t54_re += t34_im;
 800812e:	f241 3328 	movw	r3, #4904	; 0x1328
 8008132:	443b      	add	r3, r7
 8008134:	ed93 6b00 	vldr	d6, [r3]
 8008138:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800813c:	443b      	add	r3, r7
 800813e:	ed93 7b00 	vldr	d7, [r3]
 8008142:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008146:	f241 3328 	movw	r3, #4904	; 0x1328
 800814a:	443b      	add	r3, r7
 800814c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = (t156.re * 0.0 - t156.im * 0.5) - (t157.re * 0.0 - t157.im * 0.5);
 8008150:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8008154:	ed93 7b00 	vldr	d7, [r3]
 8008158:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8008440 <G_q+0x7e58>
 800815c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008160:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8008164:	ed93 7b02 	vldr	d7, [r3, #8]
 8008168:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800816c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008170:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008174:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8008178:	ed93 7b00 	vldr	d7, [r3]
 800817c:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 8008440 <G_q+0x7e58>
 8008180:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008184:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8008188:	ed93 7b02 	vldr	d7, [r3, #8]
 800818c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008190:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008194:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008198:	f241 2370 	movw	r3, #4720	; 0x1270
 800819c:	443b      	add	r3, r7
 800819e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081a2:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = (t156.re * 0.5 + t156.im * 0.0) - (t157.re * 0.5 + t157.im * 0.0);
 80081a6:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 80081aa:	ed93 7b00 	vldr	d7, [r3]
 80081ae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80081b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80081b6:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 80081ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80081be:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 8008440 <G_q+0x7e58>
 80081c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80081c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80081ca:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80081ce:	ed93 7b00 	vldr	d7, [r3]
 80081d2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80081da:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80081de:	ed93 7b02 	vldr	d7, [r3, #8]
 80081e2:	ed9f 4b97 	vldr	d4, [pc, #604]	; 8008440 <G_q+0x7e58>
 80081e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80081ea:	ee35 7b07 	vadd.f64	d7, d5, d7
 80081ee:	f241 2368 	movw	r3, #4712	; 0x1268
 80081f2:	443b      	add	r3, r7
 80081f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081f8:	ed83 7b00 	vstr	d7, [r3]
  t41_im = t98.re * 3.061616997868383E-17 + t99.re * 3.061616997868383E-17;
 80081fc:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8008200:	ed93 7b00 	vldr	d7, [r3]
 8008204:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 8008430 <G_q+0x7e48>
 8008208:	ee27 6b06 	vmul.f64	d6, d7, d6
 800820c:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8008210:	ed93 7b00 	vldr	d7, [r3]
 8008214:	ed9f 5b86 	vldr	d5, [pc, #536]	; 8008430 <G_q+0x7e48>
 8008218:	ee27 7b05 	vmul.f64	d7, d7, d5
 800821c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008220:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008224:	ed83 7b00 	vstr	d7, [r3]
  t8_re = t98.im * 3.061616997868383E-17 + t99.im * 3.061616997868383E-17;
 8008228:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800822c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008230:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 8008430 <G_q+0x7e48>
 8008234:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008238:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800823c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008240:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 8008430 <G_q+0x7e48>
 8008244:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008248:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800824c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008250:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t96.re * 0.0 - t96.im * 0.5) - (t97.re * 0.0 - t97.im * 0.5);
 8008254:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8008258:	ed93 7b00 	vldr	d7, [r3]
 800825c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 8008440 <G_q+0x7e58>
 8008260:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008264:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8008268:	ed93 7b02 	vldr	d7, [r3, #8]
 800826c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008274:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008278:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800827c:	ed93 7b00 	vldr	d7, [r3]
 8008280:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 8008440 <G_q+0x7e58>
 8008284:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008288:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800828c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008290:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008294:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008298:	ee35 7b47 	vsub.f64	d7, d5, d7
 800829c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082a0:	f241 3378 	movw	r3, #4984	; 0x1378
 80082a4:	443b      	add	r3, r7
 80082a6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t96.re * 0.5 + t96.im * 0.0) - (t97.re * 0.5 + t97.im * 0.0);
 80082aa:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80082ae:	ed93 7b00 	vldr	d7, [r3]
 80082b2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80082b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082ba:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80082be:	ed93 7b02 	vldr	d7, [r3, #8]
 80082c2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8008440 <G_q+0x7e58>
 80082c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80082ca:	ee36 6b07 	vadd.f64	d6, d6, d7
 80082ce:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80082d2:	ed93 7b00 	vldr	d7, [r3]
 80082d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80082da:	ee27 5b05 	vmul.f64	d5, d7, d5
 80082de:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 80082e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80082e6:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8008440 <G_q+0x7e58>
 80082ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80082ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80082f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80082f6:	f241 3370 	movw	r3, #4976	; 0x1370
 80082fa:	443b      	add	r3, r7
 80082fc:	ed83 7b00 	vstr	d7, [r3]
  if (t94.im == 0.0) {
 8008300:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8008304:	ed93 7b02 	vldr	d7, [r3, #8]
 8008308:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800830c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008310:	d115      	bne.n	800833e <G_q+0x7d56>
    t16_re = t94.re / 2.0;
 8008312:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8008316:	ed93 6b00 	vldr	d6, [r3]
 800831a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800831e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008322:	f241 3368 	movw	r3, #4968	; 0x1368
 8008326:	443b      	add	r3, r7
 8008328:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800832c:	f04f 0300 	mov.w	r3, #0
 8008330:	f04f 0400 	mov.w	r4, #0
 8008334:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8008338:	e9c2 3400 	strd	r3, r4, [r2]
 800833c:	e037      	b.n	80083ae <G_q+0x7dc6>
  } else if (t94.re == 0.0) {
 800833e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8008342:	ed93 7b00 	vldr	d7, [r3]
 8008346:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800834a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800834e:	d115      	bne.n	800837c <G_q+0x7d94>
    t16_re = 0.0;
 8008350:	f04f 0300 	mov.w	r3, #0
 8008354:	f04f 0400 	mov.w	r4, #0
 8008358:	f241 3268 	movw	r2, #4968	; 0x1368
 800835c:	443a      	add	r2, r7
 800835e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t94.im / 2.0;
 8008362:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8008366:	ed93 6b02 	vldr	d6, [r3, #8]
 800836a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800836e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008372:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008376:	ed83 7b00 	vstr	d7, [r3]
 800837a:	e018      	b.n	80083ae <G_q+0x7dc6>
  } else {
    t16_re = t94.re / 2.0;
 800837c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8008380:	ed93 6b00 	vldr	d6, [r3]
 8008384:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008388:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800838c:	f241 3368 	movw	r3, #4968	; 0x1368
 8008390:	443b      	add	r3, r7
 8008392:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t94.im / 2.0;
 8008396:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800839a:	ed93 6b02 	vldr	d6, [r3, #8]
 800839e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80083a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80083a6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80083aa:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t95.im == 0.0) {
 80083ae:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80083b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80083b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	d116      	bne.n	80083ee <G_q+0x7e06>
    t34_re = t95.re / 2.0;
 80083c0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80083c4:	ed93 6b00 	vldr	d6, [r3]
 80083c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80083cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80083d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80083d4:	443b      	add	r3, r7
 80083d6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80083da:	f04f 0300 	mov.w	r3, #0
 80083de:	f04f 0400 	mov.w	r4, #0
 80083e2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80083e6:	443a      	add	r2, r7
 80083e8:	e9c2 3400 	strd	r3, r4, [r2]
 80083ec:	e046      	b.n	800847c <G_q+0x7e94>
  } else if (t95.re == 0.0) {
 80083ee:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 80083f2:	ed93 7b00 	vldr	d7, [r3]
 80083f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fe:	d123      	bne.n	8008448 <G_q+0x7e60>
    t34_re = 0.0;
 8008400:	f04f 0300 	mov.w	r3, #0
 8008404:	f04f 0400 	mov.w	r4, #0
 8008408:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800840c:	443a      	add	r2, r7
 800840e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t95.im / 2.0;
 8008412:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8008416:	ed93 6b02 	vldr	d6, [r3, #8]
 800841a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800841e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008422:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008426:	443b      	add	r3, r7
 8008428:	ed83 7b00 	vstr	d7, [r3]
 800842c:	e026      	b.n	800847c <G_q+0x7e94>
 800842e:	bf00      	nop
 8008430:	33145c07 	.word	0x33145c07
 8008434:	3c81a626 	.word	0x3c81a626
 8008438:	858a5d48 	.word	0x858a5d48
 800843c:	394377ce 	.word	0x394377ce
	...
  } else {
    t34_re = t95.re / 2.0;
 8008448:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800844c:	ed93 6b00 	vldr	d6, [r3]
 8008450:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008454:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008458:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800845c:	443b      	add	r3, r7
 800845e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t95.im / 2.0;
 8008462:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8008466:	ed93 6b02 	vldr	d6, [r3, #8]
 800846a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800846e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008472:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008476:	443b      	add	r3, r7
 8008478:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800847c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8008480:	ed93 7b00 	vldr	d7, [r3]
 8008484:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 8008440 <G_q+0x7e58>
 8008488:	ee27 6b06 	vmul.f64	d6, d7, d6
 800848c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8008490:	ed93 7b02 	vldr	d7, [r3, #8]
 8008494:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 8008430 <G_q+0x7e48>
 8008498:	ee27 7b05 	vmul.f64	d7, d7, d5
 800849c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80084a0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80084a4:	ed93 7b00 	vldr	d7, [r3]
 80084a8:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 8008440 <G_q+0x7e58>
 80084ac:	ee27 5b05 	vmul.f64	d5, d7, d5
    t93.im * 3.061616997868383E-17);
 80084b0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80084b4:	ed93 7b02 	vldr	d7, [r3, #8]
 80084b8:	ed1f 4b23 	vldr	d4, [pc, #-140]	; 8008430 <G_q+0x7e48>
 80084bc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 80084c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80084c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084c8:	f241 3348 	movw	r3, #4936	; 0x1348
 80084cc:	443b      	add	r3, r7
 80084ce:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 80084d2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80084d6:	ed93 7b00 	vldr	d7, [r3]
 80084da:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 8008430 <G_q+0x7e48>
 80084de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80084e2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80084e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80084ea:	ed1f 5b2b 	vldr	d5, [pc, #-172]	; 8008440 <G_q+0x7e58>
 80084ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80084f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80084f6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 80084fa:	ed93 7b00 	vldr	d7, [r3]
 80084fe:	ed1f 5b34 	vldr	d5, [pc, #-208]	; 8008430 <G_q+0x7e48>
 8008502:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t93.im * 0.0);
 8008506:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800850a:	ed93 7b02 	vldr	d7, [r3, #8]
 800850e:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 8008440 <G_q+0x7e58>
 8008512:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008516:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800851a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800851e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008522:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 8008526:	f241 3368 	movw	r3, #4968	; 0x1368
 800852a:	443b      	add	r3, r7
 800852c:	ed93 6b00 	vldr	d6, [r3]
 8008530:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008534:	443b      	add	r3, r7
 8008536:	ed93 7b00 	vldr	d7, [r3]
 800853a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800853e:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 8008438 <G_q+0x7e50>
 8008542:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008546:	f241 3368 	movw	r3, #4968	; 0x1368
 800854a:	443b      	add	r3, r7
 800854c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8008550:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008554:	ed93 6b00 	vldr	d6, [r3]
 8008558:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800855c:	443b      	add	r3, r7
 800855e:	ed93 7b00 	vldr	d7, [r3]
 8008562:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008566:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800856a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t41_im * t13_re - t8_re * t13_im) - (t20_re * t16_re - t20_im *
 800856e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008572:	ed93 6b00 	vldr	d6, [r3]
 8008576:	f241 3378 	movw	r3, #4984	; 0x1378
 800857a:	443b      	add	r3, r7
 800857c:	ed93 7b00 	vldr	d7, [r3]
 8008580:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008584:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8008588:	ed93 5b00 	vldr	d5, [r3]
 800858c:	f241 3370 	movw	r3, #4976	; 0x1370
 8008590:	443b      	add	r3, r7
 8008592:	ed93 7b00 	vldr	d7, [r3]
 8008596:	ee25 7b07 	vmul.f64	d7, d5, d7
 800859a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800859e:	f241 3348 	movw	r3, #4936	; 0x1348
 80085a2:	443b      	add	r3, r7
 80085a4:	ed93 5b00 	vldr	d5, [r3]
 80085a8:	f241 3368 	movw	r3, #4968	; 0x1368
 80085ac:	443b      	add	r3, r7
 80085ae:	ed93 7b00 	vldr	d7, [r3]
 80085b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80085b6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80085ba:	ed93 4b00 	vldr	d4, [r3]
 80085be:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80085c2:	ed93 7b00 	vldr	d7, [r3]
 80085c6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80085ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 80085ce:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80085d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80085d6:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t8_re = (t41_im * t13_im + t8_re * t13_re) - (t20_re * t16_im + t20_im *
 80085da:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80085de:	ed93 6b00 	vldr	d6, [r3]
 80085e2:	f241 3370 	movw	r3, #4976	; 0x1370
 80085e6:	443b      	add	r3, r7
 80085e8:	ed93 7b00 	vldr	d7, [r3]
 80085ec:	ee26 6b07 	vmul.f64	d6, d6, d7
 80085f0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80085f4:	ed93 5b00 	vldr	d5, [r3]
 80085f8:	f241 3378 	movw	r3, #4984	; 0x1378
 80085fc:	443b      	add	r3, r7
 80085fe:	ed93 7b00 	vldr	d7, [r3]
 8008602:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008606:	ee36 6b07 	vadd.f64	d6, d6, d7
 800860a:	f241 3348 	movw	r3, #4936	; 0x1348
 800860e:	443b      	add	r3, r7
 8008610:	ed93 5b00 	vldr	d5, [r3]
 8008614:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008618:	ed93 7b00 	vldr	d7, [r3]
 800861c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008620:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008624:	ed93 4b00 	vldr	d4, [r3]
 8008628:	f241 3368 	movw	r3, #4968	; 0x1368
 800862c:	443b      	add	r3, r7
 800862e:	ed93 7b00 	vldr	d7, [r3]
 8008632:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008636:	ee35 7b07 	vadd.f64	d7, d5, d7
 800863a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800863e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008642:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t58_im = (t100.re * 0.0 - t100.im * 0.5) - (t101.re * 0.0 - t101.im * 0.5);
 8008646:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800864a:	ed93 7b00 	vldr	d7, [r3]
 800864e:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 8008440 <G_q+0x7e58>
 8008652:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008656:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800865a:	ed93 7b02 	vldr	d7, [r3, #8]
 800865e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008662:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008666:	ee36 6b47 	vsub.f64	d6, d6, d7
 800866a:	4be7      	ldr	r3, [pc, #924]	; (8008a08 <G_q+0x8420>)
 800866c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008670:	443a      	add	r2, r7
 8008672:	4413      	add	r3, r2
 8008674:	ed93 7b00 	vldr	d7, [r3]
 8008678:	ed9f 5be1 	vldr	d5, [pc, #900]	; 8008a00 <G_q+0x8418>
 800867c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008680:	4be1      	ldr	r3, [pc, #900]	; (8008a08 <G_q+0x8420>)
 8008682:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008686:	443a      	add	r2, r7
 8008688:	4413      	add	r3, r2
 800868a:	ed93 7b02 	vldr	d7, [r3, #8]
 800868e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008692:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008696:	ee35 7b47 	vsub.f64	d7, d5, d7
 800869a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800869e:	ee36 7b47 	vsub.f64	d7, d6, d7
 80086a2:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t100.re * 0.5 + t100.im * 0.0) - (t101.re * 0.5 + t101.im * 0.0);
 80086a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80086aa:	ed93 7b00 	vldr	d7, [r3]
 80086ae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80086b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80086b6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80086ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80086be:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 8008a00 <G_q+0x8418>
 80086c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80086c6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80086ca:	4bcf      	ldr	r3, [pc, #828]	; (8008a08 <G_q+0x8420>)
 80086cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80086d0:	443a      	add	r2, r7
 80086d2:	4413      	add	r3, r2
 80086d4:	ed93 7b00 	vldr	d7, [r3]
 80086d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80086dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80086e0:	4bc9      	ldr	r3, [pc, #804]	; (8008a08 <G_q+0x8420>)
 80086e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80086e6:	443a      	add	r2, r7
 80086e8:	4413      	add	r3, r2
 80086ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80086ee:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 8008a00 <G_q+0x8418>
 80086f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80086f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80086fa:	f241 2350 	movw	r3, #4688	; 0x1250
 80086fe:	443b      	add	r3, r7
 8008700:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008704:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t104.re * 0.0 - t104.im * 0.5) - (t105.re * 0.0 - t105.im * 0.5);
 8008708:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800870c:	ed93 7b00 	vldr	d7, [r3]
 8008710:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 8008a00 <G_q+0x8418>
 8008714:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008718:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800871c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008720:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008724:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008728:	ee36 6b47 	vsub.f64	d6, d6, d7
 800872c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008730:	ed93 7b00 	vldr	d7, [r3]
 8008734:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 8008a00 <G_q+0x8418>
 8008738:	ee27 5b05 	vmul.f64	d5, d7, d5
 800873c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008740:	ed93 7b02 	vldr	d7, [r3, #8]
 8008744:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008748:	ee27 7b04 	vmul.f64	d7, d7, d4
 800874c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008750:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008754:	f241 3370 	movw	r3, #4976	; 0x1370
 8008758:	443b      	add	r3, r7
 800875a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t104.re * 0.5 + t104.im * 0.0) - (t105.re * 0.5 + t105.im * 0.0);
 800875e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8008762:	ed93 7b00 	vldr	d7, [r3]
 8008766:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800876a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800876e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8008772:	ed93 7b02 	vldr	d7, [r3, #8]
 8008776:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 8008a00 <G_q+0x8418>
 800877a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800877e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008782:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008786:	ed93 7b00 	vldr	d7, [r3]
 800878a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800878e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008792:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8008796:	ed93 7b02 	vldr	d7, [r3, #8]
 800879a:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8008a00 <G_q+0x8418>
 800879e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80087a6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80087aa:	443b      	add	r3, r7
 80087ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087b0:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t106.re * 0.0 - t106.im * 0.5) - (t107.re * 0.0 - t107.im * 0.5);
 80087b4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80087b8:	ed93 7b00 	vldr	d7, [r3]
 80087bc:	ed9f 6b90 	vldr	d6, [pc, #576]	; 8008a00 <G_q+0x8418>
 80087c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80087c4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80087c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80087cc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80087d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80087d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80087d8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80087dc:	ed93 7b00 	vldr	d7, [r3]
 80087e0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8008a00 <G_q+0x8418>
 80087e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80087e8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 80087ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80087f0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80087f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80087fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008800:	f241 3348 	movw	r3, #4936	; 0x1348
 8008804:	443b      	add	r3, r7
 8008806:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t106.re * 0.5 + t106.im * 0.0) - (t107.re * 0.5 + t107.im * 0.0);
 800880a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800880e:	ed93 7b00 	vldr	d7, [r3]
 8008812:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008816:	ee27 6b06 	vmul.f64	d6, d7, d6
 800881a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800881e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008822:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8008a00 <G_q+0x8418>
 8008826:	ee27 7b05 	vmul.f64	d7, d7, d5
 800882a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800882e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8008832:	ed93 7b00 	vldr	d7, [r3]
 8008836:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800883a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800883e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8008842:	ed93 7b02 	vldr	d7, [r3, #8]
 8008846:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 8008a00 <G_q+0x8418>
 800884a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800884e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008852:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008856:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800885a:	ed83 7b00 	vstr	d7, [r3]
  if (t108.im == 0.0) {
 800885e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008862:	ed93 7b02 	vldr	d7, [r3, #8]
 8008866:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	d115      	bne.n	800889c <G_q+0x82b4>
    t12_re = t108.re / 2.0;
 8008870:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8008874:	ed93 6b00 	vldr	d6, [r3]
 8008878:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800887c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008880:	f241 3388 	movw	r3, #5000	; 0x1388
 8008884:	443b      	add	r3, r7
 8008886:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800888a:	f04f 0300 	mov.w	r3, #0
 800888e:	f04f 0400 	mov.w	r4, #0
 8008892:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8008896:	e9c2 3400 	strd	r3, r4, [r2]
 800889a:	e037      	b.n	800890c <G_q+0x8324>
  } else if (t108.re == 0.0) {
 800889c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80088a0:	ed93 7b00 	vldr	d7, [r3]
 80088a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ac:	d115      	bne.n	80088da <G_q+0x82f2>
    t12_re = 0.0;
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	f04f 0400 	mov.w	r4, #0
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	443a      	add	r2, r7
 80088bc:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t108.im / 2.0;
 80088c0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80088c4:	ed93 6b02 	vldr	d6, [r3, #8]
 80088c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088d0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80088d4:	ed83 7b00 	vstr	d7, [r3]
 80088d8:	e018      	b.n	800890c <G_q+0x8324>
  } else {
    t12_re = t108.re / 2.0;
 80088da:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80088de:	ed93 6b00 	vldr	d6, [r3]
 80088e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80088ee:	443b      	add	r3, r7
 80088f0:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t108.im / 2.0;
 80088f4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80088f8:	ed93 6b02 	vldr	d6, [r3, #8]
 80088fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008900:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008904:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008908:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t109.im == 0.0) {
 800890c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008910:	ed93 7b02 	vldr	d7, [r3, #8]
 8008914:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800891c:	d116      	bne.n	800894c <G_q+0x8364>
    t34_re = t109.re / 2.0;
 800891e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008922:	ed93 6b00 	vldr	d6, [r3]
 8008926:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800892a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800892e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008932:	443b      	add	r3, r7
 8008934:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008938:	f04f 0300 	mov.w	r3, #0
 800893c:	f04f 0400 	mov.w	r4, #0
 8008940:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008944:	443a      	add	r2, r7
 8008946:	e9c2 3400 	strd	r3, r4, [r2]
 800894a:	e039      	b.n	80089c0 <G_q+0x83d8>
  } else if (t109.re == 0.0) {
 800894c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008950:	ed93 7b00 	vldr	d7, [r3]
 8008954:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800895c:	d116      	bne.n	800898c <G_q+0x83a4>
    t34_re = 0.0;
 800895e:	f04f 0300 	mov.w	r3, #0
 8008962:	f04f 0400 	mov.w	r4, #0
 8008966:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800896a:	443a      	add	r2, r7
 800896c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t109.im / 2.0;
 8008970:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008974:	ed93 6b02 	vldr	d6, [r3, #8]
 8008978:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800897c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008980:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008984:	443b      	add	r3, r7
 8008986:	ed83 7b00 	vstr	d7, [r3]
 800898a:	e019      	b.n	80089c0 <G_q+0x83d8>
  } else {
    t34_re = t109.re / 2.0;
 800898c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8008990:	ed93 6b00 	vldr	d6, [r3]
 8008994:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008998:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800899c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80089a0:	443b      	add	r3, r7
 80089a2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t109.im / 2.0;
 80089a6:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 80089aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80089ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80089b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80089b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80089ba:	443b      	add	r3, r7
 80089bc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t110.im == 0.0) {
 80089c0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80089c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80089c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80089cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089d0:	d11c      	bne.n	8008a0c <G_q+0x8424>
    b_t10_re = t110.re / 2.0;
 80089d2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 80089d6:	ed93 6b00 	vldr	d6, [r3]
 80089da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80089de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80089e2:	f241 3338 	movw	r3, #4920	; 0x1338
 80089e6:	443b      	add	r3, r7
 80089e8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 80089ec:	f04f 0300 	mov.w	r3, #0
 80089f0:	f04f 0400 	mov.w	r4, #0
 80089f4:	f241 3218 	movw	r2, #4888	; 0x1318
 80089f8:	443a      	add	r2, r7
 80089fa:	e9c2 3400 	strd	r3, r4, [r2]
 80089fe:	e03f      	b.n	8008a80 <G_q+0x8498>
	...
 8008a08:	ffffedf0 	.word	0xffffedf0
  } else if (t110.re == 0.0) {
 8008a0c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8008a10:	ed93 7b00 	vldr	d7, [r3]
 8008a14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a1c:	d116      	bne.n	8008a4c <G_q+0x8464>
    b_t10_re = 0.0;
 8008a1e:	f04f 0300 	mov.w	r3, #0
 8008a22:	f04f 0400 	mov.w	r4, #0
 8008a26:	f241 3238 	movw	r2, #4920	; 0x1338
 8008a2a:	443a      	add	r2, r7
 8008a2c:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t110.im / 2.0;
 8008a30:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8008a34:	ed93 6b02 	vldr	d6, [r3, #8]
 8008a38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a40:	f241 3318 	movw	r3, #4888	; 0x1318
 8008a44:	443b      	add	r3, r7
 8008a46:	ed83 7b00 	vstr	d7, [r3]
 8008a4a:	e019      	b.n	8008a80 <G_q+0x8498>
  } else {
    b_t10_re = t110.re / 2.0;
 8008a4c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8008a50:	ed93 6b00 	vldr	d6, [r3]
 8008a54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a5c:	f241 3338 	movw	r3, #4920	; 0x1338
 8008a60:	443b      	add	r3, r7
 8008a62:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t110.im / 2.0;
 8008a66:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8008a6a:	ed93 6b02 	vldr	d6, [r3, #8]
 8008a6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a76:	f241 3318 	movw	r3, #4888	; 0x1318
 8008a7a:	443b      	add	r3, r7
 8008a7c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t111.im == 0.0) {
 8008a80:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008a84:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a90:	d115      	bne.n	8008abe <G_q+0x84d6>
    t16_re = t111.re / 2.0;
 8008a92:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008a96:	ed93 6b00 	vldr	d6, [r3]
 8008a9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008aa2:	f241 3368 	movw	r3, #4968	; 0x1368
 8008aa6:	443b      	add	r3, r7
 8008aa8:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8008aac:	f04f 0300 	mov.w	r3, #0
 8008ab0:	f04f 0400 	mov.w	r4, #0
 8008ab4:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8008ab8:	e9c2 3400 	strd	r3, r4, [r2]
 8008abc:	e037      	b.n	8008b2e <G_q+0x8546>
  } else if (t111.re == 0.0) {
 8008abe:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008ac2:	ed93 7b00 	vldr	d7, [r3]
 8008ac6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ace:	d115      	bne.n	8008afc <G_q+0x8514>
    t16_re = 0.0;
 8008ad0:	f04f 0300 	mov.w	r3, #0
 8008ad4:	f04f 0400 	mov.w	r4, #0
 8008ad8:	f241 3268 	movw	r2, #4968	; 0x1368
 8008adc:	443a      	add	r2, r7
 8008ade:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t111.im / 2.0;
 8008ae2:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008ae6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008aea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008af2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008af6:	ed83 7b00 	vstr	d7, [r3]
 8008afa:	e018      	b.n	8008b2e <G_q+0x8546>
  } else {
    t16_re = t111.re / 2.0;
 8008afc:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008b00:	ed93 6b00 	vldr	d6, [r3]
 8008b04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b0c:	f241 3368 	movw	r3, #4968	; 0x1368
 8008b10:	443b      	add	r3, r7
 8008b12:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t111.im / 2.0;
 8008b16:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8008b1a:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b26:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008b2a:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 8008b2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b32:	443b      	add	r3, r7
 8008b34:	ed93 6b00 	vldr	d6, [r3]
 8008b38:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008b3c:	443b      	add	r3, r7
 8008b3e:	ed93 7b00 	vldr	d7, [r3]
 8008b42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b46:	f241 3388 	movw	r3, #5000	; 0x1388
 8008b4a:	443b      	add	r3, r7
 8008b4c:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 8008b50:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008b54:	ed93 6b00 	vldr	d6, [r3]
 8008b58:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008b5c:	443b      	add	r3, r7
 8008b5e:	ed93 7b00 	vldr	d7, [r3]
 8008b62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b66:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008b6a:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (b_t10_re + t16_re) + 7.498798913309288E-33;
 8008b6e:	f241 3338 	movw	r3, #4920	; 0x1338
 8008b72:	443b      	add	r3, r7
 8008b74:	ed93 6b00 	vldr	d6, [r3]
 8008b78:	f241 3368 	movw	r3, #4968	; 0x1368
 8008b7c:	443b      	add	r3, r7
 8008b7e:	ed93 7b00 	vldr	d7, [r3]
 8008b82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008b86:	ed9f 6b60 	vldr	d6, [pc, #384]	; 8008d08 <G_q+0x8720>
 8008b8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008b8e:	f241 3338 	movw	r3, #4920	; 0x1338
 8008b92:	443b      	add	r3, r7
 8008b94:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t16_im;
 8008b98:	f241 3318 	movw	r3, #4888	; 0x1318
 8008b9c:	443b      	add	r3, r7
 8008b9e:	ed93 6b00 	vldr	d6, [r3]
 8008ba2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008ba6:	ed93 7b00 	vldr	d7, [r3]
 8008baa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008bae:	f241 3318 	movw	r3, #4888	; 0x1318
 8008bb2:	443b      	add	r3, r7
 8008bb4:	ed83 7b00 	vstr	d7, [r3]
  if (t102.im == 0.0) {
 8008bb8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008bbc:	ed93 7b02 	vldr	d7, [r3, #8]
 8008bc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bc8:	d116      	bne.n	8008bf8 <G_q+0x8610>
    t23_re = t102.re / 2.0;
 8008bca:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008bce:	ed93 6b00 	vldr	d6, [r3]
 8008bd2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bda:	f241 3330 	movw	r3, #4912	; 0x1330
 8008bde:	443b      	add	r3, r7
 8008be0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 8008be4:	f04f 0300 	mov.w	r3, #0
 8008be8:	f04f 0400 	mov.w	r4, #0
 8008bec:	f241 3210 	movw	r2, #4880	; 0x1310
 8008bf0:	443a      	add	r2, r7
 8008bf2:	e9c2 3400 	strd	r3, r4, [r2]
 8008bf6:	e039      	b.n	8008c6c <G_q+0x8684>
  } else if (t102.re == 0.0) {
 8008bf8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008bfc:	ed93 7b00 	vldr	d7, [r3]
 8008c00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c08:	d116      	bne.n	8008c38 <G_q+0x8650>
    t23_re = 0.0;
 8008c0a:	f04f 0300 	mov.w	r3, #0
 8008c0e:	f04f 0400 	mov.w	r4, #0
 8008c12:	f241 3230 	movw	r2, #4912	; 0x1330
 8008c16:	443a      	add	r2, r7
 8008c18:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t102.im / 2.0;
 8008c1c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008c20:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c2c:	f241 3310 	movw	r3, #4880	; 0x1310
 8008c30:	443b      	add	r3, r7
 8008c32:	ed83 7b00 	vstr	d7, [r3]
 8008c36:	e019      	b.n	8008c6c <G_q+0x8684>
  } else {
    t23_re = t102.re / 2.0;
 8008c38:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008c3c:	ed93 6b00 	vldr	d6, [r3]
 8008c40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c48:	f241 3330 	movw	r3, #4912	; 0x1330
 8008c4c:	443b      	add	r3, r7
 8008c4e:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t102.im / 2.0;
 8008c52:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8008c56:	ed93 6b02 	vldr	d6, [r3, #8]
 8008c5a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c5e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c62:	f241 3310 	movw	r3, #4880	; 0x1310
 8008c66:	443b      	add	r3, r7
 8008c68:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t103.im == 0.0) {
 8008c6c:	4b28      	ldr	r3, [pc, #160]	; (8008d10 <G_q+0x8728>)
 8008c6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008c72:	443a      	add	r2, r7
 8008c74:	4413      	add	r3, r2
 8008c76:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c82:	d119      	bne.n	8008cb8 <G_q+0x86d0>
    t34_re = t103.re / 2.0;
 8008c84:	4b22      	ldr	r3, [pc, #136]	; (8008d10 <G_q+0x8728>)
 8008c86:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008c8a:	443a      	add	r2, r7
 8008c8c:	4413      	add	r3, r2
 8008c8e:	ed93 6b00 	vldr	d6, [r3]
 8008c92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008c96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008c9a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008c9e:	443b      	add	r3, r7
 8008ca0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008ca4:	f04f 0300 	mov.w	r3, #0
 8008ca8:	f04f 0400 	mov.w	r4, #0
 8008cac:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008cb0:	443a      	add	r2, r7
 8008cb2:	e9c2 3400 	strd	r3, r4, [r2]
 8008cb6:	e04d      	b.n	8008d54 <G_q+0x876c>
  } else if (t103.re == 0.0) {
 8008cb8:	4b15      	ldr	r3, [pc, #84]	; (8008d10 <G_q+0x8728>)
 8008cba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008cbe:	443a      	add	r2, r7
 8008cc0:	4413      	add	r3, r2
 8008cc2:	ed93 7b00 	vldr	d7, [r3]
 8008cc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cce:	d121      	bne.n	8008d14 <G_q+0x872c>
    t34_re = 0.0;
 8008cd0:	f04f 0300 	mov.w	r3, #0
 8008cd4:	f04f 0400 	mov.w	r4, #0
 8008cd8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008cdc:	443a      	add	r2, r7
 8008cde:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t103.im / 2.0;
 8008ce2:	4b0b      	ldr	r3, [pc, #44]	; (8008d10 <G_q+0x8728>)
 8008ce4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008ce8:	443a      	add	r2, r7
 8008cea:	4413      	add	r3, r2
 8008cec:	ed93 6b02 	vldr	d6, [r3, #8]
 8008cf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008cf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008cf8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008cfc:	443b      	add	r3, r7
 8008cfe:	ed83 7b00 	vstr	d7, [r3]
 8008d02:	e027      	b.n	8008d54 <G_q+0x876c>
 8008d04:	f3af 8000 	nop.w
 8008d08:	858a5d48 	.word	0x858a5d48
 8008d0c:	394377ce 	.word	0x394377ce
 8008d10:	ffffee10 	.word	0xffffee10
  } else {
    t34_re = t103.re / 2.0;
 8008d14:	4bd4      	ldr	r3, [pc, #848]	; (8009068 <G_q+0x8a80>)
 8008d16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008d1a:	443a      	add	r2, r7
 8008d1c:	4413      	add	r3, r2
 8008d1e:	ed93 6b00 	vldr	d6, [r3]
 8008d22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d2a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008d2e:	443b      	add	r3, r7
 8008d30:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t103.im / 2.0;
 8008d34:	4bcc      	ldr	r3, [pc, #816]	; (8009068 <G_q+0x8a80>)
 8008d36:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008d3a:	443a      	add	r2, r7
 8008d3c:	4413      	add	r3, r2
 8008d3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008d42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d4a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008d4e:	443b      	add	r3, r7
 8008d50:	ed83 7b00 	vstr	d7, [r3]
  }

  t13_re = (t13_im * t20_re - t76_re * t20_im) + (t12_re * b_t10_re - t12_im *
 8008d54:	f241 3370 	movw	r3, #4976	; 0x1370
 8008d58:	443b      	add	r3, r7
 8008d5a:	ed93 6b00 	vldr	d6, [r3]
 8008d5e:	f241 3348 	movw	r3, #4936	; 0x1348
 8008d62:	443b      	add	r3, r7
 8008d64:	ed93 7b00 	vldr	d7, [r3]
 8008d68:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008d6c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008d70:	443b      	add	r3, r7
 8008d72:	ed93 5b00 	vldr	d5, [r3]
 8008d76:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008d7a:	ed93 7b00 	vldr	d7, [r3]
 8008d7e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008d82:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d86:	f241 3388 	movw	r3, #5000	; 0x1388
 8008d8a:	443b      	add	r3, r7
 8008d8c:	ed93 5b00 	vldr	d5, [r3]
 8008d90:	f241 3338 	movw	r3, #4920	; 0x1338
 8008d94:	443b      	add	r3, r7
 8008d96:	ed93 7b00 	vldr	d7, [r3]
 8008d9a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008d9e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008da2:	ed93 4b00 	vldr	d4, [r3]
 8008da6:	f241 3318 	movw	r3, #4888	; 0x1318
 8008daa:	443b      	add	r3, r7
 8008dac:	ed93 7b00 	vldr	d7, [r3]
 8008db0:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008db4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008db8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dbc:	f241 3378 	movw	r3, #4984	; 0x1378
 8008dc0:	443b      	add	r3, r7
 8008dc2:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t76_re = (t13_im * t20_im + t76_re * t20_re) + (t12_re * t85_im + t12_im *
 8008dc6:	f241 3370 	movw	r3, #4976	; 0x1370
 8008dca:	443b      	add	r3, r7
 8008dcc:	ed93 6b00 	vldr	d6, [r3]
 8008dd0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008dd4:	ed93 7b00 	vldr	d7, [r3]
 8008dd8:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008ddc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008de0:	443b      	add	r3, r7
 8008de2:	ed93 5b00 	vldr	d5, [r3]
 8008de6:	f241 3348 	movw	r3, #4936	; 0x1348
 8008dea:	443b      	add	r3, r7
 8008dec:	ed93 7b00 	vldr	d7, [r3]
 8008df0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008df4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008df8:	f241 3388 	movw	r3, #5000	; 0x1388
 8008dfc:	443b      	add	r3, r7
 8008dfe:	ed93 5b00 	vldr	d5, [r3]
 8008e02:	f241 3318 	movw	r3, #4888	; 0x1318
 8008e06:	443b      	add	r3, r7
 8008e08:	ed93 7b00 	vldr	d7, [r3]
 8008e0c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008e10:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8008e14:	ed93 4b00 	vldr	d4, [r3]
 8008e18:	f241 3338 	movw	r3, #4920	; 0x1338
 8008e1c:	443b      	add	r3, r7
 8008e1e:	ed93 7b00 	vldr	d7, [r3]
 8008e22:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008e26:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008e2a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008e2e:	443b      	add	r3, r7
 8008e30:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e34:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t23_re += t34_re;
 8008e38:	f241 3330 	movw	r3, #4912	; 0x1330
 8008e3c:	443b      	add	r3, r7
 8008e3e:	ed93 6b00 	vldr	d6, [r3]
 8008e42:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008e46:	443b      	add	r3, r7
 8008e48:	ed93 7b00 	vldr	d7, [r3]
 8008e4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e50:	f241 3330 	movw	r3, #4912	; 0x1330
 8008e54:	443b      	add	r3, r7
 8008e56:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 8008e5a:	f241 3310 	movw	r3, #4880	; 0x1310
 8008e5e:	443b      	add	r3, r7
 8008e60:	ed93 6b00 	vldr	d6, [r3]
 8008e64:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008e68:	443b      	add	r3, r7
 8008e6a:	ed93 7b00 	vldr	d7, [r3]
 8008e6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e72:	f241 3310 	movw	r3, #4880	; 0x1310
 8008e76:	443b      	add	r3, r7
 8008e78:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t112.re * 0.0 - t112.im * 0.5) - (t113.re * 0.0 - t113.im * 0.5);
 8008e7c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e80:	ed93 7b00 	vldr	d7, [r3]
 8008e84:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009060 <G_q+0x8a78>
 8008e88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e8c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008e90:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e94:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008e98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008ea0:	4b72      	ldr	r3, [pc, #456]	; (800906c <G_q+0x8a84>)
 8008ea2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008ea6:	443a      	add	r2, r7
 8008ea8:	4413      	add	r3, r2
 8008eaa:	ed93 7b00 	vldr	d7, [r3]
 8008eae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009060 <G_q+0x8a78>
 8008eb2:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008eb6:	4b6d      	ldr	r3, [pc, #436]	; (800906c <G_q+0x8a84>)
 8008eb8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008ebc:	443a      	add	r2, r7
 8008ebe:	4413      	add	r3, r2
 8008ec0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ec4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008ec8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008ecc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ed0:	f241 2358 	movw	r3, #4696	; 0x1258
 8008ed4:	443b      	add	r3, r7
 8008ed6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008eda:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t112.re * 0.5 + t112.im * 0.0) - (t113.re * 0.5 + t113.im * 0.0);
 8008ede:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ee2:	ed93 7b00 	vldr	d7, [r3]
 8008ee6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008eea:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008eee:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ef2:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ef6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 8009060 <G_q+0x8a78>
 8008efa:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008efe:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008f02:	4b5a      	ldr	r3, [pc, #360]	; (800906c <G_q+0x8a84>)
 8008f04:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008f08:	443a      	add	r2, r7
 8008f0a:	4413      	add	r3, r2
 8008f0c:	ed93 7b00 	vldr	d7, [r3]
 8008f10:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008f14:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008f18:	4b54      	ldr	r3, [pc, #336]	; (800906c <G_q+0x8a84>)
 8008f1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008f1e:	443a      	add	r2, r7
 8008f20:	4413      	add	r3, r2
 8008f22:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f26:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 8009060 <G_q+0x8a78>
 8008f2a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f2e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008f32:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f36:	f241 3308 	movw	r3, #4872	; 0x1308
 8008f3a:	443b      	add	r3, r7
 8008f3c:	ed83 7b00 	vstr	d7, [r3]
  t41_im = (t72_re * t58_im - t8_re * t60_re) + (t13_re * t23_re - t76_re *
 8008f40:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8008f44:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8008f48:	ed92 6b00 	vldr	d6, [r2]
 8008f4c:	ed93 7b00 	vldr	d7, [r3]
 8008f50:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008f54:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8008f58:	f241 2350 	movw	r3, #4688	; 0x1250
 8008f5c:	443b      	add	r3, r7
 8008f5e:	ed92 5b00 	vldr	d5, [r2]
 8008f62:	ed93 7b00 	vldr	d7, [r3]
 8008f66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008f6a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008f6e:	f241 3378 	movw	r3, #4984	; 0x1378
 8008f72:	443b      	add	r3, r7
 8008f74:	ed93 5b00 	vldr	d5, [r3]
 8008f78:	f241 3330 	movw	r3, #4912	; 0x1330
 8008f7c:	443b      	add	r3, r7
 8008f7e:	ed93 7b00 	vldr	d7, [r3]
 8008f82:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008f86:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008f8a:	443b      	add	r3, r7
 8008f8c:	ed93 4b00 	vldr	d4, [r3]
 8008f90:	f241 3310 	movw	r3, #4880	; 0x1310
 8008f94:	443b      	add	r3, r7
 8008f96:	ed93 7b00 	vldr	d7, [r3]
 8008f9a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008f9e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008fa2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fa6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008faa:	ed83 7b00 	vstr	d7, [r3]
    t3_im);
  t8_re = (t72_re * t60_re + t8_re * t58_im) + (t13_re * t3_im + t76_re * t23_re);
 8008fae:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8008fb2:	f241 2350 	movw	r3, #4688	; 0x1250
 8008fb6:	443b      	add	r3, r7
 8008fb8:	ed92 6b00 	vldr	d6, [r2]
 8008fbc:	ed93 7b00 	vldr	d7, [r3]
 8008fc0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008fc4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 8008fc8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8008fcc:	ed92 5b00 	vldr	d5, [r2]
 8008fd0:	ed93 7b00 	vldr	d7, [r3]
 8008fd4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008fd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008fdc:	f241 3378 	movw	r3, #4984	; 0x1378
 8008fe0:	443b      	add	r3, r7
 8008fe2:	ed93 5b00 	vldr	d5, [r3]
 8008fe6:	f241 3310 	movw	r3, #4880	; 0x1310
 8008fea:	443b      	add	r3, r7
 8008fec:	ed93 7b00 	vldr	d7, [r3]
 8008ff0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008ff4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008ff8:	443b      	add	r3, r7
 8008ffa:	ed93 4b00 	vldr	d4, [r3]
 8008ffe:	f241 3330 	movw	r3, #4912	; 0x1330
 8009002:	443b      	add	r3, r7
 8009004:	ed93 7b00 	vldr	d7, [r3]
 8009008:	ee24 7b07 	vmul.f64	d7, d4, d7
 800900c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009010:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009014:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009018:	ed83 7b00 	vstr	d7, [r3]
  if (t124.im == 0.0) {
 800901c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009020:	ed93 7b02 	vldr	d7, [r3, #8]
 8009024:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800902c:	d120      	bne.n	8009070 <G_q+0x8a88>
    t43_im = t124.re / 2.0;
 800902e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009032:	ed93 6b00 	vldr	d6, [r3]
 8009036:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800903a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800903e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009042:	443b      	add	r3, r7
 8009044:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = 0.0;
 8009048:	f04f 0300 	mov.w	r3, #0
 800904c:	f04f 0400 	mov.w	r4, #0
 8009050:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8009054:	443a      	add	r2, r7
 8009056:	e9c2 3400 	strd	r3, r4, [r2]
 800905a:	e043      	b.n	80090e4 <G_q+0x8afc>
 800905c:	f3af 8000 	nop.w
	...
 8009068:	ffffee10 	.word	0xffffee10
 800906c:	ffffec90 	.word	0xffffec90
  } else if (t124.re == 0.0) {
 8009070:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009074:	ed93 7b00 	vldr	d7, [r3]
 8009078:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800907c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009080:	d116      	bne.n	80090b0 <G_q+0x8ac8>
    t43_im = 0.0;
 8009082:	f04f 0300 	mov.w	r3, #0
 8009086:	f04f 0400 	mov.w	r4, #0
 800908a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800908e:	443a      	add	r2, r7
 8009090:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_re = t124.im / 2.0;
 8009094:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8009098:	ed93 6b02 	vldr	d6, [r3, #8]
 800909c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090a4:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80090a8:	443b      	add	r3, r7
 80090aa:	ed83 7b00 	vstr	d7, [r3]
 80090ae:	e019      	b.n	80090e4 <G_q+0x8afc>
  } else {
    t43_im = t124.re / 2.0;
 80090b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80090b4:	ed93 6b00 	vldr	d6, [r3]
 80090b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090c0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80090c4:	443b      	add	r3, r7
 80090c6:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = t124.im / 2.0;
 80090ca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80090ce:	ed93 6b02 	vldr	d6, [r3, #8]
 80090d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090da:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80090de:	443b      	add	r3, r7
 80090e0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t125.im == 0.0) {
 80090e4:	4b82      	ldr	r3, [pc, #520]	; (80092f0 <G_q+0x8d08>)
 80090e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80090ea:	443a      	add	r2, r7
 80090ec:	4413      	add	r3, r2
 80090ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80090f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80090f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090fa:	d119      	bne.n	8009130 <G_q+0x8b48>
    t55_im = t125.re / 2.0;
 80090fc:	4b7c      	ldr	r3, [pc, #496]	; (80092f0 <G_q+0x8d08>)
 80090fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009102:	443a      	add	r2, r7
 8009104:	4413      	add	r3, r2
 8009106:	ed93 6b00 	vldr	d6, [r3]
 800910a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800910e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009112:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8009116:	443b      	add	r3, r7
 8009118:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800911c:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8009120:	443a      	add	r2, r7
 8009122:	f04f 0300 	mov.w	r3, #0
 8009126:	f04f 0400 	mov.w	r4, #0
 800912a:	e9c2 3400 	strd	r3, r4, [r2]
 800912e:	e045      	b.n	80091bc <G_q+0x8bd4>
  } else if (t125.re == 0.0) {
 8009130:	4b6f      	ldr	r3, [pc, #444]	; (80092f0 <G_q+0x8d08>)
 8009132:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009136:	443a      	add	r2, r7
 8009138:	4413      	add	r3, r2
 800913a:	ed93 7b00 	vldr	d7, [r3]
 800913e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009146:	d119      	bne.n	800917c <G_q+0x8b94>
    t55_im = 0.0;
 8009148:	f04f 0300 	mov.w	r3, #0
 800914c:	f04f 0400 	mov.w	r4, #0
 8009150:	f241 22d8 	movw	r2, #4824	; 0x12d8
 8009154:	443a      	add	r2, r7
 8009156:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t125.im / 2.0;
 800915a:	4b65      	ldr	r3, [pc, #404]	; (80092f0 <G_q+0x8d08>)
 800915c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009160:	443a      	add	r2, r7
 8009162:	4413      	add	r3, r2
 8009164:	ed93 6b02 	vldr	d6, [r3, #8]
 8009168:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800916c:	443b      	add	r3, r7
 800916e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009172:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009176:	ed83 7b00 	vstr	d7, [r3]
 800917a:	e01f      	b.n	80091bc <G_q+0x8bd4>
  } else {
    t55_im = t125.re / 2.0;
 800917c:	4b5c      	ldr	r3, [pc, #368]	; (80092f0 <G_q+0x8d08>)
 800917e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009182:	443a      	add	r2, r7
 8009184:	4413      	add	r3, r2
 8009186:	ed93 6b00 	vldr	d6, [r3]
 800918a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800918e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009192:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8009196:	443b      	add	r3, r7
 8009198:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t125.im / 2.0;
 800919c:	4b54      	ldr	r3, [pc, #336]	; (80092f0 <G_q+0x8d08>)
 800919e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80091a2:	443a      	add	r2, r7
 80091a4:	4413      	add	r3, r2
 80091a6:	ed93 6b02 	vldr	d6, [r3, #8]
 80091aa:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80091ae:	443b      	add	r3, r7
 80091b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091b8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t136.im == 0.0) {
 80091bc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80091c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80091c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091cc:	d116      	bne.n	80091fc <G_q+0x8c14>
    t70_im = t136.re / 2.0;
 80091ce:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80091d2:	ed93 6b00 	vldr	d6, [r3]
 80091d6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80091da:	443b      	add	r3, r7
 80091dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091e4:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 80091e8:	f04f 0300 	mov.w	r3, #0
 80091ec:	f04f 0400 	mov.w	r4, #0
 80091f0:	f241 22e8 	movw	r2, #4840	; 0x12e8
 80091f4:	443a      	add	r2, r7
 80091f6:	e9c2 3400 	strd	r3, r4, [r2]
 80091fa:	e039      	b.n	8009270 <G_q+0x8c88>
  } else if (t136.re == 0.0) {
 80091fc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8009200:	ed93 7b00 	vldr	d7, [r3]
 8009204:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920c:	d116      	bne.n	800923c <G_q+0x8c54>
    t70_im = 0.0;
 800920e:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8009212:	443a      	add	r2, r7
 8009214:	f04f 0300 	mov.w	r3, #0
 8009218:	f04f 0400 	mov.w	r4, #0
 800921c:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t136.im / 2.0;
 8009220:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8009224:	ed93 6b02 	vldr	d6, [r3, #8]
 8009228:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800922c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009230:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009234:	443b      	add	r3, r7
 8009236:	ed83 7b00 	vstr	d7, [r3]
 800923a:	e019      	b.n	8009270 <G_q+0x8c88>
  } else {
    t70_im = t136.re / 2.0;
 800923c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8009240:	ed93 6b00 	vldr	d6, [r3]
 8009244:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8009248:	443b      	add	r3, r7
 800924a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800924e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009252:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t136.im / 2.0;
 8009256:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800925a:	ed93 6b02 	vldr	d6, [r3, #8]
 800925e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009262:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009266:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800926a:	443b      	add	r3, r7
 800926c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t137.im == 0.0) {
 8009270:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009274:	ed93 7b02 	vldr	d7, [r3, #8]
 8009278:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009280:	d116      	bne.n	80092b0 <G_q+0x8cc8>
    t34_re = t137.re / 2.0;
 8009282:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009286:	ed93 6b00 	vldr	d6, [r3]
 800928a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800928e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009292:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009296:	443b      	add	r3, r7
 8009298:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800929c:	f04f 0300 	mov.w	r3, #0
 80092a0:	f04f 0400 	mov.w	r4, #0
 80092a4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80092a8:	443a      	add	r2, r7
 80092aa:	e9c2 3400 	strd	r3, r4, [r2]
 80092ae:	e03b      	b.n	8009328 <G_q+0x8d40>
  } else if (t137.re == 0.0) {
 80092b0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80092b4:	ed93 7b00 	vldr	d7, [r3]
 80092b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	d118      	bne.n	80092f4 <G_q+0x8d0c>
    t34_re = 0.0;
 80092c2:	f04f 0300 	mov.w	r3, #0
 80092c6:	f04f 0400 	mov.w	r4, #0
 80092ca:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80092ce:	443a      	add	r2, r7
 80092d0:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t137.im / 2.0;
 80092d4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80092d8:	ed93 6b02 	vldr	d6, [r3, #8]
 80092dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092e4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80092e8:	443b      	add	r3, r7
 80092ea:	ed83 7b00 	vstr	d7, [r3]
 80092ee:	e01b      	b.n	8009328 <G_q+0x8d40>
 80092f0:	ffffecb0 	.word	0xffffecb0
  } else {
    t34_re = t137.re / 2.0;
 80092f4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 80092f8:	ed93 6b00 	vldr	d6, [r3]
 80092fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009300:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009304:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009308:	443b      	add	r3, r7
 800930a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t137.im / 2.0;
 800930e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8009312:	ed93 6b02 	vldr	d6, [r3, #8]
 8009316:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800931a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800931e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009322:	443b      	add	r3, r7
 8009324:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_im += t34_re;
 8009328:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800932c:	443b      	add	r3, r7
 800932e:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8009332:	443a      	add	r2, r7
 8009334:	ed92 6b00 	vldr	d6, [r2]
 8009338:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800933c:	443a      	add	r2, r7
 800933e:	ed92 7b00 	vldr	d7, [r2]
 8009342:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009346:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t34_im;
 800934a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800934e:	443b      	add	r3, r7
 8009350:	ed93 6b00 	vldr	d6, [r3]
 8009354:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009358:	443b      	add	r3, r7
 800935a:	ed93 7b00 	vldr	d7, [r3]
 800935e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009362:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009366:	443b      	add	r3, r7
 8009368:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t138.re * 0.0 - t138.im * 0.5) - (t139.re * 0.0 - t139.im * 0.5);
 800936c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8009370:	ed93 7b00 	vldr	d7, [r3]
 8009374:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 8009650 <G_q+0x9068>
 8009378:	ee27 6b06 	vmul.f64	d6, d7, d6
 800937c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8009380:	ed93 7b02 	vldr	d7, [r3, #8]
 8009384:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009388:	ee27 7b05 	vmul.f64	d7, d7, d5
 800938c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009390:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8009394:	ed93 7b00 	vldr	d7, [r3]
 8009398:	ed9f 5bad 	vldr	d5, [pc, #692]	; 8009650 <G_q+0x9068>
 800939c:	ee27 5b05 	vmul.f64	d5, d7, d5
 80093a0:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80093a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80093a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80093ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093b0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80093b4:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80093b8:	443b      	add	r3, r7
 80093ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093be:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t138.re * 0.5 + t138.im * 0.0) - (t139.re * 0.5 + t139.im * 0.0);
 80093c2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80093c6:	ed93 7b00 	vldr	d7, [r3]
 80093ca:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80093ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80093d2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 80093d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80093da:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 8009650 <G_q+0x9068>
 80093de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80093e2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80093e6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80093ea:	ed93 7b00 	vldr	d7, [r3]
 80093ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80093f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80093f6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 80093fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80093fe:	ed9f 4b94 	vldr	d4, [pc, #592]	; 8009650 <G_q+0x9068>
 8009402:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009406:	ee35 7b07 	vadd.f64	d7, d5, d7
 800940a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800940e:	443b      	add	r3, r7
 8009410:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009414:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t150.re * 3.061616997868383E-17 + t151.re * 3.061616997868383E-17;
 8009418:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800941c:	ed93 7b00 	vldr	d7, [r3]
 8009420:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8009660 <G_q+0x9078>
 8009424:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009428:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800942c:	ed93 7b00 	vldr	d7, [r3]
 8009430:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8009660 <G_q+0x9078>
 8009434:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009438:	ee36 7b07 	vadd.f64	d7, d6, d7
 800943c:	f241 3378 	movw	r3, #4984	; 0x1378
 8009440:	443b      	add	r3, r7
 8009442:	ed83 7b00 	vstr	d7, [r3]
  t55_re = t150.im * 3.061616997868383E-17 + t151.im * 3.061616997868383E-17;
 8009446:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800944a:	ed93 7b02 	vldr	d7, [r3, #8]
 800944e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 8009660 <G_q+0x9078>
 8009452:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009456:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800945a:	ed93 7b02 	vldr	d7, [r3, #8]
 800945e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 8009660 <G_q+0x9078>
 8009462:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009466:	ee36 7b07 	vadd.f64	d7, d6, d7
 800946a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800946e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t148.re * 0.0 - t148.im * 0.5) - (t149.re * 0.0 - t149.im * 0.5);
 8009472:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8009476:	ed93 7b00 	vldr	d7, [r3]
 800947a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8009650 <G_q+0x9068>
 800947e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009482:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8009486:	ed93 7b02 	vldr	d7, [r3, #8]
 800948a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800948e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009492:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009496:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800949a:	ed93 7b00 	vldr	d7, [r3]
 800949e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8009650 <G_q+0x9068>
 80094a2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80094a6:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 80094aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80094ae:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80094b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80094b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80094ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80094be:	f241 3370 	movw	r3, #4976	; 0x1370
 80094c2:	443b      	add	r3, r7
 80094c4:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t148.re * 0.5 + t148.im * 0.0) - (t149.re * 0.5 + t149.im * 0.0);
 80094c8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80094cc:	ed93 7b00 	vldr	d7, [r3]
 80094d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80094d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80094d8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 80094dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80094e0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 8009650 <G_q+0x9068>
 80094e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80094e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80094ec:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 80094f0:	ed93 7b00 	vldr	d7, [r3]
 80094f4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80094f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80094fc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8009500:	ed93 7b02 	vldr	d7, [r3, #8]
 8009504:	ed9f 4b52 	vldr	d4, [pc, #328]	; 8009650 <G_q+0x9068>
 8009508:	ee27 7b04 	vmul.f64	d7, d7, d4
 800950c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009514:	f241 3368 	movw	r3, #4968	; 0x1368
 8009518:	443b      	add	r3, r7
 800951a:	ed83 7b00 	vstr	d7, [r3]
  if (t146.im == 0.0) {
 800951e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8009522:	ed93 7b02 	vldr	d7, [r3, #8]
 8009526:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800952a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800952e:	d115      	bne.n	800955c <G_q+0x8f74>
    t16_im = t146.re / 2.0;
 8009530:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8009534:	ed93 6b00 	vldr	d6, [r3]
 8009538:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800953c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009540:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009544:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	f04f 0400 	mov.w	r4, #0
 8009550:	f241 3248 	movw	r2, #4936	; 0x1348
 8009554:	443a      	add	r2, r7
 8009556:	e9c2 3400 	strd	r3, r4, [r2]
 800955a:	e037      	b.n	80095cc <G_q+0x8fe4>
  } else if (t146.re == 0.0) {
 800955c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8009560:	ed93 7b00 	vldr	d7, [r3]
 8009564:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	d115      	bne.n	800959a <G_q+0x8fb2>
    t16_im = 0.0;
 800956e:	f04f 0300 	mov.w	r3, #0
 8009572:	f04f 0400 	mov.w	r4, #0
 8009576:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800957a:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t146.im / 2.0;
 800957e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8009582:	ed93 6b02 	vldr	d6, [r3, #8]
 8009586:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800958a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800958e:	f241 3348 	movw	r3, #4936	; 0x1348
 8009592:	443b      	add	r3, r7
 8009594:	ed83 7b00 	vstr	d7, [r3]
 8009598:	e018      	b.n	80095cc <G_q+0x8fe4>
  } else {
    t16_im = t146.re / 2.0;
 800959a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800959e:	ed93 6b00 	vldr	d6, [r3]
 80095a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80095a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80095aa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80095ae:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t146.im / 2.0;
 80095b2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80095b6:	ed93 6b02 	vldr	d6, [r3, #8]
 80095ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80095be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80095c2:	f241 3348 	movw	r3, #4936	; 0x1348
 80095c6:	443b      	add	r3, r7
 80095c8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t147.im == 0.0) {
 80095cc:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 80095d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80095d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	d116      	bne.n	800960c <G_q+0x9024>
    t34_re = t147.re / 2.0;
 80095de:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 80095e2:	ed93 6b00 	vldr	d6, [r3]
 80095e6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80095ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80095ee:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80095f2:	443b      	add	r3, r7
 80095f4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80095f8:	f04f 0300 	mov.w	r3, #0
 80095fc:	f04f 0400 	mov.w	r4, #0
 8009600:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009604:	443a      	add	r2, r7
 8009606:	e9c2 3400 	strd	r3, r4, [r2]
 800960a:	e047      	b.n	800969c <G_q+0x90b4>
  } else if (t147.re == 0.0) {
 800960c:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8009610:	ed93 7b00 	vldr	d7, [r3]
 8009614:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961c:	d124      	bne.n	8009668 <G_q+0x9080>
    t34_re = 0.0;
 800961e:	f04f 0300 	mov.w	r3, #0
 8009622:	f04f 0400 	mov.w	r4, #0
 8009626:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800962a:	443a      	add	r2, r7
 800962c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t147.im / 2.0;
 8009630:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8009634:	ed93 6b02 	vldr	d6, [r3, #8]
 8009638:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800963c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009640:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009644:	443b      	add	r3, r7
 8009646:	ed83 7b00 	vstr	d7, [r3]
 800964a:	e027      	b.n	800969c <G_q+0x90b4>
 800964c:	f3af 8000 	nop.w
	...
 8009658:	858a5d48 	.word	0x858a5d48
 800965c:	394377ce 	.word	0x394377ce
 8009660:	33145c07 	.word	0x33145c07
 8009664:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t147.re / 2.0;
 8009668:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800966c:	ed93 6b00 	vldr	d6, [r3]
 8009670:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009674:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009678:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800967c:	443b      	add	r3, r7
 800967e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t147.im / 2.0;
 8009682:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8009686:	ed93 6b02 	vldr	d6, [r3, #8]
 800968a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800968e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009692:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009696:	443b      	add	r3, r7
 8009698:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800969c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80096a0:	ed93 7b00 	vldr	d7, [r3]
 80096a4:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 8009650 <G_q+0x9068>
 80096a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80096ac:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80096b0:	ed93 7b02 	vldr	d7, [r3, #8]
 80096b4:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8009660 <G_q+0x9078>
 80096b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80096bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80096c0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80096c4:	ed93 7b00 	vldr	d7, [r3]
 80096c8:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 8009650 <G_q+0x9068>
 80096cc:	ee27 5b05 	vmul.f64	d5, d7, d5
    t145.im * 3.061616997868383E-17);
 80096d0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 80096d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80096d8:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8009660 <G_q+0x9078>
 80096dc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 80096e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096e4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80096ec:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 80096f0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 80096f4:	ed93 7b00 	vldr	d7, [r3]
 80096f8:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8009660 <G_q+0x9078>
 80096fc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009700:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8009704:	ed93 7b02 	vldr	d7, [r3, #8]
 8009708:	ed1f 5b2f 	vldr	d5, [pc, #-188]	; 8009650 <G_q+0x9068>
 800970c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009710:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009714:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8009718:	ed93 7b00 	vldr	d7, [r3]
 800971c:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8009660 <G_q+0x9078>
 8009720:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t145.im * 0.0);
 8009724:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8009728:	ed93 7b02 	vldr	d7, [r3, #8]
 800972c:	ed1f 4b38 	vldr	d4, [pc, #-224]	; 8009650 <G_q+0x9068>
 8009730:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009734:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 8009738:	ee36 7b47 	vsub.f64	d7, d6, d7
 800973c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009740:	443b      	add	r3, r7
 8009742:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 8009746:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800974a:	ed93 6b00 	vldr	d6, [r3]
 800974e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009752:	443b      	add	r3, r7
 8009754:	ed93 7b00 	vldr	d7, [r3]
 8009758:	ee36 7b07 	vadd.f64	d7, d6, d7
 800975c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 8009658 <G_q+0x9070>
 8009760:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009764:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009768:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800976c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009770:	443b      	add	r3, r7
 8009772:	ed93 6b00 	vldr	d6, [r3]
 8009776:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800977a:	443b      	add	r3, r7
 800977c:	ed93 7b00 	vldr	d7, [r3]
 8009780:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009784:	f241 3348 	movw	r3, #4936	; 0x1348
 8009788:	443b      	add	r3, r7
 800978a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t152.re * 3.061616997868383E-17 + t153.re * 3.061616997868383E-17;
 800978e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8009792:	ed93 7b00 	vldr	d7, [r3]
 8009796:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 8009660 <G_q+0x9078>
 800979a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800979e:	4be2      	ldr	r3, [pc, #904]	; (8009b28 <G_q+0x9540>)
 80097a0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80097a4:	443a      	add	r2, r7
 80097a6:	4413      	add	r3, r2
 80097a8:	ed93 7b00 	vldr	d7, [r3]
 80097ac:	ed9f 5bda 	vldr	d5, [pc, #872]	; 8009b18 <G_q+0x9530>
 80097b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80097b4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80097b8:	443b      	add	r3, r7
 80097ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80097be:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t152.im * 3.061616997868383E-17 + t153.im * 3.061616997868383E-17;
 80097c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80097c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80097ca:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 8009b18 <G_q+0x9530>
 80097ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80097d2:	4bd5      	ldr	r3, [pc, #852]	; (8009b28 <G_q+0x9540>)
 80097d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80097d8:	443a      	add	r2, r7
 80097da:	4413      	add	r3, r2
 80097dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80097e0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 8009b18 <G_q+0x9530>
 80097e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80097e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80097ec:	f241 3310 	movw	r3, #4880	; 0x1310
 80097f0:	443b      	add	r3, r7
 80097f2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t13_re * t13_im - t55_re * t16_re) - (t20_im * t16_im - t12_re *
 80097f6:	f241 3378 	movw	r3, #4984	; 0x1378
 80097fa:	443b      	add	r3, r7
 80097fc:	ed93 6b00 	vldr	d6, [r3]
 8009800:	f241 3370 	movw	r3, #4976	; 0x1370
 8009804:	443b      	add	r3, r7
 8009806:	ed93 7b00 	vldr	d7, [r3]
 800980a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800980e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8009812:	ed93 5b00 	vldr	d5, [r3]
 8009816:	f241 3368 	movw	r3, #4968	; 0x1368
 800981a:	443b      	add	r3, r7
 800981c:	ed93 7b00 	vldr	d7, [r3]
 8009820:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009824:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009828:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800982c:	ed93 5b00 	vldr	d5, [r3]
 8009830:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009834:	ed93 7b00 	vldr	d7, [r3]
 8009838:	ee25 5b07 	vmul.f64	d5, d5, d7
 800983c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009840:	443b      	add	r3, r7
 8009842:	ed93 4b00 	vldr	d4, [r3]
 8009846:	f241 3348 	movw	r3, #4936	; 0x1348
 800984a:	443b      	add	r3, r7
 800984c:	ed93 7b00 	vldr	d7, [r3]
 8009850:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009854:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009858:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800985c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009860:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t55_re = (t13_re * t16_re + t55_re * t13_im) - (t20_im * t20_re + t12_re *
 8009864:	f241 3378 	movw	r3, #4984	; 0x1378
 8009868:	443b      	add	r3, r7
 800986a:	ed93 6b00 	vldr	d6, [r3]
 800986e:	f241 3368 	movw	r3, #4968	; 0x1368
 8009872:	443b      	add	r3, r7
 8009874:	ed93 7b00 	vldr	d7, [r3]
 8009878:	ee26 6b07 	vmul.f64	d6, d6, d7
 800987c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8009880:	ed93 5b00 	vldr	d5, [r3]
 8009884:	f241 3370 	movw	r3, #4976	; 0x1370
 8009888:	443b      	add	r3, r7
 800988a:	ed93 7b00 	vldr	d7, [r3]
 800988e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009892:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009896:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800989a:	ed93 5b00 	vldr	d5, [r3]
 800989e:	f241 3348 	movw	r3, #4936	; 0x1348
 80098a2:	443b      	add	r3, r7
 80098a4:	ed93 7b00 	vldr	d7, [r3]
 80098a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80098ac:	f241 3388 	movw	r3, #5000	; 0x1388
 80098b0:	443b      	add	r3, r7
 80098b2:	ed93 4b00 	vldr	d4, [r3]
 80098b6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80098ba:	ed93 7b00 	vldr	d7, [r3]
 80098be:	ee24 7b07 	vmul.f64	d7, d4, d7
 80098c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80098c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80098ca:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80098ce:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t16_re = (t126.re * 0.0 - t126.im * 0.5) - (t127.re * 0.0 - t127.im * 0.5);
 80098d2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80098d6:	ed93 7b00 	vldr	d7, [r3]
 80098da:	ed9f 6b91 	vldr	d6, [pc, #580]	; 8009b20 <G_q+0x9538>
 80098de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80098e2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 80098e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80098ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80098ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80098f2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80098f6:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 80098fa:	ed93 7b00 	vldr	d7, [r3]
 80098fe:	ed9f 5b88 	vldr	d5, [pc, #544]	; 8009b20 <G_q+0x9538>
 8009902:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009906:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800990a:	ed93 7b02 	vldr	d7, [r3, #8]
 800990e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009912:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009916:	ee35 7b47 	vsub.f64	d7, d5, d7
 800991a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800991e:	f241 3368 	movw	r3, #4968	; 0x1368
 8009922:	443b      	add	r3, r7
 8009924:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t126.re * 0.5 + t126.im * 0.0) - (t127.re * 0.5 + t127.im * 0.0);
 8009928:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800992c:	ed93 7b00 	vldr	d7, [r3]
 8009930:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009934:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009938:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800993c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009940:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8009b20 <G_q+0x9538>
 8009944:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009948:	ee36 6b07 	vadd.f64	d6, d6, d7
 800994c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8009950:	ed93 7b00 	vldr	d7, [r3]
 8009954:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009958:	ee27 5b05 	vmul.f64	d5, d7, d5
 800995c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8009960:	ed93 7b02 	vldr	d7, [r3, #8]
 8009964:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 8009b20 <G_q+0x9538>
 8009968:	ee27 7b04 	vmul.f64	d7, d7, d4
 800996c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009970:	f241 2350 	movw	r3, #4688	; 0x1250
 8009974:	443b      	add	r3, r7
 8009976:	ee36 7b47 	vsub.f64	d7, d6, d7
 800997a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t128.re * 0.0 - t128.im * 0.5) - (t129.re * 0.0 - t129.im * 0.5);
 800997e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8009982:	ed93 7b00 	vldr	d7, [r3]
 8009986:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009b20 <G_q+0x9538>
 800998a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800998e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8009992:	ed93 7b02 	vldr	d7, [r3, #8]
 8009996:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800999a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800999e:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099a2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80099a6:	ed93 7b00 	vldr	d7, [r3]
 80099aa:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8009b20 <G_q+0x9538>
 80099ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 80099b2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80099b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80099ba:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80099be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80099c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80099ca:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80099ce:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t128.re * 0.5 + t128.im * 0.0) - (t129.re * 0.5 + t129.im * 0.0);
 80099d2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80099d6:	ed93 7b00 	vldr	d7, [r3]
 80099da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80099de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80099e2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80099e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80099ea:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 8009b20 <G_q+0x9538>
 80099ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 80099f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80099f6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 80099fa:	ed93 7b00 	vldr	d7, [r3]
 80099fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009a02:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009a06:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8009a0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a0e:	ed9f 4b44 	vldr	d4, [pc, #272]	; 8009b20 <G_q+0x9538>
 8009a12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a16:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009a1a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009a1e:	f241 3348 	movw	r3, #4936	; 0x1348
 8009a22:	443b      	add	r3, r7
 8009a24:	ed83 7b00 	vstr	d7, [r3]
  if (t130.im == 0.0) {
 8009a28:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009a2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a38:	d115      	bne.n	8009a66 <G_q+0x947e>
    t20_im = t130.re / 2.0;
 8009a3a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009a3e:	ed93 6b00 	vldr	d6, [r3]
 8009a42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009a46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009a4a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009a4e:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 8009a52:	f04f 0300 	mov.w	r3, #0
 8009a56:	f04f 0400 	mov.w	r4, #0
 8009a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a5e:	443a      	add	r2, r7
 8009a60:	e9c2 3400 	strd	r3, r4, [r2]
 8009a64:	e037      	b.n	8009ad6 <G_q+0x94ee>
  } else if (t130.re == 0.0) {
 8009a66:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009a6a:	ed93 7b00 	vldr	d7, [r3]
 8009a6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a76:	d115      	bne.n	8009aa4 <G_q+0x94bc>
    t20_im = 0.0;
 8009a78:	f04f 0300 	mov.w	r3, #0
 8009a7c:	f04f 0400 	mov.w	r4, #0
 8009a80:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8009a84:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t130.im / 2.0;
 8009a88:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009a8c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009a90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009a94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009a98:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a9c:	443b      	add	r3, r7
 8009a9e:	ed83 7b00 	vstr	d7, [r3]
 8009aa2:	e018      	b.n	8009ad6 <G_q+0x94ee>
  } else {
    t20_im = t130.re / 2.0;
 8009aa4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009aa8:	ed93 6b00 	vldr	d6, [r3]
 8009aac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009ab0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009ab4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009ab8:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t130.im / 2.0;
 8009abc:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8009ac0:	ed93 6b02 	vldr	d6, [r3, #8]
 8009ac4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009acc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009ad0:	443b      	add	r3, r7
 8009ad2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t131.im == 0.0) {
 8009ad6:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009ada:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ae6:	d121      	bne.n	8009b2c <G_q+0x9544>
    t34_re = t131.re / 2.0;
 8009ae8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009aec:	ed93 6b00 	vldr	d6, [r3]
 8009af0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009af8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009afc:	443b      	add	r3, r7
 8009afe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8009b02:	f04f 0300 	mov.w	r3, #0
 8009b06:	f04f 0400 	mov.w	r4, #0
 8009b0a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009b0e:	443a      	add	r2, r7
 8009b10:	e9c2 3400 	strd	r3, r4, [r2]
 8009b14:	e044      	b.n	8009ba0 <G_q+0x95b8>
 8009b16:	bf00      	nop
 8009b18:	33145c07 	.word	0x33145c07
 8009b1c:	3c81a626 	.word	0x3c81a626
	...
 8009b28:	ffffee70 	.word	0xffffee70
  } else if (t131.re == 0.0) {
 8009b2c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009b30:	ed93 7b00 	vldr	d7, [r3]
 8009b34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b3c:	d116      	bne.n	8009b6c <G_q+0x9584>
    t34_re = 0.0;
 8009b3e:	f04f 0300 	mov.w	r3, #0
 8009b42:	f04f 0400 	mov.w	r4, #0
 8009b46:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009b4a:	443a      	add	r2, r7
 8009b4c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t131.im / 2.0;
 8009b50:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009b54:	ed93 6b02 	vldr	d6, [r3, #8]
 8009b58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009b5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009b60:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009b64:	443b      	add	r3, r7
 8009b66:	ed83 7b00 	vstr	d7, [r3]
 8009b6a:	e019      	b.n	8009ba0 <G_q+0x95b8>
  } else {
    t34_re = t131.re / 2.0;
 8009b6c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009b70:	ed93 6b00 	vldr	d6, [r3]
 8009b74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009b78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009b7c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b80:	443b      	add	r3, r7
 8009b82:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t131.im / 2.0;
 8009b86:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8009b8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8009b8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009b92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009b96:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009b9a:	443b      	add	r3, r7
 8009b9c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t132.im == 0.0) {
 8009ba0:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009ba4:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ba8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb0:	d115      	bne.n	8009bde <G_q+0x95f6>
    t12_im = t132.re / 2.0;
 8009bb2:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009bb6:	ed93 6b00 	vldr	d6, [r3]
 8009bba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009bbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009bc2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009bc6:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 8009bca:	f04f 0300 	mov.w	r3, #0
 8009bce:	f04f 0400 	mov.w	r4, #0
 8009bd2:	f241 3238 	movw	r2, #4920	; 0x1338
 8009bd6:	443a      	add	r2, r7
 8009bd8:	e9c2 3400 	strd	r3, r4, [r2]
 8009bdc:	e037      	b.n	8009c4e <G_q+0x9666>
  } else if (t132.re == 0.0) {
 8009bde:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009be2:	ed93 7b00 	vldr	d7, [r3]
 8009be6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bee:	d115      	bne.n	8009c1c <G_q+0x9634>
    t12_im = 0.0;
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	f04f 0400 	mov.w	r4, #0
 8009bf8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8009bfc:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t132.im / 2.0;
 8009c00:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009c04:	ed93 6b02 	vldr	d6, [r3, #8]
 8009c08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009c0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009c10:	f241 3338 	movw	r3, #4920	; 0x1338
 8009c14:	443b      	add	r3, r7
 8009c16:	ed83 7b00 	vstr	d7, [r3]
 8009c1a:	e018      	b.n	8009c4e <G_q+0x9666>
  } else {
    t12_im = t132.re / 2.0;
 8009c1c:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009c20:	ed93 6b00 	vldr	d6, [r3]
 8009c24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009c28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009c2c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009c30:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t132.im / 2.0;
 8009c34:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8009c38:	ed93 6b02 	vldr	d6, [r3, #8]
 8009c3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009c40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009c44:	f241 3338 	movw	r3, #4920	; 0x1338
 8009c48:	443b      	add	r3, r7
 8009c4a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t133.im == 0.0) {
 8009c4e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009c52:	ed93 7b02 	vldr	d7, [r3, #8]
 8009c56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c5e:	d116      	bne.n	8009c8e <G_q+0x96a6>
    t13_re = t133.re / 2.0;
 8009c60:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009c64:	ed93 6b00 	vldr	d6, [r3]
 8009c68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009c6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009c70:	f241 3378 	movw	r3, #4984	; 0x1378
 8009c74:	443b      	add	r3, r7
 8009c76:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8009c7a:	f04f 0300 	mov.w	r3, #0
 8009c7e:	f04f 0400 	mov.w	r4, #0
 8009c82:	f241 3270 	movw	r2, #4976	; 0x1370
 8009c86:	443a      	add	r2, r7
 8009c88:	e9c2 3400 	strd	r3, r4, [r2]
 8009c8c:	e039      	b.n	8009d02 <G_q+0x971a>
  } else if (t133.re == 0.0) {
 8009c8e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009c92:	ed93 7b00 	vldr	d7, [r3]
 8009c96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c9e:	d116      	bne.n	8009cce <G_q+0x96e6>
    t13_re = 0.0;
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	f04f 0400 	mov.w	r4, #0
 8009ca8:	f241 3278 	movw	r2, #4984	; 0x1378
 8009cac:	443a      	add	r2, r7
 8009cae:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t133.im / 2.0;
 8009cb2:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009cb6:	ed93 6b02 	vldr	d6, [r3, #8]
 8009cba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009cbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009cc2:	f241 3370 	movw	r3, #4976	; 0x1370
 8009cc6:	443b      	add	r3, r7
 8009cc8:	ed83 7b00 	vstr	d7, [r3]
 8009ccc:	e019      	b.n	8009d02 <G_q+0x971a>
  } else {
    t13_re = t133.re / 2.0;
 8009cce:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009cd2:	ed93 6b00 	vldr	d6, [r3]
 8009cd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009cda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009cde:	f241 3378 	movw	r3, #4984	; 0x1378
 8009ce2:	443b      	add	r3, r7
 8009ce4:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t133.im / 2.0;
 8009ce8:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8009cec:	ed93 6b02 	vldr	d6, [r3, #8]
 8009cf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009cf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009cf8:	f241 3370 	movw	r3, #4976	; 0x1370
 8009cfc:	443b      	add	r3, r7
 8009cfe:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 8009d02:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009d06:	ed93 6b00 	vldr	d6, [r3]
 8009d0a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009d0e:	443b      	add	r3, r7
 8009d10:	ed93 7b00 	vldr	d7, [r3]
 8009d14:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009d18:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009d1c:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 8009d20:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d24:	443b      	add	r3, r7
 8009d26:	ed93 6b00 	vldr	d6, [r3]
 8009d2a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009d2e:	443b      	add	r3, r7
 8009d30:	ed93 7b00 	vldr	d7, [r3]
 8009d34:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8009d3c:	443b      	add	r3, r7
 8009d3e:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 8009d42:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009d46:	ed93 6b00 	vldr	d6, [r3]
 8009d4a:	f241 3378 	movw	r3, #4984	; 0x1378
 8009d4e:	443b      	add	r3, r7
 8009d50:	ed93 7b00 	vldr	d7, [r3]
 8009d54:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009d58:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800a060 <G_q+0x9a78>
 8009d5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009d60:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009d64:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 8009d68:	f241 3338 	movw	r3, #4920	; 0x1338
 8009d6c:	443b      	add	r3, r7
 8009d6e:	ed93 6b00 	vldr	d6, [r3]
 8009d72:	f241 3370 	movw	r3, #4976	; 0x1370
 8009d76:	443b      	add	r3, r7
 8009d78:	ed93 7b00 	vldr	d7, [r3]
 8009d7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009d80:	f241 3338 	movw	r3, #4920	; 0x1338
 8009d84:	443b      	add	r3, r7
 8009d86:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 8009d8a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009d8e:	ed93 7b00 	vldr	d7, [r3]
 8009d92:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 800a068 <G_q+0x9a80>
 8009d96:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009d9a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009d9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009da2:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800a070 <G_q+0x9a88>
 8009da6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009daa:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009dae:	4bb2      	ldr	r3, [pc, #712]	; (800a078 <G_q+0x9a90>)
 8009db0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009db4:	443a      	add	r2, r7
 8009db6:	4413      	add	r3, r2
 8009db8:	ed93 7b00 	vldr	d7, [r3]
 8009dbc:	ed9f 5baa 	vldr	d5, [pc, #680]	; 800a068 <G_q+0x9a80>
 8009dc0:	ee27 5b05 	vmul.f64	d5, d7, d5
    t135.im * 3.061616997868383E-17);
 8009dc4:	4bac      	ldr	r3, [pc, #688]	; (800a078 <G_q+0x9a90>)
 8009dc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009dca:	443a      	add	r2, r7
 8009dcc:	4413      	add	r3, r2
 8009dce:	ed93 7b02 	vldr	d7, [r3, #8]
 8009dd2:	ed9f 4ba7 	vldr	d4, [pc, #668]	; 800a070 <G_q+0x9a88>
 8009dd6:	ee27 7b04 	vmul.f64	d7, d7, d4
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 8009dda:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009dde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009de2:	f241 3318 	movw	r3, #4888	; 0x1318
 8009de6:	443b      	add	r3, r7
 8009de8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 8009dec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009df0:	ed93 7b00 	vldr	d7, [r3]
 8009df4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800a070 <G_q+0x9a88>
 8009df8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009dfc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009e00:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e04:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800a068 <G_q+0x9a80>
 8009e08:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009e0c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009e10:	4b99      	ldr	r3, [pc, #612]	; (800a078 <G_q+0x9a90>)
 8009e12:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009e16:	443a      	add	r2, r7
 8009e18:	4413      	add	r3, r2
 8009e1a:	ed93 7b00 	vldr	d7, [r3]
 8009e1e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800a070 <G_q+0x9a88>
 8009e22:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t135.im * 0.0);
 8009e26:	4b94      	ldr	r3, [pc, #592]	; (800a078 <G_q+0x9a90>)
 8009e28:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009e2c:	443a      	add	r2, r7
 8009e2e:	4413      	add	r3, r2
 8009e30:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e34:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 800a068 <G_q+0x9a80>
 8009e38:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e3c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 8009e40:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009e44:	f241 3330 	movw	r3, #4912	; 0x1330
 8009e48:	443b      	add	r3, r7
 8009e4a:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t16_re * t16_im - t60_re * t20_re) + (t20_im * t12_im - t12_re *
 8009e4e:	f241 3368 	movw	r3, #4968	; 0x1368
 8009e52:	443b      	add	r3, r7
 8009e54:	ed93 6b00 	vldr	d6, [r3]
 8009e58:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009e5c:	ed93 7b00 	vldr	d7, [r3]
 8009e60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009e64:	f241 2350 	movw	r3, #4688	; 0x1250
 8009e68:	443b      	add	r3, r7
 8009e6a:	ed93 5b00 	vldr	d5, [r3]
 8009e6e:	f241 3348 	movw	r3, #4936	; 0x1348
 8009e72:	443b      	add	r3, r7
 8009e74:	ed93 7b00 	vldr	d7, [r3]
 8009e78:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009e7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009e80:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009e84:	ed93 5b00 	vldr	d5, [r3]
 8009e88:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009e8c:	ed93 7b00 	vldr	d7, [r3]
 8009e90:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009e94:	f241 3388 	movw	r3, #5000	; 0x1388
 8009e98:	443b      	add	r3, r7
 8009e9a:	ed93 4b00 	vldr	d4, [r3]
 8009e9e:	f241 3338 	movw	r3, #4920	; 0x1338
 8009ea2:	443b      	add	r3, r7
 8009ea4:	ed93 7b00 	vldr	d7, [r3]
 8009ea8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009eac:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009eb0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8009eb4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009eb8:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t60_re = (t16_re * t20_re + t60_re * t16_im) + (t20_im * b_t10_re + t12_re *
 8009ebc:	f241 3368 	movw	r3, #4968	; 0x1368
 8009ec0:	443b      	add	r3, r7
 8009ec2:	ed93 6b00 	vldr	d6, [r3]
 8009ec6:	f241 3348 	movw	r3, #4936	; 0x1348
 8009eca:	443b      	add	r3, r7
 8009ecc:	ed93 7b00 	vldr	d7, [r3]
 8009ed0:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009ed4:	f241 2350 	movw	r3, #4688	; 0x1250
 8009ed8:	443b      	add	r3, r7
 8009eda:	ed93 5b00 	vldr	d5, [r3]
 8009ede:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009ee2:	ed93 7b00 	vldr	d7, [r3]
 8009ee6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009eea:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009eee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009ef2:	ed93 5b00 	vldr	d5, [r3]
 8009ef6:	f241 3338 	movw	r3, #4920	; 0x1338
 8009efa:	443b      	add	r3, r7
 8009efc:	ed93 7b00 	vldr	d7, [r3]
 8009f00:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009f04:	f241 3388 	movw	r3, #5000	; 0x1388
 8009f08:	443b      	add	r3, r7
 8009f0a:	ed93 4b00 	vldr	d4, [r3]
 8009f0e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009f12:	ed93 7b00 	vldr	d7, [r3]
 8009f16:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009f1a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009f1e:	f241 2350 	movw	r3, #4688	; 0x1250
 8009f22:	443b      	add	r3, r7
 8009f24:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f28:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  if (t142.im == 0.0) {
 8009f2c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009f30:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f3c:	d116      	bne.n	8009f6c <G_q+0x9984>
    t13_re = t142.re / 2.0;
 8009f3e:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009f42:	ed93 6b00 	vldr	d6, [r3]
 8009f46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009f4e:	f241 3378 	movw	r3, #4984	; 0x1378
 8009f52:	443b      	add	r3, r7
 8009f54:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8009f58:	f04f 0300 	mov.w	r3, #0
 8009f5c:	f04f 0400 	mov.w	r4, #0
 8009f60:	f241 3270 	movw	r2, #4976	; 0x1370
 8009f64:	443a      	add	r2, r7
 8009f66:	e9c2 3400 	strd	r3, r4, [r2]
 8009f6a:	e039      	b.n	8009fe0 <G_q+0x99f8>
  } else if (t142.re == 0.0) {
 8009f6c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009f70:	ed93 7b00 	vldr	d7, [r3]
 8009f74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7c:	d116      	bne.n	8009fac <G_q+0x99c4>
    t13_re = 0.0;
 8009f7e:	f04f 0300 	mov.w	r3, #0
 8009f82:	f04f 0400 	mov.w	r4, #0
 8009f86:	f241 3278 	movw	r2, #4984	; 0x1378
 8009f8a:	443a      	add	r2, r7
 8009f8c:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t142.im / 2.0;
 8009f90:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009f94:	ed93 6b02 	vldr	d6, [r3, #8]
 8009f98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009fa0:	f241 3370 	movw	r3, #4976	; 0x1370
 8009fa4:	443b      	add	r3, r7
 8009fa6:	ed83 7b00 	vstr	d7, [r3]
 8009faa:	e019      	b.n	8009fe0 <G_q+0x99f8>
  } else {
    t13_re = t142.re / 2.0;
 8009fac:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009fb0:	ed93 6b00 	vldr	d6, [r3]
 8009fb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009fb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009fbc:	f241 3378 	movw	r3, #4984	; 0x1378
 8009fc0:	443b      	add	r3, r7
 8009fc2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t142.im / 2.0;
 8009fc6:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8009fca:	ed93 6b02 	vldr	d6, [r3, #8]
 8009fce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009fd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009fd6:	f241 3370 	movw	r3, #4976	; 0x1370
 8009fda:	443b      	add	r3, r7
 8009fdc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t143.im == 0.0) {
 8009fe0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8009fe4:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff0:	d116      	bne.n	800a020 <G_q+0x9a38>
    t34_re = t143.re / 2.0;
 8009ff2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8009ff6:	ed93 6b00 	vldr	d6, [r3]
 8009ffa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a002:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a006:	443b      	add	r3, r7
 800a008:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a00c:	f04f 0300 	mov.w	r3, #0
 800a010:	f04f 0400 	mov.w	r4, #0
 800a014:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a018:	443a      	add	r2, r7
 800a01a:	e9c2 3400 	strd	r3, r4, [r2]
 800a01e:	e047      	b.n	800a0b0 <G_q+0x9ac8>
  } else if (t143.re == 0.0) {
 800a020:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800a024:	ed93 7b00 	vldr	d7, [r3]
 800a028:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a02c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a030:	d124      	bne.n	800a07c <G_q+0x9a94>
    t34_re = 0.0;
 800a032:	f04f 0300 	mov.w	r3, #0
 800a036:	f04f 0400 	mov.w	r4, #0
 800a03a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a03e:	443a      	add	r2, r7
 800a040:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t143.im / 2.0;
 800a044:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800a048:	ed93 6b02 	vldr	d6, [r3, #8]
 800a04c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a050:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a054:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a058:	443b      	add	r3, r7
 800a05a:	ed83 7b00 	vstr	d7, [r3]
 800a05e:	e027      	b.n	800a0b0 <G_q+0x9ac8>
 800a060:	858a5d48 	.word	0x858a5d48
 800a064:	394377ce 	.word	0x394377ce
	...
 800a070:	33145c07 	.word	0x33145c07
 800a074:	3c81a626 	.word	0x3c81a626
 800a078:	ffffee50 	.word	0xffffee50
  } else {
    t34_re = t143.re / 2.0;
 800a07c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800a080:	ed93 6b00 	vldr	d6, [r3]
 800a084:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a08c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a090:	443b      	add	r3, r7
 800a092:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t143.im / 2.0;
 800a096:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800a09a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a09e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0a6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a0aa:	443b      	add	r3, r7
 800a0ac:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t140.re * 0.0 - t140.im * 0.5) - (t141.re * 0.0 - t141.im * 0.5);
 800a0b0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800a0b4:	ed93 7b00 	vldr	d7, [r3]
 800a0b8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 800a438 <G_q+0x9e50>
 800a0bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a0c0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800a0c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0c8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a0cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a0d0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a0d4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800a0d8:	ed93 7b00 	vldr	d7, [r3]
 800a0dc:	ed9f 5bd6 	vldr	d5, [pc, #856]	; 800a438 <G_q+0x9e50>
 800a0e0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a0e4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800a0e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0ec:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a0f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a0f4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a0f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a0fc:	f241 3368 	movw	r3, #4968	; 0x1368
 800a100:	443b      	add	r3, r7
 800a102:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t140.re * 0.5 + t140.im * 0.0) - (t141.re * 0.5 + t141.im * 0.0);
 800a106:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800a10a:	ed93 7b00 	vldr	d7, [r3]
 800a10e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a112:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a116:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800a11a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a11e:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 800a438 <G_q+0x9e50>
 800a122:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a126:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a12a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800a12e:	ed93 7b00 	vldr	d7, [r3]
 800a132:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a136:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a13a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800a13e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a142:	ed9f 4bbd 	vldr	d4, [pc, #756]	; 800a438 <G_q+0x9e50>
 800a146:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a14a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a14e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a152:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a156:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800a15a:	f241 3378 	movw	r3, #4984	; 0x1378
 800a15e:	443b      	add	r3, r7
 800a160:	ed93 6b00 	vldr	d6, [r3]
 800a164:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a168:	443b      	add	r3, r7
 800a16a:	ed93 7b00 	vldr	d7, [r3]
 800a16e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a172:	ed9f 6bad 	vldr	d6, [pc, #692]	; 800a428 <G_q+0x9e40>
 800a176:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a17a:	f241 3378 	movw	r3, #4984	; 0x1378
 800a17e:	443b      	add	r3, r7
 800a180:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800a184:	f241 3370 	movw	r3, #4976	; 0x1370
 800a188:	443b      	add	r3, r7
 800a18a:	ed93 6b00 	vldr	d6, [r3]
 800a18e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a192:	443b      	add	r3, r7
 800a194:	ed93 7b00 	vldr	d7, [r3]
 800a198:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a19c:	f241 3370 	movw	r3, #4976	; 0x1370
 800a1a0:	443b      	add	r3, r7
 800a1a2:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t55_im;
 800a1a6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800a1aa:	443b      	add	r3, r7
 800a1ac:	ed93 6b00 	vldr	d6, [r3]
 800a1b0:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800a1b4:	443b      	add	r3, r7
 800a1b6:	ed93 7b00 	vldr	d7, [r3]
 800a1ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a1be:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800a1c2:	443b      	add	r3, r7
 800a1c4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t70_re;
 800a1c8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800a1cc:	443b      	add	r3, r7
 800a1ce:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800a1d2:	443a      	add	r2, r7
 800a1d4:	ed92 6b00 	vldr	d6, [r2]
 800a1d8:	ed93 7b00 	vldr	d7, [r3]
 800a1dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a1e0:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800a1e4:	443b      	add	r3, r7
 800a1e6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800a1ea:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800a1ee:	443a      	add	r2, r7
 800a1f0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800a1f4:	443b      	add	r3, r7
 800a1f6:	ed92 6b00 	vldr	d6, [r2]
 800a1fa:	ed93 7b00 	vldr	d7, [r3]
 800a1fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a202:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800a206:	443b      	add	r3, r7
 800a208:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800a20c:	443a      	add	r2, r7
 800a20e:	ed92 5b00 	vldr	d5, [r2]
 800a212:	ed93 7b00 	vldr	d7, [r3]
 800a216:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a21a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a21e:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800a222:	443a      	add	r2, r7
 800a224:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a228:	ed92 5b00 	vldr	d5, [r2]
 800a22c:	ed93 7b00 	vldr	d7, [r3]
 800a230:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a234:	f241 3310 	movw	r3, #4880	; 0x1310
 800a238:	443b      	add	r3, r7
 800a23a:	ed93 4b00 	vldr	d4, [r3]
 800a23e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800a242:	ed93 7b00 	vldr	d7, [r3]
 800a246:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a24a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a24e:	ee36 6b47 	vsub.f64	d6, d6, d7
              t55_re)) + (t85_im * t58_im - t23_re * t60_re)) - (t16_re * t13_re
 800a252:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a256:	f241 3218 	movw	r2, #4888	; 0x1318
 800a25a:	443a      	add	r2, r7
 800a25c:	ed92 5b00 	vldr	d5, [r2]
 800a260:	ed93 7b00 	vldr	d7, [r3]
 800a264:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a268:	f241 2350 	movw	r3, #4688	; 0x1250
 800a26c:	443b      	add	r3, r7
 800a26e:	f241 3230 	movw	r2, #4912	; 0x1330
 800a272:	443a      	add	r2, r7
 800a274:	ed92 4b00 	vldr	d4, [r2]
 800a278:	ed93 7b00 	vldr	d7, [r3]
 800a27c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a280:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a284:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a288:	f241 3368 	movw	r3, #4968	; 0x1368
 800a28c:	443b      	add	r3, r7
 800a28e:	ed93 5b00 	vldr	d5, [r3]
 800a292:	f241 3378 	movw	r3, #4984	; 0x1378
 800a296:	443b      	add	r3, r7
 800a298:	ed93 7b00 	vldr	d7, [r3]
 800a29c:	ee25 5b07 	vmul.f64	d5, d5, d7
    - t16_im * t13_im);
 800a2a0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a2a4:	ed93 4b00 	vldr	d4, [r3]
 800a2a8:	f241 3370 	movw	r3, #4976	; 0x1370
 800a2ac:	443b      	add	r3, r7
 800a2ae:	ed93 7b00 	vldr	d7, [r3]
 800a2b2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a2b6:	ee35 7b47 	vsub.f64	d7, d5, d7
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800a2ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a2be:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800a2c2:	443b      	add	r3, r7
 800a2c4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800a2c8:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800a2cc:	443a      	add	r2, r7
 800a2ce:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800a2d2:	443b      	add	r3, r7
 800a2d4:	ed92 6b00 	vldr	d6, [r2]
 800a2d8:	ed93 7b00 	vldr	d7, [r3]
 800a2dc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2e0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800a2e4:	443b      	add	r3, r7
 800a2e6:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800a2ea:	443a      	add	r2, r7
 800a2ec:	ed92 5b00 	vldr	d5, [r2]
 800a2f0:	ed93 7b00 	vldr	d7, [r3]
 800a2f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a2fc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800a300:	443b      	add	r3, r7
 800a302:	ed93 5b00 	vldr	d5, [r3]
 800a306:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800a30a:	ed93 7b00 	vldr	d7, [r3]
 800a30e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a312:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a316:	f241 3210 	movw	r2, #4880	; 0x1310
 800a31a:	443a      	add	r2, r7
 800a31c:	ed92 4b00 	vldr	d4, [r2]
 800a320:	ed93 7b00 	vldr	d7, [r3]
 800a324:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a328:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a32c:	ee36 6b47 	vsub.f64	d6, d6, d7
    t72_re)) + (t85_im * t60_re + t23_re * t58_im)) - (t16_re * t13_im + t16_im *
 800a330:	f241 2350 	movw	r3, #4688	; 0x1250
 800a334:	443b      	add	r3, r7
 800a336:	f241 3218 	movw	r2, #4888	; 0x1318
 800a33a:	443a      	add	r2, r7
 800a33c:	ed92 5b00 	vldr	d5, [r2]
 800a340:	ed93 7b00 	vldr	d7, [r3]
 800a344:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a348:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a34c:	f241 3230 	movw	r2, #4912	; 0x1330
 800a350:	443a      	add	r2, r7
 800a352:	ed92 4b00 	vldr	d4, [r2]
 800a356:	ed93 7b00 	vldr	d7, [r3]
 800a35a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a35e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a362:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a366:	f241 3368 	movw	r3, #4968	; 0x1368
 800a36a:	443b      	add	r3, r7
 800a36c:	ed93 5b00 	vldr	d5, [r3]
 800a370:	f241 3370 	movw	r3, #4976	; 0x1370
 800a374:	443b      	add	r3, r7
 800a376:	ed93 7b00 	vldr	d7, [r3]
 800a37a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a37e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a382:	ed93 4b00 	vldr	d4, [r3]
 800a386:	f241 3378 	movw	r3, #4984	; 0x1378
 800a38a:	443b      	add	r3, r7
 800a38c:	ed93 7b00 	vldr	d7, [r3]
 800a390:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a394:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800a398:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a39c:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800a3a0:	443b      	add	r3, r7
 800a3a2:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t170.im == 0.0) {
 800a3a6:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a3aa:	ed93 7b02 	vldr	d7, [r3, #8]
 800a3ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b6:	d115      	bne.n	800a3e4 <G_q+0x9dfc>
    t3_im = t170.re / 2.0;
 800a3b8:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a3bc:	ed93 6b00 	vldr	d6, [r3]
 800a3c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3c8:	f241 3310 	movw	r3, #4880	; 0x1310
 800a3cc:	443b      	add	r3, r7
 800a3ce:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800a3d2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800a3d6:	f04f 0300 	mov.w	r3, #0
 800a3da:	f04f 0400 	mov.w	r4, #0
 800a3de:	e9c2 3400 	strd	r3, r4, [r2]
 800a3e2:	e046      	b.n	800a472 <G_q+0x9e8a>
  } else if (t170.re == 0.0) {
 800a3e4:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a3e8:	ed93 7b00 	vldr	d7, [r3]
 800a3ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3f4:	d124      	bne.n	800a440 <G_q+0x9e58>
    t3_im = 0.0;
 800a3f6:	f04f 0300 	mov.w	r3, #0
 800a3fa:	f04f 0400 	mov.w	r4, #0
 800a3fe:	f241 3210 	movw	r2, #4880	; 0x1310
 800a402:	443a      	add	r2, r7
 800a404:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t170.im / 2.0;
 800a408:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a40c:	ed93 6b02 	vldr	d6, [r3, #8]
 800a410:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a414:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a418:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a41c:	ed83 7b00 	vstr	d7, [r3]
 800a420:	e027      	b.n	800a472 <G_q+0x9e8a>
 800a422:	bf00      	nop
 800a424:	f3af 8000 	nop.w
 800a428:	858a5d48 	.word	0x858a5d48
 800a42c:	394377ce 	.word	0x394377ce
 800a430:	33145c07 	.word	0x33145c07
 800a434:	3c81a626 	.word	0x3c81a626
	...
  } else {
    t3_im = t170.re / 2.0;
 800a440:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a444:	ed93 6b00 	vldr	d6, [r3]
 800a448:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a44c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a450:	f241 3310 	movw	r3, #4880	; 0x1310
 800a454:	443b      	add	r3, r7
 800a456:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t170.im / 2.0;
 800a45a:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800a45e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a462:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a466:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a46a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a46e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t171.im == 0.0) {
 800a472:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a476:	ed93 7b02 	vldr	d7, [r3, #8]
 800a47a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a482:	d116      	bne.n	800a4b2 <G_q+0x9eca>
    t34_re = t171.re / 2.0;
 800a484:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a488:	ed93 6b00 	vldr	d6, [r3]
 800a48c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a490:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a494:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a498:	443b      	add	r3, r7
 800a49a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a49e:	f04f 0300 	mov.w	r3, #0
 800a4a2:	f04f 0400 	mov.w	r4, #0
 800a4a6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a4aa:	443a      	add	r2, r7
 800a4ac:	e9c2 3400 	strd	r3, r4, [r2]
 800a4b0:	e039      	b.n	800a526 <G_q+0x9f3e>
  } else if (t171.re == 0.0) {
 800a4b2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a4b6:	ed93 7b00 	vldr	d7, [r3]
 800a4ba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a4be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4c2:	d116      	bne.n	800a4f2 <G_q+0x9f0a>
    t34_re = 0.0;
 800a4c4:	f04f 0300 	mov.w	r3, #0
 800a4c8:	f04f 0400 	mov.w	r4, #0
 800a4cc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a4d0:	443a      	add	r2, r7
 800a4d2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t171.im / 2.0;
 800a4d6:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a4da:	ed93 6b02 	vldr	d6, [r3, #8]
 800a4de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a4e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a4e6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a4ea:	443b      	add	r3, r7
 800a4ec:	ed83 7b00 	vstr	d7, [r3]
 800a4f0:	e019      	b.n	800a526 <G_q+0x9f3e>
  } else {
    t34_re = t171.re / 2.0;
 800a4f2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a4f6:	ed93 6b00 	vldr	d6, [r3]
 800a4fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a4fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a502:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a506:	443b      	add	r3, r7
 800a508:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t171.im / 2.0;
 800a50c:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800a510:	ed93 6b02 	vldr	d6, [r3, #8]
 800a514:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a518:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a51c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a520:	443b      	add	r3, r7
 800a522:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re = (t168.re * 0.0 - t168.im * 0.5) - (t169.re * 0.0 - t169.im * 0.5);
 800a526:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800a52a:	ed93 7b00 	vldr	d7, [r3]
 800a52e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 800a438 <G_q+0x9e50>
 800a532:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a536:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800a53a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a53e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a542:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a546:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a54a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800a54e:	ed93 7b00 	vldr	d7, [r3]
 800a552:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 800a438 <G_q+0x9e50>
 800a556:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a55a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800a55e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a562:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a566:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a56a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a56e:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800a572:	443b      	add	r3, r7
 800a574:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a578:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t168.re * 0.5 + t168.im * 0.0) - (t169.re * 0.5 + t169.im * 0.0);
 800a57c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800a580:	ed93 7b00 	vldr	d7, [r3]
 800a584:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a588:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a58c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800a590:	ed93 7b02 	vldr	d7, [r3, #8]
 800a594:	ed1f 5b58 	vldr	d5, [pc, #-352]	; 800a438 <G_q+0x9e50>
 800a598:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a59c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a5a0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800a5a4:	ed93 7b00 	vldr	d7, [r3]
 800a5a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a5ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a5b0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800a5b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a5b8:	ed1f 4b61 	vldr	d4, [pc, #-388]	; 800a438 <G_q+0x9e50>
 800a5bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a5c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a5c4:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800a5c8:	443b      	add	r3, r7
 800a5ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a5ce:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t3_im + t34_re) + 7.498798913309288E-33;
 800a5d2:	f241 3310 	movw	r3, #4880	; 0x1310
 800a5d6:	443b      	add	r3, r7
 800a5d8:	ed93 6b00 	vldr	d6, [r3]
 800a5dc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a5e0:	443b      	add	r3, r7
 800a5e2:	ed93 7b00 	vldr	d7, [r3]
 800a5e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a5ea:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 800a428 <G_q+0x9e40>
 800a5ee:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a5f2:	f241 3310 	movw	r3, #4880	; 0x1310
 800a5f6:	443b      	add	r3, r7
 800a5f8:	ed83 7b00 	vstr	d7, [r3]
  t72_re += t34_im;
 800a5fc:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a600:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800a604:	ed92 6b00 	vldr	d6, [r2]
 800a608:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a60c:	443a      	add	r2, r7
 800a60e:	ed92 7b00 	vldr	d7, [r2]
 800a612:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a616:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t120.re * 3.061616997868383E-17 + t121.re * 3.061616997868383E-17;
 800a61a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a61e:	ed93 7b00 	vldr	d7, [r3]
 800a622:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 800a430 <G_q+0x9e48>
 800a626:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a62a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a62e:	ed93 7b00 	vldr	d7, [r3]
 800a632:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 800a430 <G_q+0x9e48>
 800a636:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a63a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a63e:	f241 3378 	movw	r3, #4984	; 0x1378
 800a642:	443b      	add	r3, r7
 800a644:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t120.im * 3.061616997868383E-17 + t121.im * 3.061616997868383E-17;
 800a648:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800a64c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a650:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 800a430 <G_q+0x9e48>
 800a654:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a658:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800a65c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a660:	ed1f 5b8d 	vldr	d5, [pc, #-564]	; 800a430 <G_q+0x9e48>
 800a664:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a668:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800a66c:	443b      	add	r3, r7
 800a66e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a672:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t118.re * 0.0 - t118.im * 0.5) - (t119.re * 0.0 - t119.im * 0.5);
 800a676:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800a67a:	ed93 7b00 	vldr	d7, [r3]
 800a67e:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 800a438 <G_q+0x9e50>
 800a682:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a686:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800a68a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a68e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a692:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a696:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a69a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800a69e:	ed93 7b00 	vldr	d7, [r3]
 800a6a2:	ed1f 5b9b 	vldr	d5, [pc, #-620]	; 800a438 <G_q+0x9e50>
 800a6a6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a6aa:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800a6ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6b2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a6b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a6be:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a6c2:	f241 3370 	movw	r3, #4976	; 0x1370
 800a6c6:	443b      	add	r3, r7
 800a6c8:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t118.re * 0.5 + t118.im * 0.0) - (t119.re * 0.5 + t119.im * 0.0);
 800a6cc:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800a6d0:	ed93 7b00 	vldr	d7, [r3]
 800a6d4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a6d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a6dc:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800a6e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6e4:	ed1f 5bac 	vldr	d5, [pc, #-688]	; 800a438 <G_q+0x9e50>
 800a6e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a6ec:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a6f0:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800a6f4:	ed93 7b00 	vldr	d7, [r3]
 800a6f8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a6fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a700:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800a704:	ed93 7b02 	vldr	d7, [r3, #8]
 800a708:	ed1f 4bb5 	vldr	d4, [pc, #-724]	; 800a438 <G_q+0x9e50>
 800a70c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a710:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a714:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a718:	f241 3368 	movw	r3, #4968	; 0x1368
 800a71c:	443b      	add	r3, r7
 800a71e:	ed83 7b00 	vstr	d7, [r3]
  if (t116.im == 0.0) {
 800a722:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a726:	ed93 7b02 	vldr	d7, [r3, #8]
 800a72a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a72e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a732:	d115      	bne.n	800a760 <G_q+0xa178>
    t16_im = t116.re / 2.0;
 800a734:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a738:	ed93 6b00 	vldr	d6, [r3]
 800a73c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a740:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a744:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a748:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800a74c:	f04f 0300 	mov.w	r3, #0
 800a750:	f04f 0400 	mov.w	r4, #0
 800a754:	f241 3248 	movw	r2, #4936	; 0x1348
 800a758:	443a      	add	r2, r7
 800a75a:	e9c2 3400 	strd	r3, r4, [r2]
 800a75e:	e037      	b.n	800a7d0 <G_q+0xa1e8>
  } else if (t116.re == 0.0) {
 800a760:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a764:	ed93 7b00 	vldr	d7, [r3]
 800a768:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a770:	d115      	bne.n	800a79e <G_q+0xa1b6>
    t16_im = 0.0;
 800a772:	f04f 0300 	mov.w	r3, #0
 800a776:	f04f 0400 	mov.w	r4, #0
 800a77a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a77e:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t116.im / 2.0;
 800a782:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a786:	ed93 6b02 	vldr	d6, [r3, #8]
 800a78a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a78e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a792:	f241 3348 	movw	r3, #4936	; 0x1348
 800a796:	443b      	add	r3, r7
 800a798:	ed83 7b00 	vstr	d7, [r3]
 800a79c:	e018      	b.n	800a7d0 <G_q+0xa1e8>
  } else {
    t16_im = t116.re / 2.0;
 800a79e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a7a2:	ed93 6b00 	vldr	d6, [r3]
 800a7a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7ae:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a7b2:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t116.im / 2.0;
 800a7b6:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800a7ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800a7be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7c6:	f241 3348 	movw	r3, #4936	; 0x1348
 800a7ca:	443b      	add	r3, r7
 800a7cc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t117.im == 0.0) {
 800a7d0:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a7d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a7d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e0:	d116      	bne.n	800a810 <G_q+0xa228>
    t34_re = t117.re / 2.0;
 800a7e2:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a7e6:	ed93 6b00 	vldr	d6, [r3]
 800a7ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7f2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a7f6:	443b      	add	r3, r7
 800a7f8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a7fc:	f04f 0300 	mov.w	r3, #0
 800a800:	f04f 0400 	mov.w	r4, #0
 800a804:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a808:	443a      	add	r2, r7
 800a80a:	e9c2 3400 	strd	r3, r4, [r2]
 800a80e:	e039      	b.n	800a884 <G_q+0xa29c>
  } else if (t117.re == 0.0) {
 800a810:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a814:	ed93 7b00 	vldr	d7, [r3]
 800a818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a81c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a820:	d116      	bne.n	800a850 <G_q+0xa268>
    t34_re = 0.0;
 800a822:	f04f 0300 	mov.w	r3, #0
 800a826:	f04f 0400 	mov.w	r4, #0
 800a82a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a82e:	443a      	add	r2, r7
 800a830:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t117.im / 2.0;
 800a834:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a838:	ed93 6b02 	vldr	d6, [r3, #8]
 800a83c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a840:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a844:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a848:	443b      	add	r3, r7
 800a84a:	ed83 7b00 	vstr	d7, [r3]
 800a84e:	e019      	b.n	800a884 <G_q+0xa29c>
  } else {
    t34_re = t117.re / 2.0;
 800a850:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a854:	ed93 6b00 	vldr	d6, [r3]
 800a858:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a85c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a860:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a864:	443b      	add	r3, r7
 800a866:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t117.im / 2.0;
 800a86a:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800a86e:	ed93 6b02 	vldr	d6, [r3, #8]
 800a872:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a876:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a87a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a87e:	443b      	add	r3, r7
 800a880:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800a884:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800a888:	ed93 7b00 	vldr	d7, [r3]
 800a88c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800aac0 <G_q+0xa4d8>
 800a890:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a894:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800a898:	ed93 7b02 	vldr	d7, [r3, #8]
 800a89c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800aac8 <G_q+0xa4e0>
 800a8a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a8a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a8a8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800a8ac:	ed93 7b00 	vldr	d7, [r3]
 800a8b0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800aac0 <G_q+0xa4d8>
 800a8b4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t115.im * 3.061616997868383E-17);
 800a8b8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800a8bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8c0:	ed9f 4b81 	vldr	d4, [pc, #516]	; 800aac8 <G_q+0xa4e0>
 800a8c4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800a8c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a8cc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a8d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a8d4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800a8d8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800a8dc:	ed93 7b00 	vldr	d7, [r3]
 800a8e0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800aac8 <G_q+0xa4e0>
 800a8e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a8e8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800a8ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8f0:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800aac0 <G_q+0xa4d8>
 800a8f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a8f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a8fc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800a900:	ed93 7b00 	vldr	d7, [r3]
 800a904:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800aac8 <G_q+0xa4e0>
 800a908:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t115.im * 0.0);
 800a90c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800a910:	ed93 7b02 	vldr	d7, [r3, #8]
 800a914:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 800aac0 <G_q+0xa4d8>
 800a918:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a91c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800a920:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a924:	f241 3388 	movw	r3, #5000	; 0x1388
 800a928:	443b      	add	r3, r7
 800a92a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800a92e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a932:	ed93 6b00 	vldr	d6, [r3]
 800a936:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a93a:	443b      	add	r3, r7
 800a93c:	ed93 7b00 	vldr	d7, [r3]
 800a940:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a944:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800aad0 <G_q+0xa4e8>
 800a948:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a94c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a950:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800a954:	f241 3348 	movw	r3, #4936	; 0x1348
 800a958:	443b      	add	r3, r7
 800a95a:	ed93 6b00 	vldr	d6, [r3]
 800a95e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a962:	443b      	add	r3, r7
 800a964:	ed93 7b00 	vldr	d7, [r3]
 800a968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a96c:	f241 3348 	movw	r3, #4936	; 0x1348
 800a970:	443b      	add	r3, r7
 800a972:	ed83 7b00 	vstr	d7, [r3]
  if (t122.im == 0.0) {
 800a976:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a97a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a97e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a986:	d115      	bne.n	800a9b4 <G_q+0xa3cc>
    t23_re = t122.re / 2.0;
 800a988:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a98c:	ed93 6b00 	vldr	d6, [r3]
 800a990:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a994:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a998:	f241 3330 	movw	r3, #4912	; 0x1330
 800a99c:	443b      	add	r3, r7
 800a99e:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800a9a2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800a9a6:	f04f 0300 	mov.w	r3, #0
 800a9aa:	f04f 0400 	mov.w	r4, #0
 800a9ae:	e9c2 3400 	strd	r3, r4, [r2]
 800a9b2:	e037      	b.n	800aa24 <G_q+0xa43c>
  } else if (t122.re == 0.0) {
 800a9b4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a9b8:	ed93 7b00 	vldr	d7, [r3]
 800a9bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9c4:	d115      	bne.n	800a9f2 <G_q+0xa40a>
    t23_re = 0.0;
 800a9c6:	f04f 0300 	mov.w	r3, #0
 800a9ca:	f04f 0400 	mov.w	r4, #0
 800a9ce:	f241 3230 	movw	r2, #4912	; 0x1330
 800a9d2:	443a      	add	r2, r7
 800a9d4:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t122.im / 2.0;
 800a9d8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a9dc:	ed93 6b02 	vldr	d6, [r3, #8]
 800a9e0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a9e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a9e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a9ec:	ed83 7b00 	vstr	d7, [r3]
 800a9f0:	e018      	b.n	800aa24 <G_q+0xa43c>
  } else {
    t23_re = t122.re / 2.0;
 800a9f2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800a9f6:	ed93 6b00 	vldr	d6, [r3]
 800a9fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a9fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa02:	f241 3330 	movw	r3, #4912	; 0x1330
 800aa06:	443b      	add	r3, r7
 800aa08:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t122.im / 2.0;
 800aa0c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800aa10:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa14:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800aa18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa20:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t123.im == 0.0) {
 800aa24:	4b2c      	ldr	r3, [pc, #176]	; (800aad8 <G_q+0xa4f0>)
 800aa26:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa2a:	443a      	add	r2, r7
 800aa2c:	4413      	add	r3, r2
 800aa2e:	ed93 7b02 	vldr	d7, [r3, #8]
 800aa32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa3a:	d119      	bne.n	800aa70 <G_q+0xa488>
    t34_re = t123.re / 2.0;
 800aa3c:	4b26      	ldr	r3, [pc, #152]	; (800aad8 <G_q+0xa4f0>)
 800aa3e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa42:	443a      	add	r2, r7
 800aa44:	4413      	add	r3, r2
 800aa46:	ed93 6b00 	vldr	d6, [r3]
 800aa4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa52:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aa56:	443b      	add	r3, r7
 800aa58:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800aa5c:	f04f 0300 	mov.w	r3, #0
 800aa60:	f04f 0400 	mov.w	r4, #0
 800aa64:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800aa68:	443a      	add	r2, r7
 800aa6a:	e9c2 3400 	strd	r3, r4, [r2]
 800aa6e:	e055      	b.n	800ab1c <G_q+0xa534>
  } else if (t123.re == 0.0) {
 800aa70:	4b19      	ldr	r3, [pc, #100]	; (800aad8 <G_q+0xa4f0>)
 800aa72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa76:	443a      	add	r2, r7
 800aa78:	4413      	add	r3, r2
 800aa7a:	ed93 7b00 	vldr	d7, [r3]
 800aa7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa86:	d129      	bne.n	800aadc <G_q+0xa4f4>
    t34_re = 0.0;
 800aa88:	f04f 0300 	mov.w	r3, #0
 800aa8c:	f04f 0400 	mov.w	r4, #0
 800aa90:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800aa94:	443a      	add	r2, r7
 800aa96:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t123.im / 2.0;
 800aa9a:	4b0f      	ldr	r3, [pc, #60]	; (800aad8 <G_q+0xa4f0>)
 800aa9c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aaa0:	443a      	add	r2, r7
 800aaa2:	4413      	add	r3, r2
 800aaa4:	ed93 6b02 	vldr	d6, [r3, #8]
 800aaa8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aaac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aab0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aab4:	443b      	add	r3, r7
 800aab6:	ed83 7b00 	vstr	d7, [r3]
 800aaba:	e02f      	b.n	800ab1c <G_q+0xa534>
 800aabc:	f3af 8000 	nop.w
	...
 800aac8:	33145c07 	.word	0x33145c07
 800aacc:	3c81a626 	.word	0x3c81a626
 800aad0:	858a5d48 	.word	0x858a5d48
 800aad4:	394377ce 	.word	0x394377ce
 800aad8:	ffffee30 	.word	0xffffee30
  } else {
    t34_re = t123.re / 2.0;
 800aadc:	4bd0      	ldr	r3, [pc, #832]	; (800ae20 <G_q+0xa838>)
 800aade:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aae2:	443a      	add	r2, r7
 800aae4:	4413      	add	r3, r2
 800aae6:	ed93 6b00 	vldr	d6, [r3]
 800aaea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aaee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aaf2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aaf6:	443b      	add	r3, r7
 800aaf8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t123.im / 2.0;
 800aafc:	4bc8      	ldr	r3, [pc, #800]	; (800ae20 <G_q+0xa838>)
 800aafe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ab02:	443a      	add	r2, r7
 800ab04:	4413      	add	r3, r2
 800ab06:	ed93 6b02 	vldr	d6, [r3, #8]
 800ab0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ab12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ab16:	443b      	add	r3, r7
 800ab18:	ed83 7b00 	vstr	d7, [r3]
  }

  t60_re = (t13_re * t13_im - t76_re * t16_re) - (t20_im * t16_im - t12_re *
 800ab1c:	f241 3378 	movw	r3, #4984	; 0x1378
 800ab20:	443b      	add	r3, r7
 800ab22:	ed93 6b00 	vldr	d6, [r3]
 800ab26:	f241 3370 	movw	r3, #4976	; 0x1370
 800ab2a:	443b      	add	r3, r7
 800ab2c:	ed93 7b00 	vldr	d7, [r3]
 800ab30:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab34:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ab38:	443b      	add	r3, r7
 800ab3a:	ed93 5b00 	vldr	d5, [r3]
 800ab3e:	f241 3368 	movw	r3, #4968	; 0x1368
 800ab42:	443b      	add	r3, r7
 800ab44:	ed93 7b00 	vldr	d7, [r3]
 800ab48:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ab4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab50:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ab54:	ed93 5b00 	vldr	d5, [r3]
 800ab58:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ab5c:	ed93 7b00 	vldr	d7, [r3]
 800ab60:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ab64:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab68:	443b      	add	r3, r7
 800ab6a:	ed93 4b00 	vldr	d4, [r3]
 800ab6e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ab72:	443b      	add	r3, r7
 800ab74:	ed93 7b00 	vldr	d7, [r3]
 800ab78:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ab7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab80:	f241 2350 	movw	r3, #4688	; 0x1250
 800ab84:	443b      	add	r3, r7
 800ab86:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ab8a:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t76_re = (t13_re * t16_re + t76_re * t13_im) - (t20_im * t20_re + t12_re *
 800ab8e:	f241 3378 	movw	r3, #4984	; 0x1378
 800ab92:	443b      	add	r3, r7
 800ab94:	ed93 6b00 	vldr	d6, [r3]
 800ab98:	f241 3368 	movw	r3, #4968	; 0x1368
 800ab9c:	443b      	add	r3, r7
 800ab9e:	ed93 7b00 	vldr	d7, [r3]
 800aba2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aba6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800abaa:	443b      	add	r3, r7
 800abac:	ed93 5b00 	vldr	d5, [r3]
 800abb0:	f241 3370 	movw	r3, #4976	; 0x1370
 800abb4:	443b      	add	r3, r7
 800abb6:	ed93 7b00 	vldr	d7, [r3]
 800abba:	ee25 7b07 	vmul.f64	d7, d5, d7
 800abbe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800abc2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800abc6:	ed93 5b00 	vldr	d5, [r3]
 800abca:	f241 3348 	movw	r3, #4936	; 0x1348
 800abce:	443b      	add	r3, r7
 800abd0:	ed93 7b00 	vldr	d7, [r3]
 800abd4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800abd8:	f241 3388 	movw	r3, #5000	; 0x1388
 800abdc:	443b      	add	r3, r7
 800abde:	ed93 4b00 	vldr	d4, [r3]
 800abe2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800abe6:	ed93 7b00 	vldr	d7, [r3]
 800abea:	ee24 7b07 	vmul.f64	d7, d4, d7
 800abee:	ee35 7b07 	vadd.f64	d7, d5, d7
 800abf2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800abf6:	443b      	add	r3, r7
 800abf8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800abfc:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re += t34_re;
 800ac00:	f241 3330 	movw	r3, #4912	; 0x1330
 800ac04:	443b      	add	r3, r7
 800ac06:	ed93 6b00 	vldr	d6, [r3]
 800ac0a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ac0e:	443b      	add	r3, r7
 800ac10:	ed93 7b00 	vldr	d7, [r3]
 800ac14:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac18:	f241 3330 	movw	r3, #4912	; 0x1330
 800ac1c:	443b      	add	r3, r7
 800ac1e:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800ac22:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ac26:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800ac2a:	ed92 6b00 	vldr	d6, [r2]
 800ac2e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ac32:	443a      	add	r2, r7
 800ac34:	ed92 7b00 	vldr	d7, [r2]
 800ac38:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ac3c:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t160.re * 0.0 - t160.im * 0.5) - (t161.re * 0.0 - t161.im * 0.5);
 800ac40:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800ac44:	ed93 7b00 	vldr	d7, [r3]
 800ac48:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800ae18 <G_q+0xa830>
 800ac4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ac50:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800ac54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ac5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ac60:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac64:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800ac68:	ed93 7b00 	vldr	d7, [r3]
 800ac6c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800ae18 <G_q+0xa830>
 800ac70:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ac74:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800ac78:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac7c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ac80:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac88:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac8c:	f241 3368 	movw	r3, #4968	; 0x1368
 800ac90:	443b      	add	r3, r7
 800ac92:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t160.re * 0.5 + t160.im * 0.0) - (t161.re * 0.5 + t161.im * 0.0);
 800ac96:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800ac9a:	ed93 7b00 	vldr	d7, [r3]
 800ac9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800aca2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800aca6:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800acaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800acae:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800ae18 <G_q+0xa830>
 800acb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800acb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800acba:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800acbe:	ed93 7b00 	vldr	d7, [r3]
 800acc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800acc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800acca:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800acce:	ed93 7b02 	vldr	d7, [r3, #8]
 800acd2:	ed9f 4b51 	vldr	d4, [pc, #324]	; 800ae18 <G_q+0xa830>
 800acd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800acda:	ee35 7b07 	vadd.f64	d7, d5, d7
 800acde:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ace2:	f241 3318 	movw	r3, #4888	; 0x1318
 800ace6:	443b      	add	r3, r7
 800ace8:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t162.re * 0.0 - t162.im * 0.5) - (t163.re * 0.0 - t163.im * 0.5);
 800acec:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800acf0:	ed93 7b00 	vldr	d7, [r3]
 800acf4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800ae18 <G_q+0xa830>
 800acf8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800acfc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ad00:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad04:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad08:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ad0c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ad10:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ad14:	ed93 7b00 	vldr	d7, [r3]
 800ad18:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 800ae18 <G_q+0xa830>
 800ad1c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ad20:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ad24:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad28:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ad2c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad30:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ad34:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad38:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ad3c:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t162.re * 0.5 + t162.im * 0.0) - (t163.re * 0.5 + t163.im * 0.0);
 800ad40:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ad44:	ed93 7b00 	vldr	d7, [r3]
 800ad48:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ad4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ad50:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ad54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad58:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800ae18 <G_q+0xa830>
 800ad5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ad60:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ad64:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ad68:	ed93 7b00 	vldr	d7, [r3]
 800ad6c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad70:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ad74:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ad78:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad7c:	ed9f 4b26 	vldr	d4, [pc, #152]	; 800ae18 <G_q+0xa830>
 800ad80:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ad84:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ad88:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ad8c:	f241 3348 	movw	r3, #4936	; 0x1348
 800ad90:	443b      	add	r3, r7
 800ad92:	ed83 7b00 	vstr	d7, [r3]
  if (t164.im == 0.0) {
 800ad96:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800ad9a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ada2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada6:	d115      	bne.n	800add4 <G_q+0xa7ec>
    t20_im = t164.re / 2.0;
 800ada8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800adac:	ed93 6b00 	vldr	d6, [r3]
 800adb0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800adb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800adb8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800adbc:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	f04f 0400 	mov.w	r4, #0
 800adc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adcc:	443a      	add	r2, r7
 800adce:	e9c2 3400 	strd	r3, r4, [r2]
 800add2:	e040      	b.n	800ae56 <G_q+0xa86e>
  } else if (t164.re == 0.0) {
 800add4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800add8:	ed93 7b00 	vldr	d7, [r3]
 800addc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ade0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade4:	d11e      	bne.n	800ae24 <G_q+0xa83c>
    t20_im = 0.0;
 800ade6:	f04f 0300 	mov.w	r3, #0
 800adea:	f04f 0400 	mov.w	r4, #0
 800adee:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800adf2:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t164.im / 2.0;
 800adf6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800adfa:	ed93 6b02 	vldr	d6, [r3, #8]
 800adfe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae06:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae0a:	443b      	add	r3, r7
 800ae0c:	ed83 7b00 	vstr	d7, [r3]
 800ae10:	e021      	b.n	800ae56 <G_q+0xa86e>
 800ae12:	bf00      	nop
 800ae14:	f3af 8000 	nop.w
	...
 800ae20:	ffffee30 	.word	0xffffee30
  } else {
    t20_im = t164.re / 2.0;
 800ae24:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800ae28:	ed93 6b00 	vldr	d6, [r3]
 800ae2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae34:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ae38:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t164.im / 2.0;
 800ae3c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800ae40:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae4c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ae50:	443b      	add	r3, r7
 800ae52:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t165.im == 0.0) {
 800ae56:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ae5a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ae5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae66:	d116      	bne.n	800ae96 <G_q+0xa8ae>
    t34_re = t165.re / 2.0;
 800ae68:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ae6c:	ed93 6b00 	vldr	d6, [r3]
 800ae70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae78:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ae7c:	443b      	add	r3, r7
 800ae7e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ae82:	f04f 0300 	mov.w	r3, #0
 800ae86:	f04f 0400 	mov.w	r4, #0
 800ae8a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ae8e:	443a      	add	r2, r7
 800ae90:	e9c2 3400 	strd	r3, r4, [r2]
 800ae94:	e039      	b.n	800af0a <G_q+0xa922>
  } else if (t165.re == 0.0) {
 800ae96:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ae9a:	ed93 7b00 	vldr	d7, [r3]
 800ae9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aea6:	d116      	bne.n	800aed6 <G_q+0xa8ee>
    t34_re = 0.0;
 800aea8:	f04f 0300 	mov.w	r3, #0
 800aeac:	f04f 0400 	mov.w	r4, #0
 800aeb0:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800aeb4:	443a      	add	r2, r7
 800aeb6:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t165.im / 2.0;
 800aeba:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800aebe:	ed93 6b02 	vldr	d6, [r3, #8]
 800aec2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aec6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aeca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aece:	443b      	add	r3, r7
 800aed0:	ed83 7b00 	vstr	d7, [r3]
 800aed4:	e019      	b.n	800af0a <G_q+0xa922>
  } else {
    t34_re = t165.re / 2.0;
 800aed6:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800aeda:	ed93 6b00 	vldr	d6, [r3]
 800aede:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aee2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aee6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aeea:	443b      	add	r3, r7
 800aeec:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t165.im / 2.0;
 800aef0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800aef4:	ed93 6b02 	vldr	d6, [r3, #8]
 800aef8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aefc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af00:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800af04:	443b      	add	r3, r7
 800af06:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t166.im == 0.0) {
 800af0a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800af0e:	ed93 7b02 	vldr	d7, [r3, #8]
 800af12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af1a:	d115      	bne.n	800af48 <G_q+0xa960>
    t12_im = t166.re / 2.0;
 800af1c:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800af20:	ed93 6b00 	vldr	d6, [r3]
 800af24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af2c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800af30:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800af34:	f04f 0300 	mov.w	r3, #0
 800af38:	f04f 0400 	mov.w	r4, #0
 800af3c:	f241 3238 	movw	r2, #4920	; 0x1338
 800af40:	443a      	add	r2, r7
 800af42:	e9c2 3400 	strd	r3, r4, [r2]
 800af46:	e037      	b.n	800afb8 <G_q+0xa9d0>
  } else if (t166.re == 0.0) {
 800af48:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800af4c:	ed93 7b00 	vldr	d7, [r3]
 800af50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af58:	d115      	bne.n	800af86 <G_q+0xa99e>
    t12_im = 0.0;
 800af5a:	f04f 0300 	mov.w	r3, #0
 800af5e:	f04f 0400 	mov.w	r4, #0
 800af62:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800af66:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t166.im / 2.0;
 800af6a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800af6e:	ed93 6b02 	vldr	d6, [r3, #8]
 800af72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af7a:	f241 3338 	movw	r3, #4920	; 0x1338
 800af7e:	443b      	add	r3, r7
 800af80:	ed83 7b00 	vstr	d7, [r3]
 800af84:	e018      	b.n	800afb8 <G_q+0xa9d0>
  } else {
    t12_im = t166.re / 2.0;
 800af86:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800af8a:	ed93 6b00 	vldr	d6, [r3]
 800af8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af96:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800af9a:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t166.im / 2.0;
 800af9e:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800afa2:	ed93 6b02 	vldr	d6, [r3, #8]
 800afa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afae:	f241 3338 	movw	r3, #4920	; 0x1338
 800afb2:	443b      	add	r3, r7
 800afb4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t167.im == 0.0) {
 800afb8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800afbc:	ed93 7b02 	vldr	d7, [r3, #8]
 800afc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afc8:	d116      	bne.n	800aff8 <G_q+0xaa10>
    t13_re = t167.re / 2.0;
 800afca:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800afce:	ed93 6b00 	vldr	d6, [r3]
 800afd2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afda:	f241 3378 	movw	r3, #4984	; 0x1378
 800afde:	443b      	add	r3, r7
 800afe0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800afe4:	f04f 0300 	mov.w	r3, #0
 800afe8:	f04f 0400 	mov.w	r4, #0
 800afec:	f241 3270 	movw	r2, #4976	; 0x1370
 800aff0:	443a      	add	r2, r7
 800aff2:	e9c2 3400 	strd	r3, r4, [r2]
 800aff6:	e039      	b.n	800b06c <G_q+0xaa84>
  } else if (t167.re == 0.0) {
 800aff8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800affc:	ed93 7b00 	vldr	d7, [r3]
 800b000:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b008:	d116      	bne.n	800b038 <G_q+0xaa50>
    t13_re = 0.0;
 800b00a:	f04f 0300 	mov.w	r3, #0
 800b00e:	f04f 0400 	mov.w	r4, #0
 800b012:	f241 3278 	movw	r2, #4984	; 0x1378
 800b016:	443a      	add	r2, r7
 800b018:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t167.im / 2.0;
 800b01c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800b020:	ed93 6b02 	vldr	d6, [r3, #8]
 800b024:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b028:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b02c:	f241 3370 	movw	r3, #4976	; 0x1370
 800b030:	443b      	add	r3, r7
 800b032:	ed83 7b00 	vstr	d7, [r3]
 800b036:	e019      	b.n	800b06c <G_q+0xaa84>
  } else {
    t13_re = t167.re / 2.0;
 800b038:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800b03c:	ed93 6b00 	vldr	d6, [r3]
 800b040:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b044:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b048:	f241 3378 	movw	r3, #4984	; 0x1378
 800b04c:	443b      	add	r3, r7
 800b04e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t167.im / 2.0;
 800b052:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800b056:	ed93 6b02 	vldr	d6, [r3, #8]
 800b05a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b05e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b062:	f241 3370 	movw	r3, #4976	; 0x1370
 800b066:	443b      	add	r3, r7
 800b068:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800b06c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b070:	ed93 6b00 	vldr	d6, [r3]
 800b074:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b078:	443b      	add	r3, r7
 800b07a:	ed93 7b00 	vldr	d7, [r3]
 800b07e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b082:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b086:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800b08a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b08e:	443b      	add	r3, r7
 800b090:	ed93 6b00 	vldr	d6, [r3]
 800b094:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b098:	443b      	add	r3, r7
 800b09a:	ed93 7b00 	vldr	d7, [r3]
 800b09e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b0a2:	f241 3388 	movw	r3, #5000	; 0x1388
 800b0a6:	443b      	add	r3, r7
 800b0a8:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800b0ac:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b0b0:	ed93 6b00 	vldr	d6, [r3]
 800b0b4:	f241 3378 	movw	r3, #4984	; 0x1378
 800b0b8:	443b      	add	r3, r7
 800b0ba:	ed93 7b00 	vldr	d7, [r3]
 800b0be:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b0c2:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800b450 <G_q+0xae68>
 800b0c6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b0ca:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b0ce:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800b0d2:	f241 3338 	movw	r3, #4920	; 0x1338
 800b0d6:	443b      	add	r3, r7
 800b0d8:	ed93 6b00 	vldr	d6, [r3]
 800b0dc:	f241 3370 	movw	r3, #4976	; 0x1370
 800b0e0:	443b      	add	r3, r7
 800b0e2:	ed93 7b00 	vldr	d7, [r3]
 800b0e6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b0ea:	f241 3338 	movw	r3, #4920	; 0x1338
 800b0ee:	443b      	add	r3, r7
 800b0f0:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t16_re * t16_im - t85_im * t20_re) + (t20_im * t12_im - t12_re *
 800b0f4:	f241 3368 	movw	r3, #4968	; 0x1368
 800b0f8:	443b      	add	r3, r7
 800b0fa:	ed93 6b00 	vldr	d6, [r3]
 800b0fe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b102:	ed93 7b00 	vldr	d7, [r3]
 800b106:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b10a:	f241 3318 	movw	r3, #4888	; 0x1318
 800b10e:	443b      	add	r3, r7
 800b110:	ed93 5b00 	vldr	d5, [r3]
 800b114:	f241 3348 	movw	r3, #4936	; 0x1348
 800b118:	443b      	add	r3, r7
 800b11a:	ed93 7b00 	vldr	d7, [r3]
 800b11e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b122:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b126:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b12a:	ed93 5b00 	vldr	d5, [r3]
 800b12e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b132:	ed93 7b00 	vldr	d7, [r3]
 800b136:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b13a:	f241 3388 	movw	r3, #5000	; 0x1388
 800b13e:	443b      	add	r3, r7
 800b140:	ed93 4b00 	vldr	d4, [r3]
 800b144:	f241 3338 	movw	r3, #4920	; 0x1338
 800b148:	443b      	add	r3, r7
 800b14a:	ed93 7b00 	vldr	d7, [r3]
 800b14e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b152:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b156:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b15a:	f241 3378 	movw	r3, #4984	; 0x1378
 800b15e:	443b      	add	r3, r7
 800b160:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t85_im = (t16_re * t20_re + t85_im * t16_im) + (t20_im * b_t10_re + t12_re *
 800b164:	f241 3368 	movw	r3, #4968	; 0x1368
 800b168:	443b      	add	r3, r7
 800b16a:	ed93 6b00 	vldr	d6, [r3]
 800b16e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b172:	443b      	add	r3, r7
 800b174:	ed93 7b00 	vldr	d7, [r3]
 800b178:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b17c:	f241 3318 	movw	r3, #4888	; 0x1318
 800b180:	443b      	add	r3, r7
 800b182:	ed93 5b00 	vldr	d5, [r3]
 800b186:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b18a:	ed93 7b00 	vldr	d7, [r3]
 800b18e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b192:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b196:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b19a:	ed93 5b00 	vldr	d5, [r3]
 800b19e:	f241 3338 	movw	r3, #4920	; 0x1338
 800b1a2:	443b      	add	r3, r7
 800b1a4:	ed93 7b00 	vldr	d7, [r3]
 800b1a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b1ac:	f241 3388 	movw	r3, #5000	; 0x1388
 800b1b0:	443b      	add	r3, r7
 800b1b2:	ed93 4b00 	vldr	d4, [r3]
 800b1b6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b1ba:	ed93 7b00 	vldr	d7, [r3]
 800b1be:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b1c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b1c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b1ca:	f241 3318 	movw	r3, #4888	; 0x1318
 800b1ce:	443b      	add	r3, r7
 800b1d0:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t34_re = (t158.re * 0.0 - t158.im * 0.5) - (t159.re * 0.0 - t159.im * 0.5);
 800b1d4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b1d8:	ed93 7b00 	vldr	d7, [r3]
 800b1dc:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800b458 <G_q+0xae70>
 800b1e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b1e4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b1e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1ec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b1f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b1f8:	4b9f      	ldr	r3, [pc, #636]	; (800b478 <G_q+0xae90>)
 800b1fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b1fe:	443a      	add	r2, r7
 800b200:	4413      	add	r3, r2
 800b202:	ed93 7b00 	vldr	d7, [r3]
 800b206:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800b458 <G_q+0xae70>
 800b20a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b20e:	4b9a      	ldr	r3, [pc, #616]	; (800b478 <G_q+0xae90>)
 800b210:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b214:	443a      	add	r2, r7
 800b216:	4413      	add	r3, r2
 800b218:	ed93 7b02 	vldr	d7, [r3, #8]
 800b21c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b220:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b224:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b228:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b22c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b230:	443b      	add	r3, r7
 800b232:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t158.re * 0.5 + t158.im * 0.0) - (t159.re * 0.5 + t159.im * 0.0);
 800b236:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b23a:	ed93 7b00 	vldr	d7, [r3]
 800b23e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b242:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b246:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800b24a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b24e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 800b458 <G_q+0xae70>
 800b252:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b256:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b25a:	4b87      	ldr	r3, [pc, #540]	; (800b478 <G_q+0xae90>)
 800b25c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b260:	443a      	add	r2, r7
 800b262:	4413      	add	r3, r2
 800b264:	ed93 7b00 	vldr	d7, [r3]
 800b268:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b26c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b270:	4b81      	ldr	r3, [pc, #516]	; (800b478 <G_q+0xae90>)
 800b272:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b276:	443a      	add	r2, r7
 800b278:	4413      	add	r3, r2
 800b27a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b27e:	ed9f 4b76 	vldr	d4, [pc, #472]	; 800b458 <G_q+0xae70>
 800b282:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b286:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b28a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b28e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b292:	443b      	add	r3, r7
 800b294:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800b298:	4b78      	ldr	r3, [pc, #480]	; (800b47c <G_q+0xae94>)
 800b29a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b29e:	443a      	add	r2, r7
 800b2a0:	4413      	add	r3, r2
 800b2a2:	ed93 7b00 	vldr	d7, [r3]
 800b2a6:	eeb1 6b47 	vneg.f64	d6, d7
 800b2aa:	f241 2370 	movw	r3, #4720	; 0x1270
 800b2ae:	443b      	add	r3, r7
 800b2b0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800b2b4:	ed92 5b00 	vldr	d5, [r2]
 800b2b8:	ed93 7b00 	vldr	d7, [r3]
 800b2bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b2c0:	f241 2368 	movw	r3, #4712	; 0x1268
 800b2c4:	443b      	add	r3, r7
 800b2c6:	f241 3228 	movw	r2, #4904	; 0x1328
 800b2ca:	443a      	add	r2, r7
 800b2cc:	ed92 4b00 	vldr	d4, [r2]
 800b2d0:	ed93 7b00 	vldr	d7, [r3]
 800b2d4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b2d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b2dc:	ed9f 5b60 	vldr	d5, [pc, #384]	; 800b460 <G_q+0xae78>
 800b2e0:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800b2e4:	f241 2358 	movw	r3, #4696	; 0x1258
 800b2e8:	443b      	add	r3, r7
 800b2ea:	ed93 4b00 	vldr	d4, [r3]
 800b2ee:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800b2f2:	ed93 7b00 	vldr	d7, [r3]
 800b2f6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b2fa:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800b2fe:	f241 3208 	movw	r2, #4872	; 0x1308
 800b302:	443a      	add	r2, r7
 800b304:	ed92 3b00 	vldr	d3, [r2]
 800b308:	ed93 7b00 	vldr	d7, [r3]
 800b30c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b310:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b314:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800b468 <G_q+0xae80>
 800b318:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800b31c:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800b320:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b324:	443b      	add	r3, r7
 800b326:	ed93 4b00 	vldr	d4, [r3]
 800b32a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b32e:	443b      	add	r3, r7
 800b330:	ed93 7b00 	vldr	d7, [r3]
 800b334:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b338:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b33c:	443b      	add	r3, r7
 800b33e:	ed93 3b00 	vldr	d3, [r3]
 800b342:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b346:	443b      	add	r3, r7
 800b348:	ed93 7b00 	vldr	d7, [r3]
 800b34c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b350:	ee34 7b47 	vsub.f64	d7, d4, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800b354:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b468 <G_q+0xae80>
 800b358:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800b35c:	ee35 5b07 	vadd.f64	d5, d5, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800b360:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800b364:	443b      	add	r3, r7
 800b366:	ed93 4b00 	vldr	d4, [r3]
 800b36a:	f241 3310 	movw	r3, #4880	; 0x1310
 800b36e:	443b      	add	r3, r7
 800b370:	ed93 7b00 	vldr	d7, [r3]
 800b374:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b378:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800b37c:	443a      	add	r2, r7
 800b37e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800b382:	ed92 3b00 	vldr	d3, [r2]
 800b386:	ed93 7b00 	vldr	d7, [r3]
 800b38a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b38e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b392:	ed9f 4b33 	vldr	d4, [pc, #204]	; 800b460 <G_q+0xae78>
 800b396:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b39a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800b39e:	f241 2350 	movw	r3, #4688	; 0x1250
 800b3a2:	443b      	add	r3, r7
 800b3a4:	ed93 4b00 	vldr	d4, [r3]
 800b3a8:	f241 3330 	movw	r3, #4912	; 0x1330
 800b3ac:	443b      	add	r3, r7
 800b3ae:	ed93 7b00 	vldr	d7, [r3]
 800b3b2:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b3b6:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800b3ba:	443a      	add	r2, r7
 800b3bc:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800b3c0:	ed92 3b00 	vldr	d3, [r2]
 800b3c4:	ed93 7b00 	vldr	d7, [r3]
 800b3c8:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b3cc:	ee34 7b47 	vsub.f64	d7, d4, d7
 800b3d0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800b470 <G_q+0xae88>
 800b3d4:	ee27 7b04 	vmul.f64	d7, d7, d4
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800b3d8:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800b3dc:	f241 3378 	movw	r3, #4984	; 0x1378
 800b3e0:	443b      	add	r3, r7
 800b3e2:	ed93 4b00 	vldr	d4, [r3]
 800b3e6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b3ea:	443b      	add	r3, r7
 800b3ec:	ed93 7b00 	vldr	d7, [r3]
 800b3f0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800b3f4:	f241 3318 	movw	r3, #4888	; 0x1318
 800b3f8:	443b      	add	r3, r7
 800b3fa:	ed93 3b00 	vldr	d3, [r3]
 800b3fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b402:	443b      	add	r3, r7
 800b404:	ed93 7b00 	vldr	d7, [r3]
 800b408:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800b40c:	ee34 7b47 	vsub.f64	d7, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800b410:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800b470 <G_q+0xae88>
 800b414:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800b418:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800b41c:	4b18      	ldr	r3, [pc, #96]	; (800b480 <G_q+0xae98>)
 800b41e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b422:	443a      	add	r2, r7
 800b424:	4413      	add	r3, r2
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3320      	adds	r3, #32
 800b42a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b42e:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800b432:	4b12      	ldr	r3, [pc, #72]	; (800b47c <G_q+0xae94>)
 800b434:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b438:	443a      	add	r2, r7
 800b43a:	4413      	add	r3, r2
 800b43c:	ed93 7b00 	vldr	d7, [r3]
 800b440:	eeb1 6b47 	vneg.f64	d6, d7
 800b444:	f241 2368 	movw	r3, #4712	; 0x1268
 800b448:	443b      	add	r3, r7
 800b44a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800b44e:	e019      	b.n	800b484 <G_q+0xae9c>
 800b450:	858a5d48 	.word	0x858a5d48
 800b454:	394377ce 	.word	0x394377ce
	...
 800b460:	75f6fd22 	.word	0x75f6fd22
 800b464:	3fc19ce0 	.word	0x3fc19ce0
 800b468:	9374bc6a 	.word	0x9374bc6a
 800b46c:	3f960418 	.word	0x3f960418
 800b470:	2ba953a1 	.word	0x2ba953a1
 800b474:	3c3848f9 	.word	0x3c3848f9
 800b478:	ffffee90 	.word	0xffffee90
 800b47c:	ffffec58 	.word	0xffffec58
 800b480:	ffffec34 	.word	0xffffec34
 800b484:	ed92 5b00 	vldr	d5, [r2]
 800b488:	ed93 7b00 	vldr	d7, [r3]
 800b48c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b490:	f241 2370 	movw	r3, #4720	; 0x1270
 800b494:	443b      	add	r3, r7
 800b496:	f241 3228 	movw	r2, #4904	; 0x1328
 800b49a:	443a      	add	r2, r7
 800b49c:	ed92 4b00 	vldr	d4, [r2]
 800b4a0:	ed93 7b00 	vldr	d7, [r3]
 800b4a4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b4a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b4ac:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800b748 <G_q+0xb160>
 800b4b0:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800b4b4:	f241 2258 	movw	r2, #4696	; 0x1258
 800b4b8:	443a      	add	r2, r7
 800b4ba:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800b4be:	ed92 4b00 	vldr	d4, [r2]
 800b4c2:	ed93 7b00 	vldr	d7, [r3]
 800b4c6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b4ca:	f241 3308 	movw	r3, #4872	; 0x1308
 800b4ce:	443b      	add	r3, r7
 800b4d0:	ed93 3b00 	vldr	d3, [r3]
 800b4d4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800b4d8:	ed93 7b00 	vldr	d7, [r3]
 800b4dc:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b4e0:	ee34 7b07 	vadd.f64	d7, d4, d7
 800b4e4:	ed9f 4b9a 	vldr	d4, [pc, #616]	; 800b750 <G_q+0xb168>
 800b4e8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800b4ec:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800b4f0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b4f4:	443b      	add	r3, r7
 800b4f6:	ed93 4b00 	vldr	d4, [r3]
 800b4fa:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b4fe:	443b      	add	r3, r7
 800b500:	ed93 7b00 	vldr	d7, [r3]
 800b504:	ee24 4b07 	vmul.f64	d4, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800b508:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b50c:	443b      	add	r3, r7
 800b50e:	ed93 3b00 	vldr	d3, [r3]
 800b512:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b516:	443b      	add	r3, r7
 800b518:	ed93 7b00 	vldr	d7, [r3]
 800b51c:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800b520:	ee34 7b07 	vadd.f64	d7, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800b524:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 800b750 <G_q+0xb168>
 800b528:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800b52c:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800b530:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800b534:	443a      	add	r2, r7
 800b536:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800b53a:	ed92 4b00 	vldr	d4, [r2]
 800b53e:	ed93 7b00 	vldr	d7, [r3]
 800b542:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b546:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800b54a:	443b      	add	r3, r7
 800b54c:	ed93 3b00 	vldr	d3, [r3]
 800b550:	f241 3310 	movw	r3, #4880	; 0x1310
 800b554:	443b      	add	r3, r7
 800b556:	ed93 7b00 	vldr	d7, [r3]
 800b55a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b55e:	ee34 7b07 	vadd.f64	d7, d4, d7
 800b562:	ed9f 4b79 	vldr	d4, [pc, #484]	; 800b748 <G_q+0xb160>
 800b566:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b56a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800b56e:	f241 2250 	movw	r2, #4688	; 0x1250
 800b572:	443a      	add	r2, r7
 800b574:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800b578:	ed92 4b00 	vldr	d4, [r2]
 800b57c:	ed93 7b00 	vldr	d7, [r3]
 800b580:	ee24 4b07 	vmul.f64	d4, d4, d7
 800b584:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b588:	443b      	add	r3, r7
 800b58a:	ed93 3b00 	vldr	d3, [r3]
 800b58e:	f241 3330 	movw	r3, #4912	; 0x1330
 800b592:	443b      	add	r3, r7
 800b594:	ed93 7b00 	vldr	d7, [r3]
 800b598:	ee23 7b07 	vmul.f64	d7, d3, d7
 800b59c:	ee34 7b07 	vadd.f64	d7, d4, d7
 800b5a0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800b758 <G_q+0xb170>
 800b5a4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800b5a8:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800b5ac:	f241 3378 	movw	r3, #4984	; 0x1378
 800b5b0:	443b      	add	r3, r7
 800b5b2:	ed93 4b00 	vldr	d4, [r3]
 800b5b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b5ba:	443b      	add	r3, r7
 800b5bc:	ed93 7b00 	vldr	d7, [r3]
 800b5c0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800b5c4:	f241 3318 	movw	r3, #4888	; 0x1318
 800b5c8:	443b      	add	r3, r7
 800b5ca:	ed93 3b00 	vldr	d3, [r3]
 800b5ce:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b5d2:	443b      	add	r3, r7
 800b5d4:	ed93 7b00 	vldr	d7, [r3]
 800b5d8:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800b5dc:	ee34 7b07 	vadd.f64	d7, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800b5e0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800b758 <G_q+0xb170>
 800b5e4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800b5e8:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800b5ec:	4b5c      	ldr	r3, [pc, #368]	; (800b760 <G_q+0xb178>)
 800b5ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b5f2:	443a      	add	r2, r7
 800b5f4:	4413      	add	r3, r2
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	3320      	adds	r3, #32
 800b5fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 800b5fe:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t172.im == 0.0) {
 800b602:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b606:	ed93 7b02 	vldr	d7, [r3, #8]
 800b60a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b612:	d115      	bne.n	800b640 <G_q+0xb058>
    t85_im = t172.re / 2.0;
 800b614:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b618:	ed93 6b00 	vldr	d6, [r3]
 800b61c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b620:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b624:	f241 3318 	movw	r3, #4888	; 0x1318
 800b628:	443b      	add	r3, r7
 800b62a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 800b62e:	f04f 0300 	mov.w	r3, #0
 800b632:	f04f 0400 	mov.w	r4, #0
 800b636:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800b63a:	e9c2 3400 	strd	r3, r4, [r2]
 800b63e:	e037      	b.n	800b6b0 <G_q+0xb0c8>
  } else if (t172.re == 0.0) {
 800b640:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b644:	ed93 7b00 	vldr	d7, [r3]
 800b648:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b64c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b650:	d115      	bne.n	800b67e <G_q+0xb096>
    t85_im = 0.0;
 800b652:	f04f 0300 	mov.w	r3, #0
 800b656:	f04f 0400 	mov.w	r4, #0
 800b65a:	f241 3218 	movw	r2, #4888	; 0x1318
 800b65e:	443a      	add	r2, r7
 800b660:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t172.im / 2.0;
 800b664:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b668:	ed93 6b02 	vldr	d6, [r3, #8]
 800b66c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b670:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b674:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800b678:	ed83 7b00 	vstr	d7, [r3]
 800b67c:	e018      	b.n	800b6b0 <G_q+0xb0c8>
  } else {
    t85_im = t172.re / 2.0;
 800b67e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b682:	ed93 6b00 	vldr	d6, [r3]
 800b686:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b68a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b68e:	f241 3318 	movw	r3, #4888	; 0x1318
 800b692:	443b      	add	r3, r7
 800b694:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t172.im / 2.0;
 800b698:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800b69c:	ed93 6b02 	vldr	d6, [r3, #8]
 800b6a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b6a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6a8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800b6ac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t173.im == 0.0) {
 800b6b0:	4b2c      	ldr	r3, [pc, #176]	; (800b764 <G_q+0xb17c>)
 800b6b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b6b6:	443a      	add	r2, r7
 800b6b8:	4413      	add	r3, r2
 800b6ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800b6be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6c6:	d119      	bne.n	800b6fc <G_q+0xb114>
    t34_re = t173.re / 2.0;
 800b6c8:	4b26      	ldr	r3, [pc, #152]	; (800b764 <G_q+0xb17c>)
 800b6ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b6ce:	443a      	add	r2, r7
 800b6d0:	4413      	add	r3, r2
 800b6d2:	ed93 6b00 	vldr	d6, [r3]
 800b6d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b6da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b6de:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b6e2:	443b      	add	r3, r7
 800b6e4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b6e8:	f04f 0300 	mov.w	r3, #0
 800b6ec:	f04f 0400 	mov.w	r4, #0
 800b6f0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b6f4:	443a      	add	r2, r7
 800b6f6:	e9c2 3400 	strd	r3, r4, [r2]
 800b6fa:	e055      	b.n	800b7a8 <G_q+0xb1c0>
  } else if (t173.re == 0.0) {
 800b6fc:	4b19      	ldr	r3, [pc, #100]	; (800b764 <G_q+0xb17c>)
 800b6fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b702:	443a      	add	r2, r7
 800b704:	4413      	add	r3, r2
 800b706:	ed93 7b00 	vldr	d7, [r3]
 800b70a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b712:	d129      	bne.n	800b768 <G_q+0xb180>
    t34_re = 0.0;
 800b714:	f04f 0300 	mov.w	r3, #0
 800b718:	f04f 0400 	mov.w	r4, #0
 800b71c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b720:	443a      	add	r2, r7
 800b722:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t173.im / 2.0;
 800b726:	4b0f      	ldr	r3, [pc, #60]	; (800b764 <G_q+0xb17c>)
 800b728:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b72c:	443a      	add	r2, r7
 800b72e:	4413      	add	r3, r2
 800b730:	ed93 6b02 	vldr	d6, [r3, #8]
 800b734:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b73c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b740:	443b      	add	r3, r7
 800b742:	ed83 7b00 	vstr	d7, [r3]
 800b746:	e02f      	b.n	800b7a8 <G_q+0xb1c0>
 800b748:	75f6fd22 	.word	0x75f6fd22
 800b74c:	3fc19ce0 	.word	0x3fc19ce0
 800b750:	9374bc6a 	.word	0x9374bc6a
 800b754:	3f960418 	.word	0x3f960418
 800b758:	2ba953a1 	.word	0x2ba953a1
 800b75c:	3c3848f9 	.word	0x3c3848f9
 800b760:	ffffec34 	.word	0xffffec34
 800b764:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t34_re = t173.re / 2.0;
 800b768:	4bb5      	ldr	r3, [pc, #724]	; (800ba40 <G_q+0xb458>)
 800b76a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b76e:	443a      	add	r2, r7
 800b770:	4413      	add	r3, r2
 800b772:	ed93 6b00 	vldr	d6, [r3]
 800b776:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b77a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b77e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b782:	443b      	add	r3, r7
 800b784:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t173.im / 2.0;
 800b788:	4bad      	ldr	r3, [pc, #692]	; (800ba40 <G_q+0xb458>)
 800b78a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b78e:	443a      	add	r2, r7
 800b790:	4413      	add	r3, r2
 800b792:	ed93 6b02 	vldr	d6, [r3, #8]
 800b796:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b79a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b79e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b7a2:	443b      	add	r3, r7
 800b7a4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800b7a8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b7ac:	ed93 7b00 	vldr	d7, [r3]
 800b7b0:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 800ba30 <G_q+0xb448>
 800b7b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7b8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b7bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7c0:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800ba38 <G_q+0xb450>
 800b7c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b7cc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b7d0:	ed93 7b00 	vldr	d7, [r3]
 800b7d4:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800ba30 <G_q+0xb448>
 800b7d8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t183.im * 3.061616997868383E-17);
 800b7dc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b7e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7e4:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800ba38 <G_q+0xb450>
 800b7e8:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800b7ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b7f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b7f4:	f241 3368 	movw	r3, #4968	; 0x1368
 800b7f8:	443b      	add	r3, r7
 800b7fa:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800b7fe:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b802:	ed93 7b00 	vldr	d7, [r3]
 800b806:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800ba38 <G_q+0xb450>
 800b80a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b80e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800b812:	ed93 7b02 	vldr	d7, [r3, #8]
 800b816:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800ba30 <G_q+0xb448>
 800b81a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b81e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b822:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b826:	ed93 7b00 	vldr	d7, [r3]
 800b82a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800ba38 <G_q+0xb450>
 800b82e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t183.im * 0.0);
 800b832:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800b836:	ed93 7b02 	vldr	d7, [r3, #8]
 800b83a:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 800ba30 <G_q+0xb448>
 800b83e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b842:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800b846:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b84a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b84e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t180.re * 0.0 - t180.im * 0.5) - (t181.re * 0.0 - t181.im * 0.5);
 800b852:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800b856:	ed93 7b00 	vldr	d7, [r3]
 800b85a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800ba30 <G_q+0xb448>
 800b85e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b862:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800b866:	ed93 7b02 	vldr	d7, [r3, #8]
 800b86a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b86e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b872:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b876:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800b87a:	ed93 7b00 	vldr	d7, [r3]
 800b87e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ba30 <G_q+0xb448>
 800b882:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b886:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800b88a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b88e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b892:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b896:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b89a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b89e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b8a2:	443b      	add	r3, r7
 800b8a4:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t180.re * 0.5 + t180.im * 0.0) - (t181.re * 0.5 + t181.im * 0.0);
 800b8a8:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800b8ac:	ed93 7b00 	vldr	d7, [r3]
 800b8b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b8b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b8b8:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800b8bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8c0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800ba30 <G_q+0xb448>
 800b8c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b8c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b8cc:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800b8d0:	ed93 7b00 	vldr	d7, [r3]
 800b8d4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b8d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b8dc:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800b8e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8e4:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800ba30 <G_q+0xb448>
 800b8e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b8ec:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b8f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8f4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b8f8:	ed83 7b00 	vstr	d7, [r3]
  if (t178.im == 0.0) {
 800b8fc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b900:	ed93 7b02 	vldr	d7, [r3, #8]
 800b904:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b90c:	d115      	bne.n	800b93a <G_q+0xb352>
    t12_re = t178.re / 2.0;
 800b90e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b912:	ed93 6b00 	vldr	d6, [r3]
 800b916:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b91a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b91e:	f241 3388 	movw	r3, #5000	; 0x1388
 800b922:	443b      	add	r3, r7
 800b924:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800b928:	f04f 0300 	mov.w	r3, #0
 800b92c:	f04f 0400 	mov.w	r4, #0
 800b930:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800b934:	e9c2 3400 	strd	r3, r4, [r2]
 800b938:	e037      	b.n	800b9aa <G_q+0xb3c2>
  } else if (t178.re == 0.0) {
 800b93a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b93e:	ed93 7b00 	vldr	d7, [r3]
 800b942:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b94a:	d115      	bne.n	800b978 <G_q+0xb390>
    t12_re = 0.0;
 800b94c:	f04f 0300 	mov.w	r3, #0
 800b950:	f04f 0400 	mov.w	r4, #0
 800b954:	f241 3288 	movw	r2, #5000	; 0x1388
 800b958:	443a      	add	r2, r7
 800b95a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t178.im / 2.0;
 800b95e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b962:	ed93 6b02 	vldr	d6, [r3, #8]
 800b966:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b96a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b96e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b972:	ed83 7b00 	vstr	d7, [r3]
 800b976:	e018      	b.n	800b9aa <G_q+0xb3c2>
  } else {
    t12_re = t178.re / 2.0;
 800b978:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b97c:	ed93 6b00 	vldr	d6, [r3]
 800b980:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b984:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b988:	f241 3388 	movw	r3, #5000	; 0x1388
 800b98c:	443b      	add	r3, r7
 800b98e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t178.im / 2.0;
 800b992:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800b996:	ed93 6b02 	vldr	d6, [r3, #8]
 800b99a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b99e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9a2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b9a6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t179.im == 0.0) {
 800b9aa:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800b9ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ba:	d116      	bne.n	800b9ea <G_q+0xb402>
    t13_re = t179.re / 2.0;
 800b9bc:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800b9c0:	ed93 6b00 	vldr	d6, [r3]
 800b9c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9cc:	f241 3378 	movw	r3, #4984	; 0x1378
 800b9d0:	443b      	add	r3, r7
 800b9d2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800b9d6:	f04f 0300 	mov.w	r3, #0
 800b9da:	f04f 0400 	mov.w	r4, #0
 800b9de:	f241 3270 	movw	r2, #4976	; 0x1370
 800b9e2:	443a      	add	r2, r7
 800b9e4:	e9c2 3400 	strd	r3, r4, [r2]
 800b9e8:	e046      	b.n	800ba78 <G_q+0xb490>
  } else if (t179.re == 0.0) {
 800b9ea:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800b9ee:	ed93 7b00 	vldr	d7, [r3]
 800b9f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9fa:	d123      	bne.n	800ba44 <G_q+0xb45c>
    t13_re = 0.0;
 800b9fc:	f04f 0300 	mov.w	r3, #0
 800ba00:	f04f 0400 	mov.w	r4, #0
 800ba04:	f241 3278 	movw	r2, #4984	; 0x1378
 800ba08:	443a      	add	r2, r7
 800ba0a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t179.im / 2.0;
 800ba0e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800ba12:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba1e:	f241 3370 	movw	r3, #4976	; 0x1370
 800ba22:	443b      	add	r3, r7
 800ba24:	ed83 7b00 	vstr	d7, [r3]
 800ba28:	e026      	b.n	800ba78 <G_q+0xb490>
 800ba2a:	bf00      	nop
 800ba2c:	f3af 8000 	nop.w
	...
 800ba38:	33145c07 	.word	0x33145c07
 800ba3c:	3c81a626 	.word	0x3c81a626
 800ba40:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t13_re = t179.re / 2.0;
 800ba44:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800ba48:	ed93 6b00 	vldr	d6, [r3]
 800ba4c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba54:	f241 3378 	movw	r3, #4984	; 0x1378
 800ba58:	443b      	add	r3, r7
 800ba5a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t179.im / 2.0;
 800ba5e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800ba62:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba6e:	f241 3370 	movw	r3, #4976	; 0x1370
 800ba72:	443b      	add	r3, r7
 800ba74:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t176.re * 3.061616997868383E-17 + t177.re * 3.061616997868383E-17;
 800ba78:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800ba7c:	ed93 7b00 	vldr	d7, [r3]
 800ba80:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 800bdc8 <G_q+0xb7e0>
 800ba84:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ba88:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800ba8c:	ed93 7b00 	vldr	d7, [r3]
 800ba90:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800bdc8 <G_q+0xb7e0>
 800ba94:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ba98:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba9c:	f241 3330 	movw	r3, #4912	; 0x1330
 800baa0:	443b      	add	r3, r7
 800baa2:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t176.im * 3.061616997868383E-17 + t177.im * 3.061616997868383E-17;
 800baa6:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800baaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800baae:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 800bdc8 <G_q+0xb7e0>
 800bab2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bab6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800baba:	ed93 7b02 	vldr	d7, [r3, #8]
 800babe:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 800bdc8 <G_q+0xb7e0>
 800bac2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bac6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800baca:	f241 3310 	movw	r3, #4880	; 0x1310
 800bace:	443b      	add	r3, r7
 800bad0:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t13_re) + 7.498798913309288E-33;
 800bad4:	f241 3388 	movw	r3, #5000	; 0x1388
 800bad8:	443b      	add	r3, r7
 800bada:	ed93 6b00 	vldr	d6, [r3]
 800bade:	f241 3378 	movw	r3, #4984	; 0x1378
 800bae2:	443b      	add	r3, r7
 800bae4:	ed93 7b00 	vldr	d7, [r3]
 800bae8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800baec:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800bde0 <G_q+0xb7f8>
 800baf0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800baf4:	f241 3388 	movw	r3, #5000	; 0x1388
 800baf8:	443b      	add	r3, r7
 800bafa:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 800bafe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bb02:	ed93 6b00 	vldr	d6, [r3]
 800bb06:	f241 3370 	movw	r3, #4976	; 0x1370
 800bb0a:	443b      	add	r3, r7
 800bb0c:	ed93 7b00 	vldr	d7, [r3]
 800bb10:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb14:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bb18:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_re;
 800bb1c:	f241 3318 	movw	r3, #4888	; 0x1318
 800bb20:	443b      	add	r3, r7
 800bb22:	ed93 6b00 	vldr	d6, [r3]
 800bb26:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bb2a:	443b      	add	r3, r7
 800bb2c:	ed93 7b00 	vldr	d7, [r3]
 800bb30:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb34:	f241 3318 	movw	r3, #4888	; 0x1318
 800bb38:	443b      	add	r3, r7
 800bb3a:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t34_im;
 800bb3e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800bb42:	ed93 6b00 	vldr	d6, [r3]
 800bb46:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bb4a:	443b      	add	r3, r7
 800bb4c:	ed93 7b00 	vldr	d7, [r3]
 800bb50:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bb54:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800bb58:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800bb5c:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800bb60:	ed93 7b00 	vldr	d7, [r3]
 800bb64:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 800bdd0 <G_q+0xb7e8>
 800bb68:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bb6c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800bb70:	ed93 7b00 	vldr	d7, [r3]
 800bb74:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800bdd0 <G_q+0xb7e8>
 800bb78:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bb7c:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800bb80:	f241 3368 	movw	r3, #4968	; 0x1368
 800bb84:	443b      	add	r3, r7
 800bb86:	ed93 5b00 	vldr	d5, [r3]
 800bb8a:	f241 3348 	movw	r3, #4936	; 0x1348
 800bb8e:	443b      	add	r3, r7
 800bb90:	ed93 7b00 	vldr	d7, [r3]
 800bb94:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bb98:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bb9c:	ed93 4b00 	vldr	d4, [r3]
 800bba0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bba4:	ed93 7b00 	vldr	d7, [r3]
 800bba8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bbac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbb0:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800bbb4:	f241 3330 	movw	r3, #4912	; 0x1330
 800bbb8:	443b      	add	r3, r7
 800bbba:	ed93 5b00 	vldr	d5, [r3]
 800bbbe:	f241 3388 	movw	r3, #5000	; 0x1388
 800bbc2:	443b      	add	r3, r7
 800bbc4:	ed93 7b00 	vldr	d7, [r3]
 800bbc8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bbcc:	f241 3310 	movw	r3, #4880	; 0x1310
 800bbd0:	443b      	add	r3, r7
 800bbd2:	ed93 4b00 	vldr	d4, [r3]
 800bbd6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bbda:	ed93 7b00 	vldr	d7, [r3]
 800bbde:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bbe2:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800bbe6:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800bbea:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800bdd0 <G_q+0xb7e8>
 800bbee:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bbf2:	f241 3338 	movw	r3, #4920	; 0x1338
 800bbf6:	443b      	add	r3, r7
 800bbf8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800bbfc:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800bc00:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc04:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800bdd0 <G_q+0xb7e8>
 800bc08:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bc0c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800bc10:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc14:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800bdd0 <G_q+0xb7e8>
 800bc18:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bc1c:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800bc20:	f241 3368 	movw	r3, #4968	; 0x1368
 800bc24:	443b      	add	r3, r7
 800bc26:	ed93 5b00 	vldr	d5, [r3]
 800bc2a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bc2e:	ed93 7b00 	vldr	d7, [r3]
 800bc32:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc36:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bc3a:	ed93 4b00 	vldr	d4, [r3]
 800bc3e:	f241 3348 	movw	r3, #4936	; 0x1348
 800bc42:	443b      	add	r3, r7
 800bc44:	ed93 7b00 	vldr	d7, [r3]
 800bc48:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc4c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bc50:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc54:	f241 3330 	movw	r3, #4912	; 0x1330
 800bc58:	443b      	add	r3, r7
 800bc5a:	ed93 5b00 	vldr	d5, [r3]
 800bc5e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bc62:	ed93 7b00 	vldr	d7, [r3]
 800bc66:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc6a:	f241 3310 	movw	r3, #4880	; 0x1310
 800bc6e:	443b      	add	r3, r7
 800bc70:	ed93 4b00 	vldr	d4, [r3]
 800bc74:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc78:	443b      	add	r3, r7
 800bc7a:	ed93 7b00 	vldr	d7, [r3]
 800bc7e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc82:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800bc86:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bc8a:	f241 3330 	movw	r3, #4912	; 0x1330
 800bc8e:	443b      	add	r3, r7
 800bc90:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t186.im == 0.0) {
 800bc94:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bc98:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bca4:	d116      	bne.n	800bcd4 <G_q+0xb6ec>
    t12_re = t186.re / 2.0;
 800bca6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bcaa:	ed93 6b00 	vldr	d6, [r3]
 800bcae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bcb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcb6:	f241 3388 	movw	r3, #5000	; 0x1388
 800bcba:	443b      	add	r3, r7
 800bcbc:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800bcc0:	f04f 0300 	mov.w	r3, #0
 800bcc4:	f04f 0400 	mov.w	r4, #0
 800bcc8:	f241 3210 	movw	r2, #4880	; 0x1310
 800bccc:	443a      	add	r2, r7
 800bcce:	e9c2 3400 	strd	r3, r4, [r2]
 800bcd2:	e039      	b.n	800bd48 <G_q+0xb760>
  } else if (t186.re == 0.0) {
 800bcd4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bcd8:	ed93 7b00 	vldr	d7, [r3]
 800bcdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bce4:	d116      	bne.n	800bd14 <G_q+0xb72c>
    t12_re = 0.0;
 800bce6:	f04f 0300 	mov.w	r3, #0
 800bcea:	f04f 0400 	mov.w	r4, #0
 800bcee:	f241 3288 	movw	r2, #5000	; 0x1388
 800bcf2:	443a      	add	r2, r7
 800bcf4:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t186.im / 2.0;
 800bcf8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bcfc:	ed93 6b02 	vldr	d6, [r3, #8]
 800bd00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd08:	f241 3310 	movw	r3, #4880	; 0x1310
 800bd0c:	443b      	add	r3, r7
 800bd0e:	ed83 7b00 	vstr	d7, [r3]
 800bd12:	e019      	b.n	800bd48 <G_q+0xb760>
  } else {
    t12_re = t186.re / 2.0;
 800bd14:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bd18:	ed93 6b00 	vldr	d6, [r3]
 800bd1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd24:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd28:	443b      	add	r3, r7
 800bd2a:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t186.im / 2.0;
 800bd2e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800bd32:	ed93 6b02 	vldr	d6, [r3, #8]
 800bd36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd3e:	f241 3310 	movw	r3, #4880	; 0x1310
 800bd42:	443b      	add	r3, r7
 800bd44:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t187.im == 0.0) {
 800bd48:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bd4c:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd58:	d116      	bne.n	800bd88 <G_q+0xb7a0>
    t34_re = t187.re / 2.0;
 800bd5a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bd5e:	ed93 6b00 	vldr	d6, [r3]
 800bd62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd6a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bd6e:	443b      	add	r3, r7
 800bd70:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bd74:	f04f 0300 	mov.w	r3, #0
 800bd78:	f04f 0400 	mov.w	r4, #0
 800bd7c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800bd80:	443a      	add	r2, r7
 800bd82:	e9c2 3400 	strd	r3, r4, [r2]
 800bd86:	e049      	b.n	800be1c <G_q+0xb834>
  } else if (t187.re == 0.0) {
 800bd88:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bd8c:	ed93 7b00 	vldr	d7, [r3]
 800bd90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd98:	d126      	bne.n	800bde8 <G_q+0xb800>
    t34_re = 0.0;
 800bd9a:	f04f 0300 	mov.w	r3, #0
 800bd9e:	f04f 0400 	mov.w	r4, #0
 800bda2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800bda6:	443a      	add	r2, r7
 800bda8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t187.im / 2.0;
 800bdac:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bdb0:	ed93 6b02 	vldr	d6, [r3, #8]
 800bdb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdbc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bdc0:	443b      	add	r3, r7
 800bdc2:	ed83 7b00 	vstr	d7, [r3]
 800bdc6:	e029      	b.n	800be1c <G_q+0xb834>
 800bdc8:	33145c07 	.word	0x33145c07
 800bdcc:	3c81a626 	.word	0x3c81a626
 800bdd0:	33145c07 	.word	0x33145c07
 800bdd4:	3c91a626 	.word	0x3c91a626
	...
 800bde0:	858a5d48 	.word	0x858a5d48
 800bde4:	394377ce 	.word	0x394377ce
  } else {
    t34_re = t187.re / 2.0;
 800bde8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800bdec:	ed93 6b00 	vldr	d6, [r3]
 800bdf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdf8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bdfc:	443b      	add	r3, r7
 800bdfe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t187.im / 2.0;
 800be02:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800be06:	ed93 6b02 	vldr	d6, [r3, #8]
 800be0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800be0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800be12:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800be16:	443b      	add	r3, r7
 800be18:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800be1c:	f241 3388 	movw	r3, #5000	; 0x1388
 800be20:	443b      	add	r3, r7
 800be22:	ed93 6b00 	vldr	d6, [r3]
 800be26:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800be2a:	443b      	add	r3, r7
 800be2c:	ed93 7b00 	vldr	d7, [r3]
 800be30:	ee36 7b07 	vadd.f64	d7, d6, d7
 800be34:	f241 3388 	movw	r3, #5000	; 0x1388
 800be38:	443b      	add	r3, r7
 800be3a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800be3e:	f241 3310 	movw	r3, #4880	; 0x1310
 800be42:	443b      	add	r3, r7
 800be44:	ed93 6b00 	vldr	d6, [r3]
 800be48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800be4c:	443b      	add	r3, r7
 800be4e:	ed93 7b00 	vldr	d7, [r3]
 800be52:	ee36 7b07 	vadd.f64	d7, d6, d7
 800be56:	f241 3310 	movw	r3, #4880	; 0x1310
 800be5a:	443b      	add	r3, r7
 800be5c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t188.re * 0.0 - t188.im * 0.5) - (t189.re * 0.0 - t189.im * 0.5);
 800be60:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800be64:	ed93 7b00 	vldr	d7, [r3]
 800be68:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 800bdd8 <G_q+0xb7f0>
 800be6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800be70:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800be74:	ed93 7b02 	vldr	d7, [r3, #8]
 800be78:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800be7c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800be80:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be84:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800be88:	ed93 7b00 	vldr	d7, [r3]
 800be8c:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 800bdd8 <G_q+0xb7f0>
 800be90:	ee27 5b05 	vmul.f64	d5, d7, d5
 800be94:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800be98:	ed93 7b02 	vldr	d7, [r3, #8]
 800be9c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bea0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bea4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bea8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800beac:	f241 3378 	movw	r3, #4984	; 0x1378
 800beb0:	443b      	add	r3, r7
 800beb2:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t188.re * 0.5 + t188.im * 0.0) - (t189.re * 0.5 + t189.im * 0.0);
 800beb6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800beba:	ed93 7b00 	vldr	d7, [r3]
 800bebe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800bec2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bec6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800beca:	ed93 7b02 	vldr	d7, [r3, #8]
 800bece:	ed1f 5b3e 	vldr	d5, [pc, #-248]	; 800bdd8 <G_q+0xb7f0>
 800bed2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bed6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800beda:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800bede:	ed93 7b00 	vldr	d7, [r3]
 800bee2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bee6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800beea:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800beee:	ed93 7b02 	vldr	d7, [r3, #8]
 800bef2:	ed1f 4b47 	vldr	d4, [pc, #-284]	; 800bdd8 <G_q+0xb7f0>
 800bef6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800befa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800befe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bf02:	f241 3370 	movw	r3, #4976	; 0x1370
 800bf06:	443b      	add	r3, r7
 800bf08:	ed83 7b00 	vstr	d7, [r3]
  if (t192.im == 0.0) {
 800bf0c:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bf10:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	d115      	bne.n	800bf4a <G_q+0xb962>
    t16_re = t192.re / 2.0;
 800bf1e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bf22:	ed93 6b00 	vldr	d6, [r3]
 800bf26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf2e:	f241 3368 	movw	r3, #4968	; 0x1368
 800bf32:	443b      	add	r3, r7
 800bf34:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	f04f 0400 	mov.w	r4, #0
 800bf40:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800bf44:	e9c2 3400 	strd	r3, r4, [r2]
 800bf48:	e037      	b.n	800bfba <G_q+0xb9d2>
  } else if (t192.re == 0.0) {
 800bf4a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bf4e:	ed93 7b00 	vldr	d7, [r3]
 800bf52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5a:	d115      	bne.n	800bf88 <G_q+0xb9a0>
    t16_re = 0.0;
 800bf5c:	f04f 0300 	mov.w	r3, #0
 800bf60:	f04f 0400 	mov.w	r4, #0
 800bf64:	f241 3268 	movw	r2, #4968	; 0x1368
 800bf68:	443a      	add	r2, r7
 800bf6a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t192.im / 2.0;
 800bf6e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bf72:	ed93 6b02 	vldr	d6, [r3, #8]
 800bf76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf7e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bf82:	ed83 7b00 	vstr	d7, [r3]
 800bf86:	e018      	b.n	800bfba <G_q+0xb9d2>
  } else {
    t16_re = t192.re / 2.0;
 800bf88:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bf8c:	ed93 6b00 	vldr	d6, [r3]
 800bf90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf98:	f241 3368 	movw	r3, #4968	; 0x1368
 800bf9c:	443b      	add	r3, r7
 800bf9e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t192.im / 2.0;
 800bfa2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800bfa6:	ed93 6b02 	vldr	d6, [r3, #8]
 800bfaa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bfae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bfb2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bfb6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t193.im == 0.0) {
 800bfba:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800bfbe:	ed93 7b02 	vldr	d7, [r3, #8]
 800bfc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bfc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfca:	d116      	bne.n	800bffa <G_q+0xba12>
    t34_re = t193.re / 2.0;
 800bfcc:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800bfd0:	ed93 6b00 	vldr	d6, [r3]
 800bfd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bfd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bfdc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bfe0:	443b      	add	r3, r7
 800bfe2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bfe6:	f04f 0300 	mov.w	r3, #0
 800bfea:	f04f 0400 	mov.w	r4, #0
 800bfee:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800bff2:	443a      	add	r2, r7
 800bff4:	e9c2 3400 	strd	r3, r4, [r2]
 800bff8:	e039      	b.n	800c06e <G_q+0xba86>
  } else if (t193.re == 0.0) {
 800bffa:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800bffe:	ed93 7b00 	vldr	d7, [r3]
 800c002:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c00a:	d116      	bne.n	800c03a <G_q+0xba52>
    t34_re = 0.0;
 800c00c:	f04f 0300 	mov.w	r3, #0
 800c010:	f04f 0400 	mov.w	r4, #0
 800c014:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c018:	443a      	add	r2, r7
 800c01a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t193.im / 2.0;
 800c01e:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800c022:	ed93 6b02 	vldr	d6, [r3, #8]
 800c026:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c02a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c02e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c032:	443b      	add	r3, r7
 800c034:	ed83 7b00 	vstr	d7, [r3]
 800c038:	e019      	b.n	800c06e <G_q+0xba86>
  } else {
    t34_re = t193.re / 2.0;
 800c03a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800c03e:	ed93 6b00 	vldr	d6, [r3]
 800c042:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c046:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c04a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c04e:	443b      	add	r3, r7
 800c050:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t193.im / 2.0;
 800c054:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800c058:	ed93 6b02 	vldr	d6, [r3, #8]
 800c05c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c064:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c068:	443b      	add	r3, r7
 800c06a:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t190.re * 0.0 - t190.im * 0.5) - (t191.re * 0.0 - t191.im * 0.5);
 800c06e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c072:	ed93 7b00 	vldr	d7, [r3]
 800c076:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 800bdd8 <G_q+0xb7f0>
 800c07a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c07e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c082:	ed93 7b02 	vldr	d7, [r3, #8]
 800c086:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c08a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c08e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c092:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c096:	ed93 7b00 	vldr	d7, [r3]
 800c09a:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 800bdd8 <G_q+0xb7f0>
 800c09e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c0a2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c0a6:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0aa:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c0ae:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c0ba:	f241 3348 	movw	r3, #4936	; 0x1348
 800c0be:	443b      	add	r3, r7
 800c0c0:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t190.re * 0.5 + t190.im * 0.0) - (t191.re * 0.5 + t191.im * 0.0);
 800c0c4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c0c8:	ed93 7b00 	vldr	d7, [r3]
 800c0cc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c0d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c0d4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800c0d8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0dc:	ed1f 5bc2 	vldr	d5, [pc, #-776]	; 800bdd8 <G_q+0xb7f0>
 800c0e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c0e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c0e8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c0ec:	ed93 7b00 	vldr	d7, [r3]
 800c0f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c0f4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c0f8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800c0fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800c100:	ed1f 4bcb 	vldr	d4, [pc, #-812]	; 800bdd8 <G_q+0xb7f0>
 800c104:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c108:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c10c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c110:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c114:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800c118:	f241 3368 	movw	r3, #4968	; 0x1368
 800c11c:	443b      	add	r3, r7
 800c11e:	ed93 6b00 	vldr	d6, [r3]
 800c122:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c126:	443b      	add	r3, r7
 800c128:	ed93 7b00 	vldr	d7, [r3]
 800c12c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c130:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 800bde0 <G_q+0xb7f8>
 800c134:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c138:	f241 3368 	movw	r3, #4968	; 0x1368
 800c13c:	443b      	add	r3, r7
 800c13e:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800c142:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c146:	ed93 6b00 	vldr	d6, [r3]
 800c14a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c14e:	443b      	add	r3, r7
 800c150:	ed93 7b00 	vldr	d7, [r3]
 800c154:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c158:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c15c:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_re * t13_re - t3_im * t13_im) - (t20_re * t16_re - t20_im *
 800c160:	f241 3388 	movw	r3, #5000	; 0x1388
 800c164:	443b      	add	r3, r7
 800c166:	ed93 6b00 	vldr	d6, [r3]
 800c16a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c16e:	443b      	add	r3, r7
 800c170:	ed93 7b00 	vldr	d7, [r3]
 800c174:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c178:	f241 3310 	movw	r3, #4880	; 0x1310
 800c17c:	443b      	add	r3, r7
 800c17e:	ed93 5b00 	vldr	d5, [r3]
 800c182:	f241 3370 	movw	r3, #4976	; 0x1370
 800c186:	443b      	add	r3, r7
 800c188:	ed93 7b00 	vldr	d7, [r3]
 800c18c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c190:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c194:	f241 3348 	movw	r3, #4936	; 0x1348
 800c198:	443b      	add	r3, r7
 800c19a:	ed93 5b00 	vldr	d5, [r3]
 800c19e:	f241 3368 	movw	r3, #4968	; 0x1368
 800c1a2:	443b      	add	r3, r7
 800c1a4:	ed93 7b00 	vldr	d7, [r3]
 800c1a8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c1ac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c1b0:	ed93 4b00 	vldr	d4, [r3]
 800c1b4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c1b8:	ed93 7b00 	vldr	d7, [r3]
 800c1bc:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c1c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c1c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c1c8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c1cc:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t3_im = (t12_re * t13_im + t3_im * t13_re) - (t20_re * t16_im + t20_im *
 800c1d0:	f241 3388 	movw	r3, #5000	; 0x1388
 800c1d4:	443b      	add	r3, r7
 800c1d6:	ed93 6b00 	vldr	d6, [r3]
 800c1da:	f241 3370 	movw	r3, #4976	; 0x1370
 800c1de:	443b      	add	r3, r7
 800c1e0:	ed93 7b00 	vldr	d7, [r3]
 800c1e4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c1e8:	f241 3310 	movw	r3, #4880	; 0x1310
 800c1ec:	443b      	add	r3, r7
 800c1ee:	ed93 5b00 	vldr	d5, [r3]
 800c1f2:	f241 3378 	movw	r3, #4984	; 0x1378
 800c1f6:	443b      	add	r3, r7
 800c1f8:	ed93 7b00 	vldr	d7, [r3]
 800c1fc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c200:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c204:	f241 3348 	movw	r3, #4936	; 0x1348
 800c208:	443b      	add	r3, r7
 800c20a:	ed93 5b00 	vldr	d5, [r3]
 800c20e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c212:	ed93 7b00 	vldr	d7, [r3]
 800c216:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c21a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c21e:	ed93 4b00 	vldr	d4, [r3]
 800c222:	f241 3368 	movw	r3, #4968	; 0x1368
 800c226:	443b      	add	r3, r7
 800c228:	ed93 7b00 	vldr	d7, [r3]
 800c22c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c230:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c234:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c238:	f241 3310 	movw	r3, #4880	; 0x1310
 800c23c:	443b      	add	r3, r7
 800c23e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t34_re = (t184.re * 0.0 - t184.im * 0.5) - (t185.re * 0.0 - t185.im * 0.5);
 800c242:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800c246:	ed93 7b00 	vldr	d7, [r3]
 800c24a:	ed9f 6bed 	vldr	d6, [pc, #948]	; 800c600 <G_q+0xc018>
 800c24e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c252:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800c256:	ed93 7b02 	vldr	d7, [r3, #8]
 800c25a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c25e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c262:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c266:	4bea      	ldr	r3, [pc, #936]	; (800c610 <G_q+0xc028>)
 800c268:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c26c:	443a      	add	r2, r7
 800c26e:	4413      	add	r3, r2
 800c270:	ed93 7b00 	vldr	d7, [r3]
 800c274:	ed9f 5be2 	vldr	d5, [pc, #904]	; 800c600 <G_q+0xc018>
 800c278:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c27c:	4be4      	ldr	r3, [pc, #912]	; (800c610 <G_q+0xc028>)
 800c27e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c282:	443a      	add	r2, r7
 800c284:	4413      	add	r3, r2
 800c286:	ed93 7b02 	vldr	d7, [r3, #8]
 800c28a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c28e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c292:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c296:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c29a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c29e:	443b      	add	r3, r7
 800c2a0:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t184.re * 0.5 + t184.im * 0.0) - (t185.re * 0.5 + t185.im * 0.0);
 800c2a4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800c2a8:	ed93 7b00 	vldr	d7, [r3]
 800c2ac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c2b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c2b4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800c2b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c2bc:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800c600 <G_q+0xc018>
 800c2c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c2c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c2c8:	4bd1      	ldr	r3, [pc, #836]	; (800c610 <G_q+0xc028>)
 800c2ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c2ce:	443a      	add	r2, r7
 800c2d0:	4413      	add	r3, r2
 800c2d2:	ed93 7b00 	vldr	d7, [r3]
 800c2d6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c2da:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c2de:	4bcc      	ldr	r3, [pc, #816]	; (800c610 <G_q+0xc028>)
 800c2e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c2e4:	443a      	add	r2, r7
 800c2e6:	4413      	add	r3, r2
 800c2e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c2ec:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800c600 <G_q+0xc018>
 800c2f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c2f4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c2f8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c2fc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c300:	443b      	add	r3, r7
 800c302:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (t194.re * 0.0 - t194.im * 0.5) - (t195.re * 0.0 - t195.im * 0.5);
 800c306:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c30a:	ed93 7b00 	vldr	d7, [r3]
 800c30e:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800c600 <G_q+0xc018>
 800c312:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c316:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c31a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c31e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c322:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c326:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c32a:	4bba      	ldr	r3, [pc, #744]	; (800c614 <G_q+0xc02c>)
 800c32c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c330:	443a      	add	r2, r7
 800c332:	4413      	add	r3, r2
 800c334:	ed93 7b00 	vldr	d7, [r3]
 800c338:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 800c600 <G_q+0xc018>
 800c33c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c340:	4bb4      	ldr	r3, [pc, #720]	; (800c614 <G_q+0xc02c>)
 800c342:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c346:	443a      	add	r2, r7
 800c348:	4413      	add	r3, r2
 800c34a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c34e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c352:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c356:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c35a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c35e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800c362:	443b      	add	r3, r7
 800c364:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t194.re * 0.5 + t194.im * 0.0) - (t195.re * 0.5 + t195.im * 0.0);
 800c368:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c36c:	ed93 7b00 	vldr	d7, [r3]
 800c370:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c374:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c378:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800c37c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c380:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800c600 <G_q+0xc018>
 800c384:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c388:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c38c:	4ba1      	ldr	r3, [pc, #644]	; (800c614 <G_q+0xc02c>)
 800c38e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c392:	443a      	add	r2, r7
 800c394:	4413      	add	r3, r2
 800c396:	ed93 7b00 	vldr	d7, [r3]
 800c39a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c39e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c3a2:	4b9c      	ldr	r3, [pc, #624]	; (800c614 <G_q+0xc02c>)
 800c3a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c3a8:	443a      	add	r2, r7
 800c3aa:	4413      	add	r3, r2
 800c3ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3b0:	ed9f 4b93 	vldr	d4, [pc, #588]	; 800c600 <G_q+0xc018>
 800c3b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c3bc:	f241 2358 	movw	r3, #4696	; 0x1258
 800c3c0:	443b      	add	r3, r7
 800c3c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c3c6:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t85_im * b_t10_re - t41_im * t23_re) + (t12_im * t34_re - t3_im *
 800c3ca:	f241 3318 	movw	r3, #4888	; 0x1318
 800c3ce:	443b      	add	r3, r7
 800c3d0:	ed93 6b00 	vldr	d6, [r3]
 800c3d4:	f241 3338 	movw	r3, #4920	; 0x1338
 800c3d8:	443b      	add	r3, r7
 800c3da:	ed93 7b00 	vldr	d7, [r3]
 800c3de:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c3e2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800c3e6:	ed93 5b00 	vldr	d5, [r3]
 800c3ea:	f241 3330 	movw	r3, #4912	; 0x1330
 800c3ee:	443b      	add	r3, r7
 800c3f0:	ed93 7b00 	vldr	d7, [r3]
 800c3f4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c3f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c3fc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c400:	ed93 5b00 	vldr	d5, [r3]
 800c404:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c408:	443b      	add	r3, r7
 800c40a:	ed93 7b00 	vldr	d7, [r3]
 800c40e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c412:	f241 3310 	movw	r3, #4880	; 0x1310
 800c416:	443b      	add	r3, r7
 800c418:	ed93 4b00 	vldr	d4, [r3]
 800c41c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c420:	443b      	add	r3, r7
 800c422:	ed93 7b00 	vldr	d7, [r3]
 800c426:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c42a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c42e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c432:	f241 3308 	movw	r3, #4872	; 0x1308
 800c436:	443b      	add	r3, r7
 800c438:	ed83 7b00 	vstr	d7, [r3]
    t34_im);
  t41_im = (t85_im * t23_re + t41_im * b_t10_re) + (t12_im * t34_im + t3_im *
 800c43c:	f241 3318 	movw	r3, #4888	; 0x1318
 800c440:	443b      	add	r3, r7
 800c442:	ed93 6b00 	vldr	d6, [r3]
 800c446:	f241 3330 	movw	r3, #4912	; 0x1330
 800c44a:	443b      	add	r3, r7
 800c44c:	ed93 7b00 	vldr	d7, [r3]
 800c450:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c454:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800c458:	ed93 5b00 	vldr	d5, [r3]
 800c45c:	f241 3338 	movw	r3, #4920	; 0x1338
 800c460:	443b      	add	r3, r7
 800c462:	ed93 7b00 	vldr	d7, [r3]
 800c466:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c46a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c46e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c472:	ed93 5b00 	vldr	d5, [r3]
 800c476:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c47a:	443b      	add	r3, r7
 800c47c:	ed93 7b00 	vldr	d7, [r3]
 800c480:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c484:	f241 3310 	movw	r3, #4880	; 0x1310
 800c488:	443b      	add	r3, r7
 800c48a:	ed93 4b00 	vldr	d4, [r3]
 800c48e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c492:	443b      	add	r3, r7
 800c494:	ed93 7b00 	vldr	d7, [r3]
 800c498:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c49c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c4a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c4a4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800c4a8:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800c4ac:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800c4b0:	ed93 7b00 	vldr	d7, [r3]
 800c4b4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800c600 <G_q+0xc018>
 800c4b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c4bc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800c4c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4c4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 800c608 <G_q+0xc020>
 800c4c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c4cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c4d0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800c4d4:	ed93 7b00 	vldr	d7, [r3]
 800c4d8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 800c600 <G_q+0xc018>
 800c4dc:	ee27 5b05 	vmul.f64	d5, d7, d5
    t207.im * 3.061616997868383E-17);
 800c4e0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800c4e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c4e8:	ed9f 4b47 	vldr	d4, [pc, #284]	; 800c608 <G_q+0xc020>
 800c4ec:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800c4f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c4f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c4f8:	f241 3368 	movw	r3, #4968	; 0x1368
 800c4fc:	443b      	add	r3, r7
 800c4fe:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800c502:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800c506:	ed93 7b00 	vldr	d7, [r3]
 800c50a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800c608 <G_q+0xc020>
 800c50e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c512:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800c516:	ed93 7b02 	vldr	d7, [r3, #8]
 800c51a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 800c600 <G_q+0xc018>
 800c51e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c522:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c526:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800c52a:	ed93 7b00 	vldr	d7, [r3]
 800c52e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 800c608 <G_q+0xc020>
 800c532:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t207.im * 0.0);
 800c536:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800c53a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c53e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800c600 <G_q+0xc018>
 800c542:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c546:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800c54a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c54e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c552:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t204.re * 0.0 - t204.im * 0.5) - (t205.re * 0.0 - t205.im * 0.5);
 800c556:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800c55a:	ed93 7b00 	vldr	d7, [r3]
 800c55e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 800c600 <G_q+0xc018>
 800c562:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c566:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800c56a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c56e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c572:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c576:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c57a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800c57e:	ed93 7b00 	vldr	d7, [r3]
 800c582:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800c600 <G_q+0xc018>
 800c586:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c58a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800c58e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c592:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c596:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c59a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c59e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c5a2:	f241 3348 	movw	r3, #4936	; 0x1348
 800c5a6:	443b      	add	r3, r7
 800c5a8:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t204.re * 0.5 + t204.im * 0.0) - (t205.re * 0.5 + t205.im * 0.0);
 800c5ac:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800c5b0:	ed93 7b00 	vldr	d7, [r3]
 800c5b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c5b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c5bc:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800c5c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c5c4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800c600 <G_q+0xc018>
 800c5c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c5cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c5d0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800c5d4:	ed93 7b00 	vldr	d7, [r3]
 800c5d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c5dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c5e0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800c5e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c5e8:	ed9f 4b05 	vldr	d4, [pc, #20]	; 800c600 <G_q+0xc018>
 800c5ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c5f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c5f8:	e00e      	b.n	800c618 <G_q+0xc030>
 800c5fa:	bf00      	nop
 800c5fc:	f3af 8000 	nop.w
	...
 800c608:	33145c07 	.word	0x33145c07
 800c60c:	3c81a626 	.word	0x3c81a626
 800c610:	ffffeed0 	.word	0xffffeed0
 800c614:	ffffecd0 	.word	0xffffecd0
 800c618:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c61c:	ed83 7b00 	vstr	d7, [r3]
  if (t202.im == 0.0) {
 800c620:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c624:	ed93 7b02 	vldr	d7, [r3, #8]
 800c628:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c630:	d115      	bne.n	800c65e <G_q+0xc076>
    t12_re = t202.re / 2.0;
 800c632:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c636:	ed93 6b00 	vldr	d6, [r3]
 800c63a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c63e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c642:	f241 3388 	movw	r3, #5000	; 0x1388
 800c646:	443b      	add	r3, r7
 800c648:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	f04f 0400 	mov.w	r4, #0
 800c654:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800c658:	e9c2 3400 	strd	r3, r4, [r2]
 800c65c:	e037      	b.n	800c6ce <G_q+0xc0e6>
  } else if (t202.re == 0.0) {
 800c65e:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c662:	ed93 7b00 	vldr	d7, [r3]
 800c666:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c66a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c66e:	d115      	bne.n	800c69c <G_q+0xc0b4>
    t12_re = 0.0;
 800c670:	f04f 0300 	mov.w	r3, #0
 800c674:	f04f 0400 	mov.w	r4, #0
 800c678:	f241 3288 	movw	r2, #5000	; 0x1388
 800c67c:	443a      	add	r2, r7
 800c67e:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t202.im / 2.0;
 800c682:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c686:	ed93 6b02 	vldr	d6, [r3, #8]
 800c68a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c68e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c692:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c696:	ed83 7b00 	vstr	d7, [r3]
 800c69a:	e018      	b.n	800c6ce <G_q+0xc0e6>
  } else {
    t12_re = t202.re / 2.0;
 800c69c:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c6a0:	ed93 6b00 	vldr	d6, [r3]
 800c6a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c6a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6ac:	f241 3388 	movw	r3, #5000	; 0x1388
 800c6b0:	443b      	add	r3, r7
 800c6b2:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t202.im / 2.0;
 800c6b6:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800c6ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800c6be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c6c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6c6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c6ca:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t203.im == 0.0) {
 800c6ce:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c6d2:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6de:	d116      	bne.n	800c70e <G_q+0xc126>
    t34_re = t203.re / 2.0;
 800c6e0:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c6e4:	ed93 6b00 	vldr	d6, [r3]
 800c6e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c6ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6f0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c6f4:	443b      	add	r3, r7
 800c6f6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c6fa:	f04f 0300 	mov.w	r3, #0
 800c6fe:	f04f 0400 	mov.w	r4, #0
 800c702:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c706:	443a      	add	r2, r7
 800c708:	e9c2 3400 	strd	r3, r4, [r2]
 800c70c:	e039      	b.n	800c782 <G_q+0xc19a>
  } else if (t203.re == 0.0) {
 800c70e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c712:	ed93 7b00 	vldr	d7, [r3]
 800c716:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c71a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c71e:	d116      	bne.n	800c74e <G_q+0xc166>
    t34_re = 0.0;
 800c720:	f04f 0300 	mov.w	r3, #0
 800c724:	f04f 0400 	mov.w	r4, #0
 800c728:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c72c:	443a      	add	r2, r7
 800c72e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t203.im / 2.0;
 800c732:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c736:	ed93 6b02 	vldr	d6, [r3, #8]
 800c73a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c73e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c742:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c746:	443b      	add	r3, r7
 800c748:	ed83 7b00 	vstr	d7, [r3]
 800c74c:	e019      	b.n	800c782 <G_q+0xc19a>
  } else {
    t34_re = t203.re / 2.0;
 800c74e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c752:	ed93 6b00 	vldr	d6, [r3]
 800c756:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c75a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c75e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c762:	443b      	add	r3, r7
 800c764:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t203.im / 2.0;
 800c768:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800c76c:	ed93 6b02 	vldr	d6, [r3, #8]
 800c770:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c774:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c778:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c77c:	443b      	add	r3, r7
 800c77e:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t200.re * 3.061616997868383E-17 + t201.re * 3.061616997868383E-17;
 800c782:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c786:	ed93 7b00 	vldr	d7, [r3]
 800c78a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800cb18 <G_q+0xc530>
 800c78e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c792:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c796:	ed93 7b00 	vldr	d7, [r3]
 800c79a:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800cb18 <G_q+0xc530>
 800c79e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c7a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c7a6:	f241 3330 	movw	r3, #4912	; 0x1330
 800c7aa:	443b      	add	r3, r7
 800c7ac:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t200.im * 3.061616997868383E-17 + t201.im * 3.061616997868383E-17;
 800c7b0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800c7b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c7b8:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800cb18 <G_q+0xc530>
 800c7bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c7c0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800c7c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c7c8:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800cb18 <G_q+0xc530>
 800c7cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c7d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c7d4:	f241 3310 	movw	r3, #4880	; 0x1310
 800c7d8:	443b      	add	r3, r7
 800c7da:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800c7de:	f241 3388 	movw	r3, #5000	; 0x1388
 800c7e2:	443b      	add	r3, r7
 800c7e4:	ed93 6b00 	vldr	d6, [r3]
 800c7e8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c7ec:	443b      	add	r3, r7
 800c7ee:	ed93 7b00 	vldr	d7, [r3]
 800c7f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c7f6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 800cb20 <G_q+0xc538>
 800c7fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c7fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800c802:	443b      	add	r3, r7
 800c804:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800c808:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c80c:	ed93 6b00 	vldr	d6, [r3]
 800c810:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c814:	443b      	add	r3, r7
 800c816:	ed93 7b00 	vldr	d7, [r3]
 800c81a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c81e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c822:	ed83 7b00 	vstr	d7, [r3]
  t70_im = (t196.re * 0.0 - t196.im * 0.5) - (t197.re * 0.0 - t197.im * 0.5);
 800c826:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800c82a:	ed93 7b00 	vldr	d7, [r3]
 800c82e:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 800cb28 <G_q+0xc540>
 800c832:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c836:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800c83a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c83e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c842:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c846:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c84a:	4bbb      	ldr	r3, [pc, #748]	; (800cb38 <G_q+0xc550>)
 800c84c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c850:	443a      	add	r2, r7
 800c852:	4413      	add	r3, r2
 800c854:	ed93 7b00 	vldr	d7, [r3]
 800c858:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800cb28 <G_q+0xc540>
 800c85c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c860:	4bb5      	ldr	r3, [pc, #724]	; (800cb38 <G_q+0xc550>)
 800c862:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c866:	443a      	add	r2, r7
 800c868:	4413      	add	r3, r2
 800c86a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c86e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c872:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c876:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c87a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800c87e:	443b      	add	r3, r7
 800c880:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c884:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (t196.re * 0.5 + t196.im * 0.0) - (t197.re * 0.5 + t197.im * 0.0);
 800c888:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800c88c:	ed93 7b00 	vldr	d7, [r3]
 800c890:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c894:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c898:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800c89c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c8a0:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800cb28 <G_q+0xc540>
 800c8a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c8a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c8ac:	4ba2      	ldr	r3, [pc, #648]	; (800cb38 <G_q+0xc550>)
 800c8ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c8b2:	443a      	add	r2, r7
 800c8b4:	4413      	add	r3, r2
 800c8b6:	ed93 7b00 	vldr	d7, [r3]
 800c8ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c8be:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c8c2:	4b9d      	ldr	r3, [pc, #628]	; (800cb38 <G_q+0xc550>)
 800c8c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c8c8:	443a      	add	r2, r7
 800c8ca:	4413      	add	r3, r2
 800c8cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800c8d0:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800cb28 <G_q+0xc540>
 800c8d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c8dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c8e0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800c8e4:	443b      	add	r3, r7
 800c8e6:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800c8ea:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800c8ee:	ed93 7b00 	vldr	d7, [r3]
 800c8f2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800cb30 <G_q+0xc548>
 800c8f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c8fa:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800c8fe:	ed93 7b00 	vldr	d7, [r3]
 800c902:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800cb30 <G_q+0xc548>
 800c906:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c90a:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800c90e:	f241 3368 	movw	r3, #4968	; 0x1368
 800c912:	443b      	add	r3, r7
 800c914:	ed93 5b00 	vldr	d5, [r3]
 800c918:	f241 3348 	movw	r3, #4936	; 0x1348
 800c91c:	443b      	add	r3, r7
 800c91e:	ed93 7b00 	vldr	d7, [r3]
 800c922:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c926:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c92a:	ed93 4b00 	vldr	d4, [r3]
 800c92e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c932:	ed93 7b00 	vldr	d7, [r3]
 800c936:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c93a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c93e:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800c942:	f241 3330 	movw	r3, #4912	; 0x1330
 800c946:	443b      	add	r3, r7
 800c948:	ed93 5b00 	vldr	d5, [r3]
 800c94c:	f241 3388 	movw	r3, #5000	; 0x1388
 800c950:	443b      	add	r3, r7
 800c952:	ed93 7b00 	vldr	d7, [r3]
 800c956:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c95a:	f241 3310 	movw	r3, #4880	; 0x1310
 800c95e:	443b      	add	r3, r7
 800c960:	ed93 4b00 	vldr	d4, [r3]
 800c964:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c968:	ed93 7b00 	vldr	d7, [r3]
 800c96c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c970:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800c974:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800c978:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800cb30 <G_q+0xc548>
 800c97c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c980:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800c984:	443b      	add	r3, r7
 800c986:	ed83 7b00 	vstr	d7, [r3]
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800c98a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800c98e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c992:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800cb30 <G_q+0xc548>
 800c996:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c99a:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800c99e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c9a2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800cb30 <G_q+0xc548>
 800c9a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c9aa:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800c9ae:	f241 3368 	movw	r3, #4968	; 0x1368
 800c9b2:	443b      	add	r3, r7
 800c9b4:	ed93 5b00 	vldr	d5, [r3]
 800c9b8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c9bc:	ed93 7b00 	vldr	d7, [r3]
 800c9c0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c9c4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c9c8:	ed93 4b00 	vldr	d4, [r3]
 800c9cc:	f241 3348 	movw	r3, #4936	; 0x1348
 800c9d0:	443b      	add	r3, r7
 800c9d2:	ed93 7b00 	vldr	d7, [r3]
 800c9d6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c9da:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c9de:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c9e2:	f241 3330 	movw	r3, #4912	; 0x1330
 800c9e6:	443b      	add	r3, r7
 800c9e8:	ed93 5b00 	vldr	d5, [r3]
 800c9ec:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800c9f0:	ed93 7b00 	vldr	d7, [r3]
 800c9f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c9f8:	f241 3310 	movw	r3, #4880	; 0x1310
 800c9fc:	443b      	add	r3, r7
 800c9fe:	ed93 4b00 	vldr	d4, [r3]
 800ca02:	f241 3388 	movw	r3, #5000	; 0x1388
 800ca06:	443b      	add	r3, r7
 800ca08:	ed93 7b00 	vldr	d7, [r3]
 800ca0c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ca10:	ee35 7b07 	vadd.f64	d7, d5, d7
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800ca14:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ca18:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800ca1c:	443b      	add	r3, r7
 800ca1e:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t210.im == 0.0) {
 800ca22:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ca26:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca32:	d116      	bne.n	800ca62 <G_q+0xc47a>
    t20_re = t210.re / 2.0;
 800ca34:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ca38:	ed93 6b00 	vldr	d6, [r3]
 800ca3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ca40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca44:	f241 3348 	movw	r3, #4936	; 0x1348
 800ca48:	443b      	add	r3, r7
 800ca4a:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800ca4e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ca52:	443a      	add	r2, r7
 800ca54:	f04f 0300 	mov.w	r3, #0
 800ca58:	f04f 0400 	mov.w	r4, #0
 800ca5c:	e9c2 3400 	strd	r3, r4, [r2]
 800ca60:	e039      	b.n	800cad6 <G_q+0xc4ee>
  } else if (t210.re == 0.0) {
 800ca62:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ca66:	ed93 7b00 	vldr	d7, [r3]
 800ca6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca72:	d116      	bne.n	800caa2 <G_q+0xc4ba>
    t20_re = 0.0;
 800ca74:	f04f 0300 	mov.w	r3, #0
 800ca78:	f04f 0400 	mov.w	r4, #0
 800ca7c:	f241 3248 	movw	r2, #4936	; 0x1348
 800ca80:	443a      	add	r2, r7
 800ca82:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t210.im / 2.0;
 800ca86:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ca8a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ca8e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ca92:	443b      	add	r3, r7
 800ca94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ca98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca9c:	ed83 7b00 	vstr	d7, [r3]
 800caa0:	e019      	b.n	800cad6 <G_q+0xc4ee>
  } else {
    t20_re = t210.re / 2.0;
 800caa2:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800caa6:	ed93 6b00 	vldr	d6, [r3]
 800caaa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800caae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cab2:	f241 3348 	movw	r3, #4936	; 0x1348
 800cab6:	443b      	add	r3, r7
 800cab8:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t210.im / 2.0;
 800cabc:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800cac0:	ed93 6b02 	vldr	d6, [r3, #8]
 800cac4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800cac8:	443b      	add	r3, r7
 800caca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cad2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t211.im == 0.0) {
 800cad6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800cada:	ed93 7b02 	vldr	d7, [r3, #8]
 800cade:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cae6:	d129      	bne.n	800cb3c <G_q+0xc554>
    t34_re = t211.re / 2.0;
 800cae8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800caec:	ed93 6b00 	vldr	d6, [r3]
 800caf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800caf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800caf8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cafc:	443b      	add	r3, r7
 800cafe:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800cb02:	f04f 0300 	mov.w	r3, #0
 800cb06:	f04f 0400 	mov.w	r4, #0
 800cb0a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cb0e:	443a      	add	r2, r7
 800cb10:	e9c2 3400 	strd	r3, r4, [r2]
 800cb14:	e04c      	b.n	800cbb0 <G_q+0xc5c8>
 800cb16:	bf00      	nop
 800cb18:	33145c07 	.word	0x33145c07
 800cb1c:	3c81a626 	.word	0x3c81a626
 800cb20:	858a5d48 	.word	0x858a5d48
 800cb24:	394377ce 	.word	0x394377ce
	...
 800cb30:	33145c07 	.word	0x33145c07
 800cb34:	3c91a626 	.word	0x3c91a626
 800cb38:	ffffeef0 	.word	0xffffeef0
  } else if (t211.re == 0.0) {
 800cb3c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800cb40:	ed93 7b00 	vldr	d7, [r3]
 800cb44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb4c:	d116      	bne.n	800cb7c <G_q+0xc594>
    t34_re = 0.0;
 800cb4e:	f04f 0300 	mov.w	r3, #0
 800cb52:	f04f 0400 	mov.w	r4, #0
 800cb56:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800cb5a:	443a      	add	r2, r7
 800cb5c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t211.im / 2.0;
 800cb60:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800cb64:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb70:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cb74:	443b      	add	r3, r7
 800cb76:	ed83 7b00 	vstr	d7, [r3]
 800cb7a:	e019      	b.n	800cbb0 <G_q+0xc5c8>
  } else {
    t34_re = t211.re / 2.0;
 800cb7c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800cb80:	ed93 6b00 	vldr	d6, [r3]
 800cb84:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb8c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cb90:	443b      	add	r3, r7
 800cb92:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t211.im / 2.0;
 800cb96:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800cb9a:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cba6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cbaa:	443b      	add	r3, r7
 800cbac:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re += t34_re;
 800cbb0:	f241 3348 	movw	r3, #4936	; 0x1348
 800cbb4:	443b      	add	r3, r7
 800cbb6:	ed93 6b00 	vldr	d6, [r3]
 800cbba:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cbbe:	443b      	add	r3, r7
 800cbc0:	ed93 7b00 	vldr	d7, [r3]
 800cbc4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cbc8:	f241 3348 	movw	r3, #4936	; 0x1348
 800cbcc:	443b      	add	r3, r7
 800cbce:	ed83 7b00 	vstr	d7, [r3]
  t70_re += t34_im;
 800cbd2:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800cbd6:	443b      	add	r3, r7
 800cbd8:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800cbdc:	443a      	add	r2, r7
 800cbde:	ed92 6b00 	vldr	d6, [r2]
 800cbe2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cbe6:	443a      	add	r2, r7
 800cbe8:	ed92 7b00 	vldr	d7, [r2]
 800cbec:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cbf0:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t212.re * 0.0 - t212.im * 0.5) - (t213.re * 0.0 - t213.im * 0.5);
 800cbf4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800cbf8:	ed93 7b00 	vldr	d7, [r3]
 800cbfc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 800cf80 <G_q+0xc998>
 800cc00:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cc04:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800cc08:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc0c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cc10:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cc14:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cc18:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800cc1c:	ed93 7b00 	vldr	d7, [r3]
 800cc20:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 800cf80 <G_q+0xc998>
 800cc24:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cc28:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800cc2c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc30:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cc34:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc38:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc40:	f241 3330 	movw	r3, #4912	; 0x1330
 800cc44:	443b      	add	r3, r7
 800cc46:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t212.re * 0.5 + t212.im * 0.0) - (t213.re * 0.5 + t213.im * 0.0);
 800cc4a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800cc4e:	ed93 7b00 	vldr	d7, [r3]
 800cc52:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cc56:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cc5a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800cc5e:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc62:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 800cf80 <G_q+0xc998>
 800cc66:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cc6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cc6e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800cc72:	ed93 7b00 	vldr	d7, [r3]
 800cc76:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cc7a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cc7e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800cc82:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc86:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 800cf80 <G_q+0xc998>
 800cc8a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc8e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cc92:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc96:	f241 3310 	movw	r3, #4880	; 0x1310
 800cc9a:	443b      	add	r3, r7
 800cc9c:	ed83 7b00 	vstr	d7, [r3]
  if (t216.im == 0.0) {
 800cca0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800cca4:	ed93 7b02 	vldr	d7, [r3, #8]
 800cca8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccb0:	d116      	bne.n	800cce0 <G_q+0xc6f8>
    t13_re = t216.re / 2.0;
 800ccb2:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ccb6:	ed93 6b00 	vldr	d6, [r3]
 800ccba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ccbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ccc2:	f241 3378 	movw	r3, #4984	; 0x1378
 800ccc6:	443b      	add	r3, r7
 800ccc8:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800cccc:	f04f 0300 	mov.w	r3, #0
 800ccd0:	f04f 0400 	mov.w	r4, #0
 800ccd4:	f241 3270 	movw	r2, #4976	; 0x1370
 800ccd8:	443a      	add	r2, r7
 800ccda:	e9c2 3400 	strd	r3, r4, [r2]
 800ccde:	e039      	b.n	800cd54 <G_q+0xc76c>
  } else if (t216.re == 0.0) {
 800cce0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800cce4:	ed93 7b00 	vldr	d7, [r3]
 800cce8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf0:	d116      	bne.n	800cd20 <G_q+0xc738>
    t13_re = 0.0;
 800ccf2:	f04f 0300 	mov.w	r3, #0
 800ccf6:	f04f 0400 	mov.w	r4, #0
 800ccfa:	f241 3278 	movw	r2, #4984	; 0x1378
 800ccfe:	443a      	add	r2, r7
 800cd00:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t216.im / 2.0;
 800cd04:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800cd08:	ed93 6b02 	vldr	d6, [r3, #8]
 800cd0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd14:	f241 3370 	movw	r3, #4976	; 0x1370
 800cd18:	443b      	add	r3, r7
 800cd1a:	ed83 7b00 	vstr	d7, [r3]
 800cd1e:	e019      	b.n	800cd54 <G_q+0xc76c>
  } else {
    t13_re = t216.re / 2.0;
 800cd20:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800cd24:	ed93 6b00 	vldr	d6, [r3]
 800cd28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd30:	f241 3378 	movw	r3, #4984	; 0x1378
 800cd34:	443b      	add	r3, r7
 800cd36:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t216.im / 2.0;
 800cd3a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800cd3e:	ed93 6b02 	vldr	d6, [r3, #8]
 800cd42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd4a:	f241 3370 	movw	r3, #4976	; 0x1370
 800cd4e:	443b      	add	r3, r7
 800cd50:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t217.im == 0.0) {
 800cd54:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cd58:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd5c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd64:	d116      	bne.n	800cd94 <G_q+0xc7ac>
    t34_re = t217.re / 2.0;
 800cd66:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cd6a:	ed93 6b00 	vldr	d6, [r3]
 800cd6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd76:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cd7a:	443b      	add	r3, r7
 800cd7c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800cd80:	f04f 0300 	mov.w	r3, #0
 800cd84:	f04f 0400 	mov.w	r4, #0
 800cd88:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cd8c:	443a      	add	r2, r7
 800cd8e:	e9c2 3400 	strd	r3, r4, [r2]
 800cd92:	e039      	b.n	800ce08 <G_q+0xc820>
  } else if (t217.re == 0.0) {
 800cd94:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cd98:	ed93 7b00 	vldr	d7, [r3]
 800cd9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cda0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cda4:	d116      	bne.n	800cdd4 <G_q+0xc7ec>
    t34_re = 0.0;
 800cda6:	f04f 0300 	mov.w	r3, #0
 800cdaa:	f04f 0400 	mov.w	r4, #0
 800cdae:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800cdb2:	443a      	add	r2, r7
 800cdb4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t217.im / 2.0;
 800cdb8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cdbc:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdc8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cdcc:	443b      	add	r3, r7
 800cdce:	ed83 7b00 	vstr	d7, [r3]
 800cdd2:	e019      	b.n	800ce08 <G_q+0xc820>
  } else {
    t34_re = t217.re / 2.0;
 800cdd4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cdd8:	ed93 6b00 	vldr	d6, [r3]
 800cddc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cde0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cde4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cde8:	443b      	add	r3, r7
 800cdea:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t217.im / 2.0;
 800cdee:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800cdf2:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdf6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cdfa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cdfe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ce02:	443b      	add	r3, r7
 800ce04:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t214.re * 0.0 - t214.im * 0.5) - (t215.re * 0.0 - t215.im * 0.5);
 800ce08:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ce0c:	ed93 7b00 	vldr	d7, [r3]
 800ce10:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 800cf80 <G_q+0xc998>
 800ce14:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ce18:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ce1c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce24:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce28:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ce2c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ce30:	ed93 7b00 	vldr	d7, [r3]
 800ce34:	ed9f 5b52 	vldr	d5, [pc, #328]	; 800cf80 <G_q+0xc998>
 800ce38:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ce3c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ce40:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce44:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ce48:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ce4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce50:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ce54:	f241 3368 	movw	r3, #4968	; 0x1368
 800ce58:	443b      	add	r3, r7
 800ce5a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t214.re * 0.5 + t214.im * 0.0) - (t215.re * 0.5 + t215.im * 0.0);
 800ce5e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ce62:	ed93 7b00 	vldr	d7, [r3]
 800ce66:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ce6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ce6e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ce72:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce76:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800cf80 <G_q+0xc998>
 800ce7a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ce7e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ce82:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ce86:	ed93 7b00 	vldr	d7, [r3]
 800ce8a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ce8e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ce92:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ce96:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce9a:	ed9f 4b39 	vldr	d4, [pc, #228]	; 800cf80 <G_q+0xc998>
 800ce9e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cea2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cea6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ceaa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ceae:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800ceb2:	f241 3378 	movw	r3, #4984	; 0x1378
 800ceb6:	443b      	add	r3, r7
 800ceb8:	ed93 6b00 	vldr	d6, [r3]
 800cebc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cec0:	443b      	add	r3, r7
 800cec2:	ed93 7b00 	vldr	d7, [r3]
 800cec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ceca:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800cf88 <G_q+0xc9a0>
 800cece:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ced2:	f241 3378 	movw	r3, #4984	; 0x1378
 800ced6:	443b      	add	r3, r7
 800ced8:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800cedc:	f241 3370 	movw	r3, #4976	; 0x1370
 800cee0:	443b      	add	r3, r7
 800cee2:	ed93 6b00 	vldr	d6, [r3]
 800cee6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ceea:	443b      	add	r3, r7
 800ceec:	ed93 7b00 	vldr	d7, [r3]
 800cef0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cef4:	f241 3370 	movw	r3, #4976	; 0x1370
 800cef8:	443b      	add	r3, r7
 800cefa:	ed83 7b00 	vstr	d7, [r3]
  if (t208.im == 0.0) {
 800cefe:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cf02:	ed93 7b02 	vldr	d7, [r3, #8]
 800cf06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf0e:	d116      	bne.n	800cf3e <G_q+0xc956>
    t74_re = t208.re / 2.0;
 800cf10:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cf14:	ed93 6b00 	vldr	d6, [r3]
 800cf18:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800cf1c:	443b      	add	r3, r7
 800cf1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf26:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 800cf2a:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800cf2e:	443a      	add	r2, r7
 800cf30:	f04f 0300 	mov.w	r3, #0
 800cf34:	f04f 0400 	mov.w	r4, #0
 800cf38:	e9c2 3400 	strd	r3, r4, [r2]
 800cf3c:	e042      	b.n	800cfc4 <G_q+0xc9dc>
  } else if (t208.re == 0.0) {
 800cf3e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cf42:	ed93 7b00 	vldr	d7, [r3]
 800cf46:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf4e:	d11f      	bne.n	800cf90 <G_q+0xc9a8>
    t74_re = 0.0;
 800cf50:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800cf54:	443a      	add	r2, r7
 800cf56:	f04f 0300 	mov.w	r3, #0
 800cf5a:	f04f 0400 	mov.w	r4, #0
 800cf5e:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t208.im / 2.0;
 800cf62:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cf66:	ed93 6b02 	vldr	d6, [r3, #8]
 800cf6a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800cf6e:	443b      	add	r3, r7
 800cf70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf78:	ed83 7b00 	vstr	d7, [r3]
 800cf7c:	e022      	b.n	800cfc4 <G_q+0xc9dc>
 800cf7e:	bf00      	nop
	...
 800cf88:	858a5d48 	.word	0x858a5d48
 800cf8c:	394377ce 	.word	0x394377ce
  } else {
    t74_re = t208.re / 2.0;
 800cf90:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cf94:	ed93 6b00 	vldr	d6, [r3]
 800cf98:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800cf9c:	443b      	add	r3, r7
 800cf9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cfa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cfa6:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t208.im / 2.0;
 800cfaa:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800cfae:	ed93 6b02 	vldr	d6, [r3, #8]
 800cfb2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800cfb6:	443b      	add	r3, r7
 800cfb8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cfbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cfc0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t209.im == 0.0) {
 800cfc4:	4b25      	ldr	r3, [pc, #148]	; (800d05c <G_q+0xca74>)
 800cfc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cfca:	443a      	add	r2, r7
 800cfcc:	4413      	add	r3, r2
 800cfce:	ed93 7b02 	vldr	d7, [r3, #8]
 800cfd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfda:	d119      	bne.n	800d010 <G_q+0xca28>
    t34_re = t209.re / 2.0;
 800cfdc:	4b1f      	ldr	r3, [pc, #124]	; (800d05c <G_q+0xca74>)
 800cfde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cfe2:	443a      	add	r2, r7
 800cfe4:	4413      	add	r3, r2
 800cfe6:	ed93 6b00 	vldr	d6, [r3]
 800cfea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cfee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cff2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cff6:	443b      	add	r3, r7
 800cff8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800cffc:	f04f 0300 	mov.w	r3, #0
 800d000:	f04f 0400 	mov.w	r4, #0
 800d004:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d008:	443a      	add	r2, r7
 800d00a:	e9c2 3400 	strd	r3, r4, [r2]
 800d00e:	e047      	b.n	800d0a0 <G_q+0xcab8>
  } else if (t209.re == 0.0) {
 800d010:	4b12      	ldr	r3, [pc, #72]	; (800d05c <G_q+0xca74>)
 800d012:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d016:	443a      	add	r2, r7
 800d018:	4413      	add	r3, r2
 800d01a:	ed93 7b00 	vldr	d7, [r3]
 800d01e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d026:	d11b      	bne.n	800d060 <G_q+0xca78>
    t34_re = 0.0;
 800d028:	f04f 0300 	mov.w	r3, #0
 800d02c:	f04f 0400 	mov.w	r4, #0
 800d030:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d034:	443a      	add	r2, r7
 800d036:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t209.im / 2.0;
 800d03a:	4b08      	ldr	r3, [pc, #32]	; (800d05c <G_q+0xca74>)
 800d03c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d040:	443a      	add	r2, r7
 800d042:	4413      	add	r3, r2
 800d044:	ed93 6b02 	vldr	d6, [r3, #8]
 800d048:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d04c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d050:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d054:	443b      	add	r3, r7
 800d056:	ed83 7b00 	vstr	d7, [r3]
 800d05a:	e021      	b.n	800d0a0 <G_q+0xcab8>
 800d05c:	ffffef10 	.word	0xffffef10
  } else {
    t34_re = t209.re / 2.0;
 800d060:	4bd7      	ldr	r3, [pc, #860]	; (800d3c0 <G_q+0xcdd8>)
 800d062:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d066:	443a      	add	r2, r7
 800d068:	4413      	add	r3, r2
 800d06a:	ed93 6b00 	vldr	d6, [r3]
 800d06e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d072:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d076:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d07a:	443b      	add	r3, r7
 800d07c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t209.im / 2.0;
 800d080:	4bcf      	ldr	r3, [pc, #828]	; (800d3c0 <G_q+0xcdd8>)
 800d082:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d086:	443a      	add	r2, r7
 800d088:	4413      	add	r3, r2
 800d08a:	ed93 6b02 	vldr	d6, [r3, #8]
 800d08e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d092:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d096:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d09a:	443b      	add	r3, r7
 800d09c:	ed83 7b00 	vstr	d7, [r3]
  }

  t55_re = (t20_re * t23_re - t70_re * t3_im) - (t16_re * t13_re - t16_im *
 800d0a0:	f241 3348 	movw	r3, #4936	; 0x1348
 800d0a4:	443b      	add	r3, r7
 800d0a6:	ed93 6b00 	vldr	d6, [r3]
 800d0aa:	f241 3330 	movw	r3, #4912	; 0x1330
 800d0ae:	443b      	add	r3, r7
 800d0b0:	ed93 7b00 	vldr	d7, [r3]
 800d0b4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d0b8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800d0bc:	443b      	add	r3, r7
 800d0be:	ed93 5b00 	vldr	d5, [r3]
 800d0c2:	f241 3310 	movw	r3, #4880	; 0x1310
 800d0c6:	443b      	add	r3, r7
 800d0c8:	ed93 7b00 	vldr	d7, [r3]
 800d0cc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d0d0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d0d4:	f241 3368 	movw	r3, #4968	; 0x1368
 800d0d8:	443b      	add	r3, r7
 800d0da:	ed93 5b00 	vldr	d5, [r3]
 800d0de:	f241 3378 	movw	r3, #4984	; 0x1378
 800d0e2:	443b      	add	r3, r7
 800d0e4:	ed93 7b00 	vldr	d7, [r3]
 800d0e8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d0ec:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d0f0:	ed93 4b00 	vldr	d4, [r3]
 800d0f4:	f241 3370 	movw	r3, #4976	; 0x1370
 800d0f8:	443b      	add	r3, r7
 800d0fa:	ed93 7b00 	vldr	d7, [r3]
 800d0fe:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d102:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d106:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d10a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800d10e:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t70_re = (t20_re * t3_im + t70_re * t23_re) - (t16_re * t13_im + t16_im *
 800d112:	f241 3348 	movw	r3, #4936	; 0x1348
 800d116:	443b      	add	r3, r7
 800d118:	ed93 6b00 	vldr	d6, [r3]
 800d11c:	f241 3310 	movw	r3, #4880	; 0x1310
 800d120:	443b      	add	r3, r7
 800d122:	ed93 7b00 	vldr	d7, [r3]
 800d126:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d12a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800d12e:	443b      	add	r3, r7
 800d130:	ed93 5b00 	vldr	d5, [r3]
 800d134:	f241 3330 	movw	r3, #4912	; 0x1330
 800d138:	443b      	add	r3, r7
 800d13a:	ed93 7b00 	vldr	d7, [r3]
 800d13e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d142:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d146:	f241 3368 	movw	r3, #4968	; 0x1368
 800d14a:	443b      	add	r3, r7
 800d14c:	ed93 5b00 	vldr	d5, [r3]
 800d150:	f241 3370 	movw	r3, #4976	; 0x1370
 800d154:	443b      	add	r3, r7
 800d156:	ed93 7b00 	vldr	d7, [r3]
 800d15a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d15e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d162:	ed93 4b00 	vldr	d4, [r3]
 800d166:	f241 3378 	movw	r3, #4984	; 0x1378
 800d16a:	443b      	add	r3, r7
 800d16c:	ed93 7b00 	vldr	d7, [r3]
 800d170:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d174:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d178:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800d17c:	443b      	add	r3, r7
 800d17e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d182:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  t74_re += t34_re;
 800d186:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800d18a:	443b      	add	r3, r7
 800d18c:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800d190:	443a      	add	r2, r7
 800d192:	ed92 6b00 	vldr	d6, [r2]
 800d196:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d19a:	443a      	add	r2, r7
 800d19c:	ed92 7b00 	vldr	d7, [r2]
 800d1a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d1a4:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800d1a8:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800d1ac:	443b      	add	r3, r7
 800d1ae:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800d1b2:	443a      	add	r2, r7
 800d1b4:	ed92 6b00 	vldr	d6, [r2]
 800d1b8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d1bc:	443a      	add	r2, r7
 800d1be:	ed92 7b00 	vldr	d7, [r2]
 800d1c2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d1c6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800d1ca:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d1ce:	ed93 7b00 	vldr	d7, [r3]
 800d1d2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800d3b0 <G_q+0xcdc8>
 800d1d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d1da:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d1de:	ed93 7b02 	vldr	d7, [r3, #8]
 800d1e2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800d3b8 <G_q+0xcdd0>
 800d1e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d1ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d1ee:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d1f2:	ed93 7b00 	vldr	d7, [r3]
 800d1f6:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800d3b0 <G_q+0xcdc8>
 800d1fa:	ee27 5b05 	vmul.f64	d5, d7, d5
    t241.im * 3.061616997868383E-17);
 800d1fe:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d202:	ed93 7b02 	vldr	d7, [r3, #8]
 800d206:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 800d3b8 <G_q+0xcdd0>
 800d20a:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800d20e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d212:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d216:	f241 3378 	movw	r3, #4984	; 0x1378
 800d21a:	443b      	add	r3, r7
 800d21c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800d220:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d224:	ed93 7b00 	vldr	d7, [r3]
 800d228:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800d3b8 <G_q+0xcdd0>
 800d22c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d230:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800d234:	ed93 7b02 	vldr	d7, [r3, #8]
 800d238:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800d3b0 <G_q+0xcdc8>
 800d23c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d240:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d244:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d248:	ed93 7b00 	vldr	d7, [r3]
 800d24c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800d3b8 <G_q+0xcdd0>
 800d250:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t241.im * 0.0);
 800d254:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800d258:	ed93 7b02 	vldr	d7, [r3, #8]
 800d25c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800d3b0 <G_q+0xcdc8>
 800d260:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d264:	ee35 7b07 	vadd.f64	d7, d5, d7
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800d268:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d26c:	f241 3370 	movw	r3, #4976	; 0x1370
 800d270:	443b      	add	r3, r7
 800d272:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t238.re * 0.0 - t238.im * 0.5) - (t239.re * 0.0 - t239.im * 0.5);
 800d276:	f241 0390 	movw	r3, #4240	; 0x1090
 800d27a:	443b      	add	r3, r7
 800d27c:	ed93 7b00 	vldr	d7, [r3]
 800d280:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800d3b0 <G_q+0xcdc8>
 800d284:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d288:	f241 0390 	movw	r3, #4240	; 0x1090
 800d28c:	443b      	add	r3, r7
 800d28e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d292:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d296:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d29a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d29e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800d2a2:	ed93 7b00 	vldr	d7, [r3]
 800d2a6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800d3b0 <G_q+0xcdc8>
 800d2aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d2ae:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800d2b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d2b6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d2ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d2be:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d2c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d2c6:	f241 3368 	movw	r3, #4968	; 0x1368
 800d2ca:	443b      	add	r3, r7
 800d2cc:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t238.re * 0.5 + t238.im * 0.0) - (t239.re * 0.5 + t239.im * 0.0);
 800d2d0:	f241 0390 	movw	r3, #4240	; 0x1090
 800d2d4:	443b      	add	r3, r7
 800d2d6:	ed93 7b00 	vldr	d7, [r3]
 800d2da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d2de:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d2e2:	f241 0390 	movw	r3, #4240	; 0x1090
 800d2e6:	443b      	add	r3, r7
 800d2e8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d2ec:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800d3b0 <G_q+0xcdc8>
 800d2f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d2f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d2f8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800d2fc:	ed93 7b00 	vldr	d7, [r3]
 800d300:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d304:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d308:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800d30c:	ed93 7b02 	vldr	d7, [r3, #8]
 800d310:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800d3b0 <G_q+0xcdc8>
 800d314:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d318:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d31c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d320:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d324:	ed83 7b00 	vstr	d7, [r3]
  if (t236.im == 0.0) {
 800d328:	f241 0370 	movw	r3, #4208	; 0x1070
 800d32c:	443b      	add	r3, r7
 800d32e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d332:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d33a:	d116      	bne.n	800d36a <G_q+0xcd82>
    t20_re = t236.re / 2.0;
 800d33c:	f241 0370 	movw	r3, #4208	; 0x1070
 800d340:	443b      	add	r3, r7
 800d342:	ed93 6b00 	vldr	d6, [r3]
 800d346:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d34a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d34e:	f241 3348 	movw	r3, #4936	; 0x1348
 800d352:	443b      	add	r3, r7
 800d354:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800d358:	f04f 0300 	mov.w	r3, #0
 800d35c:	f04f 0400 	mov.w	r4, #0
 800d360:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800d364:	e9c2 3400 	strd	r3, r4, [r2]
 800d368:	e047      	b.n	800d3fa <G_q+0xce12>
  } else if (t236.re == 0.0) {
 800d36a:	f241 0370 	movw	r3, #4208	; 0x1070
 800d36e:	443b      	add	r3, r7
 800d370:	ed93 7b00 	vldr	d7, [r3]
 800d374:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	d122      	bne.n	800d3c4 <G_q+0xcddc>
    t20_re = 0.0;
 800d37e:	f04f 0300 	mov.w	r3, #0
 800d382:	f04f 0400 	mov.w	r4, #0
 800d386:	f241 3248 	movw	r2, #4936	; 0x1348
 800d38a:	443a      	add	r2, r7
 800d38c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t236.im / 2.0;
 800d390:	f241 0370 	movw	r3, #4208	; 0x1070
 800d394:	443b      	add	r3, r7
 800d396:	ed93 6b02 	vldr	d6, [r3, #8]
 800d39a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d39e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3a2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d3a6:	ed83 7b00 	vstr	d7, [r3]
 800d3aa:	e026      	b.n	800d3fa <G_q+0xce12>
 800d3ac:	f3af 8000 	nop.w
	...
 800d3b8:	33145c07 	.word	0x33145c07
 800d3bc:	3c81a626 	.word	0x3c81a626
 800d3c0:	ffffef10 	.word	0xffffef10
  } else {
    t20_re = t236.re / 2.0;
 800d3c4:	f241 0370 	movw	r3, #4208	; 0x1070
 800d3c8:	443b      	add	r3, r7
 800d3ca:	ed93 6b00 	vldr	d6, [r3]
 800d3ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3d6:	f241 3348 	movw	r3, #4936	; 0x1348
 800d3da:	443b      	add	r3, r7
 800d3dc:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t236.im / 2.0;
 800d3e0:	f241 0370 	movw	r3, #4208	; 0x1070
 800d3e4:	443b      	add	r3, r7
 800d3e6:	ed93 6b02 	vldr	d6, [r3, #8]
 800d3ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3f2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d3f6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t237.im == 0.0) {
 800d3fa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d3fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800d402:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d40a:	d116      	bne.n	800d43a <G_q+0xce52>
    t34_re = t237.re / 2.0;
 800d40c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d410:	ed93 6b00 	vldr	d6, [r3]
 800d414:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d418:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d41c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d420:	443b      	add	r3, r7
 800d422:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d426:	f04f 0300 	mov.w	r3, #0
 800d42a:	f04f 0400 	mov.w	r4, #0
 800d42e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d432:	443a      	add	r2, r7
 800d434:	e9c2 3400 	strd	r3, r4, [r2]
 800d438:	e039      	b.n	800d4ae <G_q+0xcec6>
  } else if (t237.re == 0.0) {
 800d43a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d43e:	ed93 7b00 	vldr	d7, [r3]
 800d442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d44a:	d116      	bne.n	800d47a <G_q+0xce92>
    t34_re = 0.0;
 800d44c:	f04f 0300 	mov.w	r3, #0
 800d450:	f04f 0400 	mov.w	r4, #0
 800d454:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d458:	443a      	add	r2, r7
 800d45a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t237.im / 2.0;
 800d45e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d462:	ed93 6b02 	vldr	d6, [r3, #8]
 800d466:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d46a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d46e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d472:	443b      	add	r3, r7
 800d474:	ed83 7b00 	vstr	d7, [r3]
 800d478:	e019      	b.n	800d4ae <G_q+0xcec6>
  } else {
    t34_re = t237.re / 2.0;
 800d47a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d47e:	ed93 6b00 	vldr	d6, [r3]
 800d482:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d486:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d48a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d48e:	443b      	add	r3, r7
 800d490:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t237.im / 2.0;
 800d494:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800d498:	ed93 6b02 	vldr	d6, [r3, #8]
 800d49c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4a4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d4a8:	443b      	add	r3, r7
 800d4aa:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t234.re * 3.061616997868383E-17 + t235.re * 3.061616997868383E-17;
 800d4ae:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800d4b2:	ed93 7b00 	vldr	d7, [r3]
 800d4b6:	ed9f 6be4 	vldr	d6, [pc, #912]	; 800d848 <G_q+0xd260>
 800d4ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d4be:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800d4c2:	ed93 7b00 	vldr	d7, [r3]
 800d4c6:	ed9f 5be0 	vldr	d5, [pc, #896]	; 800d848 <G_q+0xd260>
 800d4ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4ce:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d4d2:	f241 3330 	movw	r3, #4912	; 0x1330
 800d4d6:	443b      	add	r3, r7
 800d4d8:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t234.im * 3.061616997868383E-17 + t235.im * 3.061616997868383E-17;
 800d4dc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800d4e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d4e4:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 800d848 <G_q+0xd260>
 800d4e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d4ec:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800d4f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d4f4:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 800d848 <G_q+0xd260>
 800d4f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d500:	f241 3310 	movw	r3, #4880	; 0x1310
 800d504:	443b      	add	r3, r7
 800d506:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t34_re) + 7.498798913309288E-33;
 800d50a:	f241 3348 	movw	r3, #4936	; 0x1348
 800d50e:	443b      	add	r3, r7
 800d510:	ed93 6b00 	vldr	d6, [r3]
 800d514:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d518:	443b      	add	r3, r7
 800d51a:	ed93 7b00 	vldr	d7, [r3]
 800d51e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d522:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 800d850 <G_q+0xd268>
 800d526:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d52a:	f241 3348 	movw	r3, #4936	; 0x1348
 800d52e:	443b      	add	r3, r7
 800d530:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 800d534:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d538:	ed93 6b00 	vldr	d6, [r3]
 800d53c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d540:	443b      	add	r3, r7
 800d542:	ed93 7b00 	vldr	d7, [r3]
 800d546:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d54a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d54e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800d552:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d556:	ed93 7b00 	vldr	d7, [r3]
 800d55a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 800d858 <G_q+0xd270>
 800d55e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d562:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d566:	ed93 7b02 	vldr	d7, [r3, #8]
 800d56a:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 800d848 <G_q+0xd260>
 800d56e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d572:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d576:	4bbc      	ldr	r3, [pc, #752]	; (800d868 <G_q+0xd280>)
 800d578:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d57c:	443a      	add	r2, r7
 800d57e:	4413      	add	r3, r2
 800d580:	ed93 7b00 	vldr	d7, [r3]
 800d584:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 800d858 <G_q+0xd270>
 800d588:	ee27 5b05 	vmul.f64	d5, d7, d5
    t231.im * 3.061616997868383E-17);
 800d58c:	4bb6      	ldr	r3, [pc, #728]	; (800d868 <G_q+0xd280>)
 800d58e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d592:	443a      	add	r2, r7
 800d594:	4413      	add	r3, r2
 800d596:	ed93 7b02 	vldr	d7, [r3, #8]
 800d59a:	ed9f 4bab 	vldr	d4, [pc, #684]	; 800d848 <G_q+0xd260>
 800d59e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800d5a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5a6:	f241 2350 	movw	r3, #4688	; 0x1250
 800d5aa:	443b      	add	r3, r7
 800d5ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5b0:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800d5b4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d5b8:	ed93 7b00 	vldr	d7, [r3]
 800d5bc:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800d848 <G_q+0xd260>
 800d5c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d5c4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800d5c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5cc:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800d858 <G_q+0xd270>
 800d5d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d5d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d5d8:	4ba3      	ldr	r3, [pc, #652]	; (800d868 <G_q+0xd280>)
 800d5da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5de:	443a      	add	r2, r7
 800d5e0:	4413      	add	r3, r2
 800d5e2:	ed93 7b00 	vldr	d7, [r3]
 800d5e6:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800d848 <G_q+0xd260>
 800d5ea:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t231.im * 0.0);
 800d5ee:	4b9e      	ldr	r3, [pc, #632]	; (800d868 <G_q+0xd280>)
 800d5f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5f4:	443a      	add	r2, r7
 800d5f6:	4413      	add	r3, r2
 800d5f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5fc:	ed9f 4b96 	vldr	d4, [pc, #600]	; 800d858 <G_q+0xd270>
 800d600:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d604:	ee35 7b07 	vadd.f64	d7, d5, d7
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800d608:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800d60c:	443b      	add	r3, r7
 800d60e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d612:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800d616:	f241 0350 	movw	r3, #4176	; 0x1050
 800d61a:	443b      	add	r3, r7
 800d61c:	ed93 7b00 	vldr	d7, [r3]
 800d620:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800d860 <G_q+0xd278>
 800d624:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d628:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800d62c:	ed93 7b00 	vldr	d7, [r3]
 800d630:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800d860 <G_q+0xd278>
 800d634:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d638:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t13_re * t16_re - t13_im * t16_im)) + (t23_re * t20_re - t3_im *
 800d63c:	f241 3378 	movw	r3, #4984	; 0x1378
 800d640:	443b      	add	r3, r7
 800d642:	ed93 5b00 	vldr	d5, [r3]
 800d646:	f241 3368 	movw	r3, #4968	; 0x1368
 800d64a:	443b      	add	r3, r7
 800d64c:	ed93 7b00 	vldr	d7, [r3]
 800d650:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d654:	f241 3370 	movw	r3, #4976	; 0x1370
 800d658:	443b      	add	r3, r7
 800d65a:	ed93 4b00 	vldr	d4, [r3]
 800d65e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d662:	ed93 7b00 	vldr	d7, [r3]
 800d666:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d66a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d66e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d672:	f241 3330 	movw	r3, #4912	; 0x1330
 800d676:	443b      	add	r3, r7
 800d678:	ed93 5b00 	vldr	d5, [r3]
 800d67c:	f241 3348 	movw	r3, #4936	; 0x1348
 800d680:	443b      	add	r3, r7
 800d682:	ed93 7b00 	vldr	d7, [r3]
 800d686:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d68a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d68e:	443b      	add	r3, r7
 800d690:	ed93 4b00 	vldr	d4, [r3]
 800d694:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d698:	ed93 7b00 	vldr	d7, [r3]
 800d69c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d6a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d6a4:	ee36 7b07 	vadd.f64	d7, d6, d7
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800d6a8:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d6ac:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800d860 <G_q+0xd278>
 800d6b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d6b4:	ed83 7b00 	vstr	d7, [r3]
             t20_im)) - 6.123233995736766E-17;
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800d6b8:	f241 0350 	movw	r3, #4176	; 0x1050
 800d6bc:	443b      	add	r3, r7
 800d6be:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6c2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800d860 <G_q+0xd278>
 800d6c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d6ca:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800d6ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6d2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800d860 <G_q+0xd278>
 800d6d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d6da:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t13_re * t16_im + t13_im * t16_re)) + (t23_re * t20_im + t3_im *
 800d6de:	f241 3378 	movw	r3, #4984	; 0x1378
 800d6e2:	443b      	add	r3, r7
 800d6e4:	ed93 5b00 	vldr	d5, [r3]
 800d6e8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d6ec:	ed93 7b00 	vldr	d7, [r3]
 800d6f0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d6f4:	f241 3370 	movw	r3, #4976	; 0x1370
 800d6f8:	443b      	add	r3, r7
 800d6fa:	ed93 4b00 	vldr	d4, [r3]
 800d6fe:	f241 3368 	movw	r3, #4968	; 0x1368
 800d702:	443b      	add	r3, r7
 800d704:	ed93 7b00 	vldr	d7, [r3]
 800d708:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d70c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d710:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d714:	f241 3330 	movw	r3, #4912	; 0x1330
 800d718:	443b      	add	r3, r7
 800d71a:	ed93 5b00 	vldr	d5, [r3]
 800d71e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d722:	ed93 7b00 	vldr	d7, [r3]
 800d726:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d72a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d72e:	443b      	add	r3, r7
 800d730:	ed93 4b00 	vldr	d4, [r3]
 800d734:	f241 3348 	movw	r3, #4936	; 0x1348
 800d738:	443b      	add	r3, r7
 800d73a:	ed93 7b00 	vldr	d7, [r3]
 800d73e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d742:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800d746:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d74a:	f241 3330 	movw	r3, #4912	; 0x1330
 800d74e:	443b      	add	r3, r7
 800d750:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  if (t220.im == 0.0) {
 800d754:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d758:	ed93 7b02 	vldr	d7, [r3, #8]
 800d75c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d764:	d115      	bne.n	800d792 <G_q+0xd1aa>
    t12_re = t220.re / 2.0;
 800d766:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d76a:	ed93 6b00 	vldr	d6, [r3]
 800d76e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d772:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d776:	f241 3388 	movw	r3, #5000	; 0x1388
 800d77a:	443b      	add	r3, r7
 800d77c:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800d780:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800d784:	f04f 0300 	mov.w	r3, #0
 800d788:	f04f 0400 	mov.w	r4, #0
 800d78c:	e9c2 3400 	strd	r3, r4, [r2]
 800d790:	e037      	b.n	800d802 <G_q+0xd21a>
  } else if (t220.re == 0.0) {
 800d792:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d796:	ed93 7b00 	vldr	d7, [r3]
 800d79a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d7a2:	d115      	bne.n	800d7d0 <G_q+0xd1e8>
    t12_re = 0.0;
 800d7a4:	f04f 0300 	mov.w	r3, #0
 800d7a8:	f04f 0400 	mov.w	r4, #0
 800d7ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800d7b0:	443a      	add	r2, r7
 800d7b2:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t220.im / 2.0;
 800d7b6:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d7ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800d7be:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d7c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7ca:	ed83 7b00 	vstr	d7, [r3]
 800d7ce:	e018      	b.n	800d802 <G_q+0xd21a>
  } else {
    t12_re = t220.re / 2.0;
 800d7d0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d7d4:	ed93 6b00 	vldr	d6, [r3]
 800d7d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7e0:	f241 3388 	movw	r3, #5000	; 0x1388
 800d7e4:	443b      	add	r3, r7
 800d7e6:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t220.im / 2.0;
 800d7ea:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800d7ee:	ed93 6b02 	vldr	d6, [r3, #8]
 800d7f2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d7f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d7fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d7fe:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t221.im == 0.0) {
 800d802:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d806:	ed93 7b02 	vldr	d7, [r3, #8]
 800d80a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d812:	d12b      	bne.n	800d86c <G_q+0xd284>
    t34_re = t221.re / 2.0;
 800d814:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d818:	ed93 6b00 	vldr	d6, [r3]
 800d81c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d824:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d828:	443b      	add	r3, r7
 800d82a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d82e:	f04f 0300 	mov.w	r3, #0
 800d832:	f04f 0400 	mov.w	r4, #0
 800d836:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d83a:	443a      	add	r2, r7
 800d83c:	e9c2 3400 	strd	r3, r4, [r2]
 800d840:	e04e      	b.n	800d8e0 <G_q+0xd2f8>
 800d842:	bf00      	nop
 800d844:	f3af 8000 	nop.w
 800d848:	33145c07 	.word	0x33145c07
 800d84c:	3c81a626 	.word	0x3c81a626
 800d850:	858a5d48 	.word	0x858a5d48
 800d854:	394377ce 	.word	0x394377ce
	...
 800d860:	33145c07 	.word	0x33145c07
 800d864:	3c91a626 	.word	0x3c91a626
 800d868:	ffffef50 	.word	0xffffef50
  } else if (t221.re == 0.0) {
 800d86c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d870:	ed93 7b00 	vldr	d7, [r3]
 800d874:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d87c:	d116      	bne.n	800d8ac <G_q+0xd2c4>
    t34_re = 0.0;
 800d87e:	f04f 0300 	mov.w	r3, #0
 800d882:	f04f 0400 	mov.w	r4, #0
 800d886:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d88a:	443a      	add	r2, r7
 800d88c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t221.im / 2.0;
 800d890:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d894:	ed93 6b02 	vldr	d6, [r3, #8]
 800d898:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d89c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d8a0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d8a4:	443b      	add	r3, r7
 800d8a6:	ed83 7b00 	vstr	d7, [r3]
 800d8aa:	e019      	b.n	800d8e0 <G_q+0xd2f8>
  } else {
    t34_re = t221.re / 2.0;
 800d8ac:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d8b0:	ed93 6b00 	vldr	d6, [r3]
 800d8b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d8b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d8bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d8c0:	443b      	add	r3, r7
 800d8c2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t221.im / 2.0;
 800d8c6:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800d8ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800d8ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d8d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d8d6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d8da:	443b      	add	r3, r7
 800d8dc:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800d8e0:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8e4:	443b      	add	r3, r7
 800d8e6:	ed93 6b00 	vldr	d6, [r3]
 800d8ea:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d8ee:	443b      	add	r3, r7
 800d8f0:	ed93 7b00 	vldr	d7, [r3]
 800d8f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d8f8:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8fc:	443b      	add	r3, r7
 800d8fe:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800d902:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d906:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800d90a:	ed92 6b00 	vldr	d6, [r2]
 800d90e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d912:	443a      	add	r2, r7
 800d914:	ed92 7b00 	vldr	d7, [r2]
 800d918:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d91c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t222.re * 0.0 - t222.im * 0.5) - (t223.re * 0.0 - t223.im * 0.5);
 800d920:	f241 0310 	movw	r3, #4112	; 0x1010
 800d924:	443b      	add	r3, r7
 800d926:	ed93 7b00 	vldr	d7, [r3]
 800d92a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800db10 <G_q+0xd528>
 800d92e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d932:	f241 0310 	movw	r3, #4112	; 0x1010
 800d936:	443b      	add	r3, r7
 800d938:	ed93 7b02 	vldr	d7, [r3, #8]
 800d93c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d940:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d944:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d948:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d94c:	ed93 7b00 	vldr	d7, [r3]
 800d950:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800db10 <G_q+0xd528>
 800d954:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d958:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d95c:	ed93 7b02 	vldr	d7, [r3, #8]
 800d960:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d964:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d968:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d96c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d970:	f241 3378 	movw	r3, #4984	; 0x1378
 800d974:	443b      	add	r3, r7
 800d976:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t222.re * 0.5 + t222.im * 0.0) - (t223.re * 0.5 + t223.im * 0.0);
 800d97a:	f241 0310 	movw	r3, #4112	; 0x1010
 800d97e:	443b      	add	r3, r7
 800d980:	ed93 7b00 	vldr	d7, [r3]
 800d984:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d988:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d98c:	f241 0310 	movw	r3, #4112	; 0x1010
 800d990:	443b      	add	r3, r7
 800d992:	ed93 7b02 	vldr	d7, [r3, #8]
 800d996:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800db10 <G_q+0xd528>
 800d99a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d99e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d9a2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d9a6:	ed93 7b00 	vldr	d7, [r3]
 800d9aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d9ae:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d9b2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800d9b6:	ed93 7b02 	vldr	d7, [r3, #8]
 800d9ba:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800db10 <G_q+0xd528>
 800d9be:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d9c2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d9c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d9ca:	f241 3370 	movw	r3, #4976	; 0x1370
 800d9ce:	443b      	add	r3, r7
 800d9d0:	ed83 7b00 	vstr	d7, [r3]
  if (t226.im == 0.0) {
 800d9d4:	f241 0330 	movw	r3, #4144	; 0x1030
 800d9d8:	443b      	add	r3, r7
 800d9da:	ed93 7b02 	vldr	d7, [r3, #8]
 800d9de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9e6:	d116      	bne.n	800da16 <G_q+0xd42e>
    t16_re = t226.re / 2.0;
 800d9e8:	f241 0330 	movw	r3, #4144	; 0x1030
 800d9ec:	443b      	add	r3, r7
 800d9ee:	ed93 6b00 	vldr	d6, [r3]
 800d9f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d9f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d9fa:	f241 3368 	movw	r3, #4968	; 0x1368
 800d9fe:	443b      	add	r3, r7
 800da00:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800da04:	f04f 0300 	mov.w	r3, #0
 800da08:	f04f 0400 	mov.w	r4, #0
 800da0c:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800da10:	e9c2 3400 	strd	r3, r4, [r2]
 800da14:	e03b      	b.n	800da8e <G_q+0xd4a6>
  } else if (t226.re == 0.0) {
 800da16:	f241 0330 	movw	r3, #4144	; 0x1030
 800da1a:	443b      	add	r3, r7
 800da1c:	ed93 7b00 	vldr	d7, [r3]
 800da20:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da28:	d116      	bne.n	800da58 <G_q+0xd470>
    t16_re = 0.0;
 800da2a:	f04f 0300 	mov.w	r3, #0
 800da2e:	f04f 0400 	mov.w	r4, #0
 800da32:	f241 3268 	movw	r2, #4968	; 0x1368
 800da36:	443a      	add	r2, r7
 800da38:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t226.im / 2.0;
 800da3c:	f241 0330 	movw	r3, #4144	; 0x1030
 800da40:	443b      	add	r3, r7
 800da42:	ed93 6b02 	vldr	d6, [r3, #8]
 800da46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da4e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800da52:	ed83 7b00 	vstr	d7, [r3]
 800da56:	e01a      	b.n	800da8e <G_q+0xd4a6>
  } else {
    t16_re = t226.re / 2.0;
 800da58:	f241 0330 	movw	r3, #4144	; 0x1030
 800da5c:	443b      	add	r3, r7
 800da5e:	ed93 6b00 	vldr	d6, [r3]
 800da62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da6a:	f241 3368 	movw	r3, #4968	; 0x1368
 800da6e:	443b      	add	r3, r7
 800da70:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t226.im / 2.0;
 800da74:	f241 0330 	movw	r3, #4144	; 0x1030
 800da78:	443b      	add	r3, r7
 800da7a:	ed93 6b02 	vldr	d6, [r3, #8]
 800da7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da86:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800da8a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t227.im == 0.0) {
 800da8e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800da92:	ed93 7b02 	vldr	d7, [r3, #8]
 800da96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da9e:	d116      	bne.n	800dace <G_q+0xd4e6>
    t34_re = t227.re / 2.0;
 800daa0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800daa4:	ed93 6b00 	vldr	d6, [r3]
 800daa8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800daac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dab0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dab4:	443b      	add	r3, r7
 800dab6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800daba:	f04f 0300 	mov.w	r3, #0
 800dabe:	f04f 0400 	mov.w	r4, #0
 800dac2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dac6:	443a      	add	r2, r7
 800dac8:	e9c2 3400 	strd	r3, r4, [r2]
 800dacc:	e03e      	b.n	800db4c <G_q+0xd564>
  } else if (t227.re == 0.0) {
 800dace:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800dad2:	ed93 7b00 	vldr	d7, [r3]
 800dad6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dada:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dade:	d11b      	bne.n	800db18 <G_q+0xd530>
    t34_re = 0.0;
 800dae0:	f04f 0300 	mov.w	r3, #0
 800dae4:	f04f 0400 	mov.w	r4, #0
 800dae8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800daec:	443a      	add	r2, r7
 800daee:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t227.im / 2.0;
 800daf2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800daf6:	ed93 6b02 	vldr	d6, [r3, #8]
 800dafa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dafe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db02:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db06:	443b      	add	r3, r7
 800db08:	ed83 7b00 	vstr	d7, [r3]
 800db0c:	e01e      	b.n	800db4c <G_q+0xd564>
 800db0e:	bf00      	nop
	...
  } else {
    t34_re = t227.re / 2.0;
 800db18:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db1c:	ed93 6b00 	vldr	d6, [r3]
 800db20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db28:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800db2c:	443b      	add	r3, r7
 800db2e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t227.im / 2.0;
 800db32:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800db36:	ed93 6b02 	vldr	d6, [r3, #8]
 800db3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db42:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db46:	443b      	add	r3, r7
 800db48:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t224.re * 0.0 - t224.im * 0.5) - (t225.re * 0.0 - t225.im * 0.5);
 800db4c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800db50:	ed93 7b00 	vldr	d7, [r3]
 800db54:	ed9f 6bde 	vldr	d6, [pc, #888]	; 800ded0 <G_q+0xd8e8>
 800db58:	ee27 6b06 	vmul.f64	d6, d7, d6
 800db5c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800db60:	ed93 7b02 	vldr	d7, [r3, #8]
 800db64:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800db68:	ee27 7b05 	vmul.f64	d7, d7, d5
 800db6c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800db70:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800db74:	ed93 7b00 	vldr	d7, [r3]
 800db78:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 800ded0 <G_q+0xd8e8>
 800db7c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800db80:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800db84:	ed93 7b02 	vldr	d7, [r3, #8]
 800db88:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800db8c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800db90:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db94:	ee36 7b47 	vsub.f64	d7, d6, d7
 800db98:	f241 3348 	movw	r3, #4936	; 0x1348
 800db9c:	443b      	add	r3, r7
 800db9e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t224.re * 0.5 + t224.im * 0.0) - (t225.re * 0.5 + t225.im * 0.0);
 800dba2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800dba6:	ed93 7b00 	vldr	d7, [r3]
 800dbaa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dbae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dbb2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800dbb6:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbba:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 800ded0 <G_q+0xd8e8>
 800dbbe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dbc2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dbc6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800dbca:	ed93 7b00 	vldr	d7, [r3]
 800dbce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dbd2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dbd6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800dbda:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbde:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 800ded0 <G_q+0xd8e8>
 800dbe2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dbe6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dbea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dbee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dbf2:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800dbf6:	f241 3368 	movw	r3, #4968	; 0x1368
 800dbfa:	443b      	add	r3, r7
 800dbfc:	ed93 6b00 	vldr	d6, [r3]
 800dc00:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dc04:	443b      	add	r3, r7
 800dc06:	ed93 7b00 	vldr	d7, [r3]
 800dc0a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc0e:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 800ded8 <G_q+0xd8f0>
 800dc12:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dc16:	f241 3368 	movw	r3, #4968	; 0x1368
 800dc1a:	443b      	add	r3, r7
 800dc1c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800dc20:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dc24:	ed93 6b00 	vldr	d6, [r3]
 800dc28:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dc2c:	443b      	add	r3, r7
 800dc2e:	ed93 7b00 	vldr	d7, [r3]
 800dc32:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc36:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dc3a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = t228.re * 3.061616997868383E-17 + t229.re * 3.061616997868383E-17;
 800dc3e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800dc42:	ed93 7b00 	vldr	d7, [r3]
 800dc46:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 800dee0 <G_q+0xd8f8>
 800dc4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dc4e:	4ba6      	ldr	r3, [pc, #664]	; (800dee8 <G_q+0xd900>)
 800dc50:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dc54:	443a      	add	r2, r7
 800dc56:	4413      	add	r3, r2
 800dc58:	ed93 7b00 	vldr	d7, [r3]
 800dc5c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800dee0 <G_q+0xd8f8>
 800dc60:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc64:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc68:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dc6c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = t228.im * 3.061616997868383E-17 + t229.im * 3.061616997868383E-17;
 800dc70:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800dc74:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc78:	ed9f 6b99 	vldr	d6, [pc, #612]	; 800dee0 <G_q+0xd8f8>
 800dc7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dc80:	4b99      	ldr	r3, [pc, #612]	; (800dee8 <G_q+0xd900>)
 800dc82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dc86:	443a      	add	r2, r7
 800dc88:	4413      	add	r3, r2
 800dc8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc8e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800dee0 <G_q+0xd8f8>
 800dc92:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc96:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc9a:	f241 3338 	movw	r3, #4920	; 0x1338
 800dc9e:	443b      	add	r3, r7
 800dca0:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t12_re * t13_re - t58_im * t13_im) - (t20_re * t16_re - t20_im *
 800dca4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dca8:	443b      	add	r3, r7
 800dcaa:	ed93 6b00 	vldr	d6, [r3]
 800dcae:	f241 3378 	movw	r3, #4984	; 0x1378
 800dcb2:	443b      	add	r3, r7
 800dcb4:	ed93 7b00 	vldr	d7, [r3]
 800dcb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dcbc:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800dcc0:	ed93 5b00 	vldr	d5, [r3]
 800dcc4:	f241 3370 	movw	r3, #4976	; 0x1370
 800dcc8:	443b      	add	r3, r7
 800dcca:	ed93 7b00 	vldr	d7, [r3]
 800dcce:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dcd2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dcd6:	f241 3348 	movw	r3, #4936	; 0x1348
 800dcda:	443b      	add	r3, r7
 800dcdc:	ed93 5b00 	vldr	d5, [r3]
 800dce0:	f241 3368 	movw	r3, #4968	; 0x1368
 800dce4:	443b      	add	r3, r7
 800dce6:	ed93 7b00 	vldr	d7, [r3]
 800dcea:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dcee:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dcf2:	ed93 4b00 	vldr	d4, [r3]
 800dcf6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dcfa:	ed93 7b00 	vldr	d7, [r3]
 800dcfe:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dd02:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dd06:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd0a:	f241 3318 	movw	r3, #4888	; 0x1318
 800dd0e:	443b      	add	r3, r7
 800dd10:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t58_im = (t12_re * t13_im + t58_im * t13_re) - (t20_re * t16_im + t20_im *
 800dd14:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd18:	443b      	add	r3, r7
 800dd1a:	ed93 6b00 	vldr	d6, [r3]
 800dd1e:	f241 3370 	movw	r3, #4976	; 0x1370
 800dd22:	443b      	add	r3, r7
 800dd24:	ed93 7b00 	vldr	d7, [r3]
 800dd28:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dd2c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800dd30:	ed93 5b00 	vldr	d5, [r3]
 800dd34:	f241 3378 	movw	r3, #4984	; 0x1378
 800dd38:	443b      	add	r3, r7
 800dd3a:	ed93 7b00 	vldr	d7, [r3]
 800dd3e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dd42:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dd46:	f241 3348 	movw	r3, #4936	; 0x1348
 800dd4a:	443b      	add	r3, r7
 800dd4c:	ed93 5b00 	vldr	d5, [r3]
 800dd50:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dd54:	ed93 7b00 	vldr	d7, [r3]
 800dd58:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dd5c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dd60:	ed93 4b00 	vldr	d4, [r3]
 800dd64:	f241 3368 	movw	r3, #4968	; 0x1368
 800dd68:	443b      	add	r3, r7
 800dd6a:	ed93 7b00 	vldr	d7, [r3]
 800dd6e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dd72:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dd76:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800dd7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dd7e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t218.im == 0.0) {
 800dd82:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dd86:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd92:	d116      	bne.n	800ddc2 <G_q+0xd7da>
    t34_re = t218.re / 2.0;
 800dd94:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800dd98:	ed93 6b00 	vldr	d6, [r3]
 800dd9c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dda0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dda4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dda8:	443b      	add	r3, r7
 800ddaa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ddae:	f04f 0300 	mov.w	r3, #0
 800ddb2:	f04f 0400 	mov.w	r4, #0
 800ddb6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ddba:	443a      	add	r2, r7
 800ddbc:	e9c2 3400 	strd	r3, r4, [r2]
 800ddc0:	e039      	b.n	800de36 <G_q+0xd84e>
  } else if (t218.re == 0.0) {
 800ddc2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ddc6:	ed93 7b00 	vldr	d7, [r3]
 800ddca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ddce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ddd2:	d116      	bne.n	800de02 <G_q+0xd81a>
    t34_re = 0.0;
 800ddd4:	f04f 0300 	mov.w	r3, #0
 800ddd8:	f04f 0400 	mov.w	r4, #0
 800dddc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dde0:	443a      	add	r2, r7
 800dde2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t218.im / 2.0;
 800dde6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800ddea:	ed93 6b02 	vldr	d6, [r3, #8]
 800ddee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddf2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddf6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ddfa:	443b      	add	r3, r7
 800ddfc:	ed83 7b00 	vstr	d7, [r3]
 800de00:	e019      	b.n	800de36 <G_q+0xd84e>
  } else {
    t34_re = t218.re / 2.0;
 800de02:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800de06:	ed93 6b00 	vldr	d6, [r3]
 800de0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de12:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800de16:	443b      	add	r3, r7
 800de18:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t218.im / 2.0;
 800de1c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800de20:	ed93 6b02 	vldr	d6, [r3, #8]
 800de24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de2c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800de30:	443b      	add	r3, r7
 800de32:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t219.im == 0.0) {
 800de36:	4b2d      	ldr	r3, [pc, #180]	; (800deec <G_q+0xd904>)
 800de38:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800de3c:	443a      	add	r2, r7
 800de3e:	4413      	add	r3, r2
 800de40:	ed93 7b02 	vldr	d7, [r3, #8]
 800de44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4c:	d119      	bne.n	800de82 <G_q+0xd89a>
    t13_re = t219.re / 2.0;
 800de4e:	4b27      	ldr	r3, [pc, #156]	; (800deec <G_q+0xd904>)
 800de50:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800de54:	443a      	add	r2, r7
 800de56:	4413      	add	r3, r2
 800de58:	ed93 6b00 	vldr	d6, [r3]
 800de5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800de60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800de64:	f241 3378 	movw	r3, #4984	; 0x1378
 800de68:	443b      	add	r3, r7
 800de6a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800de6e:	f04f 0300 	mov.w	r3, #0
 800de72:	f04f 0400 	mov.w	r4, #0
 800de76:	f241 3270 	movw	r2, #4976	; 0x1370
 800de7a:	443a      	add	r2, r7
 800de7c:	e9c2 3400 	strd	r3, r4, [r2]
 800de80:	e056      	b.n	800df30 <G_q+0xd948>
  } else if (t219.re == 0.0) {
 800de82:	4b1a      	ldr	r3, [pc, #104]	; (800deec <G_q+0xd904>)
 800de84:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800de88:	443a      	add	r2, r7
 800de8a:	4413      	add	r3, r2
 800de8c:	ed93 7b00 	vldr	d7, [r3]
 800de90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800de94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de98:	d12a      	bne.n	800def0 <G_q+0xd908>
    t13_re = 0.0;
 800de9a:	f04f 0300 	mov.w	r3, #0
 800de9e:	f04f 0400 	mov.w	r4, #0
 800dea2:	f241 3278 	movw	r2, #4984	; 0x1378
 800dea6:	443a      	add	r2, r7
 800dea8:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t219.im / 2.0;
 800deac:	4b0f      	ldr	r3, [pc, #60]	; (800deec <G_q+0xd904>)
 800deae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800deb2:	443a      	add	r2, r7
 800deb4:	4413      	add	r3, r2
 800deb6:	ed93 6b02 	vldr	d6, [r3, #8]
 800deba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800debe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dec2:	f241 3370 	movw	r3, #4976	; 0x1370
 800dec6:	443b      	add	r3, r7
 800dec8:	ed83 7b00 	vstr	d7, [r3]
 800decc:	e030      	b.n	800df30 <G_q+0xd948>
 800dece:	bf00      	nop
	...
 800ded8:	858a5d48 	.word	0x858a5d48
 800dedc:	394377ce 	.word	0x394377ce
 800dee0:	33145c07 	.word	0x33145c07
 800dee4:	3c81a626 	.word	0x3c81a626
 800dee8:	ffffef30 	.word	0xffffef30
 800deec:	ffffecf0 	.word	0xffffecf0
  } else {
    t13_re = t219.re / 2.0;
 800def0:	4be1      	ldr	r3, [pc, #900]	; (800e278 <G_q+0xdc90>)
 800def2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800def6:	443a      	add	r2, r7
 800def8:	4413      	add	r3, r2
 800defa:	ed93 6b00 	vldr	d6, [r3]
 800defe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df06:	f241 3378 	movw	r3, #4984	; 0x1378
 800df0a:	443b      	add	r3, r7
 800df0c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t219.im / 2.0;
 800df10:	4bd9      	ldr	r3, [pc, #868]	; (800e278 <G_q+0xdc90>)
 800df12:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800df16:	443a      	add	r2, r7
 800df18:	4413      	add	r3, r2
 800df1a:	ed93 6b02 	vldr	d6, [r3, #8]
 800df1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df26:	f241 3370 	movw	r3, #4976	; 0x1370
 800df2a:	443b      	add	r3, r7
 800df2c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t60_re * t72_re - t76_re * t23_re) - (t12_im * t85_im - b_t10_re *
 800df30:	f241 2250 	movw	r2, #4688	; 0x1250
 800df34:	443a      	add	r2, r7
 800df36:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800df3a:	ed92 6b00 	vldr	d6, [r2]
 800df3e:	ed93 7b00 	vldr	d7, [r3]
 800df42:	ee26 6b07 	vmul.f64	d6, d6, d7
 800df46:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800df4a:	443b      	add	r3, r7
 800df4c:	ed93 5b00 	vldr	d5, [r3]
 800df50:	f241 3330 	movw	r3, #4912	; 0x1330
 800df54:	443b      	add	r3, r7
 800df56:	ed93 7b00 	vldr	d7, [r3]
 800df5a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800df5e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800df62:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800df66:	ed93 5b00 	vldr	d5, [r3]
 800df6a:	f241 3318 	movw	r3, #4888	; 0x1318
 800df6e:	443b      	add	r3, r7
 800df70:	ed93 7b00 	vldr	d7, [r3]
 800df74:	ee25 5b07 	vmul.f64	d5, d5, d7
 800df78:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800df7c:	f241 3238 	movw	r2, #4920	; 0x1338
 800df80:	443a      	add	r2, r7
 800df82:	ed92 4b00 	vldr	d4, [r2]
 800df86:	ed93 7b00 	vldr	d7, [r3]
 800df8a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800df8e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800df92:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df96:	f241 3368 	movw	r3, #4968	; 0x1368
 800df9a:	443b      	add	r3, r7
 800df9c:	ed83 7b00 	vstr	d7, [r3]
    t58_im);
  t76_re = (t60_re * t23_re + t76_re * t72_re) - (t12_im * t58_im + b_t10_re *
 800dfa0:	f241 2350 	movw	r3, #4688	; 0x1250
 800dfa4:	443b      	add	r3, r7
 800dfa6:	ed93 6b00 	vldr	d6, [r3]
 800dfaa:	f241 3330 	movw	r3, #4912	; 0x1330
 800dfae:	443b      	add	r3, r7
 800dfb0:	ed93 7b00 	vldr	d7, [r3]
 800dfb4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dfb8:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800dfbc:	443a      	add	r2, r7
 800dfbe:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800dfc2:	ed92 5b00 	vldr	d5, [r2]
 800dfc6:	ed93 7b00 	vldr	d7, [r3]
 800dfca:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dfce:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dfd2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800dfd6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800dfda:	ed92 5b00 	vldr	d5, [r2]
 800dfde:	ed93 7b00 	vldr	d7, [r3]
 800dfe2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dfe6:	f241 3338 	movw	r3, #4920	; 0x1338
 800dfea:	443b      	add	r3, r7
 800dfec:	ed93 4b00 	vldr	d4, [r3]
 800dff0:	f241 3318 	movw	r3, #4888	; 0x1318
 800dff4:	443b      	add	r3, r7
 800dff6:	ed93 7b00 	vldr	d7, [r3]
 800dffa:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dffe:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e002:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800e006:	443b      	add	r3, r7
 800e008:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e00c:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t34_re += t13_re;
 800e010:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e014:	443b      	add	r3, r7
 800e016:	ed93 6b00 	vldr	d6, [r3]
 800e01a:	f241 3378 	movw	r3, #4984	; 0x1378
 800e01e:	443b      	add	r3, r7
 800e020:	ed93 7b00 	vldr	d7, [r3]
 800e024:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e028:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e02c:	443b      	add	r3, r7
 800e02e:	ed83 7b00 	vstr	d7, [r3]
  t34_im += t13_im;
 800e032:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e036:	443b      	add	r3, r7
 800e038:	ed93 6b00 	vldr	d6, [r3]
 800e03c:	f241 3370 	movw	r3, #4976	; 0x1370
 800e040:	443b      	add	r3, r7
 800e042:	ed93 7b00 	vldr	d7, [r3]
 800e046:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e04a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e04e:	443b      	add	r3, r7
 800e050:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800e054:	4b89      	ldr	r3, [pc, #548]	; (800e27c <G_q+0xdc94>)
 800e056:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e05a:	443a      	add	r2, r7
 800e05c:	4413      	add	r3, r2
 800e05e:	ed93 7b00 	vldr	d7, [r3]
 800e062:	eeb1 6b47 	vneg.f64	d6, d7
 800e066:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e06a:	443b      	add	r3, r7
 800e06c:	ed93 5b00 	vldr	d5, [r3]
 800e070:	f241 3308 	movw	r3, #4872	; 0x1308
 800e074:	443b      	add	r3, r7
 800e076:	ed93 7b00 	vldr	d7, [r3]
 800e07a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e07e:	f241 2358 	movw	r3, #4696	; 0x1258
 800e082:	443b      	add	r3, r7
 800e084:	ed93 4b00 	vldr	d4, [r3]
 800e088:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e08c:	ed93 7b00 	vldr	d7, [r3]
 800e090:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e094:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e098:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800e268 <G_q+0xdc80>
 800e09c:	ee27 5b05 	vmul.f64	d5, d7, d5
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800e0a0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e0a4:	443b      	add	r3, r7
 800e0a6:	ed93 4b00 	vldr	d4, [r3]
 800e0aa:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800e0ae:	443b      	add	r3, r7
 800e0b0:	ed93 7b00 	vldr	d7, [r3]
 800e0b4:	ee24 4b07 	vmul.f64	d4, d4, d7
 800e0b8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e0bc:	443b      	add	r3, r7
 800e0be:	ed93 3b00 	vldr	d3, [r3]
 800e0c2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800e0c6:	443b      	add	r3, r7
 800e0c8:	ed93 7b00 	vldr	d7, [r3]
 800e0cc:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e0d0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800e0d4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 800e270 <G_q+0xdc88>
 800e0d8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800e0dc:	ee35 5b47 	vsub.f64	d5, d5, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800e0e0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800e0e4:	443b      	add	r3, r7
 800e0e6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800e0ea:	ed92 4b00 	vldr	d4, [r2]
 800e0ee:	ed93 7b00 	vldr	d7, [r3]
 800e0f2:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800e0f6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800e0fa:	443a      	add	r2, r7
 800e0fc:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800e100:	443b      	add	r3, r7
 800e102:	ed92 3b00 	vldr	d3, [r2]
 800e106:	ed93 7b00 	vldr	d7, [r3]
 800e10a:	ee23 7b07 	vmul.f64	d7, d3, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800e10e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800e112:	ed9f 4b57 	vldr	d4, [pc, #348]	; 800e270 <G_q+0xdc88>
 800e116:	ee27 7b04 	vmul.f64	d7, d7, d4
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800e11a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800e11e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e122:	443b      	add	r3, r7
 800e124:	ed93 4b00 	vldr	d4, [r3]
 800e128:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e12c:	443b      	add	r3, r7
 800e12e:	ed93 7b00 	vldr	d7, [r3]
 800e132:	ee24 4b07 	vmul.f64	d4, d4, d7
 800e136:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800e13a:	443b      	add	r3, r7
 800e13c:	ed93 3b00 	vldr	d3, [r3]
 800e140:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e144:	443b      	add	r3, r7
 800e146:	ed93 7b00 	vldr	d7, [r3]
 800e14a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e14e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_im) * 0.0215);
 800e152:	ed9f 4b45 	vldr	d4, [pc, #276]	; 800e268 <G_q+0xdc80>
 800e156:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800e15a:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800e15e:	4b48      	ldr	r3, [pc, #288]	; (800e280 <G_q+0xdc98>)
 800e160:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e164:	443a      	add	r2, r7
 800e166:	4413      	add	r3, r2
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	3330      	adds	r3, #48	; 0x30
 800e16c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e170:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800e174:	4b41      	ldr	r3, [pc, #260]	; (800e27c <G_q+0xdc94>)
 800e176:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e17a:	443a      	add	r2, r7
 800e17c:	4413      	add	r3, r2
 800e17e:	ed93 7b00 	vldr	d7, [r3]
 800e182:	eeb1 6b47 	vneg.f64	d6, d7
 800e186:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e18a:	443b      	add	r3, r7
 800e18c:	ed93 5b00 	vldr	d5, [r3]
 800e190:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e194:	ed93 7b00 	vldr	d7, [r3]
 800e198:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e19c:	f241 2358 	movw	r3, #4696	; 0x1258
 800e1a0:	443b      	add	r3, r7
 800e1a2:	ed93 4b00 	vldr	d4, [r3]
 800e1a6:	f241 3308 	movw	r3, #4872	; 0x1308
 800e1aa:	443b      	add	r3, r7
 800e1ac:	ed93 7b00 	vldr	d7, [r3]
 800e1b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e1b4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e1b8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800e268 <G_q+0xdc80>
 800e1bc:	ee27 5b05 	vmul.f64	d5, d7, d5
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800e1c0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e1c4:	443b      	add	r3, r7
 800e1c6:	ed93 4b00 	vldr	d4, [r3]
 800e1ca:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800e1ce:	443b      	add	r3, r7
 800e1d0:	ed93 7b00 	vldr	d7, [r3]
 800e1d4:	ee24 4b07 	vmul.f64	d4, d4, d7
 800e1d8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e1dc:	443b      	add	r3, r7
 800e1de:	ed93 3b00 	vldr	d3, [r3]
 800e1e2:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800e1e6:	443b      	add	r3, r7
 800e1e8:	ed93 7b00 	vldr	d7, [r3]
 800e1ec:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e1f0:	ee34 7b07 	vadd.f64	d7, d4, d7
 800e1f4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800e270 <G_q+0xdc88>
 800e1f8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800e1fc:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800e200:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800e204:	443b      	add	r3, r7
 800e206:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800e20a:	ed92 4b00 	vldr	d4, [r2]
 800e20e:	ed93 7b00 	vldr	d7, [r3]
 800e212:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800e216:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800e21a:	443a      	add	r2, r7
 800e21c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800e220:	443b      	add	r3, r7
 800e222:	ed92 3b00 	vldr	d3, [r2]
 800e226:	ed93 7b00 	vldr	d7, [r3]
 800e22a:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800e22e:	ee34 7b07 	vadd.f64	d7, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800e232:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 800e270 <G_q+0xdc88>
 800e236:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800e23a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800e23e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e242:	443b      	add	r3, r7
 800e244:	ed93 4b00 	vldr	d4, [r3]
 800e248:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e24c:	443b      	add	r3, r7
 800e24e:	ed93 7b00 	vldr	d7, [r3]
 800e252:	ee24 4b07 	vmul.f64	d4, d4, d7
 800e256:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800e25a:	443b      	add	r3, r7
 800e25c:	ed93 3b00 	vldr	d3, [r3]
 800e260:	e010      	b.n	800e284 <G_q+0xdc9c>
 800e262:	bf00      	nop
 800e264:	f3af 8000 	nop.w
 800e268:	9374bc6a 	.word	0x9374bc6a
 800e26c:	3f960418 	.word	0x3f960418
 800e270:	2ba953a1 	.word	0x2ba953a1
 800e274:	3c3848f9 	.word	0x3c3848f9
 800e278:	ffffecf0 	.word	0xffffecf0
 800e27c:	ffffec58 	.word	0xffffec58
 800e280:	ffffec34 	.word	0xffffec34
 800e284:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e288:	443b      	add	r3, r7
 800e28a:	ed93 7b00 	vldr	d7, [r3]
 800e28e:	ee23 7b07 	vmul.f64	d7, d3, d7
 800e292:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_re) * 0.0215);
 800e296:	ed9f 4bd2 	vldr	d4, [pc, #840]	; 800e5e0 <G_q+0xdff8>
 800e29a:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800e29e:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800e2a2:	4bd5      	ldr	r3, [pc, #852]	; (800e5f8 <G_q+0xe010>)
 800e2a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e2a8:	443a      	add	r2, r7
 800e2aa:	4413      	add	r3, r2
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3330      	adds	r3, #48	; 0x30
 800e2b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e2b4:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t264.im == 0.0) {
 800e2b8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e2bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2c8:	d116      	bne.n	800e2f8 <G_q+0xdd10>
    t70_im = t264.re / 2.0;
 800e2ca:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e2ce:	ed93 6b00 	vldr	d6, [r3]
 800e2d2:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e2d6:	443b      	add	r3, r7
 800e2d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e2dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e2e0:	ed83 7b00 	vstr	d7, [r3]
    t43_im = 0.0;
 800e2e4:	f04f 0300 	mov.w	r3, #0
 800e2e8:	f04f 0400 	mov.w	r4, #0
 800e2ec:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800e2f0:	443a      	add	r2, r7
 800e2f2:	e9c2 3400 	strd	r3, r4, [r2]
 800e2f6:	e039      	b.n	800e36c <G_q+0xdd84>
  } else if (t264.re == 0.0) {
 800e2f8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e2fc:	ed93 7b00 	vldr	d7, [r3]
 800e300:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e308:	d116      	bne.n	800e338 <G_q+0xdd50>
    t70_im = 0.0;
 800e30a:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800e30e:	443a      	add	r2, r7
 800e310:	f04f 0300 	mov.w	r3, #0
 800e314:	f04f 0400 	mov.w	r4, #0
 800e318:	e9c2 3400 	strd	r3, r4, [r2]
    t43_im = t264.im / 2.0;
 800e31c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e320:	ed93 6b02 	vldr	d6, [r3, #8]
 800e324:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e328:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e32c:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e330:	443b      	add	r3, r7
 800e332:	ed83 7b00 	vstr	d7, [r3]
 800e336:	e019      	b.n	800e36c <G_q+0xdd84>
  } else {
    t70_im = t264.re / 2.0;
 800e338:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e33c:	ed93 6b00 	vldr	d6, [r3]
 800e340:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e344:	443b      	add	r3, r7
 800e346:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e34a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e34e:	ed83 7b00 	vstr	d7, [r3]
    t43_im = t264.im / 2.0;
 800e352:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800e356:	ed93 6b02 	vldr	d6, [r3, #8]
 800e35a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e35e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e362:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e366:	443b      	add	r3, r7
 800e368:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t265.im == 0.0) {
 800e36c:	4ba3      	ldr	r3, [pc, #652]	; (800e5fc <G_q+0xe014>)
 800e36e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e372:	443a      	add	r2, r7
 800e374:	4413      	add	r3, r2
 800e376:	ed93 7b02 	vldr	d7, [r3, #8]
 800e37a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e382:	d118      	bne.n	800e3b6 <G_q+0xddce>
    t76_re = t265.re / 2.0;
 800e384:	4b9d      	ldr	r3, [pc, #628]	; (800e5fc <G_q+0xe014>)
 800e386:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e38a:	443a      	add	r2, r7
 800e38c:	4413      	add	r3, r2
 800e38e:	ed93 6b00 	vldr	d6, [r3]
 800e392:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800e396:	443b      	add	r3, r7
 800e398:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e39c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3a0:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800e3a4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800e3a8:	f04f 0300 	mov.w	r3, #0
 800e3ac:	f04f 0400 	mov.w	r4, #0
 800e3b0:	e9c2 3400 	strd	r3, r4, [r2]
 800e3b4:	e043      	b.n	800e43e <G_q+0xde56>
  } else if (t265.re == 0.0) {
 800e3b6:	4b91      	ldr	r3, [pc, #580]	; (800e5fc <G_q+0xe014>)
 800e3b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e3bc:	443a      	add	r2, r7
 800e3be:	4413      	add	r3, r2
 800e3c0:	ed93 7b00 	vldr	d7, [r3]
 800e3c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e3c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e3cc:	d118      	bne.n	800e400 <G_q+0xde18>
    t76_re = 0.0;
 800e3ce:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800e3d2:	443a      	add	r2, r7
 800e3d4:	f04f 0300 	mov.w	r3, #0
 800e3d8:	f04f 0400 	mov.w	r4, #0
 800e3dc:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t265.im / 2.0;
 800e3e0:	4b86      	ldr	r3, [pc, #536]	; (800e5fc <G_q+0xe014>)
 800e3e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e3e6:	443a      	add	r2, r7
 800e3e8:	4413      	add	r3, r2
 800e3ea:	ed93 6b02 	vldr	d6, [r3, #8]
 800e3ee:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800e3f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3fa:	ed83 7b00 	vstr	d7, [r3]
 800e3fe:	e01e      	b.n	800e43e <G_q+0xde56>
  } else {
    t76_re = t265.re / 2.0;
 800e400:	4b7e      	ldr	r3, [pc, #504]	; (800e5fc <G_q+0xe014>)
 800e402:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e406:	443a      	add	r2, r7
 800e408:	4413      	add	r3, r2
 800e40a:	ed93 6b00 	vldr	d6, [r3]
 800e40e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800e412:	443b      	add	r3, r7
 800e414:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e418:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e41c:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t265.im / 2.0;
 800e420:	4b76      	ldr	r3, [pc, #472]	; (800e5fc <G_q+0xe014>)
 800e422:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e426:	443a      	add	r2, r7
 800e428:	4413      	add	r3, r2
 800e42a:	ed93 6b02 	vldr	d6, [r3, #8]
 800e42e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800e432:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e436:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e43a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 800e43e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800e442:	ed93 7b00 	vldr	d7, [r3]
 800e446:	ed9f 6b68 	vldr	d6, [pc, #416]	; 800e5e8 <G_q+0xe000>
 800e44a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e44e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800e452:	ed93 7b02 	vldr	d7, [r3, #8]
 800e456:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800e5f0 <G_q+0xe008>
 800e45a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e45e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e462:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800e466:	ed93 7b00 	vldr	d7, [r3]
 800e46a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800e5e8 <G_q+0xe000>
 800e46e:	ee27 5b05 	vmul.f64	d5, d7, d5
    t253.im * 3.061616997868383E-17);
 800e472:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800e476:	ed93 7b02 	vldr	d7, [r3, #8]
 800e47a:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800e5f0 <G_q+0xe008>
 800e47e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 800e482:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e486:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e48a:	f241 3368 	movw	r3, #4968	; 0x1368
 800e48e:	443b      	add	r3, r7
 800e490:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 800e494:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800e498:	ed93 7b00 	vldr	d7, [r3]
 800e49c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 800e5f0 <G_q+0xe008>
 800e4a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4a4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800e4a8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4ac:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 800e5e8 <G_q+0xe000>
 800e4b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e4b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e4b8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800e4bc:	ed93 7b00 	vldr	d7, [r3]
 800e4c0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 800e5f0 <G_q+0xe008>
 800e4c4:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t253.im * 0.0);
 800e4c8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 800e4cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4d0:	ed9f 4b45 	vldr	d4, [pc, #276]	; 800e5e8 <G_q+0xe000>
 800e4d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e4d8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 800e4dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4e0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e4e4:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t250.re * 0.0 - t250.im * 0.5) - (t251.re * 0.0 - t251.im * 0.5);
 800e4e8:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800e4ec:	443b      	add	r3, r7
 800e4ee:	ed93 7b00 	vldr	d7, [r3]
 800e4f2:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 800e5e8 <G_q+0xe000>
 800e4f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4fa:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800e4fe:	443b      	add	r3, r7
 800e500:	ed93 7b02 	vldr	d7, [r3, #8]
 800e504:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e508:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e50c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e510:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800e514:	ed93 7b00 	vldr	d7, [r3]
 800e518:	ed9f 5b33 	vldr	d5, [pc, #204]	; 800e5e8 <G_q+0xe000>
 800e51c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e520:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800e524:	ed93 7b02 	vldr	d7, [r3, #8]
 800e528:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e52c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e530:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e534:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e538:	f241 3348 	movw	r3, #4936	; 0x1348
 800e53c:	443b      	add	r3, r7
 800e53e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t250.re * 0.5 + t250.im * 0.0) - (t251.re * 0.5 + t251.im * 0.0);
 800e542:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800e546:	443b      	add	r3, r7
 800e548:	ed93 7b00 	vldr	d7, [r3]
 800e54c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e550:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e554:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800e558:	443b      	add	r3, r7
 800e55a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e55e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 800e5e8 <G_q+0xe000>
 800e562:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e566:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e56a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800e56e:	ed93 7b00 	vldr	d7, [r3]
 800e572:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e576:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e57a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800e57e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e582:	ed9f 4b19 	vldr	d4, [pc, #100]	; 800e5e8 <G_q+0xe000>
 800e586:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e58a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e58e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e592:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e596:	ed83 7b00 	vstr	d7, [r3]
  if (t248.im == 0.0) {
 800e59a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e59e:	443b      	add	r3, r7
 800e5a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e5a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5ac:	d128      	bne.n	800e600 <G_q+0xe018>
    t12_re = t248.re / 2.0;
 800e5ae:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e5b2:	443b      	add	r3, r7
 800e5b4:	ed93 6b00 	vldr	d6, [r3]
 800e5b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e5bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e5c0:	f241 3388 	movw	r3, #5000	; 0x1388
 800e5c4:	443b      	add	r3, r7
 800e5c6:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800e5ca:	f04f 0300 	mov.w	r3, #0
 800e5ce:	f04f 0400 	mov.w	r4, #0
 800e5d2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800e5d6:	e9c2 3400 	strd	r3, r4, [r2]
 800e5da:	e04d      	b.n	800e678 <G_q+0xe090>
 800e5dc:	f3af 8000 	nop.w
 800e5e0:	9374bc6a 	.word	0x9374bc6a
 800e5e4:	3f960418 	.word	0x3f960418
	...
 800e5f0:	33145c07 	.word	0x33145c07
 800e5f4:	3c81a626 	.word	0x3c81a626
 800e5f8:	ffffec34 	.word	0xffffec34
 800e5fc:	ffffed10 	.word	0xffffed10
  } else if (t248.re == 0.0) {
 800e600:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e604:	443b      	add	r3, r7
 800e606:	ed93 7b00 	vldr	d7, [r3]
 800e60a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e612:	d116      	bne.n	800e642 <G_q+0xe05a>
    t12_re = 0.0;
 800e614:	f04f 0300 	mov.w	r3, #0
 800e618:	f04f 0400 	mov.w	r4, #0
 800e61c:	f241 3288 	movw	r2, #5000	; 0x1388
 800e620:	443a      	add	r2, r7
 800e622:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t248.im / 2.0;
 800e626:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e62a:	443b      	add	r3, r7
 800e62c:	ed93 6b02 	vldr	d6, [r3, #8]
 800e630:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e634:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e638:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e63c:	ed83 7b00 	vstr	d7, [r3]
 800e640:	e01a      	b.n	800e678 <G_q+0xe090>
  } else {
    t12_re = t248.re / 2.0;
 800e642:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e646:	443b      	add	r3, r7
 800e648:	ed93 6b00 	vldr	d6, [r3]
 800e64c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e650:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e654:	f241 3388 	movw	r3, #5000	; 0x1388
 800e658:	443b      	add	r3, r7
 800e65a:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t248.im / 2.0;
 800e65e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800e662:	443b      	add	r3, r7
 800e664:	ed93 6b02 	vldr	d6, [r3, #8]
 800e668:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e66c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e670:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e674:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t249.im == 0.0) {
 800e678:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e67c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e680:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e688:	d116      	bne.n	800e6b8 <G_q+0xe0d0>
    t34_re = t249.re / 2.0;
 800e68a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e68e:	ed93 6b00 	vldr	d6, [r3]
 800e692:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e69a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e69e:	443b      	add	r3, r7
 800e6a0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e6a4:	f04f 0300 	mov.w	r3, #0
 800e6a8:	f04f 0400 	mov.w	r4, #0
 800e6ac:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e6b0:	443a      	add	r2, r7
 800e6b2:	e9c2 3400 	strd	r3, r4, [r2]
 800e6b6:	e039      	b.n	800e72c <G_q+0xe144>
  } else if (t249.re == 0.0) {
 800e6b8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e6bc:	ed93 7b00 	vldr	d7, [r3]
 800e6c0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6c8:	d116      	bne.n	800e6f8 <G_q+0xe110>
    t34_re = 0.0;
 800e6ca:	f04f 0300 	mov.w	r3, #0
 800e6ce:	f04f 0400 	mov.w	r4, #0
 800e6d2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e6d6:	443a      	add	r2, r7
 800e6d8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t249.im / 2.0;
 800e6dc:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e6e0:	ed93 6b02 	vldr	d6, [r3, #8]
 800e6e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e6e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e6ec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e6f0:	443b      	add	r3, r7
 800e6f2:	ed83 7b00 	vstr	d7, [r3]
 800e6f6:	e019      	b.n	800e72c <G_q+0xe144>
  } else {
    t34_re = t249.re / 2.0;
 800e6f8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e6fc:	ed93 6b00 	vldr	d6, [r3]
 800e700:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e704:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e708:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e70c:	443b      	add	r3, r7
 800e70e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t249.im / 2.0;
 800e712:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 800e716:	ed93 6b02 	vldr	d6, [r3, #8]
 800e71a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e71e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e722:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e726:	443b      	add	r3, r7
 800e728:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t246.re * 3.061616997868383E-17 + t247.re * 3.061616997868383E-17;
 800e72c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800e730:	ed93 7b00 	vldr	d7, [r3]
 800e734:	ed9f 6be2 	vldr	d6, [pc, #904]	; 800eac0 <G_q+0xe4d8>
 800e738:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e73c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800e740:	ed93 7b00 	vldr	d7, [r3]
 800e744:	ed9f 5bde 	vldr	d5, [pc, #888]	; 800eac0 <G_q+0xe4d8>
 800e748:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e74c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e750:	f241 3330 	movw	r3, #4912	; 0x1330
 800e754:	443b      	add	r3, r7
 800e756:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t246.im * 3.061616997868383E-17 + t247.im * 3.061616997868383E-17;
 800e75a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 800e75e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e762:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800eac0 <G_q+0xe4d8>
 800e766:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e76a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 800e76e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e772:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800eac0 <G_q+0xe4d8>
 800e776:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e77a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e77e:	f241 3310 	movw	r3, #4880	; 0x1310
 800e782:	443b      	add	r3, r7
 800e784:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800e788:	f241 3388 	movw	r3, #5000	; 0x1388
 800e78c:	443b      	add	r3, r7
 800e78e:	ed93 6b00 	vldr	d6, [r3]
 800e792:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e796:	443b      	add	r3, r7
 800e798:	ed93 7b00 	vldr	d7, [r3]
 800e79c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e7a0:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 800eac8 <G_q+0xe4e0>
 800e7a4:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7a8:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7ac:	443b      	add	r3, r7
 800e7ae:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800e7b2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e7b6:	ed93 6b00 	vldr	d6, [r3]
 800e7ba:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e7be:	443b      	add	r3, r7
 800e7c0:	ed93 7b00 	vldr	d7, [r3]
 800e7c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e7c8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e7cc:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t242.re * 0.0 - t242.im * 0.5) - (t243.re * 0.0 - t243.im * 0.5);
 800e7d0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800e7d4:	ed93 7b00 	vldr	d7, [r3]
 800e7d8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 800ead0 <G_q+0xe4e8>
 800e7dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e7e0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800e7e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e7e8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e7ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e7f0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e7f4:	4bba      	ldr	r3, [pc, #744]	; (800eae0 <G_q+0xe4f8>)
 800e7f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e7fa:	443a      	add	r2, r7
 800e7fc:	4413      	add	r3, r2
 800e7fe:	ed93 7b00 	vldr	d7, [r3]
 800e802:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800ead0 <G_q+0xe4e8>
 800e806:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e80a:	4bb5      	ldr	r3, [pc, #724]	; (800eae0 <G_q+0xe4f8>)
 800e80c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e810:	443a      	add	r2, r7
 800e812:	4413      	add	r3, r2
 800e814:	ed93 7b02 	vldr	d7, [r3, #8]
 800e818:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e81c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e820:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e824:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800e828:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e82c:	ed83 7b00 	vstr	d7, [r3]
  t70_re = (t242.re * 0.5 + t242.im * 0.0) - (t243.re * 0.5 + t243.im * 0.0);
 800e830:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800e834:	ed93 7b00 	vldr	d7, [r3]
 800e838:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e83c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e840:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800e844:	ed93 7b02 	vldr	d7, [r3, #8]
 800e848:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800ead0 <G_q+0xe4e8>
 800e84c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e850:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e854:	4ba2      	ldr	r3, [pc, #648]	; (800eae0 <G_q+0xe4f8>)
 800e856:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e85a:	443a      	add	r2, r7
 800e85c:	4413      	add	r3, r2
 800e85e:	ed93 7b00 	vldr	d7, [r3]
 800e862:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e866:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e86a:	4b9d      	ldr	r3, [pc, #628]	; (800eae0 <G_q+0xe4f8>)
 800e86c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e870:	443a      	add	r2, r7
 800e872:	4413      	add	r3, r2
 800e874:	ed93 7b02 	vldr	d7, [r3, #8]
 800e878:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800ead0 <G_q+0xe4e8>
 800e87c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e880:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e884:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e888:	443b      	add	r3, r7
 800e88a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e88e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 800e892:	f241 03b0 	movw	r3, #4272	; 0x10b0
 800e896:	443b      	add	r3, r7
 800e898:	ed93 7b00 	vldr	d7, [r3]
 800e89c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 800ead8 <G_q+0xe4f0>
 800e8a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e8a4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800e8a8:	ed93 7b00 	vldr	d7, [r3]
 800e8ac:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800ead8 <G_q+0xe4f0>
 800e8b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e8b4:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t16_re * t20_re - t16_im * t20_im)) + (t23_re * t12_re - t3_im *
 800e8b8:	f241 3368 	movw	r3, #4968	; 0x1368
 800e8bc:	443b      	add	r3, r7
 800e8be:	ed93 5b00 	vldr	d5, [r3]
 800e8c2:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8c6:	443b      	add	r3, r7
 800e8c8:	ed93 7b00 	vldr	d7, [r3]
 800e8cc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e8d0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e8d4:	ed93 4b00 	vldr	d4, [r3]
 800e8d8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e8dc:	ed93 7b00 	vldr	d7, [r3]
 800e8e0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e8e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e8e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e8ec:	f241 3330 	movw	r3, #4912	; 0x1330
 800e8f0:	443b      	add	r3, r7
 800e8f2:	ed93 5b00 	vldr	d5, [r3]
 800e8f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800e8fa:	443b      	add	r3, r7
 800e8fc:	ed93 7b00 	vldr	d7, [r3]
 800e900:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e904:	f241 3310 	movw	r3, #4880	; 0x1310
 800e908:	443b      	add	r3, r7
 800e90a:	ed93 4b00 	vldr	d4, [r3]
 800e90e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e912:	ed93 7b00 	vldr	d7, [r3]
 800e916:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e91a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e91e:	ee36 7b07 	vadd.f64	d7, d6, d7
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 800e922:	f241 2350 	movw	r3, #4688	; 0x1250
 800e926:	443b      	add	r3, r7
 800e928:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800ead8 <G_q+0xe4f0>
 800e92c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e930:	ed83 7b00 	vstr	d7, [r3]
             t12_im)) - 6.123233995736766E-17;
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 800e934:	f241 03b0 	movw	r3, #4272	; 0x10b0
 800e938:	443b      	add	r3, r7
 800e93a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e93e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800ead8 <G_q+0xe4f0>
 800e942:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e946:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 800e94a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e94e:	ed9f 5b62 	vldr	d5, [pc, #392]	; 800ead8 <G_q+0xe4f0>
 800e952:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e956:	ee36 6b07 	vadd.f64	d6, d6, d7
              + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800e95a:	f241 3368 	movw	r3, #4968	; 0x1368
 800e95e:	443b      	add	r3, r7
 800e960:	ed93 5b00 	vldr	d5, [r3]
 800e964:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e968:	ed93 7b00 	vldr	d7, [r3]
 800e96c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e970:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e974:	ed93 4b00 	vldr	d4, [r3]
 800e978:	f241 3348 	movw	r3, #4936	; 0x1348
 800e97c:	443b      	add	r3, r7
 800e97e:	ed93 7b00 	vldr	d7, [r3]
 800e982:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e986:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e98a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e98e:	f241 3330 	movw	r3, #4912	; 0x1330
 800e992:	443b      	add	r3, r7
 800e994:	ed93 5b00 	vldr	d5, [r3]
 800e998:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e99c:	ed93 7b00 	vldr	d7, [r3]
 800e9a0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e9a4:	f241 3310 	movw	r3, #4880	; 0x1310
 800e9a8:	443b      	add	r3, r7
 800e9aa:	ed93 4b00 	vldr	d4, [r3]
 800e9ae:	f241 3388 	movw	r3, #5000	; 0x1388
 800e9b2:	443b      	add	r3, r7
 800e9b4:	ed93 7b00 	vldr	d7, [r3]
 800e9b8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e9bc:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 800e9c0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e9c4:	f241 3338 	movw	r3, #4920	; 0x1338
 800e9c8:	443b      	add	r3, r7
 800e9ca:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t256.im == 0.0) {
 800e9ce:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800e9d2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e9d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9de:	d115      	bne.n	800ea0c <G_q+0xe424>
    t20_im = t256.re / 2.0;
 800e9e0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800e9e4:	ed93 6b00 	vldr	d6, [r3]
 800e9e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e9ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e9f4:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 800e9f8:	f04f 0300 	mov.w	r3, #0
 800e9fc:	f04f 0400 	mov.w	r4, #0
 800ea00:	f241 3218 	movw	r2, #4888	; 0x1318
 800ea04:	443a      	add	r2, r7
 800ea06:	e9c2 3400 	strd	r3, r4, [r2]
 800ea0a:	e037      	b.n	800ea7c <G_q+0xe494>
  } else if (t256.re == 0.0) {
 800ea0c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800ea10:	ed93 7b00 	vldr	d7, [r3]
 800ea14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1c:	d115      	bne.n	800ea4a <G_q+0xe462>
    t20_im = 0.0;
 800ea1e:	f04f 0300 	mov.w	r3, #0
 800ea22:	f04f 0400 	mov.w	r4, #0
 800ea26:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800ea2a:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t256.im / 2.0;
 800ea2e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800ea32:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea3a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea3e:	f241 3318 	movw	r3, #4888	; 0x1318
 800ea42:	443b      	add	r3, r7
 800ea44:	ed83 7b00 	vstr	d7, [r3]
 800ea48:	e018      	b.n	800ea7c <G_q+0xe494>
  } else {
    t20_im = t256.re / 2.0;
 800ea4a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800ea4e:	ed93 6b00 	vldr	d6, [r3]
 800ea52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea5a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ea5e:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t256.im / 2.0;
 800ea62:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 800ea66:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea72:	f241 3318 	movw	r3, #4888	; 0x1318
 800ea76:	443b      	add	r3, r7
 800ea78:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t257.im == 0.0) {
 800ea7c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ea80:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea8c:	d12a      	bne.n	800eae4 <G_q+0xe4fc>
    t34_re = t257.re / 2.0;
 800ea8e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800ea92:	ed93 6b00 	vldr	d6, [r3]
 800ea96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea9e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eaa2:	443b      	add	r3, r7
 800eaa4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800eaa8:	f04f 0300 	mov.w	r3, #0
 800eaac:	f04f 0400 	mov.w	r4, #0
 800eab0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eab4:	443a      	add	r2, r7
 800eab6:	e9c2 3400 	strd	r3, r4, [r2]
 800eaba:	e04d      	b.n	800eb58 <G_q+0xe570>
 800eabc:	f3af 8000 	nop.w
 800eac0:	33145c07 	.word	0x33145c07
 800eac4:	3c81a626 	.word	0x3c81a626
 800eac8:	858a5d48 	.word	0x858a5d48
 800eacc:	394377ce 	.word	0x394377ce
	...
 800ead8:	33145c07 	.word	0x33145c07
 800eadc:	3c91a626 	.word	0x3c91a626
 800eae0:	ffffef70 	.word	0xffffef70
  } else if (t257.re == 0.0) {
 800eae4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800eae8:	ed93 7b00 	vldr	d7, [r3]
 800eaec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eaf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaf4:	d116      	bne.n	800eb24 <G_q+0xe53c>
    t34_re = 0.0;
 800eaf6:	f04f 0300 	mov.w	r3, #0
 800eafa:	f04f 0400 	mov.w	r4, #0
 800eafe:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800eb02:	443a      	add	r2, r7
 800eb04:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t257.im / 2.0;
 800eb08:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800eb0c:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb10:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb18:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb1c:	443b      	add	r3, r7
 800eb1e:	ed83 7b00 	vstr	d7, [r3]
 800eb22:	e019      	b.n	800eb58 <G_q+0xe570>
  } else {
    t34_re = t257.re / 2.0;
 800eb24:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800eb28:	ed93 6b00 	vldr	d6, [r3]
 800eb2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb34:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb38:	443b      	add	r3, r7
 800eb3a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t257.im / 2.0;
 800eb3e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800eb42:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb4e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb52:	443b      	add	r3, r7
 800eb54:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800eb58:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800eb5c:	ed93 6b00 	vldr	d6, [r3]
 800eb60:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb64:	443b      	add	r3, r7
 800eb66:	ed93 7b00 	vldr	d7, [r3]
 800eb6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eb6e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800eb72:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_im;
 800eb76:	f241 3318 	movw	r3, #4888	; 0x1318
 800eb7a:	443b      	add	r3, r7
 800eb7c:	ed93 6b00 	vldr	d6, [r3]
 800eb80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb84:	443b      	add	r3, r7
 800eb86:	ed93 7b00 	vldr	d7, [r3]
 800eb8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eb8e:	f241 3318 	movw	r3, #4888	; 0x1318
 800eb92:	443b      	add	r3, r7
 800eb94:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t258.re * 0.0 - t258.im * 0.5) - (t259.re * 0.0 - t259.im * 0.5);
 800eb98:	f241 1310 	movw	r3, #4368	; 0x1110
 800eb9c:	443b      	add	r3, r7
 800eb9e:	ed93 7b00 	vldr	d7, [r3]
 800eba2:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 800eef8 <G_q+0xe910>
 800eba6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ebaa:	f241 1310 	movw	r3, #4368	; 0x1110
 800ebae:	443b      	add	r3, r7
 800ebb0:	ed93 7b02 	vldr	d7, [r3, #8]
 800ebb4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ebb8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ebbc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ebc0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800ebc4:	ed93 7b00 	vldr	d7, [r3]
 800ebc8:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 800eef8 <G_q+0xe910>
 800ebcc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ebd0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800ebd4:	ed93 7b02 	vldr	d7, [r3, #8]
 800ebd8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ebdc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ebe0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ebe4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ebe8:	f241 3310 	movw	r3, #4880	; 0x1310
 800ebec:	443b      	add	r3, r7
 800ebee:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t258.re * 0.5 + t258.im * 0.0) - (t259.re * 0.5 + t259.im * 0.0);
 800ebf2:	f241 1310 	movw	r3, #4368	; 0x1110
 800ebf6:	443b      	add	r3, r7
 800ebf8:	ed93 7b00 	vldr	d7, [r3]
 800ebfc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ec00:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec04:	f241 1310 	movw	r3, #4368	; 0x1110
 800ec08:	443b      	add	r3, r7
 800ec0a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec0e:	ed9f 5bba 	vldr	d5, [pc, #744]	; 800eef8 <G_q+0xe910>
 800ec12:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec16:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ec1a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800ec1e:	ed93 7b00 	vldr	d7, [r3]
 800ec22:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec26:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec2a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 800ec2e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec32:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 800eef8 <G_q+0xe910>
 800ec36:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec3a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ec3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec42:	f241 3378 	movw	r3, #4984	; 0x1378
 800ec46:	443b      	add	r3, r7
 800ec48:	ed83 7b00 	vstr	d7, [r3]
  if (t262.im == 0.0) {
 800ec4c:	f241 1330 	movw	r3, #4400	; 0x1130
 800ec50:	443b      	add	r3, r7
 800ec52:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec5e:	d117      	bne.n	800ec90 <G_q+0xe6a8>
    t13_im = t262.re / 2.0;
 800ec60:	f241 1330 	movw	r3, #4400	; 0x1130
 800ec64:	443b      	add	r3, r7
 800ec66:	ed93 6b00 	vldr	d6, [r3]
 800ec6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ec6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ec72:	f241 3370 	movw	r3, #4976	; 0x1370
 800ec76:	443b      	add	r3, r7
 800ec78:	ed83 7b00 	vstr	d7, [r3]
    t16_re = 0.0;
 800ec7c:	f04f 0300 	mov.w	r3, #0
 800ec80:	f04f 0400 	mov.w	r4, #0
 800ec84:	f241 3268 	movw	r2, #4968	; 0x1368
 800ec88:	443a      	add	r2, r7
 800ec8a:	e9c2 3400 	strd	r3, r4, [r2]
 800ec8e:	e03d      	b.n	800ed0c <G_q+0xe724>
  } else if (t262.re == 0.0) {
 800ec90:	f241 1330 	movw	r3, #4400	; 0x1130
 800ec94:	443b      	add	r3, r7
 800ec96:	ed93 7b00 	vldr	d7, [r3]
 800ec9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eca2:	d117      	bne.n	800ecd4 <G_q+0xe6ec>
    t13_im = 0.0;
 800eca4:	f04f 0300 	mov.w	r3, #0
 800eca8:	f04f 0400 	mov.w	r4, #0
 800ecac:	f241 3270 	movw	r2, #4976	; 0x1370
 800ecb0:	443a      	add	r2, r7
 800ecb2:	e9c2 3400 	strd	r3, r4, [r2]
    t16_re = t262.im / 2.0;
 800ecb6:	f241 1330 	movw	r3, #4400	; 0x1130
 800ecba:	443b      	add	r3, r7
 800ecbc:	ed93 6b02 	vldr	d6, [r3, #8]
 800ecc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ecc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ecc8:	f241 3368 	movw	r3, #4968	; 0x1368
 800eccc:	443b      	add	r3, r7
 800ecce:	ed83 7b00 	vstr	d7, [r3]
 800ecd2:	e01b      	b.n	800ed0c <G_q+0xe724>
  } else {
    t13_im = t262.re / 2.0;
 800ecd4:	f241 1330 	movw	r3, #4400	; 0x1130
 800ecd8:	443b      	add	r3, r7
 800ecda:	ed93 6b00 	vldr	d6, [r3]
 800ecde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ece2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ece6:	f241 3370 	movw	r3, #4976	; 0x1370
 800ecea:	443b      	add	r3, r7
 800ecec:	ed83 7b00 	vstr	d7, [r3]
    t16_re = t262.im / 2.0;
 800ecf0:	f241 1330 	movw	r3, #4400	; 0x1130
 800ecf4:	443b      	add	r3, r7
 800ecf6:	ed93 6b02 	vldr	d6, [r3, #8]
 800ecfa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ecfe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed02:	f241 3368 	movw	r3, #4968	; 0x1368
 800ed06:	443b      	add	r3, r7
 800ed08:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t263.im == 0.0) {
 800ed0c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800ed10:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed1c:	d116      	bne.n	800ed4c <G_q+0xe764>
    t34_re = t263.re / 2.0;
 800ed1e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800ed22:	ed93 6b00 	vldr	d6, [r3]
 800ed26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed2e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ed32:	443b      	add	r3, r7
 800ed34:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ed38:	f04f 0300 	mov.w	r3, #0
 800ed3c:	f04f 0400 	mov.w	r4, #0
 800ed40:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ed44:	443a      	add	r2, r7
 800ed46:	e9c2 3400 	strd	r3, r4, [r2]
 800ed4a:	e039      	b.n	800edc0 <G_q+0xe7d8>
  } else if (t263.re == 0.0) {
 800ed4c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800ed50:	ed93 7b00 	vldr	d7, [r3]
 800ed54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed5c:	d116      	bne.n	800ed8c <G_q+0xe7a4>
    t34_re = 0.0;
 800ed5e:	f04f 0300 	mov.w	r3, #0
 800ed62:	f04f 0400 	mov.w	r4, #0
 800ed66:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ed6a:	443a      	add	r2, r7
 800ed6c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t263.im / 2.0;
 800ed70:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800ed74:	ed93 6b02 	vldr	d6, [r3, #8]
 800ed78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ed84:	443b      	add	r3, r7
 800ed86:	ed83 7b00 	vstr	d7, [r3]
 800ed8a:	e019      	b.n	800edc0 <G_q+0xe7d8>
  } else {
    t34_re = t263.re / 2.0;
 800ed8c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800ed90:	ed93 6b00 	vldr	d6, [r3]
 800ed94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed9c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eda0:	443b      	add	r3, r7
 800eda2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t263.im / 2.0;
 800eda6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800edaa:	ed93 6b02 	vldr	d6, [r3, #8]
 800edae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edb6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800edba:	443b      	add	r3, r7
 800edbc:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im = (t260.re * 0.0 - t260.im * 0.5) - (t261.re * 0.0 - t261.im * 0.5);
 800edc0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800edc4:	ed93 7b00 	vldr	d7, [r3]
 800edc8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800eef8 <G_q+0xe910>
 800edcc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800edd0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800edd4:	ed93 7b02 	vldr	d7, [r3, #8]
 800edd8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800eddc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ede0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ede4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800ede8:	ed93 7b00 	vldr	d7, [r3]
 800edec:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800eef8 <G_q+0xe910>
 800edf0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800edf4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800edf8:	ed93 7b02 	vldr	d7, [r3, #8]
 800edfc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ee00:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee04:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee08:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ee0c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ee10:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t260.re * 0.5 + t260.im * 0.0) - (t261.re * 0.5 + t261.im * 0.0);
 800ee14:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800ee18:	ed93 7b00 	vldr	d7, [r3]
 800ee1c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ee20:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ee24:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800ee28:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee2c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 800eef8 <G_q+0xe910>
 800ee30:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee34:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee38:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800ee3c:	ed93 7b00 	vldr	d7, [r3]
 800ee40:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ee44:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ee48:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 800ee4c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee50:	ed9f 4b29 	vldr	d4, [pc, #164]	; 800eef8 <G_q+0xe910>
 800ee54:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee58:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ee5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ee60:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee64:	443b      	add	r3, r7
 800ee66:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t13_im + t34_re) + 7.498798913309288E-33;
 800ee6a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ee6e:	443b      	add	r3, r7
 800ee70:	ed93 6b00 	vldr	d6, [r3]
 800ee74:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ee78:	443b      	add	r3, r7
 800ee7a:	ed93 7b00 	vldr	d7, [r3]
 800ee7e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ee82:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 800ef00 <G_q+0xe918>
 800ee86:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ee8a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ee8e:	443b      	add	r3, r7
 800ee90:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_im;
 800ee94:	f241 3368 	movw	r3, #4968	; 0x1368
 800ee98:	443b      	add	r3, r7
 800ee9a:	ed93 6b00 	vldr	d6, [r3]
 800ee9e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eea2:	443b      	add	r3, r7
 800eea4:	ed93 7b00 	vldr	d7, [r3]
 800eea8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eeac:	f241 3368 	movw	r3, #4968	; 0x1368
 800eeb0:	443b      	add	r3, r7
 800eeb2:	ed83 7b00 	vstr	d7, [r3]
  if (t254.im == 0.0) {
 800eeb6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800eeba:	ed93 7b02 	vldr	d7, [r3, #8]
 800eebe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eec2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eec6:	d11f      	bne.n	800ef08 <G_q+0xe920>
    t12_re = t254.re / 2.0;
 800eec8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800eecc:	ed93 6b00 	vldr	d6, [r3]
 800eed0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eed4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eed8:	f241 3388 	movw	r3, #5000	; 0x1388
 800eedc:	443b      	add	r3, r7
 800eede:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800eee2:	f04f 0300 	mov.w	r3, #0
 800eee6:	f04f 0400 	mov.w	r4, #0
 800eeea:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800eeee:	e9c2 3400 	strd	r3, r4, [r2]
 800eef2:	e041      	b.n	800ef78 <G_q+0xe990>
 800eef4:	f3af 8000 	nop.w
	...
 800ef00:	858a5d48 	.word	0x858a5d48
 800ef04:	394377ce 	.word	0x394377ce
  } else if (t254.re == 0.0) {
 800ef08:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800ef0c:	ed93 7b00 	vldr	d7, [r3]
 800ef10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef18:	d115      	bne.n	800ef46 <G_q+0xe95e>
    t12_re = 0.0;
 800ef1a:	f04f 0300 	mov.w	r3, #0
 800ef1e:	f04f 0400 	mov.w	r4, #0
 800ef22:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef26:	443a      	add	r2, r7
 800ef28:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t254.im / 2.0;
 800ef2c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800ef30:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef34:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef3c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ef40:	ed83 7b00 	vstr	d7, [r3]
 800ef44:	e018      	b.n	800ef78 <G_q+0xe990>
  } else {
    t12_re = t254.re / 2.0;
 800ef46:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800ef4a:	ed93 6b00 	vldr	d6, [r3]
 800ef4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef56:	f241 3388 	movw	r3, #5000	; 0x1388
 800ef5a:	443b      	add	r3, r7
 800ef5c:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t254.im / 2.0;
 800ef60:	f507 7354 	add.w	r3, r7, #848	; 0x350
 800ef64:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef68:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef6c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef70:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ef74:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t255.im == 0.0) {
 800ef78:	4b25      	ldr	r3, [pc, #148]	; (800f010 <G_q+0xea28>)
 800ef7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ef7e:	443a      	add	r2, r7
 800ef80:	4413      	add	r3, r2
 800ef82:	ed93 7b02 	vldr	d7, [r3, #8]
 800ef86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef8e:	d119      	bne.n	800efc4 <G_q+0xe9dc>
    t34_re = t255.re / 2.0;
 800ef90:	4b1f      	ldr	r3, [pc, #124]	; (800f010 <G_q+0xea28>)
 800ef92:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ef96:	443a      	add	r2, r7
 800ef98:	4413      	add	r3, r2
 800ef9a:	ed93 6b00 	vldr	d6, [r3]
 800ef9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800efa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800efa6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800efaa:	443b      	add	r3, r7
 800efac:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800efb0:	f04f 0300 	mov.w	r3, #0
 800efb4:	f04f 0400 	mov.w	r4, #0
 800efb8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800efbc:	443a      	add	r2, r7
 800efbe:	e9c2 3400 	strd	r3, r4, [r2]
 800efc2:	e047      	b.n	800f054 <G_q+0xea6c>
  } else if (t255.re == 0.0) {
 800efc4:	4b12      	ldr	r3, [pc, #72]	; (800f010 <G_q+0xea28>)
 800efc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800efca:	443a      	add	r2, r7
 800efcc:	4413      	add	r3, r2
 800efce:	ed93 7b00 	vldr	d7, [r3]
 800efd2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800efd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efda:	d11b      	bne.n	800f014 <G_q+0xea2c>
    t34_re = 0.0;
 800efdc:	f04f 0300 	mov.w	r3, #0
 800efe0:	f04f 0400 	mov.w	r4, #0
 800efe4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800efe8:	443a      	add	r2, r7
 800efea:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t255.im / 2.0;
 800efee:	4b08      	ldr	r3, [pc, #32]	; (800f010 <G_q+0xea28>)
 800eff0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800eff4:	443a      	add	r2, r7
 800eff6:	4413      	add	r3, r2
 800eff8:	ed93 6b02 	vldr	d6, [r3, #8]
 800effc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f000:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f004:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f008:	443b      	add	r3, r7
 800f00a:	ed83 7b00 	vstr	d7, [r3]
 800f00e:	e021      	b.n	800f054 <G_q+0xea6c>
 800f010:	ffffef90 	.word	0xffffef90
  } else {
    t34_re = t255.re / 2.0;
 800f014:	4be4      	ldr	r3, [pc, #912]	; (800f3a8 <G_q+0xedc0>)
 800f016:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f01a:	443a      	add	r2, r7
 800f01c:	4413      	add	r3, r2
 800f01e:	ed93 6b00 	vldr	d6, [r3]
 800f022:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f02a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f02e:	443b      	add	r3, r7
 800f030:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t255.im / 2.0;
 800f034:	4bdc      	ldr	r3, [pc, #880]	; (800f3a8 <G_q+0xedc0>)
 800f036:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f03a:	443a      	add	r2, r7
 800f03c:	4413      	add	r3, r2
 800f03e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f042:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f046:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f04a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f04e:	443b      	add	r3, r7
 800f050:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = (t20_im * t3_im - t85_im * t13_re) - (t16_im * t13_im - t20_re *
 800f054:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f058:	ed93 6b00 	vldr	d6, [r3]
 800f05c:	f241 3310 	movw	r3, #4880	; 0x1310
 800f060:	443b      	add	r3, r7
 800f062:	ed93 7b00 	vldr	d7, [r3]
 800f066:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f06a:	f241 3318 	movw	r3, #4888	; 0x1318
 800f06e:	443b      	add	r3, r7
 800f070:	ed93 5b00 	vldr	d5, [r3]
 800f074:	f241 3378 	movw	r3, #4984	; 0x1378
 800f078:	443b      	add	r3, r7
 800f07a:	ed93 7b00 	vldr	d7, [r3]
 800f07e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f082:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f086:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f08a:	ed93 5b00 	vldr	d5, [r3]
 800f08e:	f241 3370 	movw	r3, #4976	; 0x1370
 800f092:	443b      	add	r3, r7
 800f094:	ed93 7b00 	vldr	d7, [r3]
 800f098:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f09c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f0a0:	443b      	add	r3, r7
 800f0a2:	ed93 4b00 	vldr	d4, [r3]
 800f0a6:	f241 3368 	movw	r3, #4968	; 0x1368
 800f0aa:	443b      	add	r3, r7
 800f0ac:	ed93 7b00 	vldr	d7, [r3]
 800f0b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f0b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0bc:	f241 3330 	movw	r3, #4912	; 0x1330
 800f0c0:	443b      	add	r3, r7
 800f0c2:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t85_im = (t20_im * t13_re + t85_im * t3_im) - (t16_im * t16_re + t20_re *
 800f0c6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f0ca:	ed93 6b00 	vldr	d6, [r3]
 800f0ce:	f241 3378 	movw	r3, #4984	; 0x1378
 800f0d2:	443b      	add	r3, r7
 800f0d4:	ed93 7b00 	vldr	d7, [r3]
 800f0d8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f0dc:	f241 3318 	movw	r3, #4888	; 0x1318
 800f0e0:	443b      	add	r3, r7
 800f0e2:	ed93 5b00 	vldr	d5, [r3]
 800f0e6:	f241 3310 	movw	r3, #4880	; 0x1310
 800f0ea:	443b      	add	r3, r7
 800f0ec:	ed93 7b00 	vldr	d7, [r3]
 800f0f0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f0f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f0f8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f0fc:	ed93 5b00 	vldr	d5, [r3]
 800f100:	f241 3368 	movw	r3, #4968	; 0x1368
 800f104:	443b      	add	r3, r7
 800f106:	ed93 7b00 	vldr	d7, [r3]
 800f10a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f10e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f112:	443b      	add	r3, r7
 800f114:	ed93 4b00 	vldr	d4, [r3]
 800f118:	f241 3370 	movw	r3, #4976	; 0x1370
 800f11c:	443b      	add	r3, r7
 800f11e:	ed93 7b00 	vldr	d7, [r3]
 800f122:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f126:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f12a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f12e:	f241 3318 	movw	r3, #4888	; 0x1318
 800f132:	443b      	add	r3, r7
 800f134:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t12_re += t34_re;
 800f138:	f241 3388 	movw	r3, #5000	; 0x1388
 800f13c:	443b      	add	r3, r7
 800f13e:	ed93 6b00 	vldr	d6, [r3]
 800f142:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f146:	443b      	add	r3, r7
 800f148:	ed93 7b00 	vldr	d7, [r3]
 800f14c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f150:	f241 3388 	movw	r3, #5000	; 0x1388
 800f154:	443b      	add	r3, r7
 800f156:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800f15a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f15e:	ed93 6b00 	vldr	d6, [r3]
 800f162:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f166:	443b      	add	r3, r7
 800f168:	ed93 7b00 	vldr	d7, [r3]
 800f16c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f170:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f174:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t76_re;
 800f178:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800f17c:	443b      	add	r3, r7
 800f17e:	f241 21c8 	movw	r1, #4808	; 0x12c8
 800f182:	4439      	add	r1, r7
 800f184:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800f188:	443a      	add	r2, r7
 800f18a:	ed91 6b00 	vldr	d6, [r1]
 800f18e:	ed92 7b00 	vldr	d7, [r2]
 800f192:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f196:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t72_re;
 800f19a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800f19e:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800f1a2:	443a      	add	r2, r7
 800f1a4:	ed92 6b00 	vldr	d6, [r2]
 800f1a8:	ed93 7b00 	vldr	d7, [r3]
 800f1ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f1b0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800f1b4:	443b      	add	r3, r7
 800f1b6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (t58_im * t60_re - t70_re * b_t10_re) - (t23_re * t12_re - t85_im *
 800f1ba:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f1be:	f241 2350 	movw	r3, #4688	; 0x1250
 800f1c2:	443b      	add	r3, r7
 800f1c4:	ed92 6b00 	vldr	d6, [r2]
 800f1c8:	ed93 7b00 	vldr	d7, [r3]
 800f1cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f1d0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f1d4:	443b      	add	r3, r7
 800f1d6:	ed93 5b00 	vldr	d5, [r3]
 800f1da:	f241 3338 	movw	r3, #4920	; 0x1338
 800f1de:	443b      	add	r3, r7
 800f1e0:	ed93 7b00 	vldr	d7, [r3]
 800f1e4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f1e8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1ec:	f241 3330 	movw	r3, #4912	; 0x1330
 800f1f0:	443b      	add	r3, r7
 800f1f2:	ed93 5b00 	vldr	d5, [r3]
 800f1f6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f1fa:	443b      	add	r3, r7
 800f1fc:	ed93 7b00 	vldr	d7, [r3]
 800f200:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f204:	f241 3318 	movw	r3, #4888	; 0x1318
 800f208:	443b      	add	r3, r7
 800f20a:	ed93 4b00 	vldr	d4, [r3]
 800f20e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f212:	ed93 7b00 	vldr	d7, [r3]
 800f216:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f21a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f21e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f222:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800f226:	443b      	add	r3, r7
 800f228:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t70_re = (t58_im * b_t10_re + t70_re * t60_re) - (t23_re * t12_im + t85_im *
 800f22c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f230:	ed93 6b00 	vldr	d6, [r3]
 800f234:	f241 3338 	movw	r3, #4920	; 0x1338
 800f238:	443b      	add	r3, r7
 800f23a:	ed93 7b00 	vldr	d7, [r3]
 800f23e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f242:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800f246:	443a      	add	r2, r7
 800f248:	f241 2350 	movw	r3, #4688	; 0x1250
 800f24c:	443b      	add	r3, r7
 800f24e:	ed92 5b00 	vldr	d5, [r2]
 800f252:	ed93 7b00 	vldr	d7, [r3]
 800f256:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f25a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f25e:	f241 3330 	movw	r3, #4912	; 0x1330
 800f262:	443b      	add	r3, r7
 800f264:	ed93 5b00 	vldr	d5, [r3]
 800f268:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f26c:	ed93 7b00 	vldr	d7, [r3]
 800f270:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f274:	f241 3318 	movw	r3, #4888	; 0x1318
 800f278:	443b      	add	r3, r7
 800f27a:	ed93 4b00 	vldr	d4, [r3]
 800f27e:	f241 3388 	movw	r3, #5000	; 0x1388
 800f282:	443b      	add	r3, r7
 800f284:	ed93 7b00 	vldr	d7, [r3]
 800f288:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f28c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f290:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f294:	443b      	add	r3, r7
 800f296:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f29a:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  t72_re = (t280.re * 0.0 - t280.im * 0.5) - (t281.re * 0.0 - t281.im * 0.5);
 800f29e:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800f2a2:	443b      	add	r3, r7
 800f2a4:	ed93 7b00 	vldr	d7, [r3]
 800f2a8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 800f3a0 <G_q+0xedb8>
 800f2ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f2b0:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800f2b4:	443b      	add	r3, r7
 800f2b6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f2be:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f2c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f2c6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800f2ca:	ed93 7b00 	vldr	d7, [r3]
 800f2ce:	ed9f 5b34 	vldr	d5, [pc, #208]	; 800f3a0 <G_q+0xedb8>
 800f2d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f2d6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800f2da:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2de:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f2e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f2e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2ea:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800f2ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f2f2:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t280.re * 0.5 + t280.im * 0.0) - (t281.re * 0.5 + t281.im * 0.0);
 800f2f6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800f2fa:	443b      	add	r3, r7
 800f2fc:	ed93 7b00 	vldr	d7, [r3]
 800f300:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f304:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f308:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800f30c:	443b      	add	r3, r7
 800f30e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f312:	ed9f 5b23 	vldr	d5, [pc, #140]	; 800f3a0 <G_q+0xedb8>
 800f316:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f31a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f31e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800f322:	ed93 7b00 	vldr	d7, [r3]
 800f326:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f32a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f32e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800f332:	ed93 7b02 	vldr	d7, [r3, #8]
 800f336:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 800f3a0 <G_q+0xedb8>
 800f33a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f33e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f342:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800f346:	443b      	add	r3, r7
 800f348:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f34c:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t282.re * 0.0 - t282.im * 0.5) - (t283.re * 0.0 - t283.im * 0.5);
 800f350:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f354:	ed93 7b00 	vldr	d7, [r3]
 800f358:	ed9f 6b11 	vldr	d6, [pc, #68]	; 800f3a0 <G_q+0xedb8>
 800f35c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f360:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f364:	ed93 7b02 	vldr	d7, [r3, #8]
 800f368:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f36c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f370:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f374:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f378:	ed93 7b00 	vldr	d7, [r3]
 800f37c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 800f3a0 <G_q+0xedb8>
 800f380:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f384:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f388:	ed93 7b02 	vldr	d7, [r3, #8]
 800f38c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f390:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f394:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f398:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800f39c:	443b      	add	r3, r7
 800f39e:	e005      	b.n	800f3ac <G_q+0xedc4>
	...
 800f3a8:	ffffef90 	.word	0xffffef90
 800f3ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f3b0:	ed83 7b00 	vstr	d7, [r3]
  t55_re = (t282.re * 0.5 + t282.im * 0.0) - (t283.re * 0.5 + t283.im * 0.0);
 800f3b4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f3b8:	ed93 7b00 	vldr	d7, [r3]
 800f3bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f3c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f3c4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 800f3c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3cc:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 800f6a8 <G_q+0xf0c0>
 800f3d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f3d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f3d8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f3dc:	ed93 7b00 	vldr	d7, [r3]
 800f3e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f3e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f3e8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800f3ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3f0:	ed9f 4bad 	vldr	d4, [pc, #692]	; 800f6a8 <G_q+0xf0c0>
 800f3f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f3f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f3fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f400:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800f404:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 800f408:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800f40c:	ed93 7b00 	vldr	d7, [r3]
 800f410:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 800f6a8 <G_q+0xf0c0>
 800f414:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f418:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800f41c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f420:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 800f6b8 <G_q+0xf0d0>
 800f424:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f428:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f42c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800f430:	ed93 7b00 	vldr	d7, [r3]
 800f434:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 800f6a8 <G_q+0xf0c0>
 800f438:	ee27 5b05 	vmul.f64	d5, d7, d5
    t295.im * 3.061616997868383E-17);
 800f43c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800f440:	ed93 7b02 	vldr	d7, [r3, #8]
 800f444:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 800f6b8 <G_q+0xf0d0>
 800f448:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 800f44c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f450:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f454:	f241 3388 	movw	r3, #5000	; 0x1388
 800f458:	443b      	add	r3, r7
 800f45a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 800f45e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800f462:	ed93 7b00 	vldr	d7, [r3]
 800f466:	ed9f 6b94 	vldr	d6, [pc, #592]	; 800f6b8 <G_q+0xf0d0>
 800f46a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f46e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 800f472:	ed93 7b02 	vldr	d7, [r3, #8]
 800f476:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 800f6a8 <G_q+0xf0c0>
 800f47a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f47e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f482:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800f486:	ed93 7b00 	vldr	d7, [r3]
 800f48a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800f6b8 <G_q+0xf0d0>
 800f48e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t295.im * 0.0);
 800f492:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 800f496:	ed93 7b02 	vldr	d7, [r3, #8]
 800f49a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 800f6a8 <G_q+0xf0c0>
 800f49e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f4a2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 800f4a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f4aa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f4ae:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t292.re * 0.0 - t292.im * 0.5) - (t293.re * 0.0 - t293.im * 0.5);
 800f4b2:	f241 2310 	movw	r3, #4624	; 0x1210
 800f4b6:	443b      	add	r3, r7
 800f4b8:	ed93 7b00 	vldr	d7, [r3]
 800f4bc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800f6a8 <G_q+0xf0c0>
 800f4c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f4c4:	f241 2310 	movw	r3, #4624	; 0x1210
 800f4c8:	443b      	add	r3, r7
 800f4ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800f4ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f4d2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f4d6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f4da:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800f4de:	ed93 7b00 	vldr	d7, [r3]
 800f4e2:	ed9f 5b71 	vldr	d5, [pc, #452]	; 800f6a8 <G_q+0xf0c0>
 800f4e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f4ea:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800f4ee:	ed93 7b02 	vldr	d7, [r3, #8]
 800f4f2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f4f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f4fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f4fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f502:	f241 3330 	movw	r3, #4912	; 0x1330
 800f506:	443b      	add	r3, r7
 800f508:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t292.re * 0.5 + t292.im * 0.0) - (t293.re * 0.5 + t293.im * 0.0);
 800f50c:	f241 2310 	movw	r3, #4624	; 0x1210
 800f510:	443b      	add	r3, r7
 800f512:	ed93 7b00 	vldr	d7, [r3]
 800f516:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f51a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f51e:	f241 2310 	movw	r3, #4624	; 0x1210
 800f522:	443b      	add	r3, r7
 800f524:	ed93 7b02 	vldr	d7, [r3, #8]
 800f528:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800f6a8 <G_q+0xf0c0>
 800f52c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f530:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f534:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800f538:	ed93 7b00 	vldr	d7, [r3]
 800f53c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f540:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f544:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 800f548:	ed93 7b02 	vldr	d7, [r3, #8]
 800f54c:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800f6a8 <G_q+0xf0c0>
 800f550:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f554:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f558:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f55c:	f241 3310 	movw	r3, #4880	; 0x1310
 800f560:	443b      	add	r3, r7
 800f562:	ed83 7b00 	vstr	d7, [r3]
  if (t290.im == 0.0) {
 800f566:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f56a:	443b      	add	r3, r7
 800f56c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f570:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f578:	d117      	bne.n	800f5aa <G_q+0xefc2>
    t13_re = t290.re / 2.0;
 800f57a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f57e:	443b      	add	r3, r7
 800f580:	ed93 6b00 	vldr	d6, [r3]
 800f584:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f588:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f58c:	f241 3378 	movw	r3, #4984	; 0x1378
 800f590:	443b      	add	r3, r7
 800f592:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800f596:	f04f 0300 	mov.w	r3, #0
 800f59a:	f04f 0400 	mov.w	r4, #0
 800f59e:	f241 3270 	movw	r2, #4976	; 0x1370
 800f5a2:	443a      	add	r2, r7
 800f5a4:	e9c2 3400 	strd	r3, r4, [r2]
 800f5a8:	e03d      	b.n	800f626 <G_q+0xf03e>
  } else if (t290.re == 0.0) {
 800f5aa:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f5ae:	443b      	add	r3, r7
 800f5b0:	ed93 7b00 	vldr	d7, [r3]
 800f5b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5bc:	d117      	bne.n	800f5ee <G_q+0xf006>
    t13_re = 0.0;
 800f5be:	f04f 0300 	mov.w	r3, #0
 800f5c2:	f04f 0400 	mov.w	r4, #0
 800f5c6:	f241 3278 	movw	r2, #4984	; 0x1378
 800f5ca:	443a      	add	r2, r7
 800f5cc:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t290.im / 2.0;
 800f5d0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f5d4:	443b      	add	r3, r7
 800f5d6:	ed93 6b02 	vldr	d6, [r3, #8]
 800f5da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f5e2:	f241 3370 	movw	r3, #4976	; 0x1370
 800f5e6:	443b      	add	r3, r7
 800f5e8:	ed83 7b00 	vstr	d7, [r3]
 800f5ec:	e01b      	b.n	800f626 <G_q+0xf03e>
  } else {
    t13_re = t290.re / 2.0;
 800f5ee:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f5f2:	443b      	add	r3, r7
 800f5f4:	ed93 6b00 	vldr	d6, [r3]
 800f5f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f600:	f241 3378 	movw	r3, #4984	; 0x1378
 800f604:	443b      	add	r3, r7
 800f606:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t290.im / 2.0;
 800f60a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800f60e:	443b      	add	r3, r7
 800f610:	ed93 6b02 	vldr	d6, [r3, #8]
 800f614:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f618:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f61c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f620:	443b      	add	r3, r7
 800f622:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t291.im == 0.0) {
 800f626:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f62a:	ed93 7b02 	vldr	d7, [r3, #8]
 800f62e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f636:	d116      	bne.n	800f666 <G_q+0xf07e>
    t34_re = t291.re / 2.0;
 800f638:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f63c:	ed93 6b00 	vldr	d6, [r3]
 800f640:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f644:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f648:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f64c:	443b      	add	r3, r7
 800f64e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f652:	f04f 0300 	mov.w	r3, #0
 800f656:	f04f 0400 	mov.w	r4, #0
 800f65a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f65e:	443a      	add	r2, r7
 800f660:	e9c2 3400 	strd	r3, r4, [r2]
 800f664:	e046      	b.n	800f6f4 <G_q+0xf10c>
  } else if (t291.re == 0.0) {
 800f666:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f66a:	ed93 7b00 	vldr	d7, [r3]
 800f66e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	d123      	bne.n	800f6c0 <G_q+0xf0d8>
    t34_re = 0.0;
 800f678:	f04f 0300 	mov.w	r3, #0
 800f67c:	f04f 0400 	mov.w	r4, #0
 800f680:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f684:	443a      	add	r2, r7
 800f686:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t291.im / 2.0;
 800f68a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f68e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f692:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f696:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f69a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f69e:	443b      	add	r3, r7
 800f6a0:	ed83 7b00 	vstr	d7, [r3]
 800f6a4:	e026      	b.n	800f6f4 <G_q+0xf10c>
 800f6a6:	bf00      	nop
	...
 800f6b0:	858a5d48 	.word	0x858a5d48
 800f6b4:	394377ce 	.word	0x394377ce
 800f6b8:	33145c07 	.word	0x33145c07
 800f6bc:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t291.re / 2.0;
 800f6c0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f6c4:	ed93 6b00 	vldr	d6, [r3]
 800f6c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f6cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f6d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f6d4:	443b      	add	r3, r7
 800f6d6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t291.im / 2.0;
 800f6da:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 800f6de:	ed93 6b02 	vldr	d6, [r3, #8]
 800f6e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f6e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f6ea:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f6ee:	443b      	add	r3, r7
 800f6f0:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = t288.re * 3.061616997868383E-17 + t289.re * 3.061616997868383E-17;
 800f6f4:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800f6f8:	ed93 7b00 	vldr	d7, [r3]
 800f6fc:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 800f6b8 <G_q+0xf0d0>
 800f700:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f704:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800f708:	ed93 7b00 	vldr	d7, [r3]
 800f70c:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 800f6b8 <G_q+0xf0d0>
 800f710:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f714:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f718:	f241 3368 	movw	r3, #4968	; 0x1368
 800f71c:	443b      	add	r3, r7
 800f71e:	ed83 7b00 	vstr	d7, [r3]
  t16_im = t288.im * 3.061616997868383E-17 + t289.im * 3.061616997868383E-17;
 800f722:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800f726:	ed93 7b02 	vldr	d7, [r3, #8]
 800f72a:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 800f6b8 <G_q+0xf0d0>
 800f72e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f732:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800f736:	ed93 7b02 	vldr	d7, [r3, #8]
 800f73a:	ed1f 5b21 	vldr	d5, [pc, #-132]	; 800f6b8 <G_q+0xf0d0>
 800f73e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f742:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f746:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f74a:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800f74e:	f241 3378 	movw	r3, #4984	; 0x1378
 800f752:	443b      	add	r3, r7
 800f754:	ed93 6b00 	vldr	d6, [r3]
 800f758:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f75c:	443b      	add	r3, r7
 800f75e:	ed93 7b00 	vldr	d7, [r3]
 800f762:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f766:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 800f6b0 <G_q+0xf0c8>
 800f76a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f76e:	f241 3378 	movw	r3, #4984	; 0x1378
 800f772:	443b      	add	r3, r7
 800f774:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800f778:	f241 3370 	movw	r3, #4976	; 0x1370
 800f77c:	443b      	add	r3, r7
 800f77e:	ed93 6b00 	vldr	d6, [r3]
 800f782:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f786:	443b      	add	r3, r7
 800f788:	ed93 7b00 	vldr	d7, [r3]
 800f78c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f790:	f241 3370 	movw	r3, #4976	; 0x1370
 800f794:	443b      	add	r3, r7
 800f796:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t284.re * 3.061616997868383E-17 + t285.re * 3.061616997868383E-17;
 800f79a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800f79e:	ed93 7b00 	vldr	d7, [r3]
 800f7a2:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 800f6b8 <G_q+0xf0d0>
 800f7a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f7aa:	4bb7      	ldr	r3, [pc, #732]	; (800fa88 <G_q+0xf4a0>)
 800f7ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f7b0:	443a      	add	r2, r7
 800f7b2:	4413      	add	r3, r2
 800f7b4:	ed93 7b00 	vldr	d7, [r3]
 800f7b8:	ed9f 5baf 	vldr	d5, [pc, #700]	; 800fa78 <G_q+0xf490>
 800f7bc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f7c0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f7c4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f7c8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = t284.im * 3.061616997868383E-17 + t285.im * 3.061616997868383E-17;
 800f7cc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 800f7d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7d4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 800fa78 <G_q+0xf490>
 800f7d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f7dc:	4baa      	ldr	r3, [pc, #680]	; (800fa88 <G_q+0xf4a0>)
 800f7de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f7e2:	443a      	add	r2, r7
 800f7e4:	4413      	add	r3, r2
 800f7e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7ea:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 800fa78 <G_q+0xf490>
 800f7ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f7f2:	f241 2350 	movw	r3, #4688	; 0x1250
 800f7f6:	443b      	add	r3, r7
 800f7f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f7fc:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 800f800:	f241 13d0 	movw	r3, #4560	; 0x11d0
 800f804:	443b      	add	r3, r7
 800f806:	ed93 7b00 	vldr	d7, [r3]
 800f80a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 800fa80 <G_q+0xf498>
 800f80e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f812:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800f816:	ed93 7b00 	vldr	d7, [r3]
 800f81a:	ed9f 5b99 	vldr	d5, [pc, #612]	; 800fa80 <G_q+0xf498>
 800f81e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f822:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t12_re * t23_re - t12_im * t3_im)) + (t16_re * t13_re - t16_im *
 800f826:	f241 3388 	movw	r3, #5000	; 0x1388
 800f82a:	443b      	add	r3, r7
 800f82c:	ed93 5b00 	vldr	d5, [r3]
 800f830:	f241 3330 	movw	r3, #4912	; 0x1330
 800f834:	443b      	add	r3, r7
 800f836:	ed93 7b00 	vldr	d7, [r3]
 800f83a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f83e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f842:	ed93 4b00 	vldr	d4, [r3]
 800f846:	f241 3310 	movw	r3, #4880	; 0x1310
 800f84a:	443b      	add	r3, r7
 800f84c:	ed93 7b00 	vldr	d7, [r3]
 800f850:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f854:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f858:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f85c:	f241 3368 	movw	r3, #4968	; 0x1368
 800f860:	443b      	add	r3, r7
 800f862:	ed93 5b00 	vldr	d5, [r3]
 800f866:	f241 3378 	movw	r3, #4984	; 0x1378
 800f86a:	443b      	add	r3, r7
 800f86c:	ed93 7b00 	vldr	d7, [r3]
 800f870:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f874:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f878:	ed93 4b00 	vldr	d4, [r3]
 800f87c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f880:	443b      	add	r3, r7
 800f882:	ed93 7b00 	vldr	d7, [r3]
 800f886:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f88a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f88e:	ee36 7b07 	vadd.f64	d7, d6, d7
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 800f892:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800f896:	443b      	add	r3, r7
 800f898:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800fa80 <G_q+0xf498>
 800f89c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f8a0:	ed83 7b00 	vstr	d7, [r3]
             t13_im)) - 6.123233995736766E-17;
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 800f8a4:	f241 13d0 	movw	r3, #4560	; 0x11d0
 800f8a8:	443b      	add	r3, r7
 800f8aa:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8ae:	ed9f 6b74 	vldr	d6, [pc, #464]	; 800fa80 <G_q+0xf498>
 800f8b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f8b6:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800f8ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8be:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800fa80 <G_q+0xf498>
 800f8c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f8c6:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t12_re * t3_im + t12_im * t23_re)) + (t16_re * t13_im + t16_im *
 800f8ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800f8ce:	443b      	add	r3, r7
 800f8d0:	ed93 5b00 	vldr	d5, [r3]
 800f8d4:	f241 3310 	movw	r3, #4880	; 0x1310
 800f8d8:	443b      	add	r3, r7
 800f8da:	ed93 7b00 	vldr	d7, [r3]
 800f8de:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f8e2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f8e6:	ed93 4b00 	vldr	d4, [r3]
 800f8ea:	f241 3330 	movw	r3, #4912	; 0x1330
 800f8ee:	443b      	add	r3, r7
 800f8f0:	ed93 7b00 	vldr	d7, [r3]
 800f8f4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f8f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f8fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f900:	f241 3368 	movw	r3, #4968	; 0x1368
 800f904:	443b      	add	r3, r7
 800f906:	ed93 5b00 	vldr	d5, [r3]
 800f90a:	f241 3370 	movw	r3, #4976	; 0x1370
 800f90e:	443b      	add	r3, r7
 800f910:	ed93 7b00 	vldr	d7, [r3]
 800f914:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f918:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f91c:	ed93 4b00 	vldr	d4, [r3]
 800f920:	f241 3378 	movw	r3, #4984	; 0x1378
 800f924:	443b      	add	r3, r7
 800f926:	ed93 7b00 	vldr	d7, [r3]
 800f92a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f92e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 800f932:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f936:	f241 3318 	movw	r3, #4888	; 0x1318
 800f93a:	443b      	add	r3, r7
 800f93c:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t270.im == 0.0) {
 800f940:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f944:	ed93 7b02 	vldr	d7, [r3, #8]
 800f948:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f94c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f950:	d116      	bne.n	800f980 <G_q+0xf398>
    t3_im = t270.re / 2.0;
 800f952:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f956:	ed93 6b00 	vldr	d6, [r3]
 800f95a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f95e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f962:	f241 3310 	movw	r3, #4880	; 0x1310
 800f966:	443b      	add	r3, r7
 800f968:	ed83 7b00 	vstr	d7, [r3]
    t23_re = 0.0;
 800f96c:	f04f 0300 	mov.w	r3, #0
 800f970:	f04f 0400 	mov.w	r4, #0
 800f974:	f241 3230 	movw	r2, #4912	; 0x1330
 800f978:	443a      	add	r2, r7
 800f97a:	e9c2 3400 	strd	r3, r4, [r2]
 800f97e:	e039      	b.n	800f9f4 <G_q+0xf40c>
  } else if (t270.re == 0.0) {
 800f980:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f984:	ed93 7b00 	vldr	d7, [r3]
 800f988:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f990:	d116      	bne.n	800f9c0 <G_q+0xf3d8>
    t3_im = 0.0;
 800f992:	f04f 0300 	mov.w	r3, #0
 800f996:	f04f 0400 	mov.w	r4, #0
 800f99a:	f241 3210 	movw	r2, #4880	; 0x1310
 800f99e:	443a      	add	r2, r7
 800f9a0:	e9c2 3400 	strd	r3, r4, [r2]
    t23_re = t270.im / 2.0;
 800f9a4:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f9a8:	ed93 6b02 	vldr	d6, [r3, #8]
 800f9ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f9b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f9b4:	f241 3330 	movw	r3, #4912	; 0x1330
 800f9b8:	443b      	add	r3, r7
 800f9ba:	ed83 7b00 	vstr	d7, [r3]
 800f9be:	e019      	b.n	800f9f4 <G_q+0xf40c>
  } else {
    t3_im = t270.re / 2.0;
 800f9c0:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f9c4:	ed93 6b00 	vldr	d6, [r3]
 800f9c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f9cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f9d0:	f241 3310 	movw	r3, #4880	; 0x1310
 800f9d4:	443b      	add	r3, r7
 800f9d6:	ed83 7b00 	vstr	d7, [r3]
    t23_re = t270.im / 2.0;
 800f9da:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 800f9de:	ed93 6b02 	vldr	d6, [r3, #8]
 800f9e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f9e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f9ea:	f241 3330 	movw	r3, #4912	; 0x1330
 800f9ee:	443b      	add	r3, r7
 800f9f0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t271.im == 0.0) {
 800f9f4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800f9f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9fc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa04:	d116      	bne.n	800fa34 <G_q+0xf44c>
    t34_re = t271.re / 2.0;
 800fa06:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fa0a:	ed93 6b00 	vldr	d6, [r3]
 800fa0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa16:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fa1a:	443b      	add	r3, r7
 800fa1c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fa20:	f04f 0300 	mov.w	r3, #0
 800fa24:	f04f 0400 	mov.w	r4, #0
 800fa28:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fa2c:	443a      	add	r2, r7
 800fa2e:	e9c2 3400 	strd	r3, r4, [r2]
 800fa32:	e045      	b.n	800fac0 <G_q+0xf4d8>
  } else if (t271.re == 0.0) {
 800fa34:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fa38:	ed93 7b00 	vldr	d7, [r3]
 800fa3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa44:	d122      	bne.n	800fa8c <G_q+0xf4a4>
    t34_re = 0.0;
 800fa46:	f04f 0300 	mov.w	r3, #0
 800fa4a:	f04f 0400 	mov.w	r4, #0
 800fa4e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fa52:	443a      	add	r2, r7
 800fa54:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t271.im / 2.0;
 800fa58:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fa5c:	ed93 6b02 	vldr	d6, [r3, #8]
 800fa60:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa64:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa68:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fa6c:	443b      	add	r3, r7
 800fa6e:	ed83 7b00 	vstr	d7, [r3]
 800fa72:	e025      	b.n	800fac0 <G_q+0xf4d8>
 800fa74:	f3af 8000 	nop.w
 800fa78:	33145c07 	.word	0x33145c07
 800fa7c:	3c81a626 	.word	0x3c81a626
 800fa80:	33145c07 	.word	0x33145c07
 800fa84:	3c91a626 	.word	0x3c91a626
 800fa88:	ffffefd0 	.word	0xffffefd0
  } else {
    t34_re = t271.re / 2.0;
 800fa8c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800fa90:	ed93 6b00 	vldr	d6, [r3]
 800fa94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa9c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800faa0:	443b      	add	r3, r7
 800faa2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t271.im / 2.0;
 800faa6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800faaa:	ed93 6b02 	vldr	d6, [r3, #8]
 800faae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fab2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fab6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800faba:	443b      	add	r3, r7
 800fabc:	ed83 7b00 	vstr	d7, [r3]
  }

  t3_im += t34_re;
 800fac0:	f241 3310 	movw	r3, #4880	; 0x1310
 800fac4:	443b      	add	r3, r7
 800fac6:	ed93 6b00 	vldr	d6, [r3]
 800faca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800face:	443b      	add	r3, r7
 800fad0:	ed93 7b00 	vldr	d7, [r3]
 800fad4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fad8:	f241 3310 	movw	r3, #4880	; 0x1310
 800fadc:	443b      	add	r3, r7
 800fade:	ed83 7b00 	vstr	d7, [r3]
  t23_re += t34_im;
 800fae2:	f241 3330 	movw	r3, #4912	; 0x1330
 800fae6:	443b      	add	r3, r7
 800fae8:	ed93 6b00 	vldr	d6, [r3]
 800faec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800faf0:	443b      	add	r3, r7
 800faf2:	ed93 7b00 	vldr	d7, [r3]
 800faf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fafa:	f241 3330 	movw	r3, #4912	; 0x1330
 800fafe:	443b      	add	r3, r7
 800fb00:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t272.re * 0.0 - t272.im * 0.5) - (t273.re * 0.0 - t273.im * 0.5);
 800fb04:	f241 1370 	movw	r3, #4464	; 0x1170
 800fb08:	443b      	add	r3, r7
 800fb0a:	ed93 7b00 	vldr	d7, [r3]
 800fb0e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800fcf8 <G_q+0xf710>
 800fb12:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fb16:	f241 1370 	movw	r3, #4464	; 0x1170
 800fb1a:	443b      	add	r3, r7
 800fb1c:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fb24:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fb28:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fb2c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800fb30:	ed93 7b00 	vldr	d7, [r3]
 800fb34:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800fcf8 <G_q+0xf710>
 800fb38:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fb3c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800fb40:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb44:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fb48:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fb4c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fb50:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fb54:	f241 3378 	movw	r3, #4984	; 0x1378
 800fb58:	443b      	add	r3, r7
 800fb5a:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t272.re * 0.5 + t272.im * 0.0) - (t273.re * 0.5 + t273.im * 0.0);
 800fb5e:	f241 1370 	movw	r3, #4464	; 0x1170
 800fb62:	443b      	add	r3, r7
 800fb64:	ed93 7b00 	vldr	d7, [r3]
 800fb68:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800fb6c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fb70:	f241 1370 	movw	r3, #4464	; 0x1170
 800fb74:	443b      	add	r3, r7
 800fb76:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb7a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800fcf8 <G_q+0xf710>
 800fb7e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fb82:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fb86:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800fb8a:	ed93 7b00 	vldr	d7, [r3]
 800fb8e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fb92:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fb96:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 800fb9a:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb9e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800fcf8 <G_q+0xf710>
 800fba2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fba6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fbaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fbae:	f241 3370 	movw	r3, #4976	; 0x1370
 800fbb2:	443b      	add	r3, r7
 800fbb4:	ed83 7b00 	vstr	d7, [r3]
  if (t276.im == 0.0) {
 800fbb8:	f241 1390 	movw	r3, #4496	; 0x1190
 800fbbc:	443b      	add	r3, r7
 800fbbe:	ed93 7b02 	vldr	d7, [r3, #8]
 800fbc2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbca:	d116      	bne.n	800fbfa <G_q+0xf612>
    t16_re = t276.re / 2.0;
 800fbcc:	f241 1390 	movw	r3, #4496	; 0x1190
 800fbd0:	443b      	add	r3, r7
 800fbd2:	ed93 6b00 	vldr	d6, [r3]
 800fbd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbde:	f241 3368 	movw	r3, #4968	; 0x1368
 800fbe2:	443b      	add	r3, r7
 800fbe4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800fbe8:	f04f 0300 	mov.w	r3, #0
 800fbec:	f04f 0400 	mov.w	r4, #0
 800fbf0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800fbf4:	e9c2 3400 	strd	r3, r4, [r2]
 800fbf8:	e03b      	b.n	800fc72 <G_q+0xf68a>
  } else if (t276.re == 0.0) {
 800fbfa:	f241 1390 	movw	r3, #4496	; 0x1190
 800fbfe:	443b      	add	r3, r7
 800fc00:	ed93 7b00 	vldr	d7, [r3]
 800fc04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc0c:	d116      	bne.n	800fc3c <G_q+0xf654>
    t16_re = 0.0;
 800fc0e:	f04f 0300 	mov.w	r3, #0
 800fc12:	f04f 0400 	mov.w	r4, #0
 800fc16:	f241 3268 	movw	r2, #4968	; 0x1368
 800fc1a:	443a      	add	r2, r7
 800fc1c:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t276.im / 2.0;
 800fc20:	f241 1390 	movw	r3, #4496	; 0x1190
 800fc24:	443b      	add	r3, r7
 800fc26:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc32:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fc36:	ed83 7b00 	vstr	d7, [r3]
 800fc3a:	e01a      	b.n	800fc72 <G_q+0xf68a>
  } else {
    t16_re = t276.re / 2.0;
 800fc3c:	f241 1390 	movw	r3, #4496	; 0x1190
 800fc40:	443b      	add	r3, r7
 800fc42:	ed93 6b00 	vldr	d6, [r3]
 800fc46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc4e:	f241 3368 	movw	r3, #4968	; 0x1368
 800fc52:	443b      	add	r3, r7
 800fc54:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t276.im / 2.0;
 800fc58:	f241 1390 	movw	r3, #4496	; 0x1190
 800fc5c:	443b      	add	r3, r7
 800fc5e:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc6a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fc6e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t277.im == 0.0) {
 800fc72:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fc76:	ed93 7b02 	vldr	d7, [r3, #8]
 800fc7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc82:	d116      	bne.n	800fcb2 <G_q+0xf6ca>
    t34_re = t277.re / 2.0;
 800fc84:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fc88:	ed93 6b00 	vldr	d6, [r3]
 800fc8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc94:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fc98:	443b      	add	r3, r7
 800fc9a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fc9e:	f04f 0300 	mov.w	r3, #0
 800fca2:	f04f 0400 	mov.w	r4, #0
 800fca6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fcaa:	443a      	add	r2, r7
 800fcac:	e9c2 3400 	strd	r3, r4, [r2]
 800fcb0:	e040      	b.n	800fd34 <G_q+0xf74c>
  } else if (t277.re == 0.0) {
 800fcb2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fcb6:	ed93 7b00 	vldr	d7, [r3]
 800fcba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fcbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fcc2:	d11d      	bne.n	800fd00 <G_q+0xf718>
    t34_re = 0.0;
 800fcc4:	f04f 0300 	mov.w	r3, #0
 800fcc8:	f04f 0400 	mov.w	r4, #0
 800fccc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fcd0:	443a      	add	r2, r7
 800fcd2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t277.im / 2.0;
 800fcd6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fcda:	ed93 6b02 	vldr	d6, [r3, #8]
 800fcde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fce2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fce6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fcea:	443b      	add	r3, r7
 800fcec:	ed83 7b00 	vstr	d7, [r3]
 800fcf0:	e020      	b.n	800fd34 <G_q+0xf74c>
 800fcf2:	bf00      	nop
 800fcf4:	f3af 8000 	nop.w
	...
  } else {
    t34_re = t277.re / 2.0;
 800fd00:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fd04:	ed93 6b00 	vldr	d6, [r3]
 800fd08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fd0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fd10:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fd14:	443b      	add	r3, r7
 800fd16:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t277.im / 2.0;
 800fd1a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 800fd1e:	ed93 6b02 	vldr	d6, [r3, #8]
 800fd22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fd26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fd2a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fd2e:	443b      	add	r3, r7
 800fd30:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t274.re * 0.0 - t274.im * 0.5) - (t275.re * 0.0 - t275.im * 0.5);
 800fd34:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800fd38:	ed93 7b00 	vldr	d7, [r3]
 800fd3c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80100c0 <G_q+0xfad8>
 800fd40:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fd44:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800fd48:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd4c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fd50:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fd54:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fd58:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800fd5c:	ed93 7b00 	vldr	d7, [r3]
 800fd60:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80100c0 <G_q+0xfad8>
 800fd64:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fd68:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800fd6c:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd70:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fd74:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fd78:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fd7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fd80:	f241 3348 	movw	r3, #4936	; 0x1348
 800fd84:	443b      	add	r3, r7
 800fd86:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t274.re * 0.5 + t274.im * 0.0) - (t275.re * 0.5 + t275.im * 0.0);
 800fd8a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800fd8e:	ed93 7b00 	vldr	d7, [r3]
 800fd92:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800fd96:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fd9a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 800fd9e:	ed93 7b02 	vldr	d7, [r3, #8]
 800fda2:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 80100c0 <G_q+0xfad8>
 800fda6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fdaa:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fdae:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800fdb2:	ed93 7b00 	vldr	d7, [r3]
 800fdb6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fdba:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fdbe:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800fdc2:	ed93 7b02 	vldr	d7, [r3, #8]
 800fdc6:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 80100c0 <G_q+0xfad8>
 800fdca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fdce:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fdd2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fdd6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fdda:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800fdde:	f241 3368 	movw	r3, #4968	; 0x1368
 800fde2:	443b      	add	r3, r7
 800fde4:	ed93 6b00 	vldr	d6, [r3]
 800fde8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fdec:	443b      	add	r3, r7
 800fdee:	ed93 7b00 	vldr	d7, [r3]
 800fdf2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fdf6:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80100c8 <G_q+0xfae0>
 800fdfa:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fdfe:	f241 3368 	movw	r3, #4968	; 0x1368
 800fe02:	443b      	add	r3, r7
 800fe04:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800fe08:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fe0c:	ed93 6b00 	vldr	d6, [r3]
 800fe10:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fe14:	443b      	add	r3, r7
 800fe16:	ed93 7b00 	vldr	d7, [r3]
 800fe1a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fe1e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fe22:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 800fe26:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800fe2a:	ed93 7b00 	vldr	d7, [r3]
 800fe2e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80100c0 <G_q+0xfad8>
 800fe32:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fe36:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800fe3a:	ed93 7b02 	vldr	d7, [r3, #8]
 800fe3e:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 80100d0 <G_q+0xfae8>
 800fe42:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fe46:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fe4a:	4ba3      	ldr	r3, [pc, #652]	; (80100d8 <G_q+0xfaf0>)
 800fe4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe50:	443a      	add	r2, r7
 800fe52:	4413      	add	r3, r2
 800fe54:	ed93 7b00 	vldr	d7, [r3]
 800fe58:	ed9f 5b99 	vldr	d5, [pc, #612]	; 80100c0 <G_q+0xfad8>
 800fe5c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t279.im * 3.061616997868383E-17);
 800fe60:	4b9d      	ldr	r3, [pc, #628]	; (80100d8 <G_q+0xfaf0>)
 800fe62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe66:	443a      	add	r2, r7
 800fe68:	4413      	add	r3, r2
 800fe6a:	ed93 7b02 	vldr	d7, [r3, #8]
 800fe6e:	ed9f 4b98 	vldr	d4, [pc, #608]	; 80100d0 <G_q+0xfae8>
 800fe72:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 800fe76:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fe7a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fe7e:	f241 3388 	movw	r3, #5000	; 0x1388
 800fe82:	443b      	add	r3, r7
 800fe84:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 800fe88:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800fe8c:	ed93 7b00 	vldr	d7, [r3]
 800fe90:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80100d0 <G_q+0xfae8>
 800fe94:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fe98:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800fe9c:	ed93 7b02 	vldr	d7, [r3, #8]
 800fea0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 80100c0 <G_q+0xfad8>
 800fea4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fea8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800feac:	4b8a      	ldr	r3, [pc, #552]	; (80100d8 <G_q+0xfaf0>)
 800feae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800feb2:	443a      	add	r2, r7
 800feb4:	4413      	add	r3, r2
 800feb6:	ed93 7b00 	vldr	d7, [r3]
 800feba:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80100d0 <G_q+0xfae8>
 800febe:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t279.im * 0.0);
 800fec2:	4b85      	ldr	r3, [pc, #532]	; (80100d8 <G_q+0xfaf0>)
 800fec4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fec8:	443a      	add	r2, r7
 800feca:	4413      	add	r3, r2
 800fecc:	ed93 7b02 	vldr	d7, [r3, #8]
 800fed0:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 80100c0 <G_q+0xfad8>
 800fed4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fed8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 800fedc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fee0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800fee4:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t3_im * t13_re - t23_re * t13_im) - (t20_re * t16_re - t20_im *
 800fee8:	f241 3310 	movw	r3, #4880	; 0x1310
 800feec:	443b      	add	r3, r7
 800feee:	ed93 6b00 	vldr	d6, [r3]
 800fef2:	f241 3378 	movw	r3, #4984	; 0x1378
 800fef6:	443b      	add	r3, r7
 800fef8:	ed93 7b00 	vldr	d7, [r3]
 800fefc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff00:	f241 3330 	movw	r3, #4912	; 0x1330
 800ff04:	443b      	add	r3, r7
 800ff06:	ed93 5b00 	vldr	d5, [r3]
 800ff0a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ff0e:	443b      	add	r3, r7
 800ff10:	ed93 7b00 	vldr	d7, [r3]
 800ff14:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ff18:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff1c:	f241 3348 	movw	r3, #4936	; 0x1348
 800ff20:	443b      	add	r3, r7
 800ff22:	ed93 5b00 	vldr	d5, [r3]
 800ff26:	f241 3368 	movw	r3, #4968	; 0x1368
 800ff2a:	443b      	add	r3, r7
 800ff2c:	ed93 7b00 	vldr	d7, [r3]
 800ff30:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ff34:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ff38:	ed93 4b00 	vldr	d4, [r3]
 800ff3c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ff40:	ed93 7b00 	vldr	d7, [r3]
 800ff44:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ff48:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ff4c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ff50:	f241 3338 	movw	r3, #4920	; 0x1338
 800ff54:	443b      	add	r3, r7
 800ff56:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re = (t3_im * t13_im + t23_re * t13_re) - (t20_re * t16_im + t20_im *
 800ff5a:	f241 3310 	movw	r3, #4880	; 0x1310
 800ff5e:	443b      	add	r3, r7
 800ff60:	ed93 6b00 	vldr	d6, [r3]
 800ff64:	f241 3370 	movw	r3, #4976	; 0x1370
 800ff68:	443b      	add	r3, r7
 800ff6a:	ed93 7b00 	vldr	d7, [r3]
 800ff6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff72:	f241 3330 	movw	r3, #4912	; 0x1330
 800ff76:	443b      	add	r3, r7
 800ff78:	ed93 5b00 	vldr	d5, [r3]
 800ff7c:	f241 3378 	movw	r3, #4984	; 0x1378
 800ff80:	443b      	add	r3, r7
 800ff82:	ed93 7b00 	vldr	d7, [r3]
 800ff86:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ff8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ff8e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ff92:	443b      	add	r3, r7
 800ff94:	ed93 5b00 	vldr	d5, [r3]
 800ff98:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ff9c:	ed93 7b00 	vldr	d7, [r3]
 800ffa0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ffa4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ffa8:	ed93 4b00 	vldr	d4, [r3]
 800ffac:	f241 3368 	movw	r3, #4968	; 0x1368
 800ffb0:	443b      	add	r3, r7
 800ffb2:	ed93 7b00 	vldr	d7, [r3]
 800ffb6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ffba:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ffbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ffc2:	f241 3330 	movw	r3, #4912	; 0x1330
 800ffc6:	443b      	add	r3, r7
 800ffc8:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t296.im == 0.0) {
 800ffcc:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800ffd0:	ed93 7b02 	vldr	d7, [r3, #8]
 800ffd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ffd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffdc:	d115      	bne.n	801000a <G_q+0xfa22>
    t16_re = t296.re / 2.0;
 800ffde:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800ffe2:	ed93 6b00 	vldr	d6, [r3]
 800ffe6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ffea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ffee:	f241 3368 	movw	r3, #4968	; 0x1368
 800fff2:	443b      	add	r3, r7
 800fff4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800fff8:	f04f 0300 	mov.w	r3, #0
 800fffc:	f04f 0400 	mov.w	r4, #0
 8010000:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8010004:	e9c2 3400 	strd	r3, r4, [r2]
 8010008:	e037      	b.n	801007a <G_q+0xfa92>
  } else if (t296.re == 0.0) {
 801000a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801000e:	ed93 7b00 	vldr	d7, [r3]
 8010012:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801001a:	d115      	bne.n	8010048 <G_q+0xfa60>
    t16_re = 0.0;
 801001c:	f04f 0300 	mov.w	r3, #0
 8010020:	f04f 0400 	mov.w	r4, #0
 8010024:	f241 3268 	movw	r2, #4968	; 0x1368
 8010028:	443a      	add	r2, r7
 801002a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t296.im / 2.0;
 801002e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010032:	ed93 6b02 	vldr	d6, [r3, #8]
 8010036:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801003a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801003e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010042:	ed83 7b00 	vstr	d7, [r3]
 8010046:	e018      	b.n	801007a <G_q+0xfa92>
  } else {
    t16_re = t296.re / 2.0;
 8010048:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801004c:	ed93 6b00 	vldr	d6, [r3]
 8010050:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010054:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010058:	f241 3368 	movw	r3, #4968	; 0x1368
 801005c:	443b      	add	r3, r7
 801005e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t296.im / 2.0;
 8010062:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8010066:	ed93 6b02 	vldr	d6, [r3, #8]
 801006a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801006e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010072:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010076:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t297.im == 0.0) {
 801007a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801007e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010082:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801008a:	d127      	bne.n	80100dc <G_q+0xfaf4>
    t34_re = t297.re / 2.0;
 801008c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8010090:	ed93 6b00 	vldr	d6, [r3]
 8010094:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010098:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801009c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80100a0:	443b      	add	r3, r7
 80100a2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80100a6:	f04f 0300 	mov.w	r3, #0
 80100aa:	f04f 0400 	mov.w	r4, #0
 80100ae:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80100b2:	443a      	add	r2, r7
 80100b4:	e9c2 3400 	strd	r3, r4, [r2]
 80100b8:	e04a      	b.n	8010150 <G_q+0xfb68>
 80100ba:	bf00      	nop
 80100bc:	f3af 8000 	nop.w
	...
 80100c8:	858a5d48 	.word	0x858a5d48
 80100cc:	394377ce 	.word	0x394377ce
 80100d0:	33145c07 	.word	0x33145c07
 80100d4:	3c81a626 	.word	0x3c81a626
 80100d8:	ffffefb0 	.word	0xffffefb0
  } else if (t297.re == 0.0) {
 80100dc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80100e0:	ed93 7b00 	vldr	d7, [r3]
 80100e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100ec:	d116      	bne.n	801011c <G_q+0xfb34>
    t34_re = 0.0;
 80100ee:	f04f 0300 	mov.w	r3, #0
 80100f2:	f04f 0400 	mov.w	r4, #0
 80100f6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80100fa:	443a      	add	r2, r7
 80100fc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t297.im / 2.0;
 8010100:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8010104:	ed93 6b02 	vldr	d6, [r3, #8]
 8010108:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801010c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010110:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010114:	443b      	add	r3, r7
 8010116:	ed83 7b00 	vstr	d7, [r3]
 801011a:	e019      	b.n	8010150 <G_q+0xfb68>
  } else {
    t34_re = t297.re / 2.0;
 801011c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8010120:	ed93 6b00 	vldr	d6, [r3]
 8010124:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010128:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801012c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010130:	443b      	add	r3, r7
 8010132:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t297.im / 2.0;
 8010136:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801013a:	ed93 6b02 	vldr	d6, [r3, #8]
 801013e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010146:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801014a:	443b      	add	r3, r7
 801014c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t298.im == 0.0) {
 8010150:	f241 2330 	movw	r3, #4656	; 0x1230
 8010154:	443b      	add	r3, r7
 8010156:	ed93 7b02 	vldr	d7, [r3, #8]
 801015a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801015e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010162:	d116      	bne.n	8010192 <G_q+0xfbaa>
    t20_re = t298.re / 2.0;
 8010164:	f241 2330 	movw	r3, #4656	; 0x1230
 8010168:	443b      	add	r3, r7
 801016a:	ed93 6b00 	vldr	d6, [r3]
 801016e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010172:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010176:	f241 3348 	movw	r3, #4936	; 0x1348
 801017a:	443b      	add	r3, r7
 801017c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8010180:	f04f 0300 	mov.w	r3, #0
 8010184:	f04f 0400 	mov.w	r4, #0
 8010188:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 801018c:	e9c2 3400 	strd	r3, r4, [r2]
 8010190:	e03b      	b.n	801020a <G_q+0xfc22>
  } else if (t298.re == 0.0) {
 8010192:	f241 2330 	movw	r3, #4656	; 0x1230
 8010196:	443b      	add	r3, r7
 8010198:	ed93 7b00 	vldr	d7, [r3]
 801019c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a4:	d116      	bne.n	80101d4 <G_q+0xfbec>
    t20_re = 0.0;
 80101a6:	f04f 0300 	mov.w	r3, #0
 80101aa:	f04f 0400 	mov.w	r4, #0
 80101ae:	f241 3248 	movw	r2, #4936	; 0x1348
 80101b2:	443a      	add	r2, r7
 80101b4:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t298.im / 2.0;
 80101b8:	f241 2330 	movw	r3, #4656	; 0x1230
 80101bc:	443b      	add	r3, r7
 80101be:	ed93 6b02 	vldr	d6, [r3, #8]
 80101c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101ca:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80101ce:	ed83 7b00 	vstr	d7, [r3]
 80101d2:	e01a      	b.n	801020a <G_q+0xfc22>
  } else {
    t20_re = t298.re / 2.0;
 80101d4:	f241 2330 	movw	r3, #4656	; 0x1230
 80101d8:	443b      	add	r3, r7
 80101da:	ed93 6b00 	vldr	d6, [r3]
 80101de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80101e6:	f241 3348 	movw	r3, #4936	; 0x1348
 80101ea:	443b      	add	r3, r7
 80101ec:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t298.im / 2.0;
 80101f0:	f241 2330 	movw	r3, #4656	; 0x1230
 80101f4:	443b      	add	r3, r7
 80101f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80101fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80101fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010202:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010206:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t299.im == 0.0) {
 801020a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801020e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010212:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801021a:	d116      	bne.n	801024a <G_q+0xfc62>
    t13_re = t299.re / 2.0;
 801021c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8010220:	ed93 6b00 	vldr	d6, [r3]
 8010224:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010228:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801022c:	f241 3378 	movw	r3, #4984	; 0x1378
 8010230:	443b      	add	r3, r7
 8010232:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8010236:	f04f 0300 	mov.w	r3, #0
 801023a:	f04f 0400 	mov.w	r4, #0
 801023e:	f241 3270 	movw	r2, #4976	; 0x1370
 8010242:	443a      	add	r2, r7
 8010244:	e9c2 3400 	strd	r3, r4, [r2]
 8010248:	e039      	b.n	80102be <G_q+0xfcd6>
  } else if (t299.re == 0.0) {
 801024a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801024e:	ed93 7b00 	vldr	d7, [r3]
 8010252:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801025a:	d116      	bne.n	801028a <G_q+0xfca2>
    t13_re = 0.0;
 801025c:	f04f 0300 	mov.w	r3, #0
 8010260:	f04f 0400 	mov.w	r4, #0
 8010264:	f241 3278 	movw	r2, #4984	; 0x1378
 8010268:	443a      	add	r2, r7
 801026a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t299.im / 2.0;
 801026e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8010272:	ed93 6b02 	vldr	d6, [r3, #8]
 8010276:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801027a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801027e:	f241 3370 	movw	r3, #4976	; 0x1370
 8010282:	443b      	add	r3, r7
 8010284:	ed83 7b00 	vstr	d7, [r3]
 8010288:	e019      	b.n	80102be <G_q+0xfcd6>
  } else {
    t13_re = t299.re / 2.0;
 801028a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801028e:	ed93 6b00 	vldr	d6, [r3]
 8010292:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010296:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801029a:	f241 3378 	movw	r3, #4984	; 0x1378
 801029e:	443b      	add	r3, r7
 80102a0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t299.im / 2.0;
 80102a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80102a8:	ed93 6b02 	vldr	d6, [r3, #8]
 80102ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80102b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102b4:	f241 3370 	movw	r3, #4976	; 0x1370
 80102b8:	443b      	add	r3, r7
 80102ba:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 80102be:	f241 3368 	movw	r3, #4968	; 0x1368
 80102c2:	443b      	add	r3, r7
 80102c4:	ed93 6b00 	vldr	d6, [r3]
 80102c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80102cc:	443b      	add	r3, r7
 80102ce:	ed93 7b00 	vldr	d7, [r3]
 80102d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80102d6:	f241 3368 	movw	r3, #4968	; 0x1368
 80102da:	443b      	add	r3, r7
 80102dc:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 80102e0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80102e4:	ed93 6b00 	vldr	d6, [r3]
 80102e8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80102ec:	443b      	add	r3, r7
 80102ee:	ed93 7b00 	vldr	d7, [r3]
 80102f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80102f6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80102fa:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t13_re) + 7.498798913309288E-33;
 80102fe:	f241 3348 	movw	r3, #4936	; 0x1348
 8010302:	443b      	add	r3, r7
 8010304:	ed93 6b00 	vldr	d6, [r3]
 8010308:	f241 3378 	movw	r3, #4984	; 0x1378
 801030c:	443b      	add	r3, r7
 801030e:	ed93 7b00 	vldr	d7, [r3]
 8010312:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010316:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80106b0 <G_q+0x100c8>
 801031a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801031e:	f241 3348 	movw	r3, #4936	; 0x1348
 8010322:	443b      	add	r3, r7
 8010324:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t13_im;
 8010328:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801032c:	ed93 6b00 	vldr	d6, [r3]
 8010330:	f241 3370 	movw	r3, #4976	; 0x1370
 8010334:	443b      	add	r3, r7
 8010336:	ed93 7b00 	vldr	d7, [r3]
 801033a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801033e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010342:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t266.re * 0.0 - t266.im * 0.5) - (t267.re * 0.0 - t267.im * 0.5);
 8010346:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801034a:	ed93 7b00 	vldr	d7, [r3]
 801034e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80106b8 <G_q+0x100d0>
 8010352:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010356:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801035a:	ed93 7b02 	vldr	d7, [r3, #8]
 801035e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010362:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010366:	ee36 6b47 	vsub.f64	d6, d6, d7
 801036a:	4bd9      	ldr	r3, [pc, #868]	; (80106d0 <G_q+0x100e8>)
 801036c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010370:	443a      	add	r2, r7
 8010372:	4413      	add	r3, r2
 8010374:	ed93 7b00 	vldr	d7, [r3]
 8010378:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 80106b8 <G_q+0x100d0>
 801037c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010380:	4bd3      	ldr	r3, [pc, #844]	; (80106d0 <G_q+0x100e8>)
 8010382:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010386:	443a      	add	r2, r7
 8010388:	4413      	add	r3, r2
 801038a:	ed93 7b02 	vldr	d7, [r3, #8]
 801038e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010392:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010396:	ee35 7b47 	vsub.f64	d7, d5, d7
 801039a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801039e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80103a2:	443b      	add	r3, r7
 80103a4:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t266.re * 0.5 + t266.im * 0.0) - (t267.re * 0.5 + t267.im * 0.0);
 80103a8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80103ac:	ed93 7b00 	vldr	d7, [r3]
 80103b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80103b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80103b8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80103bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80103c0:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 80106b8 <G_q+0x100d0>
 80103c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80103c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80103cc:	4bc0      	ldr	r3, [pc, #768]	; (80106d0 <G_q+0x100e8>)
 80103ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80103d2:	443a      	add	r2, r7
 80103d4:	4413      	add	r3, r2
 80103d6:	ed93 7b00 	vldr	d7, [r3]
 80103da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80103de:	ee27 5b05 	vmul.f64	d5, d7, d5
 80103e2:	4bbb      	ldr	r3, [pc, #748]	; (80106d0 <G_q+0x100e8>)
 80103e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80103e8:	443a      	add	r2, r7
 80103ea:	4413      	add	r3, r2
 80103ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80103f0:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 80106b8 <G_q+0x100d0>
 80103f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80103f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80103fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010400:	f241 3378 	movw	r3, #4984	; 0x1378
 8010404:	443b      	add	r3, r7
 8010406:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 801040a:	f241 1350 	movw	r3, #4432	; 0x1150
 801040e:	443b      	add	r3, r7
 8010410:	ed93 7b00 	vldr	d7, [r3]
 8010414:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80106c0 <G_q+0x100d8>
 8010418:	ee27 6b06 	vmul.f64	d6, d7, d6
 801041c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8010420:	ed93 7b00 	vldr	d7, [r3]
 8010424:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 80106c0 <G_q+0x100d8>
 8010428:	ee27 7b05 	vmul.f64	d7, d7, d5
 801042c:	ee36 6b07 	vadd.f64	d6, d6, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8010430:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8010434:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8010438:	443b      	add	r3, r7
 801043a:	ed92 5b00 	vldr	d5, [r2]
 801043e:	ed93 7b00 	vldr	d7, [r3]
 8010442:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010446:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801044a:	443b      	add	r3, r7
 801044c:	ed93 4b00 	vldr	d4, [r3]
 8010450:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8010454:	ed93 7b00 	vldr	d7, [r3]
 8010458:	ee24 7b07 	vmul.f64	d7, d4, d7
 801045c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010460:	ee36 6b47 	vsub.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8010464:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8010468:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801046c:	443b      	add	r3, r7
 801046e:	ed92 5b00 	vldr	d5, [r2]
 8010472:	ed93 7b00 	vldr	d7, [r3]
 8010476:	ee25 5b07 	vmul.f64	d5, d5, d7
 801047a:	f241 2350 	movw	r3, #4688	; 0x1250
 801047e:	443b      	add	r3, r7
 8010480:	ed93 4b00 	vldr	d4, [r3]
 8010484:	f241 3318 	movw	r3, #4888	; 0x1318
 8010488:	443b      	add	r3, r7
 801048a:	ed93 7b00 	vldr	d7, [r3]
 801048e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010492:	ee35 7b47 	vsub.f64	d7, d5, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8010496:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 801049a:	f241 3388 	movw	r3, #5000	; 0x1388
 801049e:	443b      	add	r3, r7
 80104a0:	ed93 5b00 	vldr	d5, [r3]
 80104a4:	f241 3338 	movw	r3, #4920	; 0x1338
 80104a8:	443b      	add	r3, r7
 80104aa:	ed93 7b00 	vldr	d7, [r3]
 80104ae:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80104b2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80104b6:	ed93 4b00 	vldr	d4, [r3]
 80104ba:	f241 3330 	movw	r3, #4912	; 0x1330
 80104be:	443b      	add	r3, r7
 80104c0:	ed93 7b00 	vldr	d7, [r3]
 80104c4:	ee24 7b07 	vmul.f64	d7, d4, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 80104c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80104cc:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80104d0:	f241 3368 	movw	r3, #4968	; 0x1368
 80104d4:	443b      	add	r3, r7
 80104d6:	ed93 5b00 	vldr	d5, [r3]
 80104da:	f241 3348 	movw	r3, #4936	; 0x1348
 80104de:	443b      	add	r3, r7
 80104e0:	ed93 7b00 	vldr	d7, [r3]
 80104e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80104e8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80104ec:	ed93 4b00 	vldr	d4, [r3]
 80104f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80104f4:	ed93 7b00 	vldr	d7, [r3]
 80104f8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80104fc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010500:	ee36 7b47 	vsub.f64	d7, d6, d7
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 8010504:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80106c0 <G_q+0x100d8>
 8010508:	ee37 7b46 	vsub.f64	d7, d7, d6
 801050c:	f241 3370 	movw	r3, #4976	; 0x1370
 8010510:	443b      	add	r3, r7
 8010512:	ed83 7b00 	vstr	d7, [r3]
    3.749399456654644E-33;
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 8010516:	f241 1350 	movw	r3, #4432	; 0x1150
 801051a:	443b      	add	r3, r7
 801051c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010520:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80106c0 <G_q+0x100d8>
 8010524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010528:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 801052c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010530:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80106c0 <G_q+0x100d8>
 8010534:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010538:	ee36 6b07 	vadd.f64	d6, d6, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801053c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010540:	ed93 5b00 	vldr	d5, [r3]
 8010544:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8010548:	ed93 7b00 	vldr	d7, [r3]
 801054c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010550:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8010554:	443a      	add	r2, r7
 8010556:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801055a:	443b      	add	r3, r7
 801055c:	ed92 4b00 	vldr	d4, [r2]
 8010560:	ed93 7b00 	vldr	d7, [r3]
 8010564:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010568:	ee35 7b07 	vadd.f64	d7, d5, d7
 801056c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010570:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010574:	ed93 5b00 	vldr	d5, [r3]
 8010578:	f241 3318 	movw	r3, #4888	; 0x1318
 801057c:	443b      	add	r3, r7
 801057e:	ed93 7b00 	vldr	d7, [r3]
 8010582:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 8010586:	f241 2250 	movw	r2, #4688	; 0x1250
 801058a:	443a      	add	r2, r7
 801058c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8010590:	443b      	add	r3, r7
 8010592:	ed92 4b00 	vldr	d4, [r2]
 8010596:	ed93 7b00 	vldr	d7, [r3]
 801059a:	ee24 7b07 	vmul.f64	d7, d4, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801059e:	ee35 7b07 	vadd.f64	d7, d5, d7
 80105a2:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 80105a6:	f241 3388 	movw	r3, #5000	; 0x1388
 80105aa:	443b      	add	r3, r7
 80105ac:	ed93 5b00 	vldr	d5, [r3]
 80105b0:	f241 3330 	movw	r3, #4912	; 0x1330
 80105b4:	443b      	add	r3, r7
 80105b6:	ed93 7b00 	vldr	d7, [r3]
 80105ba:	ee25 5b07 	vmul.f64	d5, d5, d7
 80105be:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80105c2:	ed93 4b00 	vldr	d4, [r3]
 80105c6:	f241 3338 	movw	r3, #4920	; 0x1338
 80105ca:	443b      	add	r3, r7
 80105cc:	ed93 7b00 	vldr	d7, [r3]
 80105d0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80105d4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80105d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80105dc:	f241 3368 	movw	r3, #4968	; 0x1368
 80105e0:	443b      	add	r3, r7
 80105e2:	ed93 5b00 	vldr	d5, [r3]
 80105e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80105ea:	ed93 7b00 	vldr	d7, [r3]
 80105ee:	ee25 5b07 	vmul.f64	d5, d5, d7
    t20_im + t16_im * t20_re);
 80105f2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80105f6:	ed93 4b00 	vldr	d4, [r3]
 80105fa:	f241 3348 	movw	r3, #4936	; 0x1348
 80105fe:	443b      	add	r3, r7
 8010600:	ed93 7b00 	vldr	d7, [r3]
 8010604:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010608:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 801060c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010610:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010614:	443b      	add	r3, r7
 8010616:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 801061a:	4b2e      	ldr	r3, [pc, #184]	; (80106d4 <G_q+0x100ec>)
 801061c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010620:	443a      	add	r2, r7
 8010622:	4413      	add	r3, r2
 8010624:	ed93 7b00 	vldr	d7, [r3]
 8010628:	eeb1 6b47 	vneg.f64	d6, d7
 801062c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010630:	443b      	add	r3, r7
 8010632:	ed93 5b00 	vldr	d5, [r3]
 8010636:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801063a:	443b      	add	r3, r7
 801063c:	ed93 7b00 	vldr	d7, [r3]
 8010640:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010644:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8010648:	443b      	add	r3, r7
 801064a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 801064e:	443a      	add	r2, r7
 8010650:	ed92 4b00 	vldr	d4, [r2]
 8010654:	ed93 7b00 	vldr	d7, [r3]
 8010658:	ee24 7b07 	vmul.f64	d7, d4, d7
 801065c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010660:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80106c8 <G_q+0x100e0>
 8010664:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010668:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801066c:	443b      	add	r3, r7
 801066e:	ed93 4b00 	vldr	d4, [r3]
 8010672:	f241 3370 	movw	r3, #4976	; 0x1370
 8010676:	443b      	add	r3, r7
 8010678:	ed93 7b00 	vldr	d7, [r3]
 801067c:	ee24 4b07 	vmul.f64	d4, d4, d7
    t13_im - t13_re * t34_re) * 0.0215);
 8010680:	f241 3378 	movw	r3, #4984	; 0x1378
 8010684:	443b      	add	r3, r7
 8010686:	ed93 3b00 	vldr	d3, [r3]
 801068a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801068e:	443b      	add	r3, r7
 8010690:	ed93 7b00 	vldr	d7, [r3]
 8010694:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010698:	ee34 7b47 	vsub.f64	d7, d4, d7
 801069c:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 80106c8 <G_q+0x100e0>
 80106a0:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 80106a4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80106a8:	e016      	b.n	80106d8 <G_q+0x100f0>
 80106aa:	bf00      	nop
 80106ac:	f3af 8000 	nop.w
 80106b0:	858a5d48 	.word	0x858a5d48
 80106b4:	394377ce 	.word	0x394377ce
	...
 80106c0:	858a5d48 	.word	0x858a5d48
 80106c4:	393377ce 	.word	0x393377ce
 80106c8:	9374bc6a 	.word	0x9374bc6a
 80106cc:	3f960418 	.word	0x3f960418
 80106d0:	ffffed30 	.word	0xffffed30
 80106d4:	ffffec58 	.word	0xffffec58
 80106d8:	4b41      	ldr	r3, [pc, #260]	; (80107e0 <G_q+0x101f8>)
 80106da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80106de:	443a      	add	r2, r7
 80106e0:	4413      	add	r3, r2
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	3340      	adds	r3, #64	; 0x40
 80106e6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80106ea:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 80106ee:	4b3d      	ldr	r3, [pc, #244]	; (80107e4 <G_q+0x101fc>)
 80106f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80106f4:	443a      	add	r2, r7
 80106f6:	4413      	add	r3, r2
 80106f8:	ed93 7b00 	vldr	d7, [r3]
 80106fc:	eeb1 6b47 	vneg.f64	d6, d7
 8010700:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8010704:	443a      	add	r2, r7
 8010706:	f241 23d0 	movw	r3, #4816	; 0x12d0
 801070a:	443b      	add	r3, r7
 801070c:	ed92 5b00 	vldr	d5, [r2]
 8010710:	ed93 7b00 	vldr	d7, [r3]
 8010714:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010718:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801071c:	443b      	add	r3, r7
 801071e:	ed93 4b00 	vldr	d4, [r3]
 8010722:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8010726:	443b      	add	r3, r7
 8010728:	ed93 7b00 	vldr	d7, [r3]
 801072c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010730:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010734:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80107d8 <G_q+0x101f0>
 8010738:	ee27 5b05 	vmul.f64	d5, d7, d5
 801073c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010740:	443b      	add	r3, r7
 8010742:	ed93 4b00 	vldr	d4, [r3]
 8010746:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801074a:	443b      	add	r3, r7
 801074c:	ed93 7b00 	vldr	d7, [r3]
 8010750:	ee24 4b07 	vmul.f64	d4, d4, d7
    t34_re + t13_re * t13_im) * 0.0215);
 8010754:	f241 3378 	movw	r3, #4984	; 0x1378
 8010758:	443b      	add	r3, r7
 801075a:	ed93 3b00 	vldr	d3, [r3]
 801075e:	f241 3370 	movw	r3, #4976	; 0x1370
 8010762:	443b      	add	r3, r7
 8010764:	ed93 7b00 	vldr	d7, [r3]
 8010768:	ee23 7b07 	vmul.f64	d7, d3, d7
 801076c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8010770:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80107d8 <G_q+0x101f0>
 8010774:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 8010778:	ee35 7b07 	vadd.f64	d7, d5, d7
 801077c:	4b18      	ldr	r3, [pc, #96]	; (80107e0 <G_q+0x101f8>)
 801077e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010782:	443a      	add	r2, r7
 8010784:	4413      	add	r3, r2
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	3340      	adds	r3, #64	; 0x40
 801078a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801078e:	ed83 7b02 	vstr	d7, [r3, #8]
  b_G_q[5].re = 0.0;
 8010792:	4b13      	ldr	r3, [pc, #76]	; (80107e0 <G_q+0x101f8>)
 8010794:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010798:	443a      	add	r2, r7
 801079a:	4413      	add	r3, r2
 801079c:	681b      	ldr	r3, [r3, #0]
 801079e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80107a2:	f04f 0300 	mov.w	r3, #0
 80107a6:	f04f 0400 	mov.w	r4, #0
 80107aa:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[5].im = 0.0;
 80107ae:	4b0c      	ldr	r3, [pc, #48]	; (80107e0 <G_q+0x101f8>)
 80107b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107b4:	443a      	add	r2, r7
 80107b6:	4413      	add	r3, r2
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80107be:	f04f 0300 	mov.w	r3, #0
 80107c2:	f04f 0400 	mov.w	r4, #0
 80107c6:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80107ca:	bf00      	nop
 80107cc:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 80107d0:	3714      	adds	r7, #20
 80107d2:	46bd      	mov	sp, r7
 80107d4:	bd90      	pop	{r4, r7, pc}
 80107d6:	bf00      	nop
 80107d8:	9374bc6a 	.word	0x9374bc6a
 80107dc:	3f960418 	.word	0x3f960418
 80107e0:	ffffec34 	.word	0xffffec34
 80107e4:	ffffec58 	.word	0xffffec58

080107e8 <G_q_initialize>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_initialize(void)
{
 80107e8:	b580      	push	{r7, lr}
 80107ea:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN();
 80107ec:	f000 f88e 	bl	801090c <rt_InitInfAndNaN>
  isInitialized_G_q = true;
 80107f0:	4b02      	ldr	r3, [pc, #8]	; (80107fc <G_q_initialize+0x14>)
 80107f2:	2201      	movs	r2, #1
 80107f4:	701a      	strb	r2, [r3, #0]
}
 80107f6:	bf00      	nop
 80107f8:	bd80      	pop	{r7, pc}
 80107fa:	bf00      	nop
 80107fc:	24000214 	.word	0x24000214

08010800 <b_exp>:
/*
 * Arguments    : creal_T *x
 * Return Type  : void
 */
void b_exp(creal_T *x)
{
 8010800:	b590      	push	{r4, r7, lr}
 8010802:	b087      	sub	sp, #28
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
  double r;
  double d;
  if (x->im == 0.0) {
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	ed93 7b02 	vldr	d7, [r3, #8]
 801080e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010816:	d113      	bne.n	8010840 <b_exp+0x40>
    x->re = exp(x->re);
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	ed93 7b00 	vldr	d7, [r3]
 801081e:	eeb0 0b47 	vmov.f64	d0, d7
 8010822:	f00e f8f5 	bl	801ea10 <exp>
 8010826:	eeb0 7b40 	vmov.f64	d7, d0
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	ed83 7b00 	vstr	d7, [r3]
    x->im = 0.0;
 8010830:	687a      	ldr	r2, [r7, #4]
 8010832:	f04f 0300 	mov.w	r3, #0
 8010836:	f04f 0400 	mov.w	r4, #0
 801083a:	e9c2 3402 	strd	r3, r4, [r2, #8]
    r = exp(x->re / 2.0);
    d = x->im;
    x->re = r * (r * cos(x->im));
    x->im = r * (r * sin(d));
  }
}
 801083e:	e061      	b.n	8010904 <b_exp+0x104>
  } else if (rtIsInf(x->im) && rtIsInf(x->re) && (x->re < 0.0)) {
 8010840:	687b      	ldr	r3, [r7, #4]
 8010842:	ed93 7b02 	vldr	d7, [r3, #8]
 8010846:	eeb0 0b47 	vmov.f64	d0, d7
 801084a:	f000 f899 	bl	8010980 <rtIsInf>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d020      	beq.n	8010896 <b_exp+0x96>
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	ed93 7b00 	vldr	d7, [r3]
 801085a:	eeb0 0b47 	vmov.f64	d0, d7
 801085e:	f000 f88f 	bl	8010980 <rtIsInf>
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d016      	beq.n	8010896 <b_exp+0x96>
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	ed93 7b00 	vldr	d7, [r3]
 801086e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8010872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010876:	d50e      	bpl.n	8010896 <b_exp+0x96>
    x->re = 0.0;
 8010878:	687a      	ldr	r2, [r7, #4]
 801087a:	f04f 0300 	mov.w	r3, #0
 801087e:	f04f 0400 	mov.w	r4, #0
 8010882:	e9c2 3400 	strd	r3, r4, [r2]
    x->im = 0.0;
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	f04f 0300 	mov.w	r3, #0
 801088c:	f04f 0400 	mov.w	r4, #0
 8010890:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8010894:	e036      	b.n	8010904 <b_exp+0x104>
    r = exp(x->re / 2.0);
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	ed93 7b00 	vldr	d7, [r3]
 801089c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80108a0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80108a4:	eeb0 0b45 	vmov.f64	d0, d5
 80108a8:	f00e f8b2 	bl	801ea10 <exp>
 80108ac:	ed87 0b04 	vstr	d0, [r7, #16]
    d = x->im;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80108b6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    x->re = r * (r * cos(x->im));
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	ed93 7b02 	vldr	d7, [r3, #8]
 80108c0:	eeb0 0b47 	vmov.f64	d0, d7
 80108c4:	f00e f82c 	bl	801e920 <cos>
 80108c8:	eeb0 6b40 	vmov.f64	d6, d0
 80108cc:	ed97 7b04 	vldr	d7, [r7, #16]
 80108d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80108d4:	ed97 7b04 	vldr	d7, [r7, #16]
 80108d8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	ed83 7b00 	vstr	d7, [r3]
    x->im = r * (r * sin(d));
 80108e2:	ed97 0b02 	vldr	d0, [r7, #8]
 80108e6:	f00e f857 	bl	801e998 <sin>
 80108ea:	eeb0 6b40 	vmov.f64	d6, d0
 80108ee:	ed97 7b04 	vldr	d7, [r7, #16]
 80108f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80108f6:	ed97 7b04 	vldr	d7, [r7, #16]
 80108fa:	ee26 7b07 	vmul.f64	d7, d6, d7
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8010904:	bf00      	nop
 8010906:	371c      	adds	r7, #28
 8010908:	46bd      	mov	sp, r7
 801090a:	bd90      	pop	{r4, r7, pc}

0801090c <rt_InitInfAndNaN>:
#pragma warning(disable: 4756 56)

#endif

void rt_InitInfAndNaN()
{
 801090c:	b490      	push	{r4, r7}
 801090e:	af00      	add	r7, sp, #0
  rtNaN = nan("");
 8010910:	4a0f      	ldr	r2, [pc, #60]	; (8010950 <rt_InitInfAndNaN+0x44>)
 8010912:	f04f 0300 	mov.w	r3, #0
 8010916:	4c0f      	ldr	r4, [pc, #60]	; (8010954 <rt_InitInfAndNaN+0x48>)
 8010918:	e9c2 3400 	strd	r3, r4, [r2]
  rtNaNF = nanf("");
 801091c:	4b0e      	ldr	r3, [pc, #56]	; (8010958 <rt_InitInfAndNaN+0x4c>)
 801091e:	4a0f      	ldr	r2, [pc, #60]	; (801095c <rt_InitInfAndNaN+0x50>)
 8010920:	601a      	str	r2, [r3, #0]
  rtInf = (real_T)INFINITY;
 8010922:	4a0f      	ldr	r2, [pc, #60]	; (8010960 <rt_InitInfAndNaN+0x54>)
 8010924:	f04f 0300 	mov.w	r3, #0
 8010928:	4c0e      	ldr	r4, [pc, #56]	; (8010964 <rt_InitInfAndNaN+0x58>)
 801092a:	e9c2 3400 	strd	r3, r4, [r2]
  rtInfF = (real32_T)INFINITY;
 801092e:	4b0e      	ldr	r3, [pc, #56]	; (8010968 <rt_InitInfAndNaN+0x5c>)
 8010930:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8010934:	601a      	str	r2, [r3, #0]
  rtMinusInf = -(real_T)INFINITY;
 8010936:	4a0d      	ldr	r2, [pc, #52]	; (801096c <rt_InitInfAndNaN+0x60>)
 8010938:	f04f 0300 	mov.w	r3, #0
 801093c:	4c0c      	ldr	r4, [pc, #48]	; (8010970 <rt_InitInfAndNaN+0x64>)
 801093e:	e9c2 3400 	strd	r3, r4, [r2]
  rtMinusInfF = -(real32_T)INFINITY;
 8010942:	4b0c      	ldr	r3, [pc, #48]	; (8010974 <rt_InitInfAndNaN+0x68>)
 8010944:	4a0c      	ldr	r2, [pc, #48]	; (8010978 <rt_InitInfAndNaN+0x6c>)
 8010946:	601a      	str	r2, [r3, #0]

#pragma warning(default: 4756 56)

#endif

}
 8010948:	bf00      	nop
 801094a:	46bd      	mov	sp, r7
 801094c:	bc90      	pop	{r4, r7}
 801094e:	4770      	bx	lr
 8010950:	24000330 	.word	0x24000330
 8010954:	7ff80000 	.word	0x7ff80000
 8010958:	24000320 	.word	0x24000320
 801095c:	7fc00000 	.word	0x7fc00000
 8010960:	24000328 	.word	0x24000328
 8010964:	7ff00000 	.word	0x7ff00000
 8010968:	24000324 	.word	0x24000324
 801096c:	24000338 	.word	0x24000338
 8010970:	fff00000 	.word	0xfff00000
 8010974:	24000340 	.word	0x24000340
 8010978:	ff800000 	.word	0xff800000
 801097c:	00000000 	.word	0x00000000

08010980 <rtIsInf>:
/* Function: rtIsInf ==================================================
 * Abstract:
 * Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8010980:	b480      	push	{r7}
 8010982:	b083      	sub	sp, #12
 8010984:	af00      	add	r7, sp, #0
 8010986:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) ? 1U : 0U);
 801098a:	ed97 7b00 	vldr	d7, [r7]
 801098e:	eeb0 7bc7 	vabs.f64	d7, d7
 8010992:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80109c0 <rtIsInf+0x40>
 8010996:	eeb4 7b46 	vcmp.f64	d7, d6
 801099a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801099e:	bfd4      	ite	le
 80109a0:	2301      	movle	r3, #1
 80109a2:	2300      	movgt	r3, #0
 80109a4:	b2db      	uxtb	r3, r3
 80109a6:	f083 0301 	eor.w	r3, r3, #1
 80109aa:	b2db      	uxtb	r3, r3
 80109ac:	b2db      	uxtb	r3, r3
}
 80109ae:	4618      	mov	r0, r3
 80109b0:	370c      	adds	r7, #12
 80109b2:	46bd      	mov	sp, r7
 80109b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b8:	4770      	bx	lr
 80109ba:	bf00      	nop
 80109bc:	f3af 8000 	nop.w
 80109c0:	ffffffff 	.word	0xffffffff
 80109c4:	7fefffff 	.word	0x7fefffff

080109c8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	4603      	mov	r3, r0
 80109d0:	80fb      	strh	r3, [r7, #6]
		uint16_t  pin_num;
    }PINS;*/
	//encoder pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	//homing pins: PE5, PF6, 8, 9, 10
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80109d2:	88fb      	ldrh	r3, [r7, #6]
 80109d4:	2b20      	cmp	r3, #32
 80109d6:	f000 8271 	beq.w	8010ebc <HAL_GPIO_EXTI_Callback+0x4f4>
 80109da:	2b20      	cmp	r3, #32
 80109dc:	dc10      	bgt.n	8010a00 <HAL_GPIO_EXTI_Callback+0x38>
 80109de:	2b04      	cmp	r3, #4
 80109e0:	f000 80e1 	beq.w	8010ba6 <HAL_GPIO_EXTI_Callback+0x1de>
 80109e4:	2b04      	cmp	r3, #4
 80109e6:	dc04      	bgt.n	80109f2 <HAL_GPIO_EXTI_Callback+0x2a>
 80109e8:	2b01      	cmp	r3, #1
 80109ea:	d020      	beq.n	8010a2e <HAL_GPIO_EXTI_Callback+0x66>
 80109ec:	2b02      	cmp	r3, #2
 80109ee:	d07c      	beq.n	8010aea <HAL_GPIO_EXTI_Callback+0x122>
	case GPIO_PIN_10:
		desired_pos[4] = (double)motor_steps[4] *2.0*3.1415926/REV_COUNT_2*2.0;
		homing_state[4] = true;
		break;
	default:
		break;
 80109f0:	e2fc      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 80109f2:	2b08      	cmp	r3, #8
 80109f4:	f000 8144 	beq.w	8010c80 <HAL_GPIO_EXTI_Callback+0x2b8>
 80109f8:	2b10      	cmp	r3, #16
 80109fa:	f000 819f 	beq.w	8010d3c <HAL_GPIO_EXTI_Callback+0x374>
		break;
 80109fe:	e2f5      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 8010a00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a04:	f000 82a7 	beq.w	8010f56 <HAL_GPIO_EXTI_Callback+0x58e>
 8010a08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a0c:	dc06      	bgt.n	8010a1c <HAL_GPIO_EXTI_Callback+0x54>
 8010a0e:	2b40      	cmp	r3, #64	; 0x40
 8010a10:	f000 8288 	beq.w	8010f24 <HAL_GPIO_EXTI_Callback+0x55c>
 8010a14:	2b80      	cmp	r3, #128	; 0x80
 8010a16:	f000 81f1 	beq.w	8010dfc <HAL_GPIO_EXTI_Callback+0x434>
		break;
 8010a1a:	e2e7      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
	switch (GPIO_Pin){
 8010a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010a20:	f000 82b2 	beq.w	8010f88 <HAL_GPIO_EXTI_Callback+0x5c0>
 8010a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010a28:	f000 82c7 	beq.w	8010fba <HAL_GPIO_EXTI_Callback+0x5f2>
		break;
 8010a2c:	e2de      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 8010a2e:	4b8d      	ldr	r3, [pc, #564]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010a30:	681a      	ldr	r2, [r3, #0]
 8010a32:	4b8c      	ldr	r3, [pc, #560]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010a34:	889b      	ldrh	r3, [r3, #4]
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f002 ff69 	bl	8013910 <HAL_GPIO_ReadPin>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	461a      	mov	r2, r3
 8010a42:	4b89      	ldr	r3, [pc, #548]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010a44:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8010a46:	4b89      	ldr	r3, [pc, #548]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d12b      	bne.n	8010aa6 <HAL_GPIO_EXTI_Callback+0xde>
 8010a4e:	4b86      	ldr	r3, [pc, #536]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d127      	bne.n	8010aa6 <HAL_GPIO_EXTI_Callback+0xde>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8010a56:	4b83      	ldr	r3, [pc, #524]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	4b82      	ldr	r3, [pc, #520]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010a5c:	899b      	ldrh	r3, [r3, #12]
 8010a5e:	4619      	mov	r1, r3
 8010a60:	4610      	mov	r0, r2
 8010a62:	f002 ff55 	bl	8013910 <HAL_GPIO_ReadPin>
 8010a66:	4603      	mov	r3, r0
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4b81      	ldr	r3, [pc, #516]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010a6c:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 8010a6e:	4b80      	ldr	r3, [pc, #512]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d108      	bne.n	8010a88 <HAL_GPIO_EXTI_Callback+0xc0>
 8010a76:	4b7f      	ldr	r3, [pc, #508]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010a78:	781b      	ldrb	r3, [r3, #0]
 8010a7a:	b2db      	uxtb	r3, r3
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d003      	beq.n	8010a88 <HAL_GPIO_EXTI_Callback+0xc0>
		      direction[0] = false; //Reverse
 8010a80:	4b7c      	ldr	r3, [pc, #496]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010a82:	2200      	movs	r2, #0
 8010a84:	701a      	strb	r2, [r3, #0]
 8010a86:	e00e      	b.n	8010aa6 <HAL_GPIO_EXTI_Callback+0xde>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 8010a88:	4b79      	ldr	r3, [pc, #484]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	2b01      	cmp	r3, #1
 8010a8e:	d10a      	bne.n	8010aa6 <HAL_GPIO_EXTI_Callback+0xde>
 8010a90:	4b78      	ldr	r3, [pc, #480]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	f083 0301 	eor.w	r3, r3, #1
 8010a9a:	b2db      	uxtb	r3, r3
 8010a9c:	2b00      	cmp	r3, #0
 8010a9e:	d002      	beq.n	8010aa6 <HAL_GPIO_EXTI_Callback+0xde>
		    	direction[0] = true;  //Forward
 8010aa0:	4b74      	ldr	r3, [pc, #464]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010aa2:	2201      	movs	r2, #1
 8010aa4:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 8010aa6:	4b70      	ldr	r3, [pc, #448]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010aa8:	681b      	ldr	r3, [r3, #0]
 8010aaa:	4a70      	ldr	r2, [pc, #448]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010aac:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 8010aae:	4b71      	ldr	r3, [pc, #452]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010ab0:	781b      	ldrb	r3, [r3, #0]
 8010ab2:	b2db      	uxtb	r3, r3
 8010ab4:	f083 0301 	eor.w	r3, r3, #1
 8010ab8:	b2db      	uxtb	r3, r3
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d00a      	beq.n	8010ad4 <HAL_GPIO_EXTI_Callback+0x10c>
			  motor_steps[0]++;
 8010abe:	4b6e      	ldr	r3, [pc, #440]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	3301      	adds	r3, #1
 8010ac4:	4a6c      	ldr	r2, [pc, #432]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010ac6:	6013      	str	r3, [r2, #0]
			  delta_pos[0]++;
 8010ac8:	4b6c      	ldr	r3, [pc, #432]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	3301      	adds	r3, #1
 8010ace:	4a6b      	ldr	r2, [pc, #428]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010ad0:	6013      	str	r3, [r2, #0]
		break;
 8010ad2:	e28b      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[0]--;
 8010ad4:	4b68      	ldr	r3, [pc, #416]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	3b01      	subs	r3, #1
 8010ada:	4a67      	ldr	r2, [pc, #412]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010adc:	6013      	str	r3, [r2, #0]
			  delta_pos[0]--;
 8010ade:	4b67      	ldr	r3, [pc, #412]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010ae0:	681b      	ldr	r3, [r3, #0]
 8010ae2:	3b01      	subs	r3, #1
 8010ae4:	4a65      	ldr	r2, [pc, #404]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010ae6:	6013      	str	r3, [r2, #0]
		break;
 8010ae8:	e280      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 8010aea:	4b5e      	ldr	r3, [pc, #376]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010aec:	691a      	ldr	r2, [r3, #16]
 8010aee:	4b5d      	ldr	r3, [pc, #372]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010af0:	8a9b      	ldrh	r3, [r3, #20]
 8010af2:	4619      	mov	r1, r3
 8010af4:	4610      	mov	r0, r2
 8010af6:	f002 ff0b 	bl	8013910 <HAL_GPIO_ReadPin>
 8010afa:	4603      	mov	r3, r0
 8010afc:	461a      	mov	r2, r3
 8010afe:	4b5a      	ldr	r3, [pc, #360]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010b00:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 8010b02:	4b5a      	ldr	r3, [pc, #360]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010b04:	685b      	ldr	r3, [r3, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d12b      	bne.n	8010b62 <HAL_GPIO_EXTI_Callback+0x19a>
 8010b0a:	4b57      	ldr	r3, [pc, #348]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	2b01      	cmp	r3, #1
 8010b10:	d127      	bne.n	8010b62 <HAL_GPIO_EXTI_Callback+0x19a>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 8010b12:	4b54      	ldr	r3, [pc, #336]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010b14:	699a      	ldr	r2, [r3, #24]
 8010b16:	4b53      	ldr	r3, [pc, #332]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010b18:	8b9b      	ldrh	r3, [r3, #28]
 8010b1a:	4619      	mov	r1, r3
 8010b1c:	4610      	mov	r0, r2
 8010b1e:	f002 fef7 	bl	8013910 <HAL_GPIO_ReadPin>
 8010b22:	4603      	mov	r3, r0
 8010b24:	461a      	mov	r2, r3
 8010b26:	4b52      	ldr	r3, [pc, #328]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010b28:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 8010b2a:	4b51      	ldr	r3, [pc, #324]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d108      	bne.n	8010b44 <HAL_GPIO_EXTI_Callback+0x17c>
 8010b32:	4b50      	ldr	r3, [pc, #320]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010b34:	785b      	ldrb	r3, [r3, #1]
 8010b36:	b2db      	uxtb	r3, r3
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d003      	beq.n	8010b44 <HAL_GPIO_EXTI_Callback+0x17c>
		      direction[1] = false; //Reverse
 8010b3c:	4b4d      	ldr	r3, [pc, #308]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010b3e:	2200      	movs	r2, #0
 8010b40:	705a      	strb	r2, [r3, #1]
 8010b42:	e00e      	b.n	8010b62 <HAL_GPIO_EXTI_Callback+0x19a>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 8010b44:	4b4a      	ldr	r3, [pc, #296]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010b46:	685b      	ldr	r3, [r3, #4]
 8010b48:	2b01      	cmp	r3, #1
 8010b4a:	d10a      	bne.n	8010b62 <HAL_GPIO_EXTI_Callback+0x19a>
 8010b4c:	4b49      	ldr	r3, [pc, #292]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010b4e:	785b      	ldrb	r3, [r3, #1]
 8010b50:	b2db      	uxtb	r3, r3
 8010b52:	f083 0301 	eor.w	r3, r3, #1
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d002      	beq.n	8010b62 <HAL_GPIO_EXTI_Callback+0x19a>
		    	direction[1] = true;  //Forward
 8010b5c:	4b45      	ldr	r3, [pc, #276]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010b5e:	2201      	movs	r2, #1
 8010b60:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 8010b62:	4b41      	ldr	r3, [pc, #260]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010b64:	685b      	ldr	r3, [r3, #4]
 8010b66:	4a41      	ldr	r2, [pc, #260]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010b68:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 8010b6a:	4b42      	ldr	r3, [pc, #264]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010b6c:	785b      	ldrb	r3, [r3, #1]
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	f083 0301 	eor.w	r3, r3, #1
 8010b74:	b2db      	uxtb	r3, r3
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00a      	beq.n	8010b90 <HAL_GPIO_EXTI_Callback+0x1c8>
			  motor_steps[1]++;
 8010b7a:	4b3f      	ldr	r3, [pc, #252]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010b7c:	685b      	ldr	r3, [r3, #4]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	4a3d      	ldr	r2, [pc, #244]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010b82:	6053      	str	r3, [r2, #4]
			  delta_pos[1]++;
 8010b84:	4b3d      	ldr	r3, [pc, #244]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010b86:	685b      	ldr	r3, [r3, #4]
 8010b88:	3301      	adds	r3, #1
 8010b8a:	4a3c      	ldr	r2, [pc, #240]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010b8c:	6053      	str	r3, [r2, #4]
		break;
 8010b8e:	e22d      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[1]--;
 8010b90:	4b39      	ldr	r3, [pc, #228]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010b92:	685b      	ldr	r3, [r3, #4]
 8010b94:	3b01      	subs	r3, #1
 8010b96:	4a38      	ldr	r2, [pc, #224]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010b98:	6053      	str	r3, [r2, #4]
			  delta_pos[1]--;
 8010b9a:	4b38      	ldr	r3, [pc, #224]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010b9c:	685b      	ldr	r3, [r3, #4]
 8010b9e:	3b01      	subs	r3, #1
 8010ba0:	4a36      	ldr	r2, [pc, #216]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010ba2:	6053      	str	r3, [r2, #4]
		break;
 8010ba4:	e222      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 8010ba6:	4b2f      	ldr	r3, [pc, #188]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010ba8:	6a1a      	ldr	r2, [r3, #32]
 8010baa:	4b2e      	ldr	r3, [pc, #184]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010bac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8010bae:	4619      	mov	r1, r3
 8010bb0:	4610      	mov	r0, r2
 8010bb2:	f002 fead 	bl	8013910 <HAL_GPIO_ReadPin>
 8010bb6:	4603      	mov	r3, r0
 8010bb8:	461a      	mov	r2, r3
 8010bba:	4b2b      	ldr	r3, [pc, #172]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010bbc:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 8010bbe:	4b2b      	ldr	r3, [pc, #172]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010bc0:	689b      	ldr	r3, [r3, #8]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d12b      	bne.n	8010c1e <HAL_GPIO_EXTI_Callback+0x256>
 8010bc6:	4b28      	ldr	r3, [pc, #160]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010bc8:	689b      	ldr	r3, [r3, #8]
 8010bca:	2b01      	cmp	r3, #1
 8010bcc:	d127      	bne.n	8010c1e <HAL_GPIO_EXTI_Callback+0x256>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 8010bce:	4b25      	ldr	r3, [pc, #148]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010bd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010bd2:	4b24      	ldr	r3, [pc, #144]	; (8010c64 <HAL_GPIO_EXTI_Callback+0x29c>)
 8010bd4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010bd6:	4619      	mov	r1, r3
 8010bd8:	4610      	mov	r0, r2
 8010bda:	f002 fe99 	bl	8013910 <HAL_GPIO_ReadPin>
 8010bde:	4603      	mov	r3, r0
 8010be0:	461a      	mov	r2, r3
 8010be2:	4b23      	ldr	r3, [pc, #140]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010be4:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 8010be6:	4b22      	ldr	r3, [pc, #136]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010be8:	689b      	ldr	r3, [r3, #8]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d108      	bne.n	8010c00 <HAL_GPIO_EXTI_Callback+0x238>
 8010bee:	4b21      	ldr	r3, [pc, #132]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010bf0:	789b      	ldrb	r3, [r3, #2]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d003      	beq.n	8010c00 <HAL_GPIO_EXTI_Callback+0x238>
		      direction[2] = false; //Reverse
 8010bf8:	4b1e      	ldr	r3, [pc, #120]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	709a      	strb	r2, [r3, #2]
 8010bfe:	e00e      	b.n	8010c1e <HAL_GPIO_EXTI_Callback+0x256>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 8010c00:	4b1b      	ldr	r3, [pc, #108]	; (8010c70 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	2b01      	cmp	r3, #1
 8010c06:	d10a      	bne.n	8010c1e <HAL_GPIO_EXTI_Callback+0x256>
 8010c08:	4b1a      	ldr	r3, [pc, #104]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010c0a:	789b      	ldrb	r3, [r3, #2]
 8010c0c:	b2db      	uxtb	r3, r3
 8010c0e:	f083 0301 	eor.w	r3, r3, #1
 8010c12:	b2db      	uxtb	r3, r3
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d002      	beq.n	8010c1e <HAL_GPIO_EXTI_Callback+0x256>
		    	direction[2] = true;  //Forward
 8010c18:	4b16      	ldr	r3, [pc, #88]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 8010c1e:	4b12      	ldr	r3, [pc, #72]	; (8010c68 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8010c20:	689b      	ldr	r3, [r3, #8]
 8010c22:	4a12      	ldr	r2, [pc, #72]	; (8010c6c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8010c24:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 8010c26:	4b13      	ldr	r3, [pc, #76]	; (8010c74 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8010c28:	789b      	ldrb	r3, [r3, #2]
 8010c2a:	b2db      	uxtb	r3, r3
 8010c2c:	f083 0301 	eor.w	r3, r3, #1
 8010c30:	b2db      	uxtb	r3, r3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	d00a      	beq.n	8010c4c <HAL_GPIO_EXTI_Callback+0x284>
			  motor_steps[2]++;
 8010c36:	4b10      	ldr	r3, [pc, #64]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010c38:	689b      	ldr	r3, [r3, #8]
 8010c3a:	3301      	adds	r3, #1
 8010c3c:	4a0e      	ldr	r2, [pc, #56]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010c3e:	6093      	str	r3, [r2, #8]
			  delta_pos[2]++;
 8010c40:	4b0e      	ldr	r3, [pc, #56]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010c42:	689b      	ldr	r3, [r3, #8]
 8010c44:	3301      	adds	r3, #1
 8010c46:	4a0d      	ldr	r2, [pc, #52]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010c48:	6093      	str	r3, [r2, #8]
		break;
 8010c4a:	e1cf      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[2]--;
 8010c4c:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010c4e:	689b      	ldr	r3, [r3, #8]
 8010c50:	3b01      	subs	r3, #1
 8010c52:	4a09      	ldr	r2, [pc, #36]	; (8010c78 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8010c54:	6093      	str	r3, [r2, #8]
			  delta_pos[2]--;
 8010c56:	4b09      	ldr	r3, [pc, #36]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010c58:	689b      	ldr	r3, [r3, #8]
 8010c5a:	3b01      	subs	r3, #1
 8010c5c:	4a07      	ldr	r2, [pc, #28]	; (8010c7c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8010c5e:	6093      	str	r3, [r2, #8]
		break;
 8010c60:	e1c4      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
 8010c62:	bf00      	nop
 8010c64:	24000434 	.word	0x24000434
 8010c68:	2400041c 	.word	0x2400041c
 8010c6c:	24000404 	.word	0x24000404
 8010c70:	24000544 	.word	0x24000544
 8010c74:	24000000 	.word	0x24000000
 8010c78:	24000218 	.word	0x24000218
 8010c7c:	24000260 	.word	0x24000260
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 8010c80:	4b9f      	ldr	r3, [pc, #636]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010c82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010c84:	4b9e      	ldr	r3, [pc, #632]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010c86:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8010c88:	4619      	mov	r1, r3
 8010c8a:	4610      	mov	r0, r2
 8010c8c:	f002 fe40 	bl	8013910 <HAL_GPIO_ReadPin>
 8010c90:	4603      	mov	r3, r0
 8010c92:	461a      	mov	r2, r3
 8010c94:	4b9b      	ldr	r3, [pc, #620]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010c96:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 8010c98:	4b9b      	ldr	r3, [pc, #620]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d12b      	bne.n	8010cf8 <HAL_GPIO_EXTI_Callback+0x330>
 8010ca0:	4b98      	ldr	r3, [pc, #608]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	2b01      	cmp	r3, #1
 8010ca6:	d127      	bne.n	8010cf8 <HAL_GPIO_EXTI_Callback+0x330>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 8010ca8:	4b95      	ldr	r3, [pc, #596]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cac:	4b94      	ldr	r3, [pc, #592]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010cae:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	f002 fe2c 	bl	8013910 <HAL_GPIO_ReadPin>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	461a      	mov	r2, r3
 8010cbc:	4b93      	ldr	r3, [pc, #588]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010cbe:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 8010cc0:	4b92      	ldr	r3, [pc, #584]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d108      	bne.n	8010cda <HAL_GPIO_EXTI_Callback+0x312>
 8010cc8:	4b91      	ldr	r3, [pc, #580]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010cca:	78db      	ldrb	r3, [r3, #3]
 8010ccc:	b2db      	uxtb	r3, r3
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d003      	beq.n	8010cda <HAL_GPIO_EXTI_Callback+0x312>
		      direction[3] = false; //Reverse
 8010cd2:	4b8f      	ldr	r3, [pc, #572]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	70da      	strb	r2, [r3, #3]
 8010cd8:	e00e      	b.n	8010cf8 <HAL_GPIO_EXTI_Callback+0x330>
		    else if(val_encoderB[3] == HIGH && !direction[3])
 8010cda:	4b8c      	ldr	r3, [pc, #560]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010cdc:	68db      	ldr	r3, [r3, #12]
 8010cde:	2b01      	cmp	r3, #1
 8010ce0:	d10a      	bne.n	8010cf8 <HAL_GPIO_EXTI_Callback+0x330>
 8010ce2:	4b8b      	ldr	r3, [pc, #556]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010ce4:	78db      	ldrb	r3, [r3, #3]
 8010ce6:	b2db      	uxtb	r3, r3
 8010ce8:	f083 0301 	eor.w	r3, r3, #1
 8010cec:	b2db      	uxtb	r3, r3
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d002      	beq.n	8010cf8 <HAL_GPIO_EXTI_Callback+0x330>
		    	direction[3] = true;  //Forward
 8010cf2:	4b87      	ldr	r3, [pc, #540]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 8010cf8:	4b82      	ldr	r3, [pc, #520]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010cfa:	68db      	ldr	r3, [r3, #12]
 8010cfc:	4a82      	ldr	r2, [pc, #520]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010cfe:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 8010d00:	4b83      	ldr	r3, [pc, #524]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010d02:	78db      	ldrb	r3, [r3, #3]
 8010d04:	b2db      	uxtb	r3, r3
 8010d06:	f083 0301 	eor.w	r3, r3, #1
 8010d0a:	b2db      	uxtb	r3, r3
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d00a      	beq.n	8010d26 <HAL_GPIO_EXTI_Callback+0x35e>
			  motor_steps[3]++;
 8010d10:	4b80      	ldr	r3, [pc, #512]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010d12:	68db      	ldr	r3, [r3, #12]
 8010d14:	3301      	adds	r3, #1
 8010d16:	4a7f      	ldr	r2, [pc, #508]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010d18:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]++;
 8010d1a:	4b7f      	ldr	r3, [pc, #508]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010d1c:	68db      	ldr	r3, [r3, #12]
 8010d1e:	3301      	adds	r3, #1
 8010d20:	4a7d      	ldr	r2, [pc, #500]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010d22:	60d3      	str	r3, [r2, #12]
		break;
 8010d24:	e162      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[3]--;
 8010d26:	4b7b      	ldr	r3, [pc, #492]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010d28:	68db      	ldr	r3, [r3, #12]
 8010d2a:	3b01      	subs	r3, #1
 8010d2c:	4a79      	ldr	r2, [pc, #484]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010d2e:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]--;
 8010d30:	4b79      	ldr	r3, [pc, #484]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	3b01      	subs	r3, #1
 8010d36:	4a78      	ldr	r2, [pc, #480]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010d38:	60d3      	str	r3, [r2, #12]
		break;
 8010d3a:	e157      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[8].pin_num);
 8010d3c:	4b70      	ldr	r3, [pc, #448]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8010d40:	4b6f      	ldr	r3, [pc, #444]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010d42:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8010d46:	4619      	mov	r1, r3
 8010d48:	4610      	mov	r0, r2
 8010d4a:	f002 fde1 	bl	8013910 <HAL_GPIO_ReadPin>
 8010d4e:	4603      	mov	r3, r0
 8010d50:	461a      	mov	r2, r3
 8010d52:	4b6c      	ldr	r3, [pc, #432]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010d54:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 8010d56:	4b6c      	ldr	r3, [pc, #432]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	2b00      	cmp	r3, #0
 8010d5c:	d12c      	bne.n	8010db8 <HAL_GPIO_EXTI_Callback+0x3f0>
 8010d5e:	4b69      	ldr	r3, [pc, #420]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010d60:	691b      	ldr	r3, [r3, #16]
 8010d62:	2b01      	cmp	r3, #1
 8010d64:	d128      	bne.n	8010db8 <HAL_GPIO_EXTI_Callback+0x3f0>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8010d66:	4b66      	ldr	r3, [pc, #408]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010d68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010d6a:	4b65      	ldr	r3, [pc, #404]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010d6c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8010d70:	4619      	mov	r1, r3
 8010d72:	4610      	mov	r0, r2
 8010d74:	f002 fdcc 	bl	8013910 <HAL_GPIO_ReadPin>
 8010d78:	4603      	mov	r3, r0
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	4b63      	ldr	r3, [pc, #396]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010d7e:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 8010d80:	4b62      	ldr	r3, [pc, #392]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010d82:	691b      	ldr	r3, [r3, #16]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d108      	bne.n	8010d9a <HAL_GPIO_EXTI_Callback+0x3d2>
 8010d88:	4b61      	ldr	r3, [pc, #388]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010d8a:	791b      	ldrb	r3, [r3, #4]
 8010d8c:	b2db      	uxtb	r3, r3
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d003      	beq.n	8010d9a <HAL_GPIO_EXTI_Callback+0x3d2>
		      direction[4] = false; //Reverse
 8010d92:	4b5f      	ldr	r3, [pc, #380]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010d94:	2200      	movs	r2, #0
 8010d96:	711a      	strb	r2, [r3, #4]
 8010d98:	e00e      	b.n	8010db8 <HAL_GPIO_EXTI_Callback+0x3f0>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 8010d9a:	4b5c      	ldr	r3, [pc, #368]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010d9c:	691b      	ldr	r3, [r3, #16]
 8010d9e:	2b01      	cmp	r3, #1
 8010da0:	d10a      	bne.n	8010db8 <HAL_GPIO_EXTI_Callback+0x3f0>
 8010da2:	4b5b      	ldr	r3, [pc, #364]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010da4:	791b      	ldrb	r3, [r3, #4]
 8010da6:	b2db      	uxtb	r3, r3
 8010da8:	f083 0301 	eor.w	r3, r3, #1
 8010dac:	b2db      	uxtb	r3, r3
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d002      	beq.n	8010db8 <HAL_GPIO_EXTI_Callback+0x3f0>
		    	direction[4] = true;  //Forward
 8010db2:	4b57      	ldr	r3, [pc, #348]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010db4:	2201      	movs	r2, #1
 8010db6:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 8010db8:	4b52      	ldr	r3, [pc, #328]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010dba:	691b      	ldr	r3, [r3, #16]
 8010dbc:	4a52      	ldr	r2, [pc, #328]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010dbe:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 8010dc0:	4b53      	ldr	r3, [pc, #332]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010dc2:	791b      	ldrb	r3, [r3, #4]
 8010dc4:	b2db      	uxtb	r3, r3
 8010dc6:	f083 0301 	eor.w	r3, r3, #1
 8010dca:	b2db      	uxtb	r3, r3
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d00a      	beq.n	8010de6 <HAL_GPIO_EXTI_Callback+0x41e>
			  motor_steps[4]++;
 8010dd0:	4b50      	ldr	r3, [pc, #320]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010dd2:	691b      	ldr	r3, [r3, #16]
 8010dd4:	3301      	adds	r3, #1
 8010dd6:	4a4f      	ldr	r2, [pc, #316]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010dd8:	6113      	str	r3, [r2, #16]
			  delta_pos[4]++;
 8010dda:	4b4f      	ldr	r3, [pc, #316]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010ddc:	691b      	ldr	r3, [r3, #16]
 8010dde:	3301      	adds	r3, #1
 8010de0:	4a4d      	ldr	r2, [pc, #308]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010de2:	6113      	str	r3, [r2, #16]
		break;
 8010de4:	e102      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[4]--;
 8010de6:	4b4b      	ldr	r3, [pc, #300]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010de8:	691b      	ldr	r3, [r3, #16]
 8010dea:	3b01      	subs	r3, #1
 8010dec:	4a49      	ldr	r2, [pc, #292]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010dee:	6113      	str	r3, [r2, #16]
			  delta_pos[4]--;
 8010df0:	4b49      	ldr	r3, [pc, #292]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010df2:	691b      	ldr	r3, [r3, #16]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	4a48      	ldr	r2, [pc, #288]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010df8:	6113      	str	r3, [r2, #16]
		break;
 8010dfa:	e0f7      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 8010dfc:	4b40      	ldr	r3, [pc, #256]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010dfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e00:	4b3f      	ldr	r3, [pc, #252]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010e02:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8010e06:	4619      	mov	r1, r3
 8010e08:	4610      	mov	r0, r2
 8010e0a:	f002 fd81 	bl	8013910 <HAL_GPIO_ReadPin>
 8010e0e:	4603      	mov	r3, r0
 8010e10:	461a      	mov	r2, r3
 8010e12:	4b3c      	ldr	r3, [pc, #240]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010e14:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 8010e16:	4b3c      	ldr	r3, [pc, #240]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010e18:	695b      	ldr	r3, [r3, #20]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d12c      	bne.n	8010e78 <HAL_GPIO_EXTI_Callback+0x4b0>
 8010e1e:	4b39      	ldr	r3, [pc, #228]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010e20:	695b      	ldr	r3, [r3, #20]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d128      	bne.n	8010e78 <HAL_GPIO_EXTI_Callback+0x4b0>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 8010e26:	4b36      	ldr	r3, [pc, #216]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010e28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010e2a:	4b35      	ldr	r3, [pc, #212]	; (8010f00 <HAL_GPIO_EXTI_Callback+0x538>)
 8010e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010e30:	4619      	mov	r1, r3
 8010e32:	4610      	mov	r0, r2
 8010e34:	f002 fd6c 	bl	8013910 <HAL_GPIO_ReadPin>
 8010e38:	4603      	mov	r3, r0
 8010e3a:	461a      	mov	r2, r3
 8010e3c:	4b33      	ldr	r3, [pc, #204]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010e3e:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 8010e40:	4b32      	ldr	r3, [pc, #200]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010e42:	695b      	ldr	r3, [r3, #20]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d108      	bne.n	8010e5a <HAL_GPIO_EXTI_Callback+0x492>
 8010e48:	4b31      	ldr	r3, [pc, #196]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010e4a:	795b      	ldrb	r3, [r3, #5]
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d003      	beq.n	8010e5a <HAL_GPIO_EXTI_Callback+0x492>
		      direction[5] = false; //Reverse
 8010e52:	4b2f      	ldr	r3, [pc, #188]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010e54:	2200      	movs	r2, #0
 8010e56:	715a      	strb	r2, [r3, #5]
 8010e58:	e00e      	b.n	8010e78 <HAL_GPIO_EXTI_Callback+0x4b0>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 8010e5a:	4b2c      	ldr	r3, [pc, #176]	; (8010f0c <HAL_GPIO_EXTI_Callback+0x544>)
 8010e5c:	695b      	ldr	r3, [r3, #20]
 8010e5e:	2b01      	cmp	r3, #1
 8010e60:	d10a      	bne.n	8010e78 <HAL_GPIO_EXTI_Callback+0x4b0>
 8010e62:	4b2b      	ldr	r3, [pc, #172]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010e64:	795b      	ldrb	r3, [r3, #5]
 8010e66:	b2db      	uxtb	r3, r3
 8010e68:	f083 0301 	eor.w	r3, r3, #1
 8010e6c:	b2db      	uxtb	r3, r3
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d002      	beq.n	8010e78 <HAL_GPIO_EXTI_Callback+0x4b0>
		    	direction[5] = true;  //Forward
 8010e72:	4b27      	ldr	r3, [pc, #156]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010e74:	2201      	movs	r2, #1
 8010e76:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 8010e78:	4b22      	ldr	r3, [pc, #136]	; (8010f04 <HAL_GPIO_EXTI_Callback+0x53c>)
 8010e7a:	695b      	ldr	r3, [r3, #20]
 8010e7c:	4a22      	ldr	r2, [pc, #136]	; (8010f08 <HAL_GPIO_EXTI_Callback+0x540>)
 8010e7e:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8010e80:	4b23      	ldr	r3, [pc, #140]	; (8010f10 <HAL_GPIO_EXTI_Callback+0x548>)
 8010e82:	795b      	ldrb	r3, [r3, #5]
 8010e84:	b2db      	uxtb	r3, r3
 8010e86:	f083 0301 	eor.w	r3, r3, #1
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00a      	beq.n	8010ea6 <HAL_GPIO_EXTI_Callback+0x4de>
			  motor_steps[5]++;
 8010e90:	4b20      	ldr	r3, [pc, #128]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010e92:	695b      	ldr	r3, [r3, #20]
 8010e94:	3301      	adds	r3, #1
 8010e96:	4a1f      	ldr	r2, [pc, #124]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010e98:	6153      	str	r3, [r2, #20]
			  delta_pos[5]++;
 8010e9a:	4b1f      	ldr	r3, [pc, #124]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010e9c:	695b      	ldr	r3, [r3, #20]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	4a1d      	ldr	r2, [pc, #116]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010ea2:	6153      	str	r3, [r2, #20]
		break;
 8010ea4:	e0a2      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
			  motor_steps[5]--;
 8010ea6:	4b1b      	ldr	r3, [pc, #108]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010ea8:	695b      	ldr	r3, [r3, #20]
 8010eaa:	3b01      	subs	r3, #1
 8010eac:	4a19      	ldr	r2, [pc, #100]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010eae:	6153      	str	r3, [r2, #20]
			  delta_pos[5]--;
 8010eb0:	4b19      	ldr	r3, [pc, #100]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010eb2:	695b      	ldr	r3, [r3, #20]
 8010eb4:	3b01      	subs	r3, #1
 8010eb6:	4a18      	ldr	r2, [pc, #96]	; (8010f18 <HAL_GPIO_EXTI_Callback+0x550>)
 8010eb8:	6153      	str	r3, [r2, #20]
		break;
 8010eba:	e097      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[0] = (double)motor_steps[0] *2.0*3.1415926/REV_COUNT_1*2.0;
 8010ebc:	4b15      	ldr	r3, [pc, #84]	; (8010f14 <HAL_GPIO_EXTI_Callback+0x54c>)
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	ee07 3a90 	vmov	s15, r3
 8010ec4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010ec8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ecc:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8010ef0 <HAL_GPIO_EXTI_Callback+0x528>
 8010ed0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010ed4:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8010ef8 <HAL_GPIO_EXTI_Callback+0x530>
 8010ed8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010edc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010ee0:	4b0e      	ldr	r3, [pc, #56]	; (8010f1c <HAL_GPIO_EXTI_Callback+0x554>)
 8010ee2:	ed83 7b00 	vstr	d7, [r3]
		homing_state[0] = true;
 8010ee6:	4b0e      	ldr	r3, [pc, #56]	; (8010f20 <HAL_GPIO_EXTI_Callback+0x558>)
 8010ee8:	2201      	movs	r2, #1
 8010eea:	701a      	strb	r2, [r3, #0]
		break;
 8010eec:	e07e      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
 8010eee:	bf00      	nop
 8010ef0:	4d12d84a 	.word	0x4d12d84a
 8010ef4:	400921fb 	.word	0x400921fb
 8010ef8:	00000000 	.word	0x00000000
 8010efc:	40d0e000 	.word	0x40d0e000
 8010f00:	24000434 	.word	0x24000434
 8010f04:	2400041c 	.word	0x2400041c
 8010f08:	24000404 	.word	0x24000404
 8010f0c:	24000544 	.word	0x24000544
 8010f10:	24000000 	.word	0x24000000
 8010f14:	24000218 	.word	0x24000218
 8010f18:	24000260 	.word	0x24000260
 8010f1c:	240002d8 	.word	0x240002d8
 8010f20:	24000308 	.word	0x24000308
		desired_pos[1] = (double)motor_steps[1] *2.0*3.1415926/REV_COUNT_1*2.0;
 8010f24:	4b3a      	ldr	r3, [pc, #232]	; (8011010 <HAL_GPIO_EXTI_Callback+0x648>)
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	ee07 3a90 	vmov	s15, r3
 8010f2c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f30:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f34:	ed9f 6b30 	vldr	d6, [pc, #192]	; 8010ff8 <HAL_GPIO_EXTI_Callback+0x630>
 8010f38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010f3c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8011000 <HAL_GPIO_EXTI_Callback+0x638>
 8010f40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f44:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f48:	4b32      	ldr	r3, [pc, #200]	; (8011014 <HAL_GPIO_EXTI_Callback+0x64c>)
 8010f4a:	ed83 7b02 	vstr	d7, [r3, #8]
		homing_state[1] = true;
 8010f4e:	4b32      	ldr	r3, [pc, #200]	; (8011018 <HAL_GPIO_EXTI_Callback+0x650>)
 8010f50:	2201      	movs	r2, #1
 8010f52:	705a      	strb	r2, [r3, #1]
		break;
 8010f54:	e04a      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[2] = (double)motor_steps[2] *2.0*3.1415926/REV_COUNT_1*2.0;
 8010f56:	4b2e      	ldr	r3, [pc, #184]	; (8011010 <HAL_GPIO_EXTI_Callback+0x648>)
 8010f58:	689b      	ldr	r3, [r3, #8]
 8010f5a:	ee07 3a90 	vmov	s15, r3
 8010f5e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f62:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f66:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8010ff8 <HAL_GPIO_EXTI_Callback+0x630>
 8010f6a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010f6e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 8011000 <HAL_GPIO_EXTI_Callback+0x638>
 8010f72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f76:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f7a:	4b26      	ldr	r3, [pc, #152]	; (8011014 <HAL_GPIO_EXTI_Callback+0x64c>)
 8010f7c:	ed83 7b04 	vstr	d7, [r3, #16]
		homing_state[2] = true;
 8010f80:	4b25      	ldr	r3, [pc, #148]	; (8011018 <HAL_GPIO_EXTI_Callback+0x650>)
 8010f82:	2201      	movs	r2, #1
 8010f84:	709a      	strb	r2, [r3, #2]
		break;
 8010f86:	e031      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[3] = (double)motor_steps[3] *2.0*3.1415926/REV_COUNT_2*2.0;
 8010f88:	4b21      	ldr	r3, [pc, #132]	; (8011010 <HAL_GPIO_EXTI_Callback+0x648>)
 8010f8a:	68db      	ldr	r3, [r3, #12]
 8010f8c:	ee07 3a90 	vmov	s15, r3
 8010f90:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010f94:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010f98:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8010ff8 <HAL_GPIO_EXTI_Callback+0x630>
 8010f9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010fa0:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8011008 <HAL_GPIO_EXTI_Callback+0x640>
 8010fa4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010fa8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010fac:	4b19      	ldr	r3, [pc, #100]	; (8011014 <HAL_GPIO_EXTI_Callback+0x64c>)
 8010fae:	ed83 7b06 	vstr	d7, [r3, #24]
		homing_state[3] = true;
 8010fb2:	4b19      	ldr	r3, [pc, #100]	; (8011018 <HAL_GPIO_EXTI_Callback+0x650>)
 8010fb4:	2201      	movs	r2, #1
 8010fb6:	70da      	strb	r2, [r3, #3]
		break;
 8010fb8:	e018      	b.n	8010fec <HAL_GPIO_EXTI_Callback+0x624>
		desired_pos[4] = (double)motor_steps[4] *2.0*3.1415926/REV_COUNT_2*2.0;
 8010fba:	4b15      	ldr	r3, [pc, #84]	; (8011010 <HAL_GPIO_EXTI_Callback+0x648>)
 8010fbc:	691b      	ldr	r3, [r3, #16]
 8010fbe:	ee07 3a90 	vmov	s15, r3
 8010fc2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8010fc6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010fca:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8010ff8 <HAL_GPIO_EXTI_Callback+0x630>
 8010fce:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010fd2:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8011008 <HAL_GPIO_EXTI_Callback+0x640>
 8010fd6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010fda:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010fde:	4b0d      	ldr	r3, [pc, #52]	; (8011014 <HAL_GPIO_EXTI_Callback+0x64c>)
 8010fe0:	ed83 7b08 	vstr	d7, [r3, #32]
		homing_state[4] = true;
 8010fe4:	4b0c      	ldr	r3, [pc, #48]	; (8011018 <HAL_GPIO_EXTI_Callback+0x650>)
 8010fe6:	2201      	movs	r2, #1
 8010fe8:	711a      	strb	r2, [r3, #4]
		break;
 8010fea:	bf00      	nop
	}
}
 8010fec:	bf00      	nop
 8010fee:	3708      	adds	r7, #8
 8010ff0:	46bd      	mov	sp, r7
 8010ff2:	bd80      	pop	{r7, pc}
 8010ff4:	f3af 8000 	nop.w
 8010ff8:	4d12d84a 	.word	0x4d12d84a
 8010ffc:	400921fb 	.word	0x400921fb
 8011000:	00000000 	.word	0x00000000
 8011004:	40d0e000 	.word	0x40d0e000
 8011008:	00000000 	.word	0x00000000
 801100c:	40b67c00 	.word	0x40b67c00
 8011010:	24000218 	.word	0x24000218
 8011014:	240002d8 	.word	0x240002d8
 8011018:	24000308 	.word	0x24000308

0801101c <set_up_encoder_pins>:

void set_up_encoder_pins(void){
 801101c:	b480      	push	{r7}
 801101e:	af00      	add	r7, sp, #0
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8011020:	4b28      	ldr	r3, [pc, #160]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011022:	4a29      	ldr	r2, [pc, #164]	; (80110c8 <set_up_encoder_pins+0xac>)
 8011024:	601a      	str	r2, [r3, #0]
 8011026:	4b27      	ldr	r3, [pc, #156]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011028:	2201      	movs	r2, #1
 801102a:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 801102c:	4b25      	ldr	r3, [pc, #148]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801102e:	4a27      	ldr	r2, [pc, #156]	; (80110cc <set_up_encoder_pins+0xb0>)
 8011030:	609a      	str	r2, [r3, #8]
 8011032:	4b24      	ldr	r3, [pc, #144]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011038:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 801103a:	4b22      	ldr	r3, [pc, #136]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801103c:	4a22      	ldr	r2, [pc, #136]	; (80110c8 <set_up_encoder_pins+0xac>)
 801103e:	611a      	str	r2, [r3, #16]
 8011040:	4b20      	ldr	r3, [pc, #128]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011042:	2202      	movs	r2, #2
 8011044:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 8011046:	4b1f      	ldr	r3, [pc, #124]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011048:	4a21      	ldr	r2, [pc, #132]	; (80110d0 <set_up_encoder_pins+0xb4>)
 801104a:	619a      	str	r2, [r3, #24]
 801104c:	4b1d      	ldr	r3, [pc, #116]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801104e:	2220      	movs	r2, #32
 8011050:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 8011052:	4b1c      	ldr	r3, [pc, #112]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011054:	4a1f      	ldr	r2, [pc, #124]	; (80110d4 <set_up_encoder_pins+0xb8>)
 8011056:	621a      	str	r2, [r3, #32]
 8011058:	4b1a      	ldr	r3, [pc, #104]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801105a:	2204      	movs	r2, #4
 801105c:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 801105e:	4b19      	ldr	r3, [pc, #100]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011060:	4a1a      	ldr	r2, [pc, #104]	; (80110cc <set_up_encoder_pins+0xb0>)
 8011062:	629a      	str	r2, [r3, #40]	; 0x28
 8011064:	4b17      	ldr	r3, [pc, #92]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011066:	2280      	movs	r2, #128	; 0x80
 8011068:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 801106a:	4b16      	ldr	r3, [pc, #88]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801106c:	4a1a      	ldr	r2, [pc, #104]	; (80110d8 <set_up_encoder_pins+0xbc>)
 801106e:	631a      	str	r2, [r3, #48]	; 0x30
 8011070:	4b14      	ldr	r3, [pc, #80]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011072:	2208      	movs	r2, #8
 8011074:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 8011076:	4b13      	ldr	r3, [pc, #76]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011078:	4a17      	ldr	r2, [pc, #92]	; (80110d8 <set_up_encoder_pins+0xbc>)
 801107a:	639a      	str	r2, [r3, #56]	; 0x38
 801107c:	4b11      	ldr	r3, [pc, #68]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801107e:	2210      	movs	r2, #16
 8011080:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 8011082:	4b10      	ldr	r3, [pc, #64]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011084:	4a12      	ldr	r2, [pc, #72]	; (80110d0 <set_up_encoder_pins+0xb4>)
 8011086:	641a      	str	r2, [r3, #64]	; 0x40
 8011088:	4b0e      	ldr	r3, [pc, #56]	; (80110c4 <set_up_encoder_pins+0xa8>)
 801108a:	2210      	movs	r2, #16
 801108c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 8011090:	4b0c      	ldr	r3, [pc, #48]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011092:	4a0f      	ldr	r2, [pc, #60]	; (80110d0 <set_up_encoder_pins+0xb4>)
 8011094:	649a      	str	r2, [r3, #72]	; 0x48
 8011096:	4b0b      	ldr	r3, [pc, #44]	; (80110c4 <set_up_encoder_pins+0xa8>)
 8011098:	2208      	movs	r2, #8
 801109a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 801109e:	4b09      	ldr	r3, [pc, #36]	; (80110c4 <set_up_encoder_pins+0xa8>)
 80110a0:	4a0b      	ldr	r2, [pc, #44]	; (80110d0 <set_up_encoder_pins+0xb4>)
 80110a2:	651a      	str	r2, [r3, #80]	; 0x50
 80110a4:	4b07      	ldr	r3, [pc, #28]	; (80110c4 <set_up_encoder_pins+0xa8>)
 80110a6:	2280      	movs	r2, #128	; 0x80
 80110a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 80110ac:	4b05      	ldr	r3, [pc, #20]	; (80110c4 <set_up_encoder_pins+0xa8>)
 80110ae:	4a0a      	ldr	r2, [pc, #40]	; (80110d8 <set_up_encoder_pins+0xbc>)
 80110b0:	659a      	str	r2, [r3, #88]	; 0x58
 80110b2:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <set_up_encoder_pins+0xa8>)
 80110b4:	2204      	movs	r2, #4
 80110b6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80110ba:	bf00      	nop
 80110bc:	46bd      	mov	sp, r7
 80110be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c2:	4770      	bx	lr
 80110c4:	24000434 	.word	0x24000434
 80110c8:	58020000 	.word	0x58020000
 80110cc:	58020800 	.word	0x58020800
 80110d0:	58020c00 	.word	0x58020c00
 80110d4:	58020400 	.word	0x58020400
 80110d8:	58021000 	.word	0x58021000

080110dc <set_up_driver_pins>:
void set_up_driver_pins(void){
 80110dc:	b480      	push	{r7}
 80110de:	af00      	add	r7, sp, #0
	//PE0, PF11, PG8, PG5, PF15, PD10, PG4, PE10, PE12, PD11, PD12, PD13
	Driver_P[0].port = GPIOE; Driver_P[0].pin_num = GPIO_PIN_0;
 80110e0:	4b2a      	ldr	r3, [pc, #168]	; (801118c <set_up_driver_pins+0xb0>)
 80110e2:	4a2b      	ldr	r2, [pc, #172]	; (8011190 <set_up_driver_pins+0xb4>)
 80110e4:	601a      	str	r2, [r3, #0]
 80110e6:	4b29      	ldr	r3, [pc, #164]	; (801118c <set_up_driver_pins+0xb0>)
 80110e8:	2201      	movs	r2, #1
 80110ea:	809a      	strh	r2, [r3, #4]
	Driver_N[0].port = GPIOF; Driver_N[0].pin_num = GPIO_PIN_11;
 80110ec:	4b29      	ldr	r3, [pc, #164]	; (8011194 <set_up_driver_pins+0xb8>)
 80110ee:	4a2a      	ldr	r2, [pc, #168]	; (8011198 <set_up_driver_pins+0xbc>)
 80110f0:	601a      	str	r2, [r3, #0]
 80110f2:	4b28      	ldr	r3, [pc, #160]	; (8011194 <set_up_driver_pins+0xb8>)
 80110f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80110f8:	809a      	strh	r2, [r3, #4]
	Driver_P[1].port = GPIOG; Driver_P[1].pin_num = GPIO_PIN_8;
 80110fa:	4b24      	ldr	r3, [pc, #144]	; (801118c <set_up_driver_pins+0xb0>)
 80110fc:	4a27      	ldr	r2, [pc, #156]	; (801119c <set_up_driver_pins+0xc0>)
 80110fe:	609a      	str	r2, [r3, #8]
 8011100:	4b22      	ldr	r3, [pc, #136]	; (801118c <set_up_driver_pins+0xb0>)
 8011102:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011106:	819a      	strh	r2, [r3, #12]
	Driver_N[1].port = GPIOG; Driver_N[1].pin_num = GPIO_PIN_5;
 8011108:	4b22      	ldr	r3, [pc, #136]	; (8011194 <set_up_driver_pins+0xb8>)
 801110a:	4a24      	ldr	r2, [pc, #144]	; (801119c <set_up_driver_pins+0xc0>)
 801110c:	609a      	str	r2, [r3, #8]
 801110e:	4b21      	ldr	r3, [pc, #132]	; (8011194 <set_up_driver_pins+0xb8>)
 8011110:	2220      	movs	r2, #32
 8011112:	819a      	strh	r2, [r3, #12]
	Driver_P[2].port = GPIOF; Driver_P[2].pin_num = GPIO_PIN_15;
 8011114:	4b1d      	ldr	r3, [pc, #116]	; (801118c <set_up_driver_pins+0xb0>)
 8011116:	4a20      	ldr	r2, [pc, #128]	; (8011198 <set_up_driver_pins+0xbc>)
 8011118:	611a      	str	r2, [r3, #16]
 801111a:	4b1c      	ldr	r3, [pc, #112]	; (801118c <set_up_driver_pins+0xb0>)
 801111c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8011120:	829a      	strh	r2, [r3, #20]
	Driver_N[2].port = GPIOD; Driver_N[3].pin_num = GPIO_PIN_10;
 8011122:	4b1c      	ldr	r3, [pc, #112]	; (8011194 <set_up_driver_pins+0xb8>)
 8011124:	4a1e      	ldr	r2, [pc, #120]	; (80111a0 <set_up_driver_pins+0xc4>)
 8011126:	611a      	str	r2, [r3, #16]
 8011128:	4b1a      	ldr	r3, [pc, #104]	; (8011194 <set_up_driver_pins+0xb8>)
 801112a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801112e:	839a      	strh	r2, [r3, #28]
	Driver_P[3].port = GPIOG; Driver_P[3].pin_num = GPIO_PIN_4;
 8011130:	4b16      	ldr	r3, [pc, #88]	; (801118c <set_up_driver_pins+0xb0>)
 8011132:	4a1a      	ldr	r2, [pc, #104]	; (801119c <set_up_driver_pins+0xc0>)
 8011134:	619a      	str	r2, [r3, #24]
 8011136:	4b15      	ldr	r3, [pc, #84]	; (801118c <set_up_driver_pins+0xb0>)
 8011138:	2210      	movs	r2, #16
 801113a:	839a      	strh	r2, [r3, #28]
	Driver_N[3].port = GPIOE; Driver_N[3].pin_num = GPIO_PIN_10;
 801113c:	4b15      	ldr	r3, [pc, #84]	; (8011194 <set_up_driver_pins+0xb8>)
 801113e:	4a14      	ldr	r2, [pc, #80]	; (8011190 <set_up_driver_pins+0xb4>)
 8011140:	619a      	str	r2, [r3, #24]
 8011142:	4b14      	ldr	r3, [pc, #80]	; (8011194 <set_up_driver_pins+0xb8>)
 8011144:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8011148:	839a      	strh	r2, [r3, #28]
	Driver_P[4].port = GPIOE; Driver_P[4].pin_num = GPIO_PIN_12;
 801114a:	4b10      	ldr	r3, [pc, #64]	; (801118c <set_up_driver_pins+0xb0>)
 801114c:	4a10      	ldr	r2, [pc, #64]	; (8011190 <set_up_driver_pins+0xb4>)
 801114e:	621a      	str	r2, [r3, #32]
 8011150:	4b0e      	ldr	r3, [pc, #56]	; (801118c <set_up_driver_pins+0xb0>)
 8011152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011156:	849a      	strh	r2, [r3, #36]	; 0x24
	Driver_N[4].port = GPIOD; Driver_N[4].pin_num = GPIO_PIN_11;
 8011158:	4b0e      	ldr	r3, [pc, #56]	; (8011194 <set_up_driver_pins+0xb8>)
 801115a:	4a11      	ldr	r2, [pc, #68]	; (80111a0 <set_up_driver_pins+0xc4>)
 801115c:	621a      	str	r2, [r3, #32]
 801115e:	4b0d      	ldr	r3, [pc, #52]	; (8011194 <set_up_driver_pins+0xb8>)
 8011160:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011164:	849a      	strh	r2, [r3, #36]	; 0x24
	Driver_P[5].port = GPIOD; Driver_P[5].pin_num = GPIO_PIN_12;
 8011166:	4b09      	ldr	r3, [pc, #36]	; (801118c <set_up_driver_pins+0xb0>)
 8011168:	4a0d      	ldr	r2, [pc, #52]	; (80111a0 <set_up_driver_pins+0xc4>)
 801116a:	629a      	str	r2, [r3, #40]	; 0x28
 801116c:	4b07      	ldr	r3, [pc, #28]	; (801118c <set_up_driver_pins+0xb0>)
 801116e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011172:	859a      	strh	r2, [r3, #44]	; 0x2c
	Driver_N[5].port = GPIOD; Driver_N[5].pin_num = GPIO_PIN_13;
 8011174:	4b07      	ldr	r3, [pc, #28]	; (8011194 <set_up_driver_pins+0xb8>)
 8011176:	4a0a      	ldr	r2, [pc, #40]	; (80111a0 <set_up_driver_pins+0xc4>)
 8011178:	629a      	str	r2, [r3, #40]	; 0x28
 801117a:	4b06      	ldr	r3, [pc, #24]	; (8011194 <set_up_driver_pins+0xb8>)
 801117c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011180:	859a      	strh	r2, [r3, #44]	; 0x2c
}
 8011182:	bf00      	nop
 8011184:	46bd      	mov	sp, r7
 8011186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801118a:	4770      	bx	lr
 801118c:	24000348 	.word	0x24000348
 8011190:	58021000 	.word	0x58021000
 8011194:	240004d4 	.word	0x240004d4
 8011198:	58021400 	.word	0x58021400
 801119c:	58021800 	.word	0x58021800
 80111a0:	58020c00 	.word	0x58020c00

080111a4 <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b08c      	sub	sp, #48	; 0x30
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	60f8      	str	r0, [r7, #12]
 80111ac:	60b9      	str	r1, [r7, #8]
 80111ae:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80111b0:	f107 0314 	add.w	r3, r7, #20
 80111b4:	2200      	movs	r2, #0
 80111b6:	601a      	str	r2, [r3, #0]
 80111b8:	605a      	str	r2, [r3, #4]
 80111ba:	609a      	str	r2, [r3, #8]
 80111bc:	60da      	str	r2, [r3, #12]
 80111be:	611a      	str	r2, [r3, #16]
 80111c0:	615a      	str	r2, [r3, #20]
 80111c2:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80111c4:	2360      	movs	r3, #96	; 0x60
 80111c6:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80111cc:	2300      	movs	r3, #0
 80111ce:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80111d0:	2300      	movs	r3, #0
 80111d2:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80111d4:	f107 0314 	add.w	r3, r7, #20
 80111d8:	2200      	movs	r2, #0
 80111da:	4619      	mov	r1, r3
 80111dc:	4819      	ldr	r0, [pc, #100]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 80111de:	f006 fa4d 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 80111e2:	4603      	mov	r3, r0
 80111e4:	2b00      	cmp	r3, #0
 80111e6:	d001      	beq.n	80111ec <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 80111e8:	f001 fa74 	bl	80126d4 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80111f0:	f107 0314 	add.w	r3, r7, #20
 80111f4:	220c      	movs	r2, #12
 80111f6:	4619      	mov	r1, r3
 80111f8:	4812      	ldr	r0, [pc, #72]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 80111fa:	f006 fa3f 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 80111fe:	4603      	mov	r3, r0
 8011200:	2b00      	cmp	r3, #0
 8011202:	d001      	beq.n	8011208 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8011204:	f001 fa66 	bl	80126d4 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 801120c:	f107 0314 	add.w	r3, r7, #20
 8011210:	2204      	movs	r2, #4
 8011212:	4619      	mov	r1, r3
 8011214:	480b      	ldr	r0, [pc, #44]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 8011216:	f006 fa31 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 801121a:	4603      	mov	r3, r0
 801121c:	2b00      	cmp	r3, #0
 801121e:	d001      	beq.n	8011224 <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8011220:	f001 fa58 	bl	80126d4 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8011224:	2100      	movs	r1, #0
 8011226:	4807      	ldr	r0, [pc, #28]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 8011228:	f006 f8b0 	bl	801738c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 801122c:	2104      	movs	r1, #4
 801122e:	4805      	ldr	r0, [pc, #20]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 8011230:	f006 f8ac 	bl	801738c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8011234:	210c      	movs	r1, #12
 8011236:	4803      	ldr	r0, [pc, #12]	; (8011244 <PWM3_change_duty_cycle+0xa0>)
 8011238:	f006 f8a8 	bl	801738c <HAL_TIM_PWM_Start>
}
 801123c:	bf00      	nop
 801123e:	3730      	adds	r7, #48	; 0x30
 8011240:	46bd      	mov	sp, r7
 8011242:	bd80      	pop	{r7, pc}
 8011244:	24000504 	.word	0x24000504

08011248 <PWM1_change_duty_cycle>:
void PWM1_change_duty_cycle (int valuePE11, int valuePE13){
 8011248:	b580      	push	{r7, lr}
 801124a:	b08a      	sub	sp, #40	; 0x28
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
 8011250:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8011252:	f107 030c 	add.w	r3, r7, #12
 8011256:	2200      	movs	r2, #0
 8011258:	601a      	str	r2, [r3, #0]
 801125a:	605a      	str	r2, [r3, #4]
 801125c:	609a      	str	r2, [r3, #8]
 801125e:	60da      	str	r2, [r3, #12]
 8011260:	611a      	str	r2, [r3, #16]
 8011262:	615a      	str	r2, [r3, #20]
 8011264:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011266:	2360      	movs	r3, #96	; 0x60
 8011268:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = valuePE11;
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801126e:	2300      	movs	r3, #0
 8011270:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011272:	2300      	movs	r3, #0
 8011274:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011276:	2300      	movs	r3, #0
 8011278:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 801127a:	2300      	movs	r3, #0
 801127c:	623b      	str	r3, [r7, #32]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 801127e:	2300      	movs	r3, #0
 8011280:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011282:	f107 030c 	add.w	r3, r7, #12
 8011286:	2204      	movs	r2, #4
 8011288:	4619      	mov	r1, r3
 801128a:	4811      	ldr	r0, [pc, #68]	; (80112d0 <PWM1_change_duty_cycle+0x88>)
 801128c:	f006 f9f6 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011290:	4603      	mov	r3, r0
 8011292:	2b00      	cmp	r3, #0
 8011294:	d001      	beq.n	801129a <PWM1_change_duty_cycle+0x52>
	  {
	    Error_Handler();
 8011296:	f001 fa1d 	bl	80126d4 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePE13;
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 801129e:	f107 030c 	add.w	r3, r7, #12
 80112a2:	2208      	movs	r2, #8
 80112a4:	4619      	mov	r1, r3
 80112a6:	480a      	ldr	r0, [pc, #40]	; (80112d0 <PWM1_change_duty_cycle+0x88>)
 80112a8:	f006 f9e8 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d001      	beq.n	80112b6 <PWM1_change_duty_cycle+0x6e>
	  {
	    Error_Handler();
 80112b2:	f001 fa0f 	bl	80126d4 <Error_Handler>
	  }
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80112b6:	2104      	movs	r1, #4
 80112b8:	4805      	ldr	r0, [pc, #20]	; (80112d0 <PWM1_change_duty_cycle+0x88>)
 80112ba:	f006 f867 	bl	801738c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80112be:	2108      	movs	r1, #8
 80112c0:	4803      	ldr	r0, [pc, #12]	; (80112d0 <PWM1_change_duty_cycle+0x88>)
 80112c2:	f006 f863 	bl	801738c <HAL_TIM_PWM_Start>
}
 80112c6:	bf00      	nop
 80112c8:	3728      	adds	r7, #40	; 0x28
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bd80      	pop	{r7, pc}
 80112ce:	bf00      	nop
 80112d0:	240005e8 	.word	0x240005e8

080112d4 <PWM2_change_duty_cycle>:

//pin PA5
void PWM2_change_duty_cycle (int valuePA5){
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b08a      	sub	sp, #40	; 0x28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80112dc:	f107 030c 	add.w	r3, r7, #12
 80112e0:	2200      	movs	r2, #0
 80112e2:	601a      	str	r2, [r3, #0]
 80112e4:	605a      	str	r2, [r3, #4]
 80112e6:	609a      	str	r2, [r3, #8]
 80112e8:	60da      	str	r2, [r3, #12]
 80112ea:	611a      	str	r2, [r3, #16]
 80112ec:	615a      	str	r2, [r3, #20]
 80112ee:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80112f0:	2360      	movs	r3, #96	; 0x60
 80112f2:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = valuePA5;
 80112f4:	687b      	ldr	r3, [r7, #4]
 80112f6:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80112f8:	2300      	movs	r3, #0
 80112fa:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80112fc:	2300      	movs	r3, #0
 80112fe:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011300:	f107 030c 	add.w	r3, r7, #12
 8011304:	2200      	movs	r2, #0
 8011306:	4619      	mov	r1, r3
 8011308:	4807      	ldr	r0, [pc, #28]	; (8011328 <PWM2_change_duty_cycle+0x54>)
 801130a:	f006 f9b7 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 801130e:	4603      	mov	r3, r0
 8011310:	2b00      	cmp	r3, #0
 8011312:	d001      	beq.n	8011318 <PWM2_change_duty_cycle+0x44>
	{
	  Error_Handler();
 8011314:	f001 f9de 	bl	80126d4 <Error_Handler>
    }
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8011318:	2100      	movs	r1, #0
 801131a:	4803      	ldr	r0, [pc, #12]	; (8011328 <PWM2_change_duty_cycle+0x54>)
 801131c:	f006 f836 	bl	801738c <HAL_TIM_PWM_Start>
}
 8011320:	bf00      	nop
 8011322:	3728      	adds	r7, #40	; 0x28
 8011324:	46bd      	mov	sp, r7
 8011326:	bd80      	pop	{r7, pc}
 8011328:	24000660 	.word	0x24000660
 801132c:	00000000 	.word	0x00000000

08011330 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8011330:	b480      	push	{r7}
 8011332:	b085      	sub	sp, #20
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	4a71      	ldr	r2, [pc, #452]	; (8011500 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 801133c:	4293      	cmp	r3, r2
 801133e:	f040 80c2 	bne.w	80114c6 <HAL_TIM_PeriodElapsedCallback+0x196>
		for (j = 0; j < NUM_JOINTS; j++){
 8011342:	2300      	movs	r3, #0
 8011344:	60fb      	str	r3, [r7, #12]
 8011346:	e0b7      	b.n	80114b8 <HAL_TIM_PeriodElapsedCallback+0x188>

			if (j <3){
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	2b02      	cmp	r3, #2
 801134c:	dc38      	bgt.n	80113c0 <HAL_TIM_PeriodElapsedCallback+0x90>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_1*2.0;
 801134e:	4a6d      	ldr	r2, [pc, #436]	; (8011504 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011356:	ee07 3a90 	vmov	s15, r3
 801135a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801135e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011362:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8011366:	ee27 6b06 	vmul.f64	d6, d7, d6
 801136a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 80114e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 801136e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011372:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011376:	4a64      	ldr	r2, [pc, #400]	; (8011508 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8011378:	68fb      	ldr	r3, [r7, #12]
 801137a:	00db      	lsls	r3, r3, #3
 801137c:	4413      	add	r3, r2
 801137e:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8011382:	4a62      	ldr	r2, [pc, #392]	; (801150c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801138a:	ee07 3a90 	vmov	s15, r3
 801138e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011392:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011396:	ed9f 6b50 	vldr	d6, [pc, #320]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 801139a:	ee27 7b06 	vmul.f64	d7, d7, d6
 801139e:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80114e0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 80113a2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 80113a6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 80114e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 80113aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113ae:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113b2:	4a57      	ldr	r2, [pc, #348]	; (8011510 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	00db      	lsls	r3, r3, #3
 80113b8:	4413      	add	r3, r2
 80113ba:	ed83 7b00 	vstr	d7, [r3]
 80113be:	e073      	b.n	80114a8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else if (j < 5){
 80113c0:	68fb      	ldr	r3, [r7, #12]
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	dc38      	bgt.n	8011438 <HAL_TIM_PeriodElapsedCallback+0x108>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_2*2.0;
 80113c6:	4a4f      	ldr	r2, [pc, #316]	; (8011504 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80113c8:	68fb      	ldr	r3, [r7, #12]
 80113ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80113ce:	ee07 3a90 	vmov	s15, r3
 80113d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80113d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113da:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 80113de:	ee27 6b06 	vmul.f64	d6, d7, d6
 80113e2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 80114f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 80113e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113ea:	ee37 7b07 	vadd.f64	d7, d7, d7
 80113ee:	4a46      	ldr	r2, [pc, #280]	; (8011508 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	00db      	lsls	r3, r3, #3
 80113f4:	4413      	add	r3, r2
 80113f6:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 80113fa:	4a44      	ldr	r2, [pc, #272]	; (801150c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011402:	ee07 3a90 	vmov	s15, r3
 8011406:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801140a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801140e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8011412:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011416:	ed9f 5b36 	vldr	d5, [pc, #216]	; 80114f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 801141a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 801141e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 80114e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8011422:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011426:	ee37 7b07 	vadd.f64	d7, d7, d7
 801142a:	4a39      	ldr	r2, [pc, #228]	; (8011510 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	00db      	lsls	r3, r3, #3
 8011430:	4413      	add	r3, r2
 8011432:	ed83 7b00 	vstr	d7, [r3]
 8011436:	e037      	b.n	80114a8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else{
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_3*2.0;
 8011438:	4a32      	ldr	r2, [pc, #200]	; (8011504 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 801143a:	68fb      	ldr	r3, [r7, #12]
 801143c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011440:	ee07 3a90 	vmov	s15, r3
 8011444:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8011448:	ee37 7b07 	vadd.f64	d7, d7, d7
 801144c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8011450:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011454:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80114f8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8011458:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801145c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011460:	4a29      	ldr	r2, [pc, #164]	; (8011508 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	00db      	lsls	r3, r3, #3
 8011466:	4413      	add	r3, r2
 8011468:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 801146c:	4a27      	ldr	r2, [pc, #156]	; (801150c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011474:	ee07 3a90 	vmov	s15, r3
 8011478:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801147c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8011480:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80114d8 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8011484:	ee27 7b06 	vmul.f64	d7, d7, d6
 8011488:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80114f8 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 801148c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8011490:	ed9f 5b15 	vldr	d5, [pc, #84]	; 80114e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8011494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011498:	ee37 7b07 	vadd.f64	d7, d7, d7
 801149c:	4a1c      	ldr	r2, [pc, #112]	; (8011510 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	00db      	lsls	r3, r3, #3
 80114a2:	4413      	add	r3, r2
 80114a4:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 80114a8:	4a18      	ldr	r2, [pc, #96]	; (801150c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	2100      	movs	r1, #0
 80114ae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	3301      	adds	r3, #1
 80114b6:	60fb      	str	r3, [r7, #12]
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	2b05      	cmp	r3, #5
 80114bc:	f77f af44 	ble.w	8011348 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		need_control = true;
 80114c0:	4b14      	ldr	r3, [pc, #80]	; (8011514 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80114c2:	2201      	movs	r2, #1
 80114c4:	701a      	strb	r2, [r3, #0]
	}
}
 80114c6:	bf00      	nop
 80114c8:	3714      	adds	r7, #20
 80114ca:	46bd      	mov	sp, r7
 80114cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d0:	4770      	bx	lr
 80114d2:	bf00      	nop
 80114d4:	f3af 8000 	nop.w
 80114d8:	4d12d84a 	.word	0x4d12d84a
 80114dc:	400921fb 	.word	0x400921fb
 80114e0:	00000000 	.word	0x00000000
 80114e4:	40d0e000 	.word	0x40d0e000
 80114e8:	47ae147b 	.word	0x47ae147b
 80114ec:	3f847ae1 	.word	0x3f847ae1
 80114f0:	00000000 	.word	0x00000000
 80114f4:	40b67c00 	.word	0x40b67c00
 80114f8:	00000000 	.word	0x00000000
 80114fc:	405cc000 	.word	0x405cc000
 8011500:	240006a0 	.word	0x240006a0
 8011504:	24000218 	.word	0x24000218
 8011508:	24000278 	.word	0x24000278
 801150c:	24000260 	.word	0x24000260
 8011510:	24000230 	.word	0x24000230
 8011514:	24000006 	.word	0x24000006

08011518 <Joint_controller>:


void Joint_controller(bool homing, creal_T* G_q_vector){
 8011518:	b590      	push	{r4, r7, lr}
 801151a:	b097      	sub	sp, #92	; 0x5c
 801151c:	af00      	add	r7, sp, #0
 801151e:	4603      	mov	r3, r0
 8011520:	6039      	str	r1, [r7, #0]
 8011522:	71fb      	strb	r3, [r7, #7]
	int k;
	int PWM_val [6] = {0};
 8011524:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8011528:	2200      	movs	r2, #0
 801152a:	601a      	str	r2, [r3, #0]
 801152c:	605a      	str	r2, [r3, #4]
 801152e:	609a      	str	r2, [r3, #8]
 8011530:	60da      	str	r2, [r3, #12]
 8011532:	611a      	str	r2, [r3, #16]
 8011534:	615a      	str	r2, [r3, #20]
	double G_q_r [6] = {0};
 8011536:	f107 0308 	add.w	r3, r7, #8
 801153a:	2230      	movs	r2, #48	; 0x30
 801153c:	2100      	movs	r1, #0
 801153e:	4618      	mov	r0, r3
 8011540:	f00d f8d6 	bl	801e6f0 <memset>
	G_q(G_CONSTANT, current_angle[2], current_angle[3], current_angle[4], current_angle[5], G_q_vector);
 8011544:	4bba      	ldr	r3, [pc, #744]	; (8011830 <Joint_controller+0x318>)
 8011546:	ed93 7b04 	vldr	d7, [r3, #16]
 801154a:	4bb9      	ldr	r3, [pc, #740]	; (8011830 <Joint_controller+0x318>)
 801154c:	ed93 6b06 	vldr	d6, [r3, #24]
 8011550:	4bb7      	ldr	r3, [pc, #732]	; (8011830 <Joint_controller+0x318>)
 8011552:	ed93 5b08 	vldr	d5, [r3, #32]
 8011556:	4bb6      	ldr	r3, [pc, #728]	; (8011830 <Joint_controller+0x318>)
 8011558:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 801155c:	6838      	ldr	r0, [r7, #0]
 801155e:	eeb0 3b45 	vmov.f64	d3, d5
 8011562:	eeb0 2b46 	vmov.f64	d2, d6
 8011566:	eeb0 1b47 	vmov.f64	d1, d7
 801156a:	ed9f 0bad 	vldr	d0, [pc, #692]	; 8011820 <Joint_controller+0x308>
 801156e:	f7ef f83b 	bl	80005e8 <G_q>
	for (k = 0; k < NUM_JOINTS; k++){
 8011572:	2300      	movs	r3, #0
 8011574:	657b      	str	r3, [r7, #84]	; 0x54
 8011576:	e13a      	b.n	80117ee <Joint_controller+0x2d6>
		//set duty cycle with PD+Gravity control
		G_q_r[k] = (double)G_q_vector[k].re;
 8011578:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801157a:	011b      	lsls	r3, r3, #4
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	4413      	add	r3, r2
 8011580:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011584:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011586:	00d2      	lsls	r2, r2, #3
 8011588:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801158c:	440a      	add	r2, r1
 801158e:	3a50      	subs	r2, #80	; 0x50
 8011590:	e9c2 3400 	strd	r3, r4, [r2]
		backemf[k] = joint_speed[k] * V_CONSTANT[k];
 8011594:	4aa7      	ldr	r2, [pc, #668]	; (8011834 <Joint_controller+0x31c>)
 8011596:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011598:	00db      	lsls	r3, r3, #3
 801159a:	4413      	add	r3, r2
 801159c:	ed93 6b00 	vldr	d6, [r3]
 80115a0:	4aa5      	ldr	r2, [pc, #660]	; (8011838 <Joint_controller+0x320>)
 80115a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115a4:	00db      	lsls	r3, r3, #3
 80115a6:	4413      	add	r3, r2
 80115a8:	ed93 7b00 	vldr	d7, [r3]
 80115ac:	ee26 7b07 	vmul.f64	d7, d6, d7
 80115b0:	4aa2      	ldr	r2, [pc, #648]	; (801183c <Joint_controller+0x324>)
 80115b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115b4:	00db      	lsls	r3, r3, #3
 80115b6:	4413      	add	r3, r2
 80115b8:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] *= 1024;
 80115bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115be:	00db      	lsls	r3, r3, #3
 80115c0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80115c4:	4413      	add	r3, r2
 80115c6:	3b50      	subs	r3, #80	; 0x50
 80115c8:	ed93 7b00 	vldr	d7, [r3]
 80115cc:	ed9f 6b96 	vldr	d6, [pc, #600]	; 8011828 <Joint_controller+0x310>
 80115d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80115d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115d6:	00db      	lsls	r3, r3, #3
 80115d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80115dc:	4413      	add	r3, r2
 80115de:	3b50      	subs	r3, #80	; 0x50
 80115e0:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] /= (12.0 - backemf[k])/RESISTANCE[k]*T_CONSTANT[k];
 80115e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115e6:	00db      	lsls	r3, r3, #3
 80115e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80115ec:	4413      	add	r3, r2
 80115ee:	3b50      	subs	r3, #80	; 0x50
 80115f0:	ed93 5b00 	vldr	d5, [r3]
 80115f4:	4a91      	ldr	r2, [pc, #580]	; (801183c <Joint_controller+0x324>)
 80115f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115f8:	00db      	lsls	r3, r3, #3
 80115fa:	4413      	add	r3, r2
 80115fc:	ed93 7b00 	vldr	d7, [r3]
 8011600:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8011604:	ee36 4b47 	vsub.f64	d4, d6, d7
 8011608:	4a8d      	ldr	r2, [pc, #564]	; (8011840 <Joint_controller+0x328>)
 801160a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801160c:	00db      	lsls	r3, r3, #3
 801160e:	4413      	add	r3, r2
 8011610:	ed93 7b00 	vldr	d7, [r3]
 8011614:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8011618:	4a8a      	ldr	r2, [pc, #552]	; (8011844 <Joint_controller+0x32c>)
 801161a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801161c:	00db      	lsls	r3, r3, #3
 801161e:	4413      	add	r3, r2
 8011620:	ed93 7b00 	vldr	d7, [r3]
 8011624:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011628:	ee85 7b06 	vdiv.f64	d7, d5, d6
 801162c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801162e:	00db      	lsls	r3, r3, #3
 8011630:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011634:	4413      	add	r3, r2
 8011636:	3b50      	subs	r3, #80	; 0x50
 8011638:	ed83 7b00 	vstr	d7, [r3]
		PWM_val[k] = G_q_r[k] + K_P[k] * (desired_pos[k] - current_angle[k]) - K_V[k] * joint_speed[k];
 801163c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801163e:	00db      	lsls	r3, r3, #3
 8011640:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011644:	4413      	add	r3, r2
 8011646:	3b50      	subs	r3, #80	; 0x50
 8011648:	ed93 6b00 	vldr	d6, [r3]
 801164c:	4a7e      	ldr	r2, [pc, #504]	; (8011848 <Joint_controller+0x330>)
 801164e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011654:	ee07 3a90 	vmov	s15, r3
 8011658:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801165c:	4a7b      	ldr	r2, [pc, #492]	; (801184c <Joint_controller+0x334>)
 801165e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011660:	00db      	lsls	r3, r3, #3
 8011662:	4413      	add	r3, r2
 8011664:	ed93 4b00 	vldr	d4, [r3]
 8011668:	4a71      	ldr	r2, [pc, #452]	; (8011830 <Joint_controller+0x318>)
 801166a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801166c:	00db      	lsls	r3, r3, #3
 801166e:	4413      	add	r3, r2
 8011670:	ed93 7b00 	vldr	d7, [r3]
 8011674:	ee34 7b47 	vsub.f64	d7, d4, d7
 8011678:	ee25 7b07 	vmul.f64	d7, d5, d7
 801167c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011680:	4a73      	ldr	r2, [pc, #460]	; (8011850 <Joint_controller+0x338>)
 8011682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011688:	ee07 3a90 	vmov	s15, r3
 801168c:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8011690:	4a68      	ldr	r2, [pc, #416]	; (8011834 <Joint_controller+0x31c>)
 8011692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011694:	00db      	lsls	r3, r3, #3
 8011696:	4413      	add	r3, r2
 8011698:	ed93 7b00 	vldr	d7, [r3]
 801169c:	ee25 7b07 	vmul.f64	d7, d5, d7
 80116a0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80116a4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80116a8:	ee17 2a90 	vmov	r2, s15
 80116ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116ae:	009b      	lsls	r3, r3, #2
 80116b0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80116b4:	440b      	add	r3, r1
 80116b6:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (PWM_val[k] > 1024){
 80116ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116bc:	009b      	lsls	r3, r3, #2
 80116be:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80116c2:	4413      	add	r3, r2
 80116c4:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80116c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80116cc:	dd09      	ble.n	80116e2 <Joint_controller+0x1ca>
			PWM_val[k] = 1024;
 80116ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116d0:	009b      	lsls	r3, r3, #2
 80116d2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80116d6:	4413      	add	r3, r2
 80116d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80116dc:	f843 2c1c 	str.w	r2, [r3, #-28]
 80116e0:	e011      	b.n	8011706 <Joint_controller+0x1ee>
		}
		else if (PWM_val[k] < -1024){
 80116e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116e4:	009b      	lsls	r3, r3, #2
 80116e6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80116ea:	4413      	add	r3, r2
 80116ec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80116f0:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 80116f4:	da07      	bge.n	8011706 <Joint_controller+0x1ee>
			PWM_val[k] = -1024;
 80116f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f8:	009b      	lsls	r3, r3, #2
 80116fa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80116fe:	4413      	add	r3, r2
 8011700:	4a54      	ldr	r2, [pc, #336]	; (8011854 <Joint_controller+0x33c>)
 8011702:	f843 2c1c 	str.w	r2, [r3, #-28]
		}

		//set directions
		if (PWM_val[k] < 0){
 8011706:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011708:	009b      	lsls	r3, r3, #2
 801170a:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801170e:	4413      	add	r3, r2
 8011710:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8011714:	2b00      	cmp	r3, #0
 8011716:	da29      	bge.n	801176c <Joint_controller+0x254>
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 0);
 8011718:	4a4f      	ldr	r2, [pc, #316]	; (8011858 <Joint_controller+0x340>)
 801171a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801171c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011720:	4a4d      	ldr	r2, [pc, #308]	; (8011858 <Joint_controller+0x340>)
 8011722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011724:	00db      	lsls	r3, r3, #3
 8011726:	4413      	add	r3, r2
 8011728:	889b      	ldrh	r3, [r3, #4]
 801172a:	2200      	movs	r2, #0
 801172c:	4619      	mov	r1, r3
 801172e:	f002 f907 	bl	8013940 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 1);
 8011732:	4a4a      	ldr	r2, [pc, #296]	; (801185c <Joint_controller+0x344>)
 8011734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011736:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801173a:	4a48      	ldr	r2, [pc, #288]	; (801185c <Joint_controller+0x344>)
 801173c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801173e:	00db      	lsls	r3, r3, #3
 8011740:	4413      	add	r3, r2
 8011742:	889b      	ldrh	r3, [r3, #4]
 8011744:	2201      	movs	r2, #1
 8011746:	4619      	mov	r1, r3
 8011748:	f002 f8fa 	bl	8013940 <HAL_GPIO_WritePin>
			PWM_val[k] = 0-PWM_val[k];
 801174c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011754:	4413      	add	r3, r2
 8011756:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 801175a:	425a      	negs	r2, r3
 801175c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011764:	440b      	add	r3, r1
 8011766:	f843 2c1c 	str.w	r2, [r3, #-28]
 801176a:	e03d      	b.n	80117e8 <Joint_controller+0x2d0>
		}
		else if (PWM_val[k] > 0){
 801176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801176e:	009b      	lsls	r3, r3, #2
 8011770:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011774:	4413      	add	r3, r2
 8011776:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 801177a:	2b00      	cmp	r3, #0
 801177c:	dd1a      	ble.n	80117b4 <Joint_controller+0x29c>
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 1);
 801177e:	4a36      	ldr	r2, [pc, #216]	; (8011858 <Joint_controller+0x340>)
 8011780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011782:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011786:	4a34      	ldr	r2, [pc, #208]	; (8011858 <Joint_controller+0x340>)
 8011788:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801178a:	00db      	lsls	r3, r3, #3
 801178c:	4413      	add	r3, r2
 801178e:	889b      	ldrh	r3, [r3, #4]
 8011790:	2201      	movs	r2, #1
 8011792:	4619      	mov	r1, r3
 8011794:	f002 f8d4 	bl	8013940 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 0);
 8011798:	4a30      	ldr	r2, [pc, #192]	; (801185c <Joint_controller+0x344>)
 801179a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801179c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80117a0:	4a2e      	ldr	r2, [pc, #184]	; (801185c <Joint_controller+0x344>)
 80117a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117a4:	00db      	lsls	r3, r3, #3
 80117a6:	4413      	add	r3, r2
 80117a8:	889b      	ldrh	r3, [r3, #4]
 80117aa:	2200      	movs	r2, #0
 80117ac:	4619      	mov	r1, r3
 80117ae:	f002 f8c7 	bl	8013940 <HAL_GPIO_WritePin>
 80117b2:	e019      	b.n	80117e8 <Joint_controller+0x2d0>
		}
		else{
			HAL_GPIO_WritePin(Driver_P[k].port, Driver_P[k].pin_num, 0);
 80117b4:	4a28      	ldr	r2, [pc, #160]	; (8011858 <Joint_controller+0x340>)
 80117b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117b8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80117bc:	4a26      	ldr	r2, [pc, #152]	; (8011858 <Joint_controller+0x340>)
 80117be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117c0:	00db      	lsls	r3, r3, #3
 80117c2:	4413      	add	r3, r2
 80117c4:	889b      	ldrh	r3, [r3, #4]
 80117c6:	2200      	movs	r2, #0
 80117c8:	4619      	mov	r1, r3
 80117ca:	f002 f8b9 	bl	8013940 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Driver_N[k].port, Driver_N[k].pin_num, 0);
 80117ce:	4a23      	ldr	r2, [pc, #140]	; (801185c <Joint_controller+0x344>)
 80117d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117d2:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80117d6:	4a21      	ldr	r2, [pc, #132]	; (801185c <Joint_controller+0x344>)
 80117d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	4413      	add	r3, r2
 80117de:	889b      	ldrh	r3, [r3, #4]
 80117e0:	2200      	movs	r2, #0
 80117e2:	4619      	mov	r1, r3
 80117e4:	f002 f8ac 	bl	8013940 <HAL_GPIO_WritePin>
	for (k = 0; k < NUM_JOINTS; k++){
 80117e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117ea:	3301      	adds	r3, #1
 80117ec:	657b      	str	r3, [r7, #84]	; 0x54
 80117ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80117f0:	2b05      	cmp	r3, #5
 80117f2:	f77f aec1 	ble.w	8011578 <Joint_controller+0x60>
		}

	}
	PWM1_change_duty_cycle(PWM_val[0], PWM_val[1]);
 80117f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80117fa:	4611      	mov	r1, r2
 80117fc:	4618      	mov	r0, r3
 80117fe:	f7ff fd23 	bl	8011248 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(PWM_val[2]);
 8011802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011804:	4618      	mov	r0, r3
 8011806:	f7ff fd65 	bl	80112d4 <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(PWM_val[3], PWM_val[4], PWM_val[5]);
 801180a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801180c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801180e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011810:	4618      	mov	r0, r3
 8011812:	f7ff fcc7 	bl	80111a4 <PWM3_change_duty_cycle>
}
 8011816:	bf00      	nop
 8011818:	375c      	adds	r7, #92	; 0x5c
 801181a:	46bd      	mov	sp, r7
 801181c:	bd90      	pop	{r4, r7, pc}
 801181e:	bf00      	nop
 8011820:	51eb851f 	.word	0x51eb851f
 8011824:	c0239eb8 	.word	0xc0239eb8
 8011828:	00000000 	.word	0x00000000
 801182c:	40900000 	.word	0x40900000
 8011830:	24000278 	.word	0x24000278
 8011834:	24000230 	.word	0x24000230
 8011838:	0801f958 	.word	0x0801f958
 801183c:	240002a8 	.word	0x240002a8
 8011840:	0801f9b8 	.word	0x0801f9b8
 8011844:	0801f988 	.word	0x0801f988
 8011848:	0801f924 	.word	0x0801f924
 801184c:	240002d8 	.word	0x240002d8
 8011850:	0801f93c 	.word	0x0801f93c
 8011854:	fffffc00 	.word	0xfffffc00
 8011858:	24000348 	.word	0x24000348
 801185c:	240004d4 	.word	0x240004d4

08011860 <homing>:

void homing (void){
 8011860:	b480      	push	{r7}
 8011862:	af00      	add	r7, sp, #0
		current_angle[g] = 0;
		motor_steps[g] = 0;
	}*/
	//after everything is finished for homing it will set all coords to 0

	start_state = false;
 8011864:	4b03      	ldr	r3, [pc, #12]	; (8011874 <homing+0x14>)
 8011866:	2200      	movs	r2, #0
 8011868:	701a      	strb	r2, [r3, #0]

}
 801186a:	bf00      	nop
 801186c:	46bd      	mov	sp, r7
 801186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011872:	4770      	bx	lr
 8011874:	24000008 	.word	0x24000008

08011878 <StartUp>:
void StartUp(void){
 8011878:	b580      	push	{r7, lr}
 801187a:	af00      	add	r7, sp, #0

	//spin motors
	PWM1_change_duty_cycle(500, 500);
 801187c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011880:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8011884:	f7ff fce0 	bl	8011248 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(500);
 8011888:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801188c:	f7ff fd22 	bl	80112d4 <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(500, 500, 0);
 8011890:	2200      	movs	r2, #0
 8011892:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8011896:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801189a:	f7ff fc83 	bl	80111a4 <PWM3_change_duty_cycle>
}
 801189e:	bf00      	nop
 80118a0:	bd80      	pop	{r7, pc}
	...

080118a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80118a4:	b590      	push	{r4, r7, lr}
 80118a6:	b0b3      	sub	sp, #204	; 0xcc
 80118a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 80118aa:	4ba4      	ldr	r3, [pc, #656]	; (8011b3c <main+0x298>)
 80118ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char* EOL = "]\n\r";
 80118b0:	4ba3      	ldr	r3, [pc, #652]	; (8011b40 <main+0x29c>)
 80118b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char* EOJ = ", ";
 80118b6:	4ba3      	ldr	r3, [pc, #652]	; (8011b44 <main+0x2a0>)
 80118b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char* timer_tester = "timed\n\r";
 80118bc:	4ba2      	ldr	r3, [pc, #648]	; (8011b48 <main+0x2a4>)
 80118be:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t  stop;
	uint32_t  delta;
	creal_T G_q_vector[6];

	//setting up pins
	set_up_encoder_pins();
 80118c2:	f7ff fbab 	bl	801101c <set_up_encoder_pins>
	set_up_driver_pins();
 80118c6:	f7ff fc09 	bl	80110dc <set_up_driver_pins>

    for(i = 0; i < NUM_JOINTS; i++){
 80118ca:	2300      	movs	r3, #0
 80118cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80118d0:	e024      	b.n	801191c <main+0x78>
    	val_encoderA [i] = HIGH;
 80118d2:	4a9e      	ldr	r2, [pc, #632]	; (8011b4c <main+0x2a8>)
 80118d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80118d8:	2101      	movs	r1, #1
 80118da:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 80118de:	4a9c      	ldr	r2, [pc, #624]	; (8011b50 <main+0x2ac>)
 80118e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80118e4:	2101      	movs	r1, #1
 80118e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 80118ea:	4a9a      	ldr	r2, [pc, #616]	; (8011b54 <main+0x2b0>)
 80118ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80118f0:	4413      	add	r3, r2
 80118f2:	2201      	movs	r2, #1
 80118f4:	701a      	strb	r2, [r3, #0]
    	desired_pos[i] = test_pos[i];
 80118f6:	4a98      	ldr	r2, [pc, #608]	; (8011b58 <main+0x2b4>)
 80118f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80118fc:	00db      	lsls	r3, r3, #3
 80118fe:	4413      	add	r3, r2
 8011900:	e9d3 3400 	ldrd	r3, r4, [r3]
 8011904:	4995      	ldr	r1, [pc, #596]	; (8011b5c <main+0x2b8>)
 8011906:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801190a:	00d2      	lsls	r2, r2, #3
 801190c:	440a      	add	r2, r1
 801190e:	e9c2 3400 	strd	r3, r4, [r2]
    for(i = 0; i < NUM_JOINTS; i++){
 8011912:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011916:	3301      	adds	r3, #1
 8011918:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801191c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011920:	2b05      	cmp	r3, #5
 8011922:	ddd6      	ble.n	80118d2 <main+0x2e>
    }
    Homing.home_set = false;
 8011924:	4b8e      	ldr	r3, [pc, #568]	; (8011b60 <main+0x2bc>)
 8011926:	2200      	movs	r2, #0
 8011928:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    //for CPU cycle counts
    if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 801192c:	4b8d      	ldr	r3, [pc, #564]	; (8011b64 <main+0x2c0>)
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d00e      	beq.n	8011952 <main+0xae>

        ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8011934:	4b8c      	ldr	r3, [pc, #560]	; (8011b68 <main+0x2c4>)
 8011936:	681b      	ldr	r3, [r3, #0]
 8011938:	4a8b      	ldr	r2, [pc, #556]	; (8011b68 <main+0x2c4>)
 801193a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801193e:	6013      	str	r3, [r2, #0]

        ARM_CM_DWT_CYCCNT  = 0;
 8011940:	4b8a      	ldr	r3, [pc, #552]	; (8011b6c <main+0x2c8>)
 8011942:	2200      	movs	r2, #0
 8011944:	601a      	str	r2, [r3, #0]

        ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8011946:	4b87      	ldr	r3, [pc, #540]	; (8011b64 <main+0x2c0>)
 8011948:	681b      	ldr	r3, [r3, #0]
 801194a:	4a86      	ldr	r2, [pc, #536]	; (8011b64 <main+0x2c0>)
 801194c:	f043 0301 	orr.w	r3, r3, #1
 8011950:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8011952:	f001 fa19 	bl	8012d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8011956:	f000 f919 	bl	8011b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801195a:	f000 fc71 	bl	8012240 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 801195e:	f000 fc23 	bl	80121a8 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8011962:	f000 f9d1 	bl	8011d08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8011966:	f000 fa6b 	bl	8011e40 <MX_TIM2_Init>
  MX_TIM3_Init();
 801196a:	f000 fac3 	bl	8011ef4 <MX_TIM3_Init>
  MX_TIM5_Init();
 801196e:	f000 fb33 	bl	8011fd8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8011972:	f000 fbcd 	bl	8012110 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8011976:	f00c f939 	bl	801dbec <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 801197a:	f000 fb89 	bl	8012090 <MX_TIM7_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  start_up = !(homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 801197e:	4b7c      	ldr	r3, [pc, #496]	; (8011b70 <main+0x2cc>)
 8011980:	781b      	ldrb	r3, [r3, #0]
 8011982:	f083 0301 	eor.w	r3, r3, #1
 8011986:	b2db      	uxtb	r3, r3
 8011988:	2b00      	cmp	r3, #0
 801198a:	d11b      	bne.n	80119c4 <main+0x120>
 801198c:	4b78      	ldr	r3, [pc, #480]	; (8011b70 <main+0x2cc>)
 801198e:	785b      	ldrb	r3, [r3, #1]
 8011990:	f083 0301 	eor.w	r3, r3, #1
 8011994:	b2db      	uxtb	r3, r3
 8011996:	2b00      	cmp	r3, #0
 8011998:	d114      	bne.n	80119c4 <main+0x120>
 801199a:	4b75      	ldr	r3, [pc, #468]	; (8011b70 <main+0x2cc>)
 801199c:	789b      	ldrb	r3, [r3, #2]
 801199e:	f083 0301 	eor.w	r3, r3, #1
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d10d      	bne.n	80119c4 <main+0x120>
 80119a8:	4b71      	ldr	r3, [pc, #452]	; (8011b70 <main+0x2cc>)
 80119aa:	78db      	ldrb	r3, [r3, #3]
 80119ac:	f083 0301 	eor.w	r3, r3, #1
 80119b0:	b2db      	uxtb	r3, r3
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d106      	bne.n	80119c4 <main+0x120>
 80119b6:	4b6e      	ldr	r3, [pc, #440]	; (8011b70 <main+0x2cc>)
 80119b8:	791b      	ldrb	r3, [r3, #4]
 80119ba:	f083 0301 	eor.w	r3, r3, #1
 80119be:	b2db      	uxtb	r3, r3
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d005      	beq.n	80119d0 <main+0x12c>
 80119c4:	4b6b      	ldr	r3, [pc, #428]	; (8011b74 <main+0x2d0>)
 80119c6:	781b      	ldrb	r3, [r3, #0]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d001      	beq.n	80119d0 <main+0x12c>
 80119cc:	2301      	movs	r3, #1
 80119ce:	e000      	b.n	80119d2 <main+0x12e>
 80119d0:	2300      	movs	r3, #0
 80119d2:	f003 0301 	and.w	r3, r3, #1
 80119d6:	b2da      	uxtb	r2, r3
 80119d8:	4b67      	ldr	r3, [pc, #412]	; (8011b78 <main+0x2d4>)
 80119da:	701a      	strb	r2, [r3, #0]
	  Homing.home_set = (homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 80119dc:	4b64      	ldr	r3, [pc, #400]	; (8011b70 <main+0x2cc>)
 80119de:	781b      	ldrb	r3, [r3, #0]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d015      	beq.n	8011a10 <main+0x16c>
 80119e4:	4b62      	ldr	r3, [pc, #392]	; (8011b70 <main+0x2cc>)
 80119e6:	785b      	ldrb	r3, [r3, #1]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d011      	beq.n	8011a10 <main+0x16c>
 80119ec:	4b60      	ldr	r3, [pc, #384]	; (8011b70 <main+0x2cc>)
 80119ee:	789b      	ldrb	r3, [r3, #2]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d00d      	beq.n	8011a10 <main+0x16c>
 80119f4:	4b5e      	ldr	r3, [pc, #376]	; (8011b70 <main+0x2cc>)
 80119f6:	78db      	ldrb	r3, [r3, #3]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d009      	beq.n	8011a10 <main+0x16c>
 80119fc:	4b5c      	ldr	r3, [pc, #368]	; (8011b70 <main+0x2cc>)
 80119fe:	791b      	ldrb	r3, [r3, #4]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d005      	beq.n	8011a10 <main+0x16c>
 8011a04:	4b5b      	ldr	r3, [pc, #364]	; (8011b74 <main+0x2d0>)
 8011a06:	781b      	ldrb	r3, [r3, #0]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d001      	beq.n	8011a10 <main+0x16c>
 8011a0c:	2301      	movs	r3, #1
 8011a0e:	e000      	b.n	8011a12 <main+0x16e>
 8011a10:	2300      	movs	r3, #0
 8011a12:	f003 0301 	and.w	r3, r3, #1
 8011a16:	b2da      	uxtb	r2, r3
 8011a18:	4b51      	ldr	r3, [pc, #324]	; (8011b60 <main+0x2bc>)
 8011a1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	  if (Homing.home_set){
 8011a1e:	4b50      	ldr	r3, [pc, #320]	; (8011b60 <main+0x2bc>)
 8011a20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d002      	beq.n	8011a2e <main+0x18a>
		  homing();
 8011a28:	f7ff ff1a 	bl	8011860 <homing>
 8011a2c:	e005      	b.n	8011a3a <main+0x196>

	  }
	  else if (start_up){
 8011a2e:	4b52      	ldr	r3, [pc, #328]	; (8011b78 <main+0x2d4>)
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d001      	beq.n	8011a3a <main+0x196>
		  StartUp();
 8011a36:	f7ff ff1f 	bl	8011878 <StartUp>

	  }
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8011a3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8011a3e:	484f      	ldr	r0, [pc, #316]	; (8011b7c <main+0x2d8>)
 8011a40:	f001 ff66 	bl	8013910 <HAL_GPIO_ReadPin>
 8011a44:	4603      	mov	r3, r0
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d05a      	beq.n	8011b00 <main+0x25c>
		  itoa(motor_steps[0], one_motor, 10);
 8011a4a:	4b4d      	ldr	r3, [pc, #308]	; (8011b80 <main+0x2dc>)
 8011a4c:	681b      	ldr	r3, [r3, #0]
 8011a4e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8011a52:	220a      	movs	r2, #10
 8011a54:	4618      	mov	r0, r3
 8011a56:	f00c fe39 	bl	801e6cc <itoa>
		  strcpy(print_string, one_motor);
 8011a5a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8011a5e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a62:	4611      	mov	r1, r2
 8011a64:	4618      	mov	r0, r3
 8011a66:	f00c ff12 	bl	801e88e <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a70:	e01e      	b.n	8011ab0 <main+0x20c>
			  itoa(motor_steps[i], one_motor, 10);
 8011a72:	4a43      	ldr	r2, [pc, #268]	; (8011b80 <main+0x2dc>)
 8011a74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011a7c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8011a80:	220a      	movs	r2, #10
 8011a82:	4618      	mov	r0, r3
 8011a84:	f00c fe22 	bl	801e6cc <itoa>
			  strcat(print_string, EOJ);
 8011a88:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a8c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8011a90:	4618      	mov	r0, r3
 8011a92:	f00c feed 	bl	801e870 <strcat>
			  strcat(print_string, one_motor);
 8011a96:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8011a9a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011a9e:	4611      	mov	r1, r2
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	f00c fee5 	bl	801e870 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 8011aa6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011aaa:	3301      	adds	r3, #1
 8011aac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011ab0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011ab4:	2b05      	cmp	r3, #5
 8011ab6:	dddc      	ble.n	8011a72 <main+0x1ce>
		  }
		  strcat(print_string, EOL);
 8011ab8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011abc:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f00c fed5 	bl	801e870 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 8011ac6:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8011aca:	f7ee fc05 	bl	80002d8 <strlen>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	482b      	ldr	r0, [pc, #172]	; (8011b84 <main+0x2e0>)
 8011ad6:	f00c f981 	bl	801dddc <CDC_Transmit_FS>
		  HAL_Delay(2);
 8011ada:	2002      	movs	r0, #2
 8011adc:	f001 f9e6 	bl	8012eac <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8011ae0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011ae4:	4618      	mov	r0, r3
 8011ae6:	f7ee fbf7 	bl	80002d8 <strlen>
 8011aea:	4603      	mov	r3, r0
 8011aec:	b29a      	uxth	r2, r3
 8011aee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8011af2:	4611      	mov	r1, r2
 8011af4:	4618      	mov	r0, r3
 8011af6:	f00c f971 	bl	801dddc <CDC_Transmit_FS>
		  HAL_Delay(2);
 8011afa:	2002      	movs	r0, #2
 8011afc:	f001 f9d6 	bl	8012eac <HAL_Delay>
	  }
	  if (need_control){
 8011b00:	4b21      	ldr	r3, [pc, #132]	; (8011b88 <main+0x2e4>)
 8011b02:	781b      	ldrb	r3, [r3, #0]
 8011b04:	b2db      	uxtb	r3, r3
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	f43f af39 	beq.w	801197e <main+0xda>
		  start = ARM_CM_DWT_CYCCNT;
 8011b0c:	4b17      	ldr	r3, [pc, #92]	; (8011b6c <main+0x2c8>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		  Joint_controller(false, G_q_vector);
 8011b14:	463b      	mov	r3, r7
 8011b16:	4619      	mov	r1, r3
 8011b18:	2000      	movs	r0, #0
 8011b1a:	f7ff fcfd 	bl	8011518 <Joint_controller>
		  stop  = ARM_CM_DWT_CYCCNT;
 8011b1e:	4b13      	ldr	r3, [pc, #76]	; (8011b6c <main+0x2c8>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  delta = stop - start;
 8011b26:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8011b2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011b2e:	1ad3      	subs	r3, r2, r3
 8011b30:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		  need_control = false;
 8011b34:	4b14      	ldr	r3, [pc, #80]	; (8011b88 <main+0x2e4>)
 8011b36:	2200      	movs	r2, #0
 8011b38:	701a      	strb	r2, [r3, #0]
	  start_up = !(homing_state[0] && homing_state[1] && homing_state[2] && homing_state[3] && homing_state[4]) && start_state;
 8011b3a:	e720      	b.n	801197e <main+0xda>
 8011b3c:	0801f898 	.word	0x0801f898
 8011b40:	0801f8ac 	.word	0x0801f8ac
 8011b44:	0801f8b0 	.word	0x0801f8b0
 8011b48:	0801f8b4 	.word	0x0801f8b4
 8011b4c:	24000404 	.word	0x24000404
 8011b50:	24000544 	.word	0x24000544
 8011b54:	24000000 	.word	0x24000000
 8011b58:	0801f9e8 	.word	0x0801f9e8
 8011b5c:	240002d8 	.word	0x240002d8
 8011b60:	24000628 	.word	0x24000628
 8011b64:	e0001000 	.word	0xe0001000
 8011b68:	e000edfc 	.word	0xe000edfc
 8011b6c:	e0001004 	.word	0xe0001004
 8011b70:	24000308 	.word	0x24000308
 8011b74:	24000008 	.word	0x24000008
 8011b78:	24000007 	.word	0x24000007
 8011b7c:	58020800 	.word	0x58020800
 8011b80:	24000218 	.word	0x24000218
 8011b84:	0801f8bc 	.word	0x0801f8bc
 8011b88:	24000006 	.word	0x24000006

08011b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b0cc      	sub	sp, #304	; 0x130
 8011b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8011b92:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011b96:	224c      	movs	r2, #76	; 0x4c
 8011b98:	2100      	movs	r1, #0
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	f00c fda8 	bl	801e6f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8011ba0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011ba4:	2220      	movs	r2, #32
 8011ba6:	2100      	movs	r1, #0
 8011ba8:	4618      	mov	r0, r3
 8011baa:	f00c fda1 	bl	801e6f0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011bae:	f107 0308 	add.w	r3, r7, #8
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	23bc      	movs	r3, #188	; 0xbc
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	2100      	movs	r1, #0
 8011bba:	f00c fd99 	bl	801e6f0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8011bbe:	2002      	movs	r0, #2
 8011bc0:	f003 f8cc 	bl	8014d5c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8011bc4:	1d3b      	adds	r3, r7, #4
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	601a      	str	r2, [r3, #0]
 8011bca:	4b4c      	ldr	r3, [pc, #304]	; (8011cfc <SystemClock_Config+0x170>)
 8011bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bce:	4a4b      	ldr	r2, [pc, #300]	; (8011cfc <SystemClock_Config+0x170>)
 8011bd0:	f023 0301 	bic.w	r3, r3, #1
 8011bd4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8011bd6:	4b49      	ldr	r3, [pc, #292]	; (8011cfc <SystemClock_Config+0x170>)
 8011bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bda:	f003 0201 	and.w	r2, r3, #1
 8011bde:	1d3b      	adds	r3, r7, #4
 8011be0:	601a      	str	r2, [r3, #0]
 8011be2:	4b47      	ldr	r3, [pc, #284]	; (8011d00 <SystemClock_Config+0x174>)
 8011be4:	699b      	ldr	r3, [r3, #24]
 8011be6:	4a46      	ldr	r2, [pc, #280]	; (8011d00 <SystemClock_Config+0x174>)
 8011be8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011bec:	6193      	str	r3, [r2, #24]
 8011bee:	4b44      	ldr	r3, [pc, #272]	; (8011d00 <SystemClock_Config+0x174>)
 8011bf0:	699b      	ldr	r3, [r3, #24]
 8011bf2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8011bf6:	1d3b      	adds	r3, r7, #4
 8011bf8:	601a      	str	r2, [r3, #0]
 8011bfa:	1d3b      	adds	r3, r7, #4
 8011bfc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8011bfe:	bf00      	nop
 8011c00:	4b3f      	ldr	r3, [pc, #252]	; (8011d00 <SystemClock_Config+0x174>)
 8011c02:	699b      	ldr	r3, [r3, #24]
 8011c04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011c08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011c0c:	d1f8      	bne.n	8011c00 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011c0e:	2301      	movs	r3, #1
 8011c10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8011c14:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8011c18:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8011c1c:	2302      	movs	r3, #2
 8011c1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011c22:	2302      	movs	r3, #2
 8011c24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8011c28:	2301      	movs	r3, #1
 8011c2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 8011c2e:	2336      	movs	r3, #54	; 0x36
 8011c30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8011c34:	2302      	movs	r3, #2
 8011c36:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8011c3a:	2309      	movs	r3, #9
 8011c3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8011c40:	2302      	movs	r3, #2
 8011c42:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8011c46:	230c      	movs	r3, #12
 8011c48:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8011c52:	2300      	movs	r3, #0
 8011c54:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8011c58:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	f003 f8c7 	bl	8014df0 <HAL_RCC_OscConfig>
 8011c62:	4603      	mov	r3, r0
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d001      	beq.n	8011c6c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8011c68:	f000 fd34 	bl	80126d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8011c6c:	233f      	movs	r3, #63	; 0x3f
 8011c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011c72:	2303      	movs	r3, #3
 8011c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8011c78:	2300      	movs	r3, #0
 8011c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8011c7e:	2300      	movs	r3, #0
 8011c80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8011c84:	2340      	movs	r3, #64	; 0x40
 8011c86:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8011c8a:	2340      	movs	r3, #64	; 0x40
 8011c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8011c90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8011c98:	2340      	movs	r3, #64	; 0x40
 8011c9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8011c9e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8011ca2:	2103      	movs	r1, #3
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f003 fc7b 	bl	80155a0 <HAL_RCC_ClockConfig>
 8011caa:	4603      	mov	r3, r0
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d001      	beq.n	8011cb4 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8011cb0:	f000 fd10 	bl	80126d4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8011cb4:	f107 0308 	add.w	r3, r7, #8
 8011cb8:	4a12      	ldr	r2, [pc, #72]	; (8011d04 <SystemClock_Config+0x178>)
 8011cba:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8011cbc:	f107 0308 	add.w	r3, r7, #8
 8011cc0:	2200      	movs	r2, #0
 8011cc2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8011cc4:	f107 0308 	add.w	r3, r7, #8
 8011cc8:	2200      	movs	r2, #0
 8011cca:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8011ccc:	f107 0308 	add.w	r3, r7, #8
 8011cd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011cd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011cd8:	f107 0308 	add.w	r3, r7, #8
 8011cdc:	4618      	mov	r0, r3
 8011cde:	f003 ffe3 	bl	8015ca8 <HAL_RCCEx_PeriphCLKConfig>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d001      	beq.n	8011cec <SystemClock_Config+0x160>
  {
    Error_Handler();
 8011ce8:	f000 fcf4 	bl	80126d4 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8011cec:	f003 f870 	bl	8014dd0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8011cf0:	bf00      	nop
 8011cf2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8011cf6:	46bd      	mov	sp, r7
 8011cf8:	bd80      	pop	{r7, pc}
 8011cfa:	bf00      	nop
 8011cfc:	58000400 	.word	0x58000400
 8011d00:	58024800 	.word	0x58024800
 8011d04:	00040003 	.word	0x00040003

08011d08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8011d08:	b580      	push	{r7, lr}
 8011d0a:	b096      	sub	sp, #88	; 0x58
 8011d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011d0e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011d12:	2200      	movs	r2, #0
 8011d14:	601a      	str	r2, [r3, #0]
 8011d16:	605a      	str	r2, [r3, #4]
 8011d18:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011d1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011d1e:	2200      	movs	r2, #0
 8011d20:	601a      	str	r2, [r3, #0]
 8011d22:	605a      	str	r2, [r3, #4]
 8011d24:	609a      	str	r2, [r3, #8]
 8011d26:	60da      	str	r2, [r3, #12]
 8011d28:	611a      	str	r2, [r3, #16]
 8011d2a:	615a      	str	r2, [r3, #20]
 8011d2c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8011d2e:	1d3b      	adds	r3, r7, #4
 8011d30:	222c      	movs	r2, #44	; 0x2c
 8011d32:	2100      	movs	r1, #0
 8011d34:	4618      	mov	r0, r3
 8011d36:	f00c fcdb 	bl	801e6f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8011d3a:	4b3f      	ldr	r3, [pc, #252]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d3c:	4a3f      	ldr	r2, [pc, #252]	; (8011e3c <MX_TIM1_Init+0x134>)
 8011d3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 8011d40:	4b3d      	ldr	r3, [pc, #244]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d42:	f240 4237 	movw	r2, #1079	; 0x437
 8011d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011d48:	4b3b      	ldr	r3, [pc, #236]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 8011d4e:	4b3a      	ldr	r3, [pc, #232]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d50:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011d56:	4b38      	ldr	r3, [pc, #224]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d58:	2200      	movs	r2, #0
 8011d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8011d5c:	4b36      	ldr	r3, [pc, #216]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d5e:	2200      	movs	r2, #0
 8011d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011d62:	4b35      	ldr	r3, [pc, #212]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d64:	2200      	movs	r2, #0
 8011d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8011d68:	4833      	ldr	r0, [pc, #204]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d6a:	f005 fae3 	bl	8017334 <HAL_TIM_PWM_Init>
 8011d6e:	4603      	mov	r3, r0
 8011d70:	2b00      	cmp	r3, #0
 8011d72:	d001      	beq.n	8011d78 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8011d74:	f000 fcae 	bl	80126d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011d78:	2300      	movs	r3, #0
 8011d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011d80:	2300      	movs	r3, #0
 8011d82:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8011d84:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8011d88:	4619      	mov	r1, r3
 8011d8a:	482b      	ldr	r0, [pc, #172]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011d8c:	f006 f944 	bl	8018018 <HAL_TIMEx_MasterConfigSynchronization>
 8011d90:	4603      	mov	r3, r0
 8011d92:	2b00      	cmp	r3, #0
 8011d94:	d001      	beq.n	8011d9a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8011d96:	f000 fc9d 	bl	80126d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011d9a:	2360      	movs	r3, #96	; 0x60
 8011d9c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8011d9e:	2300      	movs	r3, #0
 8011da0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011da2:	2300      	movs	r3, #0
 8011da4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8011da6:	2300      	movs	r3, #0
 8011da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011daa:	2300      	movs	r3, #0
 8011dac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8011dae:	2300      	movs	r3, #0
 8011db0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8011db2:	2300      	movs	r3, #0
 8011db4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011db6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011dba:	2204      	movs	r2, #4
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	481e      	ldr	r0, [pc, #120]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011dc0:	f005 fc5c 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d001      	beq.n	8011dce <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8011dca:	f000 fc83 	bl	80126d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8011dce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8011dd2:	2208      	movs	r2, #8
 8011dd4:	4619      	mov	r1, r3
 8011dd6:	4818      	ldr	r0, [pc, #96]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011dd8:	f005 fc50 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d001      	beq.n	8011de6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8011de2:	f000 fc77 	bl	80126d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8011de6:	2300      	movs	r3, #0
 8011de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8011dea:	2300      	movs	r3, #0
 8011dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8011dee:	2300      	movs	r3, #0
 8011df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8011df2:	2300      	movs	r3, #0
 8011df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8011dfa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8011e00:	2300      	movs	r3, #0
 8011e02:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8011e08:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011e0c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8011e12:	2300      	movs	r3, #0
 8011e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8011e16:	1d3b      	adds	r3, r7, #4
 8011e18:	4619      	mov	r1, r3
 8011e1a:	4807      	ldr	r0, [pc, #28]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011e1c:	f006 f984 	bl	8018128 <HAL_TIMEx_ConfigBreakDeadTime>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d001      	beq.n	8011e2a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8011e26:	f000 fc55 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8011e2a:	4803      	ldr	r0, [pc, #12]	; (8011e38 <MX_TIM1_Init+0x130>)
 8011e2c:	f000 fd02 	bl	8012834 <HAL_TIM_MspPostInit>

}
 8011e30:	bf00      	nop
 8011e32:	3758      	adds	r7, #88	; 0x58
 8011e34:	46bd      	mov	sp, r7
 8011e36:	bd80      	pop	{r7, pc}
 8011e38:	240005e8 	.word	0x240005e8
 8011e3c:	40010000 	.word	0x40010000

08011e40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8011e40:	b580      	push	{r7, lr}
 8011e42:	b08a      	sub	sp, #40	; 0x28
 8011e44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011e46:	f107 031c 	add.w	r3, r7, #28
 8011e4a:	2200      	movs	r2, #0
 8011e4c:	601a      	str	r2, [r3, #0]
 8011e4e:	605a      	str	r2, [r3, #4]
 8011e50:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011e52:	463b      	mov	r3, r7
 8011e54:	2200      	movs	r2, #0
 8011e56:	601a      	str	r2, [r3, #0]
 8011e58:	605a      	str	r2, [r3, #4]
 8011e5a:	609a      	str	r2, [r3, #8]
 8011e5c:	60da      	str	r2, [r3, #12]
 8011e5e:	611a      	str	r2, [r3, #16]
 8011e60:	615a      	str	r2, [r3, #20]
 8011e62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8011e64:	4b22      	ldr	r3, [pc, #136]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8011e6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8011e6c:	4b20      	ldr	r3, [pc, #128]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e6e:	f240 4237 	movw	r2, #1079	; 0x437
 8011e72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011e74:	4b1e      	ldr	r3, [pc, #120]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e76:	2200      	movs	r2, #0
 8011e78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 8011e7a:	4b1d      	ldr	r3, [pc, #116]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e7c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011e80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011e82:	4b1b      	ldr	r3, [pc, #108]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e84:	2200      	movs	r2, #0
 8011e86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011e88:	4b19      	ldr	r3, [pc, #100]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8011e8e:	4818      	ldr	r0, [pc, #96]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011e90:	f005 fa50 	bl	8017334 <HAL_TIM_PWM_Init>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d001      	beq.n	8011e9e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8011e9a:	f000 fc1b 	bl	80126d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8011ea6:	f107 031c 	add.w	r3, r7, #28
 8011eaa:	4619      	mov	r1, r3
 8011eac:	4810      	ldr	r0, [pc, #64]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011eae:	f006 f8b3 	bl	8018018 <HAL_TIMEx_MasterConfigSynchronization>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d001      	beq.n	8011ebc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8011eb8:	f000 fc0c 	bl	80126d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011ebc:	2360      	movs	r3, #96	; 0x60
 8011ebe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011ecc:	463b      	mov	r3, r7
 8011ece:	2200      	movs	r2, #0
 8011ed0:	4619      	mov	r1, r3
 8011ed2:	4807      	ldr	r0, [pc, #28]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011ed4:	f005 fbd2 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d001      	beq.n	8011ee2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8011ede:	f000 fbf9 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8011ee2:	4803      	ldr	r0, [pc, #12]	; (8011ef0 <MX_TIM2_Init+0xb0>)
 8011ee4:	f000 fca6 	bl	8012834 <HAL_TIM_MspPostInit>

}
 8011ee8:	bf00      	nop
 8011eea:	3728      	adds	r7, #40	; 0x28
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd80      	pop	{r7, pc}
 8011ef0:	24000660 	.word	0x24000660

08011ef4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8011ef4:	b580      	push	{r7, lr}
 8011ef6:	b08a      	sub	sp, #40	; 0x28
 8011ef8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011efa:	f107 031c 	add.w	r3, r7, #28
 8011efe:	2200      	movs	r2, #0
 8011f00:	601a      	str	r2, [r3, #0]
 8011f02:	605a      	str	r2, [r3, #4]
 8011f04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011f06:	463b      	mov	r3, r7
 8011f08:	2200      	movs	r2, #0
 8011f0a:	601a      	str	r2, [r3, #0]
 8011f0c:	605a      	str	r2, [r3, #4]
 8011f0e:	609a      	str	r2, [r3, #8]
 8011f10:	60da      	str	r2, [r3, #12]
 8011f12:	611a      	str	r2, [r3, #16]
 8011f14:	615a      	str	r2, [r3, #20]
 8011f16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8011f18:	4b2d      	ldr	r3, [pc, #180]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f1a:	4a2e      	ldr	r2, [pc, #184]	; (8011fd4 <MX_TIM3_Init+0xe0>)
 8011f1c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 8011f1e:	4b2c      	ldr	r3, [pc, #176]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f20:	f240 4237 	movw	r2, #1079	; 0x437
 8011f24:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8011f26:	4b2a      	ldr	r3, [pc, #168]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f28:	2200      	movs	r2, #0
 8011f2a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 8011f2c:	4b28      	ldr	r3, [pc, #160]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011f32:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8011f34:	4b26      	ldr	r3, [pc, #152]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f36:	2200      	movs	r2, #0
 8011f38:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8011f3a:	4b25      	ldr	r3, [pc, #148]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f3c:	2200      	movs	r2, #0
 8011f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8011f40:	4823      	ldr	r0, [pc, #140]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f42:	f005 f9f7 	bl	8017334 <HAL_TIM_PWM_Init>
 8011f46:	4603      	mov	r3, r0
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d001      	beq.n	8011f50 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8011f4c:	f000 fbc2 	bl	80126d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8011f50:	2300      	movs	r3, #0
 8011f52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8011f54:	2300      	movs	r3, #0
 8011f56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8011f58:	f107 031c 	add.w	r3, r7, #28
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	481c      	ldr	r0, [pc, #112]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f60:	f006 f85a 	bl	8018018 <HAL_TIMEx_MasterConfigSynchronization>
 8011f64:	4603      	mov	r3, r0
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d001      	beq.n	8011f6e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8011f6a:	f000 fbb3 	bl	80126d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8011f6e:	2360      	movs	r3, #96	; 0x60
 8011f70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8011f72:	2300      	movs	r3, #0
 8011f74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8011f76:	2300      	movs	r3, #0
 8011f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8011f7a:	2300      	movs	r3, #0
 8011f7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8011f7e:	463b      	mov	r3, r7
 8011f80:	2200      	movs	r2, #0
 8011f82:	4619      	mov	r1, r3
 8011f84:	4812      	ldr	r0, [pc, #72]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f86:	f005 fb79 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011f8a:	4603      	mov	r3, r0
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d001      	beq.n	8011f94 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8011f90:	f000 fba0 	bl	80126d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8011f94:	463b      	mov	r3, r7
 8011f96:	2204      	movs	r2, #4
 8011f98:	4619      	mov	r1, r3
 8011f9a:	480d      	ldr	r0, [pc, #52]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011f9c:	f005 fb6e 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d001      	beq.n	8011faa <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8011fa6:	f000 fb95 	bl	80126d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8011faa:	463b      	mov	r3, r7
 8011fac:	220c      	movs	r2, #12
 8011fae:	4619      	mov	r1, r3
 8011fb0:	4807      	ldr	r0, [pc, #28]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011fb2:	f005 fb63 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d001      	beq.n	8011fc0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8011fbc:	f000 fb8a 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8011fc0:	4803      	ldr	r0, [pc, #12]	; (8011fd0 <MX_TIM3_Init+0xdc>)
 8011fc2:	f000 fc37 	bl	8012834 <HAL_TIM_MspPostInit>

}
 8011fc6:	bf00      	nop
 8011fc8:	3728      	adds	r7, #40	; 0x28
 8011fca:	46bd      	mov	sp, r7
 8011fcc:	bd80      	pop	{r7, pc}
 8011fce:	bf00      	nop
 8011fd0:	24000504 	.word	0x24000504
 8011fd4:	40000400 	.word	0x40000400

08011fd8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8011fd8:	b580      	push	{r7, lr}
 8011fda:	b08a      	sub	sp, #40	; 0x28
 8011fdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8011fde:	f107 031c 	add.w	r3, r7, #28
 8011fe2:	2200      	movs	r2, #0
 8011fe4:	601a      	str	r2, [r3, #0]
 8011fe6:	605a      	str	r2, [r3, #4]
 8011fe8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8011fea:	463b      	mov	r3, r7
 8011fec:	2200      	movs	r2, #0
 8011fee:	601a      	str	r2, [r3, #0]
 8011ff0:	605a      	str	r2, [r3, #4]
 8011ff2:	609a      	str	r2, [r3, #8]
 8011ff4:	60da      	str	r2, [r3, #12]
 8011ff6:	611a      	str	r2, [r3, #16]
 8011ff8:	615a      	str	r2, [r3, #20]
 8011ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8011ffc:	4b22      	ldr	r3, [pc, #136]	; (8012088 <MX_TIM5_Init+0xb0>)
 8011ffe:	4a23      	ldr	r2, [pc, #140]	; (801208c <MX_TIM5_Init+0xb4>)
 8012000:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 8012002:	4b21      	ldr	r3, [pc, #132]	; (8012088 <MX_TIM5_Init+0xb0>)
 8012004:	f240 4237 	movw	r2, #1079	; 0x437
 8012008:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 801200a:	4b1f      	ldr	r3, [pc, #124]	; (8012088 <MX_TIM5_Init+0xb0>)
 801200c:	2200      	movs	r2, #0
 801200e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 8012010:	4b1d      	ldr	r3, [pc, #116]	; (8012088 <MX_TIM5_Init+0xb0>)
 8012012:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8012016:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8012018:	4b1b      	ldr	r3, [pc, #108]	; (8012088 <MX_TIM5_Init+0xb0>)
 801201a:	2200      	movs	r2, #0
 801201c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801201e:	4b1a      	ldr	r3, [pc, #104]	; (8012088 <MX_TIM5_Init+0xb0>)
 8012020:	2200      	movs	r2, #0
 8012022:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8012024:	4818      	ldr	r0, [pc, #96]	; (8012088 <MX_TIM5_Init+0xb0>)
 8012026:	f005 f985 	bl	8017334 <HAL_TIM_PWM_Init>
 801202a:	4603      	mov	r3, r0
 801202c:	2b00      	cmp	r3, #0
 801202e:	d001      	beq.n	8012034 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8012030:	f000 fb50 	bl	80126d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8012034:	2300      	movs	r3, #0
 8012036:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8012038:	2300      	movs	r3, #0
 801203a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 801203c:	f107 031c 	add.w	r3, r7, #28
 8012040:	4619      	mov	r1, r3
 8012042:	4811      	ldr	r0, [pc, #68]	; (8012088 <MX_TIM5_Init+0xb0>)
 8012044:	f005 ffe8 	bl	8018018 <HAL_TIMEx_MasterConfigSynchronization>
 8012048:	4603      	mov	r3, r0
 801204a:	2b00      	cmp	r3, #0
 801204c:	d001      	beq.n	8012052 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 801204e:	f000 fb41 	bl	80126d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8012052:	2360      	movs	r3, #96	; 0x60
 8012054:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 801205a:	2300      	movs	r3, #0
 801205c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 801205e:	2300      	movs	r3, #0
 8012060:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8012062:	463b      	mov	r3, r7
 8012064:	220c      	movs	r2, #12
 8012066:	4619      	mov	r1, r3
 8012068:	4807      	ldr	r0, [pc, #28]	; (8012088 <MX_TIM5_Init+0xb0>)
 801206a:	f005 fb07 	bl	801767c <HAL_TIM_PWM_ConfigChannel>
 801206e:	4603      	mov	r3, r0
 8012070:	2b00      	cmp	r3, #0
 8012072:	d001      	beq.n	8012078 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8012074:	f000 fb2e 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8012078:	4803      	ldr	r0, [pc, #12]	; (8012088 <MX_TIM5_Init+0xb0>)
 801207a:	f000 fbdb 	bl	8012834 <HAL_TIM_MspPostInit>

}
 801207e:	bf00      	nop
 8012080:	3728      	adds	r7, #40	; 0x28
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}
 8012086:	bf00      	nop
 8012088:	24000494 	.word	0x24000494
 801208c:	40000c00 	.word	0x40000c00

08012090 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8012090:	b580      	push	{r7, lr}
 8012092:	b084      	sub	sp, #16
 8012094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8012096:	1d3b      	adds	r3, r7, #4
 8012098:	2200      	movs	r2, #0
 801209a:	601a      	str	r2, [r3, #0]
 801209c:	605a      	str	r2, [r3, #4]
 801209e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80120a0:	4b19      	ldr	r3, [pc, #100]	; (8012108 <MX_TIM7_Init+0x78>)
 80120a2:	4a1a      	ldr	r2, [pc, #104]	; (801210c <MX_TIM7_Init+0x7c>)
 80120a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 80120a6:	4b18      	ldr	r3, [pc, #96]	; (8012108 <MX_TIM7_Init+0x78>)
 80120a8:	f240 4237 	movw	r2, #1079	; 0x437
 80120ac:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80120ae:	4b16      	ldr	r3, [pc, #88]	; (8012108 <MX_TIM7_Init+0x78>)
 80120b0:	2200      	movs	r2, #0
 80120b2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80120b4:	4b14      	ldr	r3, [pc, #80]	; (8012108 <MX_TIM7_Init+0x78>)
 80120b6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80120ba:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80120bc:	4b12      	ldr	r3, [pc, #72]	; (8012108 <MX_TIM7_Init+0x78>)
 80120be:	2280      	movs	r2, #128	; 0x80
 80120c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80120c2:	4811      	ldr	r0, [pc, #68]	; (8012108 <MX_TIM7_Init+0x78>)
 80120c4:	f005 f8e0 	bl	8017288 <HAL_TIM_Base_Init>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d001      	beq.n	80120d2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80120ce:	f000 fb01 	bl	80126d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80120d2:	2300      	movs	r3, #0
 80120d4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80120d6:	2300      	movs	r3, #0
 80120d8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80120da:	1d3b      	adds	r3, r7, #4
 80120dc:	4619      	mov	r1, r3
 80120de:	480a      	ldr	r0, [pc, #40]	; (8012108 <MX_TIM7_Init+0x78>)
 80120e0:	f005 ff9a 	bl	8018018 <HAL_TIMEx_MasterConfigSynchronization>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d001      	beq.n	80120ee <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80120ea:	f000 faf3 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 80120ee:	4806      	ldr	r0, [pc, #24]	; (8012108 <MX_TIM7_Init+0x78>)
 80120f0:	f005 f8f6 	bl	80172e0 <HAL_TIM_Base_Start_IT>
 80120f4:	4603      	mov	r3, r0
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d001      	beq.n	80120fe <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 80120fa:	f000 faeb 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 80120fe:	bf00      	nop
 8012100:	3710      	adds	r7, #16
 8012102:	46bd      	mov	sp, r7
 8012104:	bd80      	pop	{r7, pc}
 8012106:	bf00      	nop
 8012108:	240006a0 	.word	0x240006a0
 801210c:	40001400 	.word	0x40001400

08012110 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8012114:	4b22      	ldr	r3, [pc, #136]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012116:	4a23      	ldr	r2, [pc, #140]	; (80121a4 <MX_USART1_UART_Init+0x94>)
 8012118:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 801211a:	4b21      	ldr	r3, [pc, #132]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801211c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8012120:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012122:	4b1f      	ldr	r3, [pc, #124]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012124:	2200      	movs	r2, #0
 8012126:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8012128:	4b1d      	ldr	r3, [pc, #116]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801212a:	2200      	movs	r2, #0
 801212c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 801212e:	4b1c      	ldr	r3, [pc, #112]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012130:	2200      	movs	r2, #0
 8012132:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8012134:	4b1a      	ldr	r3, [pc, #104]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012136:	220c      	movs	r2, #12
 8012138:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801213a:	4b19      	ldr	r3, [pc, #100]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801213c:	2200      	movs	r2, #0
 801213e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8012140:	4b17      	ldr	r3, [pc, #92]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012142:	2200      	movs	r2, #0
 8012144:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012146:	4b16      	ldr	r3, [pc, #88]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012148:	2200      	movs	r2, #0
 801214a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801214c:	4b14      	ldr	r3, [pc, #80]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801214e:	2200      	movs	r2, #0
 8012150:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012152:	4b13      	ldr	r3, [pc, #76]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 8012154:	2200      	movs	r2, #0
 8012156:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8012158:	4811      	ldr	r0, [pc, #68]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801215a:	f006 f881 	bl	8018260 <HAL_UART_Init>
 801215e:	4603      	mov	r3, r0
 8012160:	2b00      	cmp	r3, #0
 8012162:	d001      	beq.n	8012168 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8012164:	f000 fab6 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012168:	2100      	movs	r1, #0
 801216a:	480d      	ldr	r0, [pc, #52]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801216c:	f008 fdef 	bl	801ad4e <HAL_UARTEx_SetTxFifoThreshold>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d001      	beq.n	801217a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8012176:	f000 faad 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 801217a:	2100      	movs	r1, #0
 801217c:	4808      	ldr	r0, [pc, #32]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801217e:	f008 fe24 	bl	801adca <HAL_UARTEx_SetRxFifoThreshold>
 8012182:	4603      	mov	r3, r0
 8012184:	2b00      	cmp	r3, #0
 8012186:	d001      	beq.n	801218c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8012188:	f000 faa4 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 801218c:	4804      	ldr	r0, [pc, #16]	; (80121a0 <MX_USART1_UART_Init+0x90>)
 801218e:	f008 fda5 	bl	801acdc <HAL_UARTEx_DisableFifoMode>
 8012192:	4603      	mov	r3, r0
 8012194:	2b00      	cmp	r3, #0
 8012196:	d001      	beq.n	801219c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8012198:	f000 fa9c 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 801219c:	bf00      	nop
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	2400055c 	.word	0x2400055c
 80121a4:	40011000 	.word	0x40011000

080121a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80121ac:	4b22      	ldr	r3, [pc, #136]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121ae:	4a23      	ldr	r2, [pc, #140]	; (801223c <MX_USART3_UART_Init+0x94>)
 80121b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80121b2:	4b21      	ldr	r3, [pc, #132]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121b4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80121b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80121ba:	4b1f      	ldr	r3, [pc, #124]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121bc:	2200      	movs	r2, #0
 80121be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80121c0:	4b1d      	ldr	r3, [pc, #116]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121c2:	2200      	movs	r2, #0
 80121c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80121c6:	4b1c      	ldr	r3, [pc, #112]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121c8:	2200      	movs	r2, #0
 80121ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80121cc:	4b1a      	ldr	r3, [pc, #104]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121ce:	220c      	movs	r2, #12
 80121d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80121d2:	4b19      	ldr	r3, [pc, #100]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121d4:	2200      	movs	r2, #0
 80121d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80121d8:	4b17      	ldr	r3, [pc, #92]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121da:	2200      	movs	r2, #0
 80121dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80121de:	4b16      	ldr	r3, [pc, #88]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121e0:	2200      	movs	r2, #0
 80121e2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80121e4:	4b14      	ldr	r3, [pc, #80]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121e6:	2200      	movs	r2, #0
 80121e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80121ea:	4b13      	ldr	r3, [pc, #76]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121ec:	2200      	movs	r2, #0
 80121ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80121f0:	4811      	ldr	r0, [pc, #68]	; (8012238 <MX_USART3_UART_Init+0x90>)
 80121f2:	f006 f835 	bl	8018260 <HAL_UART_Init>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d001      	beq.n	8012200 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80121fc:	f000 fa6a 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012200:	2100      	movs	r1, #0
 8012202:	480d      	ldr	r0, [pc, #52]	; (8012238 <MX_USART3_UART_Init+0x90>)
 8012204:	f008 fda3 	bl	801ad4e <HAL_UARTEx_SetTxFifoThreshold>
 8012208:	4603      	mov	r3, r0
 801220a:	2b00      	cmp	r3, #0
 801220c:	d001      	beq.n	8012212 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 801220e:	f000 fa61 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012212:	2100      	movs	r1, #0
 8012214:	4808      	ldr	r0, [pc, #32]	; (8012238 <MX_USART3_UART_Init+0x90>)
 8012216:	f008 fdd8 	bl	801adca <HAL_UARTEx_SetRxFifoThreshold>
 801221a:	4603      	mov	r3, r0
 801221c:	2b00      	cmp	r3, #0
 801221e:	d001      	beq.n	8012224 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8012220:	f000 fa58 	bl	80126d4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8012224:	4804      	ldr	r0, [pc, #16]	; (8012238 <MX_USART3_UART_Init+0x90>)
 8012226:	f008 fd59 	bl	801acdc <HAL_UARTEx_DisableFifoMode>
 801222a:	4603      	mov	r3, r0
 801222c:	2b00      	cmp	r3, #0
 801222e:	d001      	beq.n	8012234 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8012230:	f000 fa50 	bl	80126d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8012234:	bf00      	nop
 8012236:	bd80      	pop	{r7, pc}
 8012238:	24000378 	.word	0x24000378
 801223c:	40004800 	.word	0x40004800

08012240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b08e      	sub	sp, #56	; 0x38
 8012244:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801224a:	2200      	movs	r2, #0
 801224c:	601a      	str	r2, [r3, #0]
 801224e:	605a      	str	r2, [r3, #4]
 8012250:	609a      	str	r2, [r3, #8]
 8012252:	60da      	str	r2, [r3, #12]
 8012254:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012256:	4bbe      	ldr	r3, [pc, #760]	; (8012550 <MX_GPIO_Init+0x310>)
 8012258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801225c:	4abc      	ldr	r2, [pc, #752]	; (8012550 <MX_GPIO_Init+0x310>)
 801225e:	f043 0310 	orr.w	r3, r3, #16
 8012262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012266:	4bba      	ldr	r3, [pc, #744]	; (8012550 <MX_GPIO_Init+0x310>)
 8012268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801226c:	f003 0310 	and.w	r3, r3, #16
 8012270:	623b      	str	r3, [r7, #32]
 8012272:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012274:	4bb6      	ldr	r3, [pc, #728]	; (8012550 <MX_GPIO_Init+0x310>)
 8012276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801227a:	4ab5      	ldr	r2, [pc, #724]	; (8012550 <MX_GPIO_Init+0x310>)
 801227c:	f043 0304 	orr.w	r3, r3, #4
 8012280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012284:	4bb2      	ldr	r3, [pc, #712]	; (8012550 <MX_GPIO_Init+0x310>)
 8012286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801228a:	f003 0304 	and.w	r3, r3, #4
 801228e:	61fb      	str	r3, [r7, #28]
 8012290:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012292:	4baf      	ldr	r3, [pc, #700]	; (8012550 <MX_GPIO_Init+0x310>)
 8012294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012298:	4aad      	ldr	r2, [pc, #692]	; (8012550 <MX_GPIO_Init+0x310>)
 801229a:	f043 0320 	orr.w	r3, r3, #32
 801229e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80122a2:	4bab      	ldr	r3, [pc, #684]	; (8012550 <MX_GPIO_Init+0x310>)
 80122a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122a8:	f003 0320 	and.w	r3, r3, #32
 80122ac:	61bb      	str	r3, [r7, #24]
 80122ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80122b0:	4ba7      	ldr	r3, [pc, #668]	; (8012550 <MX_GPIO_Init+0x310>)
 80122b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122b6:	4aa6      	ldr	r2, [pc, #664]	; (8012550 <MX_GPIO_Init+0x310>)
 80122b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80122bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80122c0:	4ba3      	ldr	r3, [pc, #652]	; (8012550 <MX_GPIO_Init+0x310>)
 80122c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122ca:	617b      	str	r3, [r7, #20]
 80122cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80122ce:	4ba0      	ldr	r3, [pc, #640]	; (8012550 <MX_GPIO_Init+0x310>)
 80122d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122d4:	4a9e      	ldr	r2, [pc, #632]	; (8012550 <MX_GPIO_Init+0x310>)
 80122d6:	f043 0301 	orr.w	r3, r3, #1
 80122da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80122de:	4b9c      	ldr	r3, [pc, #624]	; (8012550 <MX_GPIO_Init+0x310>)
 80122e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122e4:	f003 0301 	and.w	r3, r3, #1
 80122e8:	613b      	str	r3, [r7, #16]
 80122ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80122ec:	4b98      	ldr	r3, [pc, #608]	; (8012550 <MX_GPIO_Init+0x310>)
 80122ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80122f2:	4a97      	ldr	r2, [pc, #604]	; (8012550 <MX_GPIO_Init+0x310>)
 80122f4:	f043 0302 	orr.w	r3, r3, #2
 80122f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80122fc:	4b94      	ldr	r3, [pc, #592]	; (8012550 <MX_GPIO_Init+0x310>)
 80122fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012302:	f003 0302 	and.w	r3, r3, #2
 8012306:	60fb      	str	r3, [r7, #12]
 8012308:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801230a:	4b91      	ldr	r3, [pc, #580]	; (8012550 <MX_GPIO_Init+0x310>)
 801230c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012310:	4a8f      	ldr	r2, [pc, #572]	; (8012550 <MX_GPIO_Init+0x310>)
 8012312:	f043 0308 	orr.w	r3, r3, #8
 8012316:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801231a:	4b8d      	ldr	r3, [pc, #564]	; (8012550 <MX_GPIO_Init+0x310>)
 801231c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012320:	f003 0308 	and.w	r3, r3, #8
 8012324:	60bb      	str	r3, [r7, #8]
 8012326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012328:	4b89      	ldr	r3, [pc, #548]	; (8012550 <MX_GPIO_Init+0x310>)
 801232a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801232e:	4a88      	ldr	r2, [pc, #544]	; (8012550 <MX_GPIO_Init+0x310>)
 8012330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012338:	4b85      	ldr	r3, [pc, #532]	; (8012550 <MX_GPIO_Init+0x310>)
 801233a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801233e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012342:	607b      	str	r3, [r7, #4]
 8012344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8012346:	2200      	movs	r2, #0
 8012348:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 801234c:	4881      	ldr	r0, [pc, #516]	; (8012554 <MX_GPIO_Init+0x314>)
 801234e:	f001 faf7 	bl	8013940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0, GPIO_PIN_RESET);
 8012352:	2200      	movs	r2, #0
 8012354:	f241 4101 	movw	r1, #5121	; 0x1401
 8012358:	487f      	ldr	r0, [pc, #508]	; (8012558 <MX_GPIO_Init+0x318>)
 801235a:	f001 faf1 	bl	8013940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 801235e:	2200      	movs	r2, #0
 8012360:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8012364:	487d      	ldr	r0, [pc, #500]	; (801255c <MX_GPIO_Init+0x31c>)
 8012366:	f001 faeb 	bl	8013940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 801236a:	2200      	movs	r2, #0
 801236c:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8012370:	487b      	ldr	r0, [pc, #492]	; (8012560 <MX_GPIO_Init+0x320>)
 8012372:	f001 fae5 	bl	8013940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|USB_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8012376:	2200      	movs	r2, #0
 8012378:	f44f 71b8 	mov.w	r1, #368	; 0x170
 801237c:	4879      	ldr	r0, [pc, #484]	; (8012564 <MX_GPIO_Init+0x324>)
 801237e:	f001 fadf 	bl	8013940 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8012382:	2314      	movs	r3, #20
 8012384:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012386:	2300      	movs	r3, #0
 8012388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801238a:	2300      	movs	r3, #0
 801238c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801238e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012392:	4619      	mov	r1, r3
 8012394:	4870      	ldr	r0, [pc, #448]	; (8012558 <MX_GPIO_Init+0x318>)
 8012396:	f001 f90b 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 801239a:	2308      	movs	r3, #8
 801239c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801239e:	4b72      	ldr	r3, [pc, #456]	; (8012568 <MX_GPIO_Init+0x328>)
 80123a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80123a2:	2301      	movs	r3, #1
 80123a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80123a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123aa:	4619      	mov	r1, r3
 80123ac:	486a      	ldr	r0, [pc, #424]	; (8012558 <MX_GPIO_Init+0x318>)
 80123ae:	f001 f8ff 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80123b2:	2320      	movs	r3, #32
 80123b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80123b6:	4b6d      	ldr	r3, [pc, #436]	; (801256c <MX_GPIO_Init+0x32c>)
 80123b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80123ba:	2302      	movs	r3, #2
 80123bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80123be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123c2:	4619      	mov	r1, r3
 80123c4:	4864      	ldr	r0, [pc, #400]	; (8012558 <MX_GPIO_Init+0x318>)
 80123c6:	f001 f8f3 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80123ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80123ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80123d0:	2300      	movs	r3, #0
 80123d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80123d4:	2302      	movs	r3, #2
 80123d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80123d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123dc:	4619      	mov	r1, r3
 80123de:	4864      	ldr	r0, [pc, #400]	; (8012570 <MX_GPIO_Init+0x330>)
 80123e0:	f001 f8e6 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF8 PF9 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80123e4:	f44f 63e8 	mov.w	r3, #1856	; 0x740
 80123e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80123ea:	4b60      	ldr	r3, [pc, #384]	; (801256c <MX_GPIO_Init+0x32c>)
 80123ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80123ee:	2302      	movs	r3, #2
 80123f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80123f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80123f6:	4619      	mov	r1, r3
 80123f8:	4856      	ldr	r0, [pc, #344]	; (8012554 <MX_GPIO_Init+0x314>)
 80123fa:	f001 f8d9 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80123fe:	2380      	movs	r3, #128	; 0x80
 8012400:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012402:	2300      	movs	r3, #0
 8012404:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012406:	2300      	movs	r3, #0
 8012408:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801240e:	4619      	mov	r1, r3
 8012410:	4850      	ldr	r0, [pc, #320]	; (8012554 <MX_GPIO_Init+0x314>)
 8012412:	f001 f8cd 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 8012416:	f240 4382 	movw	r3, #1154	; 0x482
 801241a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801241c:	2300      	movs	r3, #0
 801241e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012420:	2301      	movs	r3, #1
 8012422:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012428:	4619      	mov	r1, r3
 801242a:	4851      	ldr	r0, [pc, #324]	; (8012570 <MX_GPIO_Init+0x330>)
 801242c:	f001 f8c0 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8012430:	2303      	movs	r3, #3
 8012432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8012434:	4b4c      	ldr	r3, [pc, #304]	; (8012568 <MX_GPIO_Init+0x328>)
 8012436:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012438:	2301      	movs	r3, #1
 801243a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801243c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012440:	4619      	mov	r1, r3
 8012442:	484c      	ldr	r0, [pc, #304]	; (8012574 <MX_GPIO_Init+0x334>)
 8012444:	f001 f8b4 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 8012448:	2304      	movs	r3, #4
 801244a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801244c:	2302      	movs	r3, #2
 801244e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012450:	2300      	movs	r3, #0
 8012452:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012454:	2300      	movs	r3, #0
 8012456:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012458:	230b      	movs	r3, #11
 801245a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 801245c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012460:	4619      	mov	r1, r3
 8012462:	4844      	ldr	r0, [pc, #272]	; (8012574 <MX_GPIO_Init+0x334>)
 8012464:	f001 f8a4 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8012468:	2330      	movs	r3, #48	; 0x30
 801246a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801246c:	2302      	movs	r3, #2
 801246e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012470:	2300      	movs	r3, #0
 8012472:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012474:	2300      	movs	r3, #0
 8012476:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012478:	230b      	movs	r3, #11
 801247a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801247c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012480:	4619      	mov	r1, r3
 8012482:	483b      	ldr	r0, [pc, #236]	; (8012570 <MX_GPIO_Init+0x330>)
 8012484:	f001 f894 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8012488:	2304      	movs	r3, #4
 801248a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801248c:	4b36      	ldr	r3, [pc, #216]	; (8012568 <MX_GPIO_Init+0x328>)
 801248e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012490:	2301      	movs	r3, #1
 8012492:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012498:	4619      	mov	r1, r3
 801249a:	4830      	ldr	r0, [pc, #192]	; (801255c <MX_GPIO_Init+0x31c>)
 801249c:	f001 f888 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80124a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124a6:	2301      	movs	r3, #1
 80124a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80124aa:	2302      	movs	r3, #2
 80124ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124ae:	2300      	movs	r3, #0
 80124b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80124b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124b6:	4619      	mov	r1, r3
 80124b8:	4826      	ldr	r0, [pc, #152]	; (8012554 <MX_GPIO_Init+0x314>)
 80124ba:	f001 f879 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80124be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80124c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124c4:	2301      	movs	r3, #1
 80124c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80124c8:	2300      	movs	r3, #0
 80124ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124cc:	2300      	movs	r3, #0
 80124ce:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80124d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124d4:	4619      	mov	r1, r3
 80124d6:	481f      	ldr	r0, [pc, #124]	; (8012554 <MX_GPIO_Init+0x314>)
 80124d8:	f001 f86a 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0;
 80124dc:	f241 4301 	movw	r3, #5121	; 0x1401
 80124e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80124e2:	2301      	movs	r3, #1
 80124e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80124e6:	2302      	movs	r3, #2
 80124e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80124ea:	2300      	movs	r3, #0
 80124ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80124ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80124f2:	4619      	mov	r1, r3
 80124f4:	4818      	ldr	r0, [pc, #96]	; (8012558 <MX_GPIO_Init+0x318>)
 80124f6:	f001 f85b 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80124fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80124fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012500:	2302      	movs	r3, #2
 8012502:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012504:	2300      	movs	r3, #0
 8012506:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012508:	2300      	movs	r3, #0
 801250a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801250c:	230b      	movs	r3, #11
 801250e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8012510:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012514:	4619      	mov	r1, r3
 8012516:	4811      	ldr	r0, [pc, #68]	; (801255c <MX_GPIO_Init+0x31c>)
 8012518:	f001 f84a 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 801251c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8012520:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012522:	2301      	movs	r3, #1
 8012524:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012526:	2300      	movs	r3, #0
 8012528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801252a:	2300      	movs	r3, #0
 801252c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801252e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012532:	4619      	mov	r1, r3
 8012534:	4809      	ldr	r0, [pc, #36]	; (801255c <MX_GPIO_Init+0x31c>)
 8012536:	f001 f83b 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 801253a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801253e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012540:	2301      	movs	r3, #1
 8012542:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012544:	2302      	movs	r3, #2
 8012546:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012548:	2300      	movs	r3, #0
 801254a:	633b      	str	r3, [r7, #48]	; 0x30
 801254c:	e014      	b.n	8012578 <MX_GPIO_Init+0x338>
 801254e:	bf00      	nop
 8012550:	58024400 	.word	0x58024400
 8012554:	58021400 	.word	0x58021400
 8012558:	58021000 	.word	0x58021000
 801255c:	58020400 	.word	0x58020400
 8012560:	58020c00 	.word	0x58020c00
 8012564:	58021800 	.word	0x58021800
 8012568:	11310000 	.word	0x11310000
 801256c:	11110000 	.word	0x11110000
 8012570:	58020800 	.word	0x58020800
 8012574:	58020000 	.word	0x58020000
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801257c:	4619      	mov	r1, r3
 801257e:	4851      	ldr	r0, [pc, #324]	; (80126c4 <MX_GPIO_Init+0x484>)
 8012580:	f001 f816 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8012584:	f44f 7398 	mov.w	r3, #304	; 0x130
 8012588:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801258a:	2301      	movs	r3, #1
 801258c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801258e:	2302      	movs	r3, #2
 8012590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012592:	2300      	movs	r3, #0
 8012594:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801259a:	4619      	mov	r1, r3
 801259c:	484a      	ldr	r0, [pc, #296]	; (80126c8 <MX_GPIO_Init+0x488>)
 801259e:	f001 f807 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80125a2:	2340      	movs	r3, #64	; 0x40
 80125a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80125a6:	2301      	movs	r3, #1
 80125a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125aa:	2300      	movs	r3, #0
 80125ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80125ae:	2300      	movs	r3, #0
 80125b0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80125b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125b6:	4619      	mov	r1, r3
 80125b8:	4843      	ldr	r0, [pc, #268]	; (80126c8 <MX_GPIO_Init+0x488>)
 80125ba:	f000 fff9 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80125be:	2380      	movs	r3, #128	; 0x80
 80125c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80125c2:	2300      	movs	r3, #0
 80125c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80125c6:	2301      	movs	r3, #1
 80125c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80125ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125ce:	4619      	mov	r1, r3
 80125d0:	483d      	ldr	r0, [pc, #244]	; (80126c8 <MX_GPIO_Init+0x488>)
 80125d2:	f000 ffed 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80125d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80125dc:	2300      	movs	r3, #0
 80125de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125e0:	2300      	movs	r3, #0
 80125e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80125e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80125e8:	4619      	mov	r1, r3
 80125ea:	4838      	ldr	r0, [pc, #224]	; (80126cc <MX_GPIO_Init+0x48c>)
 80125ec:	f000 ffe0 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80125f0:	2308      	movs	r3, #8
 80125f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80125f4:	2300      	movs	r3, #0
 80125f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125f8:	2300      	movs	r3, #0
 80125fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80125fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012600:	4619      	mov	r1, r3
 8012602:	4830      	ldr	r0, [pc, #192]	; (80126c4 <MX_GPIO_Init+0x484>)
 8012604:	f000 ffd4 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8012608:	2390      	movs	r3, #144	; 0x90
 801260a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 801260c:	4b30      	ldr	r3, [pc, #192]	; (80126d0 <MX_GPIO_Init+0x490>)
 801260e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012610:	2301      	movs	r3, #1
 8012612:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012618:	4619      	mov	r1, r3
 801261a:	482a      	ldr	r0, [pc, #168]	; (80126c4 <MX_GPIO_Init+0x484>)
 801261c:	f000 ffc8 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8012620:	2320      	movs	r3, #32
 8012622:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012624:	2300      	movs	r3, #0
 8012626:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8012628:	2301      	movs	r3, #1
 801262a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801262c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012630:	4619      	mov	r1, r3
 8012632:	4824      	ldr	r0, [pc, #144]	; (80126c4 <MX_GPIO_Init+0x484>)
 8012634:	f000 ffbc 	bl	80135b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8012638:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 801263c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801263e:	2302      	movs	r3, #2
 8012640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012642:	2300      	movs	r3, #0
 8012644:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012646:	2300      	movs	r3, #0
 8012648:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801264a:	230b      	movs	r3, #11
 801264c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801264e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012652:	4619      	mov	r1, r3
 8012654:	481c      	ldr	r0, [pc, #112]	; (80126c8 <MX_GPIO_Init+0x488>)
 8012656:	f000 ffab 	bl	80135b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 801265a:	2200      	movs	r2, #0
 801265c:	2100      	movs	r1, #0
 801265e:	2006      	movs	r0, #6
 8012660:	f000 fd2d 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8012664:	2006      	movs	r0, #6
 8012666:	f000 fd44 	bl	80130f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 801266a:	2200      	movs	r2, #0
 801266c:	2100      	movs	r1, #0
 801266e:	2007      	movs	r0, #7
 8012670:	f000 fd25 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8012674:	2007      	movs	r0, #7
 8012676:	f000 fd3c 	bl	80130f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 801267a:	2200      	movs	r2, #0
 801267c:	2100      	movs	r1, #0
 801267e:	2008      	movs	r0, #8
 8012680:	f000 fd1d 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8012684:	2008      	movs	r0, #8
 8012686:	f000 fd34 	bl	80130f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 801268a:	2200      	movs	r2, #0
 801268c:	2100      	movs	r1, #0
 801268e:	2009      	movs	r0, #9
 8012690:	f000 fd15 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8012694:	2009      	movs	r0, #9
 8012696:	f000 fd2c 	bl	80130f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 801269a:	2200      	movs	r2, #0
 801269c:	2100      	movs	r1, #0
 801269e:	200a      	movs	r0, #10
 80126a0:	f000 fd0d 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80126a4:	200a      	movs	r0, #10
 80126a6:	f000 fd24 	bl	80130f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80126aa:	2200      	movs	r2, #0
 80126ac:	2100      	movs	r1, #0
 80126ae:	2017      	movs	r0, #23
 80126b0:	f000 fd05 	bl	80130be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80126b4:	2017      	movs	r0, #23
 80126b6:	f000 fd1c 	bl	80130f2 <HAL_NVIC_EnableIRQ>

}
 80126ba:	bf00      	nop
 80126bc:	3738      	adds	r7, #56	; 0x38
 80126be:	46bd      	mov	sp, r7
 80126c0:	bd80      	pop	{r7, pc}
 80126c2:	bf00      	nop
 80126c4:	58020c00 	.word	0x58020c00
 80126c8:	58021800 	.word	0x58021800
 80126cc:	58020800 	.word	0x58020800
 80126d0:	11310000 	.word	0x11310000

080126d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80126d4:	b480      	push	{r7}
 80126d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80126d8:	bf00      	nop
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr
	...

080126e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80126e4:	b480      	push	{r7}
 80126e6:	b083      	sub	sp, #12
 80126e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80126ea:	4b0a      	ldr	r3, [pc, #40]	; (8012714 <HAL_MspInit+0x30>)
 80126ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80126f0:	4a08      	ldr	r2, [pc, #32]	; (8012714 <HAL_MspInit+0x30>)
 80126f2:	f043 0302 	orr.w	r3, r3, #2
 80126f6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80126fa:	4b06      	ldr	r3, [pc, #24]	; (8012714 <HAL_MspInit+0x30>)
 80126fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8012700:	f003 0302 	and.w	r3, r3, #2
 8012704:	607b      	str	r3, [r7, #4]
 8012706:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012708:	bf00      	nop
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	58024400 	.word	0x58024400

08012718 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8012718:	b480      	push	{r7}
 801271a:	b087      	sub	sp, #28
 801271c:	af00      	add	r7, sp, #0
 801271e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	4a2b      	ldr	r2, [pc, #172]	; (80127d4 <HAL_TIM_PWM_MspInit+0xbc>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d10f      	bne.n	801274a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 801272a:	4b2b      	ldr	r3, [pc, #172]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 801272c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012730:	4a29      	ldr	r2, [pc, #164]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012732:	f043 0301 	orr.w	r3, r3, #1
 8012736:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 801273a:	4b27      	ldr	r3, [pc, #156]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 801273c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012740:	f003 0301 	and.w	r3, r3, #1
 8012744:	617b      	str	r3, [r7, #20]
 8012746:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8012748:	e03d      	b.n	80127c6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012752:	d10f      	bne.n	8012774 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8012754:	4b20      	ldr	r3, [pc, #128]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801275a:	4a1f      	ldr	r2, [pc, #124]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 801275c:	f043 0301 	orr.w	r3, r3, #1
 8012760:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012764:	4b1c      	ldr	r3, [pc, #112]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012766:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	613b      	str	r3, [r7, #16]
 8012770:	693b      	ldr	r3, [r7, #16]
}
 8012772:	e028      	b.n	80127c6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8012774:	687b      	ldr	r3, [r7, #4]
 8012776:	681b      	ldr	r3, [r3, #0]
 8012778:	4a18      	ldr	r2, [pc, #96]	; (80127dc <HAL_TIM_PWM_MspInit+0xc4>)
 801277a:	4293      	cmp	r3, r2
 801277c:	d10f      	bne.n	801279e <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801277e:	4b16      	ldr	r3, [pc, #88]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012780:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012784:	4a14      	ldr	r2, [pc, #80]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012786:	f043 0302 	orr.w	r3, r3, #2
 801278a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801278e:	4b12      	ldr	r3, [pc, #72]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 8012790:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012794:	f003 0302 	and.w	r3, r3, #2
 8012798:	60fb      	str	r3, [r7, #12]
 801279a:	68fb      	ldr	r3, [r7, #12]
}
 801279c:	e013      	b.n	80127c6 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	4a0f      	ldr	r2, [pc, #60]	; (80127e0 <HAL_TIM_PWM_MspInit+0xc8>)
 80127a4:	4293      	cmp	r3, r2
 80127a6:	d10e      	bne.n	80127c6 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80127a8:	4b0b      	ldr	r3, [pc, #44]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 80127aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80127ae:	4a0a      	ldr	r2, [pc, #40]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 80127b0:	f043 0308 	orr.w	r3, r3, #8
 80127b4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80127b8:	4b07      	ldr	r3, [pc, #28]	; (80127d8 <HAL_TIM_PWM_MspInit+0xc0>)
 80127ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80127be:	f003 0308 	and.w	r3, r3, #8
 80127c2:	60bb      	str	r3, [r7, #8]
 80127c4:	68bb      	ldr	r3, [r7, #8]
}
 80127c6:	bf00      	nop
 80127c8:	371c      	adds	r7, #28
 80127ca:	46bd      	mov	sp, r7
 80127cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d0:	4770      	bx	lr
 80127d2:	bf00      	nop
 80127d4:	40010000 	.word	0x40010000
 80127d8:	58024400 	.word	0x58024400
 80127dc:	40000400 	.word	0x40000400
 80127e0:	40000c00 	.word	0x40000c00

080127e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b084      	sub	sp, #16
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	4a0e      	ldr	r2, [pc, #56]	; (801282c <HAL_TIM_Base_MspInit+0x48>)
 80127f2:	4293      	cmp	r3, r2
 80127f4:	d116      	bne.n	8012824 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80127f6:	4b0e      	ldr	r3, [pc, #56]	; (8012830 <HAL_TIM_Base_MspInit+0x4c>)
 80127f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80127fc:	4a0c      	ldr	r2, [pc, #48]	; (8012830 <HAL_TIM_Base_MspInit+0x4c>)
 80127fe:	f043 0320 	orr.w	r3, r3, #32
 8012802:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012806:	4b0a      	ldr	r3, [pc, #40]	; (8012830 <HAL_TIM_Base_MspInit+0x4c>)
 8012808:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801280c:	f003 0320 	and.w	r3, r3, #32
 8012810:	60fb      	str	r3, [r7, #12]
 8012812:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8012814:	2200      	movs	r2, #0
 8012816:	2100      	movs	r1, #0
 8012818:	2037      	movs	r0, #55	; 0x37
 801281a:	f000 fc50 	bl	80130be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801281e:	2037      	movs	r0, #55	; 0x37
 8012820:	f000 fc67 	bl	80130f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8012824:	bf00      	nop
 8012826:	3710      	adds	r7, #16
 8012828:	46bd      	mov	sp, r7
 801282a:	bd80      	pop	{r7, pc}
 801282c:	40001400 	.word	0x40001400
 8012830:	58024400 	.word	0x58024400

08012834 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b08c      	sub	sp, #48	; 0x30
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801283c:	f107 031c 	add.w	r3, r7, #28
 8012840:	2200      	movs	r2, #0
 8012842:	601a      	str	r2, [r3, #0]
 8012844:	605a      	str	r2, [r3, #4]
 8012846:	609a      	str	r2, [r3, #8]
 8012848:	60da      	str	r2, [r3, #12]
 801284a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	4a5a      	ldr	r2, [pc, #360]	; (80129bc <HAL_TIM_MspPostInit+0x188>)
 8012852:	4293      	cmp	r3, r2
 8012854:	d120      	bne.n	8012898 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8012856:	4b5a      	ldr	r3, [pc, #360]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 8012858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801285c:	4a58      	ldr	r2, [pc, #352]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 801285e:	f043 0310 	orr.w	r3, r3, #16
 8012862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012866:	4b56      	ldr	r3, [pc, #344]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 8012868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801286c:	f003 0310 	and.w	r3, r3, #16
 8012870:	61bb      	str	r3, [r7, #24]
 8012872:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8012874:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8012878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801287a:	2302      	movs	r3, #2
 801287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801287e:	2300      	movs	r3, #0
 8012880:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012882:	2300      	movs	r3, #0
 8012884:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8012886:	2301      	movs	r3, #1
 8012888:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801288a:	f107 031c 	add.w	r3, r7, #28
 801288e:	4619      	mov	r1, r3
 8012890:	484c      	ldr	r0, [pc, #304]	; (80129c4 <HAL_TIM_MspPostInit+0x190>)
 8012892:	f000 fe8d 	bl	80135b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8012896:	e08c      	b.n	80129b2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80128a0:	d11f      	bne.n	80128e2 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128a2:	4b47      	ldr	r3, [pc, #284]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128a8:	4a45      	ldr	r2, [pc, #276]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128aa:	f043 0301 	orr.w	r3, r3, #1
 80128ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80128b2:	4b43      	ldr	r3, [pc, #268]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128b8:	f003 0301 	and.w	r3, r3, #1
 80128bc:	617b      	str	r3, [r7, #20]
 80128be:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80128c0:	2320      	movs	r3, #32
 80128c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80128c4:	2302      	movs	r3, #2
 80128c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80128c8:	2300      	movs	r3, #0
 80128ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80128cc:	2300      	movs	r3, #0
 80128ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80128d0:	2301      	movs	r3, #1
 80128d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80128d4:	f107 031c 	add.w	r3, r7, #28
 80128d8:	4619      	mov	r1, r3
 80128da:	483b      	ldr	r0, [pc, #236]	; (80129c8 <HAL_TIM_MspPostInit+0x194>)
 80128dc:	f000 fe68 	bl	80135b0 <HAL_GPIO_Init>
}
 80128e0:	e067      	b.n	80129b2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 80128e2:	687b      	ldr	r3, [r7, #4]
 80128e4:	681b      	ldr	r3, [r3, #0]
 80128e6:	4a39      	ldr	r2, [pc, #228]	; (80129cc <HAL_TIM_MspPostInit+0x198>)
 80128e8:	4293      	cmp	r3, r2
 80128ea:	d13e      	bne.n	801296a <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80128ec:	4b34      	ldr	r3, [pc, #208]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80128f2:	4a33      	ldr	r2, [pc, #204]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128f4:	f043 0301 	orr.w	r3, r3, #1
 80128f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80128fc:	4b30      	ldr	r3, [pc, #192]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 80128fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012902:	f003 0301 	and.w	r3, r3, #1
 8012906:	613b      	str	r3, [r7, #16]
 8012908:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801290a:	4b2d      	ldr	r3, [pc, #180]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 801290c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012910:	4a2b      	ldr	r2, [pc, #172]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 8012912:	f043 0302 	orr.w	r3, r3, #2
 8012916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801291a:	4b29      	ldr	r3, [pc, #164]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 801291c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012920:	f003 0302 	and.w	r3, r3, #2
 8012924:	60fb      	str	r3, [r7, #12]
 8012926:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8012928:	23c0      	movs	r3, #192	; 0xc0
 801292a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801292c:	2302      	movs	r3, #2
 801292e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012930:	2300      	movs	r3, #0
 8012932:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012934:	2300      	movs	r3, #0
 8012936:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012938:	2302      	movs	r3, #2
 801293a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801293c:	f107 031c 	add.w	r3, r7, #28
 8012940:	4619      	mov	r1, r3
 8012942:	4821      	ldr	r0, [pc, #132]	; (80129c8 <HAL_TIM_MspPostInit+0x194>)
 8012944:	f000 fe34 	bl	80135b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8012948:	2302      	movs	r3, #2
 801294a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801294c:	2302      	movs	r3, #2
 801294e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012950:	2300      	movs	r3, #0
 8012952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012954:	2300      	movs	r3, #0
 8012956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8012958:	2302      	movs	r3, #2
 801295a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801295c:	f107 031c 	add.w	r3, r7, #28
 8012960:	4619      	mov	r1, r3
 8012962:	481b      	ldr	r0, [pc, #108]	; (80129d0 <HAL_TIM_MspPostInit+0x19c>)
 8012964:	f000 fe24 	bl	80135b0 <HAL_GPIO_Init>
}
 8012968:	e023      	b.n	80129b2 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	681b      	ldr	r3, [r3, #0]
 801296e:	4a19      	ldr	r2, [pc, #100]	; (80129d4 <HAL_TIM_MspPostInit+0x1a0>)
 8012970:	4293      	cmp	r3, r2
 8012972:	d11e      	bne.n	80129b2 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012974:	4b12      	ldr	r3, [pc, #72]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 8012976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801297a:	4a11      	ldr	r2, [pc, #68]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 801297c:	f043 0301 	orr.w	r3, r3, #1
 8012980:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012984:	4b0e      	ldr	r3, [pc, #56]	; (80129c0 <HAL_TIM_MspPostInit+0x18c>)
 8012986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801298a:	f003 0301 	and.w	r3, r3, #1
 801298e:	60bb      	str	r3, [r7, #8]
 8012990:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8012992:	2308      	movs	r3, #8
 8012994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012996:	2302      	movs	r3, #2
 8012998:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801299a:	2300      	movs	r3, #0
 801299c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801299e:	2300      	movs	r3, #0
 80129a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80129a2:	2302      	movs	r3, #2
 80129a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80129a6:	f107 031c 	add.w	r3, r7, #28
 80129aa:	4619      	mov	r1, r3
 80129ac:	4806      	ldr	r0, [pc, #24]	; (80129c8 <HAL_TIM_MspPostInit+0x194>)
 80129ae:	f000 fdff 	bl	80135b0 <HAL_GPIO_Init>
}
 80129b2:	bf00      	nop
 80129b4:	3730      	adds	r7, #48	; 0x30
 80129b6:	46bd      	mov	sp, r7
 80129b8:	bd80      	pop	{r7, pc}
 80129ba:	bf00      	nop
 80129bc:	40010000 	.word	0x40010000
 80129c0:	58024400 	.word	0x58024400
 80129c4:	58021000 	.word	0x58021000
 80129c8:	58020000 	.word	0x58020000
 80129cc:	40000400 	.word	0x40000400
 80129d0:	58020400 	.word	0x58020400
 80129d4:	40000c00 	.word	0x40000c00

080129d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b08c      	sub	sp, #48	; 0x30
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80129e0:	f107 031c 	add.w	r3, r7, #28
 80129e4:	2200      	movs	r2, #0
 80129e6:	601a      	str	r2, [r3, #0]
 80129e8:	605a      	str	r2, [r3, #4]
 80129ea:	609a      	str	r2, [r3, #8]
 80129ec:	60da      	str	r2, [r3, #12]
 80129ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	4a41      	ldr	r2, [pc, #260]	; (8012afc <HAL_UART_MspInit+0x124>)
 80129f6:	4293      	cmp	r3, r2
 80129f8:	d13f      	bne.n	8012a7a <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80129fa:	4b41      	ldr	r3, [pc, #260]	; (8012b00 <HAL_UART_MspInit+0x128>)
 80129fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012a00:	4a3f      	ldr	r2, [pc, #252]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a02:	f043 0310 	orr.w	r3, r3, #16
 8012a06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8012a0a:	4b3d      	ldr	r3, [pc, #244]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8012a10:	f003 0310 	and.w	r3, r3, #16
 8012a14:	61bb      	str	r3, [r7, #24]
 8012a16:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8012a18:	4b39      	ldr	r3, [pc, #228]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012a1e:	4a38      	ldr	r2, [pc, #224]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a20:	f043 0302 	orr.w	r3, r3, #2
 8012a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012a28:	4b35      	ldr	r3, [pc, #212]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012a2e:	f003 0302 	and.w	r3, r3, #2
 8012a32:	617b      	str	r3, [r7, #20]
 8012a34:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8012a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012a3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a40:	2300      	movs	r3, #0
 8012a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a44:	2300      	movs	r3, #0
 8012a46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8012a48:	2304      	movs	r3, #4
 8012a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a4c:	f107 031c 	add.w	r3, r7, #28
 8012a50:	4619      	mov	r1, r3
 8012a52:	482c      	ldr	r0, [pc, #176]	; (8012b04 <HAL_UART_MspInit+0x12c>)
 8012a54:	f000 fdac 	bl	80135b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8012a58:	2340      	movs	r3, #64	; 0x40
 8012a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a5c:	2302      	movs	r3, #2
 8012a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a60:	2300      	movs	r3, #0
 8012a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a64:	2300      	movs	r3, #0
 8012a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8012a68:	2307      	movs	r3, #7
 8012a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012a6c:	f107 031c 	add.w	r3, r7, #28
 8012a70:	4619      	mov	r1, r3
 8012a72:	4824      	ldr	r0, [pc, #144]	; (8012b04 <HAL_UART_MspInit+0x12c>)
 8012a74:	f000 fd9c 	bl	80135b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8012a78:	e03b      	b.n	8012af2 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	4a22      	ldr	r2, [pc, #136]	; (8012b08 <HAL_UART_MspInit+0x130>)
 8012a80:	4293      	cmp	r3, r2
 8012a82:	d136      	bne.n	8012af2 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8012a84:	4b1e      	ldr	r3, [pc, #120]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012a8a:	4a1d      	ldr	r2, [pc, #116]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8012a90:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8012a94:	4b1a      	ldr	r3, [pc, #104]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012a96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8012a9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8012a9e:	613b      	str	r3, [r7, #16]
 8012aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8012aa2:	4b17      	ldr	r3, [pc, #92]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012aa8:	4a15      	ldr	r2, [pc, #84]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012aaa:	f043 0308 	orr.w	r3, r3, #8
 8012aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8012ab2:	4b13      	ldr	r3, [pc, #76]	; (8012b00 <HAL_UART_MspInit+0x128>)
 8012ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8012ab8:	f003 0308 	and.w	r3, r3, #8
 8012abc:	60fb      	str	r3, [r7, #12]
 8012abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8012ac0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8012ac4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012ac6:	2302      	movs	r3, #2
 8012ac8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8012ad2:	2307      	movs	r3, #7
 8012ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012ad6:	f107 031c 	add.w	r3, r7, #28
 8012ada:	4619      	mov	r1, r3
 8012adc:	480b      	ldr	r0, [pc, #44]	; (8012b0c <HAL_UART_MspInit+0x134>)
 8012ade:	f000 fd67 	bl	80135b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8012ae2:	2200      	movs	r2, #0
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	2027      	movs	r0, #39	; 0x27
 8012ae8:	f000 fae9 	bl	80130be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8012aec:	2027      	movs	r0, #39	; 0x27
 8012aee:	f000 fb00 	bl	80130f2 <HAL_NVIC_EnableIRQ>
}
 8012af2:	bf00      	nop
 8012af4:	3730      	adds	r7, #48	; 0x30
 8012af6:	46bd      	mov	sp, r7
 8012af8:	bd80      	pop	{r7, pc}
 8012afa:	bf00      	nop
 8012afc:	40011000 	.word	0x40011000
 8012b00:	58024400 	.word	0x58024400
 8012b04:	58020400 	.word	0x58020400
 8012b08:	40004800 	.word	0x40004800
 8012b0c:	58020c00 	.word	0x58020c00

08012b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8012b10:	b480      	push	{r7}
 8012b12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8012b14:	bf00      	nop
 8012b16:	46bd      	mov	sp, r7
 8012b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b1c:	4770      	bx	lr

08012b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012b1e:	b480      	push	{r7}
 8012b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012b22:	e7fe      	b.n	8012b22 <HardFault_Handler+0x4>

08012b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012b24:	b480      	push	{r7}
 8012b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012b28:	e7fe      	b.n	8012b28 <MemManage_Handler+0x4>

08012b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012b2a:	b480      	push	{r7}
 8012b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012b2e:	e7fe      	b.n	8012b2e <BusFault_Handler+0x4>

08012b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012b30:	b480      	push	{r7}
 8012b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012b34:	e7fe      	b.n	8012b34 <UsageFault_Handler+0x4>

08012b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8012b36:	b480      	push	{r7}
 8012b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8012b3a:	bf00      	nop
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b42:	4770      	bx	lr

08012b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012b44:	b480      	push	{r7}
 8012b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012b48:	bf00      	nop
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b50:	4770      	bx	lr

08012b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8012b52:	b480      	push	{r7}
 8012b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8012b56:	bf00      	nop
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8012b60:	b580      	push	{r7, lr}
 8012b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8012b64:	f000 f982 	bl	8012e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8012b68:	bf00      	nop
 8012b6a:	bd80      	pop	{r7, pc}

08012b6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8012b6c:	b580      	push	{r7, lr}
 8012b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8012b70:	2001      	movs	r0, #1
 8012b72:	f000 fefe 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8012b76:	bf00      	nop
 8012b78:	bd80      	pop	{r7, pc}

08012b7a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8012b7a:	b580      	push	{r7, lr}
 8012b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8012b7e:	2002      	movs	r0, #2
 8012b80:	f000 fef7 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8012b84:	bf00      	nop
 8012b86:	bd80      	pop	{r7, pc}

08012b88 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8012b8c:	2004      	movs	r0, #4
 8012b8e:	f000 fef0 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8012b92:	bf00      	nop
 8012b94:	bd80      	pop	{r7, pc}

08012b96 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8012b9a:	2008      	movs	r0, #8
 8012b9c:	f000 fee9 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8012ba0:	bf00      	nop
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8012ba8:	2010      	movs	r0, #16
 8012baa:	f000 fee2 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8012bae:	bf00      	nop
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8012bb6:	2020      	movs	r0, #32
 8012bb8:	f000 fedb 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8012bbc:	2040      	movs	r0, #64	; 0x40
 8012bbe:	f000 fed8 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8012bc2:	2080      	movs	r0, #128	; 0x80
 8012bc4:	f000 fed5 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8012bc8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012bcc:	f000 fed1 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8012bd0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012bd4:	f000 fecd 	bl	8013972 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8012bd8:	bf00      	nop
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8012be0:	4802      	ldr	r0, [pc, #8]	; (8012bec <USART3_IRQHandler+0x10>)
 8012be2:	f005 fb8d 	bl	8018300 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8012be6:	bf00      	nop
 8012be8:	bd80      	pop	{r7, pc}
 8012bea:	bf00      	nop
 8012bec:	24000378 	.word	0x24000378

08012bf0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8012bf0:	b580      	push	{r7, lr}
 8012bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8012bf4:	4802      	ldr	r0, [pc, #8]	; (8012c00 <TIM7_IRQHandler+0x10>)
 8012bf6:	f004 fc21 	bl	801743c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8012bfa:	bf00      	nop
 8012bfc:	bd80      	pop	{r7, pc}
 8012bfe:	bf00      	nop
 8012c00:	240006a0 	.word	0x240006a0

08012c04 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8012c08:	4802      	ldr	r0, [pc, #8]	; (8012c14 <OTG_FS_IRQHandler+0x10>)
 8012c0a:	f001 f823 	bl	8013c54 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8012c0e:	bf00      	nop
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	24001ba8 	.word	0x24001ba8

08012c18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b084      	sub	sp, #16
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8012c20:	4b11      	ldr	r3, [pc, #68]	; (8012c68 <_sbrk+0x50>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d102      	bne.n	8012c2e <_sbrk+0x16>
		heap_end = &end;
 8012c28:	4b0f      	ldr	r3, [pc, #60]	; (8012c68 <_sbrk+0x50>)
 8012c2a:	4a10      	ldr	r2, [pc, #64]	; (8012c6c <_sbrk+0x54>)
 8012c2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8012c2e:	4b0e      	ldr	r3, [pc, #56]	; (8012c68 <_sbrk+0x50>)
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8012c34:	4b0c      	ldr	r3, [pc, #48]	; (8012c68 <_sbrk+0x50>)
 8012c36:	681a      	ldr	r2, [r3, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	4413      	add	r3, r2
 8012c3c:	466a      	mov	r2, sp
 8012c3e:	4293      	cmp	r3, r2
 8012c40:	d907      	bls.n	8012c52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8012c42:	f00b fd01 	bl	801e648 <__errno>
 8012c46:	4602      	mov	r2, r0
 8012c48:	230c      	movs	r3, #12
 8012c4a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8012c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c50:	e006      	b.n	8012c60 <_sbrk+0x48>
	}

	heap_end += incr;
 8012c52:	4b05      	ldr	r3, [pc, #20]	; (8012c68 <_sbrk+0x50>)
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	4413      	add	r3, r2
 8012c5a:	4a03      	ldr	r2, [pc, #12]	; (8012c68 <_sbrk+0x50>)
 8012c5c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
}
 8012c60:	4618      	mov	r0, r3
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}
 8012c68:	24000310 	.word	0x24000310
 8012c6c:	24001fb8 	.word	0x24001fb8

08012c70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8012c70:	b480      	push	{r7}
 8012c72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8012c74:	4b29      	ldr	r3, [pc, #164]	; (8012d1c <SystemInit+0xac>)
 8012c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c7a:	4a28      	ldr	r2, [pc, #160]	; (8012d1c <SystemInit+0xac>)
 8012c7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012c80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8012c84:	4b26      	ldr	r3, [pc, #152]	; (8012d20 <SystemInit+0xb0>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	4a25      	ldr	r2, [pc, #148]	; (8012d20 <SystemInit+0xb0>)
 8012c8a:	f043 0301 	orr.w	r3, r3, #1
 8012c8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8012c90:	4b23      	ldr	r3, [pc, #140]	; (8012d20 <SystemInit+0xb0>)
 8012c92:	2200      	movs	r2, #0
 8012c94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8012c96:	4b22      	ldr	r3, [pc, #136]	; (8012d20 <SystemInit+0xb0>)
 8012c98:	681a      	ldr	r2, [r3, #0]
 8012c9a:	4921      	ldr	r1, [pc, #132]	; (8012d20 <SystemInit+0xb0>)
 8012c9c:	4b21      	ldr	r3, [pc, #132]	; (8012d24 <SystemInit+0xb4>)
 8012c9e:	4013      	ands	r3, r2
 8012ca0:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8012ca2:	4b1f      	ldr	r3, [pc, #124]	; (8012d20 <SystemInit+0xb0>)
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8012ca8:	4b1d      	ldr	r3, [pc, #116]	; (8012d20 <SystemInit+0xb0>)
 8012caa:	2200      	movs	r2, #0
 8012cac:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8012cae:	4b1c      	ldr	r3, [pc, #112]	; (8012d20 <SystemInit+0xb0>)
 8012cb0:	2200      	movs	r2, #0
 8012cb2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8012cb4:	4b1a      	ldr	r3, [pc, #104]	; (8012d20 <SystemInit+0xb0>)
 8012cb6:	2200      	movs	r2, #0
 8012cb8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8012cba:	4b19      	ldr	r3, [pc, #100]	; (8012d20 <SystemInit+0xb0>)
 8012cbc:	2200      	movs	r2, #0
 8012cbe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8012cc0:	4b17      	ldr	r3, [pc, #92]	; (8012d20 <SystemInit+0xb0>)
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8012cc6:	4b16      	ldr	r3, [pc, #88]	; (8012d20 <SystemInit+0xb0>)
 8012cc8:	2200      	movs	r2, #0
 8012cca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8012ccc:	4b14      	ldr	r3, [pc, #80]	; (8012d20 <SystemInit+0xb0>)
 8012cce:	2200      	movs	r2, #0
 8012cd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8012cd2:	4b13      	ldr	r3, [pc, #76]	; (8012d20 <SystemInit+0xb0>)
 8012cd4:	2200      	movs	r2, #0
 8012cd6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8012cd8:	4b11      	ldr	r3, [pc, #68]	; (8012d20 <SystemInit+0xb0>)
 8012cda:	2200      	movs	r2, #0
 8012cdc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8012cde:	4b10      	ldr	r3, [pc, #64]	; (8012d20 <SystemInit+0xb0>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8012ce4:	4b0e      	ldr	r3, [pc, #56]	; (8012d20 <SystemInit+0xb0>)
 8012ce6:	681b      	ldr	r3, [r3, #0]
 8012ce8:	4a0d      	ldr	r2, [pc, #52]	; (8012d20 <SystemInit+0xb0>)
 8012cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8012cee:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8012cf0:	4b0b      	ldr	r3, [pc, #44]	; (8012d20 <SystemInit+0xb0>)
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8012cf6:	4b0c      	ldr	r3, [pc, #48]	; (8012d28 <SystemInit+0xb8>)
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	4b0c      	ldr	r3, [pc, #48]	; (8012d2c <SystemInit+0xbc>)
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8012d02:	d202      	bcs.n	8012d0a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8012d04:	4b0a      	ldr	r3, [pc, #40]	; (8012d30 <SystemInit+0xc0>)
 8012d06:	2201      	movs	r2, #1
 8012d08:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8012d0a:	4b04      	ldr	r3, [pc, #16]	; (8012d1c <SystemInit+0xac>)
 8012d0c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8012d10:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8012d12:	bf00      	nop
 8012d14:	46bd      	mov	sp, r7
 8012d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1a:	4770      	bx	lr
 8012d1c:	e000ed00 	.word	0xe000ed00
 8012d20:	58024400 	.word	0x58024400
 8012d24:	eaf6ed7f 	.word	0xeaf6ed7f
 8012d28:	5c001000 	.word	0x5c001000
 8012d2c:	ffff0000 	.word	0xffff0000
 8012d30:	51008108 	.word	0x51008108

08012d34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8012d34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8012d6c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8012d38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8012d3a:	e003      	b.n	8012d44 <LoopCopyDataInit>

08012d3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8012d3c:	4b0c      	ldr	r3, [pc, #48]	; (8012d70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8012d3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8012d40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8012d42:	3104      	adds	r1, #4

08012d44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8012d44:	480b      	ldr	r0, [pc, #44]	; (8012d74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8012d46:	4b0c      	ldr	r3, [pc, #48]	; (8012d78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8012d48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8012d4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8012d4c:	d3f6      	bcc.n	8012d3c <CopyDataInit>
  ldr  r2, =_sbss
 8012d4e:	4a0b      	ldr	r2, [pc, #44]	; (8012d7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8012d50:	e002      	b.n	8012d58 <LoopFillZerobss>

08012d52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8012d52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8012d54:	f842 3b04 	str.w	r3, [r2], #4

08012d58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8012d58:	4b09      	ldr	r3, [pc, #36]	; (8012d80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8012d5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8012d5c:	d3f9      	bcc.n	8012d52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8012d5e:	f7ff ff87 	bl	8012c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8012d62:	f00b fc77 	bl	801e654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8012d66:	f7fe fd9d 	bl	80118a4 <main>
  bx  lr    
 8012d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8012d6c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8012d70:	0801fc70 	.word	0x0801fc70
  ldr  r0, =_sdata
 8012d74:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8012d78:	240001f4 	.word	0x240001f4
  ldr  r2, =_sbss
 8012d7c:	240001f8 	.word	0x240001f8
  ldr  r3, = _ebss
 8012d80:	24001fb4 	.word	0x24001fb4

08012d84 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8012d84:	e7fe      	b.n	8012d84 <ADC3_IRQHandler>
	...

08012d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012d8e:	2003      	movs	r0, #3
 8012d90:	f000 f98a 	bl	80130a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012d94:	f002 fdba 	bl	801590c <HAL_RCC_GetSysClockFreq>
 8012d98:	4601      	mov	r1, r0
 8012d9a:	4b15      	ldr	r3, [pc, #84]	; (8012df0 <HAL_Init+0x68>)
 8012d9c:	699b      	ldr	r3, [r3, #24]
 8012d9e:	0a1b      	lsrs	r3, r3, #8
 8012da0:	f003 030f 	and.w	r3, r3, #15
 8012da4:	4a13      	ldr	r2, [pc, #76]	; (8012df4 <HAL_Init+0x6c>)
 8012da6:	5cd3      	ldrb	r3, [r2, r3]
 8012da8:	f003 031f 	and.w	r3, r3, #31
 8012dac:	fa21 f303 	lsr.w	r3, r1, r3
 8012db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012db2:	4b0f      	ldr	r3, [pc, #60]	; (8012df0 <HAL_Init+0x68>)
 8012db4:	699b      	ldr	r3, [r3, #24]
 8012db6:	f003 030f 	and.w	r3, r3, #15
 8012dba:	4a0e      	ldr	r2, [pc, #56]	; (8012df4 <HAL_Init+0x6c>)
 8012dbc:	5cd3      	ldrb	r3, [r2, r3]
 8012dbe:	f003 031f 	and.w	r3, r3, #31
 8012dc2:	687a      	ldr	r2, [r7, #4]
 8012dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8012dc8:	4a0b      	ldr	r2, [pc, #44]	; (8012df8 <HAL_Init+0x70>)
 8012dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8012dcc:	4a0b      	ldr	r2, [pc, #44]	; (8012dfc <HAL_Init+0x74>)
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012dd2:	2000      	movs	r0, #0
 8012dd4:	f000 f814 	bl	8012e00 <HAL_InitTick>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d001      	beq.n	8012de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8012dde:	2301      	movs	r3, #1
 8012de0:	e002      	b.n	8012de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012de2:	f7ff fc7f 	bl	80126e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012de6:	2300      	movs	r3, #0
}
 8012de8:	4618      	mov	r0, r3
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	58024400 	.word	0x58024400
 8012df4:	0801fa18 	.word	0x0801fa18
 8012df8:	24000010 	.word	0x24000010
 8012dfc:	2400000c 	.word	0x2400000c

08012e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b082      	sub	sp, #8
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012e08:	4b15      	ldr	r3, [pc, #84]	; (8012e60 <HAL_InitTick+0x60>)
 8012e0a:	781b      	ldrb	r3, [r3, #0]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d101      	bne.n	8012e14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012e10:	2301      	movs	r3, #1
 8012e12:	e021      	b.n	8012e58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8012e14:	4b13      	ldr	r3, [pc, #76]	; (8012e64 <HAL_InitTick+0x64>)
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	4b11      	ldr	r3, [pc, #68]	; (8012e60 <HAL_InitTick+0x60>)
 8012e1a:	781b      	ldrb	r3, [r3, #0]
 8012e1c:	4619      	mov	r1, r3
 8012e1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8012e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f000 f96f 	bl	801310e <HAL_SYSTICK_Config>
 8012e30:	4603      	mov	r3, r0
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d001      	beq.n	8012e3a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8012e36:	2301      	movs	r3, #1
 8012e38:	e00e      	b.n	8012e58 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	2b0f      	cmp	r3, #15
 8012e3e:	d80a      	bhi.n	8012e56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012e40:	2200      	movs	r2, #0
 8012e42:	6879      	ldr	r1, [r7, #4]
 8012e44:	f04f 30ff 	mov.w	r0, #4294967295
 8012e48:	f000 f939 	bl	80130be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012e4c:	4a06      	ldr	r2, [pc, #24]	; (8012e68 <HAL_InitTick+0x68>)
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8012e52:	2300      	movs	r3, #0
 8012e54:	e000      	b.n	8012e58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8012e56:	2301      	movs	r3, #1
}
 8012e58:	4618      	mov	r0, r3
 8012e5a:	3708      	adds	r7, #8
 8012e5c:	46bd      	mov	sp, r7
 8012e5e:	bd80      	pop	{r7, pc}
 8012e60:	24000018 	.word	0x24000018
 8012e64:	2400000c 	.word	0x2400000c
 8012e68:	24000014 	.word	0x24000014

08012e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012e70:	4b06      	ldr	r3, [pc, #24]	; (8012e8c <HAL_IncTick+0x20>)
 8012e72:	781b      	ldrb	r3, [r3, #0]
 8012e74:	461a      	mov	r2, r3
 8012e76:	4b06      	ldr	r3, [pc, #24]	; (8012e90 <HAL_IncTick+0x24>)
 8012e78:	681b      	ldr	r3, [r3, #0]
 8012e7a:	4413      	add	r3, r2
 8012e7c:	4a04      	ldr	r2, [pc, #16]	; (8012e90 <HAL_IncTick+0x24>)
 8012e7e:	6013      	str	r3, [r2, #0]
}
 8012e80:	bf00      	nop
 8012e82:	46bd      	mov	sp, r7
 8012e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e88:	4770      	bx	lr
 8012e8a:	bf00      	nop
 8012e8c:	24000018 	.word	0x24000018
 8012e90:	240006e0 	.word	0x240006e0

08012e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012e94:	b480      	push	{r7}
 8012e96:	af00      	add	r7, sp, #0
  return uwTick;
 8012e98:	4b03      	ldr	r3, [pc, #12]	; (8012ea8 <HAL_GetTick+0x14>)
 8012e9a:	681b      	ldr	r3, [r3, #0]
}
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea4:	4770      	bx	lr
 8012ea6:	bf00      	nop
 8012ea8:	240006e0 	.word	0x240006e0

08012eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012eac:	b580      	push	{r7, lr}
 8012eae:	b084      	sub	sp, #16
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012eb4:	f7ff ffee 	bl	8012e94 <HAL_GetTick>
 8012eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ec4:	d005      	beq.n	8012ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012ec6:	4b09      	ldr	r3, [pc, #36]	; (8012eec <HAL_Delay+0x40>)
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	461a      	mov	r2, r3
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	4413      	add	r3, r2
 8012ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012ed2:	bf00      	nop
 8012ed4:	f7ff ffde 	bl	8012e94 <HAL_GetTick>
 8012ed8:	4602      	mov	r2, r0
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	1ad3      	subs	r3, r2, r3
 8012ede:	68fa      	ldr	r2, [r7, #12]
 8012ee0:	429a      	cmp	r2, r3
 8012ee2:	d8f7      	bhi.n	8012ed4 <HAL_Delay+0x28>
  {
  }
}
 8012ee4:	bf00      	nop
 8012ee6:	3710      	adds	r7, #16
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}
 8012eec:	24000018 	.word	0x24000018

08012ef0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012ef0:	b480      	push	{r7}
 8012ef2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012ef4:	4b03      	ldr	r3, [pc, #12]	; (8012f04 <HAL_GetREVID+0x14>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	0c1b      	lsrs	r3, r3, #16
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	46bd      	mov	sp, r7
 8012efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f02:	4770      	bx	lr
 8012f04:	5c001000 	.word	0x5c001000

08012f08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b085      	sub	sp, #20
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	f003 0307 	and.w	r3, r3, #7
 8012f16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012f18:	4b0b      	ldr	r3, [pc, #44]	; (8012f48 <__NVIC_SetPriorityGrouping+0x40>)
 8012f1a:	68db      	ldr	r3, [r3, #12]
 8012f1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012f1e:	68ba      	ldr	r2, [r7, #8]
 8012f20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012f24:	4013      	ands	r3, r2
 8012f26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012f2c:	68bb      	ldr	r3, [r7, #8]
 8012f2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8012f30:	4b06      	ldr	r3, [pc, #24]	; (8012f4c <__NVIC_SetPriorityGrouping+0x44>)
 8012f32:	4313      	orrs	r3, r2
 8012f34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012f36:	4a04      	ldr	r2, [pc, #16]	; (8012f48 <__NVIC_SetPriorityGrouping+0x40>)
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	60d3      	str	r3, [r2, #12]
}
 8012f3c:	bf00      	nop
 8012f3e:	3714      	adds	r7, #20
 8012f40:	46bd      	mov	sp, r7
 8012f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f46:	4770      	bx	lr
 8012f48:	e000ed00 	.word	0xe000ed00
 8012f4c:	05fa0000 	.word	0x05fa0000

08012f50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012f50:	b480      	push	{r7}
 8012f52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012f54:	4b04      	ldr	r3, [pc, #16]	; (8012f68 <__NVIC_GetPriorityGrouping+0x18>)
 8012f56:	68db      	ldr	r3, [r3, #12]
 8012f58:	0a1b      	lsrs	r3, r3, #8
 8012f5a:	f003 0307 	and.w	r3, r3, #7
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	46bd      	mov	sp, r7
 8012f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f66:	4770      	bx	lr
 8012f68:	e000ed00 	.word	0xe000ed00

08012f6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	b083      	sub	sp, #12
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	4603      	mov	r3, r0
 8012f74:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012f76:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	db0b      	blt.n	8012f96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012f7e:	88fb      	ldrh	r3, [r7, #6]
 8012f80:	f003 021f 	and.w	r2, r3, #31
 8012f84:	4907      	ldr	r1, [pc, #28]	; (8012fa4 <__NVIC_EnableIRQ+0x38>)
 8012f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012f8a:	095b      	lsrs	r3, r3, #5
 8012f8c:	2001      	movs	r0, #1
 8012f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8012f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012f96:	bf00      	nop
 8012f98:	370c      	adds	r7, #12
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa0:	4770      	bx	lr
 8012fa2:	bf00      	nop
 8012fa4:	e000e100 	.word	0xe000e100

08012fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012fa8:	b480      	push	{r7}
 8012faa:	b083      	sub	sp, #12
 8012fac:	af00      	add	r7, sp, #0
 8012fae:	4603      	mov	r3, r0
 8012fb0:	6039      	str	r1, [r7, #0]
 8012fb2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012fb4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fb8:	2b00      	cmp	r3, #0
 8012fba:	db0a      	blt.n	8012fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	b2da      	uxtb	r2, r3
 8012fc0:	490c      	ldr	r1, [pc, #48]	; (8012ff4 <__NVIC_SetPriority+0x4c>)
 8012fc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012fc6:	0112      	lsls	r2, r2, #4
 8012fc8:	b2d2      	uxtb	r2, r2
 8012fca:	440b      	add	r3, r1
 8012fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012fd0:	e00a      	b.n	8012fe8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	b2da      	uxtb	r2, r3
 8012fd6:	4908      	ldr	r1, [pc, #32]	; (8012ff8 <__NVIC_SetPriority+0x50>)
 8012fd8:	88fb      	ldrh	r3, [r7, #6]
 8012fda:	f003 030f 	and.w	r3, r3, #15
 8012fde:	3b04      	subs	r3, #4
 8012fe0:	0112      	lsls	r2, r2, #4
 8012fe2:	b2d2      	uxtb	r2, r2
 8012fe4:	440b      	add	r3, r1
 8012fe6:	761a      	strb	r2, [r3, #24]
}
 8012fe8:	bf00      	nop
 8012fea:	370c      	adds	r7, #12
 8012fec:	46bd      	mov	sp, r7
 8012fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff2:	4770      	bx	lr
 8012ff4:	e000e100 	.word	0xe000e100
 8012ff8:	e000ed00 	.word	0xe000ed00

08012ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012ffc:	b480      	push	{r7}
 8012ffe:	b089      	sub	sp, #36	; 0x24
 8013000:	af00      	add	r7, sp, #0
 8013002:	60f8      	str	r0, [r7, #12]
 8013004:	60b9      	str	r1, [r7, #8]
 8013006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f003 0307 	and.w	r3, r3, #7
 801300e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8013010:	69fb      	ldr	r3, [r7, #28]
 8013012:	f1c3 0307 	rsb	r3, r3, #7
 8013016:	2b04      	cmp	r3, #4
 8013018:	bf28      	it	cs
 801301a:	2304      	movcs	r3, #4
 801301c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801301e:	69fb      	ldr	r3, [r7, #28]
 8013020:	3304      	adds	r3, #4
 8013022:	2b06      	cmp	r3, #6
 8013024:	d902      	bls.n	801302c <NVIC_EncodePriority+0x30>
 8013026:	69fb      	ldr	r3, [r7, #28]
 8013028:	3b03      	subs	r3, #3
 801302a:	e000      	b.n	801302e <NVIC_EncodePriority+0x32>
 801302c:	2300      	movs	r3, #0
 801302e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013030:	f04f 32ff 	mov.w	r2, #4294967295
 8013034:	69bb      	ldr	r3, [r7, #24]
 8013036:	fa02 f303 	lsl.w	r3, r2, r3
 801303a:	43da      	mvns	r2, r3
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	401a      	ands	r2, r3
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8013044:	f04f 31ff 	mov.w	r1, #4294967295
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	fa01 f303 	lsl.w	r3, r1, r3
 801304e:	43d9      	mvns	r1, r3
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8013054:	4313      	orrs	r3, r2
         );
}
 8013056:	4618      	mov	r0, r3
 8013058:	3724      	adds	r7, #36	; 0x24
 801305a:	46bd      	mov	sp, r7
 801305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013060:	4770      	bx	lr
	...

08013064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8013064:	b580      	push	{r7, lr}
 8013066:	b082      	sub	sp, #8
 8013068:	af00      	add	r7, sp, #0
 801306a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	3b01      	subs	r3, #1
 8013070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8013074:	d301      	bcc.n	801307a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8013076:	2301      	movs	r3, #1
 8013078:	e00f      	b.n	801309a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801307a:	4a0a      	ldr	r2, [pc, #40]	; (80130a4 <SysTick_Config+0x40>)
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	3b01      	subs	r3, #1
 8013080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8013082:	210f      	movs	r1, #15
 8013084:	f04f 30ff 	mov.w	r0, #4294967295
 8013088:	f7ff ff8e 	bl	8012fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801308c:	4b05      	ldr	r3, [pc, #20]	; (80130a4 <SysTick_Config+0x40>)
 801308e:	2200      	movs	r2, #0
 8013090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8013092:	4b04      	ldr	r3, [pc, #16]	; (80130a4 <SysTick_Config+0x40>)
 8013094:	2207      	movs	r2, #7
 8013096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8013098:	2300      	movs	r3, #0
}
 801309a:	4618      	mov	r0, r3
 801309c:	3708      	adds	r7, #8
 801309e:	46bd      	mov	sp, r7
 80130a0:	bd80      	pop	{r7, pc}
 80130a2:	bf00      	nop
 80130a4:	e000e010 	.word	0xe000e010

080130a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b082      	sub	sp, #8
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f7ff ff29 	bl	8012f08 <__NVIC_SetPriorityGrouping>
}
 80130b6:	bf00      	nop
 80130b8:	3708      	adds	r7, #8
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}

080130be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80130be:	b580      	push	{r7, lr}
 80130c0:	b086      	sub	sp, #24
 80130c2:	af00      	add	r7, sp, #0
 80130c4:	4603      	mov	r3, r0
 80130c6:	60b9      	str	r1, [r7, #8]
 80130c8:	607a      	str	r2, [r7, #4]
 80130ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80130cc:	f7ff ff40 	bl	8012f50 <__NVIC_GetPriorityGrouping>
 80130d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80130d2:	687a      	ldr	r2, [r7, #4]
 80130d4:	68b9      	ldr	r1, [r7, #8]
 80130d6:	6978      	ldr	r0, [r7, #20]
 80130d8:	f7ff ff90 	bl	8012ffc <NVIC_EncodePriority>
 80130dc:	4602      	mov	r2, r0
 80130de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80130e2:	4611      	mov	r1, r2
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7ff ff5f 	bl	8012fa8 <__NVIC_SetPriority>
}
 80130ea:	bf00      	nop
 80130ec:	3718      	adds	r7, #24
 80130ee:	46bd      	mov	sp, r7
 80130f0:	bd80      	pop	{r7, pc}

080130f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b082      	sub	sp, #8
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	4603      	mov	r3, r0
 80130fa:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80130fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8013100:	4618      	mov	r0, r3
 8013102:	f7ff ff33 	bl	8012f6c <__NVIC_EnableIRQ>
}
 8013106:	bf00      	nop
 8013108:	3708      	adds	r7, #8
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b082      	sub	sp, #8
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f7ff ffa4 	bl	8013064 <SysTick_Config>
 801311c:	4603      	mov	r3, r0
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}
	...

08013128 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b084      	sub	sp, #16
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d101      	bne.n	801313a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8013136:	2301      	movs	r3, #1
 8013138:	e205      	b.n	8013546 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8013140:	b2db      	uxtb	r3, r3
 8013142:	2b02      	cmp	r3, #2
 8013144:	d004      	beq.n	8013150 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2280      	movs	r2, #128	; 0x80
 801314a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 801314c:	2301      	movs	r3, #1
 801314e:	e1fa      	b.n	8013546 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	4a8c      	ldr	r2, [pc, #560]	; (8013388 <HAL_DMA_Abort_IT+0x260>)
 8013156:	4293      	cmp	r3, r2
 8013158:	d04a      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	4a8b      	ldr	r2, [pc, #556]	; (801338c <HAL_DMA_Abort_IT+0x264>)
 8013160:	4293      	cmp	r3, r2
 8013162:	d045      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	4a89      	ldr	r2, [pc, #548]	; (8013390 <HAL_DMA_Abort_IT+0x268>)
 801316a:	4293      	cmp	r3, r2
 801316c:	d040      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	4a88      	ldr	r2, [pc, #544]	; (8013394 <HAL_DMA_Abort_IT+0x26c>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d03b      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	4a86      	ldr	r2, [pc, #536]	; (8013398 <HAL_DMA_Abort_IT+0x270>)
 801317e:	4293      	cmp	r3, r2
 8013180:	d036      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	4a85      	ldr	r2, [pc, #532]	; (801339c <HAL_DMA_Abort_IT+0x274>)
 8013188:	4293      	cmp	r3, r2
 801318a:	d031      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	681b      	ldr	r3, [r3, #0]
 8013190:	4a83      	ldr	r2, [pc, #524]	; (80133a0 <HAL_DMA_Abort_IT+0x278>)
 8013192:	4293      	cmp	r3, r2
 8013194:	d02c      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	4a82      	ldr	r2, [pc, #520]	; (80133a4 <HAL_DMA_Abort_IT+0x27c>)
 801319c:	4293      	cmp	r3, r2
 801319e:	d027      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	4a80      	ldr	r2, [pc, #512]	; (80133a8 <HAL_DMA_Abort_IT+0x280>)
 80131a6:	4293      	cmp	r3, r2
 80131a8:	d022      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	4a7f      	ldr	r2, [pc, #508]	; (80133ac <HAL_DMA_Abort_IT+0x284>)
 80131b0:	4293      	cmp	r3, r2
 80131b2:	d01d      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a7d      	ldr	r2, [pc, #500]	; (80133b0 <HAL_DMA_Abort_IT+0x288>)
 80131ba:	4293      	cmp	r3, r2
 80131bc:	d018      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	4a7c      	ldr	r2, [pc, #496]	; (80133b4 <HAL_DMA_Abort_IT+0x28c>)
 80131c4:	4293      	cmp	r3, r2
 80131c6:	d013      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	681b      	ldr	r3, [r3, #0]
 80131cc:	4a7a      	ldr	r2, [pc, #488]	; (80133b8 <HAL_DMA_Abort_IT+0x290>)
 80131ce:	4293      	cmp	r3, r2
 80131d0:	d00e      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	4a79      	ldr	r2, [pc, #484]	; (80133bc <HAL_DMA_Abort_IT+0x294>)
 80131d8:	4293      	cmp	r3, r2
 80131da:	d009      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	4a77      	ldr	r2, [pc, #476]	; (80133c0 <HAL_DMA_Abort_IT+0x298>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d004      	beq.n	80131f0 <HAL_DMA_Abort_IT+0xc8>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4a76      	ldr	r2, [pc, #472]	; (80133c4 <HAL_DMA_Abort_IT+0x29c>)
 80131ec:	4293      	cmp	r3, r2
 80131ee:	d101      	bne.n	80131f4 <HAL_DMA_Abort_IT+0xcc>
 80131f0:	2301      	movs	r3, #1
 80131f2:	e000      	b.n	80131f6 <HAL_DMA_Abort_IT+0xce>
 80131f4:	2300      	movs	r3, #0
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d065      	beq.n	80132c6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	2204      	movs	r2, #4
 80131fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	4a60      	ldr	r2, [pc, #384]	; (8013388 <HAL_DMA_Abort_IT+0x260>)
 8013208:	4293      	cmp	r3, r2
 801320a:	d04a      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	681b      	ldr	r3, [r3, #0]
 8013210:	4a5e      	ldr	r2, [pc, #376]	; (801338c <HAL_DMA_Abort_IT+0x264>)
 8013212:	4293      	cmp	r3, r2
 8013214:	d045      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	4a5d      	ldr	r2, [pc, #372]	; (8013390 <HAL_DMA_Abort_IT+0x268>)
 801321c:	4293      	cmp	r3, r2
 801321e:	d040      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	4a5b      	ldr	r2, [pc, #364]	; (8013394 <HAL_DMA_Abort_IT+0x26c>)
 8013226:	4293      	cmp	r3, r2
 8013228:	d03b      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a5a      	ldr	r2, [pc, #360]	; (8013398 <HAL_DMA_Abort_IT+0x270>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d036      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	681b      	ldr	r3, [r3, #0]
 8013238:	4a58      	ldr	r2, [pc, #352]	; (801339c <HAL_DMA_Abort_IT+0x274>)
 801323a:	4293      	cmp	r3, r2
 801323c:	d031      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	681b      	ldr	r3, [r3, #0]
 8013242:	4a57      	ldr	r2, [pc, #348]	; (80133a0 <HAL_DMA_Abort_IT+0x278>)
 8013244:	4293      	cmp	r3, r2
 8013246:	d02c      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	4a55      	ldr	r2, [pc, #340]	; (80133a4 <HAL_DMA_Abort_IT+0x27c>)
 801324e:	4293      	cmp	r3, r2
 8013250:	d027      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	4a54      	ldr	r2, [pc, #336]	; (80133a8 <HAL_DMA_Abort_IT+0x280>)
 8013258:	4293      	cmp	r3, r2
 801325a:	d022      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	681b      	ldr	r3, [r3, #0]
 8013260:	4a52      	ldr	r2, [pc, #328]	; (80133ac <HAL_DMA_Abort_IT+0x284>)
 8013262:	4293      	cmp	r3, r2
 8013264:	d01d      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	4a51      	ldr	r2, [pc, #324]	; (80133b0 <HAL_DMA_Abort_IT+0x288>)
 801326c:	4293      	cmp	r3, r2
 801326e:	d018      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	681b      	ldr	r3, [r3, #0]
 8013274:	4a4f      	ldr	r2, [pc, #316]	; (80133b4 <HAL_DMA_Abort_IT+0x28c>)
 8013276:	4293      	cmp	r3, r2
 8013278:	d013      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	681b      	ldr	r3, [r3, #0]
 801327e:	4a4e      	ldr	r2, [pc, #312]	; (80133b8 <HAL_DMA_Abort_IT+0x290>)
 8013280:	4293      	cmp	r3, r2
 8013282:	d00e      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a4c      	ldr	r2, [pc, #304]	; (80133bc <HAL_DMA_Abort_IT+0x294>)
 801328a:	4293      	cmp	r3, r2
 801328c:	d009      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a4b      	ldr	r2, [pc, #300]	; (80133c0 <HAL_DMA_Abort_IT+0x298>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d004      	beq.n	80132a2 <HAL_DMA_Abort_IT+0x17a>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a49      	ldr	r2, [pc, #292]	; (80133c4 <HAL_DMA_Abort_IT+0x29c>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d108      	bne.n	80132b4 <HAL_DMA_Abort_IT+0x18c>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	681a      	ldr	r2, [r3, #0]
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	f022 0201 	bic.w	r2, r2, #1
 80132b0:	601a      	str	r2, [r3, #0]
 80132b2:	e147      	b.n	8013544 <HAL_DMA_Abort_IT+0x41c>
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	681a      	ldr	r2, [r3, #0]
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	f022 0201 	bic.w	r2, r2, #1
 80132c2:	601a      	str	r2, [r3, #0]
 80132c4:	e13e      	b.n	8013544 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	681a      	ldr	r2, [r3, #0]
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	f022 020e 	bic.w	r2, r2, #14
 80132d4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	681b      	ldr	r3, [r3, #0]
 80132da:	4a2b      	ldr	r2, [pc, #172]	; (8013388 <HAL_DMA_Abort_IT+0x260>)
 80132dc:	4293      	cmp	r3, r2
 80132de:	d04a      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	4a29      	ldr	r2, [pc, #164]	; (801338c <HAL_DMA_Abort_IT+0x264>)
 80132e6:	4293      	cmp	r3, r2
 80132e8:	d045      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	681b      	ldr	r3, [r3, #0]
 80132ee:	4a28      	ldr	r2, [pc, #160]	; (8013390 <HAL_DMA_Abort_IT+0x268>)
 80132f0:	4293      	cmp	r3, r2
 80132f2:	d040      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4a26      	ldr	r2, [pc, #152]	; (8013394 <HAL_DMA_Abort_IT+0x26c>)
 80132fa:	4293      	cmp	r3, r2
 80132fc:	d03b      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	4a25      	ldr	r2, [pc, #148]	; (8013398 <HAL_DMA_Abort_IT+0x270>)
 8013304:	4293      	cmp	r3, r2
 8013306:	d036      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	681b      	ldr	r3, [r3, #0]
 801330c:	4a23      	ldr	r2, [pc, #140]	; (801339c <HAL_DMA_Abort_IT+0x274>)
 801330e:	4293      	cmp	r3, r2
 8013310:	d031      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	681b      	ldr	r3, [r3, #0]
 8013316:	4a22      	ldr	r2, [pc, #136]	; (80133a0 <HAL_DMA_Abort_IT+0x278>)
 8013318:	4293      	cmp	r3, r2
 801331a:	d02c      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	681b      	ldr	r3, [r3, #0]
 8013320:	4a20      	ldr	r2, [pc, #128]	; (80133a4 <HAL_DMA_Abort_IT+0x27c>)
 8013322:	4293      	cmp	r3, r2
 8013324:	d027      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4a1f      	ldr	r2, [pc, #124]	; (80133a8 <HAL_DMA_Abort_IT+0x280>)
 801332c:	4293      	cmp	r3, r2
 801332e:	d022      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4a1d      	ldr	r2, [pc, #116]	; (80133ac <HAL_DMA_Abort_IT+0x284>)
 8013336:	4293      	cmp	r3, r2
 8013338:	d01d      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	4a1c      	ldr	r2, [pc, #112]	; (80133b0 <HAL_DMA_Abort_IT+0x288>)
 8013340:	4293      	cmp	r3, r2
 8013342:	d018      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	681b      	ldr	r3, [r3, #0]
 8013348:	4a1a      	ldr	r2, [pc, #104]	; (80133b4 <HAL_DMA_Abort_IT+0x28c>)
 801334a:	4293      	cmp	r3, r2
 801334c:	d013      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	4a19      	ldr	r2, [pc, #100]	; (80133b8 <HAL_DMA_Abort_IT+0x290>)
 8013354:	4293      	cmp	r3, r2
 8013356:	d00e      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	4a17      	ldr	r2, [pc, #92]	; (80133bc <HAL_DMA_Abort_IT+0x294>)
 801335e:	4293      	cmp	r3, r2
 8013360:	d009      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4a16      	ldr	r2, [pc, #88]	; (80133c0 <HAL_DMA_Abort_IT+0x298>)
 8013368:	4293      	cmp	r3, r2
 801336a:	d004      	beq.n	8013376 <HAL_DMA_Abort_IT+0x24e>
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	4a14      	ldr	r2, [pc, #80]	; (80133c4 <HAL_DMA_Abort_IT+0x29c>)
 8013372:	4293      	cmp	r3, r2
 8013374:	d128      	bne.n	80133c8 <HAL_DMA_Abort_IT+0x2a0>
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	681b      	ldr	r3, [r3, #0]
 801337a:	681a      	ldr	r2, [r3, #0]
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	f022 0201 	bic.w	r2, r2, #1
 8013384:	601a      	str	r2, [r3, #0]
 8013386:	e027      	b.n	80133d8 <HAL_DMA_Abort_IT+0x2b0>
 8013388:	40020010 	.word	0x40020010
 801338c:	40020028 	.word	0x40020028
 8013390:	40020040 	.word	0x40020040
 8013394:	40020058 	.word	0x40020058
 8013398:	40020070 	.word	0x40020070
 801339c:	40020088 	.word	0x40020088
 80133a0:	400200a0 	.word	0x400200a0
 80133a4:	400200b8 	.word	0x400200b8
 80133a8:	40020410 	.word	0x40020410
 80133ac:	40020428 	.word	0x40020428
 80133b0:	40020440 	.word	0x40020440
 80133b4:	40020458 	.word	0x40020458
 80133b8:	40020470 	.word	0x40020470
 80133bc:	40020488 	.word	0x40020488
 80133c0:	400204a0 	.word	0x400204a0
 80133c4:	400204b8 	.word	0x400204b8
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	681a      	ldr	r2, [r3, #0]
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	f022 0201 	bic.w	r2, r2, #1
 80133d6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4a5c      	ldr	r2, [pc, #368]	; (8013550 <HAL_DMA_Abort_IT+0x428>)
 80133de:	4293      	cmp	r3, r2
 80133e0:	d072      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	681b      	ldr	r3, [r3, #0]
 80133e6:	4a5b      	ldr	r2, [pc, #364]	; (8013554 <HAL_DMA_Abort_IT+0x42c>)
 80133e8:	4293      	cmp	r3, r2
 80133ea:	d06d      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	681b      	ldr	r3, [r3, #0]
 80133f0:	4a59      	ldr	r2, [pc, #356]	; (8013558 <HAL_DMA_Abort_IT+0x430>)
 80133f2:	4293      	cmp	r3, r2
 80133f4:	d068      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	681b      	ldr	r3, [r3, #0]
 80133fa:	4a58      	ldr	r2, [pc, #352]	; (801355c <HAL_DMA_Abort_IT+0x434>)
 80133fc:	4293      	cmp	r3, r2
 80133fe:	d063      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	4a56      	ldr	r2, [pc, #344]	; (8013560 <HAL_DMA_Abort_IT+0x438>)
 8013406:	4293      	cmp	r3, r2
 8013408:	d05e      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	4a55      	ldr	r2, [pc, #340]	; (8013564 <HAL_DMA_Abort_IT+0x43c>)
 8013410:	4293      	cmp	r3, r2
 8013412:	d059      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	4a53      	ldr	r2, [pc, #332]	; (8013568 <HAL_DMA_Abort_IT+0x440>)
 801341a:	4293      	cmp	r3, r2
 801341c:	d054      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	4a52      	ldr	r2, [pc, #328]	; (801356c <HAL_DMA_Abort_IT+0x444>)
 8013424:	4293      	cmp	r3, r2
 8013426:	d04f      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	681b      	ldr	r3, [r3, #0]
 801342c:	4a50      	ldr	r2, [pc, #320]	; (8013570 <HAL_DMA_Abort_IT+0x448>)
 801342e:	4293      	cmp	r3, r2
 8013430:	d04a      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4a4f      	ldr	r2, [pc, #316]	; (8013574 <HAL_DMA_Abort_IT+0x44c>)
 8013438:	4293      	cmp	r3, r2
 801343a:	d045      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	4a4d      	ldr	r2, [pc, #308]	; (8013578 <HAL_DMA_Abort_IT+0x450>)
 8013442:	4293      	cmp	r3, r2
 8013444:	d040      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	4a4c      	ldr	r2, [pc, #304]	; (801357c <HAL_DMA_Abort_IT+0x454>)
 801344c:	4293      	cmp	r3, r2
 801344e:	d03b      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	4a4a      	ldr	r2, [pc, #296]	; (8013580 <HAL_DMA_Abort_IT+0x458>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d036      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a49      	ldr	r2, [pc, #292]	; (8013584 <HAL_DMA_Abort_IT+0x45c>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d031      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	4a47      	ldr	r2, [pc, #284]	; (8013588 <HAL_DMA_Abort_IT+0x460>)
 801346a:	4293      	cmp	r3, r2
 801346c:	d02c      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	681b      	ldr	r3, [r3, #0]
 8013472:	4a46      	ldr	r2, [pc, #280]	; (801358c <HAL_DMA_Abort_IT+0x464>)
 8013474:	4293      	cmp	r3, r2
 8013476:	d027      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	681b      	ldr	r3, [r3, #0]
 801347c:	4a44      	ldr	r2, [pc, #272]	; (8013590 <HAL_DMA_Abort_IT+0x468>)
 801347e:	4293      	cmp	r3, r2
 8013480:	d022      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a43      	ldr	r2, [pc, #268]	; (8013594 <HAL_DMA_Abort_IT+0x46c>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d01d      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a41      	ldr	r2, [pc, #260]	; (8013598 <HAL_DMA_Abort_IT+0x470>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d018      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4a40      	ldr	r2, [pc, #256]	; (801359c <HAL_DMA_Abort_IT+0x474>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d013      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4a3e      	ldr	r2, [pc, #248]	; (80135a0 <HAL_DMA_Abort_IT+0x478>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d00e      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	4a3d      	ldr	r2, [pc, #244]	; (80135a4 <HAL_DMA_Abort_IT+0x47c>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d009      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4a3b      	ldr	r2, [pc, #236]	; (80135a8 <HAL_DMA_Abort_IT+0x480>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d004      	beq.n	80134c8 <HAL_DMA_Abort_IT+0x3a0>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4a3a      	ldr	r2, [pc, #232]	; (80135ac <HAL_DMA_Abort_IT+0x484>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d101      	bne.n	80134cc <HAL_DMA_Abort_IT+0x3a4>
 80134c8:	2301      	movs	r3, #1
 80134ca:	e000      	b.n	80134ce <HAL_DMA_Abort_IT+0x3a6>
 80134cc:	2300      	movs	r3, #0
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d028      	beq.n	8013524 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134d6:	681a      	ldr	r2, [r3, #0]
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80134dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80134e0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80134e6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80134ec:	f003 031f 	and.w	r3, r3, #31
 80134f0:	2201      	movs	r2, #1
 80134f2:	409a      	lsls	r2, r3
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013500:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013506:	2b00      	cmp	r3, #0
 8013508:	d00c      	beq.n	8013524 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801350e:	681a      	ldr	r2, [r3, #0]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013518:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801351e:	687a      	ldr	r2, [r7, #4]
 8013520:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8013522:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2200      	movs	r2, #0
 8013528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2201      	movs	r2, #1
 8013530:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013538:	2b00      	cmp	r3, #0
 801353a:	d003      	beq.n	8013544 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8013544:	2300      	movs	r3, #0
}
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
 801354e:	bf00      	nop
 8013550:	40020010 	.word	0x40020010
 8013554:	40020028 	.word	0x40020028
 8013558:	40020040 	.word	0x40020040
 801355c:	40020058 	.word	0x40020058
 8013560:	40020070 	.word	0x40020070
 8013564:	40020088 	.word	0x40020088
 8013568:	400200a0 	.word	0x400200a0
 801356c:	400200b8 	.word	0x400200b8
 8013570:	40020410 	.word	0x40020410
 8013574:	40020428 	.word	0x40020428
 8013578:	40020440 	.word	0x40020440
 801357c:	40020458 	.word	0x40020458
 8013580:	40020470 	.word	0x40020470
 8013584:	40020488 	.word	0x40020488
 8013588:	400204a0 	.word	0x400204a0
 801358c:	400204b8 	.word	0x400204b8
 8013590:	58025408 	.word	0x58025408
 8013594:	5802541c 	.word	0x5802541c
 8013598:	58025430 	.word	0x58025430
 801359c:	58025444 	.word	0x58025444
 80135a0:	58025458 	.word	0x58025458
 80135a4:	5802546c 	.word	0x5802546c
 80135a8:	58025480 	.word	0x58025480
 80135ac:	58025494 	.word	0x58025494

080135b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80135b0:	b480      	push	{r7}
 80135b2:	b089      	sub	sp, #36	; 0x24
 80135b4:	af00      	add	r7, sp, #0
 80135b6:	6078      	str	r0, [r7, #4]
 80135b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80135ba:	2300      	movs	r3, #0
 80135bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80135be:	4b89      	ldr	r3, [pc, #548]	; (80137e4 <HAL_GPIO_Init+0x234>)
 80135c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80135c2:	e194      	b.n	80138ee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	681a      	ldr	r2, [r3, #0]
 80135c8:	2101      	movs	r1, #1
 80135ca:	69fb      	ldr	r3, [r7, #28]
 80135cc:	fa01 f303 	lsl.w	r3, r1, r3
 80135d0:	4013      	ands	r3, r2
 80135d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80135d4:	693b      	ldr	r3, [r7, #16]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	f000 8186 	beq.w	80138e8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80135dc:	683b      	ldr	r3, [r7, #0]
 80135de:	685b      	ldr	r3, [r3, #4]
 80135e0:	2b01      	cmp	r3, #1
 80135e2:	d00b      	beq.n	80135fc <HAL_GPIO_Init+0x4c>
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	685b      	ldr	r3, [r3, #4]
 80135e8:	2b02      	cmp	r3, #2
 80135ea:	d007      	beq.n	80135fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80135ec:	683b      	ldr	r3, [r7, #0]
 80135ee:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80135f0:	2b11      	cmp	r3, #17
 80135f2:	d003      	beq.n	80135fc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	2b12      	cmp	r3, #18
 80135fa:	d130      	bne.n	801365e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	689b      	ldr	r3, [r3, #8]
 8013600:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	005b      	lsls	r3, r3, #1
 8013606:	2203      	movs	r2, #3
 8013608:	fa02 f303 	lsl.w	r3, r2, r3
 801360c:	43db      	mvns	r3, r3
 801360e:	69ba      	ldr	r2, [r7, #24]
 8013610:	4013      	ands	r3, r2
 8013612:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013614:	683b      	ldr	r3, [r7, #0]
 8013616:	68da      	ldr	r2, [r3, #12]
 8013618:	69fb      	ldr	r3, [r7, #28]
 801361a:	005b      	lsls	r3, r3, #1
 801361c:	fa02 f303 	lsl.w	r3, r2, r3
 8013620:	69ba      	ldr	r2, [r7, #24]
 8013622:	4313      	orrs	r3, r2
 8013624:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	69ba      	ldr	r2, [r7, #24]
 801362a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013632:	2201      	movs	r2, #1
 8013634:	69fb      	ldr	r3, [r7, #28]
 8013636:	fa02 f303 	lsl.w	r3, r2, r3
 801363a:	43db      	mvns	r3, r3
 801363c:	69ba      	ldr	r2, [r7, #24]
 801363e:	4013      	ands	r3, r2
 8013640:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	685b      	ldr	r3, [r3, #4]
 8013646:	091b      	lsrs	r3, r3, #4
 8013648:	f003 0201 	and.w	r2, r3, #1
 801364c:	69fb      	ldr	r3, [r7, #28]
 801364e:	fa02 f303 	lsl.w	r3, r2, r3
 8013652:	69ba      	ldr	r2, [r7, #24]
 8013654:	4313      	orrs	r3, r2
 8013656:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	69ba      	ldr	r2, [r7, #24]
 801365c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	68db      	ldr	r3, [r3, #12]
 8013662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013664:	69fb      	ldr	r3, [r7, #28]
 8013666:	005b      	lsls	r3, r3, #1
 8013668:	2203      	movs	r2, #3
 801366a:	fa02 f303 	lsl.w	r3, r2, r3
 801366e:	43db      	mvns	r3, r3
 8013670:	69ba      	ldr	r2, [r7, #24]
 8013672:	4013      	ands	r3, r2
 8013674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013676:	683b      	ldr	r3, [r7, #0]
 8013678:	689a      	ldr	r2, [r3, #8]
 801367a:	69fb      	ldr	r3, [r7, #28]
 801367c:	005b      	lsls	r3, r3, #1
 801367e:	fa02 f303 	lsl.w	r3, r2, r3
 8013682:	69ba      	ldr	r2, [r7, #24]
 8013684:	4313      	orrs	r3, r2
 8013686:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	69ba      	ldr	r2, [r7, #24]
 801368c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801368e:	683b      	ldr	r3, [r7, #0]
 8013690:	685b      	ldr	r3, [r3, #4]
 8013692:	2b02      	cmp	r3, #2
 8013694:	d003      	beq.n	801369e <HAL_GPIO_Init+0xee>
 8013696:	683b      	ldr	r3, [r7, #0]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	2b12      	cmp	r3, #18
 801369c:	d123      	bne.n	80136e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801369e:	69fb      	ldr	r3, [r7, #28]
 80136a0:	08da      	lsrs	r2, r3, #3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	3208      	adds	r2, #8
 80136a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80136ac:	69fb      	ldr	r3, [r7, #28]
 80136ae:	f003 0307 	and.w	r3, r3, #7
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	220f      	movs	r2, #15
 80136b6:	fa02 f303 	lsl.w	r3, r2, r3
 80136ba:	43db      	mvns	r3, r3
 80136bc:	69ba      	ldr	r2, [r7, #24]
 80136be:	4013      	ands	r3, r2
 80136c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80136c2:	683b      	ldr	r3, [r7, #0]
 80136c4:	691a      	ldr	r2, [r3, #16]
 80136c6:	69fb      	ldr	r3, [r7, #28]
 80136c8:	f003 0307 	and.w	r3, r3, #7
 80136cc:	009b      	lsls	r3, r3, #2
 80136ce:	fa02 f303 	lsl.w	r3, r2, r3
 80136d2:	69ba      	ldr	r2, [r7, #24]
 80136d4:	4313      	orrs	r3, r2
 80136d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80136d8:	69fb      	ldr	r3, [r7, #28]
 80136da:	08da      	lsrs	r2, r3, #3
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	3208      	adds	r2, #8
 80136e0:	69b9      	ldr	r1, [r7, #24]
 80136e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80136ec:	69fb      	ldr	r3, [r7, #28]
 80136ee:	005b      	lsls	r3, r3, #1
 80136f0:	2203      	movs	r2, #3
 80136f2:	fa02 f303 	lsl.w	r3, r2, r3
 80136f6:	43db      	mvns	r3, r3
 80136f8:	69ba      	ldr	r2, [r7, #24]
 80136fa:	4013      	ands	r3, r2
 80136fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80136fe:	683b      	ldr	r3, [r7, #0]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	f003 0203 	and.w	r2, r3, #3
 8013706:	69fb      	ldr	r3, [r7, #28]
 8013708:	005b      	lsls	r3, r3, #1
 801370a:	fa02 f303 	lsl.w	r3, r2, r3
 801370e:	69ba      	ldr	r2, [r7, #24]
 8013710:	4313      	orrs	r3, r2
 8013712:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	69ba      	ldr	r2, [r7, #24]
 8013718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801371a:	683b      	ldr	r3, [r7, #0]
 801371c:	685b      	ldr	r3, [r3, #4]
 801371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013722:	2b00      	cmp	r3, #0
 8013724:	f000 80e0 	beq.w	80138e8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013728:	4b2f      	ldr	r3, [pc, #188]	; (80137e8 <HAL_GPIO_Init+0x238>)
 801372a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801372e:	4a2e      	ldr	r2, [pc, #184]	; (80137e8 <HAL_GPIO_Init+0x238>)
 8013730:	f043 0302 	orr.w	r3, r3, #2
 8013734:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8013738:	4b2b      	ldr	r3, [pc, #172]	; (80137e8 <HAL_GPIO_Init+0x238>)
 801373a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801373e:	f003 0302 	and.w	r3, r3, #2
 8013742:	60fb      	str	r3, [r7, #12]
 8013744:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013746:	4a29      	ldr	r2, [pc, #164]	; (80137ec <HAL_GPIO_Init+0x23c>)
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	089b      	lsrs	r3, r3, #2
 801374c:	3302      	adds	r3, #2
 801374e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013752:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013754:	69fb      	ldr	r3, [r7, #28]
 8013756:	f003 0303 	and.w	r3, r3, #3
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	220f      	movs	r2, #15
 801375e:	fa02 f303 	lsl.w	r3, r2, r3
 8013762:	43db      	mvns	r3, r3
 8013764:	69ba      	ldr	r2, [r7, #24]
 8013766:	4013      	ands	r3, r2
 8013768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	4a20      	ldr	r2, [pc, #128]	; (80137f0 <HAL_GPIO_Init+0x240>)
 801376e:	4293      	cmp	r3, r2
 8013770:	d052      	beq.n	8013818 <HAL_GPIO_Init+0x268>
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	4a1f      	ldr	r2, [pc, #124]	; (80137f4 <HAL_GPIO_Init+0x244>)
 8013776:	4293      	cmp	r3, r2
 8013778:	d031      	beq.n	80137de <HAL_GPIO_Init+0x22e>
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	4a1e      	ldr	r2, [pc, #120]	; (80137f8 <HAL_GPIO_Init+0x248>)
 801377e:	4293      	cmp	r3, r2
 8013780:	d02b      	beq.n	80137da <HAL_GPIO_Init+0x22a>
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	4a1d      	ldr	r2, [pc, #116]	; (80137fc <HAL_GPIO_Init+0x24c>)
 8013786:	4293      	cmp	r3, r2
 8013788:	d025      	beq.n	80137d6 <HAL_GPIO_Init+0x226>
 801378a:	687b      	ldr	r3, [r7, #4]
 801378c:	4a1c      	ldr	r2, [pc, #112]	; (8013800 <HAL_GPIO_Init+0x250>)
 801378e:	4293      	cmp	r3, r2
 8013790:	d01f      	beq.n	80137d2 <HAL_GPIO_Init+0x222>
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	4a1b      	ldr	r2, [pc, #108]	; (8013804 <HAL_GPIO_Init+0x254>)
 8013796:	4293      	cmp	r3, r2
 8013798:	d019      	beq.n	80137ce <HAL_GPIO_Init+0x21e>
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	4a1a      	ldr	r2, [pc, #104]	; (8013808 <HAL_GPIO_Init+0x258>)
 801379e:	4293      	cmp	r3, r2
 80137a0:	d013      	beq.n	80137ca <HAL_GPIO_Init+0x21a>
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	4a19      	ldr	r2, [pc, #100]	; (801380c <HAL_GPIO_Init+0x25c>)
 80137a6:	4293      	cmp	r3, r2
 80137a8:	d00d      	beq.n	80137c6 <HAL_GPIO_Init+0x216>
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	4a18      	ldr	r2, [pc, #96]	; (8013810 <HAL_GPIO_Init+0x260>)
 80137ae:	4293      	cmp	r3, r2
 80137b0:	d007      	beq.n	80137c2 <HAL_GPIO_Init+0x212>
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	4a17      	ldr	r2, [pc, #92]	; (8013814 <HAL_GPIO_Init+0x264>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d101      	bne.n	80137be <HAL_GPIO_Init+0x20e>
 80137ba:	2309      	movs	r3, #9
 80137bc:	e02d      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137be:	230a      	movs	r3, #10
 80137c0:	e02b      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137c2:	2308      	movs	r3, #8
 80137c4:	e029      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137c6:	2307      	movs	r3, #7
 80137c8:	e027      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137ca:	2306      	movs	r3, #6
 80137cc:	e025      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137ce:	2305      	movs	r3, #5
 80137d0:	e023      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137d2:	2304      	movs	r3, #4
 80137d4:	e021      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137d6:	2303      	movs	r3, #3
 80137d8:	e01f      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137da:	2302      	movs	r3, #2
 80137dc:	e01d      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137de:	2301      	movs	r3, #1
 80137e0:	e01b      	b.n	801381a <HAL_GPIO_Init+0x26a>
 80137e2:	bf00      	nop
 80137e4:	58000080 	.word	0x58000080
 80137e8:	58024400 	.word	0x58024400
 80137ec:	58000400 	.word	0x58000400
 80137f0:	58020000 	.word	0x58020000
 80137f4:	58020400 	.word	0x58020400
 80137f8:	58020800 	.word	0x58020800
 80137fc:	58020c00 	.word	0x58020c00
 8013800:	58021000 	.word	0x58021000
 8013804:	58021400 	.word	0x58021400
 8013808:	58021800 	.word	0x58021800
 801380c:	58021c00 	.word	0x58021c00
 8013810:	58022000 	.word	0x58022000
 8013814:	58022400 	.word	0x58022400
 8013818:	2300      	movs	r3, #0
 801381a:	69fa      	ldr	r2, [r7, #28]
 801381c:	f002 0203 	and.w	r2, r2, #3
 8013820:	0092      	lsls	r2, r2, #2
 8013822:	4093      	lsls	r3, r2
 8013824:	69ba      	ldr	r2, [r7, #24]
 8013826:	4313      	orrs	r3, r2
 8013828:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801382a:	4938      	ldr	r1, [pc, #224]	; (801390c <HAL_GPIO_Init+0x35c>)
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	089b      	lsrs	r3, r3, #2
 8013830:	3302      	adds	r3, #2
 8013832:	69ba      	ldr	r2, [r7, #24]
 8013834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8013838:	697b      	ldr	r3, [r7, #20]
 801383a:	681b      	ldr	r3, [r3, #0]
 801383c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801383e:	693b      	ldr	r3, [r7, #16]
 8013840:	43db      	mvns	r3, r3
 8013842:	69ba      	ldr	r2, [r7, #24]
 8013844:	4013      	ands	r3, r2
 8013846:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	685b      	ldr	r3, [r3, #4]
 801384c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013850:	2b00      	cmp	r3, #0
 8013852:	d003      	beq.n	801385c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8013854:	69ba      	ldr	r2, [r7, #24]
 8013856:	693b      	ldr	r3, [r7, #16]
 8013858:	4313      	orrs	r3, r2
 801385a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801385c:	697b      	ldr	r3, [r7, #20]
 801385e:	69ba      	ldr	r2, [r7, #24]
 8013860:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	685b      	ldr	r3, [r3, #4]
 8013866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013868:	693b      	ldr	r3, [r7, #16]
 801386a:	43db      	mvns	r3, r3
 801386c:	69ba      	ldr	r2, [r7, #24]
 801386e:	4013      	ands	r3, r2
 8013870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013872:	683b      	ldr	r3, [r7, #0]
 8013874:	685b      	ldr	r3, [r3, #4]
 8013876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801387a:	2b00      	cmp	r3, #0
 801387c:	d003      	beq.n	8013886 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801387e:	69ba      	ldr	r2, [r7, #24]
 8013880:	693b      	ldr	r3, [r7, #16]
 8013882:	4313      	orrs	r3, r2
 8013884:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	69ba      	ldr	r2, [r7, #24]
 801388a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013894:	693b      	ldr	r3, [r7, #16]
 8013896:	43db      	mvns	r3, r3
 8013898:	69ba      	ldr	r2, [r7, #24]
 801389a:	4013      	ands	r3, r2
 801389c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801389e:	683b      	ldr	r3, [r7, #0]
 80138a0:	685b      	ldr	r3, [r3, #4]
 80138a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d003      	beq.n	80138b2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80138aa:	69ba      	ldr	r2, [r7, #24]
 80138ac:	693b      	ldr	r3, [r7, #16]
 80138ae:	4313      	orrs	r3, r2
 80138b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80138b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80138ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80138be:	685b      	ldr	r3, [r3, #4]
 80138c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	43db      	mvns	r3, r3
 80138c6:	69ba      	ldr	r2, [r7, #24]
 80138c8:	4013      	ands	r3, r2
 80138ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80138cc:	683b      	ldr	r3, [r7, #0]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80138d4:	2b00      	cmp	r3, #0
 80138d6:	d003      	beq.n	80138e0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80138d8:	69ba      	ldr	r2, [r7, #24]
 80138da:	693b      	ldr	r3, [r7, #16]
 80138dc:	4313      	orrs	r3, r2
 80138de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80138e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80138e4:	69bb      	ldr	r3, [r7, #24]
 80138e6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80138e8:	69fb      	ldr	r3, [r7, #28]
 80138ea:	3301      	adds	r3, #1
 80138ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80138ee:	683b      	ldr	r3, [r7, #0]
 80138f0:	681a      	ldr	r2, [r3, #0]
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	fa22 f303 	lsr.w	r3, r2, r3
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	f47f ae63 	bne.w	80135c4 <HAL_GPIO_Init+0x14>
  }
}
 80138fe:	bf00      	nop
 8013900:	3724      	adds	r7, #36	; 0x24
 8013902:	46bd      	mov	sp, r7
 8013904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013908:	4770      	bx	lr
 801390a:	bf00      	nop
 801390c:	58000400 	.word	0x58000400

08013910 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013910:	b480      	push	{r7}
 8013912:	b085      	sub	sp, #20
 8013914:	af00      	add	r7, sp, #0
 8013916:	6078      	str	r0, [r7, #4]
 8013918:	460b      	mov	r3, r1
 801391a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	691a      	ldr	r2, [r3, #16]
 8013920:	887b      	ldrh	r3, [r7, #2]
 8013922:	4013      	ands	r3, r2
 8013924:	2b00      	cmp	r3, #0
 8013926:	d002      	beq.n	801392e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013928:	2301      	movs	r3, #1
 801392a:	73fb      	strb	r3, [r7, #15]
 801392c:	e001      	b.n	8013932 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801392e:	2300      	movs	r3, #0
 8013930:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013932:	7bfb      	ldrb	r3, [r7, #15]
}
 8013934:	4618      	mov	r0, r3
 8013936:	3714      	adds	r7, #20
 8013938:	46bd      	mov	sp, r7
 801393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393e:	4770      	bx	lr

08013940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
 8013948:	460b      	mov	r3, r1
 801394a:	807b      	strh	r3, [r7, #2]
 801394c:	4613      	mov	r3, r2
 801394e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013950:	787b      	ldrb	r3, [r7, #1]
 8013952:	2b00      	cmp	r3, #0
 8013954:	d003      	beq.n	801395e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013956:	887a      	ldrh	r2, [r7, #2]
 8013958:	687b      	ldr	r3, [r7, #4]
 801395a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801395c:	e003      	b.n	8013966 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801395e:	887b      	ldrh	r3, [r7, #2]
 8013960:	041a      	lsls	r2, r3, #16
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	619a      	str	r2, [r3, #24]
}
 8013966:	bf00      	nop
 8013968:	370c      	adds	r7, #12
 801396a:	46bd      	mov	sp, r7
 801396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013970:	4770      	bx	lr

08013972 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013972:	b580      	push	{r7, lr}
 8013974:	b082      	sub	sp, #8
 8013976:	af00      	add	r7, sp, #0
 8013978:	4603      	mov	r3, r0
 801397a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 801397c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013980:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8013984:	88fb      	ldrh	r3, [r7, #6]
 8013986:	4013      	ands	r3, r2
 8013988:	2b00      	cmp	r3, #0
 801398a:	d008      	beq.n	801399e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 801398c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013990:	88fb      	ldrh	r3, [r7, #6]
 8013992:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013996:	88fb      	ldrh	r3, [r7, #6]
 8013998:	4618      	mov	r0, r3
 801399a:	f7fd f815 	bl	80109c8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 801399e:	bf00      	nop
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80139a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139a8:	b08f      	sub	sp, #60	; 0x3c
 80139aa:	af0a      	add	r7, sp, #40	; 0x28
 80139ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d101      	bne.n	80139b8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80139b4:	2301      	movs	r3, #1
 80139b6:	e116      	b.n	8013be6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80139c4:	b2db      	uxtb	r3, r3
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d106      	bne.n	80139d8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f00a fb36 	bl	801e044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2203      	movs	r2, #3
 80139dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80139e0:	68bb      	ldr	r3, [r7, #8]
 80139e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80139e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	2200      	movs	r2, #0
 80139f0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	4618      	mov	r0, r3
 80139f8:	f007 fba3 	bl	801b142 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	603b      	str	r3, [r7, #0]
 8013a02:	687e      	ldr	r6, [r7, #4]
 8013a04:	466d      	mov	r5, sp
 8013a06:	f106 0410 	add.w	r4, r6, #16
 8013a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013a12:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013a16:	e885 0003 	stmia.w	r5, {r0, r1}
 8013a1a:	1d33      	adds	r3, r6, #4
 8013a1c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013a1e:	6838      	ldr	r0, [r7, #0]
 8013a20:	f007 fa7a 	bl	801af18 <USB_CoreInit>
 8013a24:	4603      	mov	r3, r0
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d005      	beq.n	8013a36 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	2202      	movs	r2, #2
 8013a2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013a32:	2301      	movs	r3, #1
 8013a34:	e0d7      	b.n	8013be6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	2100      	movs	r1, #0
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	f007 fb91 	bl	801b164 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013a42:	2300      	movs	r3, #0
 8013a44:	73fb      	strb	r3, [r7, #15]
 8013a46:	e04a      	b.n	8013ade <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013a48:	7bfa      	ldrb	r2, [r7, #15]
 8013a4a:	6879      	ldr	r1, [r7, #4]
 8013a4c:	4613      	mov	r3, r2
 8013a4e:	00db      	lsls	r3, r3, #3
 8013a50:	1a9b      	subs	r3, r3, r2
 8013a52:	009b      	lsls	r3, r3, #2
 8013a54:	440b      	add	r3, r1
 8013a56:	333d      	adds	r3, #61	; 0x3d
 8013a58:	2201      	movs	r2, #1
 8013a5a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8013a5c:	7bfa      	ldrb	r2, [r7, #15]
 8013a5e:	6879      	ldr	r1, [r7, #4]
 8013a60:	4613      	mov	r3, r2
 8013a62:	00db      	lsls	r3, r3, #3
 8013a64:	1a9b      	subs	r3, r3, r2
 8013a66:	009b      	lsls	r3, r3, #2
 8013a68:	440b      	add	r3, r1
 8013a6a:	333c      	adds	r3, #60	; 0x3c
 8013a6c:	7bfa      	ldrb	r2, [r7, #15]
 8013a6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8013a70:	7bfa      	ldrb	r2, [r7, #15]
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
 8013a74:	b298      	uxth	r0, r3
 8013a76:	6879      	ldr	r1, [r7, #4]
 8013a78:	4613      	mov	r3, r2
 8013a7a:	00db      	lsls	r3, r3, #3
 8013a7c:	1a9b      	subs	r3, r3, r2
 8013a7e:	009b      	lsls	r3, r3, #2
 8013a80:	440b      	add	r3, r1
 8013a82:	3342      	adds	r3, #66	; 0x42
 8013a84:	4602      	mov	r2, r0
 8013a86:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8013a88:	7bfa      	ldrb	r2, [r7, #15]
 8013a8a:	6879      	ldr	r1, [r7, #4]
 8013a8c:	4613      	mov	r3, r2
 8013a8e:	00db      	lsls	r3, r3, #3
 8013a90:	1a9b      	subs	r3, r3, r2
 8013a92:	009b      	lsls	r3, r3, #2
 8013a94:	440b      	add	r3, r1
 8013a96:	333f      	adds	r3, #63	; 0x3f
 8013a98:	2200      	movs	r2, #0
 8013a9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8013a9c:	7bfa      	ldrb	r2, [r7, #15]
 8013a9e:	6879      	ldr	r1, [r7, #4]
 8013aa0:	4613      	mov	r3, r2
 8013aa2:	00db      	lsls	r3, r3, #3
 8013aa4:	1a9b      	subs	r3, r3, r2
 8013aa6:	009b      	lsls	r3, r3, #2
 8013aa8:	440b      	add	r3, r1
 8013aaa:	3344      	adds	r3, #68	; 0x44
 8013aac:	2200      	movs	r2, #0
 8013aae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013ab0:	7bfa      	ldrb	r2, [r7, #15]
 8013ab2:	6879      	ldr	r1, [r7, #4]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	1a9b      	subs	r3, r3, r2
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	440b      	add	r3, r1
 8013abe:	3348      	adds	r3, #72	; 0x48
 8013ac0:	2200      	movs	r2, #0
 8013ac2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013ac4:	7bfa      	ldrb	r2, [r7, #15]
 8013ac6:	6879      	ldr	r1, [r7, #4]
 8013ac8:	4613      	mov	r3, r2
 8013aca:	00db      	lsls	r3, r3, #3
 8013acc:	1a9b      	subs	r3, r3, r2
 8013ace:	009b      	lsls	r3, r3, #2
 8013ad0:	440b      	add	r3, r1
 8013ad2:	3350      	adds	r3, #80	; 0x50
 8013ad4:	2200      	movs	r2, #0
 8013ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ad8:	7bfb      	ldrb	r3, [r7, #15]
 8013ada:	3301      	adds	r3, #1
 8013adc:	73fb      	strb	r3, [r7, #15]
 8013ade:	7bfa      	ldrb	r2, [r7, #15]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	685b      	ldr	r3, [r3, #4]
 8013ae4:	429a      	cmp	r2, r3
 8013ae6:	d3af      	bcc.n	8013a48 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013ae8:	2300      	movs	r3, #0
 8013aea:	73fb      	strb	r3, [r7, #15]
 8013aec:	e044      	b.n	8013b78 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8013aee:	7bfa      	ldrb	r2, [r7, #15]
 8013af0:	6879      	ldr	r1, [r7, #4]
 8013af2:	4613      	mov	r3, r2
 8013af4:	00db      	lsls	r3, r3, #3
 8013af6:	1a9b      	subs	r3, r3, r2
 8013af8:	009b      	lsls	r3, r3, #2
 8013afa:	440b      	add	r3, r1
 8013afc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8013b00:	2200      	movs	r2, #0
 8013b02:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013b04:	7bfa      	ldrb	r2, [r7, #15]
 8013b06:	6879      	ldr	r1, [r7, #4]
 8013b08:	4613      	mov	r3, r2
 8013b0a:	00db      	lsls	r3, r3, #3
 8013b0c:	1a9b      	subs	r3, r3, r2
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	440b      	add	r3, r1
 8013b12:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8013b16:	7bfa      	ldrb	r2, [r7, #15]
 8013b18:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8013b1a:	7bfa      	ldrb	r2, [r7, #15]
 8013b1c:	6879      	ldr	r1, [r7, #4]
 8013b1e:	4613      	mov	r3, r2
 8013b20:	00db      	lsls	r3, r3, #3
 8013b22:	1a9b      	subs	r3, r3, r2
 8013b24:	009b      	lsls	r3, r3, #2
 8013b26:	440b      	add	r3, r1
 8013b28:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8013b2c:	2200      	movs	r2, #0
 8013b2e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013b30:	7bfa      	ldrb	r2, [r7, #15]
 8013b32:	6879      	ldr	r1, [r7, #4]
 8013b34:	4613      	mov	r3, r2
 8013b36:	00db      	lsls	r3, r3, #3
 8013b38:	1a9b      	subs	r3, r3, r2
 8013b3a:	009b      	lsls	r3, r3, #2
 8013b3c:	440b      	add	r3, r1
 8013b3e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8013b42:	2200      	movs	r2, #0
 8013b44:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013b46:	7bfa      	ldrb	r2, [r7, #15]
 8013b48:	6879      	ldr	r1, [r7, #4]
 8013b4a:	4613      	mov	r3, r2
 8013b4c:	00db      	lsls	r3, r3, #3
 8013b4e:	1a9b      	subs	r3, r3, r2
 8013b50:	009b      	lsls	r3, r3, #2
 8013b52:	440b      	add	r3, r1
 8013b54:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013b58:	2200      	movs	r2, #0
 8013b5a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8013b5c:	7bfa      	ldrb	r2, [r7, #15]
 8013b5e:	6879      	ldr	r1, [r7, #4]
 8013b60:	4613      	mov	r3, r2
 8013b62:	00db      	lsls	r3, r3, #3
 8013b64:	1a9b      	subs	r3, r3, r2
 8013b66:	009b      	lsls	r3, r3, #2
 8013b68:	440b      	add	r3, r1
 8013b6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8013b6e:	2200      	movs	r2, #0
 8013b70:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b72:	7bfb      	ldrb	r3, [r7, #15]
 8013b74:	3301      	adds	r3, #1
 8013b76:	73fb      	strb	r3, [r7, #15]
 8013b78:	7bfa      	ldrb	r2, [r7, #15]
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	685b      	ldr	r3, [r3, #4]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d3b5      	bcc.n	8013aee <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	603b      	str	r3, [r7, #0]
 8013b88:	687e      	ldr	r6, [r7, #4]
 8013b8a:	466d      	mov	r5, sp
 8013b8c:	f106 0410 	add.w	r4, r6, #16
 8013b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013b96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013b98:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013b9c:	e885 0003 	stmia.w	r5, {r0, r1}
 8013ba0:	1d33      	adds	r3, r6, #4
 8013ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013ba4:	6838      	ldr	r0, [r7, #0]
 8013ba6:	f007 fb07 	bl	801b1b8 <USB_DevInit>
 8013baa:	4603      	mov	r3, r0
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d005      	beq.n	8013bbc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2202      	movs	r2, #2
 8013bb4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013bb8:	2301      	movs	r3, #1
 8013bba:	e014      	b.n	8013be6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	2200      	movs	r2, #0
 8013bc0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8013bc4:	687b      	ldr	r3, [r7, #4]
 8013bc6:	2201      	movs	r2, #1
 8013bc8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bd0:	2b01      	cmp	r3, #1
 8013bd2:	d102      	bne.n	8013bda <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013bd4:	6878      	ldr	r0, [r7, #4]
 8013bd6:	f001 f891 	bl	8014cfc <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	4618      	mov	r0, r3
 8013be0:	f008 faee 	bl	801c1c0 <USB_DevDisconnect>

  return HAL_OK;
 8013be4:	2300      	movs	r3, #0
}
 8013be6:	4618      	mov	r0, r3
 8013be8:	3714      	adds	r7, #20
 8013bea:	46bd      	mov	sp, r7
 8013bec:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013bee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8013bee:	b580      	push	{r7, lr}
 8013bf0:	b084      	sub	sp, #16
 8013bf2:	af00      	add	r7, sp, #0
 8013bf4:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013c02:	2b01      	cmp	r3, #1
 8013c04:	d101      	bne.n	8013c0a <HAL_PCD_Start+0x1c>
 8013c06:	2302      	movs	r3, #2
 8013c08:	e020      	b.n	8013c4c <HAL_PCD_Start+0x5e>
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	2201      	movs	r2, #1
 8013c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013c16:	2b01      	cmp	r3, #1
 8013c18:	d109      	bne.n	8013c2e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	d005      	beq.n	8013c2e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	681b      	ldr	r3, [r3, #0]
 8013c32:	4618      	mov	r0, r3
 8013c34:	f008 faac 	bl	801c190 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	4618      	mov	r0, r3
 8013c3e:	f007 fa6f 	bl	801b120 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	2200      	movs	r2, #0
 8013c46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8013c4a:	2300      	movs	r3, #0
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3710      	adds	r7, #16
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}

08013c54 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013c54:	b590      	push	{r4, r7, lr}
 8013c56:	b08d      	sub	sp, #52	; 0x34
 8013c58:	af00      	add	r7, sp, #0
 8013c5a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c62:	6a3b      	ldr	r3, [r7, #32]
 8013c64:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f008 fb53 	bl	801c316 <USB_GetMode>
 8013c70:	4603      	mov	r3, r0
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	f040 83ca 	bne.w	801440c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	f008 fab7 	bl	801c1f0 <USB_ReadInterrupts>
 8013c82:	4603      	mov	r3, r0
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f000 83c0 	beq.w	801440a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	4618      	mov	r0, r3
 8013c90:	f008 faae 	bl	801c1f0 <USB_ReadInterrupts>
 8013c94:	4603      	mov	r3, r0
 8013c96:	f003 0302 	and.w	r3, r3, #2
 8013c9a:	2b02      	cmp	r3, #2
 8013c9c:	d107      	bne.n	8013cae <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	695a      	ldr	r2, [r3, #20]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	f002 0202 	and.w	r2, r2, #2
 8013cac:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	f008 fa9c 	bl	801c1f0 <USB_ReadInterrupts>
 8013cb8:	4603      	mov	r3, r0
 8013cba:	f003 0310 	and.w	r3, r3, #16
 8013cbe:	2b10      	cmp	r3, #16
 8013cc0:	d161      	bne.n	8013d86 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	699a      	ldr	r2, [r3, #24]
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	f022 0210 	bic.w	r2, r2, #16
 8013cd0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8013cd2:	6a3b      	ldr	r3, [r7, #32]
 8013cd4:	6a1b      	ldr	r3, [r3, #32]
 8013cd6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8013cd8:	69bb      	ldr	r3, [r7, #24]
 8013cda:	f003 020f 	and.w	r2, r3, #15
 8013cde:	4613      	mov	r3, r2
 8013ce0:	00db      	lsls	r3, r3, #3
 8013ce2:	1a9b      	subs	r3, r3, r2
 8013ce4:	009b      	lsls	r3, r3, #2
 8013ce6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013cea:	687a      	ldr	r2, [r7, #4]
 8013cec:	4413      	add	r3, r2
 8013cee:	3304      	adds	r3, #4
 8013cf0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8013cf2:	69bb      	ldr	r3, [r7, #24]
 8013cf4:	0c5b      	lsrs	r3, r3, #17
 8013cf6:	f003 030f 	and.w	r3, r3, #15
 8013cfa:	2b02      	cmp	r3, #2
 8013cfc:	d124      	bne.n	8013d48 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8013cfe:	69ba      	ldr	r2, [r7, #24]
 8013d00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8013d04:	4013      	ands	r3, r2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d035      	beq.n	8013d76 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8013d0e:	69bb      	ldr	r3, [r7, #24]
 8013d10:	091b      	lsrs	r3, r3, #4
 8013d12:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013d14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d18:	b29b      	uxth	r3, r3
 8013d1a:	461a      	mov	r2, r3
 8013d1c:	6a38      	ldr	r0, [r7, #32]
 8013d1e:	f008 f914 	bl	801bf4a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d22:	697b      	ldr	r3, [r7, #20]
 8013d24:	68da      	ldr	r2, [r3, #12]
 8013d26:	69bb      	ldr	r3, [r7, #24]
 8013d28:	091b      	lsrs	r3, r3, #4
 8013d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d2e:	441a      	add	r2, r3
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d34:	697b      	ldr	r3, [r7, #20]
 8013d36:	699a      	ldr	r2, [r3, #24]
 8013d38:	69bb      	ldr	r3, [r7, #24]
 8013d3a:	091b      	lsrs	r3, r3, #4
 8013d3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d40:	441a      	add	r2, r3
 8013d42:	697b      	ldr	r3, [r7, #20]
 8013d44:	619a      	str	r2, [r3, #24]
 8013d46:	e016      	b.n	8013d76 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8013d48:	69bb      	ldr	r3, [r7, #24]
 8013d4a:	0c5b      	lsrs	r3, r3, #17
 8013d4c:	f003 030f 	and.w	r3, r3, #15
 8013d50:	2b06      	cmp	r3, #6
 8013d52:	d110      	bne.n	8013d76 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013d5a:	2208      	movs	r2, #8
 8013d5c:	4619      	mov	r1, r3
 8013d5e:	6a38      	ldr	r0, [r7, #32]
 8013d60:	f008 f8f3 	bl	801bf4a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013d64:	697b      	ldr	r3, [r7, #20]
 8013d66:	699a      	ldr	r2, [r3, #24]
 8013d68:	69bb      	ldr	r3, [r7, #24]
 8013d6a:	091b      	lsrs	r3, r3, #4
 8013d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013d70:	441a      	add	r2, r3
 8013d72:	697b      	ldr	r3, [r7, #20]
 8013d74:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	699a      	ldr	r2, [r3, #24]
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	f042 0210 	orr.w	r2, r2, #16
 8013d84:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f008 fa30 	bl	801c1f0 <USB_ReadInterrupts>
 8013d90:	4603      	mov	r3, r0
 8013d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013d96:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8013d9a:	d16e      	bne.n	8013e7a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4618      	mov	r0, r3
 8013da6:	f008 fa36 	bl	801c216 <USB_ReadDevAllOutEpInterrupt>
 8013daa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8013dac:	e062      	b.n	8013e74 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8013dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013db0:	f003 0301 	and.w	r3, r3, #1
 8013db4:	2b00      	cmp	r3, #0
 8013db6:	d057      	beq.n	8013e68 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013dbe:	b2d2      	uxtb	r2, r2
 8013dc0:	4611      	mov	r1, r2
 8013dc2:	4618      	mov	r0, r3
 8013dc4:	f008 fa5b 	bl	801c27e <USB_ReadDevOutEPInterrupt>
 8013dc8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8013dca:	693b      	ldr	r3, [r7, #16]
 8013dcc:	f003 0301 	and.w	r3, r3, #1
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d00c      	beq.n	8013dee <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8013dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dd6:	015a      	lsls	r2, r3, #5
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	4413      	add	r3, r2
 8013ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013de0:	461a      	mov	r2, r3
 8013de2:	2301      	movs	r3, #1
 8013de4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8013de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013de8:	6878      	ldr	r0, [r7, #4]
 8013dea:	f000 fddd 	bl	80149a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8013dee:	693b      	ldr	r3, [r7, #16]
 8013df0:	f003 0308 	and.w	r3, r3, #8
 8013df4:	2b00      	cmp	r3, #0
 8013df6:	d00c      	beq.n	8013e12 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8013df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013dfa:	015a      	lsls	r2, r3, #5
 8013dfc:	69fb      	ldr	r3, [r7, #28]
 8013dfe:	4413      	add	r3, r2
 8013e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e04:	461a      	mov	r2, r3
 8013e06:	2308      	movs	r3, #8
 8013e08:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8013e0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f000 fed7 	bl	8014bc0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8013e12:	693b      	ldr	r3, [r7, #16]
 8013e14:	f003 0310 	and.w	r3, r3, #16
 8013e18:	2b00      	cmp	r3, #0
 8013e1a:	d008      	beq.n	8013e2e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8013e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e1e:	015a      	lsls	r2, r3, #5
 8013e20:	69fb      	ldr	r3, [r7, #28]
 8013e22:	4413      	add	r3, r2
 8013e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e28:	461a      	mov	r2, r3
 8013e2a:	2310      	movs	r3, #16
 8013e2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8013e2e:	693b      	ldr	r3, [r7, #16]
 8013e30:	f003 0320 	and.w	r3, r3, #32
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d008      	beq.n	8013e4a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e3a:	015a      	lsls	r2, r3, #5
 8013e3c:	69fb      	ldr	r3, [r7, #28]
 8013e3e:	4413      	add	r3, r2
 8013e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e44:	461a      	mov	r2, r3
 8013e46:	2320      	movs	r3, #32
 8013e48:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8013e4a:	693b      	ldr	r3, [r7, #16]
 8013e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d009      	beq.n	8013e68 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8013e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e56:	015a      	lsls	r2, r3, #5
 8013e58:	69fb      	ldr	r3, [r7, #28]
 8013e5a:	4413      	add	r3, r2
 8013e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e60:	461a      	mov	r2, r3
 8013e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013e66:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8013e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e6a:	3301      	adds	r3, #1
 8013e6c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e70:	085b      	lsrs	r3, r3, #1
 8013e72:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8013e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d199      	bne.n	8013dae <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	4618      	mov	r0, r3
 8013e80:	f008 f9b6 	bl	801c1f0 <USB_ReadInterrupts>
 8013e84:	4603      	mov	r3, r0
 8013e86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013e8a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013e8e:	f040 80c0 	bne.w	8014012 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	4618      	mov	r0, r3
 8013e98:	f008 f9d7 	bl	801c24a <USB_ReadDevAllInEpInterrupt>
 8013e9c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8013ea2:	e0b2      	b.n	801400a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8013ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea6:	f003 0301 	and.w	r3, r3, #1
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	f000 80a7 	beq.w	8013ffe <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013eb6:	b2d2      	uxtb	r2, r2
 8013eb8:	4611      	mov	r1, r2
 8013eba:	4618      	mov	r0, r3
 8013ebc:	f008 f9fd 	bl	801c2ba <USB_ReadDevInEPInterrupt>
 8013ec0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8013ec2:	693b      	ldr	r3, [r7, #16]
 8013ec4:	f003 0301 	and.w	r3, r3, #1
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	d057      	beq.n	8013f7c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	f003 030f 	and.w	r3, r3, #15
 8013ed2:	2201      	movs	r2, #1
 8013ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8013ed8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8013eda:	69fb      	ldr	r3, [r7, #28]
 8013edc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013ee2:	68fb      	ldr	r3, [r7, #12]
 8013ee4:	43db      	mvns	r3, r3
 8013ee6:	69f9      	ldr	r1, [r7, #28]
 8013ee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013eec:	4013      	ands	r3, r2
 8013eee:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8013ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ef2:	015a      	lsls	r2, r3, #5
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013efc:	461a      	mov	r2, r3
 8013efe:	2301      	movs	r3, #1
 8013f00:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	691b      	ldr	r3, [r3, #16]
 8013f06:	2b01      	cmp	r3, #1
 8013f08:	d132      	bne.n	8013f70 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8013f0a:	6879      	ldr	r1, [r7, #4]
 8013f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f0e:	4613      	mov	r3, r2
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	1a9b      	subs	r3, r3, r2
 8013f14:	009b      	lsls	r3, r3, #2
 8013f16:	440b      	add	r3, r1
 8013f18:	3348      	adds	r3, #72	; 0x48
 8013f1a:	6819      	ldr	r1, [r3, #0]
 8013f1c:	6878      	ldr	r0, [r7, #4]
 8013f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f20:	4613      	mov	r3, r2
 8013f22:	00db      	lsls	r3, r3, #3
 8013f24:	1a9b      	subs	r3, r3, r2
 8013f26:	009b      	lsls	r3, r3, #2
 8013f28:	4403      	add	r3, r0
 8013f2a:	3344      	adds	r3, #68	; 0x44
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4419      	add	r1, r3
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f34:	4613      	mov	r3, r2
 8013f36:	00db      	lsls	r3, r3, #3
 8013f38:	1a9b      	subs	r3, r3, r2
 8013f3a:	009b      	lsls	r3, r3, #2
 8013f3c:	4403      	add	r3, r0
 8013f3e:	3348      	adds	r3, #72	; 0x48
 8013f40:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8013f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d113      	bne.n	8013f70 <HAL_PCD_IRQHandler+0x31c>
 8013f48:	6879      	ldr	r1, [r7, #4]
 8013f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	00db      	lsls	r3, r3, #3
 8013f50:	1a9b      	subs	r3, r3, r2
 8013f52:	009b      	lsls	r3, r3, #2
 8013f54:	440b      	add	r3, r1
 8013f56:	3350      	adds	r3, #80	; 0x50
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d108      	bne.n	8013f70 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	6818      	ldr	r0, [r3, #0]
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013f68:	461a      	mov	r2, r3
 8013f6a:	2101      	movs	r1, #1
 8013f6c:	f008 fa06 	bl	801c37c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8013f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f72:	b2db      	uxtb	r3, r3
 8013f74:	4619      	mov	r1, r3
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f00a f8e3 	bl	801e142 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8013f7c:	693b      	ldr	r3, [r7, #16]
 8013f7e:	f003 0308 	and.w	r3, r3, #8
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d008      	beq.n	8013f98 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8013f86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f88:	015a      	lsls	r2, r3, #5
 8013f8a:	69fb      	ldr	r3, [r7, #28]
 8013f8c:	4413      	add	r3, r2
 8013f8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f92:	461a      	mov	r2, r3
 8013f94:	2308      	movs	r3, #8
 8013f96:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8013f98:	693b      	ldr	r3, [r7, #16]
 8013f9a:	f003 0310 	and.w	r3, r3, #16
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d008      	beq.n	8013fb4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8013fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa4:	015a      	lsls	r2, r3, #5
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	4413      	add	r3, r2
 8013faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fae:	461a      	mov	r2, r3
 8013fb0:	2310      	movs	r3, #16
 8013fb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8013fb4:	693b      	ldr	r3, [r7, #16]
 8013fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d008      	beq.n	8013fd0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8013fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fc0:	015a      	lsls	r2, r3, #5
 8013fc2:	69fb      	ldr	r3, [r7, #28]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fca:	461a      	mov	r2, r3
 8013fcc:	2340      	movs	r3, #64	; 0x40
 8013fce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8013fd0:	693b      	ldr	r3, [r7, #16]
 8013fd2:	f003 0302 	and.w	r3, r3, #2
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d008      	beq.n	8013fec <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8013fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fdc:	015a      	lsls	r2, r3, #5
 8013fde:	69fb      	ldr	r3, [r7, #28]
 8013fe0:	4413      	add	r3, r2
 8013fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fe6:	461a      	mov	r2, r3
 8013fe8:	2302      	movs	r3, #2
 8013fea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d003      	beq.n	8013ffe <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8013ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f000 fc48 	bl	801488e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8013ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014000:	3301      	adds	r3, #1
 8014002:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8014004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014006:	085b      	lsrs	r3, r3, #1
 8014008:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801400a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400c:	2b00      	cmp	r3, #0
 801400e:	f47f af49 	bne.w	8013ea4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	4618      	mov	r0, r3
 8014018:	f008 f8ea 	bl	801c1f0 <USB_ReadInterrupts>
 801401c:	4603      	mov	r3, r0
 801401e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014022:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014026:	d122      	bne.n	801406e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8014028:	69fb      	ldr	r3, [r7, #28]
 801402a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801402e:	685b      	ldr	r3, [r3, #4]
 8014030:	69fa      	ldr	r2, [r7, #28]
 8014032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014036:	f023 0301 	bic.w	r3, r3, #1
 801403a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8014042:	2b01      	cmp	r3, #1
 8014044:	d108      	bne.n	8014058 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	2200      	movs	r2, #0
 801404a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 801404e:	2100      	movs	r1, #0
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 fe77 	bl	8014d44 <HAL_PCDEx_LPM_Callback>
 8014056:	e002      	b.n	801405e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8014058:	6878      	ldr	r0, [r7, #4]
 801405a:	f00a f8e9 	bl	801e230 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	695a      	ldr	r2, [r3, #20]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801406c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4618      	mov	r0, r3
 8014074:	f008 f8bc 	bl	801c1f0 <USB_ReadInterrupts>
 8014078:	4603      	mov	r3, r0
 801407a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801407e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014082:	d112      	bne.n	80140aa <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801408a:	689b      	ldr	r3, [r3, #8]
 801408c:	f003 0301 	and.w	r3, r3, #1
 8014090:	2b01      	cmp	r3, #1
 8014092:	d102      	bne.n	801409a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8014094:	6878      	ldr	r0, [r7, #4]
 8014096:	f00a f8a5 	bl	801e1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	695a      	ldr	r2, [r3, #20]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80140a8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4618      	mov	r0, r3
 80140b0:	f008 f89e 	bl	801c1f0 <USB_ReadInterrupts>
 80140b4:	4603      	mov	r3, r0
 80140b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80140ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80140be:	d121      	bne.n	8014104 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	681b      	ldr	r3, [r3, #0]
 80140c4:	695a      	ldr	r2, [r3, #20]
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80140ce:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d111      	bne.n	80140fe <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	2201      	movs	r2, #1
 80140de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	681b      	ldr	r3, [r3, #0]
 80140e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80140e8:	089b      	lsrs	r3, r3, #2
 80140ea:	f003 020f 	and.w	r2, r3, #15
 80140ee:	687b      	ldr	r3, [r7, #4]
 80140f0:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80140f4:	2101      	movs	r1, #1
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f000 fe24 	bl	8014d44 <HAL_PCDEx_LPM_Callback>
 80140fc:	e002      	b.n	8014104 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f00a f870 	bl	801e1e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	681b      	ldr	r3, [r3, #0]
 8014108:	4618      	mov	r0, r3
 801410a:	f008 f871 	bl	801c1f0 <USB_ReadInterrupts>
 801410e:	4603      	mov	r3, r0
 8014110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8014114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014118:	f040 80c7 	bne.w	80142aa <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 801411c:	69fb      	ldr	r3, [r7, #28]
 801411e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014122:	685b      	ldr	r3, [r3, #4]
 8014124:	69fa      	ldr	r2, [r7, #28]
 8014126:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801412a:	f023 0301 	bic.w	r3, r3, #1
 801412e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	681b      	ldr	r3, [r3, #0]
 8014134:	2110      	movs	r1, #16
 8014136:	4618      	mov	r0, r3
 8014138:	f007 f99c 	bl	801b474 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 801413c:	2300      	movs	r3, #0
 801413e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014140:	e056      	b.n	80141f0 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8014142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014144:	015a      	lsls	r2, r3, #5
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	4413      	add	r3, r2
 801414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801414e:	461a      	mov	r2, r3
 8014150:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8014154:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014158:	015a      	lsls	r2, r3, #5
 801415a:	69fb      	ldr	r3, [r7, #28]
 801415c:	4413      	add	r3, r2
 801415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014166:	0151      	lsls	r1, r2, #5
 8014168:	69fa      	ldr	r2, [r7, #28]
 801416a:	440a      	add	r2, r1
 801416c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014170:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014174:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014178:	015a      	lsls	r2, r3, #5
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	4413      	add	r3, r2
 801417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014182:	681b      	ldr	r3, [r3, #0]
 8014184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014186:	0151      	lsls	r1, r2, #5
 8014188:	69fa      	ldr	r2, [r7, #28]
 801418a:	440a      	add	r2, r1
 801418c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014190:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014194:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8014196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014198:	015a      	lsls	r2, r3, #5
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	4413      	add	r3, r2
 801419e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141a2:	461a      	mov	r2, r3
 80141a4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80141a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80141aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ac:	015a      	lsls	r2, r3, #5
 80141ae:	69fb      	ldr	r3, [r7, #28]
 80141b0:	4413      	add	r3, r2
 80141b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141ba:	0151      	lsls	r1, r2, #5
 80141bc:	69fa      	ldr	r2, [r7, #28]
 80141be:	440a      	add	r2, r1
 80141c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80141c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80141ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141cc:	015a      	lsls	r2, r3, #5
 80141ce:	69fb      	ldr	r3, [r7, #28]
 80141d0:	4413      	add	r3, r2
 80141d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141da:	0151      	lsls	r1, r2, #5
 80141dc:	69fa      	ldr	r2, [r7, #28]
 80141de:	440a      	add	r2, r1
 80141e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80141e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80141ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ec:	3301      	adds	r3, #1
 80141ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	685b      	ldr	r3, [r3, #4]
 80141f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d3a3      	bcc.n	8014142 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014200:	69db      	ldr	r3, [r3, #28]
 8014202:	69fa      	ldr	r2, [r7, #28]
 8014204:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014208:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 801420c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014212:	2b00      	cmp	r3, #0
 8014214:	d016      	beq.n	8014244 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801421c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014220:	69fa      	ldr	r2, [r7, #28]
 8014222:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014226:	f043 030b 	orr.w	r3, r3, #11
 801422a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 801422e:	69fb      	ldr	r3, [r7, #28]
 8014230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014236:	69fa      	ldr	r2, [r7, #28]
 8014238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801423c:	f043 030b 	orr.w	r3, r3, #11
 8014240:	6453      	str	r3, [r2, #68]	; 0x44
 8014242:	e015      	b.n	8014270 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8014244:	69fb      	ldr	r3, [r7, #28]
 8014246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801424a:	695a      	ldr	r2, [r3, #20]
 801424c:	69fb      	ldr	r3, [r7, #28]
 801424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014252:	4619      	mov	r1, r3
 8014254:	f242 032b 	movw	r3, #8235	; 0x202b
 8014258:	4313      	orrs	r3, r2
 801425a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 801425c:	69fb      	ldr	r3, [r7, #28]
 801425e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014262:	691b      	ldr	r3, [r3, #16]
 8014264:	69fa      	ldr	r2, [r7, #28]
 8014266:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801426a:	f043 030b 	orr.w	r3, r3, #11
 801426e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8014270:	69fb      	ldr	r3, [r7, #28]
 8014272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	69fa      	ldr	r2, [r7, #28]
 801427a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801427e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014282:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6818      	ldr	r0, [r3, #0]
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	691b      	ldr	r3, [r3, #16]
 801428c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8014294:	461a      	mov	r2, r3
 8014296:	f008 f871 	bl	801c37c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	695a      	ldr	r2, [r3, #20]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80142a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	4618      	mov	r0, r3
 80142b0:	f007 ff9e 	bl	801c1f0 <USB_ReadInterrupts>
 80142b4:	4603      	mov	r3, r0
 80142b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80142ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80142be:	d124      	bne.n	801430a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4618      	mov	r0, r3
 80142c6:	f008 f835 	bl	801c334 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	4618      	mov	r0, r3
 80142d0:	f007 f931 	bl	801b536 <USB_GetDevSpeed>
 80142d4:	4603      	mov	r3, r0
 80142d6:	461a      	mov	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	681c      	ldr	r4, [r3, #0]
 80142e0:	f001 fc86 	bl	8015bf0 <HAL_RCC_GetHCLKFreq>
 80142e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	461a      	mov	r2, r3
 80142ee:	4620      	mov	r0, r4
 80142f0:	f006 fe74 	bl	801afdc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f009 ff4c 	bl	801e192 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	695a      	ldr	r2, [r3, #20]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8014308:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	4618      	mov	r0, r3
 8014310:	f007 ff6e 	bl	801c1f0 <USB_ReadInterrupts>
 8014314:	4603      	mov	r3, r0
 8014316:	f003 0308 	and.w	r3, r3, #8
 801431a:	2b08      	cmp	r3, #8
 801431c:	d10a      	bne.n	8014334 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 801431e:	6878      	ldr	r0, [r7, #4]
 8014320:	f009 ff29 	bl	801e176 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	681b      	ldr	r3, [r3, #0]
 8014328:	695a      	ldr	r2, [r3, #20]
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	f002 0208 	and.w	r2, r2, #8
 8014332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	4618      	mov	r0, r3
 801433a:	f007 ff59 	bl	801c1f0 <USB_ReadInterrupts>
 801433e:	4603      	mov	r3, r0
 8014340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014344:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014348:	d10f      	bne.n	801436a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 801434a:	2300      	movs	r3, #0
 801434c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	b2db      	uxtb	r3, r3
 8014352:	4619      	mov	r1, r3
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f009 ff8b 	bl	801e270 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	695a      	ldr	r2, [r3, #20]
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8014368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	681b      	ldr	r3, [r3, #0]
 801436e:	4618      	mov	r0, r3
 8014370:	f007 ff3e 	bl	801c1f0 <USB_ReadInterrupts>
 8014374:	4603      	mov	r3, r0
 8014376:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801437a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801437e:	d10f      	bne.n	80143a0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8014380:	2300      	movs	r3, #0
 8014382:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8014384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014386:	b2db      	uxtb	r3, r3
 8014388:	4619      	mov	r1, r3
 801438a:	6878      	ldr	r0, [r7, #4]
 801438c:	f009 ff5e 	bl	801e24c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	681b      	ldr	r3, [r3, #0]
 8014394:	695a      	ldr	r2, [r3, #20]
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 801439e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	4618      	mov	r0, r3
 80143a6:	f007 ff23 	bl	801c1f0 <USB_ReadInterrupts>
 80143aa:	4603      	mov	r3, r0
 80143ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80143b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80143b4:	d10a      	bne.n	80143cc <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80143b6:	6878      	ldr	r0, [r7, #4]
 80143b8:	f009 ff6c 	bl	801e294 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	681b      	ldr	r3, [r3, #0]
 80143c0:	695a      	ldr	r2, [r3, #20]
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80143ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	681b      	ldr	r3, [r3, #0]
 80143d0:	4618      	mov	r0, r3
 80143d2:	f007 ff0d 	bl	801c1f0 <USB_ReadInterrupts>
 80143d6:	4603      	mov	r3, r0
 80143d8:	f003 0304 	and.w	r3, r3, #4
 80143dc:	2b04      	cmp	r3, #4
 80143de:	d115      	bne.n	801440c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	685b      	ldr	r3, [r3, #4]
 80143e6:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80143e8:	69bb      	ldr	r3, [r7, #24]
 80143ea:	f003 0304 	and.w	r3, r3, #4
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d002      	beq.n	80143f8 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80143f2:	6878      	ldr	r0, [r7, #4]
 80143f4:	f009 ff5c 	bl	801e2b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681b      	ldr	r3, [r3, #0]
 80143fc:	6859      	ldr	r1, [r3, #4]
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	681b      	ldr	r3, [r3, #0]
 8014402:	69ba      	ldr	r2, [r7, #24]
 8014404:	430a      	orrs	r2, r1
 8014406:	605a      	str	r2, [r3, #4]
 8014408:	e000      	b.n	801440c <HAL_PCD_IRQHandler+0x7b8>
      return;
 801440a:	bf00      	nop
    }
  }
}
 801440c:	3734      	adds	r7, #52	; 0x34
 801440e:	46bd      	mov	sp, r7
 8014410:	bd90      	pop	{r4, r7, pc}

08014412 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8014412:	b580      	push	{r7, lr}
 8014414:	b082      	sub	sp, #8
 8014416:	af00      	add	r7, sp, #0
 8014418:	6078      	str	r0, [r7, #4]
 801441a:	460b      	mov	r3, r1
 801441c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014424:	2b01      	cmp	r3, #1
 8014426:	d101      	bne.n	801442c <HAL_PCD_SetAddress+0x1a>
 8014428:	2302      	movs	r3, #2
 801442a:	e013      	b.n	8014454 <HAL_PCD_SetAddress+0x42>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	2201      	movs	r2, #1
 8014430:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	78fa      	ldrb	r2, [r7, #3]
 8014438:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	681b      	ldr	r3, [r3, #0]
 8014440:	78fa      	ldrb	r2, [r7, #3]
 8014442:	4611      	mov	r1, r2
 8014444:	4618      	mov	r0, r3
 8014446:	f007 fe7d 	bl	801c144 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	2200      	movs	r2, #0
 801444e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8014452:	2300      	movs	r3, #0
}
 8014454:	4618      	mov	r0, r3
 8014456:	3708      	adds	r7, #8
 8014458:	46bd      	mov	sp, r7
 801445a:	bd80      	pop	{r7, pc}

0801445c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b084      	sub	sp, #16
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	4608      	mov	r0, r1
 8014466:	4611      	mov	r1, r2
 8014468:	461a      	mov	r2, r3
 801446a:	4603      	mov	r3, r0
 801446c:	70fb      	strb	r3, [r7, #3]
 801446e:	460b      	mov	r3, r1
 8014470:	803b      	strh	r3, [r7, #0]
 8014472:	4613      	mov	r3, r2
 8014474:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8014476:	2300      	movs	r3, #0
 8014478:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801447a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801447e:	2b00      	cmp	r3, #0
 8014480:	da0f      	bge.n	80144a2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014482:	78fb      	ldrb	r3, [r7, #3]
 8014484:	f003 020f 	and.w	r2, r3, #15
 8014488:	4613      	mov	r3, r2
 801448a:	00db      	lsls	r3, r3, #3
 801448c:	1a9b      	subs	r3, r3, r2
 801448e:	009b      	lsls	r3, r3, #2
 8014490:	3338      	adds	r3, #56	; 0x38
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	4413      	add	r3, r2
 8014496:	3304      	adds	r3, #4
 8014498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2201      	movs	r2, #1
 801449e:	705a      	strb	r2, [r3, #1]
 80144a0:	e00f      	b.n	80144c2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80144a2:	78fb      	ldrb	r3, [r7, #3]
 80144a4:	f003 020f 	and.w	r2, r3, #15
 80144a8:	4613      	mov	r3, r2
 80144aa:	00db      	lsls	r3, r3, #3
 80144ac:	1a9b      	subs	r3, r3, r2
 80144ae:	009b      	lsls	r3, r3, #2
 80144b0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80144b4:	687a      	ldr	r2, [r7, #4]
 80144b6:	4413      	add	r3, r2
 80144b8:	3304      	adds	r3, #4
 80144ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80144bc:	68fb      	ldr	r3, [r7, #12]
 80144be:	2200      	movs	r2, #0
 80144c0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80144c2:	78fb      	ldrb	r3, [r7, #3]
 80144c4:	f003 030f 	and.w	r3, r3, #15
 80144c8:	b2da      	uxtb	r2, r3
 80144ca:	68fb      	ldr	r3, [r7, #12]
 80144cc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80144ce:	883a      	ldrh	r2, [r7, #0]
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80144d4:	68fb      	ldr	r3, [r7, #12]
 80144d6:	78ba      	ldrb	r2, [r7, #2]
 80144d8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	785b      	ldrb	r3, [r3, #1]
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d004      	beq.n	80144ec <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80144e2:	68fb      	ldr	r3, [r7, #12]
 80144e4:	781b      	ldrb	r3, [r3, #0]
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80144ec:	78bb      	ldrb	r3, [r7, #2]
 80144ee:	2b02      	cmp	r3, #2
 80144f0:	d102      	bne.n	80144f8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	2200      	movs	r2, #0
 80144f6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80144fe:	2b01      	cmp	r3, #1
 8014500:	d101      	bne.n	8014506 <HAL_PCD_EP_Open+0xaa>
 8014502:	2302      	movs	r3, #2
 8014504:	e00e      	b.n	8014524 <HAL_PCD_EP_Open+0xc8>
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	2201      	movs	r2, #1
 801450a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	68f9      	ldr	r1, [r7, #12]
 8014514:	4618      	mov	r0, r3
 8014516:	f007 f833 	bl	801b580 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2200      	movs	r2, #0
 801451e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8014522:	7afb      	ldrb	r3, [r7, #11]
}
 8014524:	4618      	mov	r0, r3
 8014526:	3710      	adds	r7, #16
 8014528:	46bd      	mov	sp, r7
 801452a:	bd80      	pop	{r7, pc}

0801452c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
 8014534:	460b      	mov	r3, r1
 8014536:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8014538:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801453c:	2b00      	cmp	r3, #0
 801453e:	da0f      	bge.n	8014560 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014540:	78fb      	ldrb	r3, [r7, #3]
 8014542:	f003 020f 	and.w	r2, r3, #15
 8014546:	4613      	mov	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	1a9b      	subs	r3, r3, r2
 801454c:	009b      	lsls	r3, r3, #2
 801454e:	3338      	adds	r3, #56	; 0x38
 8014550:	687a      	ldr	r2, [r7, #4]
 8014552:	4413      	add	r3, r2
 8014554:	3304      	adds	r3, #4
 8014556:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	2201      	movs	r2, #1
 801455c:	705a      	strb	r2, [r3, #1]
 801455e:	e00f      	b.n	8014580 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014560:	78fb      	ldrb	r3, [r7, #3]
 8014562:	f003 020f 	and.w	r2, r3, #15
 8014566:	4613      	mov	r3, r2
 8014568:	00db      	lsls	r3, r3, #3
 801456a:	1a9b      	subs	r3, r3, r2
 801456c:	009b      	lsls	r3, r3, #2
 801456e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014572:	687a      	ldr	r2, [r7, #4]
 8014574:	4413      	add	r3, r2
 8014576:	3304      	adds	r3, #4
 8014578:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	2200      	movs	r2, #0
 801457e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8014580:	78fb      	ldrb	r3, [r7, #3]
 8014582:	f003 030f 	and.w	r3, r3, #15
 8014586:	b2da      	uxtb	r2, r3
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014592:	2b01      	cmp	r3, #1
 8014594:	d101      	bne.n	801459a <HAL_PCD_EP_Close+0x6e>
 8014596:	2302      	movs	r3, #2
 8014598:	e00e      	b.n	80145b8 <HAL_PCD_EP_Close+0x8c>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	2201      	movs	r2, #1
 801459e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	68f9      	ldr	r1, [r7, #12]
 80145a8:	4618      	mov	r0, r3
 80145aa:	f007 f871 	bl	801b690 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2200      	movs	r2, #0
 80145b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80145b6:	2300      	movs	r3, #0
}
 80145b8:	4618      	mov	r0, r3
 80145ba:	3710      	adds	r7, #16
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}

080145c0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80145c0:	b580      	push	{r7, lr}
 80145c2:	b086      	sub	sp, #24
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	60f8      	str	r0, [r7, #12]
 80145c8:	607a      	str	r2, [r7, #4]
 80145ca:	603b      	str	r3, [r7, #0]
 80145cc:	460b      	mov	r3, r1
 80145ce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80145d0:	7afb      	ldrb	r3, [r7, #11]
 80145d2:	f003 020f 	and.w	r2, r3, #15
 80145d6:	4613      	mov	r3, r2
 80145d8:	00db      	lsls	r3, r3, #3
 80145da:	1a9b      	subs	r3, r3, r2
 80145dc:	009b      	lsls	r3, r3, #2
 80145de:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80145e2:	68fa      	ldr	r2, [r7, #12]
 80145e4:	4413      	add	r3, r2
 80145e6:	3304      	adds	r3, #4
 80145e8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80145ea:	697b      	ldr	r3, [r7, #20]
 80145ec:	687a      	ldr	r2, [r7, #4]
 80145ee:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	683a      	ldr	r2, [r7, #0]
 80145f4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80145f6:	697b      	ldr	r3, [r7, #20]
 80145f8:	2200      	movs	r2, #0
 80145fa:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80145fc:	697b      	ldr	r3, [r7, #20]
 80145fe:	2200      	movs	r2, #0
 8014600:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014602:	7afb      	ldrb	r3, [r7, #11]
 8014604:	f003 030f 	and.w	r3, r3, #15
 8014608:	b2da      	uxtb	r2, r3
 801460a:	697b      	ldr	r3, [r7, #20]
 801460c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801460e:	68fb      	ldr	r3, [r7, #12]
 8014610:	691b      	ldr	r3, [r3, #16]
 8014612:	2b01      	cmp	r3, #1
 8014614:	d102      	bne.n	801461c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	697b      	ldr	r3, [r7, #20]
 801461a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801461c:	7afb      	ldrb	r3, [r7, #11]
 801461e:	f003 030f 	and.w	r3, r3, #15
 8014622:	2b00      	cmp	r3, #0
 8014624:	d109      	bne.n	801463a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014626:	68fb      	ldr	r3, [r7, #12]
 8014628:	6818      	ldr	r0, [r3, #0]
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	691b      	ldr	r3, [r3, #16]
 801462e:	b2db      	uxtb	r3, r3
 8014630:	461a      	mov	r2, r3
 8014632:	6979      	ldr	r1, [r7, #20]
 8014634:	f007 fafc 	bl	801bc30 <USB_EP0StartXfer>
 8014638:	e008      	b.n	801464c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801463a:	68fb      	ldr	r3, [r7, #12]
 801463c:	6818      	ldr	r0, [r3, #0]
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	691b      	ldr	r3, [r3, #16]
 8014642:	b2db      	uxtb	r3, r3
 8014644:	461a      	mov	r2, r3
 8014646:	6979      	ldr	r1, [r7, #20]
 8014648:	f007 f8a6 	bl	801b798 <USB_EPStartXfer>
  }

  return HAL_OK;
 801464c:	2300      	movs	r3, #0
}
 801464e:	4618      	mov	r0, r3
 8014650:	3718      	adds	r7, #24
 8014652:	46bd      	mov	sp, r7
 8014654:	bd80      	pop	{r7, pc}

08014656 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014656:	b480      	push	{r7}
 8014658:	b083      	sub	sp, #12
 801465a:	af00      	add	r7, sp, #0
 801465c:	6078      	str	r0, [r7, #4]
 801465e:	460b      	mov	r3, r1
 8014660:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8014662:	78fb      	ldrb	r3, [r7, #3]
 8014664:	f003 020f 	and.w	r2, r3, #15
 8014668:	6879      	ldr	r1, [r7, #4]
 801466a:	4613      	mov	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	1a9b      	subs	r3, r3, r2
 8014670:	009b      	lsls	r3, r3, #2
 8014672:	440b      	add	r3, r1
 8014674:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014678:	681b      	ldr	r3, [r3, #0]
}
 801467a:	4618      	mov	r0, r3
 801467c:	370c      	adds	r7, #12
 801467e:	46bd      	mov	sp, r7
 8014680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014684:	4770      	bx	lr

08014686 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8014686:	b580      	push	{r7, lr}
 8014688:	b086      	sub	sp, #24
 801468a:	af00      	add	r7, sp, #0
 801468c:	60f8      	str	r0, [r7, #12]
 801468e:	607a      	str	r2, [r7, #4]
 8014690:	603b      	str	r3, [r7, #0]
 8014692:	460b      	mov	r3, r1
 8014694:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014696:	7afb      	ldrb	r3, [r7, #11]
 8014698:	f003 020f 	and.w	r2, r3, #15
 801469c:	4613      	mov	r3, r2
 801469e:	00db      	lsls	r3, r3, #3
 80146a0:	1a9b      	subs	r3, r3, r2
 80146a2:	009b      	lsls	r3, r3, #2
 80146a4:	3338      	adds	r3, #56	; 0x38
 80146a6:	68fa      	ldr	r2, [r7, #12]
 80146a8:	4413      	add	r3, r2
 80146aa:	3304      	adds	r3, #4
 80146ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80146ae:	697b      	ldr	r3, [r7, #20]
 80146b0:	687a      	ldr	r2, [r7, #4]
 80146b2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80146b4:	697b      	ldr	r3, [r7, #20]
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	2200      	movs	r2, #0
 80146be:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80146c0:	697b      	ldr	r3, [r7, #20]
 80146c2:	2201      	movs	r2, #1
 80146c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80146c6:	7afb      	ldrb	r3, [r7, #11]
 80146c8:	f003 030f 	and.w	r3, r3, #15
 80146cc:	b2da      	uxtb	r2, r3
 80146ce:	697b      	ldr	r3, [r7, #20]
 80146d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	691b      	ldr	r3, [r3, #16]
 80146d6:	2b01      	cmp	r3, #1
 80146d8:	d102      	bne.n	80146e0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80146da:	687a      	ldr	r2, [r7, #4]
 80146dc:	697b      	ldr	r3, [r7, #20]
 80146de:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80146e0:	7afb      	ldrb	r3, [r7, #11]
 80146e2:	f003 030f 	and.w	r3, r3, #15
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d109      	bne.n	80146fe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80146ea:	68fb      	ldr	r3, [r7, #12]
 80146ec:	6818      	ldr	r0, [r3, #0]
 80146ee:	68fb      	ldr	r3, [r7, #12]
 80146f0:	691b      	ldr	r3, [r3, #16]
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	461a      	mov	r2, r3
 80146f6:	6979      	ldr	r1, [r7, #20]
 80146f8:	f007 fa9a 	bl	801bc30 <USB_EP0StartXfer>
 80146fc:	e008      	b.n	8014710 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80146fe:	68fb      	ldr	r3, [r7, #12]
 8014700:	6818      	ldr	r0, [r3, #0]
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	691b      	ldr	r3, [r3, #16]
 8014706:	b2db      	uxtb	r3, r3
 8014708:	461a      	mov	r2, r3
 801470a:	6979      	ldr	r1, [r7, #20]
 801470c:	f007 f844 	bl	801b798 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014710:	2300      	movs	r3, #0
}
 8014712:	4618      	mov	r0, r3
 8014714:	3718      	adds	r7, #24
 8014716:	46bd      	mov	sp, r7
 8014718:	bd80      	pop	{r7, pc}

0801471a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801471a:	b580      	push	{r7, lr}
 801471c:	b084      	sub	sp, #16
 801471e:	af00      	add	r7, sp, #0
 8014720:	6078      	str	r0, [r7, #4]
 8014722:	460b      	mov	r3, r1
 8014724:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8014726:	78fb      	ldrb	r3, [r7, #3]
 8014728:	f003 020f 	and.w	r2, r3, #15
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	429a      	cmp	r2, r3
 8014732:	d901      	bls.n	8014738 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8014734:	2301      	movs	r3, #1
 8014736:	e050      	b.n	80147da <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014738:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801473c:	2b00      	cmp	r3, #0
 801473e:	da0f      	bge.n	8014760 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014740:	78fb      	ldrb	r3, [r7, #3]
 8014742:	f003 020f 	and.w	r2, r3, #15
 8014746:	4613      	mov	r3, r2
 8014748:	00db      	lsls	r3, r3, #3
 801474a:	1a9b      	subs	r3, r3, r2
 801474c:	009b      	lsls	r3, r3, #2
 801474e:	3338      	adds	r3, #56	; 0x38
 8014750:	687a      	ldr	r2, [r7, #4]
 8014752:	4413      	add	r3, r2
 8014754:	3304      	adds	r3, #4
 8014756:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	2201      	movs	r2, #1
 801475c:	705a      	strb	r2, [r3, #1]
 801475e:	e00d      	b.n	801477c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014760:	78fa      	ldrb	r2, [r7, #3]
 8014762:	4613      	mov	r3, r2
 8014764:	00db      	lsls	r3, r3, #3
 8014766:	1a9b      	subs	r3, r3, r2
 8014768:	009b      	lsls	r3, r3, #2
 801476a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801476e:	687a      	ldr	r2, [r7, #4]
 8014770:	4413      	add	r3, r2
 8014772:	3304      	adds	r3, #4
 8014774:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	2200      	movs	r2, #0
 801477a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	2201      	movs	r2, #1
 8014780:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014782:	78fb      	ldrb	r3, [r7, #3]
 8014784:	f003 030f 	and.w	r3, r3, #15
 8014788:	b2da      	uxtb	r2, r3
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014794:	2b01      	cmp	r3, #1
 8014796:	d101      	bne.n	801479c <HAL_PCD_EP_SetStall+0x82>
 8014798:	2302      	movs	r3, #2
 801479a:	e01e      	b.n	80147da <HAL_PCD_EP_SetStall+0xc0>
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	2201      	movs	r2, #1
 80147a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	68f9      	ldr	r1, [r7, #12]
 80147aa:	4618      	mov	r0, r3
 80147ac:	f007 fbf6 	bl	801bf9c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80147b0:	78fb      	ldrb	r3, [r7, #3]
 80147b2:	f003 030f 	and.w	r3, r3, #15
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d10a      	bne.n	80147d0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	6818      	ldr	r0, [r3, #0]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	691b      	ldr	r3, [r3, #16]
 80147c2:	b2d9      	uxtb	r1, r3
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80147ca:	461a      	mov	r2, r3
 80147cc:	f007 fdd6 	bl	801c37c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	2200      	movs	r2, #0
 80147d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80147d8:	2300      	movs	r3, #0
}
 80147da:	4618      	mov	r0, r3
 80147dc:	3710      	adds	r7, #16
 80147de:	46bd      	mov	sp, r7
 80147e0:	bd80      	pop	{r7, pc}

080147e2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80147e2:	b580      	push	{r7, lr}
 80147e4:	b084      	sub	sp, #16
 80147e6:	af00      	add	r7, sp, #0
 80147e8:	6078      	str	r0, [r7, #4]
 80147ea:	460b      	mov	r3, r1
 80147ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80147ee:	78fb      	ldrb	r3, [r7, #3]
 80147f0:	f003 020f 	and.w	r2, r3, #15
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	685b      	ldr	r3, [r3, #4]
 80147f8:	429a      	cmp	r2, r3
 80147fa:	d901      	bls.n	8014800 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80147fc:	2301      	movs	r3, #1
 80147fe:	e042      	b.n	8014886 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014804:	2b00      	cmp	r3, #0
 8014806:	da0f      	bge.n	8014828 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014808:	78fb      	ldrb	r3, [r7, #3]
 801480a:	f003 020f 	and.w	r2, r3, #15
 801480e:	4613      	mov	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	1a9b      	subs	r3, r3, r2
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	3338      	adds	r3, #56	; 0x38
 8014818:	687a      	ldr	r2, [r7, #4]
 801481a:	4413      	add	r3, r2
 801481c:	3304      	adds	r3, #4
 801481e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2201      	movs	r2, #1
 8014824:	705a      	strb	r2, [r3, #1]
 8014826:	e00f      	b.n	8014848 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014828:	78fb      	ldrb	r3, [r7, #3]
 801482a:	f003 020f 	and.w	r2, r3, #15
 801482e:	4613      	mov	r3, r2
 8014830:	00db      	lsls	r3, r3, #3
 8014832:	1a9b      	subs	r3, r3, r2
 8014834:	009b      	lsls	r3, r3, #2
 8014836:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801483a:	687a      	ldr	r2, [r7, #4]
 801483c:	4413      	add	r3, r2
 801483e:	3304      	adds	r3, #4
 8014840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	2200      	movs	r2, #0
 8014846:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8014848:	68fb      	ldr	r3, [r7, #12]
 801484a:	2200      	movs	r2, #0
 801484c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801484e:	78fb      	ldrb	r3, [r7, #3]
 8014850:	f003 030f 	and.w	r3, r3, #15
 8014854:	b2da      	uxtb	r2, r3
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014860:	2b01      	cmp	r3, #1
 8014862:	d101      	bne.n	8014868 <HAL_PCD_EP_ClrStall+0x86>
 8014864:	2302      	movs	r3, #2
 8014866:	e00e      	b.n	8014886 <HAL_PCD_EP_ClrStall+0xa4>
 8014868:	687b      	ldr	r3, [r7, #4]
 801486a:	2201      	movs	r2, #1
 801486c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	68f9      	ldr	r1, [r7, #12]
 8014876:	4618      	mov	r0, r3
 8014878:	f007 fbfe 	bl	801c078 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8014884:	2300      	movs	r3, #0
}
 8014886:	4618      	mov	r0, r3
 8014888:	3710      	adds	r7, #16
 801488a:	46bd      	mov	sp, r7
 801488c:	bd80      	pop	{r7, pc}

0801488e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801488e:	b580      	push	{r7, lr}
 8014890:	b08a      	sub	sp, #40	; 0x28
 8014892:	af02      	add	r7, sp, #8
 8014894:	6078      	str	r0, [r7, #4]
 8014896:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801489e:	697b      	ldr	r3, [r7, #20]
 80148a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80148a2:	683a      	ldr	r2, [r7, #0]
 80148a4:	4613      	mov	r3, r2
 80148a6:	00db      	lsls	r3, r3, #3
 80148a8:	1a9b      	subs	r3, r3, r2
 80148aa:	009b      	lsls	r3, r3, #2
 80148ac:	3338      	adds	r3, #56	; 0x38
 80148ae:	687a      	ldr	r2, [r7, #4]
 80148b0:	4413      	add	r3, r2
 80148b2:	3304      	adds	r3, #4
 80148b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	699a      	ldr	r2, [r3, #24]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	695b      	ldr	r3, [r3, #20]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d901      	bls.n	80148c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80148c2:	2301      	movs	r3, #1
 80148c4:	e06c      	b.n	80149a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	695a      	ldr	r2, [r3, #20]
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	699b      	ldr	r3, [r3, #24]
 80148ce:	1ad3      	subs	r3, r2, r3
 80148d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80148d2:	68fb      	ldr	r3, [r7, #12]
 80148d4:	689b      	ldr	r3, [r3, #8]
 80148d6:	69fa      	ldr	r2, [r7, #28]
 80148d8:	429a      	cmp	r2, r3
 80148da:	d902      	bls.n	80148e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	689b      	ldr	r3, [r3, #8]
 80148e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	3303      	adds	r3, #3
 80148e6:	089b      	lsrs	r3, r3, #2
 80148e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80148ea:	e02b      	b.n	8014944 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	695a      	ldr	r2, [r3, #20]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	699b      	ldr	r3, [r3, #24]
 80148f4:	1ad3      	subs	r3, r2, r3
 80148f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	689b      	ldr	r3, [r3, #8]
 80148fc:	69fa      	ldr	r2, [r7, #28]
 80148fe:	429a      	cmp	r2, r3
 8014900:	d902      	bls.n	8014908 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8014902:	68fb      	ldr	r3, [r7, #12]
 8014904:	689b      	ldr	r3, [r3, #8]
 8014906:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8014908:	69fb      	ldr	r3, [r7, #28]
 801490a:	3303      	adds	r3, #3
 801490c:	089b      	lsrs	r3, r3, #2
 801490e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	68d9      	ldr	r1, [r3, #12]
 8014914:	683b      	ldr	r3, [r7, #0]
 8014916:	b2da      	uxtb	r2, r3
 8014918:	69fb      	ldr	r3, [r7, #28]
 801491a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801491c:	687b      	ldr	r3, [r7, #4]
 801491e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014920:	b2db      	uxtb	r3, r3
 8014922:	9300      	str	r3, [sp, #0]
 8014924:	4603      	mov	r3, r0
 8014926:	6978      	ldr	r0, [r7, #20]
 8014928:	f007 fada 	bl	801bee0 <USB_WritePacket>

    ep->xfer_buff  += len;
 801492c:	68fb      	ldr	r3, [r7, #12]
 801492e:	68da      	ldr	r2, [r3, #12]
 8014930:	69fb      	ldr	r3, [r7, #28]
 8014932:	441a      	add	r2, r3
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	699a      	ldr	r2, [r3, #24]
 801493c:	69fb      	ldr	r3, [r7, #28]
 801493e:	441a      	add	r2, r3
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	015a      	lsls	r2, r3, #5
 8014948:	693b      	ldr	r3, [r7, #16]
 801494a:	4413      	add	r3, r2
 801494c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014950:	699b      	ldr	r3, [r3, #24]
 8014952:	b29b      	uxth	r3, r3
 8014954:	69ba      	ldr	r2, [r7, #24]
 8014956:	429a      	cmp	r2, r3
 8014958:	d809      	bhi.n	801496e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	699a      	ldr	r2, [r3, #24]
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014962:	429a      	cmp	r2, r3
 8014964:	d203      	bcs.n	801496e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	695b      	ldr	r3, [r3, #20]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d1be      	bne.n	80148ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	695a      	ldr	r2, [r3, #20]
 8014972:	68fb      	ldr	r3, [r7, #12]
 8014974:	699b      	ldr	r3, [r3, #24]
 8014976:	429a      	cmp	r2, r3
 8014978:	d811      	bhi.n	801499e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801497a:	683b      	ldr	r3, [r7, #0]
 801497c:	f003 030f 	and.w	r3, r3, #15
 8014980:	2201      	movs	r2, #1
 8014982:	fa02 f303 	lsl.w	r3, r2, r3
 8014986:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801498e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	43db      	mvns	r3, r3
 8014994:	6939      	ldr	r1, [r7, #16]
 8014996:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801499a:	4013      	ands	r3, r2
 801499c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801499e:	2300      	movs	r3, #0
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3720      	adds	r7, #32
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}

080149a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b086      	sub	sp, #24
 80149ac:	af00      	add	r7, sp, #0
 80149ae:	6078      	str	r0, [r7, #4]
 80149b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149b8:	697b      	ldr	r3, [r7, #20]
 80149ba:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80149bc:	697b      	ldr	r3, [r7, #20]
 80149be:	333c      	adds	r3, #60	; 0x3c
 80149c0:	3304      	adds	r3, #4
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	015a      	lsls	r2, r3, #5
 80149ca:	693b      	ldr	r3, [r7, #16]
 80149cc:	4413      	add	r3, r2
 80149ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149d2:	689b      	ldr	r3, [r3, #8]
 80149d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	691b      	ldr	r3, [r3, #16]
 80149da:	2b01      	cmp	r3, #1
 80149dc:	f040 80a0 	bne.w	8014b20 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80149e0:	68bb      	ldr	r3, [r7, #8]
 80149e2:	f003 0308 	and.w	r3, r3, #8
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d015      	beq.n	8014a16 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	4a72      	ldr	r2, [pc, #456]	; (8014bb8 <PCD_EP_OutXfrComplete_int+0x210>)
 80149ee:	4293      	cmp	r3, r2
 80149f0:	f240 80dd 	bls.w	8014bae <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80149f4:	68bb      	ldr	r3, [r7, #8]
 80149f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	f000 80d7 	beq.w	8014bae <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	015a      	lsls	r2, r3, #5
 8014a04:	693b      	ldr	r3, [r7, #16]
 8014a06:	4413      	add	r3, r2
 8014a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a0c:	461a      	mov	r2, r3
 8014a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a12:	6093      	str	r3, [r2, #8]
 8014a14:	e0cb      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	f003 0320 	and.w	r3, r3, #32
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d009      	beq.n	8014a34 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	015a      	lsls	r2, r3, #5
 8014a24:	693b      	ldr	r3, [r7, #16]
 8014a26:	4413      	add	r3, r2
 8014a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a2c:	461a      	mov	r2, r3
 8014a2e:	2320      	movs	r3, #32
 8014a30:	6093      	str	r3, [r2, #8]
 8014a32:	e0bc      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8014a34:	68bb      	ldr	r3, [r7, #8]
 8014a36:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	f040 80b7 	bne.w	8014bae <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	4a5d      	ldr	r2, [pc, #372]	; (8014bb8 <PCD_EP_OutXfrComplete_int+0x210>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d90f      	bls.n	8014a68 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014a48:	68bb      	ldr	r3, [r7, #8]
 8014a4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d00a      	beq.n	8014a68 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	015a      	lsls	r2, r3, #5
 8014a56:	693b      	ldr	r3, [r7, #16]
 8014a58:	4413      	add	r3, r2
 8014a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a5e:	461a      	mov	r2, r3
 8014a60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014a64:	6093      	str	r3, [r2, #8]
 8014a66:	e0a2      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8014a68:	6879      	ldr	r1, [r7, #4]
 8014a6a:	683a      	ldr	r2, [r7, #0]
 8014a6c:	4613      	mov	r3, r2
 8014a6e:	00db      	lsls	r3, r3, #3
 8014a70:	1a9b      	subs	r3, r3, r2
 8014a72:	009b      	lsls	r3, r3, #2
 8014a74:	440b      	add	r3, r1
 8014a76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014a7a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	0159      	lsls	r1, r3, #5
 8014a80:	693b      	ldr	r3, [r7, #16]
 8014a82:	440b      	add	r3, r1
 8014a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a88:	691b      	ldr	r3, [r3, #16]
 8014a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8014a8e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8014a90:	6878      	ldr	r0, [r7, #4]
 8014a92:	683a      	ldr	r2, [r7, #0]
 8014a94:	4613      	mov	r3, r2
 8014a96:	00db      	lsls	r3, r3, #3
 8014a98:	1a9b      	subs	r3, r3, r2
 8014a9a:	009b      	lsls	r3, r3, #2
 8014a9c:	4403      	add	r3, r0
 8014a9e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014aa2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8014aa4:	6879      	ldr	r1, [r7, #4]
 8014aa6:	683a      	ldr	r2, [r7, #0]
 8014aa8:	4613      	mov	r3, r2
 8014aaa:	00db      	lsls	r3, r3, #3
 8014aac:	1a9b      	subs	r3, r3, r2
 8014aae:	009b      	lsls	r3, r3, #2
 8014ab0:	440b      	add	r3, r1
 8014ab2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014ab6:	6819      	ldr	r1, [r3, #0]
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	683a      	ldr	r2, [r7, #0]
 8014abc:	4613      	mov	r3, r2
 8014abe:	00db      	lsls	r3, r3, #3
 8014ac0:	1a9b      	subs	r3, r3, r2
 8014ac2:	009b      	lsls	r3, r3, #2
 8014ac4:	4403      	add	r3, r0
 8014ac6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	4419      	add	r1, r3
 8014ace:	6878      	ldr	r0, [r7, #4]
 8014ad0:	683a      	ldr	r2, [r7, #0]
 8014ad2:	4613      	mov	r3, r2
 8014ad4:	00db      	lsls	r3, r3, #3
 8014ad6:	1a9b      	subs	r3, r3, r2
 8014ad8:	009b      	lsls	r3, r3, #2
 8014ada:	4403      	add	r3, r0
 8014adc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014ae0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d114      	bne.n	8014b12 <PCD_EP_OutXfrComplete_int+0x16a>
 8014ae8:	6879      	ldr	r1, [r7, #4]
 8014aea:	683a      	ldr	r2, [r7, #0]
 8014aec:	4613      	mov	r3, r2
 8014aee:	00db      	lsls	r3, r3, #3
 8014af0:	1a9b      	subs	r3, r3, r2
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	440b      	add	r3, r1
 8014af6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d108      	bne.n	8014b12 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6818      	ldr	r0, [r3, #0]
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014b0a:	461a      	mov	r2, r3
 8014b0c:	2101      	movs	r1, #1
 8014b0e:	f007 fc35 	bl	801c37c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014b12:	683b      	ldr	r3, [r7, #0]
 8014b14:	b2db      	uxtb	r3, r3
 8014b16:	4619      	mov	r1, r3
 8014b18:	6878      	ldr	r0, [r7, #4]
 8014b1a:	f009 faf7 	bl	801e10c <HAL_PCD_DataOutStageCallback>
 8014b1e:	e046      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	4a26      	ldr	r2, [pc, #152]	; (8014bbc <PCD_EP_OutXfrComplete_int+0x214>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d124      	bne.n	8014b72 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8014b28:	68bb      	ldr	r3, [r7, #8]
 8014b2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d00a      	beq.n	8014b48 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	015a      	lsls	r2, r3, #5
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	4413      	add	r3, r2
 8014b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b3e:	461a      	mov	r2, r3
 8014b40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014b44:	6093      	str	r3, [r2, #8]
 8014b46:	e032      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	f003 0320 	and.w	r3, r3, #32
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d008      	beq.n	8014b64 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014b52:	683b      	ldr	r3, [r7, #0]
 8014b54:	015a      	lsls	r2, r3, #5
 8014b56:	693b      	ldr	r3, [r7, #16]
 8014b58:	4413      	add	r3, r2
 8014b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b5e:	461a      	mov	r2, r3
 8014b60:	2320      	movs	r3, #32
 8014b62:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014b64:	683b      	ldr	r3, [r7, #0]
 8014b66:	b2db      	uxtb	r3, r3
 8014b68:	4619      	mov	r1, r3
 8014b6a:	6878      	ldr	r0, [r7, #4]
 8014b6c:	f009 face 	bl	801e10c <HAL_PCD_DataOutStageCallback>
 8014b70:	e01d      	b.n	8014bae <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014b72:	683b      	ldr	r3, [r7, #0]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d114      	bne.n	8014ba2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8014b78:	6879      	ldr	r1, [r7, #4]
 8014b7a:	683a      	ldr	r2, [r7, #0]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	00db      	lsls	r3, r3, #3
 8014b80:	1a9b      	subs	r3, r3, r2
 8014b82:	009b      	lsls	r3, r3, #2
 8014b84:	440b      	add	r3, r1
 8014b86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8014b8a:	681b      	ldr	r3, [r3, #0]
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d108      	bne.n	8014ba2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6818      	ldr	r0, [r3, #0]
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014b9a:	461a      	mov	r2, r3
 8014b9c:	2100      	movs	r1, #0
 8014b9e:	f007 fbed 	bl	801c37c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014ba2:	683b      	ldr	r3, [r7, #0]
 8014ba4:	b2db      	uxtb	r3, r3
 8014ba6:	4619      	mov	r1, r3
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f009 faaf 	bl	801e10c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8014bae:	2300      	movs	r3, #0
}
 8014bb0:	4618      	mov	r0, r3
 8014bb2:	3718      	adds	r7, #24
 8014bb4:	46bd      	mov	sp, r7
 8014bb6:	bd80      	pop	{r7, pc}
 8014bb8:	4f54300a 	.word	0x4f54300a
 8014bbc:	4f54310a 	.word	0x4f54310a

08014bc0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b086      	sub	sp, #24
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
 8014bc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bd0:	697b      	ldr	r3, [r7, #20]
 8014bd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014bd4:	697b      	ldr	r3, [r7, #20]
 8014bd6:	333c      	adds	r3, #60	; 0x3c
 8014bd8:	3304      	adds	r3, #4
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8014bde:	683b      	ldr	r3, [r7, #0]
 8014be0:	015a      	lsls	r2, r3, #5
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	4413      	add	r3, r2
 8014be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bea:	689b      	ldr	r3, [r3, #8]
 8014bec:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	4a15      	ldr	r2, [pc, #84]	; (8014c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8014bf2:	4293      	cmp	r3, r2
 8014bf4:	d90e      	bls.n	8014c14 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014bf6:	68bb      	ldr	r3, [r7, #8]
 8014bf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d009      	beq.n	8014c14 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	015a      	lsls	r2, r3, #5
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	4413      	add	r3, r2
 8014c08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c0c:	461a      	mov	r2, r3
 8014c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014c12:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f009 fa67 	bl	801e0e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	4a0a      	ldr	r2, [pc, #40]	; (8014c48 <PCD_EP_OutSetupPacket_int+0x88>)
 8014c1e:	4293      	cmp	r3, r2
 8014c20:	d90c      	bls.n	8014c3c <PCD_EP_OutSetupPacket_int+0x7c>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	691b      	ldr	r3, [r3, #16]
 8014c26:	2b01      	cmp	r3, #1
 8014c28:	d108      	bne.n	8014c3c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	6818      	ldr	r0, [r3, #0]
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014c34:	461a      	mov	r2, r3
 8014c36:	2101      	movs	r1, #1
 8014c38:	f007 fba0 	bl	801c37c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8014c3c:	2300      	movs	r3, #0
}
 8014c3e:	4618      	mov	r0, r3
 8014c40:	3718      	adds	r7, #24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
 8014c46:	bf00      	nop
 8014c48:	4f54300a 	.word	0x4f54300a

08014c4c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8014c4c:	b480      	push	{r7}
 8014c4e:	b085      	sub	sp, #20
 8014c50:	af00      	add	r7, sp, #0
 8014c52:	6078      	str	r0, [r7, #4]
 8014c54:	460b      	mov	r3, r1
 8014c56:	70fb      	strb	r3, [r7, #3]
 8014c58:	4613      	mov	r3, r2
 8014c5a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c62:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8014c64:	78fb      	ldrb	r3, [r7, #3]
 8014c66:	2b00      	cmp	r3, #0
 8014c68:	d107      	bne.n	8014c7a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8014c6a:	883b      	ldrh	r3, [r7, #0]
 8014c6c:	0419      	lsls	r1, r3, #16
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	68ba      	ldr	r2, [r7, #8]
 8014c74:	430a      	orrs	r2, r1
 8014c76:	629a      	str	r2, [r3, #40]	; 0x28
 8014c78:	e028      	b.n	8014ccc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c80:	0c1b      	lsrs	r3, r3, #16
 8014c82:	68ba      	ldr	r2, [r7, #8]
 8014c84:	4413      	add	r3, r2
 8014c86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014c88:	2300      	movs	r3, #0
 8014c8a:	73fb      	strb	r3, [r7, #15]
 8014c8c:	e00d      	b.n	8014caa <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681a      	ldr	r2, [r3, #0]
 8014c92:	7bfb      	ldrb	r3, [r7, #15]
 8014c94:	3340      	adds	r3, #64	; 0x40
 8014c96:	009b      	lsls	r3, r3, #2
 8014c98:	4413      	add	r3, r2
 8014c9a:	685b      	ldr	r3, [r3, #4]
 8014c9c:	0c1b      	lsrs	r3, r3, #16
 8014c9e:	68ba      	ldr	r2, [r7, #8]
 8014ca0:	4413      	add	r3, r2
 8014ca2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014ca4:	7bfb      	ldrb	r3, [r7, #15]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	73fb      	strb	r3, [r7, #15]
 8014caa:	7bfa      	ldrb	r2, [r7, #15]
 8014cac:	78fb      	ldrb	r3, [r7, #3]
 8014cae:	3b01      	subs	r3, #1
 8014cb0:	429a      	cmp	r2, r3
 8014cb2:	d3ec      	bcc.n	8014c8e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8014cb4:	883b      	ldrh	r3, [r7, #0]
 8014cb6:	0418      	lsls	r0, r3, #16
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	6819      	ldr	r1, [r3, #0]
 8014cbc:	78fb      	ldrb	r3, [r7, #3]
 8014cbe:	3b01      	subs	r3, #1
 8014cc0:	68ba      	ldr	r2, [r7, #8]
 8014cc2:	4302      	orrs	r2, r0
 8014cc4:	3340      	adds	r3, #64	; 0x40
 8014cc6:	009b      	lsls	r3, r3, #2
 8014cc8:	440b      	add	r3, r1
 8014cca:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8014ccc:	2300      	movs	r3, #0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3714      	adds	r7, #20
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd8:	4770      	bx	lr

08014cda <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8014cda:	b480      	push	{r7}
 8014cdc:	b083      	sub	sp, #12
 8014cde:	af00      	add	r7, sp, #0
 8014ce0:	6078      	str	r0, [r7, #4]
 8014ce2:	460b      	mov	r3, r1
 8014ce4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	887a      	ldrh	r2, [r7, #2]
 8014cec:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8014cee:	2300      	movs	r3, #0
}
 8014cf0:	4618      	mov	r0, r3
 8014cf2:	370c      	adds	r7, #12
 8014cf4:	46bd      	mov	sp, r7
 8014cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfa:	4770      	bx	lr

08014cfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8014cfc:	b480      	push	{r7}
 8014cfe:	b085      	sub	sp, #20
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	2201      	movs	r2, #1
 8014d0e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	2200      	movs	r2, #0
 8014d16:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	699b      	ldr	r3, [r3, #24]
 8014d1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014d2a:	4b05      	ldr	r3, [pc, #20]	; (8014d40 <HAL_PCDEx_ActivateLPM+0x44>)
 8014d2c:	4313      	orrs	r3, r2
 8014d2e:	68fa      	ldr	r2, [r7, #12]
 8014d30:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8014d32:	2300      	movs	r3, #0
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3714      	adds	r7, #20
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d3e:	4770      	bx	lr
 8014d40:	10000003 	.word	0x10000003

08014d44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014d44:	b480      	push	{r7}
 8014d46:	b083      	sub	sp, #12
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	6078      	str	r0, [r7, #4]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014d50:	bf00      	nop
 8014d52:	370c      	adds	r7, #12
 8014d54:	46bd      	mov	sp, r7
 8014d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5a:	4770      	bx	lr

08014d5c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8014d5c:	b580      	push	{r7, lr}
 8014d5e:	b084      	sub	sp, #16
 8014d60:	af00      	add	r7, sp, #0
 8014d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8014d64:	4b19      	ldr	r3, [pc, #100]	; (8014dcc <HAL_PWREx_ConfigSupply+0x70>)
 8014d66:	68db      	ldr	r3, [r3, #12]
 8014d68:	f003 0304 	and.w	r3, r3, #4
 8014d6c:	2b04      	cmp	r3, #4
 8014d6e:	d00a      	beq.n	8014d86 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8014d70:	4b16      	ldr	r3, [pc, #88]	; (8014dcc <HAL_PWREx_ConfigSupply+0x70>)
 8014d72:	68db      	ldr	r3, [r3, #12]
 8014d74:	f003 0307 	and.w	r3, r3, #7
 8014d78:	687a      	ldr	r2, [r7, #4]
 8014d7a:	429a      	cmp	r2, r3
 8014d7c:	d001      	beq.n	8014d82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	e01f      	b.n	8014dc2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8014d82:	2300      	movs	r3, #0
 8014d84:	e01d      	b.n	8014dc2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8014d86:	4b11      	ldr	r3, [pc, #68]	; (8014dcc <HAL_PWREx_ConfigSupply+0x70>)
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	f023 0207 	bic.w	r2, r3, #7
 8014d8e:	490f      	ldr	r1, [pc, #60]	; (8014dcc <HAL_PWREx_ConfigSupply+0x70>)
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	4313      	orrs	r3, r2
 8014d94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8014d96:	f7fe f87d 	bl	8012e94 <HAL_GetTick>
 8014d9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014d9c:	e009      	b.n	8014db2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8014d9e:	f7fe f879 	bl	8012e94 <HAL_GetTick>
 8014da2:	4602      	mov	r2, r0
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	1ad3      	subs	r3, r2, r3
 8014da8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8014dac:	d901      	bls.n	8014db2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8014dae:	2301      	movs	r3, #1
 8014db0:	e007      	b.n	8014dc2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014db2:	4b06      	ldr	r3, [pc, #24]	; (8014dcc <HAL_PWREx_ConfigSupply+0x70>)
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014dbe:	d1ee      	bne.n	8014d9e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8014dc0:	2300      	movs	r3, #0
}
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	3710      	adds	r7, #16
 8014dc6:	46bd      	mov	sp, r7
 8014dc8:	bd80      	pop	{r7, pc}
 8014dca:	bf00      	nop
 8014dcc:	58024800 	.word	0x58024800

08014dd0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8014dd4:	4b05      	ldr	r3, [pc, #20]	; (8014dec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014dd6:	68db      	ldr	r3, [r3, #12]
 8014dd8:	4a04      	ldr	r2, [pc, #16]	; (8014dec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014dde:	60d3      	str	r3, [r2, #12]
}
 8014de0:	bf00      	nop
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr
 8014dea:	bf00      	nop
 8014dec:	58024800 	.word	0x58024800

08014df0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014df0:	b580      	push	{r7, lr}
 8014df2:	b08c      	sub	sp, #48	; 0x30
 8014df4:	af00      	add	r7, sp, #0
 8014df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014df8:	687b      	ldr	r3, [r7, #4]
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d101      	bne.n	8014e02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014dfe:	2301      	movs	r3, #1
 8014e00:	e3c4      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	f003 0301 	and.w	r3, r3, #1
 8014e0a:	2b00      	cmp	r3, #0
 8014e0c:	f000 8087 	beq.w	8014f1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014e10:	4ba2      	ldr	r3, [pc, #648]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e12:	691b      	ldr	r3, [r3, #16]
 8014e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014e1a:	4ba0      	ldr	r3, [pc, #640]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e1e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e22:	2b10      	cmp	r3, #16
 8014e24:	d007      	beq.n	8014e36 <HAL_RCC_OscConfig+0x46>
 8014e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e28:	2b18      	cmp	r3, #24
 8014e2a:	d110      	bne.n	8014e4e <HAL_RCC_OscConfig+0x5e>
 8014e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e2e:	f003 0303 	and.w	r3, r3, #3
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	d10b      	bne.n	8014e4e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014e36:	4b99      	ldr	r3, [pc, #612]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d06c      	beq.n	8014f1c <HAL_RCC_OscConfig+0x12c>
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	685b      	ldr	r3, [r3, #4]
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d168      	bne.n	8014f1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8014e4a:	2301      	movs	r3, #1
 8014e4c:	e39e      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	685b      	ldr	r3, [r3, #4]
 8014e52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014e56:	d106      	bne.n	8014e66 <HAL_RCC_OscConfig+0x76>
 8014e58:	4b90      	ldr	r3, [pc, #576]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	4a8f      	ldr	r2, [pc, #572]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014e62:	6013      	str	r3, [r2, #0]
 8014e64:	e02e      	b.n	8014ec4 <HAL_RCC_OscConfig+0xd4>
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	685b      	ldr	r3, [r3, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d10c      	bne.n	8014e88 <HAL_RCC_OscConfig+0x98>
 8014e6e:	4b8b      	ldr	r3, [pc, #556]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e70:	681b      	ldr	r3, [r3, #0]
 8014e72:	4a8a      	ldr	r2, [pc, #552]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014e78:	6013      	str	r3, [r2, #0]
 8014e7a:	4b88      	ldr	r3, [pc, #544]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e7c:	681b      	ldr	r3, [r3, #0]
 8014e7e:	4a87      	ldr	r2, [pc, #540]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014e84:	6013      	str	r3, [r2, #0]
 8014e86:	e01d      	b.n	8014ec4 <HAL_RCC_OscConfig+0xd4>
 8014e88:	687b      	ldr	r3, [r7, #4]
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014e90:	d10c      	bne.n	8014eac <HAL_RCC_OscConfig+0xbc>
 8014e92:	4b82      	ldr	r3, [pc, #520]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	4a81      	ldr	r2, [pc, #516]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014e98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014e9c:	6013      	str	r3, [r2, #0]
 8014e9e:	4b7f      	ldr	r3, [pc, #508]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014ea0:	681b      	ldr	r3, [r3, #0]
 8014ea2:	4a7e      	ldr	r2, [pc, #504]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ea8:	6013      	str	r3, [r2, #0]
 8014eaa:	e00b      	b.n	8014ec4 <HAL_RCC_OscConfig+0xd4>
 8014eac:	4b7b      	ldr	r3, [pc, #492]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014eae:	681b      	ldr	r3, [r3, #0]
 8014eb0:	4a7a      	ldr	r2, [pc, #488]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014eb6:	6013      	str	r3, [r2, #0]
 8014eb8:	4b78      	ldr	r3, [pc, #480]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	4a77      	ldr	r2, [pc, #476]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014ebe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014ec2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d013      	beq.n	8014ef4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014ecc:	f7fd ffe2 	bl	8012e94 <HAL_GetTick>
 8014ed0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014ed2:	e008      	b.n	8014ee6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014ed4:	f7fd ffde 	bl	8012e94 <HAL_GetTick>
 8014ed8:	4602      	mov	r2, r0
 8014eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014edc:	1ad3      	subs	r3, r2, r3
 8014ede:	2b64      	cmp	r3, #100	; 0x64
 8014ee0:	d901      	bls.n	8014ee6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8014ee2:	2303      	movs	r3, #3
 8014ee4:	e352      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014ee6:	4b6d      	ldr	r3, [pc, #436]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d0f0      	beq.n	8014ed4 <HAL_RCC_OscConfig+0xe4>
 8014ef2:	e014      	b.n	8014f1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014ef4:	f7fd ffce 	bl	8012e94 <HAL_GetTick>
 8014ef8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014efa:	e008      	b.n	8014f0e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014efc:	f7fd ffca 	bl	8012e94 <HAL_GetTick>
 8014f00:	4602      	mov	r2, r0
 8014f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f04:	1ad3      	subs	r3, r2, r3
 8014f06:	2b64      	cmp	r3, #100	; 0x64
 8014f08:	d901      	bls.n	8014f0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8014f0a:	2303      	movs	r3, #3
 8014f0c:	e33e      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014f0e:	4b63      	ldr	r3, [pc, #396]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014f16:	2b00      	cmp	r3, #0
 8014f18:	d1f0      	bne.n	8014efc <HAL_RCC_OscConfig+0x10c>
 8014f1a:	e000      	b.n	8014f1e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014f1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	f003 0302 	and.w	r3, r3, #2
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	f000 8092 	beq.w	8015050 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014f2c:	4b5b      	ldr	r3, [pc, #364]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f2e:	691b      	ldr	r3, [r3, #16]
 8014f30:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014f34:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014f36:	4b59      	ldr	r3, [pc, #356]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f3a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8014f3c:	6a3b      	ldr	r3, [r7, #32]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d007      	beq.n	8014f52 <HAL_RCC_OscConfig+0x162>
 8014f42:	6a3b      	ldr	r3, [r7, #32]
 8014f44:	2b18      	cmp	r3, #24
 8014f46:	d12d      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x1b4>
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	f003 0303 	and.w	r3, r3, #3
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d128      	bne.n	8014fa4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014f52:	4b52      	ldr	r3, [pc, #328]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	f003 0304 	and.w	r3, r3, #4
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d005      	beq.n	8014f6a <HAL_RCC_OscConfig+0x17a>
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d101      	bne.n	8014f6a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8014f66:	2301      	movs	r3, #1
 8014f68:	e310      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014f6a:	f7fd ffc1 	bl	8012ef0 <HAL_GetREVID>
 8014f6e:	4602      	mov	r2, r0
 8014f70:	f241 0303 	movw	r3, #4099	; 0x1003
 8014f74:	429a      	cmp	r2, r3
 8014f76:	d80a      	bhi.n	8014f8e <HAL_RCC_OscConfig+0x19e>
 8014f78:	4b48      	ldr	r3, [pc, #288]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f7a:	685b      	ldr	r3, [r3, #4]
 8014f7c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	031b      	lsls	r3, r3, #12
 8014f86:	4945      	ldr	r1, [pc, #276]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f88:	4313      	orrs	r3, r2
 8014f8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014f8c:	e060      	b.n	8015050 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014f8e:	4b43      	ldr	r3, [pc, #268]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	691b      	ldr	r3, [r3, #16]
 8014f9a:	061b      	lsls	r3, r3, #24
 8014f9c:	493f      	ldr	r1, [pc, #252]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014f9e:	4313      	orrs	r3, r2
 8014fa0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014fa2:	e055      	b.n	8015050 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	68db      	ldr	r3, [r3, #12]
 8014fa8:	2b00      	cmp	r3, #0
 8014faa:	d038      	beq.n	801501e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014fac:	4b3b      	ldr	r3, [pc, #236]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014fae:	681b      	ldr	r3, [r3, #0]
 8014fb0:	f023 0219 	bic.w	r2, r3, #25
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	68db      	ldr	r3, [r3, #12]
 8014fb8:	4938      	ldr	r1, [pc, #224]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014fba:	4313      	orrs	r3, r2
 8014fbc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014fbe:	f7fd ff69 	bl	8012e94 <HAL_GetTick>
 8014fc2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014fc4:	e008      	b.n	8014fd8 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014fc6:	f7fd ff65 	bl	8012e94 <HAL_GetTick>
 8014fca:	4602      	mov	r2, r0
 8014fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fce:	1ad3      	subs	r3, r2, r3
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d901      	bls.n	8014fd8 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8014fd4:	2303      	movs	r3, #3
 8014fd6:	e2d9      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014fd8:	4b30      	ldr	r3, [pc, #192]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	f003 0304 	and.w	r3, r3, #4
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d0f0      	beq.n	8014fc6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014fe4:	f7fd ff84 	bl	8012ef0 <HAL_GetREVID>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	f241 0303 	movw	r3, #4099	; 0x1003
 8014fee:	429a      	cmp	r2, r3
 8014ff0:	d80a      	bhi.n	8015008 <HAL_RCC_OscConfig+0x218>
 8014ff2:	4b2a      	ldr	r3, [pc, #168]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8014ff4:	685b      	ldr	r3, [r3, #4]
 8014ff6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	691b      	ldr	r3, [r3, #16]
 8014ffe:	031b      	lsls	r3, r3, #12
 8015000:	4926      	ldr	r1, [pc, #152]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015002:	4313      	orrs	r3, r2
 8015004:	604b      	str	r3, [r1, #4]
 8015006:	e023      	b.n	8015050 <HAL_RCC_OscConfig+0x260>
 8015008:	4b24      	ldr	r3, [pc, #144]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 801500a:	685b      	ldr	r3, [r3, #4]
 801500c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	691b      	ldr	r3, [r3, #16]
 8015014:	061b      	lsls	r3, r3, #24
 8015016:	4921      	ldr	r1, [pc, #132]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015018:	4313      	orrs	r3, r2
 801501a:	604b      	str	r3, [r1, #4]
 801501c:	e018      	b.n	8015050 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801501e:	4b1f      	ldr	r3, [pc, #124]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	4a1e      	ldr	r2, [pc, #120]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015024:	f023 0301 	bic.w	r3, r3, #1
 8015028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801502a:	f7fd ff33 	bl	8012e94 <HAL_GetTick>
 801502e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015030:	e008      	b.n	8015044 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8015032:	f7fd ff2f 	bl	8012e94 <HAL_GetTick>
 8015036:	4602      	mov	r2, r0
 8015038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801503a:	1ad3      	subs	r3, r2, r3
 801503c:	2b02      	cmp	r3, #2
 801503e:	d901      	bls.n	8015044 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8015040:	2303      	movs	r3, #3
 8015042:	e2a3      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8015044:	4b15      	ldr	r3, [pc, #84]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	f003 0304 	and.w	r3, r3, #4
 801504c:	2b00      	cmp	r3, #0
 801504e:	d1f0      	bne.n	8015032 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	f003 0310 	and.w	r3, r3, #16
 8015058:	2b00      	cmp	r3, #0
 801505a:	f000 8091 	beq.w	8015180 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801505e:	4b0f      	ldr	r3, [pc, #60]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015060:	691b      	ldr	r3, [r3, #16]
 8015062:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8015066:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8015068:	4b0c      	ldr	r3, [pc, #48]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 801506a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801506c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801506e:	69bb      	ldr	r3, [r7, #24]
 8015070:	2b08      	cmp	r3, #8
 8015072:	d007      	beq.n	8015084 <HAL_RCC_OscConfig+0x294>
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	2b18      	cmp	r3, #24
 8015078:	d12f      	bne.n	80150da <HAL_RCC_OscConfig+0x2ea>
 801507a:	697b      	ldr	r3, [r7, #20]
 801507c:	f003 0303 	and.w	r3, r3, #3
 8015080:	2b01      	cmp	r3, #1
 8015082:	d12a      	bne.n	80150da <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8015084:	4b05      	ldr	r3, [pc, #20]	; (801509c <HAL_RCC_OscConfig+0x2ac>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801508c:	2b00      	cmp	r3, #0
 801508e:	d007      	beq.n	80150a0 <HAL_RCC_OscConfig+0x2b0>
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	69db      	ldr	r3, [r3, #28]
 8015094:	2b80      	cmp	r3, #128	; 0x80
 8015096:	d003      	beq.n	80150a0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8015098:	2301      	movs	r3, #1
 801509a:	e277      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
 801509c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80150a0:	f7fd ff26 	bl	8012ef0 <HAL_GetREVID>
 80150a4:	4602      	mov	r2, r0
 80150a6:	f241 0303 	movw	r3, #4099	; 0x1003
 80150aa:	429a      	cmp	r2, r3
 80150ac:	d80a      	bhi.n	80150c4 <HAL_RCC_OscConfig+0x2d4>
 80150ae:	4ba2      	ldr	r3, [pc, #648]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150b0:	685b      	ldr	r3, [r3, #4]
 80150b2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6a1b      	ldr	r3, [r3, #32]
 80150ba:	069b      	lsls	r3, r3, #26
 80150bc:	499e      	ldr	r1, [pc, #632]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150be:	4313      	orrs	r3, r2
 80150c0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80150c2:	e05d      	b.n	8015180 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80150c4:	4b9c      	ldr	r3, [pc, #624]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150c6:	68db      	ldr	r3, [r3, #12]
 80150c8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a1b      	ldr	r3, [r3, #32]
 80150d0:	061b      	lsls	r3, r3, #24
 80150d2:	4999      	ldr	r1, [pc, #612]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150d4:	4313      	orrs	r3, r2
 80150d6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80150d8:	e052      	b.n	8015180 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80150da:	687b      	ldr	r3, [r7, #4]
 80150dc:	69db      	ldr	r3, [r3, #28]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d035      	beq.n	801514e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80150e2:	4b95      	ldr	r3, [pc, #596]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	4a94      	ldr	r2, [pc, #592]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80150e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80150ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150ee:	f7fd fed1 	bl	8012e94 <HAL_GetTick>
 80150f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80150f4:	e008      	b.n	8015108 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80150f6:	f7fd fecd 	bl	8012e94 <HAL_GetTick>
 80150fa:	4602      	mov	r2, r0
 80150fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150fe:	1ad3      	subs	r3, r2, r3
 8015100:	2b02      	cmp	r3, #2
 8015102:	d901      	bls.n	8015108 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8015104:	2303      	movs	r3, #3
 8015106:	e241      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015108:	4b8b      	ldr	r3, [pc, #556]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015110:	2b00      	cmp	r3, #0
 8015112:	d0f0      	beq.n	80150f6 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8015114:	f7fd feec 	bl	8012ef0 <HAL_GetREVID>
 8015118:	4602      	mov	r2, r0
 801511a:	f241 0303 	movw	r3, #4099	; 0x1003
 801511e:	429a      	cmp	r2, r3
 8015120:	d80a      	bhi.n	8015138 <HAL_RCC_OscConfig+0x348>
 8015122:	4b85      	ldr	r3, [pc, #532]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015124:	685b      	ldr	r3, [r3, #4]
 8015126:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a1b      	ldr	r3, [r3, #32]
 801512e:	069b      	lsls	r3, r3, #26
 8015130:	4981      	ldr	r1, [pc, #516]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015132:	4313      	orrs	r3, r2
 8015134:	604b      	str	r3, [r1, #4]
 8015136:	e023      	b.n	8015180 <HAL_RCC_OscConfig+0x390>
 8015138:	4b7f      	ldr	r3, [pc, #508]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 801513a:	68db      	ldr	r3, [r3, #12]
 801513c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	6a1b      	ldr	r3, [r3, #32]
 8015144:	061b      	lsls	r3, r3, #24
 8015146:	497c      	ldr	r1, [pc, #496]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015148:	4313      	orrs	r3, r2
 801514a:	60cb      	str	r3, [r1, #12]
 801514c:	e018      	b.n	8015180 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801514e:	4b7a      	ldr	r3, [pc, #488]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	4a79      	ldr	r2, [pc, #484]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801515a:	f7fd fe9b 	bl	8012e94 <HAL_GetTick>
 801515e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015160:	e008      	b.n	8015174 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8015162:	f7fd fe97 	bl	8012e94 <HAL_GetTick>
 8015166:	4602      	mov	r2, r0
 8015168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516a:	1ad3      	subs	r3, r2, r3
 801516c:	2b02      	cmp	r3, #2
 801516e:	d901      	bls.n	8015174 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8015170:	2303      	movs	r3, #3
 8015172:	e20b      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8015174:	4b70      	ldr	r3, [pc, #448]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015176:	681b      	ldr	r3, [r3, #0]
 8015178:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801517c:	2b00      	cmp	r3, #0
 801517e:	d1f0      	bne.n	8015162 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	681b      	ldr	r3, [r3, #0]
 8015184:	f003 0308 	and.w	r3, r3, #8
 8015188:	2b00      	cmp	r3, #0
 801518a:	d036      	beq.n	80151fa <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	695b      	ldr	r3, [r3, #20]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d019      	beq.n	80151c8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8015194:	4b68      	ldr	r3, [pc, #416]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015198:	4a67      	ldr	r2, [pc, #412]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 801519a:	f043 0301 	orr.w	r3, r3, #1
 801519e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80151a0:	f7fd fe78 	bl	8012e94 <HAL_GetTick>
 80151a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80151a6:	e008      	b.n	80151ba <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80151a8:	f7fd fe74 	bl	8012e94 <HAL_GetTick>
 80151ac:	4602      	mov	r2, r0
 80151ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b0:	1ad3      	subs	r3, r2, r3
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d901      	bls.n	80151ba <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80151b6:	2303      	movs	r3, #3
 80151b8:	e1e8      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80151ba:	4b5f      	ldr	r3, [pc, #380]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80151bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151be:	f003 0302 	and.w	r3, r3, #2
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	d0f0      	beq.n	80151a8 <HAL_RCC_OscConfig+0x3b8>
 80151c6:	e018      	b.n	80151fa <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80151c8:	4b5b      	ldr	r3, [pc, #364]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80151ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151cc:	4a5a      	ldr	r2, [pc, #360]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80151ce:	f023 0301 	bic.w	r3, r3, #1
 80151d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80151d4:	f7fd fe5e 	bl	8012e94 <HAL_GetTick>
 80151d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80151da:	e008      	b.n	80151ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80151dc:	f7fd fe5a 	bl	8012e94 <HAL_GetTick>
 80151e0:	4602      	mov	r2, r0
 80151e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151e4:	1ad3      	subs	r3, r2, r3
 80151e6:	2b02      	cmp	r3, #2
 80151e8:	d901      	bls.n	80151ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80151ea:	2303      	movs	r3, #3
 80151ec:	e1ce      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80151ee:	4b52      	ldr	r3, [pc, #328]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80151f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151f2:	f003 0302 	and.w	r3, r3, #2
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d1f0      	bne.n	80151dc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	f003 0320 	and.w	r3, r3, #32
 8015202:	2b00      	cmp	r3, #0
 8015204:	d036      	beq.n	8015274 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	699b      	ldr	r3, [r3, #24]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d019      	beq.n	8015242 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801520e:	4b4a      	ldr	r3, [pc, #296]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	4a49      	ldr	r2, [pc, #292]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015214:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015218:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801521a:	f7fd fe3b 	bl	8012e94 <HAL_GetTick>
 801521e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015220:	e008      	b.n	8015234 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8015222:	f7fd fe37 	bl	8012e94 <HAL_GetTick>
 8015226:	4602      	mov	r2, r0
 8015228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801522a:	1ad3      	subs	r3, r2, r3
 801522c:	2b02      	cmp	r3, #2
 801522e:	d901      	bls.n	8015234 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8015230:	2303      	movs	r3, #3
 8015232:	e1ab      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8015234:	4b40      	ldr	r3, [pc, #256]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015236:	681b      	ldr	r3, [r3, #0]
 8015238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801523c:	2b00      	cmp	r3, #0
 801523e:	d0f0      	beq.n	8015222 <HAL_RCC_OscConfig+0x432>
 8015240:	e018      	b.n	8015274 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8015242:	4b3d      	ldr	r3, [pc, #244]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	4a3c      	ldr	r2, [pc, #240]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015248:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801524c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801524e:	f7fd fe21 	bl	8012e94 <HAL_GetTick>
 8015252:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015254:	e008      	b.n	8015268 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8015256:	f7fd fe1d 	bl	8012e94 <HAL_GetTick>
 801525a:	4602      	mov	r2, r0
 801525c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801525e:	1ad3      	subs	r3, r2, r3
 8015260:	2b02      	cmp	r3, #2
 8015262:	d901      	bls.n	8015268 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8015264:	2303      	movs	r3, #3
 8015266:	e191      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8015268:	4b33      	ldr	r3, [pc, #204]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015270:	2b00      	cmp	r3, #0
 8015272:	d1f0      	bne.n	8015256 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	681b      	ldr	r3, [r3, #0]
 8015278:	f003 0304 	and.w	r3, r3, #4
 801527c:	2b00      	cmp	r3, #0
 801527e:	f000 8086 	beq.w	801538e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8015282:	4b2e      	ldr	r3, [pc, #184]	; (801533c <HAL_RCC_OscConfig+0x54c>)
 8015284:	681b      	ldr	r3, [r3, #0]
 8015286:	4a2d      	ldr	r2, [pc, #180]	; (801533c <HAL_RCC_OscConfig+0x54c>)
 8015288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801528c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801528e:	f7fd fe01 	bl	8012e94 <HAL_GetTick>
 8015292:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015294:	e008      	b.n	80152a8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8015296:	f7fd fdfd 	bl	8012e94 <HAL_GetTick>
 801529a:	4602      	mov	r2, r0
 801529c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801529e:	1ad3      	subs	r3, r2, r3
 80152a0:	2b64      	cmp	r3, #100	; 0x64
 80152a2:	d901      	bls.n	80152a8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 80152a4:	2303      	movs	r3, #3
 80152a6:	e171      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80152a8:	4b24      	ldr	r3, [pc, #144]	; (801533c <HAL_RCC_OscConfig+0x54c>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	d0f0      	beq.n	8015296 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	689b      	ldr	r3, [r3, #8]
 80152b8:	2b01      	cmp	r3, #1
 80152ba:	d106      	bne.n	80152ca <HAL_RCC_OscConfig+0x4da>
 80152bc:	4b1e      	ldr	r3, [pc, #120]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152c0:	4a1d      	ldr	r2, [pc, #116]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152c2:	f043 0301 	orr.w	r3, r3, #1
 80152c6:	6713      	str	r3, [r2, #112]	; 0x70
 80152c8:	e02d      	b.n	8015326 <HAL_RCC_OscConfig+0x536>
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	689b      	ldr	r3, [r3, #8]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d10c      	bne.n	80152ec <HAL_RCC_OscConfig+0x4fc>
 80152d2:	4b19      	ldr	r3, [pc, #100]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152d6:	4a18      	ldr	r2, [pc, #96]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152d8:	f023 0301 	bic.w	r3, r3, #1
 80152dc:	6713      	str	r3, [r2, #112]	; 0x70
 80152de:	4b16      	ldr	r3, [pc, #88]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152e2:	4a15      	ldr	r2, [pc, #84]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152e4:	f023 0304 	bic.w	r3, r3, #4
 80152e8:	6713      	str	r3, [r2, #112]	; 0x70
 80152ea:	e01c      	b.n	8015326 <HAL_RCC_OscConfig+0x536>
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	689b      	ldr	r3, [r3, #8]
 80152f0:	2b05      	cmp	r3, #5
 80152f2:	d10c      	bne.n	801530e <HAL_RCC_OscConfig+0x51e>
 80152f4:	4b10      	ldr	r3, [pc, #64]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80152f8:	4a0f      	ldr	r2, [pc, #60]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 80152fa:	f043 0304 	orr.w	r3, r3, #4
 80152fe:	6713      	str	r3, [r2, #112]	; 0x70
 8015300:	4b0d      	ldr	r3, [pc, #52]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015304:	4a0c      	ldr	r2, [pc, #48]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015306:	f043 0301 	orr.w	r3, r3, #1
 801530a:	6713      	str	r3, [r2, #112]	; 0x70
 801530c:	e00b      	b.n	8015326 <HAL_RCC_OscConfig+0x536>
 801530e:	4b0a      	ldr	r3, [pc, #40]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015312:	4a09      	ldr	r2, [pc, #36]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015314:	f023 0301 	bic.w	r3, r3, #1
 8015318:	6713      	str	r3, [r2, #112]	; 0x70
 801531a:	4b07      	ldr	r3, [pc, #28]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 801531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801531e:	4a06      	ldr	r2, [pc, #24]	; (8015338 <HAL_RCC_OscConfig+0x548>)
 8015320:	f023 0304 	bic.w	r3, r3, #4
 8015324:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	689b      	ldr	r3, [r3, #8]
 801532a:	2b00      	cmp	r3, #0
 801532c:	d01a      	beq.n	8015364 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801532e:	f7fd fdb1 	bl	8012e94 <HAL_GetTick>
 8015332:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015334:	e00f      	b.n	8015356 <HAL_RCC_OscConfig+0x566>
 8015336:	bf00      	nop
 8015338:	58024400 	.word	0x58024400
 801533c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8015340:	f7fd fda8 	bl	8012e94 <HAL_GetTick>
 8015344:	4602      	mov	r2, r0
 8015346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015348:	1ad3      	subs	r3, r2, r3
 801534a:	f241 3288 	movw	r2, #5000	; 0x1388
 801534e:	4293      	cmp	r3, r2
 8015350:	d901      	bls.n	8015356 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8015352:	2303      	movs	r3, #3
 8015354:	e11a      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015356:	4b8f      	ldr	r3, [pc, #572]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801535a:	f003 0302 	and.w	r3, r3, #2
 801535e:	2b00      	cmp	r3, #0
 8015360:	d0ee      	beq.n	8015340 <HAL_RCC_OscConfig+0x550>
 8015362:	e014      	b.n	801538e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015364:	f7fd fd96 	bl	8012e94 <HAL_GetTick>
 8015368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801536a:	e00a      	b.n	8015382 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801536c:	f7fd fd92 	bl	8012e94 <HAL_GetTick>
 8015370:	4602      	mov	r2, r0
 8015372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015374:	1ad3      	subs	r3, r2, r3
 8015376:	f241 3288 	movw	r2, #5000	; 0x1388
 801537a:	4293      	cmp	r3, r2
 801537c:	d901      	bls.n	8015382 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 801537e:	2303      	movs	r3, #3
 8015380:	e104      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8015382:	4b84      	ldr	r3, [pc, #528]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015386:	f003 0302 	and.w	r3, r3, #2
 801538a:	2b00      	cmp	r3, #0
 801538c:	d1ee      	bne.n	801536c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015392:	2b00      	cmp	r3, #0
 8015394:	f000 80f9 	beq.w	801558a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8015398:	4b7e      	ldr	r3, [pc, #504]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 801539a:	691b      	ldr	r3, [r3, #16]
 801539c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80153a0:	2b18      	cmp	r3, #24
 80153a2:	f000 80b4 	beq.w	801550e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153aa:	2b02      	cmp	r3, #2
 80153ac:	f040 8095 	bne.w	80154da <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80153b0:	4b78      	ldr	r3, [pc, #480]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80153b2:	681b      	ldr	r3, [r3, #0]
 80153b4:	4a77      	ldr	r2, [pc, #476]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80153b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80153ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80153bc:	f7fd fd6a 	bl	8012e94 <HAL_GetTick>
 80153c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80153c2:	e008      	b.n	80153d6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80153c4:	f7fd fd66 	bl	8012e94 <HAL_GetTick>
 80153c8:	4602      	mov	r2, r0
 80153ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153cc:	1ad3      	subs	r3, r2, r3
 80153ce:	2b02      	cmp	r3, #2
 80153d0:	d901      	bls.n	80153d6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80153d2:	2303      	movs	r3, #3
 80153d4:	e0da      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80153d6:	4b6f      	ldr	r3, [pc, #444]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d1f0      	bne.n	80153c4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80153e2:	4b6c      	ldr	r3, [pc, #432]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80153e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80153e6:	4b6c      	ldr	r3, [pc, #432]	; (8015598 <HAL_RCC_OscConfig+0x7a8>)
 80153e8:	4013      	ands	r3, r2
 80153ea:	687a      	ldr	r2, [r7, #4]
 80153ec:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80153ee:	687a      	ldr	r2, [r7, #4]
 80153f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80153f2:	0112      	lsls	r2, r2, #4
 80153f4:	430a      	orrs	r2, r1
 80153f6:	4967      	ldr	r1, [pc, #412]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80153f8:	4313      	orrs	r3, r2
 80153fa:	628b      	str	r3, [r1, #40]	; 0x28
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015400:	3b01      	subs	r3, #1
 8015402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801540a:	3b01      	subs	r3, #1
 801540c:	025b      	lsls	r3, r3, #9
 801540e:	b29b      	uxth	r3, r3
 8015410:	431a      	orrs	r2, r3
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015416:	3b01      	subs	r3, #1
 8015418:	041b      	lsls	r3, r3, #16
 801541a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801541e:	431a      	orrs	r2, r3
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015424:	3b01      	subs	r3, #1
 8015426:	061b      	lsls	r3, r3, #24
 8015428:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801542c:	4959      	ldr	r1, [pc, #356]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 801542e:	4313      	orrs	r3, r2
 8015430:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8015432:	4b58      	ldr	r3, [pc, #352]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015436:	4a57      	ldr	r2, [pc, #348]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015438:	f023 0301 	bic.w	r3, r3, #1
 801543c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801543e:	4b55      	ldr	r3, [pc, #340]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015442:	4b56      	ldr	r3, [pc, #344]	; (801559c <HAL_RCC_OscConfig+0x7ac>)
 8015444:	4013      	ands	r3, r2
 8015446:	687a      	ldr	r2, [r7, #4]
 8015448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801544a:	00d2      	lsls	r2, r2, #3
 801544c:	4951      	ldr	r1, [pc, #324]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 801544e:	4313      	orrs	r3, r2
 8015450:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8015452:	4b50      	ldr	r3, [pc, #320]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015456:	f023 020c 	bic.w	r2, r3, #12
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801545e:	494d      	ldr	r1, [pc, #308]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015460:	4313      	orrs	r3, r2
 8015462:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8015464:	4b4b      	ldr	r3, [pc, #300]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015468:	f023 0202 	bic.w	r2, r3, #2
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015470:	4948      	ldr	r1, [pc, #288]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015472:	4313      	orrs	r3, r2
 8015474:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8015476:	4b47      	ldr	r3, [pc, #284]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801547a:	4a46      	ldr	r2, [pc, #280]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 801547c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015480:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015482:	4b44      	ldr	r3, [pc, #272]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015486:	4a43      	ldr	r2, [pc, #268]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015488:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801548c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801548e:	4b41      	ldr	r3, [pc, #260]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015492:	4a40      	ldr	r2, [pc, #256]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8015498:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 801549a:	4b3e      	ldr	r3, [pc, #248]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 801549c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801549e:	4a3d      	ldr	r2, [pc, #244]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154a0:	f043 0301 	orr.w	r3, r3, #1
 80154a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80154a6:	4b3b      	ldr	r3, [pc, #236]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	4a3a      	ldr	r2, [pc, #232]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80154b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80154b2:	f7fd fcef 	bl	8012e94 <HAL_GetTick>
 80154b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80154b8:	e008      	b.n	80154cc <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80154ba:	f7fd fceb 	bl	8012e94 <HAL_GetTick>
 80154be:	4602      	mov	r2, r0
 80154c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154c2:	1ad3      	subs	r3, r2, r3
 80154c4:	2b02      	cmp	r3, #2
 80154c6:	d901      	bls.n	80154cc <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80154c8:	2303      	movs	r3, #3
 80154ca:	e05f      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80154cc:	4b31      	ldr	r3, [pc, #196]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d0f0      	beq.n	80154ba <HAL_RCC_OscConfig+0x6ca>
 80154d8:	e057      	b.n	801558a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80154da:	4b2e      	ldr	r3, [pc, #184]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	4a2d      	ldr	r2, [pc, #180]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 80154e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80154e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80154e6:	f7fd fcd5 	bl	8012e94 <HAL_GetTick>
 80154ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80154ec:	e008      	b.n	8015500 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80154ee:	f7fd fcd1 	bl	8012e94 <HAL_GetTick>
 80154f2:	4602      	mov	r2, r0
 80154f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80154f6:	1ad3      	subs	r3, r2, r3
 80154f8:	2b02      	cmp	r3, #2
 80154fa:	d901      	bls.n	8015500 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 80154fc:	2303      	movs	r3, #3
 80154fe:	e045      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015500:	4b24      	ldr	r3, [pc, #144]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1f0      	bne.n	80154ee <HAL_RCC_OscConfig+0x6fe>
 801550c:	e03d      	b.n	801558a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801550e:	4b21      	ldr	r3, [pc, #132]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015512:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8015514:	4b1f      	ldr	r3, [pc, #124]	; (8015594 <HAL_RCC_OscConfig+0x7a4>)
 8015516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015518:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801551e:	2b01      	cmp	r3, #1
 8015520:	d031      	beq.n	8015586 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015522:	693b      	ldr	r3, [r7, #16]
 8015524:	f003 0203 	and.w	r2, r3, #3
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801552c:	429a      	cmp	r2, r3
 801552e:	d12a      	bne.n	8015586 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	091b      	lsrs	r3, r3, #4
 8015534:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801553c:	429a      	cmp	r2, r3
 801553e:	d122      	bne.n	8015586 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801554a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801554c:	429a      	cmp	r2, r3
 801554e:	d11a      	bne.n	8015586 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	0a5b      	lsrs	r3, r3, #9
 8015554:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801555c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801555e:	429a      	cmp	r2, r3
 8015560:	d111      	bne.n	8015586 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	0c1b      	lsrs	r3, r3, #16
 8015566:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801556e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015570:	429a      	cmp	r2, r3
 8015572:	d108      	bne.n	8015586 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	0e1b      	lsrs	r3, r3, #24
 8015578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015580:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015582:	429a      	cmp	r2, r3
 8015584:	d001      	beq.n	801558a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8015586:	2301      	movs	r3, #1
 8015588:	e000      	b.n	801558c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 801558a:	2300      	movs	r3, #0
}
 801558c:	4618      	mov	r0, r3
 801558e:	3730      	adds	r7, #48	; 0x30
 8015590:	46bd      	mov	sp, r7
 8015592:	bd80      	pop	{r7, pc}
 8015594:	58024400 	.word	0x58024400
 8015598:	fffffc0c 	.word	0xfffffc0c
 801559c:	ffff0007 	.word	0xffff0007

080155a0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b086      	sub	sp, #24
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	6078      	str	r0, [r7, #4]
 80155a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	2b00      	cmp	r3, #0
 80155ae:	d101      	bne.n	80155b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80155b0:	2301      	movs	r3, #1
 80155b2:	e19c      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80155b4:	4b8a      	ldr	r3, [pc, #552]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	f003 030f 	and.w	r3, r3, #15
 80155bc:	683a      	ldr	r2, [r7, #0]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d910      	bls.n	80155e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80155c2:	4b87      	ldr	r3, [pc, #540]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f023 020f 	bic.w	r2, r3, #15
 80155ca:	4985      	ldr	r1, [pc, #532]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80155cc:	683b      	ldr	r3, [r7, #0]
 80155ce:	4313      	orrs	r3, r2
 80155d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80155d2:	4b83      	ldr	r3, [pc, #524]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	f003 030f 	and.w	r3, r3, #15
 80155da:	683a      	ldr	r2, [r7, #0]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d001      	beq.n	80155e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80155e0:	2301      	movs	r3, #1
 80155e2:	e184      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	f003 0304 	and.w	r3, r3, #4
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d010      	beq.n	8015612 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	691a      	ldr	r2, [r3, #16]
 80155f4:	4b7b      	ldr	r3, [pc, #492]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80155f6:	699b      	ldr	r3, [r3, #24]
 80155f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80155fc:	429a      	cmp	r2, r3
 80155fe:	d908      	bls.n	8015612 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015600:	4b78      	ldr	r3, [pc, #480]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015602:	699b      	ldr	r3, [r3, #24]
 8015604:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	691b      	ldr	r3, [r3, #16]
 801560c:	4975      	ldr	r1, [pc, #468]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801560e:	4313      	orrs	r3, r2
 8015610:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	f003 0308 	and.w	r3, r3, #8
 801561a:	2b00      	cmp	r3, #0
 801561c:	d010      	beq.n	8015640 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	695a      	ldr	r2, [r3, #20]
 8015622:	4b70      	ldr	r3, [pc, #448]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015624:	69db      	ldr	r3, [r3, #28]
 8015626:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801562a:	429a      	cmp	r2, r3
 801562c:	d908      	bls.n	8015640 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801562e:	4b6d      	ldr	r3, [pc, #436]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015630:	69db      	ldr	r3, [r3, #28]
 8015632:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	695b      	ldr	r3, [r3, #20]
 801563a:	496a      	ldr	r1, [pc, #424]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801563c:	4313      	orrs	r3, r2
 801563e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	f003 0310 	and.w	r3, r3, #16
 8015648:	2b00      	cmp	r3, #0
 801564a:	d010      	beq.n	801566e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	699a      	ldr	r2, [r3, #24]
 8015650:	4b64      	ldr	r3, [pc, #400]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015652:	69db      	ldr	r3, [r3, #28]
 8015654:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015658:	429a      	cmp	r2, r3
 801565a:	d908      	bls.n	801566e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801565c:	4b61      	ldr	r3, [pc, #388]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801565e:	69db      	ldr	r3, [r3, #28]
 8015660:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015664:	687b      	ldr	r3, [r7, #4]
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	495e      	ldr	r1, [pc, #376]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801566a:	4313      	orrs	r3, r2
 801566c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801566e:	687b      	ldr	r3, [r7, #4]
 8015670:	681b      	ldr	r3, [r3, #0]
 8015672:	f003 0320 	and.w	r3, r3, #32
 8015676:	2b00      	cmp	r3, #0
 8015678:	d010      	beq.n	801569c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	69da      	ldr	r2, [r3, #28]
 801567e:	4b59      	ldr	r3, [pc, #356]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015680:	6a1b      	ldr	r3, [r3, #32]
 8015682:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015686:	429a      	cmp	r2, r3
 8015688:	d908      	bls.n	801569c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801568a:	4b56      	ldr	r3, [pc, #344]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801568c:	6a1b      	ldr	r3, [r3, #32]
 801568e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	69db      	ldr	r3, [r3, #28]
 8015696:	4953      	ldr	r1, [pc, #332]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015698:	4313      	orrs	r3, r2
 801569a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801569c:	687b      	ldr	r3, [r7, #4]
 801569e:	681b      	ldr	r3, [r3, #0]
 80156a0:	f003 0302 	and.w	r3, r3, #2
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d010      	beq.n	80156ca <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	68da      	ldr	r2, [r3, #12]
 80156ac:	4b4d      	ldr	r3, [pc, #308]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156ae:	699b      	ldr	r3, [r3, #24]
 80156b0:	f003 030f 	and.w	r3, r3, #15
 80156b4:	429a      	cmp	r2, r3
 80156b6:	d908      	bls.n	80156ca <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80156b8:	4b4a      	ldr	r3, [pc, #296]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156ba:	699b      	ldr	r3, [r3, #24]
 80156bc:	f023 020f 	bic.w	r2, r3, #15
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	4947      	ldr	r1, [pc, #284]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156c6:	4313      	orrs	r3, r2
 80156c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	681b      	ldr	r3, [r3, #0]
 80156ce:	f003 0301 	and.w	r3, r3, #1
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d055      	beq.n	8015782 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80156d6:	4b43      	ldr	r3, [pc, #268]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156d8:	699b      	ldr	r3, [r3, #24]
 80156da:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	689b      	ldr	r3, [r3, #8]
 80156e2:	4940      	ldr	r1, [pc, #256]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156e4:	4313      	orrs	r3, r2
 80156e6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	685b      	ldr	r3, [r3, #4]
 80156ec:	2b02      	cmp	r3, #2
 80156ee:	d107      	bne.n	8015700 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80156f0:	4b3c      	ldr	r3, [pc, #240]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80156f2:	681b      	ldr	r3, [r3, #0]
 80156f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d121      	bne.n	8015740 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80156fc:	2301      	movs	r3, #1
 80156fe:	e0f6      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	685b      	ldr	r3, [r3, #4]
 8015704:	2b03      	cmp	r3, #3
 8015706:	d107      	bne.n	8015718 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015708:	4b36      	ldr	r3, [pc, #216]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015710:	2b00      	cmp	r3, #0
 8015712:	d115      	bne.n	8015740 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015714:	2301      	movs	r3, #1
 8015716:	e0ea      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	685b      	ldr	r3, [r3, #4]
 801571c:	2b01      	cmp	r3, #1
 801571e:	d107      	bne.n	8015730 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015720:	4b30      	ldr	r3, [pc, #192]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015728:	2b00      	cmp	r3, #0
 801572a:	d109      	bne.n	8015740 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801572c:	2301      	movs	r3, #1
 801572e:	e0de      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015730:	4b2c      	ldr	r3, [pc, #176]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	f003 0304 	and.w	r3, r3, #4
 8015738:	2b00      	cmp	r3, #0
 801573a:	d101      	bne.n	8015740 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801573c:	2301      	movs	r3, #1
 801573e:	e0d6      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015740:	4b28      	ldr	r3, [pc, #160]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015742:	691b      	ldr	r3, [r3, #16]
 8015744:	f023 0207 	bic.w	r2, r3, #7
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	685b      	ldr	r3, [r3, #4]
 801574c:	4925      	ldr	r1, [pc, #148]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 801574e:	4313      	orrs	r3, r2
 8015750:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015752:	f7fd fb9f 	bl	8012e94 <HAL_GetTick>
 8015756:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015758:	e00a      	b.n	8015770 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801575a:	f7fd fb9b 	bl	8012e94 <HAL_GetTick>
 801575e:	4602      	mov	r2, r0
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	1ad3      	subs	r3, r2, r3
 8015764:	f241 3288 	movw	r2, #5000	; 0x1388
 8015768:	4293      	cmp	r3, r2
 801576a:	d901      	bls.n	8015770 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801576c:	2303      	movs	r3, #3
 801576e:	e0be      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015770:	4b1c      	ldr	r3, [pc, #112]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015772:	691b      	ldr	r3, [r3, #16]
 8015774:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	685b      	ldr	r3, [r3, #4]
 801577c:	00db      	lsls	r3, r3, #3
 801577e:	429a      	cmp	r2, r3
 8015780:	d1eb      	bne.n	801575a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	f003 0302 	and.w	r3, r3, #2
 801578a:	2b00      	cmp	r3, #0
 801578c:	d010      	beq.n	80157b0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	68da      	ldr	r2, [r3, #12]
 8015792:	4b14      	ldr	r3, [pc, #80]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 8015794:	699b      	ldr	r3, [r3, #24]
 8015796:	f003 030f 	and.w	r3, r3, #15
 801579a:	429a      	cmp	r2, r3
 801579c:	d208      	bcs.n	80157b0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801579e:	4b11      	ldr	r3, [pc, #68]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	f023 020f 	bic.w	r2, r3, #15
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	68db      	ldr	r3, [r3, #12]
 80157aa:	490e      	ldr	r1, [pc, #56]	; (80157e4 <HAL_RCC_ClockConfig+0x244>)
 80157ac:	4313      	orrs	r3, r2
 80157ae:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80157b0:	4b0b      	ldr	r3, [pc, #44]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	f003 030f 	and.w	r3, r3, #15
 80157b8:	683a      	ldr	r2, [r7, #0]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d214      	bcs.n	80157e8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80157be:	4b08      	ldr	r3, [pc, #32]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	f023 020f 	bic.w	r2, r3, #15
 80157c6:	4906      	ldr	r1, [pc, #24]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	4313      	orrs	r3, r2
 80157cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80157ce:	4b04      	ldr	r3, [pc, #16]	; (80157e0 <HAL_RCC_ClockConfig+0x240>)
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f003 030f 	and.w	r3, r3, #15
 80157d6:	683a      	ldr	r2, [r7, #0]
 80157d8:	429a      	cmp	r2, r3
 80157da:	d005      	beq.n	80157e8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80157dc:	2301      	movs	r3, #1
 80157de:	e086      	b.n	80158ee <HAL_RCC_ClockConfig+0x34e>
 80157e0:	52002000 	.word	0x52002000
 80157e4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	f003 0304 	and.w	r3, r3, #4
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d010      	beq.n	8015816 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	691a      	ldr	r2, [r3, #16]
 80157f8:	4b3f      	ldr	r3, [pc, #252]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 80157fa:	699b      	ldr	r3, [r3, #24]
 80157fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015800:	429a      	cmp	r2, r3
 8015802:	d208      	bcs.n	8015816 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015804:	4b3c      	ldr	r3, [pc, #240]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015806:	699b      	ldr	r3, [r3, #24]
 8015808:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	691b      	ldr	r3, [r3, #16]
 8015810:	4939      	ldr	r1, [pc, #228]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015812:	4313      	orrs	r3, r2
 8015814:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	f003 0308 	and.w	r3, r3, #8
 801581e:	2b00      	cmp	r3, #0
 8015820:	d010      	beq.n	8015844 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	695a      	ldr	r2, [r3, #20]
 8015826:	4b34      	ldr	r3, [pc, #208]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015828:	69db      	ldr	r3, [r3, #28]
 801582a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801582e:	429a      	cmp	r2, r3
 8015830:	d208      	bcs.n	8015844 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8015832:	4b31      	ldr	r3, [pc, #196]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015834:	69db      	ldr	r3, [r3, #28]
 8015836:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	695b      	ldr	r3, [r3, #20]
 801583e:	492e      	ldr	r1, [pc, #184]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015840:	4313      	orrs	r3, r2
 8015842:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	681b      	ldr	r3, [r3, #0]
 8015848:	f003 0310 	and.w	r3, r3, #16
 801584c:	2b00      	cmp	r3, #0
 801584e:	d010      	beq.n	8015872 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	699a      	ldr	r2, [r3, #24]
 8015854:	4b28      	ldr	r3, [pc, #160]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015856:	69db      	ldr	r3, [r3, #28]
 8015858:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801585c:	429a      	cmp	r2, r3
 801585e:	d208      	bcs.n	8015872 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015860:	4b25      	ldr	r3, [pc, #148]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015862:	69db      	ldr	r3, [r3, #28]
 8015864:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015868:	687b      	ldr	r3, [r7, #4]
 801586a:	699b      	ldr	r3, [r3, #24]
 801586c:	4922      	ldr	r1, [pc, #136]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 801586e:	4313      	orrs	r3, r2
 8015870:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	f003 0320 	and.w	r3, r3, #32
 801587a:	2b00      	cmp	r3, #0
 801587c:	d010      	beq.n	80158a0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	69da      	ldr	r2, [r3, #28]
 8015882:	4b1d      	ldr	r3, [pc, #116]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015884:	6a1b      	ldr	r3, [r3, #32]
 8015886:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801588a:	429a      	cmp	r2, r3
 801588c:	d208      	bcs.n	80158a0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 801588e:	4b1a      	ldr	r3, [pc, #104]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 8015890:	6a1b      	ldr	r3, [r3, #32]
 8015892:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	69db      	ldr	r3, [r3, #28]
 801589a:	4917      	ldr	r1, [pc, #92]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 801589c:	4313      	orrs	r3, r2
 801589e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80158a0:	f000 f834 	bl	801590c <HAL_RCC_GetSysClockFreq>
 80158a4:	4601      	mov	r1, r0
 80158a6:	4b14      	ldr	r3, [pc, #80]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 80158a8:	699b      	ldr	r3, [r3, #24]
 80158aa:	0a1b      	lsrs	r3, r3, #8
 80158ac:	f003 030f 	and.w	r3, r3, #15
 80158b0:	4a12      	ldr	r2, [pc, #72]	; (80158fc <HAL_RCC_ClockConfig+0x35c>)
 80158b2:	5cd3      	ldrb	r3, [r2, r3]
 80158b4:	f003 031f 	and.w	r3, r3, #31
 80158b8:	fa21 f303 	lsr.w	r3, r1, r3
 80158bc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80158be:	4b0e      	ldr	r3, [pc, #56]	; (80158f8 <HAL_RCC_ClockConfig+0x358>)
 80158c0:	699b      	ldr	r3, [r3, #24]
 80158c2:	f003 030f 	and.w	r3, r3, #15
 80158c6:	4a0d      	ldr	r2, [pc, #52]	; (80158fc <HAL_RCC_ClockConfig+0x35c>)
 80158c8:	5cd3      	ldrb	r3, [r2, r3]
 80158ca:	f003 031f 	and.w	r3, r3, #31
 80158ce:	693a      	ldr	r2, [r7, #16]
 80158d0:	fa22 f303 	lsr.w	r3, r2, r3
 80158d4:	4a0a      	ldr	r2, [pc, #40]	; (8015900 <HAL_RCC_ClockConfig+0x360>)
 80158d6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80158d8:	4a0a      	ldr	r2, [pc, #40]	; (8015904 <HAL_RCC_ClockConfig+0x364>)
 80158da:	693b      	ldr	r3, [r7, #16]
 80158dc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80158de:	4b0a      	ldr	r3, [pc, #40]	; (8015908 <HAL_RCC_ClockConfig+0x368>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	4618      	mov	r0, r3
 80158e4:	f7fd fa8c 	bl	8012e00 <HAL_InitTick>
 80158e8:	4603      	mov	r3, r0
 80158ea:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80158ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80158ee:	4618      	mov	r0, r3
 80158f0:	3718      	adds	r7, #24
 80158f2:	46bd      	mov	sp, r7
 80158f4:	bd80      	pop	{r7, pc}
 80158f6:	bf00      	nop
 80158f8:	58024400 	.word	0x58024400
 80158fc:	0801fa18 	.word	0x0801fa18
 8015900:	24000010 	.word	0x24000010
 8015904:	2400000c 	.word	0x2400000c
 8015908:	24000014 	.word	0x24000014

0801590c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801590c:	b480      	push	{r7}
 801590e:	b089      	sub	sp, #36	; 0x24
 8015910:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015912:	4baf      	ldr	r3, [pc, #700]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015914:	691b      	ldr	r3, [r3, #16]
 8015916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801591a:	2b18      	cmp	r3, #24
 801591c:	f200 814e 	bhi.w	8015bbc <HAL_RCC_GetSysClockFreq+0x2b0>
 8015920:	a201      	add	r2, pc, #4	; (adr r2, 8015928 <HAL_RCC_GetSysClockFreq+0x1c>)
 8015922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015926:	bf00      	nop
 8015928:	0801598d 	.word	0x0801598d
 801592c:	08015bbd 	.word	0x08015bbd
 8015930:	08015bbd 	.word	0x08015bbd
 8015934:	08015bbd 	.word	0x08015bbd
 8015938:	08015bbd 	.word	0x08015bbd
 801593c:	08015bbd 	.word	0x08015bbd
 8015940:	08015bbd 	.word	0x08015bbd
 8015944:	08015bbd 	.word	0x08015bbd
 8015948:	080159b3 	.word	0x080159b3
 801594c:	08015bbd 	.word	0x08015bbd
 8015950:	08015bbd 	.word	0x08015bbd
 8015954:	08015bbd 	.word	0x08015bbd
 8015958:	08015bbd 	.word	0x08015bbd
 801595c:	08015bbd 	.word	0x08015bbd
 8015960:	08015bbd 	.word	0x08015bbd
 8015964:	08015bbd 	.word	0x08015bbd
 8015968:	080159b9 	.word	0x080159b9
 801596c:	08015bbd 	.word	0x08015bbd
 8015970:	08015bbd 	.word	0x08015bbd
 8015974:	08015bbd 	.word	0x08015bbd
 8015978:	08015bbd 	.word	0x08015bbd
 801597c:	08015bbd 	.word	0x08015bbd
 8015980:	08015bbd 	.word	0x08015bbd
 8015984:	08015bbd 	.word	0x08015bbd
 8015988:	080159bf 	.word	0x080159bf
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801598c:	4b90      	ldr	r3, [pc, #576]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f003 0320 	and.w	r3, r3, #32
 8015994:	2b00      	cmp	r3, #0
 8015996:	d009      	beq.n	80159ac <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015998:	4b8d      	ldr	r3, [pc, #564]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	08db      	lsrs	r3, r3, #3
 801599e:	f003 0303 	and.w	r3, r3, #3
 80159a2:	4a8c      	ldr	r2, [pc, #560]	; (8015bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80159a4:	fa22 f303 	lsr.w	r3, r2, r3
 80159a8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80159aa:	e10a      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80159ac:	4b89      	ldr	r3, [pc, #548]	; (8015bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80159ae:	61bb      	str	r3, [r7, #24]
    break;
 80159b0:	e107      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80159b2:	4b89      	ldr	r3, [pc, #548]	; (8015bd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80159b4:	61bb      	str	r3, [r7, #24]
    break;
 80159b6:	e104      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80159b8:	4b88      	ldr	r3, [pc, #544]	; (8015bdc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80159ba:	61bb      	str	r3, [r7, #24]
    break;
 80159bc:	e101      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80159be:	4b84      	ldr	r3, [pc, #528]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159c2:	f003 0303 	and.w	r3, r3, #3
 80159c6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80159c8:	4b81      	ldr	r3, [pc, #516]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159cc:	091b      	lsrs	r3, r3, #4
 80159ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159d2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80159d4:	4b7e      	ldr	r3, [pc, #504]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159d8:	f003 0301 	and.w	r3, r3, #1
 80159dc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80159de:	4b7c      	ldr	r3, [pc, #496]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80159e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80159e2:	08db      	lsrs	r3, r3, #3
 80159e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80159e8:	68fa      	ldr	r2, [r7, #12]
 80159ea:	fb02 f303 	mul.w	r3, r2, r3
 80159ee:	ee07 3a90 	vmov	s15, r3
 80159f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80159f6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80159fa:	693b      	ldr	r3, [r7, #16]
 80159fc:	2b00      	cmp	r3, #0
 80159fe:	f000 80da 	beq.w	8015bb6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8015a02:	697b      	ldr	r3, [r7, #20]
 8015a04:	2b01      	cmp	r3, #1
 8015a06:	d05a      	beq.n	8015abe <HAL_RCC_GetSysClockFreq+0x1b2>
 8015a08:	2b01      	cmp	r3, #1
 8015a0a:	d302      	bcc.n	8015a12 <HAL_RCC_GetSysClockFreq+0x106>
 8015a0c:	2b02      	cmp	r3, #2
 8015a0e:	d078      	beq.n	8015b02 <HAL_RCC_GetSysClockFreq+0x1f6>
 8015a10:	e099      	b.n	8015b46 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015a12:	4b6f      	ldr	r3, [pc, #444]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	f003 0320 	and.w	r3, r3, #32
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d02d      	beq.n	8015a7a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015a1e:	4b6c      	ldr	r3, [pc, #432]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a20:	681b      	ldr	r3, [r3, #0]
 8015a22:	08db      	lsrs	r3, r3, #3
 8015a24:	f003 0303 	and.w	r3, r3, #3
 8015a28:	4a6a      	ldr	r2, [pc, #424]	; (8015bd4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8015a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8015a2e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	ee07 3a90 	vmov	s15, r3
 8015a36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a3a:	693b      	ldr	r3, [r7, #16]
 8015a3c:	ee07 3a90 	vmov	s15, r3
 8015a40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a48:	4b61      	ldr	r3, [pc, #388]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a50:	ee07 3a90 	vmov	s15, r3
 8015a54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a58:	ed97 6a02 	vldr	s12, [r7, #8]
 8015a5c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8015be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015a60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015a68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015a74:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8015a78:	e087      	b.n	8015b8a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015a7a:	693b      	ldr	r3, [r7, #16]
 8015a7c:	ee07 3a90 	vmov	s15, r3
 8015a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015a84:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015be4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8015a88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015a8c:	4b50      	ldr	r3, [pc, #320]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015a94:	ee07 3a90 	vmov	s15, r3
 8015a98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015a9c:	ed97 6a02 	vldr	s12, [r7, #8]
 8015aa0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8015be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015aa4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015aa8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015aac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015ab0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015ab8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015abc:	e065      	b.n	8015b8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015abe:	693b      	ldr	r3, [r7, #16]
 8015ac0:	ee07 3a90 	vmov	s15, r3
 8015ac4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015ac8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015be8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015acc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015ad0:	4b3f      	ldr	r3, [pc, #252]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ad4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015ad8:	ee07 3a90 	vmov	s15, r3
 8015adc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015ae0:	ed97 6a02 	vldr	s12, [r7, #8]
 8015ae4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015ae8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015aec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015af0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015af4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015af8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015afc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015b00:	e043      	b.n	8015b8a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015b02:	693b      	ldr	r3, [r7, #16]
 8015b04:	ee07 3a90 	vmov	s15, r3
 8015b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b0c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8015bec <HAL_RCC_GetSysClockFreq+0x2e0>
 8015b10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015b14:	4b2e      	ldr	r3, [pc, #184]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b1c:	ee07 3a90 	vmov	s15, r3
 8015b20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b24:	ed97 6a02 	vldr	s12, [r7, #8]
 8015b28:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015b2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b40:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015b44:	e021      	b.n	8015b8a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015b46:	693b      	ldr	r3, [r7, #16]
 8015b48:	ee07 3a90 	vmov	s15, r3
 8015b4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015b50:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015be8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015b58:	4b1d      	ldr	r3, [pc, #116]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015b60:	ee07 3a90 	vmov	s15, r3
 8015b64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015b68:	ed97 6a02 	vldr	s12, [r7, #8]
 8015b6c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8015be0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015b70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015b74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015b78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015b80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015b84:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015b88:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8015b8a:	4b11      	ldr	r3, [pc, #68]	; (8015bd0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b8e:	0a5b      	lsrs	r3, r3, #9
 8015b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015b94:	3301      	adds	r3, #1
 8015b96:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8015b98:	683b      	ldr	r3, [r7, #0]
 8015b9a:	ee07 3a90 	vmov	s15, r3
 8015b9e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015ba2:	edd7 6a07 	vldr	s13, [r7, #28]
 8015ba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8015baa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015bae:	ee17 3a90 	vmov	r3, s15
 8015bb2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8015bb4:	e005      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8015bb6:	2300      	movs	r3, #0
 8015bb8:	61bb      	str	r3, [r7, #24]
    break;
 8015bba:	e002      	b.n	8015bc2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8015bbc:	4b06      	ldr	r3, [pc, #24]	; (8015bd8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8015bbe:	61bb      	str	r3, [r7, #24]
    break;
 8015bc0:	bf00      	nop
  }

  return sysclockfreq;
 8015bc2:	69bb      	ldr	r3, [r7, #24]
}
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	3724      	adds	r7, #36	; 0x24
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bce:	4770      	bx	lr
 8015bd0:	58024400 	.word	0x58024400
 8015bd4:	03d09000 	.word	0x03d09000
 8015bd8:	003d0900 	.word	0x003d0900
 8015bdc:	007a1200 	.word	0x007a1200
 8015be0:	46000000 	.word	0x46000000
 8015be4:	4c742400 	.word	0x4c742400
 8015be8:	4a742400 	.word	0x4a742400
 8015bec:	4af42400 	.word	0x4af42400

08015bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015bf0:	b580      	push	{r7, lr}
 8015bf2:	b082      	sub	sp, #8
 8015bf4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015bf6:	f7ff fe89 	bl	801590c <HAL_RCC_GetSysClockFreq>
 8015bfa:	4601      	mov	r1, r0
 8015bfc:	4b10      	ldr	r3, [pc, #64]	; (8015c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8015bfe:	699b      	ldr	r3, [r3, #24]
 8015c00:	0a1b      	lsrs	r3, r3, #8
 8015c02:	f003 030f 	and.w	r3, r3, #15
 8015c06:	4a0f      	ldr	r2, [pc, #60]	; (8015c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8015c08:	5cd3      	ldrb	r3, [r2, r3]
 8015c0a:	f003 031f 	and.w	r3, r3, #31
 8015c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8015c12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015c14:	4b0a      	ldr	r3, [pc, #40]	; (8015c40 <HAL_RCC_GetHCLKFreq+0x50>)
 8015c16:	699b      	ldr	r3, [r3, #24]
 8015c18:	f003 030f 	and.w	r3, r3, #15
 8015c1c:	4a09      	ldr	r2, [pc, #36]	; (8015c44 <HAL_RCC_GetHCLKFreq+0x54>)
 8015c1e:	5cd3      	ldrb	r3, [r2, r3]
 8015c20:	f003 031f 	and.w	r3, r3, #31
 8015c24:	687a      	ldr	r2, [r7, #4]
 8015c26:	fa22 f303 	lsr.w	r3, r2, r3
 8015c2a:	4a07      	ldr	r2, [pc, #28]	; (8015c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8015c2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015c2e:	4a07      	ldr	r2, [pc, #28]	; (8015c4c <HAL_RCC_GetHCLKFreq+0x5c>)
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015c34:	4b04      	ldr	r3, [pc, #16]	; (8015c48 <HAL_RCC_GetHCLKFreq+0x58>)
 8015c36:	681b      	ldr	r3, [r3, #0]
}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	3708      	adds	r7, #8
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	bd80      	pop	{r7, pc}
 8015c40:	58024400 	.word	0x58024400
 8015c44:	0801fa18 	.word	0x0801fa18
 8015c48:	24000010 	.word	0x24000010
 8015c4c:	2400000c 	.word	0x2400000c

08015c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015c54:	f7ff ffcc 	bl	8015bf0 <HAL_RCC_GetHCLKFreq>
 8015c58:	4601      	mov	r1, r0
 8015c5a:	4b06      	ldr	r3, [pc, #24]	; (8015c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8015c5c:	69db      	ldr	r3, [r3, #28]
 8015c5e:	091b      	lsrs	r3, r3, #4
 8015c60:	f003 0307 	and.w	r3, r3, #7
 8015c64:	4a04      	ldr	r2, [pc, #16]	; (8015c78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015c66:	5cd3      	ldrb	r3, [r2, r3]
 8015c68:	f003 031f 	and.w	r3, r3, #31
 8015c6c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8015c70:	4618      	mov	r0, r3
 8015c72:	bd80      	pop	{r7, pc}
 8015c74:	58024400 	.word	0x58024400
 8015c78:	0801fa18 	.word	0x0801fa18

08015c7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8015c7c:	b580      	push	{r7, lr}
 8015c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8015c80:	f7ff ffb6 	bl	8015bf0 <HAL_RCC_GetHCLKFreq>
 8015c84:	4601      	mov	r1, r0
 8015c86:	4b06      	ldr	r3, [pc, #24]	; (8015ca0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8015c88:	69db      	ldr	r3, [r3, #28]
 8015c8a:	0a1b      	lsrs	r3, r3, #8
 8015c8c:	f003 0307 	and.w	r3, r3, #7
 8015c90:	4a04      	ldr	r2, [pc, #16]	; (8015ca4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015c92:	5cd3      	ldrb	r3, [r2, r3]
 8015c94:	f003 031f 	and.w	r3, r3, #31
 8015c98:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	bd80      	pop	{r7, pc}
 8015ca0:	58024400 	.word	0x58024400
 8015ca4:	0801fa18 	.word	0x0801fa18

08015ca8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b086      	sub	sp, #24
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015cb8:	687b      	ldr	r3, [r7, #4]
 8015cba:	681b      	ldr	r3, [r3, #0]
 8015cbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d03d      	beq.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015ccc:	d013      	beq.n	8015cf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8015cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015cd2:	d802      	bhi.n	8015cda <HAL_RCCEx_PeriphCLKConfig+0x32>
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d007      	beq.n	8015ce8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8015cd8:	e01f      	b.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8015cda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015cde:	d013      	beq.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8015ce0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015ce4:	d01c      	beq.n	8015d20 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8015ce6:	e018      	b.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015ce8:	4baf      	ldr	r3, [pc, #700]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cec:	4aae      	ldr	r2, [pc, #696]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015cee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015cf2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015cf4:	e015      	b.n	8015d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	2102      	movs	r1, #2
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f001 f95f 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015d02:	4603      	mov	r3, r0
 8015d04:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015d06:	e00c      	b.n	8015d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	3324      	adds	r3, #36	; 0x24
 8015d0c:	2102      	movs	r1, #2
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f001 fa08 	bl	8017124 <RCCEx_PLL3_Config>
 8015d14:	4603      	mov	r3, r0
 8015d16:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015d18:	e003      	b.n	8015d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	75fb      	strb	r3, [r7, #23]
      break;
 8015d1e:	e000      	b.n	8015d22 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8015d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015d22:	7dfb      	ldrb	r3, [r7, #23]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d109      	bne.n	8015d3c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015d28:	4b9f      	ldr	r3, [pc, #636]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015d34:	499c      	ldr	r1, [pc, #624]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d36:	4313      	orrs	r3, r2
 8015d38:	650b      	str	r3, [r1, #80]	; 0x50
 8015d3a:	e001      	b.n	8015d40 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d3c:	7dfb      	ldrb	r3, [r7, #23]
 8015d3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	681b      	ldr	r3, [r3, #0]
 8015d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d03d      	beq.n	8015dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d50:	2b04      	cmp	r3, #4
 8015d52:	d826      	bhi.n	8015da2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8015d54:	a201      	add	r2, pc, #4	; (adr r2, 8015d5c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8015d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d5a:	bf00      	nop
 8015d5c:	08015d71 	.word	0x08015d71
 8015d60:	08015d7f 	.word	0x08015d7f
 8015d64:	08015d91 	.word	0x08015d91
 8015d68:	08015da9 	.word	0x08015da9
 8015d6c:	08015da9 	.word	0x08015da9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015d70:	4b8d      	ldr	r3, [pc, #564]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015d74:	4a8c      	ldr	r2, [pc, #560]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015d7c:	e015      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015d7e:	687b      	ldr	r3, [r7, #4]
 8015d80:	3304      	adds	r3, #4
 8015d82:	2100      	movs	r1, #0
 8015d84:	4618      	mov	r0, r3
 8015d86:	f001 f91b 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015d8a:	4603      	mov	r3, r0
 8015d8c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015d8e:	e00c      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015d90:	687b      	ldr	r3, [r7, #4]
 8015d92:	3324      	adds	r3, #36	; 0x24
 8015d94:	2100      	movs	r1, #0
 8015d96:	4618      	mov	r0, r3
 8015d98:	f001 f9c4 	bl	8017124 <RCCEx_PLL3_Config>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015da0:	e003      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015da2:	2301      	movs	r3, #1
 8015da4:	75fb      	strb	r3, [r7, #23]
      break;
 8015da6:	e000      	b.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8015da8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015daa:	7dfb      	ldrb	r3, [r7, #23]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d109      	bne.n	8015dc4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015db0:	4b7d      	ldr	r3, [pc, #500]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015db4:	f023 0207 	bic.w	r2, r3, #7
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015dbc:	497a      	ldr	r1, [pc, #488]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015dbe:	4313      	orrs	r3, r2
 8015dc0:	650b      	str	r3, [r1, #80]	; 0x50
 8015dc2:	e001      	b.n	8015dc8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015dc4:	7dfb      	ldrb	r3, [r7, #23]
 8015dc6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015dc8:	687b      	ldr	r3, [r7, #4]
 8015dca:	681b      	ldr	r3, [r3, #0]
 8015dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d03e      	beq.n	8015e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dd8:	2b80      	cmp	r3, #128	; 0x80
 8015dda:	d01c      	beq.n	8015e16 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8015ddc:	2b80      	cmp	r3, #128	; 0x80
 8015dde:	d804      	bhi.n	8015dea <HAL_RCCEx_PeriphCLKConfig+0x142>
 8015de0:	2b00      	cmp	r3, #0
 8015de2:	d008      	beq.n	8015df6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8015de4:	2b40      	cmp	r3, #64	; 0x40
 8015de6:	d00d      	beq.n	8015e04 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8015de8:	e01e      	b.n	8015e28 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8015dea:	2bc0      	cmp	r3, #192	; 0xc0
 8015dec:	d01f      	beq.n	8015e2e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8015dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015df2:	d01e      	beq.n	8015e32 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8015df4:	e018      	b.n	8015e28 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015df6:	4b6c      	ldr	r3, [pc, #432]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015dfa:	4a6b      	ldr	r2, [pc, #428]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e02:	e017      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	3304      	adds	r3, #4
 8015e08:	2100      	movs	r1, #0
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	f001 f8d8 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015e10:	4603      	mov	r3, r0
 8015e12:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e14:	e00e      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	3324      	adds	r3, #36	; 0x24
 8015e1a:	2100      	movs	r1, #0
 8015e1c:	4618      	mov	r0, r3
 8015e1e:	f001 f981 	bl	8017124 <RCCEx_PLL3_Config>
 8015e22:	4603      	mov	r3, r0
 8015e24:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015e26:	e005      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015e28:	2301      	movs	r3, #1
 8015e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8015e2c:	e002      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015e2e:	bf00      	nop
 8015e30:	e000      	b.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015e32:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e34:	7dfb      	ldrb	r3, [r7, #23]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d109      	bne.n	8015e4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015e3a:	4b5b      	ldr	r3, [pc, #364]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e3e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015e46:	4958      	ldr	r1, [pc, #352]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e48:	4313      	orrs	r3, r2
 8015e4a:	650b      	str	r3, [r1, #80]	; 0x50
 8015e4c:	e001      	b.n	8015e52 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e4e:	7dfb      	ldrb	r3, [r7, #23]
 8015e50:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015e5a:	2b00      	cmp	r3, #0
 8015e5c:	d044      	beq.n	8015ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015e68:	d01f      	beq.n	8015eaa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8015e6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015e6e:	d805      	bhi.n	8015e7c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d00a      	beq.n	8015e8a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015e74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015e78:	d00e      	beq.n	8015e98 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8015e7a:	e01f      	b.n	8015ebc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8015e7c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015e80:	d01f      	beq.n	8015ec2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8015e82:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015e86:	d01e      	beq.n	8015ec6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015e88:	e018      	b.n	8015ebc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015e8a:	4b47      	ldr	r3, [pc, #284]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e8e:	4a46      	ldr	r2, [pc, #280]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e94:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015e96:	e017      	b.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	3304      	adds	r3, #4
 8015e9c:	2100      	movs	r1, #0
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f001 f88e 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015ea8:	e00e      	b.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	3324      	adds	r3, #36	; 0x24
 8015eae:	2100      	movs	r1, #0
 8015eb0:	4618      	mov	r0, r3
 8015eb2:	f001 f937 	bl	8017124 <RCCEx_PLL3_Config>
 8015eb6:	4603      	mov	r3, r0
 8015eb8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015eba:	e005      	b.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015ebc:	2301      	movs	r3, #1
 8015ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8015ec0:	e002      	b.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015ec2:	bf00      	nop
 8015ec4:	e000      	b.n	8015ec8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015ec6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ec8:	7dfb      	ldrb	r3, [r7, #23]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d10a      	bne.n	8015ee4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015ece:	4b36      	ldr	r3, [pc, #216]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015ed2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015edc:	4932      	ldr	r1, [pc, #200]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015ede:	4313      	orrs	r3, r2
 8015ee0:	658b      	str	r3, [r1, #88]	; 0x58
 8015ee2:	e001      	b.n	8015ee8 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ee4:	7dfb      	ldrb	r3, [r7, #23]
 8015ee6:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	681b      	ldr	r3, [r3, #0]
 8015eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d044      	beq.n	8015f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015efa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015efe:	d01f      	beq.n	8015f40 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8015f00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015f04:	d805      	bhi.n	8015f12 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d00a      	beq.n	8015f20 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8015f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015f0e:	d00e      	beq.n	8015f2e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8015f10:	e01f      	b.n	8015f52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8015f12:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015f16:	d01f      	beq.n	8015f58 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8015f18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015f1c:	d01e      	beq.n	8015f5c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015f1e:	e018      	b.n	8015f52 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015f20:	4b21      	ldr	r3, [pc, #132]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015f24:	4a20      	ldr	r2, [pc, #128]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015f2a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015f2c:	e017      	b.n	8015f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	3304      	adds	r3, #4
 8015f32:	2100      	movs	r1, #0
 8015f34:	4618      	mov	r0, r3
 8015f36:	f001 f843 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015f3e:	e00e      	b.n	8015f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	3324      	adds	r3, #36	; 0x24
 8015f44:	2100      	movs	r1, #0
 8015f46:	4618      	mov	r0, r3
 8015f48:	f001 f8ec 	bl	8017124 <RCCEx_PLL3_Config>
 8015f4c:	4603      	mov	r3, r0
 8015f4e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015f50:	e005      	b.n	8015f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f52:	2301      	movs	r3, #1
 8015f54:	75fb      	strb	r3, [r7, #23]
      break;
 8015f56:	e002      	b.n	8015f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015f58:	bf00      	nop
 8015f5a:	e000      	b.n	8015f5e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f5e:	7dfb      	ldrb	r3, [r7, #23]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d10a      	bne.n	8015f7a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015f64:	4b10      	ldr	r3, [pc, #64]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f68:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015f72:	490d      	ldr	r1, [pc, #52]	; (8015fa8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015f74:	4313      	orrs	r3, r2
 8015f76:	658b      	str	r3, [r1, #88]	; 0x58
 8015f78:	e001      	b.n	8015f7e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f7a:	7dfb      	ldrb	r3, [r7, #23]
 8015f7c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d035      	beq.n	8015ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f8e:	2b10      	cmp	r3, #16
 8015f90:	d00c      	beq.n	8015fac <HAL_RCCEx_PeriphCLKConfig+0x304>
 8015f92:	2b10      	cmp	r3, #16
 8015f94:	d802      	bhi.n	8015f9c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d01b      	beq.n	8015fd2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8015f9a:	e017      	b.n	8015fcc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015f9c:	2b20      	cmp	r3, #32
 8015f9e:	d00c      	beq.n	8015fba <HAL_RCCEx_PeriphCLKConfig+0x312>
 8015fa0:	2b30      	cmp	r3, #48	; 0x30
 8015fa2:	d018      	beq.n	8015fd6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8015fa4:	e012      	b.n	8015fcc <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015fa6:	bf00      	nop
 8015fa8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015fac:	4baf      	ldr	r3, [pc, #700]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015fb0:	4aae      	ldr	r2, [pc, #696]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015fb8:	e00e      	b.n	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	3304      	adds	r3, #4
 8015fbe:	2102      	movs	r1, #2
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f000 fffd 	bl	8016fc0 <RCCEx_PLL2_Config>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015fca:	e005      	b.n	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015fcc:	2301      	movs	r3, #1
 8015fce:	75fb      	strb	r3, [r7, #23]
      break;
 8015fd0:	e002      	b.n	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015fd2:	bf00      	nop
 8015fd4:	e000      	b.n	8015fd8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015fd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015fd8:	7dfb      	ldrb	r3, [r7, #23]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d109      	bne.n	8015ff2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8015fde:	4ba3      	ldr	r3, [pc, #652]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015fe2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015fea:	49a0      	ldr	r1, [pc, #640]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015fec:	4313      	orrs	r3, r2
 8015fee:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015ff0:	e001      	b.n	8015ff6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ff2:	7dfb      	ldrb	r3, [r7, #23]
 8015ff4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	681b      	ldr	r3, [r3, #0]
 8015ffa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	d042      	beq.n	8016088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801600a:	d01f      	beq.n	801604c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 801600c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016010:	d805      	bhi.n	801601e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8016012:	2b00      	cmp	r3, #0
 8016014:	d00a      	beq.n	801602c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8016016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801601a:	d00e      	beq.n	801603a <HAL_RCCEx_PeriphCLKConfig+0x392>
 801601c:	e01f      	b.n	801605e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 801601e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8016022:	d01f      	beq.n	8016064 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8016024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016028:	d01e      	beq.n	8016068 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 801602a:	e018      	b.n	801605e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801602c:	4b8f      	ldr	r3, [pc, #572]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801602e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016030:	4a8e      	ldr	r2, [pc, #568]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016036:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8016038:	e017      	b.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	3304      	adds	r3, #4
 801603e:	2100      	movs	r1, #0
 8016040:	4618      	mov	r0, r3
 8016042:	f000 ffbd 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016046:	4603      	mov	r3, r0
 8016048:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801604a:	e00e      	b.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	3324      	adds	r3, #36	; 0x24
 8016050:	2100      	movs	r1, #0
 8016052:	4618      	mov	r0, r3
 8016054:	f001 f866 	bl	8017124 <RCCEx_PLL3_Config>
 8016058:	4603      	mov	r3, r0
 801605a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 801605c:	e005      	b.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801605e:	2301      	movs	r3, #1
 8016060:	75fb      	strb	r3, [r7, #23]
      break;
 8016062:	e002      	b.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8016064:	bf00      	nop
 8016066:	e000      	b.n	801606a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8016068:	bf00      	nop
    }

    if(ret == HAL_OK)
 801606a:	7dfb      	ldrb	r3, [r7, #23]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d109      	bne.n	8016084 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8016070:	4b7e      	ldr	r3, [pc, #504]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016072:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016074:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801607c:	497b      	ldr	r1, [pc, #492]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801607e:	4313      	orrs	r3, r2
 8016080:	650b      	str	r3, [r1, #80]	; 0x50
 8016082:	e001      	b.n	8016088 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016084:	7dfb      	ldrb	r3, [r7, #23]
 8016086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016090:	2b00      	cmp	r3, #0
 8016092:	d042      	beq.n	801611a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016098:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801609c:	d01b      	beq.n	80160d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 801609e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80160a2:	d805      	bhi.n	80160b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d022      	beq.n	80160ee <HAL_RCCEx_PeriphCLKConfig+0x446>
 80160a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80160ac:	d00a      	beq.n	80160c4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80160ae:	e01b      	b.n	80160e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80160b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80160b4:	d01d      	beq.n	80160f2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80160b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80160ba:	d01c      	beq.n	80160f6 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80160bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80160c0:	d01b      	beq.n	80160fa <HAL_RCCEx_PeriphCLKConfig+0x452>
 80160c2:	e011      	b.n	80160e8 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	3304      	adds	r3, #4
 80160c8:	2101      	movs	r1, #1
 80160ca:	4618      	mov	r0, r3
 80160cc:	f000 ff78 	bl	8016fc0 <RCCEx_PLL2_Config>
 80160d0:	4603      	mov	r3, r0
 80160d2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80160d4:	e012      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	3324      	adds	r3, #36	; 0x24
 80160da:	2101      	movs	r1, #1
 80160dc:	4618      	mov	r0, r3
 80160de:	f001 f821 	bl	8017124 <RCCEx_PLL3_Config>
 80160e2:	4603      	mov	r3, r0
 80160e4:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80160e6:	e009      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80160e8:	2301      	movs	r3, #1
 80160ea:	75fb      	strb	r3, [r7, #23]
      break;
 80160ec:	e006      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80160ee:	bf00      	nop
 80160f0:	e004      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80160f2:	bf00      	nop
 80160f4:	e002      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80160f6:	bf00      	nop
 80160f8:	e000      	b.n	80160fc <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80160fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80160fc:	7dfb      	ldrb	r3, [r7, #23]
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d109      	bne.n	8016116 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8016102:	4b5a      	ldr	r3, [pc, #360]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016106:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801610e:	4957      	ldr	r1, [pc, #348]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016110:	4313      	orrs	r3, r2
 8016112:	650b      	str	r3, [r1, #80]	; 0x50
 8016114:	e001      	b.n	801611a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016116:	7dfb      	ldrb	r3, [r7, #23]
 8016118:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016122:	2b00      	cmp	r3, #0
 8016124:	d044      	beq.n	80161b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801612c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016130:	d01b      	beq.n	801616a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8016132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8016136:	d805      	bhi.n	8016144 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8016138:	2b00      	cmp	r3, #0
 801613a:	d022      	beq.n	8016182 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801613c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016140:	d00a      	beq.n	8016158 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8016142:	e01b      	b.n	801617c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8016144:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016148:	d01d      	beq.n	8016186 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801614a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801614e:	d01c      	beq.n	801618a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8016150:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8016154:	d01b      	beq.n	801618e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8016156:	e011      	b.n	801617c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	3304      	adds	r3, #4
 801615c:	2101      	movs	r1, #1
 801615e:	4618      	mov	r0, r3
 8016160:	f000 ff2e 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016164:	4603      	mov	r3, r0
 8016166:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8016168:	e012      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	3324      	adds	r3, #36	; 0x24
 801616e:	2101      	movs	r1, #1
 8016170:	4618      	mov	r0, r3
 8016172:	f000 ffd7 	bl	8017124 <RCCEx_PLL3_Config>
 8016176:	4603      	mov	r3, r0
 8016178:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 801617a:	e009      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 801617c:	2301      	movs	r3, #1
 801617e:	75fb      	strb	r3, [r7, #23]
      break;
 8016180:	e006      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8016182:	bf00      	nop
 8016184:	e004      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8016186:	bf00      	nop
 8016188:	e002      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801618a:	bf00      	nop
 801618c:	e000      	b.n	8016190 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 801618e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016190:	7dfb      	ldrb	r3, [r7, #23]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d10a      	bne.n	80161ac <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8016196:	4b35      	ldr	r3, [pc, #212]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801619a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80161a4:	4931      	ldr	r1, [pc, #196]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161a6:	4313      	orrs	r3, r2
 80161a8:	658b      	str	r3, [r1, #88]	; 0x58
 80161aa:	e001      	b.n	80161b0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161ac:	7dfb      	ldrb	r3, [r7, #23]
 80161ae:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d02d      	beq.n	8016218 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80161c0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80161c4:	d005      	beq.n	80161d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80161c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161ca:	d009      	beq.n	80161e0 <HAL_RCCEx_PeriphCLKConfig+0x538>
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d013      	beq.n	80161f8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80161d0:	e00f      	b.n	80161f2 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80161d2:	4b26      	ldr	r3, [pc, #152]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80161d6:	4a25      	ldr	r2, [pc, #148]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80161d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80161dc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80161de:	e00c      	b.n	80161fa <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	3304      	adds	r3, #4
 80161e4:	2101      	movs	r1, #1
 80161e6:	4618      	mov	r0, r3
 80161e8:	f000 feea 	bl	8016fc0 <RCCEx_PLL2_Config>
 80161ec:	4603      	mov	r3, r0
 80161ee:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80161f0:	e003      	b.n	80161fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80161f2:	2301      	movs	r3, #1
 80161f4:	75fb      	strb	r3, [r7, #23]
      break;
 80161f6:	e000      	b.n	80161fa <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80161f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80161fa:	7dfb      	ldrb	r3, [r7, #23]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d109      	bne.n	8016214 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8016200:	4b1a      	ldr	r3, [pc, #104]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016204:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801620c:	4917      	ldr	r1, [pc, #92]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801620e:	4313      	orrs	r3, r2
 8016210:	650b      	str	r3, [r1, #80]	; 0x50
 8016212:	e001      	b.n	8016218 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016214:	7dfb      	ldrb	r3, [r7, #23]
 8016216:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016220:	2b00      	cmp	r3, #0
 8016222:	d035      	beq.n	8016290 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016228:	2b03      	cmp	r3, #3
 801622a:	d81b      	bhi.n	8016264 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 801622c:	a201      	add	r2, pc, #4	; (adr r2, 8016234 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 801622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016232:	bf00      	nop
 8016234:	08016271 	.word	0x08016271
 8016238:	08016245 	.word	0x08016245
 801623c:	08016253 	.word	0x08016253
 8016240:	08016271 	.word	0x08016271
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016244:	4b09      	ldr	r3, [pc, #36]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8016246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016248:	4a08      	ldr	r2, [pc, #32]	; (801626c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801624a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801624e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8016250:	e00f      	b.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	3304      	adds	r3, #4
 8016256:	2102      	movs	r1, #2
 8016258:	4618      	mov	r0, r3
 801625a:	f000 feb1 	bl	8016fc0 <RCCEx_PLL2_Config>
 801625e:	4603      	mov	r3, r0
 8016260:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8016262:	e006      	b.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8016264:	2301      	movs	r3, #1
 8016266:	75fb      	strb	r3, [r7, #23]
      break;
 8016268:	e003      	b.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 801626a:	bf00      	nop
 801626c:	58024400 	.word	0x58024400
      break;
 8016270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016272:	7dfb      	ldrb	r3, [r7, #23]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d109      	bne.n	801628c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8016278:	4bba      	ldr	r3, [pc, #744]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801627a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801627c:	f023 0203 	bic.w	r2, r3, #3
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016284:	49b7      	ldr	r1, [pc, #732]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016286:	4313      	orrs	r3, r2
 8016288:	64cb      	str	r3, [r1, #76]	; 0x4c
 801628a:	e001      	b.n	8016290 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801628c:	7dfb      	ldrb	r3, [r7, #23]
 801628e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016298:	2b00      	cmp	r3, #0
 801629a:	f000 8086 	beq.w	80163aa <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801629e:	4bb2      	ldr	r3, [pc, #712]	; (8016568 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	4ab1      	ldr	r2, [pc, #708]	; (8016568 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80162a8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80162aa:	f7fc fdf3 	bl	8012e94 <HAL_GetTick>
 80162ae:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80162b0:	e009      	b.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80162b2:	f7fc fdef 	bl	8012e94 <HAL_GetTick>
 80162b6:	4602      	mov	r2, r0
 80162b8:	693b      	ldr	r3, [r7, #16]
 80162ba:	1ad3      	subs	r3, r2, r3
 80162bc:	2b64      	cmp	r3, #100	; 0x64
 80162be:	d902      	bls.n	80162c6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80162c0:	2303      	movs	r3, #3
 80162c2:	75fb      	strb	r3, [r7, #23]
        break;
 80162c4:	e005      	b.n	80162d2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80162c6:	4ba8      	ldr	r3, [pc, #672]	; (8016568 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d0ef      	beq.n	80162b2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80162d2:	7dfb      	ldrb	r3, [r7, #23]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d166      	bne.n	80163a6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80162d8:	4ba2      	ldr	r3, [pc, #648]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80162e2:	4053      	eors	r3, r2
 80162e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d013      	beq.n	8016314 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80162ec:	4b9d      	ldr	r3, [pc, #628]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80162f4:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80162f6:	4b9b      	ldr	r3, [pc, #620]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80162fa:	4a9a      	ldr	r2, [pc, #616]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80162fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016300:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8016302:	4b98      	ldr	r3, [pc, #608]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016306:	4a97      	ldr	r2, [pc, #604]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801630c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801630e:	4a95      	ldr	r2, [pc, #596]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801631e:	d115      	bne.n	801634c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016320:	f7fc fdb8 	bl	8012e94 <HAL_GetTick>
 8016324:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016326:	e00b      	b.n	8016340 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016328:	f7fc fdb4 	bl	8012e94 <HAL_GetTick>
 801632c:	4602      	mov	r2, r0
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	1ad3      	subs	r3, r2, r3
 8016332:	f241 3288 	movw	r2, #5000	; 0x1388
 8016336:	4293      	cmp	r3, r2
 8016338:	d902      	bls.n	8016340 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 801633a:	2303      	movs	r3, #3
 801633c:	75fb      	strb	r3, [r7, #23]
            break;
 801633e:	e005      	b.n	801634c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8016340:	4b88      	ldr	r3, [pc, #544]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016344:	f003 0302 	and.w	r3, r3, #2
 8016348:	2b00      	cmp	r3, #0
 801634a:	d0ed      	beq.n	8016328 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 801634c:	7dfb      	ldrb	r3, [r7, #23]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d126      	bne.n	80163a0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016358:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801635c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8016360:	d10d      	bne.n	801637e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8016362:	4b80      	ldr	r3, [pc, #512]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016364:	691b      	ldr	r3, [r3, #16]
 8016366:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 801636a:	687b      	ldr	r3, [r7, #4]
 801636c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016370:	0919      	lsrs	r1, r3, #4
 8016372:	4b7e      	ldr	r3, [pc, #504]	; (801656c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8016374:	400b      	ands	r3, r1
 8016376:	497b      	ldr	r1, [pc, #492]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016378:	4313      	orrs	r3, r2
 801637a:	610b      	str	r3, [r1, #16]
 801637c:	e005      	b.n	801638a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 801637e:	4b79      	ldr	r3, [pc, #484]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016380:	691b      	ldr	r3, [r3, #16]
 8016382:	4a78      	ldr	r2, [pc, #480]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016384:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016388:	6113      	str	r3, [r2, #16]
 801638a:	4b76      	ldr	r3, [pc, #472]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801638c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8016394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016398:	4972      	ldr	r1, [pc, #456]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801639a:	4313      	orrs	r3, r2
 801639c:	670b      	str	r3, [r1, #112]	; 0x70
 801639e:	e004      	b.n	80163aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80163a0:	7dfb      	ldrb	r3, [r7, #23]
 80163a2:	75bb      	strb	r3, [r7, #22]
 80163a4:	e001      	b.n	80163aa <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80163a6:	7dfb      	ldrb	r3, [r7, #23]
 80163a8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	f003 0301 	and.w	r3, r3, #1
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d07d      	beq.n	80164b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80163ba:	2b28      	cmp	r3, #40	; 0x28
 80163bc:	d866      	bhi.n	801648c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80163be:	a201      	add	r2, pc, #4	; (adr r2, 80163c4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80163c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163c4:	08016493 	.word	0x08016493
 80163c8:	0801648d 	.word	0x0801648d
 80163cc:	0801648d 	.word	0x0801648d
 80163d0:	0801648d 	.word	0x0801648d
 80163d4:	0801648d 	.word	0x0801648d
 80163d8:	0801648d 	.word	0x0801648d
 80163dc:	0801648d 	.word	0x0801648d
 80163e0:	0801648d 	.word	0x0801648d
 80163e4:	08016469 	.word	0x08016469
 80163e8:	0801648d 	.word	0x0801648d
 80163ec:	0801648d 	.word	0x0801648d
 80163f0:	0801648d 	.word	0x0801648d
 80163f4:	0801648d 	.word	0x0801648d
 80163f8:	0801648d 	.word	0x0801648d
 80163fc:	0801648d 	.word	0x0801648d
 8016400:	0801648d 	.word	0x0801648d
 8016404:	0801647b 	.word	0x0801647b
 8016408:	0801648d 	.word	0x0801648d
 801640c:	0801648d 	.word	0x0801648d
 8016410:	0801648d 	.word	0x0801648d
 8016414:	0801648d 	.word	0x0801648d
 8016418:	0801648d 	.word	0x0801648d
 801641c:	0801648d 	.word	0x0801648d
 8016420:	0801648d 	.word	0x0801648d
 8016424:	08016493 	.word	0x08016493
 8016428:	0801648d 	.word	0x0801648d
 801642c:	0801648d 	.word	0x0801648d
 8016430:	0801648d 	.word	0x0801648d
 8016434:	0801648d 	.word	0x0801648d
 8016438:	0801648d 	.word	0x0801648d
 801643c:	0801648d 	.word	0x0801648d
 8016440:	0801648d 	.word	0x0801648d
 8016444:	08016493 	.word	0x08016493
 8016448:	0801648d 	.word	0x0801648d
 801644c:	0801648d 	.word	0x0801648d
 8016450:	0801648d 	.word	0x0801648d
 8016454:	0801648d 	.word	0x0801648d
 8016458:	0801648d 	.word	0x0801648d
 801645c:	0801648d 	.word	0x0801648d
 8016460:	0801648d 	.word	0x0801648d
 8016464:	08016493 	.word	0x08016493
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	3304      	adds	r3, #4
 801646c:	2101      	movs	r1, #1
 801646e:	4618      	mov	r0, r3
 8016470:	f000 fda6 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016474:	4603      	mov	r3, r0
 8016476:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8016478:	e00c      	b.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	3324      	adds	r3, #36	; 0x24
 801647e:	2101      	movs	r1, #1
 8016480:	4618      	mov	r0, r3
 8016482:	f000 fe4f 	bl	8017124 <RCCEx_PLL3_Config>
 8016486:	4603      	mov	r3, r0
 8016488:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 801648a:	e003      	b.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801648c:	2301      	movs	r3, #1
 801648e:	75fb      	strb	r3, [r7, #23]
      break;
 8016490:	e000      	b.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8016492:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016494:	7dfb      	ldrb	r3, [r7, #23]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d109      	bne.n	80164ae <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801649a:	4b32      	ldr	r3, [pc, #200]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 801649c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801649e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80164a2:	687b      	ldr	r3, [r7, #4]
 80164a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80164a6:	492f      	ldr	r1, [pc, #188]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80164a8:	4313      	orrs	r3, r2
 80164aa:	654b      	str	r3, [r1, #84]	; 0x54
 80164ac:	e001      	b.n	80164b2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164ae:	7dfb      	ldrb	r3, [r7, #23]
 80164b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	f003 0302 	and.w	r3, r3, #2
 80164ba:	2b00      	cmp	r3, #0
 80164bc:	d037      	beq.n	801652e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80164c2:	2b05      	cmp	r3, #5
 80164c4:	d820      	bhi.n	8016508 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80164c6:	a201      	add	r2, pc, #4	; (adr r2, 80164cc <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80164c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164cc:	0801650f 	.word	0x0801650f
 80164d0:	080164e5 	.word	0x080164e5
 80164d4:	080164f7 	.word	0x080164f7
 80164d8:	0801650f 	.word	0x0801650f
 80164dc:	0801650f 	.word	0x0801650f
 80164e0:	0801650f 	.word	0x0801650f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	3304      	adds	r3, #4
 80164e8:	2101      	movs	r1, #1
 80164ea:	4618      	mov	r0, r3
 80164ec:	f000 fd68 	bl	8016fc0 <RCCEx_PLL2_Config>
 80164f0:	4603      	mov	r3, r0
 80164f2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80164f4:	e00c      	b.n	8016510 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	3324      	adds	r3, #36	; 0x24
 80164fa:	2101      	movs	r1, #1
 80164fc:	4618      	mov	r0, r3
 80164fe:	f000 fe11 	bl	8017124 <RCCEx_PLL3_Config>
 8016502:	4603      	mov	r3, r0
 8016504:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8016506:	e003      	b.n	8016510 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016508:	2301      	movs	r3, #1
 801650a:	75fb      	strb	r3, [r7, #23]
      break;
 801650c:	e000      	b.n	8016510 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801650e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016510:	7dfb      	ldrb	r3, [r7, #23]
 8016512:	2b00      	cmp	r3, #0
 8016514:	d109      	bne.n	801652a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8016516:	4b13      	ldr	r3, [pc, #76]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801651a:	f023 0207 	bic.w	r2, r3, #7
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016522:	4910      	ldr	r1, [pc, #64]	; (8016564 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016524:	4313      	orrs	r3, r2
 8016526:	654b      	str	r3, [r1, #84]	; 0x54
 8016528:	e001      	b.n	801652e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801652a:	7dfb      	ldrb	r3, [r7, #23]
 801652c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	f003 0304 	and.w	r3, r3, #4
 8016536:	2b00      	cmp	r3, #0
 8016538:	d040      	beq.n	80165bc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016540:	2b05      	cmp	r3, #5
 8016542:	d827      	bhi.n	8016594 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8016544:	a201      	add	r2, pc, #4	; (adr r2, 801654c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8016546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801654a:	bf00      	nop
 801654c:	0801659b 	.word	0x0801659b
 8016550:	08016571 	.word	0x08016571
 8016554:	08016583 	.word	0x08016583
 8016558:	0801659b 	.word	0x0801659b
 801655c:	0801659b 	.word	0x0801659b
 8016560:	0801659b 	.word	0x0801659b
 8016564:	58024400 	.word	0x58024400
 8016568:	58024800 	.word	0x58024800
 801656c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	3304      	adds	r3, #4
 8016574:	2101      	movs	r1, #1
 8016576:	4618      	mov	r0, r3
 8016578:	f000 fd22 	bl	8016fc0 <RCCEx_PLL2_Config>
 801657c:	4603      	mov	r3, r0
 801657e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8016580:	e00c      	b.n	801659c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	3324      	adds	r3, #36	; 0x24
 8016586:	2101      	movs	r1, #1
 8016588:	4618      	mov	r0, r3
 801658a:	f000 fdcb 	bl	8017124 <RCCEx_PLL3_Config>
 801658e:	4603      	mov	r3, r0
 8016590:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8016592:	e003      	b.n	801659c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016594:	2301      	movs	r3, #1
 8016596:	75fb      	strb	r3, [r7, #23]
      break;
 8016598:	e000      	b.n	801659c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 801659a:	bf00      	nop
    }

    if(ret == HAL_OK)
 801659c:	7dfb      	ldrb	r3, [r7, #23]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d10a      	bne.n	80165b8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80165a2:	4bb2      	ldr	r3, [pc, #712]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80165a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80165a6:	f023 0207 	bic.w	r2, r3, #7
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80165b0:	49ae      	ldr	r1, [pc, #696]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80165b2:	4313      	orrs	r3, r2
 80165b4:	658b      	str	r3, [r1, #88]	; 0x58
 80165b6:	e001      	b.n	80165bc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165b8:	7dfb      	ldrb	r3, [r7, #23]
 80165ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	f003 0320 	and.w	r3, r3, #32
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d044      	beq.n	8016652 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80165c8:	687b      	ldr	r3, [r7, #4]
 80165ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80165ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80165d2:	d01b      	beq.n	801660c <HAL_RCCEx_PeriphCLKConfig+0x964>
 80165d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80165d8:	d805      	bhi.n	80165e6 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d022      	beq.n	8016624 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80165de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80165e2:	d00a      	beq.n	80165fa <HAL_RCCEx_PeriphCLKConfig+0x952>
 80165e4:	e01b      	b.n	801661e <HAL_RCCEx_PeriphCLKConfig+0x976>
 80165e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80165ea:	d01d      	beq.n	8016628 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80165ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80165f0:	d01c      	beq.n	801662c <HAL_RCCEx_PeriphCLKConfig+0x984>
 80165f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80165f6:	d01b      	beq.n	8016630 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80165f8:	e011      	b.n	801661e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80165fa:	687b      	ldr	r3, [r7, #4]
 80165fc:	3304      	adds	r3, #4
 80165fe:	2100      	movs	r1, #0
 8016600:	4618      	mov	r0, r3
 8016602:	f000 fcdd 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016606:	4603      	mov	r3, r0
 8016608:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801660a:	e012      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	3324      	adds	r3, #36	; 0x24
 8016610:	2102      	movs	r1, #2
 8016612:	4618      	mov	r0, r3
 8016614:	f000 fd86 	bl	8017124 <RCCEx_PLL3_Config>
 8016618:	4603      	mov	r3, r0
 801661a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801661c:	e009      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801661e:	2301      	movs	r3, #1
 8016620:	75fb      	strb	r3, [r7, #23]
      break;
 8016622:	e006      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016624:	bf00      	nop
 8016626:	e004      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016628:	bf00      	nop
 801662a:	e002      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801662c:	bf00      	nop
 801662e:	e000      	b.n	8016632 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016632:	7dfb      	ldrb	r3, [r7, #23]
 8016634:	2b00      	cmp	r3, #0
 8016636:	d10a      	bne.n	801664e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016638:	4b8c      	ldr	r3, [pc, #560]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801663a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801663c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016646:	4989      	ldr	r1, [pc, #548]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016648:	4313      	orrs	r3, r2
 801664a:	654b      	str	r3, [r1, #84]	; 0x54
 801664c:	e001      	b.n	8016652 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801664e:	7dfb      	ldrb	r3, [r7, #23]
 8016650:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801665a:	2b00      	cmp	r3, #0
 801665c:	d044      	beq.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016668:	d01b      	beq.n	80166a2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 801666a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801666e:	d805      	bhi.n	801667c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8016670:	2b00      	cmp	r3, #0
 8016672:	d022      	beq.n	80166ba <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8016674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016678:	d00a      	beq.n	8016690 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 801667a:	e01b      	b.n	80166b4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 801667c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016680:	d01d      	beq.n	80166be <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8016682:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8016686:	d01c      	beq.n	80166c2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8016688:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801668c:	d01b      	beq.n	80166c6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 801668e:	e011      	b.n	80166b4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	3304      	adds	r3, #4
 8016694:	2100      	movs	r1, #0
 8016696:	4618      	mov	r0, r3
 8016698:	f000 fc92 	bl	8016fc0 <RCCEx_PLL2_Config>
 801669c:	4603      	mov	r3, r0
 801669e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80166a0:	e012      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	3324      	adds	r3, #36	; 0x24
 80166a6:	2102      	movs	r1, #2
 80166a8:	4618      	mov	r0, r3
 80166aa:	f000 fd3b 	bl	8017124 <RCCEx_PLL3_Config>
 80166ae:	4603      	mov	r3, r0
 80166b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80166b2:	e009      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80166b4:	2301      	movs	r3, #1
 80166b6:	75fb      	strb	r3, [r7, #23]
      break;
 80166b8:	e006      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166ba:	bf00      	nop
 80166bc:	e004      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166be:	bf00      	nop
 80166c0:	e002      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166c2:	bf00      	nop
 80166c4:	e000      	b.n	80166c8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80166c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80166c8:	7dfb      	ldrb	r3, [r7, #23]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d10a      	bne.n	80166e4 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80166ce:	4b67      	ldr	r3, [pc, #412]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80166d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80166d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80166dc:	4963      	ldr	r1, [pc, #396]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80166de:	4313      	orrs	r3, r2
 80166e0:	658b      	str	r3, [r1, #88]	; 0x58
 80166e2:	e001      	b.n	80166e8 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80166e4:	7dfb      	ldrb	r3, [r7, #23]
 80166e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	681b      	ldr	r3, [r3, #0]
 80166ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d044      	beq.n	801677e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80166fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80166fe:	d01b      	beq.n	8016738 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8016700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016704:	d805      	bhi.n	8016712 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8016706:	2b00      	cmp	r3, #0
 8016708:	d022      	beq.n	8016750 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801670e:	d00a      	beq.n	8016726 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016710:	e01b      	b.n	801674a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8016712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016716:	d01d      	beq.n	8016754 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016718:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801671c:	d01c      	beq.n	8016758 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801671e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8016722:	d01b      	beq.n	801675c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8016724:	e011      	b.n	801674a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016726:	687b      	ldr	r3, [r7, #4]
 8016728:	3304      	adds	r3, #4
 801672a:	2100      	movs	r1, #0
 801672c:	4618      	mov	r0, r3
 801672e:	f000 fc47 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016732:	4603      	mov	r3, r0
 8016734:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016736:	e012      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	3324      	adds	r3, #36	; 0x24
 801673c:	2102      	movs	r1, #2
 801673e:	4618      	mov	r0, r3
 8016740:	f000 fcf0 	bl	8017124 <RCCEx_PLL3_Config>
 8016744:	4603      	mov	r3, r0
 8016746:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016748:	e009      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801674a:	2301      	movs	r3, #1
 801674c:	75fb      	strb	r3, [r7, #23]
      break;
 801674e:	e006      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016750:	bf00      	nop
 8016752:	e004      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016754:	bf00      	nop
 8016756:	e002      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016758:	bf00      	nop
 801675a:	e000      	b.n	801675e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801675c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801675e:	7dfb      	ldrb	r3, [r7, #23]
 8016760:	2b00      	cmp	r3, #0
 8016762:	d10a      	bne.n	801677a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016764:	4b41      	ldr	r3, [pc, #260]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016768:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016772:	493e      	ldr	r1, [pc, #248]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016774:	4313      	orrs	r3, r2
 8016776:	658b      	str	r3, [r1, #88]	; 0x58
 8016778:	e001      	b.n	801677e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801677a:	7dfb      	ldrb	r3, [r7, #23]
 801677c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	f003 0308 	and.w	r3, r3, #8
 8016786:	2b00      	cmp	r3, #0
 8016788:	d01a      	beq.n	80167c0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016794:	d10a      	bne.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	3324      	adds	r3, #36	; 0x24
 801679a:	2102      	movs	r1, #2
 801679c:	4618      	mov	r0, r3
 801679e:	f000 fcc1 	bl	8017124 <RCCEx_PLL3_Config>
 80167a2:	4603      	mov	r3, r0
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d001      	beq.n	80167ac <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80167a8:	2301      	movs	r3, #1
 80167aa:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80167ac:	4b2f      	ldr	r3, [pc, #188]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80167b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80167ba:	492c      	ldr	r1, [pc, #176]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167bc:	4313      	orrs	r3, r2
 80167be:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	f003 0310 	and.w	r3, r3, #16
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	d01a      	beq.n	8016802 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80167d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80167d6:	d10a      	bne.n	80167ee <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	3324      	adds	r3, #36	; 0x24
 80167dc:	2102      	movs	r1, #2
 80167de:	4618      	mov	r0, r3
 80167e0:	f000 fca0 	bl	8017124 <RCCEx_PLL3_Config>
 80167e4:	4603      	mov	r3, r0
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d001      	beq.n	80167ee <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80167ea:	2301      	movs	r3, #1
 80167ec:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80167ee:	4b1f      	ldr	r3, [pc, #124]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80167fc:	491b      	ldr	r1, [pc, #108]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80167fe:	4313      	orrs	r3, r2
 8016800:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	681b      	ldr	r3, [r3, #0]
 8016806:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801680a:	2b00      	cmp	r3, #0
 801680c:	d032      	beq.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016818:	d00d      	beq.n	8016836 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801681a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801681e:	d016      	beq.n	801684e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8016820:	2b00      	cmp	r3, #0
 8016822:	d111      	bne.n	8016848 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	3304      	adds	r3, #4
 8016828:	2100      	movs	r1, #0
 801682a:	4618      	mov	r0, r3
 801682c:	f000 fbc8 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016830:	4603      	mov	r3, r0
 8016832:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8016834:	e00c      	b.n	8016850 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	3324      	adds	r3, #36	; 0x24
 801683a:	2102      	movs	r1, #2
 801683c:	4618      	mov	r0, r3
 801683e:	f000 fc71 	bl	8017124 <RCCEx_PLL3_Config>
 8016842:	4603      	mov	r3, r0
 8016844:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8016846:	e003      	b.n	8016850 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016848:	2301      	movs	r3, #1
 801684a:	75fb      	strb	r3, [r7, #23]
      break;
 801684c:	e000      	b.n	8016850 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801684e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016850:	7dfb      	ldrb	r3, [r7, #23]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d10c      	bne.n	8016870 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016856:	4b05      	ldr	r3, [pc, #20]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801685a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016864:	4901      	ldr	r1, [pc, #4]	; (801686c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016866:	4313      	orrs	r3, r2
 8016868:	658b      	str	r3, [r1, #88]	; 0x58
 801686a:	e003      	b.n	8016874 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801686c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016870:	7dfb      	ldrb	r3, [r7, #23]
 8016872:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801687c:	2b00      	cmp	r3, #0
 801687e:	d02f      	beq.n	80168e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016886:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801688a:	d00c      	beq.n	80168a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 801688c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8016890:	d015      	beq.n	80168be <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8016892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016896:	d10f      	bne.n	80168b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016898:	4b71      	ldr	r3, [pc, #452]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801689a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801689c:	4a70      	ldr	r2, [pc, #448]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801689e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80168a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80168a4:	e00c      	b.n	80168c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	3324      	adds	r3, #36	; 0x24
 80168aa:	2101      	movs	r1, #1
 80168ac:	4618      	mov	r0, r3
 80168ae:	f000 fc39 	bl	8017124 <RCCEx_PLL3_Config>
 80168b2:	4603      	mov	r3, r0
 80168b4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80168b6:	e003      	b.n	80168c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80168b8:	2301      	movs	r3, #1
 80168ba:	75fb      	strb	r3, [r7, #23]
      break;
 80168bc:	e000      	b.n	80168c0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80168be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80168c0:	7dfb      	ldrb	r3, [r7, #23]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d10a      	bne.n	80168dc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80168c6:	4b66      	ldr	r3, [pc, #408]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80168ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80168ce:	687b      	ldr	r3, [r7, #4]
 80168d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168d4:	4962      	ldr	r1, [pc, #392]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168d6:	4313      	orrs	r3, r2
 80168d8:	654b      	str	r3, [r1, #84]	; 0x54
 80168da:	e001      	b.n	80168e0 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80168dc:	7dfb      	ldrb	r3, [r7, #23]
 80168de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80168e8:	2b00      	cmp	r3, #0
 80168ea:	d029      	beq.n	8016940 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d003      	beq.n	80168fc <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80168f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80168f8:	d007      	beq.n	801690a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80168fa:	e00f      	b.n	801691c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80168fc:	4b58      	ldr	r3, [pc, #352]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80168fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016900:	4a57      	ldr	r2, [pc, #348]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016908:	e00b      	b.n	8016922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	3304      	adds	r3, #4
 801690e:	2102      	movs	r1, #2
 8016910:	4618      	mov	r0, r3
 8016912:	f000 fb55 	bl	8016fc0 <RCCEx_PLL2_Config>
 8016916:	4603      	mov	r3, r0
 8016918:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801691a:	e002      	b.n	8016922 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801691c:	2301      	movs	r3, #1
 801691e:	75fb      	strb	r3, [r7, #23]
      break;
 8016920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016922:	7dfb      	ldrb	r3, [r7, #23]
 8016924:	2b00      	cmp	r3, #0
 8016926:	d109      	bne.n	801693c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016928:	4b4d      	ldr	r3, [pc, #308]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801692a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801692c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016934:	494a      	ldr	r1, [pc, #296]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016936:	4313      	orrs	r3, r2
 8016938:	64cb      	str	r3, [r1, #76]	; 0x4c
 801693a:	e001      	b.n	8016940 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801693c:	7dfb      	ldrb	r3, [r7, #23]
 801693e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016948:	2b00      	cmp	r3, #0
 801694a:	d00a      	beq.n	8016962 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	3324      	adds	r3, #36	; 0x24
 8016950:	2102      	movs	r1, #2
 8016952:	4618      	mov	r0, r3
 8016954:	f000 fbe6 	bl	8017124 <RCCEx_PLL3_Config>
 8016958:	4603      	mov	r3, r0
 801695a:	2b00      	cmp	r3, #0
 801695c:	d001      	beq.n	8016962 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801695e:	2301      	movs	r3, #1
 8016960:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801696a:	2b00      	cmp	r3, #0
 801696c:	d02f      	beq.n	80169ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016976:	d00c      	beq.n	8016992 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8016978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801697c:	d802      	bhi.n	8016984 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801697e:	2b00      	cmp	r3, #0
 8016980:	d011      	beq.n	80169a6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8016982:	e00d      	b.n	80169a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8016984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016988:	d00f      	beq.n	80169aa <HAL_RCCEx_PeriphCLKConfig+0xd02>
 801698a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801698e:	d00e      	beq.n	80169ae <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8016990:	e006      	b.n	80169a0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016992:	4b33      	ldr	r3, [pc, #204]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016996:	4a32      	ldr	r2, [pc, #200]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801699c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801699e:	e007      	b.n	80169b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80169a0:	2301      	movs	r3, #1
 80169a2:	75fb      	strb	r3, [r7, #23]
      break;
 80169a4:	e004      	b.n	80169b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169a6:	bf00      	nop
 80169a8:	e002      	b.n	80169b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169aa:	bf00      	nop
 80169ac:	e000      	b.n	80169b0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80169ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80169b0:	7dfb      	ldrb	r3, [r7, #23]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d109      	bne.n	80169ca <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80169b6:	4b2a      	ldr	r3, [pc, #168]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80169ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80169c2:	4927      	ldr	r1, [pc, #156]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169c4:	4313      	orrs	r3, r2
 80169c6:	654b      	str	r3, [r1, #84]	; 0x54
 80169c8:	e001      	b.n	80169ce <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80169ca:	7dfb      	ldrb	r3, [r7, #23]
 80169cc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d008      	beq.n	80169ec <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80169da:	4b21      	ldr	r3, [pc, #132]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80169e6:	491e      	ldr	r1, [pc, #120]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169e8:	4313      	orrs	r3, r2
 80169ea:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d008      	beq.n	8016a0a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80169f8:	4b19      	ldr	r3, [pc, #100]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80169fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80169fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016a00:	687b      	ldr	r3, [r7, #4]
 8016a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a04:	4916      	ldr	r1, [pc, #88]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a06:	4313      	orrs	r3, r2
 8016a08:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016a12:	2b00      	cmp	r3, #0
 8016a14:	d00d      	beq.n	8016a32 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016a16:	4b12      	ldr	r3, [pc, #72]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a18:	691b      	ldr	r3, [r3, #16]
 8016a1a:	4a11      	ldr	r2, [pc, #68]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016a20:	6113      	str	r3, [r2, #16]
 8016a22:	4b0f      	ldr	r3, [pc, #60]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a24:	691a      	ldr	r2, [r3, #16]
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8016a2c:	490c      	ldr	r1, [pc, #48]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a2e:	4313      	orrs	r3, r2
 8016a30:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	da08      	bge.n	8016a4c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8016a3a:	4b09      	ldr	r3, [pc, #36]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016a3e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a46:	4906      	ldr	r1, [pc, #24]	; (8016a60 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016a48:	4313      	orrs	r3, r2
 8016a4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8016a4c:	7dbb      	ldrb	r3, [r7, #22]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	d101      	bne.n	8016a56 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8016a52:	2300      	movs	r3, #0
 8016a54:	e000      	b.n	8016a58 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8016a56:	2301      	movs	r3, #1
}
 8016a58:	4618      	mov	r0, r3
 8016a5a:	3718      	adds	r7, #24
 8016a5c:	46bd      	mov	sp, r7
 8016a5e:	bd80      	pop	{r7, pc}
 8016a60:	58024400 	.word	0x58024400

08016a64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8016a64:	b580      	push	{r7, lr}
 8016a66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8016a68:	f7ff f8c2 	bl	8015bf0 <HAL_RCC_GetHCLKFreq>
 8016a6c:	4601      	mov	r1, r0
 8016a6e:	4b06      	ldr	r3, [pc, #24]	; (8016a88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8016a70:	6a1b      	ldr	r3, [r3, #32]
 8016a72:	091b      	lsrs	r3, r3, #4
 8016a74:	f003 0307 	and.w	r3, r3, #7
 8016a78:	4a04      	ldr	r2, [pc, #16]	; (8016a8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8016a7a:	5cd3      	ldrb	r3, [r2, r3]
 8016a7c:	f003 031f 	and.w	r3, r3, #31
 8016a80:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8016a84:	4618      	mov	r0, r3
 8016a86:	bd80      	pop	{r7, pc}
 8016a88:	58024400 	.word	0x58024400
 8016a8c:	0801fa18 	.word	0x0801fa18

08016a90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8016a90:	b480      	push	{r7}
 8016a92:	b089      	sub	sp, #36	; 0x24
 8016a94:	af00      	add	r7, sp, #0
 8016a96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016a98:	4b9d      	ldr	r3, [pc, #628]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016a9c:	f003 0303 	and.w	r3, r3, #3
 8016aa0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8016aa2:	4b9b      	ldr	r3, [pc, #620]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aa6:	0b1b      	lsrs	r3, r3, #12
 8016aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016aac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8016aae:	4b98      	ldr	r3, [pc, #608]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ab2:	091b      	lsrs	r3, r3, #4
 8016ab4:	f003 0301 	and.w	r3, r3, #1
 8016ab8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8016aba:	4b95      	ldr	r3, [pc, #596]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016abe:	08db      	lsrs	r3, r3, #3
 8016ac0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016ac4:	693a      	ldr	r2, [r7, #16]
 8016ac6:	fb02 f303 	mul.w	r3, r2, r3
 8016aca:	ee07 3a90 	vmov	s15, r3
 8016ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ad2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	f000 810a 	beq.w	8016cf2 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8016ade:	69bb      	ldr	r3, [r7, #24]
 8016ae0:	2b01      	cmp	r3, #1
 8016ae2:	d05a      	beq.n	8016b9a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8016ae4:	2b01      	cmp	r3, #1
 8016ae6:	d302      	bcc.n	8016aee <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8016ae8:	2b02      	cmp	r3, #2
 8016aea:	d078      	beq.n	8016bde <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8016aec:	e099      	b.n	8016c22 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016aee:	4b88      	ldr	r3, [pc, #544]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	f003 0320 	and.w	r3, r3, #32
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d02d      	beq.n	8016b56 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016afa:	4b85      	ldr	r3, [pc, #532]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	08db      	lsrs	r3, r3, #3
 8016b00:	f003 0303 	and.w	r3, r3, #3
 8016b04:	4a83      	ldr	r2, [pc, #524]	; (8016d14 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8016b06:	fa22 f303 	lsr.w	r3, r2, r3
 8016b0a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016b0c:	68bb      	ldr	r3, [r7, #8]
 8016b0e:	ee07 3a90 	vmov	s15, r3
 8016b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b16:	697b      	ldr	r3, [r7, #20]
 8016b18:	ee07 3a90 	vmov	s15, r3
 8016b1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b20:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b24:	4b7a      	ldr	r3, [pc, #488]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b2c:	ee07 3a90 	vmov	s15, r3
 8016b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b34:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b38:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b50:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016b54:	e087      	b.n	8016c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016b56:	697b      	ldr	r3, [r7, #20]
 8016b58:	ee07 3a90 	vmov	s15, r3
 8016b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b60:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016d1c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8016b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016b68:	4b69      	ldr	r3, [pc, #420]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016b70:	ee07 3a90 	vmov	s15, r3
 8016b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016b78:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b7c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b94:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016b98:	e065      	b.n	8016c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	ee07 3a90 	vmov	s15, r3
 8016ba0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ba4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016ba8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bac:	4b58      	ldr	r3, [pc, #352]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bb4:	ee07 3a90 	vmov	s15, r3
 8016bb8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016bbc:	ed97 6a03 	vldr	s12, [r7, #12]
 8016bc0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016bc4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016bc8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016bcc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016bd0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016bd4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016bd8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016bdc:	e043      	b.n	8016c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016bde:	697b      	ldr	r3, [r7, #20]
 8016be0:	ee07 3a90 	vmov	s15, r3
 8016be4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016be8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016d24 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8016bec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016bf0:	4b47      	ldr	r3, [pc, #284]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016bf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016bf8:	ee07 3a90 	vmov	s15, r3
 8016bfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c00:	ed97 6a03 	vldr	s12, [r7, #12]
 8016c04:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016c08:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c0c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c10:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c14:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c1c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016c20:	e021      	b.n	8016c66 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	ee07 3a90 	vmov	s15, r3
 8016c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c2c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016d20 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016c30:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016c34:	4b36      	ldr	r3, [pc, #216]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c3c:	ee07 3a90 	vmov	s15, r3
 8016c40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016c44:	ed97 6a03 	vldr	s12, [r7, #12]
 8016c48:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016d18 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016c4c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016c50:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016c54:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016c58:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016c5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016c60:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016c64:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8016c66:	4b2a      	ldr	r3, [pc, #168]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c6a:	0a5b      	lsrs	r3, r3, #9
 8016c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c70:	ee07 3a90 	vmov	s15, r3
 8016c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016c78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016c7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016c80:	edd7 6a07 	vldr	s13, [r7, #28]
 8016c84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016c8c:	ee17 2a90 	vmov	r2, s15
 8016c90:	687b      	ldr	r3, [r7, #4]
 8016c92:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8016c94:	4b1e      	ldr	r3, [pc, #120]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c98:	0c1b      	lsrs	r3, r3, #16
 8016c9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c9e:	ee07 3a90 	vmov	s15, r3
 8016ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ca6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016caa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016cae:	edd7 6a07 	vldr	s13, [r7, #28]
 8016cb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016cb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016cba:	ee17 2a90 	vmov	r2, s15
 8016cbe:	687b      	ldr	r3, [r7, #4]
 8016cc0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8016cc2:	4b13      	ldr	r3, [pc, #76]	; (8016d10 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016cc6:	0e1b      	lsrs	r3, r3, #24
 8016cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016ccc:	ee07 3a90 	vmov	s15, r3
 8016cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016cd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016cd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016cdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8016ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016ce4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ce8:	ee17 2a90 	vmov	r2, s15
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016cf0:	e008      	b.n	8016d04 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	2200      	movs	r2, #0
 8016cf6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	2200      	movs	r2, #0
 8016cfc:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8016cfe:	687b      	ldr	r3, [r7, #4]
 8016d00:	2200      	movs	r2, #0
 8016d02:	609a      	str	r2, [r3, #8]
}
 8016d04:	bf00      	nop
 8016d06:	3724      	adds	r7, #36	; 0x24
 8016d08:	46bd      	mov	sp, r7
 8016d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0e:	4770      	bx	lr
 8016d10:	58024400 	.word	0x58024400
 8016d14:	03d09000 	.word	0x03d09000
 8016d18:	46000000 	.word	0x46000000
 8016d1c:	4c742400 	.word	0x4c742400
 8016d20:	4a742400 	.word	0x4a742400
 8016d24:	4af42400 	.word	0x4af42400

08016d28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8016d28:	b480      	push	{r7}
 8016d2a:	b089      	sub	sp, #36	; 0x24
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016d30:	4b9d      	ldr	r3, [pc, #628]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d34:	f003 0303 	and.w	r3, r3, #3
 8016d38:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8016d3a:	4b9b      	ldr	r3, [pc, #620]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d3e:	0d1b      	lsrs	r3, r3, #20
 8016d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016d44:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8016d46:	4b98      	ldr	r3, [pc, #608]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016d4a:	0a1b      	lsrs	r3, r3, #8
 8016d4c:	f003 0301 	and.w	r3, r3, #1
 8016d50:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8016d52:	4b95      	ldr	r3, [pc, #596]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d56:	08db      	lsrs	r3, r3, #3
 8016d58:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d5c:	693a      	ldr	r2, [r7, #16]
 8016d5e:	fb02 f303 	mul.w	r3, r2, r3
 8016d62:	ee07 3a90 	vmov	s15, r3
 8016d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016d6a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	2b00      	cmp	r3, #0
 8016d72:	f000 810a 	beq.w	8016f8a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8016d76:	69bb      	ldr	r3, [r7, #24]
 8016d78:	2b01      	cmp	r3, #1
 8016d7a:	d05a      	beq.n	8016e32 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8016d7c:	2b01      	cmp	r3, #1
 8016d7e:	d302      	bcc.n	8016d86 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8016d80:	2b02      	cmp	r3, #2
 8016d82:	d078      	beq.n	8016e76 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8016d84:	e099      	b.n	8016eba <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016d86:	4b88      	ldr	r3, [pc, #544]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	f003 0320 	and.w	r3, r3, #32
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d02d      	beq.n	8016dee <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016d92:	4b85      	ldr	r3, [pc, #532]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	08db      	lsrs	r3, r3, #3
 8016d98:	f003 0303 	and.w	r3, r3, #3
 8016d9c:	4a83      	ldr	r2, [pc, #524]	; (8016fac <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8016d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8016da2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016da4:	68bb      	ldr	r3, [r7, #8]
 8016da6:	ee07 3a90 	vmov	s15, r3
 8016daa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	ee07 3a90 	vmov	s15, r3
 8016db4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016db8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016dbc:	4b7a      	ldr	r3, [pc, #488]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dc4:	ee07 3a90 	vmov	s15, r3
 8016dc8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016dcc:	ed97 6a03 	vldr	s12, [r7, #12]
 8016dd0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016dd4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016dd8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ddc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016de0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016de4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016de8:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016dec:	e087      	b.n	8016efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016dee:	697b      	ldr	r3, [r7, #20]
 8016df0:	ee07 3a90 	vmov	s15, r3
 8016df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016df8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8016dfc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e00:	4b69      	ldr	r3, [pc, #420]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e08:	ee07 3a90 	vmov	s15, r3
 8016e0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e10:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e14:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016e18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e2c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016e30:	e065      	b.n	8016efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016e32:	697b      	ldr	r3, [r7, #20]
 8016e34:	ee07 3a90 	vmov	s15, r3
 8016e38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e3c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016e40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e44:	4b58      	ldr	r3, [pc, #352]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e4c:	ee07 3a90 	vmov	s15, r3
 8016e50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e54:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e58:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016e5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016e60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016e64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016e68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016e6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016e70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016e74:	e043      	b.n	8016efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016e76:	697b      	ldr	r3, [r7, #20]
 8016e78:	ee07 3a90 	vmov	s15, r3
 8016e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016e80:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016fbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8016e84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016e88:	4b47      	ldr	r3, [pc, #284]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016e90:	ee07 3a90 	vmov	s15, r3
 8016e94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016e98:	ed97 6a03 	vldr	s12, [r7, #12]
 8016e9c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016ea0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016ea4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ea8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016eac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016eb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016eb4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016eb8:	e021      	b.n	8016efe <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016eba:	697b      	ldr	r3, [r7, #20]
 8016ebc:	ee07 3a90 	vmov	s15, r3
 8016ec0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ec4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016ec8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016ecc:	4b36      	ldr	r3, [pc, #216]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ed4:	ee07 3a90 	vmov	s15, r3
 8016ed8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016edc:	ed97 6a03 	vldr	s12, [r7, #12]
 8016ee0:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016ee4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016ee8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016eec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ef4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ef8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016efc:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8016efe:	4b2a      	ldr	r3, [pc, #168]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f02:	0a5b      	lsrs	r3, r3, #9
 8016f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f08:	ee07 3a90 	vmov	s15, r3
 8016f0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f10:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f18:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f24:	ee17 2a90 	vmov	r2, s15
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8016f2c:	4b1e      	ldr	r3, [pc, #120]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f30:	0c1b      	lsrs	r3, r3, #16
 8016f32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f36:	ee07 3a90 	vmov	s15, r3
 8016f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f46:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f52:	ee17 2a90 	vmov	r2, s15
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8016f5a:	4b13      	ldr	r3, [pc, #76]	; (8016fa8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f5e:	0e1b      	lsrs	r3, r3, #24
 8016f60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016f64:	ee07 3a90 	vmov	s15, r3
 8016f68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016f6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016f70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016f74:	edd7 6a07 	vldr	s13, [r7, #28]
 8016f78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016f7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016f80:	ee17 2a90 	vmov	r2, s15
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016f88:	e008      	b.n	8016f9c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	2200      	movs	r2, #0
 8016f94:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016f96:	687b      	ldr	r3, [r7, #4]
 8016f98:	2200      	movs	r2, #0
 8016f9a:	609a      	str	r2, [r3, #8]
}
 8016f9c:	bf00      	nop
 8016f9e:	3724      	adds	r7, #36	; 0x24
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fa6:	4770      	bx	lr
 8016fa8:	58024400 	.word	0x58024400
 8016fac:	03d09000 	.word	0x03d09000
 8016fb0:	46000000 	.word	0x46000000
 8016fb4:	4c742400 	.word	0x4c742400
 8016fb8:	4a742400 	.word	0x4a742400
 8016fbc:	4af42400 	.word	0x4af42400

08016fc0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b084      	sub	sp, #16
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
 8016fc8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016fce:	4b53      	ldr	r3, [pc, #332]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8016fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016fd2:	f003 0303 	and.w	r3, r3, #3
 8016fd6:	2b03      	cmp	r3, #3
 8016fd8:	d101      	bne.n	8016fde <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016fda:	2301      	movs	r3, #1
 8016fdc:	e099      	b.n	8017112 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016fde:	4b4f      	ldr	r3, [pc, #316]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8016fe0:	681b      	ldr	r3, [r3, #0]
 8016fe2:	4a4e      	ldr	r2, [pc, #312]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8016fe4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016fe8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016fea:	f7fb ff53 	bl	8012e94 <HAL_GetTick>
 8016fee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016ff0:	e008      	b.n	8017004 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016ff2:	f7fb ff4f 	bl	8012e94 <HAL_GetTick>
 8016ff6:	4602      	mov	r2, r0
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	1ad3      	subs	r3, r2, r3
 8016ffc:	2b02      	cmp	r3, #2
 8016ffe:	d901      	bls.n	8017004 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017000:	2303      	movs	r3, #3
 8017002:	e086      	b.n	8017112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8017004:	4b45      	ldr	r3, [pc, #276]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801700c:	2b00      	cmp	r3, #0
 801700e:	d1f0      	bne.n	8016ff2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8017010:	4b42      	ldr	r3, [pc, #264]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017014:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	681b      	ldr	r3, [r3, #0]
 801701c:	031b      	lsls	r3, r3, #12
 801701e:	493f      	ldr	r1, [pc, #252]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017020:	4313      	orrs	r3, r2
 8017022:	628b      	str	r3, [r1, #40]	; 0x28
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	685b      	ldr	r3, [r3, #4]
 8017028:	3b01      	subs	r3, #1
 801702a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	689b      	ldr	r3, [r3, #8]
 8017032:	3b01      	subs	r3, #1
 8017034:	025b      	lsls	r3, r3, #9
 8017036:	b29b      	uxth	r3, r3
 8017038:	431a      	orrs	r2, r3
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	68db      	ldr	r3, [r3, #12]
 801703e:	3b01      	subs	r3, #1
 8017040:	041b      	lsls	r3, r3, #16
 8017042:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8017046:	431a      	orrs	r2, r3
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	691b      	ldr	r3, [r3, #16]
 801704c:	3b01      	subs	r3, #1
 801704e:	061b      	lsls	r3, r3, #24
 8017050:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8017054:	4931      	ldr	r1, [pc, #196]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017056:	4313      	orrs	r3, r2
 8017058:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801705a:	4b30      	ldr	r3, [pc, #192]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 801705c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801705e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	695b      	ldr	r3, [r3, #20]
 8017066:	492d      	ldr	r1, [pc, #180]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017068:	4313      	orrs	r3, r2
 801706a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801706c:	4b2b      	ldr	r3, [pc, #172]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 801706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017070:	f023 0220 	bic.w	r2, r3, #32
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	699b      	ldr	r3, [r3, #24]
 8017078:	4928      	ldr	r1, [pc, #160]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 801707a:	4313      	orrs	r3, r2
 801707c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801707e:	4b27      	ldr	r3, [pc, #156]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017082:	4a26      	ldr	r2, [pc, #152]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017084:	f023 0310 	bic.w	r3, r3, #16
 8017088:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801708a:	4b24      	ldr	r3, [pc, #144]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 801708c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801708e:	4b24      	ldr	r3, [pc, #144]	; (8017120 <RCCEx_PLL2_Config+0x160>)
 8017090:	4013      	ands	r3, r2
 8017092:	687a      	ldr	r2, [r7, #4]
 8017094:	69d2      	ldr	r2, [r2, #28]
 8017096:	00d2      	lsls	r2, r2, #3
 8017098:	4920      	ldr	r1, [pc, #128]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 801709a:	4313      	orrs	r3, r2
 801709c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801709e:	4b1f      	ldr	r3, [pc, #124]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170a2:	4a1e      	ldr	r2, [pc, #120]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170a4:	f043 0310 	orr.w	r3, r3, #16
 80170a8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80170aa:	683b      	ldr	r3, [r7, #0]
 80170ac:	2b00      	cmp	r3, #0
 80170ae:	d106      	bne.n	80170be <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80170b0:	4b1a      	ldr	r3, [pc, #104]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170b4:	4a19      	ldr	r2, [pc, #100]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80170ba:	62d3      	str	r3, [r2, #44]	; 0x2c
 80170bc:	e00f      	b.n	80170de <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80170be:	683b      	ldr	r3, [r7, #0]
 80170c0:	2b01      	cmp	r3, #1
 80170c2:	d106      	bne.n	80170d2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80170c4:	4b15      	ldr	r3, [pc, #84]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170c8:	4a14      	ldr	r2, [pc, #80]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80170ce:	62d3      	str	r3, [r2, #44]	; 0x2c
 80170d0:	e005      	b.n	80170de <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80170d2:	4b12      	ldr	r3, [pc, #72]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170d6:	4a11      	ldr	r2, [pc, #68]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170d8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80170dc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80170de:	4b0f      	ldr	r3, [pc, #60]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170e0:	681b      	ldr	r3, [r3, #0]
 80170e2:	4a0e      	ldr	r2, [pc, #56]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 80170e4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80170e8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80170ea:	f7fb fed3 	bl	8012e94 <HAL_GetTick>
 80170ee:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80170f0:	e008      	b.n	8017104 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80170f2:	f7fb fecf 	bl	8012e94 <HAL_GetTick>
 80170f6:	4602      	mov	r2, r0
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	1ad3      	subs	r3, r2, r3
 80170fc:	2b02      	cmp	r3, #2
 80170fe:	d901      	bls.n	8017104 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017100:	2303      	movs	r3, #3
 8017102:	e006      	b.n	8017112 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8017104:	4b05      	ldr	r3, [pc, #20]	; (801711c <RCCEx_PLL2_Config+0x15c>)
 8017106:	681b      	ldr	r3, [r3, #0]
 8017108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801710c:	2b00      	cmp	r3, #0
 801710e:	d0f0      	beq.n	80170f2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8017110:	7bfb      	ldrb	r3, [r7, #15]
}
 8017112:	4618      	mov	r0, r3
 8017114:	3710      	adds	r7, #16
 8017116:	46bd      	mov	sp, r7
 8017118:	bd80      	pop	{r7, pc}
 801711a:	bf00      	nop
 801711c:	58024400 	.word	0x58024400
 8017120:	ffff0007 	.word	0xffff0007

08017124 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8017124:	b580      	push	{r7, lr}
 8017126:	b084      	sub	sp, #16
 8017128:	af00      	add	r7, sp, #0
 801712a:	6078      	str	r0, [r7, #4]
 801712c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801712e:	2300      	movs	r3, #0
 8017130:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8017132:	4b53      	ldr	r3, [pc, #332]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017136:	f003 0303 	and.w	r3, r3, #3
 801713a:	2b03      	cmp	r3, #3
 801713c:	d101      	bne.n	8017142 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801713e:	2301      	movs	r3, #1
 8017140:	e099      	b.n	8017276 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8017142:	4b4f      	ldr	r3, [pc, #316]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017144:	681b      	ldr	r3, [r3, #0]
 8017146:	4a4e      	ldr	r2, [pc, #312]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801714c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801714e:	f7fb fea1 	bl	8012e94 <HAL_GetTick>
 8017152:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017154:	e008      	b.n	8017168 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8017156:	f7fb fe9d 	bl	8012e94 <HAL_GetTick>
 801715a:	4602      	mov	r2, r0
 801715c:	68bb      	ldr	r3, [r7, #8]
 801715e:	1ad3      	subs	r3, r2, r3
 8017160:	2b02      	cmp	r3, #2
 8017162:	d901      	bls.n	8017168 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8017164:	2303      	movs	r3, #3
 8017166:	e086      	b.n	8017276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8017168:	4b45      	ldr	r3, [pc, #276]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017170:	2b00      	cmp	r3, #0
 8017172:	d1f0      	bne.n	8017156 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8017174:	4b42      	ldr	r3, [pc, #264]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017178:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	051b      	lsls	r3, r3, #20
 8017182:	493f      	ldr	r1, [pc, #252]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017184:	4313      	orrs	r3, r2
 8017186:	628b      	str	r3, [r1, #40]	; 0x28
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	685b      	ldr	r3, [r3, #4]
 801718c:	3b01      	subs	r3, #1
 801718e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	689b      	ldr	r3, [r3, #8]
 8017196:	3b01      	subs	r3, #1
 8017198:	025b      	lsls	r3, r3, #9
 801719a:	b29b      	uxth	r3, r3
 801719c:	431a      	orrs	r2, r3
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	68db      	ldr	r3, [r3, #12]
 80171a2:	3b01      	subs	r3, #1
 80171a4:	041b      	lsls	r3, r3, #16
 80171a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80171aa:	431a      	orrs	r2, r3
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	691b      	ldr	r3, [r3, #16]
 80171b0:	3b01      	subs	r3, #1
 80171b2:	061b      	lsls	r3, r3, #24
 80171b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80171b8:	4931      	ldr	r1, [pc, #196]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171ba:	4313      	orrs	r3, r2
 80171bc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80171be:	4b30      	ldr	r3, [pc, #192]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171c2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	695b      	ldr	r3, [r3, #20]
 80171ca:	492d      	ldr	r1, [pc, #180]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171cc:	4313      	orrs	r3, r2
 80171ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80171d0:	4b2b      	ldr	r3, [pc, #172]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	699b      	ldr	r3, [r3, #24]
 80171dc:	4928      	ldr	r1, [pc, #160]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171de:	4313      	orrs	r3, r2
 80171e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80171e2:	4b27      	ldr	r3, [pc, #156]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171e6:	4a26      	ldr	r2, [pc, #152]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80171ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80171ee:	4b24      	ldr	r3, [pc, #144]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80171f2:	4b24      	ldr	r3, [pc, #144]	; (8017284 <RCCEx_PLL3_Config+0x160>)
 80171f4:	4013      	ands	r3, r2
 80171f6:	687a      	ldr	r2, [r7, #4]
 80171f8:	69d2      	ldr	r2, [r2, #28]
 80171fa:	00d2      	lsls	r2, r2, #3
 80171fc:	4920      	ldr	r1, [pc, #128]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 80171fe:	4313      	orrs	r3, r2
 8017200:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8017202:	4b1f      	ldr	r3, [pc, #124]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017206:	4a1e      	ldr	r2, [pc, #120]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801720c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 801720e:	683b      	ldr	r3, [r7, #0]
 8017210:	2b00      	cmp	r3, #0
 8017212:	d106      	bne.n	8017222 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8017214:	4b1a      	ldr	r3, [pc, #104]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017218:	4a19      	ldr	r2, [pc, #100]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801721a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801721e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017220:	e00f      	b.n	8017242 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8017222:	683b      	ldr	r3, [r7, #0]
 8017224:	2b01      	cmp	r3, #1
 8017226:	d106      	bne.n	8017236 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8017228:	4b15      	ldr	r3, [pc, #84]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801722a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801722c:	4a14      	ldr	r2, [pc, #80]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801722e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017232:	62d3      	str	r3, [r2, #44]	; 0x2c
 8017234:	e005      	b.n	8017242 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8017236:	4b12      	ldr	r3, [pc, #72]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801723a:	4a11      	ldr	r2, [pc, #68]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801723c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8017240:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8017242:	4b0f      	ldr	r3, [pc, #60]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017244:	681b      	ldr	r3, [r3, #0]
 8017246:	4a0e      	ldr	r2, [pc, #56]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 8017248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801724c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801724e:	f7fb fe21 	bl	8012e94 <HAL_GetTick>
 8017252:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017254:	e008      	b.n	8017268 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8017256:	f7fb fe1d 	bl	8012e94 <HAL_GetTick>
 801725a:	4602      	mov	r2, r0
 801725c:	68bb      	ldr	r3, [r7, #8]
 801725e:	1ad3      	subs	r3, r2, r3
 8017260:	2b02      	cmp	r3, #2
 8017262:	d901      	bls.n	8017268 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8017264:	2303      	movs	r3, #3
 8017266:	e006      	b.n	8017276 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8017268:	4b05      	ldr	r3, [pc, #20]	; (8017280 <RCCEx_PLL3_Config+0x15c>)
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017270:	2b00      	cmp	r3, #0
 8017272:	d0f0      	beq.n	8017256 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8017274:	7bfb      	ldrb	r3, [r7, #15]
}
 8017276:	4618      	mov	r0, r3
 8017278:	3710      	adds	r7, #16
 801727a:	46bd      	mov	sp, r7
 801727c:	bd80      	pop	{r7, pc}
 801727e:	bf00      	nop
 8017280:	58024400 	.word	0x58024400
 8017284:	ffff0007 	.word	0xffff0007

08017288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d101      	bne.n	801729a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8017296:	2301      	movs	r3, #1
 8017298:	e01d      	b.n	80172d6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80172a0:	b2db      	uxtb	r3, r3
 80172a2:	2b00      	cmp	r3, #0
 80172a4:	d106      	bne.n	80172b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	2200      	movs	r2, #0
 80172aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80172ae:	6878      	ldr	r0, [r7, #4]
 80172b0:	f7fb fa98 	bl	80127e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	2202      	movs	r2, #2
 80172b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	681a      	ldr	r2, [r3, #0]
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	3304      	adds	r3, #4
 80172c4:	4619      	mov	r1, r3
 80172c6:	4610      	mov	r0, r2
 80172c8:	f000 fb18 	bl	80178fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	2201      	movs	r2, #1
 80172d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80172d4:	2300      	movs	r3, #0
}
 80172d6:	4618      	mov	r0, r3
 80172d8:	3708      	adds	r7, #8
 80172da:	46bd      	mov	sp, r7
 80172dc:	bd80      	pop	{r7, pc}
	...

080172e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80172e0:	b480      	push	{r7}
 80172e2:	b085      	sub	sp, #20
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	68da      	ldr	r2, [r3, #12]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	681b      	ldr	r3, [r3, #0]
 80172f2:	f042 0201 	orr.w	r2, r2, #1
 80172f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	689a      	ldr	r2, [r3, #8]
 80172fe:	4b0c      	ldr	r3, [pc, #48]	; (8017330 <HAL_TIM_Base_Start_IT+0x50>)
 8017300:	4013      	ands	r3, r2
 8017302:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8017304:	68fb      	ldr	r3, [r7, #12]
 8017306:	2b06      	cmp	r3, #6
 8017308:	d00b      	beq.n	8017322 <HAL_TIM_Base_Start_IT+0x42>
 801730a:	68fb      	ldr	r3, [r7, #12]
 801730c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017310:	d007      	beq.n	8017322 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8017312:	687b      	ldr	r3, [r7, #4]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	681a      	ldr	r2, [r3, #0]
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	f042 0201 	orr.w	r2, r2, #1
 8017320:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8017322:	2300      	movs	r3, #0
}
 8017324:	4618      	mov	r0, r3
 8017326:	3714      	adds	r7, #20
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr
 8017330:	00010007 	.word	0x00010007

08017334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b082      	sub	sp, #8
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	2b00      	cmp	r3, #0
 8017340:	d101      	bne.n	8017346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8017342:	2301      	movs	r3, #1
 8017344:	e01d      	b.n	8017382 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801734c:	b2db      	uxtb	r3, r3
 801734e:	2b00      	cmp	r3, #0
 8017350:	d106      	bne.n	8017360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	2200      	movs	r2, #0
 8017356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7fb f9dc 	bl	8012718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	2202      	movs	r2, #2
 8017364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681a      	ldr	r2, [r3, #0]
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	3304      	adds	r3, #4
 8017370:	4619      	mov	r1, r3
 8017372:	4610      	mov	r0, r2
 8017374:	f000 fac2 	bl	80178fc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2201      	movs	r2, #1
 801737c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8017380:	2300      	movs	r3, #0
}
 8017382:	4618      	mov	r0, r3
 8017384:	3708      	adds	r7, #8
 8017386:	46bd      	mov	sp, r7
 8017388:	bd80      	pop	{r7, pc}
	...

0801738c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b084      	sub	sp, #16
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
 8017394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2201      	movs	r2, #1
 801739c:	6839      	ldr	r1, [r7, #0]
 801739e:	4618      	mov	r0, r3
 80173a0:	f000 fe14 	bl	8017fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80173a4:	687b      	ldr	r3, [r7, #4]
 80173a6:	681b      	ldr	r3, [r3, #0]
 80173a8:	4a1e      	ldr	r2, [pc, #120]	; (8017424 <HAL_TIM_PWM_Start+0x98>)
 80173aa:	4293      	cmp	r3, r2
 80173ac:	d013      	beq.n	80173d6 <HAL_TIM_PWM_Start+0x4a>
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	681b      	ldr	r3, [r3, #0]
 80173b2:	4a1d      	ldr	r2, [pc, #116]	; (8017428 <HAL_TIM_PWM_Start+0x9c>)
 80173b4:	4293      	cmp	r3, r2
 80173b6:	d00e      	beq.n	80173d6 <HAL_TIM_PWM_Start+0x4a>
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	681b      	ldr	r3, [r3, #0]
 80173bc:	4a1b      	ldr	r2, [pc, #108]	; (801742c <HAL_TIM_PWM_Start+0xa0>)
 80173be:	4293      	cmp	r3, r2
 80173c0:	d009      	beq.n	80173d6 <HAL_TIM_PWM_Start+0x4a>
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4a1a      	ldr	r2, [pc, #104]	; (8017430 <HAL_TIM_PWM_Start+0xa4>)
 80173c8:	4293      	cmp	r3, r2
 80173ca:	d004      	beq.n	80173d6 <HAL_TIM_PWM_Start+0x4a>
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	4a18      	ldr	r2, [pc, #96]	; (8017434 <HAL_TIM_PWM_Start+0xa8>)
 80173d2:	4293      	cmp	r3, r2
 80173d4:	d101      	bne.n	80173da <HAL_TIM_PWM_Start+0x4e>
 80173d6:	2301      	movs	r3, #1
 80173d8:	e000      	b.n	80173dc <HAL_TIM_PWM_Start+0x50>
 80173da:	2300      	movs	r3, #0
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d007      	beq.n	80173f0 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80173ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	689a      	ldr	r2, [r3, #8]
 80173f6:	4b10      	ldr	r3, [pc, #64]	; (8017438 <HAL_TIM_PWM_Start+0xac>)
 80173f8:	4013      	ands	r3, r2
 80173fa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	2b06      	cmp	r3, #6
 8017400:	d00b      	beq.n	801741a <HAL_TIM_PWM_Start+0x8e>
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017408:	d007      	beq.n	801741a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	681b      	ldr	r3, [r3, #0]
 801740e:	681a      	ldr	r2, [r3, #0]
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f042 0201 	orr.w	r2, r2, #1
 8017418:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801741a:	2300      	movs	r3, #0
}
 801741c:	4618      	mov	r0, r3
 801741e:	3710      	adds	r7, #16
 8017420:	46bd      	mov	sp, r7
 8017422:	bd80      	pop	{r7, pc}
 8017424:	40010000 	.word	0x40010000
 8017428:	40010400 	.word	0x40010400
 801742c:	40014000 	.word	0x40014000
 8017430:	40014400 	.word	0x40014400
 8017434:	40014800 	.word	0x40014800
 8017438:	00010007 	.word	0x00010007

0801743c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801743c:	b580      	push	{r7, lr}
 801743e:	b082      	sub	sp, #8
 8017440:	af00      	add	r7, sp, #0
 8017442:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	691b      	ldr	r3, [r3, #16]
 801744a:	f003 0302 	and.w	r3, r3, #2
 801744e:	2b02      	cmp	r3, #2
 8017450:	d122      	bne.n	8017498 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	68db      	ldr	r3, [r3, #12]
 8017458:	f003 0302 	and.w	r3, r3, #2
 801745c:	2b02      	cmp	r3, #2
 801745e:	d11b      	bne.n	8017498 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8017460:	687b      	ldr	r3, [r7, #4]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	f06f 0202 	mvn.w	r2, #2
 8017468:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	2201      	movs	r2, #1
 801746e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	699b      	ldr	r3, [r3, #24]
 8017476:	f003 0303 	and.w	r3, r3, #3
 801747a:	2b00      	cmp	r3, #0
 801747c:	d003      	beq.n	8017486 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801747e:	6878      	ldr	r0, [r7, #4]
 8017480:	f000 fa1e 	bl	80178c0 <HAL_TIM_IC_CaptureCallback>
 8017484:	e005      	b.n	8017492 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8017486:	6878      	ldr	r0, [r7, #4]
 8017488:	f000 fa10 	bl	80178ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801748c:	6878      	ldr	r0, [r7, #4]
 801748e:	f000 fa21 	bl	80178d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	2200      	movs	r2, #0
 8017496:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	691b      	ldr	r3, [r3, #16]
 801749e:	f003 0304 	and.w	r3, r3, #4
 80174a2:	2b04      	cmp	r3, #4
 80174a4:	d122      	bne.n	80174ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80174a6:	687b      	ldr	r3, [r7, #4]
 80174a8:	681b      	ldr	r3, [r3, #0]
 80174aa:	68db      	ldr	r3, [r3, #12]
 80174ac:	f003 0304 	and.w	r3, r3, #4
 80174b0:	2b04      	cmp	r3, #4
 80174b2:	d11b      	bne.n	80174ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	681b      	ldr	r3, [r3, #0]
 80174b8:	f06f 0204 	mvn.w	r2, #4
 80174bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	2202      	movs	r2, #2
 80174c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	699b      	ldr	r3, [r3, #24]
 80174ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d003      	beq.n	80174da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80174d2:	6878      	ldr	r0, [r7, #4]
 80174d4:	f000 f9f4 	bl	80178c0 <HAL_TIM_IC_CaptureCallback>
 80174d8:	e005      	b.n	80174e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80174da:	6878      	ldr	r0, [r7, #4]
 80174dc:	f000 f9e6 	bl	80178ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80174e0:	6878      	ldr	r0, [r7, #4]
 80174e2:	f000 f9f7 	bl	80178d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80174e6:	687b      	ldr	r3, [r7, #4]
 80174e8:	2200      	movs	r2, #0
 80174ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	691b      	ldr	r3, [r3, #16]
 80174f2:	f003 0308 	and.w	r3, r3, #8
 80174f6:	2b08      	cmp	r3, #8
 80174f8:	d122      	bne.n	8017540 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	68db      	ldr	r3, [r3, #12]
 8017500:	f003 0308 	and.w	r3, r3, #8
 8017504:	2b08      	cmp	r3, #8
 8017506:	d11b      	bne.n	8017540 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f06f 0208 	mvn.w	r2, #8
 8017510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	2204      	movs	r2, #4
 8017516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	681b      	ldr	r3, [r3, #0]
 801751c:	69db      	ldr	r3, [r3, #28]
 801751e:	f003 0303 	and.w	r3, r3, #3
 8017522:	2b00      	cmp	r3, #0
 8017524:	d003      	beq.n	801752e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017526:	6878      	ldr	r0, [r7, #4]
 8017528:	f000 f9ca 	bl	80178c0 <HAL_TIM_IC_CaptureCallback>
 801752c:	e005      	b.n	801753a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801752e:	6878      	ldr	r0, [r7, #4]
 8017530:	f000 f9bc 	bl	80178ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017534:	6878      	ldr	r0, [r7, #4]
 8017536:	f000 f9cd 	bl	80178d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2200      	movs	r2, #0
 801753e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	691b      	ldr	r3, [r3, #16]
 8017546:	f003 0310 	and.w	r3, r3, #16
 801754a:	2b10      	cmp	r3, #16
 801754c:	d122      	bne.n	8017594 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	68db      	ldr	r3, [r3, #12]
 8017554:	f003 0310 	and.w	r3, r3, #16
 8017558:	2b10      	cmp	r3, #16
 801755a:	d11b      	bne.n	8017594 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	f06f 0210 	mvn.w	r2, #16
 8017564:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	2208      	movs	r2, #8
 801756a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	69db      	ldr	r3, [r3, #28]
 8017572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017576:	2b00      	cmp	r3, #0
 8017578:	d003      	beq.n	8017582 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801757a:	6878      	ldr	r0, [r7, #4]
 801757c:	f000 f9a0 	bl	80178c0 <HAL_TIM_IC_CaptureCallback>
 8017580:	e005      	b.n	801758e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8017582:	6878      	ldr	r0, [r7, #4]
 8017584:	f000 f992 	bl	80178ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f000 f9a3 	bl	80178d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	2200      	movs	r2, #0
 8017592:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	681b      	ldr	r3, [r3, #0]
 8017598:	691b      	ldr	r3, [r3, #16]
 801759a:	f003 0301 	and.w	r3, r3, #1
 801759e:	2b01      	cmp	r3, #1
 80175a0:	d10e      	bne.n	80175c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	f003 0301 	and.w	r3, r3, #1
 80175ac:	2b01      	cmp	r3, #1
 80175ae:	d107      	bne.n	80175c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	681b      	ldr	r3, [r3, #0]
 80175b4:	f06f 0201 	mvn.w	r2, #1
 80175b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80175ba:	6878      	ldr	r0, [r7, #4]
 80175bc:	f7f9 feb8 	bl	8011330 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	691b      	ldr	r3, [r3, #16]
 80175c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80175ca:	2b80      	cmp	r3, #128	; 0x80
 80175cc:	d10e      	bne.n	80175ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80175ce:	687b      	ldr	r3, [r7, #4]
 80175d0:	681b      	ldr	r3, [r3, #0]
 80175d2:	68db      	ldr	r3, [r3, #12]
 80175d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80175d8:	2b80      	cmp	r3, #128	; 0x80
 80175da:	d107      	bne.n	80175ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80175dc:	687b      	ldr	r3, [r7, #4]
 80175de:	681b      	ldr	r3, [r3, #0]
 80175e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80175e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80175e6:	6878      	ldr	r0, [r7, #4]
 80175e8:	f000 fe26 	bl	8018238 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	681b      	ldr	r3, [r3, #0]
 80175f0:	691b      	ldr	r3, [r3, #16]
 80175f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80175f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175fa:	d10e      	bne.n	801761a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	681b      	ldr	r3, [r3, #0]
 8017600:	68db      	ldr	r3, [r3, #12]
 8017602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017606:	2b80      	cmp	r3, #128	; 0x80
 8017608:	d107      	bne.n	801761a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801760a:	687b      	ldr	r3, [r7, #4]
 801760c:	681b      	ldr	r3, [r3, #0]
 801760e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017612:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017614:	6878      	ldr	r0, [r7, #4]
 8017616:	f000 fe19 	bl	801824c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	691b      	ldr	r3, [r3, #16]
 8017620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017624:	2b40      	cmp	r3, #64	; 0x40
 8017626:	d10e      	bne.n	8017646 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	68db      	ldr	r3, [r3, #12]
 801762e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017632:	2b40      	cmp	r3, #64	; 0x40
 8017634:	d107      	bne.n	8017646 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801763e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017640:	6878      	ldr	r0, [r7, #4]
 8017642:	f000 f951 	bl	80178e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	681b      	ldr	r3, [r3, #0]
 801764a:	691b      	ldr	r3, [r3, #16]
 801764c:	f003 0320 	and.w	r3, r3, #32
 8017650:	2b20      	cmp	r3, #32
 8017652:	d10e      	bne.n	8017672 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	68db      	ldr	r3, [r3, #12]
 801765a:	f003 0320 	and.w	r3, r3, #32
 801765e:	2b20      	cmp	r3, #32
 8017660:	d107      	bne.n	8017672 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	f06f 0220 	mvn.w	r2, #32
 801766a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801766c:	6878      	ldr	r0, [r7, #4]
 801766e:	f000 fdd9 	bl	8018224 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017672:	bf00      	nop
 8017674:	3708      	adds	r7, #8
 8017676:	46bd      	mov	sp, r7
 8017678:	bd80      	pop	{r7, pc}
	...

0801767c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b084      	sub	sp, #16
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801768e:	2b01      	cmp	r3, #1
 8017690:	d101      	bne.n	8017696 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8017692:	2302      	movs	r3, #2
 8017694:	e105      	b.n	80178a2 <HAL_TIM_PWM_ConfigChannel+0x226>
 8017696:	68fb      	ldr	r3, [r7, #12]
 8017698:	2201      	movs	r2, #1
 801769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801769e:	68fb      	ldr	r3, [r7, #12]
 80176a0:	2202      	movs	r2, #2
 80176a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2b14      	cmp	r3, #20
 80176aa:	f200 80f0 	bhi.w	801788e <HAL_TIM_PWM_ConfigChannel+0x212>
 80176ae:	a201      	add	r2, pc, #4	; (adr r2, 80176b4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80176b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80176b4:	08017709 	.word	0x08017709
 80176b8:	0801788f 	.word	0x0801788f
 80176bc:	0801788f 	.word	0x0801788f
 80176c0:	0801788f 	.word	0x0801788f
 80176c4:	08017749 	.word	0x08017749
 80176c8:	0801788f 	.word	0x0801788f
 80176cc:	0801788f 	.word	0x0801788f
 80176d0:	0801788f 	.word	0x0801788f
 80176d4:	0801778b 	.word	0x0801778b
 80176d8:	0801788f 	.word	0x0801788f
 80176dc:	0801788f 	.word	0x0801788f
 80176e0:	0801788f 	.word	0x0801788f
 80176e4:	080177cb 	.word	0x080177cb
 80176e8:	0801788f 	.word	0x0801788f
 80176ec:	0801788f 	.word	0x0801788f
 80176f0:	0801788f 	.word	0x0801788f
 80176f4:	0801780d 	.word	0x0801780d
 80176f8:	0801788f 	.word	0x0801788f
 80176fc:	0801788f 	.word	0x0801788f
 8017700:	0801788f 	.word	0x0801788f
 8017704:	0801784d 	.word	0x0801784d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	68b9      	ldr	r1, [r7, #8]
 801770e:	4618      	mov	r0, r3
 8017710:	f000 f98e 	bl	8017a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017714:	68fb      	ldr	r3, [r7, #12]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	699a      	ldr	r2, [r3, #24]
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	f042 0208 	orr.w	r2, r2, #8
 8017722:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	681b      	ldr	r3, [r3, #0]
 8017728:	699a      	ldr	r2, [r3, #24]
 801772a:	68fb      	ldr	r3, [r7, #12]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	f022 0204 	bic.w	r2, r2, #4
 8017732:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	6999      	ldr	r1, [r3, #24]
 801773a:	68bb      	ldr	r3, [r7, #8]
 801773c:	691a      	ldr	r2, [r3, #16]
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	430a      	orrs	r2, r1
 8017744:	619a      	str	r2, [r3, #24]
      break;
 8017746:	e0a3      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017748:	68fb      	ldr	r3, [r7, #12]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	68b9      	ldr	r1, [r7, #8]
 801774e:	4618      	mov	r0, r3
 8017750:	f000 f9fe 	bl	8017b50 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	681b      	ldr	r3, [r3, #0]
 8017758:	699a      	ldr	r2, [r3, #24]
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	681b      	ldr	r3, [r3, #0]
 801775e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017762:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	681b      	ldr	r3, [r3, #0]
 8017768:	699a      	ldr	r2, [r3, #24]
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017772:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	681b      	ldr	r3, [r3, #0]
 8017778:	6999      	ldr	r1, [r3, #24]
 801777a:	68bb      	ldr	r3, [r7, #8]
 801777c:	691b      	ldr	r3, [r3, #16]
 801777e:	021a      	lsls	r2, r3, #8
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	430a      	orrs	r2, r1
 8017786:	619a      	str	r2, [r3, #24]
      break;
 8017788:	e082      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	68b9      	ldr	r1, [r7, #8]
 8017790:	4618      	mov	r0, r3
 8017792:	f000 fa67 	bl	8017c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	69da      	ldr	r2, [r3, #28]
 801779c:	68fb      	ldr	r3, [r7, #12]
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	f042 0208 	orr.w	r2, r2, #8
 80177a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80177a6:	68fb      	ldr	r3, [r7, #12]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	69da      	ldr	r2, [r3, #28]
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f022 0204 	bic.w	r2, r2, #4
 80177b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80177b6:	68fb      	ldr	r3, [r7, #12]
 80177b8:	681b      	ldr	r3, [r3, #0]
 80177ba:	69d9      	ldr	r1, [r3, #28]
 80177bc:	68bb      	ldr	r3, [r7, #8]
 80177be:	691a      	ldr	r2, [r3, #16]
 80177c0:	68fb      	ldr	r3, [r7, #12]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	430a      	orrs	r2, r1
 80177c6:	61da      	str	r2, [r3, #28]
      break;
 80177c8:	e062      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80177ca:	68fb      	ldr	r3, [r7, #12]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	68b9      	ldr	r1, [r7, #8]
 80177d0:	4618      	mov	r0, r3
 80177d2:	f000 facd 	bl	8017d70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80177d6:	68fb      	ldr	r3, [r7, #12]
 80177d8:	681b      	ldr	r3, [r3, #0]
 80177da:	69da      	ldr	r2, [r3, #28]
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80177e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80177e6:	68fb      	ldr	r3, [r7, #12]
 80177e8:	681b      	ldr	r3, [r3, #0]
 80177ea:	69da      	ldr	r2, [r3, #28]
 80177ec:	68fb      	ldr	r3, [r7, #12]
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80177f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	681b      	ldr	r3, [r3, #0]
 80177fa:	69d9      	ldr	r1, [r3, #28]
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	691b      	ldr	r3, [r3, #16]
 8017800:	021a      	lsls	r2, r3, #8
 8017802:	68fb      	ldr	r3, [r7, #12]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	430a      	orrs	r2, r1
 8017808:	61da      	str	r2, [r3, #28]
      break;
 801780a:	e041      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	68b9      	ldr	r1, [r7, #8]
 8017812:	4618      	mov	r0, r3
 8017814:	f000 fb14 	bl	8017e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801781e:	68fb      	ldr	r3, [r7, #12]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	f042 0208 	orr.w	r2, r2, #8
 8017826:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017828:	68fb      	ldr	r3, [r7, #12]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801782e:	68fb      	ldr	r3, [r7, #12]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	f022 0204 	bic.w	r2, r2, #4
 8017836:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017838:	68fb      	ldr	r3, [r7, #12]
 801783a:	681b      	ldr	r3, [r3, #0]
 801783c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	691a      	ldr	r2, [r3, #16]
 8017842:	68fb      	ldr	r3, [r7, #12]
 8017844:	681b      	ldr	r3, [r3, #0]
 8017846:	430a      	orrs	r2, r1
 8017848:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801784a:	e021      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801784c:	68fb      	ldr	r3, [r7, #12]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	68b9      	ldr	r1, [r7, #8]
 8017852:	4618      	mov	r0, r3
 8017854:	f000 fb56 	bl	8017f04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	681b      	ldr	r3, [r3, #0]
 801785c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017866:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017876:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8017878:	68fb      	ldr	r3, [r7, #12]
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801787e:	68bb      	ldr	r3, [r7, #8]
 8017880:	691b      	ldr	r3, [r3, #16]
 8017882:	021a      	lsls	r2, r3, #8
 8017884:	68fb      	ldr	r3, [r7, #12]
 8017886:	681b      	ldr	r3, [r3, #0]
 8017888:	430a      	orrs	r2, r1
 801788a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801788c:	e000      	b.n	8017890 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 801788e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	2201      	movs	r2, #1
 8017894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017898:	68fb      	ldr	r3, [r7, #12]
 801789a:	2200      	movs	r2, #0
 801789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80178a0:	2300      	movs	r3, #0
}
 80178a2:	4618      	mov	r0, r3
 80178a4:	3710      	adds	r7, #16
 80178a6:	46bd      	mov	sp, r7
 80178a8:	bd80      	pop	{r7, pc}
 80178aa:	bf00      	nop

080178ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80178ac:	b480      	push	{r7}
 80178ae:	b083      	sub	sp, #12
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80178b4:	bf00      	nop
 80178b6:	370c      	adds	r7, #12
 80178b8:	46bd      	mov	sp, r7
 80178ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178be:	4770      	bx	lr

080178c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80178c0:	b480      	push	{r7}
 80178c2:	b083      	sub	sp, #12
 80178c4:	af00      	add	r7, sp, #0
 80178c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80178c8:	bf00      	nop
 80178ca:	370c      	adds	r7, #12
 80178cc:	46bd      	mov	sp, r7
 80178ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178d2:	4770      	bx	lr

080178d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80178d4:	b480      	push	{r7}
 80178d6:	b083      	sub	sp, #12
 80178d8:	af00      	add	r7, sp, #0
 80178da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80178dc:	bf00      	nop
 80178de:	370c      	adds	r7, #12
 80178e0:	46bd      	mov	sp, r7
 80178e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178e6:	4770      	bx	lr

080178e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80178e8:	b480      	push	{r7}
 80178ea:	b083      	sub	sp, #12
 80178ec:	af00      	add	r7, sp, #0
 80178ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80178f0:	bf00      	nop
 80178f2:	370c      	adds	r7, #12
 80178f4:	46bd      	mov	sp, r7
 80178f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178fa:	4770      	bx	lr

080178fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80178fc:	b480      	push	{r7}
 80178fe:	b085      	sub	sp, #20
 8017900:	af00      	add	r7, sp, #0
 8017902:	6078      	str	r0, [r7, #4]
 8017904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	681b      	ldr	r3, [r3, #0]
 801790a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	4a40      	ldr	r2, [pc, #256]	; (8017a10 <TIM_Base_SetConfig+0x114>)
 8017910:	4293      	cmp	r3, r2
 8017912:	d013      	beq.n	801793c <TIM_Base_SetConfig+0x40>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801791a:	d00f      	beq.n	801793c <TIM_Base_SetConfig+0x40>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	4a3d      	ldr	r2, [pc, #244]	; (8017a14 <TIM_Base_SetConfig+0x118>)
 8017920:	4293      	cmp	r3, r2
 8017922:	d00b      	beq.n	801793c <TIM_Base_SetConfig+0x40>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	4a3c      	ldr	r2, [pc, #240]	; (8017a18 <TIM_Base_SetConfig+0x11c>)
 8017928:	4293      	cmp	r3, r2
 801792a:	d007      	beq.n	801793c <TIM_Base_SetConfig+0x40>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	4a3b      	ldr	r2, [pc, #236]	; (8017a1c <TIM_Base_SetConfig+0x120>)
 8017930:	4293      	cmp	r3, r2
 8017932:	d003      	beq.n	801793c <TIM_Base_SetConfig+0x40>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	4a3a      	ldr	r2, [pc, #232]	; (8017a20 <TIM_Base_SetConfig+0x124>)
 8017938:	4293      	cmp	r3, r2
 801793a:	d108      	bne.n	801794e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801793c:	68fb      	ldr	r3, [r7, #12]
 801793e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	685b      	ldr	r3, [r3, #4]
 8017948:	68fa      	ldr	r2, [r7, #12]
 801794a:	4313      	orrs	r3, r2
 801794c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	4a2f      	ldr	r2, [pc, #188]	; (8017a10 <TIM_Base_SetConfig+0x114>)
 8017952:	4293      	cmp	r3, r2
 8017954:	d01f      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801795c:	d01b      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	4a2c      	ldr	r2, [pc, #176]	; (8017a14 <TIM_Base_SetConfig+0x118>)
 8017962:	4293      	cmp	r3, r2
 8017964:	d017      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	4a2b      	ldr	r2, [pc, #172]	; (8017a18 <TIM_Base_SetConfig+0x11c>)
 801796a:	4293      	cmp	r3, r2
 801796c:	d013      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	4a2a      	ldr	r2, [pc, #168]	; (8017a1c <TIM_Base_SetConfig+0x120>)
 8017972:	4293      	cmp	r3, r2
 8017974:	d00f      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	4a29      	ldr	r2, [pc, #164]	; (8017a20 <TIM_Base_SetConfig+0x124>)
 801797a:	4293      	cmp	r3, r2
 801797c:	d00b      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	4a28      	ldr	r2, [pc, #160]	; (8017a24 <TIM_Base_SetConfig+0x128>)
 8017982:	4293      	cmp	r3, r2
 8017984:	d007      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 8017986:	687b      	ldr	r3, [r7, #4]
 8017988:	4a27      	ldr	r2, [pc, #156]	; (8017a28 <TIM_Base_SetConfig+0x12c>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d003      	beq.n	8017996 <TIM_Base_SetConfig+0x9a>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	4a26      	ldr	r2, [pc, #152]	; (8017a2c <TIM_Base_SetConfig+0x130>)
 8017992:	4293      	cmp	r3, r2
 8017994:	d108      	bne.n	80179a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801799c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801799e:	683b      	ldr	r3, [r7, #0]
 80179a0:	68db      	ldr	r3, [r3, #12]
 80179a2:	68fa      	ldr	r2, [r7, #12]
 80179a4:	4313      	orrs	r3, r2
 80179a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80179a8:	68fb      	ldr	r3, [r7, #12]
 80179aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	695b      	ldr	r3, [r3, #20]
 80179b2:	4313      	orrs	r3, r2
 80179b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	68fa      	ldr	r2, [r7, #12]
 80179ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80179bc:	683b      	ldr	r3, [r7, #0]
 80179be:	689a      	ldr	r2, [r3, #8]
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80179c4:	683b      	ldr	r3, [r7, #0]
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	4a10      	ldr	r2, [pc, #64]	; (8017a10 <TIM_Base_SetConfig+0x114>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d00f      	beq.n	80179f4 <TIM_Base_SetConfig+0xf8>
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	4a12      	ldr	r2, [pc, #72]	; (8017a20 <TIM_Base_SetConfig+0x124>)
 80179d8:	4293      	cmp	r3, r2
 80179da:	d00b      	beq.n	80179f4 <TIM_Base_SetConfig+0xf8>
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	4a11      	ldr	r2, [pc, #68]	; (8017a24 <TIM_Base_SetConfig+0x128>)
 80179e0:	4293      	cmp	r3, r2
 80179e2:	d007      	beq.n	80179f4 <TIM_Base_SetConfig+0xf8>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	4a10      	ldr	r2, [pc, #64]	; (8017a28 <TIM_Base_SetConfig+0x12c>)
 80179e8:	4293      	cmp	r3, r2
 80179ea:	d003      	beq.n	80179f4 <TIM_Base_SetConfig+0xf8>
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	4a0f      	ldr	r2, [pc, #60]	; (8017a2c <TIM_Base_SetConfig+0x130>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d103      	bne.n	80179fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80179f4:	683b      	ldr	r3, [r7, #0]
 80179f6:	691a      	ldr	r2, [r3, #16]
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	2201      	movs	r2, #1
 8017a00:	615a      	str	r2, [r3, #20]
}
 8017a02:	bf00      	nop
 8017a04:	3714      	adds	r7, #20
 8017a06:	46bd      	mov	sp, r7
 8017a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a0c:	4770      	bx	lr
 8017a0e:	bf00      	nop
 8017a10:	40010000 	.word	0x40010000
 8017a14:	40000400 	.word	0x40000400
 8017a18:	40000800 	.word	0x40000800
 8017a1c:	40000c00 	.word	0x40000c00
 8017a20:	40010400 	.word	0x40010400
 8017a24:	40014000 	.word	0x40014000
 8017a28:	40014400 	.word	0x40014400
 8017a2c:	40014800 	.word	0x40014800

08017a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017a30:	b480      	push	{r7}
 8017a32:	b087      	sub	sp, #28
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	6078      	str	r0, [r7, #4]
 8017a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	6a1b      	ldr	r3, [r3, #32]
 8017a3e:	f023 0201 	bic.w	r2, r3, #1
 8017a42:	687b      	ldr	r3, [r7, #4]
 8017a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a46:	687b      	ldr	r3, [r7, #4]
 8017a48:	6a1b      	ldr	r3, [r3, #32]
 8017a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	685b      	ldr	r3, [r3, #4]
 8017a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	699b      	ldr	r3, [r3, #24]
 8017a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017a58:	68fa      	ldr	r2, [r7, #12]
 8017a5a:	4b37      	ldr	r3, [pc, #220]	; (8017b38 <TIM_OC1_SetConfig+0x108>)
 8017a5c:	4013      	ands	r3, r2
 8017a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	f023 0303 	bic.w	r3, r3, #3
 8017a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017a68:	683b      	ldr	r3, [r7, #0]
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	68fa      	ldr	r2, [r7, #12]
 8017a6e:	4313      	orrs	r3, r2
 8017a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017a72:	697b      	ldr	r3, [r7, #20]
 8017a74:	f023 0302 	bic.w	r3, r3, #2
 8017a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8017a7a:	683b      	ldr	r3, [r7, #0]
 8017a7c:	689b      	ldr	r3, [r3, #8]
 8017a7e:	697a      	ldr	r2, [r7, #20]
 8017a80:	4313      	orrs	r3, r2
 8017a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	4a2d      	ldr	r2, [pc, #180]	; (8017b3c <TIM_OC1_SetConfig+0x10c>)
 8017a88:	4293      	cmp	r3, r2
 8017a8a:	d00f      	beq.n	8017aac <TIM_OC1_SetConfig+0x7c>
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	4a2c      	ldr	r2, [pc, #176]	; (8017b40 <TIM_OC1_SetConfig+0x110>)
 8017a90:	4293      	cmp	r3, r2
 8017a92:	d00b      	beq.n	8017aac <TIM_OC1_SetConfig+0x7c>
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	4a2b      	ldr	r2, [pc, #172]	; (8017b44 <TIM_OC1_SetConfig+0x114>)
 8017a98:	4293      	cmp	r3, r2
 8017a9a:	d007      	beq.n	8017aac <TIM_OC1_SetConfig+0x7c>
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	4a2a      	ldr	r2, [pc, #168]	; (8017b48 <TIM_OC1_SetConfig+0x118>)
 8017aa0:	4293      	cmp	r3, r2
 8017aa2:	d003      	beq.n	8017aac <TIM_OC1_SetConfig+0x7c>
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	4a29      	ldr	r2, [pc, #164]	; (8017b4c <TIM_OC1_SetConfig+0x11c>)
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d10c      	bne.n	8017ac6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8017aac:	697b      	ldr	r3, [r7, #20]
 8017aae:	f023 0308 	bic.w	r3, r3, #8
 8017ab2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017ab4:	683b      	ldr	r3, [r7, #0]
 8017ab6:	68db      	ldr	r3, [r3, #12]
 8017ab8:	697a      	ldr	r2, [r7, #20]
 8017aba:	4313      	orrs	r3, r2
 8017abc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8017abe:	697b      	ldr	r3, [r7, #20]
 8017ac0:	f023 0304 	bic.w	r3, r3, #4
 8017ac4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4a1c      	ldr	r2, [pc, #112]	; (8017b3c <TIM_OC1_SetConfig+0x10c>)
 8017aca:	4293      	cmp	r3, r2
 8017acc:	d00f      	beq.n	8017aee <TIM_OC1_SetConfig+0xbe>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	4a1b      	ldr	r2, [pc, #108]	; (8017b40 <TIM_OC1_SetConfig+0x110>)
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d00b      	beq.n	8017aee <TIM_OC1_SetConfig+0xbe>
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	4a1a      	ldr	r2, [pc, #104]	; (8017b44 <TIM_OC1_SetConfig+0x114>)
 8017ada:	4293      	cmp	r3, r2
 8017adc:	d007      	beq.n	8017aee <TIM_OC1_SetConfig+0xbe>
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	4a19      	ldr	r2, [pc, #100]	; (8017b48 <TIM_OC1_SetConfig+0x118>)
 8017ae2:	4293      	cmp	r3, r2
 8017ae4:	d003      	beq.n	8017aee <TIM_OC1_SetConfig+0xbe>
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	4a18      	ldr	r2, [pc, #96]	; (8017b4c <TIM_OC1_SetConfig+0x11c>)
 8017aea:	4293      	cmp	r3, r2
 8017aec:	d111      	bne.n	8017b12 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8017aee:	693b      	ldr	r3, [r7, #16]
 8017af0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017af6:	693b      	ldr	r3, [r7, #16]
 8017af8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8017afe:	683b      	ldr	r3, [r7, #0]
 8017b00:	695b      	ldr	r3, [r3, #20]
 8017b02:	693a      	ldr	r2, [r7, #16]
 8017b04:	4313      	orrs	r3, r2
 8017b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	699b      	ldr	r3, [r3, #24]
 8017b0c:	693a      	ldr	r2, [r7, #16]
 8017b0e:	4313      	orrs	r3, r2
 8017b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	693a      	ldr	r2, [r7, #16]
 8017b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	68fa      	ldr	r2, [r7, #12]
 8017b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	687b      	ldr	r3, [r7, #4]
 8017b24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	697a      	ldr	r2, [r7, #20]
 8017b2a:	621a      	str	r2, [r3, #32]
}
 8017b2c:	bf00      	nop
 8017b2e:	371c      	adds	r7, #28
 8017b30:	46bd      	mov	sp, r7
 8017b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b36:	4770      	bx	lr
 8017b38:	fffeff8f 	.word	0xfffeff8f
 8017b3c:	40010000 	.word	0x40010000
 8017b40:	40010400 	.word	0x40010400
 8017b44:	40014000 	.word	0x40014000
 8017b48:	40014400 	.word	0x40014400
 8017b4c:	40014800 	.word	0x40014800

08017b50 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017b50:	b480      	push	{r7}
 8017b52:	b087      	sub	sp, #28
 8017b54:	af00      	add	r7, sp, #0
 8017b56:	6078      	str	r0, [r7, #4]
 8017b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	6a1b      	ldr	r3, [r3, #32]
 8017b5e:	f023 0210 	bic.w	r2, r3, #16
 8017b62:	687b      	ldr	r3, [r7, #4]
 8017b64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	6a1b      	ldr	r3, [r3, #32]
 8017b6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	685b      	ldr	r3, [r3, #4]
 8017b70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	699b      	ldr	r3, [r3, #24]
 8017b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017b78:	68fa      	ldr	r2, [r7, #12]
 8017b7a:	4b34      	ldr	r3, [pc, #208]	; (8017c4c <TIM_OC2_SetConfig+0xfc>)
 8017b7c:	4013      	ands	r3, r2
 8017b7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8017b80:	68fb      	ldr	r3, [r7, #12]
 8017b82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017b86:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017b88:	683b      	ldr	r3, [r7, #0]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	021b      	lsls	r3, r3, #8
 8017b8e:	68fa      	ldr	r2, [r7, #12]
 8017b90:	4313      	orrs	r3, r2
 8017b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	f023 0320 	bic.w	r3, r3, #32
 8017b9a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	689b      	ldr	r3, [r3, #8]
 8017ba0:	011b      	lsls	r3, r3, #4
 8017ba2:	697a      	ldr	r2, [r7, #20]
 8017ba4:	4313      	orrs	r3, r2
 8017ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	4a29      	ldr	r2, [pc, #164]	; (8017c50 <TIM_OC2_SetConfig+0x100>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d003      	beq.n	8017bb8 <TIM_OC2_SetConfig+0x68>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	4a28      	ldr	r2, [pc, #160]	; (8017c54 <TIM_OC2_SetConfig+0x104>)
 8017bb4:	4293      	cmp	r3, r2
 8017bb6:	d10d      	bne.n	8017bd4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017bb8:	697b      	ldr	r3, [r7, #20]
 8017bba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017bbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017bc0:	683b      	ldr	r3, [r7, #0]
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	011b      	lsls	r3, r3, #4
 8017bc6:	697a      	ldr	r2, [r7, #20]
 8017bc8:	4313      	orrs	r3, r2
 8017bca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8017bcc:	697b      	ldr	r3, [r7, #20]
 8017bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017bd2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	4a1e      	ldr	r2, [pc, #120]	; (8017c50 <TIM_OC2_SetConfig+0x100>)
 8017bd8:	4293      	cmp	r3, r2
 8017bda:	d00f      	beq.n	8017bfc <TIM_OC2_SetConfig+0xac>
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	4a1d      	ldr	r2, [pc, #116]	; (8017c54 <TIM_OC2_SetConfig+0x104>)
 8017be0:	4293      	cmp	r3, r2
 8017be2:	d00b      	beq.n	8017bfc <TIM_OC2_SetConfig+0xac>
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	4a1c      	ldr	r2, [pc, #112]	; (8017c58 <TIM_OC2_SetConfig+0x108>)
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d007      	beq.n	8017bfc <TIM_OC2_SetConfig+0xac>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	4a1b      	ldr	r2, [pc, #108]	; (8017c5c <TIM_OC2_SetConfig+0x10c>)
 8017bf0:	4293      	cmp	r3, r2
 8017bf2:	d003      	beq.n	8017bfc <TIM_OC2_SetConfig+0xac>
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	4a1a      	ldr	r2, [pc, #104]	; (8017c60 <TIM_OC2_SetConfig+0x110>)
 8017bf8:	4293      	cmp	r3, r2
 8017bfa:	d113      	bne.n	8017c24 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017c02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017c04:	693b      	ldr	r3, [r7, #16]
 8017c06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017c0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8017c0c:	683b      	ldr	r3, [r7, #0]
 8017c0e:	695b      	ldr	r3, [r3, #20]
 8017c10:	009b      	lsls	r3, r3, #2
 8017c12:	693a      	ldr	r2, [r7, #16]
 8017c14:	4313      	orrs	r3, r2
 8017c16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017c18:	683b      	ldr	r3, [r7, #0]
 8017c1a:	699b      	ldr	r3, [r3, #24]
 8017c1c:	009b      	lsls	r3, r3, #2
 8017c1e:	693a      	ldr	r2, [r7, #16]
 8017c20:	4313      	orrs	r3, r2
 8017c22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	693a      	ldr	r2, [r7, #16]
 8017c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	68fa      	ldr	r2, [r7, #12]
 8017c2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017c30:	683b      	ldr	r3, [r7, #0]
 8017c32:	685a      	ldr	r2, [r3, #4]
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	697a      	ldr	r2, [r7, #20]
 8017c3c:	621a      	str	r2, [r3, #32]
}
 8017c3e:	bf00      	nop
 8017c40:	371c      	adds	r7, #28
 8017c42:	46bd      	mov	sp, r7
 8017c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c48:	4770      	bx	lr
 8017c4a:	bf00      	nop
 8017c4c:	feff8fff 	.word	0xfeff8fff
 8017c50:	40010000 	.word	0x40010000
 8017c54:	40010400 	.word	0x40010400
 8017c58:	40014000 	.word	0x40014000
 8017c5c:	40014400 	.word	0x40014400
 8017c60:	40014800 	.word	0x40014800

08017c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017c64:	b480      	push	{r7}
 8017c66:	b087      	sub	sp, #28
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
 8017c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	6a1b      	ldr	r3, [r3, #32]
 8017c72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	6a1b      	ldr	r3, [r3, #32]
 8017c7e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	685b      	ldr	r3, [r3, #4]
 8017c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	69db      	ldr	r3, [r3, #28]
 8017c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017c94:	68fb      	ldr	r3, [r7, #12]
 8017c96:	f023 0303 	bic.w	r3, r3, #3
 8017c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017c9c:	683b      	ldr	r3, [r7, #0]
 8017c9e:	681b      	ldr	r3, [r3, #0]
 8017ca0:	68fa      	ldr	r2, [r7, #12]
 8017ca2:	4313      	orrs	r3, r2
 8017ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017ca6:	697b      	ldr	r3, [r7, #20]
 8017ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8017cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8017cae:	683b      	ldr	r3, [r7, #0]
 8017cb0:	689b      	ldr	r3, [r3, #8]
 8017cb2:	021b      	lsls	r3, r3, #8
 8017cb4:	697a      	ldr	r2, [r7, #20]
 8017cb6:	4313      	orrs	r3, r2
 8017cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	4a27      	ldr	r2, [pc, #156]	; (8017d5c <TIM_OC3_SetConfig+0xf8>)
 8017cbe:	4293      	cmp	r3, r2
 8017cc0:	d003      	beq.n	8017cca <TIM_OC3_SetConfig+0x66>
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	4a26      	ldr	r2, [pc, #152]	; (8017d60 <TIM_OC3_SetConfig+0xfc>)
 8017cc6:	4293      	cmp	r3, r2
 8017cc8:	d10d      	bne.n	8017ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8017cca:	697b      	ldr	r3, [r7, #20]
 8017ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017cd2:	683b      	ldr	r3, [r7, #0]
 8017cd4:	68db      	ldr	r3, [r3, #12]
 8017cd6:	021b      	lsls	r3, r3, #8
 8017cd8:	697a      	ldr	r2, [r7, #20]
 8017cda:	4313      	orrs	r3, r2
 8017cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8017cde:	697b      	ldr	r3, [r7, #20]
 8017ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	4a1c      	ldr	r2, [pc, #112]	; (8017d5c <TIM_OC3_SetConfig+0xf8>)
 8017cea:	4293      	cmp	r3, r2
 8017cec:	d00f      	beq.n	8017d0e <TIM_OC3_SetConfig+0xaa>
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	4a1b      	ldr	r2, [pc, #108]	; (8017d60 <TIM_OC3_SetConfig+0xfc>)
 8017cf2:	4293      	cmp	r3, r2
 8017cf4:	d00b      	beq.n	8017d0e <TIM_OC3_SetConfig+0xaa>
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	4a1a      	ldr	r2, [pc, #104]	; (8017d64 <TIM_OC3_SetConfig+0x100>)
 8017cfa:	4293      	cmp	r3, r2
 8017cfc:	d007      	beq.n	8017d0e <TIM_OC3_SetConfig+0xaa>
 8017cfe:	687b      	ldr	r3, [r7, #4]
 8017d00:	4a19      	ldr	r2, [pc, #100]	; (8017d68 <TIM_OC3_SetConfig+0x104>)
 8017d02:	4293      	cmp	r3, r2
 8017d04:	d003      	beq.n	8017d0e <TIM_OC3_SetConfig+0xaa>
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	4a18      	ldr	r2, [pc, #96]	; (8017d6c <TIM_OC3_SetConfig+0x108>)
 8017d0a:	4293      	cmp	r3, r2
 8017d0c:	d113      	bne.n	8017d36 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8017d0e:	693b      	ldr	r3, [r7, #16]
 8017d10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017d16:	693b      	ldr	r3, [r7, #16]
 8017d18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8017d1e:	683b      	ldr	r3, [r7, #0]
 8017d20:	695b      	ldr	r3, [r3, #20]
 8017d22:	011b      	lsls	r3, r3, #4
 8017d24:	693a      	ldr	r2, [r7, #16]
 8017d26:	4313      	orrs	r3, r2
 8017d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8017d2a:	683b      	ldr	r3, [r7, #0]
 8017d2c:	699b      	ldr	r3, [r3, #24]
 8017d2e:	011b      	lsls	r3, r3, #4
 8017d30:	693a      	ldr	r2, [r7, #16]
 8017d32:	4313      	orrs	r3, r2
 8017d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	693a      	ldr	r2, [r7, #16]
 8017d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017d3c:	687b      	ldr	r3, [r7, #4]
 8017d3e:	68fa      	ldr	r2, [r7, #12]
 8017d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017d42:	683b      	ldr	r3, [r7, #0]
 8017d44:	685a      	ldr	r2, [r3, #4]
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	697a      	ldr	r2, [r7, #20]
 8017d4e:	621a      	str	r2, [r3, #32]
}
 8017d50:	bf00      	nop
 8017d52:	371c      	adds	r7, #28
 8017d54:	46bd      	mov	sp, r7
 8017d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d5a:	4770      	bx	lr
 8017d5c:	40010000 	.word	0x40010000
 8017d60:	40010400 	.word	0x40010400
 8017d64:	40014000 	.word	0x40014000
 8017d68:	40014400 	.word	0x40014400
 8017d6c:	40014800 	.word	0x40014800

08017d70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017d70:	b480      	push	{r7}
 8017d72:	b087      	sub	sp, #28
 8017d74:	af00      	add	r7, sp, #0
 8017d76:	6078      	str	r0, [r7, #4]
 8017d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6a1b      	ldr	r3, [r3, #32]
 8017d7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	6a1b      	ldr	r3, [r3, #32]
 8017d8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	685b      	ldr	r3, [r3, #4]
 8017d90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	69db      	ldr	r3, [r3, #28]
 8017d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017d98:	68fb      	ldr	r3, [r7, #12]
 8017d9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017d9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017da6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017da8:	683b      	ldr	r3, [r7, #0]
 8017daa:	681b      	ldr	r3, [r3, #0]
 8017dac:	021b      	lsls	r3, r3, #8
 8017dae:	68fa      	ldr	r2, [r7, #12]
 8017db0:	4313      	orrs	r3, r2
 8017db2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017db4:	693b      	ldr	r3, [r7, #16]
 8017db6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8017dba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8017dbc:	683b      	ldr	r3, [r7, #0]
 8017dbe:	689b      	ldr	r3, [r3, #8]
 8017dc0:	031b      	lsls	r3, r3, #12
 8017dc2:	693a      	ldr	r2, [r7, #16]
 8017dc4:	4313      	orrs	r3, r2
 8017dc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	4a18      	ldr	r2, [pc, #96]	; (8017e2c <TIM_OC4_SetConfig+0xbc>)
 8017dcc:	4293      	cmp	r3, r2
 8017dce:	d00f      	beq.n	8017df0 <TIM_OC4_SetConfig+0x80>
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	4a17      	ldr	r2, [pc, #92]	; (8017e30 <TIM_OC4_SetConfig+0xc0>)
 8017dd4:	4293      	cmp	r3, r2
 8017dd6:	d00b      	beq.n	8017df0 <TIM_OC4_SetConfig+0x80>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	4a16      	ldr	r2, [pc, #88]	; (8017e34 <TIM_OC4_SetConfig+0xc4>)
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d007      	beq.n	8017df0 <TIM_OC4_SetConfig+0x80>
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	4a15      	ldr	r2, [pc, #84]	; (8017e38 <TIM_OC4_SetConfig+0xc8>)
 8017de4:	4293      	cmp	r3, r2
 8017de6:	d003      	beq.n	8017df0 <TIM_OC4_SetConfig+0x80>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	4a14      	ldr	r2, [pc, #80]	; (8017e3c <TIM_OC4_SetConfig+0xcc>)
 8017dec:	4293      	cmp	r3, r2
 8017dee:	d109      	bne.n	8017e04 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017df0:	697b      	ldr	r3, [r7, #20]
 8017df2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017df6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	695b      	ldr	r3, [r3, #20]
 8017dfc:	019b      	lsls	r3, r3, #6
 8017dfe:	697a      	ldr	r2, [r7, #20]
 8017e00:	4313      	orrs	r3, r2
 8017e02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	697a      	ldr	r2, [r7, #20]
 8017e08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	68fa      	ldr	r2, [r7, #12]
 8017e0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017e10:	683b      	ldr	r3, [r7, #0]
 8017e12:	685a      	ldr	r2, [r3, #4]
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	693a      	ldr	r2, [r7, #16]
 8017e1c:	621a      	str	r2, [r3, #32]
}
 8017e1e:	bf00      	nop
 8017e20:	371c      	adds	r7, #28
 8017e22:	46bd      	mov	sp, r7
 8017e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e28:	4770      	bx	lr
 8017e2a:	bf00      	nop
 8017e2c:	40010000 	.word	0x40010000
 8017e30:	40010400 	.word	0x40010400
 8017e34:	40014000 	.word	0x40014000
 8017e38:	40014400 	.word	0x40014400
 8017e3c:	40014800 	.word	0x40014800

08017e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017e40:	b480      	push	{r7}
 8017e42:	b087      	sub	sp, #28
 8017e44:	af00      	add	r7, sp, #0
 8017e46:	6078      	str	r0, [r7, #4]
 8017e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	6a1b      	ldr	r3, [r3, #32]
 8017e4e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6a1b      	ldr	r3, [r3, #32]
 8017e5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	685b      	ldr	r3, [r3, #4]
 8017e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017e70:	683b      	ldr	r3, [r7, #0]
 8017e72:	681b      	ldr	r3, [r3, #0]
 8017e74:	68fa      	ldr	r2, [r7, #12]
 8017e76:	4313      	orrs	r3, r2
 8017e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017e82:	683b      	ldr	r3, [r7, #0]
 8017e84:	689b      	ldr	r3, [r3, #8]
 8017e86:	041b      	lsls	r3, r3, #16
 8017e88:	693a      	ldr	r2, [r7, #16]
 8017e8a:	4313      	orrs	r3, r2
 8017e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017e8e:	687b      	ldr	r3, [r7, #4]
 8017e90:	4a17      	ldr	r2, [pc, #92]	; (8017ef0 <TIM_OC5_SetConfig+0xb0>)
 8017e92:	4293      	cmp	r3, r2
 8017e94:	d00f      	beq.n	8017eb6 <TIM_OC5_SetConfig+0x76>
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	4a16      	ldr	r2, [pc, #88]	; (8017ef4 <TIM_OC5_SetConfig+0xb4>)
 8017e9a:	4293      	cmp	r3, r2
 8017e9c:	d00b      	beq.n	8017eb6 <TIM_OC5_SetConfig+0x76>
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	4a15      	ldr	r2, [pc, #84]	; (8017ef8 <TIM_OC5_SetConfig+0xb8>)
 8017ea2:	4293      	cmp	r3, r2
 8017ea4:	d007      	beq.n	8017eb6 <TIM_OC5_SetConfig+0x76>
 8017ea6:	687b      	ldr	r3, [r7, #4]
 8017ea8:	4a14      	ldr	r2, [pc, #80]	; (8017efc <TIM_OC5_SetConfig+0xbc>)
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d003      	beq.n	8017eb6 <TIM_OC5_SetConfig+0x76>
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	4a13      	ldr	r2, [pc, #76]	; (8017f00 <TIM_OC5_SetConfig+0xc0>)
 8017eb2:	4293      	cmp	r3, r2
 8017eb4:	d109      	bne.n	8017eca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017eb6:	697b      	ldr	r3, [r7, #20]
 8017eb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017ebe:	683b      	ldr	r3, [r7, #0]
 8017ec0:	695b      	ldr	r3, [r3, #20]
 8017ec2:	021b      	lsls	r3, r3, #8
 8017ec4:	697a      	ldr	r2, [r7, #20]
 8017ec6:	4313      	orrs	r3, r2
 8017ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	697a      	ldr	r2, [r7, #20]
 8017ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	68fa      	ldr	r2, [r7, #12]
 8017ed4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017ed6:	683b      	ldr	r3, [r7, #0]
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	687b      	ldr	r3, [r7, #4]
 8017edc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	693a      	ldr	r2, [r7, #16]
 8017ee2:	621a      	str	r2, [r3, #32]
}
 8017ee4:	bf00      	nop
 8017ee6:	371c      	adds	r7, #28
 8017ee8:	46bd      	mov	sp, r7
 8017eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eee:	4770      	bx	lr
 8017ef0:	40010000 	.word	0x40010000
 8017ef4:	40010400 	.word	0x40010400
 8017ef8:	40014000 	.word	0x40014000
 8017efc:	40014400 	.word	0x40014400
 8017f00:	40014800 	.word	0x40014800

08017f04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017f04:	b480      	push	{r7}
 8017f06:	b087      	sub	sp, #28
 8017f08:	af00      	add	r7, sp, #0
 8017f0a:	6078      	str	r0, [r7, #4]
 8017f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017f0e:	687b      	ldr	r3, [r7, #4]
 8017f10:	6a1b      	ldr	r3, [r3, #32]
 8017f12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	6a1b      	ldr	r3, [r3, #32]
 8017f1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	685b      	ldr	r3, [r3, #4]
 8017f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	021b      	lsls	r3, r3, #8
 8017f3a:	68fa      	ldr	r2, [r7, #12]
 8017f3c:	4313      	orrs	r3, r2
 8017f3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017f40:	693b      	ldr	r3, [r7, #16]
 8017f42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017f46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	689b      	ldr	r3, [r3, #8]
 8017f4c:	051b      	lsls	r3, r3, #20
 8017f4e:	693a      	ldr	r2, [r7, #16]
 8017f50:	4313      	orrs	r3, r2
 8017f52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	4a18      	ldr	r2, [pc, #96]	; (8017fb8 <TIM_OC6_SetConfig+0xb4>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d00f      	beq.n	8017f7c <TIM_OC6_SetConfig+0x78>
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	4a17      	ldr	r2, [pc, #92]	; (8017fbc <TIM_OC6_SetConfig+0xb8>)
 8017f60:	4293      	cmp	r3, r2
 8017f62:	d00b      	beq.n	8017f7c <TIM_OC6_SetConfig+0x78>
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	4a16      	ldr	r2, [pc, #88]	; (8017fc0 <TIM_OC6_SetConfig+0xbc>)
 8017f68:	4293      	cmp	r3, r2
 8017f6a:	d007      	beq.n	8017f7c <TIM_OC6_SetConfig+0x78>
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	4a15      	ldr	r2, [pc, #84]	; (8017fc4 <TIM_OC6_SetConfig+0xc0>)
 8017f70:	4293      	cmp	r3, r2
 8017f72:	d003      	beq.n	8017f7c <TIM_OC6_SetConfig+0x78>
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	4a14      	ldr	r2, [pc, #80]	; (8017fc8 <TIM_OC6_SetConfig+0xc4>)
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	d109      	bne.n	8017f90 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017f7c:	697b      	ldr	r3, [r7, #20]
 8017f7e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017f82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017f84:	683b      	ldr	r3, [r7, #0]
 8017f86:	695b      	ldr	r3, [r3, #20]
 8017f88:	029b      	lsls	r3, r3, #10
 8017f8a:	697a      	ldr	r2, [r7, #20]
 8017f8c:	4313      	orrs	r3, r2
 8017f8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	697a      	ldr	r2, [r7, #20]
 8017f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	68fa      	ldr	r2, [r7, #12]
 8017f9a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	685a      	ldr	r2, [r3, #4]
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	693a      	ldr	r2, [r7, #16]
 8017fa8:	621a      	str	r2, [r3, #32]
}
 8017faa:	bf00      	nop
 8017fac:	371c      	adds	r7, #28
 8017fae:	46bd      	mov	sp, r7
 8017fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fb4:	4770      	bx	lr
 8017fb6:	bf00      	nop
 8017fb8:	40010000 	.word	0x40010000
 8017fbc:	40010400 	.word	0x40010400
 8017fc0:	40014000 	.word	0x40014000
 8017fc4:	40014400 	.word	0x40014400
 8017fc8:	40014800 	.word	0x40014800

08017fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017fcc:	b480      	push	{r7}
 8017fce:	b087      	sub	sp, #28
 8017fd0:	af00      	add	r7, sp, #0
 8017fd2:	60f8      	str	r0, [r7, #12]
 8017fd4:	60b9      	str	r1, [r7, #8]
 8017fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017fd8:	68bb      	ldr	r3, [r7, #8]
 8017fda:	f003 031f 	and.w	r3, r3, #31
 8017fde:	2201      	movs	r2, #1
 8017fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8017fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017fe6:	68fb      	ldr	r3, [r7, #12]
 8017fe8:	6a1a      	ldr	r2, [r3, #32]
 8017fea:	697b      	ldr	r3, [r7, #20]
 8017fec:	43db      	mvns	r3, r3
 8017fee:	401a      	ands	r2, r3
 8017ff0:	68fb      	ldr	r3, [r7, #12]
 8017ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017ff4:	68fb      	ldr	r3, [r7, #12]
 8017ff6:	6a1a      	ldr	r2, [r3, #32]
 8017ff8:	68bb      	ldr	r3, [r7, #8]
 8017ffa:	f003 031f 	and.w	r3, r3, #31
 8017ffe:	6879      	ldr	r1, [r7, #4]
 8018000:	fa01 f303 	lsl.w	r3, r1, r3
 8018004:	431a      	orrs	r2, r3
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	621a      	str	r2, [r3, #32]
}
 801800a:	bf00      	nop
 801800c:	371c      	adds	r7, #28
 801800e:	46bd      	mov	sp, r7
 8018010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018014:	4770      	bx	lr
	...

08018018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8018018:	b480      	push	{r7}
 801801a:	b085      	sub	sp, #20
 801801c:	af00      	add	r7, sp, #0
 801801e:	6078      	str	r0, [r7, #4]
 8018020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8018028:	2b01      	cmp	r3, #1
 801802a:	d101      	bne.n	8018030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801802c:	2302      	movs	r3, #2
 801802e:	e068      	b.n	8018102 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8018030:	687b      	ldr	r3, [r7, #4]
 8018032:	2201      	movs	r2, #1
 8018034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	2202      	movs	r2, #2
 801803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	685b      	ldr	r3, [r3, #4]
 8018046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	689b      	ldr	r3, [r3, #8]
 801804e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	681b      	ldr	r3, [r3, #0]
 8018054:	4a2e      	ldr	r2, [pc, #184]	; (8018110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8018056:	4293      	cmp	r3, r2
 8018058:	d004      	beq.n	8018064 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681b      	ldr	r3, [r3, #0]
 801805e:	4a2d      	ldr	r2, [pc, #180]	; (8018114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8018060:	4293      	cmp	r3, r2
 8018062:	d108      	bne.n	8018076 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801806a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	685b      	ldr	r3, [r3, #4]
 8018070:	68fa      	ldr	r2, [r7, #12]
 8018072:	4313      	orrs	r3, r2
 8018074:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8018076:	68fb      	ldr	r3, [r7, #12]
 8018078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801807c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	68fa      	ldr	r2, [r7, #12]
 8018084:	4313      	orrs	r3, r2
 8018086:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	68fa      	ldr	r2, [r7, #12]
 801808e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	681b      	ldr	r3, [r3, #0]
 8018094:	4a1e      	ldr	r2, [pc, #120]	; (8018110 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8018096:	4293      	cmp	r3, r2
 8018098:	d01d      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80180a2:	d018      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	681b      	ldr	r3, [r3, #0]
 80180a8:	4a1b      	ldr	r2, [pc, #108]	; (8018118 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80180aa:	4293      	cmp	r3, r2
 80180ac:	d013      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	4a1a      	ldr	r2, [pc, #104]	; (801811c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80180b4:	4293      	cmp	r3, r2
 80180b6:	d00e      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	681b      	ldr	r3, [r3, #0]
 80180bc:	4a18      	ldr	r2, [pc, #96]	; (8018120 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80180be:	4293      	cmp	r3, r2
 80180c0:	d009      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	681b      	ldr	r3, [r3, #0]
 80180c6:	4a13      	ldr	r2, [pc, #76]	; (8018114 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80180c8:	4293      	cmp	r3, r2
 80180ca:	d004      	beq.n	80180d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	4a14      	ldr	r2, [pc, #80]	; (8018124 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80180d2:	4293      	cmp	r3, r2
 80180d4:	d10c      	bne.n	80180f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80180d6:	68bb      	ldr	r3, [r7, #8]
 80180d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80180dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80180de:	683b      	ldr	r3, [r7, #0]
 80180e0:	689b      	ldr	r3, [r3, #8]
 80180e2:	68ba      	ldr	r2, [r7, #8]
 80180e4:	4313      	orrs	r3, r2
 80180e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	68ba      	ldr	r2, [r7, #8]
 80180ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	2201      	movs	r2, #1
 80180f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	2200      	movs	r2, #0
 80180fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8018100:	2300      	movs	r3, #0
}
 8018102:	4618      	mov	r0, r3
 8018104:	3714      	adds	r7, #20
 8018106:	46bd      	mov	sp, r7
 8018108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801810c:	4770      	bx	lr
 801810e:	bf00      	nop
 8018110:	40010000 	.word	0x40010000
 8018114:	40010400 	.word	0x40010400
 8018118:	40000400 	.word	0x40000400
 801811c:	40000800 	.word	0x40000800
 8018120:	40000c00 	.word	0x40000c00
 8018124:	40001800 	.word	0x40001800

08018128 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8018128:	b480      	push	{r7}
 801812a:	b085      	sub	sp, #20
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8018132:	2300      	movs	r3, #0
 8018134:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801813c:	2b01      	cmp	r3, #1
 801813e:	d101      	bne.n	8018144 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8018140:	2302      	movs	r3, #2
 8018142:	e065      	b.n	8018210 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	2201      	movs	r2, #1
 8018148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8018152:	683b      	ldr	r3, [r7, #0]
 8018154:	68db      	ldr	r3, [r3, #12]
 8018156:	4313      	orrs	r3, r2
 8018158:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8018160:	683b      	ldr	r3, [r7, #0]
 8018162:	689b      	ldr	r3, [r3, #8]
 8018164:	4313      	orrs	r3, r2
 8018166:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 801816e:	683b      	ldr	r3, [r7, #0]
 8018170:	685b      	ldr	r3, [r3, #4]
 8018172:	4313      	orrs	r3, r2
 8018174:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	4313      	orrs	r3, r2
 8018182:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8018184:	68fb      	ldr	r3, [r7, #12]
 8018186:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801818a:	683b      	ldr	r3, [r7, #0]
 801818c:	691b      	ldr	r3, [r3, #16]
 801818e:	4313      	orrs	r3, r2
 8018190:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8018192:	68fb      	ldr	r3, [r7, #12]
 8018194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8018198:	683b      	ldr	r3, [r7, #0]
 801819a:	695b      	ldr	r3, [r3, #20]
 801819c:	4313      	orrs	r3, r2
 801819e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80181a6:	683b      	ldr	r3, [r7, #0]
 80181a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181aa:	4313      	orrs	r3, r2
 80181ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80181ae:	68fb      	ldr	r3, [r7, #12]
 80181b0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80181b4:	683b      	ldr	r3, [r7, #0]
 80181b6:	699b      	ldr	r3, [r3, #24]
 80181b8:	041b      	lsls	r3, r3, #16
 80181ba:	4313      	orrs	r3, r2
 80181bc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	681b      	ldr	r3, [r3, #0]
 80181c2:	4a16      	ldr	r2, [pc, #88]	; (801821c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80181c4:	4293      	cmp	r3, r2
 80181c6:	d004      	beq.n	80181d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	681b      	ldr	r3, [r3, #0]
 80181cc:	4a14      	ldr	r2, [pc, #80]	; (8018220 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80181ce:	4293      	cmp	r3, r2
 80181d0:	d115      	bne.n	80181fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80181d2:	68fb      	ldr	r3, [r7, #12]
 80181d4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80181d8:	683b      	ldr	r3, [r7, #0]
 80181da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80181dc:	051b      	lsls	r3, r3, #20
 80181de:	4313      	orrs	r3, r2
 80181e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80181e2:	68fb      	ldr	r3, [r7, #12]
 80181e4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80181e8:	683b      	ldr	r3, [r7, #0]
 80181ea:	69db      	ldr	r3, [r3, #28]
 80181ec:	4313      	orrs	r3, r2
 80181ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80181f6:	683b      	ldr	r3, [r7, #0]
 80181f8:	6a1b      	ldr	r3, [r3, #32]
 80181fa:	4313      	orrs	r3, r2
 80181fc:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80181fe:	687b      	ldr	r3, [r7, #4]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	68fa      	ldr	r2, [r7, #12]
 8018204:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	2200      	movs	r2, #0
 801820a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801820e:	2300      	movs	r3, #0
}
 8018210:	4618      	mov	r0, r3
 8018212:	3714      	adds	r7, #20
 8018214:	46bd      	mov	sp, r7
 8018216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801821a:	4770      	bx	lr
 801821c:	40010000 	.word	0x40010000
 8018220:	40010400 	.word	0x40010400

08018224 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018224:	b480      	push	{r7}
 8018226:	b083      	sub	sp, #12
 8018228:	af00      	add	r7, sp, #0
 801822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 801822c:	bf00      	nop
 801822e:	370c      	adds	r7, #12
 8018230:	46bd      	mov	sp, r7
 8018232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018236:	4770      	bx	lr

08018238 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018238:	b480      	push	{r7}
 801823a:	b083      	sub	sp, #12
 801823c:	af00      	add	r7, sp, #0
 801823e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018240:	bf00      	nop
 8018242:	370c      	adds	r7, #12
 8018244:	46bd      	mov	sp, r7
 8018246:	f85d 7b04 	ldr.w	r7, [sp], #4
 801824a:	4770      	bx	lr

0801824c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 801824c:	b480      	push	{r7}
 801824e:	b083      	sub	sp, #12
 8018250:	af00      	add	r7, sp, #0
 8018252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018254:	bf00      	nop
 8018256:	370c      	adds	r7, #12
 8018258:	46bd      	mov	sp, r7
 801825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801825e:	4770      	bx	lr

08018260 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018260:	b580      	push	{r7, lr}
 8018262:	b082      	sub	sp, #8
 8018264:	af00      	add	r7, sp, #0
 8018266:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	2b00      	cmp	r3, #0
 801826c:	d101      	bne.n	8018272 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801826e:	2301      	movs	r3, #1
 8018270:	e042      	b.n	80182f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8018278:	2b00      	cmp	r3, #0
 801827a:	d106      	bne.n	801828a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2200      	movs	r2, #0
 8018280:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018284:	6878      	ldr	r0, [r7, #4]
 8018286:	f7fa fba7 	bl	80129d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	2224      	movs	r2, #36	; 0x24
 801828e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	681b      	ldr	r3, [r3, #0]
 8018296:	681a      	ldr	r2, [r3, #0]
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	f022 0201 	bic.w	r2, r2, #1
 80182a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80182a2:	6878      	ldr	r0, [r7, #4]
 80182a4:	f000 f9c0 	bl	8018628 <UART_SetConfig>
 80182a8:	4603      	mov	r3, r0
 80182aa:	2b01      	cmp	r3, #1
 80182ac:	d101      	bne.n	80182b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80182ae:	2301      	movs	r3, #1
 80182b0:	e022      	b.n	80182f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d002      	beq.n	80182c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80182ba:	6878      	ldr	r0, [r7, #4]
 80182bc:	f002 fb32 	bl	801a924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	685a      	ldr	r2, [r3, #4]
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80182ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	681b      	ldr	r3, [r3, #0]
 80182d4:	689a      	ldr	r2, [r3, #8]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80182de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	681a      	ldr	r2, [r3, #0]
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	681b      	ldr	r3, [r3, #0]
 80182ea:	f042 0201 	orr.w	r2, r2, #1
 80182ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	f002 fbb9 	bl	801aa68 <UART_CheckIdleState>
 80182f6:	4603      	mov	r3, r0
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3708      	adds	r7, #8
 80182fc:	46bd      	mov	sp, r7
 80182fe:	bd80      	pop	{r7, pc}

08018300 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018300:	b580      	push	{r7, lr}
 8018302:	b088      	sub	sp, #32
 8018304:	af00      	add	r7, sp, #0
 8018306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	69db      	ldr	r3, [r3, #28]
 801830e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018310:	687b      	ldr	r3, [r7, #4]
 8018312:	681b      	ldr	r3, [r3, #0]
 8018314:	681b      	ldr	r3, [r3, #0]
 8018316:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	681b      	ldr	r3, [r3, #0]
 801831c:	689b      	ldr	r3, [r3, #8]
 801831e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018320:	69fa      	ldr	r2, [r7, #28]
 8018322:	f640 030f 	movw	r3, #2063	; 0x80f
 8018326:	4013      	ands	r3, r2
 8018328:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 801832a:	693b      	ldr	r3, [r7, #16]
 801832c:	2b00      	cmp	r3, #0
 801832e:	d118      	bne.n	8018362 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018330:	69fb      	ldr	r3, [r7, #28]
 8018332:	f003 0320 	and.w	r3, r3, #32
 8018336:	2b00      	cmp	r3, #0
 8018338:	d013      	beq.n	8018362 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801833a:	69bb      	ldr	r3, [r7, #24]
 801833c:	f003 0320 	and.w	r3, r3, #32
 8018340:	2b00      	cmp	r3, #0
 8018342:	d104      	bne.n	801834e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018344:	697b      	ldr	r3, [r7, #20]
 8018346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801834a:	2b00      	cmp	r3, #0
 801834c:	d009      	beq.n	8018362 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018352:	2b00      	cmp	r3, #0
 8018354:	f000 8145 	beq.w	80185e2 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801835c:	6878      	ldr	r0, [r7, #4]
 801835e:	4798      	blx	r3
      }
      return;
 8018360:	e13f      	b.n	80185e2 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018362:	693b      	ldr	r3, [r7, #16]
 8018364:	2b00      	cmp	r3, #0
 8018366:	f000 80e8 	beq.w	801853a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801836a:	697a      	ldr	r2, [r7, #20]
 801836c:	4ba1      	ldr	r3, [pc, #644]	; (80185f4 <HAL_UART_IRQHandler+0x2f4>)
 801836e:	4013      	ands	r3, r2
 8018370:	2b00      	cmp	r3, #0
 8018372:	d105      	bne.n	8018380 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8018374:	69ba      	ldr	r2, [r7, #24]
 8018376:	4ba0      	ldr	r3, [pc, #640]	; (80185f8 <HAL_UART_IRQHandler+0x2f8>)
 8018378:	4013      	ands	r3, r2
 801837a:	2b00      	cmp	r3, #0
 801837c:	f000 80dd 	beq.w	801853a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018380:	69fb      	ldr	r3, [r7, #28]
 8018382:	f003 0301 	and.w	r3, r3, #1
 8018386:	2b00      	cmp	r3, #0
 8018388:	d010      	beq.n	80183ac <HAL_UART_IRQHandler+0xac>
 801838a:	69bb      	ldr	r3, [r7, #24]
 801838c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018390:	2b00      	cmp	r3, #0
 8018392:	d00b      	beq.n	80183ac <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	681b      	ldr	r3, [r3, #0]
 8018398:	2201      	movs	r2, #1
 801839a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183a2:	f043 0201 	orr.w	r2, r3, #1
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80183ac:	69fb      	ldr	r3, [r7, #28]
 80183ae:	f003 0302 	and.w	r3, r3, #2
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d010      	beq.n	80183d8 <HAL_UART_IRQHandler+0xd8>
 80183b6:	697b      	ldr	r3, [r7, #20]
 80183b8:	f003 0301 	and.w	r3, r3, #1
 80183bc:	2b00      	cmp	r3, #0
 80183be:	d00b      	beq.n	80183d8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	2202      	movs	r2, #2
 80183c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183ce:	f043 0204 	orr.w	r2, r3, #4
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	f003 0304 	and.w	r3, r3, #4
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d010      	beq.n	8018404 <HAL_UART_IRQHandler+0x104>
 80183e2:	697b      	ldr	r3, [r7, #20]
 80183e4:	f003 0301 	and.w	r3, r3, #1
 80183e8:	2b00      	cmp	r3, #0
 80183ea:	d00b      	beq.n	8018404 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	681b      	ldr	r3, [r3, #0]
 80183f0:	2204      	movs	r2, #4
 80183f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80183fa:	f043 0202 	orr.w	r2, r3, #2
 80183fe:	687b      	ldr	r3, [r7, #4]
 8018400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018404:	69fb      	ldr	r3, [r7, #28]
 8018406:	f003 0308 	and.w	r3, r3, #8
 801840a:	2b00      	cmp	r3, #0
 801840c:	d015      	beq.n	801843a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801840e:	69bb      	ldr	r3, [r7, #24]
 8018410:	f003 0320 	and.w	r3, r3, #32
 8018414:	2b00      	cmp	r3, #0
 8018416:	d104      	bne.n	8018422 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018418:	697a      	ldr	r2, [r7, #20]
 801841a:	4b76      	ldr	r3, [pc, #472]	; (80185f4 <HAL_UART_IRQHandler+0x2f4>)
 801841c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801841e:	2b00      	cmp	r3, #0
 8018420:	d00b      	beq.n	801843a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	2208      	movs	r2, #8
 8018428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018430:	f043 0208 	orr.w	r2, r3, #8
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801843a:	69fb      	ldr	r3, [r7, #28]
 801843c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018440:	2b00      	cmp	r3, #0
 8018442:	d011      	beq.n	8018468 <HAL_UART_IRQHandler+0x168>
 8018444:	69bb      	ldr	r3, [r7, #24]
 8018446:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801844a:	2b00      	cmp	r3, #0
 801844c:	d00c      	beq.n	8018468 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801844e:	687b      	ldr	r3, [r7, #4]
 8018450:	681b      	ldr	r3, [r3, #0]
 8018452:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801845e:	f043 0220 	orr.w	r2, r3, #32
 8018462:	687b      	ldr	r3, [r7, #4]
 8018464:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801846e:	2b00      	cmp	r3, #0
 8018470:	f000 80b9 	beq.w	80185e6 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018474:	69fb      	ldr	r3, [r7, #28]
 8018476:	f003 0320 	and.w	r3, r3, #32
 801847a:	2b00      	cmp	r3, #0
 801847c:	d011      	beq.n	80184a2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801847e:	69bb      	ldr	r3, [r7, #24]
 8018480:	f003 0320 	and.w	r3, r3, #32
 8018484:	2b00      	cmp	r3, #0
 8018486:	d104      	bne.n	8018492 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018488:	697b      	ldr	r3, [r7, #20]
 801848a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801848e:	2b00      	cmp	r3, #0
 8018490:	d007      	beq.n	80184a2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018496:	2b00      	cmp	r3, #0
 8018498:	d003      	beq.n	80184a2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801849e:	6878      	ldr	r0, [r7, #4]
 80184a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80184a8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	689b      	ldr	r3, [r3, #8]
 80184b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184b4:	2b40      	cmp	r3, #64	; 0x40
 80184b6:	d004      	beq.n	80184c2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80184be:	2b00      	cmp	r3, #0
 80184c0:	d031      	beq.n	8018526 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80184c2:	6878      	ldr	r0, [r7, #4]
 80184c4:	f002 fb98 	bl	801abf8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	689b      	ldr	r3, [r3, #8]
 80184ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80184d2:	2b40      	cmp	r3, #64	; 0x40
 80184d4:	d123      	bne.n	801851e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	689a      	ldr	r2, [r3, #8]
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80184e4:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d013      	beq.n	8018516 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80184f2:	4a42      	ldr	r2, [pc, #264]	; (80185fc <HAL_UART_IRQHandler+0x2fc>)
 80184f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80184fa:	4618      	mov	r0, r3
 80184fc:	f7fa fe14 	bl	8013128 <HAL_DMA_Abort_IT>
 8018500:	4603      	mov	r3, r0
 8018502:	2b00      	cmp	r3, #0
 8018504:	d017      	beq.n	8018536 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801850a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801850c:	687a      	ldr	r2, [r7, #4]
 801850e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018510:	4610      	mov	r0, r2
 8018512:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018514:	e00f      	b.n	8018536 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018516:	6878      	ldr	r0, [r7, #4]
 8018518:	f000 f87c 	bl	8018614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801851c:	e00b      	b.n	8018536 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801851e:	6878      	ldr	r0, [r7, #4]
 8018520:	f000 f878 	bl	8018614 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018524:	e007      	b.n	8018536 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018526:	6878      	ldr	r0, [r7, #4]
 8018528:	f000 f874 	bl	8018614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	2200      	movs	r2, #0
 8018530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8018534:	e057      	b.n	80185e6 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018536:	bf00      	nop
    return;
 8018538:	e055      	b.n	80185e6 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801853a:	69fb      	ldr	r3, [r7, #28]
 801853c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018540:	2b00      	cmp	r3, #0
 8018542:	d00d      	beq.n	8018560 <HAL_UART_IRQHandler+0x260>
 8018544:	697b      	ldr	r3, [r7, #20]
 8018546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801854a:	2b00      	cmp	r3, #0
 801854c:	d008      	beq.n	8018560 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8018556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018558:	6878      	ldr	r0, [r7, #4]
 801855a:	f002 fba1 	bl	801aca0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801855e:	e045      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018560:	69fb      	ldr	r3, [r7, #28]
 8018562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018566:	2b00      	cmp	r3, #0
 8018568:	d012      	beq.n	8018590 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801856a:	69bb      	ldr	r3, [r7, #24]
 801856c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018570:	2b00      	cmp	r3, #0
 8018572:	d104      	bne.n	801857e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018574:	697b      	ldr	r3, [r7, #20]
 8018576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801857a:	2b00      	cmp	r3, #0
 801857c:	d008      	beq.n	8018590 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018582:	2b00      	cmp	r3, #0
 8018584:	d031      	beq.n	80185ea <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801858a:	6878      	ldr	r0, [r7, #4]
 801858c:	4798      	blx	r3
    }
    return;
 801858e:	e02c      	b.n	80185ea <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8018590:	69fb      	ldr	r3, [r7, #28]
 8018592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018596:	2b00      	cmp	r3, #0
 8018598:	d008      	beq.n	80185ac <HAL_UART_IRQHandler+0x2ac>
 801859a:	69bb      	ldr	r3, [r7, #24]
 801859c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d003      	beq.n	80185ac <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80185a4:	6878      	ldr	r0, [r7, #4]
 80185a6:	f002 fb61 	bl	801ac6c <UART_EndTransmit_IT>
    return;
 80185aa:	e01f      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80185ac:	69fb      	ldr	r3, [r7, #28]
 80185ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d008      	beq.n	80185c8 <HAL_UART_IRQHandler+0x2c8>
 80185b6:	69bb      	ldr	r3, [r7, #24]
 80185b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d003      	beq.n	80185c8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80185c0:	6878      	ldr	r0, [r7, #4]
 80185c2:	f002 fb81 	bl	801acc8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80185c6:	e011      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80185c8:	69fb      	ldr	r3, [r7, #28]
 80185ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80185ce:	2b00      	cmp	r3, #0
 80185d0:	d00c      	beq.n	80185ec <HAL_UART_IRQHandler+0x2ec>
 80185d2:	69bb      	ldr	r3, [r7, #24]
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	da09      	bge.n	80185ec <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80185d8:	6878      	ldr	r0, [r7, #4]
 80185da:	f002 fb6b 	bl	801acb4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80185de:	bf00      	nop
 80185e0:	e004      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
      return;
 80185e2:	bf00      	nop
 80185e4:	e002      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
    return;
 80185e6:	bf00      	nop
 80185e8:	e000      	b.n	80185ec <HAL_UART_IRQHandler+0x2ec>
    return;
 80185ea:	bf00      	nop
  }
}
 80185ec:	3720      	adds	r7, #32
 80185ee:	46bd      	mov	sp, r7
 80185f0:	bd80      	pop	{r7, pc}
 80185f2:	bf00      	nop
 80185f4:	10000001 	.word	0x10000001
 80185f8:	04000120 	.word	0x04000120
 80185fc:	0801ac41 	.word	0x0801ac41

08018600 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018600:	b480      	push	{r7}
 8018602:	b083      	sub	sp, #12
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018608:	bf00      	nop
 801860a:	370c      	adds	r7, #12
 801860c:	46bd      	mov	sp, r7
 801860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018612:	4770      	bx	lr

08018614 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018614:	b480      	push	{r7}
 8018616:	b083      	sub	sp, #12
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801861c:	bf00      	nop
 801861e:	370c      	adds	r7, #12
 8018620:	46bd      	mov	sp, r7
 8018622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018626:	4770      	bx	lr

08018628 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018628:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801862c:	b090      	sub	sp, #64	; 0x40
 801862e:	af00      	add	r7, sp, #0
 8018630:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8018632:	2300      	movs	r3, #0
 8018634:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8018636:	2300      	movs	r3, #0
 8018638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 801863c:	2300      	movs	r3, #0
 801863e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	689a      	ldr	r2, [r3, #8]
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	691b      	ldr	r3, [r3, #16]
 8018648:	431a      	orrs	r2, r3
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	695b      	ldr	r3, [r3, #20]
 801864e:	431a      	orrs	r2, r3
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	69db      	ldr	r3, [r3, #28]
 8018654:	4313      	orrs	r3, r2
 8018656:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801865c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801865e:	4313      	orrs	r3, r2
 8018660:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	681a      	ldr	r2, [r3, #0]
 8018668:	4bc1      	ldr	r3, [pc, #772]	; (8018970 <UART_SetConfig+0x348>)
 801866a:	4013      	ands	r3, r2
 801866c:	687a      	ldr	r2, [r7, #4]
 801866e:	6812      	ldr	r2, [r2, #0]
 8018670:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018672:	430b      	orrs	r3, r1
 8018674:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	681b      	ldr	r3, [r3, #0]
 801867a:	685b      	ldr	r3, [r3, #4]
 801867c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	68da      	ldr	r2, [r3, #12]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	430a      	orrs	r2, r1
 801868a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	699b      	ldr	r3, [r3, #24]
 8018690:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	4ab7      	ldr	r2, [pc, #732]	; (8018974 <UART_SetConfig+0x34c>)
 8018698:	4293      	cmp	r3, r2
 801869a:	d004      	beq.n	80186a6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	6a1b      	ldr	r3, [r3, #32]
 80186a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80186a2:	4313      	orrs	r3, r2
 80186a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	689a      	ldr	r2, [r3, #8]
 80186ac:	4bb2      	ldr	r3, [pc, #712]	; (8018978 <UART_SetConfig+0x350>)
 80186ae:	4013      	ands	r3, r2
 80186b0:	687a      	ldr	r2, [r7, #4]
 80186b2:	6812      	ldr	r2, [r2, #0]
 80186b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80186b6:	430b      	orrs	r3, r1
 80186b8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80186c0:	f023 010f 	bic.w	r1, r3, #15
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	430a      	orrs	r2, r1
 80186ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	4aa9      	ldr	r2, [pc, #676]	; (801897c <UART_SetConfig+0x354>)
 80186d6:	4293      	cmp	r3, r2
 80186d8:	d177      	bne.n	80187ca <UART_SetConfig+0x1a2>
 80186da:	4ba9      	ldr	r3, [pc, #676]	; (8018980 <UART_SetConfig+0x358>)
 80186dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80186e2:	2b28      	cmp	r3, #40	; 0x28
 80186e4:	d86c      	bhi.n	80187c0 <UART_SetConfig+0x198>
 80186e6:	a201      	add	r2, pc, #4	; (adr r2, 80186ec <UART_SetConfig+0xc4>)
 80186e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186ec:	08018791 	.word	0x08018791
 80186f0:	080187c1 	.word	0x080187c1
 80186f4:	080187c1 	.word	0x080187c1
 80186f8:	080187c1 	.word	0x080187c1
 80186fc:	080187c1 	.word	0x080187c1
 8018700:	080187c1 	.word	0x080187c1
 8018704:	080187c1 	.word	0x080187c1
 8018708:	080187c1 	.word	0x080187c1
 801870c:	08018799 	.word	0x08018799
 8018710:	080187c1 	.word	0x080187c1
 8018714:	080187c1 	.word	0x080187c1
 8018718:	080187c1 	.word	0x080187c1
 801871c:	080187c1 	.word	0x080187c1
 8018720:	080187c1 	.word	0x080187c1
 8018724:	080187c1 	.word	0x080187c1
 8018728:	080187c1 	.word	0x080187c1
 801872c:	080187a1 	.word	0x080187a1
 8018730:	080187c1 	.word	0x080187c1
 8018734:	080187c1 	.word	0x080187c1
 8018738:	080187c1 	.word	0x080187c1
 801873c:	080187c1 	.word	0x080187c1
 8018740:	080187c1 	.word	0x080187c1
 8018744:	080187c1 	.word	0x080187c1
 8018748:	080187c1 	.word	0x080187c1
 801874c:	080187a9 	.word	0x080187a9
 8018750:	080187c1 	.word	0x080187c1
 8018754:	080187c1 	.word	0x080187c1
 8018758:	080187c1 	.word	0x080187c1
 801875c:	080187c1 	.word	0x080187c1
 8018760:	080187c1 	.word	0x080187c1
 8018764:	080187c1 	.word	0x080187c1
 8018768:	080187c1 	.word	0x080187c1
 801876c:	080187b1 	.word	0x080187b1
 8018770:	080187c1 	.word	0x080187c1
 8018774:	080187c1 	.word	0x080187c1
 8018778:	080187c1 	.word	0x080187c1
 801877c:	080187c1 	.word	0x080187c1
 8018780:	080187c1 	.word	0x080187c1
 8018784:	080187c1 	.word	0x080187c1
 8018788:	080187c1 	.word	0x080187c1
 801878c:	080187b9 	.word	0x080187b9
 8018790:	2301      	movs	r3, #1
 8018792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018796:	e233      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018798:	2304      	movs	r3, #4
 801879a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801879e:	e22f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187a0:	2308      	movs	r3, #8
 80187a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187a6:	e22b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187a8:	2310      	movs	r3, #16
 80187aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187ae:	e227      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187b0:	2320      	movs	r3, #32
 80187b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187b6:	e223      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187b8:	2340      	movs	r3, #64	; 0x40
 80187ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187be:	e21f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187c0:	2380      	movs	r3, #128	; 0x80
 80187c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187c6:	bf00      	nop
 80187c8:	e21a      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80187ca:	687b      	ldr	r3, [r7, #4]
 80187cc:	681b      	ldr	r3, [r3, #0]
 80187ce:	4a6d      	ldr	r2, [pc, #436]	; (8018984 <UART_SetConfig+0x35c>)
 80187d0:	4293      	cmp	r3, r2
 80187d2:	d132      	bne.n	801883a <UART_SetConfig+0x212>
 80187d4:	4b6a      	ldr	r3, [pc, #424]	; (8018980 <UART_SetConfig+0x358>)
 80187d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80187d8:	f003 0307 	and.w	r3, r3, #7
 80187dc:	2b05      	cmp	r3, #5
 80187de:	d827      	bhi.n	8018830 <UART_SetConfig+0x208>
 80187e0:	a201      	add	r2, pc, #4	; (adr r2, 80187e8 <UART_SetConfig+0x1c0>)
 80187e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187e6:	bf00      	nop
 80187e8:	08018801 	.word	0x08018801
 80187ec:	08018809 	.word	0x08018809
 80187f0:	08018811 	.word	0x08018811
 80187f4:	08018819 	.word	0x08018819
 80187f8:	08018821 	.word	0x08018821
 80187fc:	08018829 	.word	0x08018829
 8018800:	2300      	movs	r3, #0
 8018802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018806:	e1fb      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018808:	2304      	movs	r3, #4
 801880a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801880e:	e1f7      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018810:	2308      	movs	r3, #8
 8018812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018816:	e1f3      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018818:	2310      	movs	r3, #16
 801881a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801881e:	e1ef      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018820:	2320      	movs	r3, #32
 8018822:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018826:	e1eb      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018828:	2340      	movs	r3, #64	; 0x40
 801882a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801882e:	e1e7      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018830:	2380      	movs	r3, #128	; 0x80
 8018832:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018836:	bf00      	nop
 8018838:	e1e2      	b.n	8018c00 <UART_SetConfig+0x5d8>
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	4a52      	ldr	r2, [pc, #328]	; (8018988 <UART_SetConfig+0x360>)
 8018840:	4293      	cmp	r3, r2
 8018842:	d132      	bne.n	80188aa <UART_SetConfig+0x282>
 8018844:	4b4e      	ldr	r3, [pc, #312]	; (8018980 <UART_SetConfig+0x358>)
 8018846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018848:	f003 0307 	and.w	r3, r3, #7
 801884c:	2b05      	cmp	r3, #5
 801884e:	d827      	bhi.n	80188a0 <UART_SetConfig+0x278>
 8018850:	a201      	add	r2, pc, #4	; (adr r2, 8018858 <UART_SetConfig+0x230>)
 8018852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018856:	bf00      	nop
 8018858:	08018871 	.word	0x08018871
 801885c:	08018879 	.word	0x08018879
 8018860:	08018881 	.word	0x08018881
 8018864:	08018889 	.word	0x08018889
 8018868:	08018891 	.word	0x08018891
 801886c:	08018899 	.word	0x08018899
 8018870:	2300      	movs	r3, #0
 8018872:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018876:	e1c3      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018878:	2304      	movs	r3, #4
 801887a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801887e:	e1bf      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018880:	2308      	movs	r3, #8
 8018882:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018886:	e1bb      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018888:	2310      	movs	r3, #16
 801888a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801888e:	e1b7      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018890:	2320      	movs	r3, #32
 8018892:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018896:	e1b3      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018898:	2340      	movs	r3, #64	; 0x40
 801889a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801889e:	e1af      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80188a0:	2380      	movs	r3, #128	; 0x80
 80188a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188a6:	bf00      	nop
 80188a8:	e1aa      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80188aa:	687b      	ldr	r3, [r7, #4]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	4a37      	ldr	r2, [pc, #220]	; (801898c <UART_SetConfig+0x364>)
 80188b0:	4293      	cmp	r3, r2
 80188b2:	d132      	bne.n	801891a <UART_SetConfig+0x2f2>
 80188b4:	4b32      	ldr	r3, [pc, #200]	; (8018980 <UART_SetConfig+0x358>)
 80188b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188b8:	f003 0307 	and.w	r3, r3, #7
 80188bc:	2b05      	cmp	r3, #5
 80188be:	d827      	bhi.n	8018910 <UART_SetConfig+0x2e8>
 80188c0:	a201      	add	r2, pc, #4	; (adr r2, 80188c8 <UART_SetConfig+0x2a0>)
 80188c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188c6:	bf00      	nop
 80188c8:	080188e1 	.word	0x080188e1
 80188cc:	080188e9 	.word	0x080188e9
 80188d0:	080188f1 	.word	0x080188f1
 80188d4:	080188f9 	.word	0x080188f9
 80188d8:	08018901 	.word	0x08018901
 80188dc:	08018909 	.word	0x08018909
 80188e0:	2300      	movs	r3, #0
 80188e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188e6:	e18b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80188e8:	2304      	movs	r3, #4
 80188ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188ee:	e187      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80188f0:	2308      	movs	r3, #8
 80188f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188f6:	e183      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80188f8:	2310      	movs	r3, #16
 80188fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80188fe:	e17f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018900:	2320      	movs	r3, #32
 8018902:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018906:	e17b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018908:	2340      	movs	r3, #64	; 0x40
 801890a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801890e:	e177      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018910:	2380      	movs	r3, #128	; 0x80
 8018912:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018916:	bf00      	nop
 8018918:	e172      	b.n	8018c00 <UART_SetConfig+0x5d8>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	4a1c      	ldr	r2, [pc, #112]	; (8018990 <UART_SetConfig+0x368>)
 8018920:	4293      	cmp	r3, r2
 8018922:	d144      	bne.n	80189ae <UART_SetConfig+0x386>
 8018924:	4b16      	ldr	r3, [pc, #88]	; (8018980 <UART_SetConfig+0x358>)
 8018926:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018928:	f003 0307 	and.w	r3, r3, #7
 801892c:	2b05      	cmp	r3, #5
 801892e:	d839      	bhi.n	80189a4 <UART_SetConfig+0x37c>
 8018930:	a201      	add	r2, pc, #4	; (adr r2, 8018938 <UART_SetConfig+0x310>)
 8018932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018936:	bf00      	nop
 8018938:	08018951 	.word	0x08018951
 801893c:	08018959 	.word	0x08018959
 8018940:	08018961 	.word	0x08018961
 8018944:	08018969 	.word	0x08018969
 8018948:	08018995 	.word	0x08018995
 801894c:	0801899d 	.word	0x0801899d
 8018950:	2300      	movs	r3, #0
 8018952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018956:	e153      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018958:	2304      	movs	r3, #4
 801895a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801895e:	e14f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018960:	2308      	movs	r3, #8
 8018962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018966:	e14b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018968:	2310      	movs	r3, #16
 801896a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801896e:	e147      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018970:	cfff69f3 	.word	0xcfff69f3
 8018974:	58000c00 	.word	0x58000c00
 8018978:	11fff4ff 	.word	0x11fff4ff
 801897c:	40011000 	.word	0x40011000
 8018980:	58024400 	.word	0x58024400
 8018984:	40004400 	.word	0x40004400
 8018988:	40004800 	.word	0x40004800
 801898c:	40004c00 	.word	0x40004c00
 8018990:	40005000 	.word	0x40005000
 8018994:	2320      	movs	r3, #32
 8018996:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801899a:	e131      	b.n	8018c00 <UART_SetConfig+0x5d8>
 801899c:	2340      	movs	r3, #64	; 0x40
 801899e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80189a2:	e12d      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80189a4:	2380      	movs	r3, #128	; 0x80
 80189a6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80189aa:	bf00      	nop
 80189ac:	e128      	b.n	8018c00 <UART_SetConfig+0x5d8>
 80189ae:	687b      	ldr	r3, [r7, #4]
 80189b0:	681b      	ldr	r3, [r3, #0]
 80189b2:	4ac3      	ldr	r2, [pc, #780]	; (8018cc0 <UART_SetConfig+0x698>)
 80189b4:	4293      	cmp	r3, r2
 80189b6:	d178      	bne.n	8018aaa <UART_SetConfig+0x482>
 80189b8:	4bc2      	ldr	r3, [pc, #776]	; (8018cc4 <UART_SetConfig+0x69c>)
 80189ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80189c0:	2b28      	cmp	r3, #40	; 0x28
 80189c2:	d86d      	bhi.n	8018aa0 <UART_SetConfig+0x478>
 80189c4:	a201      	add	r2, pc, #4	; (adr r2, 80189cc <UART_SetConfig+0x3a4>)
 80189c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80189ca:	bf00      	nop
 80189cc:	08018a71 	.word	0x08018a71
 80189d0:	08018aa1 	.word	0x08018aa1
 80189d4:	08018aa1 	.word	0x08018aa1
 80189d8:	08018aa1 	.word	0x08018aa1
 80189dc:	08018aa1 	.word	0x08018aa1
 80189e0:	08018aa1 	.word	0x08018aa1
 80189e4:	08018aa1 	.word	0x08018aa1
 80189e8:	08018aa1 	.word	0x08018aa1
 80189ec:	08018a79 	.word	0x08018a79
 80189f0:	08018aa1 	.word	0x08018aa1
 80189f4:	08018aa1 	.word	0x08018aa1
 80189f8:	08018aa1 	.word	0x08018aa1
 80189fc:	08018aa1 	.word	0x08018aa1
 8018a00:	08018aa1 	.word	0x08018aa1
 8018a04:	08018aa1 	.word	0x08018aa1
 8018a08:	08018aa1 	.word	0x08018aa1
 8018a0c:	08018a81 	.word	0x08018a81
 8018a10:	08018aa1 	.word	0x08018aa1
 8018a14:	08018aa1 	.word	0x08018aa1
 8018a18:	08018aa1 	.word	0x08018aa1
 8018a1c:	08018aa1 	.word	0x08018aa1
 8018a20:	08018aa1 	.word	0x08018aa1
 8018a24:	08018aa1 	.word	0x08018aa1
 8018a28:	08018aa1 	.word	0x08018aa1
 8018a2c:	08018a89 	.word	0x08018a89
 8018a30:	08018aa1 	.word	0x08018aa1
 8018a34:	08018aa1 	.word	0x08018aa1
 8018a38:	08018aa1 	.word	0x08018aa1
 8018a3c:	08018aa1 	.word	0x08018aa1
 8018a40:	08018aa1 	.word	0x08018aa1
 8018a44:	08018aa1 	.word	0x08018aa1
 8018a48:	08018aa1 	.word	0x08018aa1
 8018a4c:	08018a91 	.word	0x08018a91
 8018a50:	08018aa1 	.word	0x08018aa1
 8018a54:	08018aa1 	.word	0x08018aa1
 8018a58:	08018aa1 	.word	0x08018aa1
 8018a5c:	08018aa1 	.word	0x08018aa1
 8018a60:	08018aa1 	.word	0x08018aa1
 8018a64:	08018aa1 	.word	0x08018aa1
 8018a68:	08018aa1 	.word	0x08018aa1
 8018a6c:	08018a99 	.word	0x08018a99
 8018a70:	2301      	movs	r3, #1
 8018a72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a76:	e0c3      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018a78:	2304      	movs	r3, #4
 8018a7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a7e:	e0bf      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018a80:	2308      	movs	r3, #8
 8018a82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a86:	e0bb      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018a88:	2310      	movs	r3, #16
 8018a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a8e:	e0b7      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018a90:	2320      	movs	r3, #32
 8018a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a96:	e0b3      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018a98:	2340      	movs	r3, #64	; 0x40
 8018a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018a9e:	e0af      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018aa0:	2380      	movs	r3, #128	; 0x80
 8018aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018aa6:	bf00      	nop
 8018aa8:	e0aa      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	4a86      	ldr	r2, [pc, #536]	; (8018cc8 <UART_SetConfig+0x6a0>)
 8018ab0:	4293      	cmp	r3, r2
 8018ab2:	d132      	bne.n	8018b1a <UART_SetConfig+0x4f2>
 8018ab4:	4b83      	ldr	r3, [pc, #524]	; (8018cc4 <UART_SetConfig+0x69c>)
 8018ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018ab8:	f003 0307 	and.w	r3, r3, #7
 8018abc:	2b05      	cmp	r3, #5
 8018abe:	d827      	bhi.n	8018b10 <UART_SetConfig+0x4e8>
 8018ac0:	a201      	add	r2, pc, #4	; (adr r2, 8018ac8 <UART_SetConfig+0x4a0>)
 8018ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ac6:	bf00      	nop
 8018ac8:	08018ae1 	.word	0x08018ae1
 8018acc:	08018ae9 	.word	0x08018ae9
 8018ad0:	08018af1 	.word	0x08018af1
 8018ad4:	08018af9 	.word	0x08018af9
 8018ad8:	08018b01 	.word	0x08018b01
 8018adc:	08018b09 	.word	0x08018b09
 8018ae0:	2300      	movs	r3, #0
 8018ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018ae6:	e08b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018ae8:	2304      	movs	r3, #4
 8018aea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018aee:	e087      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018af0:	2308      	movs	r3, #8
 8018af2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018af6:	e083      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018af8:	2310      	movs	r3, #16
 8018afa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018afe:	e07f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b00:	2320      	movs	r3, #32
 8018b02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b06:	e07b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b08:	2340      	movs	r3, #64	; 0x40
 8018b0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b0e:	e077      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b10:	2380      	movs	r3, #128	; 0x80
 8018b12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b16:	bf00      	nop
 8018b18:	e072      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b1a:	687b      	ldr	r3, [r7, #4]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	4a6b      	ldr	r2, [pc, #428]	; (8018ccc <UART_SetConfig+0x6a4>)
 8018b20:	4293      	cmp	r3, r2
 8018b22:	d132      	bne.n	8018b8a <UART_SetConfig+0x562>
 8018b24:	4b67      	ldr	r3, [pc, #412]	; (8018cc4 <UART_SetConfig+0x69c>)
 8018b26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018b28:	f003 0307 	and.w	r3, r3, #7
 8018b2c:	2b05      	cmp	r3, #5
 8018b2e:	d827      	bhi.n	8018b80 <UART_SetConfig+0x558>
 8018b30:	a201      	add	r2, pc, #4	; (adr r2, 8018b38 <UART_SetConfig+0x510>)
 8018b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018b36:	bf00      	nop
 8018b38:	08018b51 	.word	0x08018b51
 8018b3c:	08018b59 	.word	0x08018b59
 8018b40:	08018b61 	.word	0x08018b61
 8018b44:	08018b69 	.word	0x08018b69
 8018b48:	08018b71 	.word	0x08018b71
 8018b4c:	08018b79 	.word	0x08018b79
 8018b50:	2300      	movs	r3, #0
 8018b52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b56:	e053      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b58:	2304      	movs	r3, #4
 8018b5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b5e:	e04f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b60:	2308      	movs	r3, #8
 8018b62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b66:	e04b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b68:	2310      	movs	r3, #16
 8018b6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b6e:	e047      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b70:	2320      	movs	r3, #32
 8018b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b76:	e043      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b78:	2340      	movs	r3, #64	; 0x40
 8018b7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b7e:	e03f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b80:	2380      	movs	r3, #128	; 0x80
 8018b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018b86:	bf00      	nop
 8018b88:	e03a      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	4a50      	ldr	r2, [pc, #320]	; (8018cd0 <UART_SetConfig+0x6a8>)
 8018b90:	4293      	cmp	r3, r2
 8018b92:	d132      	bne.n	8018bfa <UART_SetConfig+0x5d2>
 8018b94:	4b4b      	ldr	r3, [pc, #300]	; (8018cc4 <UART_SetConfig+0x69c>)
 8018b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018b98:	f003 0307 	and.w	r3, r3, #7
 8018b9c:	2b05      	cmp	r3, #5
 8018b9e:	d827      	bhi.n	8018bf0 <UART_SetConfig+0x5c8>
 8018ba0:	a201      	add	r2, pc, #4	; (adr r2, 8018ba8 <UART_SetConfig+0x580>)
 8018ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018ba6:	bf00      	nop
 8018ba8:	08018bc1 	.word	0x08018bc1
 8018bac:	08018bc9 	.word	0x08018bc9
 8018bb0:	08018bd1 	.word	0x08018bd1
 8018bb4:	08018bd9 	.word	0x08018bd9
 8018bb8:	08018be1 	.word	0x08018be1
 8018bbc:	08018be9 	.word	0x08018be9
 8018bc0:	2302      	movs	r3, #2
 8018bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bc6:	e01b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018bc8:	2304      	movs	r3, #4
 8018bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bce:	e017      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018bd0:	2308      	movs	r3, #8
 8018bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bd6:	e013      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018bd8:	2310      	movs	r3, #16
 8018bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bde:	e00f      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018be0:	2320      	movs	r3, #32
 8018be2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018be6:	e00b      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018be8:	2340      	movs	r3, #64	; 0x40
 8018bea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bee:	e007      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018bf0:	2380      	movs	r3, #128	; 0x80
 8018bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018bf6:	bf00      	nop
 8018bf8:	e002      	b.n	8018c00 <UART_SetConfig+0x5d8>
 8018bfa:	2380      	movs	r3, #128	; 0x80
 8018bfc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	4a32      	ldr	r2, [pc, #200]	; (8018cd0 <UART_SetConfig+0x6a8>)
 8018c06:	4293      	cmp	r3, r2
 8018c08:	f040 86f7 	bne.w	80199fa <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8018c0c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018c10:	2b08      	cmp	r3, #8
 8018c12:	f000 80c0 	beq.w	8018d96 <UART_SetConfig+0x76e>
 8018c16:	2b08      	cmp	r3, #8
 8018c18:	dc04      	bgt.n	8018c24 <UART_SetConfig+0x5fc>
 8018c1a:	2b02      	cmp	r3, #2
 8018c1c:	d00c      	beq.n	8018c38 <UART_SetConfig+0x610>
 8018c1e:	2b04      	cmp	r3, #4
 8018c20:	d065      	beq.n	8018cee <UART_SetConfig+0x6c6>
 8018c22:	e27a      	b.n	801911a <UART_SetConfig+0xaf2>
 8018c24:	2b20      	cmp	r3, #32
 8018c26:	f000 81b0 	beq.w	8018f8a <UART_SetConfig+0x962>
 8018c2a:	2b40      	cmp	r3, #64	; 0x40
 8018c2c:	f000 821e 	beq.w	801906c <UART_SetConfig+0xa44>
 8018c30:	2b10      	cmp	r3, #16
 8018c32:	f000 8104 	beq.w	8018e3e <UART_SetConfig+0x816>
 8018c36:	e270      	b.n	801911a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018c38:	f7fd ff14 	bl	8016a64 <HAL_RCCEx_GetD3PCLK1Freq>
 8018c3c:	4602      	mov	r2, r0
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d04e      	beq.n	8018ce4 <UART_SetConfig+0x6bc>
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c4a:	2b01      	cmp	r3, #1
 8018c4c:	d048      	beq.n	8018ce0 <UART_SetConfig+0x6b8>
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c52:	2b02      	cmp	r3, #2
 8018c54:	d042      	beq.n	8018cdc <UART_SetConfig+0x6b4>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c5a:	2b03      	cmp	r3, #3
 8018c5c:	d03c      	beq.n	8018cd8 <UART_SetConfig+0x6b0>
 8018c5e:	687b      	ldr	r3, [r7, #4]
 8018c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c62:	2b04      	cmp	r3, #4
 8018c64:	d036      	beq.n	8018cd4 <UART_SetConfig+0x6ac>
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6a:	2b05      	cmp	r3, #5
 8018c6c:	d026      	beq.n	8018cbc <UART_SetConfig+0x694>
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c72:	2b06      	cmp	r3, #6
 8018c74:	d020      	beq.n	8018cb8 <UART_SetConfig+0x690>
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c7a:	2b07      	cmp	r3, #7
 8018c7c:	d01a      	beq.n	8018cb4 <UART_SetConfig+0x68c>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c82:	2b08      	cmp	r3, #8
 8018c84:	d014      	beq.n	8018cb0 <UART_SetConfig+0x688>
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8a:	2b09      	cmp	r3, #9
 8018c8c:	d00e      	beq.n	8018cac <UART_SetConfig+0x684>
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c92:	2b0a      	cmp	r3, #10
 8018c94:	d008      	beq.n	8018ca8 <UART_SetConfig+0x680>
 8018c96:	687b      	ldr	r3, [r7, #4]
 8018c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9a:	2b0b      	cmp	r3, #11
 8018c9c:	d102      	bne.n	8018ca4 <UART_SetConfig+0x67c>
 8018c9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ca2:	e020      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e01e      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018ca8:	2380      	movs	r3, #128	; 0x80
 8018caa:	e01c      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cac:	2340      	movs	r3, #64	; 0x40
 8018cae:	e01a      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cb0:	2320      	movs	r3, #32
 8018cb2:	e018      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cb4:	2310      	movs	r3, #16
 8018cb6:	e016      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cb8:	230c      	movs	r3, #12
 8018cba:	e014      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cbc:	230a      	movs	r3, #10
 8018cbe:	e012      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cc0:	40011400 	.word	0x40011400
 8018cc4:	58024400 	.word	0x58024400
 8018cc8:	40007800 	.word	0x40007800
 8018ccc:	40007c00 	.word	0x40007c00
 8018cd0:	58000c00 	.word	0x58000c00
 8018cd4:	2308      	movs	r3, #8
 8018cd6:	e006      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cd8:	2306      	movs	r3, #6
 8018cda:	e004      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018cdc:	2304      	movs	r3, #4
 8018cde:	e002      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018ce0:	2302      	movs	r3, #2
 8018ce2:	e000      	b.n	8018ce6 <UART_SetConfig+0x6be>
 8018ce4:	2301      	movs	r3, #1
 8018ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8018cea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018cec:	e219      	b.n	8019122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018cee:	f107 0318 	add.w	r3, r7, #24
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	f7fd fecc 	bl	8016a90 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018cf8:	69fa      	ldr	r2, [r7, #28]
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d044      	beq.n	8018d8c <UART_SetConfig+0x764>
 8018d02:	687b      	ldr	r3, [r7, #4]
 8018d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d06:	2b01      	cmp	r3, #1
 8018d08:	d03e      	beq.n	8018d88 <UART_SetConfig+0x760>
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d0e:	2b02      	cmp	r3, #2
 8018d10:	d038      	beq.n	8018d84 <UART_SetConfig+0x75c>
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d16:	2b03      	cmp	r3, #3
 8018d18:	d032      	beq.n	8018d80 <UART_SetConfig+0x758>
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d1e:	2b04      	cmp	r3, #4
 8018d20:	d02c      	beq.n	8018d7c <UART_SetConfig+0x754>
 8018d22:	687b      	ldr	r3, [r7, #4]
 8018d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d26:	2b05      	cmp	r3, #5
 8018d28:	d026      	beq.n	8018d78 <UART_SetConfig+0x750>
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d2e:	2b06      	cmp	r3, #6
 8018d30:	d020      	beq.n	8018d74 <UART_SetConfig+0x74c>
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d36:	2b07      	cmp	r3, #7
 8018d38:	d01a      	beq.n	8018d70 <UART_SetConfig+0x748>
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d3e:	2b08      	cmp	r3, #8
 8018d40:	d014      	beq.n	8018d6c <UART_SetConfig+0x744>
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d46:	2b09      	cmp	r3, #9
 8018d48:	d00e      	beq.n	8018d68 <UART_SetConfig+0x740>
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d4e:	2b0a      	cmp	r3, #10
 8018d50:	d008      	beq.n	8018d64 <UART_SetConfig+0x73c>
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d56:	2b0b      	cmp	r3, #11
 8018d58:	d102      	bne.n	8018d60 <UART_SetConfig+0x738>
 8018d5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018d5e:	e016      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d60:	2301      	movs	r3, #1
 8018d62:	e014      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d64:	2380      	movs	r3, #128	; 0x80
 8018d66:	e012      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d68:	2340      	movs	r3, #64	; 0x40
 8018d6a:	e010      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d6c:	2320      	movs	r3, #32
 8018d6e:	e00e      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d70:	2310      	movs	r3, #16
 8018d72:	e00c      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d74:	230c      	movs	r3, #12
 8018d76:	e00a      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d78:	230a      	movs	r3, #10
 8018d7a:	e008      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d7c:	2308      	movs	r3, #8
 8018d7e:	e006      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d80:	2306      	movs	r3, #6
 8018d82:	e004      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d84:	2304      	movs	r3, #4
 8018d86:	e002      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d88:	2302      	movs	r3, #2
 8018d8a:	e000      	b.n	8018d8e <UART_SetConfig+0x766>
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8018d92:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018d94:	e1c5      	b.n	8019122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018d96:	f107 030c 	add.w	r3, r7, #12
 8018d9a:	4618      	mov	r0, r3
 8018d9c:	f7fd ffc4 	bl	8016d28 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018da0:	693a      	ldr	r2, [r7, #16]
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da6:	2b00      	cmp	r3, #0
 8018da8:	d044      	beq.n	8018e34 <UART_SetConfig+0x80c>
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dae:	2b01      	cmp	r3, #1
 8018db0:	d03e      	beq.n	8018e30 <UART_SetConfig+0x808>
 8018db2:	687b      	ldr	r3, [r7, #4]
 8018db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db6:	2b02      	cmp	r3, #2
 8018db8:	d038      	beq.n	8018e2c <UART_SetConfig+0x804>
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dbe:	2b03      	cmp	r3, #3
 8018dc0:	d032      	beq.n	8018e28 <UART_SetConfig+0x800>
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc6:	2b04      	cmp	r3, #4
 8018dc8:	d02c      	beq.n	8018e24 <UART_SetConfig+0x7fc>
 8018dca:	687b      	ldr	r3, [r7, #4]
 8018dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dce:	2b05      	cmp	r3, #5
 8018dd0:	d026      	beq.n	8018e20 <UART_SetConfig+0x7f8>
 8018dd2:	687b      	ldr	r3, [r7, #4]
 8018dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd6:	2b06      	cmp	r3, #6
 8018dd8:	d020      	beq.n	8018e1c <UART_SetConfig+0x7f4>
 8018dda:	687b      	ldr	r3, [r7, #4]
 8018ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dde:	2b07      	cmp	r3, #7
 8018de0:	d01a      	beq.n	8018e18 <UART_SetConfig+0x7f0>
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de6:	2b08      	cmp	r3, #8
 8018de8:	d014      	beq.n	8018e14 <UART_SetConfig+0x7ec>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dee:	2b09      	cmp	r3, #9
 8018df0:	d00e      	beq.n	8018e10 <UART_SetConfig+0x7e8>
 8018df2:	687b      	ldr	r3, [r7, #4]
 8018df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df6:	2b0a      	cmp	r3, #10
 8018df8:	d008      	beq.n	8018e0c <UART_SetConfig+0x7e4>
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dfe:	2b0b      	cmp	r3, #11
 8018e00:	d102      	bne.n	8018e08 <UART_SetConfig+0x7e0>
 8018e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018e06:	e016      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e08:	2301      	movs	r3, #1
 8018e0a:	e014      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e0c:	2380      	movs	r3, #128	; 0x80
 8018e0e:	e012      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e10:	2340      	movs	r3, #64	; 0x40
 8018e12:	e010      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e14:	2320      	movs	r3, #32
 8018e16:	e00e      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e18:	2310      	movs	r3, #16
 8018e1a:	e00c      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e1c:	230c      	movs	r3, #12
 8018e1e:	e00a      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e20:	230a      	movs	r3, #10
 8018e22:	e008      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e24:	2308      	movs	r3, #8
 8018e26:	e006      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e28:	2306      	movs	r3, #6
 8018e2a:	e004      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e2c:	2304      	movs	r3, #4
 8018e2e:	e002      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e30:	2302      	movs	r3, #2
 8018e32:	e000      	b.n	8018e36 <UART_SetConfig+0x80e>
 8018e34:	2301      	movs	r3, #1
 8018e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8018e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018e3c:	e171      	b.n	8019122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018e3e:	4b7a      	ldr	r3, [pc, #488]	; (8019028 <UART_SetConfig+0xa00>)
 8018e40:	681b      	ldr	r3, [r3, #0]
 8018e42:	f003 0320 	and.w	r3, r3, #32
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d054      	beq.n	8018ef4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018e4a:	4b77      	ldr	r3, [pc, #476]	; (8019028 <UART_SetConfig+0xa00>)
 8018e4c:	681b      	ldr	r3, [r3, #0]
 8018e4e:	08db      	lsrs	r3, r3, #3
 8018e50:	f003 0303 	and.w	r3, r3, #3
 8018e54:	4a75      	ldr	r2, [pc, #468]	; (801902c <UART_SetConfig+0xa04>)
 8018e56:	40da      	lsrs	r2, r3
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d044      	beq.n	8018eea <UART_SetConfig+0x8c2>
 8018e60:	687b      	ldr	r3, [r7, #4]
 8018e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e64:	2b01      	cmp	r3, #1
 8018e66:	d03e      	beq.n	8018ee6 <UART_SetConfig+0x8be>
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e6c:	2b02      	cmp	r3, #2
 8018e6e:	d038      	beq.n	8018ee2 <UART_SetConfig+0x8ba>
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e74:	2b03      	cmp	r3, #3
 8018e76:	d032      	beq.n	8018ede <UART_SetConfig+0x8b6>
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e7c:	2b04      	cmp	r3, #4
 8018e7e:	d02c      	beq.n	8018eda <UART_SetConfig+0x8b2>
 8018e80:	687b      	ldr	r3, [r7, #4]
 8018e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e84:	2b05      	cmp	r3, #5
 8018e86:	d026      	beq.n	8018ed6 <UART_SetConfig+0x8ae>
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e8c:	2b06      	cmp	r3, #6
 8018e8e:	d020      	beq.n	8018ed2 <UART_SetConfig+0x8aa>
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e94:	2b07      	cmp	r3, #7
 8018e96:	d01a      	beq.n	8018ece <UART_SetConfig+0x8a6>
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e9c:	2b08      	cmp	r3, #8
 8018e9e:	d014      	beq.n	8018eca <UART_SetConfig+0x8a2>
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ea4:	2b09      	cmp	r3, #9
 8018ea6:	d00e      	beq.n	8018ec6 <UART_SetConfig+0x89e>
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eac:	2b0a      	cmp	r3, #10
 8018eae:	d008      	beq.n	8018ec2 <UART_SetConfig+0x89a>
 8018eb0:	687b      	ldr	r3, [r7, #4]
 8018eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eb4:	2b0b      	cmp	r3, #11
 8018eb6:	d102      	bne.n	8018ebe <UART_SetConfig+0x896>
 8018eb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ebc:	e016      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ebe:	2301      	movs	r3, #1
 8018ec0:	e014      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ec2:	2380      	movs	r3, #128	; 0x80
 8018ec4:	e012      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ec6:	2340      	movs	r3, #64	; 0x40
 8018ec8:	e010      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018eca:	2320      	movs	r3, #32
 8018ecc:	e00e      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ece:	2310      	movs	r3, #16
 8018ed0:	e00c      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ed2:	230c      	movs	r3, #12
 8018ed4:	e00a      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ed6:	230a      	movs	r3, #10
 8018ed8:	e008      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018eda:	2308      	movs	r3, #8
 8018edc:	e006      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ede:	2306      	movs	r3, #6
 8018ee0:	e004      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ee2:	2304      	movs	r3, #4
 8018ee4:	e002      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018ee6:	2302      	movs	r3, #2
 8018ee8:	e000      	b.n	8018eec <UART_SetConfig+0x8c4>
 8018eea:	2301      	movs	r3, #1
 8018eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8018ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8018ef2:	e116      	b.n	8019122 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d043      	beq.n	8018f84 <UART_SetConfig+0x95c>
 8018efc:	687b      	ldr	r3, [r7, #4]
 8018efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f00:	2b01      	cmp	r3, #1
 8018f02:	d03d      	beq.n	8018f80 <UART_SetConfig+0x958>
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f08:	2b02      	cmp	r3, #2
 8018f0a:	d037      	beq.n	8018f7c <UART_SetConfig+0x954>
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f10:	2b03      	cmp	r3, #3
 8018f12:	d031      	beq.n	8018f78 <UART_SetConfig+0x950>
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f18:	2b04      	cmp	r3, #4
 8018f1a:	d02b      	beq.n	8018f74 <UART_SetConfig+0x94c>
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f20:	2b05      	cmp	r3, #5
 8018f22:	d025      	beq.n	8018f70 <UART_SetConfig+0x948>
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f28:	2b06      	cmp	r3, #6
 8018f2a:	d01f      	beq.n	8018f6c <UART_SetConfig+0x944>
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f30:	2b07      	cmp	r3, #7
 8018f32:	d019      	beq.n	8018f68 <UART_SetConfig+0x940>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f38:	2b08      	cmp	r3, #8
 8018f3a:	d013      	beq.n	8018f64 <UART_SetConfig+0x93c>
 8018f3c:	687b      	ldr	r3, [r7, #4]
 8018f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f40:	2b09      	cmp	r3, #9
 8018f42:	d00d      	beq.n	8018f60 <UART_SetConfig+0x938>
 8018f44:	687b      	ldr	r3, [r7, #4]
 8018f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f48:	2b0a      	cmp	r3, #10
 8018f4a:	d007      	beq.n	8018f5c <UART_SetConfig+0x934>
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f50:	2b0b      	cmp	r3, #11
 8018f52:	d101      	bne.n	8018f58 <UART_SetConfig+0x930>
 8018f54:	4b36      	ldr	r3, [pc, #216]	; (8019030 <UART_SetConfig+0xa08>)
 8018f56:	e016      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f58:	4b34      	ldr	r3, [pc, #208]	; (801902c <UART_SetConfig+0xa04>)
 8018f5a:	e014      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f5c:	4b35      	ldr	r3, [pc, #212]	; (8019034 <UART_SetConfig+0xa0c>)
 8018f5e:	e012      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f60:	4b35      	ldr	r3, [pc, #212]	; (8019038 <UART_SetConfig+0xa10>)
 8018f62:	e010      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f64:	4b35      	ldr	r3, [pc, #212]	; (801903c <UART_SetConfig+0xa14>)
 8018f66:	e00e      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f68:	4b35      	ldr	r3, [pc, #212]	; (8019040 <UART_SetConfig+0xa18>)
 8018f6a:	e00c      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f6c:	4b35      	ldr	r3, [pc, #212]	; (8019044 <UART_SetConfig+0xa1c>)
 8018f6e:	e00a      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f70:	4b35      	ldr	r3, [pc, #212]	; (8019048 <UART_SetConfig+0xa20>)
 8018f72:	e008      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f74:	4b35      	ldr	r3, [pc, #212]	; (801904c <UART_SetConfig+0xa24>)
 8018f76:	e006      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f78:	4b35      	ldr	r3, [pc, #212]	; (8019050 <UART_SetConfig+0xa28>)
 8018f7a:	e004      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f7c:	4b35      	ldr	r3, [pc, #212]	; (8019054 <UART_SetConfig+0xa2c>)
 8018f7e:	e002      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f80:	4b35      	ldr	r3, [pc, #212]	; (8019058 <UART_SetConfig+0xa30>)
 8018f82:	e000      	b.n	8018f86 <UART_SetConfig+0x95e>
 8018f84:	4b29      	ldr	r3, [pc, #164]	; (801902c <UART_SetConfig+0xa04>)
 8018f86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018f88:	e0cb      	b.n	8019122 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d046      	beq.n	8019020 <UART_SetConfig+0x9f8>
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f96:	2b01      	cmp	r3, #1
 8018f98:	d040      	beq.n	801901c <UART_SetConfig+0x9f4>
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f9e:	2b02      	cmp	r3, #2
 8018fa0:	d03a      	beq.n	8019018 <UART_SetConfig+0x9f0>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fa6:	2b03      	cmp	r3, #3
 8018fa8:	d034      	beq.n	8019014 <UART_SetConfig+0x9ec>
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fae:	2b04      	cmp	r3, #4
 8018fb0:	d02e      	beq.n	8019010 <UART_SetConfig+0x9e8>
 8018fb2:	687b      	ldr	r3, [r7, #4]
 8018fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fb6:	2b05      	cmp	r3, #5
 8018fb8:	d028      	beq.n	801900c <UART_SetConfig+0x9e4>
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fbe:	2b06      	cmp	r3, #6
 8018fc0:	d022      	beq.n	8019008 <UART_SetConfig+0x9e0>
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fc6:	2b07      	cmp	r3, #7
 8018fc8:	d01c      	beq.n	8019004 <UART_SetConfig+0x9dc>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fce:	2b08      	cmp	r3, #8
 8018fd0:	d016      	beq.n	8019000 <UART_SetConfig+0x9d8>
 8018fd2:	687b      	ldr	r3, [r7, #4]
 8018fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fd6:	2b09      	cmp	r3, #9
 8018fd8:	d00f      	beq.n	8018ffa <UART_SetConfig+0x9d2>
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fde:	2b0a      	cmp	r3, #10
 8018fe0:	d008      	beq.n	8018ff4 <UART_SetConfig+0x9cc>
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018fe6:	2b0b      	cmp	r3, #11
 8018fe8:	d102      	bne.n	8018ff0 <UART_SetConfig+0x9c8>
 8018fea:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018fee:	e018      	b.n	8019022 <UART_SetConfig+0x9fa>
 8018ff0:	4b13      	ldr	r3, [pc, #76]	; (8019040 <UART_SetConfig+0xa18>)
 8018ff2:	e016      	b.n	8019022 <UART_SetConfig+0x9fa>
 8018ff4:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018ff8:	e013      	b.n	8019022 <UART_SetConfig+0x9fa>
 8018ffa:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018ffe:	e010      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019000:	4b16      	ldr	r3, [pc, #88]	; (801905c <UART_SetConfig+0xa34>)
 8019002:	e00e      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019004:	4b0a      	ldr	r3, [pc, #40]	; (8019030 <UART_SetConfig+0xa08>)
 8019006:	e00c      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019008:	4b15      	ldr	r3, [pc, #84]	; (8019060 <UART_SetConfig+0xa38>)
 801900a:	e00a      	b.n	8019022 <UART_SetConfig+0x9fa>
 801900c:	4b15      	ldr	r3, [pc, #84]	; (8019064 <UART_SetConfig+0xa3c>)
 801900e:	e008      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019010:	4b08      	ldr	r3, [pc, #32]	; (8019034 <UART_SetConfig+0xa0c>)
 8019012:	e006      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019014:	4b14      	ldr	r3, [pc, #80]	; (8019068 <UART_SetConfig+0xa40>)
 8019016:	e004      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019018:	4b07      	ldr	r3, [pc, #28]	; (8019038 <UART_SetConfig+0xa10>)
 801901a:	e002      	b.n	8019022 <UART_SetConfig+0x9fa>
 801901c:	4b07      	ldr	r3, [pc, #28]	; (801903c <UART_SetConfig+0xa14>)
 801901e:	e000      	b.n	8019022 <UART_SetConfig+0x9fa>
 8019020:	4b07      	ldr	r3, [pc, #28]	; (8019040 <UART_SetConfig+0xa18>)
 8019022:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8019024:	e07d      	b.n	8019122 <UART_SetConfig+0xafa>
 8019026:	bf00      	nop
 8019028:	58024400 	.word	0x58024400
 801902c:	03d09000 	.word	0x03d09000
 8019030:	0003d090 	.word	0x0003d090
 8019034:	0007a120 	.word	0x0007a120
 8019038:	000f4240 	.word	0x000f4240
 801903c:	001e8480 	.word	0x001e8480
 8019040:	003d0900 	.word	0x003d0900
 8019044:	00516155 	.word	0x00516155
 8019048:	0061a800 	.word	0x0061a800
 801904c:	007a1200 	.word	0x007a1200
 8019050:	00a2c2aa 	.word	0x00a2c2aa
 8019054:	00f42400 	.word	0x00f42400
 8019058:	01e84800 	.word	0x01e84800
 801905c:	0001e848 	.word	0x0001e848
 8019060:	00051615 	.word	0x00051615
 8019064:	00061a80 	.word	0x00061a80
 8019068:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019070:	2b00      	cmp	r3, #0
 8019072:	d04e      	beq.n	8019112 <UART_SetConfig+0xaea>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019078:	2b01      	cmp	r3, #1
 801907a:	d047      	beq.n	801910c <UART_SetConfig+0xae4>
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019080:	2b02      	cmp	r3, #2
 8019082:	d040      	beq.n	8019106 <UART_SetConfig+0xade>
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019088:	2b03      	cmp	r3, #3
 801908a:	d039      	beq.n	8019100 <UART_SetConfig+0xad8>
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019090:	2b04      	cmp	r3, #4
 8019092:	d032      	beq.n	80190fa <UART_SetConfig+0xad2>
 8019094:	687b      	ldr	r3, [r7, #4]
 8019096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019098:	2b05      	cmp	r3, #5
 801909a:	d02b      	beq.n	80190f4 <UART_SetConfig+0xacc>
 801909c:	687b      	ldr	r3, [r7, #4]
 801909e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a0:	2b06      	cmp	r3, #6
 80190a2:	d024      	beq.n	80190ee <UART_SetConfig+0xac6>
 80190a4:	687b      	ldr	r3, [r7, #4]
 80190a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190a8:	2b07      	cmp	r3, #7
 80190aa:	d01d      	beq.n	80190e8 <UART_SetConfig+0xac0>
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190b0:	2b08      	cmp	r3, #8
 80190b2:	d016      	beq.n	80190e2 <UART_SetConfig+0xaba>
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190b8:	2b09      	cmp	r3, #9
 80190ba:	d00f      	beq.n	80190dc <UART_SetConfig+0xab4>
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c0:	2b0a      	cmp	r3, #10
 80190c2:	d008      	beq.n	80190d6 <UART_SetConfig+0xaae>
 80190c4:	687b      	ldr	r3, [r7, #4]
 80190c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80190c8:	2b0b      	cmp	r3, #11
 80190ca:	d101      	bne.n	80190d0 <UART_SetConfig+0xaa8>
 80190cc:	2380      	movs	r3, #128	; 0x80
 80190ce:	e022      	b.n	8019116 <UART_SetConfig+0xaee>
 80190d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80190d4:	e01f      	b.n	8019116 <UART_SetConfig+0xaee>
 80190d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80190da:	e01c      	b.n	8019116 <UART_SetConfig+0xaee>
 80190dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80190e0:	e019      	b.n	8019116 <UART_SetConfig+0xaee>
 80190e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80190e6:	e016      	b.n	8019116 <UART_SetConfig+0xaee>
 80190e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80190ec:	e013      	b.n	8019116 <UART_SetConfig+0xaee>
 80190ee:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80190f2:	e010      	b.n	8019116 <UART_SetConfig+0xaee>
 80190f4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80190f8:	e00d      	b.n	8019116 <UART_SetConfig+0xaee>
 80190fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80190fe:	e00a      	b.n	8019116 <UART_SetConfig+0xaee>
 8019100:	f241 5355 	movw	r3, #5461	; 0x1555
 8019104:	e007      	b.n	8019116 <UART_SetConfig+0xaee>
 8019106:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801910a:	e004      	b.n	8019116 <UART_SetConfig+0xaee>
 801910c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019110:	e001      	b.n	8019116 <UART_SetConfig+0xaee>
 8019112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019116:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8019118:	e003      	b.n	8019122 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 801911a:	2301      	movs	r3, #1
 801911c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8019120:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8019122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019124:	2b00      	cmp	r3, #0
 8019126:	f001 83e8 	beq.w	801a8fa <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	685a      	ldr	r2, [r3, #4]
 801912e:	4613      	mov	r3, r2
 8019130:	005b      	lsls	r3, r3, #1
 8019132:	4413      	add	r3, r2
 8019134:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019136:	429a      	cmp	r2, r3
 8019138:	d305      	bcc.n	8019146 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	685b      	ldr	r3, [r3, #4]
 801913e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8019140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019142:	429a      	cmp	r2, r3
 8019144:	d904      	bls.n	8019150 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8019146:	2301      	movs	r3, #1
 8019148:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801914c:	f001 bbd5 	b.w	801a8fa <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8019150:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019154:	2b08      	cmp	r3, #8
 8019156:	f000 8154 	beq.w	8019402 <UART_SetConfig+0xdda>
 801915a:	2b08      	cmp	r3, #8
 801915c:	dc06      	bgt.n	801916c <UART_SetConfig+0xb44>
 801915e:	2b02      	cmp	r3, #2
 8019160:	d00f      	beq.n	8019182 <UART_SetConfig+0xb5a>
 8019162:	2b04      	cmp	r3, #4
 8019164:	f000 80ac 	beq.w	80192c0 <UART_SetConfig+0xc98>
 8019168:	f000 bc30 	b.w	80199cc <UART_SetConfig+0x13a4>
 801916c:	2b20      	cmp	r3, #32
 801916e:	f000 832d 	beq.w	80197cc <UART_SetConfig+0x11a4>
 8019172:	2b40      	cmp	r3, #64	; 0x40
 8019174:	f000 83a5 	beq.w	80198c2 <UART_SetConfig+0x129a>
 8019178:	2b10      	cmp	r3, #16
 801917a:	f000 81e3 	beq.w	8019544 <UART_SetConfig+0xf1c>
 801917e:	f000 bc25 	b.w	80199cc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8019182:	f7fd fc6f 	bl	8016a64 <HAL_RCCEx_GetD3PCLK1Freq>
 8019186:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801918a:	4618      	mov	r0, r3
 801918c:	f04f 0100 	mov.w	r1, #0
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019194:	2b00      	cmp	r3, #0
 8019196:	d067      	beq.n	8019268 <UART_SetConfig+0xc40>
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801919c:	2b01      	cmp	r3, #1
 801919e:	d05e      	beq.n	801925e <UART_SetConfig+0xc36>
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191a4:	2b02      	cmp	r3, #2
 80191a6:	d055      	beq.n	8019254 <UART_SetConfig+0xc2c>
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ac:	2b03      	cmp	r3, #3
 80191ae:	d04c      	beq.n	801924a <UART_SetConfig+0xc22>
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b4:	2b04      	cmp	r3, #4
 80191b6:	d043      	beq.n	8019240 <UART_SetConfig+0xc18>
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191bc:	2b05      	cmp	r3, #5
 80191be:	d03a      	beq.n	8019236 <UART_SetConfig+0xc0e>
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c4:	2b06      	cmp	r3, #6
 80191c6:	d031      	beq.n	801922c <UART_SetConfig+0xc04>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191cc:	2b07      	cmp	r3, #7
 80191ce:	d028      	beq.n	8019222 <UART_SetConfig+0xbfa>
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d4:	2b08      	cmp	r3, #8
 80191d6:	d01f      	beq.n	8019218 <UART_SetConfig+0xbf0>
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191dc:	2b09      	cmp	r3, #9
 80191de:	d016      	beq.n	801920e <UART_SetConfig+0xbe6>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191e4:	2b0a      	cmp	r3, #10
 80191e6:	d00d      	beq.n	8019204 <UART_SetConfig+0xbdc>
 80191e8:	687b      	ldr	r3, [r7, #4]
 80191ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ec:	2b0b      	cmp	r3, #11
 80191ee:	d104      	bne.n	80191fa <UART_SetConfig+0xbd2>
 80191f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80191f4:	f04f 0400 	mov.w	r4, #0
 80191f8:	e03a      	b.n	8019270 <UART_SetConfig+0xc48>
 80191fa:	f04f 0301 	mov.w	r3, #1
 80191fe:	f04f 0400 	mov.w	r4, #0
 8019202:	e035      	b.n	8019270 <UART_SetConfig+0xc48>
 8019204:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019208:	f04f 0400 	mov.w	r4, #0
 801920c:	e030      	b.n	8019270 <UART_SetConfig+0xc48>
 801920e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8019212:	f04f 0400 	mov.w	r4, #0
 8019216:	e02b      	b.n	8019270 <UART_SetConfig+0xc48>
 8019218:	f04f 0320 	mov.w	r3, #32
 801921c:	f04f 0400 	mov.w	r4, #0
 8019220:	e026      	b.n	8019270 <UART_SetConfig+0xc48>
 8019222:	f04f 0310 	mov.w	r3, #16
 8019226:	f04f 0400 	mov.w	r4, #0
 801922a:	e021      	b.n	8019270 <UART_SetConfig+0xc48>
 801922c:	f04f 030c 	mov.w	r3, #12
 8019230:	f04f 0400 	mov.w	r4, #0
 8019234:	e01c      	b.n	8019270 <UART_SetConfig+0xc48>
 8019236:	f04f 030a 	mov.w	r3, #10
 801923a:	f04f 0400 	mov.w	r4, #0
 801923e:	e017      	b.n	8019270 <UART_SetConfig+0xc48>
 8019240:	f04f 0308 	mov.w	r3, #8
 8019244:	f04f 0400 	mov.w	r4, #0
 8019248:	e012      	b.n	8019270 <UART_SetConfig+0xc48>
 801924a:	f04f 0306 	mov.w	r3, #6
 801924e:	f04f 0400 	mov.w	r4, #0
 8019252:	e00d      	b.n	8019270 <UART_SetConfig+0xc48>
 8019254:	f04f 0304 	mov.w	r3, #4
 8019258:	f04f 0400 	mov.w	r4, #0
 801925c:	e008      	b.n	8019270 <UART_SetConfig+0xc48>
 801925e:	f04f 0302 	mov.w	r3, #2
 8019262:	f04f 0400 	mov.w	r4, #0
 8019266:	e003      	b.n	8019270 <UART_SetConfig+0xc48>
 8019268:	f04f 0301 	mov.w	r3, #1
 801926c:	f04f 0400 	mov.w	r4, #0
 8019270:	461a      	mov	r2, r3
 8019272:	4623      	mov	r3, r4
 8019274:	f7e7 f838 	bl	80002e8 <__aeabi_uldivmod>
 8019278:	4603      	mov	r3, r0
 801927a:	460c      	mov	r4, r1
 801927c:	4619      	mov	r1, r3
 801927e:	4622      	mov	r2, r4
 8019280:	f04f 0300 	mov.w	r3, #0
 8019284:	f04f 0400 	mov.w	r4, #0
 8019288:	0214      	lsls	r4, r2, #8
 801928a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 801928e:	020b      	lsls	r3, r1, #8
 8019290:	687a      	ldr	r2, [r7, #4]
 8019292:	6852      	ldr	r2, [r2, #4]
 8019294:	0852      	lsrs	r2, r2, #1
 8019296:	4611      	mov	r1, r2
 8019298:	f04f 0200 	mov.w	r2, #0
 801929c:	eb13 0b01 	adds.w	fp, r3, r1
 80192a0:	eb44 0c02 	adc.w	ip, r4, r2
 80192a4:	4658      	mov	r0, fp
 80192a6:	4661      	mov	r1, ip
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	685b      	ldr	r3, [r3, #4]
 80192ac:	f04f 0400 	mov.w	r4, #0
 80192b0:	461a      	mov	r2, r3
 80192b2:	4623      	mov	r3, r4
 80192b4:	f7e7 f818 	bl	80002e8 <__aeabi_uldivmod>
 80192b8:	4603      	mov	r3, r0
 80192ba:	460c      	mov	r4, r1
 80192bc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80192be:	e389      	b.n	80199d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80192c0:	f107 0318 	add.w	r3, r7, #24
 80192c4:	4618      	mov	r0, r3
 80192c6:	f7fd fbe3 	bl	8016a90 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192ca:	69fb      	ldr	r3, [r7, #28]
 80192cc:	4618      	mov	r0, r3
 80192ce:	f04f 0100 	mov.w	r1, #0
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d067      	beq.n	80193aa <UART_SetConfig+0xd82>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192de:	2b01      	cmp	r3, #1
 80192e0:	d05e      	beq.n	80193a0 <UART_SetConfig+0xd78>
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e6:	2b02      	cmp	r3, #2
 80192e8:	d055      	beq.n	8019396 <UART_SetConfig+0xd6e>
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ee:	2b03      	cmp	r3, #3
 80192f0:	d04c      	beq.n	801938c <UART_SetConfig+0xd64>
 80192f2:	687b      	ldr	r3, [r7, #4]
 80192f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192f6:	2b04      	cmp	r3, #4
 80192f8:	d043      	beq.n	8019382 <UART_SetConfig+0xd5a>
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192fe:	2b05      	cmp	r3, #5
 8019300:	d03a      	beq.n	8019378 <UART_SetConfig+0xd50>
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019306:	2b06      	cmp	r3, #6
 8019308:	d031      	beq.n	801936e <UART_SetConfig+0xd46>
 801930a:	687b      	ldr	r3, [r7, #4]
 801930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801930e:	2b07      	cmp	r3, #7
 8019310:	d028      	beq.n	8019364 <UART_SetConfig+0xd3c>
 8019312:	687b      	ldr	r3, [r7, #4]
 8019314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019316:	2b08      	cmp	r3, #8
 8019318:	d01f      	beq.n	801935a <UART_SetConfig+0xd32>
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801931e:	2b09      	cmp	r3, #9
 8019320:	d016      	beq.n	8019350 <UART_SetConfig+0xd28>
 8019322:	687b      	ldr	r3, [r7, #4]
 8019324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019326:	2b0a      	cmp	r3, #10
 8019328:	d00d      	beq.n	8019346 <UART_SetConfig+0xd1e>
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801932e:	2b0b      	cmp	r3, #11
 8019330:	d104      	bne.n	801933c <UART_SetConfig+0xd14>
 8019332:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019336:	f04f 0400 	mov.w	r4, #0
 801933a:	e03a      	b.n	80193b2 <UART_SetConfig+0xd8a>
 801933c:	f04f 0301 	mov.w	r3, #1
 8019340:	f04f 0400 	mov.w	r4, #0
 8019344:	e035      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019346:	f04f 0380 	mov.w	r3, #128	; 0x80
 801934a:	f04f 0400 	mov.w	r4, #0
 801934e:	e030      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019350:	f04f 0340 	mov.w	r3, #64	; 0x40
 8019354:	f04f 0400 	mov.w	r4, #0
 8019358:	e02b      	b.n	80193b2 <UART_SetConfig+0xd8a>
 801935a:	f04f 0320 	mov.w	r3, #32
 801935e:	f04f 0400 	mov.w	r4, #0
 8019362:	e026      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019364:	f04f 0310 	mov.w	r3, #16
 8019368:	f04f 0400 	mov.w	r4, #0
 801936c:	e021      	b.n	80193b2 <UART_SetConfig+0xd8a>
 801936e:	f04f 030c 	mov.w	r3, #12
 8019372:	f04f 0400 	mov.w	r4, #0
 8019376:	e01c      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019378:	f04f 030a 	mov.w	r3, #10
 801937c:	f04f 0400 	mov.w	r4, #0
 8019380:	e017      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019382:	f04f 0308 	mov.w	r3, #8
 8019386:	f04f 0400 	mov.w	r4, #0
 801938a:	e012      	b.n	80193b2 <UART_SetConfig+0xd8a>
 801938c:	f04f 0306 	mov.w	r3, #6
 8019390:	f04f 0400 	mov.w	r4, #0
 8019394:	e00d      	b.n	80193b2 <UART_SetConfig+0xd8a>
 8019396:	f04f 0304 	mov.w	r3, #4
 801939a:	f04f 0400 	mov.w	r4, #0
 801939e:	e008      	b.n	80193b2 <UART_SetConfig+0xd8a>
 80193a0:	f04f 0302 	mov.w	r3, #2
 80193a4:	f04f 0400 	mov.w	r4, #0
 80193a8:	e003      	b.n	80193b2 <UART_SetConfig+0xd8a>
 80193aa:	f04f 0301 	mov.w	r3, #1
 80193ae:	f04f 0400 	mov.w	r4, #0
 80193b2:	461a      	mov	r2, r3
 80193b4:	4623      	mov	r3, r4
 80193b6:	f7e6 ff97 	bl	80002e8 <__aeabi_uldivmod>
 80193ba:	4603      	mov	r3, r0
 80193bc:	460c      	mov	r4, r1
 80193be:	4619      	mov	r1, r3
 80193c0:	4622      	mov	r2, r4
 80193c2:	f04f 0300 	mov.w	r3, #0
 80193c6:	f04f 0400 	mov.w	r4, #0
 80193ca:	0214      	lsls	r4, r2, #8
 80193cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80193d0:	020b      	lsls	r3, r1, #8
 80193d2:	687a      	ldr	r2, [r7, #4]
 80193d4:	6852      	ldr	r2, [r2, #4]
 80193d6:	0852      	lsrs	r2, r2, #1
 80193d8:	4611      	mov	r1, r2
 80193da:	f04f 0200 	mov.w	r2, #0
 80193de:	eb13 0b01 	adds.w	fp, r3, r1
 80193e2:	eb44 0c02 	adc.w	ip, r4, r2
 80193e6:	4658      	mov	r0, fp
 80193e8:	4661      	mov	r1, ip
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	685b      	ldr	r3, [r3, #4]
 80193ee:	f04f 0400 	mov.w	r4, #0
 80193f2:	461a      	mov	r2, r3
 80193f4:	4623      	mov	r3, r4
 80193f6:	f7e6 ff77 	bl	80002e8 <__aeabi_uldivmod>
 80193fa:	4603      	mov	r3, r0
 80193fc:	460c      	mov	r4, r1
 80193fe:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019400:	e2e8      	b.n	80199d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019402:	f107 030c 	add.w	r3, r7, #12
 8019406:	4618      	mov	r0, r3
 8019408:	f7fd fc8e 	bl	8016d28 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801940c:	693b      	ldr	r3, [r7, #16]
 801940e:	4618      	mov	r0, r3
 8019410:	f04f 0100 	mov.w	r1, #0
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019418:	2b00      	cmp	r3, #0
 801941a:	d067      	beq.n	80194ec <UART_SetConfig+0xec4>
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019420:	2b01      	cmp	r3, #1
 8019422:	d05e      	beq.n	80194e2 <UART_SetConfig+0xeba>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019428:	2b02      	cmp	r3, #2
 801942a:	d055      	beq.n	80194d8 <UART_SetConfig+0xeb0>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019430:	2b03      	cmp	r3, #3
 8019432:	d04c      	beq.n	80194ce <UART_SetConfig+0xea6>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019438:	2b04      	cmp	r3, #4
 801943a:	d043      	beq.n	80194c4 <UART_SetConfig+0xe9c>
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019440:	2b05      	cmp	r3, #5
 8019442:	d03a      	beq.n	80194ba <UART_SetConfig+0xe92>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019448:	2b06      	cmp	r3, #6
 801944a:	d031      	beq.n	80194b0 <UART_SetConfig+0xe88>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019450:	2b07      	cmp	r3, #7
 8019452:	d028      	beq.n	80194a6 <UART_SetConfig+0xe7e>
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019458:	2b08      	cmp	r3, #8
 801945a:	d01f      	beq.n	801949c <UART_SetConfig+0xe74>
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019460:	2b09      	cmp	r3, #9
 8019462:	d016      	beq.n	8019492 <UART_SetConfig+0xe6a>
 8019464:	687b      	ldr	r3, [r7, #4]
 8019466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019468:	2b0a      	cmp	r3, #10
 801946a:	d00d      	beq.n	8019488 <UART_SetConfig+0xe60>
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019470:	2b0b      	cmp	r3, #11
 8019472:	d104      	bne.n	801947e <UART_SetConfig+0xe56>
 8019474:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019478:	f04f 0400 	mov.w	r4, #0
 801947c:	e03a      	b.n	80194f4 <UART_SetConfig+0xecc>
 801947e:	f04f 0301 	mov.w	r3, #1
 8019482:	f04f 0400 	mov.w	r4, #0
 8019486:	e035      	b.n	80194f4 <UART_SetConfig+0xecc>
 8019488:	f04f 0380 	mov.w	r3, #128	; 0x80
 801948c:	f04f 0400 	mov.w	r4, #0
 8019490:	e030      	b.n	80194f4 <UART_SetConfig+0xecc>
 8019492:	f04f 0340 	mov.w	r3, #64	; 0x40
 8019496:	f04f 0400 	mov.w	r4, #0
 801949a:	e02b      	b.n	80194f4 <UART_SetConfig+0xecc>
 801949c:	f04f 0320 	mov.w	r3, #32
 80194a0:	f04f 0400 	mov.w	r4, #0
 80194a4:	e026      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194a6:	f04f 0310 	mov.w	r3, #16
 80194aa:	f04f 0400 	mov.w	r4, #0
 80194ae:	e021      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194b0:	f04f 030c 	mov.w	r3, #12
 80194b4:	f04f 0400 	mov.w	r4, #0
 80194b8:	e01c      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194ba:	f04f 030a 	mov.w	r3, #10
 80194be:	f04f 0400 	mov.w	r4, #0
 80194c2:	e017      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194c4:	f04f 0308 	mov.w	r3, #8
 80194c8:	f04f 0400 	mov.w	r4, #0
 80194cc:	e012      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194ce:	f04f 0306 	mov.w	r3, #6
 80194d2:	f04f 0400 	mov.w	r4, #0
 80194d6:	e00d      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194d8:	f04f 0304 	mov.w	r3, #4
 80194dc:	f04f 0400 	mov.w	r4, #0
 80194e0:	e008      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194e2:	f04f 0302 	mov.w	r3, #2
 80194e6:	f04f 0400 	mov.w	r4, #0
 80194ea:	e003      	b.n	80194f4 <UART_SetConfig+0xecc>
 80194ec:	f04f 0301 	mov.w	r3, #1
 80194f0:	f04f 0400 	mov.w	r4, #0
 80194f4:	461a      	mov	r2, r3
 80194f6:	4623      	mov	r3, r4
 80194f8:	f7e6 fef6 	bl	80002e8 <__aeabi_uldivmod>
 80194fc:	4603      	mov	r3, r0
 80194fe:	460c      	mov	r4, r1
 8019500:	4619      	mov	r1, r3
 8019502:	4622      	mov	r2, r4
 8019504:	f04f 0300 	mov.w	r3, #0
 8019508:	f04f 0400 	mov.w	r4, #0
 801950c:	0214      	lsls	r4, r2, #8
 801950e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8019512:	020b      	lsls	r3, r1, #8
 8019514:	687a      	ldr	r2, [r7, #4]
 8019516:	6852      	ldr	r2, [r2, #4]
 8019518:	0852      	lsrs	r2, r2, #1
 801951a:	4611      	mov	r1, r2
 801951c:	f04f 0200 	mov.w	r2, #0
 8019520:	eb13 0b01 	adds.w	fp, r3, r1
 8019524:	eb44 0c02 	adc.w	ip, r4, r2
 8019528:	4658      	mov	r0, fp
 801952a:	4661      	mov	r1, ip
 801952c:	687b      	ldr	r3, [r7, #4]
 801952e:	685b      	ldr	r3, [r3, #4]
 8019530:	f04f 0400 	mov.w	r4, #0
 8019534:	461a      	mov	r2, r3
 8019536:	4623      	mov	r3, r4
 8019538:	f7e6 fed6 	bl	80002e8 <__aeabi_uldivmod>
 801953c:	4603      	mov	r3, r0
 801953e:	460c      	mov	r4, r1
 8019540:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019542:	e247      	b.n	80199d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019544:	4b96      	ldr	r3, [pc, #600]	; (80197a0 <UART_SetConfig+0x1178>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	f003 0320 	and.w	r3, r3, #32
 801954c:	2b00      	cmp	r3, #0
 801954e:	f000 80a3 	beq.w	8019698 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019552:	4b93      	ldr	r3, [pc, #588]	; (80197a0 <UART_SetConfig+0x1178>)
 8019554:	681b      	ldr	r3, [r3, #0]
 8019556:	08db      	lsrs	r3, r3, #3
 8019558:	f003 0303 	and.w	r3, r3, #3
 801955c:	4a91      	ldr	r2, [pc, #580]	; (80197a4 <UART_SetConfig+0x117c>)
 801955e:	fa22 f303 	lsr.w	r3, r2, r3
 8019562:	4618      	mov	r0, r3
 8019564:	f04f 0100 	mov.w	r1, #0
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801956c:	2b00      	cmp	r3, #0
 801956e:	d067      	beq.n	8019640 <UART_SetConfig+0x1018>
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019574:	2b01      	cmp	r3, #1
 8019576:	d05e      	beq.n	8019636 <UART_SetConfig+0x100e>
 8019578:	687b      	ldr	r3, [r7, #4]
 801957a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801957c:	2b02      	cmp	r3, #2
 801957e:	d055      	beq.n	801962c <UART_SetConfig+0x1004>
 8019580:	687b      	ldr	r3, [r7, #4]
 8019582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019584:	2b03      	cmp	r3, #3
 8019586:	d04c      	beq.n	8019622 <UART_SetConfig+0xffa>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801958c:	2b04      	cmp	r3, #4
 801958e:	d043      	beq.n	8019618 <UART_SetConfig+0xff0>
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019594:	2b05      	cmp	r3, #5
 8019596:	d03a      	beq.n	801960e <UART_SetConfig+0xfe6>
 8019598:	687b      	ldr	r3, [r7, #4]
 801959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801959c:	2b06      	cmp	r3, #6
 801959e:	d031      	beq.n	8019604 <UART_SetConfig+0xfdc>
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195a4:	2b07      	cmp	r3, #7
 80195a6:	d028      	beq.n	80195fa <UART_SetConfig+0xfd2>
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ac:	2b08      	cmp	r3, #8
 80195ae:	d01f      	beq.n	80195f0 <UART_SetConfig+0xfc8>
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b4:	2b09      	cmp	r3, #9
 80195b6:	d016      	beq.n	80195e6 <UART_SetConfig+0xfbe>
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195bc:	2b0a      	cmp	r3, #10
 80195be:	d00d      	beq.n	80195dc <UART_SetConfig+0xfb4>
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c4:	2b0b      	cmp	r3, #11
 80195c6:	d104      	bne.n	80195d2 <UART_SetConfig+0xfaa>
 80195c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80195cc:	f04f 0400 	mov.w	r4, #0
 80195d0:	e03a      	b.n	8019648 <UART_SetConfig+0x1020>
 80195d2:	f04f 0301 	mov.w	r3, #1
 80195d6:	f04f 0400 	mov.w	r4, #0
 80195da:	e035      	b.n	8019648 <UART_SetConfig+0x1020>
 80195dc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80195e0:	f04f 0400 	mov.w	r4, #0
 80195e4:	e030      	b.n	8019648 <UART_SetConfig+0x1020>
 80195e6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80195ea:	f04f 0400 	mov.w	r4, #0
 80195ee:	e02b      	b.n	8019648 <UART_SetConfig+0x1020>
 80195f0:	f04f 0320 	mov.w	r3, #32
 80195f4:	f04f 0400 	mov.w	r4, #0
 80195f8:	e026      	b.n	8019648 <UART_SetConfig+0x1020>
 80195fa:	f04f 0310 	mov.w	r3, #16
 80195fe:	f04f 0400 	mov.w	r4, #0
 8019602:	e021      	b.n	8019648 <UART_SetConfig+0x1020>
 8019604:	f04f 030c 	mov.w	r3, #12
 8019608:	f04f 0400 	mov.w	r4, #0
 801960c:	e01c      	b.n	8019648 <UART_SetConfig+0x1020>
 801960e:	f04f 030a 	mov.w	r3, #10
 8019612:	f04f 0400 	mov.w	r4, #0
 8019616:	e017      	b.n	8019648 <UART_SetConfig+0x1020>
 8019618:	f04f 0308 	mov.w	r3, #8
 801961c:	f04f 0400 	mov.w	r4, #0
 8019620:	e012      	b.n	8019648 <UART_SetConfig+0x1020>
 8019622:	f04f 0306 	mov.w	r3, #6
 8019626:	f04f 0400 	mov.w	r4, #0
 801962a:	e00d      	b.n	8019648 <UART_SetConfig+0x1020>
 801962c:	f04f 0304 	mov.w	r3, #4
 8019630:	f04f 0400 	mov.w	r4, #0
 8019634:	e008      	b.n	8019648 <UART_SetConfig+0x1020>
 8019636:	f04f 0302 	mov.w	r3, #2
 801963a:	f04f 0400 	mov.w	r4, #0
 801963e:	e003      	b.n	8019648 <UART_SetConfig+0x1020>
 8019640:	f04f 0301 	mov.w	r3, #1
 8019644:	f04f 0400 	mov.w	r4, #0
 8019648:	461a      	mov	r2, r3
 801964a:	4623      	mov	r3, r4
 801964c:	f7e6 fe4c 	bl	80002e8 <__aeabi_uldivmod>
 8019650:	4603      	mov	r3, r0
 8019652:	460c      	mov	r4, r1
 8019654:	4619      	mov	r1, r3
 8019656:	4622      	mov	r2, r4
 8019658:	f04f 0300 	mov.w	r3, #0
 801965c:	f04f 0400 	mov.w	r4, #0
 8019660:	0214      	lsls	r4, r2, #8
 8019662:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8019666:	020b      	lsls	r3, r1, #8
 8019668:	687a      	ldr	r2, [r7, #4]
 801966a:	6852      	ldr	r2, [r2, #4]
 801966c:	0852      	lsrs	r2, r2, #1
 801966e:	4611      	mov	r1, r2
 8019670:	f04f 0200 	mov.w	r2, #0
 8019674:	eb13 0b01 	adds.w	fp, r3, r1
 8019678:	eb44 0c02 	adc.w	ip, r4, r2
 801967c:	4658      	mov	r0, fp
 801967e:	4661      	mov	r1, ip
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	685b      	ldr	r3, [r3, #4]
 8019684:	f04f 0400 	mov.w	r4, #0
 8019688:	461a      	mov	r2, r3
 801968a:	4623      	mov	r3, r4
 801968c:	f7e6 fe2c 	bl	80002e8 <__aeabi_uldivmod>
 8019690:	4603      	mov	r3, r0
 8019692:	460c      	mov	r4, r1
 8019694:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8019696:	e19d      	b.n	80199d4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801969c:	2b00      	cmp	r3, #0
 801969e:	d05b      	beq.n	8019758 <UART_SetConfig+0x1130>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a4:	2b01      	cmp	r3, #1
 80196a6:	d053      	beq.n	8019750 <UART_SetConfig+0x1128>
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ac:	2b02      	cmp	r3, #2
 80196ae:	d04b      	beq.n	8019748 <UART_SetConfig+0x1120>
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196b4:	2b03      	cmp	r3, #3
 80196b6:	d043      	beq.n	8019740 <UART_SetConfig+0x1118>
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196bc:	2b04      	cmp	r3, #4
 80196be:	d03b      	beq.n	8019738 <UART_SetConfig+0x1110>
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196c4:	2b05      	cmp	r3, #5
 80196c6:	d033      	beq.n	8019730 <UART_SetConfig+0x1108>
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196cc:	2b06      	cmp	r3, #6
 80196ce:	d02b      	beq.n	8019728 <UART_SetConfig+0x1100>
 80196d0:	687b      	ldr	r3, [r7, #4]
 80196d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196d4:	2b07      	cmp	r3, #7
 80196d6:	d023      	beq.n	8019720 <UART_SetConfig+0x10f8>
 80196d8:	687b      	ldr	r3, [r7, #4]
 80196da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196dc:	2b08      	cmp	r3, #8
 80196de:	d01b      	beq.n	8019718 <UART_SetConfig+0x10f0>
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196e4:	2b09      	cmp	r3, #9
 80196e6:	d013      	beq.n	8019710 <UART_SetConfig+0x10e8>
 80196e8:	687b      	ldr	r3, [r7, #4]
 80196ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ec:	2b0a      	cmp	r3, #10
 80196ee:	d00b      	beq.n	8019708 <UART_SetConfig+0x10e0>
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196f4:	2b0b      	cmp	r3, #11
 80196f6:	d103      	bne.n	8019700 <UART_SetConfig+0x10d8>
 80196f8:	4b2a      	ldr	r3, [pc, #168]	; (80197a4 <UART_SetConfig+0x117c>)
 80196fa:	f04f 0400 	mov.w	r4, #0
 80196fe:	e02e      	b.n	801975e <UART_SetConfig+0x1136>
 8019700:	4b29      	ldr	r3, [pc, #164]	; (80197a8 <UART_SetConfig+0x1180>)
 8019702:	f04f 0403 	mov.w	r4, #3
 8019706:	e02a      	b.n	801975e <UART_SetConfig+0x1136>
 8019708:	4b28      	ldr	r3, [pc, #160]	; (80197ac <UART_SetConfig+0x1184>)
 801970a:	f04f 0400 	mov.w	r4, #0
 801970e:	e026      	b.n	801975e <UART_SetConfig+0x1136>
 8019710:	4b27      	ldr	r3, [pc, #156]	; (80197b0 <UART_SetConfig+0x1188>)
 8019712:	f04f 0400 	mov.w	r4, #0
 8019716:	e022      	b.n	801975e <UART_SetConfig+0x1136>
 8019718:	4b26      	ldr	r3, [pc, #152]	; (80197b4 <UART_SetConfig+0x118c>)
 801971a:	f04f 0400 	mov.w	r4, #0
 801971e:	e01e      	b.n	801975e <UART_SetConfig+0x1136>
 8019720:	4b25      	ldr	r3, [pc, #148]	; (80197b8 <UART_SetConfig+0x1190>)
 8019722:	f04f 0400 	mov.w	r4, #0
 8019726:	e01a      	b.n	801975e <UART_SetConfig+0x1136>
 8019728:	a419      	add	r4, pc, #100	; (adr r4, 8019790 <UART_SetConfig+0x1168>)
 801972a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801972e:	e016      	b.n	801975e <UART_SetConfig+0x1136>
 8019730:	4b22      	ldr	r3, [pc, #136]	; (80197bc <UART_SetConfig+0x1194>)
 8019732:	f04f 0400 	mov.w	r4, #0
 8019736:	e012      	b.n	801975e <UART_SetConfig+0x1136>
 8019738:	4b21      	ldr	r3, [pc, #132]	; (80197c0 <UART_SetConfig+0x1198>)
 801973a:	f04f 0400 	mov.w	r4, #0
 801973e:	e00e      	b.n	801975e <UART_SetConfig+0x1136>
 8019740:	a415      	add	r4, pc, #84	; (adr r4, 8019798 <UART_SetConfig+0x1170>)
 8019742:	e9d4 3400 	ldrd	r3, r4, [r4]
 8019746:	e00a      	b.n	801975e <UART_SetConfig+0x1136>
 8019748:	4b1e      	ldr	r3, [pc, #120]	; (80197c4 <UART_SetConfig+0x119c>)
 801974a:	f04f 0400 	mov.w	r4, #0
 801974e:	e006      	b.n	801975e <UART_SetConfig+0x1136>
 8019750:	4b1d      	ldr	r3, [pc, #116]	; (80197c8 <UART_SetConfig+0x11a0>)
 8019752:	f04f 0401 	mov.w	r4, #1
 8019756:	e002      	b.n	801975e <UART_SetConfig+0x1136>
 8019758:	4b13      	ldr	r3, [pc, #76]	; (80197a8 <UART_SetConfig+0x1180>)
 801975a:	f04f 0403 	mov.w	r4, #3
 801975e:	687a      	ldr	r2, [r7, #4]
 8019760:	6852      	ldr	r2, [r2, #4]
 8019762:	0852      	lsrs	r2, r2, #1
 8019764:	4611      	mov	r1, r2
 8019766:	f04f 0200 	mov.w	r2, #0
 801976a:	eb13 0b01 	adds.w	fp, r3, r1
 801976e:	eb44 0c02 	adc.w	ip, r4, r2
 8019772:	4658      	mov	r0, fp
 8019774:	4661      	mov	r1, ip
 8019776:	687b      	ldr	r3, [r7, #4]
 8019778:	685b      	ldr	r3, [r3, #4]
 801977a:	f04f 0400 	mov.w	r4, #0
 801977e:	461a      	mov	r2, r3
 8019780:	4623      	mov	r3, r4
 8019782:	f7e6 fdb1 	bl	80002e8 <__aeabi_uldivmod>
 8019786:	4603      	mov	r3, r0
 8019788:	460c      	mov	r4, r1
 801978a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 801978c:	e122      	b.n	80199d4 <UART_SetConfig+0x13ac>
 801978e:	bf00      	nop
 8019790:	51615500 	.word	0x51615500
 8019794:	00000000 	.word	0x00000000
 8019798:	a2c2aa00 	.word	0xa2c2aa00
 801979c:	00000000 	.word	0x00000000
 80197a0:	58024400 	.word	0x58024400
 80197a4:	03d09000 	.word	0x03d09000
 80197a8:	d0900000 	.word	0xd0900000
 80197ac:	07a12000 	.word	0x07a12000
 80197b0:	0f424000 	.word	0x0f424000
 80197b4:	1e848000 	.word	0x1e848000
 80197b8:	3d090000 	.word	0x3d090000
 80197bc:	61a80000 	.word	0x61a80000
 80197c0:	7a120000 	.word	0x7a120000
 80197c4:	f4240000 	.word	0xf4240000
 80197c8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80197cc:	687b      	ldr	r3, [r7, #4]
 80197ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d05b      	beq.n	801988c <UART_SetConfig+0x1264>
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d8:	2b01      	cmp	r3, #1
 80197da:	d053      	beq.n	8019884 <UART_SetConfig+0x125c>
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e0:	2b02      	cmp	r3, #2
 80197e2:	d04b      	beq.n	801987c <UART_SetConfig+0x1254>
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e8:	2b03      	cmp	r3, #3
 80197ea:	d043      	beq.n	8019874 <UART_SetConfig+0x124c>
 80197ec:	687b      	ldr	r3, [r7, #4]
 80197ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f0:	2b04      	cmp	r3, #4
 80197f2:	d03b      	beq.n	801986c <UART_SetConfig+0x1244>
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f8:	2b05      	cmp	r3, #5
 80197fa:	d033      	beq.n	8019864 <UART_SetConfig+0x123c>
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019800:	2b06      	cmp	r3, #6
 8019802:	d02b      	beq.n	801985c <UART_SetConfig+0x1234>
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019808:	2b07      	cmp	r3, #7
 801980a:	d023      	beq.n	8019854 <UART_SetConfig+0x122c>
 801980c:	687b      	ldr	r3, [r7, #4]
 801980e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019810:	2b08      	cmp	r3, #8
 8019812:	d01b      	beq.n	801984c <UART_SetConfig+0x1224>
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019818:	2b09      	cmp	r3, #9
 801981a:	d013      	beq.n	8019844 <UART_SetConfig+0x121c>
 801981c:	687b      	ldr	r3, [r7, #4]
 801981e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019820:	2b0a      	cmp	r3, #10
 8019822:	d00b      	beq.n	801983c <UART_SetConfig+0x1214>
 8019824:	687b      	ldr	r3, [r7, #4]
 8019826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019828:	2b0b      	cmp	r3, #11
 801982a:	d103      	bne.n	8019834 <UART_SetConfig+0x120c>
 801982c:	4bc0      	ldr	r3, [pc, #768]	; (8019b30 <UART_SetConfig+0x1508>)
 801982e:	f04f 0400 	mov.w	r4, #0
 8019832:	e02e      	b.n	8019892 <UART_SetConfig+0x126a>
 8019834:	4bbf      	ldr	r3, [pc, #764]	; (8019b34 <UART_SetConfig+0x150c>)
 8019836:	f04f 0400 	mov.w	r4, #0
 801983a:	e02a      	b.n	8019892 <UART_SetConfig+0x126a>
 801983c:	4bbe      	ldr	r3, [pc, #760]	; (8019b38 <UART_SetConfig+0x1510>)
 801983e:	f04f 0400 	mov.w	r4, #0
 8019842:	e026      	b.n	8019892 <UART_SetConfig+0x126a>
 8019844:	4bbd      	ldr	r3, [pc, #756]	; (8019b3c <UART_SetConfig+0x1514>)
 8019846:	f04f 0400 	mov.w	r4, #0
 801984a:	e022      	b.n	8019892 <UART_SetConfig+0x126a>
 801984c:	4bbc      	ldr	r3, [pc, #752]	; (8019b40 <UART_SetConfig+0x1518>)
 801984e:	f04f 0400 	mov.w	r4, #0
 8019852:	e01e      	b.n	8019892 <UART_SetConfig+0x126a>
 8019854:	4bbb      	ldr	r3, [pc, #748]	; (8019b44 <UART_SetConfig+0x151c>)
 8019856:	f04f 0400 	mov.w	r4, #0
 801985a:	e01a      	b.n	8019892 <UART_SetConfig+0x126a>
 801985c:	a4b0      	add	r4, pc, #704	; (adr r4, 8019b20 <UART_SetConfig+0x14f8>)
 801985e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8019862:	e016      	b.n	8019892 <UART_SetConfig+0x126a>
 8019864:	4bb8      	ldr	r3, [pc, #736]	; (8019b48 <UART_SetConfig+0x1520>)
 8019866:	f04f 0400 	mov.w	r4, #0
 801986a:	e012      	b.n	8019892 <UART_SetConfig+0x126a>
 801986c:	4bb7      	ldr	r3, [pc, #732]	; (8019b4c <UART_SetConfig+0x1524>)
 801986e:	f04f 0400 	mov.w	r4, #0
 8019872:	e00e      	b.n	8019892 <UART_SetConfig+0x126a>
 8019874:	a4ac      	add	r4, pc, #688	; (adr r4, 8019b28 <UART_SetConfig+0x1500>)
 8019876:	e9d4 3400 	ldrd	r3, r4, [r4]
 801987a:	e00a      	b.n	8019892 <UART_SetConfig+0x126a>
 801987c:	4bb4      	ldr	r3, [pc, #720]	; (8019b50 <UART_SetConfig+0x1528>)
 801987e:	f04f 0400 	mov.w	r4, #0
 8019882:	e006      	b.n	8019892 <UART_SetConfig+0x126a>
 8019884:	4bb3      	ldr	r3, [pc, #716]	; (8019b54 <UART_SetConfig+0x152c>)
 8019886:	f04f 0400 	mov.w	r4, #0
 801988a:	e002      	b.n	8019892 <UART_SetConfig+0x126a>
 801988c:	4ba9      	ldr	r3, [pc, #676]	; (8019b34 <UART_SetConfig+0x150c>)
 801988e:	f04f 0400 	mov.w	r4, #0
 8019892:	687a      	ldr	r2, [r7, #4]
 8019894:	6852      	ldr	r2, [r2, #4]
 8019896:	0852      	lsrs	r2, r2, #1
 8019898:	4611      	mov	r1, r2
 801989a:	f04f 0200 	mov.w	r2, #0
 801989e:	eb13 0b01 	adds.w	fp, r3, r1
 80198a2:	eb44 0c02 	adc.w	ip, r4, r2
 80198a6:	4658      	mov	r0, fp
 80198a8:	4661      	mov	r1, ip
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	f04f 0400 	mov.w	r4, #0
 80198b2:	461a      	mov	r2, r3
 80198b4:	4623      	mov	r3, r4
 80198b6:	f7e6 fd17 	bl	80002e8 <__aeabi_uldivmod>
 80198ba:	4603      	mov	r3, r0
 80198bc:	460c      	mov	r4, r1
 80198be:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80198c0:	e088      	b.n	80199d4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d064      	beq.n	8019994 <UART_SetConfig+0x136c>
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ce:	2b01      	cmp	r3, #1
 80198d0:	d05b      	beq.n	801998a <UART_SetConfig+0x1362>
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d6:	2b02      	cmp	r3, #2
 80198d8:	d052      	beq.n	8019980 <UART_SetConfig+0x1358>
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198de:	2b03      	cmp	r3, #3
 80198e0:	d04a      	beq.n	8019978 <UART_SetConfig+0x1350>
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198e6:	2b04      	cmp	r3, #4
 80198e8:	d041      	beq.n	801996e <UART_SetConfig+0x1346>
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ee:	2b05      	cmp	r3, #5
 80198f0:	d039      	beq.n	8019966 <UART_SetConfig+0x133e>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198f6:	2b06      	cmp	r3, #6
 80198f8:	d031      	beq.n	801995e <UART_SetConfig+0x1336>
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198fe:	2b07      	cmp	r3, #7
 8019900:	d028      	beq.n	8019954 <UART_SetConfig+0x132c>
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019906:	2b08      	cmp	r3, #8
 8019908:	d01f      	beq.n	801994a <UART_SetConfig+0x1322>
 801990a:	687b      	ldr	r3, [r7, #4]
 801990c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990e:	2b09      	cmp	r3, #9
 8019910:	d016      	beq.n	8019940 <UART_SetConfig+0x1318>
 8019912:	687b      	ldr	r3, [r7, #4]
 8019914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019916:	2b0a      	cmp	r3, #10
 8019918:	d00d      	beq.n	8019936 <UART_SetConfig+0x130e>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991e:	2b0b      	cmp	r3, #11
 8019920:	d104      	bne.n	801992c <UART_SetConfig+0x1304>
 8019922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019926:	f04f 0400 	mov.w	r4, #0
 801992a:	e037      	b.n	801999c <UART_SetConfig+0x1374>
 801992c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019930:	f04f 0400 	mov.w	r4, #0
 8019934:	e032      	b.n	801999c <UART_SetConfig+0x1374>
 8019936:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801993a:	f04f 0400 	mov.w	r4, #0
 801993e:	e02d      	b.n	801999c <UART_SetConfig+0x1374>
 8019940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019944:	f04f 0400 	mov.w	r4, #0
 8019948:	e028      	b.n	801999c <UART_SetConfig+0x1374>
 801994a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801994e:	f04f 0400 	mov.w	r4, #0
 8019952:	e023      	b.n	801999c <UART_SetConfig+0x1374>
 8019954:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019958:	f04f 0400 	mov.w	r4, #0
 801995c:	e01e      	b.n	801999c <UART_SetConfig+0x1374>
 801995e:	4b7e      	ldr	r3, [pc, #504]	; (8019b58 <UART_SetConfig+0x1530>)
 8019960:	f04f 0400 	mov.w	r4, #0
 8019964:	e01a      	b.n	801999c <UART_SetConfig+0x1374>
 8019966:	4b7d      	ldr	r3, [pc, #500]	; (8019b5c <UART_SetConfig+0x1534>)
 8019968:	f04f 0400 	mov.w	r4, #0
 801996c:	e016      	b.n	801999c <UART_SetConfig+0x1374>
 801996e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019972:	f04f 0400 	mov.w	r4, #0
 8019976:	e011      	b.n	801999c <UART_SetConfig+0x1374>
 8019978:	4b79      	ldr	r3, [pc, #484]	; (8019b60 <UART_SetConfig+0x1538>)
 801997a:	f04f 0400 	mov.w	r4, #0
 801997e:	e00d      	b.n	801999c <UART_SetConfig+0x1374>
 8019980:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8019984:	f04f 0400 	mov.w	r4, #0
 8019988:	e008      	b.n	801999c <UART_SetConfig+0x1374>
 801998a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801998e:	f04f 0400 	mov.w	r4, #0
 8019992:	e003      	b.n	801999c <UART_SetConfig+0x1374>
 8019994:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019998:	f04f 0400 	mov.w	r4, #0
 801999c:	687a      	ldr	r2, [r7, #4]
 801999e:	6852      	ldr	r2, [r2, #4]
 80199a0:	0852      	lsrs	r2, r2, #1
 80199a2:	4611      	mov	r1, r2
 80199a4:	f04f 0200 	mov.w	r2, #0
 80199a8:	eb13 0b01 	adds.w	fp, r3, r1
 80199ac:	eb44 0c02 	adc.w	ip, r4, r2
 80199b0:	4658      	mov	r0, fp
 80199b2:	4661      	mov	r1, ip
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	685b      	ldr	r3, [r3, #4]
 80199b8:	f04f 0400 	mov.w	r4, #0
 80199bc:	461a      	mov	r2, r3
 80199be:	4623      	mov	r3, r4
 80199c0:	f7e6 fc92 	bl	80002e8 <__aeabi_uldivmod>
 80199c4:	4603      	mov	r3, r0
 80199c6:	460c      	mov	r4, r1
 80199c8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80199ca:	e003      	b.n	80199d4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80199cc:	2301      	movs	r3, #1
 80199ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80199d2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80199d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80199da:	d309      	bcc.n	80199f0 <UART_SetConfig+0x13c8>
 80199dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80199de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80199e2:	d205      	bcs.n	80199f0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80199ea:	60da      	str	r2, [r3, #12]
 80199ec:	f000 bf85 	b.w	801a8fa <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 80199f0:	2301      	movs	r3, #1
 80199f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80199f6:	f000 bf80 	b.w	801a8fa <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	69db      	ldr	r3, [r3, #28]
 80199fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019a02:	f040 83da 	bne.w	801a1ba <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8019a06:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019a0a:	2b40      	cmp	r3, #64	; 0x40
 8019a0c:	f200 83b3 	bhi.w	801a176 <UART_SetConfig+0x1b4e>
 8019a10:	a201      	add	r2, pc, #4	; (adr r2, 8019a18 <UART_SetConfig+0x13f0>)
 8019a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019a16:	bf00      	nop
 8019a18:	08019b65 	.word	0x08019b65
 8019a1c:	08019c1d 	.word	0x08019c1d
 8019a20:	0801a177 	.word	0x0801a177
 8019a24:	0801a177 	.word	0x0801a177
 8019a28:	08019cd5 	.word	0x08019cd5
 8019a2c:	0801a177 	.word	0x0801a177
 8019a30:	0801a177 	.word	0x0801a177
 8019a34:	0801a177 	.word	0x0801a177
 8019a38:	08019d91 	.word	0x08019d91
 8019a3c:	0801a177 	.word	0x0801a177
 8019a40:	0801a177 	.word	0x0801a177
 8019a44:	0801a177 	.word	0x0801a177
 8019a48:	0801a177 	.word	0x0801a177
 8019a4c:	0801a177 	.word	0x0801a177
 8019a50:	0801a177 	.word	0x0801a177
 8019a54:	0801a177 	.word	0x0801a177
 8019a58:	08019e4d 	.word	0x08019e4d
 8019a5c:	0801a177 	.word	0x0801a177
 8019a60:	0801a177 	.word	0x0801a177
 8019a64:	0801a177 	.word	0x0801a177
 8019a68:	0801a177 	.word	0x0801a177
 8019a6c:	0801a177 	.word	0x0801a177
 8019a70:	0801a177 	.word	0x0801a177
 8019a74:	0801a177 	.word	0x0801a177
 8019a78:	0801a177 	.word	0x0801a177
 8019a7c:	0801a177 	.word	0x0801a177
 8019a80:	0801a177 	.word	0x0801a177
 8019a84:	0801a177 	.word	0x0801a177
 8019a88:	0801a177 	.word	0x0801a177
 8019a8c:	0801a177 	.word	0x0801a177
 8019a90:	0801a177 	.word	0x0801a177
 8019a94:	0801a177 	.word	0x0801a177
 8019a98:	08019fbf 	.word	0x08019fbf
 8019a9c:	0801a177 	.word	0x0801a177
 8019aa0:	0801a177 	.word	0x0801a177
 8019aa4:	0801a177 	.word	0x0801a177
 8019aa8:	0801a177 	.word	0x0801a177
 8019aac:	0801a177 	.word	0x0801a177
 8019ab0:	0801a177 	.word	0x0801a177
 8019ab4:	0801a177 	.word	0x0801a177
 8019ab8:	0801a177 	.word	0x0801a177
 8019abc:	0801a177 	.word	0x0801a177
 8019ac0:	0801a177 	.word	0x0801a177
 8019ac4:	0801a177 	.word	0x0801a177
 8019ac8:	0801a177 	.word	0x0801a177
 8019acc:	0801a177 	.word	0x0801a177
 8019ad0:	0801a177 	.word	0x0801a177
 8019ad4:	0801a177 	.word	0x0801a177
 8019ad8:	0801a177 	.word	0x0801a177
 8019adc:	0801a177 	.word	0x0801a177
 8019ae0:	0801a177 	.word	0x0801a177
 8019ae4:	0801a177 	.word	0x0801a177
 8019ae8:	0801a177 	.word	0x0801a177
 8019aec:	0801a177 	.word	0x0801a177
 8019af0:	0801a177 	.word	0x0801a177
 8019af4:	0801a177 	.word	0x0801a177
 8019af8:	0801a177 	.word	0x0801a177
 8019afc:	0801a177 	.word	0x0801a177
 8019b00:	0801a177 	.word	0x0801a177
 8019b04:	0801a177 	.word	0x0801a177
 8019b08:	0801a177 	.word	0x0801a177
 8019b0c:	0801a177 	.word	0x0801a177
 8019b10:	0801a177 	.word	0x0801a177
 8019b14:	0801a177 	.word	0x0801a177
 8019b18:	0801a0b5 	.word	0x0801a0b5
 8019b1c:	f3af 8000 	nop.w
 8019b20:	05161500 	.word	0x05161500
 8019b24:	00000000 	.word	0x00000000
 8019b28:	0a2c2a00 	.word	0x0a2c2a00
 8019b2c:	00000000 	.word	0x00000000
 8019b30:	003d0900 	.word	0x003d0900
 8019b34:	3d090000 	.word	0x3d090000
 8019b38:	007a1200 	.word	0x007a1200
 8019b3c:	00f42400 	.word	0x00f42400
 8019b40:	01e84800 	.word	0x01e84800
 8019b44:	03d09000 	.word	0x03d09000
 8019b48:	061a8000 	.word	0x061a8000
 8019b4c:	07a12000 	.word	0x07a12000
 8019b50:	0f424000 	.word	0x0f424000
 8019b54:	1e848000 	.word	0x1e848000
 8019b58:	000aaa00 	.word	0x000aaa00
 8019b5c:	000ccc00 	.word	0x000ccc00
 8019b60:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019b64:	f7fc f874 	bl	8015c50 <HAL_RCC_GetPCLK1Freq>
 8019b68:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d044      	beq.n	8019bfc <UART_SetConfig+0x15d4>
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d03e      	beq.n	8019bf8 <UART_SetConfig+0x15d0>
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b7e:	2b02      	cmp	r3, #2
 8019b80:	d038      	beq.n	8019bf4 <UART_SetConfig+0x15cc>
 8019b82:	687b      	ldr	r3, [r7, #4]
 8019b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b86:	2b03      	cmp	r3, #3
 8019b88:	d032      	beq.n	8019bf0 <UART_SetConfig+0x15c8>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b8e:	2b04      	cmp	r3, #4
 8019b90:	d02c      	beq.n	8019bec <UART_SetConfig+0x15c4>
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b96:	2b05      	cmp	r3, #5
 8019b98:	d026      	beq.n	8019be8 <UART_SetConfig+0x15c0>
 8019b9a:	687b      	ldr	r3, [r7, #4]
 8019b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b9e:	2b06      	cmp	r3, #6
 8019ba0:	d020      	beq.n	8019be4 <UART_SetConfig+0x15bc>
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ba6:	2b07      	cmp	r3, #7
 8019ba8:	d01a      	beq.n	8019be0 <UART_SetConfig+0x15b8>
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bae:	2b08      	cmp	r3, #8
 8019bb0:	d014      	beq.n	8019bdc <UART_SetConfig+0x15b4>
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bb6:	2b09      	cmp	r3, #9
 8019bb8:	d00e      	beq.n	8019bd8 <UART_SetConfig+0x15b0>
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bbe:	2b0a      	cmp	r3, #10
 8019bc0:	d008      	beq.n	8019bd4 <UART_SetConfig+0x15ac>
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bc6:	2b0b      	cmp	r3, #11
 8019bc8:	d102      	bne.n	8019bd0 <UART_SetConfig+0x15a8>
 8019bca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019bce:	e016      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	e014      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bd4:	2380      	movs	r3, #128	; 0x80
 8019bd6:	e012      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bd8:	2340      	movs	r3, #64	; 0x40
 8019bda:	e010      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bdc:	2320      	movs	r3, #32
 8019bde:	e00e      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019be0:	2310      	movs	r3, #16
 8019be2:	e00c      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019be4:	230c      	movs	r3, #12
 8019be6:	e00a      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019be8:	230a      	movs	r3, #10
 8019bea:	e008      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bec:	2308      	movs	r3, #8
 8019bee:	e006      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bf0:	2306      	movs	r3, #6
 8019bf2:	e004      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bf4:	2304      	movs	r3, #4
 8019bf6:	e002      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bf8:	2302      	movs	r3, #2
 8019bfa:	e000      	b.n	8019bfe <UART_SetConfig+0x15d6>
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c04:	005a      	lsls	r2, r3, #1
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	685b      	ldr	r3, [r3, #4]
 8019c0a:	085b      	lsrs	r3, r3, #1
 8019c0c:	441a      	add	r2, r3
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	685b      	ldr	r3, [r3, #4]
 8019c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c16:	b29b      	uxth	r3, r3
 8019c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019c1a:	e2b0      	b.n	801a17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019c1c:	f7fc f82e 	bl	8015c7c <HAL_RCC_GetPCLK2Freq>
 8019c20:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d044      	beq.n	8019cb4 <UART_SetConfig+0x168c>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c2e:	2b01      	cmp	r3, #1
 8019c30:	d03e      	beq.n	8019cb0 <UART_SetConfig+0x1688>
 8019c32:	687b      	ldr	r3, [r7, #4]
 8019c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c36:	2b02      	cmp	r3, #2
 8019c38:	d038      	beq.n	8019cac <UART_SetConfig+0x1684>
 8019c3a:	687b      	ldr	r3, [r7, #4]
 8019c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c3e:	2b03      	cmp	r3, #3
 8019c40:	d032      	beq.n	8019ca8 <UART_SetConfig+0x1680>
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c46:	2b04      	cmp	r3, #4
 8019c48:	d02c      	beq.n	8019ca4 <UART_SetConfig+0x167c>
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c4e:	2b05      	cmp	r3, #5
 8019c50:	d026      	beq.n	8019ca0 <UART_SetConfig+0x1678>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c56:	2b06      	cmp	r3, #6
 8019c58:	d020      	beq.n	8019c9c <UART_SetConfig+0x1674>
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c5e:	2b07      	cmp	r3, #7
 8019c60:	d01a      	beq.n	8019c98 <UART_SetConfig+0x1670>
 8019c62:	687b      	ldr	r3, [r7, #4]
 8019c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c66:	2b08      	cmp	r3, #8
 8019c68:	d014      	beq.n	8019c94 <UART_SetConfig+0x166c>
 8019c6a:	687b      	ldr	r3, [r7, #4]
 8019c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c6e:	2b09      	cmp	r3, #9
 8019c70:	d00e      	beq.n	8019c90 <UART_SetConfig+0x1668>
 8019c72:	687b      	ldr	r3, [r7, #4]
 8019c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c76:	2b0a      	cmp	r3, #10
 8019c78:	d008      	beq.n	8019c8c <UART_SetConfig+0x1664>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7e:	2b0b      	cmp	r3, #11
 8019c80:	d102      	bne.n	8019c88 <UART_SetConfig+0x1660>
 8019c82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019c86:	e016      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c88:	2301      	movs	r3, #1
 8019c8a:	e014      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c8c:	2380      	movs	r3, #128	; 0x80
 8019c8e:	e012      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c90:	2340      	movs	r3, #64	; 0x40
 8019c92:	e010      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c94:	2320      	movs	r3, #32
 8019c96:	e00e      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c98:	2310      	movs	r3, #16
 8019c9a:	e00c      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019c9c:	230c      	movs	r3, #12
 8019c9e:	e00a      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019ca0:	230a      	movs	r3, #10
 8019ca2:	e008      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019ca4:	2308      	movs	r3, #8
 8019ca6:	e006      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019ca8:	2306      	movs	r3, #6
 8019caa:	e004      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019cac:	2304      	movs	r3, #4
 8019cae:	e002      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019cb0:	2302      	movs	r3, #2
 8019cb2:	e000      	b.n	8019cb6 <UART_SetConfig+0x168e>
 8019cb4:	2301      	movs	r3, #1
 8019cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cbc:	005a      	lsls	r2, r3, #1
 8019cbe:	687b      	ldr	r3, [r7, #4]
 8019cc0:	685b      	ldr	r3, [r3, #4]
 8019cc2:	085b      	lsrs	r3, r3, #1
 8019cc4:	441a      	add	r2, r3
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cce:	b29b      	uxth	r3, r3
 8019cd0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019cd2:	e254      	b.n	801a17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019cd4:	f107 0318 	add.w	r3, r7, #24
 8019cd8:	4618      	mov	r0, r3
 8019cda:	f7fc fed9 	bl	8016a90 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019cde:	69fa      	ldr	r2, [r7, #28]
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce4:	2b00      	cmp	r3, #0
 8019ce6:	d044      	beq.n	8019d72 <UART_SetConfig+0x174a>
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cec:	2b01      	cmp	r3, #1
 8019cee:	d03e      	beq.n	8019d6e <UART_SetConfig+0x1746>
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf4:	2b02      	cmp	r3, #2
 8019cf6:	d038      	beq.n	8019d6a <UART_SetConfig+0x1742>
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cfc:	2b03      	cmp	r3, #3
 8019cfe:	d032      	beq.n	8019d66 <UART_SetConfig+0x173e>
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d04:	2b04      	cmp	r3, #4
 8019d06:	d02c      	beq.n	8019d62 <UART_SetConfig+0x173a>
 8019d08:	687b      	ldr	r3, [r7, #4]
 8019d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d0c:	2b05      	cmp	r3, #5
 8019d0e:	d026      	beq.n	8019d5e <UART_SetConfig+0x1736>
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d14:	2b06      	cmp	r3, #6
 8019d16:	d020      	beq.n	8019d5a <UART_SetConfig+0x1732>
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d1c:	2b07      	cmp	r3, #7
 8019d1e:	d01a      	beq.n	8019d56 <UART_SetConfig+0x172e>
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d24:	2b08      	cmp	r3, #8
 8019d26:	d014      	beq.n	8019d52 <UART_SetConfig+0x172a>
 8019d28:	687b      	ldr	r3, [r7, #4]
 8019d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d2c:	2b09      	cmp	r3, #9
 8019d2e:	d00e      	beq.n	8019d4e <UART_SetConfig+0x1726>
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d34:	2b0a      	cmp	r3, #10
 8019d36:	d008      	beq.n	8019d4a <UART_SetConfig+0x1722>
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d3c:	2b0b      	cmp	r3, #11
 8019d3e:	d102      	bne.n	8019d46 <UART_SetConfig+0x171e>
 8019d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d44:	e016      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d46:	2301      	movs	r3, #1
 8019d48:	e014      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d4a:	2380      	movs	r3, #128	; 0x80
 8019d4c:	e012      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d4e:	2340      	movs	r3, #64	; 0x40
 8019d50:	e010      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d52:	2320      	movs	r3, #32
 8019d54:	e00e      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d56:	2310      	movs	r3, #16
 8019d58:	e00c      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d5a:	230c      	movs	r3, #12
 8019d5c:	e00a      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d5e:	230a      	movs	r3, #10
 8019d60:	e008      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d62:	2308      	movs	r3, #8
 8019d64:	e006      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d66:	2306      	movs	r3, #6
 8019d68:	e004      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d6a:	2304      	movs	r3, #4
 8019d6c:	e002      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d6e:	2302      	movs	r3, #2
 8019d70:	e000      	b.n	8019d74 <UART_SetConfig+0x174c>
 8019d72:	2301      	movs	r3, #1
 8019d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d78:	005a      	lsls	r2, r3, #1
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	685b      	ldr	r3, [r3, #4]
 8019d7e:	085b      	lsrs	r3, r3, #1
 8019d80:	441a      	add	r2, r3
 8019d82:	687b      	ldr	r3, [r7, #4]
 8019d84:	685b      	ldr	r3, [r3, #4]
 8019d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d8a:	b29b      	uxth	r3, r3
 8019d8c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019d8e:	e1f6      	b.n	801a17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019d90:	f107 030c 	add.w	r3, r7, #12
 8019d94:	4618      	mov	r0, r3
 8019d96:	f7fc ffc7 	bl	8016d28 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019d9a:	693a      	ldr	r2, [r7, #16]
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d044      	beq.n	8019e2e <UART_SetConfig+0x1806>
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019da8:	2b01      	cmp	r3, #1
 8019daa:	d03e      	beq.n	8019e2a <UART_SetConfig+0x1802>
 8019dac:	687b      	ldr	r3, [r7, #4]
 8019dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db0:	2b02      	cmp	r3, #2
 8019db2:	d038      	beq.n	8019e26 <UART_SetConfig+0x17fe>
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019db8:	2b03      	cmp	r3, #3
 8019dba:	d032      	beq.n	8019e22 <UART_SetConfig+0x17fa>
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc0:	2b04      	cmp	r3, #4
 8019dc2:	d02c      	beq.n	8019e1e <UART_SetConfig+0x17f6>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc8:	2b05      	cmp	r3, #5
 8019dca:	d026      	beq.n	8019e1a <UART_SetConfig+0x17f2>
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd0:	2b06      	cmp	r3, #6
 8019dd2:	d020      	beq.n	8019e16 <UART_SetConfig+0x17ee>
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd8:	2b07      	cmp	r3, #7
 8019dda:	d01a      	beq.n	8019e12 <UART_SetConfig+0x17ea>
 8019ddc:	687b      	ldr	r3, [r7, #4]
 8019dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de0:	2b08      	cmp	r3, #8
 8019de2:	d014      	beq.n	8019e0e <UART_SetConfig+0x17e6>
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de8:	2b09      	cmp	r3, #9
 8019dea:	d00e      	beq.n	8019e0a <UART_SetConfig+0x17e2>
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df0:	2b0a      	cmp	r3, #10
 8019df2:	d008      	beq.n	8019e06 <UART_SetConfig+0x17de>
 8019df4:	687b      	ldr	r3, [r7, #4]
 8019df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df8:	2b0b      	cmp	r3, #11
 8019dfa:	d102      	bne.n	8019e02 <UART_SetConfig+0x17da>
 8019dfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e00:	e016      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e02:	2301      	movs	r3, #1
 8019e04:	e014      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e06:	2380      	movs	r3, #128	; 0x80
 8019e08:	e012      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e0a:	2340      	movs	r3, #64	; 0x40
 8019e0c:	e010      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e0e:	2320      	movs	r3, #32
 8019e10:	e00e      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e12:	2310      	movs	r3, #16
 8019e14:	e00c      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e16:	230c      	movs	r3, #12
 8019e18:	e00a      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e1a:	230a      	movs	r3, #10
 8019e1c:	e008      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e1e:	2308      	movs	r3, #8
 8019e20:	e006      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e22:	2306      	movs	r3, #6
 8019e24:	e004      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e26:	2304      	movs	r3, #4
 8019e28:	e002      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e2a:	2302      	movs	r3, #2
 8019e2c:	e000      	b.n	8019e30 <UART_SetConfig+0x1808>
 8019e2e:	2301      	movs	r3, #1
 8019e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e34:	005a      	lsls	r2, r3, #1
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	685b      	ldr	r3, [r3, #4]
 8019e3a:	085b      	lsrs	r3, r3, #1
 8019e3c:	441a      	add	r2, r3
 8019e3e:	687b      	ldr	r3, [r7, #4]
 8019e40:	685b      	ldr	r3, [r3, #4]
 8019e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e46:	b29b      	uxth	r3, r3
 8019e48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019e4a:	e198      	b.n	801a17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019e4c:	4b87      	ldr	r3, [pc, #540]	; (801a06c <UART_SetConfig+0x1a44>)
 8019e4e:	681b      	ldr	r3, [r3, #0]
 8019e50:	f003 0320 	and.w	r3, r3, #32
 8019e54:	2b00      	cmp	r3, #0
 8019e56:	d05e      	beq.n	8019f16 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019e58:	4b84      	ldr	r3, [pc, #528]	; (801a06c <UART_SetConfig+0x1a44>)
 8019e5a:	681b      	ldr	r3, [r3, #0]
 8019e5c:	08db      	lsrs	r3, r3, #3
 8019e5e:	f003 0303 	and.w	r3, r3, #3
 8019e62:	4a83      	ldr	r2, [pc, #524]	; (801a070 <UART_SetConfig+0x1a48>)
 8019e64:	40da      	lsrs	r2, r3
 8019e66:	687b      	ldr	r3, [r7, #4]
 8019e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d044      	beq.n	8019ef8 <UART_SetConfig+0x18d0>
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e72:	2b01      	cmp	r3, #1
 8019e74:	d03e      	beq.n	8019ef4 <UART_SetConfig+0x18cc>
 8019e76:	687b      	ldr	r3, [r7, #4]
 8019e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e7a:	2b02      	cmp	r3, #2
 8019e7c:	d038      	beq.n	8019ef0 <UART_SetConfig+0x18c8>
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e82:	2b03      	cmp	r3, #3
 8019e84:	d032      	beq.n	8019eec <UART_SetConfig+0x18c4>
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e8a:	2b04      	cmp	r3, #4
 8019e8c:	d02c      	beq.n	8019ee8 <UART_SetConfig+0x18c0>
 8019e8e:	687b      	ldr	r3, [r7, #4]
 8019e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e92:	2b05      	cmp	r3, #5
 8019e94:	d026      	beq.n	8019ee4 <UART_SetConfig+0x18bc>
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9a:	2b06      	cmp	r3, #6
 8019e9c:	d020      	beq.n	8019ee0 <UART_SetConfig+0x18b8>
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea2:	2b07      	cmp	r3, #7
 8019ea4:	d01a      	beq.n	8019edc <UART_SetConfig+0x18b4>
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eaa:	2b08      	cmp	r3, #8
 8019eac:	d014      	beq.n	8019ed8 <UART_SetConfig+0x18b0>
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eb2:	2b09      	cmp	r3, #9
 8019eb4:	d00e      	beq.n	8019ed4 <UART_SetConfig+0x18ac>
 8019eb6:	687b      	ldr	r3, [r7, #4]
 8019eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eba:	2b0a      	cmp	r3, #10
 8019ebc:	d008      	beq.n	8019ed0 <UART_SetConfig+0x18a8>
 8019ebe:	687b      	ldr	r3, [r7, #4]
 8019ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ec2:	2b0b      	cmp	r3, #11
 8019ec4:	d102      	bne.n	8019ecc <UART_SetConfig+0x18a4>
 8019ec6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019eca:	e016      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ecc:	2301      	movs	r3, #1
 8019ece:	e014      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ed0:	2380      	movs	r3, #128	; 0x80
 8019ed2:	e012      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ed4:	2340      	movs	r3, #64	; 0x40
 8019ed6:	e010      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ed8:	2320      	movs	r3, #32
 8019eda:	e00e      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019edc:	2310      	movs	r3, #16
 8019ede:	e00c      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ee0:	230c      	movs	r3, #12
 8019ee2:	e00a      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ee4:	230a      	movs	r3, #10
 8019ee6:	e008      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ee8:	2308      	movs	r3, #8
 8019eea:	e006      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019eec:	2306      	movs	r3, #6
 8019eee:	e004      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ef0:	2304      	movs	r3, #4
 8019ef2:	e002      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ef4:	2302      	movs	r3, #2
 8019ef6:	e000      	b.n	8019efa <UART_SetConfig+0x18d2>
 8019ef8:	2301      	movs	r3, #1
 8019efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8019efe:	005a      	lsls	r2, r3, #1
 8019f00:	687b      	ldr	r3, [r7, #4]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	085b      	lsrs	r3, r3, #1
 8019f06:	441a      	add	r2, r3
 8019f08:	687b      	ldr	r3, [r7, #4]
 8019f0a:	685b      	ldr	r3, [r3, #4]
 8019f0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8019f14:	e133      	b.n	801a17e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d043      	beq.n	8019fa6 <UART_SetConfig+0x197e>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f22:	2b01      	cmp	r3, #1
 8019f24:	d03d      	beq.n	8019fa2 <UART_SetConfig+0x197a>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f2a:	2b02      	cmp	r3, #2
 8019f2c:	d037      	beq.n	8019f9e <UART_SetConfig+0x1976>
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f32:	2b03      	cmp	r3, #3
 8019f34:	d031      	beq.n	8019f9a <UART_SetConfig+0x1972>
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3a:	2b04      	cmp	r3, #4
 8019f3c:	d02b      	beq.n	8019f96 <UART_SetConfig+0x196e>
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f42:	2b05      	cmp	r3, #5
 8019f44:	d025      	beq.n	8019f92 <UART_SetConfig+0x196a>
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4a:	2b06      	cmp	r3, #6
 8019f4c:	d01f      	beq.n	8019f8e <UART_SetConfig+0x1966>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f52:	2b07      	cmp	r3, #7
 8019f54:	d019      	beq.n	8019f8a <UART_SetConfig+0x1962>
 8019f56:	687b      	ldr	r3, [r7, #4]
 8019f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f5a:	2b08      	cmp	r3, #8
 8019f5c:	d013      	beq.n	8019f86 <UART_SetConfig+0x195e>
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f62:	2b09      	cmp	r3, #9
 8019f64:	d00d      	beq.n	8019f82 <UART_SetConfig+0x195a>
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6a:	2b0a      	cmp	r3, #10
 8019f6c:	d007      	beq.n	8019f7e <UART_SetConfig+0x1956>
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f72:	2b0b      	cmp	r3, #11
 8019f74:	d101      	bne.n	8019f7a <UART_SetConfig+0x1952>
 8019f76:	4b3f      	ldr	r3, [pc, #252]	; (801a074 <UART_SetConfig+0x1a4c>)
 8019f78:	e016      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f7a:	4b3f      	ldr	r3, [pc, #252]	; (801a078 <UART_SetConfig+0x1a50>)
 8019f7c:	e014      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f7e:	4b3f      	ldr	r3, [pc, #252]	; (801a07c <UART_SetConfig+0x1a54>)
 8019f80:	e012      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f82:	4b3f      	ldr	r3, [pc, #252]	; (801a080 <UART_SetConfig+0x1a58>)
 8019f84:	e010      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f86:	4b3f      	ldr	r3, [pc, #252]	; (801a084 <UART_SetConfig+0x1a5c>)
 8019f88:	e00e      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f8a:	4b3f      	ldr	r3, [pc, #252]	; (801a088 <UART_SetConfig+0x1a60>)
 8019f8c:	e00c      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f8e:	4b3f      	ldr	r3, [pc, #252]	; (801a08c <UART_SetConfig+0x1a64>)
 8019f90:	e00a      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f92:	4b3f      	ldr	r3, [pc, #252]	; (801a090 <UART_SetConfig+0x1a68>)
 8019f94:	e008      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f96:	4b3f      	ldr	r3, [pc, #252]	; (801a094 <UART_SetConfig+0x1a6c>)
 8019f98:	e006      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f9a:	4b3f      	ldr	r3, [pc, #252]	; (801a098 <UART_SetConfig+0x1a70>)
 8019f9c:	e004      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019f9e:	4b3f      	ldr	r3, [pc, #252]	; (801a09c <UART_SetConfig+0x1a74>)
 8019fa0:	e002      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019fa2:	4b33      	ldr	r3, [pc, #204]	; (801a070 <UART_SetConfig+0x1a48>)
 8019fa4:	e000      	b.n	8019fa8 <UART_SetConfig+0x1980>
 8019fa6:	4b34      	ldr	r3, [pc, #208]	; (801a078 <UART_SetConfig+0x1a50>)
 8019fa8:	687a      	ldr	r2, [r7, #4]
 8019faa:	6852      	ldr	r2, [r2, #4]
 8019fac:	0852      	lsrs	r2, r2, #1
 8019fae:	441a      	add	r2, r3
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fb8:	b29b      	uxth	r3, r3
 8019fba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019fbc:	e0df      	b.n	801a17e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019fbe:	687b      	ldr	r3, [r7, #4]
 8019fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d045      	beq.n	801a052 <UART_SetConfig+0x1a2a>
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fca:	2b01      	cmp	r3, #1
 8019fcc:	d03f      	beq.n	801a04e <UART_SetConfig+0x1a26>
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fd2:	2b02      	cmp	r3, #2
 8019fd4:	d039      	beq.n	801a04a <UART_SetConfig+0x1a22>
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fda:	2b03      	cmp	r3, #3
 8019fdc:	d033      	beq.n	801a046 <UART_SetConfig+0x1a1e>
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fe2:	2b04      	cmp	r3, #4
 8019fe4:	d02d      	beq.n	801a042 <UART_SetConfig+0x1a1a>
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fea:	2b05      	cmp	r3, #5
 8019fec:	d027      	beq.n	801a03e <UART_SetConfig+0x1a16>
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff2:	2b06      	cmp	r3, #6
 8019ff4:	d021      	beq.n	801a03a <UART_SetConfig+0x1a12>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ffa:	2b07      	cmp	r3, #7
 8019ffc:	d01b      	beq.n	801a036 <UART_SetConfig+0x1a0e>
 8019ffe:	687b      	ldr	r3, [r7, #4]
 801a000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a002:	2b08      	cmp	r3, #8
 801a004:	d015      	beq.n	801a032 <UART_SetConfig+0x1a0a>
 801a006:	687b      	ldr	r3, [r7, #4]
 801a008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a00a:	2b09      	cmp	r3, #9
 801a00c:	d00f      	beq.n	801a02e <UART_SetConfig+0x1a06>
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a012:	2b0a      	cmp	r3, #10
 801a014:	d008      	beq.n	801a028 <UART_SetConfig+0x1a00>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01a:	2b0b      	cmp	r3, #11
 801a01c:	d102      	bne.n	801a024 <UART_SetConfig+0x19fc>
 801a01e:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a022:	e017      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a024:	4b18      	ldr	r3, [pc, #96]	; (801a088 <UART_SetConfig+0x1a60>)
 801a026:	e015      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a028:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a02c:	e012      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a02e:	4b1c      	ldr	r3, [pc, #112]	; (801a0a0 <UART_SetConfig+0x1a78>)
 801a030:	e010      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a032:	4b1c      	ldr	r3, [pc, #112]	; (801a0a4 <UART_SetConfig+0x1a7c>)
 801a034:	e00e      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a036:	4b0f      	ldr	r3, [pc, #60]	; (801a074 <UART_SetConfig+0x1a4c>)
 801a038:	e00c      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a03a:	4b1b      	ldr	r3, [pc, #108]	; (801a0a8 <UART_SetConfig+0x1a80>)
 801a03c:	e00a      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a03e:	4b1b      	ldr	r3, [pc, #108]	; (801a0ac <UART_SetConfig+0x1a84>)
 801a040:	e008      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a042:	4b0e      	ldr	r3, [pc, #56]	; (801a07c <UART_SetConfig+0x1a54>)
 801a044:	e006      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a046:	4b1a      	ldr	r3, [pc, #104]	; (801a0b0 <UART_SetConfig+0x1a88>)
 801a048:	e004      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a04a:	4b0d      	ldr	r3, [pc, #52]	; (801a080 <UART_SetConfig+0x1a58>)
 801a04c:	e002      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a04e:	4b0d      	ldr	r3, [pc, #52]	; (801a084 <UART_SetConfig+0x1a5c>)
 801a050:	e000      	b.n	801a054 <UART_SetConfig+0x1a2c>
 801a052:	4b0d      	ldr	r3, [pc, #52]	; (801a088 <UART_SetConfig+0x1a60>)
 801a054:	687a      	ldr	r2, [r7, #4]
 801a056:	6852      	ldr	r2, [r2, #4]
 801a058:	0852      	lsrs	r2, r2, #1
 801a05a:	441a      	add	r2, r3
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	685b      	ldr	r3, [r3, #4]
 801a060:	fbb2 f3f3 	udiv	r3, r2, r3
 801a064:	b29b      	uxth	r3, r3
 801a066:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a068:	e089      	b.n	801a17e <UART_SetConfig+0x1b56>
 801a06a:	bf00      	nop
 801a06c:	58024400 	.word	0x58024400
 801a070:	03d09000 	.word	0x03d09000
 801a074:	0007a120 	.word	0x0007a120
 801a078:	07a12000 	.word	0x07a12000
 801a07c:	000f4240 	.word	0x000f4240
 801a080:	001e8480 	.word	0x001e8480
 801a084:	003d0900 	.word	0x003d0900
 801a088:	007a1200 	.word	0x007a1200
 801a08c:	00a2c2aa 	.word	0x00a2c2aa
 801a090:	00c35000 	.word	0x00c35000
 801a094:	00f42400 	.word	0x00f42400
 801a098:	01458554 	.word	0x01458554
 801a09c:	01e84800 	.word	0x01e84800
 801a0a0:	0001e848 	.word	0x0001e848
 801a0a4:	0003d090 	.word	0x0003d090
 801a0a8:	000a2c2a 	.word	0x000a2c2a
 801a0ac:	000c3500 	.word	0x000c3500
 801a0b0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d04f      	beq.n	801a15c <UART_SetConfig+0x1b34>
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0c0:	2b01      	cmp	r3, #1
 801a0c2:	d048      	beq.n	801a156 <UART_SetConfig+0x1b2e>
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0c8:	2b02      	cmp	r3, #2
 801a0ca:	d041      	beq.n	801a150 <UART_SetConfig+0x1b28>
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d0:	2b03      	cmp	r3, #3
 801a0d2:	d03a      	beq.n	801a14a <UART_SetConfig+0x1b22>
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d8:	2b04      	cmp	r3, #4
 801a0da:	d033      	beq.n	801a144 <UART_SetConfig+0x1b1c>
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e0:	2b05      	cmp	r3, #5
 801a0e2:	d02c      	beq.n	801a13e <UART_SetConfig+0x1b16>
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e8:	2b06      	cmp	r3, #6
 801a0ea:	d025      	beq.n	801a138 <UART_SetConfig+0x1b10>
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f0:	2b07      	cmp	r3, #7
 801a0f2:	d01e      	beq.n	801a132 <UART_SetConfig+0x1b0a>
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0f8:	2b08      	cmp	r3, #8
 801a0fa:	d017      	beq.n	801a12c <UART_SetConfig+0x1b04>
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a100:	2b09      	cmp	r3, #9
 801a102:	d010      	beq.n	801a126 <UART_SetConfig+0x1afe>
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a108:	2b0a      	cmp	r3, #10
 801a10a:	d009      	beq.n	801a120 <UART_SetConfig+0x1af8>
 801a10c:	687b      	ldr	r3, [r7, #4]
 801a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a110:	2b0b      	cmp	r3, #11
 801a112:	d102      	bne.n	801a11a <UART_SetConfig+0x1af2>
 801a114:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a118:	e022      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a11a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a11e:	e01f      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a120:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a124:	e01c      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a12a:	e019      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a12c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a130:	e016      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a132:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a136:	e013      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a138:	f241 5354 	movw	r3, #5460	; 0x1554
 801a13c:	e010      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a13e:	f641 1398 	movw	r3, #6552	; 0x1998
 801a142:	e00d      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a144:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a148:	e00a      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a14a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 801a14e:	e007      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a150:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a154:	e004      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a15a:	e001      	b.n	801a160 <UART_SetConfig+0x1b38>
 801a15c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801a160:	687a      	ldr	r2, [r7, #4]
 801a162:	6852      	ldr	r2, [r2, #4]
 801a164:	0852      	lsrs	r2, r2, #1
 801a166:	441a      	add	r2, r3
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	685b      	ldr	r3, [r3, #4]
 801a16c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a170:	b29b      	uxth	r3, r3
 801a172:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a174:	e003      	b.n	801a17e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 801a176:	2301      	movs	r3, #1
 801a178:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a17c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a180:	2b0f      	cmp	r3, #15
 801a182:	d916      	bls.n	801a1b2 <UART_SetConfig+0x1b8a>
 801a184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a186:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a18a:	d212      	bcs.n	801a1b2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801a18c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a18e:	b29b      	uxth	r3, r3
 801a190:	f023 030f 	bic.w	r3, r3, #15
 801a194:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801a196:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a198:	085b      	lsrs	r3, r3, #1
 801a19a:	b29b      	uxth	r3, r3
 801a19c:	f003 0307 	and.w	r3, r3, #7
 801a1a0:	b29a      	uxth	r2, r3
 801a1a2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a1a4:	4313      	orrs	r3, r2
 801a1a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 801a1a8:	687b      	ldr	r3, [r7, #4]
 801a1aa:	681b      	ldr	r3, [r3, #0]
 801a1ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1ae:	60da      	str	r2, [r3, #12]
 801a1b0:	e3a3      	b.n	801a8fa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a1b2:	2301      	movs	r3, #1
 801a1b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801a1b8:	e39f      	b.n	801a8fa <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 801a1ba:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801a1be:	2b40      	cmp	r3, #64	; 0x40
 801a1c0:	f200 8388 	bhi.w	801a8d4 <UART_SetConfig+0x22ac>
 801a1c4:	a201      	add	r2, pc, #4	; (adr r2, 801a1cc <UART_SetConfig+0x1ba4>)
 801a1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a1ca:	bf00      	nop
 801a1cc:	0801a2d1 	.word	0x0801a2d1
 801a1d0:	0801a387 	.word	0x0801a387
 801a1d4:	0801a8d5 	.word	0x0801a8d5
 801a1d8:	0801a8d5 	.word	0x0801a8d5
 801a1dc:	0801a43d 	.word	0x0801a43d
 801a1e0:	0801a8d5 	.word	0x0801a8d5
 801a1e4:	0801a8d5 	.word	0x0801a8d5
 801a1e8:	0801a8d5 	.word	0x0801a8d5
 801a1ec:	0801a4f7 	.word	0x0801a4f7
 801a1f0:	0801a8d5 	.word	0x0801a8d5
 801a1f4:	0801a8d5 	.word	0x0801a8d5
 801a1f8:	0801a8d5 	.word	0x0801a8d5
 801a1fc:	0801a8d5 	.word	0x0801a8d5
 801a200:	0801a8d5 	.word	0x0801a8d5
 801a204:	0801a8d5 	.word	0x0801a8d5
 801a208:	0801a8d5 	.word	0x0801a8d5
 801a20c:	0801a5b1 	.word	0x0801a5b1
 801a210:	0801a8d5 	.word	0x0801a8d5
 801a214:	0801a8d5 	.word	0x0801a8d5
 801a218:	0801a8d5 	.word	0x0801a8d5
 801a21c:	0801a8d5 	.word	0x0801a8d5
 801a220:	0801a8d5 	.word	0x0801a8d5
 801a224:	0801a8d5 	.word	0x0801a8d5
 801a228:	0801a8d5 	.word	0x0801a8d5
 801a22c:	0801a8d5 	.word	0x0801a8d5
 801a230:	0801a8d5 	.word	0x0801a8d5
 801a234:	0801a8d5 	.word	0x0801a8d5
 801a238:	0801a8d5 	.word	0x0801a8d5
 801a23c:	0801a8d5 	.word	0x0801a8d5
 801a240:	0801a8d5 	.word	0x0801a8d5
 801a244:	0801a8d5 	.word	0x0801a8d5
 801a248:	0801a8d5 	.word	0x0801a8d5
 801a24c:	0801a721 	.word	0x0801a721
 801a250:	0801a8d5 	.word	0x0801a8d5
 801a254:	0801a8d5 	.word	0x0801a8d5
 801a258:	0801a8d5 	.word	0x0801a8d5
 801a25c:	0801a8d5 	.word	0x0801a8d5
 801a260:	0801a8d5 	.word	0x0801a8d5
 801a264:	0801a8d5 	.word	0x0801a8d5
 801a268:	0801a8d5 	.word	0x0801a8d5
 801a26c:	0801a8d5 	.word	0x0801a8d5
 801a270:	0801a8d5 	.word	0x0801a8d5
 801a274:	0801a8d5 	.word	0x0801a8d5
 801a278:	0801a8d5 	.word	0x0801a8d5
 801a27c:	0801a8d5 	.word	0x0801a8d5
 801a280:	0801a8d5 	.word	0x0801a8d5
 801a284:	0801a8d5 	.word	0x0801a8d5
 801a288:	0801a8d5 	.word	0x0801a8d5
 801a28c:	0801a8d5 	.word	0x0801a8d5
 801a290:	0801a8d5 	.word	0x0801a8d5
 801a294:	0801a8d5 	.word	0x0801a8d5
 801a298:	0801a8d5 	.word	0x0801a8d5
 801a29c:	0801a8d5 	.word	0x0801a8d5
 801a2a0:	0801a8d5 	.word	0x0801a8d5
 801a2a4:	0801a8d5 	.word	0x0801a8d5
 801a2a8:	0801a8d5 	.word	0x0801a8d5
 801a2ac:	0801a8d5 	.word	0x0801a8d5
 801a2b0:	0801a8d5 	.word	0x0801a8d5
 801a2b4:	0801a8d5 	.word	0x0801a8d5
 801a2b8:	0801a8d5 	.word	0x0801a8d5
 801a2bc:	0801a8d5 	.word	0x0801a8d5
 801a2c0:	0801a8d5 	.word	0x0801a8d5
 801a2c4:	0801a8d5 	.word	0x0801a8d5
 801a2c8:	0801a8d5 	.word	0x0801a8d5
 801a2cc:	0801a815 	.word	0x0801a815
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801a2d0:	f7fb fcbe 	bl	8015c50 <HAL_RCC_GetPCLK1Freq>
 801a2d4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	d044      	beq.n	801a368 <UART_SetConfig+0x1d40>
 801a2de:	687b      	ldr	r3, [r7, #4]
 801a2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e2:	2b01      	cmp	r3, #1
 801a2e4:	d03e      	beq.n	801a364 <UART_SetConfig+0x1d3c>
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ea:	2b02      	cmp	r3, #2
 801a2ec:	d038      	beq.n	801a360 <UART_SetConfig+0x1d38>
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f2:	2b03      	cmp	r3, #3
 801a2f4:	d032      	beq.n	801a35c <UART_SetConfig+0x1d34>
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2fa:	2b04      	cmp	r3, #4
 801a2fc:	d02c      	beq.n	801a358 <UART_SetConfig+0x1d30>
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a302:	2b05      	cmp	r3, #5
 801a304:	d026      	beq.n	801a354 <UART_SetConfig+0x1d2c>
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a30a:	2b06      	cmp	r3, #6
 801a30c:	d020      	beq.n	801a350 <UART_SetConfig+0x1d28>
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a312:	2b07      	cmp	r3, #7
 801a314:	d01a      	beq.n	801a34c <UART_SetConfig+0x1d24>
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a31a:	2b08      	cmp	r3, #8
 801a31c:	d014      	beq.n	801a348 <UART_SetConfig+0x1d20>
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a322:	2b09      	cmp	r3, #9
 801a324:	d00e      	beq.n	801a344 <UART_SetConfig+0x1d1c>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a32a:	2b0a      	cmp	r3, #10
 801a32c:	d008      	beq.n	801a340 <UART_SetConfig+0x1d18>
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a332:	2b0b      	cmp	r3, #11
 801a334:	d102      	bne.n	801a33c <UART_SetConfig+0x1d14>
 801a336:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a33a:	e016      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a33c:	2301      	movs	r3, #1
 801a33e:	e014      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a340:	2380      	movs	r3, #128	; 0x80
 801a342:	e012      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a344:	2340      	movs	r3, #64	; 0x40
 801a346:	e010      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a348:	2320      	movs	r3, #32
 801a34a:	e00e      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a34c:	2310      	movs	r3, #16
 801a34e:	e00c      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a350:	230c      	movs	r3, #12
 801a352:	e00a      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a354:	230a      	movs	r3, #10
 801a356:	e008      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a358:	2308      	movs	r3, #8
 801a35a:	e006      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a35c:	2306      	movs	r3, #6
 801a35e:	e004      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a360:	2304      	movs	r3, #4
 801a362:	e002      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a364:	2302      	movs	r3, #2
 801a366:	e000      	b.n	801a36a <UART_SetConfig+0x1d42>
 801a368:	2301      	movs	r3, #1
 801a36a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a36c:	fbb2 f2f3 	udiv	r2, r2, r3
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	685b      	ldr	r3, [r3, #4]
 801a374:	085b      	lsrs	r3, r3, #1
 801a376:	441a      	add	r2, r3
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	685b      	ldr	r3, [r3, #4]
 801a37c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a380:	b29b      	uxth	r3, r3
 801a382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a384:	e2aa      	b.n	801a8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801a386:	f7fb fc79 	bl	8015c7c <HAL_RCC_GetPCLK2Freq>
 801a38a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a390:	2b00      	cmp	r3, #0
 801a392:	d044      	beq.n	801a41e <UART_SetConfig+0x1df6>
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a398:	2b01      	cmp	r3, #1
 801a39a:	d03e      	beq.n	801a41a <UART_SetConfig+0x1df2>
 801a39c:	687b      	ldr	r3, [r7, #4]
 801a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3a0:	2b02      	cmp	r3, #2
 801a3a2:	d038      	beq.n	801a416 <UART_SetConfig+0x1dee>
 801a3a4:	687b      	ldr	r3, [r7, #4]
 801a3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3a8:	2b03      	cmp	r3, #3
 801a3aa:	d032      	beq.n	801a412 <UART_SetConfig+0x1dea>
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b0:	2b04      	cmp	r3, #4
 801a3b2:	d02c      	beq.n	801a40e <UART_SetConfig+0x1de6>
 801a3b4:	687b      	ldr	r3, [r7, #4]
 801a3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3b8:	2b05      	cmp	r3, #5
 801a3ba:	d026      	beq.n	801a40a <UART_SetConfig+0x1de2>
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c0:	2b06      	cmp	r3, #6
 801a3c2:	d020      	beq.n	801a406 <UART_SetConfig+0x1dde>
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c8:	2b07      	cmp	r3, #7
 801a3ca:	d01a      	beq.n	801a402 <UART_SetConfig+0x1dda>
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d0:	2b08      	cmp	r3, #8
 801a3d2:	d014      	beq.n	801a3fe <UART_SetConfig+0x1dd6>
 801a3d4:	687b      	ldr	r3, [r7, #4]
 801a3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3d8:	2b09      	cmp	r3, #9
 801a3da:	d00e      	beq.n	801a3fa <UART_SetConfig+0x1dd2>
 801a3dc:	687b      	ldr	r3, [r7, #4]
 801a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e0:	2b0a      	cmp	r3, #10
 801a3e2:	d008      	beq.n	801a3f6 <UART_SetConfig+0x1dce>
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3e8:	2b0b      	cmp	r3, #11
 801a3ea:	d102      	bne.n	801a3f2 <UART_SetConfig+0x1dca>
 801a3ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a3f0:	e016      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a3f2:	2301      	movs	r3, #1
 801a3f4:	e014      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a3f6:	2380      	movs	r3, #128	; 0x80
 801a3f8:	e012      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a3fa:	2340      	movs	r3, #64	; 0x40
 801a3fc:	e010      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a3fe:	2320      	movs	r3, #32
 801a400:	e00e      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a402:	2310      	movs	r3, #16
 801a404:	e00c      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a406:	230c      	movs	r3, #12
 801a408:	e00a      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a40a:	230a      	movs	r3, #10
 801a40c:	e008      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a40e:	2308      	movs	r3, #8
 801a410:	e006      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a412:	2306      	movs	r3, #6
 801a414:	e004      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a416:	2304      	movs	r3, #4
 801a418:	e002      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a41a:	2302      	movs	r3, #2
 801a41c:	e000      	b.n	801a420 <UART_SetConfig+0x1df8>
 801a41e:	2301      	movs	r3, #1
 801a420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a422:	fbb2 f2f3 	udiv	r2, r2, r3
 801a426:	687b      	ldr	r3, [r7, #4]
 801a428:	685b      	ldr	r3, [r3, #4]
 801a42a:	085b      	lsrs	r3, r3, #1
 801a42c:	441a      	add	r2, r3
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	fbb2 f3f3 	udiv	r3, r2, r3
 801a436:	b29b      	uxth	r3, r3
 801a438:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a43a:	e24f      	b.n	801a8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a43c:	f107 0318 	add.w	r3, r7, #24
 801a440:	4618      	mov	r0, r3
 801a442:	f7fc fb25 	bl	8016a90 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a446:	69fa      	ldr	r2, [r7, #28]
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d044      	beq.n	801a4da <UART_SetConfig+0x1eb2>
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a454:	2b01      	cmp	r3, #1
 801a456:	d03e      	beq.n	801a4d6 <UART_SetConfig+0x1eae>
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a45c:	2b02      	cmp	r3, #2
 801a45e:	d038      	beq.n	801a4d2 <UART_SetConfig+0x1eaa>
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a464:	2b03      	cmp	r3, #3
 801a466:	d032      	beq.n	801a4ce <UART_SetConfig+0x1ea6>
 801a468:	687b      	ldr	r3, [r7, #4]
 801a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a46c:	2b04      	cmp	r3, #4
 801a46e:	d02c      	beq.n	801a4ca <UART_SetConfig+0x1ea2>
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a474:	2b05      	cmp	r3, #5
 801a476:	d026      	beq.n	801a4c6 <UART_SetConfig+0x1e9e>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a47c:	2b06      	cmp	r3, #6
 801a47e:	d020      	beq.n	801a4c2 <UART_SetConfig+0x1e9a>
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a484:	2b07      	cmp	r3, #7
 801a486:	d01a      	beq.n	801a4be <UART_SetConfig+0x1e96>
 801a488:	687b      	ldr	r3, [r7, #4]
 801a48a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a48c:	2b08      	cmp	r3, #8
 801a48e:	d014      	beq.n	801a4ba <UART_SetConfig+0x1e92>
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a494:	2b09      	cmp	r3, #9
 801a496:	d00e      	beq.n	801a4b6 <UART_SetConfig+0x1e8e>
 801a498:	687b      	ldr	r3, [r7, #4]
 801a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a49c:	2b0a      	cmp	r3, #10
 801a49e:	d008      	beq.n	801a4b2 <UART_SetConfig+0x1e8a>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a4:	2b0b      	cmp	r3, #11
 801a4a6:	d102      	bne.n	801a4ae <UART_SetConfig+0x1e86>
 801a4a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a4ac:	e016      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4ae:	2301      	movs	r3, #1
 801a4b0:	e014      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4b2:	2380      	movs	r3, #128	; 0x80
 801a4b4:	e012      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4b6:	2340      	movs	r3, #64	; 0x40
 801a4b8:	e010      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4ba:	2320      	movs	r3, #32
 801a4bc:	e00e      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4be:	2310      	movs	r3, #16
 801a4c0:	e00c      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4c2:	230c      	movs	r3, #12
 801a4c4:	e00a      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4c6:	230a      	movs	r3, #10
 801a4c8:	e008      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4ca:	2308      	movs	r3, #8
 801a4cc:	e006      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4ce:	2306      	movs	r3, #6
 801a4d0:	e004      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4d2:	2304      	movs	r3, #4
 801a4d4:	e002      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4d6:	2302      	movs	r3, #2
 801a4d8:	e000      	b.n	801a4dc <UART_SetConfig+0x1eb4>
 801a4da:	2301      	movs	r3, #1
 801a4dc:	fbb2 f2f3 	udiv	r2, r2, r3
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	685b      	ldr	r3, [r3, #4]
 801a4e4:	085b      	lsrs	r3, r3, #1
 801a4e6:	441a      	add	r2, r3
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	685b      	ldr	r3, [r3, #4]
 801a4ec:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4f0:	b29b      	uxth	r3, r3
 801a4f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a4f4:	e1f2      	b.n	801a8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a4f6:	f107 030c 	add.w	r3, r7, #12
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7fc fc14 	bl	8016d28 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a500:	693a      	ldr	r2, [r7, #16]
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a506:	2b00      	cmp	r3, #0
 801a508:	d044      	beq.n	801a594 <UART_SetConfig+0x1f6c>
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a50e:	2b01      	cmp	r3, #1
 801a510:	d03e      	beq.n	801a590 <UART_SetConfig+0x1f68>
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a516:	2b02      	cmp	r3, #2
 801a518:	d038      	beq.n	801a58c <UART_SetConfig+0x1f64>
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a51e:	2b03      	cmp	r3, #3
 801a520:	d032      	beq.n	801a588 <UART_SetConfig+0x1f60>
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a526:	2b04      	cmp	r3, #4
 801a528:	d02c      	beq.n	801a584 <UART_SetConfig+0x1f5c>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a52e:	2b05      	cmp	r3, #5
 801a530:	d026      	beq.n	801a580 <UART_SetConfig+0x1f58>
 801a532:	687b      	ldr	r3, [r7, #4]
 801a534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a536:	2b06      	cmp	r3, #6
 801a538:	d020      	beq.n	801a57c <UART_SetConfig+0x1f54>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a53e:	2b07      	cmp	r3, #7
 801a540:	d01a      	beq.n	801a578 <UART_SetConfig+0x1f50>
 801a542:	687b      	ldr	r3, [r7, #4]
 801a544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a546:	2b08      	cmp	r3, #8
 801a548:	d014      	beq.n	801a574 <UART_SetConfig+0x1f4c>
 801a54a:	687b      	ldr	r3, [r7, #4]
 801a54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a54e:	2b09      	cmp	r3, #9
 801a550:	d00e      	beq.n	801a570 <UART_SetConfig+0x1f48>
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a556:	2b0a      	cmp	r3, #10
 801a558:	d008      	beq.n	801a56c <UART_SetConfig+0x1f44>
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a55e:	2b0b      	cmp	r3, #11
 801a560:	d102      	bne.n	801a568 <UART_SetConfig+0x1f40>
 801a562:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a566:	e016      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a568:	2301      	movs	r3, #1
 801a56a:	e014      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a56c:	2380      	movs	r3, #128	; 0x80
 801a56e:	e012      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a570:	2340      	movs	r3, #64	; 0x40
 801a572:	e010      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a574:	2320      	movs	r3, #32
 801a576:	e00e      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a578:	2310      	movs	r3, #16
 801a57a:	e00c      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a57c:	230c      	movs	r3, #12
 801a57e:	e00a      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a580:	230a      	movs	r3, #10
 801a582:	e008      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a584:	2308      	movs	r3, #8
 801a586:	e006      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a588:	2306      	movs	r3, #6
 801a58a:	e004      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a58c:	2304      	movs	r3, #4
 801a58e:	e002      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a590:	2302      	movs	r3, #2
 801a592:	e000      	b.n	801a596 <UART_SetConfig+0x1f6e>
 801a594:	2301      	movs	r3, #1
 801a596:	fbb2 f2f3 	udiv	r2, r2, r3
 801a59a:	687b      	ldr	r3, [r7, #4]
 801a59c:	685b      	ldr	r3, [r3, #4]
 801a59e:	085b      	lsrs	r3, r3, #1
 801a5a0:	441a      	add	r2, r3
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	685b      	ldr	r3, [r3, #4]
 801a5a6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a5aa:	b29b      	uxth	r3, r3
 801a5ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a5ae:	e195      	b.n	801a8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a5b0:	4b87      	ldr	r3, [pc, #540]	; (801a7d0 <UART_SetConfig+0x21a8>)
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	f003 0320 	and.w	r3, r3, #32
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d05d      	beq.n	801a678 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a5bc:	4b84      	ldr	r3, [pc, #528]	; (801a7d0 <UART_SetConfig+0x21a8>)
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	08db      	lsrs	r3, r3, #3
 801a5c2:	f003 0303 	and.w	r3, r3, #3
 801a5c6:	4a83      	ldr	r2, [pc, #524]	; (801a7d4 <UART_SetConfig+0x21ac>)
 801a5c8:	40da      	lsrs	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5ce:	2b00      	cmp	r3, #0
 801a5d0:	d044      	beq.n	801a65c <UART_SetConfig+0x2034>
 801a5d2:	687b      	ldr	r3, [r7, #4]
 801a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5d6:	2b01      	cmp	r3, #1
 801a5d8:	d03e      	beq.n	801a658 <UART_SetConfig+0x2030>
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5de:	2b02      	cmp	r3, #2
 801a5e0:	d038      	beq.n	801a654 <UART_SetConfig+0x202c>
 801a5e2:	687b      	ldr	r3, [r7, #4]
 801a5e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5e6:	2b03      	cmp	r3, #3
 801a5e8:	d032      	beq.n	801a650 <UART_SetConfig+0x2028>
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5ee:	2b04      	cmp	r3, #4
 801a5f0:	d02c      	beq.n	801a64c <UART_SetConfig+0x2024>
 801a5f2:	687b      	ldr	r3, [r7, #4]
 801a5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5f6:	2b05      	cmp	r3, #5
 801a5f8:	d026      	beq.n	801a648 <UART_SetConfig+0x2020>
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5fe:	2b06      	cmp	r3, #6
 801a600:	d020      	beq.n	801a644 <UART_SetConfig+0x201c>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a606:	2b07      	cmp	r3, #7
 801a608:	d01a      	beq.n	801a640 <UART_SetConfig+0x2018>
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a60e:	2b08      	cmp	r3, #8
 801a610:	d014      	beq.n	801a63c <UART_SetConfig+0x2014>
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a616:	2b09      	cmp	r3, #9
 801a618:	d00e      	beq.n	801a638 <UART_SetConfig+0x2010>
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a61e:	2b0a      	cmp	r3, #10
 801a620:	d008      	beq.n	801a634 <UART_SetConfig+0x200c>
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a626:	2b0b      	cmp	r3, #11
 801a628:	d102      	bne.n	801a630 <UART_SetConfig+0x2008>
 801a62a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a62e:	e016      	b.n	801a65e <UART_SetConfig+0x2036>
 801a630:	2301      	movs	r3, #1
 801a632:	e014      	b.n	801a65e <UART_SetConfig+0x2036>
 801a634:	2380      	movs	r3, #128	; 0x80
 801a636:	e012      	b.n	801a65e <UART_SetConfig+0x2036>
 801a638:	2340      	movs	r3, #64	; 0x40
 801a63a:	e010      	b.n	801a65e <UART_SetConfig+0x2036>
 801a63c:	2320      	movs	r3, #32
 801a63e:	e00e      	b.n	801a65e <UART_SetConfig+0x2036>
 801a640:	2310      	movs	r3, #16
 801a642:	e00c      	b.n	801a65e <UART_SetConfig+0x2036>
 801a644:	230c      	movs	r3, #12
 801a646:	e00a      	b.n	801a65e <UART_SetConfig+0x2036>
 801a648:	230a      	movs	r3, #10
 801a64a:	e008      	b.n	801a65e <UART_SetConfig+0x2036>
 801a64c:	2308      	movs	r3, #8
 801a64e:	e006      	b.n	801a65e <UART_SetConfig+0x2036>
 801a650:	2306      	movs	r3, #6
 801a652:	e004      	b.n	801a65e <UART_SetConfig+0x2036>
 801a654:	2304      	movs	r3, #4
 801a656:	e002      	b.n	801a65e <UART_SetConfig+0x2036>
 801a658:	2302      	movs	r3, #2
 801a65a:	e000      	b.n	801a65e <UART_SetConfig+0x2036>
 801a65c:	2301      	movs	r3, #1
 801a65e:	fbb2 f2f3 	udiv	r2, r2, r3
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	685b      	ldr	r3, [r3, #4]
 801a666:	085b      	lsrs	r3, r3, #1
 801a668:	441a      	add	r2, r3
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	685b      	ldr	r3, [r3, #4]
 801a66e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a672:	b29b      	uxth	r3, r3
 801a674:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 801a676:	e131      	b.n	801a8dc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a678:	687b      	ldr	r3, [r7, #4]
 801a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d043      	beq.n	801a708 <UART_SetConfig+0x20e0>
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a684:	2b01      	cmp	r3, #1
 801a686:	d03d      	beq.n	801a704 <UART_SetConfig+0x20dc>
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a68c:	2b02      	cmp	r3, #2
 801a68e:	d037      	beq.n	801a700 <UART_SetConfig+0x20d8>
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a694:	2b03      	cmp	r3, #3
 801a696:	d031      	beq.n	801a6fc <UART_SetConfig+0x20d4>
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a69c:	2b04      	cmp	r3, #4
 801a69e:	d02b      	beq.n	801a6f8 <UART_SetConfig+0x20d0>
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6a4:	2b05      	cmp	r3, #5
 801a6a6:	d025      	beq.n	801a6f4 <UART_SetConfig+0x20cc>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6ac:	2b06      	cmp	r3, #6
 801a6ae:	d01f      	beq.n	801a6f0 <UART_SetConfig+0x20c8>
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6b4:	2b07      	cmp	r3, #7
 801a6b6:	d019      	beq.n	801a6ec <UART_SetConfig+0x20c4>
 801a6b8:	687b      	ldr	r3, [r7, #4]
 801a6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6bc:	2b08      	cmp	r3, #8
 801a6be:	d013      	beq.n	801a6e8 <UART_SetConfig+0x20c0>
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6c4:	2b09      	cmp	r3, #9
 801a6c6:	d00d      	beq.n	801a6e4 <UART_SetConfig+0x20bc>
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6cc:	2b0a      	cmp	r3, #10
 801a6ce:	d007      	beq.n	801a6e0 <UART_SetConfig+0x20b8>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a6d4:	2b0b      	cmp	r3, #11
 801a6d6:	d101      	bne.n	801a6dc <UART_SetConfig+0x20b4>
 801a6d8:	4b3f      	ldr	r3, [pc, #252]	; (801a7d8 <UART_SetConfig+0x21b0>)
 801a6da:	e016      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6dc:	4b3d      	ldr	r3, [pc, #244]	; (801a7d4 <UART_SetConfig+0x21ac>)
 801a6de:	e014      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6e0:	4b3e      	ldr	r3, [pc, #248]	; (801a7dc <UART_SetConfig+0x21b4>)
 801a6e2:	e012      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6e4:	4b3e      	ldr	r3, [pc, #248]	; (801a7e0 <UART_SetConfig+0x21b8>)
 801a6e6:	e010      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6e8:	4b3e      	ldr	r3, [pc, #248]	; (801a7e4 <UART_SetConfig+0x21bc>)
 801a6ea:	e00e      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6ec:	4b3e      	ldr	r3, [pc, #248]	; (801a7e8 <UART_SetConfig+0x21c0>)
 801a6ee:	e00c      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6f0:	4b3e      	ldr	r3, [pc, #248]	; (801a7ec <UART_SetConfig+0x21c4>)
 801a6f2:	e00a      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6f4:	4b3e      	ldr	r3, [pc, #248]	; (801a7f0 <UART_SetConfig+0x21c8>)
 801a6f6:	e008      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6f8:	4b3e      	ldr	r3, [pc, #248]	; (801a7f4 <UART_SetConfig+0x21cc>)
 801a6fa:	e006      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a6fc:	4b3e      	ldr	r3, [pc, #248]	; (801a7f8 <UART_SetConfig+0x21d0>)
 801a6fe:	e004      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a700:	4b3e      	ldr	r3, [pc, #248]	; (801a7fc <UART_SetConfig+0x21d4>)
 801a702:	e002      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a704:	4b3e      	ldr	r3, [pc, #248]	; (801a800 <UART_SetConfig+0x21d8>)
 801a706:	e000      	b.n	801a70a <UART_SetConfig+0x20e2>
 801a708:	4b32      	ldr	r3, [pc, #200]	; (801a7d4 <UART_SetConfig+0x21ac>)
 801a70a:	687a      	ldr	r2, [r7, #4]
 801a70c:	6852      	ldr	r2, [r2, #4]
 801a70e:	0852      	lsrs	r2, r2, #1
 801a710:	441a      	add	r2, r3
 801a712:	687b      	ldr	r3, [r7, #4]
 801a714:	685b      	ldr	r3, [r3, #4]
 801a716:	fbb2 f3f3 	udiv	r3, r2, r3
 801a71a:	b29b      	uxth	r3, r3
 801a71c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a71e:	e0dd      	b.n	801a8dc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a724:	2b00      	cmp	r3, #0
 801a726:	d046      	beq.n	801a7b6 <UART_SetConfig+0x218e>
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a72c:	2b01      	cmp	r3, #1
 801a72e:	d040      	beq.n	801a7b2 <UART_SetConfig+0x218a>
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a734:	2b02      	cmp	r3, #2
 801a736:	d03a      	beq.n	801a7ae <UART_SetConfig+0x2186>
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a73c:	2b03      	cmp	r3, #3
 801a73e:	d034      	beq.n	801a7aa <UART_SetConfig+0x2182>
 801a740:	687b      	ldr	r3, [r7, #4]
 801a742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a744:	2b04      	cmp	r3, #4
 801a746:	d02e      	beq.n	801a7a6 <UART_SetConfig+0x217e>
 801a748:	687b      	ldr	r3, [r7, #4]
 801a74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a74c:	2b05      	cmp	r3, #5
 801a74e:	d028      	beq.n	801a7a2 <UART_SetConfig+0x217a>
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a754:	2b06      	cmp	r3, #6
 801a756:	d022      	beq.n	801a79e <UART_SetConfig+0x2176>
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a75c:	2b07      	cmp	r3, #7
 801a75e:	d01c      	beq.n	801a79a <UART_SetConfig+0x2172>
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a764:	2b08      	cmp	r3, #8
 801a766:	d016      	beq.n	801a796 <UART_SetConfig+0x216e>
 801a768:	687b      	ldr	r3, [r7, #4]
 801a76a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a76c:	2b09      	cmp	r3, #9
 801a76e:	d00f      	beq.n	801a790 <UART_SetConfig+0x2168>
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a774:	2b0a      	cmp	r3, #10
 801a776:	d008      	beq.n	801a78a <UART_SetConfig+0x2162>
 801a778:	687b      	ldr	r3, [r7, #4]
 801a77a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a77c:	2b0b      	cmp	r3, #11
 801a77e:	d102      	bne.n	801a786 <UART_SetConfig+0x215e>
 801a780:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a784:	e018      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a786:	4b18      	ldr	r3, [pc, #96]	; (801a7e8 <UART_SetConfig+0x21c0>)
 801a788:	e016      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a78a:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a78e:	e013      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a790:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a794:	e010      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a796:	4b1b      	ldr	r3, [pc, #108]	; (801a804 <UART_SetConfig+0x21dc>)
 801a798:	e00e      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a79a:	4b0f      	ldr	r3, [pc, #60]	; (801a7d8 <UART_SetConfig+0x21b0>)
 801a79c:	e00c      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a79e:	4b1a      	ldr	r3, [pc, #104]	; (801a808 <UART_SetConfig+0x21e0>)
 801a7a0:	e00a      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7a2:	4b1a      	ldr	r3, [pc, #104]	; (801a80c <UART_SetConfig+0x21e4>)
 801a7a4:	e008      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7a6:	4b0d      	ldr	r3, [pc, #52]	; (801a7dc <UART_SetConfig+0x21b4>)
 801a7a8:	e006      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7aa:	4b19      	ldr	r3, [pc, #100]	; (801a810 <UART_SetConfig+0x21e8>)
 801a7ac:	e004      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7ae:	4b0c      	ldr	r3, [pc, #48]	; (801a7e0 <UART_SetConfig+0x21b8>)
 801a7b0:	e002      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7b2:	4b0c      	ldr	r3, [pc, #48]	; (801a7e4 <UART_SetConfig+0x21bc>)
 801a7b4:	e000      	b.n	801a7b8 <UART_SetConfig+0x2190>
 801a7b6:	4b0c      	ldr	r3, [pc, #48]	; (801a7e8 <UART_SetConfig+0x21c0>)
 801a7b8:	687a      	ldr	r2, [r7, #4]
 801a7ba:	6852      	ldr	r2, [r2, #4]
 801a7bc:	0852      	lsrs	r2, r2, #1
 801a7be:	441a      	add	r2, r3
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	685b      	ldr	r3, [r3, #4]
 801a7c4:	fbb2 f3f3 	udiv	r3, r2, r3
 801a7c8:	b29b      	uxth	r3, r3
 801a7ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a7cc:	e086      	b.n	801a8dc <UART_SetConfig+0x22b4>
 801a7ce:	bf00      	nop
 801a7d0:	58024400 	.word	0x58024400
 801a7d4:	03d09000 	.word	0x03d09000
 801a7d8:	0003d090 	.word	0x0003d090
 801a7dc:	0007a120 	.word	0x0007a120
 801a7e0:	000f4240 	.word	0x000f4240
 801a7e4:	001e8480 	.word	0x001e8480
 801a7e8:	003d0900 	.word	0x003d0900
 801a7ec:	00516155 	.word	0x00516155
 801a7f0:	0061a800 	.word	0x0061a800
 801a7f4:	007a1200 	.word	0x007a1200
 801a7f8:	00a2c2aa 	.word	0x00a2c2aa
 801a7fc:	00f42400 	.word	0x00f42400
 801a800:	01e84800 	.word	0x01e84800
 801a804:	0001e848 	.word	0x0001e848
 801a808:	00051615 	.word	0x00051615
 801a80c:	00061a80 	.word	0x00061a80
 801a810:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a818:	2b00      	cmp	r3, #0
 801a81a:	d04e      	beq.n	801a8ba <UART_SetConfig+0x2292>
 801a81c:	687b      	ldr	r3, [r7, #4]
 801a81e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a820:	2b01      	cmp	r3, #1
 801a822:	d047      	beq.n	801a8b4 <UART_SetConfig+0x228c>
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a828:	2b02      	cmp	r3, #2
 801a82a:	d040      	beq.n	801a8ae <UART_SetConfig+0x2286>
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a830:	2b03      	cmp	r3, #3
 801a832:	d039      	beq.n	801a8a8 <UART_SetConfig+0x2280>
 801a834:	687b      	ldr	r3, [r7, #4]
 801a836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a838:	2b04      	cmp	r3, #4
 801a83a:	d032      	beq.n	801a8a2 <UART_SetConfig+0x227a>
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a840:	2b05      	cmp	r3, #5
 801a842:	d02b      	beq.n	801a89c <UART_SetConfig+0x2274>
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a848:	2b06      	cmp	r3, #6
 801a84a:	d024      	beq.n	801a896 <UART_SetConfig+0x226e>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a850:	2b07      	cmp	r3, #7
 801a852:	d01d      	beq.n	801a890 <UART_SetConfig+0x2268>
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a858:	2b08      	cmp	r3, #8
 801a85a:	d016      	beq.n	801a88a <UART_SetConfig+0x2262>
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a860:	2b09      	cmp	r3, #9
 801a862:	d00f      	beq.n	801a884 <UART_SetConfig+0x225c>
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a868:	2b0a      	cmp	r3, #10
 801a86a:	d008      	beq.n	801a87e <UART_SetConfig+0x2256>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a870:	2b0b      	cmp	r3, #11
 801a872:	d101      	bne.n	801a878 <UART_SetConfig+0x2250>
 801a874:	2380      	movs	r3, #128	; 0x80
 801a876:	e022      	b.n	801a8be <UART_SetConfig+0x2296>
 801a878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a87c:	e01f      	b.n	801a8be <UART_SetConfig+0x2296>
 801a87e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a882:	e01c      	b.n	801a8be <UART_SetConfig+0x2296>
 801a884:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a888:	e019      	b.n	801a8be <UART_SetConfig+0x2296>
 801a88a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a88e:	e016      	b.n	801a8be <UART_SetConfig+0x2296>
 801a890:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a894:	e013      	b.n	801a8be <UART_SetConfig+0x2296>
 801a896:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801a89a:	e010      	b.n	801a8be <UART_SetConfig+0x2296>
 801a89c:	f640 43cc 	movw	r3, #3276	; 0xccc
 801a8a0:	e00d      	b.n	801a8be <UART_SetConfig+0x2296>
 801a8a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a8a6:	e00a      	b.n	801a8be <UART_SetConfig+0x2296>
 801a8a8:	f241 5355 	movw	r3, #5461	; 0x1555
 801a8ac:	e007      	b.n	801a8be <UART_SetConfig+0x2296>
 801a8ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a8b2:	e004      	b.n	801a8be <UART_SetConfig+0x2296>
 801a8b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a8b8:	e001      	b.n	801a8be <UART_SetConfig+0x2296>
 801a8ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a8be:	687a      	ldr	r2, [r7, #4]
 801a8c0:	6852      	ldr	r2, [r2, #4]
 801a8c2:	0852      	lsrs	r2, r2, #1
 801a8c4:	441a      	add	r2, r3
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	685b      	ldr	r3, [r3, #4]
 801a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 801a8ce:	b29b      	uxth	r3, r3
 801a8d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a8d2:	e003      	b.n	801a8dc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 801a8d4:	2301      	movs	r3, #1
 801a8d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a8da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a8dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8de:	2b0f      	cmp	r3, #15
 801a8e0:	d908      	bls.n	801a8f4 <UART_SetConfig+0x22cc>
 801a8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a8e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a8e8:	d204      	bcs.n	801a8f4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	681b      	ldr	r3, [r3, #0]
 801a8ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a8f0:	60da      	str	r2, [r3, #12]
 801a8f2:	e002      	b.n	801a8fa <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a8f4:	2301      	movs	r3, #1
 801a8f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	2201      	movs	r2, #1
 801a8fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	2201      	movs	r2, #1
 801a906:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	2200      	movs	r2, #0
 801a90e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801a910:	687b      	ldr	r3, [r7, #4]
 801a912:	2200      	movs	r2, #0
 801a914:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801a916:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801a91a:	4618      	mov	r0, r3
 801a91c:	3740      	adds	r7, #64	; 0x40
 801a91e:	46bd      	mov	sp, r7
 801a920:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801a924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a924:	b480      	push	{r7}
 801a926:	b083      	sub	sp, #12
 801a928:	af00      	add	r7, sp, #0
 801a92a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a930:	f003 0301 	and.w	r3, r3, #1
 801a934:	2b00      	cmp	r3, #0
 801a936:	d00a      	beq.n	801a94e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	681b      	ldr	r3, [r3, #0]
 801a93c:	685b      	ldr	r3, [r3, #4]
 801a93e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a946:	687b      	ldr	r3, [r7, #4]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	430a      	orrs	r2, r1
 801a94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a952:	f003 0302 	and.w	r3, r3, #2
 801a956:	2b00      	cmp	r3, #0
 801a958:	d00a      	beq.n	801a970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a95a:	687b      	ldr	r3, [r7, #4]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	685b      	ldr	r3, [r3, #4]
 801a960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	681b      	ldr	r3, [r3, #0]
 801a96c:	430a      	orrs	r2, r1
 801a96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a974:	f003 0304 	and.w	r3, r3, #4
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d00a      	beq.n	801a992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	681b      	ldr	r3, [r3, #0]
 801a980:	685b      	ldr	r3, [r3, #4]
 801a982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	681b      	ldr	r3, [r3, #0]
 801a98e:	430a      	orrs	r2, r1
 801a990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a996:	f003 0308 	and.w	r3, r3, #8
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d00a      	beq.n	801a9b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	685b      	ldr	r3, [r3, #4]
 801a9a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a9ac:	687b      	ldr	r3, [r7, #4]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	430a      	orrs	r2, r1
 801a9b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a9b4:	687b      	ldr	r3, [r7, #4]
 801a9b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9b8:	f003 0310 	and.w	r3, r3, #16
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d00a      	beq.n	801a9d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	681b      	ldr	r3, [r3, #0]
 801a9c4:	689b      	ldr	r3, [r3, #8]
 801a9c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a9ca:	687b      	ldr	r3, [r7, #4]
 801a9cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	430a      	orrs	r2, r1
 801a9d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9da:	f003 0320 	and.w	r3, r3, #32
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d00a      	beq.n	801a9f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	689b      	ldr	r3, [r3, #8]
 801a9e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a9f0:	687b      	ldr	r3, [r7, #4]
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	430a      	orrs	r2, r1
 801a9f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a9fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	d01a      	beq.n	801aa3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801aa04:	687b      	ldr	r3, [r7, #4]
 801aa06:	681b      	ldr	r3, [r3, #0]
 801aa08:	685b      	ldr	r3, [r3, #4]
 801aa0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	430a      	orrs	r2, r1
 801aa18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801aa1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801aa22:	d10a      	bne.n	801aa3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	685b      	ldr	r3, [r3, #4]
 801aa2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	430a      	orrs	r2, r1
 801aa38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801aa3a:	687b      	ldr	r3, [r7, #4]
 801aa3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801aa3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aa42:	2b00      	cmp	r3, #0
 801aa44:	d00a      	beq.n	801aa5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	685b      	ldr	r3, [r3, #4]
 801aa4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	681b      	ldr	r3, [r3, #0]
 801aa58:	430a      	orrs	r2, r1
 801aa5a:	605a      	str	r2, [r3, #4]
  }
}
 801aa5c:	bf00      	nop
 801aa5e:	370c      	adds	r7, #12
 801aa60:	46bd      	mov	sp, r7
 801aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa66:	4770      	bx	lr

0801aa68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801aa68:	b580      	push	{r7, lr}
 801aa6a:	b086      	sub	sp, #24
 801aa6c:	af02      	add	r7, sp, #8
 801aa6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801aa70:	687b      	ldr	r3, [r7, #4]
 801aa72:	2200      	movs	r2, #0
 801aa74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801aa78:	f7f8 fa0c 	bl	8012e94 <HAL_GetTick>
 801aa7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	681b      	ldr	r3, [r3, #0]
 801aa84:	f003 0308 	and.w	r3, r3, #8
 801aa88:	2b08      	cmp	r3, #8
 801aa8a:	d10e      	bne.n	801aaaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aa8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801aa90:	9300      	str	r3, [sp, #0]
 801aa92:	68fb      	ldr	r3, [r7, #12]
 801aa94:	2200      	movs	r2, #0
 801aa96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801aa9a:	6878      	ldr	r0, [r7, #4]
 801aa9c:	f000 f82c 	bl	801aaf8 <UART_WaitOnFlagUntilTimeout>
 801aaa0:	4603      	mov	r3, r0
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d001      	beq.n	801aaaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801aaa6:	2303      	movs	r3, #3
 801aaa8:	e022      	b.n	801aaf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801aaaa:	687b      	ldr	r3, [r7, #4]
 801aaac:	681b      	ldr	r3, [r3, #0]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	f003 0304 	and.w	r3, r3, #4
 801aab4:	2b04      	cmp	r3, #4
 801aab6:	d10e      	bne.n	801aad6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801aab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801aabc:	9300      	str	r3, [sp, #0]
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	2200      	movs	r2, #0
 801aac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801aac6:	6878      	ldr	r0, [r7, #4]
 801aac8:	f000 f816 	bl	801aaf8 <UART_WaitOnFlagUntilTimeout>
 801aacc:	4603      	mov	r3, r0
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d001      	beq.n	801aad6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801aad2:	2303      	movs	r3, #3
 801aad4:	e00c      	b.n	801aaf0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	2220      	movs	r2, #32
 801aada:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	2220      	movs	r2, #32
 801aae2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	2200      	movs	r2, #0
 801aaea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801aaee:	2300      	movs	r3, #0
}
 801aaf0:	4618      	mov	r0, r3
 801aaf2:	3710      	adds	r7, #16
 801aaf4:	46bd      	mov	sp, r7
 801aaf6:	bd80      	pop	{r7, pc}

0801aaf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801aaf8:	b580      	push	{r7, lr}
 801aafa:	b084      	sub	sp, #16
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	60f8      	str	r0, [r7, #12]
 801ab00:	60b9      	str	r1, [r7, #8]
 801ab02:	603b      	str	r3, [r7, #0]
 801ab04:	4613      	mov	r3, r2
 801ab06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ab08:	e062      	b.n	801abd0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ab0a:	69bb      	ldr	r3, [r7, #24]
 801ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ab10:	d05e      	beq.n	801abd0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ab12:	f7f8 f9bf 	bl	8012e94 <HAL_GetTick>
 801ab16:	4602      	mov	r2, r0
 801ab18:	683b      	ldr	r3, [r7, #0]
 801ab1a:	1ad3      	subs	r3, r2, r3
 801ab1c:	69ba      	ldr	r2, [r7, #24]
 801ab1e:	429a      	cmp	r2, r3
 801ab20:	d302      	bcc.n	801ab28 <UART_WaitOnFlagUntilTimeout+0x30>
 801ab22:	69bb      	ldr	r3, [r7, #24]
 801ab24:	2b00      	cmp	r3, #0
 801ab26:	d11d      	bne.n	801ab64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	681a      	ldr	r2, [r3, #0]
 801ab2e:	68fb      	ldr	r3, [r7, #12]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801ab36:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	689a      	ldr	r2, [r3, #8]
 801ab3e:	68fb      	ldr	r3, [r7, #12]
 801ab40:	681b      	ldr	r3, [r3, #0]
 801ab42:	f022 0201 	bic.w	r2, r2, #1
 801ab46:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	2220      	movs	r2, #32
 801ab4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801ab50:	68fb      	ldr	r3, [r7, #12]
 801ab52:	2220      	movs	r2, #32
 801ab54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801ab58:	68fb      	ldr	r3, [r7, #12]
 801ab5a:	2200      	movs	r2, #0
 801ab5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801ab60:	2303      	movs	r3, #3
 801ab62:	e045      	b.n	801abf0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801ab64:	68fb      	ldr	r3, [r7, #12]
 801ab66:	681b      	ldr	r3, [r3, #0]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	f003 0304 	and.w	r3, r3, #4
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d02e      	beq.n	801abd0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	69db      	ldr	r3, [r3, #28]
 801ab78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ab7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ab80:	d126      	bne.n	801abd0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ab8a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	681b      	ldr	r3, [r3, #0]
 801ab90:	681a      	ldr	r2, [r3, #0]
 801ab92:	68fb      	ldr	r3, [r7, #12]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801ab9a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ab9c:	68fb      	ldr	r3, [r7, #12]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	689a      	ldr	r2, [r3, #8]
 801aba2:	68fb      	ldr	r3, [r7, #12]
 801aba4:	681b      	ldr	r3, [r3, #0]
 801aba6:	f022 0201 	bic.w	r2, r2, #1
 801abaa:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801abac:	68fb      	ldr	r3, [r7, #12]
 801abae:	2220      	movs	r2, #32
 801abb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	2220      	movs	r2, #32
 801abb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2220      	movs	r2, #32
 801abc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	2200      	movs	r2, #0
 801abc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801abcc:	2303      	movs	r3, #3
 801abce:	e00f      	b.n	801abf0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	69da      	ldr	r2, [r3, #28]
 801abd6:	68bb      	ldr	r3, [r7, #8]
 801abd8:	4013      	ands	r3, r2
 801abda:	68ba      	ldr	r2, [r7, #8]
 801abdc:	429a      	cmp	r2, r3
 801abde:	bf0c      	ite	eq
 801abe0:	2301      	moveq	r3, #1
 801abe2:	2300      	movne	r3, #0
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	461a      	mov	r2, r3
 801abe8:	79fb      	ldrb	r3, [r7, #7]
 801abea:	429a      	cmp	r2, r3
 801abec:	d08d      	beq.n	801ab0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801abee:	2300      	movs	r3, #0
}
 801abf0:	4618      	mov	r0, r3
 801abf2:	3710      	adds	r7, #16
 801abf4:	46bd      	mov	sp, r7
 801abf6:	bd80      	pop	{r7, pc}

0801abf8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801abf8:	b480      	push	{r7}
 801abfa:	b083      	sub	sp, #12
 801abfc:	af00      	add	r7, sp, #0
 801abfe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	681a      	ldr	r2, [r3, #0]
 801ac06:	687b      	ldr	r3, [r7, #4]
 801ac08:	681b      	ldr	r3, [r3, #0]
 801ac0a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801ac0e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	6899      	ldr	r1, [r3, #8]
 801ac16:	687b      	ldr	r3, [r7, #4]
 801ac18:	681a      	ldr	r2, [r3, #0]
 801ac1a:	4b08      	ldr	r3, [pc, #32]	; (801ac3c <UART_EndRxTransfer+0x44>)
 801ac1c:	400b      	ands	r3, r1
 801ac1e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801ac20:	687b      	ldr	r3, [r7, #4]
 801ac22:	2220      	movs	r2, #32
 801ac24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801ac28:	687b      	ldr	r3, [r7, #4]
 801ac2a:	2200      	movs	r2, #0
 801ac2c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801ac2e:	bf00      	nop
 801ac30:	370c      	adds	r7, #12
 801ac32:	46bd      	mov	sp, r7
 801ac34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac38:	4770      	bx	lr
 801ac3a:	bf00      	nop
 801ac3c:	effffffe 	.word	0xeffffffe

0801ac40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ac40:	b580      	push	{r7, lr}
 801ac42:	b084      	sub	sp, #16
 801ac44:	af00      	add	r7, sp, #0
 801ac46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ac4c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	2200      	movs	r2, #0
 801ac52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801ac5e:	68f8      	ldr	r0, [r7, #12]
 801ac60:	f7fd fcd8 	bl	8018614 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ac64:	bf00      	nop
 801ac66:	3710      	adds	r7, #16
 801ac68:	46bd      	mov	sp, r7
 801ac6a:	bd80      	pop	{r7, pc}

0801ac6c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	681b      	ldr	r3, [r3, #0]
 801ac78:	681a      	ldr	r2, [r3, #0]
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ac82:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801ac84:	687b      	ldr	r3, [r7, #4]
 801ac86:	2220      	movs	r2, #32
 801ac88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	2200      	movs	r2, #0
 801ac90:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801ac92:	6878      	ldr	r0, [r7, #4]
 801ac94:	f7fd fcb4 	bl	8018600 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801ac98:	bf00      	nop
 801ac9a:	3708      	adds	r7, #8
 801ac9c:	46bd      	mov	sp, r7
 801ac9e:	bd80      	pop	{r7, pc}

0801aca0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801aca0:	b480      	push	{r7}
 801aca2:	b083      	sub	sp, #12
 801aca4:	af00      	add	r7, sp, #0
 801aca6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801aca8:	bf00      	nop
 801acaa:	370c      	adds	r7, #12
 801acac:	46bd      	mov	sp, r7
 801acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acb2:	4770      	bx	lr

0801acb4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801acb4:	b480      	push	{r7}
 801acb6:	b083      	sub	sp, #12
 801acb8:	af00      	add	r7, sp, #0
 801acba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801acbc:	bf00      	nop
 801acbe:	370c      	adds	r7, #12
 801acc0:	46bd      	mov	sp, r7
 801acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acc6:	4770      	bx	lr

0801acc8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801acc8:	b480      	push	{r7}
 801acca:	b083      	sub	sp, #12
 801accc:	af00      	add	r7, sp, #0
 801acce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801acd0:	bf00      	nop
 801acd2:	370c      	adds	r7, #12
 801acd4:	46bd      	mov	sp, r7
 801acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acda:	4770      	bx	lr

0801acdc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801acdc:	b480      	push	{r7}
 801acde:	b085      	sub	sp, #20
 801ace0:	af00      	add	r7, sp, #0
 801ace2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801acea:	2b01      	cmp	r3, #1
 801acec:	d101      	bne.n	801acf2 <HAL_UARTEx_DisableFifoMode+0x16>
 801acee:	2302      	movs	r3, #2
 801acf0:	e027      	b.n	801ad42 <HAL_UARTEx_DisableFifoMode+0x66>
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2201      	movs	r2, #1
 801acf6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	2224      	movs	r2, #36	; 0x24
 801acfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	681a      	ldr	r2, [r3, #0]
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	f022 0201 	bic.w	r2, r2, #1
 801ad18:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801ad20:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2200      	movs	r2, #0
 801ad26:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	68fa      	ldr	r2, [r7, #12]
 801ad2e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ad30:	687b      	ldr	r3, [r7, #4]
 801ad32:	2220      	movs	r2, #32
 801ad34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ad38:	687b      	ldr	r3, [r7, #4]
 801ad3a:	2200      	movs	r2, #0
 801ad3c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ad40:	2300      	movs	r3, #0
}
 801ad42:	4618      	mov	r0, r3
 801ad44:	3714      	adds	r7, #20
 801ad46:	46bd      	mov	sp, r7
 801ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad4c:	4770      	bx	lr

0801ad4e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801ad4e:	b580      	push	{r7, lr}
 801ad50:	b084      	sub	sp, #16
 801ad52:	af00      	add	r7, sp, #0
 801ad54:	6078      	str	r0, [r7, #4]
 801ad56:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801ad5e:	2b01      	cmp	r3, #1
 801ad60:	d101      	bne.n	801ad66 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801ad62:	2302      	movs	r3, #2
 801ad64:	e02d      	b.n	801adc2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	2201      	movs	r2, #1
 801ad6a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801ad6e:	687b      	ldr	r3, [r7, #4]
 801ad70:	2224      	movs	r2, #36	; 0x24
 801ad72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	681b      	ldr	r3, [r3, #0]
 801ad7a:	681b      	ldr	r3, [r3, #0]
 801ad7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	681a      	ldr	r2, [r3, #0]
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	681b      	ldr	r3, [r3, #0]
 801ad88:	f022 0201 	bic.w	r2, r2, #1
 801ad8c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	689b      	ldr	r3, [r3, #8]
 801ad94:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	683a      	ldr	r2, [r7, #0]
 801ad9e:	430a      	orrs	r2, r1
 801ada0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ada2:	6878      	ldr	r0, [r7, #4]
 801ada4:	f000 f850 	bl	801ae48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ada8:	687b      	ldr	r3, [r7, #4]
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	68fa      	ldr	r2, [r7, #12]
 801adae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2220      	movs	r2, #32
 801adb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2200      	movs	r2, #0
 801adbc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801adc0:	2300      	movs	r3, #0
}
 801adc2:	4618      	mov	r0, r3
 801adc4:	3710      	adds	r7, #16
 801adc6:	46bd      	mov	sp, r7
 801adc8:	bd80      	pop	{r7, pc}

0801adca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801adca:	b580      	push	{r7, lr}
 801adcc:	b084      	sub	sp, #16
 801adce:	af00      	add	r7, sp, #0
 801add0:	6078      	str	r0, [r7, #4]
 801add2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801adda:	2b01      	cmp	r3, #1
 801addc:	d101      	bne.n	801ade2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801adde:	2302      	movs	r3, #2
 801ade0:	e02d      	b.n	801ae3e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801ade2:	687b      	ldr	r3, [r7, #4]
 801ade4:	2201      	movs	r2, #1
 801ade6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	2224      	movs	r2, #36	; 0x24
 801adee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801adf2:	687b      	ldr	r3, [r7, #4]
 801adf4:	681b      	ldr	r3, [r3, #0]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	681a      	ldr	r2, [r3, #0]
 801ae00:	687b      	ldr	r3, [r7, #4]
 801ae02:	681b      	ldr	r3, [r3, #0]
 801ae04:	f022 0201 	bic.w	r2, r2, #1
 801ae08:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	689b      	ldr	r3, [r3, #8]
 801ae10:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801ae14:	687b      	ldr	r3, [r7, #4]
 801ae16:	681b      	ldr	r3, [r3, #0]
 801ae18:	683a      	ldr	r2, [r7, #0]
 801ae1a:	430a      	orrs	r2, r1
 801ae1c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801ae1e:	6878      	ldr	r0, [r7, #4]
 801ae20:	f000 f812 	bl	801ae48 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801ae24:	687b      	ldr	r3, [r7, #4]
 801ae26:	681b      	ldr	r3, [r3, #0]
 801ae28:	68fa      	ldr	r2, [r7, #12]
 801ae2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	2220      	movs	r2, #32
 801ae30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	2200      	movs	r2, #0
 801ae38:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801ae3c:	2300      	movs	r3, #0
}
 801ae3e:	4618      	mov	r0, r3
 801ae40:	3710      	adds	r7, #16
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}
	...

0801ae48 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b089      	sub	sp, #36	; 0x24
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801ae50:	4a2f      	ldr	r2, [pc, #188]	; (801af10 <UARTEx_SetNbDataToProcess+0xc8>)
 801ae52:	f107 0314 	add.w	r3, r7, #20
 801ae56:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae5a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801ae5e:	4a2d      	ldr	r2, [pc, #180]	; (801af14 <UARTEx_SetNbDataToProcess+0xcc>)
 801ae60:	f107 030c 	add.w	r3, r7, #12
 801ae64:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae68:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d108      	bne.n	801ae86 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	2201      	movs	r2, #1
 801ae78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	2201      	movs	r2, #1
 801ae80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801ae84:	e03d      	b.n	801af02 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801ae86:	2308      	movs	r3, #8
 801ae88:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801ae8a:	2308      	movs	r3, #8
 801ae8c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801ae8e:	687b      	ldr	r3, [r7, #4]
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	689b      	ldr	r3, [r3, #8]
 801ae94:	0e5b      	lsrs	r3, r3, #25
 801ae96:	b2db      	uxtb	r3, r3
 801ae98:	f003 0307 	and.w	r3, r3, #7
 801ae9c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801ae9e:	687b      	ldr	r3, [r7, #4]
 801aea0:	681b      	ldr	r3, [r3, #0]
 801aea2:	689b      	ldr	r3, [r3, #8]
 801aea4:	0f5b      	lsrs	r3, r3, #29
 801aea6:	b2db      	uxtb	r3, r3
 801aea8:	f003 0307 	and.w	r3, r3, #7
 801aeac:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801aeae:	7fbb      	ldrb	r3, [r7, #30]
 801aeb0:	7f3a      	ldrb	r2, [r7, #28]
 801aeb2:	f107 0120 	add.w	r1, r7, #32
 801aeb6:	440a      	add	r2, r1
 801aeb8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801aebc:	fb02 f303 	mul.w	r3, r2, r3
 801aec0:	7f3a      	ldrb	r2, [r7, #28]
 801aec2:	f107 0120 	add.w	r1, r7, #32
 801aec6:	440a      	add	r2, r1
 801aec8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801aecc:	fb93 f3f2 	sdiv	r3, r3, r2
 801aed0:	b29a      	uxth	r2, r3
 801aed2:	687b      	ldr	r3, [r7, #4]
 801aed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 801aed8:	7ffb      	ldrb	r3, [r7, #31]
 801aeda:	7f7a      	ldrb	r2, [r7, #29]
 801aedc:	f107 0120 	add.w	r1, r7, #32
 801aee0:	440a      	add	r2, r1
 801aee2:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801aee6:	fb02 f303 	mul.w	r3, r2, r3
 801aeea:	7f7a      	ldrb	r2, [r7, #29]
 801aeec:	f107 0120 	add.w	r1, r7, #32
 801aef0:	440a      	add	r2, r1
 801aef2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801aef6:	fb93 f3f2 	sdiv	r3, r3, r2
 801aefa:	b29a      	uxth	r2, r3
 801aefc:	687b      	ldr	r3, [r7, #4]
 801aefe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801af02:	bf00      	nop
 801af04:	3724      	adds	r7, #36	; 0x24
 801af06:	46bd      	mov	sp, r7
 801af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af0c:	4770      	bx	lr
 801af0e:	bf00      	nop
 801af10:	0801f8cc 	.word	0x0801f8cc
 801af14:	0801f8d4 	.word	0x0801f8d4

0801af18 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801af18:	b084      	sub	sp, #16
 801af1a:	b580      	push	{r7, lr}
 801af1c:	b084      	sub	sp, #16
 801af1e:	af00      	add	r7, sp, #0
 801af20:	6078      	str	r0, [r7, #4]
 801af22:	f107 001c 	add.w	r0, r7, #28
 801af26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801af2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801af2c:	2b01      	cmp	r3, #1
 801af2e:	d120      	bne.n	801af72 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801af3c:	687b      	ldr	r3, [r7, #4]
 801af3e:	68da      	ldr	r2, [r3, #12]
 801af40:	4b25      	ldr	r3, [pc, #148]	; (801afd8 <USB_CoreInit+0xc0>)
 801af42:	4013      	ands	r3, r2
 801af44:	687a      	ldr	r2, [r7, #4]
 801af46:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	68db      	ldr	r3, [r3, #12]
 801af4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801af54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801af56:	2b01      	cmp	r3, #1
 801af58:	d105      	bne.n	801af66 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	68db      	ldr	r3, [r3, #12]
 801af5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801af66:	6878      	ldr	r0, [r7, #4]
 801af68:	f001 fa66 	bl	801c438 <USB_CoreReset>
 801af6c:	4603      	mov	r3, r0
 801af6e:	73fb      	strb	r3, [r7, #15]
 801af70:	e01a      	b.n	801afa8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	68db      	ldr	r3, [r3, #12]
 801af76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801af7e:	6878      	ldr	r0, [r7, #4]
 801af80:	f001 fa5a 	bl	801c438 <USB_CoreReset>
 801af84:	4603      	mov	r3, r0
 801af86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801af88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d106      	bne.n	801af9c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801af92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801af96:	687b      	ldr	r3, [r7, #4]
 801af98:	639a      	str	r2, [r3, #56]	; 0x38
 801af9a:	e005      	b.n	801afa8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801afa0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801afa4:	687b      	ldr	r3, [r7, #4]
 801afa6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801afa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801afaa:	2b01      	cmp	r3, #1
 801afac:	d10b      	bne.n	801afc6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	689b      	ldr	r3, [r3, #8]
 801afb2:	f043 0206 	orr.w	r2, r3, #6
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	689b      	ldr	r3, [r3, #8]
 801afbe:	f043 0220 	orr.w	r2, r3, #32
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801afc6:	7bfb      	ldrb	r3, [r7, #15]
}
 801afc8:	4618      	mov	r0, r3
 801afca:	3710      	adds	r7, #16
 801afcc:	46bd      	mov	sp, r7
 801afce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801afd2:	b004      	add	sp, #16
 801afd4:	4770      	bx	lr
 801afd6:	bf00      	nop
 801afd8:	ffbdffbf 	.word	0xffbdffbf

0801afdc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801afdc:	b480      	push	{r7}
 801afde:	b087      	sub	sp, #28
 801afe0:	af00      	add	r7, sp, #0
 801afe2:	60f8      	str	r0, [r7, #12]
 801afe4:	60b9      	str	r1, [r7, #8]
 801afe6:	4613      	mov	r3, r2
 801afe8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801afea:	79fb      	ldrb	r3, [r7, #7]
 801afec:	2b02      	cmp	r3, #2
 801afee:	d165      	bne.n	801b0bc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801aff0:	68bb      	ldr	r3, [r7, #8]
 801aff2:	4a41      	ldr	r2, [pc, #260]	; (801b0f8 <USB_SetTurnaroundTime+0x11c>)
 801aff4:	4293      	cmp	r3, r2
 801aff6:	d906      	bls.n	801b006 <USB_SetTurnaroundTime+0x2a>
 801aff8:	68bb      	ldr	r3, [r7, #8]
 801affa:	4a40      	ldr	r2, [pc, #256]	; (801b0fc <USB_SetTurnaroundTime+0x120>)
 801affc:	4293      	cmp	r3, r2
 801affe:	d802      	bhi.n	801b006 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801b000:	230f      	movs	r3, #15
 801b002:	617b      	str	r3, [r7, #20]
 801b004:	e062      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801b006:	68bb      	ldr	r3, [r7, #8]
 801b008:	4a3c      	ldr	r2, [pc, #240]	; (801b0fc <USB_SetTurnaroundTime+0x120>)
 801b00a:	4293      	cmp	r3, r2
 801b00c:	d906      	bls.n	801b01c <USB_SetTurnaroundTime+0x40>
 801b00e:	68bb      	ldr	r3, [r7, #8]
 801b010:	4a3b      	ldr	r2, [pc, #236]	; (801b100 <USB_SetTurnaroundTime+0x124>)
 801b012:	4293      	cmp	r3, r2
 801b014:	d802      	bhi.n	801b01c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801b016:	230e      	movs	r3, #14
 801b018:	617b      	str	r3, [r7, #20]
 801b01a:	e057      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801b01c:	68bb      	ldr	r3, [r7, #8]
 801b01e:	4a38      	ldr	r2, [pc, #224]	; (801b100 <USB_SetTurnaroundTime+0x124>)
 801b020:	4293      	cmp	r3, r2
 801b022:	d906      	bls.n	801b032 <USB_SetTurnaroundTime+0x56>
 801b024:	68bb      	ldr	r3, [r7, #8]
 801b026:	4a37      	ldr	r2, [pc, #220]	; (801b104 <USB_SetTurnaroundTime+0x128>)
 801b028:	4293      	cmp	r3, r2
 801b02a:	d802      	bhi.n	801b032 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801b02c:	230d      	movs	r3, #13
 801b02e:	617b      	str	r3, [r7, #20]
 801b030:	e04c      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801b032:	68bb      	ldr	r3, [r7, #8]
 801b034:	4a33      	ldr	r2, [pc, #204]	; (801b104 <USB_SetTurnaroundTime+0x128>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d906      	bls.n	801b048 <USB_SetTurnaroundTime+0x6c>
 801b03a:	68bb      	ldr	r3, [r7, #8]
 801b03c:	4a32      	ldr	r2, [pc, #200]	; (801b108 <USB_SetTurnaroundTime+0x12c>)
 801b03e:	4293      	cmp	r3, r2
 801b040:	d802      	bhi.n	801b048 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801b042:	230c      	movs	r3, #12
 801b044:	617b      	str	r3, [r7, #20]
 801b046:	e041      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801b048:	68bb      	ldr	r3, [r7, #8]
 801b04a:	4a2f      	ldr	r2, [pc, #188]	; (801b108 <USB_SetTurnaroundTime+0x12c>)
 801b04c:	4293      	cmp	r3, r2
 801b04e:	d906      	bls.n	801b05e <USB_SetTurnaroundTime+0x82>
 801b050:	68bb      	ldr	r3, [r7, #8]
 801b052:	4a2e      	ldr	r2, [pc, #184]	; (801b10c <USB_SetTurnaroundTime+0x130>)
 801b054:	4293      	cmp	r3, r2
 801b056:	d802      	bhi.n	801b05e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801b058:	230b      	movs	r3, #11
 801b05a:	617b      	str	r3, [r7, #20]
 801b05c:	e036      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801b05e:	68bb      	ldr	r3, [r7, #8]
 801b060:	4a2a      	ldr	r2, [pc, #168]	; (801b10c <USB_SetTurnaroundTime+0x130>)
 801b062:	4293      	cmp	r3, r2
 801b064:	d906      	bls.n	801b074 <USB_SetTurnaroundTime+0x98>
 801b066:	68bb      	ldr	r3, [r7, #8]
 801b068:	4a29      	ldr	r2, [pc, #164]	; (801b110 <USB_SetTurnaroundTime+0x134>)
 801b06a:	4293      	cmp	r3, r2
 801b06c:	d802      	bhi.n	801b074 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801b06e:	230a      	movs	r3, #10
 801b070:	617b      	str	r3, [r7, #20]
 801b072:	e02b      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801b074:	68bb      	ldr	r3, [r7, #8]
 801b076:	4a26      	ldr	r2, [pc, #152]	; (801b110 <USB_SetTurnaroundTime+0x134>)
 801b078:	4293      	cmp	r3, r2
 801b07a:	d906      	bls.n	801b08a <USB_SetTurnaroundTime+0xae>
 801b07c:	68bb      	ldr	r3, [r7, #8]
 801b07e:	4a25      	ldr	r2, [pc, #148]	; (801b114 <USB_SetTurnaroundTime+0x138>)
 801b080:	4293      	cmp	r3, r2
 801b082:	d802      	bhi.n	801b08a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801b084:	2309      	movs	r3, #9
 801b086:	617b      	str	r3, [r7, #20]
 801b088:	e020      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801b08a:	68bb      	ldr	r3, [r7, #8]
 801b08c:	4a21      	ldr	r2, [pc, #132]	; (801b114 <USB_SetTurnaroundTime+0x138>)
 801b08e:	4293      	cmp	r3, r2
 801b090:	d906      	bls.n	801b0a0 <USB_SetTurnaroundTime+0xc4>
 801b092:	68bb      	ldr	r3, [r7, #8]
 801b094:	4a20      	ldr	r2, [pc, #128]	; (801b118 <USB_SetTurnaroundTime+0x13c>)
 801b096:	4293      	cmp	r3, r2
 801b098:	d802      	bhi.n	801b0a0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801b09a:	2308      	movs	r3, #8
 801b09c:	617b      	str	r3, [r7, #20]
 801b09e:	e015      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801b0a0:	68bb      	ldr	r3, [r7, #8]
 801b0a2:	4a1d      	ldr	r2, [pc, #116]	; (801b118 <USB_SetTurnaroundTime+0x13c>)
 801b0a4:	4293      	cmp	r3, r2
 801b0a6:	d906      	bls.n	801b0b6 <USB_SetTurnaroundTime+0xda>
 801b0a8:	68bb      	ldr	r3, [r7, #8]
 801b0aa:	4a1c      	ldr	r2, [pc, #112]	; (801b11c <USB_SetTurnaroundTime+0x140>)
 801b0ac:	4293      	cmp	r3, r2
 801b0ae:	d802      	bhi.n	801b0b6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801b0b0:	2307      	movs	r3, #7
 801b0b2:	617b      	str	r3, [r7, #20]
 801b0b4:	e00a      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801b0b6:	2306      	movs	r3, #6
 801b0b8:	617b      	str	r3, [r7, #20]
 801b0ba:	e007      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801b0bc:	79fb      	ldrb	r3, [r7, #7]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d102      	bne.n	801b0c8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801b0c2:	2309      	movs	r3, #9
 801b0c4:	617b      	str	r3, [r7, #20]
 801b0c6:	e001      	b.n	801b0cc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801b0c8:	2309      	movs	r3, #9
 801b0ca:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801b0cc:	68fb      	ldr	r3, [r7, #12]
 801b0ce:	68db      	ldr	r3, [r3, #12]
 801b0d0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801b0d8:	68fb      	ldr	r3, [r7, #12]
 801b0da:	68da      	ldr	r2, [r3, #12]
 801b0dc:	697b      	ldr	r3, [r7, #20]
 801b0de:	029b      	lsls	r3, r3, #10
 801b0e0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801b0e4:	431a      	orrs	r2, r3
 801b0e6:	68fb      	ldr	r3, [r7, #12]
 801b0e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801b0ea:	2300      	movs	r3, #0
}
 801b0ec:	4618      	mov	r0, r3
 801b0ee:	371c      	adds	r7, #28
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0f6:	4770      	bx	lr
 801b0f8:	00d8acbf 	.word	0x00d8acbf
 801b0fc:	00e4e1bf 	.word	0x00e4e1bf
 801b100:	00f423ff 	.word	0x00f423ff
 801b104:	0106737f 	.word	0x0106737f
 801b108:	011a499f 	.word	0x011a499f
 801b10c:	01312cff 	.word	0x01312cff
 801b110:	014ca43f 	.word	0x014ca43f
 801b114:	016e35ff 	.word	0x016e35ff
 801b118:	01a6ab1f 	.word	0x01a6ab1f
 801b11c:	01e847ff 	.word	0x01e847ff

0801b120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b120:	b480      	push	{r7}
 801b122:	b083      	sub	sp, #12
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	689b      	ldr	r3, [r3, #8]
 801b12c:	f043 0201 	orr.w	r2, r3, #1
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b134:	2300      	movs	r3, #0
}
 801b136:	4618      	mov	r0, r3
 801b138:	370c      	adds	r7, #12
 801b13a:	46bd      	mov	sp, r7
 801b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b140:	4770      	bx	lr

0801b142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801b142:	b480      	push	{r7}
 801b144:	b083      	sub	sp, #12
 801b146:	af00      	add	r7, sp, #0
 801b148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	689b      	ldr	r3, [r3, #8]
 801b14e:	f023 0201 	bic.w	r2, r3, #1
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801b156:	2300      	movs	r3, #0
}
 801b158:	4618      	mov	r0, r3
 801b15a:	370c      	adds	r7, #12
 801b15c:	46bd      	mov	sp, r7
 801b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b162:	4770      	bx	lr

0801b164 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801b164:	b580      	push	{r7, lr}
 801b166:	b082      	sub	sp, #8
 801b168:	af00      	add	r7, sp, #0
 801b16a:	6078      	str	r0, [r7, #4]
 801b16c:	460b      	mov	r3, r1
 801b16e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	68db      	ldr	r3, [r3, #12]
 801b174:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801b17c:	78fb      	ldrb	r3, [r7, #3]
 801b17e:	2b01      	cmp	r3, #1
 801b180:	d106      	bne.n	801b190 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	68db      	ldr	r3, [r3, #12]
 801b186:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801b18a:	687b      	ldr	r3, [r7, #4]
 801b18c:	60da      	str	r2, [r3, #12]
 801b18e:	e00b      	b.n	801b1a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801b190:	78fb      	ldrb	r3, [r7, #3]
 801b192:	2b00      	cmp	r3, #0
 801b194:	d106      	bne.n	801b1a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	68db      	ldr	r3, [r3, #12]
 801b19a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	60da      	str	r2, [r3, #12]
 801b1a2:	e001      	b.n	801b1a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801b1a4:	2301      	movs	r3, #1
 801b1a6:	e003      	b.n	801b1b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801b1a8:	2032      	movs	r0, #50	; 0x32
 801b1aa:	f7f7 fe7f 	bl	8012eac <HAL_Delay>

  return HAL_OK;
 801b1ae:	2300      	movs	r3, #0
}
 801b1b0:	4618      	mov	r0, r3
 801b1b2:	3708      	adds	r7, #8
 801b1b4:	46bd      	mov	sp, r7
 801b1b6:	bd80      	pop	{r7, pc}

0801b1b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801b1b8:	b084      	sub	sp, #16
 801b1ba:	b580      	push	{r7, lr}
 801b1bc:	b086      	sub	sp, #24
 801b1be:	af00      	add	r7, sp, #0
 801b1c0:	6078      	str	r0, [r7, #4]
 801b1c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801b1c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801b1ca:	2300      	movs	r3, #0
 801b1cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801b1d2:	2300      	movs	r3, #0
 801b1d4:	613b      	str	r3, [r7, #16]
 801b1d6:	e009      	b.n	801b1ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801b1d8:	687a      	ldr	r2, [r7, #4]
 801b1da:	693b      	ldr	r3, [r7, #16]
 801b1dc:	3340      	adds	r3, #64	; 0x40
 801b1de:	009b      	lsls	r3, r3, #2
 801b1e0:	4413      	add	r3, r2
 801b1e2:	2200      	movs	r2, #0
 801b1e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801b1e6:	693b      	ldr	r3, [r7, #16]
 801b1e8:	3301      	adds	r3, #1
 801b1ea:	613b      	str	r3, [r7, #16]
 801b1ec:	693b      	ldr	r3, [r7, #16]
 801b1ee:	2b0e      	cmp	r3, #14
 801b1f0:	d9f2      	bls.n	801b1d8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801b1f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d11c      	bne.n	801b232 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1fe:	685b      	ldr	r3, [r3, #4]
 801b200:	68fa      	ldr	r2, [r7, #12]
 801b202:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b206:	f043 0302 	orr.w	r3, r3, #2
 801b20a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801b20c:	687b      	ldr	r3, [r7, #4]
 801b20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b210:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801b224:	687b      	ldr	r3, [r7, #4]
 801b226:	681b      	ldr	r3, [r3, #0]
 801b228:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	601a      	str	r2, [r3, #0]
 801b230:	e005      	b.n	801b23e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801b232:	687b      	ldr	r3, [r7, #4]
 801b234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b236:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801b244:	461a      	mov	r2, r3
 801b246:	2300      	movs	r3, #0
 801b248:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801b24a:	68fb      	ldr	r3, [r7, #12]
 801b24c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b250:	4619      	mov	r1, r3
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b258:	461a      	mov	r2, r3
 801b25a:	680b      	ldr	r3, [r1, #0]
 801b25c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801b25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b260:	2b01      	cmp	r3, #1
 801b262:	d10c      	bne.n	801b27e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801b264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b266:	2b00      	cmp	r3, #0
 801b268:	d104      	bne.n	801b274 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801b26a:	2100      	movs	r1, #0
 801b26c:	6878      	ldr	r0, [r7, #4]
 801b26e:	f000 f949 	bl	801b504 <USB_SetDevSpeed>
 801b272:	e008      	b.n	801b286 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801b274:	2101      	movs	r1, #1
 801b276:	6878      	ldr	r0, [r7, #4]
 801b278:	f000 f944 	bl	801b504 <USB_SetDevSpeed>
 801b27c:	e003      	b.n	801b286 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801b27e:	2103      	movs	r1, #3
 801b280:	6878      	ldr	r0, [r7, #4]
 801b282:	f000 f93f 	bl	801b504 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801b286:	2110      	movs	r1, #16
 801b288:	6878      	ldr	r0, [r7, #4]
 801b28a:	f000 f8f3 	bl	801b474 <USB_FlushTxFifo>
 801b28e:	4603      	mov	r3, r0
 801b290:	2b00      	cmp	r3, #0
 801b292:	d001      	beq.n	801b298 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801b294:	2301      	movs	r3, #1
 801b296:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	f000 f911 	bl	801b4c0 <USB_FlushRxFifo>
 801b29e:	4603      	mov	r3, r0
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d001      	beq.n	801b2a8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801b2a4:	2301      	movs	r3, #1
 801b2a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801b2a8:	68fb      	ldr	r3, [r7, #12]
 801b2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2ae:	461a      	mov	r2, r3
 801b2b0:	2300      	movs	r3, #0
 801b2b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2ba:	461a      	mov	r2, r3
 801b2bc:	2300      	movs	r3, #0
 801b2be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2c6:	461a      	mov	r2, r3
 801b2c8:	2300      	movs	r3, #0
 801b2ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b2cc:	2300      	movs	r3, #0
 801b2ce:	613b      	str	r3, [r7, #16]
 801b2d0:	e043      	b.n	801b35a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801b2d2:	693b      	ldr	r3, [r7, #16]
 801b2d4:	015a      	lsls	r2, r3, #5
 801b2d6:	68fb      	ldr	r3, [r7, #12]
 801b2d8:	4413      	add	r3, r2
 801b2da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2de:	681b      	ldr	r3, [r3, #0]
 801b2e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b2e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b2e8:	d118      	bne.n	801b31c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801b2ea:	693b      	ldr	r3, [r7, #16]
 801b2ec:	2b00      	cmp	r3, #0
 801b2ee:	d10a      	bne.n	801b306 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801b2f0:	693b      	ldr	r3, [r7, #16]
 801b2f2:	015a      	lsls	r2, r3, #5
 801b2f4:	68fb      	ldr	r3, [r7, #12]
 801b2f6:	4413      	add	r3, r2
 801b2f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2fc:	461a      	mov	r2, r3
 801b2fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b302:	6013      	str	r3, [r2, #0]
 801b304:	e013      	b.n	801b32e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801b306:	693b      	ldr	r3, [r7, #16]
 801b308:	015a      	lsls	r2, r3, #5
 801b30a:	68fb      	ldr	r3, [r7, #12]
 801b30c:	4413      	add	r3, r2
 801b30e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b312:	461a      	mov	r2, r3
 801b314:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b318:	6013      	str	r3, [r2, #0]
 801b31a:	e008      	b.n	801b32e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	015a      	lsls	r2, r3, #5
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	4413      	add	r3, r2
 801b324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b328:	461a      	mov	r2, r3
 801b32a:	2300      	movs	r3, #0
 801b32c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801b32e:	693b      	ldr	r3, [r7, #16]
 801b330:	015a      	lsls	r2, r3, #5
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	4413      	add	r3, r2
 801b336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b33a:	461a      	mov	r2, r3
 801b33c:	2300      	movs	r3, #0
 801b33e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801b340:	693b      	ldr	r3, [r7, #16]
 801b342:	015a      	lsls	r2, r3, #5
 801b344:	68fb      	ldr	r3, [r7, #12]
 801b346:	4413      	add	r3, r2
 801b348:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b34c:	461a      	mov	r2, r3
 801b34e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b352:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b354:	693b      	ldr	r3, [r7, #16]
 801b356:	3301      	adds	r3, #1
 801b358:	613b      	str	r3, [r7, #16]
 801b35a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b35c:	693a      	ldr	r2, [r7, #16]
 801b35e:	429a      	cmp	r2, r3
 801b360:	d3b7      	bcc.n	801b2d2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b362:	2300      	movs	r3, #0
 801b364:	613b      	str	r3, [r7, #16]
 801b366:	e043      	b.n	801b3f0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801b368:	693b      	ldr	r3, [r7, #16]
 801b36a:	015a      	lsls	r2, r3, #5
 801b36c:	68fb      	ldr	r3, [r7, #12]
 801b36e:	4413      	add	r3, r2
 801b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801b37a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801b37e:	d118      	bne.n	801b3b2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801b380:	693b      	ldr	r3, [r7, #16]
 801b382:	2b00      	cmp	r3, #0
 801b384:	d10a      	bne.n	801b39c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801b386:	693b      	ldr	r3, [r7, #16]
 801b388:	015a      	lsls	r2, r3, #5
 801b38a:	68fb      	ldr	r3, [r7, #12]
 801b38c:	4413      	add	r3, r2
 801b38e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b392:	461a      	mov	r2, r3
 801b394:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801b398:	6013      	str	r3, [r2, #0]
 801b39a:	e013      	b.n	801b3c4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801b39c:	693b      	ldr	r3, [r7, #16]
 801b39e:	015a      	lsls	r2, r3, #5
 801b3a0:	68fb      	ldr	r3, [r7, #12]
 801b3a2:	4413      	add	r3, r2
 801b3a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3a8:	461a      	mov	r2, r3
 801b3aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801b3ae:	6013      	str	r3, [r2, #0]
 801b3b0:	e008      	b.n	801b3c4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801b3b2:	693b      	ldr	r3, [r7, #16]
 801b3b4:	015a      	lsls	r2, r3, #5
 801b3b6:	68fb      	ldr	r3, [r7, #12]
 801b3b8:	4413      	add	r3, r2
 801b3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3be:	461a      	mov	r2, r3
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801b3c4:	693b      	ldr	r3, [r7, #16]
 801b3c6:	015a      	lsls	r2, r3, #5
 801b3c8:	68fb      	ldr	r3, [r7, #12]
 801b3ca:	4413      	add	r3, r2
 801b3cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3d0:	461a      	mov	r2, r3
 801b3d2:	2300      	movs	r3, #0
 801b3d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801b3d6:	693b      	ldr	r3, [r7, #16]
 801b3d8:	015a      	lsls	r2, r3, #5
 801b3da:	68fb      	ldr	r3, [r7, #12]
 801b3dc:	4413      	add	r3, r2
 801b3de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3e2:	461a      	mov	r2, r3
 801b3e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b3e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b3ea:	693b      	ldr	r3, [r7, #16]
 801b3ec:	3301      	adds	r3, #1
 801b3ee:	613b      	str	r3, [r7, #16]
 801b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f2:	693a      	ldr	r2, [r7, #16]
 801b3f4:	429a      	cmp	r2, r3
 801b3f6:	d3b7      	bcc.n	801b368 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b3fe:	691b      	ldr	r3, [r3, #16]
 801b400:	68fa      	ldr	r2, [r7, #12]
 801b402:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b406:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b40a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b40c:	687b      	ldr	r3, [r7, #4]
 801b40e:	2200      	movs	r2, #0
 801b410:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b412:	687b      	ldr	r3, [r7, #4]
 801b414:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801b418:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d105      	bne.n	801b42c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	699b      	ldr	r3, [r3, #24]
 801b424:	f043 0210 	orr.w	r2, r3, #16
 801b428:	687b      	ldr	r3, [r7, #4]
 801b42a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	699a      	ldr	r2, [r3, #24]
 801b430:	4b0e      	ldr	r3, [pc, #56]	; (801b46c <USB_DevInit+0x2b4>)
 801b432:	4313      	orrs	r3, r2
 801b434:	687a      	ldr	r2, [r7, #4]
 801b436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b43a:	2b00      	cmp	r3, #0
 801b43c:	d005      	beq.n	801b44a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b43e:	687b      	ldr	r3, [r7, #4]
 801b440:	699b      	ldr	r3, [r3, #24]
 801b442:	f043 0208 	orr.w	r2, r3, #8
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b44a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b44c:	2b01      	cmp	r3, #1
 801b44e:	d105      	bne.n	801b45c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	699a      	ldr	r2, [r3, #24]
 801b454:	4b06      	ldr	r3, [pc, #24]	; (801b470 <USB_DevInit+0x2b8>)
 801b456:	4313      	orrs	r3, r2
 801b458:	687a      	ldr	r2, [r7, #4]
 801b45a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b45c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b45e:	4618      	mov	r0, r3
 801b460:	3718      	adds	r7, #24
 801b462:	46bd      	mov	sp, r7
 801b464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b468:	b004      	add	sp, #16
 801b46a:	4770      	bx	lr
 801b46c:	803c3800 	.word	0x803c3800
 801b470:	40000004 	.word	0x40000004

0801b474 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b474:	b480      	push	{r7}
 801b476:	b085      	sub	sp, #20
 801b478:	af00      	add	r7, sp, #0
 801b47a:	6078      	str	r0, [r7, #4]
 801b47c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801b47e:	2300      	movs	r3, #0
 801b480:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b482:	683b      	ldr	r3, [r7, #0]
 801b484:	019b      	lsls	r3, r3, #6
 801b486:	f043 0220 	orr.w	r2, r3, #32
 801b48a:	687b      	ldr	r3, [r7, #4]
 801b48c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b48e:	68fb      	ldr	r3, [r7, #12]
 801b490:	3301      	adds	r3, #1
 801b492:	60fb      	str	r3, [r7, #12]
 801b494:	68fb      	ldr	r3, [r7, #12]
 801b496:	4a09      	ldr	r2, [pc, #36]	; (801b4bc <USB_FlushTxFifo+0x48>)
 801b498:	4293      	cmp	r3, r2
 801b49a:	d901      	bls.n	801b4a0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801b49c:	2303      	movs	r3, #3
 801b49e:	e006      	b.n	801b4ae <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	691b      	ldr	r3, [r3, #16]
 801b4a4:	f003 0320 	and.w	r3, r3, #32
 801b4a8:	2b20      	cmp	r3, #32
 801b4aa:	d0f0      	beq.n	801b48e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801b4ac:	2300      	movs	r3, #0
}
 801b4ae:	4618      	mov	r0, r3
 801b4b0:	3714      	adds	r7, #20
 801b4b2:	46bd      	mov	sp, r7
 801b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4b8:	4770      	bx	lr
 801b4ba:	bf00      	nop
 801b4bc:	00030d40 	.word	0x00030d40

0801b4c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b4c0:	b480      	push	{r7}
 801b4c2:	b085      	sub	sp, #20
 801b4c4:	af00      	add	r7, sp, #0
 801b4c6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	2210      	movs	r2, #16
 801b4d0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b4d2:	68fb      	ldr	r3, [r7, #12]
 801b4d4:	3301      	adds	r3, #1
 801b4d6:	60fb      	str	r3, [r7, #12]
 801b4d8:	68fb      	ldr	r3, [r7, #12]
 801b4da:	4a09      	ldr	r2, [pc, #36]	; (801b500 <USB_FlushRxFifo+0x40>)
 801b4dc:	4293      	cmp	r3, r2
 801b4de:	d901      	bls.n	801b4e4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801b4e0:	2303      	movs	r3, #3
 801b4e2:	e006      	b.n	801b4f2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b4e4:	687b      	ldr	r3, [r7, #4]
 801b4e6:	691b      	ldr	r3, [r3, #16]
 801b4e8:	f003 0310 	and.w	r3, r3, #16
 801b4ec:	2b10      	cmp	r3, #16
 801b4ee:	d0f0      	beq.n	801b4d2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801b4f0:	2300      	movs	r3, #0
}
 801b4f2:	4618      	mov	r0, r3
 801b4f4:	3714      	adds	r7, #20
 801b4f6:	46bd      	mov	sp, r7
 801b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4fc:	4770      	bx	lr
 801b4fe:	bf00      	nop
 801b500:	00030d40 	.word	0x00030d40

0801b504 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b504:	b480      	push	{r7}
 801b506:	b085      	sub	sp, #20
 801b508:	af00      	add	r7, sp, #0
 801b50a:	6078      	str	r0, [r7, #4]
 801b50c:	460b      	mov	r3, r1
 801b50e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b514:	68fb      	ldr	r3, [r7, #12]
 801b516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b51a:	681a      	ldr	r2, [r3, #0]
 801b51c:	78fb      	ldrb	r3, [r7, #3]
 801b51e:	68f9      	ldr	r1, [r7, #12]
 801b520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b524:	4313      	orrs	r3, r2
 801b526:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b528:	2300      	movs	r3, #0
}
 801b52a:	4618      	mov	r0, r3
 801b52c:	3714      	adds	r7, #20
 801b52e:	46bd      	mov	sp, r7
 801b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b534:	4770      	bx	lr

0801b536 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801b536:	b480      	push	{r7}
 801b538:	b087      	sub	sp, #28
 801b53a:	af00      	add	r7, sp, #0
 801b53c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b542:	693b      	ldr	r3, [r7, #16]
 801b544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b548:	689b      	ldr	r3, [r3, #8]
 801b54a:	f003 0306 	and.w	r3, r3, #6
 801b54e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b550:	68fb      	ldr	r3, [r7, #12]
 801b552:	2b00      	cmp	r3, #0
 801b554:	d102      	bne.n	801b55c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b556:	2300      	movs	r3, #0
 801b558:	75fb      	strb	r3, [r7, #23]
 801b55a:	e00a      	b.n	801b572 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	2b02      	cmp	r3, #2
 801b560:	d002      	beq.n	801b568 <USB_GetDevSpeed+0x32>
 801b562:	68fb      	ldr	r3, [r7, #12]
 801b564:	2b06      	cmp	r3, #6
 801b566:	d102      	bne.n	801b56e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b568:	2302      	movs	r3, #2
 801b56a:	75fb      	strb	r3, [r7, #23]
 801b56c:	e001      	b.n	801b572 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b56e:	230f      	movs	r3, #15
 801b570:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b572:	7dfb      	ldrb	r3, [r7, #23]
}
 801b574:	4618      	mov	r0, r3
 801b576:	371c      	adds	r7, #28
 801b578:	46bd      	mov	sp, r7
 801b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b57e:	4770      	bx	lr

0801b580 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b580:	b480      	push	{r7}
 801b582:	b085      	sub	sp, #20
 801b584:	af00      	add	r7, sp, #0
 801b586:	6078      	str	r0, [r7, #4]
 801b588:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b58a:	687b      	ldr	r3, [r7, #4]
 801b58c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b58e:	683b      	ldr	r3, [r7, #0]
 801b590:	781b      	ldrb	r3, [r3, #0]
 801b592:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b594:	683b      	ldr	r3, [r7, #0]
 801b596:	785b      	ldrb	r3, [r3, #1]
 801b598:	2b01      	cmp	r3, #1
 801b59a:	d139      	bne.n	801b610 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b59c:	68fb      	ldr	r3, [r7, #12]
 801b59e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b5a2:	69da      	ldr	r2, [r3, #28]
 801b5a4:	683b      	ldr	r3, [r7, #0]
 801b5a6:	781b      	ldrb	r3, [r3, #0]
 801b5a8:	f003 030f 	and.w	r3, r3, #15
 801b5ac:	2101      	movs	r1, #1
 801b5ae:	fa01 f303 	lsl.w	r3, r1, r3
 801b5b2:	b29b      	uxth	r3, r3
 801b5b4:	68f9      	ldr	r1, [r7, #12]
 801b5b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b5ba:	4313      	orrs	r3, r2
 801b5bc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b5be:	68bb      	ldr	r3, [r7, #8]
 801b5c0:	015a      	lsls	r2, r3, #5
 801b5c2:	68fb      	ldr	r3, [r7, #12]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d153      	bne.n	801b67c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5d4:	68bb      	ldr	r3, [r7, #8]
 801b5d6:	015a      	lsls	r2, r3, #5
 801b5d8:	68fb      	ldr	r3, [r7, #12]
 801b5da:	4413      	add	r3, r2
 801b5dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5e0:	681a      	ldr	r2, [r3, #0]
 801b5e2:	683b      	ldr	r3, [r7, #0]
 801b5e4:	689b      	ldr	r3, [r3, #8]
 801b5e6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b5ea:	683b      	ldr	r3, [r7, #0]
 801b5ec:	78db      	ldrb	r3, [r3, #3]
 801b5ee:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5f0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b5f2:	68bb      	ldr	r3, [r7, #8]
 801b5f4:	059b      	lsls	r3, r3, #22
 801b5f6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b5f8:	431a      	orrs	r2, r3
 801b5fa:	68bb      	ldr	r3, [r7, #8]
 801b5fc:	0159      	lsls	r1, r3, #5
 801b5fe:	68fb      	ldr	r3, [r7, #12]
 801b600:	440b      	add	r3, r1
 801b602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b606:	4619      	mov	r1, r3
 801b608:	4b20      	ldr	r3, [pc, #128]	; (801b68c <USB_ActivateEndpoint+0x10c>)
 801b60a:	4313      	orrs	r3, r2
 801b60c:	600b      	str	r3, [r1, #0]
 801b60e:	e035      	b.n	801b67c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b610:	68fb      	ldr	r3, [r7, #12]
 801b612:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b616:	69da      	ldr	r2, [r3, #28]
 801b618:	683b      	ldr	r3, [r7, #0]
 801b61a:	781b      	ldrb	r3, [r3, #0]
 801b61c:	f003 030f 	and.w	r3, r3, #15
 801b620:	2101      	movs	r1, #1
 801b622:	fa01 f303 	lsl.w	r3, r1, r3
 801b626:	041b      	lsls	r3, r3, #16
 801b628:	68f9      	ldr	r1, [r7, #12]
 801b62a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b62e:	4313      	orrs	r3, r2
 801b630:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b632:	68bb      	ldr	r3, [r7, #8]
 801b634:	015a      	lsls	r2, r3, #5
 801b636:	68fb      	ldr	r3, [r7, #12]
 801b638:	4413      	add	r3, r2
 801b63a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b63e:	681b      	ldr	r3, [r3, #0]
 801b640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b644:	2b00      	cmp	r3, #0
 801b646:	d119      	bne.n	801b67c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b648:	68bb      	ldr	r3, [r7, #8]
 801b64a:	015a      	lsls	r2, r3, #5
 801b64c:	68fb      	ldr	r3, [r7, #12]
 801b64e:	4413      	add	r3, r2
 801b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b654:	681a      	ldr	r2, [r3, #0]
 801b656:	683b      	ldr	r3, [r7, #0]
 801b658:	689b      	ldr	r3, [r3, #8]
 801b65a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b65e:	683b      	ldr	r3, [r7, #0]
 801b660:	78db      	ldrb	r3, [r3, #3]
 801b662:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b664:	430b      	orrs	r3, r1
 801b666:	431a      	orrs	r2, r3
 801b668:	68bb      	ldr	r3, [r7, #8]
 801b66a:	0159      	lsls	r1, r3, #5
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	440b      	add	r3, r1
 801b670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b674:	4619      	mov	r1, r3
 801b676:	4b05      	ldr	r3, [pc, #20]	; (801b68c <USB_ActivateEndpoint+0x10c>)
 801b678:	4313      	orrs	r3, r2
 801b67a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b67c:	2300      	movs	r3, #0
}
 801b67e:	4618      	mov	r0, r3
 801b680:	3714      	adds	r7, #20
 801b682:	46bd      	mov	sp, r7
 801b684:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b688:	4770      	bx	lr
 801b68a:	bf00      	nop
 801b68c:	10008000 	.word	0x10008000

0801b690 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b690:	b480      	push	{r7}
 801b692:	b085      	sub	sp, #20
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b69e:	683b      	ldr	r3, [r7, #0]
 801b6a0:	781b      	ldrb	r3, [r3, #0]
 801b6a2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b6a4:	683b      	ldr	r3, [r7, #0]
 801b6a6:	785b      	ldrb	r3, [r3, #1]
 801b6a8:	2b01      	cmp	r3, #1
 801b6aa:	d135      	bne.n	801b718 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b6ac:	68fb      	ldr	r3, [r7, #12]
 801b6ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b6b4:	683b      	ldr	r3, [r7, #0]
 801b6b6:	781b      	ldrb	r3, [r3, #0]
 801b6b8:	f003 030f 	and.w	r3, r3, #15
 801b6bc:	2101      	movs	r1, #1
 801b6be:	fa01 f303 	lsl.w	r3, r1, r3
 801b6c2:	b29b      	uxth	r3, r3
 801b6c4:	43db      	mvns	r3, r3
 801b6c6:	68f9      	ldr	r1, [r7, #12]
 801b6c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b6cc:	4013      	ands	r3, r2
 801b6ce:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b6d6:	69da      	ldr	r2, [r3, #28]
 801b6d8:	683b      	ldr	r3, [r7, #0]
 801b6da:	781b      	ldrb	r3, [r3, #0]
 801b6dc:	f003 030f 	and.w	r3, r3, #15
 801b6e0:	2101      	movs	r1, #1
 801b6e2:	fa01 f303 	lsl.w	r3, r1, r3
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	43db      	mvns	r3, r3
 801b6ea:	68f9      	ldr	r1, [r7, #12]
 801b6ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b6f0:	4013      	ands	r3, r2
 801b6f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b6f4:	68bb      	ldr	r3, [r7, #8]
 801b6f6:	015a      	lsls	r2, r3, #5
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	4413      	add	r3, r2
 801b6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b700:	681a      	ldr	r2, [r3, #0]
 801b702:	68bb      	ldr	r3, [r7, #8]
 801b704:	0159      	lsls	r1, r3, #5
 801b706:	68fb      	ldr	r3, [r7, #12]
 801b708:	440b      	add	r3, r1
 801b70a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b70e:	4619      	mov	r1, r3
 801b710:	4b1f      	ldr	r3, [pc, #124]	; (801b790 <USB_DeactivateEndpoint+0x100>)
 801b712:	4013      	ands	r3, r2
 801b714:	600b      	str	r3, [r1, #0]
 801b716:	e034      	b.n	801b782 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b718:	68fb      	ldr	r3, [r7, #12]
 801b71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b71e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b720:	683b      	ldr	r3, [r7, #0]
 801b722:	781b      	ldrb	r3, [r3, #0]
 801b724:	f003 030f 	and.w	r3, r3, #15
 801b728:	2101      	movs	r1, #1
 801b72a:	fa01 f303 	lsl.w	r3, r1, r3
 801b72e:	041b      	lsls	r3, r3, #16
 801b730:	43db      	mvns	r3, r3
 801b732:	68f9      	ldr	r1, [r7, #12]
 801b734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b738:	4013      	ands	r3, r2
 801b73a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b73c:	68fb      	ldr	r3, [r7, #12]
 801b73e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b742:	69da      	ldr	r2, [r3, #28]
 801b744:	683b      	ldr	r3, [r7, #0]
 801b746:	781b      	ldrb	r3, [r3, #0]
 801b748:	f003 030f 	and.w	r3, r3, #15
 801b74c:	2101      	movs	r1, #1
 801b74e:	fa01 f303 	lsl.w	r3, r1, r3
 801b752:	041b      	lsls	r3, r3, #16
 801b754:	43db      	mvns	r3, r3
 801b756:	68f9      	ldr	r1, [r7, #12]
 801b758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b75c:	4013      	ands	r3, r2
 801b75e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b760:	68bb      	ldr	r3, [r7, #8]
 801b762:	015a      	lsls	r2, r3, #5
 801b764:	68fb      	ldr	r3, [r7, #12]
 801b766:	4413      	add	r3, r2
 801b768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b76c:	681a      	ldr	r2, [r3, #0]
 801b76e:	68bb      	ldr	r3, [r7, #8]
 801b770:	0159      	lsls	r1, r3, #5
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	440b      	add	r3, r1
 801b776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b77a:	4619      	mov	r1, r3
 801b77c:	4b05      	ldr	r3, [pc, #20]	; (801b794 <USB_DeactivateEndpoint+0x104>)
 801b77e:	4013      	ands	r3, r2
 801b780:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b782:	2300      	movs	r3, #0
}
 801b784:	4618      	mov	r0, r3
 801b786:	3714      	adds	r7, #20
 801b788:	46bd      	mov	sp, r7
 801b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b78e:	4770      	bx	lr
 801b790:	ec337800 	.word	0xec337800
 801b794:	eff37800 	.word	0xeff37800

0801b798 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b798:	b580      	push	{r7, lr}
 801b79a:	b08a      	sub	sp, #40	; 0x28
 801b79c:	af02      	add	r7, sp, #8
 801b79e:	60f8      	str	r0, [r7, #12]
 801b7a0:	60b9      	str	r1, [r7, #8]
 801b7a2:	4613      	mov	r3, r2
 801b7a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b7a6:	68fb      	ldr	r3, [r7, #12]
 801b7a8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b7aa:	68bb      	ldr	r3, [r7, #8]
 801b7ac:	781b      	ldrb	r3, [r3, #0]
 801b7ae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b7b0:	68bb      	ldr	r3, [r7, #8]
 801b7b2:	785b      	ldrb	r3, [r3, #1]
 801b7b4:	2b01      	cmp	r3, #1
 801b7b6:	f040 8163 	bne.w	801ba80 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b7ba:	68bb      	ldr	r3, [r7, #8]
 801b7bc:	695b      	ldr	r3, [r3, #20]
 801b7be:	2b00      	cmp	r3, #0
 801b7c0:	d132      	bne.n	801b828 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b7c2:	69bb      	ldr	r3, [r7, #24]
 801b7c4:	015a      	lsls	r2, r3, #5
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	4413      	add	r3, r2
 801b7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7ce:	691a      	ldr	r2, [r3, #16]
 801b7d0:	69bb      	ldr	r3, [r7, #24]
 801b7d2:	0159      	lsls	r1, r3, #5
 801b7d4:	69fb      	ldr	r3, [r7, #28]
 801b7d6:	440b      	add	r3, r1
 801b7d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7dc:	4619      	mov	r1, r3
 801b7de:	4ba5      	ldr	r3, [pc, #660]	; (801ba74 <USB_EPStartXfer+0x2dc>)
 801b7e0:	4013      	ands	r3, r2
 801b7e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b7e4:	69bb      	ldr	r3, [r7, #24]
 801b7e6:	015a      	lsls	r2, r3, #5
 801b7e8:	69fb      	ldr	r3, [r7, #28]
 801b7ea:	4413      	add	r3, r2
 801b7ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b7f0:	691b      	ldr	r3, [r3, #16]
 801b7f2:	69ba      	ldr	r2, [r7, #24]
 801b7f4:	0151      	lsls	r1, r2, #5
 801b7f6:	69fa      	ldr	r2, [r7, #28]
 801b7f8:	440a      	add	r2, r1
 801b7fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b7fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b802:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b804:	69bb      	ldr	r3, [r7, #24]
 801b806:	015a      	lsls	r2, r3, #5
 801b808:	69fb      	ldr	r3, [r7, #28]
 801b80a:	4413      	add	r3, r2
 801b80c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b810:	691a      	ldr	r2, [r3, #16]
 801b812:	69bb      	ldr	r3, [r7, #24]
 801b814:	0159      	lsls	r1, r3, #5
 801b816:	69fb      	ldr	r3, [r7, #28]
 801b818:	440b      	add	r3, r1
 801b81a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b81e:	4619      	mov	r1, r3
 801b820:	4b95      	ldr	r3, [pc, #596]	; (801ba78 <USB_EPStartXfer+0x2e0>)
 801b822:	4013      	ands	r3, r2
 801b824:	610b      	str	r3, [r1, #16]
 801b826:	e074      	b.n	801b912 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b828:	69bb      	ldr	r3, [r7, #24]
 801b82a:	015a      	lsls	r2, r3, #5
 801b82c:	69fb      	ldr	r3, [r7, #28]
 801b82e:	4413      	add	r3, r2
 801b830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b834:	691a      	ldr	r2, [r3, #16]
 801b836:	69bb      	ldr	r3, [r7, #24]
 801b838:	0159      	lsls	r1, r3, #5
 801b83a:	69fb      	ldr	r3, [r7, #28]
 801b83c:	440b      	add	r3, r1
 801b83e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b842:	4619      	mov	r1, r3
 801b844:	4b8c      	ldr	r3, [pc, #560]	; (801ba78 <USB_EPStartXfer+0x2e0>)
 801b846:	4013      	ands	r3, r2
 801b848:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b84a:	69bb      	ldr	r3, [r7, #24]
 801b84c:	015a      	lsls	r2, r3, #5
 801b84e:	69fb      	ldr	r3, [r7, #28]
 801b850:	4413      	add	r3, r2
 801b852:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b856:	691a      	ldr	r2, [r3, #16]
 801b858:	69bb      	ldr	r3, [r7, #24]
 801b85a:	0159      	lsls	r1, r3, #5
 801b85c:	69fb      	ldr	r3, [r7, #28]
 801b85e:	440b      	add	r3, r1
 801b860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b864:	4619      	mov	r1, r3
 801b866:	4b83      	ldr	r3, [pc, #524]	; (801ba74 <USB_EPStartXfer+0x2dc>)
 801b868:	4013      	ands	r3, r2
 801b86a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b86c:	69bb      	ldr	r3, [r7, #24]
 801b86e:	015a      	lsls	r2, r3, #5
 801b870:	69fb      	ldr	r3, [r7, #28]
 801b872:	4413      	add	r3, r2
 801b874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b878:	691a      	ldr	r2, [r3, #16]
 801b87a:	68bb      	ldr	r3, [r7, #8]
 801b87c:	6959      	ldr	r1, [r3, #20]
 801b87e:	68bb      	ldr	r3, [r7, #8]
 801b880:	689b      	ldr	r3, [r3, #8]
 801b882:	440b      	add	r3, r1
 801b884:	1e59      	subs	r1, r3, #1
 801b886:	68bb      	ldr	r3, [r7, #8]
 801b888:	689b      	ldr	r3, [r3, #8]
 801b88a:	fbb1 f3f3 	udiv	r3, r1, r3
 801b88e:	04d9      	lsls	r1, r3, #19
 801b890:	4b7a      	ldr	r3, [pc, #488]	; (801ba7c <USB_EPStartXfer+0x2e4>)
 801b892:	400b      	ands	r3, r1
 801b894:	69b9      	ldr	r1, [r7, #24]
 801b896:	0148      	lsls	r0, r1, #5
 801b898:	69f9      	ldr	r1, [r7, #28]
 801b89a:	4401      	add	r1, r0
 801b89c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b8a0:	4313      	orrs	r3, r2
 801b8a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b8a4:	69bb      	ldr	r3, [r7, #24]
 801b8a6:	015a      	lsls	r2, r3, #5
 801b8a8:	69fb      	ldr	r3, [r7, #28]
 801b8aa:	4413      	add	r3, r2
 801b8ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8b0:	691a      	ldr	r2, [r3, #16]
 801b8b2:	68bb      	ldr	r3, [r7, #8]
 801b8b4:	695b      	ldr	r3, [r3, #20]
 801b8b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b8ba:	69b9      	ldr	r1, [r7, #24]
 801b8bc:	0148      	lsls	r0, r1, #5
 801b8be:	69f9      	ldr	r1, [r7, #28]
 801b8c0:	4401      	add	r1, r0
 801b8c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b8c6:	4313      	orrs	r3, r2
 801b8c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b8ca:	68bb      	ldr	r3, [r7, #8]
 801b8cc:	78db      	ldrb	r3, [r3, #3]
 801b8ce:	2b01      	cmp	r3, #1
 801b8d0:	d11f      	bne.n	801b912 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b8d2:	69bb      	ldr	r3, [r7, #24]
 801b8d4:	015a      	lsls	r2, r3, #5
 801b8d6:	69fb      	ldr	r3, [r7, #28]
 801b8d8:	4413      	add	r3, r2
 801b8da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8de:	691b      	ldr	r3, [r3, #16]
 801b8e0:	69ba      	ldr	r2, [r7, #24]
 801b8e2:	0151      	lsls	r1, r2, #5
 801b8e4:	69fa      	ldr	r2, [r7, #28]
 801b8e6:	440a      	add	r2, r1
 801b8e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b8ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b8f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b8f2:	69bb      	ldr	r3, [r7, #24]
 801b8f4:	015a      	lsls	r2, r3, #5
 801b8f6:	69fb      	ldr	r3, [r7, #28]
 801b8f8:	4413      	add	r3, r2
 801b8fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8fe:	691b      	ldr	r3, [r3, #16]
 801b900:	69ba      	ldr	r2, [r7, #24]
 801b902:	0151      	lsls	r1, r2, #5
 801b904:	69fa      	ldr	r2, [r7, #28]
 801b906:	440a      	add	r2, r1
 801b908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b90c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b910:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b912:	79fb      	ldrb	r3, [r7, #7]
 801b914:	2b01      	cmp	r3, #1
 801b916:	d14b      	bne.n	801b9b0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b918:	68bb      	ldr	r3, [r7, #8]
 801b91a:	691b      	ldr	r3, [r3, #16]
 801b91c:	2b00      	cmp	r3, #0
 801b91e:	d009      	beq.n	801b934 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b920:	69bb      	ldr	r3, [r7, #24]
 801b922:	015a      	lsls	r2, r3, #5
 801b924:	69fb      	ldr	r3, [r7, #28]
 801b926:	4413      	add	r3, r2
 801b928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b92c:	461a      	mov	r2, r3
 801b92e:	68bb      	ldr	r3, [r7, #8]
 801b930:	691b      	ldr	r3, [r3, #16]
 801b932:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801b934:	68bb      	ldr	r3, [r7, #8]
 801b936:	78db      	ldrb	r3, [r3, #3]
 801b938:	2b01      	cmp	r3, #1
 801b93a:	d128      	bne.n	801b98e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b942:	689b      	ldr	r3, [r3, #8]
 801b944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d110      	bne.n	801b96e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b94c:	69bb      	ldr	r3, [r7, #24]
 801b94e:	015a      	lsls	r2, r3, #5
 801b950:	69fb      	ldr	r3, [r7, #28]
 801b952:	4413      	add	r3, r2
 801b954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b958:	681b      	ldr	r3, [r3, #0]
 801b95a:	69ba      	ldr	r2, [r7, #24]
 801b95c:	0151      	lsls	r1, r2, #5
 801b95e:	69fa      	ldr	r2, [r7, #28]
 801b960:	440a      	add	r2, r1
 801b962:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b966:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b96a:	6013      	str	r3, [r2, #0]
 801b96c:	e00f      	b.n	801b98e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b96e:	69bb      	ldr	r3, [r7, #24]
 801b970:	015a      	lsls	r2, r3, #5
 801b972:	69fb      	ldr	r3, [r7, #28]
 801b974:	4413      	add	r3, r2
 801b976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	69ba      	ldr	r2, [r7, #24]
 801b97e:	0151      	lsls	r1, r2, #5
 801b980:	69fa      	ldr	r2, [r7, #28]
 801b982:	440a      	add	r2, r1
 801b984:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b98c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b98e:	69bb      	ldr	r3, [r7, #24]
 801b990:	015a      	lsls	r2, r3, #5
 801b992:	69fb      	ldr	r3, [r7, #28]
 801b994:	4413      	add	r3, r2
 801b996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	69ba      	ldr	r2, [r7, #24]
 801b99e:	0151      	lsls	r1, r2, #5
 801b9a0:	69fa      	ldr	r2, [r7, #28]
 801b9a2:	440a      	add	r2, r1
 801b9a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9ac:	6013      	str	r3, [r2, #0]
 801b9ae:	e133      	b.n	801bc18 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b9b0:	69bb      	ldr	r3, [r7, #24]
 801b9b2:	015a      	lsls	r2, r3, #5
 801b9b4:	69fb      	ldr	r3, [r7, #28]
 801b9b6:	4413      	add	r3, r2
 801b9b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9bc:	681b      	ldr	r3, [r3, #0]
 801b9be:	69ba      	ldr	r2, [r7, #24]
 801b9c0:	0151      	lsls	r1, r2, #5
 801b9c2:	69fa      	ldr	r2, [r7, #28]
 801b9c4:	440a      	add	r2, r1
 801b9c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9ce:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b9d0:	68bb      	ldr	r3, [r7, #8]
 801b9d2:	78db      	ldrb	r3, [r3, #3]
 801b9d4:	2b01      	cmp	r3, #1
 801b9d6:	d015      	beq.n	801ba04 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801b9d8:	68bb      	ldr	r3, [r7, #8]
 801b9da:	695b      	ldr	r3, [r3, #20]
 801b9dc:	2b00      	cmp	r3, #0
 801b9de:	f000 811b 	beq.w	801bc18 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b9e2:	69fb      	ldr	r3, [r7, #28]
 801b9e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b9e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b9ea:	68bb      	ldr	r3, [r7, #8]
 801b9ec:	781b      	ldrb	r3, [r3, #0]
 801b9ee:	f003 030f 	and.w	r3, r3, #15
 801b9f2:	2101      	movs	r1, #1
 801b9f4:	fa01 f303 	lsl.w	r3, r1, r3
 801b9f8:	69f9      	ldr	r1, [r7, #28]
 801b9fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b9fe:	4313      	orrs	r3, r2
 801ba00:	634b      	str	r3, [r1, #52]	; 0x34
 801ba02:	e109      	b.n	801bc18 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801ba04:	69fb      	ldr	r3, [r7, #28]
 801ba06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ba0a:	689b      	ldr	r3, [r3, #8]
 801ba0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	d110      	bne.n	801ba36 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801ba14:	69bb      	ldr	r3, [r7, #24]
 801ba16:	015a      	lsls	r2, r3, #5
 801ba18:	69fb      	ldr	r3, [r7, #28]
 801ba1a:	4413      	add	r3, r2
 801ba1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba20:	681b      	ldr	r3, [r3, #0]
 801ba22:	69ba      	ldr	r2, [r7, #24]
 801ba24:	0151      	lsls	r1, r2, #5
 801ba26:	69fa      	ldr	r2, [r7, #28]
 801ba28:	440a      	add	r2, r1
 801ba2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801ba32:	6013      	str	r3, [r2, #0]
 801ba34:	e00f      	b.n	801ba56 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801ba36:	69bb      	ldr	r3, [r7, #24]
 801ba38:	015a      	lsls	r2, r3, #5
 801ba3a:	69fb      	ldr	r3, [r7, #28]
 801ba3c:	4413      	add	r3, r2
 801ba3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	69ba      	ldr	r2, [r7, #24]
 801ba46:	0151      	lsls	r1, r2, #5
 801ba48:	69fa      	ldr	r2, [r7, #28]
 801ba4a:	440a      	add	r2, r1
 801ba4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba54:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801ba56:	68bb      	ldr	r3, [r7, #8]
 801ba58:	68d9      	ldr	r1, [r3, #12]
 801ba5a:	68bb      	ldr	r3, [r7, #8]
 801ba5c:	781a      	ldrb	r2, [r3, #0]
 801ba5e:	68bb      	ldr	r3, [r7, #8]
 801ba60:	695b      	ldr	r3, [r3, #20]
 801ba62:	b298      	uxth	r0, r3
 801ba64:	79fb      	ldrb	r3, [r7, #7]
 801ba66:	9300      	str	r3, [sp, #0]
 801ba68:	4603      	mov	r3, r0
 801ba6a:	68f8      	ldr	r0, [r7, #12]
 801ba6c:	f000 fa38 	bl	801bee0 <USB_WritePacket>
 801ba70:	e0d2      	b.n	801bc18 <USB_EPStartXfer+0x480>
 801ba72:	bf00      	nop
 801ba74:	e007ffff 	.word	0xe007ffff
 801ba78:	fff80000 	.word	0xfff80000
 801ba7c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ba80:	69bb      	ldr	r3, [r7, #24]
 801ba82:	015a      	lsls	r2, r3, #5
 801ba84:	69fb      	ldr	r3, [r7, #28]
 801ba86:	4413      	add	r3, r2
 801ba88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba8c:	691a      	ldr	r2, [r3, #16]
 801ba8e:	69bb      	ldr	r3, [r7, #24]
 801ba90:	0159      	lsls	r1, r3, #5
 801ba92:	69fb      	ldr	r3, [r7, #28]
 801ba94:	440b      	add	r3, r1
 801ba96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba9a:	4619      	mov	r1, r3
 801ba9c:	4b61      	ldr	r3, [pc, #388]	; (801bc24 <USB_EPStartXfer+0x48c>)
 801ba9e:	4013      	ands	r3, r2
 801baa0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801baa2:	69bb      	ldr	r3, [r7, #24]
 801baa4:	015a      	lsls	r2, r3, #5
 801baa6:	69fb      	ldr	r3, [r7, #28]
 801baa8:	4413      	add	r3, r2
 801baaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801baae:	691a      	ldr	r2, [r3, #16]
 801bab0:	69bb      	ldr	r3, [r7, #24]
 801bab2:	0159      	lsls	r1, r3, #5
 801bab4:	69fb      	ldr	r3, [r7, #28]
 801bab6:	440b      	add	r3, r1
 801bab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801babc:	4619      	mov	r1, r3
 801babe:	4b5a      	ldr	r3, [pc, #360]	; (801bc28 <USB_EPStartXfer+0x490>)
 801bac0:	4013      	ands	r3, r2
 801bac2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801bac4:	68bb      	ldr	r3, [r7, #8]
 801bac6:	695b      	ldr	r3, [r3, #20]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d123      	bne.n	801bb14 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801bacc:	69bb      	ldr	r3, [r7, #24]
 801bace:	015a      	lsls	r2, r3, #5
 801bad0:	69fb      	ldr	r3, [r7, #28]
 801bad2:	4413      	add	r3, r2
 801bad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bad8:	691a      	ldr	r2, [r3, #16]
 801bada:	68bb      	ldr	r3, [r7, #8]
 801badc:	689b      	ldr	r3, [r3, #8]
 801bade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bae2:	69b9      	ldr	r1, [r7, #24]
 801bae4:	0148      	lsls	r0, r1, #5
 801bae6:	69f9      	ldr	r1, [r7, #28]
 801bae8:	4401      	add	r1, r0
 801baea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801baee:	4313      	orrs	r3, r2
 801baf0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801baf2:	69bb      	ldr	r3, [r7, #24]
 801baf4:	015a      	lsls	r2, r3, #5
 801baf6:	69fb      	ldr	r3, [r7, #28]
 801baf8:	4413      	add	r3, r2
 801bafa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bafe:	691b      	ldr	r3, [r3, #16]
 801bb00:	69ba      	ldr	r2, [r7, #24]
 801bb02:	0151      	lsls	r1, r2, #5
 801bb04:	69fa      	ldr	r2, [r7, #28]
 801bb06:	440a      	add	r2, r1
 801bb08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bb0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bb10:	6113      	str	r3, [r2, #16]
 801bb12:	e033      	b.n	801bb7c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801bb14:	68bb      	ldr	r3, [r7, #8]
 801bb16:	695a      	ldr	r2, [r3, #20]
 801bb18:	68bb      	ldr	r3, [r7, #8]
 801bb1a:	689b      	ldr	r3, [r3, #8]
 801bb1c:	4413      	add	r3, r2
 801bb1e:	1e5a      	subs	r2, r3, #1
 801bb20:	68bb      	ldr	r3, [r7, #8]
 801bb22:	689b      	ldr	r3, [r3, #8]
 801bb24:	fbb2 f3f3 	udiv	r3, r2, r3
 801bb28:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801bb2a:	69bb      	ldr	r3, [r7, #24]
 801bb2c:	015a      	lsls	r2, r3, #5
 801bb2e:	69fb      	ldr	r3, [r7, #28]
 801bb30:	4413      	add	r3, r2
 801bb32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb36:	691a      	ldr	r2, [r3, #16]
 801bb38:	8afb      	ldrh	r3, [r7, #22]
 801bb3a:	04d9      	lsls	r1, r3, #19
 801bb3c:	4b3b      	ldr	r3, [pc, #236]	; (801bc2c <USB_EPStartXfer+0x494>)
 801bb3e:	400b      	ands	r3, r1
 801bb40:	69b9      	ldr	r1, [r7, #24]
 801bb42:	0148      	lsls	r0, r1, #5
 801bb44:	69f9      	ldr	r1, [r7, #28]
 801bb46:	4401      	add	r1, r0
 801bb48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bb4c:	4313      	orrs	r3, r2
 801bb4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801bb50:	69bb      	ldr	r3, [r7, #24]
 801bb52:	015a      	lsls	r2, r3, #5
 801bb54:	69fb      	ldr	r3, [r7, #28]
 801bb56:	4413      	add	r3, r2
 801bb58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb5c:	691a      	ldr	r2, [r3, #16]
 801bb5e:	68bb      	ldr	r3, [r7, #8]
 801bb60:	689b      	ldr	r3, [r3, #8]
 801bb62:	8af9      	ldrh	r1, [r7, #22]
 801bb64:	fb01 f303 	mul.w	r3, r1, r3
 801bb68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bb6c:	69b9      	ldr	r1, [r7, #24]
 801bb6e:	0148      	lsls	r0, r1, #5
 801bb70:	69f9      	ldr	r1, [r7, #28]
 801bb72:	4401      	add	r1, r0
 801bb74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801bb78:	4313      	orrs	r3, r2
 801bb7a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bb7c:	79fb      	ldrb	r3, [r7, #7]
 801bb7e:	2b01      	cmp	r3, #1
 801bb80:	d10d      	bne.n	801bb9e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801bb82:	68bb      	ldr	r3, [r7, #8]
 801bb84:	68db      	ldr	r3, [r3, #12]
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	d009      	beq.n	801bb9e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bb8a:	68bb      	ldr	r3, [r7, #8]
 801bb8c:	68d9      	ldr	r1, [r3, #12]
 801bb8e:	69bb      	ldr	r3, [r7, #24]
 801bb90:	015a      	lsls	r2, r3, #5
 801bb92:	69fb      	ldr	r3, [r7, #28]
 801bb94:	4413      	add	r3, r2
 801bb96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bb9a:	460a      	mov	r2, r1
 801bb9c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801bb9e:	68bb      	ldr	r3, [r7, #8]
 801bba0:	78db      	ldrb	r3, [r3, #3]
 801bba2:	2b01      	cmp	r3, #1
 801bba4:	d128      	bne.n	801bbf8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801bba6:	69fb      	ldr	r3, [r7, #28]
 801bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbac:	689b      	ldr	r3, [r3, #8]
 801bbae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801bbb2:	2b00      	cmp	r3, #0
 801bbb4:	d110      	bne.n	801bbd8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801bbb6:	69bb      	ldr	r3, [r7, #24]
 801bbb8:	015a      	lsls	r2, r3, #5
 801bbba:	69fb      	ldr	r3, [r7, #28]
 801bbbc:	4413      	add	r3, r2
 801bbbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbc2:	681b      	ldr	r3, [r3, #0]
 801bbc4:	69ba      	ldr	r2, [r7, #24]
 801bbc6:	0151      	lsls	r1, r2, #5
 801bbc8:	69fa      	ldr	r2, [r7, #28]
 801bbca:	440a      	add	r2, r1
 801bbcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bbd0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801bbd4:	6013      	str	r3, [r2, #0]
 801bbd6:	e00f      	b.n	801bbf8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801bbd8:	69bb      	ldr	r3, [r7, #24]
 801bbda:	015a      	lsls	r2, r3, #5
 801bbdc:	69fb      	ldr	r3, [r7, #28]
 801bbde:	4413      	add	r3, r2
 801bbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	69ba      	ldr	r2, [r7, #24]
 801bbe8:	0151      	lsls	r1, r2, #5
 801bbea:	69fa      	ldr	r2, [r7, #28]
 801bbec:	440a      	add	r2, r1
 801bbee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bbf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bbf6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	015a      	lsls	r2, r3, #5
 801bbfc:	69fb      	ldr	r3, [r7, #28]
 801bbfe:	4413      	add	r3, r2
 801bc00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	69ba      	ldr	r2, [r7, #24]
 801bc08:	0151      	lsls	r1, r2, #5
 801bc0a:	69fa      	ldr	r2, [r7, #28]
 801bc0c:	440a      	add	r2, r1
 801bc0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc12:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bc16:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bc18:	2300      	movs	r3, #0
}
 801bc1a:	4618      	mov	r0, r3
 801bc1c:	3720      	adds	r7, #32
 801bc1e:	46bd      	mov	sp, r7
 801bc20:	bd80      	pop	{r7, pc}
 801bc22:	bf00      	nop
 801bc24:	fff80000 	.word	0xfff80000
 801bc28:	e007ffff 	.word	0xe007ffff
 801bc2c:	1ff80000 	.word	0x1ff80000

0801bc30 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801bc30:	b480      	push	{r7}
 801bc32:	b087      	sub	sp, #28
 801bc34:	af00      	add	r7, sp, #0
 801bc36:	60f8      	str	r0, [r7, #12]
 801bc38:	60b9      	str	r1, [r7, #8]
 801bc3a:	4613      	mov	r3, r2
 801bc3c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc3e:	68fb      	ldr	r3, [r7, #12]
 801bc40:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801bc42:	68bb      	ldr	r3, [r7, #8]
 801bc44:	781b      	ldrb	r3, [r3, #0]
 801bc46:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801bc48:	68bb      	ldr	r3, [r7, #8]
 801bc4a:	785b      	ldrb	r3, [r3, #1]
 801bc4c:	2b01      	cmp	r3, #1
 801bc4e:	f040 80cd 	bne.w	801bdec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801bc52:	68bb      	ldr	r3, [r7, #8]
 801bc54:	695b      	ldr	r3, [r3, #20]
 801bc56:	2b00      	cmp	r3, #0
 801bc58:	d132      	bne.n	801bcc0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801bc5a:	693b      	ldr	r3, [r7, #16]
 801bc5c:	015a      	lsls	r2, r3, #5
 801bc5e:	697b      	ldr	r3, [r7, #20]
 801bc60:	4413      	add	r3, r2
 801bc62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc66:	691a      	ldr	r2, [r3, #16]
 801bc68:	693b      	ldr	r3, [r7, #16]
 801bc6a:	0159      	lsls	r1, r3, #5
 801bc6c:	697b      	ldr	r3, [r7, #20]
 801bc6e:	440b      	add	r3, r1
 801bc70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc74:	4619      	mov	r1, r3
 801bc76:	4b98      	ldr	r3, [pc, #608]	; (801bed8 <USB_EP0StartXfer+0x2a8>)
 801bc78:	4013      	ands	r3, r2
 801bc7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bc7c:	693b      	ldr	r3, [r7, #16]
 801bc7e:	015a      	lsls	r2, r3, #5
 801bc80:	697b      	ldr	r3, [r7, #20]
 801bc82:	4413      	add	r3, r2
 801bc84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc88:	691b      	ldr	r3, [r3, #16]
 801bc8a:	693a      	ldr	r2, [r7, #16]
 801bc8c:	0151      	lsls	r1, r2, #5
 801bc8e:	697a      	ldr	r2, [r7, #20]
 801bc90:	440a      	add	r2, r1
 801bc92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bc96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bc9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bc9c:	693b      	ldr	r3, [r7, #16]
 801bc9e:	015a      	lsls	r2, r3, #5
 801bca0:	697b      	ldr	r3, [r7, #20]
 801bca2:	4413      	add	r3, r2
 801bca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bca8:	691a      	ldr	r2, [r3, #16]
 801bcaa:	693b      	ldr	r3, [r7, #16]
 801bcac:	0159      	lsls	r1, r3, #5
 801bcae:	697b      	ldr	r3, [r7, #20]
 801bcb0:	440b      	add	r3, r1
 801bcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcb6:	4619      	mov	r1, r3
 801bcb8:	4b88      	ldr	r3, [pc, #544]	; (801bedc <USB_EP0StartXfer+0x2ac>)
 801bcba:	4013      	ands	r3, r2
 801bcbc:	610b      	str	r3, [r1, #16]
 801bcbe:	e04e      	b.n	801bd5e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801bcc0:	693b      	ldr	r3, [r7, #16]
 801bcc2:	015a      	lsls	r2, r3, #5
 801bcc4:	697b      	ldr	r3, [r7, #20]
 801bcc6:	4413      	add	r3, r2
 801bcc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bccc:	691a      	ldr	r2, [r3, #16]
 801bcce:	693b      	ldr	r3, [r7, #16]
 801bcd0:	0159      	lsls	r1, r3, #5
 801bcd2:	697b      	ldr	r3, [r7, #20]
 801bcd4:	440b      	add	r3, r1
 801bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcda:	4619      	mov	r1, r3
 801bcdc:	4b7f      	ldr	r3, [pc, #508]	; (801bedc <USB_EP0StartXfer+0x2ac>)
 801bcde:	4013      	ands	r3, r2
 801bce0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801bce2:	693b      	ldr	r3, [r7, #16]
 801bce4:	015a      	lsls	r2, r3, #5
 801bce6:	697b      	ldr	r3, [r7, #20]
 801bce8:	4413      	add	r3, r2
 801bcea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcee:	691a      	ldr	r2, [r3, #16]
 801bcf0:	693b      	ldr	r3, [r7, #16]
 801bcf2:	0159      	lsls	r1, r3, #5
 801bcf4:	697b      	ldr	r3, [r7, #20]
 801bcf6:	440b      	add	r3, r1
 801bcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcfc:	4619      	mov	r1, r3
 801bcfe:	4b76      	ldr	r3, [pc, #472]	; (801bed8 <USB_EP0StartXfer+0x2a8>)
 801bd00:	4013      	ands	r3, r2
 801bd02:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801bd04:	68bb      	ldr	r3, [r7, #8]
 801bd06:	695a      	ldr	r2, [r3, #20]
 801bd08:	68bb      	ldr	r3, [r7, #8]
 801bd0a:	689b      	ldr	r3, [r3, #8]
 801bd0c:	429a      	cmp	r2, r3
 801bd0e:	d903      	bls.n	801bd18 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801bd10:	68bb      	ldr	r3, [r7, #8]
 801bd12:	689a      	ldr	r2, [r3, #8]
 801bd14:	68bb      	ldr	r3, [r7, #8]
 801bd16:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801bd18:	693b      	ldr	r3, [r7, #16]
 801bd1a:	015a      	lsls	r2, r3, #5
 801bd1c:	697b      	ldr	r3, [r7, #20]
 801bd1e:	4413      	add	r3, r2
 801bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd24:	691b      	ldr	r3, [r3, #16]
 801bd26:	693a      	ldr	r2, [r7, #16]
 801bd28:	0151      	lsls	r1, r2, #5
 801bd2a:	697a      	ldr	r2, [r7, #20]
 801bd2c:	440a      	add	r2, r1
 801bd2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bd32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bd36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801bd38:	693b      	ldr	r3, [r7, #16]
 801bd3a:	015a      	lsls	r2, r3, #5
 801bd3c:	697b      	ldr	r3, [r7, #20]
 801bd3e:	4413      	add	r3, r2
 801bd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd44:	691a      	ldr	r2, [r3, #16]
 801bd46:	68bb      	ldr	r3, [r7, #8]
 801bd48:	695b      	ldr	r3, [r3, #20]
 801bd4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801bd4e:	6939      	ldr	r1, [r7, #16]
 801bd50:	0148      	lsls	r0, r1, #5
 801bd52:	6979      	ldr	r1, [r7, #20]
 801bd54:	4401      	add	r1, r0
 801bd56:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801bd5a:	4313      	orrs	r3, r2
 801bd5c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801bd5e:	79fb      	ldrb	r3, [r7, #7]
 801bd60:	2b01      	cmp	r3, #1
 801bd62:	d11e      	bne.n	801bda2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801bd64:	68bb      	ldr	r3, [r7, #8]
 801bd66:	691b      	ldr	r3, [r3, #16]
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	d009      	beq.n	801bd80 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801bd6c:	693b      	ldr	r3, [r7, #16]
 801bd6e:	015a      	lsls	r2, r3, #5
 801bd70:	697b      	ldr	r3, [r7, #20]
 801bd72:	4413      	add	r3, r2
 801bd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd78:	461a      	mov	r2, r3
 801bd7a:	68bb      	ldr	r3, [r7, #8]
 801bd7c:	691b      	ldr	r3, [r3, #16]
 801bd7e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bd80:	693b      	ldr	r3, [r7, #16]
 801bd82:	015a      	lsls	r2, r3, #5
 801bd84:	697b      	ldr	r3, [r7, #20]
 801bd86:	4413      	add	r3, r2
 801bd88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	693a      	ldr	r2, [r7, #16]
 801bd90:	0151      	lsls	r1, r2, #5
 801bd92:	697a      	ldr	r2, [r7, #20]
 801bd94:	440a      	add	r2, r1
 801bd96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bd9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bd9e:	6013      	str	r3, [r2, #0]
 801bda0:	e092      	b.n	801bec8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801bda2:	693b      	ldr	r3, [r7, #16]
 801bda4:	015a      	lsls	r2, r3, #5
 801bda6:	697b      	ldr	r3, [r7, #20]
 801bda8:	4413      	add	r3, r2
 801bdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	693a      	ldr	r2, [r7, #16]
 801bdb2:	0151      	lsls	r1, r2, #5
 801bdb4:	697a      	ldr	r2, [r7, #20]
 801bdb6:	440a      	add	r2, r1
 801bdb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bdbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bdc0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801bdc2:	68bb      	ldr	r3, [r7, #8]
 801bdc4:	695b      	ldr	r3, [r3, #20]
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d07e      	beq.n	801bec8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801bdca:	697b      	ldr	r3, [r7, #20]
 801bdcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bdd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bdd2:	68bb      	ldr	r3, [r7, #8]
 801bdd4:	781b      	ldrb	r3, [r3, #0]
 801bdd6:	f003 030f 	and.w	r3, r3, #15
 801bdda:	2101      	movs	r1, #1
 801bddc:	fa01 f303 	lsl.w	r3, r1, r3
 801bde0:	6979      	ldr	r1, [r7, #20]
 801bde2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bde6:	4313      	orrs	r3, r2
 801bde8:	634b      	str	r3, [r1, #52]	; 0x34
 801bdea:	e06d      	b.n	801bec8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801bdec:	693b      	ldr	r3, [r7, #16]
 801bdee:	015a      	lsls	r2, r3, #5
 801bdf0:	697b      	ldr	r3, [r7, #20]
 801bdf2:	4413      	add	r3, r2
 801bdf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bdf8:	691a      	ldr	r2, [r3, #16]
 801bdfa:	693b      	ldr	r3, [r7, #16]
 801bdfc:	0159      	lsls	r1, r3, #5
 801bdfe:	697b      	ldr	r3, [r7, #20]
 801be00:	440b      	add	r3, r1
 801be02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be06:	4619      	mov	r1, r3
 801be08:	4b34      	ldr	r3, [pc, #208]	; (801bedc <USB_EP0StartXfer+0x2ac>)
 801be0a:	4013      	ands	r3, r2
 801be0c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801be0e:	693b      	ldr	r3, [r7, #16]
 801be10:	015a      	lsls	r2, r3, #5
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	4413      	add	r3, r2
 801be16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be1a:	691a      	ldr	r2, [r3, #16]
 801be1c:	693b      	ldr	r3, [r7, #16]
 801be1e:	0159      	lsls	r1, r3, #5
 801be20:	697b      	ldr	r3, [r7, #20]
 801be22:	440b      	add	r3, r1
 801be24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be28:	4619      	mov	r1, r3
 801be2a:	4b2b      	ldr	r3, [pc, #172]	; (801bed8 <USB_EP0StartXfer+0x2a8>)
 801be2c:	4013      	ands	r3, r2
 801be2e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801be30:	68bb      	ldr	r3, [r7, #8]
 801be32:	695b      	ldr	r3, [r3, #20]
 801be34:	2b00      	cmp	r3, #0
 801be36:	d003      	beq.n	801be40 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801be38:	68bb      	ldr	r3, [r7, #8]
 801be3a:	689a      	ldr	r2, [r3, #8]
 801be3c:	68bb      	ldr	r3, [r7, #8]
 801be3e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801be40:	693b      	ldr	r3, [r7, #16]
 801be42:	015a      	lsls	r2, r3, #5
 801be44:	697b      	ldr	r3, [r7, #20]
 801be46:	4413      	add	r3, r2
 801be48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be4c:	691b      	ldr	r3, [r3, #16]
 801be4e:	693a      	ldr	r2, [r7, #16]
 801be50:	0151      	lsls	r1, r2, #5
 801be52:	697a      	ldr	r2, [r7, #20]
 801be54:	440a      	add	r2, r1
 801be56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801be5a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801be5e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801be60:	693b      	ldr	r3, [r7, #16]
 801be62:	015a      	lsls	r2, r3, #5
 801be64:	697b      	ldr	r3, [r7, #20]
 801be66:	4413      	add	r3, r2
 801be68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801be6c:	691a      	ldr	r2, [r3, #16]
 801be6e:	68bb      	ldr	r3, [r7, #8]
 801be70:	689b      	ldr	r3, [r3, #8]
 801be72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801be76:	6939      	ldr	r1, [r7, #16]
 801be78:	0148      	lsls	r0, r1, #5
 801be7a:	6979      	ldr	r1, [r7, #20]
 801be7c:	4401      	add	r1, r0
 801be7e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801be82:	4313      	orrs	r3, r2
 801be84:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801be86:	79fb      	ldrb	r3, [r7, #7]
 801be88:	2b01      	cmp	r3, #1
 801be8a:	d10d      	bne.n	801bea8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801be8c:	68bb      	ldr	r3, [r7, #8]
 801be8e:	68db      	ldr	r3, [r3, #12]
 801be90:	2b00      	cmp	r3, #0
 801be92:	d009      	beq.n	801bea8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801be94:	68bb      	ldr	r3, [r7, #8]
 801be96:	68d9      	ldr	r1, [r3, #12]
 801be98:	693b      	ldr	r3, [r7, #16]
 801be9a:	015a      	lsls	r2, r3, #5
 801be9c:	697b      	ldr	r3, [r7, #20]
 801be9e:	4413      	add	r3, r2
 801bea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bea4:	460a      	mov	r2, r1
 801bea6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bea8:	693b      	ldr	r3, [r7, #16]
 801beaa:	015a      	lsls	r2, r3, #5
 801beac:	697b      	ldr	r3, [r7, #20]
 801beae:	4413      	add	r3, r2
 801beb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801beb4:	681b      	ldr	r3, [r3, #0]
 801beb6:	693a      	ldr	r2, [r7, #16]
 801beb8:	0151      	lsls	r1, r2, #5
 801beba:	697a      	ldr	r2, [r7, #20]
 801bebc:	440a      	add	r2, r1
 801bebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bec2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bec6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bec8:	2300      	movs	r3, #0
}
 801beca:	4618      	mov	r0, r3
 801becc:	371c      	adds	r7, #28
 801bece:	46bd      	mov	sp, r7
 801bed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed4:	4770      	bx	lr
 801bed6:	bf00      	nop
 801bed8:	e007ffff 	.word	0xe007ffff
 801bedc:	fff80000 	.word	0xfff80000

0801bee0 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801bee0:	b480      	push	{r7}
 801bee2:	b089      	sub	sp, #36	; 0x24
 801bee4:	af00      	add	r7, sp, #0
 801bee6:	60f8      	str	r0, [r7, #12]
 801bee8:	60b9      	str	r1, [r7, #8]
 801beea:	4611      	mov	r1, r2
 801beec:	461a      	mov	r2, r3
 801beee:	460b      	mov	r3, r1
 801bef0:	71fb      	strb	r3, [r7, #7]
 801bef2:	4613      	mov	r3, r2
 801bef4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bef6:	68fb      	ldr	r3, [r7, #12]
 801bef8:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801befa:	68bb      	ldr	r3, [r7, #8]
 801befc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801befe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bf02:	2b00      	cmp	r3, #0
 801bf04:	d11a      	bne.n	801bf3c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801bf06:	88bb      	ldrh	r3, [r7, #4]
 801bf08:	3303      	adds	r3, #3
 801bf0a:	089b      	lsrs	r3, r3, #2
 801bf0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801bf0e:	2300      	movs	r3, #0
 801bf10:	61bb      	str	r3, [r7, #24]
 801bf12:	e00f      	b.n	801bf34 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801bf14:	79fb      	ldrb	r3, [r7, #7]
 801bf16:	031a      	lsls	r2, r3, #12
 801bf18:	697b      	ldr	r3, [r7, #20]
 801bf1a:	4413      	add	r3, r2
 801bf1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf20:	461a      	mov	r2, r3
 801bf22:	69fb      	ldr	r3, [r7, #28]
 801bf24:	681b      	ldr	r3, [r3, #0]
 801bf26:	6013      	str	r3, [r2, #0]
      pSrc++;
 801bf28:	69fb      	ldr	r3, [r7, #28]
 801bf2a:	3304      	adds	r3, #4
 801bf2c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801bf2e:	69bb      	ldr	r3, [r7, #24]
 801bf30:	3301      	adds	r3, #1
 801bf32:	61bb      	str	r3, [r7, #24]
 801bf34:	69ba      	ldr	r2, [r7, #24]
 801bf36:	693b      	ldr	r3, [r7, #16]
 801bf38:	429a      	cmp	r2, r3
 801bf3a:	d3eb      	bcc.n	801bf14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801bf3c:	2300      	movs	r3, #0
}
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3724      	adds	r7, #36	; 0x24
 801bf42:	46bd      	mov	sp, r7
 801bf44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf48:	4770      	bx	lr

0801bf4a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801bf4a:	b480      	push	{r7}
 801bf4c:	b089      	sub	sp, #36	; 0x24
 801bf4e:	af00      	add	r7, sp, #0
 801bf50:	60f8      	str	r0, [r7, #12]
 801bf52:	60b9      	str	r1, [r7, #8]
 801bf54:	4613      	mov	r3, r2
 801bf56:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801bf5c:	68bb      	ldr	r3, [r7, #8]
 801bf5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801bf60:	88fb      	ldrh	r3, [r7, #6]
 801bf62:	3303      	adds	r3, #3
 801bf64:	089b      	lsrs	r3, r3, #2
 801bf66:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801bf68:	2300      	movs	r3, #0
 801bf6a:	61bb      	str	r3, [r7, #24]
 801bf6c:	e00b      	b.n	801bf86 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bf74:	681a      	ldr	r2, [r3, #0]
 801bf76:	69fb      	ldr	r3, [r7, #28]
 801bf78:	601a      	str	r2, [r3, #0]
    pDest++;
 801bf7a:	69fb      	ldr	r3, [r7, #28]
 801bf7c:	3304      	adds	r3, #4
 801bf7e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801bf80:	69bb      	ldr	r3, [r7, #24]
 801bf82:	3301      	adds	r3, #1
 801bf84:	61bb      	str	r3, [r7, #24]
 801bf86:	69ba      	ldr	r2, [r7, #24]
 801bf88:	693b      	ldr	r3, [r7, #16]
 801bf8a:	429a      	cmp	r2, r3
 801bf8c:	d3ef      	bcc.n	801bf6e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801bf8e:	69fb      	ldr	r3, [r7, #28]
}
 801bf90:	4618      	mov	r0, r3
 801bf92:	3724      	adds	r7, #36	; 0x24
 801bf94:	46bd      	mov	sp, r7
 801bf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf9a:	4770      	bx	lr

0801bf9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	b085      	sub	sp, #20
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	6078      	str	r0, [r7, #4]
 801bfa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	781b      	ldrb	r3, [r3, #0]
 801bfae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	785b      	ldrb	r3, [r3, #1]
 801bfb4:	2b01      	cmp	r3, #1
 801bfb6:	d12c      	bne.n	801c012 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801bfb8:	68bb      	ldr	r3, [r7, #8]
 801bfba:	015a      	lsls	r2, r3, #5
 801bfbc:	68fb      	ldr	r3, [r7, #12]
 801bfbe:	4413      	add	r3, r2
 801bfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bfc4:	681b      	ldr	r3, [r3, #0]
 801bfc6:	2b00      	cmp	r3, #0
 801bfc8:	db12      	blt.n	801bff0 <USB_EPSetStall+0x54>
 801bfca:	68bb      	ldr	r3, [r7, #8]
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d00f      	beq.n	801bff0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801bfd0:	68bb      	ldr	r3, [r7, #8]
 801bfd2:	015a      	lsls	r2, r3, #5
 801bfd4:	68fb      	ldr	r3, [r7, #12]
 801bfd6:	4413      	add	r3, r2
 801bfd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bfdc:	681b      	ldr	r3, [r3, #0]
 801bfde:	68ba      	ldr	r2, [r7, #8]
 801bfe0:	0151      	lsls	r1, r2, #5
 801bfe2:	68fa      	ldr	r2, [r7, #12]
 801bfe4:	440a      	add	r2, r1
 801bfe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bfea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801bfee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801bff0:	68bb      	ldr	r3, [r7, #8]
 801bff2:	015a      	lsls	r2, r3, #5
 801bff4:	68fb      	ldr	r3, [r7, #12]
 801bff6:	4413      	add	r3, r2
 801bff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bffc:	681b      	ldr	r3, [r3, #0]
 801bffe:	68ba      	ldr	r2, [r7, #8]
 801c000:	0151      	lsls	r1, r2, #5
 801c002:	68fa      	ldr	r2, [r7, #12]
 801c004:	440a      	add	r2, r1
 801c006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c00a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c00e:	6013      	str	r3, [r2, #0]
 801c010:	e02b      	b.n	801c06a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801c012:	68bb      	ldr	r3, [r7, #8]
 801c014:	015a      	lsls	r2, r3, #5
 801c016:	68fb      	ldr	r3, [r7, #12]
 801c018:	4413      	add	r3, r2
 801c01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	2b00      	cmp	r3, #0
 801c022:	db12      	blt.n	801c04a <USB_EPSetStall+0xae>
 801c024:	68bb      	ldr	r3, [r7, #8]
 801c026:	2b00      	cmp	r3, #0
 801c028:	d00f      	beq.n	801c04a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801c02a:	68bb      	ldr	r3, [r7, #8]
 801c02c:	015a      	lsls	r2, r3, #5
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	4413      	add	r3, r2
 801c032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	68ba      	ldr	r2, [r7, #8]
 801c03a:	0151      	lsls	r1, r2, #5
 801c03c:	68fa      	ldr	r2, [r7, #12]
 801c03e:	440a      	add	r2, r1
 801c040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c044:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801c048:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801c04a:	68bb      	ldr	r3, [r7, #8]
 801c04c:	015a      	lsls	r2, r3, #5
 801c04e:	68fb      	ldr	r3, [r7, #12]
 801c050:	4413      	add	r3, r2
 801c052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	68ba      	ldr	r2, [r7, #8]
 801c05a:	0151      	lsls	r1, r2, #5
 801c05c:	68fa      	ldr	r2, [r7, #12]
 801c05e:	440a      	add	r2, r1
 801c060:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c064:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801c068:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c06a:	2300      	movs	r3, #0
}
 801c06c:	4618      	mov	r0, r3
 801c06e:	3714      	adds	r7, #20
 801c070:	46bd      	mov	sp, r7
 801c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c076:	4770      	bx	lr

0801c078 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801c078:	b480      	push	{r7}
 801c07a:	b085      	sub	sp, #20
 801c07c:	af00      	add	r7, sp, #0
 801c07e:	6078      	str	r0, [r7, #4]
 801c080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801c086:	683b      	ldr	r3, [r7, #0]
 801c088:	781b      	ldrb	r3, [r3, #0]
 801c08a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801c08c:	683b      	ldr	r3, [r7, #0]
 801c08e:	785b      	ldrb	r3, [r3, #1]
 801c090:	2b01      	cmp	r3, #1
 801c092:	d128      	bne.n	801c0e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801c094:	68bb      	ldr	r3, [r7, #8]
 801c096:	015a      	lsls	r2, r3, #5
 801c098:	68fb      	ldr	r3, [r7, #12]
 801c09a:	4413      	add	r3, r2
 801c09c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0a0:	681b      	ldr	r3, [r3, #0]
 801c0a2:	68ba      	ldr	r2, [r7, #8]
 801c0a4:	0151      	lsls	r1, r2, #5
 801c0a6:	68fa      	ldr	r2, [r7, #12]
 801c0a8:	440a      	add	r2, r1
 801c0aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c0ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c0b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c0b4:	683b      	ldr	r3, [r7, #0]
 801c0b6:	78db      	ldrb	r3, [r3, #3]
 801c0b8:	2b03      	cmp	r3, #3
 801c0ba:	d003      	beq.n	801c0c4 <USB_EPClearStall+0x4c>
 801c0bc:	683b      	ldr	r3, [r7, #0]
 801c0be:	78db      	ldrb	r3, [r3, #3]
 801c0c0:	2b02      	cmp	r3, #2
 801c0c2:	d138      	bne.n	801c136 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c0c4:	68bb      	ldr	r3, [r7, #8]
 801c0c6:	015a      	lsls	r2, r3, #5
 801c0c8:	68fb      	ldr	r3, [r7, #12]
 801c0ca:	4413      	add	r3, r2
 801c0cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	68ba      	ldr	r2, [r7, #8]
 801c0d4:	0151      	lsls	r1, r2, #5
 801c0d6:	68fa      	ldr	r2, [r7, #12]
 801c0d8:	440a      	add	r2, r1
 801c0da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801c0de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c0e2:	6013      	str	r3, [r2, #0]
 801c0e4:	e027      	b.n	801c136 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801c0e6:	68bb      	ldr	r3, [r7, #8]
 801c0e8:	015a      	lsls	r2, r3, #5
 801c0ea:	68fb      	ldr	r3, [r7, #12]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	68ba      	ldr	r2, [r7, #8]
 801c0f6:	0151      	lsls	r1, r2, #5
 801c0f8:	68fa      	ldr	r2, [r7, #12]
 801c0fa:	440a      	add	r2, r1
 801c0fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c100:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801c104:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801c106:	683b      	ldr	r3, [r7, #0]
 801c108:	78db      	ldrb	r3, [r3, #3]
 801c10a:	2b03      	cmp	r3, #3
 801c10c:	d003      	beq.n	801c116 <USB_EPClearStall+0x9e>
 801c10e:	683b      	ldr	r3, [r7, #0]
 801c110:	78db      	ldrb	r3, [r3, #3]
 801c112:	2b02      	cmp	r3, #2
 801c114:	d10f      	bne.n	801c136 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801c116:	68bb      	ldr	r3, [r7, #8]
 801c118:	015a      	lsls	r2, r3, #5
 801c11a:	68fb      	ldr	r3, [r7, #12]
 801c11c:	4413      	add	r3, r2
 801c11e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c122:	681b      	ldr	r3, [r3, #0]
 801c124:	68ba      	ldr	r2, [r7, #8]
 801c126:	0151      	lsls	r1, r2, #5
 801c128:	68fa      	ldr	r2, [r7, #12]
 801c12a:	440a      	add	r2, r1
 801c12c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801c134:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801c136:	2300      	movs	r3, #0
}
 801c138:	4618      	mov	r0, r3
 801c13a:	3714      	adds	r7, #20
 801c13c:	46bd      	mov	sp, r7
 801c13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c142:	4770      	bx	lr

0801c144 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801c144:	b480      	push	{r7}
 801c146:	b085      	sub	sp, #20
 801c148:	af00      	add	r7, sp, #0
 801c14a:	6078      	str	r0, [r7, #4]
 801c14c:	460b      	mov	r3, r1
 801c14e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801c154:	68fb      	ldr	r3, [r7, #12]
 801c156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c15a:	681b      	ldr	r3, [r3, #0]
 801c15c:	68fa      	ldr	r2, [r7, #12]
 801c15e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c162:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801c166:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c16e:	681a      	ldr	r2, [r3, #0]
 801c170:	78fb      	ldrb	r3, [r7, #3]
 801c172:	011b      	lsls	r3, r3, #4
 801c174:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801c178:	68f9      	ldr	r1, [r7, #12]
 801c17a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801c17e:	4313      	orrs	r3, r2
 801c180:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801c182:	2300      	movs	r3, #0
}
 801c184:	4618      	mov	r0, r3
 801c186:	3714      	adds	r7, #20
 801c188:	46bd      	mov	sp, r7
 801c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c18e:	4770      	bx	lr

0801c190 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b084      	sub	sp, #16
 801c194:	af00      	add	r7, sp, #0
 801c196:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801c19c:	68fb      	ldr	r3, [r7, #12]
 801c19e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1a2:	685b      	ldr	r3, [r3, #4]
 801c1a4:	68fa      	ldr	r2, [r7, #12]
 801c1a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c1aa:	f023 0302 	bic.w	r3, r3, #2
 801c1ae:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801c1b0:	2003      	movs	r0, #3
 801c1b2:	f7f6 fe7b 	bl	8012eac <HAL_Delay>

  return HAL_OK;
 801c1b6:	2300      	movs	r3, #0
}
 801c1b8:	4618      	mov	r0, r3
 801c1ba:	3710      	adds	r7, #16
 801c1bc:	46bd      	mov	sp, r7
 801c1be:	bd80      	pop	{r7, pc}

0801c1c0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801c1c0:	b580      	push	{r7, lr}
 801c1c2:	b084      	sub	sp, #16
 801c1c4:	af00      	add	r7, sp, #0
 801c1c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c1c8:	687b      	ldr	r3, [r7, #4]
 801c1ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801c1cc:	68fb      	ldr	r3, [r7, #12]
 801c1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	68fa      	ldr	r2, [r7, #12]
 801c1d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c1da:	f043 0302 	orr.w	r3, r3, #2
 801c1de:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801c1e0:	2003      	movs	r0, #3
 801c1e2:	f7f6 fe63 	bl	8012eac <HAL_Delay>

  return HAL_OK;
 801c1e6:	2300      	movs	r3, #0
}
 801c1e8:	4618      	mov	r0, r3
 801c1ea:	3710      	adds	r7, #16
 801c1ec:	46bd      	mov	sp, r7
 801c1ee:	bd80      	pop	{r7, pc}

0801c1f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801c1f0:	b480      	push	{r7}
 801c1f2:	b085      	sub	sp, #20
 801c1f4:	af00      	add	r7, sp, #0
 801c1f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	695b      	ldr	r3, [r3, #20]
 801c1fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801c1fe:	687b      	ldr	r3, [r7, #4]
 801c200:	699b      	ldr	r3, [r3, #24]
 801c202:	68fa      	ldr	r2, [r7, #12]
 801c204:	4013      	ands	r3, r2
 801c206:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801c208:	68fb      	ldr	r3, [r7, #12]
}
 801c20a:	4618      	mov	r0, r3
 801c20c:	3714      	adds	r7, #20
 801c20e:	46bd      	mov	sp, r7
 801c210:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c214:	4770      	bx	lr

0801c216 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c216:	b480      	push	{r7}
 801c218:	b085      	sub	sp, #20
 801c21a:	af00      	add	r7, sp, #0
 801c21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c21e:	687b      	ldr	r3, [r7, #4]
 801c220:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c222:	68fb      	ldr	r3, [r7, #12]
 801c224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c228:	699b      	ldr	r3, [r3, #24]
 801c22a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c22c:	68fb      	ldr	r3, [r7, #12]
 801c22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c232:	69db      	ldr	r3, [r3, #28]
 801c234:	68ba      	ldr	r2, [r7, #8]
 801c236:	4013      	ands	r3, r2
 801c238:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801c23a:	68bb      	ldr	r3, [r7, #8]
 801c23c:	0c1b      	lsrs	r3, r3, #16
}
 801c23e:	4618      	mov	r0, r3
 801c240:	3714      	adds	r7, #20
 801c242:	46bd      	mov	sp, r7
 801c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c248:	4770      	bx	lr

0801c24a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801c24a:	b480      	push	{r7}
 801c24c:	b085      	sub	sp, #20
 801c24e:	af00      	add	r7, sp, #0
 801c250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c252:	687b      	ldr	r3, [r7, #4]
 801c254:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c25c:	699b      	ldr	r3, [r3, #24]
 801c25e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801c260:	68fb      	ldr	r3, [r7, #12]
 801c262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c266:	69db      	ldr	r3, [r3, #28]
 801c268:	68ba      	ldr	r2, [r7, #8]
 801c26a:	4013      	ands	r3, r2
 801c26c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801c26e:	68bb      	ldr	r3, [r7, #8]
 801c270:	b29b      	uxth	r3, r3
}
 801c272:	4618      	mov	r0, r3
 801c274:	3714      	adds	r7, #20
 801c276:	46bd      	mov	sp, r7
 801c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27c:	4770      	bx	lr

0801c27e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c27e:	b480      	push	{r7}
 801c280:	b085      	sub	sp, #20
 801c282:	af00      	add	r7, sp, #0
 801c284:	6078      	str	r0, [r7, #4]
 801c286:	460b      	mov	r3, r1
 801c288:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801c28e:	78fb      	ldrb	r3, [r7, #3]
 801c290:	015a      	lsls	r2, r3, #5
 801c292:	68fb      	ldr	r3, [r7, #12]
 801c294:	4413      	add	r3, r2
 801c296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c29a:	689b      	ldr	r3, [r3, #8]
 801c29c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801c29e:	68fb      	ldr	r3, [r7, #12]
 801c2a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2a4:	695b      	ldr	r3, [r3, #20]
 801c2a6:	68ba      	ldr	r2, [r7, #8]
 801c2a8:	4013      	ands	r3, r2
 801c2aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c2ac:	68bb      	ldr	r3, [r7, #8]
}
 801c2ae:	4618      	mov	r0, r3
 801c2b0:	3714      	adds	r7, #20
 801c2b2:	46bd      	mov	sp, r7
 801c2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2b8:	4770      	bx	lr

0801c2ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801c2ba:	b480      	push	{r7}
 801c2bc:	b087      	sub	sp, #28
 801c2be:	af00      	add	r7, sp, #0
 801c2c0:	6078      	str	r0, [r7, #4]
 801c2c2:	460b      	mov	r3, r1
 801c2c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801c2ca:	697b      	ldr	r3, [r7, #20]
 801c2cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2d0:	691b      	ldr	r3, [r3, #16]
 801c2d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801c2d4:	697b      	ldr	r3, [r7, #20]
 801c2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c2da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801c2dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801c2de:	78fb      	ldrb	r3, [r7, #3]
 801c2e0:	f003 030f 	and.w	r3, r3, #15
 801c2e4:	68fa      	ldr	r2, [r7, #12]
 801c2e6:	fa22 f303 	lsr.w	r3, r2, r3
 801c2ea:	01db      	lsls	r3, r3, #7
 801c2ec:	b2db      	uxtb	r3, r3
 801c2ee:	693a      	ldr	r2, [r7, #16]
 801c2f0:	4313      	orrs	r3, r2
 801c2f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801c2f4:	78fb      	ldrb	r3, [r7, #3]
 801c2f6:	015a      	lsls	r2, r3, #5
 801c2f8:	697b      	ldr	r3, [r7, #20]
 801c2fa:	4413      	add	r3, r2
 801c2fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c300:	689b      	ldr	r3, [r3, #8]
 801c302:	693a      	ldr	r2, [r7, #16]
 801c304:	4013      	ands	r3, r2
 801c306:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801c308:	68bb      	ldr	r3, [r7, #8]
}
 801c30a:	4618      	mov	r0, r3
 801c30c:	371c      	adds	r7, #28
 801c30e:	46bd      	mov	sp, r7
 801c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c314:	4770      	bx	lr

0801c316 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801c316:	b480      	push	{r7}
 801c318:	b083      	sub	sp, #12
 801c31a:	af00      	add	r7, sp, #0
 801c31c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	695b      	ldr	r3, [r3, #20]
 801c322:	f003 0301 	and.w	r3, r3, #1
}
 801c326:	4618      	mov	r0, r3
 801c328:	370c      	adds	r7, #12
 801c32a:	46bd      	mov	sp, r7
 801c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c330:	4770      	bx	lr
	...

0801c334 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801c334:	b480      	push	{r7}
 801c336:	b085      	sub	sp, #20
 801c338:	af00      	add	r7, sp, #0
 801c33a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c346:	681a      	ldr	r2, [r3, #0]
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801c34e:	4619      	mov	r1, r3
 801c350:	4b09      	ldr	r3, [pc, #36]	; (801c378 <USB_ActivateSetup+0x44>)
 801c352:	4013      	ands	r3, r2
 801c354:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801c35c:	685b      	ldr	r3, [r3, #4]
 801c35e:	68fa      	ldr	r2, [r7, #12]
 801c360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801c364:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801c36a:	2300      	movs	r3, #0
}
 801c36c:	4618      	mov	r0, r3
 801c36e:	3714      	adds	r7, #20
 801c370:	46bd      	mov	sp, r7
 801c372:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c376:	4770      	bx	lr
 801c378:	fffff800 	.word	0xfffff800

0801c37c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801c37c:	b480      	push	{r7}
 801c37e:	b087      	sub	sp, #28
 801c380:	af00      	add	r7, sp, #0
 801c382:	60f8      	str	r0, [r7, #12]
 801c384:	460b      	mov	r3, r1
 801c386:	607a      	str	r2, [r7, #4]
 801c388:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801c38e:	68fb      	ldr	r3, [r7, #12]
 801c390:	333c      	adds	r3, #60	; 0x3c
 801c392:	3304      	adds	r3, #4
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801c398:	693b      	ldr	r3, [r7, #16]
 801c39a:	4a26      	ldr	r2, [pc, #152]	; (801c434 <USB_EP0_OutStart+0xb8>)
 801c39c:	4293      	cmp	r3, r2
 801c39e:	d90a      	bls.n	801c3b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801c3a0:	697b      	ldr	r3, [r7, #20]
 801c3a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3a6:	681b      	ldr	r3, [r3, #0]
 801c3a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801c3ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801c3b0:	d101      	bne.n	801c3b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801c3b2:	2300      	movs	r3, #0
 801c3b4:	e037      	b.n	801c426 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801c3b6:	697b      	ldr	r3, [r7, #20]
 801c3b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3bc:	461a      	mov	r2, r3
 801c3be:	2300      	movs	r3, #0
 801c3c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801c3c2:	697b      	ldr	r3, [r7, #20]
 801c3c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3c8:	691b      	ldr	r3, [r3, #16]
 801c3ca:	697a      	ldr	r2, [r7, #20]
 801c3cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c3d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801c3d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801c3d6:	697b      	ldr	r3, [r7, #20]
 801c3d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3dc:	691b      	ldr	r3, [r3, #16]
 801c3de:	697a      	ldr	r2, [r7, #20]
 801c3e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c3e4:	f043 0318 	orr.w	r3, r3, #24
 801c3e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c3ea:	697b      	ldr	r3, [r7, #20]
 801c3ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c3f0:	691b      	ldr	r3, [r3, #16]
 801c3f2:	697a      	ldr	r2, [r7, #20]
 801c3f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c3f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801c3fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c3fe:	7afb      	ldrb	r3, [r7, #11]
 801c400:	2b01      	cmp	r3, #1
 801c402:	d10f      	bne.n	801c424 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c404:	697b      	ldr	r3, [r7, #20]
 801c406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c40a:	461a      	mov	r2, r3
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c410:	697b      	ldr	r3, [r7, #20]
 801c412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c416:	681b      	ldr	r3, [r3, #0]
 801c418:	697a      	ldr	r2, [r7, #20]
 801c41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c41e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801c422:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c424:	2300      	movs	r3, #0
}
 801c426:	4618      	mov	r0, r3
 801c428:	371c      	adds	r7, #28
 801c42a:	46bd      	mov	sp, r7
 801c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c430:	4770      	bx	lr
 801c432:	bf00      	nop
 801c434:	4f54300a 	.word	0x4f54300a

0801c438 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c438:	b480      	push	{r7}
 801c43a:	b085      	sub	sp, #20
 801c43c:	af00      	add	r7, sp, #0
 801c43e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801c440:	2300      	movs	r3, #0
 801c442:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801c444:	68fb      	ldr	r3, [r7, #12]
 801c446:	3301      	adds	r3, #1
 801c448:	60fb      	str	r3, [r7, #12]
 801c44a:	68fb      	ldr	r3, [r7, #12]
 801c44c:	4a13      	ldr	r2, [pc, #76]	; (801c49c <USB_CoreReset+0x64>)
 801c44e:	4293      	cmp	r3, r2
 801c450:	d901      	bls.n	801c456 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801c452:	2303      	movs	r3, #3
 801c454:	e01b      	b.n	801c48e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	691b      	ldr	r3, [r3, #16]
 801c45a:	2b00      	cmp	r3, #0
 801c45c:	daf2      	bge.n	801c444 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c45e:	2300      	movs	r3, #0
 801c460:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	691b      	ldr	r3, [r3, #16]
 801c466:	f043 0201 	orr.w	r2, r3, #1
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801c46e:	68fb      	ldr	r3, [r7, #12]
 801c470:	3301      	adds	r3, #1
 801c472:	60fb      	str	r3, [r7, #12]
 801c474:	68fb      	ldr	r3, [r7, #12]
 801c476:	4a09      	ldr	r2, [pc, #36]	; (801c49c <USB_CoreReset+0x64>)
 801c478:	4293      	cmp	r3, r2
 801c47a:	d901      	bls.n	801c480 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801c47c:	2303      	movs	r3, #3
 801c47e:	e006      	b.n	801c48e <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c480:	687b      	ldr	r3, [r7, #4]
 801c482:	691b      	ldr	r3, [r3, #16]
 801c484:	f003 0301 	and.w	r3, r3, #1
 801c488:	2b01      	cmp	r3, #1
 801c48a:	d0f0      	beq.n	801c46e <USB_CoreReset+0x36>

  return HAL_OK;
 801c48c:	2300      	movs	r3, #0
}
 801c48e:	4618      	mov	r0, r3
 801c490:	3714      	adds	r7, #20
 801c492:	46bd      	mov	sp, r7
 801c494:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c498:	4770      	bx	lr
 801c49a:	bf00      	nop
 801c49c:	00030d40 	.word	0x00030d40

0801c4a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c4a0:	b580      	push	{r7, lr}
 801c4a2:	b084      	sub	sp, #16
 801c4a4:	af00      	add	r7, sp, #0
 801c4a6:	6078      	str	r0, [r7, #4]
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c4ac:	2300      	movs	r3, #0
 801c4ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c4b0:	687b      	ldr	r3, [r7, #4]
 801c4b2:	7c1b      	ldrb	r3, [r3, #16]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d115      	bne.n	801c4e4 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c4b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c4bc:	2202      	movs	r2, #2
 801c4be:	2181      	movs	r1, #129	; 0x81
 801c4c0:	6878      	ldr	r0, [r7, #4]
 801c4c2:	f001 ff6e 	bl	801e3a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c4c6:	687b      	ldr	r3, [r7, #4]
 801c4c8:	2201      	movs	r2, #1
 801c4ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c4cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c4d0:	2202      	movs	r2, #2
 801c4d2:	2101      	movs	r1, #1
 801c4d4:	6878      	ldr	r0, [r7, #4]
 801c4d6:	f001 ff64 	bl	801e3a2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c4da:	687b      	ldr	r3, [r7, #4]
 801c4dc:	2201      	movs	r2, #1
 801c4de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801c4e2:	e012      	b.n	801c50a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c4e4:	2340      	movs	r3, #64	; 0x40
 801c4e6:	2202      	movs	r2, #2
 801c4e8:	2181      	movs	r1, #129	; 0x81
 801c4ea:	6878      	ldr	r0, [r7, #4]
 801c4ec:	f001 ff59 	bl	801e3a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c4f6:	2340      	movs	r3, #64	; 0x40
 801c4f8:	2202      	movs	r2, #2
 801c4fa:	2101      	movs	r1, #1
 801c4fc:	6878      	ldr	r0, [r7, #4]
 801c4fe:	f001 ff50 	bl	801e3a2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c502:	687b      	ldr	r3, [r7, #4]
 801c504:	2201      	movs	r2, #1
 801c506:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c50a:	2308      	movs	r3, #8
 801c50c:	2203      	movs	r2, #3
 801c50e:	2182      	movs	r1, #130	; 0x82
 801c510:	6878      	ldr	r0, [r7, #4]
 801c512:	f001 ff46 	bl	801e3a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801c516:	687b      	ldr	r3, [r7, #4]
 801c518:	2201      	movs	r2, #1
 801c51a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c51c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801c520:	f002 f8d6 	bl	801e6d0 <malloc>
 801c524:	4603      	mov	r3, r0
 801c526:	461a      	mov	r2, r3
 801c528:	687b      	ldr	r3, [r7, #4]
 801c52a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c534:	2b00      	cmp	r3, #0
 801c536:	d102      	bne.n	801c53e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801c538:	2301      	movs	r3, #1
 801c53a:	73fb      	strb	r3, [r7, #15]
 801c53c:	e026      	b.n	801c58c <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c544:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801c546:	687b      	ldr	r3, [r7, #4]
 801c548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c54c:	681b      	ldr	r3, [r3, #0]
 801c54e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801c550:	68bb      	ldr	r3, [r7, #8]
 801c552:	2200      	movs	r2, #0
 801c554:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801c558:	68bb      	ldr	r3, [r7, #8]
 801c55a:	2200      	movs	r2, #0
 801c55c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c560:	687b      	ldr	r3, [r7, #4]
 801c562:	7c1b      	ldrb	r3, [r3, #16]
 801c564:	2b00      	cmp	r3, #0
 801c566:	d109      	bne.n	801c57c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c568:	68bb      	ldr	r3, [r7, #8]
 801c56a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c56e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c572:	2101      	movs	r1, #1
 801c574:	6878      	ldr	r0, [r7, #4]
 801c576:	f002 f805 	bl	801e584 <USBD_LL_PrepareReceive>
 801c57a:	e007      	b.n	801c58c <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c57c:	68bb      	ldr	r3, [r7, #8]
 801c57e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c582:	2340      	movs	r3, #64	; 0x40
 801c584:	2101      	movs	r1, #1
 801c586:	6878      	ldr	r0, [r7, #4]
 801c588:	f001 fffc 	bl	801e584 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801c58c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c58e:	4618      	mov	r0, r3
 801c590:	3710      	adds	r7, #16
 801c592:	46bd      	mov	sp, r7
 801c594:	bd80      	pop	{r7, pc}

0801c596 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c596:	b580      	push	{r7, lr}
 801c598:	b084      	sub	sp, #16
 801c59a:	af00      	add	r7, sp, #0
 801c59c:	6078      	str	r0, [r7, #4]
 801c59e:	460b      	mov	r3, r1
 801c5a0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c5a2:	2300      	movs	r3, #0
 801c5a4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801c5a6:	2181      	movs	r1, #129	; 0x81
 801c5a8:	6878      	ldr	r0, [r7, #4]
 801c5aa:	f001 ff20 	bl	801e3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801c5ae:	687b      	ldr	r3, [r7, #4]
 801c5b0:	2200      	movs	r2, #0
 801c5b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801c5b4:	2101      	movs	r1, #1
 801c5b6:	6878      	ldr	r0, [r7, #4]
 801c5b8:	f001 ff19 	bl	801e3ee <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	2200      	movs	r2, #0
 801c5c0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801c5c4:	2182      	movs	r1, #130	; 0x82
 801c5c6:	6878      	ldr	r0, [r7, #4]
 801c5c8:	f001 ff11 	bl	801e3ee <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	2200      	movs	r2, #0
 801c5d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5d8:	2b00      	cmp	r3, #0
 801c5da:	d00e      	beq.n	801c5fa <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801c5dc:	687b      	ldr	r3, [r7, #4]
 801c5de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c5e2:	685b      	ldr	r3, [r3, #4]
 801c5e4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5ec:	4618      	mov	r0, r3
 801c5ee:	f002 f877 	bl	801e6e0 <free>
    pdev->pClassData = NULL;
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	2200      	movs	r2, #0
 801c5f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801c5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 801c5fc:	4618      	mov	r0, r3
 801c5fe:	3710      	adds	r7, #16
 801c600:	46bd      	mov	sp, r7
 801c602:	bd80      	pop	{r7, pc}

0801c604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c604:	b580      	push	{r7, lr}
 801c606:	b086      	sub	sp, #24
 801c608:	af00      	add	r7, sp, #0
 801c60a:	6078      	str	r0, [r7, #4]
 801c60c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c60e:	687b      	ldr	r3, [r7, #4]
 801c610:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c614:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801c616:	2300      	movs	r3, #0
 801c618:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801c61a:	2300      	movs	r3, #0
 801c61c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801c61e:	2300      	movs	r3, #0
 801c620:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c622:	683b      	ldr	r3, [r7, #0]
 801c624:	781b      	ldrb	r3, [r3, #0]
 801c626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c62a:	2b00      	cmp	r3, #0
 801c62c:	d039      	beq.n	801c6a2 <USBD_CDC_Setup+0x9e>
 801c62e:	2b20      	cmp	r3, #32
 801c630:	d17c      	bne.n	801c72c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801c632:	683b      	ldr	r3, [r7, #0]
 801c634:	88db      	ldrh	r3, [r3, #6]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d029      	beq.n	801c68e <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801c63a:	683b      	ldr	r3, [r7, #0]
 801c63c:	781b      	ldrb	r3, [r3, #0]
 801c63e:	b25b      	sxtb	r3, r3
 801c640:	2b00      	cmp	r3, #0
 801c642:	da11      	bge.n	801c668 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c64a:	689b      	ldr	r3, [r3, #8]
 801c64c:	683a      	ldr	r2, [r7, #0]
 801c64e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801c650:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c652:	683a      	ldr	r2, [r7, #0]
 801c654:	88d2      	ldrh	r2, [r2, #6]
 801c656:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c658:	6939      	ldr	r1, [r7, #16]
 801c65a:	683b      	ldr	r3, [r7, #0]
 801c65c:	88db      	ldrh	r3, [r3, #6]
 801c65e:	461a      	mov	r2, r3
 801c660:	6878      	ldr	r0, [r7, #4]
 801c662:	f001 fa3f 	bl	801dae4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801c666:	e068      	b.n	801c73a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 801c668:	683b      	ldr	r3, [r7, #0]
 801c66a:	785a      	ldrb	r2, [r3, #1]
 801c66c:	693b      	ldr	r3, [r7, #16]
 801c66e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801c672:	683b      	ldr	r3, [r7, #0]
 801c674:	88db      	ldrh	r3, [r3, #6]
 801c676:	b2da      	uxtb	r2, r3
 801c678:	693b      	ldr	r3, [r7, #16]
 801c67a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c67e:	6939      	ldr	r1, [r7, #16]
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	88db      	ldrh	r3, [r3, #6]
 801c684:	461a      	mov	r2, r3
 801c686:	6878      	ldr	r0, [r7, #4]
 801c688:	f001 fa5a 	bl	801db40 <USBD_CtlPrepareRx>
      break;
 801c68c:	e055      	b.n	801c73a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c68e:	687b      	ldr	r3, [r7, #4]
 801c690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c694:	689b      	ldr	r3, [r3, #8]
 801c696:	683a      	ldr	r2, [r7, #0]
 801c698:	7850      	ldrb	r0, [r2, #1]
 801c69a:	2200      	movs	r2, #0
 801c69c:	6839      	ldr	r1, [r7, #0]
 801c69e:	4798      	blx	r3
      break;
 801c6a0:	e04b      	b.n	801c73a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c6a2:	683b      	ldr	r3, [r7, #0]
 801c6a4:	785b      	ldrb	r3, [r3, #1]
 801c6a6:	2b0a      	cmp	r3, #10
 801c6a8:	d017      	beq.n	801c6da <USBD_CDC_Setup+0xd6>
 801c6aa:	2b0b      	cmp	r3, #11
 801c6ac:	d029      	beq.n	801c702 <USBD_CDC_Setup+0xfe>
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	d133      	bne.n	801c71a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6b2:	687b      	ldr	r3, [r7, #4]
 801c6b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c6b8:	2b03      	cmp	r3, #3
 801c6ba:	d107      	bne.n	801c6cc <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801c6bc:	f107 030c 	add.w	r3, r7, #12
 801c6c0:	2202      	movs	r2, #2
 801c6c2:	4619      	mov	r1, r3
 801c6c4:	6878      	ldr	r0, [r7, #4]
 801c6c6:	f001 fa0d 	bl	801dae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c6ca:	e02e      	b.n	801c72a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c6cc:	6839      	ldr	r1, [r7, #0]
 801c6ce:	6878      	ldr	r0, [r7, #4]
 801c6d0:	f001 f99d 	bl	801da0e <USBD_CtlError>
            ret = USBD_FAIL;
 801c6d4:	2302      	movs	r3, #2
 801c6d6:	75fb      	strb	r3, [r7, #23]
          break;
 801c6d8:	e027      	b.n	801c72a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c6e0:	2b03      	cmp	r3, #3
 801c6e2:	d107      	bne.n	801c6f4 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801c6e4:	f107 030f 	add.w	r3, r7, #15
 801c6e8:	2201      	movs	r2, #1
 801c6ea:	4619      	mov	r1, r3
 801c6ec:	6878      	ldr	r0, [r7, #4]
 801c6ee:	f001 f9f9 	bl	801dae4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c6f2:	e01a      	b.n	801c72a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c6f4:	6839      	ldr	r1, [r7, #0]
 801c6f6:	6878      	ldr	r0, [r7, #4]
 801c6f8:	f001 f989 	bl	801da0e <USBD_CtlError>
            ret = USBD_FAIL;
 801c6fc:	2302      	movs	r3, #2
 801c6fe:	75fb      	strb	r3, [r7, #23]
          break;
 801c700:	e013      	b.n	801c72a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c702:	687b      	ldr	r3, [r7, #4]
 801c704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c708:	2b03      	cmp	r3, #3
 801c70a:	d00d      	beq.n	801c728 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 801c70c:	6839      	ldr	r1, [r7, #0]
 801c70e:	6878      	ldr	r0, [r7, #4]
 801c710:	f001 f97d 	bl	801da0e <USBD_CtlError>
            ret = USBD_FAIL;
 801c714:	2302      	movs	r3, #2
 801c716:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c718:	e006      	b.n	801c728 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 801c71a:	6839      	ldr	r1, [r7, #0]
 801c71c:	6878      	ldr	r0, [r7, #4]
 801c71e:	f001 f976 	bl	801da0e <USBD_CtlError>
          ret = USBD_FAIL;
 801c722:	2302      	movs	r3, #2
 801c724:	75fb      	strb	r3, [r7, #23]
          break;
 801c726:	e000      	b.n	801c72a <USBD_CDC_Setup+0x126>
          break;
 801c728:	bf00      	nop
      }
      break;
 801c72a:	e006      	b.n	801c73a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801c72c:	6839      	ldr	r1, [r7, #0]
 801c72e:	6878      	ldr	r0, [r7, #4]
 801c730:	f001 f96d 	bl	801da0e <USBD_CtlError>
      ret = USBD_FAIL;
 801c734:	2302      	movs	r3, #2
 801c736:	75fb      	strb	r3, [r7, #23]
      break;
 801c738:	bf00      	nop
  }

  return ret;
 801c73a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c73c:	4618      	mov	r0, r3
 801c73e:	3718      	adds	r7, #24
 801c740:	46bd      	mov	sp, r7
 801c742:	bd80      	pop	{r7, pc}

0801c744 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c744:	b580      	push	{r7, lr}
 801c746:	b084      	sub	sp, #16
 801c748:	af00      	add	r7, sp, #0
 801c74a:	6078      	str	r0, [r7, #4]
 801c74c:	460b      	mov	r3, r1
 801c74e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c750:	687b      	ldr	r3, [r7, #4]
 801c752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c756:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c75e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c760:	687b      	ldr	r3, [r7, #4]
 801c762:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c766:	2b00      	cmp	r3, #0
 801c768:	d03a      	beq.n	801c7e0 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c76a:	78fa      	ldrb	r2, [r7, #3]
 801c76c:	6879      	ldr	r1, [r7, #4]
 801c76e:	4613      	mov	r3, r2
 801c770:	009b      	lsls	r3, r3, #2
 801c772:	4413      	add	r3, r2
 801c774:	009b      	lsls	r3, r3, #2
 801c776:	440b      	add	r3, r1
 801c778:	331c      	adds	r3, #28
 801c77a:	681b      	ldr	r3, [r3, #0]
 801c77c:	2b00      	cmp	r3, #0
 801c77e:	d029      	beq.n	801c7d4 <USBD_CDC_DataIn+0x90>
 801c780:	78fa      	ldrb	r2, [r7, #3]
 801c782:	6879      	ldr	r1, [r7, #4]
 801c784:	4613      	mov	r3, r2
 801c786:	009b      	lsls	r3, r3, #2
 801c788:	4413      	add	r3, r2
 801c78a:	009b      	lsls	r3, r3, #2
 801c78c:	440b      	add	r3, r1
 801c78e:	331c      	adds	r3, #28
 801c790:	681a      	ldr	r2, [r3, #0]
 801c792:	78f9      	ldrb	r1, [r7, #3]
 801c794:	68b8      	ldr	r0, [r7, #8]
 801c796:	460b      	mov	r3, r1
 801c798:	00db      	lsls	r3, r3, #3
 801c79a:	1a5b      	subs	r3, r3, r1
 801c79c:	009b      	lsls	r3, r3, #2
 801c79e:	4403      	add	r3, r0
 801c7a0:	3344      	adds	r3, #68	; 0x44
 801c7a2:	681b      	ldr	r3, [r3, #0]
 801c7a4:	fbb2 f1f3 	udiv	r1, r2, r3
 801c7a8:	fb03 f301 	mul.w	r3, r3, r1
 801c7ac:	1ad3      	subs	r3, r2, r3
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	d110      	bne.n	801c7d4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c7b2:	78fa      	ldrb	r2, [r7, #3]
 801c7b4:	6879      	ldr	r1, [r7, #4]
 801c7b6:	4613      	mov	r3, r2
 801c7b8:	009b      	lsls	r3, r3, #2
 801c7ba:	4413      	add	r3, r2
 801c7bc:	009b      	lsls	r3, r3, #2
 801c7be:	440b      	add	r3, r1
 801c7c0:	331c      	adds	r3, #28
 801c7c2:	2200      	movs	r2, #0
 801c7c4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c7c6:	78f9      	ldrb	r1, [r7, #3]
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	6878      	ldr	r0, [r7, #4]
 801c7ce:	f001 feb6 	bl	801e53e <USBD_LL_Transmit>
 801c7d2:	e003      	b.n	801c7dc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801c7d4:	68fb      	ldr	r3, [r7, #12]
 801c7d6:	2200      	movs	r2, #0
 801c7d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801c7dc:	2300      	movs	r3, #0
 801c7de:	e000      	b.n	801c7e2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801c7e0:	2302      	movs	r3, #2
  }
}
 801c7e2:	4618      	mov	r0, r3
 801c7e4:	3710      	adds	r7, #16
 801c7e6:	46bd      	mov	sp, r7
 801c7e8:	bd80      	pop	{r7, pc}

0801c7ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c7ea:	b580      	push	{r7, lr}
 801c7ec:	b084      	sub	sp, #16
 801c7ee:	af00      	add	r7, sp, #0
 801c7f0:	6078      	str	r0, [r7, #4]
 801c7f2:	460b      	mov	r3, r1
 801c7f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c7fc:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c7fe:	78fb      	ldrb	r3, [r7, #3]
 801c800:	4619      	mov	r1, r3
 801c802:	6878      	ldr	r0, [r7, #4]
 801c804:	f001 fee1 	bl	801e5ca <USBD_LL_GetRxDataSize>
 801c808:	4602      	mov	r2, r0
 801c80a:	68fb      	ldr	r3, [r7, #12]
 801c80c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c810:	687b      	ldr	r3, [r7, #4]
 801c812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c816:	2b00      	cmp	r3, #0
 801c818:	d00d      	beq.n	801c836 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c81a:	687b      	ldr	r3, [r7, #4]
 801c81c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c820:	68db      	ldr	r3, [r3, #12]
 801c822:	68fa      	ldr	r2, [r7, #12]
 801c824:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c828:	68fa      	ldr	r2, [r7, #12]
 801c82a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c82e:	4611      	mov	r1, r2
 801c830:	4798      	blx	r3

    return USBD_OK;
 801c832:	2300      	movs	r3, #0
 801c834:	e000      	b.n	801c838 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801c836:	2302      	movs	r3, #2
  }
}
 801c838:	4618      	mov	r0, r3
 801c83a:	3710      	adds	r7, #16
 801c83c:	46bd      	mov	sp, r7
 801c83e:	bd80      	pop	{r7, pc}

0801c840 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b084      	sub	sp, #16
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c84e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c856:	2b00      	cmp	r3, #0
 801c858:	d015      	beq.n	801c886 <USBD_CDC_EP0_RxReady+0x46>
 801c85a:	68fb      	ldr	r3, [r7, #12]
 801c85c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c860:	2bff      	cmp	r3, #255	; 0xff
 801c862:	d010      	beq.n	801c886 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c864:	687b      	ldr	r3, [r7, #4]
 801c866:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c86a:	689b      	ldr	r3, [r3, #8]
 801c86c:	68fa      	ldr	r2, [r7, #12]
 801c86e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801c872:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c874:	68fa      	ldr	r2, [r7, #12]
 801c876:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c87a:	b292      	uxth	r2, r2
 801c87c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	22ff      	movs	r2, #255	; 0xff
 801c882:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801c886:	2300      	movs	r3, #0
}
 801c888:	4618      	mov	r0, r3
 801c88a:	3710      	adds	r7, #16
 801c88c:	46bd      	mov	sp, r7
 801c88e:	bd80      	pop	{r7, pc}

0801c890 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c890:	b480      	push	{r7}
 801c892:	b083      	sub	sp, #12
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	2243      	movs	r2, #67	; 0x43
 801c89c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c89e:	4b03      	ldr	r3, [pc, #12]	; (801c8ac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801c8a0:	4618      	mov	r0, r3
 801c8a2:	370c      	adds	r7, #12
 801c8a4:	46bd      	mov	sp, r7
 801c8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8aa:	4770      	bx	lr
 801c8ac:	240000a4 	.word	0x240000a4

0801c8b0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c8b0:	b480      	push	{r7}
 801c8b2:	b083      	sub	sp, #12
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	2243      	movs	r2, #67	; 0x43
 801c8bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c8be:	4b03      	ldr	r3, [pc, #12]	; (801c8cc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	370c      	adds	r7, #12
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ca:	4770      	bx	lr
 801c8cc:	24000060 	.word	0x24000060

0801c8d0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c8d0:	b480      	push	{r7}
 801c8d2:	b083      	sub	sp, #12
 801c8d4:	af00      	add	r7, sp, #0
 801c8d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c8d8:	687b      	ldr	r3, [r7, #4]
 801c8da:	2243      	movs	r2, #67	; 0x43
 801c8dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c8de:	4b03      	ldr	r3, [pc, #12]	; (801c8ec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	370c      	adds	r7, #12
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ea:	4770      	bx	lr
 801c8ec:	240000e8 	.word	0x240000e8

0801c8f0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c8f0:	b480      	push	{r7}
 801c8f2:	b083      	sub	sp, #12
 801c8f4:	af00      	add	r7, sp, #0
 801c8f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c8f8:	687b      	ldr	r3, [r7, #4]
 801c8fa:	220a      	movs	r2, #10
 801c8fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c8fe:	4b03      	ldr	r3, [pc, #12]	; (801c90c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c900:	4618      	mov	r0, r3
 801c902:	370c      	adds	r7, #12
 801c904:	46bd      	mov	sp, r7
 801c906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c90a:	4770      	bx	lr
 801c90c:	2400001c 	.word	0x2400001c

0801c910 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c910:	b480      	push	{r7}
 801c912:	b085      	sub	sp, #20
 801c914:	af00      	add	r7, sp, #0
 801c916:	6078      	str	r0, [r7, #4]
 801c918:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c91a:	2302      	movs	r3, #2
 801c91c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801c91e:	683b      	ldr	r3, [r7, #0]
 801c920:	2b00      	cmp	r3, #0
 801c922:	d005      	beq.n	801c930 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801c924:	687b      	ldr	r3, [r7, #4]
 801c926:	683a      	ldr	r2, [r7, #0]
 801c928:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801c92c:	2300      	movs	r3, #0
 801c92e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801c930:	7bfb      	ldrb	r3, [r7, #15]
}
 801c932:	4618      	mov	r0, r3
 801c934:	3714      	adds	r7, #20
 801c936:	46bd      	mov	sp, r7
 801c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c93c:	4770      	bx	lr

0801c93e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c93e:	b480      	push	{r7}
 801c940:	b087      	sub	sp, #28
 801c942:	af00      	add	r7, sp, #0
 801c944:	60f8      	str	r0, [r7, #12]
 801c946:	60b9      	str	r1, [r7, #8]
 801c948:	4613      	mov	r3, r2
 801c94a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c94c:	68fb      	ldr	r3, [r7, #12]
 801c94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c952:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c954:	697b      	ldr	r3, [r7, #20]
 801c956:	68ba      	ldr	r2, [r7, #8]
 801c958:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c95c:	88fa      	ldrh	r2, [r7, #6]
 801c95e:	697b      	ldr	r3, [r7, #20]
 801c960:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801c964:	2300      	movs	r3, #0
}
 801c966:	4618      	mov	r0, r3
 801c968:	371c      	adds	r7, #28
 801c96a:	46bd      	mov	sp, r7
 801c96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c970:	4770      	bx	lr

0801c972 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c972:	b480      	push	{r7}
 801c974:	b085      	sub	sp, #20
 801c976:	af00      	add	r7, sp, #0
 801c978:	6078      	str	r0, [r7, #4]
 801c97a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c97c:	687b      	ldr	r3, [r7, #4]
 801c97e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c982:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c984:	68fb      	ldr	r3, [r7, #12]
 801c986:	683a      	ldr	r2, [r7, #0]
 801c988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801c98c:	2300      	movs	r3, #0
}
 801c98e:	4618      	mov	r0, r3
 801c990:	3714      	adds	r7, #20
 801c992:	46bd      	mov	sp, r7
 801c994:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c998:	4770      	bx	lr

0801c99a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c99a:	b580      	push	{r7, lr}
 801c99c:	b084      	sub	sp, #16
 801c99e:	af00      	add	r7, sp, #0
 801c9a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c9aa:	687b      	ldr	r3, [r7, #4]
 801c9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c9b0:	2b00      	cmp	r3, #0
 801c9b2:	d01c      	beq.n	801c9ee <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801c9b4:	68fb      	ldr	r3, [r7, #12]
 801c9b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d115      	bne.n	801c9ea <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	2201      	movs	r2, #1
 801c9c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c9d0:	68fb      	ldr	r3, [r7, #12]
 801c9d2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801c9d6:	68fb      	ldr	r3, [r7, #12]
 801c9d8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c9dc:	b29b      	uxth	r3, r3
 801c9de:	2181      	movs	r1, #129	; 0x81
 801c9e0:	6878      	ldr	r0, [r7, #4]
 801c9e2:	f001 fdac 	bl	801e53e <USBD_LL_Transmit>

      return USBD_OK;
 801c9e6:	2300      	movs	r3, #0
 801c9e8:	e002      	b.n	801c9f0 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801c9ea:	2301      	movs	r3, #1
 801c9ec:	e000      	b.n	801c9f0 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801c9ee:	2302      	movs	r3, #2
  }
}
 801c9f0:	4618      	mov	r0, r3
 801c9f2:	3710      	adds	r7, #16
 801c9f4:	46bd      	mov	sp, r7
 801c9f6:	bd80      	pop	{r7, pc}

0801c9f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c9f8:	b580      	push	{r7, lr}
 801c9fa:	b084      	sub	sp, #16
 801c9fc:	af00      	add	r7, sp, #0
 801c9fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801ca00:	687b      	ldr	r3, [r7, #4]
 801ca02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ca06:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ca0e:	2b00      	cmp	r3, #0
 801ca10:	d017      	beq.n	801ca42 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801ca12:	687b      	ldr	r3, [r7, #4]
 801ca14:	7c1b      	ldrb	r3, [r3, #16]
 801ca16:	2b00      	cmp	r3, #0
 801ca18:	d109      	bne.n	801ca2e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ca1a:	68fb      	ldr	r3, [r7, #12]
 801ca1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ca20:	f44f 7300 	mov.w	r3, #512	; 0x200
 801ca24:	2101      	movs	r1, #1
 801ca26:	6878      	ldr	r0, [r7, #4]
 801ca28:	f001 fdac 	bl	801e584 <USBD_LL_PrepareReceive>
 801ca2c:	e007      	b.n	801ca3e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801ca34:	2340      	movs	r3, #64	; 0x40
 801ca36:	2101      	movs	r1, #1
 801ca38:	6878      	ldr	r0, [r7, #4]
 801ca3a:	f001 fda3 	bl	801e584 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801ca3e:	2300      	movs	r3, #0
 801ca40:	e000      	b.n	801ca44 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801ca42:	2302      	movs	r3, #2
  }
}
 801ca44:	4618      	mov	r0, r3
 801ca46:	3710      	adds	r7, #16
 801ca48:	46bd      	mov	sp, r7
 801ca4a:	bd80      	pop	{r7, pc}

0801ca4c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801ca4c:	b580      	push	{r7, lr}
 801ca4e:	b084      	sub	sp, #16
 801ca50:	af00      	add	r7, sp, #0
 801ca52:	60f8      	str	r0, [r7, #12]
 801ca54:	60b9      	str	r1, [r7, #8]
 801ca56:	4613      	mov	r3, r2
 801ca58:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801ca5a:	68fb      	ldr	r3, [r7, #12]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d101      	bne.n	801ca64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801ca60:	2302      	movs	r3, #2
 801ca62:	e01a      	b.n	801ca9a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801ca64:	68fb      	ldr	r3, [r7, #12]
 801ca66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d003      	beq.n	801ca76 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	2200      	movs	r2, #0
 801ca72:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801ca76:	68bb      	ldr	r3, [r7, #8]
 801ca78:	2b00      	cmp	r3, #0
 801ca7a:	d003      	beq.n	801ca84 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801ca7c:	68fb      	ldr	r3, [r7, #12]
 801ca7e:	68ba      	ldr	r2, [r7, #8]
 801ca80:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ca84:	68fb      	ldr	r3, [r7, #12]
 801ca86:	2201      	movs	r2, #1
 801ca88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801ca8c:	68fb      	ldr	r3, [r7, #12]
 801ca8e:	79fa      	ldrb	r2, [r7, #7]
 801ca90:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801ca92:	68f8      	ldr	r0, [r7, #12]
 801ca94:	f001 fc1a 	bl	801e2cc <USBD_LL_Init>

  return USBD_OK;
 801ca98:	2300      	movs	r3, #0
}
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	3710      	adds	r7, #16
 801ca9e:	46bd      	mov	sp, r7
 801caa0:	bd80      	pop	{r7, pc}

0801caa2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801caa2:	b480      	push	{r7}
 801caa4:	b085      	sub	sp, #20
 801caa6:	af00      	add	r7, sp, #0
 801caa8:	6078      	str	r0, [r7, #4]
 801caaa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801caac:	2300      	movs	r3, #0
 801caae:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801cab0:	683b      	ldr	r3, [r7, #0]
 801cab2:	2b00      	cmp	r3, #0
 801cab4:	d006      	beq.n	801cac4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801cab6:	687b      	ldr	r3, [r7, #4]
 801cab8:	683a      	ldr	r2, [r7, #0]
 801caba:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801cabe:	2300      	movs	r3, #0
 801cac0:	73fb      	strb	r3, [r7, #15]
 801cac2:	e001      	b.n	801cac8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801cac4:	2302      	movs	r3, #2
 801cac6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801cac8:	7bfb      	ldrb	r3, [r7, #15]
}
 801caca:	4618      	mov	r0, r3
 801cacc:	3714      	adds	r7, #20
 801cace:	46bd      	mov	sp, r7
 801cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad4:	4770      	bx	lr

0801cad6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801cad6:	b580      	push	{r7, lr}
 801cad8:	b082      	sub	sp, #8
 801cada:	af00      	add	r7, sp, #0
 801cadc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801cade:	6878      	ldr	r0, [r7, #4]
 801cae0:	f001 fc44 	bl	801e36c <USBD_LL_Start>

  return USBD_OK;
 801cae4:	2300      	movs	r3, #0
}
 801cae6:	4618      	mov	r0, r3
 801cae8:	3708      	adds	r7, #8
 801caea:	46bd      	mov	sp, r7
 801caec:	bd80      	pop	{r7, pc}

0801caee <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801caee:	b480      	push	{r7}
 801caf0:	b083      	sub	sp, #12
 801caf2:	af00      	add	r7, sp, #0
 801caf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801caf6:	2300      	movs	r3, #0
}
 801caf8:	4618      	mov	r0, r3
 801cafa:	370c      	adds	r7, #12
 801cafc:	46bd      	mov	sp, r7
 801cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb02:	4770      	bx	lr

0801cb04 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801cb04:	b580      	push	{r7, lr}
 801cb06:	b084      	sub	sp, #16
 801cb08:	af00      	add	r7, sp, #0
 801cb0a:	6078      	str	r0, [r7, #4]
 801cb0c:	460b      	mov	r3, r1
 801cb0e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801cb10:	2302      	movs	r3, #2
 801cb12:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801cb14:	687b      	ldr	r3, [r7, #4]
 801cb16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb1a:	2b00      	cmp	r3, #0
 801cb1c:	d00c      	beq.n	801cb38 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb24:	681b      	ldr	r3, [r3, #0]
 801cb26:	78fa      	ldrb	r2, [r7, #3]
 801cb28:	4611      	mov	r1, r2
 801cb2a:	6878      	ldr	r0, [r7, #4]
 801cb2c:	4798      	blx	r3
 801cb2e:	4603      	mov	r3, r0
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d101      	bne.n	801cb38 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801cb34:	2300      	movs	r3, #0
 801cb36:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801cb38:	7bfb      	ldrb	r3, [r7, #15]
}
 801cb3a:	4618      	mov	r0, r3
 801cb3c:	3710      	adds	r7, #16
 801cb3e:	46bd      	mov	sp, r7
 801cb40:	bd80      	pop	{r7, pc}

0801cb42 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801cb42:	b580      	push	{r7, lr}
 801cb44:	b082      	sub	sp, #8
 801cb46:	af00      	add	r7, sp, #0
 801cb48:	6078      	str	r0, [r7, #4]
 801cb4a:	460b      	mov	r3, r1
 801cb4c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801cb4e:	687b      	ldr	r3, [r7, #4]
 801cb50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb54:	685b      	ldr	r3, [r3, #4]
 801cb56:	78fa      	ldrb	r2, [r7, #3]
 801cb58:	4611      	mov	r1, r2
 801cb5a:	6878      	ldr	r0, [r7, #4]
 801cb5c:	4798      	blx	r3

  return USBD_OK;
 801cb5e:	2300      	movs	r3, #0
}
 801cb60:	4618      	mov	r0, r3
 801cb62:	3708      	adds	r7, #8
 801cb64:	46bd      	mov	sp, r7
 801cb66:	bd80      	pop	{r7, pc}

0801cb68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801cb68:	b580      	push	{r7, lr}
 801cb6a:	b082      	sub	sp, #8
 801cb6c:	af00      	add	r7, sp, #0
 801cb6e:	6078      	str	r0, [r7, #4]
 801cb70:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801cb72:	687b      	ldr	r3, [r7, #4]
 801cb74:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cb78:	6839      	ldr	r1, [r7, #0]
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	f000 ff0a 	bl	801d994 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	2201      	movs	r2, #1
 801cb84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801cb8e:	461a      	mov	r2, r3
 801cb90:	687b      	ldr	r3, [r7, #4]
 801cb92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801cb9c:	f003 031f 	and.w	r3, r3, #31
 801cba0:	2b01      	cmp	r3, #1
 801cba2:	d00c      	beq.n	801cbbe <USBD_LL_SetupStage+0x56>
 801cba4:	2b01      	cmp	r3, #1
 801cba6:	d302      	bcc.n	801cbae <USBD_LL_SetupStage+0x46>
 801cba8:	2b02      	cmp	r3, #2
 801cbaa:	d010      	beq.n	801cbce <USBD_LL_SetupStage+0x66>
 801cbac:	e017      	b.n	801cbde <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801cbae:	687b      	ldr	r3, [r7, #4]
 801cbb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbb4:	4619      	mov	r1, r3
 801cbb6:	6878      	ldr	r0, [r7, #4]
 801cbb8:	f000 fa0a 	bl	801cfd0 <USBD_StdDevReq>
      break;
 801cbbc:	e01a      	b.n	801cbf4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbc4:	4619      	mov	r1, r3
 801cbc6:	6878      	ldr	r0, [r7, #4]
 801cbc8:	f000 fa6c 	bl	801d0a4 <USBD_StdItfReq>
      break;
 801cbcc:	e012      	b.n	801cbf4 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801cbce:	687b      	ldr	r3, [r7, #4]
 801cbd0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801cbd4:	4619      	mov	r1, r3
 801cbd6:	6878      	ldr	r0, [r7, #4]
 801cbd8:	f000 faaa 	bl	801d130 <USBD_StdEPReq>
      break;
 801cbdc:	e00a      	b.n	801cbf4 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801cbe4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801cbe8:	b2db      	uxtb	r3, r3
 801cbea:	4619      	mov	r1, r3
 801cbec:	6878      	ldr	r0, [r7, #4]
 801cbee:	f001 fc1d 	bl	801e42c <USBD_LL_StallEP>
      break;
 801cbf2:	bf00      	nop
  }

  return USBD_OK;
 801cbf4:	2300      	movs	r3, #0
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3708      	adds	r7, #8
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	bd80      	pop	{r7, pc}

0801cbfe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801cbfe:	b580      	push	{r7, lr}
 801cc00:	b086      	sub	sp, #24
 801cc02:	af00      	add	r7, sp, #0
 801cc04:	60f8      	str	r0, [r7, #12]
 801cc06:	460b      	mov	r3, r1
 801cc08:	607a      	str	r2, [r7, #4]
 801cc0a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801cc0c:	7afb      	ldrb	r3, [r7, #11]
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d14b      	bne.n	801ccaa <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801cc12:	68fb      	ldr	r3, [r7, #12]
 801cc14:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801cc18:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cc20:	2b03      	cmp	r3, #3
 801cc22:	d134      	bne.n	801cc8e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801cc24:	697b      	ldr	r3, [r7, #20]
 801cc26:	68da      	ldr	r2, [r3, #12]
 801cc28:	697b      	ldr	r3, [r7, #20]
 801cc2a:	691b      	ldr	r3, [r3, #16]
 801cc2c:	429a      	cmp	r2, r3
 801cc2e:	d919      	bls.n	801cc64 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801cc30:	697b      	ldr	r3, [r7, #20]
 801cc32:	68da      	ldr	r2, [r3, #12]
 801cc34:	697b      	ldr	r3, [r7, #20]
 801cc36:	691b      	ldr	r3, [r3, #16]
 801cc38:	1ad2      	subs	r2, r2, r3
 801cc3a:	697b      	ldr	r3, [r7, #20]
 801cc3c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc3e:	697b      	ldr	r3, [r7, #20]
 801cc40:	68da      	ldr	r2, [r3, #12]
 801cc42:	697b      	ldr	r3, [r7, #20]
 801cc44:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801cc46:	429a      	cmp	r2, r3
 801cc48:	d203      	bcs.n	801cc52 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc4a:	697b      	ldr	r3, [r7, #20]
 801cc4c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801cc4e:	b29b      	uxth	r3, r3
 801cc50:	e002      	b.n	801cc58 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801cc52:	697b      	ldr	r3, [r7, #20]
 801cc54:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801cc56:	b29b      	uxth	r3, r3
 801cc58:	461a      	mov	r2, r3
 801cc5a:	6879      	ldr	r1, [r7, #4]
 801cc5c:	68f8      	ldr	r0, [r7, #12]
 801cc5e:	f000 ff8d 	bl	801db7c <USBD_CtlContinueRx>
 801cc62:	e038      	b.n	801ccd6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801cc64:	68fb      	ldr	r3, [r7, #12]
 801cc66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc6a:	691b      	ldr	r3, [r3, #16]
 801cc6c:	2b00      	cmp	r3, #0
 801cc6e:	d00a      	beq.n	801cc86 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801cc70:	68fb      	ldr	r3, [r7, #12]
 801cc72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801cc76:	2b03      	cmp	r3, #3
 801cc78:	d105      	bne.n	801cc86 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801cc7a:	68fb      	ldr	r3, [r7, #12]
 801cc7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc80:	691b      	ldr	r3, [r3, #16]
 801cc82:	68f8      	ldr	r0, [r7, #12]
 801cc84:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801cc86:	68f8      	ldr	r0, [r7, #12]
 801cc88:	f000 ff8a 	bl	801dba0 <USBD_CtlSendStatus>
 801cc8c:	e023      	b.n	801ccd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801cc8e:	68fb      	ldr	r3, [r7, #12]
 801cc90:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cc94:	2b05      	cmp	r3, #5
 801cc96:	d11e      	bne.n	801ccd6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801cc98:	68fb      	ldr	r3, [r7, #12]
 801cc9a:	2200      	movs	r2, #0
 801cc9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801cca0:	2100      	movs	r1, #0
 801cca2:	68f8      	ldr	r0, [r7, #12]
 801cca4:	f001 fbc2 	bl	801e42c <USBD_LL_StallEP>
 801cca8:	e015      	b.n	801ccd6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801ccaa:	68fb      	ldr	r3, [r7, #12]
 801ccac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ccb0:	699b      	ldr	r3, [r3, #24]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d00d      	beq.n	801ccd2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ccb6:	68fb      	ldr	r3, [r7, #12]
 801ccb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801ccbc:	2b03      	cmp	r3, #3
 801ccbe:	d108      	bne.n	801ccd2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801ccc0:	68fb      	ldr	r3, [r7, #12]
 801ccc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ccc6:	699b      	ldr	r3, [r3, #24]
 801ccc8:	7afa      	ldrb	r2, [r7, #11]
 801ccca:	4611      	mov	r1, r2
 801cccc:	68f8      	ldr	r0, [r7, #12]
 801ccce:	4798      	blx	r3
 801ccd0:	e001      	b.n	801ccd6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ccd2:	2302      	movs	r3, #2
 801ccd4:	e000      	b.n	801ccd8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801ccd6:	2300      	movs	r3, #0
}
 801ccd8:	4618      	mov	r0, r3
 801ccda:	3718      	adds	r7, #24
 801ccdc:	46bd      	mov	sp, r7
 801ccde:	bd80      	pop	{r7, pc}

0801cce0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801cce0:	b580      	push	{r7, lr}
 801cce2:	b086      	sub	sp, #24
 801cce4:	af00      	add	r7, sp, #0
 801cce6:	60f8      	str	r0, [r7, #12]
 801cce8:	460b      	mov	r3, r1
 801ccea:	607a      	str	r2, [r7, #4]
 801ccec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801ccee:	7afb      	ldrb	r3, [r7, #11]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d17f      	bne.n	801cdf4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801ccf4:	68fb      	ldr	r3, [r7, #12]
 801ccf6:	3314      	adds	r3, #20
 801ccf8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801ccfa:	68fb      	ldr	r3, [r7, #12]
 801ccfc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cd00:	2b02      	cmp	r3, #2
 801cd02:	d15c      	bne.n	801cdbe <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801cd04:	697b      	ldr	r3, [r7, #20]
 801cd06:	68da      	ldr	r2, [r3, #12]
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	691b      	ldr	r3, [r3, #16]
 801cd0c:	429a      	cmp	r2, r3
 801cd0e:	d915      	bls.n	801cd3c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801cd10:	697b      	ldr	r3, [r7, #20]
 801cd12:	68da      	ldr	r2, [r3, #12]
 801cd14:	697b      	ldr	r3, [r7, #20]
 801cd16:	691b      	ldr	r3, [r3, #16]
 801cd18:	1ad2      	subs	r2, r2, r3
 801cd1a:	697b      	ldr	r3, [r7, #20]
 801cd1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801cd1e:	697b      	ldr	r3, [r7, #20]
 801cd20:	68db      	ldr	r3, [r3, #12]
 801cd22:	b29b      	uxth	r3, r3
 801cd24:	461a      	mov	r2, r3
 801cd26:	6879      	ldr	r1, [r7, #4]
 801cd28:	68f8      	ldr	r0, [r7, #12]
 801cd2a:	f000 fef7 	bl	801db1c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd2e:	2300      	movs	r3, #0
 801cd30:	2200      	movs	r2, #0
 801cd32:	2100      	movs	r1, #0
 801cd34:	68f8      	ldr	r0, [r7, #12]
 801cd36:	f001 fc25 	bl	801e584 <USBD_LL_PrepareReceive>
 801cd3a:	e04e      	b.n	801cdda <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801cd3c:	697b      	ldr	r3, [r7, #20]
 801cd3e:	689b      	ldr	r3, [r3, #8]
 801cd40:	697a      	ldr	r2, [r7, #20]
 801cd42:	6912      	ldr	r2, [r2, #16]
 801cd44:	fbb3 f1f2 	udiv	r1, r3, r2
 801cd48:	fb02 f201 	mul.w	r2, r2, r1
 801cd4c:	1a9b      	subs	r3, r3, r2
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d11c      	bne.n	801cd8c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801cd52:	697b      	ldr	r3, [r7, #20]
 801cd54:	689a      	ldr	r2, [r3, #8]
 801cd56:	697b      	ldr	r3, [r7, #20]
 801cd58:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801cd5a:	429a      	cmp	r2, r3
 801cd5c:	d316      	bcc.n	801cd8c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801cd5e:	697b      	ldr	r3, [r7, #20]
 801cd60:	689a      	ldr	r2, [r3, #8]
 801cd62:	68fb      	ldr	r3, [r7, #12]
 801cd64:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801cd68:	429a      	cmp	r2, r3
 801cd6a:	d20f      	bcs.n	801cd8c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801cd6c:	2200      	movs	r2, #0
 801cd6e:	2100      	movs	r1, #0
 801cd70:	68f8      	ldr	r0, [r7, #12]
 801cd72:	f000 fed3 	bl	801db1c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	2200      	movs	r2, #0
 801cd7a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801cd7e:	2300      	movs	r3, #0
 801cd80:	2200      	movs	r2, #0
 801cd82:	2100      	movs	r1, #0
 801cd84:	68f8      	ldr	r0, [r7, #12]
 801cd86:	f001 fbfd 	bl	801e584 <USBD_LL_PrepareReceive>
 801cd8a:	e026      	b.n	801cdda <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801cd8c:	68fb      	ldr	r3, [r7, #12]
 801cd8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd92:	68db      	ldr	r3, [r3, #12]
 801cd94:	2b00      	cmp	r3, #0
 801cd96:	d00a      	beq.n	801cdae <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801cd98:	68fb      	ldr	r3, [r7, #12]
 801cd9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801cd9e:	2b03      	cmp	r3, #3
 801cda0:	d105      	bne.n	801cdae <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801cda2:	68fb      	ldr	r3, [r7, #12]
 801cda4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cda8:	68db      	ldr	r3, [r3, #12]
 801cdaa:	68f8      	ldr	r0, [r7, #12]
 801cdac:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801cdae:	2180      	movs	r1, #128	; 0x80
 801cdb0:	68f8      	ldr	r0, [r7, #12]
 801cdb2:	f001 fb3b 	bl	801e42c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801cdb6:	68f8      	ldr	r0, [r7, #12]
 801cdb8:	f000 ff05 	bl	801dbc6 <USBD_CtlReceiveStatus>
 801cdbc:	e00d      	b.n	801cdda <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801cdbe:	68fb      	ldr	r3, [r7, #12]
 801cdc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801cdc4:	2b04      	cmp	r3, #4
 801cdc6:	d004      	beq.n	801cdd2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801cdc8:	68fb      	ldr	r3, [r7, #12]
 801cdca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d103      	bne.n	801cdda <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801cdd2:	2180      	movs	r1, #128	; 0x80
 801cdd4:	68f8      	ldr	r0, [r7, #12]
 801cdd6:	f001 fb29 	bl	801e42c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801cdda:	68fb      	ldr	r3, [r7, #12]
 801cddc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801cde0:	2b01      	cmp	r3, #1
 801cde2:	d11d      	bne.n	801ce20 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801cde4:	68f8      	ldr	r0, [r7, #12]
 801cde6:	f7ff fe82 	bl	801caee <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801cdea:	68fb      	ldr	r3, [r7, #12]
 801cdec:	2200      	movs	r2, #0
 801cdee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801cdf2:	e015      	b.n	801ce20 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801cdf4:	68fb      	ldr	r3, [r7, #12]
 801cdf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cdfa:	695b      	ldr	r3, [r3, #20]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d00d      	beq.n	801ce1c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ce00:	68fb      	ldr	r3, [r7, #12]
 801ce02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801ce06:	2b03      	cmp	r3, #3
 801ce08:	d108      	bne.n	801ce1c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801ce0a:	68fb      	ldr	r3, [r7, #12]
 801ce0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ce10:	695b      	ldr	r3, [r3, #20]
 801ce12:	7afa      	ldrb	r2, [r7, #11]
 801ce14:	4611      	mov	r1, r2
 801ce16:	68f8      	ldr	r0, [r7, #12]
 801ce18:	4798      	blx	r3
 801ce1a:	e001      	b.n	801ce20 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ce1c:	2302      	movs	r3, #2
 801ce1e:	e000      	b.n	801ce22 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801ce20:	2300      	movs	r3, #0
}
 801ce22:	4618      	mov	r0, r3
 801ce24:	3718      	adds	r7, #24
 801ce26:	46bd      	mov	sp, r7
 801ce28:	bd80      	pop	{r7, pc}

0801ce2a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801ce2a:	b580      	push	{r7, lr}
 801ce2c:	b082      	sub	sp, #8
 801ce2e:	af00      	add	r7, sp, #0
 801ce30:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ce32:	2340      	movs	r3, #64	; 0x40
 801ce34:	2200      	movs	r2, #0
 801ce36:	2100      	movs	r1, #0
 801ce38:	6878      	ldr	r0, [r7, #4]
 801ce3a:	f001 fab2 	bl	801e3a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	2201      	movs	r2, #1
 801ce42:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801ce46:	687b      	ldr	r3, [r7, #4]
 801ce48:	2240      	movs	r2, #64	; 0x40
 801ce4a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ce4e:	2340      	movs	r3, #64	; 0x40
 801ce50:	2200      	movs	r2, #0
 801ce52:	2180      	movs	r1, #128	; 0x80
 801ce54:	6878      	ldr	r0, [r7, #4]
 801ce56:	f001 faa4 	bl	801e3a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801ce5a:	687b      	ldr	r3, [r7, #4]
 801ce5c:	2201      	movs	r2, #1
 801ce5e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801ce60:	687b      	ldr	r3, [r7, #4]
 801ce62:	2240      	movs	r2, #64	; 0x40
 801ce64:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	2201      	movs	r2, #1
 801ce6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801ce6e:	687b      	ldr	r3, [r7, #4]
 801ce70:	2200      	movs	r2, #0
 801ce72:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801ce76:	687b      	ldr	r3, [r7, #4]
 801ce78:	2200      	movs	r2, #0
 801ce7a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801ce7c:	687b      	ldr	r3, [r7, #4]
 801ce7e:	2200      	movs	r2, #0
 801ce80:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801ce84:	687b      	ldr	r3, [r7, #4]
 801ce86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ce8a:	2b00      	cmp	r3, #0
 801ce8c:	d009      	beq.n	801cea2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801ce8e:	687b      	ldr	r3, [r7, #4]
 801ce90:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ce94:	685b      	ldr	r3, [r3, #4]
 801ce96:	687a      	ldr	r2, [r7, #4]
 801ce98:	6852      	ldr	r2, [r2, #4]
 801ce9a:	b2d2      	uxtb	r2, r2
 801ce9c:	4611      	mov	r1, r2
 801ce9e:	6878      	ldr	r0, [r7, #4]
 801cea0:	4798      	blx	r3
  }

  return USBD_OK;
 801cea2:	2300      	movs	r3, #0
}
 801cea4:	4618      	mov	r0, r3
 801cea6:	3708      	adds	r7, #8
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	bd80      	pop	{r7, pc}

0801ceac <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801ceac:	b480      	push	{r7}
 801ceae:	b083      	sub	sp, #12
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	6078      	str	r0, [r7, #4]
 801ceb4:	460b      	mov	r3, r1
 801ceb6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801ceb8:	687b      	ldr	r3, [r7, #4]
 801ceba:	78fa      	ldrb	r2, [r7, #3]
 801cebc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801cebe:	2300      	movs	r3, #0
}
 801cec0:	4618      	mov	r0, r3
 801cec2:	370c      	adds	r7, #12
 801cec4:	46bd      	mov	sp, r7
 801cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceca:	4770      	bx	lr

0801cecc <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801cecc:	b480      	push	{r7}
 801cece:	b083      	sub	sp, #12
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801cee0:	687b      	ldr	r3, [r7, #4]
 801cee2:	2204      	movs	r2, #4
 801cee4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801cee8:	2300      	movs	r3, #0
}
 801ceea:	4618      	mov	r0, r3
 801ceec:	370c      	adds	r7, #12
 801ceee:	46bd      	mov	sp, r7
 801cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cef4:	4770      	bx	lr

0801cef6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801cef6:	b480      	push	{r7}
 801cef8:	b083      	sub	sp, #12
 801cefa:	af00      	add	r7, sp, #0
 801cefc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801cefe:	687b      	ldr	r3, [r7, #4]
 801cf00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf04:	2b04      	cmp	r3, #4
 801cf06:	d105      	bne.n	801cf14 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801cf08:	687b      	ldr	r3, [r7, #4]
 801cf0a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801cf0e:	687b      	ldr	r3, [r7, #4]
 801cf10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801cf14:	2300      	movs	r3, #0
}
 801cf16:	4618      	mov	r0, r3
 801cf18:	370c      	adds	r7, #12
 801cf1a:	46bd      	mov	sp, r7
 801cf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf20:	4770      	bx	lr

0801cf22 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801cf22:	b580      	push	{r7, lr}
 801cf24:	b082      	sub	sp, #8
 801cf26:	af00      	add	r7, sp, #0
 801cf28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cf30:	2b03      	cmp	r3, #3
 801cf32:	d10b      	bne.n	801cf4c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf3a:	69db      	ldr	r3, [r3, #28]
 801cf3c:	2b00      	cmp	r3, #0
 801cf3e:	d005      	beq.n	801cf4c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf46:	69db      	ldr	r3, [r3, #28]
 801cf48:	6878      	ldr	r0, [r7, #4]
 801cf4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801cf4c:	2300      	movs	r3, #0
}
 801cf4e:	4618      	mov	r0, r3
 801cf50:	3708      	adds	r7, #8
 801cf52:	46bd      	mov	sp, r7
 801cf54:	bd80      	pop	{r7, pc}

0801cf56 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801cf56:	b480      	push	{r7}
 801cf58:	b083      	sub	sp, #12
 801cf5a:	af00      	add	r7, sp, #0
 801cf5c:	6078      	str	r0, [r7, #4]
 801cf5e:	460b      	mov	r3, r1
 801cf60:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cf62:	2300      	movs	r3, #0
}
 801cf64:	4618      	mov	r0, r3
 801cf66:	370c      	adds	r7, #12
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6e:	4770      	bx	lr

0801cf70 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801cf70:	b480      	push	{r7}
 801cf72:	b083      	sub	sp, #12
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
 801cf78:	460b      	mov	r3, r1
 801cf7a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cf7c:	2300      	movs	r3, #0
}
 801cf7e:	4618      	mov	r0, r3
 801cf80:	370c      	adds	r7, #12
 801cf82:	46bd      	mov	sp, r7
 801cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf88:	4770      	bx	lr

0801cf8a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801cf8a:	b480      	push	{r7}
 801cf8c:	b083      	sub	sp, #12
 801cf8e:	af00      	add	r7, sp, #0
 801cf90:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cf92:	2300      	movs	r3, #0
}
 801cf94:	4618      	mov	r0, r3
 801cf96:	370c      	adds	r7, #12
 801cf98:	46bd      	mov	sp, r7
 801cf9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf9e:	4770      	bx	lr

0801cfa0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b082      	sub	sp, #8
 801cfa4:	af00      	add	r7, sp, #0
 801cfa6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801cfa8:	687b      	ldr	r3, [r7, #4]
 801cfaa:	2201      	movs	r2, #1
 801cfac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801cfb0:	687b      	ldr	r3, [r7, #4]
 801cfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cfb6:	685b      	ldr	r3, [r3, #4]
 801cfb8:	687a      	ldr	r2, [r7, #4]
 801cfba:	6852      	ldr	r2, [r2, #4]
 801cfbc:	b2d2      	uxtb	r2, r2
 801cfbe:	4611      	mov	r1, r2
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	4798      	blx	r3

  return USBD_OK;
 801cfc4:	2300      	movs	r3, #0
}
 801cfc6:	4618      	mov	r0, r3
 801cfc8:	3708      	adds	r7, #8
 801cfca:	46bd      	mov	sp, r7
 801cfcc:	bd80      	pop	{r7, pc}
	...

0801cfd0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801cfd0:	b580      	push	{r7, lr}
 801cfd2:	b084      	sub	sp, #16
 801cfd4:	af00      	add	r7, sp, #0
 801cfd6:	6078      	str	r0, [r7, #4]
 801cfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801cfda:	2300      	movs	r3, #0
 801cfdc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cfde:	683b      	ldr	r3, [r7, #0]
 801cfe0:	781b      	ldrb	r3, [r3, #0]
 801cfe2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cfe6:	2b20      	cmp	r3, #32
 801cfe8:	d004      	beq.n	801cff4 <USBD_StdDevReq+0x24>
 801cfea:	2b40      	cmp	r3, #64	; 0x40
 801cfec:	d002      	beq.n	801cff4 <USBD_StdDevReq+0x24>
 801cfee:	2b00      	cmp	r3, #0
 801cff0:	d008      	beq.n	801d004 <USBD_StdDevReq+0x34>
 801cff2:	e04c      	b.n	801d08e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801cff4:	687b      	ldr	r3, [r7, #4]
 801cff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cffa:	689b      	ldr	r3, [r3, #8]
 801cffc:	6839      	ldr	r1, [r7, #0]
 801cffe:	6878      	ldr	r0, [r7, #4]
 801d000:	4798      	blx	r3
      break;
 801d002:	e049      	b.n	801d098 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801d004:	683b      	ldr	r3, [r7, #0]
 801d006:	785b      	ldrb	r3, [r3, #1]
 801d008:	2b09      	cmp	r3, #9
 801d00a:	d83a      	bhi.n	801d082 <USBD_StdDevReq+0xb2>
 801d00c:	a201      	add	r2, pc, #4	; (adr r2, 801d014 <USBD_StdDevReq+0x44>)
 801d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d012:	bf00      	nop
 801d014:	0801d065 	.word	0x0801d065
 801d018:	0801d079 	.word	0x0801d079
 801d01c:	0801d083 	.word	0x0801d083
 801d020:	0801d06f 	.word	0x0801d06f
 801d024:	0801d083 	.word	0x0801d083
 801d028:	0801d047 	.word	0x0801d047
 801d02c:	0801d03d 	.word	0x0801d03d
 801d030:	0801d083 	.word	0x0801d083
 801d034:	0801d05b 	.word	0x0801d05b
 801d038:	0801d051 	.word	0x0801d051
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801d03c:	6839      	ldr	r1, [r7, #0]
 801d03e:	6878      	ldr	r0, [r7, #4]
 801d040:	f000 f9d4 	bl	801d3ec <USBD_GetDescriptor>
          break;
 801d044:	e022      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801d046:	6839      	ldr	r1, [r7, #0]
 801d048:	6878      	ldr	r0, [r7, #4]
 801d04a:	f000 fb37 	bl	801d6bc <USBD_SetAddress>
          break;
 801d04e:	e01d      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801d050:	6839      	ldr	r1, [r7, #0]
 801d052:	6878      	ldr	r0, [r7, #4]
 801d054:	f000 fb74 	bl	801d740 <USBD_SetConfig>
          break;
 801d058:	e018      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801d05a:	6839      	ldr	r1, [r7, #0]
 801d05c:	6878      	ldr	r0, [r7, #4]
 801d05e:	f000 fbfd 	bl	801d85c <USBD_GetConfig>
          break;
 801d062:	e013      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801d064:	6839      	ldr	r1, [r7, #0]
 801d066:	6878      	ldr	r0, [r7, #4]
 801d068:	f000 fc2c 	bl	801d8c4 <USBD_GetStatus>
          break;
 801d06c:	e00e      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801d06e:	6839      	ldr	r1, [r7, #0]
 801d070:	6878      	ldr	r0, [r7, #4]
 801d072:	f000 fc5a 	bl	801d92a <USBD_SetFeature>
          break;
 801d076:	e009      	b.n	801d08c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801d078:	6839      	ldr	r1, [r7, #0]
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f000 fc69 	bl	801d952 <USBD_ClrFeature>
          break;
 801d080:	e004      	b.n	801d08c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801d082:	6839      	ldr	r1, [r7, #0]
 801d084:	6878      	ldr	r0, [r7, #4]
 801d086:	f000 fcc2 	bl	801da0e <USBD_CtlError>
          break;
 801d08a:	bf00      	nop
      }
      break;
 801d08c:	e004      	b.n	801d098 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801d08e:	6839      	ldr	r1, [r7, #0]
 801d090:	6878      	ldr	r0, [r7, #4]
 801d092:	f000 fcbc 	bl	801da0e <USBD_CtlError>
      break;
 801d096:	bf00      	nop
  }

  return ret;
 801d098:	7bfb      	ldrb	r3, [r7, #15]
}
 801d09a:	4618      	mov	r0, r3
 801d09c:	3710      	adds	r7, #16
 801d09e:	46bd      	mov	sp, r7
 801d0a0:	bd80      	pop	{r7, pc}
 801d0a2:	bf00      	nop

0801d0a4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801d0a4:	b580      	push	{r7, lr}
 801d0a6:	b084      	sub	sp, #16
 801d0a8:	af00      	add	r7, sp, #0
 801d0aa:	6078      	str	r0, [r7, #4]
 801d0ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801d0ae:	2300      	movs	r3, #0
 801d0b0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d0b2:	683b      	ldr	r3, [r7, #0]
 801d0b4:	781b      	ldrb	r3, [r3, #0]
 801d0b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d0ba:	2b20      	cmp	r3, #32
 801d0bc:	d003      	beq.n	801d0c6 <USBD_StdItfReq+0x22>
 801d0be:	2b40      	cmp	r3, #64	; 0x40
 801d0c0:	d001      	beq.n	801d0c6 <USBD_StdItfReq+0x22>
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	d12a      	bne.n	801d11c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801d0c6:	687b      	ldr	r3, [r7, #4]
 801d0c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0cc:	3b01      	subs	r3, #1
 801d0ce:	2b02      	cmp	r3, #2
 801d0d0:	d81d      	bhi.n	801d10e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801d0d2:	683b      	ldr	r3, [r7, #0]
 801d0d4:	889b      	ldrh	r3, [r3, #4]
 801d0d6:	b2db      	uxtb	r3, r3
 801d0d8:	2b01      	cmp	r3, #1
 801d0da:	d813      	bhi.n	801d104 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d0dc:	687b      	ldr	r3, [r7, #4]
 801d0de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d0e2:	689b      	ldr	r3, [r3, #8]
 801d0e4:	6839      	ldr	r1, [r7, #0]
 801d0e6:	6878      	ldr	r0, [r7, #4]
 801d0e8:	4798      	blx	r3
 801d0ea:	4603      	mov	r3, r0
 801d0ec:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801d0ee:	683b      	ldr	r3, [r7, #0]
 801d0f0:	88db      	ldrh	r3, [r3, #6]
 801d0f2:	2b00      	cmp	r3, #0
 801d0f4:	d110      	bne.n	801d118 <USBD_StdItfReq+0x74>
 801d0f6:	7bfb      	ldrb	r3, [r7, #15]
 801d0f8:	2b00      	cmp	r3, #0
 801d0fa:	d10d      	bne.n	801d118 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801d0fc:	6878      	ldr	r0, [r7, #4]
 801d0fe:	f000 fd4f 	bl	801dba0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801d102:	e009      	b.n	801d118 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801d104:	6839      	ldr	r1, [r7, #0]
 801d106:	6878      	ldr	r0, [r7, #4]
 801d108:	f000 fc81 	bl	801da0e <USBD_CtlError>
          break;
 801d10c:	e004      	b.n	801d118 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801d10e:	6839      	ldr	r1, [r7, #0]
 801d110:	6878      	ldr	r0, [r7, #4]
 801d112:	f000 fc7c 	bl	801da0e <USBD_CtlError>
          break;
 801d116:	e000      	b.n	801d11a <USBD_StdItfReq+0x76>
          break;
 801d118:	bf00      	nop
      }
      break;
 801d11a:	e004      	b.n	801d126 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801d11c:	6839      	ldr	r1, [r7, #0]
 801d11e:	6878      	ldr	r0, [r7, #4]
 801d120:	f000 fc75 	bl	801da0e <USBD_CtlError>
      break;
 801d124:	bf00      	nop
  }

  return USBD_OK;
 801d126:	2300      	movs	r3, #0
}
 801d128:	4618      	mov	r0, r3
 801d12a:	3710      	adds	r7, #16
 801d12c:	46bd      	mov	sp, r7
 801d12e:	bd80      	pop	{r7, pc}

0801d130 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801d130:	b580      	push	{r7, lr}
 801d132:	b084      	sub	sp, #16
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]
 801d138:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801d13a:	2300      	movs	r3, #0
 801d13c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801d13e:	683b      	ldr	r3, [r7, #0]
 801d140:	889b      	ldrh	r3, [r3, #4]
 801d142:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801d144:	683b      	ldr	r3, [r7, #0]
 801d146:	781b      	ldrb	r3, [r3, #0]
 801d148:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d14c:	2b20      	cmp	r3, #32
 801d14e:	d004      	beq.n	801d15a <USBD_StdEPReq+0x2a>
 801d150:	2b40      	cmp	r3, #64	; 0x40
 801d152:	d002      	beq.n	801d15a <USBD_StdEPReq+0x2a>
 801d154:	2b00      	cmp	r3, #0
 801d156:	d008      	beq.n	801d16a <USBD_StdEPReq+0x3a>
 801d158:	e13d      	b.n	801d3d6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801d15a:	687b      	ldr	r3, [r7, #4]
 801d15c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d160:	689b      	ldr	r3, [r3, #8]
 801d162:	6839      	ldr	r1, [r7, #0]
 801d164:	6878      	ldr	r0, [r7, #4]
 801d166:	4798      	blx	r3
      break;
 801d168:	e13a      	b.n	801d3e0 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801d16a:	683b      	ldr	r3, [r7, #0]
 801d16c:	781b      	ldrb	r3, [r3, #0]
 801d16e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801d172:	2b20      	cmp	r3, #32
 801d174:	d10a      	bne.n	801d18c <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801d176:	687b      	ldr	r3, [r7, #4]
 801d178:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d17c:	689b      	ldr	r3, [r3, #8]
 801d17e:	6839      	ldr	r1, [r7, #0]
 801d180:	6878      	ldr	r0, [r7, #4]
 801d182:	4798      	blx	r3
 801d184:	4603      	mov	r3, r0
 801d186:	73fb      	strb	r3, [r7, #15]

        return ret;
 801d188:	7bfb      	ldrb	r3, [r7, #15]
 801d18a:	e12a      	b.n	801d3e2 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801d18c:	683b      	ldr	r3, [r7, #0]
 801d18e:	785b      	ldrb	r3, [r3, #1]
 801d190:	2b01      	cmp	r3, #1
 801d192:	d03e      	beq.n	801d212 <USBD_StdEPReq+0xe2>
 801d194:	2b03      	cmp	r3, #3
 801d196:	d002      	beq.n	801d19e <USBD_StdEPReq+0x6e>
 801d198:	2b00      	cmp	r3, #0
 801d19a:	d070      	beq.n	801d27e <USBD_StdEPReq+0x14e>
 801d19c:	e115      	b.n	801d3ca <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801d19e:	687b      	ldr	r3, [r7, #4]
 801d1a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1a4:	2b02      	cmp	r3, #2
 801d1a6:	d002      	beq.n	801d1ae <USBD_StdEPReq+0x7e>
 801d1a8:	2b03      	cmp	r3, #3
 801d1aa:	d015      	beq.n	801d1d8 <USBD_StdEPReq+0xa8>
 801d1ac:	e02b      	b.n	801d206 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d1ae:	7bbb      	ldrb	r3, [r7, #14]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d00c      	beq.n	801d1ce <USBD_StdEPReq+0x9e>
 801d1b4:	7bbb      	ldrb	r3, [r7, #14]
 801d1b6:	2b80      	cmp	r3, #128	; 0x80
 801d1b8:	d009      	beq.n	801d1ce <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801d1ba:	7bbb      	ldrb	r3, [r7, #14]
 801d1bc:	4619      	mov	r1, r3
 801d1be:	6878      	ldr	r0, [r7, #4]
 801d1c0:	f001 f934 	bl	801e42c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801d1c4:	2180      	movs	r1, #128	; 0x80
 801d1c6:	6878      	ldr	r0, [r7, #4]
 801d1c8:	f001 f930 	bl	801e42c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d1cc:	e020      	b.n	801d210 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801d1ce:	6839      	ldr	r1, [r7, #0]
 801d1d0:	6878      	ldr	r0, [r7, #4]
 801d1d2:	f000 fc1c 	bl	801da0e <USBD_CtlError>
              break;
 801d1d6:	e01b      	b.n	801d210 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d1d8:	683b      	ldr	r3, [r7, #0]
 801d1da:	885b      	ldrh	r3, [r3, #2]
 801d1dc:	2b00      	cmp	r3, #0
 801d1de:	d10e      	bne.n	801d1fe <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801d1e0:	7bbb      	ldrb	r3, [r7, #14]
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d00b      	beq.n	801d1fe <USBD_StdEPReq+0xce>
 801d1e6:	7bbb      	ldrb	r3, [r7, #14]
 801d1e8:	2b80      	cmp	r3, #128	; 0x80
 801d1ea:	d008      	beq.n	801d1fe <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801d1ec:	683b      	ldr	r3, [r7, #0]
 801d1ee:	88db      	ldrh	r3, [r3, #6]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d104      	bne.n	801d1fe <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801d1f4:	7bbb      	ldrb	r3, [r7, #14]
 801d1f6:	4619      	mov	r1, r3
 801d1f8:	6878      	ldr	r0, [r7, #4]
 801d1fa:	f001 f917 	bl	801e42c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801d1fe:	6878      	ldr	r0, [r7, #4]
 801d200:	f000 fcce 	bl	801dba0 <USBD_CtlSendStatus>

              break;
 801d204:	e004      	b.n	801d210 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801d206:	6839      	ldr	r1, [r7, #0]
 801d208:	6878      	ldr	r0, [r7, #4]
 801d20a:	f000 fc00 	bl	801da0e <USBD_CtlError>
              break;
 801d20e:	bf00      	nop
          }
          break;
 801d210:	e0e0      	b.n	801d3d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d218:	2b02      	cmp	r3, #2
 801d21a:	d002      	beq.n	801d222 <USBD_StdEPReq+0xf2>
 801d21c:	2b03      	cmp	r3, #3
 801d21e:	d015      	beq.n	801d24c <USBD_StdEPReq+0x11c>
 801d220:	e026      	b.n	801d270 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d222:	7bbb      	ldrb	r3, [r7, #14]
 801d224:	2b00      	cmp	r3, #0
 801d226:	d00c      	beq.n	801d242 <USBD_StdEPReq+0x112>
 801d228:	7bbb      	ldrb	r3, [r7, #14]
 801d22a:	2b80      	cmp	r3, #128	; 0x80
 801d22c:	d009      	beq.n	801d242 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801d22e:	7bbb      	ldrb	r3, [r7, #14]
 801d230:	4619      	mov	r1, r3
 801d232:	6878      	ldr	r0, [r7, #4]
 801d234:	f001 f8fa 	bl	801e42c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801d238:	2180      	movs	r1, #128	; 0x80
 801d23a:	6878      	ldr	r0, [r7, #4]
 801d23c:	f001 f8f6 	bl	801e42c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801d240:	e01c      	b.n	801d27c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801d242:	6839      	ldr	r1, [r7, #0]
 801d244:	6878      	ldr	r0, [r7, #4]
 801d246:	f000 fbe2 	bl	801da0e <USBD_CtlError>
              break;
 801d24a:	e017      	b.n	801d27c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801d24c:	683b      	ldr	r3, [r7, #0]
 801d24e:	885b      	ldrh	r3, [r3, #2]
 801d250:	2b00      	cmp	r3, #0
 801d252:	d112      	bne.n	801d27a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801d254:	7bbb      	ldrb	r3, [r7, #14]
 801d256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d25a:	2b00      	cmp	r3, #0
 801d25c:	d004      	beq.n	801d268 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801d25e:	7bbb      	ldrb	r3, [r7, #14]
 801d260:	4619      	mov	r1, r3
 801d262:	6878      	ldr	r0, [r7, #4]
 801d264:	f001 f901 	bl	801e46a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801d268:	6878      	ldr	r0, [r7, #4]
 801d26a:	f000 fc99 	bl	801dba0 <USBD_CtlSendStatus>
              }
              break;
 801d26e:	e004      	b.n	801d27a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801d270:	6839      	ldr	r1, [r7, #0]
 801d272:	6878      	ldr	r0, [r7, #4]
 801d274:	f000 fbcb 	bl	801da0e <USBD_CtlError>
              break;
 801d278:	e000      	b.n	801d27c <USBD_StdEPReq+0x14c>
              break;
 801d27a:	bf00      	nop
          }
          break;
 801d27c:	e0aa      	b.n	801d3d4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801d27e:	687b      	ldr	r3, [r7, #4]
 801d280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d284:	2b02      	cmp	r3, #2
 801d286:	d002      	beq.n	801d28e <USBD_StdEPReq+0x15e>
 801d288:	2b03      	cmp	r3, #3
 801d28a:	d032      	beq.n	801d2f2 <USBD_StdEPReq+0x1c2>
 801d28c:	e097      	b.n	801d3be <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801d28e:	7bbb      	ldrb	r3, [r7, #14]
 801d290:	2b00      	cmp	r3, #0
 801d292:	d007      	beq.n	801d2a4 <USBD_StdEPReq+0x174>
 801d294:	7bbb      	ldrb	r3, [r7, #14]
 801d296:	2b80      	cmp	r3, #128	; 0x80
 801d298:	d004      	beq.n	801d2a4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801d29a:	6839      	ldr	r1, [r7, #0]
 801d29c:	6878      	ldr	r0, [r7, #4]
 801d29e:	f000 fbb6 	bl	801da0e <USBD_CtlError>
                break;
 801d2a2:	e091      	b.n	801d3c8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d2a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d2a8:	2b00      	cmp	r3, #0
 801d2aa:	da0b      	bge.n	801d2c4 <USBD_StdEPReq+0x194>
 801d2ac:	7bbb      	ldrb	r3, [r7, #14]
 801d2ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d2b2:	4613      	mov	r3, r2
 801d2b4:	009b      	lsls	r3, r3, #2
 801d2b6:	4413      	add	r3, r2
 801d2b8:	009b      	lsls	r3, r3, #2
 801d2ba:	3310      	adds	r3, #16
 801d2bc:	687a      	ldr	r2, [r7, #4]
 801d2be:	4413      	add	r3, r2
 801d2c0:	3304      	adds	r3, #4
 801d2c2:	e00b      	b.n	801d2dc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d2c4:	7bbb      	ldrb	r3, [r7, #14]
 801d2c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d2ca:	4613      	mov	r3, r2
 801d2cc:	009b      	lsls	r3, r3, #2
 801d2ce:	4413      	add	r3, r2
 801d2d0:	009b      	lsls	r3, r3, #2
 801d2d2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d2d6:	687a      	ldr	r2, [r7, #4]
 801d2d8:	4413      	add	r3, r2
 801d2da:	3304      	adds	r3, #4
 801d2dc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801d2de:	68bb      	ldr	r3, [r7, #8]
 801d2e0:	2200      	movs	r2, #0
 801d2e2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801d2e4:	68bb      	ldr	r3, [r7, #8]
 801d2e6:	2202      	movs	r2, #2
 801d2e8:	4619      	mov	r1, r3
 801d2ea:	6878      	ldr	r0, [r7, #4]
 801d2ec:	f000 fbfa 	bl	801dae4 <USBD_CtlSendData>
              break;
 801d2f0:	e06a      	b.n	801d3c8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801d2f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d2f6:	2b00      	cmp	r3, #0
 801d2f8:	da11      	bge.n	801d31e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801d2fa:	7bbb      	ldrb	r3, [r7, #14]
 801d2fc:	f003 020f 	and.w	r2, r3, #15
 801d300:	6879      	ldr	r1, [r7, #4]
 801d302:	4613      	mov	r3, r2
 801d304:	009b      	lsls	r3, r3, #2
 801d306:	4413      	add	r3, r2
 801d308:	009b      	lsls	r3, r3, #2
 801d30a:	440b      	add	r3, r1
 801d30c:	3318      	adds	r3, #24
 801d30e:	681b      	ldr	r3, [r3, #0]
 801d310:	2b00      	cmp	r3, #0
 801d312:	d117      	bne.n	801d344 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801d314:	6839      	ldr	r1, [r7, #0]
 801d316:	6878      	ldr	r0, [r7, #4]
 801d318:	f000 fb79 	bl	801da0e <USBD_CtlError>
                  break;
 801d31c:	e054      	b.n	801d3c8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801d31e:	7bbb      	ldrb	r3, [r7, #14]
 801d320:	f003 020f 	and.w	r2, r3, #15
 801d324:	6879      	ldr	r1, [r7, #4]
 801d326:	4613      	mov	r3, r2
 801d328:	009b      	lsls	r3, r3, #2
 801d32a:	4413      	add	r3, r2
 801d32c:	009b      	lsls	r3, r3, #2
 801d32e:	440b      	add	r3, r1
 801d330:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801d334:	681b      	ldr	r3, [r3, #0]
 801d336:	2b00      	cmp	r3, #0
 801d338:	d104      	bne.n	801d344 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801d33a:	6839      	ldr	r1, [r7, #0]
 801d33c:	6878      	ldr	r0, [r7, #4]
 801d33e:	f000 fb66 	bl	801da0e <USBD_CtlError>
                  break;
 801d342:	e041      	b.n	801d3c8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	da0b      	bge.n	801d364 <USBD_StdEPReq+0x234>
 801d34c:	7bbb      	ldrb	r3, [r7, #14]
 801d34e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801d352:	4613      	mov	r3, r2
 801d354:	009b      	lsls	r3, r3, #2
 801d356:	4413      	add	r3, r2
 801d358:	009b      	lsls	r3, r3, #2
 801d35a:	3310      	adds	r3, #16
 801d35c:	687a      	ldr	r2, [r7, #4]
 801d35e:	4413      	add	r3, r2
 801d360:	3304      	adds	r3, #4
 801d362:	e00b      	b.n	801d37c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801d364:	7bbb      	ldrb	r3, [r7, #14]
 801d366:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801d36a:	4613      	mov	r3, r2
 801d36c:	009b      	lsls	r3, r3, #2
 801d36e:	4413      	add	r3, r2
 801d370:	009b      	lsls	r3, r3, #2
 801d372:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801d376:	687a      	ldr	r2, [r7, #4]
 801d378:	4413      	add	r3, r2
 801d37a:	3304      	adds	r3, #4
 801d37c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801d37e:	7bbb      	ldrb	r3, [r7, #14]
 801d380:	2b00      	cmp	r3, #0
 801d382:	d002      	beq.n	801d38a <USBD_StdEPReq+0x25a>
 801d384:	7bbb      	ldrb	r3, [r7, #14]
 801d386:	2b80      	cmp	r3, #128	; 0x80
 801d388:	d103      	bne.n	801d392 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801d38a:	68bb      	ldr	r3, [r7, #8]
 801d38c:	2200      	movs	r2, #0
 801d38e:	601a      	str	r2, [r3, #0]
 801d390:	e00e      	b.n	801d3b0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801d392:	7bbb      	ldrb	r3, [r7, #14]
 801d394:	4619      	mov	r1, r3
 801d396:	6878      	ldr	r0, [r7, #4]
 801d398:	f001 f886 	bl	801e4a8 <USBD_LL_IsStallEP>
 801d39c:	4603      	mov	r3, r0
 801d39e:	2b00      	cmp	r3, #0
 801d3a0:	d003      	beq.n	801d3aa <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801d3a2:	68bb      	ldr	r3, [r7, #8]
 801d3a4:	2201      	movs	r2, #1
 801d3a6:	601a      	str	r2, [r3, #0]
 801d3a8:	e002      	b.n	801d3b0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801d3aa:	68bb      	ldr	r3, [r7, #8]
 801d3ac:	2200      	movs	r2, #0
 801d3ae:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801d3b0:	68bb      	ldr	r3, [r7, #8]
 801d3b2:	2202      	movs	r2, #2
 801d3b4:	4619      	mov	r1, r3
 801d3b6:	6878      	ldr	r0, [r7, #4]
 801d3b8:	f000 fb94 	bl	801dae4 <USBD_CtlSendData>
              break;
 801d3bc:	e004      	b.n	801d3c8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801d3be:	6839      	ldr	r1, [r7, #0]
 801d3c0:	6878      	ldr	r0, [r7, #4]
 801d3c2:	f000 fb24 	bl	801da0e <USBD_CtlError>
              break;
 801d3c6:	bf00      	nop
          }
          break;
 801d3c8:	e004      	b.n	801d3d4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801d3ca:	6839      	ldr	r1, [r7, #0]
 801d3cc:	6878      	ldr	r0, [r7, #4]
 801d3ce:	f000 fb1e 	bl	801da0e <USBD_CtlError>
          break;
 801d3d2:	bf00      	nop
      }
      break;
 801d3d4:	e004      	b.n	801d3e0 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801d3d6:	6839      	ldr	r1, [r7, #0]
 801d3d8:	6878      	ldr	r0, [r7, #4]
 801d3da:	f000 fb18 	bl	801da0e <USBD_CtlError>
      break;
 801d3de:	bf00      	nop
  }

  return ret;
 801d3e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801d3e2:	4618      	mov	r0, r3
 801d3e4:	3710      	adds	r7, #16
 801d3e6:	46bd      	mov	sp, r7
 801d3e8:	bd80      	pop	{r7, pc}
	...

0801d3ec <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801d3ec:	b580      	push	{r7, lr}
 801d3ee:	b084      	sub	sp, #16
 801d3f0:	af00      	add	r7, sp, #0
 801d3f2:	6078      	str	r0, [r7, #4]
 801d3f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d3f6:	2300      	movs	r3, #0
 801d3f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801d3fa:	2300      	movs	r3, #0
 801d3fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801d3fe:	2300      	movs	r3, #0
 801d400:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801d402:	683b      	ldr	r3, [r7, #0]
 801d404:	885b      	ldrh	r3, [r3, #2]
 801d406:	0a1b      	lsrs	r3, r3, #8
 801d408:	b29b      	uxth	r3, r3
 801d40a:	3b01      	subs	r3, #1
 801d40c:	2b06      	cmp	r3, #6
 801d40e:	f200 8128 	bhi.w	801d662 <USBD_GetDescriptor+0x276>
 801d412:	a201      	add	r2, pc, #4	; (adr r2, 801d418 <USBD_GetDescriptor+0x2c>)
 801d414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d418:	0801d435 	.word	0x0801d435
 801d41c:	0801d44d 	.word	0x0801d44d
 801d420:	0801d48d 	.word	0x0801d48d
 801d424:	0801d663 	.word	0x0801d663
 801d428:	0801d663 	.word	0x0801d663
 801d42c:	0801d603 	.word	0x0801d603
 801d430:	0801d62f 	.word	0x0801d62f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801d434:	687b      	ldr	r3, [r7, #4]
 801d436:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d43a:	681b      	ldr	r3, [r3, #0]
 801d43c:	687a      	ldr	r2, [r7, #4]
 801d43e:	7c12      	ldrb	r2, [r2, #16]
 801d440:	f107 0108 	add.w	r1, r7, #8
 801d444:	4610      	mov	r0, r2
 801d446:	4798      	blx	r3
 801d448:	60f8      	str	r0, [r7, #12]
      break;
 801d44a:	e112      	b.n	801d672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d44c:	687b      	ldr	r3, [r7, #4]
 801d44e:	7c1b      	ldrb	r3, [r3, #16]
 801d450:	2b00      	cmp	r3, #0
 801d452:	d10d      	bne.n	801d470 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d45a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d45c:	f107 0208 	add.w	r2, r7, #8
 801d460:	4610      	mov	r0, r2
 801d462:	4798      	blx	r3
 801d464:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d466:	68fb      	ldr	r3, [r7, #12]
 801d468:	3301      	adds	r3, #1
 801d46a:	2202      	movs	r2, #2
 801d46c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801d46e:	e100      	b.n	801d672 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801d470:	687b      	ldr	r3, [r7, #4]
 801d472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d478:	f107 0208 	add.w	r2, r7, #8
 801d47c:	4610      	mov	r0, r2
 801d47e:	4798      	blx	r3
 801d480:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	3301      	adds	r3, #1
 801d486:	2202      	movs	r2, #2
 801d488:	701a      	strb	r2, [r3, #0]
      break;
 801d48a:	e0f2      	b.n	801d672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801d48c:	683b      	ldr	r3, [r7, #0]
 801d48e:	885b      	ldrh	r3, [r3, #2]
 801d490:	b2db      	uxtb	r3, r3
 801d492:	2b05      	cmp	r3, #5
 801d494:	f200 80ac 	bhi.w	801d5f0 <USBD_GetDescriptor+0x204>
 801d498:	a201      	add	r2, pc, #4	; (adr r2, 801d4a0 <USBD_GetDescriptor+0xb4>)
 801d49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d49e:	bf00      	nop
 801d4a0:	0801d4b9 	.word	0x0801d4b9
 801d4a4:	0801d4ed 	.word	0x0801d4ed
 801d4a8:	0801d521 	.word	0x0801d521
 801d4ac:	0801d555 	.word	0x0801d555
 801d4b0:	0801d589 	.word	0x0801d589
 801d4b4:	0801d5bd 	.word	0x0801d5bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801d4b8:	687b      	ldr	r3, [r7, #4]
 801d4ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4be:	685b      	ldr	r3, [r3, #4]
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d00b      	beq.n	801d4dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801d4c4:	687b      	ldr	r3, [r7, #4]
 801d4c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4ca:	685b      	ldr	r3, [r3, #4]
 801d4cc:	687a      	ldr	r2, [r7, #4]
 801d4ce:	7c12      	ldrb	r2, [r2, #16]
 801d4d0:	f107 0108 	add.w	r1, r7, #8
 801d4d4:	4610      	mov	r0, r2
 801d4d6:	4798      	blx	r3
 801d4d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d4da:	e091      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d4dc:	6839      	ldr	r1, [r7, #0]
 801d4de:	6878      	ldr	r0, [r7, #4]
 801d4e0:	f000 fa95 	bl	801da0e <USBD_CtlError>
            err++;
 801d4e4:	7afb      	ldrb	r3, [r7, #11]
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	72fb      	strb	r3, [r7, #11]
          break;
 801d4ea:	e089      	b.n	801d600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801d4ec:	687b      	ldr	r3, [r7, #4]
 801d4ee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4f2:	689b      	ldr	r3, [r3, #8]
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d00b      	beq.n	801d510 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801d4f8:	687b      	ldr	r3, [r7, #4]
 801d4fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d4fe:	689b      	ldr	r3, [r3, #8]
 801d500:	687a      	ldr	r2, [r7, #4]
 801d502:	7c12      	ldrb	r2, [r2, #16]
 801d504:	f107 0108 	add.w	r1, r7, #8
 801d508:	4610      	mov	r0, r2
 801d50a:	4798      	blx	r3
 801d50c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d50e:	e077      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d510:	6839      	ldr	r1, [r7, #0]
 801d512:	6878      	ldr	r0, [r7, #4]
 801d514:	f000 fa7b 	bl	801da0e <USBD_CtlError>
            err++;
 801d518:	7afb      	ldrb	r3, [r7, #11]
 801d51a:	3301      	adds	r3, #1
 801d51c:	72fb      	strb	r3, [r7, #11]
          break;
 801d51e:	e06f      	b.n	801d600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801d520:	687b      	ldr	r3, [r7, #4]
 801d522:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d526:	68db      	ldr	r3, [r3, #12]
 801d528:	2b00      	cmp	r3, #0
 801d52a:	d00b      	beq.n	801d544 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801d52c:	687b      	ldr	r3, [r7, #4]
 801d52e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d532:	68db      	ldr	r3, [r3, #12]
 801d534:	687a      	ldr	r2, [r7, #4]
 801d536:	7c12      	ldrb	r2, [r2, #16]
 801d538:	f107 0108 	add.w	r1, r7, #8
 801d53c:	4610      	mov	r0, r2
 801d53e:	4798      	blx	r3
 801d540:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d542:	e05d      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d544:	6839      	ldr	r1, [r7, #0]
 801d546:	6878      	ldr	r0, [r7, #4]
 801d548:	f000 fa61 	bl	801da0e <USBD_CtlError>
            err++;
 801d54c:	7afb      	ldrb	r3, [r7, #11]
 801d54e:	3301      	adds	r3, #1
 801d550:	72fb      	strb	r3, [r7, #11]
          break;
 801d552:	e055      	b.n	801d600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801d554:	687b      	ldr	r3, [r7, #4]
 801d556:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d55a:	691b      	ldr	r3, [r3, #16]
 801d55c:	2b00      	cmp	r3, #0
 801d55e:	d00b      	beq.n	801d578 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801d560:	687b      	ldr	r3, [r7, #4]
 801d562:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d566:	691b      	ldr	r3, [r3, #16]
 801d568:	687a      	ldr	r2, [r7, #4]
 801d56a:	7c12      	ldrb	r2, [r2, #16]
 801d56c:	f107 0108 	add.w	r1, r7, #8
 801d570:	4610      	mov	r0, r2
 801d572:	4798      	blx	r3
 801d574:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d576:	e043      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d578:	6839      	ldr	r1, [r7, #0]
 801d57a:	6878      	ldr	r0, [r7, #4]
 801d57c:	f000 fa47 	bl	801da0e <USBD_CtlError>
            err++;
 801d580:	7afb      	ldrb	r3, [r7, #11]
 801d582:	3301      	adds	r3, #1
 801d584:	72fb      	strb	r3, [r7, #11]
          break;
 801d586:	e03b      	b.n	801d600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d588:	687b      	ldr	r3, [r7, #4]
 801d58a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d58e:	695b      	ldr	r3, [r3, #20]
 801d590:	2b00      	cmp	r3, #0
 801d592:	d00b      	beq.n	801d5ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d594:	687b      	ldr	r3, [r7, #4]
 801d596:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d59a:	695b      	ldr	r3, [r3, #20]
 801d59c:	687a      	ldr	r2, [r7, #4]
 801d59e:	7c12      	ldrb	r2, [r2, #16]
 801d5a0:	f107 0108 	add.w	r1, r7, #8
 801d5a4:	4610      	mov	r0, r2
 801d5a6:	4798      	blx	r3
 801d5a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d5aa:	e029      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d5ac:	6839      	ldr	r1, [r7, #0]
 801d5ae:	6878      	ldr	r0, [r7, #4]
 801d5b0:	f000 fa2d 	bl	801da0e <USBD_CtlError>
            err++;
 801d5b4:	7afb      	ldrb	r3, [r7, #11]
 801d5b6:	3301      	adds	r3, #1
 801d5b8:	72fb      	strb	r3, [r7, #11]
          break;
 801d5ba:	e021      	b.n	801d600 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d5bc:	687b      	ldr	r3, [r7, #4]
 801d5be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5c2:	699b      	ldr	r3, [r3, #24]
 801d5c4:	2b00      	cmp	r3, #0
 801d5c6:	d00b      	beq.n	801d5e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d5c8:	687b      	ldr	r3, [r7, #4]
 801d5ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d5ce:	699b      	ldr	r3, [r3, #24]
 801d5d0:	687a      	ldr	r2, [r7, #4]
 801d5d2:	7c12      	ldrb	r2, [r2, #16]
 801d5d4:	f107 0108 	add.w	r1, r7, #8
 801d5d8:	4610      	mov	r0, r2
 801d5da:	4798      	blx	r3
 801d5dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d5de:	e00f      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d5e0:	6839      	ldr	r1, [r7, #0]
 801d5e2:	6878      	ldr	r0, [r7, #4]
 801d5e4:	f000 fa13 	bl	801da0e <USBD_CtlError>
            err++;
 801d5e8:	7afb      	ldrb	r3, [r7, #11]
 801d5ea:	3301      	adds	r3, #1
 801d5ec:	72fb      	strb	r3, [r7, #11]
          break;
 801d5ee:	e007      	b.n	801d600 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801d5f0:	6839      	ldr	r1, [r7, #0]
 801d5f2:	6878      	ldr	r0, [r7, #4]
 801d5f4:	f000 fa0b 	bl	801da0e <USBD_CtlError>
          err++;
 801d5f8:	7afb      	ldrb	r3, [r7, #11]
 801d5fa:	3301      	adds	r3, #1
 801d5fc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801d5fe:	e038      	b.n	801d672 <USBD_GetDescriptor+0x286>
 801d600:	e037      	b.n	801d672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	7c1b      	ldrb	r3, [r3, #16]
 801d606:	2b00      	cmp	r3, #0
 801d608:	d109      	bne.n	801d61e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d60a:	687b      	ldr	r3, [r7, #4]
 801d60c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d612:	f107 0208 	add.w	r2, r7, #8
 801d616:	4610      	mov	r0, r2
 801d618:	4798      	blx	r3
 801d61a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d61c:	e029      	b.n	801d672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d61e:	6839      	ldr	r1, [r7, #0]
 801d620:	6878      	ldr	r0, [r7, #4]
 801d622:	f000 f9f4 	bl	801da0e <USBD_CtlError>
        err++;
 801d626:	7afb      	ldrb	r3, [r7, #11]
 801d628:	3301      	adds	r3, #1
 801d62a:	72fb      	strb	r3, [r7, #11]
      break;
 801d62c:	e021      	b.n	801d672 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d62e:	687b      	ldr	r3, [r7, #4]
 801d630:	7c1b      	ldrb	r3, [r3, #16]
 801d632:	2b00      	cmp	r3, #0
 801d634:	d10d      	bne.n	801d652 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d63c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d63e:	f107 0208 	add.w	r2, r7, #8
 801d642:	4610      	mov	r0, r2
 801d644:	4798      	blx	r3
 801d646:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d648:	68fb      	ldr	r3, [r7, #12]
 801d64a:	3301      	adds	r3, #1
 801d64c:	2207      	movs	r2, #7
 801d64e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d650:	e00f      	b.n	801d672 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d652:	6839      	ldr	r1, [r7, #0]
 801d654:	6878      	ldr	r0, [r7, #4]
 801d656:	f000 f9da 	bl	801da0e <USBD_CtlError>
        err++;
 801d65a:	7afb      	ldrb	r3, [r7, #11]
 801d65c:	3301      	adds	r3, #1
 801d65e:	72fb      	strb	r3, [r7, #11]
      break;
 801d660:	e007      	b.n	801d672 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801d662:	6839      	ldr	r1, [r7, #0]
 801d664:	6878      	ldr	r0, [r7, #4]
 801d666:	f000 f9d2 	bl	801da0e <USBD_CtlError>
      err++;
 801d66a:	7afb      	ldrb	r3, [r7, #11]
 801d66c:	3301      	adds	r3, #1
 801d66e:	72fb      	strb	r3, [r7, #11]
      break;
 801d670:	bf00      	nop
  }

  if (err != 0U)
 801d672:	7afb      	ldrb	r3, [r7, #11]
 801d674:	2b00      	cmp	r3, #0
 801d676:	d11c      	bne.n	801d6b2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801d678:	893b      	ldrh	r3, [r7, #8]
 801d67a:	2b00      	cmp	r3, #0
 801d67c:	d011      	beq.n	801d6a2 <USBD_GetDescriptor+0x2b6>
 801d67e:	683b      	ldr	r3, [r7, #0]
 801d680:	88db      	ldrh	r3, [r3, #6]
 801d682:	2b00      	cmp	r3, #0
 801d684:	d00d      	beq.n	801d6a2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801d686:	683b      	ldr	r3, [r7, #0]
 801d688:	88da      	ldrh	r2, [r3, #6]
 801d68a:	893b      	ldrh	r3, [r7, #8]
 801d68c:	4293      	cmp	r3, r2
 801d68e:	bf28      	it	cs
 801d690:	4613      	movcs	r3, r2
 801d692:	b29b      	uxth	r3, r3
 801d694:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d696:	893b      	ldrh	r3, [r7, #8]
 801d698:	461a      	mov	r2, r3
 801d69a:	68f9      	ldr	r1, [r7, #12]
 801d69c:	6878      	ldr	r0, [r7, #4]
 801d69e:	f000 fa21 	bl	801dae4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d6a2:	683b      	ldr	r3, [r7, #0]
 801d6a4:	88db      	ldrh	r3, [r3, #6]
 801d6a6:	2b00      	cmp	r3, #0
 801d6a8:	d104      	bne.n	801d6b4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d6aa:	6878      	ldr	r0, [r7, #4]
 801d6ac:	f000 fa78 	bl	801dba0 <USBD_CtlSendStatus>
 801d6b0:	e000      	b.n	801d6b4 <USBD_GetDescriptor+0x2c8>
    return;
 801d6b2:	bf00      	nop
    }
  }
}
 801d6b4:	3710      	adds	r7, #16
 801d6b6:	46bd      	mov	sp, r7
 801d6b8:	bd80      	pop	{r7, pc}
 801d6ba:	bf00      	nop

0801d6bc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d6bc:	b580      	push	{r7, lr}
 801d6be:	b084      	sub	sp, #16
 801d6c0:	af00      	add	r7, sp, #0
 801d6c2:	6078      	str	r0, [r7, #4]
 801d6c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d6c6:	683b      	ldr	r3, [r7, #0]
 801d6c8:	889b      	ldrh	r3, [r3, #4]
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	d130      	bne.n	801d730 <USBD_SetAddress+0x74>
 801d6ce:	683b      	ldr	r3, [r7, #0]
 801d6d0:	88db      	ldrh	r3, [r3, #6]
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d12c      	bne.n	801d730 <USBD_SetAddress+0x74>
 801d6d6:	683b      	ldr	r3, [r7, #0]
 801d6d8:	885b      	ldrh	r3, [r3, #2]
 801d6da:	2b7f      	cmp	r3, #127	; 0x7f
 801d6dc:	d828      	bhi.n	801d730 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d6de:	683b      	ldr	r3, [r7, #0]
 801d6e0:	885b      	ldrh	r3, [r3, #2]
 801d6e2:	b2db      	uxtb	r3, r3
 801d6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d6e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d6f0:	2b03      	cmp	r3, #3
 801d6f2:	d104      	bne.n	801d6fe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d6f4:	6839      	ldr	r1, [r7, #0]
 801d6f6:	6878      	ldr	r0, [r7, #4]
 801d6f8:	f000 f989 	bl	801da0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d6fc:	e01c      	b.n	801d738 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d6fe:	687b      	ldr	r3, [r7, #4]
 801d700:	7bfa      	ldrb	r2, [r7, #15]
 801d702:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d706:	7bfb      	ldrb	r3, [r7, #15]
 801d708:	4619      	mov	r1, r3
 801d70a:	6878      	ldr	r0, [r7, #4]
 801d70c:	f000 fef8 	bl	801e500 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d710:	6878      	ldr	r0, [r7, #4]
 801d712:	f000 fa45 	bl	801dba0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d716:	7bfb      	ldrb	r3, [r7, #15]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	d004      	beq.n	801d726 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d71c:	687b      	ldr	r3, [r7, #4]
 801d71e:	2202      	movs	r2, #2
 801d720:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d724:	e008      	b.n	801d738 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d726:	687b      	ldr	r3, [r7, #4]
 801d728:	2201      	movs	r2, #1
 801d72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d72e:	e003      	b.n	801d738 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d730:	6839      	ldr	r1, [r7, #0]
 801d732:	6878      	ldr	r0, [r7, #4]
 801d734:	f000 f96b 	bl	801da0e <USBD_CtlError>
  }
}
 801d738:	bf00      	nop
 801d73a:	3710      	adds	r7, #16
 801d73c:	46bd      	mov	sp, r7
 801d73e:	bd80      	pop	{r7, pc}

0801d740 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d740:	b580      	push	{r7, lr}
 801d742:	b082      	sub	sp, #8
 801d744:	af00      	add	r7, sp, #0
 801d746:	6078      	str	r0, [r7, #4]
 801d748:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d74a:	683b      	ldr	r3, [r7, #0]
 801d74c:	885b      	ldrh	r3, [r3, #2]
 801d74e:	b2da      	uxtb	r2, r3
 801d750:	4b41      	ldr	r3, [pc, #260]	; (801d858 <USBD_SetConfig+0x118>)
 801d752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d754:	4b40      	ldr	r3, [pc, #256]	; (801d858 <USBD_SetConfig+0x118>)
 801d756:	781b      	ldrb	r3, [r3, #0]
 801d758:	2b01      	cmp	r3, #1
 801d75a:	d904      	bls.n	801d766 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d75c:	6839      	ldr	r1, [r7, #0]
 801d75e:	6878      	ldr	r0, [r7, #4]
 801d760:	f000 f955 	bl	801da0e <USBD_CtlError>
 801d764:	e075      	b.n	801d852 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d766:	687b      	ldr	r3, [r7, #4]
 801d768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d76c:	2b02      	cmp	r3, #2
 801d76e:	d002      	beq.n	801d776 <USBD_SetConfig+0x36>
 801d770:	2b03      	cmp	r3, #3
 801d772:	d023      	beq.n	801d7bc <USBD_SetConfig+0x7c>
 801d774:	e062      	b.n	801d83c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d776:	4b38      	ldr	r3, [pc, #224]	; (801d858 <USBD_SetConfig+0x118>)
 801d778:	781b      	ldrb	r3, [r3, #0]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	d01a      	beq.n	801d7b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d77e:	4b36      	ldr	r3, [pc, #216]	; (801d858 <USBD_SetConfig+0x118>)
 801d780:	781b      	ldrb	r3, [r3, #0]
 801d782:	461a      	mov	r2, r3
 801d784:	687b      	ldr	r3, [r7, #4]
 801d786:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d788:	687b      	ldr	r3, [r7, #4]
 801d78a:	2203      	movs	r2, #3
 801d78c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d790:	4b31      	ldr	r3, [pc, #196]	; (801d858 <USBD_SetConfig+0x118>)
 801d792:	781b      	ldrb	r3, [r3, #0]
 801d794:	4619      	mov	r1, r3
 801d796:	6878      	ldr	r0, [r7, #4]
 801d798:	f7ff f9b4 	bl	801cb04 <USBD_SetClassConfig>
 801d79c:	4603      	mov	r3, r0
 801d79e:	2b02      	cmp	r3, #2
 801d7a0:	d104      	bne.n	801d7ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d7a2:	6839      	ldr	r1, [r7, #0]
 801d7a4:	6878      	ldr	r0, [r7, #4]
 801d7a6:	f000 f932 	bl	801da0e <USBD_CtlError>
            return;
 801d7aa:	e052      	b.n	801d852 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d7ac:	6878      	ldr	r0, [r7, #4]
 801d7ae:	f000 f9f7 	bl	801dba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d7b2:	e04e      	b.n	801d852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d7b4:	6878      	ldr	r0, [r7, #4]
 801d7b6:	f000 f9f3 	bl	801dba0 <USBD_CtlSendStatus>
        break;
 801d7ba:	e04a      	b.n	801d852 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d7bc:	4b26      	ldr	r3, [pc, #152]	; (801d858 <USBD_SetConfig+0x118>)
 801d7be:	781b      	ldrb	r3, [r3, #0]
 801d7c0:	2b00      	cmp	r3, #0
 801d7c2:	d112      	bne.n	801d7ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d7c4:	687b      	ldr	r3, [r7, #4]
 801d7c6:	2202      	movs	r2, #2
 801d7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d7cc:	4b22      	ldr	r3, [pc, #136]	; (801d858 <USBD_SetConfig+0x118>)
 801d7ce:	781b      	ldrb	r3, [r3, #0]
 801d7d0:	461a      	mov	r2, r3
 801d7d2:	687b      	ldr	r3, [r7, #4]
 801d7d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d7d6:	4b20      	ldr	r3, [pc, #128]	; (801d858 <USBD_SetConfig+0x118>)
 801d7d8:	781b      	ldrb	r3, [r3, #0]
 801d7da:	4619      	mov	r1, r3
 801d7dc:	6878      	ldr	r0, [r7, #4]
 801d7de:	f7ff f9b0 	bl	801cb42 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d7e2:	6878      	ldr	r0, [r7, #4]
 801d7e4:	f000 f9dc 	bl	801dba0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d7e8:	e033      	b.n	801d852 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d7ea:	4b1b      	ldr	r3, [pc, #108]	; (801d858 <USBD_SetConfig+0x118>)
 801d7ec:	781b      	ldrb	r3, [r3, #0]
 801d7ee:	461a      	mov	r2, r3
 801d7f0:	687b      	ldr	r3, [r7, #4]
 801d7f2:	685b      	ldr	r3, [r3, #4]
 801d7f4:	429a      	cmp	r2, r3
 801d7f6:	d01d      	beq.n	801d834 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d7f8:	687b      	ldr	r3, [r7, #4]
 801d7fa:	685b      	ldr	r3, [r3, #4]
 801d7fc:	b2db      	uxtb	r3, r3
 801d7fe:	4619      	mov	r1, r3
 801d800:	6878      	ldr	r0, [r7, #4]
 801d802:	f7ff f99e 	bl	801cb42 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d806:	4b14      	ldr	r3, [pc, #80]	; (801d858 <USBD_SetConfig+0x118>)
 801d808:	781b      	ldrb	r3, [r3, #0]
 801d80a:	461a      	mov	r2, r3
 801d80c:	687b      	ldr	r3, [r7, #4]
 801d80e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d810:	4b11      	ldr	r3, [pc, #68]	; (801d858 <USBD_SetConfig+0x118>)
 801d812:	781b      	ldrb	r3, [r3, #0]
 801d814:	4619      	mov	r1, r3
 801d816:	6878      	ldr	r0, [r7, #4]
 801d818:	f7ff f974 	bl	801cb04 <USBD_SetClassConfig>
 801d81c:	4603      	mov	r3, r0
 801d81e:	2b02      	cmp	r3, #2
 801d820:	d104      	bne.n	801d82c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d822:	6839      	ldr	r1, [r7, #0]
 801d824:	6878      	ldr	r0, [r7, #4]
 801d826:	f000 f8f2 	bl	801da0e <USBD_CtlError>
            return;
 801d82a:	e012      	b.n	801d852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d82c:	6878      	ldr	r0, [r7, #4]
 801d82e:	f000 f9b7 	bl	801dba0 <USBD_CtlSendStatus>
        break;
 801d832:	e00e      	b.n	801d852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d834:	6878      	ldr	r0, [r7, #4]
 801d836:	f000 f9b3 	bl	801dba0 <USBD_CtlSendStatus>
        break;
 801d83a:	e00a      	b.n	801d852 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d83c:	6839      	ldr	r1, [r7, #0]
 801d83e:	6878      	ldr	r0, [r7, #4]
 801d840:	f000 f8e5 	bl	801da0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d844:	4b04      	ldr	r3, [pc, #16]	; (801d858 <USBD_SetConfig+0x118>)
 801d846:	781b      	ldrb	r3, [r3, #0]
 801d848:	4619      	mov	r1, r3
 801d84a:	6878      	ldr	r0, [r7, #4]
 801d84c:	f7ff f979 	bl	801cb42 <USBD_ClrClassConfig>
        break;
 801d850:	bf00      	nop
    }
  }
}
 801d852:	3708      	adds	r7, #8
 801d854:	46bd      	mov	sp, r7
 801d856:	bd80      	pop	{r7, pc}
 801d858:	24000314 	.word	0x24000314

0801d85c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d85c:	b580      	push	{r7, lr}
 801d85e:	b082      	sub	sp, #8
 801d860:	af00      	add	r7, sp, #0
 801d862:	6078      	str	r0, [r7, #4]
 801d864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d866:	683b      	ldr	r3, [r7, #0]
 801d868:	88db      	ldrh	r3, [r3, #6]
 801d86a:	2b01      	cmp	r3, #1
 801d86c:	d004      	beq.n	801d878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d86e:	6839      	ldr	r1, [r7, #0]
 801d870:	6878      	ldr	r0, [r7, #4]
 801d872:	f000 f8cc 	bl	801da0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d876:	e021      	b.n	801d8bc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d878:	687b      	ldr	r3, [r7, #4]
 801d87a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d87e:	2b01      	cmp	r3, #1
 801d880:	db17      	blt.n	801d8b2 <USBD_GetConfig+0x56>
 801d882:	2b02      	cmp	r3, #2
 801d884:	dd02      	ble.n	801d88c <USBD_GetConfig+0x30>
 801d886:	2b03      	cmp	r3, #3
 801d888:	d00b      	beq.n	801d8a2 <USBD_GetConfig+0x46>
 801d88a:	e012      	b.n	801d8b2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d88c:	687b      	ldr	r3, [r7, #4]
 801d88e:	2200      	movs	r2, #0
 801d890:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d892:	687b      	ldr	r3, [r7, #4]
 801d894:	3308      	adds	r3, #8
 801d896:	2201      	movs	r2, #1
 801d898:	4619      	mov	r1, r3
 801d89a:	6878      	ldr	r0, [r7, #4]
 801d89c:	f000 f922 	bl	801dae4 <USBD_CtlSendData>
        break;
 801d8a0:	e00c      	b.n	801d8bc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	3304      	adds	r3, #4
 801d8a6:	2201      	movs	r2, #1
 801d8a8:	4619      	mov	r1, r3
 801d8aa:	6878      	ldr	r0, [r7, #4]
 801d8ac:	f000 f91a 	bl	801dae4 <USBD_CtlSendData>
        break;
 801d8b0:	e004      	b.n	801d8bc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d8b2:	6839      	ldr	r1, [r7, #0]
 801d8b4:	6878      	ldr	r0, [r7, #4]
 801d8b6:	f000 f8aa 	bl	801da0e <USBD_CtlError>
        break;
 801d8ba:	bf00      	nop
}
 801d8bc:	bf00      	nop
 801d8be:	3708      	adds	r7, #8
 801d8c0:	46bd      	mov	sp, r7
 801d8c2:	bd80      	pop	{r7, pc}

0801d8c4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d8c4:	b580      	push	{r7, lr}
 801d8c6:	b082      	sub	sp, #8
 801d8c8:	af00      	add	r7, sp, #0
 801d8ca:	6078      	str	r0, [r7, #4]
 801d8cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d8ce:	687b      	ldr	r3, [r7, #4]
 801d8d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d8d4:	3b01      	subs	r3, #1
 801d8d6:	2b02      	cmp	r3, #2
 801d8d8:	d81e      	bhi.n	801d918 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d8da:	683b      	ldr	r3, [r7, #0]
 801d8dc:	88db      	ldrh	r3, [r3, #6]
 801d8de:	2b02      	cmp	r3, #2
 801d8e0:	d004      	beq.n	801d8ec <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d8e2:	6839      	ldr	r1, [r7, #0]
 801d8e4:	6878      	ldr	r0, [r7, #4]
 801d8e6:	f000 f892 	bl	801da0e <USBD_CtlError>
        break;
 801d8ea:	e01a      	b.n	801d922 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d8ec:	687b      	ldr	r3, [r7, #4]
 801d8ee:	2201      	movs	r2, #1
 801d8f0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d8f2:	687b      	ldr	r3, [r7, #4]
 801d8f4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d8f8:	2b00      	cmp	r3, #0
 801d8fa:	d005      	beq.n	801d908 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d8fc:	687b      	ldr	r3, [r7, #4]
 801d8fe:	68db      	ldr	r3, [r3, #12]
 801d900:	f043 0202 	orr.w	r2, r3, #2
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d908:	687b      	ldr	r3, [r7, #4]
 801d90a:	330c      	adds	r3, #12
 801d90c:	2202      	movs	r2, #2
 801d90e:	4619      	mov	r1, r3
 801d910:	6878      	ldr	r0, [r7, #4]
 801d912:	f000 f8e7 	bl	801dae4 <USBD_CtlSendData>
      break;
 801d916:	e004      	b.n	801d922 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d918:	6839      	ldr	r1, [r7, #0]
 801d91a:	6878      	ldr	r0, [r7, #4]
 801d91c:	f000 f877 	bl	801da0e <USBD_CtlError>
      break;
 801d920:	bf00      	nop
  }
}
 801d922:	bf00      	nop
 801d924:	3708      	adds	r7, #8
 801d926:	46bd      	mov	sp, r7
 801d928:	bd80      	pop	{r7, pc}

0801d92a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d92a:	b580      	push	{r7, lr}
 801d92c:	b082      	sub	sp, #8
 801d92e:	af00      	add	r7, sp, #0
 801d930:	6078      	str	r0, [r7, #4]
 801d932:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d934:	683b      	ldr	r3, [r7, #0]
 801d936:	885b      	ldrh	r3, [r3, #2]
 801d938:	2b01      	cmp	r3, #1
 801d93a:	d106      	bne.n	801d94a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d93c:	687b      	ldr	r3, [r7, #4]
 801d93e:	2201      	movs	r2, #1
 801d940:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d944:	6878      	ldr	r0, [r7, #4]
 801d946:	f000 f92b 	bl	801dba0 <USBD_CtlSendStatus>
  }
}
 801d94a:	bf00      	nop
 801d94c:	3708      	adds	r7, #8
 801d94e:	46bd      	mov	sp, r7
 801d950:	bd80      	pop	{r7, pc}

0801d952 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d952:	b580      	push	{r7, lr}
 801d954:	b082      	sub	sp, #8
 801d956:	af00      	add	r7, sp, #0
 801d958:	6078      	str	r0, [r7, #4]
 801d95a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d95c:	687b      	ldr	r3, [r7, #4]
 801d95e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d962:	3b01      	subs	r3, #1
 801d964:	2b02      	cmp	r3, #2
 801d966:	d80b      	bhi.n	801d980 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d968:	683b      	ldr	r3, [r7, #0]
 801d96a:	885b      	ldrh	r3, [r3, #2]
 801d96c:	2b01      	cmp	r3, #1
 801d96e:	d10c      	bne.n	801d98a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d970:	687b      	ldr	r3, [r7, #4]
 801d972:	2200      	movs	r2, #0
 801d974:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d978:	6878      	ldr	r0, [r7, #4]
 801d97a:	f000 f911 	bl	801dba0 <USBD_CtlSendStatus>
      }
      break;
 801d97e:	e004      	b.n	801d98a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d980:	6839      	ldr	r1, [r7, #0]
 801d982:	6878      	ldr	r0, [r7, #4]
 801d984:	f000 f843 	bl	801da0e <USBD_CtlError>
      break;
 801d988:	e000      	b.n	801d98c <USBD_ClrFeature+0x3a>
      break;
 801d98a:	bf00      	nop
  }
}
 801d98c:	bf00      	nop
 801d98e:	3708      	adds	r7, #8
 801d990:	46bd      	mov	sp, r7
 801d992:	bd80      	pop	{r7, pc}

0801d994 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d994:	b480      	push	{r7}
 801d996:	b083      	sub	sp, #12
 801d998:	af00      	add	r7, sp, #0
 801d99a:	6078      	str	r0, [r7, #4]
 801d99c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d99e:	683b      	ldr	r3, [r7, #0]
 801d9a0:	781a      	ldrb	r2, [r3, #0]
 801d9a2:	687b      	ldr	r3, [r7, #4]
 801d9a4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d9a6:	683b      	ldr	r3, [r7, #0]
 801d9a8:	785a      	ldrb	r2, [r3, #1]
 801d9aa:	687b      	ldr	r3, [r7, #4]
 801d9ac:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d9ae:	683b      	ldr	r3, [r7, #0]
 801d9b0:	3302      	adds	r3, #2
 801d9b2:	781b      	ldrb	r3, [r3, #0]
 801d9b4:	b29a      	uxth	r2, r3
 801d9b6:	683b      	ldr	r3, [r7, #0]
 801d9b8:	3303      	adds	r3, #3
 801d9ba:	781b      	ldrb	r3, [r3, #0]
 801d9bc:	b29b      	uxth	r3, r3
 801d9be:	021b      	lsls	r3, r3, #8
 801d9c0:	b29b      	uxth	r3, r3
 801d9c2:	4413      	add	r3, r2
 801d9c4:	b29a      	uxth	r2, r3
 801d9c6:	687b      	ldr	r3, [r7, #4]
 801d9c8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d9ca:	683b      	ldr	r3, [r7, #0]
 801d9cc:	3304      	adds	r3, #4
 801d9ce:	781b      	ldrb	r3, [r3, #0]
 801d9d0:	b29a      	uxth	r2, r3
 801d9d2:	683b      	ldr	r3, [r7, #0]
 801d9d4:	3305      	adds	r3, #5
 801d9d6:	781b      	ldrb	r3, [r3, #0]
 801d9d8:	b29b      	uxth	r3, r3
 801d9da:	021b      	lsls	r3, r3, #8
 801d9dc:	b29b      	uxth	r3, r3
 801d9de:	4413      	add	r3, r2
 801d9e0:	b29a      	uxth	r2, r3
 801d9e2:	687b      	ldr	r3, [r7, #4]
 801d9e4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d9e6:	683b      	ldr	r3, [r7, #0]
 801d9e8:	3306      	adds	r3, #6
 801d9ea:	781b      	ldrb	r3, [r3, #0]
 801d9ec:	b29a      	uxth	r2, r3
 801d9ee:	683b      	ldr	r3, [r7, #0]
 801d9f0:	3307      	adds	r3, #7
 801d9f2:	781b      	ldrb	r3, [r3, #0]
 801d9f4:	b29b      	uxth	r3, r3
 801d9f6:	021b      	lsls	r3, r3, #8
 801d9f8:	b29b      	uxth	r3, r3
 801d9fa:	4413      	add	r3, r2
 801d9fc:	b29a      	uxth	r2, r3
 801d9fe:	687b      	ldr	r3, [r7, #4]
 801da00:	80da      	strh	r2, [r3, #6]

}
 801da02:	bf00      	nop
 801da04:	370c      	adds	r7, #12
 801da06:	46bd      	mov	sp, r7
 801da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da0c:	4770      	bx	lr

0801da0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801da0e:	b580      	push	{r7, lr}
 801da10:	b082      	sub	sp, #8
 801da12:	af00      	add	r7, sp, #0
 801da14:	6078      	str	r0, [r7, #4]
 801da16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801da18:	2180      	movs	r1, #128	; 0x80
 801da1a:	6878      	ldr	r0, [r7, #4]
 801da1c:	f000 fd06 	bl	801e42c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801da20:	2100      	movs	r1, #0
 801da22:	6878      	ldr	r0, [r7, #4]
 801da24:	f000 fd02 	bl	801e42c <USBD_LL_StallEP>
}
 801da28:	bf00      	nop
 801da2a:	3708      	adds	r7, #8
 801da2c:	46bd      	mov	sp, r7
 801da2e:	bd80      	pop	{r7, pc}

0801da30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801da30:	b580      	push	{r7, lr}
 801da32:	b086      	sub	sp, #24
 801da34:	af00      	add	r7, sp, #0
 801da36:	60f8      	str	r0, [r7, #12]
 801da38:	60b9      	str	r1, [r7, #8]
 801da3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801da3c:	2300      	movs	r3, #0
 801da3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801da40:	68fb      	ldr	r3, [r7, #12]
 801da42:	2b00      	cmp	r3, #0
 801da44:	d032      	beq.n	801daac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801da46:	68f8      	ldr	r0, [r7, #12]
 801da48:	f000 f834 	bl	801dab4 <USBD_GetLen>
 801da4c:	4603      	mov	r3, r0
 801da4e:	3301      	adds	r3, #1
 801da50:	b29b      	uxth	r3, r3
 801da52:	005b      	lsls	r3, r3, #1
 801da54:	b29a      	uxth	r2, r3
 801da56:	687b      	ldr	r3, [r7, #4]
 801da58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801da5a:	7dfb      	ldrb	r3, [r7, #23]
 801da5c:	1c5a      	adds	r2, r3, #1
 801da5e:	75fa      	strb	r2, [r7, #23]
 801da60:	461a      	mov	r2, r3
 801da62:	68bb      	ldr	r3, [r7, #8]
 801da64:	4413      	add	r3, r2
 801da66:	687a      	ldr	r2, [r7, #4]
 801da68:	7812      	ldrb	r2, [r2, #0]
 801da6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801da6c:	7dfb      	ldrb	r3, [r7, #23]
 801da6e:	1c5a      	adds	r2, r3, #1
 801da70:	75fa      	strb	r2, [r7, #23]
 801da72:	461a      	mov	r2, r3
 801da74:	68bb      	ldr	r3, [r7, #8]
 801da76:	4413      	add	r3, r2
 801da78:	2203      	movs	r2, #3
 801da7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801da7c:	e012      	b.n	801daa4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801da7e:	68fb      	ldr	r3, [r7, #12]
 801da80:	1c5a      	adds	r2, r3, #1
 801da82:	60fa      	str	r2, [r7, #12]
 801da84:	7dfa      	ldrb	r2, [r7, #23]
 801da86:	1c51      	adds	r1, r2, #1
 801da88:	75f9      	strb	r1, [r7, #23]
 801da8a:	4611      	mov	r1, r2
 801da8c:	68ba      	ldr	r2, [r7, #8]
 801da8e:	440a      	add	r2, r1
 801da90:	781b      	ldrb	r3, [r3, #0]
 801da92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801da94:	7dfb      	ldrb	r3, [r7, #23]
 801da96:	1c5a      	adds	r2, r3, #1
 801da98:	75fa      	strb	r2, [r7, #23]
 801da9a:	461a      	mov	r2, r3
 801da9c:	68bb      	ldr	r3, [r7, #8]
 801da9e:	4413      	add	r3, r2
 801daa0:	2200      	movs	r2, #0
 801daa2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801daa4:	68fb      	ldr	r3, [r7, #12]
 801daa6:	781b      	ldrb	r3, [r3, #0]
 801daa8:	2b00      	cmp	r3, #0
 801daaa:	d1e8      	bne.n	801da7e <USBD_GetString+0x4e>
    }
  }
}
 801daac:	bf00      	nop
 801daae:	3718      	adds	r7, #24
 801dab0:	46bd      	mov	sp, r7
 801dab2:	bd80      	pop	{r7, pc}

0801dab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801dab4:	b480      	push	{r7}
 801dab6:	b085      	sub	sp, #20
 801dab8:	af00      	add	r7, sp, #0
 801daba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801dabc:	2300      	movs	r3, #0
 801dabe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801dac0:	e005      	b.n	801dace <USBD_GetLen+0x1a>
  {
    len++;
 801dac2:	7bfb      	ldrb	r3, [r7, #15]
 801dac4:	3301      	adds	r3, #1
 801dac6:	73fb      	strb	r3, [r7, #15]
    buf++;
 801dac8:	687b      	ldr	r3, [r7, #4]
 801daca:	3301      	adds	r3, #1
 801dacc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801dace:	687b      	ldr	r3, [r7, #4]
 801dad0:	781b      	ldrb	r3, [r3, #0]
 801dad2:	2b00      	cmp	r3, #0
 801dad4:	d1f5      	bne.n	801dac2 <USBD_GetLen+0xe>
  }

  return len;
 801dad6:	7bfb      	ldrb	r3, [r7, #15]
}
 801dad8:	4618      	mov	r0, r3
 801dada:	3714      	adds	r7, #20
 801dadc:	46bd      	mov	sp, r7
 801dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dae2:	4770      	bx	lr

0801dae4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801dae4:	b580      	push	{r7, lr}
 801dae6:	b084      	sub	sp, #16
 801dae8:	af00      	add	r7, sp, #0
 801daea:	60f8      	str	r0, [r7, #12]
 801daec:	60b9      	str	r1, [r7, #8]
 801daee:	4613      	mov	r3, r2
 801daf0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801daf2:	68fb      	ldr	r3, [r7, #12]
 801daf4:	2202      	movs	r2, #2
 801daf6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801dafa:	88fa      	ldrh	r2, [r7, #6]
 801dafc:	68fb      	ldr	r3, [r7, #12]
 801dafe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801db00:	88fa      	ldrh	r2, [r7, #6]
 801db02:	68fb      	ldr	r3, [r7, #12]
 801db04:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801db06:	88fb      	ldrh	r3, [r7, #6]
 801db08:	68ba      	ldr	r2, [r7, #8]
 801db0a:	2100      	movs	r1, #0
 801db0c:	68f8      	ldr	r0, [r7, #12]
 801db0e:	f000 fd16 	bl	801e53e <USBD_LL_Transmit>

  return USBD_OK;
 801db12:	2300      	movs	r3, #0
}
 801db14:	4618      	mov	r0, r3
 801db16:	3710      	adds	r7, #16
 801db18:	46bd      	mov	sp, r7
 801db1a:	bd80      	pop	{r7, pc}

0801db1c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801db1c:	b580      	push	{r7, lr}
 801db1e:	b084      	sub	sp, #16
 801db20:	af00      	add	r7, sp, #0
 801db22:	60f8      	str	r0, [r7, #12]
 801db24:	60b9      	str	r1, [r7, #8]
 801db26:	4613      	mov	r3, r2
 801db28:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801db2a:	88fb      	ldrh	r3, [r7, #6]
 801db2c:	68ba      	ldr	r2, [r7, #8]
 801db2e:	2100      	movs	r1, #0
 801db30:	68f8      	ldr	r0, [r7, #12]
 801db32:	f000 fd04 	bl	801e53e <USBD_LL_Transmit>

  return USBD_OK;
 801db36:	2300      	movs	r3, #0
}
 801db38:	4618      	mov	r0, r3
 801db3a:	3710      	adds	r7, #16
 801db3c:	46bd      	mov	sp, r7
 801db3e:	bd80      	pop	{r7, pc}

0801db40 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801db40:	b580      	push	{r7, lr}
 801db42:	b084      	sub	sp, #16
 801db44:	af00      	add	r7, sp, #0
 801db46:	60f8      	str	r0, [r7, #12]
 801db48:	60b9      	str	r1, [r7, #8]
 801db4a:	4613      	mov	r3, r2
 801db4c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	2203      	movs	r2, #3
 801db52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801db56:	88fa      	ldrh	r2, [r7, #6]
 801db58:	68fb      	ldr	r3, [r7, #12]
 801db5a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801db5e:	88fa      	ldrh	r2, [r7, #6]
 801db60:	68fb      	ldr	r3, [r7, #12]
 801db62:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801db66:	88fb      	ldrh	r3, [r7, #6]
 801db68:	68ba      	ldr	r2, [r7, #8]
 801db6a:	2100      	movs	r1, #0
 801db6c:	68f8      	ldr	r0, [r7, #12]
 801db6e:	f000 fd09 	bl	801e584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801db72:	2300      	movs	r3, #0
}
 801db74:	4618      	mov	r0, r3
 801db76:	3710      	adds	r7, #16
 801db78:	46bd      	mov	sp, r7
 801db7a:	bd80      	pop	{r7, pc}

0801db7c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801db7c:	b580      	push	{r7, lr}
 801db7e:	b084      	sub	sp, #16
 801db80:	af00      	add	r7, sp, #0
 801db82:	60f8      	str	r0, [r7, #12]
 801db84:	60b9      	str	r1, [r7, #8]
 801db86:	4613      	mov	r3, r2
 801db88:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801db8a:	88fb      	ldrh	r3, [r7, #6]
 801db8c:	68ba      	ldr	r2, [r7, #8]
 801db8e:	2100      	movs	r1, #0
 801db90:	68f8      	ldr	r0, [r7, #12]
 801db92:	f000 fcf7 	bl	801e584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801db96:	2300      	movs	r3, #0
}
 801db98:	4618      	mov	r0, r3
 801db9a:	3710      	adds	r7, #16
 801db9c:	46bd      	mov	sp, r7
 801db9e:	bd80      	pop	{r7, pc}

0801dba0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b082      	sub	sp, #8
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	2204      	movs	r2, #4
 801dbac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801dbb0:	2300      	movs	r3, #0
 801dbb2:	2200      	movs	r2, #0
 801dbb4:	2100      	movs	r1, #0
 801dbb6:	6878      	ldr	r0, [r7, #4]
 801dbb8:	f000 fcc1 	bl	801e53e <USBD_LL_Transmit>

  return USBD_OK;
 801dbbc:	2300      	movs	r3, #0
}
 801dbbe:	4618      	mov	r0, r3
 801dbc0:	3708      	adds	r7, #8
 801dbc2:	46bd      	mov	sp, r7
 801dbc4:	bd80      	pop	{r7, pc}

0801dbc6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801dbc6:	b580      	push	{r7, lr}
 801dbc8:	b082      	sub	sp, #8
 801dbca:	af00      	add	r7, sp, #0
 801dbcc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801dbce:	687b      	ldr	r3, [r7, #4]
 801dbd0:	2205      	movs	r2, #5
 801dbd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801dbd6:	2300      	movs	r3, #0
 801dbd8:	2200      	movs	r2, #0
 801dbda:	2100      	movs	r1, #0
 801dbdc:	6878      	ldr	r0, [r7, #4]
 801dbde:	f000 fcd1 	bl	801e584 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801dbe2:	2300      	movs	r3, #0
}
 801dbe4:	4618      	mov	r0, r3
 801dbe6:	3708      	adds	r7, #8
 801dbe8:	46bd      	mov	sp, r7
 801dbea:	bd80      	pop	{r7, pc}

0801dbec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801dbec:	b580      	push	{r7, lr}
 801dbee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801dbf0:	2200      	movs	r2, #0
 801dbf2:	4913      	ldr	r1, [pc, #76]	; (801dc40 <MX_USB_DEVICE_Init+0x54>)
 801dbf4:	4813      	ldr	r0, [pc, #76]	; (801dc44 <MX_USB_DEVICE_Init+0x58>)
 801dbf6:	f7fe ff29 	bl	801ca4c <USBD_Init>
 801dbfa:	4603      	mov	r3, r0
 801dbfc:	2b00      	cmp	r3, #0
 801dbfe:	d001      	beq.n	801dc04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801dc00:	f7f4 fd68 	bl	80126d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801dc04:	4910      	ldr	r1, [pc, #64]	; (801dc48 <MX_USB_DEVICE_Init+0x5c>)
 801dc06:	480f      	ldr	r0, [pc, #60]	; (801dc44 <MX_USB_DEVICE_Init+0x58>)
 801dc08:	f7fe ff4b 	bl	801caa2 <USBD_RegisterClass>
 801dc0c:	4603      	mov	r3, r0
 801dc0e:	2b00      	cmp	r3, #0
 801dc10:	d001      	beq.n	801dc16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801dc12:	f7f4 fd5f 	bl	80126d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801dc16:	490d      	ldr	r1, [pc, #52]	; (801dc4c <MX_USB_DEVICE_Init+0x60>)
 801dc18:	480a      	ldr	r0, [pc, #40]	; (801dc44 <MX_USB_DEVICE_Init+0x58>)
 801dc1a:	f7fe fe79 	bl	801c910 <USBD_CDC_RegisterInterface>
 801dc1e:	4603      	mov	r3, r0
 801dc20:	2b00      	cmp	r3, #0
 801dc22:	d001      	beq.n	801dc28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801dc24:	f7f4 fd56 	bl	80126d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801dc28:	4806      	ldr	r0, [pc, #24]	; (801dc44 <MX_USB_DEVICE_Init+0x58>)
 801dc2a:	f7fe ff54 	bl	801cad6 <USBD_Start>
 801dc2e:	4603      	mov	r3, r0
 801dc30:	2b00      	cmp	r3, #0
 801dc32:	d001      	beq.n	801dc38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801dc34:	f7f4 fd4e 	bl	80126d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801dc38:	f7f7 f8ca 	bl	8014dd0 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801dc3c:	bf00      	nop
 801dc3e:	bd80      	pop	{r7, pc}
 801dc40:	2400013c 	.word	0x2400013c
 801dc44:	240006e4 	.word	0x240006e4
 801dc48:	24000028 	.word	0x24000028
 801dc4c:	2400012c 	.word	0x2400012c

0801dc50 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801dc50:	b580      	push	{r7, lr}
 801dc52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801dc54:	2200      	movs	r2, #0
 801dc56:	4905      	ldr	r1, [pc, #20]	; (801dc6c <CDC_Init_FS+0x1c>)
 801dc58:	4805      	ldr	r0, [pc, #20]	; (801dc70 <CDC_Init_FS+0x20>)
 801dc5a:	f7fe fe70 	bl	801c93e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801dc5e:	4905      	ldr	r1, [pc, #20]	; (801dc74 <CDC_Init_FS+0x24>)
 801dc60:	4803      	ldr	r0, [pc, #12]	; (801dc70 <CDC_Init_FS+0x20>)
 801dc62:	f7fe fe86 	bl	801c972 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801dc66:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801dc68:	4618      	mov	r0, r3
 801dc6a:	bd80      	pop	{r7, pc}
 801dc6c:	240011a8 	.word	0x240011a8
 801dc70:	240006e4 	.word	0x240006e4
 801dc74:	240009a8 	.word	0x240009a8

0801dc78 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801dc78:	b480      	push	{r7}
 801dc7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801dc7c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801dc7e:	4618      	mov	r0, r3
 801dc80:	46bd      	mov	sp, r7
 801dc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc86:	4770      	bx	lr

0801dc88 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801dc88:	b480      	push	{r7}
 801dc8a:	b085      	sub	sp, #20
 801dc8c:	af00      	add	r7, sp, #0
 801dc8e:	4603      	mov	r3, r0
 801dc90:	6039      	str	r1, [r7, #0]
 801dc92:	71fb      	strb	r3, [r7, #7]
 801dc94:	4613      	mov	r3, r2
 801dc96:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801dc98:	f107 0308 	add.w	r3, r7, #8
 801dc9c:	2200      	movs	r2, #0
 801dc9e:	601a      	str	r2, [r3, #0]
 801dca0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 801dca4:	79fb      	ldrb	r3, [r7, #7]
 801dca6:	2b23      	cmp	r3, #35	; 0x23
 801dca8:	d87c      	bhi.n	801dda4 <CDC_Control_FS+0x11c>
 801dcaa:	a201      	add	r2, pc, #4	; (adr r2, 801dcb0 <CDC_Control_FS+0x28>)
 801dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801dcb0:	0801dda5 	.word	0x0801dda5
 801dcb4:	0801dda5 	.word	0x0801dda5
 801dcb8:	0801dda5 	.word	0x0801dda5
 801dcbc:	0801dda5 	.word	0x0801dda5
 801dcc0:	0801dda5 	.word	0x0801dda5
 801dcc4:	0801dda5 	.word	0x0801dda5
 801dcc8:	0801dda5 	.word	0x0801dda5
 801dccc:	0801dda5 	.word	0x0801dda5
 801dcd0:	0801dda5 	.word	0x0801dda5
 801dcd4:	0801dda5 	.word	0x0801dda5
 801dcd8:	0801dda5 	.word	0x0801dda5
 801dcdc:	0801dda5 	.word	0x0801dda5
 801dce0:	0801dda5 	.word	0x0801dda5
 801dce4:	0801dda5 	.word	0x0801dda5
 801dce8:	0801dda5 	.word	0x0801dda5
 801dcec:	0801dda5 	.word	0x0801dda5
 801dcf0:	0801dda5 	.word	0x0801dda5
 801dcf4:	0801dda5 	.word	0x0801dda5
 801dcf8:	0801dda5 	.word	0x0801dda5
 801dcfc:	0801dda5 	.word	0x0801dda5
 801dd00:	0801dda5 	.word	0x0801dda5
 801dd04:	0801dda5 	.word	0x0801dda5
 801dd08:	0801dda5 	.word	0x0801dda5
 801dd0c:	0801dda5 	.word	0x0801dda5
 801dd10:	0801dda5 	.word	0x0801dda5
 801dd14:	0801dda5 	.word	0x0801dda5
 801dd18:	0801dda5 	.word	0x0801dda5
 801dd1c:	0801dda5 	.word	0x0801dda5
 801dd20:	0801dda5 	.word	0x0801dda5
 801dd24:	0801dda5 	.word	0x0801dda5
 801dd28:	0801dda5 	.word	0x0801dda5
 801dd2c:	0801dda5 	.word	0x0801dda5
 801dd30:	0801dd41 	.word	0x0801dd41
 801dd34:	0801dd6d 	.word	0x0801dd6d
 801dd38:	0801dda5 	.word	0x0801dda5
 801dd3c:	0801dda5 	.word	0x0801dda5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
     case CDC_SET_LINE_CODING:
      	tempbuf[0] = pbuf[0];
 801dd40:	683b      	ldr	r3, [r7, #0]
 801dd42:	781b      	ldrb	r3, [r3, #0]
 801dd44:	723b      	strb	r3, [r7, #8]
      	tempbuf[1] = pbuf[1];
 801dd46:	683b      	ldr	r3, [r7, #0]
 801dd48:	785b      	ldrb	r3, [r3, #1]
 801dd4a:	727b      	strb	r3, [r7, #9]
      	tempbuf[2] = pbuf[2];
 801dd4c:	683b      	ldr	r3, [r7, #0]
 801dd4e:	789b      	ldrb	r3, [r3, #2]
 801dd50:	72bb      	strb	r3, [r7, #10]
      	tempbuf[3] = pbuf[3];
 801dd52:	683b      	ldr	r3, [r7, #0]
 801dd54:	78db      	ldrb	r3, [r3, #3]
 801dd56:	72fb      	strb	r3, [r7, #11]
      	tempbuf[4] = pbuf[4];
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	791b      	ldrb	r3, [r3, #4]
 801dd5c:	733b      	strb	r3, [r7, #12]
      	tempbuf[5] = pbuf[5];
 801dd5e:	683b      	ldr	r3, [r7, #0]
 801dd60:	795b      	ldrb	r3, [r3, #5]
 801dd62:	737b      	strb	r3, [r7, #13]
      	tempbuf[6] = pbuf[6];
 801dd64:	683b      	ldr	r3, [r7, #0]
 801dd66:	799b      	ldrb	r3, [r3, #6]
 801dd68:	73bb      	strb	r3, [r7, #14]
      	break;
 801dd6a:	e01c      	b.n	801dda6 <CDC_Control_FS+0x11e>

      case CDC_GET_LINE_CODING:
      	pbuf[0] = tempbuf[0];
 801dd6c:	7a3a      	ldrb	r2, [r7, #8]
 801dd6e:	683b      	ldr	r3, [r7, #0]
 801dd70:	701a      	strb	r2, [r3, #0]
      	pbuf[1] = tempbuf[1];
 801dd72:	683b      	ldr	r3, [r7, #0]
 801dd74:	3301      	adds	r3, #1
 801dd76:	7a7a      	ldrb	r2, [r7, #9]
 801dd78:	701a      	strb	r2, [r3, #0]
      	pbuf[2] = tempbuf[2];
 801dd7a:	683b      	ldr	r3, [r7, #0]
 801dd7c:	3302      	adds	r3, #2
 801dd7e:	7aba      	ldrb	r2, [r7, #10]
 801dd80:	701a      	strb	r2, [r3, #0]
      	pbuf[3] = tempbuf[3];
 801dd82:	683b      	ldr	r3, [r7, #0]
 801dd84:	3303      	adds	r3, #3
 801dd86:	7afa      	ldrb	r2, [r7, #11]
 801dd88:	701a      	strb	r2, [r3, #0]
      	pbuf[4] = tempbuf[4];
 801dd8a:	683b      	ldr	r3, [r7, #0]
 801dd8c:	3304      	adds	r3, #4
 801dd8e:	7b3a      	ldrb	r2, [r7, #12]
 801dd90:	701a      	strb	r2, [r3, #0]
      	pbuf[5] = tempbuf[5];
 801dd92:	683b      	ldr	r3, [r7, #0]
 801dd94:	3305      	adds	r3, #5
 801dd96:	7b7a      	ldrb	r2, [r7, #13]
 801dd98:	701a      	strb	r2, [r3, #0]
      	pbuf[6] = tempbuf[6];
 801dd9a:	683b      	ldr	r3, [r7, #0]
 801dd9c:	3306      	adds	r3, #6
 801dd9e:	7bba      	ldrb	r2, [r7, #14]
 801dda0:	701a      	strb	r2, [r3, #0]
      	break;
 801dda2:	e000      	b.n	801dda6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801dda4:	bf00      	nop
  }

  return (USBD_OK);
 801dda6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801dda8:	4618      	mov	r0, r3
 801ddaa:	3714      	adds	r7, #20
 801ddac:	46bd      	mov	sp, r7
 801ddae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddb2:	4770      	bx	lr

0801ddb4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801ddb4:	b580      	push	{r7, lr}
 801ddb6:	b082      	sub	sp, #8
 801ddb8:	af00      	add	r7, sp, #0
 801ddba:	6078      	str	r0, [r7, #4]
 801ddbc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801ddbe:	6879      	ldr	r1, [r7, #4]
 801ddc0:	4805      	ldr	r0, [pc, #20]	; (801ddd8 <CDC_Receive_FS+0x24>)
 801ddc2:	f7fe fdd6 	bl	801c972 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801ddc6:	4804      	ldr	r0, [pc, #16]	; (801ddd8 <CDC_Receive_FS+0x24>)
 801ddc8:	f7fe fe16 	bl	801c9f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801ddcc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801ddce:	4618      	mov	r0, r3
 801ddd0:	3708      	adds	r7, #8
 801ddd2:	46bd      	mov	sp, r7
 801ddd4:	bd80      	pop	{r7, pc}
 801ddd6:	bf00      	nop
 801ddd8:	240006e4 	.word	0x240006e4

0801dddc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801dddc:	b580      	push	{r7, lr}
 801ddde:	b084      	sub	sp, #16
 801dde0:	af00      	add	r7, sp, #0
 801dde2:	6078      	str	r0, [r7, #4]
 801dde4:	460b      	mov	r3, r1
 801dde6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801dde8:	2300      	movs	r3, #0
 801ddea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801ddec:	4b0d      	ldr	r3, [pc, #52]	; (801de24 <CDC_Transmit_FS+0x48>)
 801ddee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801ddf2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801ddf4:	68bb      	ldr	r3, [r7, #8]
 801ddf6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801ddfa:	2b00      	cmp	r3, #0
 801ddfc:	d001      	beq.n	801de02 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801ddfe:	2301      	movs	r3, #1
 801de00:	e00b      	b.n	801de1a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801de02:	887b      	ldrh	r3, [r7, #2]
 801de04:	461a      	mov	r2, r3
 801de06:	6879      	ldr	r1, [r7, #4]
 801de08:	4806      	ldr	r0, [pc, #24]	; (801de24 <CDC_Transmit_FS+0x48>)
 801de0a:	f7fe fd98 	bl	801c93e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801de0e:	4805      	ldr	r0, [pc, #20]	; (801de24 <CDC_Transmit_FS+0x48>)
 801de10:	f7fe fdc3 	bl	801c99a <USBD_CDC_TransmitPacket>
 801de14:	4603      	mov	r3, r0
 801de16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801de18:	7bfb      	ldrb	r3, [r7, #15]
}
 801de1a:	4618      	mov	r0, r3
 801de1c:	3710      	adds	r7, #16
 801de1e:	46bd      	mov	sp, r7
 801de20:	bd80      	pop	{r7, pc}
 801de22:	bf00      	nop
 801de24:	240006e4 	.word	0x240006e4

0801de28 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de28:	b480      	push	{r7}
 801de2a:	b083      	sub	sp, #12
 801de2c:	af00      	add	r7, sp, #0
 801de2e:	4603      	mov	r3, r0
 801de30:	6039      	str	r1, [r7, #0]
 801de32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801de34:	683b      	ldr	r3, [r7, #0]
 801de36:	2212      	movs	r2, #18
 801de38:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801de3a:	4b03      	ldr	r3, [pc, #12]	; (801de48 <USBD_FS_DeviceDescriptor+0x20>)
}
 801de3c:	4618      	mov	r0, r3
 801de3e:	370c      	adds	r7, #12
 801de40:	46bd      	mov	sp, r7
 801de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de46:	4770      	bx	lr
 801de48:	24000158 	.word	0x24000158

0801de4c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de4c:	b480      	push	{r7}
 801de4e:	b083      	sub	sp, #12
 801de50:	af00      	add	r7, sp, #0
 801de52:	4603      	mov	r3, r0
 801de54:	6039      	str	r1, [r7, #0]
 801de56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801de58:	683b      	ldr	r3, [r7, #0]
 801de5a:	2204      	movs	r2, #4
 801de5c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801de5e:	4b03      	ldr	r3, [pc, #12]	; (801de6c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801de60:	4618      	mov	r0, r3
 801de62:	370c      	adds	r7, #12
 801de64:	46bd      	mov	sp, r7
 801de66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6a:	4770      	bx	lr
 801de6c:	2400016c 	.word	0x2400016c

0801de70 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	b082      	sub	sp, #8
 801de74:	af00      	add	r7, sp, #0
 801de76:	4603      	mov	r3, r0
 801de78:	6039      	str	r1, [r7, #0]
 801de7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801de7c:	79fb      	ldrb	r3, [r7, #7]
 801de7e:	2b00      	cmp	r3, #0
 801de80:	d105      	bne.n	801de8e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801de82:	683a      	ldr	r2, [r7, #0]
 801de84:	4907      	ldr	r1, [pc, #28]	; (801dea4 <USBD_FS_ProductStrDescriptor+0x34>)
 801de86:	4808      	ldr	r0, [pc, #32]	; (801dea8 <USBD_FS_ProductStrDescriptor+0x38>)
 801de88:	f7ff fdd2 	bl	801da30 <USBD_GetString>
 801de8c:	e004      	b.n	801de98 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801de8e:	683a      	ldr	r2, [r7, #0]
 801de90:	4904      	ldr	r1, [pc, #16]	; (801dea4 <USBD_FS_ProductStrDescriptor+0x34>)
 801de92:	4805      	ldr	r0, [pc, #20]	; (801dea8 <USBD_FS_ProductStrDescriptor+0x38>)
 801de94:	f7ff fdcc 	bl	801da30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801de98:	4b02      	ldr	r3, [pc, #8]	; (801dea4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801de9a:	4618      	mov	r0, r3
 801de9c:	3708      	adds	r7, #8
 801de9e:	46bd      	mov	sp, r7
 801dea0:	bd80      	pop	{r7, pc}
 801dea2:	bf00      	nop
 801dea4:	240019a8 	.word	0x240019a8
 801dea8:	0801f8dc 	.word	0x0801f8dc

0801deac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801deac:	b580      	push	{r7, lr}
 801deae:	b082      	sub	sp, #8
 801deb0:	af00      	add	r7, sp, #0
 801deb2:	4603      	mov	r3, r0
 801deb4:	6039      	str	r1, [r7, #0]
 801deb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801deb8:	683a      	ldr	r2, [r7, #0]
 801deba:	4904      	ldr	r1, [pc, #16]	; (801decc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801debc:	4804      	ldr	r0, [pc, #16]	; (801ded0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801debe:	f7ff fdb7 	bl	801da30 <USBD_GetString>
  return USBD_StrDesc;
 801dec2:	4b02      	ldr	r3, [pc, #8]	; (801decc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801dec4:	4618      	mov	r0, r3
 801dec6:	3708      	adds	r7, #8
 801dec8:	46bd      	mov	sp, r7
 801deca:	bd80      	pop	{r7, pc}
 801decc:	240019a8 	.word	0x240019a8
 801ded0:	0801f8f4 	.word	0x0801f8f4

0801ded4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801ded4:	b580      	push	{r7, lr}
 801ded6:	b082      	sub	sp, #8
 801ded8:	af00      	add	r7, sp, #0
 801deda:	4603      	mov	r3, r0
 801dedc:	6039      	str	r1, [r7, #0]
 801dede:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801dee0:	683b      	ldr	r3, [r7, #0]
 801dee2:	221a      	movs	r2, #26
 801dee4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801dee6:	f000 f843 	bl	801df70 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801deea:	4b02      	ldr	r3, [pc, #8]	; (801def4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801deec:	4618      	mov	r0, r3
 801deee:	3708      	adds	r7, #8
 801def0:	46bd      	mov	sp, r7
 801def2:	bd80      	pop	{r7, pc}
 801def4:	24000170 	.word	0x24000170

0801def8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801def8:	b580      	push	{r7, lr}
 801defa:	b082      	sub	sp, #8
 801defc:	af00      	add	r7, sp, #0
 801defe:	4603      	mov	r3, r0
 801df00:	6039      	str	r1, [r7, #0]
 801df02:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801df04:	79fb      	ldrb	r3, [r7, #7]
 801df06:	2b00      	cmp	r3, #0
 801df08:	d105      	bne.n	801df16 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801df0a:	683a      	ldr	r2, [r7, #0]
 801df0c:	4907      	ldr	r1, [pc, #28]	; (801df2c <USBD_FS_ConfigStrDescriptor+0x34>)
 801df0e:	4808      	ldr	r0, [pc, #32]	; (801df30 <USBD_FS_ConfigStrDescriptor+0x38>)
 801df10:	f7ff fd8e 	bl	801da30 <USBD_GetString>
 801df14:	e004      	b.n	801df20 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801df16:	683a      	ldr	r2, [r7, #0]
 801df18:	4904      	ldr	r1, [pc, #16]	; (801df2c <USBD_FS_ConfigStrDescriptor+0x34>)
 801df1a:	4805      	ldr	r0, [pc, #20]	; (801df30 <USBD_FS_ConfigStrDescriptor+0x38>)
 801df1c:	f7ff fd88 	bl	801da30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801df20:	4b02      	ldr	r3, [pc, #8]	; (801df2c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801df22:	4618      	mov	r0, r3
 801df24:	3708      	adds	r7, #8
 801df26:	46bd      	mov	sp, r7
 801df28:	bd80      	pop	{r7, pc}
 801df2a:	bf00      	nop
 801df2c:	240019a8 	.word	0x240019a8
 801df30:	0801f908 	.word	0x0801f908

0801df34 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801df34:	b580      	push	{r7, lr}
 801df36:	b082      	sub	sp, #8
 801df38:	af00      	add	r7, sp, #0
 801df3a:	4603      	mov	r3, r0
 801df3c:	6039      	str	r1, [r7, #0]
 801df3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801df40:	79fb      	ldrb	r3, [r7, #7]
 801df42:	2b00      	cmp	r3, #0
 801df44:	d105      	bne.n	801df52 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801df46:	683a      	ldr	r2, [r7, #0]
 801df48:	4907      	ldr	r1, [pc, #28]	; (801df68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801df4a:	4808      	ldr	r0, [pc, #32]	; (801df6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801df4c:	f7ff fd70 	bl	801da30 <USBD_GetString>
 801df50:	e004      	b.n	801df5c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801df52:	683a      	ldr	r2, [r7, #0]
 801df54:	4904      	ldr	r1, [pc, #16]	; (801df68 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801df56:	4805      	ldr	r0, [pc, #20]	; (801df6c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801df58:	f7ff fd6a 	bl	801da30 <USBD_GetString>
  }
  return USBD_StrDesc;
 801df5c:	4b02      	ldr	r3, [pc, #8]	; (801df68 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801df5e:	4618      	mov	r0, r3
 801df60:	3708      	adds	r7, #8
 801df62:	46bd      	mov	sp, r7
 801df64:	bd80      	pop	{r7, pc}
 801df66:	bf00      	nop
 801df68:	240019a8 	.word	0x240019a8
 801df6c:	0801f914 	.word	0x0801f914

0801df70 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b084      	sub	sp, #16
 801df74:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801df76:	4b0f      	ldr	r3, [pc, #60]	; (801dfb4 <Get_SerialNum+0x44>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801df7c:	4b0e      	ldr	r3, [pc, #56]	; (801dfb8 <Get_SerialNum+0x48>)
 801df7e:	681b      	ldr	r3, [r3, #0]
 801df80:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801df82:	4b0e      	ldr	r3, [pc, #56]	; (801dfbc <Get_SerialNum+0x4c>)
 801df84:	681b      	ldr	r3, [r3, #0]
 801df86:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801df88:	68fa      	ldr	r2, [r7, #12]
 801df8a:	687b      	ldr	r3, [r7, #4]
 801df8c:	4413      	add	r3, r2
 801df8e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801df90:	68fb      	ldr	r3, [r7, #12]
 801df92:	2b00      	cmp	r3, #0
 801df94:	d009      	beq.n	801dfaa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801df96:	2208      	movs	r2, #8
 801df98:	4909      	ldr	r1, [pc, #36]	; (801dfc0 <Get_SerialNum+0x50>)
 801df9a:	68f8      	ldr	r0, [r7, #12]
 801df9c:	f000 f814 	bl	801dfc8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dfa0:	2204      	movs	r2, #4
 801dfa2:	4908      	ldr	r1, [pc, #32]	; (801dfc4 <Get_SerialNum+0x54>)
 801dfa4:	68b8      	ldr	r0, [r7, #8]
 801dfa6:	f000 f80f 	bl	801dfc8 <IntToUnicode>
  }
}
 801dfaa:	bf00      	nop
 801dfac:	3710      	adds	r7, #16
 801dfae:	46bd      	mov	sp, r7
 801dfb0:	bd80      	pop	{r7, pc}
 801dfb2:	bf00      	nop
 801dfb4:	1ff1e800 	.word	0x1ff1e800
 801dfb8:	1ff1e804 	.word	0x1ff1e804
 801dfbc:	1ff1e808 	.word	0x1ff1e808
 801dfc0:	24000172 	.word	0x24000172
 801dfc4:	24000182 	.word	0x24000182

0801dfc8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dfc8:	b480      	push	{r7}
 801dfca:	b087      	sub	sp, #28
 801dfcc:	af00      	add	r7, sp, #0
 801dfce:	60f8      	str	r0, [r7, #12]
 801dfd0:	60b9      	str	r1, [r7, #8]
 801dfd2:	4613      	mov	r3, r2
 801dfd4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801dfd6:	2300      	movs	r3, #0
 801dfd8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801dfda:	2300      	movs	r3, #0
 801dfdc:	75fb      	strb	r3, [r7, #23]
 801dfde:	e027      	b.n	801e030 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801dfe0:	68fb      	ldr	r3, [r7, #12]
 801dfe2:	0f1b      	lsrs	r3, r3, #28
 801dfe4:	2b09      	cmp	r3, #9
 801dfe6:	d80b      	bhi.n	801e000 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801dfe8:	68fb      	ldr	r3, [r7, #12]
 801dfea:	0f1b      	lsrs	r3, r3, #28
 801dfec:	b2da      	uxtb	r2, r3
 801dfee:	7dfb      	ldrb	r3, [r7, #23]
 801dff0:	005b      	lsls	r3, r3, #1
 801dff2:	4619      	mov	r1, r3
 801dff4:	68bb      	ldr	r3, [r7, #8]
 801dff6:	440b      	add	r3, r1
 801dff8:	3230      	adds	r2, #48	; 0x30
 801dffa:	b2d2      	uxtb	r2, r2
 801dffc:	701a      	strb	r2, [r3, #0]
 801dffe:	e00a      	b.n	801e016 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801e000:	68fb      	ldr	r3, [r7, #12]
 801e002:	0f1b      	lsrs	r3, r3, #28
 801e004:	b2da      	uxtb	r2, r3
 801e006:	7dfb      	ldrb	r3, [r7, #23]
 801e008:	005b      	lsls	r3, r3, #1
 801e00a:	4619      	mov	r1, r3
 801e00c:	68bb      	ldr	r3, [r7, #8]
 801e00e:	440b      	add	r3, r1
 801e010:	3237      	adds	r2, #55	; 0x37
 801e012:	b2d2      	uxtb	r2, r2
 801e014:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801e016:	68fb      	ldr	r3, [r7, #12]
 801e018:	011b      	lsls	r3, r3, #4
 801e01a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801e01c:	7dfb      	ldrb	r3, [r7, #23]
 801e01e:	005b      	lsls	r3, r3, #1
 801e020:	3301      	adds	r3, #1
 801e022:	68ba      	ldr	r2, [r7, #8]
 801e024:	4413      	add	r3, r2
 801e026:	2200      	movs	r2, #0
 801e028:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801e02a:	7dfb      	ldrb	r3, [r7, #23]
 801e02c:	3301      	adds	r3, #1
 801e02e:	75fb      	strb	r3, [r7, #23]
 801e030:	7dfa      	ldrb	r2, [r7, #23]
 801e032:	79fb      	ldrb	r3, [r7, #7]
 801e034:	429a      	cmp	r2, r3
 801e036:	d3d3      	bcc.n	801dfe0 <IntToUnicode+0x18>
  }
}
 801e038:	bf00      	nop
 801e03a:	371c      	adds	r7, #28
 801e03c:	46bd      	mov	sp, r7
 801e03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e042:	4770      	bx	lr

0801e044 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801e044:	b580      	push	{r7, lr}
 801e046:	b08a      	sub	sp, #40	; 0x28
 801e048:	af00      	add	r7, sp, #0
 801e04a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801e04c:	f107 0314 	add.w	r3, r7, #20
 801e050:	2200      	movs	r2, #0
 801e052:	601a      	str	r2, [r3, #0]
 801e054:	605a      	str	r2, [r3, #4]
 801e056:	609a      	str	r2, [r3, #8]
 801e058:	60da      	str	r2, [r3, #12]
 801e05a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801e05c:	687b      	ldr	r3, [r7, #4]
 801e05e:	681b      	ldr	r3, [r3, #0]
 801e060:	4a1e      	ldr	r2, [pc, #120]	; (801e0dc <HAL_PCD_MspInit+0x98>)
 801e062:	4293      	cmp	r3, r2
 801e064:	d136      	bne.n	801e0d4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801e066:	4b1e      	ldr	r3, [pc, #120]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e068:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e06c:	4a1c      	ldr	r2, [pc, #112]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e06e:	f043 0301 	orr.w	r3, r3, #1
 801e072:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801e076:	4b1a      	ldr	r3, [pc, #104]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e078:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801e07c:	f003 0301 	and.w	r3, r3, #1
 801e080:	613b      	str	r3, [r7, #16]
 801e082:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801e084:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801e088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801e08a:	2302      	movs	r3, #2
 801e08c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801e08e:	2300      	movs	r3, #0
 801e090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801e092:	2300      	movs	r3, #0
 801e094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801e096:	230a      	movs	r3, #10
 801e098:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801e09a:	f107 0314 	add.w	r3, r7, #20
 801e09e:	4619      	mov	r1, r3
 801e0a0:	4810      	ldr	r0, [pc, #64]	; (801e0e4 <HAL_PCD_MspInit+0xa0>)
 801e0a2:	f7f5 fa85 	bl	80135b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801e0a6:	4b0e      	ldr	r3, [pc, #56]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e0a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801e0ac:	4a0c      	ldr	r2, [pc, #48]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e0ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801e0b2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801e0b6:	4b0a      	ldr	r3, [pc, #40]	; (801e0e0 <HAL_PCD_MspInit+0x9c>)
 801e0b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801e0bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e0c0:	60fb      	str	r3, [r7, #12]
 801e0c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801e0c4:	2200      	movs	r2, #0
 801e0c6:	2100      	movs	r1, #0
 801e0c8:	2065      	movs	r0, #101	; 0x65
 801e0ca:	f7f4 fff8 	bl	80130be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801e0ce:	2065      	movs	r0, #101	; 0x65
 801e0d0:	f7f5 f80f 	bl	80130f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801e0d4:	bf00      	nop
 801e0d6:	3728      	adds	r7, #40	; 0x28
 801e0d8:	46bd      	mov	sp, r7
 801e0da:	bd80      	pop	{r7, pc}
 801e0dc:	40080000 	.word	0x40080000
 801e0e0:	58024400 	.word	0x58024400
 801e0e4:	58020000 	.word	0x58020000

0801e0e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e0e8:	b580      	push	{r7, lr}
 801e0ea:	b082      	sub	sp, #8
 801e0ec:	af00      	add	r7, sp, #0
 801e0ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801e0f0:	687b      	ldr	r3, [r7, #4]
 801e0f2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801e0f6:	687b      	ldr	r3, [r7, #4]
 801e0f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801e0fc:	4619      	mov	r1, r3
 801e0fe:	4610      	mov	r0, r2
 801e100:	f7fe fd32 	bl	801cb68 <USBD_LL_SetupStage>
}
 801e104:	bf00      	nop
 801e106:	3708      	adds	r7, #8
 801e108:	46bd      	mov	sp, r7
 801e10a:	bd80      	pop	{r7, pc}

0801e10c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e10c:	b580      	push	{r7, lr}
 801e10e:	b082      	sub	sp, #8
 801e110:	af00      	add	r7, sp, #0
 801e112:	6078      	str	r0, [r7, #4]
 801e114:	460b      	mov	r3, r1
 801e116:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801e118:	687b      	ldr	r3, [r7, #4]
 801e11a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e11e:	78fa      	ldrb	r2, [r7, #3]
 801e120:	6879      	ldr	r1, [r7, #4]
 801e122:	4613      	mov	r3, r2
 801e124:	00db      	lsls	r3, r3, #3
 801e126:	1a9b      	subs	r3, r3, r2
 801e128:	009b      	lsls	r3, r3, #2
 801e12a:	440b      	add	r3, r1
 801e12c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801e130:	681a      	ldr	r2, [r3, #0]
 801e132:	78fb      	ldrb	r3, [r7, #3]
 801e134:	4619      	mov	r1, r3
 801e136:	f7fe fd62 	bl	801cbfe <USBD_LL_DataOutStage>
}
 801e13a:	bf00      	nop
 801e13c:	3708      	adds	r7, #8
 801e13e:	46bd      	mov	sp, r7
 801e140:	bd80      	pop	{r7, pc}

0801e142 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e142:	b580      	push	{r7, lr}
 801e144:	b082      	sub	sp, #8
 801e146:	af00      	add	r7, sp, #0
 801e148:	6078      	str	r0, [r7, #4]
 801e14a:	460b      	mov	r3, r1
 801e14c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801e14e:	687b      	ldr	r3, [r7, #4]
 801e150:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801e154:	78fa      	ldrb	r2, [r7, #3]
 801e156:	6879      	ldr	r1, [r7, #4]
 801e158:	4613      	mov	r3, r2
 801e15a:	00db      	lsls	r3, r3, #3
 801e15c:	1a9b      	subs	r3, r3, r2
 801e15e:	009b      	lsls	r3, r3, #2
 801e160:	440b      	add	r3, r1
 801e162:	3348      	adds	r3, #72	; 0x48
 801e164:	681a      	ldr	r2, [r3, #0]
 801e166:	78fb      	ldrb	r3, [r7, #3]
 801e168:	4619      	mov	r1, r3
 801e16a:	f7fe fdb9 	bl	801cce0 <USBD_LL_DataInStage>
}
 801e16e:	bf00      	nop
 801e170:	3708      	adds	r7, #8
 801e172:	46bd      	mov	sp, r7
 801e174:	bd80      	pop	{r7, pc}

0801e176 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e176:	b580      	push	{r7, lr}
 801e178:	b082      	sub	sp, #8
 801e17a:	af00      	add	r7, sp, #0
 801e17c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801e17e:	687b      	ldr	r3, [r7, #4]
 801e180:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e184:	4618      	mov	r0, r3
 801e186:	f7fe fecc 	bl	801cf22 <USBD_LL_SOF>
}
 801e18a:	bf00      	nop
 801e18c:	3708      	adds	r7, #8
 801e18e:	46bd      	mov	sp, r7
 801e190:	bd80      	pop	{r7, pc}

0801e192 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801e192:	b580      	push	{r7, lr}
 801e194:	b084      	sub	sp, #16
 801e196:	af00      	add	r7, sp, #0
 801e198:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801e19a:	2301      	movs	r3, #1
 801e19c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801e19e:	687b      	ldr	r3, [r7, #4]
 801e1a0:	68db      	ldr	r3, [r3, #12]
 801e1a2:	2b00      	cmp	r3, #0
 801e1a4:	d102      	bne.n	801e1ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801e1a6:	2300      	movs	r3, #0
 801e1a8:	73fb      	strb	r3, [r7, #15]
 801e1aa:	e008      	b.n	801e1be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801e1ac:	687b      	ldr	r3, [r7, #4]
 801e1ae:	68db      	ldr	r3, [r3, #12]
 801e1b0:	2b02      	cmp	r3, #2
 801e1b2:	d102      	bne.n	801e1ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801e1b4:	2301      	movs	r3, #1
 801e1b6:	73fb      	strb	r3, [r7, #15]
 801e1b8:	e001      	b.n	801e1be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801e1ba:	f7f4 fa8b 	bl	80126d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801e1be:	687b      	ldr	r3, [r7, #4]
 801e1c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1c4:	7bfa      	ldrb	r2, [r7, #15]
 801e1c6:	4611      	mov	r1, r2
 801e1c8:	4618      	mov	r0, r3
 801e1ca:	f7fe fe6f 	bl	801ceac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1d4:	4618      	mov	r0, r3
 801e1d6:	f7fe fe28 	bl	801ce2a <USBD_LL_Reset>
}
 801e1da:	bf00      	nop
 801e1dc:	3710      	adds	r7, #16
 801e1de:	46bd      	mov	sp, r7
 801e1e0:	bd80      	pop	{r7, pc}
	...

0801e1e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e1e4:	b580      	push	{r7, lr}
 801e1e6:	b082      	sub	sp, #8
 801e1e8:	af00      	add	r7, sp, #0
 801e1ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801e1ec:	687b      	ldr	r3, [r7, #4]
 801e1ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e1f2:	4618      	mov	r0, r3
 801e1f4:	f7fe fe6a 	bl	801cecc <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801e1f8:	687b      	ldr	r3, [r7, #4]
 801e1fa:	681b      	ldr	r3, [r3, #0]
 801e1fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801e200:	681b      	ldr	r3, [r3, #0]
 801e202:	687a      	ldr	r2, [r7, #4]
 801e204:	6812      	ldr	r2, [r2, #0]
 801e206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801e20a:	f043 0301 	orr.w	r3, r3, #1
 801e20e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801e210:	687b      	ldr	r3, [r7, #4]
 801e212:	6a1b      	ldr	r3, [r3, #32]
 801e214:	2b00      	cmp	r3, #0
 801e216:	d005      	beq.n	801e224 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801e218:	4b04      	ldr	r3, [pc, #16]	; (801e22c <HAL_PCD_SuspendCallback+0x48>)
 801e21a:	691b      	ldr	r3, [r3, #16]
 801e21c:	4a03      	ldr	r2, [pc, #12]	; (801e22c <HAL_PCD_SuspendCallback+0x48>)
 801e21e:	f043 0306 	orr.w	r3, r3, #6
 801e222:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801e224:	bf00      	nop
 801e226:	3708      	adds	r7, #8
 801e228:	46bd      	mov	sp, r7
 801e22a:	bd80      	pop	{r7, pc}
 801e22c:	e000ed00 	.word	0xe000ed00

0801e230 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e230:	b580      	push	{r7, lr}
 801e232:	b082      	sub	sp, #8
 801e234:	af00      	add	r7, sp, #0
 801e236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801e238:	687b      	ldr	r3, [r7, #4]
 801e23a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e23e:	4618      	mov	r0, r3
 801e240:	f7fe fe59 	bl	801cef6 <USBD_LL_Resume>
}
 801e244:	bf00      	nop
 801e246:	3708      	adds	r7, #8
 801e248:	46bd      	mov	sp, r7
 801e24a:	bd80      	pop	{r7, pc}

0801e24c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e24c:	b580      	push	{r7, lr}
 801e24e:	b082      	sub	sp, #8
 801e250:	af00      	add	r7, sp, #0
 801e252:	6078      	str	r0, [r7, #4]
 801e254:	460b      	mov	r3, r1
 801e256:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e25e:	78fa      	ldrb	r2, [r7, #3]
 801e260:	4611      	mov	r1, r2
 801e262:	4618      	mov	r0, r3
 801e264:	f7fe fe84 	bl	801cf70 <USBD_LL_IsoOUTIncomplete>
}
 801e268:	bf00      	nop
 801e26a:	3708      	adds	r7, #8
 801e26c:	46bd      	mov	sp, r7
 801e26e:	bd80      	pop	{r7, pc}

0801e270 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e270:	b580      	push	{r7, lr}
 801e272:	b082      	sub	sp, #8
 801e274:	af00      	add	r7, sp, #0
 801e276:	6078      	str	r0, [r7, #4]
 801e278:	460b      	mov	r3, r1
 801e27a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e282:	78fa      	ldrb	r2, [r7, #3]
 801e284:	4611      	mov	r1, r2
 801e286:	4618      	mov	r0, r3
 801e288:	f7fe fe65 	bl	801cf56 <USBD_LL_IsoINIncomplete>
}
 801e28c:	bf00      	nop
 801e28e:	3708      	adds	r7, #8
 801e290:	46bd      	mov	sp, r7
 801e292:	bd80      	pop	{r7, pc}

0801e294 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e294:	b580      	push	{r7, lr}
 801e296:	b082      	sub	sp, #8
 801e298:	af00      	add	r7, sp, #0
 801e29a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	f7fe fe71 	bl	801cf8a <USBD_LL_DevConnected>
}
 801e2a8:	bf00      	nop
 801e2aa:	3708      	adds	r7, #8
 801e2ac:	46bd      	mov	sp, r7
 801e2ae:	bd80      	pop	{r7, pc}

0801e2b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801e2b0:	b580      	push	{r7, lr}
 801e2b2:	b082      	sub	sp, #8
 801e2b4:	af00      	add	r7, sp, #0
 801e2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801e2b8:	687b      	ldr	r3, [r7, #4]
 801e2ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801e2be:	4618      	mov	r0, r3
 801e2c0:	f7fe fe6e 	bl	801cfa0 <USBD_LL_DevDisconnected>
}
 801e2c4:	bf00      	nop
 801e2c6:	3708      	adds	r7, #8
 801e2c8:	46bd      	mov	sp, r7
 801e2ca:	bd80      	pop	{r7, pc}

0801e2cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801e2cc:	b580      	push	{r7, lr}
 801e2ce:	b082      	sub	sp, #8
 801e2d0:	af00      	add	r7, sp, #0
 801e2d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801e2d4:	687b      	ldr	r3, [r7, #4]
 801e2d6:	781b      	ldrb	r3, [r3, #0]
 801e2d8:	2b00      	cmp	r3, #0
 801e2da:	d13e      	bne.n	801e35a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801e2dc:	4a21      	ldr	r2, [pc, #132]	; (801e364 <USBD_LL_Init+0x98>)
 801e2de:	687b      	ldr	r3, [r7, #4]
 801e2e0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	4a1f      	ldr	r2, [pc, #124]	; (801e364 <USBD_LL_Init+0x98>)
 801e2e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801e2ec:	4b1d      	ldr	r3, [pc, #116]	; (801e364 <USBD_LL_Init+0x98>)
 801e2ee:	4a1e      	ldr	r2, [pc, #120]	; (801e368 <USBD_LL_Init+0x9c>)
 801e2f0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801e2f2:	4b1c      	ldr	r3, [pc, #112]	; (801e364 <USBD_LL_Init+0x98>)
 801e2f4:	2209      	movs	r2, #9
 801e2f6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801e2f8:	4b1a      	ldr	r3, [pc, #104]	; (801e364 <USBD_LL_Init+0x98>)
 801e2fa:	2202      	movs	r2, #2
 801e2fc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801e2fe:	4b19      	ldr	r3, [pc, #100]	; (801e364 <USBD_LL_Init+0x98>)
 801e300:	2200      	movs	r2, #0
 801e302:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801e304:	4b17      	ldr	r3, [pc, #92]	; (801e364 <USBD_LL_Init+0x98>)
 801e306:	2202      	movs	r2, #2
 801e308:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801e30a:	4b16      	ldr	r3, [pc, #88]	; (801e364 <USBD_LL_Init+0x98>)
 801e30c:	2201      	movs	r2, #1
 801e30e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801e310:	4b14      	ldr	r3, [pc, #80]	; (801e364 <USBD_LL_Init+0x98>)
 801e312:	2200      	movs	r2, #0
 801e314:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801e316:	4b13      	ldr	r3, [pc, #76]	; (801e364 <USBD_LL_Init+0x98>)
 801e318:	2200      	movs	r2, #0
 801e31a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801e31c:	4b11      	ldr	r3, [pc, #68]	; (801e364 <USBD_LL_Init+0x98>)
 801e31e:	2200      	movs	r2, #0
 801e320:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801e322:	4b10      	ldr	r3, [pc, #64]	; (801e364 <USBD_LL_Init+0x98>)
 801e324:	2200      	movs	r2, #0
 801e326:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801e328:	4b0e      	ldr	r3, [pc, #56]	; (801e364 <USBD_LL_Init+0x98>)
 801e32a:	2200      	movs	r2, #0
 801e32c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801e32e:	480d      	ldr	r0, [pc, #52]	; (801e364 <USBD_LL_Init+0x98>)
 801e330:	f7f5 fb39 	bl	80139a6 <HAL_PCD_Init>
 801e334:	4603      	mov	r3, r0
 801e336:	2b00      	cmp	r3, #0
 801e338:	d001      	beq.n	801e33e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801e33a:	f7f4 f9cb 	bl	80126d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801e33e:	2180      	movs	r1, #128	; 0x80
 801e340:	4808      	ldr	r0, [pc, #32]	; (801e364 <USBD_LL_Init+0x98>)
 801e342:	f7f6 fcca 	bl	8014cda <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801e346:	2240      	movs	r2, #64	; 0x40
 801e348:	2100      	movs	r1, #0
 801e34a:	4806      	ldr	r0, [pc, #24]	; (801e364 <USBD_LL_Init+0x98>)
 801e34c:	f7f6 fc7e 	bl	8014c4c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801e350:	2280      	movs	r2, #128	; 0x80
 801e352:	2101      	movs	r1, #1
 801e354:	4803      	ldr	r0, [pc, #12]	; (801e364 <USBD_LL_Init+0x98>)
 801e356:	f7f6 fc79 	bl	8014c4c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801e35a:	2300      	movs	r3, #0
}
 801e35c:	4618      	mov	r0, r3
 801e35e:	3708      	adds	r7, #8
 801e360:	46bd      	mov	sp, r7
 801e362:	bd80      	pop	{r7, pc}
 801e364:	24001ba8 	.word	0x24001ba8
 801e368:	40080000 	.word	0x40080000

0801e36c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801e36c:	b580      	push	{r7, lr}
 801e36e:	b084      	sub	sp, #16
 801e370:	af00      	add	r7, sp, #0
 801e372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e374:	2300      	movs	r3, #0
 801e376:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e378:	2300      	movs	r3, #0
 801e37a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e382:	4618      	mov	r0, r3
 801e384:	f7f5 fc33 	bl	8013bee <HAL_PCD_Start>
 801e388:	4603      	mov	r3, r0
 801e38a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801e38c:	7bfb      	ldrb	r3, [r7, #15]
 801e38e:	4618      	mov	r0, r3
 801e390:	f000 f92e 	bl	801e5f0 <USBD_Get_USB_Status>
 801e394:	4603      	mov	r3, r0
 801e396:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e398:	7bbb      	ldrb	r3, [r7, #14]
}
 801e39a:	4618      	mov	r0, r3
 801e39c:	3710      	adds	r7, #16
 801e39e:	46bd      	mov	sp, r7
 801e3a0:	bd80      	pop	{r7, pc}

0801e3a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801e3a2:	b580      	push	{r7, lr}
 801e3a4:	b084      	sub	sp, #16
 801e3a6:	af00      	add	r7, sp, #0
 801e3a8:	6078      	str	r0, [r7, #4]
 801e3aa:	4608      	mov	r0, r1
 801e3ac:	4611      	mov	r1, r2
 801e3ae:	461a      	mov	r2, r3
 801e3b0:	4603      	mov	r3, r0
 801e3b2:	70fb      	strb	r3, [r7, #3]
 801e3b4:	460b      	mov	r3, r1
 801e3b6:	70bb      	strb	r3, [r7, #2]
 801e3b8:	4613      	mov	r3, r2
 801e3ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3bc:	2300      	movs	r3, #0
 801e3be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3c0:	2300      	movs	r3, #0
 801e3c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801e3c4:	687b      	ldr	r3, [r7, #4]
 801e3c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e3ca:	78bb      	ldrb	r3, [r7, #2]
 801e3cc:	883a      	ldrh	r2, [r7, #0]
 801e3ce:	78f9      	ldrb	r1, [r7, #3]
 801e3d0:	f7f6 f844 	bl	801445c <HAL_PCD_EP_Open>
 801e3d4:	4603      	mov	r3, r0
 801e3d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e3d8:	7bfb      	ldrb	r3, [r7, #15]
 801e3da:	4618      	mov	r0, r3
 801e3dc:	f000 f908 	bl	801e5f0 <USBD_Get_USB_Status>
 801e3e0:	4603      	mov	r3, r0
 801e3e2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e3e4:	7bbb      	ldrb	r3, [r7, #14]
}
 801e3e6:	4618      	mov	r0, r3
 801e3e8:	3710      	adds	r7, #16
 801e3ea:	46bd      	mov	sp, r7
 801e3ec:	bd80      	pop	{r7, pc}

0801e3ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e3ee:	b580      	push	{r7, lr}
 801e3f0:	b084      	sub	sp, #16
 801e3f2:	af00      	add	r7, sp, #0
 801e3f4:	6078      	str	r0, [r7, #4]
 801e3f6:	460b      	mov	r3, r1
 801e3f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e3fa:	2300      	movs	r3, #0
 801e3fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e3fe:	2300      	movs	r3, #0
 801e400:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e408:	78fa      	ldrb	r2, [r7, #3]
 801e40a:	4611      	mov	r1, r2
 801e40c:	4618      	mov	r0, r3
 801e40e:	f7f6 f88d 	bl	801452c <HAL_PCD_EP_Close>
 801e412:	4603      	mov	r3, r0
 801e414:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801e416:	7bfb      	ldrb	r3, [r7, #15]
 801e418:	4618      	mov	r0, r3
 801e41a:	f000 f8e9 	bl	801e5f0 <USBD_Get_USB_Status>
 801e41e:	4603      	mov	r3, r0
 801e420:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801e422:	7bbb      	ldrb	r3, [r7, #14]
}
 801e424:	4618      	mov	r0, r3
 801e426:	3710      	adds	r7, #16
 801e428:	46bd      	mov	sp, r7
 801e42a:	bd80      	pop	{r7, pc}

0801e42c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e42c:	b580      	push	{r7, lr}
 801e42e:	b084      	sub	sp, #16
 801e430:	af00      	add	r7, sp, #0
 801e432:	6078      	str	r0, [r7, #4]
 801e434:	460b      	mov	r3, r1
 801e436:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e438:	2300      	movs	r3, #0
 801e43a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e43c:	2300      	movs	r3, #0
 801e43e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e446:	78fa      	ldrb	r2, [r7, #3]
 801e448:	4611      	mov	r1, r2
 801e44a:	4618      	mov	r0, r3
 801e44c:	f7f6 f965 	bl	801471a <HAL_PCD_EP_SetStall>
 801e450:	4603      	mov	r3, r0
 801e452:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e454:	7bfb      	ldrb	r3, [r7, #15]
 801e456:	4618      	mov	r0, r3
 801e458:	f000 f8ca 	bl	801e5f0 <USBD_Get_USB_Status>
 801e45c:	4603      	mov	r3, r0
 801e45e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e460:	7bbb      	ldrb	r3, [r7, #14]
}
 801e462:	4618      	mov	r0, r3
 801e464:	3710      	adds	r7, #16
 801e466:	46bd      	mov	sp, r7
 801e468:	bd80      	pop	{r7, pc}

0801e46a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e46a:	b580      	push	{r7, lr}
 801e46c:	b084      	sub	sp, #16
 801e46e:	af00      	add	r7, sp, #0
 801e470:	6078      	str	r0, [r7, #4]
 801e472:	460b      	mov	r3, r1
 801e474:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e476:	2300      	movs	r3, #0
 801e478:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e47a:	2300      	movs	r3, #0
 801e47c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e484:	78fa      	ldrb	r2, [r7, #3]
 801e486:	4611      	mov	r1, r2
 801e488:	4618      	mov	r0, r3
 801e48a:	f7f6 f9aa 	bl	80147e2 <HAL_PCD_EP_ClrStall>
 801e48e:	4603      	mov	r3, r0
 801e490:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801e492:	7bfb      	ldrb	r3, [r7, #15]
 801e494:	4618      	mov	r0, r3
 801e496:	f000 f8ab 	bl	801e5f0 <USBD_Get_USB_Status>
 801e49a:	4603      	mov	r3, r0
 801e49c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801e49e:	7bbb      	ldrb	r3, [r7, #14]
}
 801e4a0:	4618      	mov	r0, r3
 801e4a2:	3710      	adds	r7, #16
 801e4a4:	46bd      	mov	sp, r7
 801e4a6:	bd80      	pop	{r7, pc}

0801e4a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e4a8:	b480      	push	{r7}
 801e4aa:	b085      	sub	sp, #20
 801e4ac:	af00      	add	r7, sp, #0
 801e4ae:	6078      	str	r0, [r7, #4]
 801e4b0:	460b      	mov	r3, r1
 801e4b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e4ba:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801e4bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e4c0:	2b00      	cmp	r3, #0
 801e4c2:	da0b      	bge.n	801e4dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801e4c4:	78fb      	ldrb	r3, [r7, #3]
 801e4c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e4ca:	68f9      	ldr	r1, [r7, #12]
 801e4cc:	4613      	mov	r3, r2
 801e4ce:	00db      	lsls	r3, r3, #3
 801e4d0:	1a9b      	subs	r3, r3, r2
 801e4d2:	009b      	lsls	r3, r3, #2
 801e4d4:	440b      	add	r3, r1
 801e4d6:	333e      	adds	r3, #62	; 0x3e
 801e4d8:	781b      	ldrb	r3, [r3, #0]
 801e4da:	e00b      	b.n	801e4f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801e4dc:	78fb      	ldrb	r3, [r7, #3]
 801e4de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e4e2:	68f9      	ldr	r1, [r7, #12]
 801e4e4:	4613      	mov	r3, r2
 801e4e6:	00db      	lsls	r3, r3, #3
 801e4e8:	1a9b      	subs	r3, r3, r2
 801e4ea:	009b      	lsls	r3, r3, #2
 801e4ec:	440b      	add	r3, r1
 801e4ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e4f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e4f4:	4618      	mov	r0, r3
 801e4f6:	3714      	adds	r7, #20
 801e4f8:	46bd      	mov	sp, r7
 801e4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e4fe:	4770      	bx	lr

0801e500 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e500:	b580      	push	{r7, lr}
 801e502:	b084      	sub	sp, #16
 801e504:	af00      	add	r7, sp, #0
 801e506:	6078      	str	r0, [r7, #4]
 801e508:	460b      	mov	r3, r1
 801e50a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e50c:	2300      	movs	r3, #0
 801e50e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e510:	2300      	movs	r3, #0
 801e512:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e514:	687b      	ldr	r3, [r7, #4]
 801e516:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e51a:	78fa      	ldrb	r2, [r7, #3]
 801e51c:	4611      	mov	r1, r2
 801e51e:	4618      	mov	r0, r3
 801e520:	f7f5 ff77 	bl	8014412 <HAL_PCD_SetAddress>
 801e524:	4603      	mov	r3, r0
 801e526:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801e528:	7bfb      	ldrb	r3, [r7, #15]
 801e52a:	4618      	mov	r0, r3
 801e52c:	f000 f860 	bl	801e5f0 <USBD_Get_USB_Status>
 801e530:	4603      	mov	r3, r0
 801e532:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e534:	7bbb      	ldrb	r3, [r7, #14]
}
 801e536:	4618      	mov	r0, r3
 801e538:	3710      	adds	r7, #16
 801e53a:	46bd      	mov	sp, r7
 801e53c:	bd80      	pop	{r7, pc}

0801e53e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e53e:	b580      	push	{r7, lr}
 801e540:	b086      	sub	sp, #24
 801e542:	af00      	add	r7, sp, #0
 801e544:	60f8      	str	r0, [r7, #12]
 801e546:	607a      	str	r2, [r7, #4]
 801e548:	461a      	mov	r2, r3
 801e54a:	460b      	mov	r3, r1
 801e54c:	72fb      	strb	r3, [r7, #11]
 801e54e:	4613      	mov	r3, r2
 801e550:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e552:	2300      	movs	r3, #0
 801e554:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e556:	2300      	movs	r3, #0
 801e558:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e55a:	68fb      	ldr	r3, [r7, #12]
 801e55c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e560:	893b      	ldrh	r3, [r7, #8]
 801e562:	7af9      	ldrb	r1, [r7, #11]
 801e564:	687a      	ldr	r2, [r7, #4]
 801e566:	f7f6 f88e 	bl	8014686 <HAL_PCD_EP_Transmit>
 801e56a:	4603      	mov	r3, r0
 801e56c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801e56e:	7dfb      	ldrb	r3, [r7, #23]
 801e570:	4618      	mov	r0, r3
 801e572:	f000 f83d 	bl	801e5f0 <USBD_Get_USB_Status>
 801e576:	4603      	mov	r3, r0
 801e578:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801e57a:	7dbb      	ldrb	r3, [r7, #22]
}
 801e57c:	4618      	mov	r0, r3
 801e57e:	3718      	adds	r7, #24
 801e580:	46bd      	mov	sp, r7
 801e582:	bd80      	pop	{r7, pc}

0801e584 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e584:	b580      	push	{r7, lr}
 801e586:	b086      	sub	sp, #24
 801e588:	af00      	add	r7, sp, #0
 801e58a:	60f8      	str	r0, [r7, #12]
 801e58c:	607a      	str	r2, [r7, #4]
 801e58e:	461a      	mov	r2, r3
 801e590:	460b      	mov	r3, r1
 801e592:	72fb      	strb	r3, [r7, #11]
 801e594:	4613      	mov	r3, r2
 801e596:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e598:	2300      	movs	r3, #0
 801e59a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e59c:	2300      	movs	r3, #0
 801e59e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e5a6:	893b      	ldrh	r3, [r7, #8]
 801e5a8:	7af9      	ldrb	r1, [r7, #11]
 801e5aa:	687a      	ldr	r2, [r7, #4]
 801e5ac:	f7f6 f808 	bl	80145c0 <HAL_PCD_EP_Receive>
 801e5b0:	4603      	mov	r3, r0
 801e5b2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801e5b4:	7dfb      	ldrb	r3, [r7, #23]
 801e5b6:	4618      	mov	r0, r3
 801e5b8:	f000 f81a 	bl	801e5f0 <USBD_Get_USB_Status>
 801e5bc:	4603      	mov	r3, r0
 801e5be:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801e5c0:	7dbb      	ldrb	r3, [r7, #22]
}
 801e5c2:	4618      	mov	r0, r3
 801e5c4:	3718      	adds	r7, #24
 801e5c6:	46bd      	mov	sp, r7
 801e5c8:	bd80      	pop	{r7, pc}

0801e5ca <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e5ca:	b580      	push	{r7, lr}
 801e5cc:	b082      	sub	sp, #8
 801e5ce:	af00      	add	r7, sp, #0
 801e5d0:	6078      	str	r0, [r7, #4]
 801e5d2:	460b      	mov	r3, r1
 801e5d4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e5d6:	687b      	ldr	r3, [r7, #4]
 801e5d8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e5dc:	78fa      	ldrb	r2, [r7, #3]
 801e5de:	4611      	mov	r1, r2
 801e5e0:	4618      	mov	r0, r3
 801e5e2:	f7f6 f838 	bl	8014656 <HAL_PCD_EP_GetRxCount>
 801e5e6:	4603      	mov	r3, r0
}
 801e5e8:	4618      	mov	r0, r3
 801e5ea:	3708      	adds	r7, #8
 801e5ec:	46bd      	mov	sp, r7
 801e5ee:	bd80      	pop	{r7, pc}

0801e5f0 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e5f0:	b480      	push	{r7}
 801e5f2:	b085      	sub	sp, #20
 801e5f4:	af00      	add	r7, sp, #0
 801e5f6:	4603      	mov	r3, r0
 801e5f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e5fa:	2300      	movs	r3, #0
 801e5fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e5fe:	79fb      	ldrb	r3, [r7, #7]
 801e600:	2b03      	cmp	r3, #3
 801e602:	d817      	bhi.n	801e634 <USBD_Get_USB_Status+0x44>
 801e604:	a201      	add	r2, pc, #4	; (adr r2, 801e60c <USBD_Get_USB_Status+0x1c>)
 801e606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e60a:	bf00      	nop
 801e60c:	0801e61d 	.word	0x0801e61d
 801e610:	0801e623 	.word	0x0801e623
 801e614:	0801e629 	.word	0x0801e629
 801e618:	0801e62f 	.word	0x0801e62f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e61c:	2300      	movs	r3, #0
 801e61e:	73fb      	strb	r3, [r7, #15]
    break;
 801e620:	e00b      	b.n	801e63a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e622:	2302      	movs	r3, #2
 801e624:	73fb      	strb	r3, [r7, #15]
    break;
 801e626:	e008      	b.n	801e63a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e628:	2301      	movs	r3, #1
 801e62a:	73fb      	strb	r3, [r7, #15]
    break;
 801e62c:	e005      	b.n	801e63a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e62e:	2302      	movs	r3, #2
 801e630:	73fb      	strb	r3, [r7, #15]
    break;
 801e632:	e002      	b.n	801e63a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e634:	2302      	movs	r3, #2
 801e636:	73fb      	strb	r3, [r7, #15]
    break;
 801e638:	bf00      	nop
  }
  return usb_status;
 801e63a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e63c:	4618      	mov	r0, r3
 801e63e:	3714      	adds	r7, #20
 801e640:	46bd      	mov	sp, r7
 801e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e646:	4770      	bx	lr

0801e648 <__errno>:
 801e648:	4b01      	ldr	r3, [pc, #4]	; (801e650 <__errno+0x8>)
 801e64a:	6818      	ldr	r0, [r3, #0]
 801e64c:	4770      	bx	lr
 801e64e:	bf00      	nop
 801e650:	2400018c 	.word	0x2400018c

0801e654 <__libc_init_array>:
 801e654:	b570      	push	{r4, r5, r6, lr}
 801e656:	4e0d      	ldr	r6, [pc, #52]	; (801e68c <__libc_init_array+0x38>)
 801e658:	4c0d      	ldr	r4, [pc, #52]	; (801e690 <__libc_init_array+0x3c>)
 801e65a:	1ba4      	subs	r4, r4, r6
 801e65c:	10a4      	asrs	r4, r4, #2
 801e65e:	2500      	movs	r5, #0
 801e660:	42a5      	cmp	r5, r4
 801e662:	d109      	bne.n	801e678 <__libc_init_array+0x24>
 801e664:	4e0b      	ldr	r6, [pc, #44]	; (801e694 <__libc_init_array+0x40>)
 801e666:	4c0c      	ldr	r4, [pc, #48]	; (801e698 <__libc_init_array+0x44>)
 801e668:	f001 f908 	bl	801f87c <_init>
 801e66c:	1ba4      	subs	r4, r4, r6
 801e66e:	10a4      	asrs	r4, r4, #2
 801e670:	2500      	movs	r5, #0
 801e672:	42a5      	cmp	r5, r4
 801e674:	d105      	bne.n	801e682 <__libc_init_array+0x2e>
 801e676:	bd70      	pop	{r4, r5, r6, pc}
 801e678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e67c:	4798      	blx	r3
 801e67e:	3501      	adds	r5, #1
 801e680:	e7ee      	b.n	801e660 <__libc_init_array+0xc>
 801e682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e686:	4798      	blx	r3
 801e688:	3501      	adds	r5, #1
 801e68a:	e7f2      	b.n	801e672 <__libc_init_array+0x1e>
 801e68c:	0801fc68 	.word	0x0801fc68
 801e690:	0801fc68 	.word	0x0801fc68
 801e694:	0801fc68 	.word	0x0801fc68
 801e698:	0801fc6c 	.word	0x0801fc6c

0801e69c <__itoa>:
 801e69c:	1e93      	subs	r3, r2, #2
 801e69e:	2b22      	cmp	r3, #34	; 0x22
 801e6a0:	b510      	push	{r4, lr}
 801e6a2:	460c      	mov	r4, r1
 801e6a4:	d904      	bls.n	801e6b0 <__itoa+0x14>
 801e6a6:	2300      	movs	r3, #0
 801e6a8:	700b      	strb	r3, [r1, #0]
 801e6aa:	461c      	mov	r4, r3
 801e6ac:	4620      	mov	r0, r4
 801e6ae:	bd10      	pop	{r4, pc}
 801e6b0:	2a0a      	cmp	r2, #10
 801e6b2:	d109      	bne.n	801e6c8 <__itoa+0x2c>
 801e6b4:	2800      	cmp	r0, #0
 801e6b6:	da07      	bge.n	801e6c8 <__itoa+0x2c>
 801e6b8:	232d      	movs	r3, #45	; 0x2d
 801e6ba:	700b      	strb	r3, [r1, #0]
 801e6bc:	4240      	negs	r0, r0
 801e6be:	2101      	movs	r1, #1
 801e6c0:	4421      	add	r1, r4
 801e6c2:	f000 f8ed 	bl	801e8a0 <__utoa>
 801e6c6:	e7f1      	b.n	801e6ac <__itoa+0x10>
 801e6c8:	2100      	movs	r1, #0
 801e6ca:	e7f9      	b.n	801e6c0 <__itoa+0x24>

0801e6cc <itoa>:
 801e6cc:	f7ff bfe6 	b.w	801e69c <__itoa>

0801e6d0 <malloc>:
 801e6d0:	4b02      	ldr	r3, [pc, #8]	; (801e6dc <malloc+0xc>)
 801e6d2:	4601      	mov	r1, r0
 801e6d4:	6818      	ldr	r0, [r3, #0]
 801e6d6:	f000 b861 	b.w	801e79c <_malloc_r>
 801e6da:	bf00      	nop
 801e6dc:	2400018c 	.word	0x2400018c

0801e6e0 <free>:
 801e6e0:	4b02      	ldr	r3, [pc, #8]	; (801e6ec <free+0xc>)
 801e6e2:	4601      	mov	r1, r0
 801e6e4:	6818      	ldr	r0, [r3, #0]
 801e6e6:	f000 b80b 	b.w	801e700 <_free_r>
 801e6ea:	bf00      	nop
 801e6ec:	2400018c 	.word	0x2400018c

0801e6f0 <memset>:
 801e6f0:	4402      	add	r2, r0
 801e6f2:	4603      	mov	r3, r0
 801e6f4:	4293      	cmp	r3, r2
 801e6f6:	d100      	bne.n	801e6fa <memset+0xa>
 801e6f8:	4770      	bx	lr
 801e6fa:	f803 1b01 	strb.w	r1, [r3], #1
 801e6fe:	e7f9      	b.n	801e6f4 <memset+0x4>

0801e700 <_free_r>:
 801e700:	b538      	push	{r3, r4, r5, lr}
 801e702:	4605      	mov	r5, r0
 801e704:	2900      	cmp	r1, #0
 801e706:	d045      	beq.n	801e794 <_free_r+0x94>
 801e708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e70c:	1f0c      	subs	r4, r1, #4
 801e70e:	2b00      	cmp	r3, #0
 801e710:	bfb8      	it	lt
 801e712:	18e4      	addlt	r4, r4, r3
 801e714:	f000 f902 	bl	801e91c <__malloc_lock>
 801e718:	4a1f      	ldr	r2, [pc, #124]	; (801e798 <_free_r+0x98>)
 801e71a:	6813      	ldr	r3, [r2, #0]
 801e71c:	4610      	mov	r0, r2
 801e71e:	b933      	cbnz	r3, 801e72e <_free_r+0x2e>
 801e720:	6063      	str	r3, [r4, #4]
 801e722:	6014      	str	r4, [r2, #0]
 801e724:	4628      	mov	r0, r5
 801e726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e72a:	f000 b8f8 	b.w	801e91e <__malloc_unlock>
 801e72e:	42a3      	cmp	r3, r4
 801e730:	d90c      	bls.n	801e74c <_free_r+0x4c>
 801e732:	6821      	ldr	r1, [r4, #0]
 801e734:	1862      	adds	r2, r4, r1
 801e736:	4293      	cmp	r3, r2
 801e738:	bf04      	itt	eq
 801e73a:	681a      	ldreq	r2, [r3, #0]
 801e73c:	685b      	ldreq	r3, [r3, #4]
 801e73e:	6063      	str	r3, [r4, #4]
 801e740:	bf04      	itt	eq
 801e742:	1852      	addeq	r2, r2, r1
 801e744:	6022      	streq	r2, [r4, #0]
 801e746:	6004      	str	r4, [r0, #0]
 801e748:	e7ec      	b.n	801e724 <_free_r+0x24>
 801e74a:	4613      	mov	r3, r2
 801e74c:	685a      	ldr	r2, [r3, #4]
 801e74e:	b10a      	cbz	r2, 801e754 <_free_r+0x54>
 801e750:	42a2      	cmp	r2, r4
 801e752:	d9fa      	bls.n	801e74a <_free_r+0x4a>
 801e754:	6819      	ldr	r1, [r3, #0]
 801e756:	1858      	adds	r0, r3, r1
 801e758:	42a0      	cmp	r0, r4
 801e75a:	d10b      	bne.n	801e774 <_free_r+0x74>
 801e75c:	6820      	ldr	r0, [r4, #0]
 801e75e:	4401      	add	r1, r0
 801e760:	1858      	adds	r0, r3, r1
 801e762:	4282      	cmp	r2, r0
 801e764:	6019      	str	r1, [r3, #0]
 801e766:	d1dd      	bne.n	801e724 <_free_r+0x24>
 801e768:	6810      	ldr	r0, [r2, #0]
 801e76a:	6852      	ldr	r2, [r2, #4]
 801e76c:	605a      	str	r2, [r3, #4]
 801e76e:	4401      	add	r1, r0
 801e770:	6019      	str	r1, [r3, #0]
 801e772:	e7d7      	b.n	801e724 <_free_r+0x24>
 801e774:	d902      	bls.n	801e77c <_free_r+0x7c>
 801e776:	230c      	movs	r3, #12
 801e778:	602b      	str	r3, [r5, #0]
 801e77a:	e7d3      	b.n	801e724 <_free_r+0x24>
 801e77c:	6820      	ldr	r0, [r4, #0]
 801e77e:	1821      	adds	r1, r4, r0
 801e780:	428a      	cmp	r2, r1
 801e782:	bf04      	itt	eq
 801e784:	6811      	ldreq	r1, [r2, #0]
 801e786:	6852      	ldreq	r2, [r2, #4]
 801e788:	6062      	str	r2, [r4, #4]
 801e78a:	bf04      	itt	eq
 801e78c:	1809      	addeq	r1, r1, r0
 801e78e:	6021      	streq	r1, [r4, #0]
 801e790:	605c      	str	r4, [r3, #4]
 801e792:	e7c7      	b.n	801e724 <_free_r+0x24>
 801e794:	bd38      	pop	{r3, r4, r5, pc}
 801e796:	bf00      	nop
 801e798:	24000318 	.word	0x24000318

0801e79c <_malloc_r>:
 801e79c:	b570      	push	{r4, r5, r6, lr}
 801e79e:	1ccd      	adds	r5, r1, #3
 801e7a0:	f025 0503 	bic.w	r5, r5, #3
 801e7a4:	3508      	adds	r5, #8
 801e7a6:	2d0c      	cmp	r5, #12
 801e7a8:	bf38      	it	cc
 801e7aa:	250c      	movcc	r5, #12
 801e7ac:	2d00      	cmp	r5, #0
 801e7ae:	4606      	mov	r6, r0
 801e7b0:	db01      	blt.n	801e7b6 <_malloc_r+0x1a>
 801e7b2:	42a9      	cmp	r1, r5
 801e7b4:	d903      	bls.n	801e7be <_malloc_r+0x22>
 801e7b6:	230c      	movs	r3, #12
 801e7b8:	6033      	str	r3, [r6, #0]
 801e7ba:	2000      	movs	r0, #0
 801e7bc:	bd70      	pop	{r4, r5, r6, pc}
 801e7be:	f000 f8ad 	bl	801e91c <__malloc_lock>
 801e7c2:	4a21      	ldr	r2, [pc, #132]	; (801e848 <_malloc_r+0xac>)
 801e7c4:	6814      	ldr	r4, [r2, #0]
 801e7c6:	4621      	mov	r1, r4
 801e7c8:	b991      	cbnz	r1, 801e7f0 <_malloc_r+0x54>
 801e7ca:	4c20      	ldr	r4, [pc, #128]	; (801e84c <_malloc_r+0xb0>)
 801e7cc:	6823      	ldr	r3, [r4, #0]
 801e7ce:	b91b      	cbnz	r3, 801e7d8 <_malloc_r+0x3c>
 801e7d0:	4630      	mov	r0, r6
 801e7d2:	f000 f83d 	bl	801e850 <_sbrk_r>
 801e7d6:	6020      	str	r0, [r4, #0]
 801e7d8:	4629      	mov	r1, r5
 801e7da:	4630      	mov	r0, r6
 801e7dc:	f000 f838 	bl	801e850 <_sbrk_r>
 801e7e0:	1c43      	adds	r3, r0, #1
 801e7e2:	d124      	bne.n	801e82e <_malloc_r+0x92>
 801e7e4:	230c      	movs	r3, #12
 801e7e6:	6033      	str	r3, [r6, #0]
 801e7e8:	4630      	mov	r0, r6
 801e7ea:	f000 f898 	bl	801e91e <__malloc_unlock>
 801e7ee:	e7e4      	b.n	801e7ba <_malloc_r+0x1e>
 801e7f0:	680b      	ldr	r3, [r1, #0]
 801e7f2:	1b5b      	subs	r3, r3, r5
 801e7f4:	d418      	bmi.n	801e828 <_malloc_r+0x8c>
 801e7f6:	2b0b      	cmp	r3, #11
 801e7f8:	d90f      	bls.n	801e81a <_malloc_r+0x7e>
 801e7fa:	600b      	str	r3, [r1, #0]
 801e7fc:	50cd      	str	r5, [r1, r3]
 801e7fe:	18cc      	adds	r4, r1, r3
 801e800:	4630      	mov	r0, r6
 801e802:	f000 f88c 	bl	801e91e <__malloc_unlock>
 801e806:	f104 000b 	add.w	r0, r4, #11
 801e80a:	1d23      	adds	r3, r4, #4
 801e80c:	f020 0007 	bic.w	r0, r0, #7
 801e810:	1ac3      	subs	r3, r0, r3
 801e812:	d0d3      	beq.n	801e7bc <_malloc_r+0x20>
 801e814:	425a      	negs	r2, r3
 801e816:	50e2      	str	r2, [r4, r3]
 801e818:	e7d0      	b.n	801e7bc <_malloc_r+0x20>
 801e81a:	428c      	cmp	r4, r1
 801e81c:	684b      	ldr	r3, [r1, #4]
 801e81e:	bf16      	itet	ne
 801e820:	6063      	strne	r3, [r4, #4]
 801e822:	6013      	streq	r3, [r2, #0]
 801e824:	460c      	movne	r4, r1
 801e826:	e7eb      	b.n	801e800 <_malloc_r+0x64>
 801e828:	460c      	mov	r4, r1
 801e82a:	6849      	ldr	r1, [r1, #4]
 801e82c:	e7cc      	b.n	801e7c8 <_malloc_r+0x2c>
 801e82e:	1cc4      	adds	r4, r0, #3
 801e830:	f024 0403 	bic.w	r4, r4, #3
 801e834:	42a0      	cmp	r0, r4
 801e836:	d005      	beq.n	801e844 <_malloc_r+0xa8>
 801e838:	1a21      	subs	r1, r4, r0
 801e83a:	4630      	mov	r0, r6
 801e83c:	f000 f808 	bl	801e850 <_sbrk_r>
 801e840:	3001      	adds	r0, #1
 801e842:	d0cf      	beq.n	801e7e4 <_malloc_r+0x48>
 801e844:	6025      	str	r5, [r4, #0]
 801e846:	e7db      	b.n	801e800 <_malloc_r+0x64>
 801e848:	24000318 	.word	0x24000318
 801e84c:	2400031c 	.word	0x2400031c

0801e850 <_sbrk_r>:
 801e850:	b538      	push	{r3, r4, r5, lr}
 801e852:	4c06      	ldr	r4, [pc, #24]	; (801e86c <_sbrk_r+0x1c>)
 801e854:	2300      	movs	r3, #0
 801e856:	4605      	mov	r5, r0
 801e858:	4608      	mov	r0, r1
 801e85a:	6023      	str	r3, [r4, #0]
 801e85c:	f7f4 f9dc 	bl	8012c18 <_sbrk>
 801e860:	1c43      	adds	r3, r0, #1
 801e862:	d102      	bne.n	801e86a <_sbrk_r+0x1a>
 801e864:	6823      	ldr	r3, [r4, #0]
 801e866:	b103      	cbz	r3, 801e86a <_sbrk_r+0x1a>
 801e868:	602b      	str	r3, [r5, #0]
 801e86a:	bd38      	pop	{r3, r4, r5, pc}
 801e86c:	24001fb0 	.word	0x24001fb0

0801e870 <strcat>:
 801e870:	b510      	push	{r4, lr}
 801e872:	4603      	mov	r3, r0
 801e874:	781a      	ldrb	r2, [r3, #0]
 801e876:	1c5c      	adds	r4, r3, #1
 801e878:	b93a      	cbnz	r2, 801e88a <strcat+0x1a>
 801e87a:	3b01      	subs	r3, #1
 801e87c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e880:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e884:	2a00      	cmp	r2, #0
 801e886:	d1f9      	bne.n	801e87c <strcat+0xc>
 801e888:	bd10      	pop	{r4, pc}
 801e88a:	4623      	mov	r3, r4
 801e88c:	e7f2      	b.n	801e874 <strcat+0x4>

0801e88e <strcpy>:
 801e88e:	4603      	mov	r3, r0
 801e890:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e894:	f803 2b01 	strb.w	r2, [r3], #1
 801e898:	2a00      	cmp	r2, #0
 801e89a:	d1f9      	bne.n	801e890 <strcpy+0x2>
 801e89c:	4770      	bx	lr
	...

0801e8a0 <__utoa>:
 801e8a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e8a2:	4b1d      	ldr	r3, [pc, #116]	; (801e918 <__utoa+0x78>)
 801e8a4:	b08b      	sub	sp, #44	; 0x2c
 801e8a6:	4605      	mov	r5, r0
 801e8a8:	460c      	mov	r4, r1
 801e8aa:	466e      	mov	r6, sp
 801e8ac:	f103 0c20 	add.w	ip, r3, #32
 801e8b0:	6818      	ldr	r0, [r3, #0]
 801e8b2:	6859      	ldr	r1, [r3, #4]
 801e8b4:	4637      	mov	r7, r6
 801e8b6:	c703      	stmia	r7!, {r0, r1}
 801e8b8:	3308      	adds	r3, #8
 801e8ba:	4563      	cmp	r3, ip
 801e8bc:	463e      	mov	r6, r7
 801e8be:	d1f7      	bne.n	801e8b0 <__utoa+0x10>
 801e8c0:	6818      	ldr	r0, [r3, #0]
 801e8c2:	791b      	ldrb	r3, [r3, #4]
 801e8c4:	713b      	strb	r3, [r7, #4]
 801e8c6:	1e93      	subs	r3, r2, #2
 801e8c8:	2b22      	cmp	r3, #34	; 0x22
 801e8ca:	6038      	str	r0, [r7, #0]
 801e8cc:	f04f 0300 	mov.w	r3, #0
 801e8d0:	d904      	bls.n	801e8dc <__utoa+0x3c>
 801e8d2:	7023      	strb	r3, [r4, #0]
 801e8d4:	461c      	mov	r4, r3
 801e8d6:	4620      	mov	r0, r4
 801e8d8:	b00b      	add	sp, #44	; 0x2c
 801e8da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8dc:	1e66      	subs	r6, r4, #1
 801e8de:	fbb5 f0f2 	udiv	r0, r5, r2
 801e8e2:	af0a      	add	r7, sp, #40	; 0x28
 801e8e4:	fb02 5510 	mls	r5, r2, r0, r5
 801e8e8:	443d      	add	r5, r7
 801e8ea:	1c59      	adds	r1, r3, #1
 801e8ec:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801e8f0:	f806 5f01 	strb.w	r5, [r6, #1]!
 801e8f4:	4605      	mov	r5, r0
 801e8f6:	b968      	cbnz	r0, 801e914 <__utoa+0x74>
 801e8f8:	5460      	strb	r0, [r4, r1]
 801e8fa:	4423      	add	r3, r4
 801e8fc:	4622      	mov	r2, r4
 801e8fe:	1b19      	subs	r1, r3, r4
 801e900:	1b10      	subs	r0, r2, r4
 801e902:	4281      	cmp	r1, r0
 801e904:	dde7      	ble.n	801e8d6 <__utoa+0x36>
 801e906:	7811      	ldrb	r1, [r2, #0]
 801e908:	7818      	ldrb	r0, [r3, #0]
 801e90a:	f802 0b01 	strb.w	r0, [r2], #1
 801e90e:	f803 1901 	strb.w	r1, [r3], #-1
 801e912:	e7f4      	b.n	801e8fe <__utoa+0x5e>
 801e914:	460b      	mov	r3, r1
 801e916:	e7e2      	b.n	801e8de <__utoa+0x3e>
 801e918:	0801fa28 	.word	0x0801fa28

0801e91c <__malloc_lock>:
 801e91c:	4770      	bx	lr

0801e91e <__malloc_unlock>:
 801e91e:	4770      	bx	lr

0801e920 <cos>:
 801e920:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e922:	eeb0 7b40 	vmov.f64	d7, d0
 801e926:	ee17 3a90 	vmov	r3, s15
 801e92a:	4a19      	ldr	r2, [pc, #100]	; (801e990 <cos+0x70>)
 801e92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e930:	4293      	cmp	r3, r2
 801e932:	dc04      	bgt.n	801e93e <cos+0x1e>
 801e934:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e988 <cos+0x68>
 801e938:	f000 fb22 	bl	801ef80 <__kernel_cos>
 801e93c:	e004      	b.n	801e948 <cos+0x28>
 801e93e:	4a15      	ldr	r2, [pc, #84]	; (801e994 <cos+0x74>)
 801e940:	4293      	cmp	r3, r2
 801e942:	dd04      	ble.n	801e94e <cos+0x2e>
 801e944:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e948:	b005      	add	sp, #20
 801e94a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e94e:	4668      	mov	r0, sp
 801e950:	f000 f9da 	bl	801ed08 <__ieee754_rem_pio2>
 801e954:	f000 0003 	and.w	r0, r0, #3
 801e958:	2801      	cmp	r0, #1
 801e95a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e95e:	ed9d 0b00 	vldr	d0, [sp]
 801e962:	d007      	beq.n	801e974 <cos+0x54>
 801e964:	2802      	cmp	r0, #2
 801e966:	d00a      	beq.n	801e97e <cos+0x5e>
 801e968:	2800      	cmp	r0, #0
 801e96a:	d0e5      	beq.n	801e938 <cos+0x18>
 801e96c:	2001      	movs	r0, #1
 801e96e:	f000 fe0f 	bl	801f590 <__kernel_sin>
 801e972:	e7e9      	b.n	801e948 <cos+0x28>
 801e974:	f000 fe0c 	bl	801f590 <__kernel_sin>
 801e978:	eeb1 0b40 	vneg.f64	d0, d0
 801e97c:	e7e4      	b.n	801e948 <cos+0x28>
 801e97e:	f000 faff 	bl	801ef80 <__kernel_cos>
 801e982:	e7f9      	b.n	801e978 <cos+0x58>
 801e984:	f3af 8000 	nop.w
	...
 801e990:	3fe921fb 	.word	0x3fe921fb
 801e994:	7fefffff 	.word	0x7fefffff

0801e998 <sin>:
 801e998:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e99a:	eeb0 7b40 	vmov.f64	d7, d0
 801e99e:	ee17 3a90 	vmov	r3, s15
 801e9a2:	4a19      	ldr	r2, [pc, #100]	; (801ea08 <sin+0x70>)
 801e9a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e9a8:	4293      	cmp	r3, r2
 801e9aa:	dc05      	bgt.n	801e9b8 <sin+0x20>
 801e9ac:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801ea00 <sin+0x68>
 801e9b0:	2000      	movs	r0, #0
 801e9b2:	f000 fded 	bl	801f590 <__kernel_sin>
 801e9b6:	e004      	b.n	801e9c2 <sin+0x2a>
 801e9b8:	4a14      	ldr	r2, [pc, #80]	; (801ea0c <sin+0x74>)
 801e9ba:	4293      	cmp	r3, r2
 801e9bc:	dd04      	ble.n	801e9c8 <sin+0x30>
 801e9be:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e9c2:	b005      	add	sp, #20
 801e9c4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e9c8:	4668      	mov	r0, sp
 801e9ca:	f000 f99d 	bl	801ed08 <__ieee754_rem_pio2>
 801e9ce:	f000 0003 	and.w	r0, r0, #3
 801e9d2:	2801      	cmp	r0, #1
 801e9d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e9d8:	ed9d 0b00 	vldr	d0, [sp]
 801e9dc:	d004      	beq.n	801e9e8 <sin+0x50>
 801e9de:	2802      	cmp	r0, #2
 801e9e0:	d005      	beq.n	801e9ee <sin+0x56>
 801e9e2:	b950      	cbnz	r0, 801e9fa <sin+0x62>
 801e9e4:	2001      	movs	r0, #1
 801e9e6:	e7e4      	b.n	801e9b2 <sin+0x1a>
 801e9e8:	f000 faca 	bl	801ef80 <__kernel_cos>
 801e9ec:	e7e9      	b.n	801e9c2 <sin+0x2a>
 801e9ee:	2001      	movs	r0, #1
 801e9f0:	f000 fdce 	bl	801f590 <__kernel_sin>
 801e9f4:	eeb1 0b40 	vneg.f64	d0, d0
 801e9f8:	e7e3      	b.n	801e9c2 <sin+0x2a>
 801e9fa:	f000 fac1 	bl	801ef80 <__kernel_cos>
 801e9fe:	e7f9      	b.n	801e9f4 <sin+0x5c>
	...
 801ea08:	3fe921fb 	.word	0x3fe921fb
 801ea0c:	7fefffff 	.word	0x7fefffff

0801ea10 <exp>:
 801ea10:	b510      	push	{r4, lr}
 801ea12:	ed2d 8b04 	vpush	{d8-d9}
 801ea16:	eeb0 8b40 	vmov.f64	d8, d0
 801ea1a:	4c33      	ldr	r4, [pc, #204]	; (801eae8 <exp+0xd8>)
 801ea1c:	b08a      	sub	sp, #40	; 0x28
 801ea1e:	f000 f86b 	bl	801eaf8 <__ieee754_exp>
 801ea22:	f994 3000 	ldrsb.w	r3, [r4]
 801ea26:	eeb0 9b40 	vmov.f64	d9, d0
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	d029      	beq.n	801ea82 <exp+0x72>
 801ea2e:	eeb0 0b48 	vmov.f64	d0, d8
 801ea32:	f000 fe0e 	bl	801f652 <finite>
 801ea36:	b320      	cbz	r0, 801ea82 <exp+0x72>
 801ea38:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801ead8 <exp+0xc8>
 801ea3c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ea40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ea44:	dd2e      	ble.n	801eaa4 <exp+0x94>
 801ea46:	2303      	movs	r3, #3
 801ea48:	9300      	str	r3, [sp, #0]
 801ea4a:	4b28      	ldr	r3, [pc, #160]	; (801eaec <exp+0xdc>)
 801ea4c:	9301      	str	r3, [sp, #4]
 801ea4e:	2300      	movs	r3, #0
 801ea50:	9308      	str	r3, [sp, #32]
 801ea52:	f994 3000 	ldrsb.w	r3, [r4]
 801ea56:	ed8d 8b04 	vstr	d8, [sp, #16]
 801ea5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801ea5e:	b9b3      	cbnz	r3, 801ea8e <exp+0x7e>
 801ea60:	4b23      	ldr	r3, [pc, #140]	; (801eaf0 <exp+0xe0>)
 801ea62:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801ea66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801ea6a:	4668      	mov	r0, sp
 801ea6c:	f000 fe74 	bl	801f758 <matherr>
 801ea70:	b198      	cbz	r0, 801ea9a <exp+0x8a>
 801ea72:	9b08      	ldr	r3, [sp, #32]
 801ea74:	b11b      	cbz	r3, 801ea7e <exp+0x6e>
 801ea76:	f7ff fde7 	bl	801e648 <__errno>
 801ea7a:	9b08      	ldr	r3, [sp, #32]
 801ea7c:	6003      	str	r3, [r0, #0]
 801ea7e:	ed9d 9b06 	vldr	d9, [sp, #24]
 801ea82:	eeb0 0b49 	vmov.f64	d0, d9
 801ea86:	b00a      	add	sp, #40	; 0x28
 801ea88:	ecbd 8b04 	vpop	{d8-d9}
 801ea8c:	bd10      	pop	{r4, pc}
 801ea8e:	4919      	ldr	r1, [pc, #100]	; (801eaf4 <exp+0xe4>)
 801ea90:	2000      	movs	r0, #0
 801ea92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ea96:	2b02      	cmp	r3, #2
 801ea98:	d1e7      	bne.n	801ea6a <exp+0x5a>
 801ea9a:	f7ff fdd5 	bl	801e648 <__errno>
 801ea9e:	2322      	movs	r3, #34	; 0x22
 801eaa0:	6003      	str	r3, [r0, #0]
 801eaa2:	e7e6      	b.n	801ea72 <exp+0x62>
 801eaa4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801eae0 <exp+0xd0>
 801eaa8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801eaac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eab0:	d5e7      	bpl.n	801ea82 <exp+0x72>
 801eab2:	2304      	movs	r3, #4
 801eab4:	9300      	str	r3, [sp, #0]
 801eab6:	4b0d      	ldr	r3, [pc, #52]	; (801eaec <exp+0xdc>)
 801eab8:	9301      	str	r3, [sp, #4]
 801eaba:	2300      	movs	r3, #0
 801eabc:	9308      	str	r3, [sp, #32]
 801eabe:	2200      	movs	r2, #0
 801eac0:	2300      	movs	r3, #0
 801eac2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801eac6:	ed8d 8b04 	vstr	d8, [sp, #16]
 801eaca:	ed8d 8b02 	vstr	d8, [sp, #8]
 801eace:	f994 3000 	ldrsb.w	r3, [r4]
 801ead2:	e7e0      	b.n	801ea96 <exp+0x86>
 801ead4:	f3af 8000 	nop.w
 801ead8:	fefa39ef 	.word	0xfefa39ef
 801eadc:	40862e42 	.word	0x40862e42
 801eae0:	d52d3051 	.word	0xd52d3051
 801eae4:	c0874910 	.word	0xc0874910
 801eae8:	240001f0 	.word	0x240001f0
 801eaec:	0801fa4d 	.word	0x0801fa4d
 801eaf0:	47efffff 	.word	0x47efffff
 801eaf4:	7ff00000 	.word	0x7ff00000

0801eaf8 <__ieee754_exp>:
 801eaf8:	ee10 1a90 	vmov	r1, s1
 801eafc:	4b7a      	ldr	r3, [pc, #488]	; (801ece8 <__ieee754_exp+0x1f0>)
 801eafe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801eb02:	429a      	cmp	r2, r3
 801eb04:	b082      	sub	sp, #8
 801eb06:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801eb0a:	d928      	bls.n	801eb5e <__ieee754_exp+0x66>
 801eb0c:	4b77      	ldr	r3, [pc, #476]	; (801ecec <__ieee754_exp+0x1f4>)
 801eb0e:	429a      	cmp	r2, r3
 801eb10:	d90f      	bls.n	801eb32 <__ieee754_exp+0x3a>
 801eb12:	ee10 3a10 	vmov	r3, s0
 801eb16:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801eb1a:	430b      	orrs	r3, r1
 801eb1c:	d003      	beq.n	801eb26 <__ieee754_exp+0x2e>
 801eb1e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801eb22:	b002      	add	sp, #8
 801eb24:	4770      	bx	lr
 801eb26:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801ec80 <__ieee754_exp+0x188>
 801eb2a:	2800      	cmp	r0, #0
 801eb2c:	fe00 0b07 	vseleq.f64	d0, d0, d7
 801eb30:	e7f7      	b.n	801eb22 <__ieee754_exp+0x2a>
 801eb32:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801ec88 <__ieee754_exp+0x190>
 801eb36:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801eb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb3e:	dd04      	ble.n	801eb4a <__ieee754_exp+0x52>
 801eb40:	ed9f 0b53 	vldr	d0, [pc, #332]	; 801ec90 <__ieee754_exp+0x198>
 801eb44:	ee20 0b00 	vmul.f64	d0, d0, d0
 801eb48:	e7eb      	b.n	801eb22 <__ieee754_exp+0x2a>
 801eb4a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801ec98 <__ieee754_exp+0x1a0>
 801eb4e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801eb52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb56:	d505      	bpl.n	801eb64 <__ieee754_exp+0x6c>
 801eb58:	ed9f 0b49 	vldr	d0, [pc, #292]	; 801ec80 <__ieee754_exp+0x188>
 801eb5c:	e7e1      	b.n	801eb22 <__ieee754_exp+0x2a>
 801eb5e:	4b64      	ldr	r3, [pc, #400]	; (801ecf0 <__ieee754_exp+0x1f8>)
 801eb60:	429a      	cmp	r2, r3
 801eb62:	d956      	bls.n	801ec12 <__ieee754_exp+0x11a>
 801eb64:	4b63      	ldr	r3, [pc, #396]	; (801ecf4 <__ieee754_exp+0x1fc>)
 801eb66:	429a      	cmp	r2, r3
 801eb68:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801eb6c:	d838      	bhi.n	801ebe0 <__ieee754_exp+0xe8>
 801eb6e:	4b62      	ldr	r3, [pc, #392]	; (801ecf8 <__ieee754_exp+0x200>)
 801eb70:	4413      	add	r3, r2
 801eb72:	ed93 6b00 	vldr	d6, [r3]
 801eb76:	4b61      	ldr	r3, [pc, #388]	; (801ecfc <__ieee754_exp+0x204>)
 801eb78:	ee30 6b46 	vsub.f64	d6, d0, d6
 801eb7c:	4413      	add	r3, r2
 801eb7e:	ed93 7b00 	vldr	d7, [r3]
 801eb82:	f1c0 0301 	rsb	r3, r0, #1
 801eb86:	1a1b      	subs	r3, r3, r0
 801eb88:	ee36 0b47 	vsub.f64	d0, d6, d7
 801eb8c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801eca0 <__ieee754_exp+0x1a8>
 801eb90:	ee20 5b00 	vmul.f64	d5, d0, d0
 801eb94:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801eca8 <__ieee754_exp+0x1b0>
 801eb98:	eea5 3b04 	vfma.f64	d3, d5, d4
 801eb9c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ecb0 <__ieee754_exp+0x1b8>
 801eba0:	eea3 4b05 	vfma.f64	d4, d3, d5
 801eba4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801ecb8 <__ieee754_exp+0x1c0>
 801eba8:	eea4 3b05 	vfma.f64	d3, d4, d5
 801ebac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ecc0 <__ieee754_exp+0x1c8>
 801ebb0:	eea3 4b05 	vfma.f64	d4, d3, d5
 801ebb4:	eeb0 3b40 	vmov.f64	d3, d0
 801ebb8:	eea4 3b45 	vfms.f64	d3, d4, d5
 801ebbc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801ebc0:	eeb0 5b43 	vmov.f64	d5, d3
 801ebc4:	ee20 2b03 	vmul.f64	d2, d0, d3
 801ebc8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801ebcc:	bba3      	cbnz	r3, 801ec38 <__ieee754_exp+0x140>
 801ebce:	ee35 5b44 	vsub.f64	d5, d5, d4
 801ebd2:	ee82 7b05 	vdiv.f64	d7, d2, d5
 801ebd6:	ee37 0b40 	vsub.f64	d0, d7, d0
 801ebda:	ee33 0b40 	vsub.f64	d0, d3, d0
 801ebde:	e7a0      	b.n	801eb22 <__ieee754_exp+0x2a>
 801ebe0:	4b47      	ldr	r3, [pc, #284]	; (801ed00 <__ieee754_exp+0x208>)
 801ebe2:	4413      	add	r3, r2
 801ebe4:	ed93 7b00 	vldr	d7, [r3]
 801ebe8:	ed9f 6b37 	vldr	d6, [pc, #220]	; 801ecc8 <__ieee754_exp+0x1d0>
 801ebec:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801ecd0 <__ieee754_exp+0x1d8>
 801ebf0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801ebf4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801ecd8 <__ieee754_exp+0x1e0>
 801ebf8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801ebfc:	ee17 3a90 	vmov	r3, s15
 801ec00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ec04:	eea7 0b46 	vfms.f64	d0, d7, d6
 801ec08:	ee27 7b05 	vmul.f64	d7, d7, d5
 801ec0c:	eeb0 6b40 	vmov.f64	d6, d0
 801ec10:	e7ba      	b.n	801eb88 <__ieee754_exp+0x90>
 801ec12:	4b3c      	ldr	r3, [pc, #240]	; (801ed04 <__ieee754_exp+0x20c>)
 801ec14:	429a      	cmp	r2, r3
 801ec16:	d80d      	bhi.n	801ec34 <__ieee754_exp+0x13c>
 801ec18:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801ec1c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801ec90 <__ieee754_exp+0x198>
 801ec20:	ee30 5b05 	vadd.f64	d5, d0, d5
 801ec24:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801ec28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ec2c:	dd02      	ble.n	801ec34 <__ieee754_exp+0x13c>
 801ec2e:	ee30 0b04 	vadd.f64	d0, d0, d4
 801ec32:	e776      	b.n	801eb22 <__ieee754_exp+0x2a>
 801ec34:	2300      	movs	r3, #0
 801ec36:	e7a9      	b.n	801eb8c <__ieee754_exp+0x94>
 801ec38:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801ec3c:	ee34 5b45 	vsub.f64	d5, d4, d5
 801ec40:	428b      	cmp	r3, r1
 801ec42:	ee82 4b05 	vdiv.f64	d4, d2, d5
 801ec46:	ee37 7b44 	vsub.f64	d7, d7, d4
 801ec4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ec4e:	ee33 7b47 	vsub.f64	d7, d3, d7
 801ec52:	ed8d 7b00 	vstr	d7, [sp]
 801ec56:	9a01      	ldr	r2, [sp, #4]
 801ec58:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ec5c:	db04      	blt.n	801ec68 <__ieee754_exp+0x170>
 801ec5e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801ec62:	ec41 0b10 	vmov	d0, r0, r1
 801ec66:	e75c      	b.n	801eb22 <__ieee754_exp+0x2a>
 801ec68:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801ec6c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801ec70:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 801ece0 <__ieee754_exp+0x1e8>
 801ec74:	ec41 0b10 	vmov	d0, r0, r1
 801ec78:	ee20 0b07 	vmul.f64	d0, d0, d7
 801ec7c:	e751      	b.n	801eb22 <__ieee754_exp+0x2a>
 801ec7e:	bf00      	nop
	...
 801ec88:	fefa39ef 	.word	0xfefa39ef
 801ec8c:	40862e42 	.word	0x40862e42
 801ec90:	8800759c 	.word	0x8800759c
 801ec94:	7e37e43c 	.word	0x7e37e43c
 801ec98:	d52d3051 	.word	0xd52d3051
 801ec9c:	c0874910 	.word	0xc0874910
 801eca0:	72bea4d0 	.word	0x72bea4d0
 801eca4:	3e663769 	.word	0x3e663769
 801eca8:	c5d26bf1 	.word	0xc5d26bf1
 801ecac:	bebbbd41 	.word	0xbebbbd41
 801ecb0:	af25de2c 	.word	0xaf25de2c
 801ecb4:	3f11566a 	.word	0x3f11566a
 801ecb8:	16bebd93 	.word	0x16bebd93
 801ecbc:	bf66c16c 	.word	0xbf66c16c
 801ecc0:	5555553e 	.word	0x5555553e
 801ecc4:	3fc55555 	.word	0x3fc55555
 801ecc8:	652b82fe 	.word	0x652b82fe
 801eccc:	3ff71547 	.word	0x3ff71547
 801ecd0:	35793c76 	.word	0x35793c76
 801ecd4:	3dea39ef 	.word	0x3dea39ef
 801ecd8:	fee00000 	.word	0xfee00000
 801ecdc:	3fe62e42 	.word	0x3fe62e42
 801ece0:	00000000 	.word	0x00000000
 801ece4:	01700000 	.word	0x01700000
 801ece8:	40862e41 	.word	0x40862e41
 801ecec:	7fefffff 	.word	0x7fefffff
 801ecf0:	3fd62e42 	.word	0x3fd62e42
 801ecf4:	3ff0a2b1 	.word	0x3ff0a2b1
 801ecf8:	0801fa68 	.word	0x0801fa68
 801ecfc:	0801fa78 	.word	0x0801fa78
 801ed00:	0801fa58 	.word	0x0801fa58
 801ed04:	3e2fffff 	.word	0x3e2fffff

0801ed08 <__ieee754_rem_pio2>:
 801ed08:	b570      	push	{r4, r5, r6, lr}
 801ed0a:	eeb0 7b40 	vmov.f64	d7, d0
 801ed0e:	ee17 5a90 	vmov	r5, s15
 801ed12:	4b95      	ldr	r3, [pc, #596]	; (801ef68 <__ieee754_rem_pio2+0x260>)
 801ed14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801ed18:	429e      	cmp	r6, r3
 801ed1a:	b088      	sub	sp, #32
 801ed1c:	4604      	mov	r4, r0
 801ed1e:	dc07      	bgt.n	801ed30 <__ieee754_rem_pio2+0x28>
 801ed20:	2200      	movs	r2, #0
 801ed22:	2300      	movs	r3, #0
 801ed24:	ed84 0b00 	vstr	d0, [r4]
 801ed28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801ed2c:	2000      	movs	r0, #0
 801ed2e:	e01b      	b.n	801ed68 <__ieee754_rem_pio2+0x60>
 801ed30:	4b8e      	ldr	r3, [pc, #568]	; (801ef6c <__ieee754_rem_pio2+0x264>)
 801ed32:	429e      	cmp	r6, r3
 801ed34:	dc3b      	bgt.n	801edae <__ieee754_rem_pio2+0xa6>
 801ed36:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801ed3a:	2d00      	cmp	r5, #0
 801ed3c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 801ef28 <__ieee754_rem_pio2+0x220>
 801ed40:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801ed44:	dd19      	ble.n	801ed7a <__ieee754_rem_pio2+0x72>
 801ed46:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ed4a:	429e      	cmp	r6, r3
 801ed4c:	d00e      	beq.n	801ed6c <__ieee754_rem_pio2+0x64>
 801ed4e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801ef30 <__ieee754_rem_pio2+0x228>
 801ed52:	ee37 5b46 	vsub.f64	d5, d7, d6
 801ed56:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ed5a:	ed84 5b00 	vstr	d5, [r4]
 801ed5e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed62:	ed84 7b02 	vstr	d7, [r4, #8]
 801ed66:	2001      	movs	r0, #1
 801ed68:	b008      	add	sp, #32
 801ed6a:	bd70      	pop	{r4, r5, r6, pc}
 801ed6c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801ef38 <__ieee754_rem_pio2+0x230>
 801ed70:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ed74:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801ef40 <__ieee754_rem_pio2+0x238>
 801ed78:	e7eb      	b.n	801ed52 <__ieee754_rem_pio2+0x4a>
 801ed7a:	429e      	cmp	r6, r3
 801ed7c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801ed80:	d00e      	beq.n	801eda0 <__ieee754_rem_pio2+0x98>
 801ed82:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801ef30 <__ieee754_rem_pio2+0x228>
 801ed86:	ee37 5b06 	vadd.f64	d5, d7, d6
 801ed8a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801ed8e:	ed84 5b00 	vstr	d5, [r4]
 801ed92:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ed96:	f04f 30ff 	mov.w	r0, #4294967295
 801ed9a:	ed84 7b02 	vstr	d7, [r4, #8]
 801ed9e:	e7e3      	b.n	801ed68 <__ieee754_rem_pio2+0x60>
 801eda0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801ef38 <__ieee754_rem_pio2+0x230>
 801eda4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eda8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801ef40 <__ieee754_rem_pio2+0x238>
 801edac:	e7eb      	b.n	801ed86 <__ieee754_rem_pio2+0x7e>
 801edae:	4b70      	ldr	r3, [pc, #448]	; (801ef70 <__ieee754_rem_pio2+0x268>)
 801edb0:	429e      	cmp	r6, r3
 801edb2:	dc6c      	bgt.n	801ee8e <__ieee754_rem_pio2+0x186>
 801edb4:	f000 fc44 	bl	801f640 <fabs>
 801edb8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801edbc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 801ef48 <__ieee754_rem_pio2+0x240>
 801edc0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801edc4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801edc8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801edcc:	ee17 0a90 	vmov	r0, s15
 801edd0:	eeb1 5b44 	vneg.f64	d5, d4
 801edd4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801ef28 <__ieee754_rem_pio2+0x220>
 801edd8:	eea5 0b07 	vfma.f64	d0, d5, d7
 801eddc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801ef30 <__ieee754_rem_pio2+0x228>
 801ede0:	281f      	cmp	r0, #31
 801ede2:	ee24 7b07 	vmul.f64	d7, d4, d7
 801ede6:	ee30 6b47 	vsub.f64	d6, d0, d7
 801edea:	dc08      	bgt.n	801edfe <__ieee754_rem_pio2+0xf6>
 801edec:	1e42      	subs	r2, r0, #1
 801edee:	4b61      	ldr	r3, [pc, #388]	; (801ef74 <__ieee754_rem_pio2+0x26c>)
 801edf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801edf4:	42b3      	cmp	r3, r6
 801edf6:	d002      	beq.n	801edfe <__ieee754_rem_pio2+0xf6>
 801edf8:	ed84 6b00 	vstr	d6, [r4]
 801edfc:	e022      	b.n	801ee44 <__ieee754_rem_pio2+0x13c>
 801edfe:	ee16 3a90 	vmov	r3, s13
 801ee02:	1536      	asrs	r6, r6, #20
 801ee04:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ee08:	1af3      	subs	r3, r6, r3
 801ee0a:	2b10      	cmp	r3, #16
 801ee0c:	ddf4      	ble.n	801edf8 <__ieee754_rem_pio2+0xf0>
 801ee0e:	eeb0 6b40 	vmov.f64	d6, d0
 801ee12:	ed9f 3b49 	vldr	d3, [pc, #292]	; 801ef38 <__ieee754_rem_pio2+0x230>
 801ee16:	eea5 6b03 	vfma.f64	d6, d5, d3
 801ee1a:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ee1e:	eea5 7b03 	vfma.f64	d7, d5, d3
 801ee22:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801ef40 <__ieee754_rem_pio2+0x238>
 801ee26:	ee94 7b03 	vfnms.f64	d7, d4, d3
 801ee2a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801ee2e:	ee13 3a90 	vmov	r3, s7
 801ee32:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ee36:	1af6      	subs	r6, r6, r3
 801ee38:	2e31      	cmp	r6, #49	; 0x31
 801ee3a:	dc17      	bgt.n	801ee6c <__ieee754_rem_pio2+0x164>
 801ee3c:	eeb0 0b46 	vmov.f64	d0, d6
 801ee40:	ed84 3b00 	vstr	d3, [r4]
 801ee44:	ed94 6b00 	vldr	d6, [r4]
 801ee48:	2d00      	cmp	r5, #0
 801ee4a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ee4e:	ee30 7b47 	vsub.f64	d7, d0, d7
 801ee52:	ed84 7b02 	vstr	d7, [r4, #8]
 801ee56:	da87      	bge.n	801ed68 <__ieee754_rem_pio2+0x60>
 801ee58:	eeb1 6b46 	vneg.f64	d6, d6
 801ee5c:	ed84 6b00 	vstr	d6, [r4]
 801ee60:	eeb1 7b47 	vneg.f64	d7, d7
 801ee64:	4240      	negs	r0, r0
 801ee66:	ed84 7b02 	vstr	d7, [r4, #8]
 801ee6a:	e77d      	b.n	801ed68 <__ieee754_rem_pio2+0x60>
 801ee6c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 801ef50 <__ieee754_rem_pio2+0x248>
 801ee70:	eeb0 0b46 	vmov.f64	d0, d6
 801ee74:	eea5 0b03 	vfma.f64	d0, d5, d3
 801ee78:	ee36 7b40 	vsub.f64	d7, d6, d0
 801ee7c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 801ef58 <__ieee754_rem_pio2+0x250>
 801ee80:	eea5 7b03 	vfma.f64	d7, d5, d3
 801ee84:	ee94 7b06 	vfnms.f64	d7, d4, d6
 801ee88:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ee8c:	e7b4      	b.n	801edf8 <__ieee754_rem_pio2+0xf0>
 801ee8e:	4b3a      	ldr	r3, [pc, #232]	; (801ef78 <__ieee754_rem_pio2+0x270>)
 801ee90:	429e      	cmp	r6, r3
 801ee92:	dd06      	ble.n	801eea2 <__ieee754_rem_pio2+0x19a>
 801ee94:	ee30 7b40 	vsub.f64	d7, d0, d0
 801ee98:	ed80 7b02 	vstr	d7, [r0, #8]
 801ee9c:	ed80 7b00 	vstr	d7, [r0]
 801eea0:	e744      	b.n	801ed2c <__ieee754_rem_pio2+0x24>
 801eea2:	1532      	asrs	r2, r6, #20
 801eea4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801eea8:	ee10 0a10 	vmov	r0, s0
 801eeac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801eeb0:	ec41 0b17 	vmov	d7, r0, r1
 801eeb4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801eeb8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 801ef60 <__ieee754_rem_pio2+0x258>
 801eebc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eec0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eec4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801eec8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801eecc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801eed0:	a908      	add	r1, sp, #32
 801eed2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eed6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eeda:	ed8d 6b04 	vstr	d6, [sp, #16]
 801eede:	ee27 7b05 	vmul.f64	d7, d7, d5
 801eee2:	ed8d 7b06 	vstr	d7, [sp, #24]
 801eee6:	2303      	movs	r3, #3
 801eee8:	ed31 7b02 	vldmdb	r1!, {d7}
 801eeec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801eef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eef4:	f103 30ff 	add.w	r0, r3, #4294967295
 801eef8:	d013      	beq.n	801ef22 <__ieee754_rem_pio2+0x21a>
 801eefa:	4920      	ldr	r1, [pc, #128]	; (801ef7c <__ieee754_rem_pio2+0x274>)
 801eefc:	9101      	str	r1, [sp, #4]
 801eefe:	2102      	movs	r1, #2
 801ef00:	9100      	str	r1, [sp, #0]
 801ef02:	a802      	add	r0, sp, #8
 801ef04:	4621      	mov	r1, r4
 801ef06:	f000 f8a7 	bl	801f058 <__kernel_rem_pio2>
 801ef0a:	2d00      	cmp	r5, #0
 801ef0c:	f6bf af2c 	bge.w	801ed68 <__ieee754_rem_pio2+0x60>
 801ef10:	ed94 7b00 	vldr	d7, [r4]
 801ef14:	eeb1 7b47 	vneg.f64	d7, d7
 801ef18:	ed84 7b00 	vstr	d7, [r4]
 801ef1c:	ed94 7b02 	vldr	d7, [r4, #8]
 801ef20:	e79e      	b.n	801ee60 <__ieee754_rem_pio2+0x158>
 801ef22:	4603      	mov	r3, r0
 801ef24:	e7e0      	b.n	801eee8 <__ieee754_rem_pio2+0x1e0>
 801ef26:	bf00      	nop
 801ef28:	54400000 	.word	0x54400000
 801ef2c:	3ff921fb 	.word	0x3ff921fb
 801ef30:	1a626331 	.word	0x1a626331
 801ef34:	3dd0b461 	.word	0x3dd0b461
 801ef38:	1a600000 	.word	0x1a600000
 801ef3c:	3dd0b461 	.word	0x3dd0b461
 801ef40:	2e037073 	.word	0x2e037073
 801ef44:	3ba3198a 	.word	0x3ba3198a
 801ef48:	6dc9c883 	.word	0x6dc9c883
 801ef4c:	3fe45f30 	.word	0x3fe45f30
 801ef50:	2e000000 	.word	0x2e000000
 801ef54:	3ba3198a 	.word	0x3ba3198a
 801ef58:	252049c1 	.word	0x252049c1
 801ef5c:	397b839a 	.word	0x397b839a
 801ef60:	00000000 	.word	0x00000000
 801ef64:	41700000 	.word	0x41700000
 801ef68:	3fe921fb 	.word	0x3fe921fb
 801ef6c:	4002d97b 	.word	0x4002d97b
 801ef70:	413921fb 	.word	0x413921fb
 801ef74:	0801fa88 	.word	0x0801fa88
 801ef78:	7fefffff 	.word	0x7fefffff
 801ef7c:	0801fb08 	.word	0x0801fb08

0801ef80 <__kernel_cos>:
 801ef80:	ee10 1a90 	vmov	r1, s1
 801ef84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801ef88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ef8c:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801ef90:	da05      	bge.n	801ef9e <__kernel_cos+0x1e>
 801ef92:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801ef96:	ee16 3a90 	vmov	r3, s13
 801ef9a:	2b00      	cmp	r3, #0
 801ef9c:	d03d      	beq.n	801f01a <__kernel_cos+0x9a>
 801ef9e:	ee20 4b00 	vmul.f64	d4, d0, d0
 801efa2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801efa6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 801f020 <__kernel_cos+0xa0>
 801efaa:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801efae:	ee24 6b06 	vmul.f64	d6, d4, d6
 801efb2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801f028 <__kernel_cos+0xa8>
 801efb6:	eea4 5b03 	vfma.f64	d5, d4, d3
 801efba:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801f030 <__kernel_cos+0xb0>
 801efbe:	eea5 3b04 	vfma.f64	d3, d5, d4
 801efc2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801f038 <__kernel_cos+0xb8>
 801efc6:	eea3 5b04 	vfma.f64	d5, d3, d4
 801efca:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801f040 <__kernel_cos+0xc0>
 801efce:	4b20      	ldr	r3, [pc, #128]	; (801f050 <__kernel_cos+0xd0>)
 801efd0:	eea5 3b04 	vfma.f64	d3, d5, d4
 801efd4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801f048 <__kernel_cos+0xc8>
 801efd8:	4299      	cmp	r1, r3
 801efda:	eea3 5b04 	vfma.f64	d5, d3, d4
 801efde:	ee25 5b04 	vmul.f64	d5, d5, d4
 801efe2:	eea4 1b05 	vfma.f64	d1, d4, d5
 801efe6:	dc04      	bgt.n	801eff2 <__kernel_cos+0x72>
 801efe8:	ee36 6b41 	vsub.f64	d6, d6, d1
 801efec:	ee37 0b46 	vsub.f64	d0, d7, d6
 801eff0:	4770      	bx	lr
 801eff2:	4b18      	ldr	r3, [pc, #96]	; (801f054 <__kernel_cos+0xd4>)
 801eff4:	4299      	cmp	r1, r3
 801eff6:	dc0d      	bgt.n	801f014 <__kernel_cos+0x94>
 801eff8:	2200      	movs	r2, #0
 801effa:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801effe:	ec43 2b15 	vmov	d5, r2, r3
 801f002:	ee37 0b45 	vsub.f64	d0, d7, d5
 801f006:	ee36 6b45 	vsub.f64	d6, d6, d5
 801f00a:	ee36 6b41 	vsub.f64	d6, d6, d1
 801f00e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801f012:	4770      	bx	lr
 801f014:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801f018:	e7f3      	b.n	801f002 <__kernel_cos+0x82>
 801f01a:	eeb0 0b47 	vmov.f64	d0, d7
 801f01e:	4770      	bx	lr
 801f020:	be8838d4 	.word	0xbe8838d4
 801f024:	bda8fae9 	.word	0xbda8fae9
 801f028:	bdb4b1c4 	.word	0xbdb4b1c4
 801f02c:	3e21ee9e 	.word	0x3e21ee9e
 801f030:	809c52ad 	.word	0x809c52ad
 801f034:	be927e4f 	.word	0xbe927e4f
 801f038:	19cb1590 	.word	0x19cb1590
 801f03c:	3efa01a0 	.word	0x3efa01a0
 801f040:	16c15177 	.word	0x16c15177
 801f044:	bf56c16c 	.word	0xbf56c16c
 801f048:	5555554c 	.word	0x5555554c
 801f04c:	3fa55555 	.word	0x3fa55555
 801f050:	3fd33332 	.word	0x3fd33332
 801f054:	3fe90000 	.word	0x3fe90000

0801f058 <__kernel_rem_pio2>:
 801f058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f05c:	ed2d 8b06 	vpush	{d8-d10}
 801f060:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801f064:	469b      	mov	fp, r3
 801f066:	460e      	mov	r6, r1
 801f068:	4bc7      	ldr	r3, [pc, #796]	; (801f388 <__kernel_rem_pio2+0x330>)
 801f06a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801f06c:	9002      	str	r0, [sp, #8]
 801f06e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801f072:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801f074:	1ed1      	subs	r1, r2, #3
 801f076:	2318      	movs	r3, #24
 801f078:	f06f 0417 	mvn.w	r4, #23
 801f07c:	fb91 f1f3 	sdiv	r1, r1, r3
 801f080:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801f084:	f10b 3aff 	add.w	sl, fp, #4294967295
 801f088:	fb01 4404 	mla	r4, r1, r4, r4
 801f08c:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 801f370 <__kernel_rem_pio2+0x318>
 801f090:	4414      	add	r4, r2
 801f092:	eba1 050a 	sub.w	r5, r1, sl
 801f096:	aa1a      	add	r2, sp, #104	; 0x68
 801f098:	eb09 070a 	add.w	r7, r9, sl
 801f09c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801f0a0:	4696      	mov	lr, r2
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	42bb      	cmp	r3, r7
 801f0a6:	dd0f      	ble.n	801f0c8 <__kernel_rem_pio2+0x70>
 801f0a8:	af6a      	add	r7, sp, #424	; 0x1a8
 801f0aa:	2200      	movs	r2, #0
 801f0ac:	454a      	cmp	r2, r9
 801f0ae:	dc28      	bgt.n	801f102 <__kernel_rem_pio2+0xaa>
 801f0b0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801f0b4:	eb0b 0302 	add.w	r3, fp, r2
 801f0b8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801f0bc:	9d02      	ldr	r5, [sp, #8]
 801f0be:	ed9f 7bac 	vldr	d7, [pc, #688]	; 801f370 <__kernel_rem_pio2+0x318>
 801f0c2:	f04f 0c00 	mov.w	ip, #0
 801f0c6:	e016      	b.n	801f0f6 <__kernel_rem_pio2+0x9e>
 801f0c8:	42dd      	cmn	r5, r3
 801f0ca:	d409      	bmi.n	801f0e0 <__kernel_rem_pio2+0x88>
 801f0cc:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f0d0:	ee07 2a90 	vmov	s15, r2
 801f0d4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f0d8:	ecae 7b02 	vstmia	lr!, {d7}
 801f0dc:	3301      	adds	r3, #1
 801f0de:	e7e1      	b.n	801f0a4 <__kernel_rem_pio2+0x4c>
 801f0e0:	eeb0 7b46 	vmov.f64	d7, d6
 801f0e4:	e7f8      	b.n	801f0d8 <__kernel_rem_pio2+0x80>
 801f0e6:	ecb5 5b02 	vldmia	r5!, {d5}
 801f0ea:	ed33 6b02 	vldmdb	r3!, {d6}
 801f0ee:	f10c 0c01 	add.w	ip, ip, #1
 801f0f2:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f0f6:	45d4      	cmp	ip, sl
 801f0f8:	ddf5      	ble.n	801f0e6 <__kernel_rem_pio2+0x8e>
 801f0fa:	eca7 7b02 	vstmia	r7!, {d7}
 801f0fe:	3201      	adds	r2, #1
 801f100:	e7d4      	b.n	801f0ac <__kernel_rem_pio2+0x54>
 801f102:	ab06      	add	r3, sp, #24
 801f104:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801f108:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 801f378 <__kernel_rem_pio2+0x320>
 801f10c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 801f380 <__kernel_rem_pio2+0x328>
 801f110:	9304      	str	r3, [sp, #16]
 801f112:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801f116:	9303      	str	r3, [sp, #12]
 801f118:	464d      	mov	r5, r9
 801f11a:	ab92      	add	r3, sp, #584	; 0x248
 801f11c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 801f120:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801f124:	3f01      	subs	r7, #1
 801f126:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801f12a:	00ff      	lsls	r7, r7, #3
 801f12c:	ab92      	add	r3, sp, #584	; 0x248
 801f12e:	19da      	adds	r2, r3, r7
 801f130:	3a98      	subs	r2, #152	; 0x98
 801f132:	2300      	movs	r3, #0
 801f134:	1ae9      	subs	r1, r5, r3
 801f136:	2900      	cmp	r1, #0
 801f138:	dc4e      	bgt.n	801f1d8 <__kernel_rem_pio2+0x180>
 801f13a:	4620      	mov	r0, r4
 801f13c:	f000 fb10 	bl	801f760 <scalbn>
 801f140:	eeb0 8b40 	vmov.f64	d8, d0
 801f144:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801f148:	ee28 0b00 	vmul.f64	d0, d8, d0
 801f14c:	f000 fa8c 	bl	801f668 <floor>
 801f150:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801f154:	eea0 8b47 	vfms.f64	d8, d0, d7
 801f158:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801f15c:	2c00      	cmp	r4, #0
 801f15e:	edcd 7a01 	vstr	s15, [sp, #4]
 801f162:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f166:	ee38 8b47 	vsub.f64	d8, d8, d7
 801f16a:	dd4a      	ble.n	801f202 <__kernel_rem_pio2+0x1aa>
 801f16c:	1e69      	subs	r1, r5, #1
 801f16e:	ab06      	add	r3, sp, #24
 801f170:	f1c4 0018 	rsb	r0, r4, #24
 801f174:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801f178:	9a01      	ldr	r2, [sp, #4]
 801f17a:	fa4c f300 	asr.w	r3, ip, r0
 801f17e:	441a      	add	r2, r3
 801f180:	4083      	lsls	r3, r0
 801f182:	9201      	str	r2, [sp, #4]
 801f184:	ebac 0203 	sub.w	r2, ip, r3
 801f188:	ab06      	add	r3, sp, #24
 801f18a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801f18e:	f1c4 0317 	rsb	r3, r4, #23
 801f192:	fa42 f803 	asr.w	r8, r2, r3
 801f196:	f1b8 0f00 	cmp.w	r8, #0
 801f19a:	dd43      	ble.n	801f224 <__kernel_rem_pio2+0x1cc>
 801f19c:	9b01      	ldr	r3, [sp, #4]
 801f19e:	2000      	movs	r0, #0
 801f1a0:	3301      	adds	r3, #1
 801f1a2:	9301      	str	r3, [sp, #4]
 801f1a4:	4601      	mov	r1, r0
 801f1a6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 801f1aa:	4285      	cmp	r5, r0
 801f1ac:	dc6e      	bgt.n	801f28c <__kernel_rem_pio2+0x234>
 801f1ae:	2c00      	cmp	r4, #0
 801f1b0:	dd04      	ble.n	801f1bc <__kernel_rem_pio2+0x164>
 801f1b2:	2c01      	cmp	r4, #1
 801f1b4:	d07f      	beq.n	801f2b6 <__kernel_rem_pio2+0x25e>
 801f1b6:	2c02      	cmp	r4, #2
 801f1b8:	f000 8087 	beq.w	801f2ca <__kernel_rem_pio2+0x272>
 801f1bc:	f1b8 0f02 	cmp.w	r8, #2
 801f1c0:	d130      	bne.n	801f224 <__kernel_rem_pio2+0x1cc>
 801f1c2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f1c6:	ee30 8b48 	vsub.f64	d8, d0, d8
 801f1ca:	b359      	cbz	r1, 801f224 <__kernel_rem_pio2+0x1cc>
 801f1cc:	4620      	mov	r0, r4
 801f1ce:	f000 fac7 	bl	801f760 <scalbn>
 801f1d2:	ee38 8b40 	vsub.f64	d8, d8, d0
 801f1d6:	e025      	b.n	801f224 <__kernel_rem_pio2+0x1cc>
 801f1d8:	ee20 7b09 	vmul.f64	d7, d0, d9
 801f1dc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801f1e0:	a806      	add	r0, sp, #24
 801f1e2:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801f1e6:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801f1ea:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f1ee:	ee10 1a10 	vmov	r1, s0
 801f1f2:	ed32 0b02 	vldmdb	r2!, {d0}
 801f1f6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801f1fa:	ee37 0b00 	vadd.f64	d0, d7, d0
 801f1fe:	3301      	adds	r3, #1
 801f200:	e798      	b.n	801f134 <__kernel_rem_pio2+0xdc>
 801f202:	d106      	bne.n	801f212 <__kernel_rem_pio2+0x1ba>
 801f204:	1e6b      	subs	r3, r5, #1
 801f206:	aa06      	add	r2, sp, #24
 801f208:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801f20c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 801f210:	e7c1      	b.n	801f196 <__kernel_rem_pio2+0x13e>
 801f212:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801f216:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801f21a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f21e:	da32      	bge.n	801f286 <__kernel_rem_pio2+0x22e>
 801f220:	f04f 0800 	mov.w	r8, #0
 801f224:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801f228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f22c:	f040 80b0 	bne.w	801f390 <__kernel_rem_pio2+0x338>
 801f230:	1e6b      	subs	r3, r5, #1
 801f232:	4618      	mov	r0, r3
 801f234:	2200      	movs	r2, #0
 801f236:	4548      	cmp	r0, r9
 801f238:	da4e      	bge.n	801f2d8 <__kernel_rem_pio2+0x280>
 801f23a:	2a00      	cmp	r2, #0
 801f23c:	f000 8088 	beq.w	801f350 <__kernel_rem_pio2+0x2f8>
 801f240:	aa06      	add	r2, sp, #24
 801f242:	3c18      	subs	r4, #24
 801f244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801f248:	2900      	cmp	r1, #0
 801f24a:	f000 808e 	beq.w	801f36a <__kernel_rem_pio2+0x312>
 801f24e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801f252:	4620      	mov	r0, r4
 801f254:	9302      	str	r3, [sp, #8]
 801f256:	f000 fa83 	bl	801f760 <scalbn>
 801f25a:	9b02      	ldr	r3, [sp, #8]
 801f25c:	aa6a      	add	r2, sp, #424	; 0x1a8
 801f25e:	00d9      	lsls	r1, r3, #3
 801f260:	ed9f 6b45 	vldr	d6, [pc, #276]	; 801f378 <__kernel_rem_pio2+0x320>
 801f264:	1850      	adds	r0, r2, r1
 801f266:	f100 0508 	add.w	r5, r0, #8
 801f26a:	461c      	mov	r4, r3
 801f26c:	2c00      	cmp	r4, #0
 801f26e:	f280 80bd 	bge.w	801f3ec <__kernel_rem_pio2+0x394>
 801f272:	2500      	movs	r5, #0
 801f274:	1b5c      	subs	r4, r3, r5
 801f276:	2c00      	cmp	r4, #0
 801f278:	f2c0 80dd 	blt.w	801f436 <__kernel_rem_pio2+0x3de>
 801f27c:	4f43      	ldr	r7, [pc, #268]	; (801f38c <__kernel_rem_pio2+0x334>)
 801f27e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 801f370 <__kernel_rem_pio2+0x318>
 801f282:	2400      	movs	r4, #0
 801f284:	e0cb      	b.n	801f41e <__kernel_rem_pio2+0x3c6>
 801f286:	f04f 0802 	mov.w	r8, #2
 801f28a:	e787      	b.n	801f19c <__kernel_rem_pio2+0x144>
 801f28c:	ab06      	add	r3, sp, #24
 801f28e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f292:	b949      	cbnz	r1, 801f2a8 <__kernel_rem_pio2+0x250>
 801f294:	b12b      	cbz	r3, 801f2a2 <__kernel_rem_pio2+0x24a>
 801f296:	aa06      	add	r2, sp, #24
 801f298:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801f29c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2a0:	2301      	movs	r3, #1
 801f2a2:	3001      	adds	r0, #1
 801f2a4:	4619      	mov	r1, r3
 801f2a6:	e780      	b.n	801f1aa <__kernel_rem_pio2+0x152>
 801f2a8:	aa06      	add	r2, sp, #24
 801f2aa:	ebac 0303 	sub.w	r3, ip, r3
 801f2ae:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2b2:	460b      	mov	r3, r1
 801f2b4:	e7f5      	b.n	801f2a2 <__kernel_rem_pio2+0x24a>
 801f2b6:	1e68      	subs	r0, r5, #1
 801f2b8:	ab06      	add	r3, sp, #24
 801f2ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f2be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801f2c2:	aa06      	add	r2, sp, #24
 801f2c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801f2c8:	e778      	b.n	801f1bc <__kernel_rem_pio2+0x164>
 801f2ca:	1e68      	subs	r0, r5, #1
 801f2cc:	ab06      	add	r3, sp, #24
 801f2ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801f2d2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801f2d6:	e7f4      	b.n	801f2c2 <__kernel_rem_pio2+0x26a>
 801f2d8:	a906      	add	r1, sp, #24
 801f2da:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801f2de:	3801      	subs	r0, #1
 801f2e0:	430a      	orrs	r2, r1
 801f2e2:	e7a8      	b.n	801f236 <__kernel_rem_pio2+0x1de>
 801f2e4:	f10c 0c01 	add.w	ip, ip, #1
 801f2e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801f2ec:	2a00      	cmp	r2, #0
 801f2ee:	d0f9      	beq.n	801f2e4 <__kernel_rem_pio2+0x28c>
 801f2f0:	eb0b 0305 	add.w	r3, fp, r5
 801f2f4:	aa1a      	add	r2, sp, #104	; 0x68
 801f2f6:	00db      	lsls	r3, r3, #3
 801f2f8:	1898      	adds	r0, r3, r2
 801f2fa:	3008      	adds	r0, #8
 801f2fc:	1c69      	adds	r1, r5, #1
 801f2fe:	3708      	adds	r7, #8
 801f300:	2200      	movs	r2, #0
 801f302:	4465      	add	r5, ip
 801f304:	9005      	str	r0, [sp, #20]
 801f306:	428d      	cmp	r5, r1
 801f308:	f6ff af07 	blt.w	801f11a <__kernel_rem_pio2+0xc2>
 801f30c:	a81a      	add	r0, sp, #104	; 0x68
 801f30e:	eb02 0c03 	add.w	ip, r2, r3
 801f312:	4484      	add	ip, r0
 801f314:	9803      	ldr	r0, [sp, #12]
 801f316:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f31a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801f31e:	9001      	str	r0, [sp, #4]
 801f320:	ee07 0a90 	vmov	s15, r0
 801f324:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f328:	9805      	ldr	r0, [sp, #20]
 801f32a:	ed8c 7b00 	vstr	d7, [ip]
 801f32e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f370 <__kernel_rem_pio2+0x318>
 801f332:	eb00 0802 	add.w	r8, r0, r2
 801f336:	f04f 0c00 	mov.w	ip, #0
 801f33a:	45d4      	cmp	ip, sl
 801f33c:	dd0c      	ble.n	801f358 <__kernel_rem_pio2+0x300>
 801f33e:	eb02 0c07 	add.w	ip, r2, r7
 801f342:	a86a      	add	r0, sp, #424	; 0x1a8
 801f344:	4484      	add	ip, r0
 801f346:	ed8c 7b02 	vstr	d7, [ip, #8]
 801f34a:	3101      	adds	r1, #1
 801f34c:	3208      	adds	r2, #8
 801f34e:	e7da      	b.n	801f306 <__kernel_rem_pio2+0x2ae>
 801f350:	9b04      	ldr	r3, [sp, #16]
 801f352:	f04f 0c01 	mov.w	ip, #1
 801f356:	e7c7      	b.n	801f2e8 <__kernel_rem_pio2+0x290>
 801f358:	ecbe 5b02 	vldmia	lr!, {d5}
 801f35c:	ed38 6b02 	vldmdb	r8!, {d6}
 801f360:	f10c 0c01 	add.w	ip, ip, #1
 801f364:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f368:	e7e7      	b.n	801f33a <__kernel_rem_pio2+0x2e2>
 801f36a:	3b01      	subs	r3, #1
 801f36c:	e768      	b.n	801f240 <__kernel_rem_pio2+0x1e8>
 801f36e:	bf00      	nop
	...
 801f37c:	3e700000 	.word	0x3e700000
 801f380:	00000000 	.word	0x00000000
 801f384:	41700000 	.word	0x41700000
 801f388:	0801fc50 	.word	0x0801fc50
 801f38c:	0801fc10 	.word	0x0801fc10
 801f390:	4260      	negs	r0, r4
 801f392:	eeb0 0b48 	vmov.f64	d0, d8
 801f396:	f000 f9e3 	bl	801f760 <scalbn>
 801f39a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801f578 <__kernel_rem_pio2+0x520>
 801f39e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801f3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f3a6:	db18      	blt.n	801f3da <__kernel_rem_pio2+0x382>
 801f3a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801f580 <__kernel_rem_pio2+0x528>
 801f3ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f3b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801f3b4:	aa06      	add	r2, sp, #24
 801f3b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801f3ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 801f3be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f3c2:	a906      	add	r1, sp, #24
 801f3c4:	ee10 3a10 	vmov	r3, s0
 801f3c8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801f3cc:	1c6b      	adds	r3, r5, #1
 801f3ce:	ee17 2a10 	vmov	r2, s14
 801f3d2:	3418      	adds	r4, #24
 801f3d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801f3d8:	e739      	b.n	801f24e <__kernel_rem_pio2+0x1f6>
 801f3da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801f3de:	aa06      	add	r2, sp, #24
 801f3e0:	ee10 3a10 	vmov	r3, s0
 801f3e4:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801f3e8:	462b      	mov	r3, r5
 801f3ea:	e730      	b.n	801f24e <__kernel_rem_pio2+0x1f6>
 801f3ec:	aa06      	add	r2, sp, #24
 801f3ee:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801f3f2:	9202      	str	r2, [sp, #8]
 801f3f4:	ee07 2a90 	vmov	s15, r2
 801f3f8:	3c01      	subs	r4, #1
 801f3fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f3fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 801f402:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f406:	ed25 7b02 	vstmdb	r5!, {d7}
 801f40a:	e72f      	b.n	801f26c <__kernel_rem_pio2+0x214>
 801f40c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801f410:	ecb7 5b02 	vldmia	r7!, {d5}
 801f414:	ed9c 6b00 	vldr	d6, [ip]
 801f418:	3401      	adds	r4, #1
 801f41a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f41e:	454c      	cmp	r4, r9
 801f420:	dc01      	bgt.n	801f426 <__kernel_rem_pio2+0x3ce>
 801f422:	42a5      	cmp	r5, r4
 801f424:	daf2      	bge.n	801f40c <__kernel_rem_pio2+0x3b4>
 801f426:	aa42      	add	r2, sp, #264	; 0x108
 801f428:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801f42c:	ed84 7b00 	vstr	d7, [r4]
 801f430:	3501      	adds	r5, #1
 801f432:	3808      	subs	r0, #8
 801f434:	e71e      	b.n	801f274 <__kernel_rem_pio2+0x21c>
 801f436:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801f438:	2a03      	cmp	r2, #3
 801f43a:	d84e      	bhi.n	801f4da <__kernel_rem_pio2+0x482>
 801f43c:	e8df f002 	tbb	[pc, r2]
 801f440:	021f1f3e 	.word	0x021f1f3e
 801f444:	3108      	adds	r1, #8
 801f446:	aa42      	add	r2, sp, #264	; 0x108
 801f448:	4411      	add	r1, r2
 801f44a:	4608      	mov	r0, r1
 801f44c:	461c      	mov	r4, r3
 801f44e:	2c00      	cmp	r4, #0
 801f450:	dc61      	bgt.n	801f516 <__kernel_rem_pio2+0x4be>
 801f452:	4608      	mov	r0, r1
 801f454:	461c      	mov	r4, r3
 801f456:	2c01      	cmp	r4, #1
 801f458:	dc6d      	bgt.n	801f536 <__kernel_rem_pio2+0x4de>
 801f45a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801f588 <__kernel_rem_pio2+0x530>
 801f45e:	2b01      	cmp	r3, #1
 801f460:	dc79      	bgt.n	801f556 <__kernel_rem_pio2+0x4fe>
 801f462:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801f466:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801f46a:	f1b8 0f00 	cmp.w	r8, #0
 801f46e:	d178      	bne.n	801f562 <__kernel_rem_pio2+0x50a>
 801f470:	ed86 5b00 	vstr	d5, [r6]
 801f474:	ed86 6b02 	vstr	d6, [r6, #8]
 801f478:	ed86 7b04 	vstr	d7, [r6, #16]
 801f47c:	e02d      	b.n	801f4da <__kernel_rem_pio2+0x482>
 801f47e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801f588 <__kernel_rem_pio2+0x530>
 801f482:	3108      	adds	r1, #8
 801f484:	aa42      	add	r2, sp, #264	; 0x108
 801f486:	4411      	add	r1, r2
 801f488:	4618      	mov	r0, r3
 801f48a:	2800      	cmp	r0, #0
 801f48c:	da34      	bge.n	801f4f8 <__kernel_rem_pio2+0x4a0>
 801f48e:	f1b8 0f00 	cmp.w	r8, #0
 801f492:	d037      	beq.n	801f504 <__kernel_rem_pio2+0x4ac>
 801f494:	eeb1 7b46 	vneg.f64	d7, d6
 801f498:	ed86 7b00 	vstr	d7, [r6]
 801f49c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801f4a0:	a844      	add	r0, sp, #272	; 0x110
 801f4a2:	2101      	movs	r1, #1
 801f4a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f4a8:	428b      	cmp	r3, r1
 801f4aa:	da2e      	bge.n	801f50a <__kernel_rem_pio2+0x4b2>
 801f4ac:	f1b8 0f00 	cmp.w	r8, #0
 801f4b0:	d001      	beq.n	801f4b6 <__kernel_rem_pio2+0x45e>
 801f4b2:	eeb1 7b47 	vneg.f64	d7, d7
 801f4b6:	ed86 7b02 	vstr	d7, [r6, #8]
 801f4ba:	e00e      	b.n	801f4da <__kernel_rem_pio2+0x482>
 801f4bc:	aa92      	add	r2, sp, #584	; 0x248
 801f4be:	ed9f 7b32 	vldr	d7, [pc, #200]	; 801f588 <__kernel_rem_pio2+0x530>
 801f4c2:	4411      	add	r1, r2
 801f4c4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801f4c8:	2b00      	cmp	r3, #0
 801f4ca:	da0f      	bge.n	801f4ec <__kernel_rem_pio2+0x494>
 801f4cc:	f1b8 0f00 	cmp.w	r8, #0
 801f4d0:	d001      	beq.n	801f4d6 <__kernel_rem_pio2+0x47e>
 801f4d2:	eeb1 7b47 	vneg.f64	d7, d7
 801f4d6:	ed86 7b00 	vstr	d7, [r6]
 801f4da:	9b01      	ldr	r3, [sp, #4]
 801f4dc:	f003 0007 	and.w	r0, r3, #7
 801f4e0:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801f4e4:	ecbd 8b06 	vpop	{d8-d10}
 801f4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f4ec:	ed31 6b02 	vldmdb	r1!, {d6}
 801f4f0:	3b01      	subs	r3, #1
 801f4f2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f4f6:	e7e7      	b.n	801f4c8 <__kernel_rem_pio2+0x470>
 801f4f8:	ed31 7b02 	vldmdb	r1!, {d7}
 801f4fc:	3801      	subs	r0, #1
 801f4fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f502:	e7c2      	b.n	801f48a <__kernel_rem_pio2+0x432>
 801f504:	eeb0 7b46 	vmov.f64	d7, d6
 801f508:	e7c6      	b.n	801f498 <__kernel_rem_pio2+0x440>
 801f50a:	ecb0 6b02 	vldmia	r0!, {d6}
 801f50e:	3101      	adds	r1, #1
 801f510:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f514:	e7c8      	b.n	801f4a8 <__kernel_rem_pio2+0x450>
 801f516:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f51a:	ed30 5b02 	vldmdb	r0!, {d5}
 801f51e:	3c01      	subs	r4, #1
 801f520:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f524:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f528:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f52c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f530:	ed80 7b00 	vstr	d7, [r0]
 801f534:	e78b      	b.n	801f44e <__kernel_rem_pio2+0x3f6>
 801f536:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f53a:	ed30 5b02 	vldmdb	r0!, {d5}
 801f53e:	3c01      	subs	r4, #1
 801f540:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f544:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f548:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f54c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f550:	ed80 7b00 	vstr	d7, [r0]
 801f554:	e77f      	b.n	801f456 <__kernel_rem_pio2+0x3fe>
 801f556:	ed31 6b02 	vldmdb	r1!, {d6}
 801f55a:	3b01      	subs	r3, #1
 801f55c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f560:	e77d      	b.n	801f45e <__kernel_rem_pio2+0x406>
 801f562:	eeb1 5b45 	vneg.f64	d5, d5
 801f566:	eeb1 6b46 	vneg.f64	d6, d6
 801f56a:	ed86 5b00 	vstr	d5, [r6]
 801f56e:	eeb1 7b47 	vneg.f64	d7, d7
 801f572:	ed86 6b02 	vstr	d6, [r6, #8]
 801f576:	e77f      	b.n	801f478 <__kernel_rem_pio2+0x420>
 801f578:	00000000 	.word	0x00000000
 801f57c:	41700000 	.word	0x41700000
 801f580:	00000000 	.word	0x00000000
 801f584:	3e700000 	.word	0x3e700000
	...

0801f590 <__kernel_sin>:
 801f590:	ee10 3a90 	vmov	r3, s1
 801f594:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f598:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f59c:	da04      	bge.n	801f5a8 <__kernel_sin+0x18>
 801f59e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f5a2:	ee17 3a90 	vmov	r3, s15
 801f5a6:	b35b      	cbz	r3, 801f600 <__kernel_sin+0x70>
 801f5a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801f5ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 801f5b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801f608 <__kernel_sin+0x78>
 801f5b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f610 <__kernel_sin+0x80>
 801f5b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f5bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f618 <__kernel_sin+0x88>
 801f5c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f5c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f620 <__kernel_sin+0x90>
 801f5c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f5cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f628 <__kernel_sin+0x98>
 801f5d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f5d4:	b930      	cbnz	r0, 801f5e4 <__kernel_sin+0x54>
 801f5d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f630 <__kernel_sin+0xa0>
 801f5da:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f5de:	eea4 0b05 	vfma.f64	d0, d4, d5
 801f5e2:	4770      	bx	lr
 801f5e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801f5e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801f5ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 801f5f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801f5f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f638 <__kernel_sin+0xa8>
 801f5f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 801f5fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 801f600:	4770      	bx	lr
 801f602:	bf00      	nop
 801f604:	f3af 8000 	nop.w
 801f608:	5acfd57c 	.word	0x5acfd57c
 801f60c:	3de5d93a 	.word	0x3de5d93a
 801f610:	8a2b9ceb 	.word	0x8a2b9ceb
 801f614:	be5ae5e6 	.word	0xbe5ae5e6
 801f618:	57b1fe7d 	.word	0x57b1fe7d
 801f61c:	3ec71de3 	.word	0x3ec71de3
 801f620:	19c161d5 	.word	0x19c161d5
 801f624:	bf2a01a0 	.word	0xbf2a01a0
 801f628:	1110f8a6 	.word	0x1110f8a6
 801f62c:	3f811111 	.word	0x3f811111
 801f630:	55555549 	.word	0x55555549
 801f634:	bfc55555 	.word	0xbfc55555
 801f638:	55555549 	.word	0x55555549
 801f63c:	3fc55555 	.word	0x3fc55555

0801f640 <fabs>:
 801f640:	ec51 0b10 	vmov	r0, r1, d0
 801f644:	ee10 2a10 	vmov	r2, s0
 801f648:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f64c:	ec43 2b10 	vmov	d0, r2, r3
 801f650:	4770      	bx	lr

0801f652 <finite>:
 801f652:	ee10 3a90 	vmov	r3, s1
 801f656:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f65a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f65e:	0fc0      	lsrs	r0, r0, #31
 801f660:	4770      	bx	lr
 801f662:	0000      	movs	r0, r0
 801f664:	0000      	movs	r0, r0
	...

0801f668 <floor>:
 801f668:	ee10 1a90 	vmov	r1, s1
 801f66c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f670:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f674:	2b13      	cmp	r3, #19
 801f676:	b530      	push	{r4, r5, lr}
 801f678:	ee10 0a10 	vmov	r0, s0
 801f67c:	ee10 5a10 	vmov	r5, s0
 801f680:	dc33      	bgt.n	801f6ea <floor+0x82>
 801f682:	2b00      	cmp	r3, #0
 801f684:	da17      	bge.n	801f6b6 <floor+0x4e>
 801f686:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f748 <floor+0xe0>
 801f68a:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f68e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f696:	dd09      	ble.n	801f6ac <floor+0x44>
 801f698:	2900      	cmp	r1, #0
 801f69a:	da50      	bge.n	801f73e <floor+0xd6>
 801f69c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f6a0:	4a2b      	ldr	r2, [pc, #172]	; (801f750 <floor+0xe8>)
 801f6a2:	4303      	orrs	r3, r0
 801f6a4:	2000      	movs	r0, #0
 801f6a6:	4283      	cmp	r3, r0
 801f6a8:	bf18      	it	ne
 801f6aa:	4611      	movne	r1, r2
 801f6ac:	460b      	mov	r3, r1
 801f6ae:	4602      	mov	r2, r0
 801f6b0:	ec43 2b10 	vmov	d0, r2, r3
 801f6b4:	e020      	b.n	801f6f8 <floor+0x90>
 801f6b6:	4a27      	ldr	r2, [pc, #156]	; (801f754 <floor+0xec>)
 801f6b8:	411a      	asrs	r2, r3
 801f6ba:	ea01 0402 	and.w	r4, r1, r2
 801f6be:	4304      	orrs	r4, r0
 801f6c0:	d01a      	beq.n	801f6f8 <floor+0x90>
 801f6c2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f748 <floor+0xe0>
 801f6c6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f6ca:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6d2:	ddeb      	ble.n	801f6ac <floor+0x44>
 801f6d4:	2900      	cmp	r1, #0
 801f6d6:	bfbe      	ittt	lt
 801f6d8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f6dc:	fa40 f303 	asrlt.w	r3, r0, r3
 801f6e0:	18c9      	addlt	r1, r1, r3
 801f6e2:	ea21 0102 	bic.w	r1, r1, r2
 801f6e6:	2000      	movs	r0, #0
 801f6e8:	e7e0      	b.n	801f6ac <floor+0x44>
 801f6ea:	2b33      	cmp	r3, #51	; 0x33
 801f6ec:	dd05      	ble.n	801f6fa <floor+0x92>
 801f6ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f6f2:	d101      	bne.n	801f6f8 <floor+0x90>
 801f6f4:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f6f8:	bd30      	pop	{r4, r5, pc}
 801f6fa:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f6fe:	f04f 32ff 	mov.w	r2, #4294967295
 801f702:	40e2      	lsrs	r2, r4
 801f704:	4202      	tst	r2, r0
 801f706:	d0f7      	beq.n	801f6f8 <floor+0x90>
 801f708:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f748 <floor+0xe0>
 801f70c:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f710:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f718:	ddc8      	ble.n	801f6ac <floor+0x44>
 801f71a:	2900      	cmp	r1, #0
 801f71c:	da02      	bge.n	801f724 <floor+0xbc>
 801f71e:	2b14      	cmp	r3, #20
 801f720:	d103      	bne.n	801f72a <floor+0xc2>
 801f722:	3101      	adds	r1, #1
 801f724:	ea20 0002 	bic.w	r0, r0, r2
 801f728:	e7c0      	b.n	801f6ac <floor+0x44>
 801f72a:	2401      	movs	r4, #1
 801f72c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f730:	fa04 f303 	lsl.w	r3, r4, r3
 801f734:	4418      	add	r0, r3
 801f736:	42a8      	cmp	r0, r5
 801f738:	bf38      	it	cc
 801f73a:	1909      	addcc	r1, r1, r4
 801f73c:	e7f2      	b.n	801f724 <floor+0xbc>
 801f73e:	2000      	movs	r0, #0
 801f740:	4601      	mov	r1, r0
 801f742:	e7b3      	b.n	801f6ac <floor+0x44>
 801f744:	f3af 8000 	nop.w
 801f748:	8800759c 	.word	0x8800759c
 801f74c:	7e37e43c 	.word	0x7e37e43c
 801f750:	bff00000 	.word	0xbff00000
 801f754:	000fffff 	.word	0x000fffff

0801f758 <matherr>:
 801f758:	2000      	movs	r0, #0
 801f75a:	4770      	bx	lr
 801f75c:	0000      	movs	r0, r0
	...

0801f760 <scalbn>:
 801f760:	b500      	push	{lr}
 801f762:	ed2d 8b02 	vpush	{d8}
 801f766:	b083      	sub	sp, #12
 801f768:	ed8d 0b00 	vstr	d0, [sp]
 801f76c:	9b01      	ldr	r3, [sp, #4]
 801f76e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f772:	b9a2      	cbnz	r2, 801f79e <scalbn+0x3e>
 801f774:	9a00      	ldr	r2, [sp, #0]
 801f776:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f77a:	4313      	orrs	r3, r2
 801f77c:	d03a      	beq.n	801f7f4 <scalbn+0x94>
 801f77e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f838 <scalbn+0xd8>
 801f782:	4b35      	ldr	r3, [pc, #212]	; (801f858 <scalbn+0xf8>)
 801f784:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f788:	4298      	cmp	r0, r3
 801f78a:	ed8d 7b00 	vstr	d7, [sp]
 801f78e:	da11      	bge.n	801f7b4 <scalbn+0x54>
 801f790:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f840 <scalbn+0xe0>
 801f794:	ed9d 6b00 	vldr	d6, [sp]
 801f798:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f79c:	e007      	b.n	801f7ae <scalbn+0x4e>
 801f79e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f7a2:	428a      	cmp	r2, r1
 801f7a4:	d10a      	bne.n	801f7bc <scalbn+0x5c>
 801f7a6:	ed9d 7b00 	vldr	d7, [sp]
 801f7aa:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f7ae:	ed8d 7b00 	vstr	d7, [sp]
 801f7b2:	e01f      	b.n	801f7f4 <scalbn+0x94>
 801f7b4:	9b01      	ldr	r3, [sp, #4]
 801f7b6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f7ba:	3a36      	subs	r2, #54	; 0x36
 801f7bc:	4402      	add	r2, r0
 801f7be:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f7c2:	428a      	cmp	r2, r1
 801f7c4:	dd0a      	ble.n	801f7dc <scalbn+0x7c>
 801f7c6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801f848 <scalbn+0xe8>
 801f7ca:	eeb0 0b48 	vmov.f64	d0, d8
 801f7ce:	ed9d 1b00 	vldr	d1, [sp]
 801f7d2:	f000 f843 	bl	801f85c <copysign>
 801f7d6:	ee20 7b08 	vmul.f64	d7, d0, d8
 801f7da:	e7e8      	b.n	801f7ae <scalbn+0x4e>
 801f7dc:	2a00      	cmp	r2, #0
 801f7de:	dd10      	ble.n	801f802 <scalbn+0xa2>
 801f7e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f7e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f7e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f7ec:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f7f0:	e9cd 0100 	strd	r0, r1, [sp]
 801f7f4:	ed9d 0b00 	vldr	d0, [sp]
 801f7f8:	b003      	add	sp, #12
 801f7fa:	ecbd 8b02 	vpop	{d8}
 801f7fe:	f85d fb04 	ldr.w	pc, [sp], #4
 801f802:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f806:	da06      	bge.n	801f816 <scalbn+0xb6>
 801f808:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f80c:	4298      	cmp	r0, r3
 801f80e:	dcda      	bgt.n	801f7c6 <scalbn+0x66>
 801f810:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801f840 <scalbn+0xe0>
 801f814:	e7d9      	b.n	801f7ca <scalbn+0x6a>
 801f816:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f81a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f81e:	3236      	adds	r2, #54	; 0x36
 801f820:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f824:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f828:	ec41 0b17 	vmov	d7, r0, r1
 801f82c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801f850 <scalbn+0xf0>
 801f830:	e7b2      	b.n	801f798 <scalbn+0x38>
 801f832:	bf00      	nop
 801f834:	f3af 8000 	nop.w
 801f838:	00000000 	.word	0x00000000
 801f83c:	43500000 	.word	0x43500000
 801f840:	c2f8f359 	.word	0xc2f8f359
 801f844:	01a56e1f 	.word	0x01a56e1f
 801f848:	8800759c 	.word	0x8800759c
 801f84c:	7e37e43c 	.word	0x7e37e43c
 801f850:	00000000 	.word	0x00000000
 801f854:	3c900000 	.word	0x3c900000
 801f858:	ffff3cb0 	.word	0xffff3cb0

0801f85c <copysign>:
 801f85c:	ec51 0b10 	vmov	r0, r1, d0
 801f860:	ee11 0a90 	vmov	r0, s3
 801f864:	ee10 2a10 	vmov	r2, s0
 801f868:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f86c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f870:	ea41 0300 	orr.w	r3, r1, r0
 801f874:	ec43 2b10 	vmov	d0, r2, r3
 801f878:	4770      	bx	lr
	...

0801f87c <_init>:
 801f87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f87e:	bf00      	nop
 801f880:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f882:	bc08      	pop	{r3}
 801f884:	469e      	mov	lr, r3
 801f886:	4770      	bx	lr

0801f888 <_fini>:
 801f888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f88a:	bf00      	nop
 801f88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f88e:	bc08      	pop	{r3}
 801f890:	469e      	mov	lr, r3
 801f892:	4770      	bx	lr
