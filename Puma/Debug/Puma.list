
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ef6c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801f208  0801f208  0002f208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f5d0  0801f5d0  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f5d0  0801f5d0  0002f5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f5d8  0801f5d8  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f5d8  0801f5d8  0002f5d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f5dc  0801f5dc  0002f5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0801f5e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d18  240001f0  0801f7d0  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001f08  0801f7d0  00031f08  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ed6b  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fac  00000000  00000000  0005ef89  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001870  00000000  00000000  00063f38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  000657a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b2dd  00000000  00000000  00066e08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a63f  00000000  00000000  000a20e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00165386  00000000  00000000  000bc724  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00221aaa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000069d8  00000000  00000000  00221b28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f0 	.word	0x240001f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f1ec 	.word	0x0801f1ec

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f4 	.word	0x240001f4
 80002d4:	0801f1ec 	.word	0x0801f1ec

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* port;
		uint16_t  pin_num;
    }PINS;*/
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	f000 80cd 	beq.w	8000794 <HAL_GPIO_EXTI_Callback+0x1ac>
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	dc04      	bgt.n	8000608 <HAL_GPIO_EXTI_Callback+0x20>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00c      	beq.n	800061c <HAL_GPIO_EXTI_Callback+0x34>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d068      	beq.n	80006d8 <HAL_GPIO_EXTI_Callback+0xf0>
			  motor_steps[5]--;
			  delta_pos[5]--;
		  }
		break;
	default:
		break;
 8000606:	e24f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
	switch (GPIO_Pin){
 8000608:	2b10      	cmp	r3, #16
 800060a:	f000 818d 	beq.w	8000928 <HAL_GPIO_EXTI_Callback+0x340>
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	f000 81ea 	beq.w	80009e8 <HAL_GPIO_EXTI_Callback+0x400>
 8000614:	2b08      	cmp	r3, #8
 8000616:	f000 8129 	beq.w	800086c <HAL_GPIO_EXTI_Callback+0x284>
		break;
 800061a:	e245      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 800061c:	4b8c      	ldr	r3, [pc, #560]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b8b      	ldr	r3, [pc, #556]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f012 fe2a 	bl	8013280 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b88      	ldr	r3, [pc, #544]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000632:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8000634:	4b88      	ldr	r3, [pc, #544]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d12b      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800063c:	4b85      	ldr	r3, [pc, #532]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d127      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8000644:	4b82      	ldr	r3, [pc, #520]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	4b81      	ldr	r3, [pc, #516]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f012 fe16 	bl	8013280 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b80      	ldr	r3, [pc, #512]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065a:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 800065c:	4b7f      	ldr	r3, [pc, #508]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
		      direction[0] = false; //Reverse
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e00e      	b.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10a      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800067e:	4b78      	ldr	r3, [pc, #480]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    	direction[0] = true;  //Forward
 800068e:	4b74      	ldr	r3, [pc, #464]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 8000694:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a6f      	ldr	r2, [pc, #444]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 800069a:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 800069c:	4b70      	ldr	r3, [pc, #448]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00a      	beq.n	80006c2 <HAL_GPIO_EXTI_Callback+0xda>
			  motor_steps[0]++;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a6c      	ldr	r2, [pc, #432]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006b4:	6013      	str	r3, [r2, #0]
			  delta_pos[0]++;
 80006b6:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a6a      	ldr	r2, [pc, #424]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006be:	6013      	str	r3, [r2, #0]
		break;
 80006c0:	e1f2      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[0]--;
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a66      	ldr	r2, [pc, #408]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
			  delta_pos[0]--;
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a65      	ldr	r2, [pc, #404]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006d4:	6013      	str	r3, [r2, #0]
		break;
 80006d6:	e1e7      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 80006d8:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006de:	8a9b      	ldrh	r3, [r3, #20]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f012 fdcc 	bl	8013280 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006ee:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 80006f0:	4b59      	ldr	r3, [pc, #356]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d12b      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d127      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	4b52      	ldr	r3, [pc, #328]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	4619      	mov	r1, r3
 800070a:	4610      	mov	r0, r2
 800070c:	f012 fdb8 	bl	8013280 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b51      	ldr	r3, [pc, #324]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000716:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 8000718:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d108      	bne.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
		      direction[1] = false; //Reverse
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
 8000730:	e00e      	b.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10a      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 800073a:	4b49      	ldr	r3, [pc, #292]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    	direction[1] = true;  //Forward
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800074c:	2201      	movs	r2, #1
 800074e:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 8000750:	4b40      	ldr	r3, [pc, #256]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a40      	ldr	r2, [pc, #256]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000756:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00a      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x196>
			  motor_steps[1]++;
 8000768:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000770:	6053      	str	r3, [r2, #4]
			  delta_pos[1]++;
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800077a:	6053      	str	r3, [r2, #4]
		break;
 800077c:	e194      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[1]--;
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000786:	6053      	str	r3, [r2, #4]
			  delta_pos[1]--;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000790:	6053      	str	r3, [r2, #4]
		break;
 8000792:	e189      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000796:	6a1a      	ldr	r2, [r3, #32]
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800079a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f012 fd6e 	bl	8013280 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007aa:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d12b      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d127      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f012 fd5a 	bl	8013280 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d2:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d108      	bne.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
		      direction[2] = false; //Reverse
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	709a      	strb	r2, [r3, #2]
 80007ec:	e00e      	b.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10a      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    	direction[2] = true;  //Forward
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000812:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f083 0301 	eor.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00a      	beq.n	800083a <HAL_GPIO_EXTI_Callback+0x252>
			  motor_steps[2]++;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	3301      	adds	r3, #1
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800082c:	6093      	str	r3, [r2, #8]
			  delta_pos[2]++;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000836:	6093      	str	r3, [r2, #8]
		break;
 8000838:	e136      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[2]--;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000842:	6093      	str	r3, [r2, #8]
			  delta_pos[2]--;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800084c:	6093      	str	r3, [r2, #8]
		break;
 800084e:	e12b      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
 8000850:	240003cc 	.word	0x240003cc
 8000854:	240003b4 	.word	0x240003b4
 8000858:	2400039c 	.word	0x2400039c
 800085c:	240004ac 	.word	0x240004ac
 8000860:	24000000 	.word	0x24000000
 8000864:	2400020c 	.word	0x2400020c
 8000868:	24000258 	.word	0x24000258
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 800086c:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	4b8f      	ldr	r3, [pc, #572]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000872:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000874:	4619      	mov	r1, r3
 8000876:	4610      	mov	r0, r2
 8000878:	f012 fd02 	bl	8013280 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b8c      	ldr	r3, [pc, #560]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000882:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 8000884:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d12b      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 800088c:	4b89      	ldr	r3, [pc, #548]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d127      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 8000894:	4b86      	ldr	r3, [pc, #536]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000898:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800089a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f012 fcee 	bl	8013280 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b84      	ldr	r3, [pc, #528]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008aa:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 80008ac:	4b83      	ldr	r3, [pc, #524]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d108      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
 80008b4:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
		      direction[3] = false; //Reverse
 80008be:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	70da      	strb	r2, [r3, #3]
 80008c4:	e00e      	b.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    else if(val_encoderB[3] == HIGH && !direction[3])
 80008c6:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10a      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 80008ce:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008d0:	78db      	ldrb	r3, [r3, #3]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    	direction[3] = true;  //Forward
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 80008e4:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a73      	ldr	r2, [pc, #460]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80008ea:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00a      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x32a>
			  motor_steps[3]++;
 80008fc:	4b71      	ldr	r3, [pc, #452]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	4a70      	ldr	r2, [pc, #448]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000904:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]++;
 8000906:	4b70      	ldr	r3, [pc, #448]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	4a6e      	ldr	r2, [pc, #440]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800090e:	60d3      	str	r3, [r2, #12]
		break;
 8000910:	e0ca      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[3]--;
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	3b01      	subs	r3, #1
 8000918:	4a6a      	ldr	r2, [pc, #424]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800091a:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]--;
 800091c:	4b6a      	ldr	r3, [pc, #424]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000924:	60d3      	str	r3, [r2, #12]
		break;
 8000926:	e0bf      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[9].pin_num);
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f012 fca3 	bl	8013280 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000940:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d12c      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d128      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000958:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f012 fc8e 	bl	8013280 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096a:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 800096c:	4b53      	ldr	r3, [pc, #332]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
 8000974:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
		      direction[4] = false; //Reverse
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000980:	2200      	movs	r2, #0
 8000982:	711a      	strb	r2, [r3, #4]
 8000984:	e00e      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10a      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    	direction[4] = true;  //Forward
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80009aa:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f083 0301 	eor.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00a      	beq.n	80009d2 <HAL_GPIO_EXTI_Callback+0x3ea>
			  motor_steps[4]++;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009c4:	6113      	str	r3, [r2, #16]
			  delta_pos[4]++;
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009ce:	6113      	str	r3, [r2, #16]
		break;
 80009d0:	e06a      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[4]--;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009da:	6113      	str	r3, [r2, #16]
			  delta_pos[4]--;
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009e4:	6113      	str	r3, [r2, #16]
		break;
 80009e6:	e05f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80009f2:	4619      	mov	r1, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	f012 fc43 	bl	8013280 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a00:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d12c      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d128      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4610      	mov	r0, r2
 8000a20:	f012 fc2e 	bl	8013280 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2a:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d108      	bne.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
		      direction[5] = false; //Reverse
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	715a      	strb	r2, [r3, #5]
 8000a44:	e00e      	b.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d10a      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    	direction[5] = true;  //Forward
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a6a:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00a      	beq.n	8000a92 <HAL_GPIO_EXTI_Callback+0x4aa>
			  motor_steps[5]++;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a84:	6153      	str	r3, [r2, #20]
			  delta_pos[5]++;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a8e:	6153      	str	r3, [r2, #20]
		break;
 8000a90:	e009      	b.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x4be>
			  motor_steps[5]--;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a9a:	6153      	str	r3, [r2, #20]
			  delta_pos[5]--;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000aa4:	6153      	str	r3, [r2, #20]
		break;
 8000aa6:	bf00      	nop
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240003cc 	.word	0x240003cc
 8000ab4:	240003b4 	.word	0x240003b4
 8000ab8:	2400039c 	.word	0x2400039c
 8000abc:	240004ac 	.word	0x240004ac
 8000ac0:	24000000 	.word	0x24000000
 8000ac4:	2400020c 	.word	0x2400020c
 8000ac8:	24000258 	.word	0x24000258

08000acc <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b06:	f016 fa71 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000b10:	f001 f8b2 	bl	8001c78 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b22:	f016 fa63 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000b2c:	f001 f8a4 	bl	8001c78 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b3e:	f016 fa55 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000b48:	f001 f896 	bl	8001c78 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b50:	f016 f8d4 	bl	8016cfc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b54:	2104      	movs	r1, #4
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b58:	f016 f8d0 	bl	8016cfc <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b5c:	210c      	movs	r1, #12
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b60:	f016 f8cc 	bl	8016cfc <HAL_TIM_PWM_Start>
}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400046c 	.word	0x2400046c

08000b70 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	4a71      	ldr	r2, [pc, #452]	; (8000d40 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000b7c:	4293      	cmp	r3, r2
 8000b7e:	f040 80c2 	bne.w	8000d06 <HAL_TIM_PeriodElapsedCallback+0x196>
		for (j = 0; j < NUM_JOINTS; j++){
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	e0b7      	b.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x188>

			if (j <3){
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	2b02      	cmp	r3, #2
 8000b8c:	dc38      	bgt.n	8000c00 <HAL_TIM_PeriodElapsedCallback+0x90>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000b8e:	4a6d      	ldr	r2, [pc, #436]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	ee07 3a90 	vmov	s15, r3
 8000b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ba2:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000ba6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000baa:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000d20 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bb6:	4a64      	ldr	r2, [pc, #400]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	00db      	lsls	r3, r3, #3
 8000bbc:	4413      	add	r3, r2
 8000bbe:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8000bc2:	4a62      	ldr	r2, [pc, #392]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bca:	ee07 3a90 	vmov	s15, r3
 8000bce:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000bd2:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bd6:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000bda:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000bde:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000d20 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000be2:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000be6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000d28 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000bea:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000bf2:	4a57      	ldr	r2, [pc, #348]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	00db      	lsls	r3, r3, #3
 8000bf8:	4413      	add	r3, r2
 8000bfa:	ed83 7b00 	vstr	d7, [r3]
 8000bfe:	e073      	b.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else if (j < 5){
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	dc38      	bgt.n	8000c78 <HAL_TIM_PeriodElapsedCallback+0x108>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000c06:	4a4f      	ldr	r2, [pc, #316]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0e:	ee07 3a90 	vmov	s15, r3
 8000c12:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c16:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c1a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000c1e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c22:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000c26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c2e:	4a46      	ldr	r2, [pc, #280]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	00db      	lsls	r3, r3, #3
 8000c34:	4413      	add	r3, r2
 8000c36:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 8000c3a:	4a44      	ldr	r2, [pc, #272]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c4a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c4e:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000c52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000c56:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000d30 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000c5a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000c5e:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000d28 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000c62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c66:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c6a:	4a39      	ldr	r2, [pc, #228]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	00db      	lsls	r3, r3, #3
 8000c70:	4413      	add	r3, r2
 8000c72:	ed83 7b00 	vstr	d7, [r3]
 8000c76:	e037      	b.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else{
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_3*2.0;
 8000c78:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c80:	ee07 3a90 	vmov	s15, r3
 8000c84:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c88:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c8c:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000c90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c94:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000c98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c9c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000ca0:	4a29      	ldr	r2, [pc, #164]	; (8000d48 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	00db      	lsls	r3, r3, #3
 8000ca6:	4413      	add	r3, r2
 8000ca8:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 8000cac:	4a27      	ldr	r2, [pc, #156]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb4:	ee07 3a90 	vmov	s15, r3
 8000cb8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cbc:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cc0:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000d18 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000cc4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc8:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000d38 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000ccc:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000cd0:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000d28 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000cd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd8:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cdc:	4a1c      	ldr	r2, [pc, #112]	; (8000d50 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	00db      	lsls	r3, r3, #3
 8000ce2:	4413      	add	r3, r2
 8000ce4:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 8000ce8:	4a18      	ldr	r2, [pc, #96]	; (8000d4c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	2100      	movs	r1, #0
 8000cee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	2b05      	cmp	r3, #5
 8000cfc:	f77f af44 	ble.w	8000b88 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		need_control = true;
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
	}
}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	f3af 8000 	nop.w
 8000d18:	4d12d84a 	.word	0x4d12d84a
 8000d1c:	400921fb 	.word	0x400921fb
 8000d20:	00000000 	.word	0x00000000
 8000d24:	40d0e000 	.word	0x40d0e000
 8000d28:	47ae147b 	.word	0x47ae147b
 8000d2c:	3f847ae1 	.word	0x3f847ae1
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40b67c00 	.word	0x40b67c00
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	405cc000 	.word	0x405cc000
 8000d40:	240005d0 	.word	0x240005d0
 8000d44:	2400020c 	.word	0x2400020c
 8000d48:	24000270 	.word	0x24000270
 8000d4c:	24000258 	.word	0x24000258
 8000d50:	24000228 	.word	0x24000228
 8000d54:	24000006 	.word	0x24000006

08000d58 <Joint_controller>:


void Joint_controller(bool homing, creal_T* G_q_vector){
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b097      	sub	sp, #92	; 0x5c
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
	int k;
	int PWM_val [6] = {0};
 8000d64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
	double G_q_r [6] = {0};
 8000d76:	f107 0308 	add.w	r3, r7, #8
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f01d f96e 	bl	801e060 <memset>
	G_q(G_CONSTANT, current_angle[2], current_angle[3], current_angle[4], current_angle[5], G_q_vector);
 8000d84:	4b70      	ldr	r3, [pc, #448]	; (8000f48 <Joint_controller+0x1f0>)
 8000d86:	ed93 7b04 	vldr	d7, [r3, #16]
 8000d8a:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <Joint_controller+0x1f0>)
 8000d8c:	ed93 6b06 	vldr	d6, [r3, #24]
 8000d90:	4b6d      	ldr	r3, [pc, #436]	; (8000f48 <Joint_controller+0x1f0>)
 8000d92:	ed93 5b08 	vldr	d5, [r3, #32]
 8000d96:	4b6c      	ldr	r3, [pc, #432]	; (8000f48 <Joint_controller+0x1f0>)
 8000d98:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8000d9c:	6838      	ldr	r0, [r7, #0]
 8000d9e:	eeb0 3b45 	vmov.f64	d3, d5
 8000da2:	eeb0 2b46 	vmov.f64	d2, d6
 8000da6:	eeb0 1b47 	vmov.f64	d1, d7
 8000daa:	ed9f 0b63 	vldr	d0, [pc, #396]	; 8000f38 <Joint_controller+0x1e0>
 8000dae:	f001 fab3 	bl	8002318 <G_q>
	for (k = 0; k < NUM_JOINTS; k++){
 8000db2:	2300      	movs	r3, #0
 8000db4:	657b      	str	r3, [r7, #84]	; 0x54
 8000db6:	e0b6      	b.n	8000f26 <Joint_controller+0x1ce>
		G_q_r[k] = (double)G_q_vector[k].re;
 8000db8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dba:	011b      	lsls	r3, r3, #4
 8000dbc:	683a      	ldr	r2, [r7, #0]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000dc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000dc6:	00d2      	lsls	r2, r2, #3
 8000dc8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000dcc:	440a      	add	r2, r1
 8000dce:	3a50      	subs	r2, #80	; 0x50
 8000dd0:	e9c2 3400 	strd	r3, r4, [r2]
		backemf[k] = joint_speed[k] * V_CONSTANT[k];
 8000dd4:	4a5d      	ldr	r2, [pc, #372]	; (8000f4c <Joint_controller+0x1f4>)
 8000dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	4413      	add	r3, r2
 8000ddc:	ed93 6b00 	vldr	d6, [r3]
 8000de0:	4a5b      	ldr	r2, [pc, #364]	; (8000f50 <Joint_controller+0x1f8>)
 8000de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	ed93 7b00 	vldr	d7, [r3]
 8000dec:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000df0:	4a58      	ldr	r2, [pc, #352]	; (8000f54 <Joint_controller+0x1fc>)
 8000df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000df4:	00db      	lsls	r3, r3, #3
 8000df6:	4413      	add	r3, r2
 8000df8:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] *= 1024;
 8000dfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000dfe:	00db      	lsls	r3, r3, #3
 8000e00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e04:	4413      	add	r3, r2
 8000e06:	3b50      	subs	r3, #80	; 0x50
 8000e08:	ed93 7b00 	vldr	d7, [r3]
 8000e0c:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 8000f40 <Joint_controller+0x1e8>
 8000e10:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e16:	00db      	lsls	r3, r3, #3
 8000e18:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e1c:	4413      	add	r3, r2
 8000e1e:	3b50      	subs	r3, #80	; 0x50
 8000e20:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] /= (12.0 - backemf[k])/RESISTANCE[k]*T_CONSTANT[k];
 8000e24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e26:	00db      	lsls	r3, r3, #3
 8000e28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b50      	subs	r3, #80	; 0x50
 8000e30:	ed93 5b00 	vldr	d5, [r3]
 8000e34:	4a47      	ldr	r2, [pc, #284]	; (8000f54 <Joint_controller+0x1fc>)
 8000e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	4413      	add	r3, r2
 8000e3c:	ed93 7b00 	vldr	d7, [r3]
 8000e40:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8000e44:	ee36 4b47 	vsub.f64	d4, d6, d7
 8000e48:	4a43      	ldr	r2, [pc, #268]	; (8000f58 <Joint_controller+0x200>)
 8000e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e4c:	00db      	lsls	r3, r3, #3
 8000e4e:	4413      	add	r3, r2
 8000e50:	ed93 7b00 	vldr	d7, [r3]
 8000e54:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8000e58:	4a40      	ldr	r2, [pc, #256]	; (8000f5c <Joint_controller+0x204>)
 8000e5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	4413      	add	r3, r2
 8000e60:	ed93 7b00 	vldr	d7, [r3]
 8000e64:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000e68:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e6e:	00db      	lsls	r3, r3, #3
 8000e70:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e74:	4413      	add	r3, r2
 8000e76:	3b50      	subs	r3, #80	; 0x50
 8000e78:	ed83 7b00 	vstr	d7, [r3]
		PWM_val[k] = G_q_r[k] + K_P[k] * (desired_pos[k] - current_angle[k]) - K_V[k] * joint_speed[k];
 8000e7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e7e:	00db      	lsls	r3, r3, #3
 8000e80:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000e84:	4413      	add	r3, r2
 8000e86:	3b50      	subs	r3, #80	; 0x50
 8000e88:	ed93 6b00 	vldr	d6, [r3]
 8000e8c:	4a34      	ldr	r2, [pc, #208]	; (8000f60 <Joint_controller+0x208>)
 8000e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e94:	ee07 3a90 	vmov	s15, r3
 8000e98:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000e9c:	4a31      	ldr	r2, [pc, #196]	; (8000f64 <Joint_controller+0x20c>)
 8000e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	ed93 4b00 	vldr	d4, [r3]
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <Joint_controller+0x1f0>)
 8000eaa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	4413      	add	r3, r2
 8000eb0:	ed93 7b00 	vldr	d7, [r3]
 8000eb4:	ee34 7b47 	vsub.f64	d7, d4, d7
 8000eb8:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ebc:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000ec0:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <Joint_controller+0x210>)
 8000ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <Joint_controller+0x1f4>)
 8000ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ed4:	00db      	lsls	r3, r3, #3
 8000ed6:	4413      	add	r3, r2
 8000ed8:	ed93 7b00 	vldr	d7, [r3]
 8000edc:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000ee0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000ee4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000ee8:	ee17 2a90 	vmov	r2, s15
 8000eec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000ef4:	440b      	add	r3, r1
 8000ef6:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (PWM_val[k] > 1024){
 8000efa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f02:	4413      	add	r3, r2
 8000f04:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000f08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f0c:	dd08      	ble.n	8000f20 <Joint_controller+0x1c8>
			PWM_val[k] = 1024;
 8000f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f16:	4413      	add	r3, r2
 8000f18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f1c:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (k = 0; k < NUM_JOINTS; k++){
 8000f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f22:	3301      	adds	r3, #1
 8000f24:	657b      	str	r3, [r7, #84]	; 0x54
 8000f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	f77f af45 	ble.w	8000db8 <Joint_controller+0x60>
		}
	}

}
 8000f2e:	bf00      	nop
 8000f30:	375c      	adds	r7, #92	; 0x5c
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd90      	pop	{r4, r7, pc}
 8000f36:	bf00      	nop
 8000f38:	51eb851f 	.word	0x51eb851f
 8000f3c:	c0239eb8 	.word	0xc0239eb8
 8000f40:	00000000 	.word	0x00000000
 8000f44:	40900000 	.word	0x40900000
 8000f48:	24000270 	.word	0x24000270
 8000f4c:	24000228 	.word	0x24000228
 8000f50:	0801f2c8 	.word	0x0801f2c8
 8000f54:	240002a0 	.word	0x240002a0
 8000f58:	0801f328 	.word	0x0801f328
 8000f5c:	0801f2f8 	.word	0x0801f2f8
 8000f60:	0801f294 	.word	0x0801f294
 8000f64:	240002d0 	.word	0x240002d0
 8000f68:	0801f2ac 	.word	0x0801f2ac

08000f6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b0b3      	sub	sp, #204	; 0xcc
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 8000f72:	4b9b      	ldr	r3, [pc, #620]	; (80011e0 <main+0x274>)
 8000f74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char* EOL = "]\n\r";
 8000f78:	4b9a      	ldr	r3, [pc, #616]	; (80011e4 <main+0x278>)
 8000f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char* EOJ = ", ";
 8000f7e:	4b9a      	ldr	r3, [pc, #616]	; (80011e8 <main+0x27c>)
 8000f80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char* timer_tester = "timed\n\r";
 8000f84:	4b99      	ldr	r3, [pc, #612]	; (80011ec <main+0x280>)
 8000f86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t  stop;
	uint32_t  delta;
	creal_T G_q_vector[6];
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8000f8a:	4b99      	ldr	r3, [pc, #612]	; (80011f0 <main+0x284>)
 8000f8c:	4a99      	ldr	r2, [pc, #612]	; (80011f4 <main+0x288>)
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	4b97      	ldr	r3, [pc, #604]	; (80011f0 <main+0x284>)
 8000f92:	2201      	movs	r2, #1
 8000f94:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 8000f96:	4b96      	ldr	r3, [pc, #600]	; (80011f0 <main+0x284>)
 8000f98:	4a97      	ldr	r2, [pc, #604]	; (80011f8 <main+0x28c>)
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	4b94      	ldr	r3, [pc, #592]	; (80011f0 <main+0x284>)
 8000f9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa2:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 8000fa4:	4b92      	ldr	r3, [pc, #584]	; (80011f0 <main+0x284>)
 8000fa6:	4a93      	ldr	r2, [pc, #588]	; (80011f4 <main+0x288>)
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	4b91      	ldr	r3, [pc, #580]	; (80011f0 <main+0x284>)
 8000fac:	2202      	movs	r2, #2
 8000fae:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 8000fb0:	4b8f      	ldr	r3, [pc, #572]	; (80011f0 <main+0x284>)
 8000fb2:	4a92      	ldr	r2, [pc, #584]	; (80011fc <main+0x290>)
 8000fb4:	619a      	str	r2, [r3, #24]
 8000fb6:	4b8e      	ldr	r3, [pc, #568]	; (80011f0 <main+0x284>)
 8000fb8:	2220      	movs	r2, #32
 8000fba:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 8000fbc:	4b8c      	ldr	r3, [pc, #560]	; (80011f0 <main+0x284>)
 8000fbe:	4a90      	ldr	r2, [pc, #576]	; (8001200 <main+0x294>)
 8000fc0:	621a      	str	r2, [r3, #32]
 8000fc2:	4b8b      	ldr	r3, [pc, #556]	; (80011f0 <main+0x284>)
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 8000fc8:	4b89      	ldr	r3, [pc, #548]	; (80011f0 <main+0x284>)
 8000fca:	4a8b      	ldr	r2, [pc, #556]	; (80011f8 <main+0x28c>)
 8000fcc:	629a      	str	r2, [r3, #40]	; 0x28
 8000fce:	4b88      	ldr	r3, [pc, #544]	; (80011f0 <main+0x284>)
 8000fd0:	2280      	movs	r2, #128	; 0x80
 8000fd2:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 8000fd4:	4b86      	ldr	r3, [pc, #536]	; (80011f0 <main+0x284>)
 8000fd6:	4a8b      	ldr	r2, [pc, #556]	; (8001204 <main+0x298>)
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
 8000fda:	4b85      	ldr	r3, [pc, #532]	; (80011f0 <main+0x284>)
 8000fdc:	2208      	movs	r2, #8
 8000fde:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 8000fe0:	4b83      	ldr	r3, [pc, #524]	; (80011f0 <main+0x284>)
 8000fe2:	4a88      	ldr	r2, [pc, #544]	; (8001204 <main+0x298>)
 8000fe4:	639a      	str	r2, [r3, #56]	; 0x38
 8000fe6:	4b82      	ldr	r3, [pc, #520]	; (80011f0 <main+0x284>)
 8000fe8:	2210      	movs	r2, #16
 8000fea:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 8000fec:	4b80      	ldr	r3, [pc, #512]	; (80011f0 <main+0x284>)
 8000fee:	4a83      	ldr	r2, [pc, #524]	; (80011fc <main+0x290>)
 8000ff0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff2:	4b7f      	ldr	r3, [pc, #508]	; (80011f0 <main+0x284>)
 8000ff4:	2210      	movs	r2, #16
 8000ff6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 8000ffa:	4b7d      	ldr	r3, [pc, #500]	; (80011f0 <main+0x284>)
 8000ffc:	4a7f      	ldr	r2, [pc, #508]	; (80011fc <main+0x290>)
 8000ffe:	649a      	str	r2, [r3, #72]	; 0x48
 8001000:	4b7b      	ldr	r3, [pc, #492]	; (80011f0 <main+0x284>)
 8001002:	2208      	movs	r2, #8
 8001004:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 8001008:	4b79      	ldr	r3, [pc, #484]	; (80011f0 <main+0x284>)
 800100a:	4a7c      	ldr	r2, [pc, #496]	; (80011fc <main+0x290>)
 800100c:	651a      	str	r2, [r3, #80]	; 0x50
 800100e:	4b78      	ldr	r3, [pc, #480]	; (80011f0 <main+0x284>)
 8001010:	2280      	movs	r2, #128	; 0x80
 8001012:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 8001016:	4b76      	ldr	r3, [pc, #472]	; (80011f0 <main+0x284>)
 8001018:	4a7a      	ldr	r2, [pc, #488]	; (8001204 <main+0x298>)
 800101a:	659a      	str	r2, [r3, #88]	; 0x58
 800101c:	4b74      	ldr	r3, [pc, #464]	; (80011f0 <main+0x284>)
 800101e:	2204      	movs	r2, #4
 8001020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    for(i = 0; i < NUM_JOINTS; i++){
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800102a:	e024      	b.n	8001076 <main+0x10a>
    	val_encoderA [i] = HIGH;
 800102c:	4a76      	ldr	r2, [pc, #472]	; (8001208 <main+0x29c>)
 800102e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001032:	2101      	movs	r1, #1
 8001034:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 8001038:	4a74      	ldr	r2, [pc, #464]	; (800120c <main+0x2a0>)
 800103a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800103e:	2101      	movs	r1, #1
 8001040:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 8001044:	4a72      	ldr	r2, [pc, #456]	; (8001210 <main+0x2a4>)
 8001046:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800104a:	4413      	add	r3, r2
 800104c:	2201      	movs	r2, #1
 800104e:	701a      	strb	r2, [r3, #0]
    	desired_pos[i] = test_pos[i];
 8001050:	4a70      	ldr	r2, [pc, #448]	; (8001214 <main+0x2a8>)
 8001052:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800105e:	496e      	ldr	r1, [pc, #440]	; (8001218 <main+0x2ac>)
 8001060:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001064:	00d2      	lsls	r2, r2, #3
 8001066:	440a      	add	r2, r1
 8001068:	e9c2 3400 	strd	r3, r4, [r2]
    for(i = 0; i < NUM_JOINTS; i++){
 800106c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001070:	3301      	adds	r3, #1
 8001072:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800107a:	2b05      	cmp	r3, #5
 800107c:	ddd6      	ble.n	800102c <main+0xc0>
    }

    //for CPU cycle counts
    if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 800107e:	4b67      	ldr	r3, [pc, #412]	; (800121c <main+0x2b0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00e      	beq.n	80010a4 <main+0x138>

        ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001086:	4b66      	ldr	r3, [pc, #408]	; (8001220 <main+0x2b4>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a65      	ldr	r2, [pc, #404]	; (8001220 <main+0x2b4>)
 800108c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001090:	6013      	str	r3, [r2, #0]

        ARM_CM_DWT_CYCCNT  = 0;
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <main+0x2b8>)
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]

        ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 8001098:	4b60      	ldr	r3, [pc, #384]	; (800121c <main+0x2b0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a5f      	ldr	r2, [pc, #380]	; (800121c <main+0x2b0>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a4:	f011 fb28 	bl	80126f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a8:	f000 f8c4 	bl	8001234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ac:	f000 fc1c 	bl	80018e8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010b0:	f000 fbce 	bl	8001850 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80010b4:	f000 f97c 	bl	80013b0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80010b8:	f000 fa16 	bl	80014e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80010bc:	f000 fa6e 	bl	800159c <MX_TIM3_Init>
  MX_TIM5_Init();
 80010c0:	f000 fade 	bl	8001680 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80010c4:	f000 fb78 	bl	80017b8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80010c8:	f01c fa48 	bl	801d55c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80010cc:	f000 fb34 	bl	8001738 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  PWM3_change_duty_cycle(1024, 500, 100);
 80010d0:	2264      	movs	r2, #100	; 0x64
 80010d2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010da:	f7ff fcf7 	bl	8000acc <PWM3_change_duty_cycle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80010de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010e2:	4845      	ldr	r0, [pc, #276]	; (80011f8 <main+0x28c>)
 80010e4:	f012 f8cc 	bl	8013280 <HAL_GPIO_ReadPin>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d05a      	beq.n	80011a4 <main+0x238>
		  itoa(motor_steps[0], one_motor, 10);
 80010ee:	4b4e      	ldr	r3, [pc, #312]	; (8001228 <main+0x2bc>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80010f6:	220a      	movs	r2, #10
 80010f8:	4618      	mov	r0, r3
 80010fa:	f01c ff9f 	bl	801e03c <itoa>
		  strcpy(print_string, one_motor);
 80010fe:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001102:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f01d f878 	bl	801e1fe <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 800110e:	2301      	movs	r3, #1
 8001110:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001114:	e01e      	b.n	8001154 <main+0x1e8>
			  itoa(motor_steps[i], one_motor, 10);
 8001116:	4a44      	ldr	r2, [pc, #272]	; (8001228 <main+0x2bc>)
 8001118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800111c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001120:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001124:	220a      	movs	r2, #10
 8001126:	4618      	mov	r0, r3
 8001128:	f01c ff88 	bl	801e03c <itoa>
			  strcat(print_string, EOJ);
 800112c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001130:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001134:	4618      	mov	r0, r3
 8001136:	f01d f853 	bl	801e1e0 <strcat>
			  strcat(print_string, one_motor);
 800113a:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800113e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001142:	4611      	mov	r1, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f01d f84b 	bl	801e1e0 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 800114a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800114e:	3301      	adds	r3, #1
 8001150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001158:	2b05      	cmp	r3, #5
 800115a:	dddc      	ble.n	8001116 <main+0x1aa>
		  }
		  strcat(print_string, EOL);
 800115c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001160:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001164:	4618      	mov	r0, r3
 8001166:	f01d f83b 	bl	801e1e0 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 800116a:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800116e:	f7ff f8b3 	bl	80002d8 <strlen>
 8001172:	4603      	mov	r3, r0
 8001174:	b29b      	uxth	r3, r3
 8001176:	4619      	mov	r1, r3
 8001178:	482c      	ldr	r0, [pc, #176]	; (800122c <main+0x2c0>)
 800117a:	f01c fae7 	bl	801d74c <CDC_Transmit_FS>
		  HAL_Delay(2);
 800117e:	2002      	movs	r0, #2
 8001180:	f011 fb4c 	bl	801281c <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8001184:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff f8a5 	bl	80002d8 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29a      	uxth	r2, r3
 8001192:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001196:	4611      	mov	r1, r2
 8001198:	4618      	mov	r0, r3
 800119a:	f01c fad7 	bl	801d74c <CDC_Transmit_FS>
		  HAL_Delay(2);
 800119e:	2002      	movs	r0, #2
 80011a0:	f011 fb3c 	bl	801281c <HAL_Delay>
	  }
	  if (need_control){
 80011a4:	4b22      	ldr	r3, [pc, #136]	; (8001230 <main+0x2c4>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d097      	beq.n	80010de <main+0x172>
		  start = ARM_CM_DWT_CYCCNT;
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <main+0x2b8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		  Joint_controller(false, G_q_vector);
 80011b6:	463b      	mov	r3, r7
 80011b8:	4619      	mov	r1, r3
 80011ba:	2000      	movs	r0, #0
 80011bc:	f7ff fdcc 	bl	8000d58 <Joint_controller>
		  stop  = ARM_CM_DWT_CYCCNT;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <main+0x2b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  delta = stop - start;
 80011c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80011cc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		  need_control = false;
 80011d6:	4b16      	ldr	r3, [pc, #88]	; (8001230 <main+0x2c4>)
 80011d8:	2200      	movs	r2, #0
 80011da:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80011dc:	e77f      	b.n	80010de <main+0x172>
 80011de:	bf00      	nop
 80011e0:	0801f208 	.word	0x0801f208
 80011e4:	0801f21c 	.word	0x0801f21c
 80011e8:	0801f220 	.word	0x0801f220
 80011ec:	0801f224 	.word	0x0801f224
 80011f0:	240003cc 	.word	0x240003cc
 80011f4:	58020000 	.word	0x58020000
 80011f8:	58020800 	.word	0x58020800
 80011fc:	58020c00 	.word	0x58020c00
 8001200:	58020400 	.word	0x58020400
 8001204:	58021000 	.word	0x58021000
 8001208:	2400039c 	.word	0x2400039c
 800120c:	240004ac 	.word	0x240004ac
 8001210:	24000000 	.word	0x24000000
 8001214:	0801f358 	.word	0x0801f358
 8001218:	240002d0 	.word	0x240002d0
 800121c:	e0001000 	.word	0xe0001000
 8001220:	e000edfc 	.word	0xe000edfc
 8001224:	e0001004 	.word	0xe0001004
 8001228:	2400020c 	.word	0x2400020c
 800122c:	0801f22c 	.word	0x0801f22c
 8001230:	24000006 	.word	0x24000006

08001234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0cc      	sub	sp, #304	; 0x130
 8001238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800123a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800123e:	224c      	movs	r2, #76	; 0x4c
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f01c ff0c 	bl	801e060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001248:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800124c:	2220      	movs	r2, #32
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f01c ff05 	bl	801e060 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	4618      	mov	r0, r3
 800125c:	23bc      	movs	r3, #188	; 0xbc
 800125e:	461a      	mov	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	f01c fefd 	bl	801e060 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001266:	2002      	movs	r0, #2
 8001268:	f013 fa30 	bl	80146cc <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <SystemClock_Config+0x170>)
 8001274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001276:	4a4b      	ldr	r2, [pc, #300]	; (80013a4 <SystemClock_Config+0x170>)
 8001278:	f023 0301 	bic.w	r3, r3, #1
 800127c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800127e:	4b49      	ldr	r3, [pc, #292]	; (80013a4 <SystemClock_Config+0x170>)
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	4b47      	ldr	r3, [pc, #284]	; (80013a8 <SystemClock_Config+0x174>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	4a46      	ldr	r2, [pc, #280]	; (80013a8 <SystemClock_Config+0x174>)
 8001290:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001294:	6193      	str	r3, [r2, #24]
 8001296:	4b44      	ldr	r3, [pc, #272]	; (80013a8 <SystemClock_Config+0x174>)
 8001298:	699b      	ldr	r3, [r3, #24]
 800129a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80012a6:	bf00      	nop
 80012a8:	4b3f      	ldr	r3, [pc, #252]	; (80013a8 <SystemClock_Config+0x174>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80012b4:	d1f8      	bne.n	80012a8 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80012bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80012c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ca:	2302      	movs	r3, #2
 80012cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 80012d6:	2336      	movs	r3, #54	; 0x36
 80012d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80012dc:	2302      	movs	r3, #2
 80012de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012e2:	2309      	movs	r3, #9
 80012e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80012e8:	2302      	movs	r3, #2
 80012ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80012ee:	230c      	movs	r3, #12
 80012f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001300:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001304:	4618      	mov	r0, r3
 8001306:	f013 fa2b 	bl	8014760 <HAL_RCC_OscConfig>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001310:	f000 fcb2 	bl	8001c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001314:	233f      	movs	r3, #63	; 0x3f
 8001316:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800131a:	2303      	movs	r3, #3
 800131c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800132c:	2340      	movs	r3, #64	; 0x40
 800132e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001332:	2340      	movs	r3, #64	; 0x40
 8001334:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800133c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001340:	2340      	movs	r3, #64	; 0x40
 8001342:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001346:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800134a:	2103      	movs	r1, #3
 800134c:	4618      	mov	r0, r3
 800134e:	f013 fddf 	bl	8014f10 <HAL_RCC_ClockConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001358:	f000 fc8e 	bl	8001c78 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 800135c:	f107 0308 	add.w	r3, r7, #8
 8001360:	4a12      	ldr	r2, [pc, #72]	; (80013ac <SystemClock_Config+0x178>)
 8001362:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	2200      	movs	r2, #0
 800136a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2200      	movs	r2, #0
 8001372:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800137c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4618      	mov	r0, r3
 8001386:	f014 f947 	bl	8015618 <HAL_RCCEx_PeriphCLKConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8001390:	f000 fc72 	bl	8001c78 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001394:	f013 f9d4 	bl	8014740 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001398:	bf00      	nop
 800139a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	58000400 	.word	0x58000400
 80013a8:	58024800 	.word	0x58024800
 80013ac:	00040003 	.word	0x00040003

080013b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b096      	sub	sp, #88	; 0x58
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
 80013d0:	611a      	str	r2, [r3, #16]
 80013d2:	615a      	str	r2, [r3, #20]
 80013d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013d6:	1d3b      	adds	r3, r7, #4
 80013d8:	222c      	movs	r2, #44	; 0x2c
 80013da:	2100      	movs	r1, #0
 80013dc:	4618      	mov	r0, r3
 80013de:	f01c fe3f 	bl	801e060 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013e2:	4b3f      	ldr	r3, [pc, #252]	; (80014e0 <MX_TIM1_Init+0x130>)
 80013e4:	4a3f      	ldr	r2, [pc, #252]	; (80014e4 <MX_TIM1_Init+0x134>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 80013e8:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_TIM1_Init+0x130>)
 80013ea:	f240 4237 	movw	r2, #1079	; 0x437
 80013ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f0:	4b3b      	ldr	r3, [pc, #236]	; (80014e0 <MX_TIM1_Init+0x130>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 80013f6:	4b3a      	ldr	r3, [pc, #232]	; (80014e0 <MX_TIM1_Init+0x130>)
 80013f8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80013fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fe:	4b38      	ldr	r3, [pc, #224]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001404:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140a:	4b35      	ldr	r3, [pc, #212]	; (80014e0 <MX_TIM1_Init+0x130>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001410:	4833      	ldr	r0, [pc, #204]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001412:	f015 fc47 	bl	8016ca4 <HAL_TIM_PWM_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 800141c:	f000 fc2c 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001428:	2300      	movs	r3, #0
 800142a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800142c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001430:	4619      	mov	r1, r3
 8001432:	482b      	ldr	r0, [pc, #172]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001434:	f016 faa8 	bl	8017988 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800143e:	f000 fc1b 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001442:	2360      	movs	r3, #96	; 0x60
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800144e:	2300      	movs	r3, #0
 8001450:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001456:	2300      	movs	r3, #0
 8001458:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001462:	2204      	movs	r2, #4
 8001464:	4619      	mov	r1, r3
 8001466:	481e      	ldr	r0, [pc, #120]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001468:	f015 fdc0 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001472:	f000 fc01 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800147a:	2208      	movs	r2, #8
 800147c:	4619      	mov	r1, r3
 800147e:	4818      	ldr	r0, [pc, #96]	; (80014e0 <MX_TIM1_Init+0x130>)
 8001480:	f015 fdb4 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800148a:	f000 fbf5 	bl	8001c78 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800149a:	2300      	movs	r3, #0
 800149c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014b4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	; (80014e0 <MX_TIM1_Init+0x130>)
 80014c4:	f016 fae8 	bl	8017a98 <HAL_TIMEx_ConfigBreakDeadTime>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80014ce:	f000 fbd3 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014d2:	4803      	ldr	r0, [pc, #12]	; (80014e0 <MX_TIM1_Init+0x130>)
 80014d4:	f000 fc80 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 80014d8:	bf00      	nop
 80014da:	3758      	adds	r7, #88	; 0x58
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	24000550 	.word	0x24000550
 80014e4:	40010000 	.word	0x40010000

080014e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	f107 031c 	add.w	r3, r7, #28
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fa:	463b      	mov	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150c:	4b22      	ldr	r3, [pc, #136]	; (8001598 <MX_TIM2_Init+0xb0>)
 800150e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001512:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_TIM2_Init+0xb0>)
 8001516:	f240 4237 	movw	r2, #1079	; 0x437
 800151a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151c:	4b1e      	ldr	r3, [pc, #120]	; (8001598 <MX_TIM2_Init+0xb0>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM2_Init+0xb0>)
 8001524:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001528:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152a:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <MX_TIM2_Init+0xb0>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b19      	ldr	r3, [pc, #100]	; (8001598 <MX_TIM2_Init+0xb0>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001536:	4818      	ldr	r0, [pc, #96]	; (8001598 <MX_TIM2_Init+0xb0>)
 8001538:	f015 fbb4 	bl	8016ca4 <HAL_TIM_PWM_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001542:	f000 fb99 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	4619      	mov	r1, r3
 8001554:	4810      	ldr	r0, [pc, #64]	; (8001598 <MX_TIM2_Init+0xb0>)
 8001556:	f016 fa17 	bl	8017988 <HAL_TIMEx_MasterConfigSynchronization>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d001      	beq.n	8001564 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001560:	f000 fb8a 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001564:	2360      	movs	r3, #96	; 0x60
 8001566:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001568:	2300      	movs	r3, #0
 800156a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001574:	463b      	mov	r3, r7
 8001576:	2200      	movs	r2, #0
 8001578:	4619      	mov	r1, r3
 800157a:	4807      	ldr	r0, [pc, #28]	; (8001598 <MX_TIM2_Init+0xb0>)
 800157c:	f015 fd36 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001586:	f000 fb77 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <MX_TIM2_Init+0xb0>)
 800158c:	f000 fc24 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001590:	bf00      	nop
 8001592:	3728      	adds	r7, #40	; 0x28
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	24000590 	.word	0x24000590

0800159c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a2:	f107 031c 	add.w	r3, r7, #28
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ae:	463b      	mov	r3, r7
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
 80015bc:	615a      	str	r2, [r3, #20]
 80015be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015c0:	4b2d      	ldr	r3, [pc, #180]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015c2:	4a2e      	ldr	r2, [pc, #184]	; (800167c <MX_TIM3_Init+0xe0>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80015c6:	4b2c      	ldr	r3, [pc, #176]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015c8:	f240 4237 	movw	r2, #1079	; 0x437
 80015cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 80015d4:	4b28      	ldr	r3, [pc, #160]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015d6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b26      	ldr	r3, [pc, #152]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b25      	ldr	r3, [pc, #148]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e8:	4823      	ldr	r0, [pc, #140]	; (8001678 <MX_TIM3_Init+0xdc>)
 80015ea:	f015 fb5b 	bl	8016ca4 <HAL_TIM_PWM_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80015f4:	f000 fb40 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001600:	f107 031c 	add.w	r3, r7, #28
 8001604:	4619      	mov	r1, r3
 8001606:	481c      	ldr	r0, [pc, #112]	; (8001678 <MX_TIM3_Init+0xdc>)
 8001608:	f016 f9be 	bl	8017988 <HAL_TIMEx_MasterConfigSynchronization>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001612:	f000 fb31 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001616:	2360      	movs	r3, #96	; 0x60
 8001618:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001622:	2300      	movs	r3, #0
 8001624:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001626:	463b      	mov	r3, r7
 8001628:	2200      	movs	r2, #0
 800162a:	4619      	mov	r1, r3
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <MX_TIM3_Init+0xdc>)
 800162e:	f015 fcdd 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001638:	f000 fb1e 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163c:	463b      	mov	r3, r7
 800163e:	2204      	movs	r2, #4
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_TIM3_Init+0xdc>)
 8001644:	f015 fcd2 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800164e:	f000 fb13 	bl	8001c78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001652:	463b      	mov	r3, r7
 8001654:	220c      	movs	r2, #12
 8001656:	4619      	mov	r1, r3
 8001658:	4807      	ldr	r0, [pc, #28]	; (8001678 <MX_TIM3_Init+0xdc>)
 800165a:	f015 fcc7 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8001664:	f000 fb08 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <MX_TIM3_Init+0xdc>)
 800166a:	f000 fbb5 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 800166e:	bf00      	nop
 8001670:	3728      	adds	r7, #40	; 0x28
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2400046c 	.word	0x2400046c
 800167c:	40000400 	.word	0x40000400

08001680 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b08a      	sub	sp, #40	; 0x28
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001686:	f107 031c 	add.w	r3, r7, #28
 800168a:	2200      	movs	r2, #0
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001692:	463b      	mov	r3, r7
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016a4:	4b22      	ldr	r3, [pc, #136]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016a6:	4a23      	ldr	r2, [pc, #140]	; (8001734 <MX_TIM5_Init+0xb4>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016ac:	f240 4237 	movw	r2, #1079	; 0x437
 80016b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b1f      	ldr	r3, [pc, #124]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016ba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80016be:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80016cc:	4818      	ldr	r0, [pc, #96]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016ce:	f015 fae9 	bl	8016ca4 <HAL_TIM_PWM_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 80016d8:	f000 face 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016dc:	2300      	movs	r3, #0
 80016de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	4619      	mov	r1, r3
 80016ea:	4811      	ldr	r0, [pc, #68]	; (8001730 <MX_TIM5_Init+0xb0>)
 80016ec:	f016 f94c 	bl	8017988 <HAL_TIMEx_MasterConfigSynchronization>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80016f6:	f000 fabf 	bl	8001c78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016fa:	2360      	movs	r3, #96	; 0x60
 80016fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80016fe:	2300      	movs	r3, #0
 8001700:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001702:	2300      	movs	r3, #0
 8001704:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800170a:	463b      	mov	r3, r7
 800170c:	220c      	movs	r2, #12
 800170e:	4619      	mov	r1, r3
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <MX_TIM5_Init+0xb0>)
 8001712:	f015 fc6b 	bl	8016fec <HAL_TIM_PWM_ConfigChannel>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 800171c:	f000 faac 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <MX_TIM5_Init+0xb0>)
 8001722:	f000 fb59 	bl	8001dd8 <HAL_TIM_MspPostInit>

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	2400042c 	.word	0x2400042c
 8001734:	40000c00 	.word	0x40000c00

08001738 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001748:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_TIM7_Init+0x78>)
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <MX_TIM7_Init+0x7c>)
 800174c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 800174e:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM7_Init+0x78>)
 8001750:	f240 4237 	movw	r2, #1079	; 0x437
 8001754:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_TIM7_Init+0x78>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800175c:	4b14      	ldr	r3, [pc, #80]	; (80017b0 <MX_TIM7_Init+0x78>)
 800175e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001762:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001764:	4b12      	ldr	r3, [pc, #72]	; (80017b0 <MX_TIM7_Init+0x78>)
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800176a:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_TIM7_Init+0x78>)
 800176c:	f015 fa44 	bl	8016bf8 <HAL_TIM_Base_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001776:	f000 fa7f 	bl	8001c78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800177e:	2300      	movs	r3, #0
 8001780:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	4619      	mov	r1, r3
 8001786:	480a      	ldr	r0, [pc, #40]	; (80017b0 <MX_TIM7_Init+0x78>)
 8001788:	f016 f8fe 	bl	8017988 <HAL_TIMEx_MasterConfigSynchronization>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001792:	f000 fa71 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8001796:	4806      	ldr	r0, [pc, #24]	; (80017b0 <MX_TIM7_Init+0x78>)
 8001798:	f015 fa5a 	bl	8016c50 <HAL_TIM_Base_Start_IT>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 80017a2:	f000 fa69 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	240005d0 	.word	0x240005d0
 80017b4:	40001400 	.word	0x40001400

080017b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017bc:	4b22      	ldr	r3, [pc, #136]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017be:	4a23      	ldr	r2, [pc, #140]	; (800184c <MX_USART1_UART_Init+0x94>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017c4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b1c      	ldr	r3, [pc, #112]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b1a      	ldr	r3, [pc, #104]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b19      	ldr	r3, [pc, #100]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ee:	4b16      	ldr	r3, [pc, #88]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017f4:	4b14      	ldr	r3, [pc, #80]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017fa:	4b13      	ldr	r3, [pc, #76]	; (8001848 <MX_USART1_UART_Init+0x90>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001800:	4811      	ldr	r0, [pc, #68]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001802:	f016 f9e5 	bl	8017bd0 <HAL_UART_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800180c:	f000 fa34 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001810:	2100      	movs	r1, #0
 8001812:	480d      	ldr	r0, [pc, #52]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001814:	f018 ff53 	bl	801a6be <HAL_UARTEx_SetTxFifoThreshold>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800181e:	f000 fa2b 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001822:	2100      	movs	r1, #0
 8001824:	4808      	ldr	r0, [pc, #32]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001826:	f018 ff88 	bl	801a73a <HAL_UARTEx_SetRxFifoThreshold>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001830:	f000 fa22 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <MX_USART1_UART_Init+0x90>)
 8001836:	f018 ff09 	bl	801a64c <HAL_UARTEx_DisableFifoMode>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001840:	f000 fa1a 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	240004c4 	.word	0x240004c4
 800184c:	40011000 	.word	0x40011000

08001850 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001854:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001856:	4a23      	ldr	r2, [pc, #140]	; (80018e4 <MX_USART3_UART_Init+0x94>)
 8001858:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800185a:	4b21      	ldr	r3, [pc, #132]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 800185c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001860:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001886:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001898:	4811      	ldr	r0, [pc, #68]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 800189a:	f016 f999 	bl	8017bd0 <HAL_UART_Init>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80018a4:	f000 f9e8 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018a8:	2100      	movs	r1, #0
 80018aa:	480d      	ldr	r0, [pc, #52]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 80018ac:	f018 ff07 	bl	801a6be <HAL_UARTEx_SetTxFifoThreshold>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80018b6:	f000 f9df 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80018ba:	2100      	movs	r1, #0
 80018bc:	4808      	ldr	r0, [pc, #32]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 80018be:	f018 ff3c 	bl	801a73a <HAL_UARTEx_SetRxFifoThreshold>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80018c8:	f000 f9d6 	bl	8001c78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80018cc:	4804      	ldr	r0, [pc, #16]	; (80018e0 <MX_USART3_UART_Init+0x90>)
 80018ce:	f018 febd 	bl	801a64c <HAL_UARTEx_DisableFifoMode>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80018d8:	f000 f9ce 	bl	8001c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018dc:	bf00      	nop
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	24000310 	.word	0x24000310
 80018e4:	40004800 	.word	0x40004800

080018e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08e      	sub	sp, #56	; 0x38
 80018ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
 80018f8:	609a      	str	r2, [r3, #8]
 80018fa:	60da      	str	r2, [r3, #12]
 80018fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018fe:	4bbe      	ldr	r3, [pc, #760]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001904:	4abc      	ldr	r2, [pc, #752]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001906:	f043 0310 	orr.w	r3, r3, #16
 800190a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800190e:	4bba      	ldr	r3, [pc, #744]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	623b      	str	r3, [r7, #32]
 800191a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800191c:	4bb6      	ldr	r3, [pc, #728]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800191e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001922:	4ab5      	ldr	r2, [pc, #724]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800192c:	4bb2      	ldr	r3, [pc, #712]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800192e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800193a:	4baf      	ldr	r3, [pc, #700]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800193c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001940:	4aad      	ldr	r2, [pc, #692]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800194a:	4bab      	ldr	r3, [pc, #684]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800194c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001950:	f003 0320 	and.w	r3, r3, #32
 8001954:	61bb      	str	r3, [r7, #24]
 8001956:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001958:	4ba7      	ldr	r3, [pc, #668]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800195a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800195e:	4aa6      	ldr	r2, [pc, #664]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001964:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001968:	4ba3      	ldr	r3, [pc, #652]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800196a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800196e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001976:	4ba0      	ldr	r3, [pc, #640]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800197c:	4a9e      	ldr	r2, [pc, #632]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001986:	4b9c      	ldr	r3, [pc, #624]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	4b98      	ldr	r3, [pc, #608]	; (8001bf8 <MX_GPIO_Init+0x310>)
 8001996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800199a:	4a97      	ldr	r2, [pc, #604]	; (8001bf8 <MX_GPIO_Init+0x310>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019a4:	4b94      	ldr	r3, [pc, #592]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019b8:	4a8f      	ldr	r2, [pc, #572]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019c2:	4b8d      	ldr	r3, [pc, #564]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80019d0:	4b89      	ldr	r3, [pc, #548]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d6:	4a88      	ldr	r2, [pc, #544]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019e0:	4b85      	ldr	r3, [pc, #532]	; (8001bf8 <MX_GPIO_Init+0x310>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80019ee:	2200      	movs	r2, #0
 80019f0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80019f4:	4881      	ldr	r0, [pc, #516]	; (8001bfc <MX_GPIO_Init+0x314>)
 80019f6:	f011 fc5b 	bl	80132b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	4880      	ldr	r0, [pc, #512]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001a00:	f011 fc56 	bl	80132b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001a04:	2314      	movs	r3, #20
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a14:	4619      	mov	r1, r3
 8001a16:	487b      	ldr	r0, [pc, #492]	; (8001c04 <MX_GPIO_Init+0x31c>)
 8001a18:	f011 fa82 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a1c:	2308      	movs	r3, #8
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a20:	4b79      	ldr	r3, [pc, #484]	; (8001c08 <MX_GPIO_Init+0x320>)
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4875      	ldr	r0, [pc, #468]	; (8001c04 <MX_GPIO_Init+0x31c>)
 8001a30:	f011 fa76 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a46:	4619      	mov	r1, r3
 8001a48:	4870      	ldr	r0, [pc, #448]	; (8001c0c <MX_GPIO_Init+0x324>)
 8001a4a:	f011 fa69 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a4e:	2380      	movs	r3, #128	; 0x80
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a52:	2300      	movs	r3, #0
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5e:	4619      	mov	r1, r3
 8001a60:	486b      	ldr	r0, [pc, #428]	; (8001c10 <MX_GPIO_Init+0x328>)
 8001a62:	f011 fa5d 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 8001a66:	f240 4382 	movw	r3, #1154	; 0x482
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4864      	ldr	r0, [pc, #400]	; (8001c0c <MX_GPIO_Init+0x324>)
 8001a7c:	f011 fa50 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a80:	2303      	movs	r3, #3
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001a84:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <MX_GPIO_Init+0x320>)
 8001a86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a90:	4619      	mov	r1, r3
 8001a92:	4860      	ldr	r0, [pc, #384]	; (8001c14 <MX_GPIO_Init+0x32c>)
 8001a94:	f011 fa44 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 8001a98:	2304      	movs	r3, #4
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa8:	230b      	movs	r3, #11
 8001aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4858      	ldr	r0, [pc, #352]	; (8001c14 <MX_GPIO_Init+0x32c>)
 8001ab4:	f011 fa34 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ab8:	2330      	movs	r3, #48	; 0x30
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac8:	230b      	movs	r3, #11
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	484e      	ldr	r0, [pc, #312]	; (8001c0c <MX_GPIO_Init+0x324>)
 8001ad4:	f011 fa24 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ad8:	2304      	movs	r3, #4
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001adc:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <MX_GPIO_Init+0x320>)
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4844      	ldr	r0, [pc, #272]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001aec:	f011 fa18 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001af0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af6:	2302      	movs	r3, #2
 8001af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afa:	2300      	movs	r3, #0
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b02:	230b      	movs	r3, #11
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	483b      	ldr	r0, [pc, #236]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001b0e:	f011 fa07 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001b12:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b28:	4619      	mov	r1, r3
 8001b2a:	4834      	ldr	r0, [pc, #208]	; (8001bfc <MX_GPIO_Init+0x314>)
 8001b2c:	f011 f9f8 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001b30:	2340      	movs	r3, #64	; 0x40
 8001b32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b44:	4619      	mov	r1, r3
 8001b46:	482e      	ldr	r0, [pc, #184]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001b48:	f011 f9ea 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001b4c:	2380      	movs	r3, #128	; 0x80
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b54:	2301      	movs	r3, #1
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4828      	ldr	r0, [pc, #160]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001b60:	f011 f9de 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b76:	4619      	mov	r1, r3
 8001b78:	4824      	ldr	r0, [pc, #144]	; (8001c0c <MX_GPIO_Init+0x324>)
 8001b7a:	f011 f9d1 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4821      	ldr	r0, [pc, #132]	; (8001c18 <MX_GPIO_Init+0x330>)
 8001b92:	f011 f9c5 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001b96:	23d0      	movs	r3, #208	; 0xd0
 8001b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <MX_GPIO_Init+0x320>)
 8001b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	481b      	ldr	r0, [pc, #108]	; (8001c18 <MX_GPIO_Init+0x330>)
 8001baa:	f011 f9b9 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4815      	ldr	r0, [pc, #84]	; (8001c18 <MX_GPIO_Init+0x330>)
 8001bc2:	f011 f9ad 	bl	8012f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001bc6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bd8:	230b      	movs	r3, #11
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001be0:	4619      	mov	r1, r3
 8001be2:	4807      	ldr	r0, [pc, #28]	; (8001c00 <MX_GPIO_Init+0x318>)
 8001be4:	f011 f99c 	bl	8012f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2006      	movs	r0, #6
 8001bee:	f010 ff1e 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001bf2:	2006      	movs	r0, #6
 8001bf4:	e012      	b.n	8001c1c <MX_GPIO_Init+0x334>
 8001bf6:	bf00      	nop
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	58020400 	.word	0x58020400
 8001c00:	58021800 	.word	0x58021800
 8001c04:	58021000 	.word	0x58021000
 8001c08:	11310000 	.word	0x11310000
 8001c0c:	58020800 	.word	0x58020800
 8001c10:	58021400 	.word	0x58021400
 8001c14:	58020000 	.word	0x58020000
 8001c18:	58020c00 	.word	0x58020c00
 8001c1c:	f010 ff21 	bl	8012a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001c20:	2200      	movs	r2, #0
 8001c22:	2100      	movs	r1, #0
 8001c24:	2007      	movs	r0, #7
 8001c26:	f010 ff02 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001c2a:	2007      	movs	r0, #7
 8001c2c:	f010 ff19 	bl	8012a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	2008      	movs	r0, #8
 8001c36:	f010 fefa 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001c3a:	2008      	movs	r0, #8
 8001c3c:	f010 ff11 	bl	8012a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2009      	movs	r0, #9
 8001c46:	f010 fef2 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001c4a:	2009      	movs	r0, #9
 8001c4c:	f010 ff09 	bl	8012a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001c50:	2200      	movs	r2, #0
 8001c52:	2100      	movs	r1, #0
 8001c54:	200a      	movs	r0, #10
 8001c56:	f010 feea 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001c5a:	200a      	movs	r0, #10
 8001c5c:	f010 ff01 	bl	8012a62 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	2017      	movs	r0, #23
 8001c66:	f010 fee2 	bl	8012a2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001c6a:	2017      	movs	r0, #23
 8001c6c:	f010 fef9 	bl	8012a62 <HAL_NVIC_EnableIRQ>

}
 8001c70:	bf00      	nop
 8001c72:	3738      	adds	r7, #56	; 0x38
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <HAL_MspInit+0x30>)
 8001c90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001c94:	4a08      	ldr	r2, [pc, #32]	; (8001cb8 <HAL_MspInit+0x30>)
 8001c96:	f043 0302 	orr.w	r3, r3, #2
 8001c9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_MspInit+0x30>)
 8001ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	58024400 	.word	0x58024400

08001cbc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b087      	sub	sp, #28
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a2b      	ldr	r2, [pc, #172]	; (8001d78 <HAL_TIM_PWM_MspInit+0xbc>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d10f      	bne.n	8001cee <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cce:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001cd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001cd4:	4a29      	ldr	r2, [pc, #164]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001cde:	4b27      	ldr	r3, [pc, #156]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001ce0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001cec:	e03d      	b.n	8001d6a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf6:	d10f      	bne.n	8001d18 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf8:	4b20      	ldr	r3, [pc, #128]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001cfa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001cfe:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d08:	4b1c      	ldr	r3, [pc, #112]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d0a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d0e:	f003 0301 	and.w	r3, r3, #1
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
}
 8001d16:	e028      	b.n	8001d6a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a18      	ldr	r2, [pc, #96]	; (8001d80 <HAL_TIM_PWM_MspInit+0xc4>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d10f      	bne.n	8001d42 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d28:	4a14      	ldr	r2, [pc, #80]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d2a:	f043 0302 	orr.w	r3, r3, #2
 8001d2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	60fb      	str	r3, [r7, #12]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
}
 8001d40:	e013      	b.n	8001d6a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a0f      	ldr	r2, [pc, #60]	; (8001d84 <HAL_TIM_PWM_MspInit+0xc8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d10e      	bne.n	8001d6a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d52:	4a0a      	ldr	r2, [pc, #40]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <HAL_TIM_PWM_MspInit+0xc0>)
 8001d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	60bb      	str	r3, [r7, #8]
 8001d68:	68bb      	ldr	r3, [r7, #8]
}
 8001d6a:	bf00      	nop
 8001d6c:	371c      	adds	r7, #28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	58024400 	.word	0x58024400
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40000c00 	.word	0x40000c00

08001d88 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0e      	ldr	r2, [pc, #56]	; (8001dd0 <HAL_TIM_Base_MspInit+0x48>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d116      	bne.n	8001dc8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001d9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001da0:	4a0c      	ldr	r2, [pc, #48]	; (8001dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001da2:	f043 0320 	orr.w	r3, r3, #32
 8001da6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001daa:	4b0a      	ldr	r3, [pc, #40]	; (8001dd4 <HAL_TIM_Base_MspInit+0x4c>)
 8001dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001db0:	f003 0320 	and.w	r3, r3, #32
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001db8:	2200      	movs	r2, #0
 8001dba:	2100      	movs	r1, #0
 8001dbc:	2037      	movs	r0, #55	; 0x37
 8001dbe:	f010 fe36 	bl	8012a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001dc2:	2037      	movs	r0, #55	; 0x37
 8001dc4:	f010 fe4d 	bl	8012a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8001dc8:	bf00      	nop
 8001dca:	3710      	adds	r7, #16
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40001400 	.word	0x40001400
 8001dd4:	58024400 	.word	0x58024400

08001dd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b08c      	sub	sp, #48	; 0x30
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 031c 	add.w	r3, r7, #28
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5a      	ldr	r2, [pc, #360]	; (8001f60 <HAL_TIM_MspPostInit+0x188>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d120      	bne.n	8001e3c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001dfa:	4b5a      	ldr	r3, [pc, #360]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e00:	4a58      	ldr	r2, [pc, #352]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e0a:	4b56      	ldr	r3, [pc, #344]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e10:	f003 0310 	and.w	r3, r3, #16
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001e18:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e26:	2300      	movs	r3, #0
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e2e:	f107 031c 	add.w	r3, r7, #28
 8001e32:	4619      	mov	r1, r3
 8001e34:	484c      	ldr	r0, [pc, #304]	; (8001f68 <HAL_TIM_MspPostInit+0x190>)
 8001e36:	f011 f873 	bl	8012f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001e3a:	e08c      	b.n	8001f56 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e44:	d11f      	bne.n	8001e86 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e46:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e4c:	4a45      	ldr	r2, [pc, #276]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e56:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e5c:	f003 0301 	and.w	r3, r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e64:	2320      	movs	r3, #32
 8001e66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e74:	2301      	movs	r3, #1
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e78:	f107 031c 	add.w	r3, r7, #28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	483b      	ldr	r0, [pc, #236]	; (8001f6c <HAL_TIM_MspPostInit+0x194>)
 8001e80:	f011 f84e 	bl	8012f20 <HAL_GPIO_Init>
}
 8001e84:	e067      	b.n	8001f56 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a39      	ldr	r2, [pc, #228]	; (8001f70 <HAL_TIM_MspPostInit+0x198>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d13e      	bne.n	8001f0e <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e90:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e96:	4a33      	ldr	r2, [pc, #204]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb4:	4a2b      	ldr	r2, [pc, #172]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebe:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001ec0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ecc:	23c0      	movs	r3, #192	; 0xc0
 8001ece:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001edc:	2302      	movs	r3, #2
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4821      	ldr	r0, [pc, #132]	; (8001f6c <HAL_TIM_MspPostInit+0x194>)
 8001ee8:	f011 f81a 	bl	8012f20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001eec:	2302      	movs	r3, #2
 8001eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001efc:	2302      	movs	r3, #2
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f00:	f107 031c 	add.w	r3, r7, #28
 8001f04:	4619      	mov	r1, r3
 8001f06:	481b      	ldr	r0, [pc, #108]	; (8001f74 <HAL_TIM_MspPostInit+0x19c>)
 8001f08:	f011 f80a 	bl	8012f20 <HAL_GPIO_Init>
}
 8001f0c:	e023      	b.n	8001f56 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a19      	ldr	r2, [pc, #100]	; (8001f78 <HAL_TIM_MspPostInit+0x1a0>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d11e      	bne.n	8001f56 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001f1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f1e:	4a11      	ldr	r2, [pc, #68]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_TIM_MspPostInit+0x18c>)
 8001f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001f36:	2308      	movs	r3, #8
 8001f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001f46:	2302      	movs	r3, #2
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4806      	ldr	r0, [pc, #24]	; (8001f6c <HAL_TIM_MspPostInit+0x194>)
 8001f52:	f010 ffe5 	bl	8012f20 <HAL_GPIO_Init>
}
 8001f56:	bf00      	nop
 8001f58:	3730      	adds	r7, #48	; 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	40010000 	.word	0x40010000
 8001f64:	58024400 	.word	0x58024400
 8001f68:	58021000 	.word	0x58021000
 8001f6c:	58020000 	.word	0x58020000
 8001f70:	40000400 	.word	0x40000400
 8001f74:	58020400 	.word	0x58020400
 8001f78:	40000c00 	.word	0x40000c00

08001f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b08c      	sub	sp, #48	; 0x30
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 031c 	add.w	r3, r7, #28
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a41      	ldr	r2, [pc, #260]	; (80020a0 <HAL_UART_MspInit+0x124>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d13f      	bne.n	800201e <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f9e:	4b41      	ldr	r3, [pc, #260]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fa0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fa6:	f043 0310 	orr.w	r3, r3, #16
 8001faa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001fae:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fb4:	f003 0310 	and.w	r3, r3, #16
 8001fb8:	61bb      	str	r3, [r7, #24]
 8001fba:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	4b39      	ldr	r3, [pc, #228]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fc2:	4a38      	ldr	r2, [pc, #224]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fc4:	f043 0302 	orr.w	r3, r3, #2
 8001fc8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fcc:	4b35      	ldr	r3, [pc, #212]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8001fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	617b      	str	r3, [r7, #20]
 8001fd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001fec:	2304      	movs	r3, #4
 8001fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ff0:	f107 031c 	add.w	r3, r7, #28
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	482c      	ldr	r0, [pc, #176]	; (80020a8 <HAL_UART_MspInit+0x12c>)
 8001ff8:	f010 ff92 	bl	8012f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ffc:	2340      	movs	r3, #64	; 0x40
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002000:	2302      	movs	r3, #2
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800200c:	2307      	movs	r3, #7
 800200e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4824      	ldr	r0, [pc, #144]	; (80020a8 <HAL_UART_MspInit+0x12c>)
 8002018:	f010 ff82 	bl	8012f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800201c:	e03b      	b.n	8002096 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a22      	ldr	r2, [pc, #136]	; (80020ac <HAL_UART_MspInit+0x130>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d136      	bne.n	8002096 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002028:	4b1e      	ldr	r3, [pc, #120]	; (80020a4 <HAL_UART_MspInit+0x128>)
 800202a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202e:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8002030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002034:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002038:	4b1a      	ldr	r3, [pc, #104]	; (80020a4 <HAL_UART_MspInit+0x128>)
 800203a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800203e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002046:	4b17      	ldr	r3, [pc, #92]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8002048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800204c:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_UART_MspInit+0x128>)
 800204e:	f043 0308 	orr.w	r3, r3, #8
 8002052:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_UART_MspInit+0x128>)
 8002058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002072:	2300      	movs	r3, #0
 8002074:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002076:	2307      	movs	r3, #7
 8002078:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800207a:	f107 031c 	add.w	r3, r7, #28
 800207e:	4619      	mov	r1, r3
 8002080:	480b      	ldr	r0, [pc, #44]	; (80020b0 <HAL_UART_MspInit+0x134>)
 8002082:	f010 ff4d 	bl	8012f20 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002086:	2200      	movs	r2, #0
 8002088:	2100      	movs	r1, #0
 800208a:	2027      	movs	r0, #39	; 0x27
 800208c:	f010 fccf 	bl	8012a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002090:	2027      	movs	r0, #39	; 0x27
 8002092:	f010 fce6 	bl	8012a62 <HAL_NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3730      	adds	r7, #48	; 0x30
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40011000 	.word	0x40011000
 80020a4:	58024400 	.word	0x58024400
 80020a8:	58020400 	.word	0x58020400
 80020ac:	40004800 	.word	0x40004800
 80020b0:	58020c00 	.word	0x58020c00

080020b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr

080020c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020c2:	b480      	push	{r7}
 80020c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020c6:	e7fe      	b.n	80020c6 <HardFault_Handler+0x4>

080020c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020cc:	e7fe      	b.n	80020cc <MemManage_Handler+0x4>

080020ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020ce:	b480      	push	{r7}
 80020d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d2:	e7fe      	b.n	80020d2 <BusFault_Handler+0x4>

080020d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020d8:	e7fe      	b.n	80020d8 <UsageFault_Handler+0x4>

080020da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020da:	b480      	push	{r7}
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020ec:	bf00      	nop
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002108:	f010 fb68 	bl	80127dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800210c:	bf00      	nop
 800210e:	bd80      	pop	{r7, pc}

08002110 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002114:	2001      	movs	r0, #1
 8002116:	f011 f8e4 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800211a:	bf00      	nop
 800211c:	bd80      	pop	{r7, pc}

0800211e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002122:	2002      	movs	r0, #2
 8002124:	f011 f8dd 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002128:	bf00      	nop
 800212a:	bd80      	pop	{r7, pc}

0800212c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002130:	2004      	movs	r0, #4
 8002132:	f011 f8d6 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}

0800213a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800213a:	b580      	push	{r7, lr}
 800213c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800213e:	2008      	movs	r0, #8
 8002140:	f011 f8cf 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002144:	bf00      	nop
 8002146:	bd80      	pop	{r7, pc}

08002148 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800214c:	2010      	movs	r0, #16
 800214e:	f011 f8c8 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002152:	bf00      	nop
 8002154:	bd80      	pop	{r7, pc}

08002156 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800215a:	2040      	movs	r0, #64	; 0x40
 800215c:	f011 f8c1 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002160:	2080      	movs	r0, #128	; 0x80
 8002162:	f011 f8be 	bl	80132e2 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002170:	4802      	ldr	r0, [pc, #8]	; (800217c <USART3_IRQHandler+0x10>)
 8002172:	f015 fd7d 	bl	8017c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	24000310 	.word	0x24000310

08002180 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002184:	4802      	ldr	r0, [pc, #8]	; (8002190 <TIM7_IRQHandler+0x10>)
 8002186:	f014 fe11 	bl	8016dac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	240005d0 	.word	0x240005d0

08002194 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002198:	4802      	ldr	r0, [pc, #8]	; (80021a4 <OTG_FS_IRQHandler+0x10>)
 800219a:	f011 fa13 	bl	80135c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	24001afc 	.word	0x24001afc

080021a8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80021b0:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <_sbrk+0x50>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d102      	bne.n	80021be <_sbrk+0x16>
		heap_end = &end;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <_sbrk+0x50>)
 80021ba:	4a10      	ldr	r2, [pc, #64]	; (80021fc <_sbrk+0x54>)
 80021bc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80021be:	4b0e      	ldr	r3, [pc, #56]	; (80021f8 <_sbrk+0x50>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021c4:	4b0c      	ldr	r3, [pc, #48]	; (80021f8 <_sbrk+0x50>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4413      	add	r3, r2
 80021cc:	466a      	mov	r2, sp
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d907      	bls.n	80021e2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021d2:	f01b fef1 	bl	801dfb8 <__errno>
 80021d6:	4602      	mov	r2, r0
 80021d8:	230c      	movs	r3, #12
 80021da:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021dc:	f04f 33ff 	mov.w	r3, #4294967295
 80021e0:	e006      	b.n	80021f0 <_sbrk+0x48>
	}

	heap_end += incr;
 80021e2:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <_sbrk+0x50>)
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	4a03      	ldr	r2, [pc, #12]	; (80021f8 <_sbrk+0x50>)
 80021ec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021ee:	68fb      	ldr	r3, [r7, #12]
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	24000300 	.word	0x24000300
 80021fc:	24001f08 	.word	0x24001f08

08002200 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002204:	4b29      	ldr	r3, [pc, #164]	; (80022ac <SystemInit+0xac>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a28      	ldr	r2, [pc, #160]	; (80022ac <SystemInit+0xac>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002214:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <SystemInit+0xb0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a25      	ldr	r2, [pc, #148]	; (80022b0 <SystemInit+0xb0>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002220:	4b23      	ldr	r3, [pc, #140]	; (80022b0 <SystemInit+0xb0>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002226:	4b22      	ldr	r3, [pc, #136]	; (80022b0 <SystemInit+0xb0>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4921      	ldr	r1, [pc, #132]	; (80022b0 <SystemInit+0xb0>)
 800222c:	4b21      	ldr	r3, [pc, #132]	; (80022b4 <SystemInit+0xb4>)
 800222e:	4013      	ands	r3, r2
 8002230:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002232:	4b1f      	ldr	r3, [pc, #124]	; (80022b0 <SystemInit+0xb0>)
 8002234:	2200      	movs	r2, #0
 8002236:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002238:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <SystemInit+0xb0>)
 800223a:	2200      	movs	r2, #0
 800223c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800223e:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <SystemInit+0xb0>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8002244:	4b1a      	ldr	r3, [pc, #104]	; (80022b0 <SystemInit+0xb0>)
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 800224a:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <SystemInit+0xb0>)
 800224c:	2200      	movs	r2, #0
 800224e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8002250:	4b17      	ldr	r3, [pc, #92]	; (80022b0 <SystemInit+0xb0>)
 8002252:	2200      	movs	r2, #0
 8002254:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002256:	4b16      	ldr	r3, [pc, #88]	; (80022b0 <SystemInit+0xb0>)
 8002258:	2200      	movs	r2, #0
 800225a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 800225c:	4b14      	ldr	r3, [pc, #80]	; (80022b0 <SystemInit+0xb0>)
 800225e:	2200      	movs	r2, #0
 8002260:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002262:	4b13      	ldr	r3, [pc, #76]	; (80022b0 <SystemInit+0xb0>)
 8002264:	2200      	movs	r2, #0
 8002266:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002268:	4b11      	ldr	r3, [pc, #68]	; (80022b0 <SystemInit+0xb0>)
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800226e:	4b10      	ldr	r3, [pc, #64]	; (80022b0 <SystemInit+0xb0>)
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002274:	4b0e      	ldr	r3, [pc, #56]	; (80022b0 <SystemInit+0xb0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <SystemInit+0xb0>)
 800227a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800227e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <SystemInit+0xb0>)
 8002282:	2200      	movs	r2, #0
 8002284:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002286:	4b0c      	ldr	r3, [pc, #48]	; (80022b8 <SystemInit+0xb8>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	4b0c      	ldr	r3, [pc, #48]	; (80022bc <SystemInit+0xbc>)
 800228c:	4013      	ands	r3, r2
 800228e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002292:	d202      	bcs.n	800229a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002294:	4b0a      	ldr	r3, [pc, #40]	; (80022c0 <SystemInit+0xc0>)
 8002296:	2201      	movs	r2, #1
 8002298:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800229a:	4b04      	ldr	r3, [pc, #16]	; (80022ac <SystemInit+0xac>)
 800229c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022a0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000ed00 	.word	0xe000ed00
 80022b0:	58024400 	.word	0x58024400
 80022b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80022b8:	5c001000 	.word	0x5c001000
 80022bc:	ffff0000 	.word	0xffff0000
 80022c0:	51008108 	.word	0x51008108

080022c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80022c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80022ca:	e003      	b.n	80022d4 <LoopCopyDataInit>

080022cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80022ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80022d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80022d2:	3104      	adds	r1, #4

080022d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80022d4:	480b      	ldr	r0, [pc, #44]	; (8002304 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80022d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80022da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80022dc:	d3f6      	bcc.n	80022cc <CopyDataInit>
  ldr  r2, =_sbss
 80022de:	4a0b      	ldr	r2, [pc, #44]	; (800230c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80022e0:	e002      	b.n	80022e8 <LoopFillZerobss>

080022e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80022e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80022e4:	f842 3b04 	str.w	r3, [r2], #4

080022e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80022ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80022ec:	d3f9      	bcc.n	80022e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80022ee:	f7ff ff87 	bl	8002200 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022f2:	f01b fe67 	bl	801dfc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022f6:	f7fe fe39 	bl	8000f6c <main>
  bx  lr    
 80022fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80022fc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8002300:	0801f5e0 	.word	0x0801f5e0
  ldr  r0, =_sdata
 8002304:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8002308:	240001f0 	.word	0x240001f0
  ldr  r2, =_sbss
 800230c:	240001f0 	.word	0x240001f0
  ldr  r3, = _ebss
 8002310:	24001f08 	.word	0x24001f08

08002314 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002314:	e7fe      	b.n	8002314 <ADC3_IRQHandler>
	...

08002318 <G_q>:
 *                creal_T b_G_q[6]
 * Return Type  : void
 */
void G_q(double g, double theta2, double theta3, double theta4, double theta5,
         creal_T b_G_q[6])
{
 8002318:	b590      	push	{r4, r7, lr}
 800231a:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	4bc1      	ldr	r3, [pc, #772]	; (8002628 <G_q+0x310>)
 8002324:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002328:	443a      	add	r2, r7
 800232a:	4413      	add	r3, r2
 800232c:	ed83 0b00 	vstr	d0, [r3]
 8002330:	4bbe      	ldr	r3, [pc, #760]	; (800262c <G_q+0x314>)
 8002332:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002336:	443a      	add	r2, r7
 8002338:	4413      	add	r3, r2
 800233a:	ed83 1b00 	vstr	d1, [r3]
 800233e:	4bbc      	ldr	r3, [pc, #752]	; (8002630 <G_q+0x318>)
 8002340:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002344:	443a      	add	r2, r7
 8002346:	4413      	add	r3, r2
 8002348:	ed83 2b00 	vstr	d2, [r3]
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	ed83 3b00 	vstr	d3, [r3]
 8002354:	4bb7      	ldr	r3, [pc, #732]	; (8002634 <G_q+0x31c>)
 8002356:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800235a:	443a      	add	r2, r7
 800235c:	4413      	add	r3, r2
 800235e:	ed83 4b00 	vstr	d4, [r3]
 8002362:	4bb5      	ldr	r3, [pc, #724]	; (8002638 <G_q+0x320>)
 8002364:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002368:	443a      	add	r2, r7
 800236a:	4413      	add	r3, r2
 800236c:	6018      	str	r0, [r3, #0]
  double t74_re;
  double t74_im;
  double t76_re;
  double t58_im;
  double t60_re;
  if (isInitialized_G_q == false) {
 800236e:	4bb3      	ldr	r3, [pc, #716]	; (800263c <G_q+0x324>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <G_q+0x62>
    G_q_initialize();
 8002376:	f010 f8cf 	bl	8012518 <G_q_initialize>
  }

  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     24-May-2020 14:27:08 */
  t299.re = theta2 * 0.0;
 800237a:	4bac      	ldr	r3, [pc, #688]	; (800262c <G_q+0x314>)
 800237c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002380:	443a      	add	r2, r7
 8002382:	4413      	add	r3, r2
 8002384:	ed93 7b00 	vldr	d7, [r3]
 8002388:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8002620 <G_q+0x308>
 800238c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002390:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002394:	ed83 7b00 	vstr	d7, [r3]
  t299.im = theta2;
 8002398:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800239c:	4ba3      	ldr	r3, [pc, #652]	; (800262c <G_q+0x314>)
 800239e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80023a2:	4439      	add	r1, r7
 80023a4:	440b      	add	r3, r1
 80023a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t298.re = -t299.re;
 80023ae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80023b2:	ed93 7b00 	vldr	d7, [r3]
 80023b6:	eeb1 7b47 	vneg.f64	d7, d7
 80023ba:	f241 2330 	movw	r3, #4656	; 0x1230
 80023be:	443b      	add	r3, r7
 80023c0:	ed83 7b00 	vstr	d7, [r3]
  t298.im = -theta2;
 80023c4:	4b99      	ldr	r3, [pc, #612]	; (800262c <G_q+0x314>)
 80023c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80023ca:	443a      	add	r2, r7
 80023cc:	4413      	add	r3, r2
 80023ce:	ed93 7b00 	vldr	d7, [r3]
 80023d2:	eeb1 7b47 	vneg.f64	d7, d7
 80023d6:	f241 2330 	movw	r3, #4656	; 0x1230
 80023da:	443b      	add	r3, r7
 80023dc:	ed83 7b02 	vstr	d7, [r3, #8]
  t293.re = t299.re;
 80023e0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80023e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80023e8:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023ec:	e9c2 3400 	strd	r3, r4, [r2]
  t293.im = theta2;
 80023f0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80023f4:	4b8d      	ldr	r3, [pc, #564]	; (800262c <G_q+0x314>)
 80023f6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80023fa:	4439      	add	r1, r7
 80023fc:	440b      	add	r3, r1
 80023fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002402:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t292.re = -t299.re;
 8002406:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800240a:	ed93 7b00 	vldr	d7, [r3]
 800240e:	eeb1 7b47 	vneg.f64	d7, d7
 8002412:	f241 2310 	movw	r3, #4624	; 0x1210
 8002416:	443b      	add	r3, r7
 8002418:	ed83 7b00 	vstr	d7, [r3]
  t292.im = -theta2;
 800241c:	4b83      	ldr	r3, [pc, #524]	; (800262c <G_q+0x314>)
 800241e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002422:	443a      	add	r2, r7
 8002424:	4413      	add	r3, r2
 8002426:	ed93 7b00 	vldr	d7, [r3]
 800242a:	eeb1 7b47 	vneg.f64	d7, d7
 800242e:	f241 2310 	movw	r3, #4624	; 0x1210
 8002432:	443b      	add	r3, r7
 8002434:	ed83 7b02 	vstr	d7, [r3, #8]
  t291.re = t299.re;
 8002438:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800243c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002440:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 8002444:	e9c2 3400 	strd	r3, r4, [r2]
  t291.im = theta2;
 8002448:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 800244c:	4b77      	ldr	r3, [pc, #476]	; (800262c <G_q+0x314>)
 800244e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002452:	4439      	add	r1, r7
 8002454:	440b      	add	r3, r1
 8002456:	e9d3 3400 	ldrd	r3, r4, [r3]
 800245a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t290.re = -t299.re;
 800245e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002462:	ed93 7b00 	vldr	d7, [r3]
 8002466:	eeb1 7b47 	vneg.f64	d7, d7
 800246a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800246e:	443b      	add	r3, r7
 8002470:	ed83 7b00 	vstr	d7, [r3]
  t290.im = -theta2;
 8002474:	4b6d      	ldr	r3, [pc, #436]	; (800262c <G_q+0x314>)
 8002476:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800247a:	443a      	add	r2, r7
 800247c:	4413      	add	r3, r2
 800247e:	ed93 7b00 	vldr	d7, [r3]
 8002482:	eeb1 7b47 	vneg.f64	d7, d7
 8002486:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800248a:	443b      	add	r3, r7
 800248c:	ed83 7b02 	vstr	d7, [r3, #8]
  t287.re = t299.re;
 8002490:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002494:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002498:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800249c:	e9c2 3400 	strd	r3, r4, [r2]
  t287.im = theta2;
 80024a0:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 80024a4:	4b61      	ldr	r3, [pc, #388]	; (800262c <G_q+0x314>)
 80024a6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80024aa:	4439      	add	r1, r7
 80024ac:	440b      	add	r3, r1
 80024ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t286.re = -t299.re;
 80024b6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80024ba:	ed93 7b00 	vldr	d7, [r3]
 80024be:	eeb1 7b47 	vneg.f64	d7, d7
 80024c2:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80024c6:	443b      	add	r3, r7
 80024c8:	ed83 7b00 	vstr	d7, [r3]
  t286.im = -theta2;
 80024cc:	4b57      	ldr	r3, [pc, #348]	; (800262c <G_q+0x314>)
 80024ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80024d2:	443a      	add	r2, r7
 80024d4:	4413      	add	r3, r2
 80024d6:	ed93 7b00 	vldr	d7, [r3]
 80024da:	eeb1 7b47 	vneg.f64	d7, d7
 80024de:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80024e2:	443b      	add	r3, r7
 80024e4:	ed83 7b02 	vstr	d7, [r3, #8]
  t281.re = t299.re;
 80024e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80024ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024f0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80024f4:	e9c2 3400 	strd	r3, r4, [r2]
  t281.im = theta2;
 80024f8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80024fc:	4b4b      	ldr	r3, [pc, #300]	; (800262c <G_q+0x314>)
 80024fe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002502:	4439      	add	r1, r7
 8002504:	440b      	add	r3, r1
 8002506:	e9d3 3400 	ldrd	r3, r4, [r3]
 800250a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t280.re = -t299.re;
 800250e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002512:	ed93 7b00 	vldr	d7, [r3]
 8002516:	eeb1 7b47 	vneg.f64	d7, d7
 800251a:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800251e:	443b      	add	r3, r7
 8002520:	ed83 7b00 	vstr	d7, [r3]
  t280.im = -theta2;
 8002524:	4b41      	ldr	r3, [pc, #260]	; (800262c <G_q+0x314>)
 8002526:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800252a:	443a      	add	r2, r7
 800252c:	4413      	add	r3, r2
 800252e:	ed93 7b00 	vldr	d7, [r3]
 8002532:	eeb1 7b47 	vneg.f64	d7, d7
 8002536:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800253a:	443b      	add	r3, r7
 800253c:	ed83 7b02 	vstr	d7, [r3, #8]
  t277.re = t299.re;
 8002540:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002544:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002548:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 800254c:	e9c2 3400 	strd	r3, r4, [r2]
  t277.im = theta2;
 8002550:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8002554:	4b35      	ldr	r3, [pc, #212]	; (800262c <G_q+0x314>)
 8002556:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800255a:	4439      	add	r1, r7
 800255c:	440b      	add	r3, r1
 800255e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002562:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t276.re = -t299.re;
 8002566:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800256a:	ed93 7b00 	vldr	d7, [r3]
 800256e:	eeb1 7b47 	vneg.f64	d7, d7
 8002572:	f241 1390 	movw	r3, #4496	; 0x1190
 8002576:	443b      	add	r3, r7
 8002578:	ed83 7b00 	vstr	d7, [r3]
  t276.im = -theta2;
 800257c:	4b2b      	ldr	r3, [pc, #172]	; (800262c <G_q+0x314>)
 800257e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002582:	443a      	add	r2, r7
 8002584:	4413      	add	r3, r2
 8002586:	ed93 7b00 	vldr	d7, [r3]
 800258a:	eeb1 7b47 	vneg.f64	d7, d7
 800258e:	f241 1390 	movw	r3, #4496	; 0x1190
 8002592:	443b      	add	r3, r7
 8002594:	ed83 7b02 	vstr	d7, [r3, #8]
  t273.re = t299.re;
 8002598:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800259c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025a0:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80025a4:	e9c2 3400 	strd	r3, r4, [r2]
  t273.im = theta2;
 80025a8:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 80025ac:	4b1f      	ldr	r3, [pc, #124]	; (800262c <G_q+0x314>)
 80025ae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80025b2:	4439      	add	r1, r7
 80025b4:	440b      	add	r3, r1
 80025b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t272.re = -t299.re;
 80025be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80025c2:	ed93 7b00 	vldr	d7, [r3]
 80025c6:	eeb1 7b47 	vneg.f64	d7, d7
 80025ca:	f241 1370 	movw	r3, #4464	; 0x1170
 80025ce:	443b      	add	r3, r7
 80025d0:	ed83 7b00 	vstr	d7, [r3]
  t272.im = -theta2;
 80025d4:	4b15      	ldr	r3, [pc, #84]	; (800262c <G_q+0x314>)
 80025d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025da:	443a      	add	r2, r7
 80025dc:	4413      	add	r3, r2
 80025de:	ed93 7b00 	vldr	d7, [r3]
 80025e2:	eeb1 7b47 	vneg.f64	d7, d7
 80025e6:	f241 1370 	movw	r3, #4464	; 0x1170
 80025ea:	443b      	add	r3, r7
 80025ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t269.re = t299.re;
 80025f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80025f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80025f8:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80025fc:	e9c2 3400 	strd	r3, r4, [r2]
  t269.im = theta2;
 8002600:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 8002604:	4b09      	ldr	r3, [pc, #36]	; (800262c <G_q+0x314>)
 8002606:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800260a:	4439      	add	r1, r7
 800260c:	440b      	add	r3, r1
 800260e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002612:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t268.re = -t299.re;
 8002616:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800261a:	ed93 7b00 	vldr	d7, [r3]
 800261e:	e00f      	b.n	8002640 <G_q+0x328>
	...
 8002628:	ffffec58 	.word	0xffffec58
 800262c:	ffffec50 	.word	0xffffec50
 8002630:	ffffec48 	.word	0xffffec48
 8002634:	ffffec38 	.word	0xffffec38
 8002638:	ffffec34 	.word	0xffffec34
 800263c:	24000304 	.word	0x24000304
 8002640:	eeb1 7b47 	vneg.f64	d7, d7
 8002644:	f241 1350 	movw	r3, #4432	; 0x1150
 8002648:	443b      	add	r3, r7
 800264a:	ed83 7b00 	vstr	d7, [r3]
  t268.im = -theta2;
 800264e:	4bc0      	ldr	r3, [pc, #768]	; (8002950 <G_q+0x638>)
 8002650:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002654:	443a      	add	r2, r7
 8002656:	4413      	add	r3, r2
 8002658:	ed93 7b00 	vldr	d7, [r3]
 800265c:	eeb1 7b47 	vneg.f64	d7, d7
 8002660:	f241 1350 	movw	r3, #4432	; 0x1150
 8002664:	443b      	add	r3, r7
 8002666:	ed83 7b02 	vstr	d7, [r3, #8]
  t263.re = t299.re;
 800266a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800266e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002672:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002676:	e9c2 3400 	strd	r3, r4, [r2]
  t263.im = theta2;
 800267a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800267e:	4bb4      	ldr	r3, [pc, #720]	; (8002950 <G_q+0x638>)
 8002680:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002684:	4439      	add	r1, r7
 8002686:	440b      	add	r3, r1
 8002688:	e9d3 3400 	ldrd	r3, r4, [r3]
 800268c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t262.re = -t299.re;
 8002690:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002694:	ed93 7b00 	vldr	d7, [r3]
 8002698:	eeb1 7b47 	vneg.f64	d7, d7
 800269c:	f241 1330 	movw	r3, #4400	; 0x1130
 80026a0:	443b      	add	r3, r7
 80026a2:	ed83 7b00 	vstr	d7, [r3]
  t262.im = -theta2;
 80026a6:	4baa      	ldr	r3, [pc, #680]	; (8002950 <G_q+0x638>)
 80026a8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80026ac:	443a      	add	r2, r7
 80026ae:	4413      	add	r3, r2
 80026b0:	ed93 7b00 	vldr	d7, [r3]
 80026b4:	eeb1 7b47 	vneg.f64	d7, d7
 80026b8:	f241 1330 	movw	r3, #4400	; 0x1130
 80026bc:	443b      	add	r3, r7
 80026be:	ed83 7b02 	vstr	d7, [r3, #8]
  t259.re = t299.re;
 80026c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026ca:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80026ce:	e9c2 3400 	strd	r3, r4, [r2]
  t259.im = theta2;
 80026d2:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 80026d6:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <G_q+0x638>)
 80026d8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80026dc:	4439      	add	r1, r7
 80026de:	440b      	add	r3, r1
 80026e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t258.re = -t299.re;
 80026e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026ec:	ed93 7b00 	vldr	d7, [r3]
 80026f0:	eeb1 7b47 	vneg.f64	d7, d7
 80026f4:	f241 1310 	movw	r3, #4368	; 0x1110
 80026f8:	443b      	add	r3, r7
 80026fa:	ed83 7b00 	vstr	d7, [r3]
  t258.im = -theta2;
 80026fe:	4b94      	ldr	r3, [pc, #592]	; (8002950 <G_q+0x638>)
 8002700:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002704:	443a      	add	r2, r7
 8002706:	4413      	add	r3, r2
 8002708:	ed93 7b00 	vldr	d7, [r3]
 800270c:	eeb1 7b47 	vneg.f64	d7, d7
 8002710:	f241 1310 	movw	r3, #4368	; 0x1110
 8002714:	443b      	add	r3, r7
 8002716:	ed83 7b02 	vstr	d7, [r3, #8]
  t251.re = t299.re;
 800271a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800271e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002722:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 8002726:	e9c2 3400 	strd	r3, r4, [r2]
  t251.im = theta2;
 800272a:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 800272e:	4b88      	ldr	r3, [pc, #544]	; (8002950 <G_q+0x638>)
 8002730:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002734:	4439      	add	r1, r7
 8002736:	440b      	add	r3, r1
 8002738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800273c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t250.re = -t299.re;
 8002740:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002744:	ed93 7b00 	vldr	d7, [r3]
 8002748:	eeb1 7b47 	vneg.f64	d7, d7
 800274c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002750:	443b      	add	r3, r7
 8002752:	ed83 7b00 	vstr	d7, [r3]
  t250.im = -theta2;
 8002756:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <G_q+0x638>)
 8002758:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800275c:	443a      	add	r2, r7
 800275e:	4413      	add	r3, r2
 8002760:	ed93 7b00 	vldr	d7, [r3]
 8002764:	eeb1 7b47 	vneg.f64	d7, d7
 8002768:	f241 03f0 	movw	r3, #4336	; 0x10f0
 800276c:	443b      	add	r3, r7
 800276e:	ed83 7b02 	vstr	d7, [r3, #8]
  t249.re = t299.re;
 8002772:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800277a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 800277e:	e9c2 3400 	strd	r3, r4, [r2]
  t249.im = theta2;
 8002782:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002786:	4b72      	ldr	r3, [pc, #456]	; (8002950 <G_q+0x638>)
 8002788:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800278c:	4439      	add	r1, r7
 800278e:	440b      	add	r3, r1
 8002790:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002794:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t248.re = -t299.re;
 8002798:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800279c:	ed93 7b00 	vldr	d7, [r3]
 80027a0:	eeb1 7b47 	vneg.f64	d7, d7
 80027a4:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80027a8:	443b      	add	r3, r7
 80027aa:	ed83 7b00 	vstr	d7, [r3]
  t248.im = -theta2;
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <G_q+0x638>)
 80027b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80027b4:	443a      	add	r2, r7
 80027b6:	4413      	add	r3, r2
 80027b8:	ed93 7b00 	vldr	d7, [r3]
 80027bc:	eeb1 7b47 	vneg.f64	d7, d7
 80027c0:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80027c4:	443b      	add	r3, r7
 80027c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t245.re = t299.re;
 80027ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027d2:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80027d6:	e9c2 3400 	strd	r3, r4, [r2]
  t245.im = theta2;
 80027da:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 80027de:	4b5c      	ldr	r3, [pc, #368]	; (8002950 <G_q+0x638>)
 80027e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80027e4:	4439      	add	r1, r7
 80027e6:	440b      	add	r3, r1
 80027e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t244.re = -t299.re;
 80027f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027f4:	ed93 7b00 	vldr	d7, [r3]
 80027f8:	eeb1 7b47 	vneg.f64	d7, d7
 80027fc:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002800:	443b      	add	r3, r7
 8002802:	ed83 7b00 	vstr	d7, [r3]
  t244.im = -theta2;
 8002806:	4b52      	ldr	r3, [pc, #328]	; (8002950 <G_q+0x638>)
 8002808:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800280c:	443a      	add	r2, r7
 800280e:	4413      	add	r3, r2
 8002810:	ed93 7b00 	vldr	d7, [r3]
 8002814:	eeb1 7b47 	vneg.f64	d7, d7
 8002818:	f241 03b0 	movw	r3, #4272	; 0x10b0
 800281c:	443b      	add	r3, r7
 800281e:	ed83 7b02 	vstr	d7, [r3, #8]
  t239.re = t299.re;
 8002822:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002826:	e9d3 3400 	ldrd	r3, r4, [r3]
 800282a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800282e:	e9c2 3400 	strd	r3, r4, [r2]
  t239.im = theta2;
 8002832:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002836:	4b46      	ldr	r3, [pc, #280]	; (8002950 <G_q+0x638>)
 8002838:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800283c:	4439      	add	r1, r7
 800283e:	440b      	add	r3, r1
 8002840:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002844:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t238.re = -t299.re;
 8002848:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800284c:	ed93 7b00 	vldr	d7, [r3]
 8002850:	eeb1 7b47 	vneg.f64	d7, d7
 8002854:	f241 0390 	movw	r3, #4240	; 0x1090
 8002858:	443b      	add	r3, r7
 800285a:	ed83 7b00 	vstr	d7, [r3]
  t238.im = -theta2;
 800285e:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <G_q+0x638>)
 8002860:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002864:	443a      	add	r2, r7
 8002866:	4413      	add	r3, r2
 8002868:	ed93 7b00 	vldr	d7, [r3]
 800286c:	eeb1 7b47 	vneg.f64	d7, d7
 8002870:	f241 0390 	movw	r3, #4240	; 0x1090
 8002874:	443b      	add	r3, r7
 8002876:	ed83 7b02 	vstr	d7, [r3, #8]
  t237.re = t299.re;
 800287a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800287e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002882:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002886:	e9c2 3400 	strd	r3, r4, [r2]
  t237.im = theta2;
 800288a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 800288e:	4b30      	ldr	r3, [pc, #192]	; (8002950 <G_q+0x638>)
 8002890:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002894:	4439      	add	r1, r7
 8002896:	440b      	add	r3, r1
 8002898:	e9d3 3400 	ldrd	r3, r4, [r3]
 800289c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t236.re = -t299.re;
 80028a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028a4:	ed93 7b00 	vldr	d7, [r3]
 80028a8:	eeb1 7b47 	vneg.f64	d7, d7
 80028ac:	f241 0370 	movw	r3, #4208	; 0x1070
 80028b0:	443b      	add	r3, r7
 80028b2:	ed83 7b00 	vstr	d7, [r3]
  t236.im = -theta2;
 80028b6:	4b26      	ldr	r3, [pc, #152]	; (8002950 <G_q+0x638>)
 80028b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80028bc:	443a      	add	r2, r7
 80028be:	4413      	add	r3, r2
 80028c0:	ed93 7b00 	vldr	d7, [r3]
 80028c4:	eeb1 7b47 	vneg.f64	d7, d7
 80028c8:	f241 0370 	movw	r3, #4208	; 0x1070
 80028cc:	443b      	add	r3, r7
 80028ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t233.re = t299.re;
 80028d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028da:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80028de:	e9c2 3400 	strd	r3, r4, [r2]
  t233.im = theta2;
 80028e2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80028e6:	4b1a      	ldr	r3, [pc, #104]	; (8002950 <G_q+0x638>)
 80028e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80028ec:	4439      	add	r1, r7
 80028ee:	440b      	add	r3, r1
 80028f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t232.re = -t299.re;
 80028f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028fc:	ed93 7b00 	vldr	d7, [r3]
 8002900:	eeb1 7b47 	vneg.f64	d7, d7
 8002904:	f241 0350 	movw	r3, #4176	; 0x1050
 8002908:	443b      	add	r3, r7
 800290a:	ed83 7b00 	vstr	d7, [r3]
  t232.im = -theta2;
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <G_q+0x638>)
 8002910:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002914:	443a      	add	r2, r7
 8002916:	4413      	add	r3, r2
 8002918:	ed93 7b00 	vldr	d7, [r3]
 800291c:	eeb1 7b47 	vneg.f64	d7, d7
 8002920:	f241 0350 	movw	r3, #4176	; 0x1050
 8002924:	443b      	add	r3, r7
 8002926:	ed83 7b02 	vstr	d7, [r3, #8]
  t227.re = t299.re;
 800292a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800292e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002932:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002936:	e9c2 3400 	strd	r3, r4, [r2]
  t227.im = theta2;
 800293a:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 800293e:	4b04      	ldr	r3, [pc, #16]	; (8002950 <G_q+0x638>)
 8002940:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002944:	4439      	add	r1, r7
 8002946:	440b      	add	r3, r1
 8002948:	e9d3 3400 	ldrd	r3, r4, [r3]
 800294c:	e002      	b.n	8002954 <G_q+0x63c>
 800294e:	bf00      	nop
 8002950:	ffffec50 	.word	0xffffec50
 8002954:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t226.re = -t299.re;
 8002958:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800295c:	ed93 7b00 	vldr	d7, [r3]
 8002960:	eeb1 7b47 	vneg.f64	d7, d7
 8002964:	f241 0330 	movw	r3, #4144	; 0x1030
 8002968:	443b      	add	r3, r7
 800296a:	ed83 7b00 	vstr	d7, [r3]
  t226.im = -theta2;
 800296e:	4bc4      	ldr	r3, [pc, #784]	; (8002c80 <G_q+0x968>)
 8002970:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002974:	443a      	add	r2, r7
 8002976:	4413      	add	r3, r2
 8002978:	ed93 7b00 	vldr	d7, [r3]
 800297c:	eeb1 7b47 	vneg.f64	d7, d7
 8002980:	f241 0330 	movw	r3, #4144	; 0x1030
 8002984:	443b      	add	r3, r7
 8002986:	ed83 7b02 	vstr	d7, [r3, #8]
  t223.re = t299.re;
 800298a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800298e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002992:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002996:	e9c2 3400 	strd	r3, r4, [r2]
  t223.im = theta2;
 800299a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 800299e:	4bb8      	ldr	r3, [pc, #736]	; (8002c80 <G_q+0x968>)
 80029a0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80029a4:	4439      	add	r1, r7
 80029a6:	440b      	add	r3, r1
 80029a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t222.re = -t299.re;
 80029b0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029b4:	ed93 7b00 	vldr	d7, [r3]
 80029b8:	eeb1 7b47 	vneg.f64	d7, d7
 80029bc:	f241 0310 	movw	r3, #4112	; 0x1010
 80029c0:	443b      	add	r3, r7
 80029c2:	ed83 7b00 	vstr	d7, [r3]
  t222.im = -theta2;
 80029c6:	4bae      	ldr	r3, [pc, #696]	; (8002c80 <G_q+0x968>)
 80029c8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029cc:	443a      	add	r2, r7
 80029ce:	4413      	add	r3, r2
 80029d0:	ed93 7b00 	vldr	d7, [r3]
 80029d4:	eeb1 7b47 	vneg.f64	d7, d7
 80029d8:	f241 0310 	movw	r3, #4112	; 0x1010
 80029dc:	443b      	add	r3, r7
 80029de:	ed83 7b02 	vstr	d7, [r3, #8]
  t217.re = t299.re;
 80029e2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029ea:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80029ee:	e9c2 3400 	strd	r3, r4, [r2]
  t217.im = theta2;
 80029f2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 80029f6:	4ba2      	ldr	r3, [pc, #648]	; (8002c80 <G_q+0x968>)
 80029f8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80029fc:	4439      	add	r1, r7
 80029fe:	440b      	add	r3, r1
 8002a00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t216.re = -t299.re;
 8002a08:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a0c:	ed93 7b00 	vldr	d7, [r3]
 8002a10:	eeb1 7b47 	vneg.f64	d7, d7
 8002a14:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002a18:	ed83 7b00 	vstr	d7, [r3]
  t216.im = -theta2;
 8002a1c:	4b98      	ldr	r3, [pc, #608]	; (8002c80 <G_q+0x968>)
 8002a1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a22:	443a      	add	r2, r7
 8002a24:	4413      	add	r3, r2
 8002a26:	ed93 7b00 	vldr	d7, [r3]
 8002a2a:	eeb1 7b47 	vneg.f64	d7, d7
 8002a2e:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002a32:	ed83 7b02 	vstr	d7, [r3, #8]
  t213.re = t299.re;
 8002a36:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a3e:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002a42:	e9c2 3400 	strd	r3, r4, [r2]
  t213.im = theta2;
 8002a46:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002a4a:	4b8d      	ldr	r3, [pc, #564]	; (8002c80 <G_q+0x968>)
 8002a4c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a50:	4439      	add	r1, r7
 8002a52:	440b      	add	r3, r1
 8002a54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a58:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t212.re = -t299.re;
 8002a5c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a60:	ed93 7b00 	vldr	d7, [r3]
 8002a64:	eeb1 7b47 	vneg.f64	d7, d7
 8002a68:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002a6c:	ed83 7b00 	vstr	d7, [r3]
  t212.im = -theta2;
 8002a70:	4b83      	ldr	r3, [pc, #524]	; (8002c80 <G_q+0x968>)
 8002a72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a76:	443a      	add	r2, r7
 8002a78:	4413      	add	r3, r2
 8002a7a:	ed93 7b00 	vldr	d7, [r3]
 8002a7e:	eeb1 7b47 	vneg.f64	d7, d7
 8002a82:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002a86:	ed83 7b02 	vstr	d7, [r3, #8]
  t205.re = t299.re;
 8002a8a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a92:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002a96:	e9c2 3400 	strd	r3, r4, [r2]
  t205.im = theta2;
 8002a9a:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002a9e:	4b78      	ldr	r3, [pc, #480]	; (8002c80 <G_q+0x968>)
 8002aa0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002aa4:	4439      	add	r1, r7
 8002aa6:	440b      	add	r3, r1
 8002aa8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002aac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t204.re = -t299.re;
 8002ab0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ab4:	ed93 7b00 	vldr	d7, [r3]
 8002ab8:	eeb1 7b47 	vneg.f64	d7, d7
 8002abc:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002ac0:	ed83 7b00 	vstr	d7, [r3]
  t204.im = -theta2;
 8002ac4:	4b6e      	ldr	r3, [pc, #440]	; (8002c80 <G_q+0x968>)
 8002ac6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002aca:	443a      	add	r2, r7
 8002acc:	4413      	add	r3, r2
 8002ace:	ed93 7b00 	vldr	d7, [r3]
 8002ad2:	eeb1 7b47 	vneg.f64	d7, d7
 8002ad6:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002ada:	ed83 7b02 	vstr	d7, [r3, #8]
  t203.re = t299.re;
 8002ade:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ae2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ae6:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002aea:	e9c2 3400 	strd	r3, r4, [r2]
  t203.im = theta2;
 8002aee:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <G_q+0x968>)
 8002af4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002af8:	4439      	add	r1, r7
 8002afa:	440b      	add	r3, r1
 8002afc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b00:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t202.re = -t299.re;
 8002b04:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b08:	ed93 7b00 	vldr	d7, [r3]
 8002b0c:	eeb1 7b47 	vneg.f64	d7, d7
 8002b10:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002b14:	ed83 7b00 	vstr	d7, [r3]
  t202.im = -theta2;
 8002b18:	4b59      	ldr	r3, [pc, #356]	; (8002c80 <G_q+0x968>)
 8002b1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b1e:	443a      	add	r2, r7
 8002b20:	4413      	add	r3, r2
 8002b22:	ed93 7b00 	vldr	d7, [r3]
 8002b26:	eeb1 7b47 	vneg.f64	d7, d7
 8002b2a:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002b2e:	ed83 7b02 	vstr	d7, [r3, #8]
  t199.re = t299.re;
 8002b32:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b3a:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002b3e:	e9c2 3400 	strd	r3, r4, [r2]
  t199.im = theta2;
 8002b42:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002b46:	4b4e      	ldr	r3, [pc, #312]	; (8002c80 <G_q+0x968>)
 8002b48:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b4c:	4439      	add	r1, r7
 8002b4e:	440b      	add	r3, r1
 8002b50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b54:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t198.re = -t299.re;
 8002b58:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b5c:	ed93 7b00 	vldr	d7, [r3]
 8002b60:	eeb1 7b47 	vneg.f64	d7, d7
 8002b64:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002b68:	ed83 7b00 	vstr	d7, [r3]
  t198.im = -theta2;
 8002b6c:	4b44      	ldr	r3, [pc, #272]	; (8002c80 <G_q+0x968>)
 8002b6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b72:	443a      	add	r2, r7
 8002b74:	4413      	add	r3, r2
 8002b76:	ed93 7b00 	vldr	d7, [r3]
 8002b7a:	eeb1 7b47 	vneg.f64	d7, d7
 8002b7e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002b82:	ed83 7b02 	vstr	d7, [r3, #8]
  t193.re = t299.re;
 8002b86:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b8e:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002b92:	e9c2 3400 	strd	r3, r4, [r2]
  t193.im = theta2;
 8002b96:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002b9a:	4b39      	ldr	r3, [pc, #228]	; (8002c80 <G_q+0x968>)
 8002b9c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ba0:	4439      	add	r1, r7
 8002ba2:	440b      	add	r3, r1
 8002ba4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ba8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t192.re = -t299.re;
 8002bac:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bb0:	ed93 7b00 	vldr	d7, [r3]
 8002bb4:	eeb1 7b47 	vneg.f64	d7, d7
 8002bb8:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002bbc:	ed83 7b00 	vstr	d7, [r3]
  t192.im = -theta2;
 8002bc0:	4b2f      	ldr	r3, [pc, #188]	; (8002c80 <G_q+0x968>)
 8002bc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002bc6:	443a      	add	r2, r7
 8002bc8:	4413      	add	r3, r2
 8002bca:	ed93 7b00 	vldr	d7, [r3]
 8002bce:	eeb1 7b47 	vneg.f64	d7, d7
 8002bd2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002bd6:	ed83 7b02 	vstr	d7, [r3, #8]
  t189.re = t299.re;
 8002bda:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002be2:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002be6:	e9c2 3400 	strd	r3, r4, [r2]
  t189.im = theta2;
 8002bea:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002bee:	4b24      	ldr	r3, [pc, #144]	; (8002c80 <G_q+0x968>)
 8002bf0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002bf4:	4439      	add	r1, r7
 8002bf6:	440b      	add	r3, r1
 8002bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bfc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t188.re = -t299.re;
 8002c00:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c04:	ed93 7b00 	vldr	d7, [r3]
 8002c08:	eeb1 7b47 	vneg.f64	d7, d7
 8002c0c:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002c10:	ed83 7b00 	vstr	d7, [r3]
  t188.im = -theta2;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <G_q+0x968>)
 8002c16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c1a:	443a      	add	r2, r7
 8002c1c:	4413      	add	r3, r2
 8002c1e:	ed93 7b00 	vldr	d7, [r3]
 8002c22:	eeb1 7b47 	vneg.f64	d7, d7
 8002c26:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002c2a:	ed83 7b02 	vstr	d7, [r3, #8]
  t181.re = t299.re;
 8002c2e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c36:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002c3a:	e9c2 3400 	strd	r3, r4, [r2]
  t181.im = theta2;
 8002c3e:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002c42:	4b0f      	ldr	r3, [pc, #60]	; (8002c80 <G_q+0x968>)
 8002c44:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c48:	4439      	add	r1, r7
 8002c4a:	440b      	add	r3, r1
 8002c4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c50:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t180.re = -t299.re;
 8002c54:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c58:	ed93 7b00 	vldr	d7, [r3]
 8002c5c:	eeb1 7b47 	vneg.f64	d7, d7
 8002c60:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002c64:	ed83 7b00 	vstr	d7, [r3]
  t180.im = -theta2;
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <G_q+0x968>)
 8002c6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c6e:	443a      	add	r2, r7
 8002c70:	4413      	add	r3, r2
 8002c72:	ed93 7b00 	vldr	d7, [r3]
 8002c76:	eeb1 7b47 	vneg.f64	d7, d7
 8002c7a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002c7e:	e001      	b.n	8002c84 <G_q+0x96c>
 8002c80:	ffffec50 	.word	0xffffec50
 8002c84:	ed83 7b02 	vstr	d7, [r3, #8]
  t179.re = t299.re;
 8002c88:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c90:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002c94:	e9c2 3400 	strd	r3, r4, [r2]
  t179.im = theta2;
 8002c98:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002c9c:	4bc3      	ldr	r3, [pc, #780]	; (8002fac <G_q+0xc94>)
 8002c9e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ca2:	4439      	add	r1, r7
 8002ca4:	440b      	add	r3, r1
 8002ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002caa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t178.re = -t299.re;
 8002cae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002cb2:	ed93 7b00 	vldr	d7, [r3]
 8002cb6:	eeb1 7b47 	vneg.f64	d7, d7
 8002cba:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002cbe:	ed83 7b00 	vstr	d7, [r3]
  t178.im = -theta2;
 8002cc2:	4bba      	ldr	r3, [pc, #744]	; (8002fac <G_q+0xc94>)
 8002cc4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002cc8:	443a      	add	r2, r7
 8002cca:	4413      	add	r3, r2
 8002ccc:	ed93 7b00 	vldr	d7, [r3]
 8002cd0:	eeb1 7b47 	vneg.f64	d7, d7
 8002cd4:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002cd8:	ed83 7b02 	vstr	d7, [r3, #8]
  t175.re = t299.re;
 8002cdc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ce0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ce4:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002ce8:	e9c2 3400 	strd	r3, r4, [r2]
  t175.im = theta2;
 8002cec:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002cf0:	4bae      	ldr	r3, [pc, #696]	; (8002fac <G_q+0xc94>)
 8002cf2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002cf6:	4439      	add	r1, r7
 8002cf8:	440b      	add	r3, r1
 8002cfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cfe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t174.re = -t299.re;
 8002d02:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d06:	ed93 7b00 	vldr	d7, [r3]
 8002d0a:	eeb1 7b47 	vneg.f64	d7, d7
 8002d0e:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002d12:	ed83 7b00 	vstr	d7, [r3]
  t174.im = -theta2;
 8002d16:	4ba5      	ldr	r3, [pc, #660]	; (8002fac <G_q+0xc94>)
 8002d18:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d1c:	443a      	add	r2, r7
 8002d1e:	4413      	add	r3, r2
 8002d20:	ed93 7b00 	vldr	d7, [r3]
 8002d24:	eeb1 7b47 	vneg.f64	d7, d7
 8002d28:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002d2c:	ed83 7b02 	vstr	d7, [r3, #8]
  t171.re = t299.re;
 8002d30:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d38:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002d3c:	e9c2 3400 	strd	r3, r4, [r2]
  t171.im = theta2;
 8002d40:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <G_q+0xc94>)
 8002d46:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d4a:	4439      	add	r1, r7
 8002d4c:	440b      	add	r3, r1
 8002d4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d52:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t170.re = -t299.re;
 8002d56:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d5a:	ed93 7b00 	vldr	d7, [r3]
 8002d5e:	eeb1 7b47 	vneg.f64	d7, d7
 8002d62:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8002d66:	ed83 7b00 	vstr	d7, [r3]
  t170.im = -theta2;
 8002d6a:	4b90      	ldr	r3, [pc, #576]	; (8002fac <G_q+0xc94>)
 8002d6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d70:	443a      	add	r2, r7
 8002d72:	4413      	add	r3, r2
 8002d74:	ed93 7b00 	vldr	d7, [r3]
 8002d78:	eeb1 7b47 	vneg.f64	d7, d7
 8002d7c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8002d80:	ed83 7b02 	vstr	d7, [r3, #8]
  t167.re = t299.re;
 8002d84:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d8c:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8002d90:	e9c2 3400 	strd	r3, r4, [r2]
  t167.im = theta2;
 8002d94:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8002d98:	4b84      	ldr	r3, [pc, #528]	; (8002fac <G_q+0xc94>)
 8002d9a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d9e:	4439      	add	r1, r7
 8002da0:	440b      	add	r3, r1
 8002da2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002da6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t166.re = -t299.re;
 8002daa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002dae:	ed93 7b00 	vldr	d7, [r3]
 8002db2:	eeb1 7b47 	vneg.f64	d7, d7
 8002db6:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8002dba:	ed83 7b00 	vstr	d7, [r3]
  t166.im = -theta2;
 8002dbe:	4b7b      	ldr	r3, [pc, #492]	; (8002fac <G_q+0xc94>)
 8002dc0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dc4:	443a      	add	r2, r7
 8002dc6:	4413      	add	r3, r2
 8002dc8:	ed93 7b00 	vldr	d7, [r3]
 8002dcc:	eeb1 7b47 	vneg.f64	d7, d7
 8002dd0:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8002dd4:	ed83 7b02 	vstr	d7, [r3, #8]
  t161.re = t299.re;
 8002dd8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ddc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002de0:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8002de4:	e9c2 3400 	strd	r3, r4, [r2]
  t161.im = theta2;
 8002de8:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8002dec:	4b6f      	ldr	r3, [pc, #444]	; (8002fac <G_q+0xc94>)
 8002dee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002df2:	4439      	add	r1, r7
 8002df4:	440b      	add	r3, r1
 8002df6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dfa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t160.re = -t299.re;
 8002dfe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e02:	ed93 7b00 	vldr	d7, [r3]
 8002e06:	eeb1 7b47 	vneg.f64	d7, d7
 8002e0a:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8002e0e:	ed83 7b00 	vstr	d7, [r3]
  t160.im = -theta2;
 8002e12:	4b66      	ldr	r3, [pc, #408]	; (8002fac <G_q+0xc94>)
 8002e14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e18:	443a      	add	r2, r7
 8002e1a:	4413      	add	r3, r2
 8002e1c:	ed93 7b00 	vldr	d7, [r3]
 8002e20:	eeb1 7b47 	vneg.f64	d7, d7
 8002e24:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8002e28:	ed83 7b02 	vstr	d7, [r3, #8]
  t157.re = t299.re;
 8002e2c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e34:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8002e38:	e9c2 3400 	strd	r3, r4, [r2]
  t157.im = theta2;
 8002e3c:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 8002e40:	4b5a      	ldr	r3, [pc, #360]	; (8002fac <G_q+0xc94>)
 8002e42:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e46:	4439      	add	r1, r7
 8002e48:	440b      	add	r3, r1
 8002e4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e4e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t156.re = -t299.re;
 8002e52:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e56:	ed93 7b00 	vldr	d7, [r3]
 8002e5a:	eeb1 7b47 	vneg.f64	d7, d7
 8002e5e:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8002e62:	ed83 7b00 	vstr	d7, [r3]
  t156.im = -theta2;
 8002e66:	4b51      	ldr	r3, [pc, #324]	; (8002fac <G_q+0xc94>)
 8002e68:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e6c:	443a      	add	r2, r7
 8002e6e:	4413      	add	r3, r2
 8002e70:	ed93 7b00 	vldr	d7, [r3]
 8002e74:	eeb1 7b47 	vneg.f64	d7, d7
 8002e78:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8002e7c:	ed83 7b02 	vstr	d7, [r3, #8]
  t149.re = t299.re;
 8002e80:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e84:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e88:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8002e8c:	e9c2 3400 	strd	r3, r4, [r2]
  t149.im = theta2;
 8002e90:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8002e94:	4b45      	ldr	r3, [pc, #276]	; (8002fac <G_q+0xc94>)
 8002e96:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e9a:	4439      	add	r1, r7
 8002e9c:	440b      	add	r3, r1
 8002e9e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ea2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t148.re = -t299.re;
 8002ea6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002eaa:	ed93 7b00 	vldr	d7, [r3]
 8002eae:	eeb1 7b47 	vneg.f64	d7, d7
 8002eb2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8002eb6:	ed83 7b00 	vstr	d7, [r3]
  t148.im = -theta2;
 8002eba:	4b3c      	ldr	r3, [pc, #240]	; (8002fac <G_q+0xc94>)
 8002ebc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002ec0:	443a      	add	r2, r7
 8002ec2:	4413      	add	r3, r2
 8002ec4:	ed93 7b00 	vldr	d7, [r3]
 8002ec8:	eeb1 7b47 	vneg.f64	d7, d7
 8002ecc:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8002ed0:	ed83 7b02 	vstr	d7, [r3, #8]
  t147.re = t299.re;
 8002ed4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002edc:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8002ee0:	e9c2 3400 	strd	r3, r4, [r2]
  t147.im = theta2;
 8002ee4:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8002ee8:	4b30      	ldr	r3, [pc, #192]	; (8002fac <G_q+0xc94>)
 8002eea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002eee:	4439      	add	r1, r7
 8002ef0:	440b      	add	r3, r1
 8002ef2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ef6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t146.re = -t299.re;
 8002efa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002efe:	ed93 7b00 	vldr	d7, [r3]
 8002f02:	eeb1 7b47 	vneg.f64	d7, d7
 8002f06:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8002f0a:	ed83 7b00 	vstr	d7, [r3]
  t146.im = -theta2;
 8002f0e:	4b27      	ldr	r3, [pc, #156]	; (8002fac <G_q+0xc94>)
 8002f10:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f14:	443a      	add	r2, r7
 8002f16:	4413      	add	r3, r2
 8002f18:	ed93 7b00 	vldr	d7, [r3]
 8002f1c:	eeb1 7b47 	vneg.f64	d7, d7
 8002f20:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8002f24:	ed83 7b02 	vstr	d7, [r3, #8]
  t143.re = t299.re;
 8002f28:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f2c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f30:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 8002f34:	e9c2 3400 	strd	r3, r4, [r2]
  t143.im = theta2;
 8002f38:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <G_q+0xc94>)
 8002f3e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f42:	4439      	add	r1, r7
 8002f44:	440b      	add	r3, r1
 8002f46:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f4a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t142.re = -t299.re;
 8002f4e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f52:	ed93 7b00 	vldr	d7, [r3]
 8002f56:	eeb1 7b47 	vneg.f64	d7, d7
 8002f5a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002f5e:	ed83 7b00 	vstr	d7, [r3]
  t142.im = -theta2;
 8002f62:	4b12      	ldr	r3, [pc, #72]	; (8002fac <G_q+0xc94>)
 8002f64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f68:	443a      	add	r2, r7
 8002f6a:	4413      	add	r3, r2
 8002f6c:	ed93 7b00 	vldr	d7, [r3]
 8002f70:	eeb1 7b47 	vneg.f64	d7, d7
 8002f74:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8002f78:	ed83 7b02 	vstr	d7, [r3, #8]
  t139.re = t299.re;
 8002f7c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f80:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f84:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8002f88:	e9c2 3400 	strd	r3, r4, [r2]
  t139.im = theta2;
 8002f8c:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <G_q+0xc94>)
 8002f92:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f96:	4439      	add	r1, r7
 8002f98:	440b      	add	r3, r1
 8002f9a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f9e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t138.re = -t299.re;
 8002fa2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fa6:	ed93 7b00 	vldr	d7, [r3]
 8002faa:	e001      	b.n	8002fb0 <G_q+0xc98>
 8002fac:	ffffec50 	.word	0xffffec50
 8002fb0:	eeb1 7b47 	vneg.f64	d7, d7
 8002fb4:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8002fb8:	ed83 7b00 	vstr	d7, [r3]
  t138.im = -theta2;
 8002fbc:	4bc4      	ldr	r3, [pc, #784]	; (80032d0 <G_q+0xfb8>)
 8002fbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fc2:	443a      	add	r2, r7
 8002fc4:	4413      	add	r3, r2
 8002fc6:	ed93 7b00 	vldr	d7, [r3]
 8002fca:	eeb1 7b47 	vneg.f64	d7, d7
 8002fce:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8002fd2:	ed83 7b02 	vstr	d7, [r3, #8]
  t133.re = t299.re;
 8002fd6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fde:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 8002fe2:	e9c2 3400 	strd	r3, r4, [r2]
  t133.im = theta2;
 8002fe6:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 8002fea:	4bb9      	ldr	r3, [pc, #740]	; (80032d0 <G_q+0xfb8>)
 8002fec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ff0:	4439      	add	r1, r7
 8002ff2:	440b      	add	r3, r1
 8002ff4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ff8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t132.re = -t299.re;
 8002ffc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003000:	ed93 7b00 	vldr	d7, [r3]
 8003004:	eeb1 7b47 	vneg.f64	d7, d7
 8003008:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800300c:	ed83 7b00 	vstr	d7, [r3]
  t132.im = -theta2;
 8003010:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <G_q+0xfb8>)
 8003012:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003016:	443a      	add	r2, r7
 8003018:	4413      	add	r3, r2
 800301a:	ed93 7b00 	vldr	d7, [r3]
 800301e:	eeb1 7b47 	vneg.f64	d7, d7
 8003022:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8003026:	ed83 7b02 	vstr	d7, [r3, #8]
  t127.re = t299.re;
 800302a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800302e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003032:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 8003036:	e9c2 3400 	strd	r3, r4, [r2]
  t127.im = theta2;
 800303a:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 800303e:	4ba4      	ldr	r3, [pc, #656]	; (80032d0 <G_q+0xfb8>)
 8003040:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003044:	4439      	add	r1, r7
 8003046:	440b      	add	r3, r1
 8003048:	e9d3 3400 	ldrd	r3, r4, [r3]
 800304c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t126.re = -t299.re;
 8003050:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003054:	ed93 7b00 	vldr	d7, [r3]
 8003058:	eeb1 7b47 	vneg.f64	d7, d7
 800305c:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003060:	ed83 7b00 	vstr	d7, [r3]
  t126.im = -theta2;
 8003064:	4b9a      	ldr	r3, [pc, #616]	; (80032d0 <G_q+0xfb8>)
 8003066:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800306a:	443a      	add	r2, r7
 800306c:	4413      	add	r3, r2
 800306e:	ed93 7b00 	vldr	d7, [r3]
 8003072:	eeb1 7b47 	vneg.f64	d7, d7
 8003076:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800307a:	ed83 7b02 	vstr	d7, [r3, #8]
  t119.re = t299.re;
 800307e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003082:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003086:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 800308a:	e9c2 3400 	strd	r3, r4, [r2]
  t119.im = theta2;
 800308e:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 8003092:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <G_q+0xfb8>)
 8003094:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003098:	4439      	add	r1, r7
 800309a:	440b      	add	r3, r1
 800309c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t118.re = -t299.re;
 80030a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030a8:	ed93 7b00 	vldr	d7, [r3]
 80030ac:	eeb1 7b47 	vneg.f64	d7, d7
 80030b0:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80030b4:	ed83 7b00 	vstr	d7, [r3]
  t118.im = -theta2;
 80030b8:	4b85      	ldr	r3, [pc, #532]	; (80032d0 <G_q+0xfb8>)
 80030ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030be:	443a      	add	r2, r7
 80030c0:	4413      	add	r3, r2
 80030c2:	ed93 7b00 	vldr	d7, [r3]
 80030c6:	eeb1 7b47 	vneg.f64	d7, d7
 80030ca:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 80030ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t117.re = t299.re;
 80030d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030da:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80030de:	e9c2 3400 	strd	r3, r4, [r2]
  t117.im = theta2;
 80030e2:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 80030e6:	4b7a      	ldr	r3, [pc, #488]	; (80032d0 <G_q+0xfb8>)
 80030e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80030ec:	4439      	add	r1, r7
 80030ee:	440b      	add	r3, r1
 80030f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t116.re = -t299.re;
 80030f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030fc:	ed93 7b00 	vldr	d7, [r3]
 8003100:	eeb1 7b47 	vneg.f64	d7, d7
 8003104:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8003108:	ed83 7b00 	vstr	d7, [r3]
  t116.im = -theta2;
 800310c:	4b70      	ldr	r3, [pc, #448]	; (80032d0 <G_q+0xfb8>)
 800310e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003112:	443a      	add	r2, r7
 8003114:	4413      	add	r3, r2
 8003116:	ed93 7b00 	vldr	d7, [r3]
 800311a:	eeb1 7b47 	vneg.f64	d7, d7
 800311e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8003122:	ed83 7b02 	vstr	d7, [r3, #8]
  t111.re = t299.re;
 8003126:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800312a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800312e:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 8003132:	e9c2 3400 	strd	r3, r4, [r2]
  t111.im = theta2;
 8003136:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 800313a:	4b65      	ldr	r3, [pc, #404]	; (80032d0 <G_q+0xfb8>)
 800313c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003140:	4439      	add	r1, r7
 8003142:	440b      	add	r3, r1
 8003144:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003148:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t110.re = -t299.re;
 800314c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003150:	ed93 7b00 	vldr	d7, [r3]
 8003154:	eeb1 7b47 	vneg.f64	d7, d7
 8003158:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800315c:	ed83 7b00 	vstr	d7, [r3]
  t110.im = -theta2;
 8003160:	4b5b      	ldr	r3, [pc, #364]	; (80032d0 <G_q+0xfb8>)
 8003162:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003166:	443a      	add	r2, r7
 8003168:	4413      	add	r3, r2
 800316a:	ed93 7b00 	vldr	d7, [r3]
 800316e:	eeb1 7b47 	vneg.f64	d7, d7
 8003172:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003176:	ed83 7b02 	vstr	d7, [r3, #8]
  t105.re = t299.re;
 800317a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800317e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003182:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003186:	e9c2 3400 	strd	r3, r4, [r2]
  t105.im = theta2;
 800318a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800318e:	4b50      	ldr	r3, [pc, #320]	; (80032d0 <G_q+0xfb8>)
 8003190:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003194:	4439      	add	r1, r7
 8003196:	440b      	add	r3, r1
 8003198:	e9d3 3400 	ldrd	r3, r4, [r3]
 800319c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t104.re = -t299.re;
 80031a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031a4:	ed93 7b00 	vldr	d7, [r3]
 80031a8:	eeb1 7b47 	vneg.f64	d7, d7
 80031ac:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80031b0:	ed83 7b00 	vstr	d7, [r3]
  t104.im = -theta2;
 80031b4:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <G_q+0xfb8>)
 80031b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031ba:	443a      	add	r2, r7
 80031bc:	4413      	add	r3, r2
 80031be:	ed93 7b00 	vldr	d7, [r3]
 80031c2:	eeb1 7b47 	vneg.f64	d7, d7
 80031c6:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 80031ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t97.re = t299.re;
 80031ce:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031d6:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80031da:	e9c2 3400 	strd	r3, r4, [r2]
  t97.im = theta2;
 80031de:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 80031e2:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <G_q+0xfb8>)
 80031e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80031e8:	4439      	add	r1, r7
 80031ea:	440b      	add	r3, r1
 80031ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t96.re = -t299.re;
 80031f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031f8:	ed93 7b00 	vldr	d7, [r3]
 80031fc:	eeb1 7b47 	vneg.f64	d7, d7
 8003200:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8003204:	ed83 7b00 	vstr	d7, [r3]
  t96.im = -theta2;
 8003208:	4b31      	ldr	r3, [pc, #196]	; (80032d0 <G_q+0xfb8>)
 800320a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800320e:	443a      	add	r2, r7
 8003210:	4413      	add	r3, r2
 8003212:	ed93 7b00 	vldr	d7, [r3]
 8003216:	eeb1 7b47 	vneg.f64	d7, d7
 800321a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800321e:	ed83 7b02 	vstr	d7, [r3, #8]
  t95.re = t299.re;
 8003222:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003226:	e9d3 3400 	ldrd	r3, r4, [r3]
 800322a:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 800322e:	e9c2 3400 	strd	r3, r4, [r2]
  t95.im = theta2;
 8003232:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 8003236:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <G_q+0xfb8>)
 8003238:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800323c:	4439      	add	r1, r7
 800323e:	440b      	add	r3, r1
 8003240:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003244:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t94.re = -t299.re;
 8003248:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800324c:	ed93 7b00 	vldr	d7, [r3]
 8003250:	eeb1 7b47 	vneg.f64	d7, d7
 8003254:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003258:	ed83 7b00 	vstr	d7, [r3]
  t94.im = -theta2;
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <G_q+0xfb8>)
 800325e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003262:	443a      	add	r2, r7
 8003264:	4413      	add	r3, r2
 8003266:	ed93 7b00 	vldr	d7, [r3]
 800326a:	eeb1 7b47 	vneg.f64	d7, d7
 800326e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003272:	ed83 7b02 	vstr	d7, [r3, #8]
  t83.re = t299.re;
 8003276:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800327a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800327e:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8003282:	e9c2 3400 	strd	r3, r4, [r2]
  t83.im = theta2;
 8003286:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 800328a:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <G_q+0xfb8>)
 800328c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003290:	4439      	add	r1, r7
 8003292:	440b      	add	r3, r1
 8003294:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003298:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t82.re = -t299.re;
 800329c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032a0:	ed93 7b00 	vldr	d7, [r3]
 80032a4:	eeb1 7b47 	vneg.f64	d7, d7
 80032a8:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80032ac:	ed83 7b00 	vstr	d7, [r3]
  t82.im = -theta2;
 80032b0:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <G_q+0xfb8>)
 80032b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032b6:	443a      	add	r2, r7
 80032b8:	4413      	add	r3, r2
 80032ba:	ed93 7b00 	vldr	d7, [r3]
 80032be:	eeb1 7b47 	vneg.f64	d7, d7
 80032c2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80032c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t79.re = t299.re;
 80032ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032ce:	e001      	b.n	80032d4 <G_q+0xfbc>
 80032d0:	ffffec50 	.word	0xffffec50
 80032d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032d8:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80032dc:	e9c2 3400 	strd	r3, r4, [r2]
  t79.im = theta2;
 80032e0:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 80032e4:	4bc3      	ldr	r3, [pc, #780]	; (80035f4 <G_q+0x12dc>)
 80032e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80032ea:	4439      	add	r1, r7
 80032ec:	440b      	add	r3, r1
 80032ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t78.re = -t299.re;
 80032f6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032fa:	ed93 7b00 	vldr	d7, [r3]
 80032fe:	eeb1 7b47 	vneg.f64	d7, d7
 8003302:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8003306:	ed83 7b00 	vstr	d7, [r3]
  t78.im = -theta2;
 800330a:	4bba      	ldr	r3, [pc, #744]	; (80035f4 <G_q+0x12dc>)
 800330c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003310:	443a      	add	r2, r7
 8003312:	4413      	add	r3, r2
 8003314:	ed93 7b00 	vldr	d7, [r3]
 8003318:	eeb1 7b47 	vneg.f64	d7, d7
 800331c:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8003320:	ed83 7b02 	vstr	d7, [r3, #8]
  t77.re = t299.re;
 8003324:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003328:	e9d3 3400 	ldrd	r3, r4, [r3]
 800332c:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8003330:	e9c2 3400 	strd	r3, r4, [r2]
  t77.im = theta2;
 8003334:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 8003338:	4bae      	ldr	r3, [pc, #696]	; (80035f4 <G_q+0x12dc>)
 800333a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800333e:	4439      	add	r1, r7
 8003340:	440b      	add	r3, r1
 8003342:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003346:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t76.re = -t299.re;
 800334a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800334e:	ed93 7b00 	vldr	d7, [r3]
 8003352:	eeb1 7b47 	vneg.f64	d7, d7
 8003356:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800335a:	ed83 7b00 	vstr	d7, [r3]
  t76.im = -theta2;
 800335e:	4ba5      	ldr	r3, [pc, #660]	; (80035f4 <G_q+0x12dc>)
 8003360:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003364:	443a      	add	r2, r7
 8003366:	4413      	add	r3, r2
 8003368:	ed93 7b00 	vldr	d7, [r3]
 800336c:	eeb1 7b47 	vneg.f64	d7, d7
 8003370:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8003374:	ed83 7b02 	vstr	d7, [r3, #8]
  t71.re = t299.re;
 8003378:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800337c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003380:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8003384:	e9c2 3400 	strd	r3, r4, [r2]
  t71.im = theta2;
 8003388:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 800338c:	4b99      	ldr	r3, [pc, #612]	; (80035f4 <G_q+0x12dc>)
 800338e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003392:	4439      	add	r1, r7
 8003394:	440b      	add	r3, r1
 8003396:	e9d3 3400 	ldrd	r3, r4, [r3]
 800339a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t70.re = -t299.re;
 800339e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033a2:	ed93 7b00 	vldr	d7, [r3]
 80033a6:	eeb1 7b47 	vneg.f64	d7, d7
 80033aa:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80033ae:	ed83 7b00 	vstr	d7, [r3]
  t70.im = -theta2;
 80033b2:	4b90      	ldr	r3, [pc, #576]	; (80035f4 <G_q+0x12dc>)
 80033b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033b8:	443a      	add	r2, r7
 80033ba:	4413      	add	r3, r2
 80033bc:	ed93 7b00 	vldr	d7, [r3]
 80033c0:	eeb1 7b47 	vneg.f64	d7, d7
 80033c4:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80033c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t67.re = t299.re;
 80033cc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033d4:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80033d8:	e9c2 3400 	strd	r3, r4, [r2]
  t67.im = theta2;
 80033dc:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 80033e0:	4b84      	ldr	r3, [pc, #528]	; (80035f4 <G_q+0x12dc>)
 80033e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80033e6:	4439      	add	r1, r7
 80033e8:	440b      	add	r3, r1
 80033ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t66.re = -t299.re;
 80033f2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033f6:	ed93 7b00 	vldr	d7, [r3]
 80033fa:	eeb1 7b47 	vneg.f64	d7, d7
 80033fe:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8003402:	ed83 7b00 	vstr	d7, [r3]
  t66.im = -theta2;
 8003406:	4b7b      	ldr	r3, [pc, #492]	; (80035f4 <G_q+0x12dc>)
 8003408:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800340c:	443a      	add	r2, r7
 800340e:	4413      	add	r3, r2
 8003410:	ed93 7b00 	vldr	d7, [r3]
 8003414:	eeb1 7b47 	vneg.f64	d7, d7
 8003418:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 800341c:	ed83 7b02 	vstr	d7, [r3, #8]
  t63.re = t299.re;
 8003420:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003424:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003428:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 800342c:	e9c2 3400 	strd	r3, r4, [r2]
  t63.im = theta2;
 8003430:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 8003434:	4b6f      	ldr	r3, [pc, #444]	; (80035f4 <G_q+0x12dc>)
 8003436:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800343a:	4439      	add	r1, r7
 800343c:	440b      	add	r3, r1
 800343e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003442:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t62.re = -t299.re;
 8003446:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800344a:	ed93 7b00 	vldr	d7, [r3]
 800344e:	eeb1 7b47 	vneg.f64	d7, d7
 8003452:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003456:	ed83 7b00 	vstr	d7, [r3]
  t62.im = -theta2;
 800345a:	4b66      	ldr	r3, [pc, #408]	; (80035f4 <G_q+0x12dc>)
 800345c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003460:	443a      	add	r2, r7
 8003462:	4413      	add	r3, r2
 8003464:	ed93 7b00 	vldr	d7, [r3]
 8003468:	eeb1 7b47 	vneg.f64	d7, d7
 800346c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003470:	ed83 7b02 	vstr	d7, [r3, #8]
  t61.re = t299.re;
 8003474:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003478:	e9d3 3400 	ldrd	r3, r4, [r3]
 800347c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003480:	e9c2 3400 	strd	r3, r4, [r2]
  t61.im = theta2;
 8003484:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003488:	4b5a      	ldr	r3, [pc, #360]	; (80035f4 <G_q+0x12dc>)
 800348a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800348e:	4439      	add	r1, r7
 8003490:	440b      	add	r3, r1
 8003492:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003496:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t60.re = -t299.re;
 800349a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800349e:	ed93 7b00 	vldr	d7, [r3]
 80034a2:	eeb1 7b47 	vneg.f64	d7, d7
 80034a6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80034aa:	ed83 7b00 	vstr	d7, [r3]
  t60.im = -theta2;
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <G_q+0x12dc>)
 80034b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034b4:	443a      	add	r2, r7
 80034b6:	4413      	add	r3, r2
 80034b8:	ed93 7b00 	vldr	d7, [r3]
 80034bc:	eeb1 7b47 	vneg.f64	d7, d7
 80034c0:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80034c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t57.re = t299.re;
 80034c8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034d0:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80034d4:	e9c2 3400 	strd	r3, r4, [r2]
  t57.im = theta2;
 80034d8:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <G_q+0x12dc>)
 80034de:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80034e2:	4439      	add	r1, r7
 80034e4:	440b      	add	r3, r1
 80034e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t56.re = -t299.re;
 80034ee:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034f2:	ed93 7b00 	vldr	d7, [r3]
 80034f6:	eeb1 7b47 	vneg.f64	d7, d7
 80034fa:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80034fe:	ed83 7b00 	vstr	d7, [r3]
  t56.im = -theta2;
 8003502:	4b3c      	ldr	r3, [pc, #240]	; (80035f4 <G_q+0x12dc>)
 8003504:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003508:	443a      	add	r2, r7
 800350a:	4413      	add	r3, r2
 800350c:	ed93 7b00 	vldr	d7, [r3]
 8003510:	eeb1 7b47 	vneg.f64	d7, d7
 8003514:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8003518:	ed83 7b02 	vstr	d7, [r3, #8]
  t50.re = t299.re;
 800351c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003520:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003524:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003528:	e9c2 3400 	strd	r3, r4, [r2]
  t50.im = theta2;
 800352c:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 8003530:	4b30      	ldr	r3, [pc, #192]	; (80035f4 <G_q+0x12dc>)
 8003532:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003536:	4439      	add	r1, r7
 8003538:	440b      	add	r3, r1
 800353a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800353e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t49.re = -t299.re;
 8003542:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003546:	ed93 7b00 	vldr	d7, [r3]
 800354a:	eeb1 7b47 	vneg.f64	d7, d7
 800354e:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003552:	ed83 7b00 	vstr	d7, [r3]
  t49.im = -theta2;
 8003556:	4b27      	ldr	r3, [pc, #156]	; (80035f4 <G_q+0x12dc>)
 8003558:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800355c:	443a      	add	r2, r7
 800355e:	4413      	add	r3, r2
 8003560:	ed93 7b00 	vldr	d7, [r3]
 8003564:	eeb1 7b47 	vneg.f64	d7, d7
 8003568:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800356c:	ed83 7b02 	vstr	d7, [r3, #8]
  t46.re = t299.re;
 8003570:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003574:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003578:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800357c:	e9c2 3400 	strd	r3, r4, [r2]
  t46.im = theta2;
 8003580:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8003584:	4b1b      	ldr	r3, [pc, #108]	; (80035f4 <G_q+0x12dc>)
 8003586:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800358a:	4439      	add	r1, r7
 800358c:	440b      	add	r3, r1
 800358e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003592:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t45.re = -t299.re;
 8003596:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800359a:	ed93 7b00 	vldr	d7, [r3]
 800359e:	eeb1 7b47 	vneg.f64	d7, d7
 80035a2:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80035a6:	ed83 7b00 	vstr	d7, [r3]
  t45.im = -theta2;
 80035aa:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <G_q+0x12dc>)
 80035ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035b0:	443a      	add	r2, r7
 80035b2:	4413      	add	r3, r2
 80035b4:	ed93 7b00 	vldr	d7, [r3]
 80035b8:	eeb1 7b47 	vneg.f64	d7, d7
 80035bc:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80035c0:	ed83 7b02 	vstr	d7, [r3, #8]
  t44.re = t299.re;
 80035c4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035cc:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80035d0:	e9c2 3400 	strd	r3, r4, [r2]
  t44.im = theta2;
 80035d4:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 80035d8:	4b06      	ldr	r3, [pc, #24]	; (80035f4 <G_q+0x12dc>)
 80035da:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80035de:	4439      	add	r1, r7
 80035e0:	440b      	add	r3, r1
 80035e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035e6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t43.re = -t299.re;
 80035ea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035ee:	ed93 7b00 	vldr	d7, [r3]
 80035f2:	e001      	b.n	80035f8 <G_q+0x12e0>
 80035f4:	ffffec50 	.word	0xffffec50
 80035f8:	eeb1 7b47 	vneg.f64	d7, d7
 80035fc:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8003600:	ed83 7b00 	vstr	d7, [r3]
  t43.im = -theta2;
 8003604:	4bc6      	ldr	r3, [pc, #792]	; (8003920 <G_q+0x1608>)
 8003606:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800360a:	443a      	add	r2, r7
 800360c:	4413      	add	r3, r2
 800360e:	ed93 7b00 	vldr	d7, [r3]
 8003612:	eeb1 7b47 	vneg.f64	d7, d7
 8003616:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800361a:	ed83 7b02 	vstr	d7, [r3, #8]
  t40.re = t299.re;
 800361e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003622:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003626:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 800362a:	e9c2 3400 	strd	r3, r4, [r2]
  t40.im = theta2;
 800362e:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 8003632:	4bbb      	ldr	r3, [pc, #748]	; (8003920 <G_q+0x1608>)
 8003634:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003638:	4439      	add	r1, r7
 800363a:	440b      	add	r3, r1
 800363c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003640:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t39.re = -t299.re;
 8003644:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003648:	ed93 7b00 	vldr	d7, [r3]
 800364c:	eeb1 7b47 	vneg.f64	d7, d7
 8003650:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003654:	ed83 7b00 	vstr	d7, [r3]
  t39.im = -theta2;
 8003658:	4bb1      	ldr	r3, [pc, #708]	; (8003920 <G_q+0x1608>)
 800365a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800365e:	443a      	add	r2, r7
 8003660:	4413      	add	r3, r2
 8003662:	ed93 7b00 	vldr	d7, [r3]
 8003666:	eeb1 7b47 	vneg.f64	d7, d7
 800366a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800366e:	ed83 7b02 	vstr	d7, [r3, #8]
  t34.re = t299.re;
 8003672:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003676:	e9d3 3400 	ldrd	r3, r4, [r3]
 800367a:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 800367e:	e9c2 3400 	strd	r3, r4, [r2]
  t34.im = theta2;
 8003682:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8003686:	4ba6      	ldr	r3, [pc, #664]	; (8003920 <G_q+0x1608>)
 8003688:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800368c:	4439      	add	r1, r7
 800368e:	440b      	add	r3, r1
 8003690:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003694:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t33.re = -t299.re;
 8003698:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800369c:	ed93 7b00 	vldr	d7, [r3]
 80036a0:	eeb1 7b47 	vneg.f64	d7, d7
 80036a4:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80036a8:	ed83 7b00 	vstr	d7, [r3]
  t33.im = -theta2;
 80036ac:	4b9c      	ldr	r3, [pc, #624]	; (8003920 <G_q+0x1608>)
 80036ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036b2:	443a      	add	r2, r7
 80036b4:	4413      	add	r3, r2
 80036b6:	ed93 7b00 	vldr	d7, [r3]
 80036ba:	eeb1 7b47 	vneg.f64	d7, d7
 80036be:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80036c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t30.re = t299.re;
 80036c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036ce:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80036d2:	e9c2 3400 	strd	r3, r4, [r2]
  t30.im = theta2;
 80036d6:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 80036da:	4b91      	ldr	r3, [pc, #580]	; (8003920 <G_q+0x1608>)
 80036dc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80036e0:	4439      	add	r1, r7
 80036e2:	440b      	add	r3, r1
 80036e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t29.re = -t299.re;
 80036ec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036f0:	ed93 7b00 	vldr	d7, [r3]
 80036f4:	eeb1 7b47 	vneg.f64	d7, d7
 80036f8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80036fc:	ed83 7b00 	vstr	d7, [r3]
  t29.im = -theta2;
 8003700:	4b87      	ldr	r3, [pc, #540]	; (8003920 <G_q+0x1608>)
 8003702:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003706:	443a      	add	r2, r7
 8003708:	4413      	add	r3, r2
 800370a:	ed93 7b00 	vldr	d7, [r3]
 800370e:	eeb1 7b47 	vneg.f64	d7, d7
 8003712:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8003716:	ed83 7b02 	vstr	d7, [r3, #8]
  t26.re = t299.re;
 800371a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800371e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003722:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 8003726:	e9c2 3400 	strd	r3, r4, [r2]
  t26.im = theta2;
 800372a:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 800372e:	4b7c      	ldr	r3, [pc, #496]	; (8003920 <G_q+0x1608>)
 8003730:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003734:	4439      	add	r1, r7
 8003736:	440b      	add	r3, r1
 8003738:	e9d3 3400 	ldrd	r3, r4, [r3]
 800373c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t25.re = -t299.re;
 8003740:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003744:	ed93 7b00 	vldr	d7, [r3]
 8003748:	eeb1 7b47 	vneg.f64	d7, d7
 800374c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003750:	ed83 7b00 	vstr	d7, [r3]
  t25.im = -theta2;
 8003754:	4b72      	ldr	r3, [pc, #456]	; (8003920 <G_q+0x1608>)
 8003756:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800375a:	443a      	add	r2, r7
 800375c:	4413      	add	r3, r2
 800375e:	ed93 7b00 	vldr	d7, [r3]
 8003762:	eeb1 7b47 	vneg.f64	d7, d7
 8003766:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800376a:	ed83 7b02 	vstr	d7, [r3, #8]
  t24.re = t299.re;
 800376e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003772:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003776:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 800377a:	e9c2 3400 	strd	r3, r4, [r2]
  t24.im = theta2;
 800377e:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <G_q+0x1608>)
 8003784:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003788:	4439      	add	r1, r7
 800378a:	440b      	add	r3, r1
 800378c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003790:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t23.re = -t299.re;
 8003794:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003798:	ed93 7b00 	vldr	d7, [r3]
 800379c:	eeb1 7b47 	vneg.f64	d7, d7
 80037a0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80037a4:	ed83 7b00 	vstr	d7, [r3]
  t23.im = -theta2;
 80037a8:	4b5d      	ldr	r3, [pc, #372]	; (8003920 <G_q+0x1608>)
 80037aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037ae:	443a      	add	r2, r7
 80037b0:	4413      	add	r3, r2
 80037b2:	ed93 7b00 	vldr	d7, [r3]
 80037b6:	eeb1 7b47 	vneg.f64	d7, d7
 80037ba:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80037be:	ed83 7b02 	vstr	d7, [r3, #8]
  t15.re = t299.re;
 80037c2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037ca:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80037ce:	e9c2 3400 	strd	r3, r4, [r2]
  t15.im = theta2;
 80037d2:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 80037d6:	4b52      	ldr	r3, [pc, #328]	; (8003920 <G_q+0x1608>)
 80037d8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80037dc:	4439      	add	r1, r7
 80037de:	440b      	add	r3, r1
 80037e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037e4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t14.re = -t299.re;
 80037e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037ec:	ed93 7b00 	vldr	d7, [r3]
 80037f0:	eeb1 7b47 	vneg.f64	d7, d7
 80037f4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80037f8:	ed83 7b00 	vstr	d7, [r3]
  t14.im = -theta2;
 80037fc:	4b48      	ldr	r3, [pc, #288]	; (8003920 <G_q+0x1608>)
 80037fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003802:	443a      	add	r2, r7
 8003804:	4413      	add	r3, r2
 8003806:	ed93 7b00 	vldr	d7, [r3]
 800380a:	eeb1 7b47 	vneg.f64	d7, d7
 800380e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003812:	ed83 7b02 	vstr	d7, [r3, #8]
  t11.re = t299.re;
 8003816:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800381a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800381e:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003822:	e9c2 3400 	strd	r3, r4, [r2]
  t11.im = theta2;
 8003826:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 800382a:	4b3d      	ldr	r3, [pc, #244]	; (8003920 <G_q+0x1608>)
 800382c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003830:	4439      	add	r1, r7
 8003832:	440b      	add	r3, r1
 8003834:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003838:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t10.re = -t299.re;
 800383c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003840:	ed93 7b00 	vldr	d7, [r3]
 8003844:	eeb1 7b47 	vneg.f64	d7, d7
 8003848:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800384c:	ed83 7b00 	vstr	d7, [r3]
  t10.im = -theta2;
 8003850:	4b33      	ldr	r3, [pc, #204]	; (8003920 <G_q+0x1608>)
 8003852:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003856:	443a      	add	r2, r7
 8003858:	4413      	add	r3, r2
 800385a:	ed93 7b00 	vldr	d7, [r3]
 800385e:	eeb1 7b47 	vneg.f64	d7, d7
 8003862:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003866:	ed83 7b02 	vstr	d7, [r3, #8]
  t6.re = t299.re;
 800386a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800386e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003872:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003876:	e9c2 3400 	strd	r3, r4, [r2]
  t6.im = theta2;
 800387a:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 800387e:	4b28      	ldr	r3, [pc, #160]	; (8003920 <G_q+0x1608>)
 8003880:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003884:	4439      	add	r1, r7
 8003886:	440b      	add	r3, r1
 8003888:	e9d3 3400 	ldrd	r3, r4, [r3]
 800388c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t5.re = -t299.re;
 8003890:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003894:	ed93 7b00 	vldr	d7, [r3]
 8003898:	eeb1 7b47 	vneg.f64	d7, d7
 800389c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80038a0:	ed83 7b00 	vstr	d7, [r3]
  t5.im = -theta2;
 80038a4:	4b1e      	ldr	r3, [pc, #120]	; (8003920 <G_q+0x1608>)
 80038a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038aa:	443a      	add	r2, r7
 80038ac:	4413      	add	r3, r2
 80038ae:	ed93 7b00 	vldr	d7, [r3]
 80038b2:	eeb1 7b47 	vneg.f64	d7, d7
 80038b6:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80038ba:	ed83 7b02 	vstr	d7, [r3, #8]
  t4.re = t299.re;
 80038be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038c2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038c6:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80038ca:	e9c2 3400 	strd	r3, r4, [r2]
  t4.im = theta2;
 80038ce:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <G_q+0x1608>)
 80038d4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80038d8:	4439      	add	r1, r7
 80038da:	440b      	add	r3, r1
 80038dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038e0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t3.re = -t299.re;
 80038e4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038e8:	ed93 7b00 	vldr	d7, [r3]
 80038ec:	eeb1 7b47 	vneg.f64	d7, d7
 80038f0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80038f4:	ed83 7b00 	vstr	d7, [r3]
  t3.im = -theta2;
 80038f8:	4b09      	ldr	r3, [pc, #36]	; (8003920 <G_q+0x1608>)
 80038fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038fe:	443a      	add	r2, r7
 8003900:	4413      	add	r3, r2
 8003902:	ed93 7b00 	vldr	d7, [r3]
 8003906:	eeb1 7b47 	vneg.f64	d7, d7
 800390a:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800390e:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t3);
 8003912:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003916:	4618      	mov	r0, r3
 8003918:	f00e fe0a 	bl	8012530 <b_exp>
 800391c:	e002      	b.n	8003924 <G_q+0x160c>
 800391e:	bf00      	nop
 8003920:	ffffec50 	.word	0xffffec50
  t297.re = theta3 * 0.0;
 8003924:	4bc6      	ldr	r3, [pc, #792]	; (8003c40 <G_q+0x1928>)
 8003926:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800392a:	443a      	add	r2, r7
 800392c:	4413      	add	r3, r2
 800392e:	ed93 7b00 	vldr	d7, [r3]
 8003932:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003c38 <G_q+0x1920>
 8003936:	ee27 7b06 	vmul.f64	d7, d7, d6
 800393a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800393e:	ed83 7b00 	vstr	d7, [r3]
  t297.im = theta3;
 8003942:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 8003946:	4bbe      	ldr	r3, [pc, #760]	; (8003c40 <G_q+0x1928>)
 8003948:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800394c:	4439      	add	r1, r7
 800394e:	440b      	add	r3, r1
 8003950:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003954:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t296.re = -t297.re;
 8003958:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800395c:	ed93 7b00 	vldr	d7, [r3]
 8003960:	eeb1 7b47 	vneg.f64	d7, d7
 8003964:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003968:	ed83 7b00 	vstr	d7, [r3]
  t296.im = -theta3;
 800396c:	4bb4      	ldr	r3, [pc, #720]	; (8003c40 <G_q+0x1928>)
 800396e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003972:	443a      	add	r2, r7
 8003974:	4413      	add	r3, r2
 8003976:	ed93 7b00 	vldr	d7, [r3]
 800397a:	eeb1 7b47 	vneg.f64	d7, d7
 800397e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003982:	ed83 7b02 	vstr	d7, [r3, #8]
  t295.re = t297.re;
 8003986:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800398a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800398e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8003992:	e9c2 3400 	strd	r3, r4, [r2]
  t295.im = theta3;
 8003996:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 800399a:	4ba9      	ldr	r3, [pc, #676]	; (8003c40 <G_q+0x1928>)
 800399c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80039a0:	4439      	add	r1, r7
 80039a2:	440b      	add	r3, r1
 80039a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t294.re = -t297.re;
 80039ac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80039b0:	ed93 7b00 	vldr	d7, [r3]
 80039b4:	eeb1 7b47 	vneg.f64	d7, d7
 80039b8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80039bc:	ed83 7b00 	vstr	d7, [r3]
  t294.im = -theta3;
 80039c0:	4b9f      	ldr	r3, [pc, #636]	; (8003c40 <G_q+0x1928>)
 80039c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80039c6:	443a      	add	r2, r7
 80039c8:	4413      	add	r3, r2
 80039ca:	ed93 7b00 	vldr	d7, [r3]
 80039ce:	eeb1 7b47 	vneg.f64	d7, d7
 80039d2:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80039d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t289.re = t297.re;
 80039da:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80039de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039e2:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80039e6:	e9c2 3400 	strd	r3, r4, [r2]
  t289.im = theta3;
 80039ea:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 80039ee:	4b94      	ldr	r3, [pc, #592]	; (8003c40 <G_q+0x1928>)
 80039f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80039f4:	4439      	add	r1, r7
 80039f6:	440b      	add	r3, r1
 80039f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t288.re = -t297.re;
 8003a00:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a04:	ed93 7b00 	vldr	d7, [r3]
 8003a08:	eeb1 7b47 	vneg.f64	d7, d7
 8003a0c:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003a10:	ed83 7b00 	vstr	d7, [r3]
  t288.im = -theta3;
 8003a14:	4b8a      	ldr	r3, [pc, #552]	; (8003c40 <G_q+0x1928>)
 8003a16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a1a:	443a      	add	r2, r7
 8003a1c:	4413      	add	r3, r2
 8003a1e:	ed93 7b00 	vldr	d7, [r3]
 8003a22:	eeb1 7b47 	vneg.f64	d7, d7
 8003a26:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003a2a:	ed83 7b02 	vstr	d7, [r3, #8]
  t283.re = t297.re;
 8003a2e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a36:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003a3a:	e9c2 3400 	strd	r3, r4, [r2]
  t283.im = theta3;
 8003a3e:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003a42:	4b7f      	ldr	r3, [pc, #508]	; (8003c40 <G_q+0x1928>)
 8003a44:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a48:	4439      	add	r1, r7
 8003a4a:	440b      	add	r3, r1
 8003a4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a50:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t282.re = -t297.re;
 8003a54:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a58:	ed93 7b00 	vldr	d7, [r3]
 8003a5c:	eeb1 7b47 	vneg.f64	d7, d7
 8003a60:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003a64:	ed83 7b00 	vstr	d7, [r3]
  t282.im = -theta3;
 8003a68:	4b75      	ldr	r3, [pc, #468]	; (8003c40 <G_q+0x1928>)
 8003a6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a6e:	443a      	add	r2, r7
 8003a70:	4413      	add	r3, r2
 8003a72:	ed93 7b00 	vldr	d7, [r3]
 8003a76:	eeb1 7b47 	vneg.f64	d7, d7
 8003a7a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003a7e:	ed83 7b02 	vstr	d7, [r3, #8]
  t275.re = t297.re;
 8003a82:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003a86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a8a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003a8e:	e9c2 3400 	strd	r3, r4, [r2]
  t275.im = theta3;
 8003a92:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <G_q+0x1928>)
 8003a98:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a9c:	4439      	add	r1, r7
 8003a9e:	440b      	add	r3, r1
 8003aa0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003aa4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t274.re = -t297.re;
 8003aa8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003aac:	ed93 7b00 	vldr	d7, [r3]
 8003ab0:	eeb1 7b47 	vneg.f64	d7, d7
 8003ab4:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003ab8:	ed83 7b00 	vstr	d7, [r3]
  t274.im = -theta3;
 8003abc:	4b60      	ldr	r3, [pc, #384]	; (8003c40 <G_q+0x1928>)
 8003abe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ac2:	443a      	add	r2, r7
 8003ac4:	4413      	add	r3, r2
 8003ac6:	ed93 7b00 	vldr	d7, [r3]
 8003aca:	eeb1 7b47 	vneg.f64	d7, d7
 8003ace:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003ad2:	ed83 7b02 	vstr	d7, [r3, #8]
  t271.re = t297.re;
 8003ad6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ade:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003ae2:	e9c2 3400 	strd	r3, r4, [r2]
  t271.im = theta3;
 8003ae6:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <G_q+0x1928>)
 8003aec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003af0:	4439      	add	r1, r7
 8003af2:	440b      	add	r3, r1
 8003af4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003af8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t270.re = -t297.re;
 8003afc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b00:	ed93 7b00 	vldr	d7, [r3]
 8003b04:	eeb1 7b47 	vneg.f64	d7, d7
 8003b08:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003b0c:	ed83 7b00 	vstr	d7, [r3]
  t270.im = -theta3;
 8003b10:	4b4b      	ldr	r3, [pc, #300]	; (8003c40 <G_q+0x1928>)
 8003b12:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b16:	443a      	add	r2, r7
 8003b18:	4413      	add	r3, r2
 8003b1a:	ed93 7b00 	vldr	d7, [r3]
 8003b1e:	eeb1 7b47 	vneg.f64	d7, d7
 8003b22:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003b26:	ed83 7b02 	vstr	d7, [r3, #8]
  t261.re = t297.re;
 8003b2a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b32:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003b36:	e9c2 3400 	strd	r3, r4, [r2]
  t261.im = theta3;
 8003b3a:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003b3e:	4b40      	ldr	r3, [pc, #256]	; (8003c40 <G_q+0x1928>)
 8003b40:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b44:	4439      	add	r1, r7
 8003b46:	440b      	add	r3, r1
 8003b48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b4c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t260.re = -t297.re;
 8003b50:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b54:	ed93 7b00 	vldr	d7, [r3]
 8003b58:	eeb1 7b47 	vneg.f64	d7, d7
 8003b5c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003b60:	ed83 7b00 	vstr	d7, [r3]
  t260.im = -theta3;
 8003b64:	4b36      	ldr	r3, [pc, #216]	; (8003c40 <G_q+0x1928>)
 8003b66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b6a:	443a      	add	r2, r7
 8003b6c:	4413      	add	r3, r2
 8003b6e:	ed93 7b00 	vldr	d7, [r3]
 8003b72:	eeb1 7b47 	vneg.f64	d7, d7
 8003b76:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003b7a:	ed83 7b02 	vstr	d7, [r3, #8]
  t257.re = t297.re;
 8003b7e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003b82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b86:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003b8a:	e9c2 3400 	strd	r3, r4, [r2]
  t257.im = theta3;
 8003b8e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003b92:	4b2b      	ldr	r3, [pc, #172]	; (8003c40 <G_q+0x1928>)
 8003b94:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b98:	4439      	add	r1, r7
 8003b9a:	440b      	add	r3, r1
 8003b9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ba0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t256.re = -t297.re;
 8003ba4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ba8:	ed93 7b00 	vldr	d7, [r3]
 8003bac:	eeb1 7b47 	vneg.f64	d7, d7
 8003bb0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003bb4:	ed83 7b00 	vstr	d7, [r3]
  t256.im = -theta3;
 8003bb8:	4b21      	ldr	r3, [pc, #132]	; (8003c40 <G_q+0x1928>)
 8003bba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bbe:	443a      	add	r2, r7
 8003bc0:	4413      	add	r3, r2
 8003bc2:	ed93 7b00 	vldr	d7, [r3]
 8003bc6:	eeb1 7b47 	vneg.f64	d7, d7
 8003bca:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003bce:	ed83 7b02 	vstr	d7, [r3, #8]
  t253.re = t297.re;
 8003bd2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003bd6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bda:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003bde:	e9c2 3400 	strd	r3, r4, [r2]
  t253.im = theta3;
 8003be2:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <G_q+0x1928>)
 8003be8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003bec:	4439      	add	r1, r7
 8003bee:	440b      	add	r3, r1
 8003bf0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003bf4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t252.re = -t297.re;
 8003bf8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003bfc:	ed93 7b00 	vldr	d7, [r3]
 8003c00:	eeb1 7b47 	vneg.f64	d7, d7
 8003c04:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003c08:	ed83 7b00 	vstr	d7, [r3]
  t252.im = -theta3;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <G_q+0x1928>)
 8003c0e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c12:	443a      	add	r2, r7
 8003c14:	4413      	add	r3, r2
 8003c16:	ed93 7b00 	vldr	d7, [r3]
 8003c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8003c1e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003c22:	ed83 7b02 	vstr	d7, [r3, #8]
  t247.re = t297.re;
 8003c26:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c2e:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003c32:	e007      	b.n	8003c44 <G_q+0x192c>
 8003c34:	f3af 8000 	nop.w
	...
 8003c40:	ffffec48 	.word	0xffffec48
 8003c44:	e9c2 3400 	strd	r3, r4, [r2]
  t247.im = theta3;
 8003c48:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003c4c:	4bc3      	ldr	r3, [pc, #780]	; (8003f5c <G_q+0x1c44>)
 8003c4e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003c52:	4439      	add	r1, r7
 8003c54:	440b      	add	r3, r1
 8003c56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t246.re = -t297.re;
 8003c5e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c62:	ed93 7b00 	vldr	d7, [r3]
 8003c66:	eeb1 7b47 	vneg.f64	d7, d7
 8003c6a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003c6e:	ed83 7b00 	vstr	d7, [r3]
  t246.im = -theta3;
 8003c72:	4bba      	ldr	r3, [pc, #744]	; (8003f5c <G_q+0x1c44>)
 8003c74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c78:	443a      	add	r2, r7
 8003c7a:	4413      	add	r3, r2
 8003c7c:	ed93 7b00 	vldr	d7, [r3]
 8003c80:	eeb1 7b47 	vneg.f64	d7, d7
 8003c84:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003c88:	ed83 7b02 	vstr	d7, [r3, #8]
  t241.re = t297.re;
 8003c8c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c94:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003c98:	e9c2 3400 	strd	r3, r4, [r2]
  t241.im = theta3;
 8003c9c:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003ca0:	4bae      	ldr	r3, [pc, #696]	; (8003f5c <G_q+0x1c44>)
 8003ca2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ca6:	4439      	add	r1, r7
 8003ca8:	440b      	add	r3, r1
 8003caa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cae:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t240.re = -t297.re;
 8003cb2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003cb6:	ed93 7b00 	vldr	d7, [r3]
 8003cba:	eeb1 7b47 	vneg.f64	d7, d7
 8003cbe:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003cc2:	ed83 7b00 	vstr	d7, [r3]
  t240.im = -theta3;
 8003cc6:	4ba5      	ldr	r3, [pc, #660]	; (8003f5c <G_q+0x1c44>)
 8003cc8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ccc:	443a      	add	r2, r7
 8003cce:	4413      	add	r3, r2
 8003cd0:	ed93 7b00 	vldr	d7, [r3]
 8003cd4:	eeb1 7b47 	vneg.f64	d7, d7
 8003cd8:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003cdc:	ed83 7b02 	vstr	d7, [r3, #8]
  t235.re = t297.re;
 8003ce0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ce4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce8:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003cec:	e9c2 3400 	strd	r3, r4, [r2]
  t235.im = theta3;
 8003cf0:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003cf4:	4b99      	ldr	r3, [pc, #612]	; (8003f5c <G_q+0x1c44>)
 8003cf6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003cfa:	4439      	add	r1, r7
 8003cfc:	440b      	add	r3, r1
 8003cfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d02:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t234.re = -t297.re;
 8003d06:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d0a:	ed93 7b00 	vldr	d7, [r3]
 8003d0e:	eeb1 7b47 	vneg.f64	d7, d7
 8003d12:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003d16:	ed83 7b00 	vstr	d7, [r3]
  t234.im = -theta3;
 8003d1a:	4b90      	ldr	r3, [pc, #576]	; (8003f5c <G_q+0x1c44>)
 8003d1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d20:	443a      	add	r2, r7
 8003d22:	4413      	add	r3, r2
 8003d24:	ed93 7b00 	vldr	d7, [r3]
 8003d28:	eeb1 7b47 	vneg.f64	d7, d7
 8003d2c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003d30:	ed83 7b02 	vstr	d7, [r3, #8]
  t225.re = t297.re;
 8003d34:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d3c:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003d40:	e9c2 3400 	strd	r3, r4, [r2]
  t225.im = theta3;
 8003d44:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003d48:	4b84      	ldr	r3, [pc, #528]	; (8003f5c <G_q+0x1c44>)
 8003d4a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003d4e:	4439      	add	r1, r7
 8003d50:	440b      	add	r3, r1
 8003d52:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d56:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t224.re = -t297.re;
 8003d5a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d5e:	ed93 7b00 	vldr	d7, [r3]
 8003d62:	eeb1 7b47 	vneg.f64	d7, d7
 8003d66:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8003d6a:	ed83 7b00 	vstr	d7, [r3]
  t224.im = -theta3;
 8003d6e:	4b7b      	ldr	r3, [pc, #492]	; (8003f5c <G_q+0x1c44>)
 8003d70:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d74:	443a      	add	r2, r7
 8003d76:	4413      	add	r3, r2
 8003d78:	ed93 7b00 	vldr	d7, [r3]
 8003d7c:	eeb1 7b47 	vneg.f64	d7, d7
 8003d80:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8003d84:	ed83 7b02 	vstr	d7, [r3, #8]
  t221.re = t297.re;
 8003d88:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d90:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8003d94:	e9c2 3400 	strd	r3, r4, [r2]
  t221.im = theta3;
 8003d98:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8003d9c:	4b6f      	ldr	r3, [pc, #444]	; (8003f5c <G_q+0x1c44>)
 8003d9e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003da2:	4439      	add	r1, r7
 8003da4:	440b      	add	r3, r1
 8003da6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003daa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t220.re = -t297.re;
 8003dae:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003db2:	ed93 7b00 	vldr	d7, [r3]
 8003db6:	eeb1 7b47 	vneg.f64	d7, d7
 8003dba:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8003dbe:	ed83 7b00 	vstr	d7, [r3]
  t220.im = -theta3;
 8003dc2:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <G_q+0x1c44>)
 8003dc4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003dc8:	443a      	add	r2, r7
 8003dca:	4413      	add	r3, r2
 8003dcc:	ed93 7b00 	vldr	d7, [r3]
 8003dd0:	eeb1 7b47 	vneg.f64	d7, d7
 8003dd4:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8003dd8:	ed83 7b02 	vstr	d7, [r3, #8]
  t215.re = t297.re;
 8003ddc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003de0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003de4:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003de8:	e9c2 3400 	strd	r3, r4, [r2]
  t215.im = theta3;
 8003dec:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8003df0:	4b5a      	ldr	r3, [pc, #360]	; (8003f5c <G_q+0x1c44>)
 8003df2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003df6:	4439      	add	r1, r7
 8003df8:	440b      	add	r3, r1
 8003dfa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dfe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t214.re = -t297.re;
 8003e02:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e06:	ed93 7b00 	vldr	d7, [r3]
 8003e0a:	eeb1 7b47 	vneg.f64	d7, d7
 8003e0e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003e12:	ed83 7b00 	vstr	d7, [r3]
  t214.im = -theta3;
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <G_q+0x1c44>)
 8003e18:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e1c:	443a      	add	r2, r7
 8003e1e:	4413      	add	r3, r2
 8003e20:	ed93 7b00 	vldr	d7, [r3]
 8003e24:	eeb1 7b47 	vneg.f64	d7, d7
 8003e28:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8003e2c:	ed83 7b02 	vstr	d7, [r3, #8]
  t211.re = t297.re;
 8003e30:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e38:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8003e3c:	e9c2 3400 	strd	r3, r4, [r2]
  t211.im = theta3;
 8003e40:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 8003e44:	4b45      	ldr	r3, [pc, #276]	; (8003f5c <G_q+0x1c44>)
 8003e46:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e4a:	4439      	add	r1, r7
 8003e4c:	440b      	add	r3, r1
 8003e4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e52:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t210.re = -t297.re;
 8003e56:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e5a:	ed93 7b00 	vldr	d7, [r3]
 8003e5e:	eeb1 7b47 	vneg.f64	d7, d7
 8003e62:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8003e66:	ed83 7b00 	vstr	d7, [r3]
  t210.im = -theta3;
 8003e6a:	4b3c      	ldr	r3, [pc, #240]	; (8003f5c <G_q+0x1c44>)
 8003e6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e70:	443a      	add	r2, r7
 8003e72:	4413      	add	r3, r2
 8003e74:	ed93 7b00 	vldr	d7, [r3]
 8003e78:	eeb1 7b47 	vneg.f64	d7, d7
 8003e7c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8003e80:	ed83 7b02 	vstr	d7, [r3, #8]
  t207.re = t297.re;
 8003e84:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e8c:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8003e90:	e9c2 3400 	strd	r3, r4, [r2]
  t207.im = theta3;
 8003e94:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8003e98:	4b30      	ldr	r3, [pc, #192]	; (8003f5c <G_q+0x1c44>)
 8003e9a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e9e:	4439      	add	r1, r7
 8003ea0:	440b      	add	r3, r1
 8003ea2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ea6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t206.re = -t297.re;
 8003eaa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003eae:	ed93 7b00 	vldr	d7, [r3]
 8003eb2:	eeb1 7b47 	vneg.f64	d7, d7
 8003eb6:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003eba:	ed83 7b00 	vstr	d7, [r3]
  t206.im = -theta3;
 8003ebe:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <G_q+0x1c44>)
 8003ec0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ec4:	443a      	add	r2, r7
 8003ec6:	4413      	add	r3, r2
 8003ec8:	ed93 7b00 	vldr	d7, [r3]
 8003ecc:	eeb1 7b47 	vneg.f64	d7, d7
 8003ed0:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8003ed4:	ed83 7b02 	vstr	d7, [r3, #8]
  t201.re = t297.re;
 8003ed8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003edc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ee0:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8003ee4:	e9c2 3400 	strd	r3, r4, [r2]
  t201.im = theta3;
 8003ee8:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8003eec:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <G_q+0x1c44>)
 8003eee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ef2:	4439      	add	r1, r7
 8003ef4:	440b      	add	r3, r1
 8003ef6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003efa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t200.re = -t297.re;
 8003efe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f02:	ed93 7b00 	vldr	d7, [r3]
 8003f06:	eeb1 7b47 	vneg.f64	d7, d7
 8003f0a:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003f0e:	ed83 7b00 	vstr	d7, [r3]
  t200.im = -theta3;
 8003f12:	4b12      	ldr	r3, [pc, #72]	; (8003f5c <G_q+0x1c44>)
 8003f14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f18:	443a      	add	r2, r7
 8003f1a:	4413      	add	r3, r2
 8003f1c:	ed93 7b00 	vldr	d7, [r3]
 8003f20:	eeb1 7b47 	vneg.f64	d7, d7
 8003f24:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8003f28:	ed83 7b02 	vstr	d7, [r3, #8]
  t191.re = t297.re;
 8003f2c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f34:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8003f38:	e9c2 3400 	strd	r3, r4, [r2]
  t191.im = theta3;
 8003f3c:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 8003f40:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <G_q+0x1c44>)
 8003f42:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f46:	4439      	add	r1, r7
 8003f48:	440b      	add	r3, r1
 8003f4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f4e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t190.re = -t297.re;
 8003f52:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f56:	ed93 7b00 	vldr	d7, [r3]
 8003f5a:	e001      	b.n	8003f60 <G_q+0x1c48>
 8003f5c:	ffffec48 	.word	0xffffec48
 8003f60:	eeb1 7b47 	vneg.f64	d7, d7
 8003f64:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8003f68:	ed83 7b00 	vstr	d7, [r3]
  t190.im = -theta3;
 8003f6c:	4bc4      	ldr	r3, [pc, #784]	; (8004280 <G_q+0x1f68>)
 8003f6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f72:	443a      	add	r2, r7
 8003f74:	4413      	add	r3, r2
 8003f76:	ed93 7b00 	vldr	d7, [r3]
 8003f7a:	eeb1 7b47 	vneg.f64	d7, d7
 8003f7e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8003f82:	ed83 7b02 	vstr	d7, [r3, #8]
  t187.re = t297.re;
 8003f86:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f8e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003f92:	e9c2 3400 	strd	r3, r4, [r2]
  t187.im = theta3;
 8003f96:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8003f9a:	4bb9      	ldr	r3, [pc, #740]	; (8004280 <G_q+0x1f68>)
 8003f9c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003fa0:	4439      	add	r1, r7
 8003fa2:	440b      	add	r3, r1
 8003fa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fa8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t186.re = -t297.re;
 8003fac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fb0:	ed93 7b00 	vldr	d7, [r3]
 8003fb4:	eeb1 7b47 	vneg.f64	d7, d7
 8003fb8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8003fbc:	ed83 7b00 	vstr	d7, [r3]
  t186.im = -theta3;
 8003fc0:	4baf      	ldr	r3, [pc, #700]	; (8004280 <G_q+0x1f68>)
 8003fc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003fc6:	443a      	add	r2, r7
 8003fc8:	4413      	add	r3, r2
 8003fca:	ed93 7b00 	vldr	d7, [r3]
 8003fce:	eeb1 7b47 	vneg.f64	d7, d7
 8003fd2:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8003fd6:	ed83 7b02 	vstr	d7, [r3, #8]
  t183.re = t297.re;
 8003fda:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fe2:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8003fe6:	e9c2 3400 	strd	r3, r4, [r2]
  t183.im = theta3;
 8003fea:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8003fee:	4ba4      	ldr	r3, [pc, #656]	; (8004280 <G_q+0x1f68>)
 8003ff0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ff4:	4439      	add	r1, r7
 8003ff6:	440b      	add	r3, r1
 8003ff8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ffc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t182.re = -t297.re;
 8004000:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004004:	ed93 7b00 	vldr	d7, [r3]
 8004008:	eeb1 7b47 	vneg.f64	d7, d7
 800400c:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8004010:	ed83 7b00 	vstr	d7, [r3]
  t182.im = -theta3;
 8004014:	4b9a      	ldr	r3, [pc, #616]	; (8004280 <G_q+0x1f68>)
 8004016:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800401a:	443a      	add	r2, r7
 800401c:	4413      	add	r3, r2
 800401e:	ed93 7b00 	vldr	d7, [r3]
 8004022:	eeb1 7b47 	vneg.f64	d7, d7
 8004026:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800402a:	ed83 7b02 	vstr	d7, [r3, #8]
  t177.re = t297.re;
 800402e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004032:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004036:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 800403a:	e9c2 3400 	strd	r3, r4, [r2]
  t177.im = theta3;
 800403e:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 8004042:	4b8f      	ldr	r3, [pc, #572]	; (8004280 <G_q+0x1f68>)
 8004044:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004048:	4439      	add	r1, r7
 800404a:	440b      	add	r3, r1
 800404c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004050:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t176.re = -t297.re;
 8004054:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004058:	ed93 7b00 	vldr	d7, [r3]
 800405c:	eeb1 7b47 	vneg.f64	d7, d7
 8004060:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8004064:	ed83 7b00 	vstr	d7, [r3]
  t176.im = -theta3;
 8004068:	4b85      	ldr	r3, [pc, #532]	; (8004280 <G_q+0x1f68>)
 800406a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800406e:	443a      	add	r2, r7
 8004070:	4413      	add	r3, r2
 8004072:	ed93 7b00 	vldr	d7, [r3]
 8004076:	eeb1 7b47 	vneg.f64	d7, d7
 800407a:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800407e:	ed83 7b02 	vstr	d7, [r3, #8]
  t169.re = t297.re;
 8004082:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004086:	e9d3 3400 	ldrd	r3, r4, [r3]
 800408a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800408e:	e9c2 3400 	strd	r3, r4, [r2]
  t169.im = theta3;
 8004092:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8004096:	4b7a      	ldr	r3, [pc, #488]	; (8004280 <G_q+0x1f68>)
 8004098:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800409c:	4439      	add	r1, r7
 800409e:	440b      	add	r3, r1
 80040a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t168.re = -t297.re;
 80040a8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040ac:	ed93 7b00 	vldr	d7, [r3]
 80040b0:	eeb1 7b47 	vneg.f64	d7, d7
 80040b4:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80040b8:	ed83 7b00 	vstr	d7, [r3]
  t168.im = -theta3;
 80040bc:	4b70      	ldr	r3, [pc, #448]	; (8004280 <G_q+0x1f68>)
 80040be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80040c2:	443a      	add	r2, r7
 80040c4:	4413      	add	r3, r2
 80040c6:	ed93 7b00 	vldr	d7, [r3]
 80040ca:	eeb1 7b47 	vneg.f64	d7, d7
 80040ce:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 80040d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t165.re = t297.re;
 80040d6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040de:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80040e2:	e9c2 3400 	strd	r3, r4, [r2]
  t165.im = theta3;
 80040e6:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <G_q+0x1f68>)
 80040ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040f0:	4439      	add	r1, r7
 80040f2:	440b      	add	r3, r1
 80040f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t164.re = -t297.re;
 80040fc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004100:	ed93 7b00 	vldr	d7, [r3]
 8004104:	eeb1 7b47 	vneg.f64	d7, d7
 8004108:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800410c:	ed83 7b00 	vstr	d7, [r3]
  t164.im = -theta3;
 8004110:	4b5b      	ldr	r3, [pc, #364]	; (8004280 <G_q+0x1f68>)
 8004112:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004116:	443a      	add	r2, r7
 8004118:	4413      	add	r3, r2
 800411a:	ed93 7b00 	vldr	d7, [r3]
 800411e:	eeb1 7b47 	vneg.f64	d7, d7
 8004122:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8004126:	ed83 7b02 	vstr	d7, [r3, #8]
  t163.re = t297.re;
 800412a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800412e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004132:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 8004136:	e9c2 3400 	strd	r3, r4, [r2]
  t163.im = theta3;
 800413a:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 800413e:	4b50      	ldr	r3, [pc, #320]	; (8004280 <G_q+0x1f68>)
 8004140:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004144:	4439      	add	r1, r7
 8004146:	440b      	add	r3, r1
 8004148:	e9d3 3400 	ldrd	r3, r4, [r3]
 800414c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t162.re = -t297.re;
 8004150:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004154:	ed93 7b00 	vldr	d7, [r3]
 8004158:	eeb1 7b47 	vneg.f64	d7, d7
 800415c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004160:	ed83 7b00 	vstr	d7, [r3]
  t162.im = -theta3;
 8004164:	4b46      	ldr	r3, [pc, #280]	; (8004280 <G_q+0x1f68>)
 8004166:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800416a:	443a      	add	r2, r7
 800416c:	4413      	add	r3, r2
 800416e:	ed93 7b00 	vldr	d7, [r3]
 8004172:	eeb1 7b47 	vneg.f64	d7, d7
 8004176:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800417a:	ed83 7b02 	vstr	d7, [r3, #8]
  t155.re = t297.re;
 800417e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004182:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004186:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800418a:	e9c2 3400 	strd	r3, r4, [r2]
  t155.im = theta3;
 800418e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8004192:	4b3b      	ldr	r3, [pc, #236]	; (8004280 <G_q+0x1f68>)
 8004194:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004198:	4439      	add	r1, r7
 800419a:	440b      	add	r3, r1
 800419c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t154.re = -t297.re;
 80041a4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041a8:	ed93 7b00 	vldr	d7, [r3]
 80041ac:	eeb1 7b47 	vneg.f64	d7, d7
 80041b0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80041b4:	ed83 7b00 	vstr	d7, [r3]
  t154.im = -theta3;
 80041b8:	4b31      	ldr	r3, [pc, #196]	; (8004280 <G_q+0x1f68>)
 80041ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80041be:	443a      	add	r2, r7
 80041c0:	4413      	add	r3, r2
 80041c2:	ed93 7b00 	vldr	d7, [r3]
 80041c6:	eeb1 7b47 	vneg.f64	d7, d7
 80041ca:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80041ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t151.re = t297.re;
 80041d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041da:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80041de:	e9c2 3400 	strd	r3, r4, [r2]
  t151.im = theta3;
 80041e2:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 80041e6:	4b26      	ldr	r3, [pc, #152]	; (8004280 <G_q+0x1f68>)
 80041e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041ec:	4439      	add	r1, r7
 80041ee:	440b      	add	r3, r1
 80041f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t150.re = -t297.re;
 80041f8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041fc:	ed93 7b00 	vldr	d7, [r3]
 8004200:	eeb1 7b47 	vneg.f64	d7, d7
 8004204:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8004208:	ed83 7b00 	vstr	d7, [r3]
  t150.im = -theta3;
 800420c:	4b1c      	ldr	r3, [pc, #112]	; (8004280 <G_q+0x1f68>)
 800420e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004212:	443a      	add	r2, r7
 8004214:	4413      	add	r3, r2
 8004216:	ed93 7b00 	vldr	d7, [r3]
 800421a:	eeb1 7b47 	vneg.f64	d7, d7
 800421e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8004222:	ed83 7b02 	vstr	d7, [r3, #8]
  t145.re = t297.re;
 8004226:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800422a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800422e:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 8004232:	e9c2 3400 	strd	r3, r4, [r2]
  t145.im = theta3;
 8004236:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 800423a:	4b11      	ldr	r3, [pc, #68]	; (8004280 <G_q+0x1f68>)
 800423c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004240:	4439      	add	r1, r7
 8004242:	440b      	add	r3, r1
 8004244:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004248:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t144.re = -t297.re;
 800424c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004250:	ed93 7b00 	vldr	d7, [r3]
 8004254:	eeb1 7b47 	vneg.f64	d7, d7
 8004258:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800425c:	ed83 7b00 	vstr	d7, [r3]
  t144.im = -theta3;
 8004260:	4b07      	ldr	r3, [pc, #28]	; (8004280 <G_q+0x1f68>)
 8004262:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004266:	443a      	add	r2, r7
 8004268:	4413      	add	r3, r2
 800426a:	ed93 7b00 	vldr	d7, [r3]
 800426e:	eeb1 7b47 	vneg.f64	d7, d7
 8004272:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8004276:	ed83 7b02 	vstr	d7, [r3, #8]
  t141.re = t297.re;
 800427a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800427e:	e001      	b.n	8004284 <G_q+0x1f6c>
 8004280:	ffffec48 	.word	0xffffec48
 8004284:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004288:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800428c:	e9c2 3400 	strd	r3, r4, [r2]
  t141.im = theta3;
 8004290:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8004294:	4bc3      	ldr	r3, [pc, #780]	; (80045a4 <G_q+0x228c>)
 8004296:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800429a:	4439      	add	r1, r7
 800429c:	440b      	add	r3, r1
 800429e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t140.re = -t297.re;
 80042a6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042aa:	ed93 7b00 	vldr	d7, [r3]
 80042ae:	eeb1 7b47 	vneg.f64	d7, d7
 80042b2:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80042b6:	ed83 7b00 	vstr	d7, [r3]
  t140.im = -theta3;
 80042ba:	4bba      	ldr	r3, [pc, #744]	; (80045a4 <G_q+0x228c>)
 80042bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80042c0:	443a      	add	r2, r7
 80042c2:	4413      	add	r3, r2
 80042c4:	ed93 7b00 	vldr	d7, [r3]
 80042c8:	eeb1 7b47 	vneg.f64	d7, d7
 80042cc:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 80042d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t137.re = t297.re;
 80042d4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042dc:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80042e0:	e9c2 3400 	strd	r3, r4, [r2]
  t137.im = theta3;
 80042e4:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 80042e8:	4bae      	ldr	r3, [pc, #696]	; (80045a4 <G_q+0x228c>)
 80042ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042ee:	4439      	add	r1, r7
 80042f0:	440b      	add	r3, r1
 80042f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t136.re = -t297.re;
 80042fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042fe:	ed93 7b00 	vldr	d7, [r3]
 8004302:	eeb1 7b47 	vneg.f64	d7, d7
 8004306:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800430a:	ed83 7b00 	vstr	d7, [r3]
  t136.im = -theta3;
 800430e:	4ba5      	ldr	r3, [pc, #660]	; (80045a4 <G_q+0x228c>)
 8004310:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004314:	443a      	add	r2, r7
 8004316:	4413      	add	r3, r2
 8004318:	ed93 7b00 	vldr	d7, [r3]
 800431c:	eeb1 7b47 	vneg.f64	d7, d7
 8004320:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8004324:	ed83 7b02 	vstr	d7, [r3, #8]
  t131.re = t297.re;
 8004328:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800432c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004330:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 8004334:	e9c2 3400 	strd	r3, r4, [r2]
  t131.im = theta3;
 8004338:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 800433c:	4b99      	ldr	r3, [pc, #612]	; (80045a4 <G_q+0x228c>)
 800433e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004342:	4439      	add	r1, r7
 8004344:	440b      	add	r3, r1
 8004346:	e9d3 3400 	ldrd	r3, r4, [r3]
 800434a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t130.re = -t297.re;
 800434e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004352:	ed93 7b00 	vldr	d7, [r3]
 8004356:	eeb1 7b47 	vneg.f64	d7, d7
 800435a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800435e:	ed83 7b00 	vstr	d7, [r3]
  t130.im = -theta3;
 8004362:	4b90      	ldr	r3, [pc, #576]	; (80045a4 <G_q+0x228c>)
 8004364:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004368:	443a      	add	r2, r7
 800436a:	4413      	add	r3, r2
 800436c:	ed93 7b00 	vldr	d7, [r3]
 8004370:	eeb1 7b47 	vneg.f64	d7, d7
 8004374:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004378:	ed83 7b02 	vstr	d7, [r3, #8]
  t129.re = t297.re;
 800437c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004380:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004384:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004388:	e9c2 3400 	strd	r3, r4, [r2]
  t129.im = theta3;
 800438c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004390:	4b84      	ldr	r3, [pc, #528]	; (80045a4 <G_q+0x228c>)
 8004392:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004396:	4439      	add	r1, r7
 8004398:	440b      	add	r3, r1
 800439a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800439e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t128.re = -t297.re;
 80043a2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043a6:	ed93 7b00 	vldr	d7, [r3]
 80043aa:	eeb1 7b47 	vneg.f64	d7, d7
 80043ae:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80043b2:	ed83 7b00 	vstr	d7, [r3]
  t128.im = -theta3;
 80043b6:	4b7b      	ldr	r3, [pc, #492]	; (80045a4 <G_q+0x228c>)
 80043b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80043bc:	443a      	add	r2, r7
 80043be:	4413      	add	r3, r2
 80043c0:	ed93 7b00 	vldr	d7, [r3]
 80043c4:	eeb1 7b47 	vneg.f64	d7, d7
 80043c8:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 80043cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t121.re = t297.re;
 80043d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043d8:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80043dc:	e9c2 3400 	strd	r3, r4, [r2]
  t121.im = theta3;
 80043e0:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 80043e4:	4b6f      	ldr	r3, [pc, #444]	; (80045a4 <G_q+0x228c>)
 80043e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043ea:	4439      	add	r1, r7
 80043ec:	440b      	add	r3, r1
 80043ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t120.re = -t297.re;
 80043f6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043fa:	ed93 7b00 	vldr	d7, [r3]
 80043fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004402:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004406:	ed83 7b00 	vstr	d7, [r3]
  t120.im = -theta3;
 800440a:	4b66      	ldr	r3, [pc, #408]	; (80045a4 <G_q+0x228c>)
 800440c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004410:	443a      	add	r2, r7
 8004412:	4413      	add	r3, r2
 8004414:	ed93 7b00 	vldr	d7, [r3]
 8004418:	eeb1 7b47 	vneg.f64	d7, d7
 800441c:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8004420:	ed83 7b02 	vstr	d7, [r3, #8]
  t115.re = t297.re;
 8004424:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004428:	e9d3 3400 	ldrd	r3, r4, [r3]
 800442c:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004430:	e9c2 3400 	strd	r3, r4, [r2]
  t115.im = theta3;
 8004434:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 8004438:	4b5a      	ldr	r3, [pc, #360]	; (80045a4 <G_q+0x228c>)
 800443a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800443e:	4439      	add	r1, r7
 8004440:	440b      	add	r3, r1
 8004442:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004446:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t114.re = -t297.re;
 800444a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800444e:	ed93 7b00 	vldr	d7, [r3]
 8004452:	eeb1 7b47 	vneg.f64	d7, d7
 8004456:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800445a:	ed83 7b00 	vstr	d7, [r3]
  t114.im = -theta3;
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <G_q+0x228c>)
 8004460:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004464:	443a      	add	r2, r7
 8004466:	4413      	add	r3, r2
 8004468:	ed93 7b00 	vldr	d7, [r3]
 800446c:	eeb1 7b47 	vneg.f64	d7, d7
 8004470:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004474:	ed83 7b02 	vstr	d7, [r3, #8]
  t109.re = t297.re;
 8004478:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800447c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004480:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8004484:	e9c2 3400 	strd	r3, r4, [r2]
  t109.im = theta3;
 8004488:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800448c:	4b45      	ldr	r3, [pc, #276]	; (80045a4 <G_q+0x228c>)
 800448e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004492:	4439      	add	r1, r7
 8004494:	440b      	add	r3, r1
 8004496:	e9d3 3400 	ldrd	r3, r4, [r3]
 800449a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t108.re = -t297.re;
 800449e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044a2:	ed93 7b00 	vldr	d7, [r3]
 80044a6:	eeb1 7b47 	vneg.f64	d7, d7
 80044aa:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80044ae:	ed83 7b00 	vstr	d7, [r3]
  t108.im = -theta3;
 80044b2:	4b3c      	ldr	r3, [pc, #240]	; (80045a4 <G_q+0x228c>)
 80044b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80044b8:	443a      	add	r2, r7
 80044ba:	4413      	add	r3, r2
 80044bc:	ed93 7b00 	vldr	d7, [r3]
 80044c0:	eeb1 7b47 	vneg.f64	d7, d7
 80044c4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 80044c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t107.re = t297.re;
 80044cc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044d4:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80044d8:	e9c2 3400 	strd	r3, r4, [r2]
  t107.im = theta3;
 80044dc:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 80044e0:	4b30      	ldr	r3, [pc, #192]	; (80045a4 <G_q+0x228c>)
 80044e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80044e6:	4439      	add	r1, r7
 80044e8:	440b      	add	r3, r1
 80044ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t106.re = -t297.re;
 80044f2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044f6:	ed93 7b00 	vldr	d7, [r3]
 80044fa:	eeb1 7b47 	vneg.f64	d7, d7
 80044fe:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8004502:	ed83 7b00 	vstr	d7, [r3]
  t106.im = -theta3;
 8004506:	4b27      	ldr	r3, [pc, #156]	; (80045a4 <G_q+0x228c>)
 8004508:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800450c:	443a      	add	r2, r7
 800450e:	4413      	add	r3, r2
 8004510:	ed93 7b00 	vldr	d7, [r3]
 8004514:	eeb1 7b47 	vneg.f64	d7, d7
 8004518:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800451c:	ed83 7b02 	vstr	d7, [r3, #8]
  t99.re = t297.re;
 8004520:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004524:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004528:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 800452c:	e9c2 3400 	strd	r3, r4, [r2]
  t99.im = theta3;
 8004530:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 8004534:	4b1b      	ldr	r3, [pc, #108]	; (80045a4 <G_q+0x228c>)
 8004536:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800453a:	4439      	add	r1, r7
 800453c:	440b      	add	r3, r1
 800453e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004542:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t98.re = -t297.re;
 8004546:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800454a:	ed93 7b00 	vldr	d7, [r3]
 800454e:	eeb1 7b47 	vneg.f64	d7, d7
 8004552:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004556:	ed83 7b00 	vstr	d7, [r3]
  t98.im = -theta3;
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <G_q+0x228c>)
 800455c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004560:	443a      	add	r2, r7
 8004562:	4413      	add	r3, r2
 8004564:	ed93 7b00 	vldr	d7, [r3]
 8004568:	eeb1 7b47 	vneg.f64	d7, d7
 800456c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004570:	ed83 7b02 	vstr	d7, [r3, #8]
  t93.re = t297.re;
 8004574:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800457c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004580:	e9c2 3400 	strd	r3, r4, [r2]
  t93.im = theta3;
 8004584:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004588:	4b06      	ldr	r3, [pc, #24]	; (80045a4 <G_q+0x228c>)
 800458a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800458e:	4439      	add	r1, r7
 8004590:	440b      	add	r3, r1
 8004592:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004596:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t92.re = -t297.re;
 800459a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800459e:	ed93 7b00 	vldr	d7, [r3]
 80045a2:	e001      	b.n	80045a8 <G_q+0x2290>
 80045a4:	ffffec48 	.word	0xffffec48
 80045a8:	eeb1 7b47 	vneg.f64	d7, d7
 80045ac:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80045b0:	ed83 7b00 	vstr	d7, [r3]
  t92.im = -theta3;
 80045b4:	4bc4      	ldr	r3, [pc, #784]	; (80048c8 <G_q+0x25b0>)
 80045b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045ba:	443a      	add	r2, r7
 80045bc:	4413      	add	r3, r2
 80045be:	ed93 7b00 	vldr	d7, [r3]
 80045c2:	eeb1 7b47 	vneg.f64	d7, d7
 80045c6:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 80045ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t85.re = t297.re;
 80045ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045d6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80045da:	e9c2 3400 	strd	r3, r4, [r2]
  t85.im = theta3;
 80045de:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 80045e2:	4bb9      	ldr	r3, [pc, #740]	; (80048c8 <G_q+0x25b0>)
 80045e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80045e8:	4439      	add	r1, r7
 80045ea:	440b      	add	r3, r1
 80045ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t84.re = -t297.re;
 80045f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045f8:	ed93 7b00 	vldr	d7, [r3]
 80045fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004600:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8004604:	ed83 7b00 	vstr	d7, [r3]
  t84.im = -theta3;
 8004608:	4baf      	ldr	r3, [pc, #700]	; (80048c8 <G_q+0x25b0>)
 800460a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800460e:	443a      	add	r2, r7
 8004610:	4413      	add	r3, r2
 8004612:	ed93 7b00 	vldr	d7, [r3]
 8004616:	eeb1 7b47 	vneg.f64	d7, d7
 800461a:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 800461e:	ed83 7b02 	vstr	d7, [r3, #8]
  t81.re = t297.re;
 8004622:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004626:	e9d3 3400 	ldrd	r3, r4, [r3]
 800462a:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 800462e:	e9c2 3400 	strd	r3, r4, [r2]
  t81.im = theta3;
 8004632:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 8004636:	4ba4      	ldr	r3, [pc, #656]	; (80048c8 <G_q+0x25b0>)
 8004638:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800463c:	4439      	add	r1, r7
 800463e:	440b      	add	r3, r1
 8004640:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004644:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t80.re = -t297.re;
 8004648:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800464c:	ed93 7b00 	vldr	d7, [r3]
 8004650:	eeb1 7b47 	vneg.f64	d7, d7
 8004654:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004658:	ed83 7b00 	vstr	d7, [r3]
  t80.im = -theta3;
 800465c:	4b9a      	ldr	r3, [pc, #616]	; (80048c8 <G_q+0x25b0>)
 800465e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004662:	443a      	add	r2, r7
 8004664:	4413      	add	r3, r2
 8004666:	ed93 7b00 	vldr	d7, [r3]
 800466a:	eeb1 7b47 	vneg.f64	d7, d7
 800466e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004672:	ed83 7b02 	vstr	d7, [r3, #8]
  t75.re = t297.re;
 8004676:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800467a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800467e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8004682:	e9c2 3400 	strd	r3, r4, [r2]
  t75.im = theta3;
 8004686:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800468a:	4b8f      	ldr	r3, [pc, #572]	; (80048c8 <G_q+0x25b0>)
 800468c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004690:	4439      	add	r1, r7
 8004692:	440b      	add	r3, r1
 8004694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004698:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t74.re = -t297.re;
 800469c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046a0:	ed93 7b00 	vldr	d7, [r3]
 80046a4:	eeb1 7b47 	vneg.f64	d7, d7
 80046a8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80046ac:	ed83 7b00 	vstr	d7, [r3]
  t74.im = -theta3;
 80046b0:	4b85      	ldr	r3, [pc, #532]	; (80048c8 <G_q+0x25b0>)
 80046b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80046b6:	443a      	add	r2, r7
 80046b8:	4413      	add	r3, r2
 80046ba:	ed93 7b00 	vldr	d7, [r3]
 80046be:	eeb1 7b47 	vneg.f64	d7, d7
 80046c2:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80046c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t73.re = t297.re;
 80046ca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046d2:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80046d6:	e9c2 3400 	strd	r3, r4, [r2]
  t73.im = theta3;
 80046da:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 80046de:	4b7a      	ldr	r3, [pc, #488]	; (80048c8 <G_q+0x25b0>)
 80046e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80046e4:	4439      	add	r1, r7
 80046e6:	440b      	add	r3, r1
 80046e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t72.re = -t297.re;
 80046f0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046f4:	ed93 7b00 	vldr	d7, [r3]
 80046f8:	eeb1 7b47 	vneg.f64	d7, d7
 80046fc:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8004700:	ed83 7b00 	vstr	d7, [r3]
  t72.im = -theta3;
 8004704:	4b70      	ldr	r3, [pc, #448]	; (80048c8 <G_q+0x25b0>)
 8004706:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800470a:	443a      	add	r2, r7
 800470c:	4413      	add	r3, r2
 800470e:	ed93 7b00 	vldr	d7, [r3]
 8004712:	eeb1 7b47 	vneg.f64	d7, d7
 8004716:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800471a:	ed83 7b02 	vstr	d7, [r3, #8]
  t69.re = t297.re;
 800471e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004722:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004726:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 800472a:	e9c2 3400 	strd	r3, r4, [r2]
  t69.im = theta3;
 800472e:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 8004732:	4b65      	ldr	r3, [pc, #404]	; (80048c8 <G_q+0x25b0>)
 8004734:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004738:	4439      	add	r1, r7
 800473a:	440b      	add	r3, r1
 800473c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004740:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t68.re = -t297.re;
 8004744:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004748:	ed93 7b00 	vldr	d7, [r3]
 800474c:	eeb1 7b47 	vneg.f64	d7, d7
 8004750:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004754:	ed83 7b00 	vstr	d7, [r3]
  t68.im = -theta3;
 8004758:	4b5b      	ldr	r3, [pc, #364]	; (80048c8 <G_q+0x25b0>)
 800475a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800475e:	443a      	add	r2, r7
 8004760:	4413      	add	r3, r2
 8004762:	ed93 7b00 	vldr	d7, [r3]
 8004766:	eeb1 7b47 	vneg.f64	d7, d7
 800476a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 800476e:	ed83 7b02 	vstr	d7, [r3, #8]
  t65.re = t297.re;
 8004772:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004776:	e9d3 3400 	ldrd	r3, r4, [r3]
 800477a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 800477e:	e9c2 3400 	strd	r3, r4, [r2]
  t65.im = theta3;
 8004782:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004786:	4b50      	ldr	r3, [pc, #320]	; (80048c8 <G_q+0x25b0>)
 8004788:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800478c:	4439      	add	r1, r7
 800478e:	440b      	add	r3, r1
 8004790:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004794:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t64.re = -t297.re;
 8004798:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800479c:	ed93 7b00 	vldr	d7, [r3]
 80047a0:	eeb1 7b47 	vneg.f64	d7, d7
 80047a4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80047a8:	ed83 7b00 	vstr	d7, [r3]
  t64.im = -theta3;
 80047ac:	4b46      	ldr	r3, [pc, #280]	; (80048c8 <G_q+0x25b0>)
 80047ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80047b2:	443a      	add	r2, r7
 80047b4:	4413      	add	r3, r2
 80047b6:	ed93 7b00 	vldr	d7, [r3]
 80047ba:	eeb1 7b47 	vneg.f64	d7, d7
 80047be:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 80047c2:	ed83 7b02 	vstr	d7, [r3, #8]
  t52.re = t297.re;
 80047c6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047ca:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ce:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80047d2:	e9c2 3400 	strd	r3, r4, [r2]
  t52.im = theta3;
 80047d6:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 80047da:	4b3b      	ldr	r3, [pc, #236]	; (80048c8 <G_q+0x25b0>)
 80047dc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80047e0:	4439      	add	r1, r7
 80047e2:	440b      	add	r3, r1
 80047e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047e8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t51.re = -t297.re;
 80047ec:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047f0:	ed93 7b00 	vldr	d7, [r3]
 80047f4:	eeb1 7b47 	vneg.f64	d7, d7
 80047f8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80047fc:	ed83 7b00 	vstr	d7, [r3]
  t51.im = -theta3;
 8004800:	4b31      	ldr	r3, [pc, #196]	; (80048c8 <G_q+0x25b0>)
 8004802:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004806:	443a      	add	r2, r7
 8004808:	4413      	add	r3, r2
 800480a:	ed93 7b00 	vldr	d7, [r3]
 800480e:	eeb1 7b47 	vneg.f64	d7, d7
 8004812:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004816:	ed83 7b02 	vstr	d7, [r3, #8]
  t48.re = t297.re;
 800481a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800481e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004822:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004826:	e9c2 3400 	strd	r3, r4, [r2]
  t48.im = theta3;
 800482a:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 800482e:	4b26      	ldr	r3, [pc, #152]	; (80048c8 <G_q+0x25b0>)
 8004830:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004834:	4439      	add	r1, r7
 8004836:	440b      	add	r3, r1
 8004838:	e9d3 3400 	ldrd	r3, r4, [r3]
 800483c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t47.re = -t297.re;
 8004840:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004844:	ed93 7b00 	vldr	d7, [r3]
 8004848:	eeb1 7b47 	vneg.f64	d7, d7
 800484c:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004850:	ed83 7b00 	vstr	d7, [r3]
  t47.im = -theta3;
 8004854:	4b1c      	ldr	r3, [pc, #112]	; (80048c8 <G_q+0x25b0>)
 8004856:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800485a:	443a      	add	r2, r7
 800485c:	4413      	add	r3, r2
 800485e:	ed93 7b00 	vldr	d7, [r3]
 8004862:	eeb1 7b47 	vneg.f64	d7, d7
 8004866:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800486a:	ed83 7b02 	vstr	d7, [r3, #8]
  t38.re = t297.re;
 800486e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004872:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004876:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 800487a:	e9c2 3400 	strd	r3, r4, [r2]
  t38.im = theta3;
 800487e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <G_q+0x25b0>)
 8004884:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004888:	4439      	add	r1, r7
 800488a:	440b      	add	r3, r1
 800488c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004890:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t37.re = -t297.re;
 8004894:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004898:	ed93 7b00 	vldr	d7, [r3]
 800489c:	eeb1 7b47 	vneg.f64	d7, d7
 80048a0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80048a4:	ed83 7b00 	vstr	d7, [r3]
  t37.im = -theta3;
 80048a8:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <G_q+0x25b0>)
 80048aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80048ae:	443a      	add	r2, r7
 80048b0:	4413      	add	r3, r2
 80048b2:	ed93 7b00 	vldr	d7, [r3]
 80048b6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ba:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80048be:	ed83 7b02 	vstr	d7, [r3, #8]
  t36.re = t297.re;
 80048c2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048c6:	e001      	b.n	80048cc <G_q+0x25b4>
 80048c8:	ffffec48 	.word	0xffffec48
 80048cc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048d0:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80048d4:	e9c2 3400 	strd	r3, r4, [r2]
  t36.im = theta3;
 80048d8:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 80048dc:	4bc4      	ldr	r3, [pc, #784]	; (8004bf0 <G_q+0x28d8>)
 80048de:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80048e2:	4439      	add	r1, r7
 80048e4:	440b      	add	r3, r1
 80048e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048ea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t35.re = -t297.re;
 80048ee:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048f2:	ed93 7b00 	vldr	d7, [r3]
 80048f6:	eeb1 7b47 	vneg.f64	d7, d7
 80048fa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80048fe:	ed83 7b00 	vstr	d7, [r3]
  t35.im = -theta3;
 8004902:	4bbb      	ldr	r3, [pc, #748]	; (8004bf0 <G_q+0x28d8>)
 8004904:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004908:	443a      	add	r2, r7
 800490a:	4413      	add	r3, r2
 800490c:	ed93 7b00 	vldr	d7, [r3]
 8004910:	eeb1 7b47 	vneg.f64	d7, d7
 8004914:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004918:	ed83 7b02 	vstr	d7, [r3, #8]
  t32.re = t297.re;
 800491c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004920:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004924:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004928:	e9c2 3400 	strd	r3, r4, [r2]
  t32.im = theta3;
 800492c:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004930:	4baf      	ldr	r3, [pc, #700]	; (8004bf0 <G_q+0x28d8>)
 8004932:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004936:	4439      	add	r1, r7
 8004938:	440b      	add	r3, r1
 800493a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800493e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t31.re = -t297.re;
 8004942:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004946:	ed93 7b00 	vldr	d7, [r3]
 800494a:	eeb1 7b47 	vneg.f64	d7, d7
 800494e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004952:	ed83 7b00 	vstr	d7, [r3]
  t31.im = -theta3;
 8004956:	4ba6      	ldr	r3, [pc, #664]	; (8004bf0 <G_q+0x28d8>)
 8004958:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800495c:	443a      	add	r2, r7
 800495e:	4413      	add	r3, r2
 8004960:	ed93 7b00 	vldr	d7, [r3]
 8004964:	eeb1 7b47 	vneg.f64	d7, d7
 8004968:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800496c:	ed83 7b02 	vstr	d7, [r3, #8]
  t28.re = t297.re;
 8004970:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004974:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004978:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 800497c:	e9c2 3400 	strd	r3, r4, [r2]
  t28.im = theta3;
 8004980:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004984:	4b9a      	ldr	r3, [pc, #616]	; (8004bf0 <G_q+0x28d8>)
 8004986:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800498a:	4439      	add	r1, r7
 800498c:	440b      	add	r3, r1
 800498e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004992:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t27.re = -t297.re;
 8004996:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800499a:	ed93 7b00 	vldr	d7, [r3]
 800499e:	eeb1 7b47 	vneg.f64	d7, d7
 80049a2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049a6:	ed83 7b00 	vstr	d7, [r3]
  t27.im = -theta3;
 80049aa:	4b91      	ldr	r3, [pc, #580]	; (8004bf0 <G_q+0x28d8>)
 80049ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80049b0:	443a      	add	r2, r7
 80049b2:	4413      	add	r3, r2
 80049b4:	ed93 7b00 	vldr	d7, [r3]
 80049b8:	eeb1 7b47 	vneg.f64	d7, d7
 80049bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80049c0:	ed83 7b02 	vstr	d7, [r3, #8]
  t17.re = t297.re;
 80049c4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049cc:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80049d0:	e9c2 3400 	strd	r3, r4, [r2]
  t17.im = theta3;
 80049d4:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80049d8:	4b85      	ldr	r3, [pc, #532]	; (8004bf0 <G_q+0x28d8>)
 80049da:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80049de:	4439      	add	r1, r7
 80049e0:	440b      	add	r3, r1
 80049e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049e6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t16.re = -t297.re;
 80049ea:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049ee:	ed93 7b00 	vldr	d7, [r3]
 80049f2:	eeb1 7b47 	vneg.f64	d7, d7
 80049f6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80049fa:	ed83 7b00 	vstr	d7, [r3]
  t16.im = -theta3;
 80049fe:	4b7c      	ldr	r3, [pc, #496]	; (8004bf0 <G_q+0x28d8>)
 8004a00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a04:	443a      	add	r2, r7
 8004a06:	4413      	add	r3, r2
 8004a08:	ed93 7b00 	vldr	d7, [r3]
 8004a0c:	eeb1 7b47 	vneg.f64	d7, d7
 8004a10:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004a14:	ed83 7b02 	vstr	d7, [r3, #8]
  t13.re = t297.re;
 8004a18:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a20:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004a24:	e9c2 3400 	strd	r3, r4, [r2]
  t13.im = theta3;
 8004a28:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004a2c:	4b70      	ldr	r3, [pc, #448]	; (8004bf0 <G_q+0x28d8>)
 8004a2e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a32:	4439      	add	r1, r7
 8004a34:	440b      	add	r3, r1
 8004a36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a3a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t12.re = -t297.re;
 8004a3e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a42:	ed93 7b00 	vldr	d7, [r3]
 8004a46:	eeb1 7b47 	vneg.f64	d7, d7
 8004a4a:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004a4e:	ed83 7b00 	vstr	d7, [r3]
  t12.im = -theta3;
 8004a52:	4b67      	ldr	r3, [pc, #412]	; (8004bf0 <G_q+0x28d8>)
 8004a54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a58:	443a      	add	r2, r7
 8004a5a:	4413      	add	r3, r2
 8004a5c:	ed93 7b00 	vldr	d7, [r3]
 8004a60:	eeb1 7b47 	vneg.f64	d7, d7
 8004a64:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004a68:	ed83 7b02 	vstr	d7, [r3, #8]
  t9.re = t297.re;
 8004a6c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a70:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004a74:	4b5f      	ldr	r3, [pc, #380]	; (8004bf4 <G_q+0x28dc>)
 8004a76:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004a7a:	4438      	add	r0, r7
 8004a7c:	4403      	add	r3, r0
 8004a7e:	e9c3 1200 	strd	r1, r2, [r3]
  t9.im = theta3;
 8004a82:	4b5c      	ldr	r3, [pc, #368]	; (8004bf4 <G_q+0x28dc>)
 8004a84:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a88:	443a      	add	r2, r7
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4a58      	ldr	r2, [pc, #352]	; (8004bf0 <G_q+0x28d8>)
 8004a8e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a92:	4439      	add	r1, r7
 8004a94:	440a      	add	r2, r1
 8004a96:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004a9a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t8.re = -t297.re;
 8004a9e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004aa2:	ed93 7b00 	vldr	d7, [r3]
 8004aa6:	eeb1 7b47 	vneg.f64	d7, d7
 8004aaa:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004aae:	ed83 7b00 	vstr	d7, [r3]
  t8.im = -theta3;
 8004ab2:	4b4f      	ldr	r3, [pc, #316]	; (8004bf0 <G_q+0x28d8>)
 8004ab4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ab8:	443a      	add	r2, r7
 8004aba:	4413      	add	r3, r2
 8004abc:	ed93 7b00 	vldr	d7, [r3]
 8004ac0:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004ac8:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t8);
 8004acc:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f00d fd2d 	bl	8012530 <b_exp>
  t285.re = theta4 * 0.0;
 8004ad6:	f107 0310 	add.w	r3, r7, #16
 8004ada:	ed93 7b00 	vldr	d7, [r3]
 8004ade:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004be8 <G_q+0x28d0>
 8004ae2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004ae6:	4b44      	ldr	r3, [pc, #272]	; (8004bf8 <G_q+0x28e0>)
 8004ae8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004aec:	443a      	add	r2, r7
 8004aee:	4413      	add	r3, r2
 8004af0:	ed83 7b00 	vstr	d7, [r3]
  t285.im = theta4;
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <G_q+0x28e0>)
 8004af6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004afa:	443a      	add	r2, r7
 8004afc:	4413      	add	r3, r2
 8004afe:	f107 0210 	add.w	r2, r7, #16
 8004b02:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004b06:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t284.re = -t285.re;
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	; (8004bf8 <G_q+0x28e0>)
 8004b0c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b10:	443a      	add	r2, r7
 8004b12:	4413      	add	r3, r2
 8004b14:	ed93 7b00 	vldr	d7, [r3]
 8004b18:	eeb1 7b47 	vneg.f64	d7, d7
 8004b1c:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004b20:	ed83 7b00 	vstr	d7, [r3]
  t284.im = -theta4;
 8004b24:	f107 0310 	add.w	r3, r7, #16
 8004b28:	ed93 7b00 	vldr	d7, [r3]
 8004b2c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b30:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004b34:	ed83 7b02 	vstr	d7, [r3, #8]
  t279.re = t285.re;
 8004b38:	4b2f      	ldr	r3, [pc, #188]	; (8004bf8 <G_q+0x28e0>)
 8004b3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b3e:	443a      	add	r2, r7
 8004b40:	4413      	add	r3, r2
 8004b42:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004b46:	4b2d      	ldr	r3, [pc, #180]	; (8004bfc <G_q+0x28e4>)
 8004b48:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004b4c:	4438      	add	r0, r7
 8004b4e:	4403      	add	r3, r0
 8004b50:	e9c3 1200 	strd	r1, r2, [r3]
  t279.im = theta4;
 8004b54:	4b29      	ldr	r3, [pc, #164]	; (8004bfc <G_q+0x28e4>)
 8004b56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b5a:	443a      	add	r2, r7
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f107 0210 	add.w	r2, r7, #16
 8004b62:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004b66:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t278.re = -t285.re;
 8004b6a:	4b23      	ldr	r3, [pc, #140]	; (8004bf8 <G_q+0x28e0>)
 8004b6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b70:	443a      	add	r2, r7
 8004b72:	4413      	add	r3, r2
 8004b74:	ed93 7b00 	vldr	d7, [r3]
 8004b78:	eeb1 7b47 	vneg.f64	d7, d7
 8004b7c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b80:	ed83 7b00 	vstr	d7, [r3]
  t278.im = -theta4;
 8004b84:	f107 0310 	add.w	r3, r7, #16
 8004b88:	ed93 7b00 	vldr	d7, [r3]
 8004b8c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b90:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004b94:	ed83 7b02 	vstr	d7, [r3, #8]
  t255.re = t285.re;
 8004b98:	4b17      	ldr	r3, [pc, #92]	; (8004bf8 <G_q+0x28e0>)
 8004b9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b9e:	443a      	add	r2, r7
 8004ba0:	4413      	add	r3, r2
 8004ba2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004ba6:	4b16      	ldr	r3, [pc, #88]	; (8004c00 <G_q+0x28e8>)
 8004ba8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004bac:	4438      	add	r0, r7
 8004bae:	4403      	add	r3, r0
 8004bb0:	e9c3 1200 	strd	r1, r2, [r3]
  t255.im = theta4;
 8004bb4:	4b12      	ldr	r3, [pc, #72]	; (8004c00 <G_q+0x28e8>)
 8004bb6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bba:	443a      	add	r2, r7
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f107 0210 	add.w	r2, r7, #16
 8004bc2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004bc6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t254.re = -t285.re;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <G_q+0x28e0>)
 8004bcc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bd0:	443a      	add	r2, r7
 8004bd2:	4413      	add	r3, r2
 8004bd4:	ed93 7b00 	vldr	d7, [r3]
 8004bd8:	eeb1 7b47 	vneg.f64	d7, d7
 8004bdc:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004be0:	ed83 7b00 	vstr	d7, [r3]
 8004be4:	e00e      	b.n	8004c04 <G_q+0x28ec>
 8004be6:	bf00      	nop
	...
 8004bf0:	ffffec48 	.word	0xffffec48
 8004bf4:	ffffeff0 	.word	0xffffeff0
 8004bf8:	ffffefd0 	.word	0xffffefd0
 8004bfc:	ffffefb0 	.word	0xffffefb0
 8004c00:	ffffef90 	.word	0xffffef90
  t254.im = -theta4;
 8004c04:	f107 0310 	add.w	r3, r7, #16
 8004c08:	ed93 7b00 	vldr	d7, [r3]
 8004c0c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c10:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004c14:	ed83 7b02 	vstr	d7, [r3, #8]
  t243.re = t285.re;
 8004c18:	4bbd      	ldr	r3, [pc, #756]	; (8004f10 <G_q+0x2bf8>)
 8004c1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c1e:	443a      	add	r2, r7
 8004c20:	4413      	add	r3, r2
 8004c22:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004c26:	4bbb      	ldr	r3, [pc, #748]	; (8004f14 <G_q+0x2bfc>)
 8004c28:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004c2c:	4438      	add	r0, r7
 8004c2e:	4403      	add	r3, r0
 8004c30:	e9c3 1200 	strd	r1, r2, [r3]
  t243.im = theta4;
 8004c34:	4bb7      	ldr	r3, [pc, #732]	; (8004f14 <G_q+0x2bfc>)
 8004c36:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c3a:	443a      	add	r2, r7
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f107 0210 	add.w	r2, r7, #16
 8004c42:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004c46:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t242.re = -t285.re;
 8004c4a:	4bb1      	ldr	r3, [pc, #708]	; (8004f10 <G_q+0x2bf8>)
 8004c4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c50:	443a      	add	r2, r7
 8004c52:	4413      	add	r3, r2
 8004c54:	ed93 7b00 	vldr	d7, [r3]
 8004c58:	eeb1 7b47 	vneg.f64	d7, d7
 8004c5c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004c60:	ed83 7b00 	vstr	d7, [r3]
  t242.im = -theta4;
 8004c64:	f107 0310 	add.w	r3, r7, #16
 8004c68:	ed93 7b00 	vldr	d7, [r3]
 8004c6c:	eeb1 7b47 	vneg.f64	d7, d7
 8004c70:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004c74:	ed83 7b02 	vstr	d7, [r3, #8]
  t231.re = t285.re;
 8004c78:	4ba5      	ldr	r3, [pc, #660]	; (8004f10 <G_q+0x2bf8>)
 8004c7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c7e:	443a      	add	r2, r7
 8004c80:	4413      	add	r3, r2
 8004c82:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004c86:	4ba4      	ldr	r3, [pc, #656]	; (8004f18 <G_q+0x2c00>)
 8004c88:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004c8c:	4438      	add	r0, r7
 8004c8e:	4403      	add	r3, r0
 8004c90:	e9c3 1200 	strd	r1, r2, [r3]
  t231.im = theta4;
 8004c94:	4ba0      	ldr	r3, [pc, #640]	; (8004f18 <G_q+0x2c00>)
 8004c96:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c9a:	443a      	add	r2, r7
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f107 0210 	add.w	r2, r7, #16
 8004ca2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004ca6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t230.re = -t285.re;
 8004caa:	4b99      	ldr	r3, [pc, #612]	; (8004f10 <G_q+0x2bf8>)
 8004cac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cb0:	443a      	add	r2, r7
 8004cb2:	4413      	add	r3, r2
 8004cb4:	ed93 7b00 	vldr	d7, [r3]
 8004cb8:	eeb1 7b47 	vneg.f64	d7, d7
 8004cbc:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004cc0:	ed83 7b00 	vstr	d7, [r3]
  t230.im = -theta4;
 8004cc4:	f107 0310 	add.w	r3, r7, #16
 8004cc8:	ed93 7b00 	vldr	d7, [r3]
 8004ccc:	eeb1 7b47 	vneg.f64	d7, d7
 8004cd0:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004cd4:	ed83 7b02 	vstr	d7, [r3, #8]
  t229.re = t285.re;
 8004cd8:	4b8d      	ldr	r3, [pc, #564]	; (8004f10 <G_q+0x2bf8>)
 8004cda:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cde:	443a      	add	r2, r7
 8004ce0:	4413      	add	r3, r2
 8004ce2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004ce6:	4b8d      	ldr	r3, [pc, #564]	; (8004f1c <G_q+0x2c04>)
 8004ce8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004cec:	4438      	add	r0, r7
 8004cee:	4403      	add	r3, r0
 8004cf0:	e9c3 1200 	strd	r1, r2, [r3]
  t229.im = theta4;
 8004cf4:	4b89      	ldr	r3, [pc, #548]	; (8004f1c <G_q+0x2c04>)
 8004cf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cfa:	443a      	add	r2, r7
 8004cfc:	4413      	add	r3, r2
 8004cfe:	f107 0210 	add.w	r2, r7, #16
 8004d02:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004d06:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t228.re = -t285.re;
 8004d0a:	4b81      	ldr	r3, [pc, #516]	; (8004f10 <G_q+0x2bf8>)
 8004d0c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d10:	443a      	add	r2, r7
 8004d12:	4413      	add	r3, r2
 8004d14:	ed93 7b00 	vldr	d7, [r3]
 8004d18:	eeb1 7b47 	vneg.f64	d7, d7
 8004d1c:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004d20:	ed83 7b00 	vstr	d7, [r3]
  t228.im = -theta4;
 8004d24:	f107 0310 	add.w	r3, r7, #16
 8004d28:	ed93 7b00 	vldr	d7, [r3]
 8004d2c:	eeb1 7b47 	vneg.f64	d7, d7
 8004d30:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004d34:	ed83 7b02 	vstr	d7, [r3, #8]
  t209.re = t285.re;
 8004d38:	4b75      	ldr	r3, [pc, #468]	; (8004f10 <G_q+0x2bf8>)
 8004d3a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d3e:	443a      	add	r2, r7
 8004d40:	4413      	add	r3, r2
 8004d42:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004d46:	4b76      	ldr	r3, [pc, #472]	; (8004f20 <G_q+0x2c08>)
 8004d48:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004d4c:	4438      	add	r0, r7
 8004d4e:	4403      	add	r3, r0
 8004d50:	e9c3 1200 	strd	r1, r2, [r3]
  t209.im = theta4;
 8004d54:	4b72      	ldr	r3, [pc, #456]	; (8004f20 <G_q+0x2c08>)
 8004d56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d5a:	443a      	add	r2, r7
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f107 0210 	add.w	r2, r7, #16
 8004d62:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004d66:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t208.re = -t285.re;
 8004d6a:	4b69      	ldr	r3, [pc, #420]	; (8004f10 <G_q+0x2bf8>)
 8004d6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d70:	443a      	add	r2, r7
 8004d72:	4413      	add	r3, r2
 8004d74:	ed93 7b00 	vldr	d7, [r3]
 8004d78:	eeb1 7b47 	vneg.f64	d7, d7
 8004d7c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004d80:	ed83 7b00 	vstr	d7, [r3]
  t208.im = -theta4;
 8004d84:	f107 0310 	add.w	r3, r7, #16
 8004d88:	ed93 7b00 	vldr	d7, [r3]
 8004d8c:	eeb1 7b47 	vneg.f64	d7, d7
 8004d90:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8004d94:	ed83 7b02 	vstr	d7, [r3, #8]
  t197.re = t285.re;
 8004d98:	4b5d      	ldr	r3, [pc, #372]	; (8004f10 <G_q+0x2bf8>)
 8004d9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d9e:	443a      	add	r2, r7
 8004da0:	4413      	add	r3, r2
 8004da2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004da6:	4b5f      	ldr	r3, [pc, #380]	; (8004f24 <G_q+0x2c0c>)
 8004da8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004dac:	4438      	add	r0, r7
 8004dae:	4403      	add	r3, r0
 8004db0:	e9c3 1200 	strd	r1, r2, [r3]
  t197.im = theta4;
 8004db4:	4b5b      	ldr	r3, [pc, #364]	; (8004f24 <G_q+0x2c0c>)
 8004db6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dba:	443a      	add	r2, r7
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f107 0210 	add.w	r2, r7, #16
 8004dc2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004dc6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t196.re = -t285.re;
 8004dca:	4b51      	ldr	r3, [pc, #324]	; (8004f10 <G_q+0x2bf8>)
 8004dcc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dd0:	443a      	add	r2, r7
 8004dd2:	4413      	add	r3, r2
 8004dd4:	ed93 7b00 	vldr	d7, [r3]
 8004dd8:	eeb1 7b47 	vneg.f64	d7, d7
 8004ddc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004de0:	ed83 7b00 	vstr	d7, [r3]
  t196.im = -theta4;
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	ed93 7b00 	vldr	d7, [r3]
 8004dec:	eeb1 7b47 	vneg.f64	d7, d7
 8004df0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8004df4:	ed83 7b02 	vstr	d7, [r3, #8]
  t185.re = t285.re;
 8004df8:	4b45      	ldr	r3, [pc, #276]	; (8004f10 <G_q+0x2bf8>)
 8004dfa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dfe:	443a      	add	r2, r7
 8004e00:	4413      	add	r3, r2
 8004e02:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004e06:	4b48      	ldr	r3, [pc, #288]	; (8004f28 <G_q+0x2c10>)
 8004e08:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004e0c:	4438      	add	r0, r7
 8004e0e:	4403      	add	r3, r0
 8004e10:	e9c3 1200 	strd	r1, r2, [r3]
  t185.im = theta4;
 8004e14:	4b44      	ldr	r3, [pc, #272]	; (8004f28 <G_q+0x2c10>)
 8004e16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e1a:	443a      	add	r2, r7
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f107 0210 	add.w	r2, r7, #16
 8004e22:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e26:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t184.re = -t285.re;
 8004e2a:	4b39      	ldr	r3, [pc, #228]	; (8004f10 <G_q+0x2bf8>)
 8004e2c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e30:	443a      	add	r2, r7
 8004e32:	4413      	add	r3, r2
 8004e34:	ed93 7b00 	vldr	d7, [r3]
 8004e38:	eeb1 7b47 	vneg.f64	d7, d7
 8004e3c:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004e40:	ed83 7b00 	vstr	d7, [r3]
  t184.im = -theta4;
 8004e44:	f107 0310 	add.w	r3, r7, #16
 8004e48:	ed93 7b00 	vldr	d7, [r3]
 8004e4c:	eeb1 7b47 	vneg.f64	d7, d7
 8004e50:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8004e54:	ed83 7b02 	vstr	d7, [r3, #8]
  t173.re = t285.re;
 8004e58:	4b2d      	ldr	r3, [pc, #180]	; (8004f10 <G_q+0x2bf8>)
 8004e5a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e5e:	443a      	add	r2, r7
 8004e60:	4413      	add	r3, r2
 8004e62:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004e66:	4b31      	ldr	r3, [pc, #196]	; (8004f2c <G_q+0x2c14>)
 8004e68:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004e6c:	4438      	add	r0, r7
 8004e6e:	4403      	add	r3, r0
 8004e70:	e9c3 1200 	strd	r1, r2, [r3]
  t173.im = theta4;
 8004e74:	4b2d      	ldr	r3, [pc, #180]	; (8004f2c <G_q+0x2c14>)
 8004e76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e7a:	443a      	add	r2, r7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f107 0210 	add.w	r2, r7, #16
 8004e82:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e86:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t172.re = -t285.re;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	; (8004f10 <G_q+0x2bf8>)
 8004e8c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e90:	443a      	add	r2, r7
 8004e92:	4413      	add	r3, r2
 8004e94:	ed93 7b00 	vldr	d7, [r3]
 8004e98:	eeb1 7b47 	vneg.f64	d7, d7
 8004e9c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004ea0:	ed83 7b00 	vstr	d7, [r3]
  t172.im = -theta4;
 8004ea4:	f107 0310 	add.w	r3, r7, #16
 8004ea8:	ed93 7b00 	vldr	d7, [r3]
 8004eac:	eeb1 7b47 	vneg.f64	d7, d7
 8004eb0:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8004eb4:	ed83 7b02 	vstr	d7, [r3, #8]
  t159.re = t285.re;
 8004eb8:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <G_q+0x2bf8>)
 8004eba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ebe:	443a      	add	r2, r7
 8004ec0:	4413      	add	r3, r2
 8004ec2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004ec6:	4b1a      	ldr	r3, [pc, #104]	; (8004f30 <G_q+0x2c18>)
 8004ec8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004ecc:	4438      	add	r0, r7
 8004ece:	4403      	add	r3, r0
 8004ed0:	e9c3 1200 	strd	r1, r2, [r3]
  t159.im = theta4;
 8004ed4:	4b16      	ldr	r3, [pc, #88]	; (8004f30 <G_q+0x2c18>)
 8004ed6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004eda:	443a      	add	r2, r7
 8004edc:	4413      	add	r3, r2
 8004ede:	f107 0210 	add.w	r2, r7, #16
 8004ee2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004ee6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t158.re = -t285.re;
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <G_q+0x2bf8>)
 8004eec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ef0:	443a      	add	r2, r7
 8004ef2:	4413      	add	r3, r2
 8004ef4:	ed93 7b00 	vldr	d7, [r3]
 8004ef8:	eeb1 7b47 	vneg.f64	d7, d7
 8004efc:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f00:	ed83 7b00 	vstr	d7, [r3]
  t158.im = -theta4;
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	ed93 7b00 	vldr	d7, [r3]
 8004f0c:	e012      	b.n	8004f34 <G_q+0x2c1c>
 8004f0e:	bf00      	nop
 8004f10:	ffffefd0 	.word	0xffffefd0
 8004f14:	ffffef70 	.word	0xffffef70
 8004f18:	ffffef50 	.word	0xffffef50
 8004f1c:	ffffef30 	.word	0xffffef30
 8004f20:	ffffef10 	.word	0xffffef10
 8004f24:	ffffeef0 	.word	0xffffeef0
 8004f28:	ffffeed0 	.word	0xffffeed0
 8004f2c:	ffffeeb0 	.word	0xffffeeb0
 8004f30:	ffffee90 	.word	0xffffee90
 8004f34:	eeb1 7b47 	vneg.f64	d7, d7
 8004f38:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8004f3c:	ed83 7b02 	vstr	d7, [r3, #8]
  t153.re = t285.re;
 8004f40:	4bbd      	ldr	r3, [pc, #756]	; (8005238 <G_q+0x2f20>)
 8004f42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f46:	443a      	add	r2, r7
 8004f48:	4413      	add	r3, r2
 8004f4a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004f4e:	4bbb      	ldr	r3, [pc, #748]	; (800523c <G_q+0x2f24>)
 8004f50:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004f54:	4438      	add	r0, r7
 8004f56:	4403      	add	r3, r0
 8004f58:	e9c3 1200 	strd	r1, r2, [r3]
  t153.im = theta4;
 8004f5c:	4bb7      	ldr	r3, [pc, #732]	; (800523c <G_q+0x2f24>)
 8004f5e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f62:	443a      	add	r2, r7
 8004f64:	4413      	add	r3, r2
 8004f66:	f107 0210 	add.w	r2, r7, #16
 8004f6a:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004f6e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t152.re = -t285.re;
 8004f72:	4bb1      	ldr	r3, [pc, #708]	; (8005238 <G_q+0x2f20>)
 8004f74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f78:	443a      	add	r2, r7
 8004f7a:	4413      	add	r3, r2
 8004f7c:	ed93 7b00 	vldr	d7, [r3]
 8004f80:	eeb1 7b47 	vneg.f64	d7, d7
 8004f84:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004f88:	ed83 7b00 	vstr	d7, [r3]
  t152.im = -theta4;
 8004f8c:	f107 0310 	add.w	r3, r7, #16
 8004f90:	ed93 7b00 	vldr	d7, [r3]
 8004f94:	eeb1 7b47 	vneg.f64	d7, d7
 8004f98:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8004f9c:	ed83 7b02 	vstr	d7, [r3, #8]
  t135.re = t285.re;
 8004fa0:	4ba5      	ldr	r3, [pc, #660]	; (8005238 <G_q+0x2f20>)
 8004fa2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fa6:	443a      	add	r2, r7
 8004fa8:	4413      	add	r3, r2
 8004faa:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004fae:	4ba4      	ldr	r3, [pc, #656]	; (8005240 <G_q+0x2f28>)
 8004fb0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004fb4:	4438      	add	r0, r7
 8004fb6:	4403      	add	r3, r0
 8004fb8:	e9c3 1200 	strd	r1, r2, [r3]
  t135.im = theta4;
 8004fbc:	4ba0      	ldr	r3, [pc, #640]	; (8005240 <G_q+0x2f28>)
 8004fbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fc2:	443a      	add	r2, r7
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f107 0210 	add.w	r2, r7, #16
 8004fca:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004fce:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t134.re = -t285.re;
 8004fd2:	4b99      	ldr	r3, [pc, #612]	; (8005238 <G_q+0x2f20>)
 8004fd4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fd8:	443a      	add	r2, r7
 8004fda:	4413      	add	r3, r2
 8004fdc:	ed93 7b00 	vldr	d7, [r3]
 8004fe0:	eeb1 7b47 	vneg.f64	d7, d7
 8004fe4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004fe8:	ed83 7b00 	vstr	d7, [r3]
  t134.im = -theta4;
 8004fec:	f107 0310 	add.w	r3, r7, #16
 8004ff0:	ed93 7b00 	vldr	d7, [r3]
 8004ff4:	eeb1 7b47 	vneg.f64	d7, d7
 8004ff8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8004ffc:	ed83 7b02 	vstr	d7, [r3, #8]
  t123.re = t285.re;
 8005000:	4b8d      	ldr	r3, [pc, #564]	; (8005238 <G_q+0x2f20>)
 8005002:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005006:	443a      	add	r2, r7
 8005008:	4413      	add	r3, r2
 800500a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800500e:	4b8d      	ldr	r3, [pc, #564]	; (8005244 <G_q+0x2f2c>)
 8005010:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005014:	4438      	add	r0, r7
 8005016:	4403      	add	r3, r0
 8005018:	e9c3 1200 	strd	r1, r2, [r3]
  t123.im = theta4;
 800501c:	4b89      	ldr	r3, [pc, #548]	; (8005244 <G_q+0x2f2c>)
 800501e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005022:	443a      	add	r2, r7
 8005024:	4413      	add	r3, r2
 8005026:	f107 0210 	add.w	r2, r7, #16
 800502a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800502e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t122.re = -t285.re;
 8005032:	4b81      	ldr	r3, [pc, #516]	; (8005238 <G_q+0x2f20>)
 8005034:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005038:	443a      	add	r2, r7
 800503a:	4413      	add	r3, r2
 800503c:	ed93 7b00 	vldr	d7, [r3]
 8005040:	eeb1 7b47 	vneg.f64	d7, d7
 8005044:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005048:	ed83 7b00 	vstr	d7, [r3]
  t122.im = -theta4;
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	ed93 7b00 	vldr	d7, [r3]
 8005054:	eeb1 7b47 	vneg.f64	d7, d7
 8005058:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800505c:	ed83 7b02 	vstr	d7, [r3, #8]
  t103.re = t285.re;
 8005060:	4b75      	ldr	r3, [pc, #468]	; (8005238 <G_q+0x2f20>)
 8005062:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005066:	443a      	add	r2, r7
 8005068:	4413      	add	r3, r2
 800506a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800506e:	4b76      	ldr	r3, [pc, #472]	; (8005248 <G_q+0x2f30>)
 8005070:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005074:	4438      	add	r0, r7
 8005076:	4403      	add	r3, r0
 8005078:	e9c3 1200 	strd	r1, r2, [r3]
  t103.im = theta4;
 800507c:	4b72      	ldr	r3, [pc, #456]	; (8005248 <G_q+0x2f30>)
 800507e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005082:	443a      	add	r2, r7
 8005084:	4413      	add	r3, r2
 8005086:	f107 0210 	add.w	r2, r7, #16
 800508a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800508e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t102.re = -t285.re;
 8005092:	4b69      	ldr	r3, [pc, #420]	; (8005238 <G_q+0x2f20>)
 8005094:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005098:	443a      	add	r2, r7
 800509a:	4413      	add	r3, r2
 800509c:	ed93 7b00 	vldr	d7, [r3]
 80050a0:	eeb1 7b47 	vneg.f64	d7, d7
 80050a4:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80050a8:	ed83 7b00 	vstr	d7, [r3]
  t102.im = -theta4;
 80050ac:	f107 0310 	add.w	r3, r7, #16
 80050b0:	ed93 7b00 	vldr	d7, [r3]
 80050b4:	eeb1 7b47 	vneg.f64	d7, d7
 80050b8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 80050bc:	ed83 7b02 	vstr	d7, [r3, #8]
  t101.re = t285.re;
 80050c0:	4b5d      	ldr	r3, [pc, #372]	; (8005238 <G_q+0x2f20>)
 80050c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050c6:	443a      	add	r2, r7
 80050c8:	4413      	add	r3, r2
 80050ca:	e9d3 1200 	ldrd	r1, r2, [r3]
 80050ce:	4b5f      	ldr	r3, [pc, #380]	; (800524c <G_q+0x2f34>)
 80050d0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80050d4:	4438      	add	r0, r7
 80050d6:	4403      	add	r3, r0
 80050d8:	e9c3 1200 	strd	r1, r2, [r3]
  t101.im = theta4;
 80050dc:	4b5b      	ldr	r3, [pc, #364]	; (800524c <G_q+0x2f34>)
 80050de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050e2:	443a      	add	r2, r7
 80050e4:	4413      	add	r3, r2
 80050e6:	f107 0210 	add.w	r2, r7, #16
 80050ea:	e9d2 1200 	ldrd	r1, r2, [r2]
 80050ee:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t100.re = -t285.re;
 80050f2:	4b51      	ldr	r3, [pc, #324]	; (8005238 <G_q+0x2f20>)
 80050f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050f8:	443a      	add	r2, r7
 80050fa:	4413      	add	r3, r2
 80050fc:	ed93 7b00 	vldr	d7, [r3]
 8005100:	eeb1 7b47 	vneg.f64	d7, d7
 8005104:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005108:	ed83 7b00 	vstr	d7, [r3]
  t100.im = -theta4;
 800510c:	f107 0310 	add.w	r3, r7, #16
 8005110:	ed93 7b00 	vldr	d7, [r3]
 8005114:	eeb1 7b47 	vneg.f64	d7, d7
 8005118:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800511c:	ed83 7b02 	vstr	d7, [r3, #8]
  t87.re = t285.re;
 8005120:	4b45      	ldr	r3, [pc, #276]	; (8005238 <G_q+0x2f20>)
 8005122:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005126:	443a      	add	r2, r7
 8005128:	4413      	add	r3, r2
 800512a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800512e:	4b48      	ldr	r3, [pc, #288]	; (8005250 <G_q+0x2f38>)
 8005130:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005134:	4438      	add	r0, r7
 8005136:	4403      	add	r3, r0
 8005138:	e9c3 1200 	strd	r1, r2, [r3]
  t87.im = theta4;
 800513c:	4b44      	ldr	r3, [pc, #272]	; (8005250 <G_q+0x2f38>)
 800513e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005142:	443a      	add	r2, r7
 8005144:	4413      	add	r3, r2
 8005146:	f107 0210 	add.w	r2, r7, #16
 800514a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800514e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t86.re = -t285.re;
 8005152:	4b39      	ldr	r3, [pc, #228]	; (8005238 <G_q+0x2f20>)
 8005154:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005158:	443a      	add	r2, r7
 800515a:	4413      	add	r3, r2
 800515c:	ed93 7b00 	vldr	d7, [r3]
 8005160:	eeb1 7b47 	vneg.f64	d7, d7
 8005164:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005168:	ed83 7b00 	vstr	d7, [r3]
  t86.im = -theta4;
 800516c:	f107 0310 	add.w	r3, r7, #16
 8005170:	ed93 7b00 	vldr	d7, [r3]
 8005174:	eeb1 7b47 	vneg.f64	d7, d7
 8005178:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800517c:	ed83 7b02 	vstr	d7, [r3, #8]
  t59.re = t285.re;
 8005180:	4b2d      	ldr	r3, [pc, #180]	; (8005238 <G_q+0x2f20>)
 8005182:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005186:	443a      	add	r2, r7
 8005188:	4413      	add	r3, r2
 800518a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800518e:	4b31      	ldr	r3, [pc, #196]	; (8005254 <G_q+0x2f3c>)
 8005190:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005194:	4438      	add	r0, r7
 8005196:	4403      	add	r3, r0
 8005198:	e9c3 1200 	strd	r1, r2, [r3]
  t59.im = theta4;
 800519c:	4b2d      	ldr	r3, [pc, #180]	; (8005254 <G_q+0x2f3c>)
 800519e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051a2:	443a      	add	r2, r7
 80051a4:	4413      	add	r3, r2
 80051a6:	f107 0210 	add.w	r2, r7, #16
 80051aa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80051ae:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t58.re = -t285.re;
 80051b2:	4b21      	ldr	r3, [pc, #132]	; (8005238 <G_q+0x2f20>)
 80051b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051b8:	443a      	add	r2, r7
 80051ba:	4413      	add	r3, r2
 80051bc:	ed93 7b00 	vldr	d7, [r3]
 80051c0:	eeb1 7b47 	vneg.f64	d7, d7
 80051c4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80051c8:	ed83 7b00 	vstr	d7, [r3]
  t58.im = -theta4;
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	ed93 7b00 	vldr	d7, [r3]
 80051d4:	eeb1 7b47 	vneg.f64	d7, d7
 80051d8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80051dc:	ed83 7b02 	vstr	d7, [r3, #8]
  t42.re = t285.re;
 80051e0:	4b15      	ldr	r3, [pc, #84]	; (8005238 <G_q+0x2f20>)
 80051e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051e6:	443a      	add	r2, r7
 80051e8:	4413      	add	r3, r2
 80051ea:	e9d3 1200 	ldrd	r1, r2, [r3]
 80051ee:	4b1a      	ldr	r3, [pc, #104]	; (8005258 <G_q+0x2f40>)
 80051f0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80051f4:	4438      	add	r0, r7
 80051f6:	4403      	add	r3, r0
 80051f8:	e9c3 1200 	strd	r1, r2, [r3]
  t42.im = theta4;
 80051fc:	4b16      	ldr	r3, [pc, #88]	; (8005258 <G_q+0x2f40>)
 80051fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005202:	443a      	add	r2, r7
 8005204:	4413      	add	r3, r2
 8005206:	f107 0210 	add.w	r2, r7, #16
 800520a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800520e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t41.re = -t285.re;
 8005212:	4b09      	ldr	r3, [pc, #36]	; (8005238 <G_q+0x2f20>)
 8005214:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005218:	443a      	add	r2, r7
 800521a:	4413      	add	r3, r2
 800521c:	ed93 7b00 	vldr	d7, [r3]
 8005220:	eeb1 7b47 	vneg.f64	d7, d7
 8005224:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005228:	ed83 7b00 	vstr	d7, [r3]
  t41.im = -theta4;
 800522c:	f107 0310 	add.w	r3, r7, #16
 8005230:	ed93 7b00 	vldr	d7, [r3]
 8005234:	e012      	b.n	800525c <G_q+0x2f44>
 8005236:	bf00      	nop
 8005238:	ffffefd0 	.word	0xffffefd0
 800523c:	ffffee70 	.word	0xffffee70
 8005240:	ffffee50 	.word	0xffffee50
 8005244:	ffffee30 	.word	0xffffee30
 8005248:	ffffee10 	.word	0xffffee10
 800524c:	ffffedf0 	.word	0xffffedf0
 8005250:	ffffedd0 	.word	0xffffedd0
 8005254:	ffffedb0 	.word	0xffffedb0
 8005258:	ffffed90 	.word	0xffffed90
 800525c:	eeb1 7b47 	vneg.f64	d7, d7
 8005260:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005264:	ed83 7b02 	vstr	d7, [r3, #8]
  t22.re = t285.re;
 8005268:	4bbd      	ldr	r3, [pc, #756]	; (8005560 <G_q+0x3248>)
 800526a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800526e:	443a      	add	r2, r7
 8005270:	4413      	add	r3, r2
 8005272:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005276:	4bbb      	ldr	r3, [pc, #748]	; (8005564 <G_q+0x324c>)
 8005278:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800527c:	4438      	add	r0, r7
 800527e:	4403      	add	r3, r0
 8005280:	e9c3 1200 	strd	r1, r2, [r3]
  t22.im = theta4;
 8005284:	4bb7      	ldr	r3, [pc, #732]	; (8005564 <G_q+0x324c>)
 8005286:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800528a:	443a      	add	r2, r7
 800528c:	4413      	add	r3, r2
 800528e:	f107 0210 	add.w	r2, r7, #16
 8005292:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005296:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t21.re = -t285.re;
 800529a:	4bb1      	ldr	r3, [pc, #708]	; (8005560 <G_q+0x3248>)
 800529c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052a0:	443a      	add	r2, r7
 80052a2:	4413      	add	r3, r2
 80052a4:	ed93 7b00 	vldr	d7, [r3]
 80052a8:	eeb1 7b47 	vneg.f64	d7, d7
 80052ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b0:	ed83 7b00 	vstr	d7, [r3]
  t21.im = -theta4;
 80052b4:	f107 0310 	add.w	r3, r7, #16
 80052b8:	ed93 7b00 	vldr	d7, [r3]
 80052bc:	eeb1 7b47 	vneg.f64	d7, d7
 80052c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c4:	ed83 7b02 	vstr	d7, [r3, #8]
  t20.re = t285.re;
 80052c8:	4ba5      	ldr	r3, [pc, #660]	; (8005560 <G_q+0x3248>)
 80052ca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052ce:	443a      	add	r2, r7
 80052d0:	4413      	add	r3, r2
 80052d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052d6:	4ba4      	ldr	r3, [pc, #656]	; (8005568 <G_q+0x3250>)
 80052d8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80052dc:	4438      	add	r0, r7
 80052de:	4403      	add	r3, r0
 80052e0:	e9c3 1200 	strd	r1, r2, [r3]
  t20.im = theta4;
 80052e4:	4ba0      	ldr	r3, [pc, #640]	; (8005568 <G_q+0x3250>)
 80052e6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052ea:	443a      	add	r2, r7
 80052ec:	4413      	add	r3, r2
 80052ee:	f107 0210 	add.w	r2, r7, #16
 80052f2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80052f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t19.re = -t285.re;
 80052fa:	4b99      	ldr	r3, [pc, #612]	; (8005560 <G_q+0x3248>)
 80052fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005300:	443a      	add	r2, r7
 8005302:	4413      	add	r3, r2
 8005304:	ed93 7b00 	vldr	d7, [r3]
 8005308:	eeb1 7b47 	vneg.f64	d7, d7
 800530c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005310:	ed83 7b00 	vstr	d7, [r3]
  t19.im = -theta4;
 8005314:	f107 0310 	add.w	r3, r7, #16
 8005318:	ed93 7b00 	vldr	d7, [r3]
 800531c:	eeb1 7b47 	vneg.f64	d7, d7
 8005320:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8005324:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t19);
 8005328:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800532c:	4618      	mov	r0, r3
 800532e:	f00d f8ff 	bl	8012530 <b_exp>
  t267.re = theta5 * 0.0;
 8005332:	4b8e      	ldr	r3, [pc, #568]	; (800556c <G_q+0x3254>)
 8005334:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005338:	443a      	add	r2, r7
 800533a:	4413      	add	r3, r2
 800533c:	ed93 7b00 	vldr	d7, [r3]
 8005340:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005558 <G_q+0x3240>
 8005344:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005348:	4b89      	ldr	r3, [pc, #548]	; (8005570 <G_q+0x3258>)
 800534a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800534e:	443a      	add	r2, r7
 8005350:	4413      	add	r3, r2
 8005352:	ed83 7b00 	vstr	d7, [r3]
  t267.im = theta5;
 8005356:	4b86      	ldr	r3, [pc, #536]	; (8005570 <G_q+0x3258>)
 8005358:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800535c:	443a      	add	r2, r7
 800535e:	4413      	add	r3, r2
 8005360:	4a82      	ldr	r2, [pc, #520]	; (800556c <G_q+0x3254>)
 8005362:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005366:	4439      	add	r1, r7
 8005368:	440a      	add	r2, r1
 800536a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800536e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t266.re = -t267.re;
 8005372:	4b7f      	ldr	r3, [pc, #508]	; (8005570 <G_q+0x3258>)
 8005374:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005378:	443a      	add	r2, r7
 800537a:	4413      	add	r3, r2
 800537c:	ed93 7b00 	vldr	d7, [r3]
 8005380:	eeb1 7b47 	vneg.f64	d7, d7
 8005384:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005388:	ed83 7b00 	vstr	d7, [r3]
  t266.im = -theta5;
 800538c:	4b77      	ldr	r3, [pc, #476]	; (800556c <G_q+0x3254>)
 800538e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005392:	443a      	add	r2, r7
 8005394:	4413      	add	r3, r2
 8005396:	ed93 7b00 	vldr	d7, [r3]
 800539a:	eeb1 7b47 	vneg.f64	d7, d7
 800539e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80053a2:	ed83 7b02 	vstr	d7, [r3, #8]
  t265.re = t267.re;
 80053a6:	4b72      	ldr	r3, [pc, #456]	; (8005570 <G_q+0x3258>)
 80053a8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053ac:	443a      	add	r2, r7
 80053ae:	4413      	add	r3, r2
 80053b0:	e9d3 1200 	ldrd	r1, r2, [r3]
 80053b4:	4b6f      	ldr	r3, [pc, #444]	; (8005574 <G_q+0x325c>)
 80053b6:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80053ba:	4438      	add	r0, r7
 80053bc:	4403      	add	r3, r0
 80053be:	e9c3 1200 	strd	r1, r2, [r3]
  t265.im = theta5;
 80053c2:	4b6c      	ldr	r3, [pc, #432]	; (8005574 <G_q+0x325c>)
 80053c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053c8:	443a      	add	r2, r7
 80053ca:	4413      	add	r3, r2
 80053cc:	4a67      	ldr	r2, [pc, #412]	; (800556c <G_q+0x3254>)
 80053ce:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80053d2:	4439      	add	r1, r7
 80053d4:	440a      	add	r2, r1
 80053d6:	e9d2 1200 	ldrd	r1, r2, [r2]
 80053da:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t264.re = -t267.re;
 80053de:	4b64      	ldr	r3, [pc, #400]	; (8005570 <G_q+0x3258>)
 80053e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053e4:	443a      	add	r2, r7
 80053e6:	4413      	add	r3, r2
 80053e8:	ed93 7b00 	vldr	d7, [r3]
 80053ec:	eeb1 7b47 	vneg.f64	d7, d7
 80053f0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80053f4:	ed83 7b00 	vstr	d7, [r3]
  t264.im = -theta5;
 80053f8:	4b5c      	ldr	r3, [pc, #368]	; (800556c <G_q+0x3254>)
 80053fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053fe:	443a      	add	r2, r7
 8005400:	4413      	add	r3, r2
 8005402:	ed93 7b00 	vldr	d7, [r3]
 8005406:	eeb1 7b47 	vneg.f64	d7, d7
 800540a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800540e:	ed83 7b02 	vstr	d7, [r3, #8]
  t219.re = t267.re;
 8005412:	4b57      	ldr	r3, [pc, #348]	; (8005570 <G_q+0x3258>)
 8005414:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005418:	443a      	add	r2, r7
 800541a:	4413      	add	r3, r2
 800541c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005420:	4b55      	ldr	r3, [pc, #340]	; (8005578 <G_q+0x3260>)
 8005422:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005426:	4438      	add	r0, r7
 8005428:	4403      	add	r3, r0
 800542a:	e9c3 1200 	strd	r1, r2, [r3]
  t219.im = theta5;
 800542e:	4b52      	ldr	r3, [pc, #328]	; (8005578 <G_q+0x3260>)
 8005430:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005434:	443a      	add	r2, r7
 8005436:	4413      	add	r3, r2
 8005438:	4a4c      	ldr	r2, [pc, #304]	; (800556c <G_q+0x3254>)
 800543a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800543e:	4439      	add	r1, r7
 8005440:	440a      	add	r2, r1
 8005442:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005446:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t218.re = -t267.re;
 800544a:	4b49      	ldr	r3, [pc, #292]	; (8005570 <G_q+0x3258>)
 800544c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005450:	443a      	add	r2, r7
 8005452:	4413      	add	r3, r2
 8005454:	ed93 7b00 	vldr	d7, [r3]
 8005458:	eeb1 7b47 	vneg.f64	d7, d7
 800545c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005460:	ed83 7b00 	vstr	d7, [r3]
  t218.im = -theta5;
 8005464:	4b41      	ldr	r3, [pc, #260]	; (800556c <G_q+0x3254>)
 8005466:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800546a:	443a      	add	r2, r7
 800546c:	4413      	add	r3, r2
 800546e:	ed93 7b00 	vldr	d7, [r3]
 8005472:	eeb1 7b47 	vneg.f64	d7, d7
 8005476:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800547a:	ed83 7b02 	vstr	d7, [r3, #8]
  t195.re = t267.re;
 800547e:	4b3c      	ldr	r3, [pc, #240]	; (8005570 <G_q+0x3258>)
 8005480:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005484:	443a      	add	r2, r7
 8005486:	4413      	add	r3, r2
 8005488:	e9d3 1200 	ldrd	r1, r2, [r3]
 800548c:	4b3b      	ldr	r3, [pc, #236]	; (800557c <G_q+0x3264>)
 800548e:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005492:	4438      	add	r0, r7
 8005494:	4403      	add	r3, r0
 8005496:	e9c3 1200 	strd	r1, r2, [r3]
  t195.im = theta5;
 800549a:	4b38      	ldr	r3, [pc, #224]	; (800557c <G_q+0x3264>)
 800549c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054a0:	443a      	add	r2, r7
 80054a2:	4413      	add	r3, r2
 80054a4:	4a31      	ldr	r2, [pc, #196]	; (800556c <G_q+0x3254>)
 80054a6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80054aa:	4439      	add	r1, r7
 80054ac:	440a      	add	r2, r1
 80054ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80054b2:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t194.re = -t267.re;
 80054b6:	4b2e      	ldr	r3, [pc, #184]	; (8005570 <G_q+0x3258>)
 80054b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054bc:	443a      	add	r2, r7
 80054be:	4413      	add	r3, r2
 80054c0:	ed93 7b00 	vldr	d7, [r3]
 80054c4:	eeb1 7b47 	vneg.f64	d7, d7
 80054c8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054cc:	ed83 7b00 	vstr	d7, [r3]
  t194.im = -theta5;
 80054d0:	4b26      	ldr	r3, [pc, #152]	; (800556c <G_q+0x3254>)
 80054d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054d6:	443a      	add	r2, r7
 80054d8:	4413      	add	r3, r2
 80054da:	ed93 7b00 	vldr	d7, [r3]
 80054de:	eeb1 7b47 	vneg.f64	d7, d7
 80054e2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80054e6:	ed83 7b02 	vstr	d7, [r3, #8]
  t125.re = t267.re;
 80054ea:	4b21      	ldr	r3, [pc, #132]	; (8005570 <G_q+0x3258>)
 80054ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054f0:	443a      	add	r2, r7
 80054f2:	4413      	add	r3, r2
 80054f4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80054f8:	4b21      	ldr	r3, [pc, #132]	; (8005580 <G_q+0x3268>)
 80054fa:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80054fe:	4438      	add	r0, r7
 8005500:	4403      	add	r3, r0
 8005502:	e9c3 1200 	strd	r1, r2, [r3]
  t125.im = theta5;
 8005506:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <G_q+0x3268>)
 8005508:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800550c:	443a      	add	r2, r7
 800550e:	4413      	add	r3, r2
 8005510:	4a16      	ldr	r2, [pc, #88]	; (800556c <G_q+0x3254>)
 8005512:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005516:	4439      	add	r1, r7
 8005518:	440a      	add	r2, r1
 800551a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800551e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t124.re = -t267.re;
 8005522:	4b13      	ldr	r3, [pc, #76]	; (8005570 <G_q+0x3258>)
 8005524:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005528:	443a      	add	r2, r7
 800552a:	4413      	add	r3, r2
 800552c:	ed93 7b00 	vldr	d7, [r3]
 8005530:	eeb1 7b47 	vneg.f64	d7, d7
 8005534:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005538:	ed83 7b00 	vstr	d7, [r3]
  t124.im = -theta5;
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <G_q+0x3254>)
 800553e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005542:	443a      	add	r2, r7
 8005544:	4413      	add	r3, r2
 8005546:	ed93 7b00 	vldr	d7, [r3]
 800554a:	eeb1 7b47 	vneg.f64	d7, d7
 800554e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005552:	e017      	b.n	8005584 <G_q+0x326c>
 8005554:	f3af 8000 	nop.w
	...
 8005560:	ffffefd0 	.word	0xffffefd0
 8005564:	ffffed70 	.word	0xffffed70
 8005568:	ffffed50 	.word	0xffffed50
 800556c:	ffffec38 	.word	0xffffec38
 8005570:	ffffed30 	.word	0xffffed30
 8005574:	ffffed10 	.word	0xffffed10
 8005578:	ffffecf0 	.word	0xffffecf0
 800557c:	ffffecd0 	.word	0xffffecd0
 8005580:	ffffecb0 	.word	0xffffecb0
 8005584:	ed83 7b02 	vstr	d7, [r3, #8]
  t113.re = t267.re;
 8005588:	4be2      	ldr	r3, [pc, #904]	; (8005914 <G_q+0x35fc>)
 800558a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800558e:	443a      	add	r2, r7
 8005590:	4413      	add	r3, r2
 8005592:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005596:	4be0      	ldr	r3, [pc, #896]	; (8005918 <G_q+0x3600>)
 8005598:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800559c:	4438      	add	r0, r7
 800559e:	4403      	add	r3, r0
 80055a0:	e9c3 1200 	strd	r1, r2, [r3]
  t113.im = theta5;
 80055a4:	4bdc      	ldr	r3, [pc, #880]	; (8005918 <G_q+0x3600>)
 80055a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055aa:	443a      	add	r2, r7
 80055ac:	4413      	add	r3, r2
 80055ae:	4adb      	ldr	r2, [pc, #876]	; (800591c <G_q+0x3604>)
 80055b0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80055b4:	4439      	add	r1, r7
 80055b6:	440a      	add	r2, r1
 80055b8:	e9d2 1200 	ldrd	r1, r2, [r2]
 80055bc:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t112.re = -t267.re;
 80055c0:	4bd4      	ldr	r3, [pc, #848]	; (8005914 <G_q+0x35fc>)
 80055c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055c6:	443a      	add	r2, r7
 80055c8:	4413      	add	r3, r2
 80055ca:	ed93 7b00 	vldr	d7, [r3]
 80055ce:	eeb1 7b47 	vneg.f64	d7, d7
 80055d2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055d6:	ed83 7b00 	vstr	d7, [r3]
  t112.im = -theta5;
 80055da:	4bd0      	ldr	r3, [pc, #832]	; (800591c <G_q+0x3604>)
 80055dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055e0:	443a      	add	r2, r7
 80055e2:	4413      	add	r3, r2
 80055e4:	ed93 7b00 	vldr	d7, [r3]
 80055e8:	eeb1 7b47 	vneg.f64	d7, d7
 80055ec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80055f0:	ed83 7b02 	vstr	d7, [r3, #8]
  t55.re = t267.re;
 80055f4:	4bc7      	ldr	r3, [pc, #796]	; (8005914 <G_q+0x35fc>)
 80055f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055fa:	443a      	add	r2, r7
 80055fc:	4413      	add	r3, r2
 80055fe:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005602:	4bc7      	ldr	r3, [pc, #796]	; (8005920 <G_q+0x3608>)
 8005604:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005608:	4438      	add	r0, r7
 800560a:	4403      	add	r3, r0
 800560c:	e9c3 1200 	strd	r1, r2, [r3]
  t55.im = theta5;
 8005610:	4bc3      	ldr	r3, [pc, #780]	; (8005920 <G_q+0x3608>)
 8005612:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005616:	443a      	add	r2, r7
 8005618:	4413      	add	r3, r2
 800561a:	4ac0      	ldr	r2, [pc, #768]	; (800591c <G_q+0x3604>)
 800561c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005620:	4439      	add	r1, r7
 8005622:	440a      	add	r2, r1
 8005624:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005628:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t54.re = -t267.re;
 800562c:	4bb9      	ldr	r3, [pc, #740]	; (8005914 <G_q+0x35fc>)
 800562e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005632:	443a      	add	r2, r7
 8005634:	4413      	add	r3, r2
 8005636:	ed93 7b00 	vldr	d7, [r3]
 800563a:	eeb1 7b47 	vneg.f64	d7, d7
 800563e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005642:	ed83 7b00 	vstr	d7, [r3]
  t54.im = -theta5;
 8005646:	4bb5      	ldr	r3, [pc, #724]	; (800591c <G_q+0x3604>)
 8005648:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800564c:	443a      	add	r2, r7
 800564e:	4413      	add	r3, r2
 8005650:	ed93 7b00 	vldr	d7, [r3]
 8005654:	eeb1 7b47 	vneg.f64	d7, d7
 8005658:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800565c:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t54);
 8005660:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005664:	4618      	mov	r0, r3
 8005666:	f00c ff63 	bl	8012530 <b_exp>
  b_exp(&t87);
 800566a:	4bae      	ldr	r3, [pc, #696]	; (8005924 <G_q+0x360c>)
 800566c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005670:	443a      	add	r2, r7
 8005672:	4413      	add	r3, r2
 8005674:	4618      	mov	r0, r3
 8005676:	f00c ff5b 	bl	8012530 <b_exp>
  b_exp(&t83);
 800567a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800567e:	4618      	mov	r0, r3
 8005680:	f00c ff56 	bl	8012530 <b_exp>
  b_exp(&t85);
 8005684:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005688:	4618      	mov	r0, r3
 800568a:	f00c ff51 	bl	8012530 <b_exp>
  b_exp(&t55);
 800568e:	4ba4      	ldr	r3, [pc, #656]	; (8005920 <G_q+0x3608>)
 8005690:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005694:	443a      	add	r2, r7
 8005696:	4413      	add	r3, r2
 8005698:	4618      	mov	r0, r3
 800569a:	f00c ff49 	bl	8012530 <b_exp>
  b_exp(&t33);
 800569e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80056a2:	4618      	mov	r0, r3
 80056a4:	f00c ff44 	bl	8012530 <b_exp>
  b_exp(&t34);
 80056a8:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80056ac:	4618      	mov	r0, r3
 80056ae:	f00c ff3f 	bl	8012530 <b_exp>
  b_exp(&t35);
 80056b2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80056b6:	4618      	mov	r0, r3
 80056b8:	f00c ff3a 	bl	8012530 <b_exp>
  b_exp(&t36);
 80056bc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80056c0:	4618      	mov	r0, r3
 80056c2:	f00c ff35 	bl	8012530 <b_exp>
  b_exp(&t37);
 80056c6:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80056ca:	4618      	mov	r0, r3
 80056cc:	f00c ff30 	bl	8012530 <b_exp>
  b_exp(&t38);
 80056d0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80056d4:	4618      	mov	r0, r3
 80056d6:	f00c ff2b 	bl	8012530 <b_exp>
  b_exp(&t39);
 80056da:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80056de:	4618      	mov	r0, r3
 80056e0:	f00c ff26 	bl	8012530 <b_exp>
  b_exp(&t40);
 80056e4:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80056e8:	4618      	mov	r0, r3
 80056ea:	f00c ff21 	bl	8012530 <b_exp>
  b_exp(&t10);
 80056ee:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80056f2:	4618      	mov	r0, r3
 80056f4:	f00c ff1c 	bl	8012530 <b_exp>
  b_exp(&t11);
 80056f8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80056fc:	4618      	mov	r0, r3
 80056fe:	f00c ff17 	bl	8012530 <b_exp>
  b_exp(&t12);
 8005702:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8005706:	4618      	mov	r0, r3
 8005708:	f00c ff12 	bl	8012530 <b_exp>
  b_exp(&t13);
 800570c:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8005710:	4618      	mov	r0, r3
 8005712:	f00c ff0d 	bl	8012530 <b_exp>
  b_exp(&t14);
 8005716:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800571a:	4618      	mov	r0, r3
 800571c:	f00c ff08 	bl	8012530 <b_exp>
  b_exp(&t15);
 8005720:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8005724:	4618      	mov	r0, r3
 8005726:	f00c ff03 	bl	8012530 <b_exp>
  b_exp(&t16);
 800572a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 800572e:	4618      	mov	r0, r3
 8005730:	f00c fefe 	bl	8012530 <b_exp>
  b_exp(&t17);
 8005734:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8005738:	4618      	mov	r0, r3
 800573a:	f00c fef9 	bl	8012530 <b_exp>
  b_exp(&t20);
 800573e:	4b7a      	ldr	r3, [pc, #488]	; (8005928 <G_q+0x3610>)
 8005740:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005744:	443a      	add	r2, r7
 8005746:	4413      	add	r3, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f00c fef1 	bl	8012530 <b_exp>
  b_exp(&t21);
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	4618      	mov	r0, r3
 8005754:	f00c feec 	bl	8012530 <b_exp>
  b_exp(&t22);
 8005758:	4b74      	ldr	r3, [pc, #464]	; (800592c <G_q+0x3614>)
 800575a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800575e:	443a      	add	r2, r7
 8005760:	4413      	add	r3, r2
 8005762:	4618      	mov	r0, r3
 8005764:	f00c fee4 	bl	8012530 <b_exp>
  b_exp(&t23);
 8005768:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 800576c:	4618      	mov	r0, r3
 800576e:	f00c fedf 	bl	8012530 <b_exp>
  b_exp(&t24);
 8005772:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005776:	4618      	mov	r0, r3
 8005778:	f00c feda 	bl	8012530 <b_exp>
  b_exp(&t27);
 800577c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005780:	4618      	mov	r0, r3
 8005782:	f00c fed5 	bl	8012530 <b_exp>
  b_exp(&t28);
 8005786:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 800578a:	4618      	mov	r0, r3
 800578c:	f00c fed0 	bl	8012530 <b_exp>
  b_exp(&t25);
 8005790:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005794:	4618      	mov	r0, r3
 8005796:	f00c fecb 	bl	8012530 <b_exp>
  b_exp(&t26);
 800579a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 800579e:	4618      	mov	r0, r3
 80057a0:	f00c fec6 	bl	8012530 <b_exp>
  b_exp(&t31);
 80057a4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80057a8:	4618      	mov	r0, r3
 80057aa:	f00c fec1 	bl	8012530 <b_exp>
  b_exp(&t32);
 80057ae:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80057b2:	4618      	mov	r0, r3
 80057b4:	f00c febc 	bl	8012530 <b_exp>
  b_exp(&t29);
 80057b8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80057bc:	4618      	mov	r0, r3
 80057be:	f00c feb7 	bl	8012530 <b_exp>
  b_exp(&t30);
 80057c2:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80057c6:	4618      	mov	r0, r3
 80057c8:	f00c feb2 	bl	8012530 <b_exp>
  b_exp(&t9);
 80057cc:	4b58      	ldr	r3, [pc, #352]	; (8005930 <G_q+0x3618>)
 80057ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057d2:	443a      	add	r2, r7
 80057d4:	4413      	add	r3, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f00c feaa 	bl	8012530 <b_exp>
  b_exp(&t5);
 80057dc:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80057e0:	4618      	mov	r0, r3
 80057e2:	f00c fea5 	bl	8012530 <b_exp>
  b_exp(&t6);
 80057e6:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80057ea:	4618      	mov	r0, r3
 80057ec:	f00c fea0 	bl	8012530 <b_exp>
  b_exp(&t4);
 80057f0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80057f4:	4618      	mov	r0, r3
 80057f6:	f00c fe9b 	bl	8012530 <b_exp>
  b_exp(&t41);
 80057fa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80057fe:	4618      	mov	r0, r3
 8005800:	f00c fe96 	bl	8012530 <b_exp>
  b_exp(&t42);
 8005804:	4b4b      	ldr	r3, [pc, #300]	; (8005934 <G_q+0x361c>)
 8005806:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800580a:	443a      	add	r2, r7
 800580c:	4413      	add	r3, r2
 800580e:	4618      	mov	r0, r3
 8005810:	f00c fe8e 	bl	8012530 <b_exp>
  b_exp(&t43);
 8005814:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8005818:	4618      	mov	r0, r3
 800581a:	f00c fe89 	bl	8012530 <b_exp>
  b_exp(&t44);
 800581e:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8005822:	4618      	mov	r0, r3
 8005824:	f00c fe84 	bl	8012530 <b_exp>
  b_exp(&t47);
 8005828:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800582c:	4618      	mov	r0, r3
 800582e:	f00c fe7f 	bl	8012530 <b_exp>
  b_exp(&t48);
 8005832:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8005836:	4618      	mov	r0, r3
 8005838:	f00c fe7a 	bl	8012530 <b_exp>
  b_exp(&t45);
 800583c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8005840:	4618      	mov	r0, r3
 8005842:	f00c fe75 	bl	8012530 <b_exp>
  b_exp(&t46);
 8005846:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800584a:	4618      	mov	r0, r3
 800584c:	f00c fe70 	bl	8012530 <b_exp>
  b_exp(&t51);
 8005850:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005854:	4618      	mov	r0, r3
 8005856:	f00c fe6b 	bl	8012530 <b_exp>
  b_exp(&t52);
 800585a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800585e:	4618      	mov	r0, r3
 8005860:	f00c fe66 	bl	8012530 <b_exp>
  b_exp(&t49);
 8005864:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005868:	4618      	mov	r0, r3
 800586a:	f00c fe61 	bl	8012530 <b_exp>
  b_exp(&t50);
 800586e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8005872:	4618      	mov	r0, r3
 8005874:	f00c fe5c 	bl	8012530 <b_exp>
  b_exp(&t56);
 8005878:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800587c:	4618      	mov	r0, r3
 800587e:	f00c fe57 	bl	8012530 <b_exp>
  b_exp(&t57);
 8005882:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8005886:	4618      	mov	r0, r3
 8005888:	f00c fe52 	bl	8012530 <b_exp>
  b_exp(&t70);
 800588c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8005890:	4618      	mov	r0, r3
 8005892:	f00c fe4d 	bl	8012530 <b_exp>
  b_exp(&t71);
 8005896:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800589a:	4618      	mov	r0, r3
 800589c:	f00c fe48 	bl	8012530 <b_exp>
  b_exp(&t72);
 80058a0:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80058a4:	4618      	mov	r0, r3
 80058a6:	f00c fe43 	bl	8012530 <b_exp>
  b_exp(&t73);
 80058aa:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80058ae:	4618      	mov	r0, r3
 80058b0:	f00c fe3e 	bl	8012530 <b_exp>
  b_exp(&t74);
 80058b4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80058b8:	4618      	mov	r0, r3
 80058ba:	f00c fe39 	bl	8012530 <b_exp>
  b_exp(&t75);
 80058be:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80058c2:	4618      	mov	r0, r3
 80058c4:	f00c fe34 	bl	8012530 <b_exp>
  b_exp(&t76);
 80058c8:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80058cc:	4618      	mov	r0, r3
 80058ce:	f00c fe2f 	bl	8012530 <b_exp>
  b_exp(&t77);
 80058d2:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80058d6:	4618      	mov	r0, r3
 80058d8:	f00c fe2a 	bl	8012530 <b_exp>
  b_exp(&t58);
 80058dc:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80058e0:	4618      	mov	r0, r3
 80058e2:	f00c fe25 	bl	8012530 <b_exp>
  b_exp(&t59);
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <G_q+0x3620>)
 80058e8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058ec:	443a      	add	r2, r7
 80058ee:	4413      	add	r3, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f00c fe1d 	bl	8012530 <b_exp>
  b_exp(&t60);
 80058f6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80058fa:	4618      	mov	r0, r3
 80058fc:	f00c fe18 	bl	8012530 <b_exp>
  b_exp(&t61);
 8005900:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005904:	4618      	mov	r0, r3
 8005906:	f00c fe13 	bl	8012530 <b_exp>
  b_exp(&t64);
 800590a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 800590e:	4618      	mov	r0, r3
 8005910:	e014      	b.n	800593c <G_q+0x3624>
 8005912:	bf00      	nop
 8005914:	ffffed30 	.word	0xffffed30
 8005918:	ffffec90 	.word	0xffffec90
 800591c:	ffffec38 	.word	0xffffec38
 8005920:	ffffec70 	.word	0xffffec70
 8005924:	ffffedd0 	.word	0xffffedd0
 8005928:	ffffed50 	.word	0xffffed50
 800592c:	ffffed70 	.word	0xffffed70
 8005930:	ffffeff0 	.word	0xffffeff0
 8005934:	ffffed90 	.word	0xffffed90
 8005938:	ffffedb0 	.word	0xffffedb0
 800593c:	f00c fdf8 	bl	8012530 <b_exp>
  b_exp(&t65);
 8005940:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8005944:	4618      	mov	r0, r3
 8005946:	f00c fdf3 	bl	8012530 <b_exp>
  b_exp(&t62);
 800594a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 800594e:	4618      	mov	r0, r3
 8005950:	f00c fdee 	bl	8012530 <b_exp>
  b_exp(&t63);
 8005954:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005958:	4618      	mov	r0, r3
 800595a:	f00c fde9 	bl	8012530 <b_exp>
  b_exp(&t68);
 800595e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005962:	4618      	mov	r0, r3
 8005964:	f00c fde4 	bl	8012530 <b_exp>
  b_exp(&t69);
 8005968:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800596c:	4618      	mov	r0, r3
 800596e:	f00c fddf 	bl	8012530 <b_exp>
  b_exp(&t66);
 8005972:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8005976:	4618      	mov	r0, r3
 8005978:	f00c fdda 	bl	8012530 <b_exp>
  b_exp(&t67);
 800597c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005980:	4618      	mov	r0, r3
 8005982:	f00c fdd5 	bl	8012530 <b_exp>
  b_exp(&t78);
 8005986:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800598a:	4618      	mov	r0, r3
 800598c:	f00c fdd0 	bl	8012530 <b_exp>
  b_exp(&t79);
 8005990:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8005994:	4618      	mov	r0, r3
 8005996:	f00c fdcb 	bl	8012530 <b_exp>
  b_exp(&t80);
 800599a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800599e:	4618      	mov	r0, r3
 80059a0:	f00c fdc6 	bl	8012530 <b_exp>
  b_exp(&t81);
 80059a4:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80059a8:	4618      	mov	r0, r3
 80059aa:	f00c fdc1 	bl	8012530 <b_exp>
  b_exp(&t82);
 80059ae:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f00c fdbc 	bl	8012530 <b_exp>
  b_exp(&t84);
 80059b8:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80059bc:	4618      	mov	r0, r3
 80059be:	f00c fdb7 	bl	8012530 <b_exp>
  b_exp(&t86);
 80059c2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80059c6:	4618      	mov	r0, r3
 80059c8:	f00c fdb2 	bl	8012530 <b_exp>
  b_exp(&t154);
 80059cc:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 80059d0:	4618      	mov	r0, r3
 80059d2:	f00c fdad 	bl	8012530 <b_exp>
  b_exp(&t155);
 80059d6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 80059da:	4618      	mov	r0, r3
 80059dc:	f00c fda8 	bl	8012530 <b_exp>
  b_exp(&t156);
 80059e0:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 80059e4:	4618      	mov	r0, r3
 80059e6:	f00c fda3 	bl	8012530 <b_exp>
  b_exp(&t157);
 80059ea:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 80059ee:	4618      	mov	r0, r3
 80059f0:	f00c fd9e 	bl	8012530 <b_exp>
  b_exp(&t112);
 80059f4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80059f8:	4618      	mov	r0, r3
 80059fa:	f00c fd99 	bl	8012530 <b_exp>
  b_exp(&t113);
 80059fe:	4bf3      	ldr	r3, [pc, #972]	; (8005dcc <G_q+0x3ab4>)
 8005a00:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a04:	443a      	add	r2, r7
 8005a06:	4413      	add	r3, r2
 8005a08:	4618      	mov	r0, r3
 8005a0a:	f00c fd91 	bl	8012530 <b_exp>
  b_exp(&t98);
 8005a0e:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8005a12:	4618      	mov	r0, r3
 8005a14:	f00c fd8c 	bl	8012530 <b_exp>
  b_exp(&t99);
 8005a18:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00c fd87 	bl	8012530 <b_exp>
  b_exp(&t96);
 8005a22:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00c fd82 	bl	8012530 <b_exp>
  b_exp(&t97);
 8005a2c:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8005a30:	4618      	mov	r0, r3
 8005a32:	f00c fd7d 	bl	8012530 <b_exp>
  b_exp(&t92);
 8005a36:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f00c fd78 	bl	8012530 <b_exp>
  b_exp(&t93);
 8005a40:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00c fd73 	bl	8012530 <b_exp>
  b_exp(&t94);
 8005a4a:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f00c fd6e 	bl	8012530 <b_exp>
  b_exp(&t95);
 8005a54:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f00c fd69 	bl	8012530 <b_exp>
  b_exp(&t100);
 8005a5e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f00c fd64 	bl	8012530 <b_exp>
  b_exp(&t101);
 8005a68:	4bd9      	ldr	r3, [pc, #868]	; (8005dd0 <G_q+0x3ab8>)
 8005a6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a6e:	443a      	add	r2, r7
 8005a70:	4413      	add	r3, r2
 8005a72:	4618      	mov	r0, r3
 8005a74:	f00c fd5c 	bl	8012530 <b_exp>
  b_exp(&t104);
 8005a78:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	f00c fd57 	bl	8012530 <b_exp>
  b_exp(&t105);
 8005a82:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8005a86:	4618      	mov	r0, r3
 8005a88:	f00c fd52 	bl	8012530 <b_exp>
  b_exp(&t106);
 8005a8c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00c fd4d 	bl	8012530 <b_exp>
  b_exp(&t107);
 8005a96:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00c fd48 	bl	8012530 <b_exp>
  b_exp(&t108);
 8005aa0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f00c fd43 	bl	8012530 <b_exp>
  b_exp(&t109);
 8005aaa:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f00c fd3e 	bl	8012530 <b_exp>
  b_exp(&t110);
 8005ab4:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f00c fd39 	bl	8012530 <b_exp>
  b_exp(&t111);
 8005abe:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f00c fd34 	bl	8012530 <b_exp>
  b_exp(&t102);
 8005ac8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005acc:	4618      	mov	r0, r3
 8005ace:	f00c fd2f 	bl	8012530 <b_exp>
  b_exp(&t103);
 8005ad2:	4bc0      	ldr	r3, [pc, #768]	; (8005dd4 <G_q+0x3abc>)
 8005ad4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ad8:	443a      	add	r2, r7
 8005ada:	4413      	add	r3, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f00c fd27 	bl	8012530 <b_exp>
  b_exp(&t124);
 8005ae2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00c fd22 	bl	8012530 <b_exp>
  b_exp(&t125);
 8005aec:	4bba      	ldr	r3, [pc, #744]	; (8005dd8 <G_q+0x3ac0>)
 8005aee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005af2:	443a      	add	r2, r7
 8005af4:	4413      	add	r3, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f00c fd1a 	bl	8012530 <b_exp>
  b_exp(&t136);
 8005afc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005b00:	4618      	mov	r0, r3
 8005b02:	f00c fd15 	bl	8012530 <b_exp>
  b_exp(&t137);
 8005b06:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f00c fd10 	bl	8012530 <b_exp>
  b_exp(&t138);
 8005b10:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8005b14:	4618      	mov	r0, r3
 8005b16:	f00c fd0b 	bl	8012530 <b_exp>
  b_exp(&t139);
 8005b1a:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f00c fd06 	bl	8012530 <b_exp>
  b_exp(&t152);
 8005b24:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f00c fd01 	bl	8012530 <b_exp>
  b_exp(&t153);
 8005b2e:	4bab      	ldr	r3, [pc, #684]	; (8005ddc <G_q+0x3ac4>)
 8005b30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b34:	443a      	add	r2, r7
 8005b36:	4413      	add	r3, r2
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f00c fcf9 	bl	8012530 <b_exp>
  b_exp(&t150);
 8005b3e:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f00c fcf4 	bl	8012530 <b_exp>
  b_exp(&t151);
 8005b48:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f00c fcef 	bl	8012530 <b_exp>
  b_exp(&t148);
 8005b52:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8005b56:	4618      	mov	r0, r3
 8005b58:	f00c fcea 	bl	8012530 <b_exp>
  b_exp(&t149);
 8005b5c:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8005b60:	4618      	mov	r0, r3
 8005b62:	f00c fce5 	bl	8012530 <b_exp>
  b_exp(&t144);
 8005b66:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f00c fce0 	bl	8012530 <b_exp>
  b_exp(&t145);
 8005b70:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005b74:	4618      	mov	r0, r3
 8005b76:	f00c fcdb 	bl	8012530 <b_exp>
  b_exp(&t146);
 8005b7a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f00c fcd6 	bl	8012530 <b_exp>
  b_exp(&t147);
 8005b84:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f00c fcd1 	bl	8012530 <b_exp>
  b_exp(&t134);
 8005b8e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005b92:	4618      	mov	r0, r3
 8005b94:	f00c fccc 	bl	8012530 <b_exp>
  b_exp(&t135);
 8005b98:	4b91      	ldr	r3, [pc, #580]	; (8005de0 <G_q+0x3ac8>)
 8005b9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b9e:	443a      	add	r2, r7
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f00c fcc4 	bl	8012530 <b_exp>
  b_exp(&t126);
 8005ba8:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8005bac:	4618      	mov	r0, r3
 8005bae:	f00c fcbf 	bl	8012530 <b_exp>
  b_exp(&t127);
 8005bb2:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	f00c fcba 	bl	8012530 <b_exp>
  b_exp(&t128);
 8005bbc:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f00c fcb5 	bl	8012530 <b_exp>
  b_exp(&t129);
 8005bc6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f00c fcb0 	bl	8012530 <b_exp>
  b_exp(&t130);
 8005bd0:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f00c fcab 	bl	8012530 <b_exp>
  b_exp(&t131);
 8005bda:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8005bde:	4618      	mov	r0, r3
 8005be0:	f00c fca6 	bl	8012530 <b_exp>
  b_exp(&t132);
 8005be4:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8005be8:	4618      	mov	r0, r3
 8005bea:	f00c fca1 	bl	8012530 <b_exp>
  b_exp(&t133);
 8005bee:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f00c fc9c 	bl	8012530 <b_exp>
  b_exp(&t140);
 8005bf8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f00c fc97 	bl	8012530 <b_exp>
  b_exp(&t141);
 8005c02:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005c06:	4618      	mov	r0, r3
 8005c08:	f00c fc92 	bl	8012530 <b_exp>
  b_exp(&t142);
 8005c0c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8005c10:	4618      	mov	r0, r3
 8005c12:	f00c fc8d 	bl	8012530 <b_exp>
  b_exp(&t143);
 8005c16:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f00c fc88 	bl	8012530 <b_exp>
  b_exp(&t168);
 8005c20:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8005c24:	4618      	mov	r0, r3
 8005c26:	f00c fc83 	bl	8012530 <b_exp>
  b_exp(&t169);
 8005c2a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f00c fc7e 	bl	8012530 <b_exp>
  b_exp(&t170);
 8005c34:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f00c fc79 	bl	8012530 <b_exp>
  b_exp(&t171);
 8005c3e:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f00c fc74 	bl	8012530 <b_exp>
  b_exp(&t120);
 8005c48:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f00c fc6f 	bl	8012530 <b_exp>
  b_exp(&t121);
 8005c52:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8005c56:	4618      	mov	r0, r3
 8005c58:	f00c fc6a 	bl	8012530 <b_exp>
  b_exp(&t118);
 8005c5c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8005c60:	4618      	mov	r0, r3
 8005c62:	f00c fc65 	bl	8012530 <b_exp>
  b_exp(&t119);
 8005c66:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f00c fc60 	bl	8012530 <b_exp>
  b_exp(&t114);
 8005c70:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8005c74:	4618      	mov	r0, r3
 8005c76:	f00c fc5b 	bl	8012530 <b_exp>
  b_exp(&t115);
 8005c7a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f00c fc56 	bl	8012530 <b_exp>
  b_exp(&t116);
 8005c84:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f00c fc51 	bl	8012530 <b_exp>
  b_exp(&t117);
 8005c8e:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8005c92:	4618      	mov	r0, r3
 8005c94:	f00c fc4c 	bl	8012530 <b_exp>
  b_exp(&t122);
 8005c98:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f00c fc47 	bl	8012530 <b_exp>
  b_exp(&t123);
 8005ca2:	4b50      	ldr	r3, [pc, #320]	; (8005de4 <G_q+0x3acc>)
 8005ca4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ca8:	443a      	add	r2, r7
 8005caa:	4413      	add	r3, r2
 8005cac:	4618      	mov	r0, r3
 8005cae:	f00c fc3f 	bl	8012530 <b_exp>
  b_exp(&t160);
 8005cb2:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f00c fc3a 	bl	8012530 <b_exp>
  b_exp(&t161);
 8005cbc:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f00c fc35 	bl	8012530 <b_exp>
  b_exp(&t162);
 8005cc6:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f00c fc30 	bl	8012530 <b_exp>
  b_exp(&t163);
 8005cd0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f00c fc2b 	bl	8012530 <b_exp>
  b_exp(&t164);
 8005cda:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f00c fc26 	bl	8012530 <b_exp>
  b_exp(&t165);
 8005ce4:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f00c fc21 	bl	8012530 <b_exp>
  b_exp(&t166);
 8005cee:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00c fc1c 	bl	8012530 <b_exp>
  b_exp(&t167);
 8005cf8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f00c fc17 	bl	8012530 <b_exp>
  b_exp(&t158);
 8005d02:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005d06:	4618      	mov	r0, r3
 8005d08:	f00c fc12 	bl	8012530 <b_exp>
  b_exp(&t159);
 8005d0c:	4b36      	ldr	r3, [pc, #216]	; (8005de8 <G_q+0x3ad0>)
 8005d0e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d12:	443a      	add	r2, r7
 8005d14:	4413      	add	r3, r2
 8005d16:	4618      	mov	r0, r3
 8005d18:	f00c fc0a 	bl	8012530 <b_exp>
  b_exp(&t194);
 8005d1c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005d20:	4618      	mov	r0, r3
 8005d22:	f00c fc05 	bl	8012530 <b_exp>
  b_exp(&t195);
 8005d26:	4b31      	ldr	r3, [pc, #196]	; (8005dec <G_q+0x3ad4>)
 8005d28:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d2c:	443a      	add	r2, r7
 8005d2e:	4413      	add	r3, r2
 8005d30:	4618      	mov	r0, r3
 8005d32:	f00c fbfd 	bl	8012530 <b_exp>
  b_exp(&t172);
 8005d36:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f00c fbf8 	bl	8012530 <b_exp>
  b_exp(&t173);
 8005d40:	4b2b      	ldr	r3, [pc, #172]	; (8005df0 <G_q+0x3ad8>)
 8005d42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d46:	443a      	add	r2, r7
 8005d48:	4413      	add	r3, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f00c fbf0 	bl	8012530 <b_exp>
  b_exp(&t174);
 8005d50:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f00c fbeb 	bl	8012530 <b_exp>
  b_exp(&t175);
 8005d5a:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f00c fbe6 	bl	8012530 <b_exp>
  b_exp(&t182);
 8005d64:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f00c fbe1 	bl	8012530 <b_exp>
  b_exp(&t183);
 8005d6e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8005d72:	4618      	mov	r0, r3
 8005d74:	f00c fbdc 	bl	8012530 <b_exp>
  b_exp(&t180);
 8005d78:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f00c fbd7 	bl	8012530 <b_exp>
  b_exp(&t181);
 8005d82:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8005d86:	4618      	mov	r0, r3
 8005d88:	f00c fbd2 	bl	8012530 <b_exp>
  b_exp(&t176);
 8005d8c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8005d90:	4618      	mov	r0, r3
 8005d92:	f00c fbcd 	bl	8012530 <b_exp>
  b_exp(&t177);
 8005d96:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f00c fbc8 	bl	8012530 <b_exp>
  b_exp(&t178);
 8005da0:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8005da4:	4618      	mov	r0, r3
 8005da6:	f00c fbc3 	bl	8012530 <b_exp>
  b_exp(&t179);
 8005daa:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 8005dae:	4618      	mov	r0, r3
 8005db0:	f00c fbbe 	bl	8012530 <b_exp>
  b_exp(&t186);
 8005db4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8005db8:	4618      	mov	r0, r3
 8005dba:	f00c fbb9 	bl	8012530 <b_exp>
  b_exp(&t187);
 8005dbe:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f00c fbb4 	bl	8012530 <b_exp>
 8005dc8:	e014      	b.n	8005df4 <G_q+0x3adc>
 8005dca:	bf00      	nop
 8005dcc:	ffffec90 	.word	0xffffec90
 8005dd0:	ffffedf0 	.word	0xffffedf0
 8005dd4:	ffffee10 	.word	0xffffee10
 8005dd8:	ffffecb0 	.word	0xffffecb0
 8005ddc:	ffffee70 	.word	0xffffee70
 8005de0:	ffffee50 	.word	0xffffee50
 8005de4:	ffffee30 	.word	0xffffee30
 8005de8:	ffffee90 	.word	0xffffee90
 8005dec:	ffffecd0 	.word	0xffffecd0
 8005df0:	ffffeeb0 	.word	0xffffeeb0
  b_exp(&t188);
 8005df4:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f00c fb99 	bl	8012530 <b_exp>
  b_exp(&t189);
 8005dfe:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 8005e02:	4618      	mov	r0, r3
 8005e04:	f00c fb94 	bl	8012530 <b_exp>
  b_exp(&t190);
 8005e08:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	f00c fb8f 	bl	8012530 <b_exp>
  b_exp(&t191);
 8005e12:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 8005e16:	4618      	mov	r0, r3
 8005e18:	f00c fb8a 	bl	8012530 <b_exp>
  b_exp(&t192);
 8005e1c:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8005e20:	4618      	mov	r0, r3
 8005e22:	f00c fb85 	bl	8012530 <b_exp>
  b_exp(&t193);
 8005e26:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f00c fb80 	bl	8012530 <b_exp>
  b_exp(&t184);
 8005e30:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005e34:	4618      	mov	r0, r3
 8005e36:	f00c fb7b 	bl	8012530 <b_exp>
  b_exp(&t185);
 8005e3a:	4bec      	ldr	r3, [pc, #944]	; (80061ec <G_q+0x3ed4>)
 8005e3c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e40:	443a      	add	r2, r7
 8005e42:	4413      	add	r3, r2
 8005e44:	4618      	mov	r0, r3
 8005e46:	f00c fb73 	bl	8012530 <b_exp>
  b_exp(&t196);
 8005e4a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f00c fb6e 	bl	8012530 <b_exp>
  b_exp(&t197);
 8005e54:	4be6      	ldr	r3, [pc, #920]	; (80061f0 <G_q+0x3ed8>)
 8005e56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e5a:	443a      	add	r2, r7
 8005e5c:	4413      	add	r3, r2
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f00c fb66 	bl	8012530 <b_exp>
  b_exp(&t198);
 8005e64:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f00c fb61 	bl	8012530 <b_exp>
  b_exp(&t199);
 8005e6e:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 8005e72:	4618      	mov	r0, r3
 8005e74:	f00c fb5c 	bl	8012530 <b_exp>
  b_exp(&t206);
 8005e78:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f00c fb57 	bl	8012530 <b_exp>
  b_exp(&t207);
 8005e82:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8005e86:	4618      	mov	r0, r3
 8005e88:	f00c fb52 	bl	8012530 <b_exp>
  b_exp(&t204);
 8005e8c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8005e90:	4618      	mov	r0, r3
 8005e92:	f00c fb4d 	bl	8012530 <b_exp>
  b_exp(&t205);
 8005e96:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f00c fb48 	bl	8012530 <b_exp>
  b_exp(&t200);
 8005ea0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f00c fb43 	bl	8012530 <b_exp>
  b_exp(&t201);
 8005eaa:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f00c fb3e 	bl	8012530 <b_exp>
  b_exp(&t202);
 8005eb4:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f00c fb39 	bl	8012530 <b_exp>
  b_exp(&t203);
 8005ebe:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f00c fb34 	bl	8012530 <b_exp>
  b_exp(&t210);
 8005ec8:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f00c fb2f 	bl	8012530 <b_exp>
  b_exp(&t211);
 8005ed2:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f00c fb2a 	bl	8012530 <b_exp>
  b_exp(&t212);
 8005edc:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f00c fb25 	bl	8012530 <b_exp>
  b_exp(&t213);
 8005ee6:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 8005eea:	4618      	mov	r0, r3
 8005eec:	f00c fb20 	bl	8012530 <b_exp>
  b_exp(&t214);
 8005ef0:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f00c fb1b 	bl	8012530 <b_exp>
  b_exp(&t215);
 8005efa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 8005efe:	4618      	mov	r0, r3
 8005f00:	f00c fb16 	bl	8012530 <b_exp>
  b_exp(&t216);
 8005f04:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f00c fb11 	bl	8012530 <b_exp>
  b_exp(&t217);
 8005f0e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8005f12:	4618      	mov	r0, r3
 8005f14:	f00c fb0c 	bl	8012530 <b_exp>
  b_exp(&t208);
 8005f18:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f00c fb07 	bl	8012530 <b_exp>
  b_exp(&t209);
 8005f22:	4bb4      	ldr	r3, [pc, #720]	; (80061f4 <G_q+0x3edc>)
 8005f24:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f28:	443a      	add	r2, r7
 8005f2a:	4413      	add	r3, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f00c faff 	bl	8012530 <b_exp>
  b_exp(&t230);
 8005f32:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8005f36:	4618      	mov	r0, r3
 8005f38:	f00c fafa 	bl	8012530 <b_exp>
  b_exp(&t231);
 8005f3c:	4bae      	ldr	r3, [pc, #696]	; (80061f8 <G_q+0x3ee0>)
 8005f3e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f42:	443a      	add	r2, r7
 8005f44:	4413      	add	r3, r2
 8005f46:	4618      	mov	r0, r3
 8005f48:	f00c faf2 	bl	8012530 <b_exp>
  b_exp(&t232);
 8005f4c:	f241 0350 	movw	r3, #4176	; 0x1050
 8005f50:	443b      	add	r3, r7
 8005f52:	4618      	mov	r0, r3
 8005f54:	f00c faec 	bl	8012530 <b_exp>
  b_exp(&t233);
 8005f58:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f00c fae7 	bl	8012530 <b_exp>
  b_exp(&t240);
 8005f62:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8005f66:	4618      	mov	r0, r3
 8005f68:	f00c fae2 	bl	8012530 <b_exp>
  b_exp(&t241);
 8005f6c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8005f70:	4618      	mov	r0, r3
 8005f72:	f00c fadd 	bl	8012530 <b_exp>
  b_exp(&t238);
 8005f76:	f241 0390 	movw	r3, #4240	; 0x1090
 8005f7a:	443b      	add	r3, r7
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f00c fad7 	bl	8012530 <b_exp>
  b_exp(&t239);
 8005f82:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8005f86:	4618      	mov	r0, r3
 8005f88:	f00c fad2 	bl	8012530 <b_exp>
  b_exp(&t234);
 8005f8c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8005f90:	4618      	mov	r0, r3
 8005f92:	f00c facd 	bl	8012530 <b_exp>
  b_exp(&t235);
 8005f96:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f00c fac8 	bl	8012530 <b_exp>
  b_exp(&t236);
 8005fa0:	f241 0370 	movw	r3, #4208	; 0x1070
 8005fa4:	443b      	add	r3, r7
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f00c fac2 	bl	8012530 <b_exp>
  b_exp(&t237);
 8005fac:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f00c fabd 	bl	8012530 <b_exp>
  b_exp(&t228);
 8005fb6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f00c fab8 	bl	8012530 <b_exp>
  b_exp(&t229);
 8005fc0:	4b8e      	ldr	r3, [pc, #568]	; (80061fc <G_q+0x3ee4>)
 8005fc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005fc6:	443a      	add	r2, r7
 8005fc8:	4413      	add	r3, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f00c fab0 	bl	8012530 <b_exp>
  b_exp(&t220);
 8005fd0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f00c faab 	bl	8012530 <b_exp>
  b_exp(&t221);
 8005fda:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f00c faa6 	bl	8012530 <b_exp>
  b_exp(&t222);
 8005fe4:	f241 0310 	movw	r3, #4112	; 0x1010
 8005fe8:	443b      	add	r3, r7
 8005fea:	4618      	mov	r0, r3
 8005fec:	f00c faa0 	bl	8012530 <b_exp>
  b_exp(&t223);
 8005ff0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f00c fa9b 	bl	8012530 <b_exp>
  b_exp(&t224);
 8005ffa:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8005ffe:	4618      	mov	r0, r3
 8006000:	f00c fa96 	bl	8012530 <b_exp>
  b_exp(&t225);
 8006004:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 8006008:	4618      	mov	r0, r3
 800600a:	f00c fa91 	bl	8012530 <b_exp>
  b_exp(&t226);
 800600e:	f241 0330 	movw	r3, #4144	; 0x1030
 8006012:	443b      	add	r3, r7
 8006014:	4618      	mov	r0, r3
 8006016:	f00c fa8b 	bl	8012530 <b_exp>
  b_exp(&t227);
 800601a:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800601e:	4618      	mov	r0, r3
 8006020:	f00c fa86 	bl	8012530 <b_exp>
  b_exp(&t218);
 8006024:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006028:	4618      	mov	r0, r3
 800602a:	f00c fa81 	bl	8012530 <b_exp>
  b_exp(&t219);
 800602e:	4b74      	ldr	r3, [pc, #464]	; (8006200 <G_q+0x3ee8>)
 8006030:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006034:	443a      	add	r2, r7
 8006036:	4413      	add	r3, r2
 8006038:	4618      	mov	r0, r3
 800603a:	f00c fa79 	bl	8012530 <b_exp>
  b_exp(&t264);
 800603e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8006042:	4618      	mov	r0, r3
 8006044:	f00c fa74 	bl	8012530 <b_exp>
  b_exp(&t265);
 8006048:	4b6e      	ldr	r3, [pc, #440]	; (8006204 <G_q+0x3eec>)
 800604a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800604e:	443a      	add	r2, r7
 8006050:	4413      	add	r3, r2
 8006052:	4618      	mov	r0, r3
 8006054:	f00c fa6c 	bl	8012530 <b_exp>
  b_exp(&t242);
 8006058:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800605c:	4618      	mov	r0, r3
 800605e:	f00c fa67 	bl	8012530 <b_exp>
  b_exp(&t243);
 8006062:	4b69      	ldr	r3, [pc, #420]	; (8006208 <G_q+0x3ef0>)
 8006064:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006068:	443a      	add	r2, r7
 800606a:	4413      	add	r3, r2
 800606c:	4618      	mov	r0, r3
 800606e:	f00c fa5f 	bl	8012530 <b_exp>
  b_exp(&t244);
 8006072:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8006076:	443b      	add	r3, r7
 8006078:	4618      	mov	r0, r3
 800607a:	f00c fa59 	bl	8012530 <b_exp>
  b_exp(&t245);
 800607e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8006082:	4618      	mov	r0, r3
 8006084:	f00c fa54 	bl	8012530 <b_exp>
  b_exp(&t252);
 8006088:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800608c:	4618      	mov	r0, r3
 800608e:	f00c fa4f 	bl	8012530 <b_exp>
  b_exp(&t253);
 8006092:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006096:	4618      	mov	r0, r3
 8006098:	f00c fa4a 	bl	8012530 <b_exp>
  b_exp(&t250);
 800609c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80060a0:	443b      	add	r3, r7
 80060a2:	4618      	mov	r0, r3
 80060a4:	f00c fa44 	bl	8012530 <b_exp>
  b_exp(&t251);
 80060a8:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80060ac:	4618      	mov	r0, r3
 80060ae:	f00c fa3f 	bl	8012530 <b_exp>
  b_exp(&t246);
 80060b2:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 80060b6:	4618      	mov	r0, r3
 80060b8:	f00c fa3a 	bl	8012530 <b_exp>
  b_exp(&t247);
 80060bc:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 80060c0:	4618      	mov	r0, r3
 80060c2:	f00c fa35 	bl	8012530 <b_exp>
  b_exp(&t248);
 80060c6:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80060ca:	443b      	add	r3, r7
 80060cc:	4618      	mov	r0, r3
 80060ce:	f00c fa2f 	bl	8012530 <b_exp>
  b_exp(&t249);
 80060d2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80060d6:	4618      	mov	r0, r3
 80060d8:	f00c fa2a 	bl	8012530 <b_exp>
  b_exp(&t256);
 80060dc:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80060e0:	4618      	mov	r0, r3
 80060e2:	f00c fa25 	bl	8012530 <b_exp>
  b_exp(&t257);
 80060e6:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80060ea:	4618      	mov	r0, r3
 80060ec:	f00c fa20 	bl	8012530 <b_exp>
  b_exp(&t258);
 80060f0:	f241 1310 	movw	r3, #4368	; 0x1110
 80060f4:	443b      	add	r3, r7
 80060f6:	4618      	mov	r0, r3
 80060f8:	f00c fa1a 	bl	8012530 <b_exp>
  b_exp(&t259);
 80060fc:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8006100:	4618      	mov	r0, r3
 8006102:	f00c fa15 	bl	8012530 <b_exp>
  b_exp(&t260);
 8006106:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 800610a:	4618      	mov	r0, r3
 800610c:	f00c fa10 	bl	8012530 <b_exp>
  b_exp(&t261);
 8006110:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8006114:	4618      	mov	r0, r3
 8006116:	f00c fa0b 	bl	8012530 <b_exp>
  b_exp(&t262);
 800611a:	f241 1330 	movw	r3, #4400	; 0x1130
 800611e:	443b      	add	r3, r7
 8006120:	4618      	mov	r0, r3
 8006122:	f00c fa05 	bl	8012530 <b_exp>
  b_exp(&t263);
 8006126:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 800612a:	4618      	mov	r0, r3
 800612c:	f00c fa00 	bl	8012530 <b_exp>
  b_exp(&t254);
 8006130:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8006134:	4618      	mov	r0, r3
 8006136:	f00c f9fb 	bl	8012530 <b_exp>
  b_exp(&t255);
 800613a:	4b34      	ldr	r3, [pc, #208]	; (800620c <G_q+0x3ef4>)
 800613c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006140:	443a      	add	r2, r7
 8006142:	4413      	add	r3, r2
 8006144:	4618      	mov	r0, r3
 8006146:	f00c f9f3 	bl	8012530 <b_exp>
  b_exp(&t266);
 800614a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800614e:	4618      	mov	r0, r3
 8006150:	f00c f9ee 	bl	8012530 <b_exp>
  b_exp(&t267);
 8006154:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <G_q+0x3ef8>)
 8006156:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800615a:	443a      	add	r2, r7
 800615c:	4413      	add	r3, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f00c f9e6 	bl	8012530 <b_exp>
  b_exp(&t268);
 8006164:	f241 1350 	movw	r3, #4432	; 0x1150
 8006168:	443b      	add	r3, r7
 800616a:	4618      	mov	r0, r3
 800616c:	f00c f9e0 	bl	8012530 <b_exp>
  b_exp(&t269);
 8006170:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8006174:	4618      	mov	r0, r3
 8006176:	f00c f9db 	bl	8012530 <b_exp>
  b_exp(&t280);
 800617a:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800617e:	443b      	add	r3, r7
 8006180:	4618      	mov	r0, r3
 8006182:	f00c f9d5 	bl	8012530 <b_exp>
  b_exp(&t281);
 8006186:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800618a:	4618      	mov	r0, r3
 800618c:	f00c f9d0 	bl	8012530 <b_exp>
  b_exp(&t282);
 8006190:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006194:	4618      	mov	r0, r3
 8006196:	f00c f9cb 	bl	8012530 <b_exp>
  b_exp(&t283);
 800619a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800619e:	4618      	mov	r0, r3
 80061a0:	f00c f9c6 	bl	8012530 <b_exp>
  b_exp(&t284);
 80061a4:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80061a8:	4618      	mov	r0, r3
 80061aa:	f00c f9c1 	bl	8012530 <b_exp>
  b_exp(&t285);
 80061ae:	4b19      	ldr	r3, [pc, #100]	; (8006214 <G_q+0x3efc>)
 80061b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80061b4:	443a      	add	r2, r7
 80061b6:	4413      	add	r3, r2
 80061b8:	4618      	mov	r0, r3
 80061ba:	f00c f9b9 	bl	8012530 <b_exp>
  b_exp(&t286);
 80061be:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80061c2:	443b      	add	r3, r7
 80061c4:	4618      	mov	r0, r3
 80061c6:	f00c f9b3 	bl	8012530 <b_exp>
  b_exp(&t287);
 80061ca:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80061ce:	4618      	mov	r0, r3
 80061d0:	f00c f9ae 	bl	8012530 <b_exp>
  b_exp(&t294);
 80061d4:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80061d8:	4618      	mov	r0, r3
 80061da:	f00c f9a9 	bl	8012530 <b_exp>
  b_exp(&t295);
 80061de:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80061e2:	4618      	mov	r0, r3
 80061e4:	f00c f9a4 	bl	8012530 <b_exp>
 80061e8:	e016      	b.n	8006218 <G_q+0x3f00>
 80061ea:	bf00      	nop
 80061ec:	ffffeed0 	.word	0xffffeed0
 80061f0:	ffffeef0 	.word	0xffffeef0
 80061f4:	ffffef10 	.word	0xffffef10
 80061f8:	ffffef50 	.word	0xffffef50
 80061fc:	ffffef30 	.word	0xffffef30
 8006200:	ffffecf0 	.word	0xffffecf0
 8006204:	ffffed10 	.word	0xffffed10
 8006208:	ffffef70 	.word	0xffffef70
 800620c:	ffffef90 	.word	0xffffef90
 8006210:	ffffed30 	.word	0xffffed30
 8006214:	ffffefd0 	.word	0xffffefd0
  b_exp(&t292);
 8006218:	f241 2310 	movw	r3, #4624	; 0x1210
 800621c:	443b      	add	r3, r7
 800621e:	4618      	mov	r0, r3
 8006220:	f00c f986 	bl	8012530 <b_exp>
  b_exp(&t293);
 8006224:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8006228:	4618      	mov	r0, r3
 800622a:	f00c f981 	bl	8012530 <b_exp>
  b_exp(&t288);
 800622e:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8006232:	4618      	mov	r0, r3
 8006234:	f00c f97c 	bl	8012530 <b_exp>
  b_exp(&t289);
 8006238:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800623c:	4618      	mov	r0, r3
 800623e:	f00c f977 	bl	8012530 <b_exp>
  b_exp(&t290);
 8006242:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8006246:	443b      	add	r3, r7
 8006248:	4618      	mov	r0, r3
 800624a:	f00c f971 	bl	8012530 <b_exp>
  b_exp(&t291);
 800624e:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8006252:	4618      	mov	r0, r3
 8006254:	f00c f96c 	bl	8012530 <b_exp>
  b_exp(&t278);
 8006258:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800625c:	4618      	mov	r0, r3
 800625e:	f00c f967 	bl	8012530 <b_exp>
  b_exp(&t279);
 8006262:	4bd5      	ldr	r3, [pc, #852]	; (80065b8 <G_q+0x42a0>)
 8006264:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006268:	443a      	add	r2, r7
 800626a:	4413      	add	r3, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f00c f95f 	bl	8012530 <b_exp>
  b_exp(&t270);
 8006272:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8006276:	4618      	mov	r0, r3
 8006278:	f00c f95a 	bl	8012530 <b_exp>
  b_exp(&t271);
 800627c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006280:	4618      	mov	r0, r3
 8006282:	f00c f955 	bl	8012530 <b_exp>
  b_exp(&t272);
 8006286:	f241 1370 	movw	r3, #4464	; 0x1170
 800628a:	443b      	add	r3, r7
 800628c:	4618      	mov	r0, r3
 800628e:	f00c f94f 	bl	8012530 <b_exp>
  b_exp(&t273);
 8006292:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8006296:	4618      	mov	r0, r3
 8006298:	f00c f94a 	bl	8012530 <b_exp>
  b_exp(&t274);
 800629c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80062a0:	4618      	mov	r0, r3
 80062a2:	f00c f945 	bl	8012530 <b_exp>
  b_exp(&t275);
 80062a6:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f00c f940 	bl	8012530 <b_exp>
  b_exp(&t276);
 80062b0:	f241 1390 	movw	r3, #4496	; 0x1190
 80062b4:	443b      	add	r3, r7
 80062b6:	4618      	mov	r0, r3
 80062b8:	f00c f93a 	bl	8012530 <b_exp>
  b_exp(&t277);
 80062bc:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f00c f935 	bl	8012530 <b_exp>
  b_exp(&t296);
 80062c6:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80062ca:	4618      	mov	r0, r3
 80062cc:	f00c f930 	bl	8012530 <b_exp>
  b_exp(&t297);
 80062d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80062d4:	4618      	mov	r0, r3
 80062d6:	f00c f92b 	bl	8012530 <b_exp>
  b_exp(&t298);
 80062da:	f241 2330 	movw	r3, #4656	; 0x1230
 80062de:	443b      	add	r3, r7
 80062e0:	4618      	mov	r0, r3
 80062e2:	f00c f925 	bl	8012530 <b_exp>
  b_exp(&t299);
 80062e6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80062ea:	4618      	mov	r0, r3
 80062ec:	f00c f920 	bl	8012530 <b_exp>
  b_G_q[0].re = 0.0;
 80062f0:	4bb2      	ldr	r3, [pc, #712]	; (80065bc <G_q+0x42a4>)
 80062f2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80062f6:	443a      	add	r2, r7
 80062f8:	4413      	add	r3, r2
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[0].im = 0.0;
 8006308:	4bac      	ldr	r3, [pc, #688]	; (80065bc <G_q+0x42a4>)
 800630a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800630e:	443a      	add	r2, r7
 8006310:	4413      	add	r3, r2
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	f04f 0300 	mov.w	r3, #0
 8006318:	f04f 0400 	mov.w	r4, #0
 800631c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  if (t33.im == 0.0) {
 8006320:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006324:	ed93 7b02 	vldr	d7, [r3, #8]
 8006328:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800632c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006330:	d115      	bne.n	800635e <G_q+0x4046>
    t33_re = t33.re / 2.0;
 8006332:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006336:	ed93 6b00 	vldr	d6, [r3]
 800633a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800633e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006342:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006346:	443b      	add	r3, r7
 8006348:	ed83 7b00 	vstr	d7, [r3]
    t33_im = 0.0;
 800634c:	f04f 0300 	mov.w	r3, #0
 8006350:	f04f 0400 	mov.w	r4, #0
 8006354:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006358:	e9c2 3400 	strd	r3, r4, [r2]
 800635c:	e037      	b.n	80063ce <G_q+0x40b6>
  } else if (t33.re == 0.0) {
 800635e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006362:	ed93 7b00 	vldr	d7, [r3]
 8006366:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800636a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636e:	d115      	bne.n	800639c <G_q+0x4084>
    t33_re = 0.0;
 8006370:	f04f 0300 	mov.w	r3, #0
 8006374:	f04f 0400 	mov.w	r4, #0
 8006378:	f241 32c8 	movw	r2, #5064	; 0x13c8
 800637c:	443a      	add	r2, r7
 800637e:	e9c2 3400 	strd	r3, r4, [r2]
    t33_im = t33.im / 2.0;
 8006382:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006386:	ed93 6b02 	vldr	d6, [r3, #8]
 800638a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800638e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006392:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006396:	ed83 7b00 	vstr	d7, [r3]
 800639a:	e018      	b.n	80063ce <G_q+0x40b6>
  } else {
    t33_re = t33.re / 2.0;
 800639c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80063a0:	ed93 6b00 	vldr	d6, [r3]
 80063a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80063a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80063ac:	f241 33c8 	movw	r3, #5064	; 0x13c8
 80063b0:	443b      	add	r3, r7
 80063b2:	ed83 7b00 	vstr	d7, [r3]
    t33_im = t33.im / 2.0;
 80063b6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80063ba:	ed93 6b02 	vldr	d6, [r3, #8]
 80063be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80063c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80063c6:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80063ca:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t34.im == 0.0) {
 80063ce:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80063d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80063d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80063da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063de:	d116      	bne.n	800640e <G_q+0x40f6>
    t34_re = t34.re / 2.0;
 80063e0:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80063e4:	ed93 6b00 	vldr	d6, [r3]
 80063e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80063ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80063f0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80063f4:	443b      	add	r3, r7
 80063f6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80063fa:	f04f 0300 	mov.w	r3, #0
 80063fe:	f04f 0400 	mov.w	r4, #0
 8006402:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006406:	443a      	add	r2, r7
 8006408:	e9c2 3400 	strd	r3, r4, [r2]
 800640c:	e039      	b.n	8006482 <G_q+0x416a>
  } else if (t34.re == 0.0) {
 800640e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006412:	ed93 7b00 	vldr	d7, [r3]
 8006416:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800641a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800641e:	d116      	bne.n	800644e <G_q+0x4136>
    t34_re = 0.0;
 8006420:	f04f 0300 	mov.w	r3, #0
 8006424:	f04f 0400 	mov.w	r4, #0
 8006428:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800642c:	443a      	add	r2, r7
 800642e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t34.im / 2.0;
 8006432:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006436:	ed93 6b02 	vldr	d6, [r3, #8]
 800643a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800643e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006442:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006446:	443b      	add	r3, r7
 8006448:	ed83 7b00 	vstr	d7, [r3]
 800644c:	e019      	b.n	8006482 <G_q+0x416a>
  } else {
    t34_re = t34.re / 2.0;
 800644e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006452:	ed93 6b00 	vldr	d6, [r3]
 8006456:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800645a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800645e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006462:	443b      	add	r3, r7
 8006464:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t34.im / 2.0;
 8006468:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800646c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006470:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006474:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006478:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800647c:	443b      	add	r3, r7
 800647e:	ed83 7b00 	vstr	d7, [r3]
  }

  t33_re += t34_re;
 8006482:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006486:	443b      	add	r3, r7
 8006488:	ed93 6b00 	vldr	d6, [r3]
 800648c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006490:	443b      	add	r3, r7
 8006492:	ed93 7b00 	vldr	d7, [r3]
 8006496:	ee36 7b07 	vadd.f64	d7, d6, d7
 800649a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800649e:	443b      	add	r3, r7
 80064a0:	ed83 7b00 	vstr	d7, [r3]
  t33_im += t34_im;
 80064a4:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80064a8:	ed93 6b00 	vldr	d6, [r3]
 80064ac:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80064b0:	443b      	add	r3, r7
 80064b2:	ed93 7b00 	vldr	d7, [r3]
 80064b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064ba:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 80064be:	ed83 7b00 	vstr	d7, [r3]
  t35_re = (t35.re * 0.0 - t35.im * 0.5) - (t36.re * 0.0 - t36.im * 0.5);
 80064c2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80064c6:	ed93 7b00 	vldr	d7, [r3]
 80064ca:	ed9f 6b39 	vldr	d6, [pc, #228]	; 80065b0 <G_q+0x4298>
 80064ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80064d2:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80064d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80064da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80064de:	ee27 7b05 	vmul.f64	d7, d7, d5
 80064e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80064e6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80064ea:	ed93 7b00 	vldr	d7, [r3]
 80064ee:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80065b0 <G_q+0x4298>
 80064f2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80064f6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80064fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80064fe:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006502:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006506:	ee35 7b47 	vsub.f64	d7, d5, d7
 800650a:	f241 2398 	movw	r3, #4760	; 0x1298
 800650e:	443b      	add	r3, r7
 8006510:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006514:	ed83 7b00 	vstr	d7, [r3]
  t35_im = (t35.re * 0.5 + t35.im * 0.0) - (t36.re * 0.5 + t36.im * 0.0);
 8006518:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800651c:	ed93 7b00 	vldr	d7, [r3]
 8006520:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006524:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006528:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800652c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006530:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 80065b0 <G_q+0x4298>
 8006534:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006538:	ee36 6b07 	vadd.f64	d6, d6, d7
 800653c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006540:	ed93 7b00 	vldr	d7, [r3]
 8006544:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006548:	ee27 5b05 	vmul.f64	d5, d7, d5
 800654c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006550:	ed93 7b02 	vldr	d7, [r3, #8]
 8006554:	ed9f 4b16 	vldr	d4, [pc, #88]	; 80065b0 <G_q+0x4298>
 8006558:	ee27 7b04 	vmul.f64	d7, d7, d4
 800655c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006560:	f241 2390 	movw	r3, #4752	; 0x1290
 8006564:	443b      	add	r3, r7
 8006566:	ee36 7b47 	vsub.f64	d7, d6, d7
 800656a:	ed83 7b00 	vstr	d7, [r3]
  if (t37.im == 0.0) {
 800656e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006572:	ed93 7b02 	vldr	d7, [r3, #8]
 8006576:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800657a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657e:	d11f      	bne.n	80065c0 <G_q+0x42a8>
    t37_re = t37.re / 2.0;
 8006580:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006584:	ed93 6b00 	vldr	d6, [r3]
 8006588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800658c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006590:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006594:	443b      	add	r3, r7
 8006596:	ed83 7b00 	vstr	d7, [r3]
    t37_im = 0.0;
 800659a:	f04f 0300 	mov.w	r3, #0
 800659e:	f04f 0400 	mov.w	r4, #0
 80065a2:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 80065a6:	e9c2 3400 	strd	r3, r4, [r2]
 80065aa:	e041      	b.n	8006630 <G_q+0x4318>
 80065ac:	f3af 8000 	nop.w
	...
 80065b8:	ffffefb0 	.word	0xffffefb0
 80065bc:	ffffec34 	.word	0xffffec34
  } else if (t37.re == 0.0) {
 80065c0:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065c4:	ed93 7b00 	vldr	d7, [r3]
 80065c8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80065cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d0:	d115      	bne.n	80065fe <G_q+0x42e6>
    t37_re = 0.0;
 80065d2:	f04f 0300 	mov.w	r3, #0
 80065d6:	f04f 0400 	mov.w	r4, #0
 80065da:	f241 32a8 	movw	r2, #5032	; 0x13a8
 80065de:	443a      	add	r2, r7
 80065e0:	e9c2 3400 	strd	r3, r4, [r2]
    t37_im = t37.im / 2.0;
 80065e4:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80065e8:	ed93 6b02 	vldr	d6, [r3, #8]
 80065ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80065f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065f4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80065f8:	ed83 7b00 	vstr	d7, [r3]
 80065fc:	e018      	b.n	8006630 <G_q+0x4318>
  } else {
    t37_re = t37.re / 2.0;
 80065fe:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006602:	ed93 6b00 	vldr	d6, [r3]
 8006606:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800660a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800660e:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006612:	443b      	add	r3, r7
 8006614:	ed83 7b00 	vstr	d7, [r3]
    t37_im = t37.im / 2.0;
 8006618:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800661c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006620:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006624:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006628:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800662c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t38.im == 0.0) {
 8006630:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006634:	ed93 7b02 	vldr	d7, [r3, #8]
 8006638:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800663c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006640:	d116      	bne.n	8006670 <G_q+0x4358>
    t34_re = t38.re / 2.0;
 8006642:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006646:	ed93 6b00 	vldr	d6, [r3]
 800664a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800664e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006652:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006656:	443b      	add	r3, r7
 8006658:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	f04f 0400 	mov.w	r4, #0
 8006664:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006668:	443a      	add	r2, r7
 800666a:	e9c2 3400 	strd	r3, r4, [r2]
 800666e:	e039      	b.n	80066e4 <G_q+0x43cc>
  } else if (t38.re == 0.0) {
 8006670:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006674:	ed93 7b00 	vldr	d7, [r3]
 8006678:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800667c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006680:	d116      	bne.n	80066b0 <G_q+0x4398>
    t34_re = 0.0;
 8006682:	f04f 0300 	mov.w	r3, #0
 8006686:	f04f 0400 	mov.w	r4, #0
 800668a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800668e:	443a      	add	r2, r7
 8006690:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t38.im / 2.0;
 8006694:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006698:	ed93 6b02 	vldr	d6, [r3, #8]
 800669c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066a4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80066a8:	443b      	add	r3, r7
 80066aa:	ed83 7b00 	vstr	d7, [r3]
 80066ae:	e019      	b.n	80066e4 <G_q+0x43cc>
  } else {
    t34_re = t38.re / 2.0;
 80066b0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80066b4:	ed93 6b00 	vldr	d6, [r3]
 80066b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066c0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80066c4:	443b      	add	r3, r7
 80066c6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t38.im / 2.0;
 80066ca:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80066ce:	ed93 6b02 	vldr	d6, [r3, #8]
 80066d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066da:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80066de:	443b      	add	r3, r7
 80066e0:	ed83 7b00 	vstr	d7, [r3]
  }

  t37_re += t34_re;
 80066e4:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80066e8:	443b      	add	r3, r7
 80066ea:	ed93 6b00 	vldr	d6, [r3]
 80066ee:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80066f2:	443b      	add	r3, r7
 80066f4:	ed93 7b00 	vldr	d7, [r3]
 80066f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80066fc:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006700:	443b      	add	r3, r7
 8006702:	ed83 7b00 	vstr	d7, [r3]
  t37_im += t34_im;
 8006706:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 800670a:	ed93 6b00 	vldr	d6, [r3]
 800670e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006712:	443b      	add	r3, r7
 8006714:	ed93 7b00 	vldr	d7, [r3]
 8006718:	ee36 7b07 	vadd.f64	d7, d6, d7
 800671c:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 8006720:	ed83 7b00 	vstr	d7, [r3]
  t39_re = (t39.re * 0.0 - t39.im * 0.5) - (t40.re * 0.0 - t40.im * 0.5);
 8006724:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006728:	ed93 7b00 	vldr	d7, [r3]
 800672c:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8006a68 <G_q+0x4750>
 8006730:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006734:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006738:	ed93 7b02 	vldr	d7, [r3, #8]
 800673c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006740:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006744:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006748:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800674c:	ed93 7b00 	vldr	d7, [r3]
 8006750:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8006a68 <G_q+0x4750>
 8006754:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006758:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 800675c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006760:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006764:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006768:	ee35 7b47 	vsub.f64	d7, d5, d7
 800676c:	f241 2388 	movw	r3, #4744	; 0x1288
 8006770:	443b      	add	r3, r7
 8006772:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006776:	ed83 7b00 	vstr	d7, [r3]
  t39_im = (t39.re * 0.5 + t39.im * 0.0) - (t40.re * 0.5 + t40.im * 0.0);
 800677a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800677e:	ed93 7b00 	vldr	d7, [r3]
 8006782:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006786:	ee27 6b06 	vmul.f64	d6, d7, d6
 800678a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800678e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006792:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8006a68 <G_q+0x4750>
 8006796:	ee27 7b05 	vmul.f64	d7, d7, d5
 800679a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800679e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80067a2:	ed93 7b00 	vldr	d7, [r3]
 80067a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80067aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 80067ae:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80067b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80067b6:	ed9f 4bac 	vldr	d4, [pc, #688]	; 8006a68 <G_q+0x4750>
 80067ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80067be:	ee35 7b07 	vadd.f64	d7, d5, d7
 80067c2:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 80067c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80067ca:	ed83 7b00 	vstr	d7, [r3]
  if (t10.im == 0.0) {
 80067ce:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80067d2:	ed93 7b02 	vldr	d7, [r3, #8]
 80067d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80067da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067de:	d116      	bne.n	800680e <G_q+0x44f6>
    t10_re = t10.re / 2.0;
 80067e0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80067e4:	ed93 6b00 	vldr	d6, [r3]
 80067e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80067ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80067f0:	f241 3398 	movw	r3, #5016	; 0x1398
 80067f4:	443b      	add	r3, r7
 80067f6:	ed83 7b00 	vstr	d7, [r3]
    t10_im = 0.0;
 80067fa:	f04f 0300 	mov.w	r3, #0
 80067fe:	f04f 0400 	mov.w	r4, #0
 8006802:	f241 3290 	movw	r2, #5008	; 0x1390
 8006806:	443a      	add	r2, r7
 8006808:	e9c2 3400 	strd	r3, r4, [r2]
 800680c:	e039      	b.n	8006882 <G_q+0x456a>
  } else if (t10.re == 0.0) {
 800680e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006812:	ed93 7b00 	vldr	d7, [r3]
 8006816:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800681a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800681e:	d116      	bne.n	800684e <G_q+0x4536>
    t10_re = 0.0;
 8006820:	f04f 0300 	mov.w	r3, #0
 8006824:	f04f 0400 	mov.w	r4, #0
 8006828:	f241 3298 	movw	r2, #5016	; 0x1398
 800682c:	443a      	add	r2, r7
 800682e:	e9c2 3400 	strd	r3, r4, [r2]
    t10_im = t10.im / 2.0;
 8006832:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006836:	ed93 6b02 	vldr	d6, [r3, #8]
 800683a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800683e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006842:	f241 3390 	movw	r3, #5008	; 0x1390
 8006846:	443b      	add	r3, r7
 8006848:	ed83 7b00 	vstr	d7, [r3]
 800684c:	e019      	b.n	8006882 <G_q+0x456a>
  } else {
    t10_re = t10.re / 2.0;
 800684e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006852:	ed93 6b00 	vldr	d6, [r3]
 8006856:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800685a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800685e:	f241 3398 	movw	r3, #5016	; 0x1398
 8006862:	443b      	add	r3, r7
 8006864:	ed83 7b00 	vstr	d7, [r3]
    t10_im = t10.im / 2.0;
 8006868:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800686c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006870:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006874:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006878:	f241 3390 	movw	r3, #5008	; 0x1390
 800687c:	443b      	add	r3, r7
 800687e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t11.im == 0.0) {
 8006882:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006886:	ed93 7b02 	vldr	d7, [r3, #8]
 800688a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	d116      	bne.n	80068c2 <G_q+0x45aa>
    t34_re = t11.re / 2.0;
 8006894:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006898:	ed93 6b00 	vldr	d6, [r3]
 800689c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068a4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80068a8:	443b      	add	r3, r7
 80068aa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80068ae:	f04f 0300 	mov.w	r3, #0
 80068b2:	f04f 0400 	mov.w	r4, #0
 80068b6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80068ba:	443a      	add	r2, r7
 80068bc:	e9c2 3400 	strd	r3, r4, [r2]
 80068c0:	e039      	b.n	8006936 <G_q+0x461e>
  } else if (t11.re == 0.0) {
 80068c2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80068c6:	ed93 7b00 	vldr	d7, [r3]
 80068ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068d2:	d116      	bne.n	8006902 <G_q+0x45ea>
    t34_re = 0.0;
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	f04f 0400 	mov.w	r4, #0
 80068dc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80068e0:	443a      	add	r2, r7
 80068e2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t11.im / 2.0;
 80068e6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80068ea:	ed93 6b02 	vldr	d6, [r3, #8]
 80068ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068f6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80068fa:	443b      	add	r3, r7
 80068fc:	ed83 7b00 	vstr	d7, [r3]
 8006900:	e019      	b.n	8006936 <G_q+0x461e>
  } else {
    t34_re = t11.re / 2.0;
 8006902:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006906:	ed93 6b00 	vldr	d6, [r3]
 800690a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800690e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006912:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006916:	443b      	add	r3, r7
 8006918:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t11.im / 2.0;
 800691c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006920:	ed93 6b02 	vldr	d6, [r3, #8]
 8006924:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006928:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800692c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006930:	443b      	add	r3, r7
 8006932:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t12.im == 0.0) {
 8006936:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800693a:	ed93 7b02 	vldr	d7, [r3, #8]
 800693e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006946:	d115      	bne.n	8006974 <G_q+0x465c>
    t12_re = t12.re / 2.0;
 8006948:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800694c:	ed93 6b00 	vldr	d6, [r3]
 8006950:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006954:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006958:	f241 3388 	movw	r3, #5000	; 0x1388
 800695c:	443b      	add	r3, r7
 800695e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	f04f 0400 	mov.w	r4, #0
 800696a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800696e:	e9c2 3400 	strd	r3, r4, [r2]
 8006972:	e037      	b.n	80069e4 <G_q+0x46cc>
  } else if (t12.re == 0.0) {
 8006974:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006978:	ed93 7b00 	vldr	d7, [r3]
 800697c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006984:	d115      	bne.n	80069b2 <G_q+0x469a>
    t12_re = 0.0;
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	f04f 0400 	mov.w	r4, #0
 800698e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006992:	443a      	add	r2, r7
 8006994:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t12.im / 2.0;
 8006998:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 800699c:	ed93 6b02 	vldr	d6, [r3, #8]
 80069a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069a8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80069ac:	ed83 7b00 	vstr	d7, [r3]
 80069b0:	e018      	b.n	80069e4 <G_q+0x46cc>
  } else {
    t12_re = t12.re / 2.0;
 80069b2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80069b6:	ed93 6b00 	vldr	d6, [r3]
 80069ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069c2:	f241 3388 	movw	r3, #5000	; 0x1388
 80069c6:	443b      	add	r3, r7
 80069c8:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t12.im / 2.0;
 80069cc:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80069d0:	ed93 6b02 	vldr	d6, [r3, #8]
 80069d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80069d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80069dc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80069e0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t13.im == 0.0) {
 80069e4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80069e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80069ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80069f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069f4:	d116      	bne.n	8006a24 <G_q+0x470c>
    t13_re = t13.re / 2.0;
 80069f6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80069fa:	ed93 6b00 	vldr	d6, [r3]
 80069fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a06:	f241 3378 	movw	r3, #4984	; 0x1378
 8006a0a:	443b      	add	r3, r7
 8006a0c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8006a10:	f04f 0300 	mov.w	r3, #0
 8006a14:	f04f 0400 	mov.w	r4, #0
 8006a18:	f241 3270 	movw	r2, #4976	; 0x1370
 8006a1c:	443a      	add	r2, r7
 8006a1e:	e9c2 3400 	strd	r3, r4, [r2]
 8006a22:	e03f      	b.n	8006aa4 <G_q+0x478c>
  } else if (t13.re == 0.0) {
 8006a24:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006a28:	ed93 7b00 	vldr	d7, [r3]
 8006a2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a34:	d11c      	bne.n	8006a70 <G_q+0x4758>
    t13_re = 0.0;
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	f04f 0400 	mov.w	r4, #0
 8006a3e:	f241 3278 	movw	r2, #4984	; 0x1378
 8006a42:	443a      	add	r2, r7
 8006a44:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t13.im / 2.0;
 8006a48:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006a4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006a50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a58:	f241 3370 	movw	r3, #4976	; 0x1370
 8006a5c:	443b      	add	r3, r7
 8006a5e:	ed83 7b00 	vstr	d7, [r3]
 8006a62:	e01f      	b.n	8006aa4 <G_q+0x478c>
 8006a64:	f3af 8000 	nop.w
	...
  } else {
    t13_re = t13.re / 2.0;
 8006a70:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006a74:	ed93 6b00 	vldr	d6, [r3]
 8006a78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a80:	f241 3378 	movw	r3, #4984	; 0x1378
 8006a84:	443b      	add	r3, r7
 8006a86:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t13.im / 2.0;
 8006a8a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006a8e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006a92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a9a:	f241 3370 	movw	r3, #4976	; 0x1370
 8006a9e:	443b      	add	r3, r7
 8006aa0:	ed83 7b00 	vstr	d7, [r3]
  }

  t10_re += t34_re;
 8006aa4:	f241 3398 	movw	r3, #5016	; 0x1398
 8006aa8:	443b      	add	r3, r7
 8006aaa:	ed93 6b00 	vldr	d6, [r3]
 8006aae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006ab2:	443b      	add	r3, r7
 8006ab4:	ed93 7b00 	vldr	d7, [r3]
 8006ab8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006abc:	f241 3398 	movw	r3, #5016	; 0x1398
 8006ac0:	443b      	add	r3, r7
 8006ac2:	ed83 7b00 	vstr	d7, [r3]
  t10_im += t34_im;
 8006ac6:	f241 3390 	movw	r3, #5008	; 0x1390
 8006aca:	443b      	add	r3, r7
 8006acc:	ed93 6b00 	vldr	d6, [r3]
 8006ad0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006ad4:	443b      	add	r3, r7
 8006ad6:	ed93 7b00 	vldr	d7, [r3]
 8006ada:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ade:	f241 3390 	movw	r3, #5008	; 0x1390
 8006ae2:	443b      	add	r3, r7
 8006ae4:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t13_re;
 8006ae8:	f241 3388 	movw	r3, #5000	; 0x1388
 8006aec:	443b      	add	r3, r7
 8006aee:	ed93 6b00 	vldr	d6, [r3]
 8006af2:	f241 3378 	movw	r3, #4984	; 0x1378
 8006af6:	443b      	add	r3, r7
 8006af8:	ed93 7b00 	vldr	d7, [r3]
 8006afc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b00:	f241 3388 	movw	r3, #5000	; 0x1388
 8006b04:	443b      	add	r3, r7
 8006b06:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 8006b0a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006b0e:	ed93 6b00 	vldr	d6, [r3]
 8006b12:	f241 3370 	movw	r3, #4976	; 0x1370
 8006b16:	443b      	add	r3, r7
 8006b18:	ed93 7b00 	vldr	d7, [r3]
 8006b1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006b20:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006b24:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t14.re * 0.0 - t14.im * 0.5) - (t15.re * 0.0 - t15.im * 0.5);
 8006b28:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006b2c:	ed93 7b00 	vldr	d7, [r3]
 8006b30:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8006a68 <G_q+0x4750>
 8006b34:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b38:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006b3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b40:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006b44:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006b48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006b4c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006b50:	ed93 7b00 	vldr	d7, [r3]
 8006b54:	ed1f 5b3c 	vldr	d5, [pc, #-240]	; 8006a68 <G_q+0x4750>
 8006b58:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006b5c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006b60:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b64:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006b68:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006b6c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006b70:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006b74:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006b78:	443b      	add	r3, r7
 8006b7a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t14.re * 0.5 + t14.im * 0.0) - (t15.re * 0.5 + t15.im * 0.0);
 8006b7e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006b82:	ed93 7b00 	vldr	d7, [r3]
 8006b86:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006b8a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006b8e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006b92:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b96:	ed1f 5b4c 	vldr	d5, [pc, #-304]	; 8006a68 <G_q+0x4750>
 8006b9a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006b9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ba2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006ba6:	ed93 7b00 	vldr	d7, [r3]
 8006baa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006bae:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006bb2:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006bb6:	ed93 7b02 	vldr	d7, [r3, #8]
 8006bba:	ed1f 4b55 	vldr	d4, [pc, #-340]	; 8006a68 <G_q+0x4750>
 8006bbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006bc2:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006bc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006bca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006bce:	443b      	add	r3, r7
 8006bd0:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16.re * 0.0 - t16.im * 0.5) - (t17.re * 0.0 - t17.im * 0.5);
 8006bd4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006bd8:	ed93 7b00 	vldr	d7, [r3]
 8006bdc:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8006a68 <G_q+0x4750>
 8006be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006be4:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006be8:	ed93 7b02 	vldr	d7, [r3, #8]
 8006bec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006bf0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006bf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006bf8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006bfc:	ed93 7b00 	vldr	d7, [r3]
 8006c00:	ed1f 5b67 	vldr	d5, [pc, #-412]	; 8006a68 <G_q+0x4750>
 8006c04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006c08:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006c0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006c14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006c18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006c1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c20:	f241 3368 	movw	r3, #4968	; 0x1368
 8006c24:	443b      	add	r3, r7
 8006c26:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16.re * 0.5 + t16.im * 0.0) - (t17.re * 0.5 + t17.im * 0.0);
 8006c2a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006c2e:	ed93 7b00 	vldr	d7, [r3]
 8006c32:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006c36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006c3a:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006c3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c42:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8006a68 <G_q+0x4750>
 8006c46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006c4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006c4e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006c52:	ed93 7b00 	vldr	d7, [r3]
 8006c56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006c5a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006c5e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006c62:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c66:	ed1f 4b80 	vldr	d4, [pc, #-512]	; 8006a68 <G_q+0x4750>
 8006c6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006c6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006c72:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006c76:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006c7a:	ed83 7b00 	vstr	d7, [r3]
  if (t19.im == 0.0) {
 8006c7e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c82:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c8e:	d116      	bne.n	8006cbe <G_q+0x49a6>
    t19_re = t19.re / 2.0;
 8006c90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c94:	ed93 6b00 	vldr	d6, [r3]
 8006c98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ca0:	f241 3358 	movw	r3, #4952	; 0x1358
 8006ca4:	443b      	add	r3, r7
 8006ca6:	ed83 7b00 	vstr	d7, [r3]
    t19_im = 0.0;
 8006caa:	f04f 0300 	mov.w	r3, #0
 8006cae:	f04f 0400 	mov.w	r4, #0
 8006cb2:	f241 3250 	movw	r2, #4944	; 0x1350
 8006cb6:	443a      	add	r2, r7
 8006cb8:	e9c2 3400 	strd	r3, r4, [r2]
 8006cbc:	e039      	b.n	8006d32 <G_q+0x4a1a>
  } else if (t19.re == 0.0) {
 8006cbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cc2:	ed93 7b00 	vldr	d7, [r3]
 8006cc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006cce:	d116      	bne.n	8006cfe <G_q+0x49e6>
    t19_re = 0.0;
 8006cd0:	f04f 0300 	mov.w	r3, #0
 8006cd4:	f04f 0400 	mov.w	r4, #0
 8006cd8:	f241 3258 	movw	r2, #4952	; 0x1358
 8006cdc:	443a      	add	r2, r7
 8006cde:	e9c2 3400 	strd	r3, r4, [r2]
    t19_im = t19.im / 2.0;
 8006ce2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ce6:	ed93 6b02 	vldr	d6, [r3, #8]
 8006cea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006cee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cf2:	f241 3350 	movw	r3, #4944	; 0x1350
 8006cf6:	443b      	add	r3, r7
 8006cf8:	ed83 7b00 	vstr	d7, [r3]
 8006cfc:	e019      	b.n	8006d32 <G_q+0x4a1a>
  } else {
    t19_re = t19.re / 2.0;
 8006cfe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d02:	ed93 6b00 	vldr	d6, [r3]
 8006d06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d0e:	f241 3358 	movw	r3, #4952	; 0x1358
 8006d12:	443b      	add	r3, r7
 8006d14:	ed83 7b00 	vstr	d7, [r3]
    t19_im = t19.im / 2.0;
 8006d18:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006d1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d28:	f241 3350 	movw	r3, #4944	; 0x1350
 8006d2c:	443b      	add	r3, r7
 8006d2e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t20.im == 0.0) {
 8006d32:	4bcb      	ldr	r3, [pc, #812]	; (8007060 <G_q+0x4d48>)
 8006d34:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006d38:	443a      	add	r2, r7
 8006d3a:	4413      	add	r3, r2
 8006d3c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d48:	d118      	bne.n	8006d7c <G_q+0x4a64>
    t20_re = t20.re / 2.0;
 8006d4a:	4bc5      	ldr	r3, [pc, #788]	; (8007060 <G_q+0x4d48>)
 8006d4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006d50:	443a      	add	r2, r7
 8006d52:	4413      	add	r3, r2
 8006d54:	ed93 6b00 	vldr	d6, [r3]
 8006d58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d60:	f241 3348 	movw	r3, #4936	; 0x1348
 8006d64:	443b      	add	r3, r7
 8006d66:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	f04f 0400 	mov.w	r4, #0
 8006d72:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8006d76:	e9c2 3400 	strd	r3, r4, [r2]
 8006d7a:	e043      	b.n	8006e04 <G_q+0x4aec>
  } else if (t20.re == 0.0) {
 8006d7c:	4bb8      	ldr	r3, [pc, #736]	; (8007060 <G_q+0x4d48>)
 8006d7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006d82:	443a      	add	r2, r7
 8006d84:	4413      	add	r3, r2
 8006d86:	ed93 7b00 	vldr	d7, [r3]
 8006d8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d92:	d118      	bne.n	8006dc6 <G_q+0x4aae>
    t20_re = 0.0;
 8006d94:	f04f 0300 	mov.w	r3, #0
 8006d98:	f04f 0400 	mov.w	r4, #0
 8006d9c:	f241 3248 	movw	r2, #4936	; 0x1348
 8006da0:	443a      	add	r2, r7
 8006da2:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t20.im / 2.0;
 8006da6:	4bae      	ldr	r3, [pc, #696]	; (8007060 <G_q+0x4d48>)
 8006da8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006dac:	443a      	add	r2, r7
 8006dae:	4413      	add	r3, r2
 8006db0:	ed93 6b02 	vldr	d6, [r3, #8]
 8006db4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006dbc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006dc0:	ed83 7b00 	vstr	d7, [r3]
 8006dc4:	e01e      	b.n	8006e04 <G_q+0x4aec>
  } else {
    t20_re = t20.re / 2.0;
 8006dc6:	4ba6      	ldr	r3, [pc, #664]	; (8007060 <G_q+0x4d48>)
 8006dc8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006dcc:	443a      	add	r2, r7
 8006dce:	4413      	add	r3, r2
 8006dd0:	ed93 6b00 	vldr	d6, [r3]
 8006dd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006dd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ddc:	f241 3348 	movw	r3, #4936	; 0x1348
 8006de0:	443b      	add	r3, r7
 8006de2:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t20.im / 2.0;
 8006de6:	4b9e      	ldr	r3, [pc, #632]	; (8007060 <G_q+0x4d48>)
 8006de8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006dec:	443a      	add	r2, r7
 8006dee:	4413      	add	r3, r2
 8006df0:	ed93 6b02 	vldr	d6, [r3, #8]
 8006df4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006df8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006dfc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006e00:	ed83 7b00 	vstr	d7, [r3]
  }

  b_t10_re = (t10_re * t12_re - t10_im * t12_im) + (t34_re * t16_re - t34_im *
 8006e04:	f241 3398 	movw	r3, #5016	; 0x1398
 8006e08:	443b      	add	r3, r7
 8006e0a:	ed93 6b00 	vldr	d6, [r3]
 8006e0e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e12:	443b      	add	r3, r7
 8006e14:	ed93 7b00 	vldr	d7, [r3]
 8006e18:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006e1c:	f241 3390 	movw	r3, #5008	; 0x1390
 8006e20:	443b      	add	r3, r7
 8006e22:	ed93 5b00 	vldr	d5, [r3]
 8006e26:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006e2a:	ed93 7b00 	vldr	d7, [r3]
 8006e2e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006e32:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006e36:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006e3a:	443b      	add	r3, r7
 8006e3c:	ed93 5b00 	vldr	d5, [r3]
 8006e40:	f241 3368 	movw	r3, #4968	; 0x1368
 8006e44:	443b      	add	r3, r7
 8006e46:	ed93 7b00 	vldr	d7, [r3]
 8006e4a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006e4e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006e52:	443b      	add	r3, r7
 8006e54:	ed93 4b00 	vldr	d4, [r3]
 8006e58:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006e5c:	ed93 7b00 	vldr	d7, [r3]
 8006e60:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006e64:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006e68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006e6c:	f241 3338 	movw	r3, #4920	; 0x1338
 8006e70:	443b      	add	r3, r7
 8006e72:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t10_im = (t10_re * t12_im + t10_im * t12_re) + (t34_re * t16_im + t34_im *
 8006e76:	f241 3398 	movw	r3, #5016	; 0x1398
 8006e7a:	443b      	add	r3, r7
 8006e7c:	ed93 6b00 	vldr	d6, [r3]
 8006e80:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006e84:	ed93 7b00 	vldr	d7, [r3]
 8006e88:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006e8c:	f241 3390 	movw	r3, #5008	; 0x1390
 8006e90:	443b      	add	r3, r7
 8006e92:	ed93 5b00 	vldr	d5, [r3]
 8006e96:	f241 3388 	movw	r3, #5000	; 0x1388
 8006e9a:	443b      	add	r3, r7
 8006e9c:	ed93 7b00 	vldr	d7, [r3]
 8006ea0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8006ea4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006ea8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006eac:	443b      	add	r3, r7
 8006eae:	ed93 5b00 	vldr	d5, [r3]
 8006eb2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006eb6:	ed93 7b00 	vldr	d7, [r3]
 8006eba:	ee25 5b07 	vmul.f64	d5, d5, d7
 8006ebe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006ec2:	443b      	add	r3, r7
 8006ec4:	ed93 4b00 	vldr	d4, [r3]
 8006ec8:	f241 3368 	movw	r3, #4968	; 0x1368
 8006ecc:	443b      	add	r3, r7
 8006ece:	ed93 7b00 	vldr	d7, [r3]
 8006ed2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8006ed6:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006eda:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006ede:	f241 3390 	movw	r3, #5008	; 0x1390
 8006ee2:	443b      	add	r3, r7
 8006ee4:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t19_re += t20_re;
 8006ee8:	f241 3358 	movw	r3, #4952	; 0x1358
 8006eec:	443b      	add	r3, r7
 8006eee:	ed93 6b00 	vldr	d6, [r3]
 8006ef2:	f241 3348 	movw	r3, #4936	; 0x1348
 8006ef6:	443b      	add	r3, r7
 8006ef8:	ed93 7b00 	vldr	d7, [r3]
 8006efc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f00:	f241 3358 	movw	r3, #4952	; 0x1358
 8006f04:	443b      	add	r3, r7
 8006f06:	ed83 7b00 	vstr	d7, [r3]
  t19_im += t20_im;
 8006f0a:	f241 3350 	movw	r3, #4944	; 0x1350
 8006f0e:	443b      	add	r3, r7
 8006f10:	ed93 6b00 	vldr	d6, [r3]
 8006f14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8006f18:	ed93 7b00 	vldr	d7, [r3]
 8006f1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006f20:	f241 3350 	movw	r3, #4944	; 0x1350
 8006f24:	443b      	add	r3, r7
 8006f26:	ed83 7b00 	vstr	d7, [r3]
  if (t25.im == 0.0) {
 8006f2a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006f2e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3a:	d116      	bne.n	8006f6a <G_q+0x4c52>
    t13_re = t25.re / 2.0;
 8006f3c:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006f40:	ed93 6b00 	vldr	d6, [r3]
 8006f44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f4c:	f241 3378 	movw	r3, #4984	; 0x1378
 8006f50:	443b      	add	r3, r7
 8006f52:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	f04f 0400 	mov.w	r4, #0
 8006f5e:	f241 3270 	movw	r2, #4976	; 0x1370
 8006f62:	443a      	add	r2, r7
 8006f64:	e9c2 3400 	strd	r3, r4, [r2]
 8006f68:	e039      	b.n	8006fde <G_q+0x4cc6>
  } else if (t25.re == 0.0) {
 8006f6a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006f6e:	ed93 7b00 	vldr	d7, [r3]
 8006f72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7a:	d116      	bne.n	8006faa <G_q+0x4c92>
    t13_re = 0.0;
 8006f7c:	f04f 0300 	mov.w	r3, #0
 8006f80:	f04f 0400 	mov.w	r4, #0
 8006f84:	f241 3278 	movw	r2, #4984	; 0x1378
 8006f88:	443a      	add	r2, r7
 8006f8a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t25.im / 2.0;
 8006f8e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006f92:	ed93 6b02 	vldr	d6, [r3, #8]
 8006f96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f9e:	f241 3370 	movw	r3, #4976	; 0x1370
 8006fa2:	443b      	add	r3, r7
 8006fa4:	ed83 7b00 	vstr	d7, [r3]
 8006fa8:	e019      	b.n	8006fde <G_q+0x4cc6>
  } else {
    t13_re = t25.re / 2.0;
 8006faa:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006fae:	ed93 6b00 	vldr	d6, [r3]
 8006fb2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fba:	f241 3378 	movw	r3, #4984	; 0x1378
 8006fbe:	443b      	add	r3, r7
 8006fc0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t25.im / 2.0;
 8006fc4:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8006fc8:	ed93 6b02 	vldr	d6, [r3, #8]
 8006fcc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fd4:	f241 3370 	movw	r3, #4976	; 0x1370
 8006fd8:	443b      	add	r3, r7
 8006fda:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t26.im == 0.0) {
 8006fde:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8006fe2:	ed93 7b02 	vldr	d7, [r3, #8]
 8006fe6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fee:	d116      	bne.n	800701e <G_q+0x4d06>
    t34_re = t26.re / 2.0;
 8006ff0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8006ff4:	ed93 6b00 	vldr	d6, [r3]
 8006ff8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ffc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007000:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007004:	443b      	add	r3, r7
 8007006:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	f04f 0400 	mov.w	r4, #0
 8007012:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8007016:	443a      	add	r2, r7
 8007018:	e9c2 3400 	strd	r3, r4, [r2]
 800701c:	e03c      	b.n	8007098 <G_q+0x4d80>
  } else if (t26.re == 0.0) {
 800701e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007022:	ed93 7b00 	vldr	d7, [r3]
 8007026:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800702a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702e:	d119      	bne.n	8007064 <G_q+0x4d4c>
    t34_re = 0.0;
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	f04f 0400 	mov.w	r4, #0
 8007038:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800703c:	443a      	add	r2, r7
 800703e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t26.im / 2.0;
 8007042:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007046:	ed93 6b02 	vldr	d6, [r3, #8]
 800704a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800704e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007052:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007056:	443b      	add	r3, r7
 8007058:	ed83 7b00 	vstr	d7, [r3]
 800705c:	e01c      	b.n	8007098 <G_q+0x4d80>
 800705e:	bf00      	nop
 8007060:	ffffed50 	.word	0xffffed50
  } else {
    t34_re = t26.re / 2.0;
 8007064:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007068:	ed93 6b00 	vldr	d6, [r3]
 800706c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007070:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007074:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007078:	443b      	add	r3, r7
 800707a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t26.im / 2.0;
 800707e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007082:	ed93 6b02 	vldr	d6, [r3, #8]
 8007086:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800708a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800708e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007092:	443b      	add	r3, r7
 8007094:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 8007098:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800709c:	ed93 7b00 	vldr	d7, [r3]
 80070a0:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8007468 <G_q+0x5150>
 80070a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80070ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80070b0:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8007470 <G_q+0x5158>
 80070b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80070b8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070bc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80070c0:	ed93 7b00 	vldr	d7, [r3]
 80070c4:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8007468 <G_q+0x5150>
 80070c8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t28.im * 3.061616997868383E-17);
 80070cc:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80070d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80070d4:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8007470 <G_q+0x5158>
 80070d8:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 80070dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80070e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80070e4:	f241 3368 	movw	r3, #4968	; 0x1368
 80070e8:	443b      	add	r3, r7
 80070ea:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 80070ee:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80070f2:	ed93 7b00 	vldr	d7, [r3]
 80070f6:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8007470 <G_q+0x5158>
 80070fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80070fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007102:	ed93 7b02 	vldr	d7, [r3, #8]
 8007106:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8007468 <G_q+0x5150>
 800710a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800710e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007112:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007116:	ed93 7b00 	vldr	d7, [r3]
 800711a:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 8007470 <G_q+0x5158>
 800711e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t28.im * 0.0);
 8007122:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007126:	ed93 7b02 	vldr	d7, [r3, #8]
 800712a:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 8007468 <G_q+0x5150>
 800712e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007132:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 8007136:	ee36 7b47 	vsub.f64	d7, d6, d7
 800713a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800713e:	ed83 7b00 	vstr	d7, [r3]
  t13_re += t34_re;
 8007142:	f241 3378 	movw	r3, #4984	; 0x1378
 8007146:	443b      	add	r3, r7
 8007148:	ed93 6b00 	vldr	d6, [r3]
 800714c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007150:	443b      	add	r3, r7
 8007152:	ed93 7b00 	vldr	d7, [r3]
 8007156:	ee36 7b07 	vadd.f64	d7, d6, d7
 800715a:	f241 3378 	movw	r3, #4984	; 0x1378
 800715e:	443b      	add	r3, r7
 8007160:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8007164:	f241 3370 	movw	r3, #4976	; 0x1370
 8007168:	443b      	add	r3, r7
 800716a:	ed93 6b00 	vldr	d6, [r3]
 800716e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007172:	443b      	add	r3, r7
 8007174:	ed93 7b00 	vldr	d7, [r3]
 8007178:	ee36 7b07 	vadd.f64	d7, d6, d7
 800717c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007180:	443b      	add	r3, r7
 8007182:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t31.re * 3.061616997868383E-17 + t32.re * 3.061616997868383E-17;
 8007186:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800718a:	ed93 7b00 	vldr	d7, [r3]
 800718e:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8007470 <G_q+0x5158>
 8007192:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007196:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800719a:	ed93 7b00 	vldr	d7, [r3]
 800719e:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8007470 <G_q+0x5158>
 80071a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071aa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80071ae:	443b      	add	r3, r7
 80071b0:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t31.im * 3.061616997868383E-17 + t32.im * 3.061616997868383E-17;
 80071b4:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80071b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80071bc:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8007470 <G_q+0x5158>
 80071c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80071c4:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 80071c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80071cc:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8007470 <G_q+0x5158>
 80071d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80071d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071d8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80071dc:	443b      	add	r3, r7
 80071de:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t29.re * 0.0 - t29.im * 0.5) - (t30.re * 0.0 - t30.im * 0.5);
 80071e2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80071e6:	ed93 7b00 	vldr	d7, [r3]
 80071ea:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8007468 <G_q+0x5150>
 80071ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80071f2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80071f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80071fa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80071fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007202:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007206:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800720a:	ed93 7b00 	vldr	d7, [r3]
 800720e:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8007468 <G_q+0x5150>
 8007212:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007216:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 800721a:	ed93 7b02 	vldr	d7, [r3, #8]
 800721e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007222:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007226:	ee35 7b47 	vsub.f64	d7, d5, d7
 800722a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800722e:	f241 3388 	movw	r3, #5000	; 0x1388
 8007232:	443b      	add	r3, r7
 8007234:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t29.re * 0.5 + t29.im * 0.0) - (t30.re * 0.5 + t30.im * 0.0);
 8007238:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800723c:	ed93 7b00 	vldr	d7, [r3]
 8007240:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007244:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007248:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 800724c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007250:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8007468 <G_q+0x5150>
 8007254:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007258:	ee36 6b07 	vadd.f64	d6, d6, d7
 800725c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007260:	ed93 7b00 	vldr	d7, [r3]
 8007264:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007268:	ee27 5b05 	vmul.f64	d5, d7, d5
 800726c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007270:	ed93 7b02 	vldr	d7, [r3, #8]
 8007274:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8007468 <G_q+0x5150>
 8007278:	ee27 7b04 	vmul.f64	d7, d7, d4
 800727c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007280:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007284:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007288:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t21.re * 0.0 - t21.im * 0.5) - (t22.re * 0.0 - t22.im * 0.5);
 800728c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007290:	ed93 7b00 	vldr	d7, [r3]
 8007294:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007468 <G_q+0x5150>
 8007298:	ee27 6b06 	vmul.f64	d6, d7, d6
 800729c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072a0:	ed93 7b02 	vldr	d7, [r3, #8]
 80072a4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80072a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80072ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80072b0:	4b73      	ldr	r3, [pc, #460]	; (8007480 <G_q+0x5168>)
 80072b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80072b6:	443a      	add	r2, r7
 80072b8:	4413      	add	r3, r2
 80072ba:	ed93 7b00 	vldr	d7, [r3]
 80072be:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007468 <G_q+0x5150>
 80072c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80072c6:	4b6e      	ldr	r3, [pc, #440]	; (8007480 <G_q+0x5168>)
 80072c8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80072cc:	443a      	add	r2, r7
 80072ce:	4413      	add	r3, r2
 80072d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80072d4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80072d8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80072dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80072e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80072e4:	f241 3348 	movw	r3, #4936	; 0x1348
 80072e8:	443b      	add	r3, r7
 80072ea:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t21.re * 0.5 + t21.im * 0.0) - (t22.re * 0.5 + t22.im * 0.0);
 80072ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80072f2:	ed93 7b00 	vldr	d7, [r3]
 80072f6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80072fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80072fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007302:	ed93 7b02 	vldr	d7, [r3, #8]
 8007306:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8007468 <G_q+0x5150>
 800730a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800730e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007312:	4b5b      	ldr	r3, [pc, #364]	; (8007480 <G_q+0x5168>)
 8007314:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007318:	443a      	add	r2, r7
 800731a:	4413      	add	r3, r2
 800731c:	ed93 7b00 	vldr	d7, [r3]
 8007320:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007324:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007328:	4b55      	ldr	r3, [pc, #340]	; (8007480 <G_q+0x5168>)
 800732a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800732e:	443a      	add	r2, r7
 8007330:	4413      	add	r3, r2
 8007332:	ed93 7b02 	vldr	d7, [r3, #8]
 8007336:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8007468 <G_q+0x5150>
 800733a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800733e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007342:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007346:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800734a:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 800734e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007352:	ed93 7b00 	vldr	d7, [r3]
 8007356:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8007468 <G_q+0x5150>
 800735a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800735e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007362:	ed93 7b02 	vldr	d7, [r3, #8]
 8007366:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8007478 <G_q+0x5160>
 800736a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800736e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007372:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007376:	ed93 7b00 	vldr	d7, [r3]
 800737a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8007468 <G_q+0x5150>
 800737e:	ee27 5b05 	vmul.f64	d5, d7, d5
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 8007382:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007386:	ed93 7b02 	vldr	d7, [r3, #8]
 800738a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8007478 <G_q+0x5160>
 800738e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007392:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007396:	ee36 6b47 	vsub.f64	d6, d6, d7
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 800739a:	f241 3368 	movw	r3, #4968	; 0x1368
 800739e:	443b      	add	r3, r7
 80073a0:	ed93 5b00 	vldr	d5, [r3]
 80073a4:	f241 3378 	movw	r3, #4984	; 0x1378
 80073a8:	443b      	add	r3, r7
 80073aa:	ed93 7b00 	vldr	d7, [r3]
 80073ae:	ee25 5b07 	vmul.f64	d5, d5, d7
 80073b2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80073b6:	ed93 4b00 	vldr	d4, [r3]
 80073ba:	f241 3370 	movw	r3, #4976	; 0x1370
 80073be:	443b      	add	r3, r7
 80073c0:	ed93 7b00 	vldr	d7, [r3]
 80073c4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80073c8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80073cc:	ee36 6b47 	vsub.f64	d6, d6, d7
             t13_im)) + (t34_re * t12_re - t34_im * t12_im);
 80073d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80073d4:	443b      	add	r3, r7
 80073d6:	ed93 5b00 	vldr	d5, [r3]
 80073da:	f241 3388 	movw	r3, #5000	; 0x1388
 80073de:	443b      	add	r3, r7
 80073e0:	ed93 7b00 	vldr	d7, [r3]
 80073e4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80073e8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80073ec:	443b      	add	r3, r7
 80073ee:	ed93 4b00 	vldr	d4, [r3]
 80073f2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80073f6:	ed93 7b00 	vldr	d7, [r3]
 80073fa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80073fe:	ee35 7b47 	vsub.f64	d7, d5, d7
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007402:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007406:	f241 3330 	movw	r3, #4912	; 0x1330
 800740a:	443b      	add	r3, r7
 800740c:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007410:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007414:	ed93 7b00 	vldr	d7, [r3]
 8007418:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8007478 <G_q+0x5160>
 800741c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007420:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007424:	ed93 7b02 	vldr	d7, [r3, #8]
 8007428:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8007468 <G_q+0x5150>
 800742c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007430:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007434:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007438:	ed93 7b00 	vldr	d7, [r3]
 800743c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8007478 <G_q+0x5160>
 8007440:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 8007444:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007448:	ed93 7b02 	vldr	d7, [r3, #8]
 800744c:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8007468 <G_q+0x5150>
 8007450:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007454:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007458:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800745c:	f241 3368 	movw	r3, #4968	; 0x1368
 8007460:	e010      	b.n	8007484 <G_q+0x516c>
 8007462:	bf00      	nop
 8007464:	f3af 8000 	nop.w
	...
 8007470:	33145c07 	.word	0x33145c07
 8007474:	3c81a626 	.word	0x3c81a626
 8007478:	33145c07 	.word	0x33145c07
 800747c:	3c91a626 	.word	0x3c91a626
 8007480:	ffffed70 	.word	0xffffed70
 8007484:	443b      	add	r3, r7
 8007486:	ed93 5b00 	vldr	d5, [r3]
 800748a:	f241 3370 	movw	r3, #4976	; 0x1370
 800748e:	443b      	add	r3, r7
 8007490:	ed93 7b00 	vldr	d7, [r3]
 8007494:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8007498:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800749c:	ed93 4b00 	vldr	d4, [r3]
 80074a0:	f241 3378 	movw	r3, #4984	; 0x1378
 80074a4:	443b      	add	r3, r7
 80074a6:	ed93 7b00 	vldr	d7, [r3]
 80074aa:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 80074ae:	ee35 7b07 	vadd.f64	d7, d5, d7
 80074b2:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 80074b6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80074ba:	443b      	add	r3, r7
 80074bc:	ed93 5b00 	vldr	d5, [r3]
 80074c0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80074c4:	ed93 7b00 	vldr	d7, [r3]
 80074c8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80074cc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80074d0:	443b      	add	r3, r7
 80074d2:	ed93 4b00 	vldr	d4, [r3]
 80074d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80074da:	443b      	add	r3, r7
 80074dc:	ed93 7b00 	vldr	d7, [r3]
 80074e0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80074e4:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 80074e8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80074ec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80074f0:	443b      	add	r3, r7
 80074f2:	ed83 7b00 	vstr	d7, [r3]
  t54_re = (t54.re * 0.0 - t54.im * 0.5) - (t55.re * 0.0 - t55.im * 0.5);
 80074f6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80074fa:	ed93 7b00 	vldr	d7, [r3]
 80074fe:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8007890 <G_q+0x5578>
 8007502:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007506:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800750a:	ed93 7b02 	vldr	d7, [r3, #8]
 800750e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007512:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007516:	ee36 6b47 	vsub.f64	d6, d6, d7
 800751a:	4bdf      	ldr	r3, [pc, #892]	; (8007898 <G_q+0x5580>)
 800751c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007520:	443a      	add	r2, r7
 8007522:	4413      	add	r3, r2
 8007524:	ed93 7b00 	vldr	d7, [r3]
 8007528:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8007890 <G_q+0x5578>
 800752c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007530:	4bd9      	ldr	r3, [pc, #868]	; (8007898 <G_q+0x5580>)
 8007532:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007536:	443a      	add	r2, r7
 8007538:	4413      	add	r3, r2
 800753a:	ed93 7b02 	vldr	d7, [r3, #8]
 800753e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007542:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007546:	ee35 7b47 	vsub.f64	d7, d5, d7
 800754a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800754e:	f241 3328 	movw	r3, #4904	; 0x1328
 8007552:	443b      	add	r3, r7
 8007554:	ed83 7b00 	vstr	d7, [r3]
  t54_im = (t54.re * 0.5 + t54.im * 0.0) - (t55.re * 0.5 + t55.im * 0.0);
 8007558:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800755c:	ed93 7b00 	vldr	d7, [r3]
 8007560:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007564:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800756c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007570:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8007890 <G_q+0x5578>
 8007574:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007578:	ee36 6b07 	vadd.f64	d6, d6, d7
 800757c:	4bc6      	ldr	r3, [pc, #792]	; (8007898 <G_q+0x5580>)
 800757e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007582:	443a      	add	r2, r7
 8007584:	4413      	add	r3, r2
 8007586:	ed93 7b00 	vldr	d7, [r3]
 800758a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800758e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007592:	4bc1      	ldr	r3, [pc, #772]	; (8007898 <G_q+0x5580>)
 8007594:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007598:	443a      	add	r2, r7
 800759a:	4413      	add	r3, r2
 800759c:	ed93 7b02 	vldr	d7, [r3, #8]
 80075a0:	ed9f 4bbb 	vldr	d4, [pc, #748]	; 8007890 <G_q+0x5578>
 80075a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80075ac:	f241 2378 	movw	r3, #4728	; 0x1278
 80075b0:	443b      	add	r3, r7
 80075b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075b6:	ed83 7b00 	vstr	d7, [r3]
  t10_re = (b_t10_re * t19_re - t10_im * t19_im) + (t20_re * t23_re - t20_im *
 80075ba:	f241 3338 	movw	r3, #4920	; 0x1338
 80075be:	443b      	add	r3, r7
 80075c0:	ed93 6b00 	vldr	d6, [r3]
 80075c4:	f241 3358 	movw	r3, #4952	; 0x1358
 80075c8:	443b      	add	r3, r7
 80075ca:	ed93 7b00 	vldr	d7, [r3]
 80075ce:	ee26 6b07 	vmul.f64	d6, d6, d7
 80075d2:	f241 3390 	movw	r3, #5008	; 0x1390
 80075d6:	443b      	add	r3, r7
 80075d8:	ed93 5b00 	vldr	d5, [r3]
 80075dc:	f241 3350 	movw	r3, #4944	; 0x1350
 80075e0:	443b      	add	r3, r7
 80075e2:	ed93 7b00 	vldr	d7, [r3]
 80075e6:	ee25 7b07 	vmul.f64	d7, d5, d7
 80075ea:	ee36 6b47 	vsub.f64	d6, d6, d7
 80075ee:	f241 3348 	movw	r3, #4936	; 0x1348
 80075f2:	443b      	add	r3, r7
 80075f4:	ed93 5b00 	vldr	d5, [r3]
 80075f8:	f241 3330 	movw	r3, #4912	; 0x1330
 80075fc:	443b      	add	r3, r7
 80075fe:	ed93 7b00 	vldr	d7, [r3]
 8007602:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007606:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800760a:	ed93 4b00 	vldr	d4, [r3]
 800760e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007612:	443b      	add	r3, r7
 8007614:	ed93 7b00 	vldr	d7, [r3]
 8007618:	ee24 7b07 	vmul.f64	d7, d4, d7
 800761c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007620:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007624:	f241 3398 	movw	r3, #5016	; 0x1398
 8007628:	443b      	add	r3, r7
 800762a:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t10_im = (b_t10_re * t19_im + t10_im * t19_re) + (t20_re * t34_re + t20_im *
 800762e:	f241 3338 	movw	r3, #4920	; 0x1338
 8007632:	443b      	add	r3, r7
 8007634:	ed93 6b00 	vldr	d6, [r3]
 8007638:	f241 3350 	movw	r3, #4944	; 0x1350
 800763c:	443b      	add	r3, r7
 800763e:	ed93 7b00 	vldr	d7, [r3]
 8007642:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007646:	f241 3390 	movw	r3, #5008	; 0x1390
 800764a:	443b      	add	r3, r7
 800764c:	ed93 5b00 	vldr	d5, [r3]
 8007650:	f241 3358 	movw	r3, #4952	; 0x1358
 8007654:	443b      	add	r3, r7
 8007656:	ed93 7b00 	vldr	d7, [r3]
 800765a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800765e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007662:	f241 3348 	movw	r3, #4936	; 0x1348
 8007666:	443b      	add	r3, r7
 8007668:	ed93 5b00 	vldr	d5, [r3]
 800766c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007670:	443b      	add	r3, r7
 8007672:	ed93 7b00 	vldr	d7, [r3]
 8007676:	ee25 5b07 	vmul.f64	d5, d5, d7
 800767a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800767e:	ed93 4b00 	vldr	d4, [r3]
 8007682:	f241 3330 	movw	r3, #4912	; 0x1330
 8007686:	443b      	add	r3, r7
 8007688:	ed93 7b00 	vldr	d7, [r3]
 800768c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007690:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007694:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007698:	f241 3390 	movw	r3, #5008	; 0x1390
 800769c:	443b      	add	r3, r7
 800769e:	ed83 7b00 	vstr	d7, [r3]
    t23_re);
  t13_re = (t8.re * 0.0 - t8.im * 0.5) - (t9.re * 0.0 - t9.im * 0.5);
 80076a2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80076a6:	ed93 7b00 	vldr	d7, [r3]
 80076aa:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007890 <G_q+0x5578>
 80076ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 80076b2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80076b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80076ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80076be:	ee27 7b05 	vmul.f64	d7, d7, d5
 80076c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80076c6:	4b75      	ldr	r3, [pc, #468]	; (800789c <G_q+0x5584>)
 80076c8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80076cc:	443a      	add	r2, r7
 80076ce:	4413      	add	r3, r2
 80076d0:	ed93 7b00 	vldr	d7, [r3]
 80076d4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8007890 <G_q+0x5578>
 80076d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80076dc:	4b6f      	ldr	r3, [pc, #444]	; (800789c <G_q+0x5584>)
 80076de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80076e2:	443a      	add	r2, r7
 80076e4:	4413      	add	r3, r2
 80076e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80076ea:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80076ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80076f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80076f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80076fa:	f241 3378 	movw	r3, #4984	; 0x1378
 80076fe:	443b      	add	r3, r7
 8007700:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t8.re * 0.5 + t8.im * 0.0) - (t9.re * 0.5 + t9.im * 0.0);
 8007704:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007708:	ed93 7b00 	vldr	d7, [r3]
 800770c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007710:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007714:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007718:	ed93 7b02 	vldr	d7, [r3, #8]
 800771c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8007890 <G_q+0x5578>
 8007720:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007724:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007728:	4b5c      	ldr	r3, [pc, #368]	; (800789c <G_q+0x5584>)
 800772a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800772e:	443a      	add	r2, r7
 8007730:	4413      	add	r3, r2
 8007732:	ed93 7b00 	vldr	d7, [r3]
 8007736:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800773a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800773e:	4b57      	ldr	r3, [pc, #348]	; (800789c <G_q+0x5584>)
 8007740:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007744:	443a      	add	r2, r7
 8007746:	4413      	add	r3, r2
 8007748:	ed93 7b02 	vldr	d7, [r3, #8]
 800774c:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8007890 <G_q+0x5578>
 8007750:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007754:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007758:	ee36 7b47 	vsub.f64	d7, d6, d7
 800775c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007760:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t5.re * 0.0 - t5.im * 0.5) - (t6.re * 0.0 - t6.im * 0.5);
 8007764:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007768:	ed93 7b00 	vldr	d7, [r3]
 800776c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8007890 <G_q+0x5578>
 8007770:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007774:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007778:	ed93 7b02 	vldr	d7, [r3, #8]
 800777c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007780:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007784:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007788:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800778c:	ed93 7b00 	vldr	d7, [r3]
 8007790:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8007890 <G_q+0x5578>
 8007794:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007798:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800779c:	ed93 7b02 	vldr	d7, [r3, #8]
 80077a0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80077a4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 80077b0:	f241 3370 	movw	r3, #4976	; 0x1370
 80077b4:	443b      	add	r3, r7
 80077b6:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t5.re * 0.5 + t5.im * 0.0) - (t6.re * 0.5 + t6.im * 0.0);
 80077ba:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80077be:	ed93 7b00 	vldr	d7, [r3]
 80077c2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80077c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80077ca:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80077ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80077d2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8007890 <G_q+0x5578>
 80077d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80077da:	ee36 6b07 	vadd.f64	d6, d6, d7
 80077de:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80077e2:	ed93 7b00 	vldr	d7, [r3]
 80077e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80077ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 80077ee:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80077f2:	ed93 7b02 	vldr	d7, [r3, #8]
 80077f6:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8007890 <G_q+0x5578>
 80077fa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077fe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007802:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007806:	f241 3368 	movw	r3, #4968	; 0x1368
 800780a:	443b      	add	r3, r7
 800780c:	ed83 7b00 	vstr	d7, [r3]
  if (t8.im == 0.0) {
 8007810:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007814:	ed93 7b02 	vldr	d7, [r3, #8]
 8007818:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800781c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007820:	d115      	bne.n	800784e <G_q+0x5536>
    t16_im = t8.re / 2.0;
 8007822:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007826:	ed93 6b00 	vldr	d6, [r3]
 800782a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800782e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007832:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007836:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800783a:	f04f 0300 	mov.w	r3, #0
 800783e:	f04f 0400 	mov.w	r4, #0
 8007842:	f241 3248 	movw	r2, #4936	; 0x1348
 8007846:	443a      	add	r2, r7
 8007848:	e9c2 3400 	strd	r3, r4, [r2]
 800784c:	e041      	b.n	80078d2 <G_q+0x55ba>
  } else if (t8.re == 0.0) {
 800784e:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007852:	ed93 7b00 	vldr	d7, [r3]
 8007856:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	d11f      	bne.n	80078a0 <G_q+0x5588>
    t16_im = 0.0;
 8007860:	f04f 0300 	mov.w	r3, #0
 8007864:	f04f 0400 	mov.w	r4, #0
 8007868:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800786c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t8.im / 2.0;
 8007870:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007874:	ed93 6b02 	vldr	d6, [r3, #8]
 8007878:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800787c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007880:	f241 3348 	movw	r3, #4936	; 0x1348
 8007884:	443b      	add	r3, r7
 8007886:	ed83 7b00 	vstr	d7, [r3]
 800788a:	e022      	b.n	80078d2 <G_q+0x55ba>
 800788c:	f3af 8000 	nop.w
	...
 8007898:	ffffec70 	.word	0xffffec70
 800789c:	ffffeff0 	.word	0xffffeff0
  } else {
    t16_im = t8.re / 2.0;
 80078a0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80078a4:	ed93 6b00 	vldr	d6, [r3]
 80078a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80078ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80078b0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80078b4:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t8.im / 2.0;
 80078b8:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80078bc:	ed93 6b02 	vldr	d6, [r3, #8]
 80078c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80078c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80078c8:	f241 3348 	movw	r3, #4936	; 0x1348
 80078cc:	443b      	add	r3, r7
 80078ce:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t85.im == 0.0) {
 80078d2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80078d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80078da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80078de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078e2:	d115      	bne.n	8007910 <G_q+0x55f8>
    t12_im = t85.re / 2.0;
 80078e4:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80078e8:	ed93 6b00 	vldr	d6, [r3]
 80078ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80078f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80078f4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80078f8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 80078fc:	f04f 0300 	mov.w	r3, #0
 8007900:	f04f 0400 	mov.w	r4, #0
 8007904:	f241 3218 	movw	r2, #4888	; 0x1318
 8007908:	443a      	add	r2, r7
 800790a:	e9c2 3400 	strd	r3, r4, [r2]
 800790e:	e037      	b.n	8007980 <G_q+0x5668>
  } else if (t85.re == 0.0) {
 8007910:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007914:	ed93 7b00 	vldr	d7, [r3]
 8007918:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800791c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007920:	d115      	bne.n	800794e <G_q+0x5636>
    t12_im = 0.0;
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	f04f 0400 	mov.w	r4, #0
 800792a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800792e:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t85.im / 2.0;
 8007932:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007936:	ed93 6b02 	vldr	d6, [r3, #8]
 800793a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800793e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007942:	f241 3318 	movw	r3, #4888	; 0x1318
 8007946:	443b      	add	r3, r7
 8007948:	ed83 7b00 	vstr	d7, [r3]
 800794c:	e018      	b.n	8007980 <G_q+0x5668>
  } else {
    t12_im = t85.re / 2.0;
 800794e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007952:	ed93 6b00 	vldr	d6, [r3]
 8007956:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800795a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800795e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007962:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t85.im / 2.0;
 8007966:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800796a:	ed93 6b02 	vldr	d6, [r3, #8]
 800796e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007972:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007976:	f241 3318 	movw	r3, #4888	; 0x1318
 800797a:	443b      	add	r3, r7
 800797c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t3.im == 0.0) {
 8007980:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007984:	ed93 7b02 	vldr	d7, [r3, #8]
 8007988:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800798c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007990:	d115      	bne.n	80079be <G_q+0x56a6>
    t20_im = t3.re / 2.0;
 8007992:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007996:	ed93 6b00 	vldr	d6, [r3]
 800799a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800799e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80079a2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80079a6:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	f04f 0400 	mov.w	r4, #0
 80079b2:	f241 3210 	movw	r2, #4880	; 0x1310
 80079b6:	443a      	add	r2, r7
 80079b8:	e9c2 3400 	strd	r3, r4, [r2]
 80079bc:	e037      	b.n	8007a2e <G_q+0x5716>
  } else if (t3.re == 0.0) {
 80079be:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80079c2:	ed93 7b00 	vldr	d7, [r3]
 80079c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80079ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ce:	d115      	bne.n	80079fc <G_q+0x56e4>
    t20_im = 0.0;
 80079d0:	f04f 0300 	mov.w	r3, #0
 80079d4:	f04f 0400 	mov.w	r4, #0
 80079d8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80079dc:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t3.im / 2.0;
 80079e0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80079e4:	ed93 6b02 	vldr	d6, [r3, #8]
 80079e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80079ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80079f0:	f241 3310 	movw	r3, #4880	; 0x1310
 80079f4:	443b      	add	r3, r7
 80079f6:	ed83 7b00 	vstr	d7, [r3]
 80079fa:	e018      	b.n	8007a2e <G_q+0x5716>
  } else {
    t20_im = t3.re / 2.0;
 80079fc:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007a00:	ed93 6b00 	vldr	d6, [r3]
 8007a04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a0c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007a10:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t3.im / 2.0;
 8007a14:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007a18:	ed93 6b02 	vldr	d6, [r3, #8]
 8007a1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a24:	f241 3310 	movw	r3, #4880	; 0x1310
 8007a28:	443b      	add	r3, r7
 8007a2a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t4.im == 0.0) {
 8007a2e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a32:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3e:	d116      	bne.n	8007a6e <G_q+0x5756>
    t34_re = t4.re / 2.0;
 8007a40:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a44:	ed93 6b00 	vldr	d6, [r3]
 8007a48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a50:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007a54:	443b      	add	r3, r7
 8007a56:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8007a5a:	f04f 0300 	mov.w	r3, #0
 8007a5e:	f04f 0400 	mov.w	r4, #0
 8007a62:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8007a66:	443a      	add	r2, r7
 8007a68:	e9c2 3400 	strd	r3, r4, [r2]
 8007a6c:	e039      	b.n	8007ae2 <G_q+0x57ca>
  } else if (t4.re == 0.0) {
 8007a6e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a72:	ed93 7b00 	vldr	d7, [r3]
 8007a76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	d116      	bne.n	8007aae <G_q+0x5796>
    t34_re = 0.0;
 8007a80:	f04f 0300 	mov.w	r3, #0
 8007a84:	f04f 0400 	mov.w	r4, #0
 8007a88:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007a8c:	443a      	add	r2, r7
 8007a8e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t4.im / 2.0;
 8007a92:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007a96:	ed93 6b02 	vldr	d6, [r3, #8]
 8007a9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007a9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007aa2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007aa6:	443b      	add	r3, r7
 8007aa8:	ed83 7b00 	vstr	d7, [r3]
 8007aac:	e019      	b.n	8007ae2 <G_q+0x57ca>
  } else {
    t34_re = t4.re / 2.0;
 8007aae:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007ab2:	ed93 6b00 	vldr	d6, [r3]
 8007ab6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007aba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007abe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007ac2:	443b      	add	r3, r7
 8007ac4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t4.im / 2.0;
 8007ac8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007acc:	ed93 6b02 	vldr	d6, [r3, #8]
 8007ad0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ad8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007adc:	443b      	add	r3, r7
 8007ade:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im += t12_im;
 8007ae2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007ae6:	ed93 6b00 	vldr	d6, [r3]
 8007aea:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007aee:	ed93 7b00 	vldr	d7, [r3]
 8007af2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007af6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007afa:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t85_im;
 8007afe:	f241 3348 	movw	r3, #4936	; 0x1348
 8007b02:	443b      	add	r3, r7
 8007b04:	ed93 6b00 	vldr	d6, [r3]
 8007b08:	f241 3318 	movw	r3, #4888	; 0x1318
 8007b0c:	443b      	add	r3, r7
 8007b0e:	ed93 7b00 	vldr	d7, [r3]
 8007b12:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007b16:	f241 3348 	movw	r3, #4936	; 0x1348
 8007b1a:	443b      	add	r3, r7
 8007b1c:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_re;
 8007b20:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007b24:	ed93 6b00 	vldr	d6, [r3]
 8007b28:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007b2c:	443b      	add	r3, r7
 8007b2e:	ed93 7b00 	vldr	d7, [r3]
 8007b32:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007b36:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007b3a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 8007b3e:	f241 3310 	movw	r3, #4880	; 0x1310
 8007b42:	443b      	add	r3, r7
 8007b44:	ed93 6b00 	vldr	d6, [r3]
 8007b48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007b4c:	443b      	add	r3, r7
 8007b4e:	ed93 7b00 	vldr	d7, [r3]
 8007b52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007b56:	f241 3310 	movw	r3, #4880	; 0x1310
 8007b5a:	443b      	add	r3, r7
 8007b5c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = t87.re * 0.0;
 8007b60:	4bc5      	ldr	r3, [pc, #788]	; (8007e78 <G_q+0x5b60>)
 8007b62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007b66:	443a      	add	r2, r7
 8007b68:	4413      	add	r3, r2
 8007b6a:	ed93 7b00 	vldr	d7, [r3]
 8007b6e:	f241 2370 	movw	r3, #4720	; 0x1270
 8007b72:	443b      	add	r3, r7
 8007b74:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8007e70 <G_q+0x5b58>
 8007b78:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b7c:	ed83 7b00 	vstr	d7, [r3]
  t19_re = (t19.re * 0.0 - t19.im * 0.5) - (t19_re_tmp - t87.im * 0.5);
 8007b80:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b84:	ed93 7b00 	vldr	d7, [r3]
 8007b88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8007e70 <G_q+0x5b58>
 8007b8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007b90:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007b94:	ed93 7b02 	vldr	d7, [r3, #8]
 8007b98:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007b9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007ba0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007ba4:	4bb4      	ldr	r3, [pc, #720]	; (8007e78 <G_q+0x5b60>)
 8007ba6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007baa:	443a      	add	r2, r7
 8007bac:	4413      	add	r3, r2
 8007bae:	ed93 7b02 	vldr	d7, [r3, #8]
 8007bb2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007bb6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007bba:	f241 2370 	movw	r3, #4720	; 0x1270
 8007bbe:	443b      	add	r3, r7
 8007bc0:	ed93 5b00 	vldr	d5, [r3]
 8007bc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007bc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007bcc:	f241 3358 	movw	r3, #4952	; 0x1358
 8007bd0:	443b      	add	r3, r7
 8007bd2:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = t87.im * 0.0;
 8007bd6:	4ba8      	ldr	r3, [pc, #672]	; (8007e78 <G_q+0x5b60>)
 8007bd8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007bdc:	443a      	add	r2, r7
 8007bde:	4413      	add	r3, r2
 8007be0:	ed93 7b02 	vldr	d7, [r3, #8]
 8007be4:	f241 2368 	movw	r3, #4712	; 0x1268
 8007be8:	443b      	add	r3, r7
 8007bea:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8007e70 <G_q+0x5b58>
 8007bee:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007bf2:	ed83 7b00 	vstr	d7, [r3]
  t19_im = (t19.re * 0.5 + t19.im * 0.0) - (t87.re * 0.5 + t19_im_tmp);
 8007bf6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007bfa:	ed93 7b00 	vldr	d7, [r3]
 8007bfe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007c02:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007c06:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007c0a:	ed93 7b02 	vldr	d7, [r3, #8]
 8007c0e:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8007e70 <G_q+0x5b58>
 8007c12:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007c16:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007c1a:	4b97      	ldr	r3, [pc, #604]	; (8007e78 <G_q+0x5b60>)
 8007c1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007c20:	443a      	add	r2, r7
 8007c22:	4413      	add	r3, r2
 8007c24:	ed93 7b00 	vldr	d7, [r3]
 8007c28:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007c2c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007c30:	f241 2368 	movw	r3, #4712	; 0x1268
 8007c34:	443b      	add	r3, r7
 8007c36:	ed93 7b00 	vldr	d7, [r3]
 8007c3a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007c3e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007c42:	f241 3350 	movw	r3, #4944	; 0x1350
 8007c46:	443b      	add	r3, r7
 8007c48:	ed83 7b00 	vstr	d7, [r3]
  t8_re = (t13_re * t13_im - t8_im * t16_re) + (t16_im * t20_im - t20_re * t3_im);
 8007c4c:	f241 3378 	movw	r3, #4984	; 0x1378
 8007c50:	443b      	add	r3, r7
 8007c52:	ed93 6b00 	vldr	d6, [r3]
 8007c56:	f241 3370 	movw	r3, #4976	; 0x1370
 8007c5a:	443b      	add	r3, r7
 8007c5c:	ed93 7b00 	vldr	d7, [r3]
 8007c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c64:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007c68:	ed93 5b00 	vldr	d5, [r3]
 8007c6c:	f241 3368 	movw	r3, #4968	; 0x1368
 8007c70:	443b      	add	r3, r7
 8007c72:	ed93 7b00 	vldr	d7, [r3]
 8007c76:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007c7a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007c7e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007c82:	ed93 5b00 	vldr	d5, [r3]
 8007c86:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007c8a:	ed93 7b00 	vldr	d7, [r3]
 8007c8e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007c92:	f241 3348 	movw	r3, #4936	; 0x1348
 8007c96:	443b      	add	r3, r7
 8007c98:	ed93 4b00 	vldr	d4, [r3]
 8007c9c:	f241 3310 	movw	r3, #4880	; 0x1310
 8007ca0:	443b      	add	r3, r7
 8007ca2:	ed93 7b00 	vldr	d7, [r3]
 8007ca6:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007caa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007cae:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8007cb2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007cb6:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t13_re * t16_re + t8_im * t13_im) + (t16_im * t3_im + t20_re * t20_im);
 8007cba:	f241 3378 	movw	r3, #4984	; 0x1378
 8007cbe:	443b      	add	r3, r7
 8007cc0:	ed93 6b00 	vldr	d6, [r3]
 8007cc4:	f241 3368 	movw	r3, #4968	; 0x1368
 8007cc8:	443b      	add	r3, r7
 8007cca:	ed93 7b00 	vldr	d7, [r3]
 8007cce:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007cd2:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007cd6:	ed93 5b00 	vldr	d5, [r3]
 8007cda:	f241 3370 	movw	r3, #4976	; 0x1370
 8007cde:	443b      	add	r3, r7
 8007ce0:	ed93 7b00 	vldr	d7, [r3]
 8007ce4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007ce8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007cec:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007cf0:	ed93 5b00 	vldr	d5, [r3]
 8007cf4:	f241 3310 	movw	r3, #4880	; 0x1310
 8007cf8:	443b      	add	r3, r7
 8007cfa:	ed93 7b00 	vldr	d7, [r3]
 8007cfe:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007d02:	f241 3348 	movw	r3, #4936	; 0x1348
 8007d06:	443b      	add	r3, r7
 8007d08:	ed93 4b00 	vldr	d4, [r3]
 8007d0c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007d10:	ed93 7b00 	vldr	d7, [r3]
 8007d14:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007d18:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007d1c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007d20:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007d24:	ed83 7b00 	vstr	d7, [r3]
  if (t41.im == 0.0) {
 8007d28:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007d2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007d30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d38:	d115      	bne.n	8007d66 <G_q+0x5a4e>
    t41_re = t41.re / 2.0;
 8007d3a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007d3e:	ed93 6b00 	vldr	d6, [r3]
 8007d42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d4a:	f241 3308 	movw	r3, #4872	; 0x1308
 8007d4e:	443b      	add	r3, r7
 8007d50:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	f04f 0400 	mov.w	r4, #0
 8007d5c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8007d60:	e9c2 3400 	strd	r3, r4, [r2]
 8007d64:	e037      	b.n	8007dd6 <G_q+0x5abe>
  } else if (t41.re == 0.0) {
 8007d66:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007d6a:	ed93 7b00 	vldr	d7, [r3]
 8007d6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d76:	d115      	bne.n	8007da4 <G_q+0x5a8c>
    t41_re = 0.0;
 8007d78:	f04f 0300 	mov.w	r3, #0
 8007d7c:	f04f 0400 	mov.w	r4, #0
 8007d80:	f241 3208 	movw	r2, #4872	; 0x1308
 8007d84:	443a      	add	r2, r7
 8007d86:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t41.im / 2.0;
 8007d8a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007d8e:	ed93 6b02 	vldr	d6, [r3, #8]
 8007d92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007d96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d9a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8007d9e:	ed83 7b00 	vstr	d7, [r3]
 8007da2:	e018      	b.n	8007dd6 <G_q+0x5abe>
  } else {
    t41_re = t41.re / 2.0;
 8007da4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007da8:	ed93 6b00 	vldr	d6, [r3]
 8007dac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007db0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007db4:	f241 3308 	movw	r3, #4872	; 0x1308
 8007db8:	443b      	add	r3, r7
 8007dba:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t41.im / 2.0;
 8007dbe:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007dc2:	ed93 6b02 	vldr	d6, [r3, #8]
 8007dc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007dca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007dce:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8007dd2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t42.im == 0.0) {
 8007dd6:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <G_q+0x5b64>)
 8007dd8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007ddc:	443a      	add	r2, r7
 8007dde:	4413      	add	r3, r2
 8007de0:	ed93 7b02 	vldr	d7, [r3, #8]
 8007de4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dec:	d118      	bne.n	8007e20 <G_q+0x5b08>
    t16_re = t42.re / 2.0;
 8007dee:	4b23      	ldr	r3, [pc, #140]	; (8007e7c <G_q+0x5b64>)
 8007df0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007df4:	443a      	add	r2, r7
 8007df6:	4413      	add	r3, r2
 8007df8:	ed93 6b00 	vldr	d6, [r3]
 8007dfc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007e00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007e04:	f241 3368 	movw	r3, #4968	; 0x1368
 8007e08:	443b      	add	r3, r7
 8007e0a:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8007e0e:	f04f 0300 	mov.w	r3, #0
 8007e12:	f04f 0400 	mov.w	r4, #0
 8007e16:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007e1a:	e9c2 3400 	strd	r3, r4, [r2]
 8007e1e:	e04e      	b.n	8007ebe <G_q+0x5ba6>
  } else if (t42.re == 0.0) {
 8007e20:	4b16      	ldr	r3, [pc, #88]	; (8007e7c <G_q+0x5b64>)
 8007e22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e26:	443a      	add	r2, r7
 8007e28:	4413      	add	r3, r2
 8007e2a:	ed93 7b00 	vldr	d7, [r3]
 8007e2e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e36:	d123      	bne.n	8007e80 <G_q+0x5b68>
    t16_re = 0.0;
 8007e38:	f04f 0300 	mov.w	r3, #0
 8007e3c:	f04f 0400 	mov.w	r4, #0
 8007e40:	f241 3268 	movw	r2, #4968	; 0x1368
 8007e44:	443a      	add	r2, r7
 8007e46:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t42.im / 2.0;
 8007e4a:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <G_q+0x5b64>)
 8007e4c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e50:	443a      	add	r2, r7
 8007e52:	4413      	add	r3, r2
 8007e54:	ed93 6b02 	vldr	d6, [r3, #8]
 8007e58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007e5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007e60:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007e64:	ed83 7b00 	vstr	d7, [r3]
 8007e68:	e029      	b.n	8007ebe <G_q+0x5ba6>
 8007e6a:	bf00      	nop
 8007e6c:	f3af 8000 	nop.w
	...
 8007e78:	ffffedd0 	.word	0xffffedd0
 8007e7c:	ffffed90 	.word	0xffffed90
  } else {
    t16_re = t42.re / 2.0;
 8007e80:	4b5a      	ldr	r3, [pc, #360]	; (8007fec <G_q+0x5cd4>)
 8007e82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e86:	443a      	add	r2, r7
 8007e88:	4413      	add	r3, r2
 8007e8a:	ed93 6b00 	vldr	d6, [r3]
 8007e8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007e92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007e96:	f241 3368 	movw	r3, #4968	; 0x1368
 8007e9a:	443b      	add	r3, r7
 8007e9c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t42.im / 2.0;
 8007ea0:	4b52      	ldr	r3, [pc, #328]	; (8007fec <G_q+0x5cd4>)
 8007ea2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007ea6:	443a      	add	r2, r7
 8007ea8:	4413      	add	r3, r2
 8007eaa:	ed93 6b02 	vldr	d6, [r3, #8]
 8007eae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007eb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007eb6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007eba:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t45.im == 0.0) {
 8007ebe:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ec2:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ec6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ece:	d115      	bne.n	8007efc <G_q+0x5be4>
    t20_re = t45.re / 2.0;
 8007ed0:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007ed4:	ed93 6b00 	vldr	d6, [r3]
 8007ed8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007edc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ee0:	f241 3348 	movw	r3, #4936	; 0x1348
 8007ee4:	443b      	add	r3, r7
 8007ee6:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8007eea:	f04f 0300 	mov.w	r3, #0
 8007eee:	f04f 0400 	mov.w	r4, #0
 8007ef2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007ef6:	e9c2 3400 	strd	r3, r4, [r2]
 8007efa:	e037      	b.n	8007f6c <G_q+0x5c54>
  } else if (t45.re == 0.0) {
 8007efc:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007f00:	ed93 7b00 	vldr	d7, [r3]
 8007f04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f0c:	d115      	bne.n	8007f3a <G_q+0x5c22>
    t20_re = 0.0;
 8007f0e:	f04f 0300 	mov.w	r3, #0
 8007f12:	f04f 0400 	mov.w	r4, #0
 8007f16:	f241 3248 	movw	r2, #4936	; 0x1348
 8007f1a:	443a      	add	r2, r7
 8007f1c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t45.im / 2.0;
 8007f20:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007f24:	ed93 6b02 	vldr	d6, [r3, #8]
 8007f28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f30:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007f34:	ed83 7b00 	vstr	d7, [r3]
 8007f38:	e018      	b.n	8007f6c <G_q+0x5c54>
  } else {
    t20_re = t45.re / 2.0;
 8007f3a:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007f3e:	ed93 6b00 	vldr	d6, [r3]
 8007f42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f4a:	f241 3348 	movw	r3, #4936	; 0x1348
 8007f4e:	443b      	add	r3, r7
 8007f50:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t45.im / 2.0;
 8007f54:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8007f58:	ed93 6b02 	vldr	d6, [r3, #8]
 8007f5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f64:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007f68:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t46.im == 0.0) {
 8007f6c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8007f70:	ed93 7b02 	vldr	d7, [r3, #8]
 8007f74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7c:	d116      	bne.n	8007fac <G_q+0x5c94>
    t34_re = t46.re / 2.0;
 8007f7e:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8007f82:	ed93 6b00 	vldr	d6, [r3]
 8007f86:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007f8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007f8e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007f92:	443b      	add	r3, r7
 8007f94:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8007f98:	f04f 0300 	mov.w	r3, #0
 8007f9c:	f04f 0400 	mov.w	r4, #0
 8007fa0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8007fa4:	443a      	add	r2, r7
 8007fa6:	e9c2 3400 	strd	r3, r4, [r2]
 8007faa:	e03b      	b.n	8008024 <G_q+0x5d0c>
  } else if (t46.re == 0.0) {
 8007fac:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8007fb0:	ed93 7b00 	vldr	d7, [r3]
 8007fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fbc:	d118      	bne.n	8007ff0 <G_q+0x5cd8>
    t34_re = 0.0;
 8007fbe:	f04f 0300 	mov.w	r3, #0
 8007fc2:	f04f 0400 	mov.w	r4, #0
 8007fc6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007fca:	443a      	add	r2, r7
 8007fcc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t46.im / 2.0;
 8007fd0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8007fd4:	ed93 6b02 	vldr	d6, [r3, #8]
 8007fd8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007fdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007fe0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007fe4:	443b      	add	r3, r7
 8007fe6:	ed83 7b00 	vstr	d7, [r3]
 8007fea:	e01b      	b.n	8008024 <G_q+0x5d0c>
 8007fec:	ffffed90 	.word	0xffffed90
  } else {
    t34_re = t46.re / 2.0;
 8007ff0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8007ff4:	ed93 6b00 	vldr	d6, [r3]
 8007ff8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ffc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008000:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008004:	443b      	add	r3, r7
 8008006:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t46.im / 2.0;
 800800a:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 800800e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008012:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008016:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800801a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800801e:	443b      	add	r3, r7
 8008020:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8008024:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008028:	ed93 7b00 	vldr	d7, [r3]
 800802c:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80083f0 <G_q+0x60d8>
 8008030:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008034:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8008038:	ed93 7b02 	vldr	d7, [r3, #8]
 800803c:	ed9f 5bee 	vldr	d5, [pc, #952]	; 80083f8 <G_q+0x60e0>
 8008040:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008044:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008048:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800804c:	ed93 7b00 	vldr	d7, [r3]
 8008050:	ed9f 5be7 	vldr	d5, [pc, #924]	; 80083f0 <G_q+0x60d8>
 8008054:	ee27 5b05 	vmul.f64	d5, d7, d5
    t48.im * 3.061616997868383E-17);
 8008058:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800805c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008060:	ed9f 4be5 	vldr	d4, [pc, #916]	; 80083f8 <G_q+0x60e0>
 8008064:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8008068:	ee35 7b47 	vsub.f64	d7, d5, d7
 800806c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008070:	f241 3388 	movw	r3, #5000	; 0x1388
 8008074:	443b      	add	r3, r7
 8008076:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 800807a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800807e:	ed93 7b00 	vldr	d7, [r3]
 8008082:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 80083f8 <G_q+0x60e0>
 8008086:	ee27 6b06 	vmul.f64	d6, d7, d6
 800808a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800808e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008092:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80083f0 <G_q+0x60d8>
 8008096:	ee27 7b05 	vmul.f64	d7, d7, d5
 800809a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800809e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80080a2:	ed93 7b00 	vldr	d7, [r3]
 80080a6:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 80083f8 <G_q+0x60e0>
 80080aa:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t48.im * 0.0);
 80080ae:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80080b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80080b6:	ed9f 4bce 	vldr	d4, [pc, #824]	; 80083f0 <G_q+0x60d8>
 80080ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 80080be:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 80080c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80080c6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80080ca:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_re;
 80080ce:	f241 3348 	movw	r3, #4936	; 0x1348
 80080d2:	443b      	add	r3, r7
 80080d4:	ed93 6b00 	vldr	d6, [r3]
 80080d8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80080dc:	443b      	add	r3, r7
 80080de:	ed93 7b00 	vldr	d7, [r3]
 80080e2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80080e6:	f241 3348 	movw	r3, #4936	; 0x1348
 80080ea:	443b      	add	r3, r7
 80080ec:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 80080f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80080f4:	ed93 6b00 	vldr	d6, [r3]
 80080f8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80080fc:	443b      	add	r3, r7
 80080fe:	ed93 7b00 	vldr	d7, [r3]
 8008102:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008106:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800810a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t51.re * 3.061616997868383E-17 + t52.re * 3.061616997868383E-17;
 800810e:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8008112:	ed93 7b00 	vldr	d7, [r3]
 8008116:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80083f8 <G_q+0x60e0>
 800811a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800811e:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008122:	ed93 7b00 	vldr	d7, [r3]
 8008126:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 80083f8 <G_q+0x60e0>
 800812a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800812e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008132:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008136:	443b      	add	r3, r7
 8008138:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t51.im * 3.061616997868383E-17 + t52.im * 3.061616997868383E-17;
 800813c:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8008140:	ed93 7b02 	vldr	d7, [r3, #8]
 8008144:	ed9f 6bac 	vldr	d6, [pc, #688]	; 80083f8 <G_q+0x60e0>
 8008148:	ee27 6b06 	vmul.f64	d6, d7, d6
 800814c:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008150:	ed93 7b02 	vldr	d7, [r3, #8]
 8008154:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80083f8 <G_q+0x60e0>
 8008158:	ee27 7b05 	vmul.f64	d7, d7, d5
 800815c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008160:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008164:	443b      	add	r3, r7
 8008166:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t49.re * 0.0 - t49.im * 0.5) - (t50.re * 0.0 - t50.im * 0.5);
 800816a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800816e:	ed93 7b00 	vldr	d7, [r3]
 8008172:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80083f0 <G_q+0x60d8>
 8008176:	ee27 6b06 	vmul.f64	d6, d7, d6
 800817a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800817e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008182:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008186:	ee27 7b05 	vmul.f64	d7, d7, d5
 800818a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800818e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008192:	ed93 7b00 	vldr	d7, [r3]
 8008196:	ed9f 5b96 	vldr	d5, [pc, #600]	; 80083f0 <G_q+0x60d8>
 800819a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800819e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80081a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80081a6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80081aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 80081ae:	ee35 7b47 	vsub.f64	d7, d5, d7
 80081b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80081b6:	f241 3378 	movw	r3, #4984	; 0x1378
 80081ba:	443b      	add	r3, r7
 80081bc:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t49.re * 0.5 + t49.im * 0.0) - (t50.re * 0.5 + t50.im * 0.0);
 80081c0:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80081c4:	ed93 7b00 	vldr	d7, [r3]
 80081c8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80081cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80081d0:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 80081d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80081d8:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80083f0 <G_q+0x60d8>
 80081dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80081e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80081e4:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80081e8:	ed93 7b00 	vldr	d7, [r3]
 80081ec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80081f0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80081f4:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80081f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80081fc:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 80083f0 <G_q+0x60d8>
 8008200:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008204:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008208:	ee36 7b47 	vsub.f64	d7, d6, d7
 800820c:	f241 3370 	movw	r3, #4976	; 0x1370
 8008210:	443b      	add	r3, r7
 8008212:	ed83 7b00 	vstr	d7, [r3]
  t41_re += t16_re;
 8008216:	f241 3308 	movw	r3, #4872	; 0x1308
 800821a:	443b      	add	r3, r7
 800821c:	ed93 6b00 	vldr	d6, [r3]
 8008220:	f241 3368 	movw	r3, #4968	; 0x1368
 8008224:	443b      	add	r3, r7
 8008226:	ed93 7b00 	vldr	d7, [r3]
 800822a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800822e:	f241 3308 	movw	r3, #4872	; 0x1308
 8008232:	443b      	add	r3, r7
 8008234:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t16_im;
 8008238:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800823c:	ed93 6b00 	vldr	d6, [r3]
 8008240:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008244:	ed93 7b00 	vldr	d7, [r3]
 8008248:	ee36 7b07 	vadd.f64	d7, d6, d7
 800824c:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008250:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008254:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008258:	ed93 7b00 	vldr	d7, [r3]
 800825c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80083f0 <G_q+0x60d8>
 8008260:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008264:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008268:	ed93 7b02 	vldr	d7, [r3, #8]
 800826c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 8008400 <G_q+0x60e8>
 8008270:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008274:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008278:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800827c:	ed93 7b00 	vldr	d7, [r3]
 8008280:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80083f0 <G_q+0x60d8>
 8008284:	ee27 5b05 	vmul.f64	d5, d7, d5
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008288:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800828c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008290:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 8008400 <G_q+0x60e8>
 8008294:	ee27 7b04 	vmul.f64	d7, d7, d4
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008298:	ee35 7b47 	vsub.f64	d7, d5, d7
 800829c:	ee36 6b47 	vsub.f64	d6, d6, d7
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 80082a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80082a4:	443b      	add	r3, r7
 80082a6:	ed93 5b00 	vldr	d5, [r3]
 80082aa:	f241 3348 	movw	r3, #4936	; 0x1348
 80082ae:	443b      	add	r3, r7
 80082b0:	ed93 7b00 	vldr	d7, [r3]
 80082b4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80082b8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80082bc:	ed93 4b00 	vldr	d4, [r3]
 80082c0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80082c4:	ed93 7b00 	vldr	d7, [r3]
 80082c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80082cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80082d0:	ee36 6b47 	vsub.f64	d6, d6, d7
             t20_im)) + (t34_re * t13_re - t34_im * t13_im);
 80082d4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80082d8:	443b      	add	r3, r7
 80082da:	ed93 5b00 	vldr	d5, [r3]
 80082de:	f241 3378 	movw	r3, #4984	; 0x1378
 80082e2:	443b      	add	r3, r7
 80082e4:	ed93 7b00 	vldr	d7, [r3]
 80082e8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80082ec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80082f0:	443b      	add	r3, r7
 80082f2:	ed93 4b00 	vldr	d4, [r3]
 80082f6:	f241 3370 	movw	r3, #4976	; 0x1370
 80082fa:	443b      	add	r3, r7
 80082fc:	ed93 7b00 	vldr	d7, [r3]
 8008300:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008304:	ee35 7b47 	vsub.f64	d7, d5, d7
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008308:	f241 2358 	movw	r3, #4696	; 0x1258
 800830c:	443b      	add	r3, r7
 800830e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008312:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 8008316:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800831a:	ed93 7b00 	vldr	d7, [r3]
 800831e:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008400 <G_q+0x60e8>
 8008322:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008326:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800832a:	ed93 7b02 	vldr	d7, [r3, #8]
 800832e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80083f0 <G_q+0x60d8>
 8008332:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008336:	ee36 6b07 	vadd.f64	d6, d6, d7
 800833a:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800833e:	ed93 7b00 	vldr	d7, [r3]
 8008342:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8008400 <G_q+0x60e8>
 8008346:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800834a:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800834e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008352:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80083f0 <G_q+0x60d8>
 8008356:	ee27 7b04 	vmul.f64	d7, d7, d4
 800835a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800835e:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008362:	f241 3388 	movw	r3, #5000	; 0x1388
 8008366:	443b      	add	r3, r7
 8008368:	ed93 5b00 	vldr	d5, [r3]
 800836c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008370:	ed93 7b00 	vldr	d7, [r3]
 8008374:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008378:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800837c:	ed93 4b00 	vldr	d4, [r3]
 8008380:	f241 3348 	movw	r3, #4936	; 0x1348
 8008384:	443b      	add	r3, r7
 8008386:	ed93 7b00 	vldr	d7, [r3]
 800838a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800838e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008392:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008396:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800839a:	443b      	add	r3, r7
 800839c:	ed93 5b00 	vldr	d5, [r3]
 80083a0:	f241 3370 	movw	r3, #4976	; 0x1370
 80083a4:	443b      	add	r3, r7
 80083a6:	ed93 7b00 	vldr	d7, [r3]
 80083aa:	ee25 5b07 	vmul.f64	d5, d5, d7
 80083ae:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80083b2:	443b      	add	r3, r7
 80083b4:	ed93 4b00 	vldr	d4, [r3]
 80083b8:	f241 3378 	movw	r3, #4984	; 0x1378
 80083bc:	443b      	add	r3, r7
 80083be:	ed93 7b00 	vldr	d7, [r3]
 80083c2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80083c6:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80083ca:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083ce:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80083d2:	443b      	add	r3, r7
 80083d4:	ed83 7b00 	vstr	d7, [r3]
  if (t54.im == 0.0) {
 80083d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80083dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80083e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80083e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e8:	d125      	bne.n	8008436 <G_q+0x611e>
 80083ea:	e00d      	b.n	8008408 <G_q+0x60f0>
 80083ec:	f3af 8000 	nop.w
	...
 80083f8:	33145c07 	.word	0x33145c07
 80083fc:	3c81a626 	.word	0x3c81a626
 8008400:	33145c07 	.word	0x33145c07
 8008404:	3c91a626 	.word	0x3c91a626
    b_t54_re = t54.re / 2.0;
 8008408:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800840c:	ed93 6b00 	vldr	d6, [r3]
 8008410:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008414:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008418:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800841c:	443b      	add	r3, r7
 800841e:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 8008422:	f04f 0300 	mov.w	r3, #0
 8008426:	f04f 0400 	mov.w	r4, #0
 800842a:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800842e:	443a      	add	r2, r7
 8008430:	e9c2 3400 	strd	r3, r4, [r2]
 8008434:	e039      	b.n	80084aa <G_q+0x6192>
  } else if (t54.re == 0.0) {
 8008436:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800843a:	ed93 7b00 	vldr	d7, [r3]
 800843e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008446:	d116      	bne.n	8008476 <G_q+0x615e>
    b_t54_re = 0.0;
 8008448:	f04f 0300 	mov.w	r3, #0
 800844c:	f04f 0400 	mov.w	r4, #0
 8008450:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8008454:	443a      	add	r2, r7
 8008456:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t54.im / 2.0;
 800845a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800845e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008462:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008466:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800846a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800846e:	443b      	add	r3, r7
 8008470:	ed83 7b00 	vstr	d7, [r3]
 8008474:	e019      	b.n	80084aa <G_q+0x6192>
  } else {
    b_t54_re = t54.re / 2.0;
 8008476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800847a:	ed93 6b00 	vldr	d6, [r3]
 800847e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008482:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008486:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800848a:	443b      	add	r3, r7
 800848c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t54.im / 2.0;
 8008490:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008494:	ed93 6b02 	vldr	d6, [r3, #8]
 8008498:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800849c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80084a0:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80084a4:	443b      	add	r3, r7
 80084a6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t55.im == 0.0) {
 80084aa:	4bdd      	ldr	r3, [pc, #884]	; (8008820 <G_q+0x6508>)
 80084ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80084b0:	443a      	add	r2, r7
 80084b2:	4413      	add	r3, r2
 80084b4:	ed93 7b02 	vldr	d7, [r3, #8]
 80084b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80084bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084c0:	d118      	bne.n	80084f4 <G_q+0x61dc>
    t55_re = t55.re / 2.0;
 80084c2:	4bd7      	ldr	r3, [pc, #860]	; (8008820 <G_q+0x6508>)
 80084c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80084c8:	443a      	add	r2, r7
 80084ca:	4413      	add	r3, r2
 80084cc:	ed93 6b00 	vldr	d6, [r3]
 80084d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80084d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80084d8:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80084dc:	ed83 7b00 	vstr	d7, [r3]
    t55_im = 0.0;
 80084e0:	f04f 0300 	mov.w	r3, #0
 80084e4:	f04f 0400 	mov.w	r4, #0
 80084e8:	f241 22d8 	movw	r2, #4824	; 0x12d8
 80084ec:	443a      	add	r2, r7
 80084ee:	e9c2 3400 	strd	r3, r4, [r2]
 80084f2:	e043      	b.n	800857c <G_q+0x6264>
  } else if (t55.re == 0.0) {
 80084f4:	4bca      	ldr	r3, [pc, #808]	; (8008820 <G_q+0x6508>)
 80084f6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80084fa:	443a      	add	r2, r7
 80084fc:	4413      	add	r3, r2
 80084fe:	ed93 7b00 	vldr	d7, [r3]
 8008502:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800850a:	d118      	bne.n	800853e <G_q+0x6226>
    t55_re = 0.0;
 800850c:	f04f 0300 	mov.w	r3, #0
 8008510:	f04f 0400 	mov.w	r4, #0
 8008514:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 8008518:	e9c2 3400 	strd	r3, r4, [r2]
    t55_im = t55.im / 2.0;
 800851c:	4bc0      	ldr	r3, [pc, #768]	; (8008820 <G_q+0x6508>)
 800851e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008522:	443a      	add	r2, r7
 8008524:	4413      	add	r3, r2
 8008526:	ed93 6b02 	vldr	d6, [r3, #8]
 800852a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800852e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008532:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8008536:	443b      	add	r3, r7
 8008538:	ed83 7b00 	vstr	d7, [r3]
 800853c:	e01e      	b.n	800857c <G_q+0x6264>
  } else {
    t55_re = t55.re / 2.0;
 800853e:	4bb8      	ldr	r3, [pc, #736]	; (8008820 <G_q+0x6508>)
 8008540:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008544:	443a      	add	r2, r7
 8008546:	4413      	add	r3, r2
 8008548:	ed93 6b00 	vldr	d6, [r3]
 800854c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008550:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008554:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8008558:	ed83 7b00 	vstr	d7, [r3]
    t55_im = t55.im / 2.0;
 800855c:	4bb0      	ldr	r3, [pc, #704]	; (8008820 <G_q+0x6508>)
 800855e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008562:	443a      	add	r2, r7
 8008564:	4413      	add	r3, r2
 8008566:	ed93 6b02 	vldr	d6, [r3, #8]
 800856a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800856e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008572:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8008576:	443b      	add	r3, r7
 8008578:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t70.im == 0.0) {
 800857c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008580:	ed93 7b02 	vldr	d7, [r3, #8]
 8008584:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858c:	d116      	bne.n	80085bc <G_q+0x62a4>
    t70_re = t70.re / 2.0;
 800858e:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008592:	ed93 6b00 	vldr	d6, [r3]
 8008596:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800859a:	443b      	add	r3, r7
 800859c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085a4:	ed83 7b00 	vstr	d7, [r3]
    t70_im = 0.0;
 80085a8:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80085ac:	443a      	add	r2, r7
 80085ae:	f04f 0300 	mov.w	r3, #0
 80085b2:	f04f 0400 	mov.w	r4, #0
 80085b6:	e9c2 3400 	strd	r3, r4, [r2]
 80085ba:	e039      	b.n	8008630 <G_q+0x6318>
  } else if (t70.re == 0.0) {
 80085bc:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80085c0:	ed93 7b00 	vldr	d7, [r3]
 80085c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80085c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085cc:	d116      	bne.n	80085fc <G_q+0x62e4>
    t70_re = 0.0;
 80085ce:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80085d2:	443a      	add	r2, r7
 80085d4:	f04f 0300 	mov.w	r3, #0
 80085d8:	f04f 0400 	mov.w	r4, #0
 80085dc:	e9c2 3400 	strd	r3, r4, [r2]
    t70_im = t70.im / 2.0;
 80085e0:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80085e4:	ed93 6b02 	vldr	d6, [r3, #8]
 80085e8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80085ec:	443b      	add	r3, r7
 80085ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80085f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80085f6:	ed83 7b00 	vstr	d7, [r3]
 80085fa:	e019      	b.n	8008630 <G_q+0x6318>
  } else {
    t70_re = t70.re / 2.0;
 80085fc:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008600:	ed93 6b00 	vldr	d6, [r3]
 8008604:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008608:	443b      	add	r3, r7
 800860a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800860e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008612:	ed83 7b00 	vstr	d7, [r3]
    t70_im = t70.im / 2.0;
 8008616:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 800861a:	ed93 6b02 	vldr	d6, [r3, #8]
 800861e:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8008622:	443b      	add	r3, r7
 8008624:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008628:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800862c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t71.im == 0.0) {
 8008630:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008634:	ed93 7b02 	vldr	d7, [r3, #8]
 8008638:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800863c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008640:	d116      	bne.n	8008670 <G_q+0x6358>
    t34_re = t71.re / 2.0;
 8008642:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008646:	ed93 6b00 	vldr	d6, [r3]
 800864a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800864e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008652:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008656:	443b      	add	r3, r7
 8008658:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800865c:	f04f 0300 	mov.w	r3, #0
 8008660:	f04f 0400 	mov.w	r4, #0
 8008664:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008668:	443a      	add	r2, r7
 800866a:	e9c2 3400 	strd	r3, r4, [r2]
 800866e:	e039      	b.n	80086e4 <G_q+0x63cc>
  } else if (t71.re == 0.0) {
 8008670:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008674:	ed93 7b00 	vldr	d7, [r3]
 8008678:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800867c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008680:	d116      	bne.n	80086b0 <G_q+0x6398>
    t34_re = 0.0;
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	f04f 0400 	mov.w	r4, #0
 800868a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800868e:	443a      	add	r2, r7
 8008690:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t71.im / 2.0;
 8008694:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008698:	ed93 6b02 	vldr	d6, [r3, #8]
 800869c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086a4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80086a8:	443b      	add	r3, r7
 80086aa:	ed83 7b00 	vstr	d7, [r3]
 80086ae:	e019      	b.n	80086e4 <G_q+0x63cc>
  } else {
    t34_re = t71.re / 2.0;
 80086b0:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80086b4:	ed93 6b00 	vldr	d6, [r3]
 80086b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086c0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80086c4:	443b      	add	r3, r7
 80086c6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t71.im / 2.0;
 80086ca:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80086ce:	ed93 6b02 	vldr	d6, [r3, #8]
 80086d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086da:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80086de:	443b      	add	r3, r7
 80086e0:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_re += t34_re;
 80086e4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80086e8:	443b      	add	r3, r7
 80086ea:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80086ee:	443a      	add	r2, r7
 80086f0:	ed92 6b00 	vldr	d6, [r2]
 80086f4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80086f8:	443a      	add	r2, r7
 80086fa:	ed92 7b00 	vldr	d7, [r2]
 80086fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008702:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t34_im;
 8008706:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800870a:	443b      	add	r3, r7
 800870c:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8008710:	443a      	add	r2, r7
 8008712:	ed92 6b00 	vldr	d6, [r2]
 8008716:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800871a:	443a      	add	r2, r7
 800871c:	ed92 7b00 	vldr	d7, [r2]
 8008720:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008724:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t72.re * 0.0 - t72.im * 0.5) - (t73.re * 0.0 - t73.im * 0.5);
 8008728:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800872c:	ed93 7b00 	vldr	d7, [r3]
 8008730:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8008818 <G_q+0x6500>
 8008734:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008738:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 800873c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008740:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008744:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008748:	ee36 6b47 	vsub.f64	d6, d6, d7
 800874c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008750:	ed93 7b00 	vldr	d7, [r3]
 8008754:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8008818 <G_q+0x6500>
 8008758:	ee27 5b05 	vmul.f64	d5, d7, d5
 800875c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008760:	ed93 7b02 	vldr	d7, [r3, #8]
 8008764:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008768:	ee27 7b04 	vmul.f64	d7, d7, d4
 800876c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008770:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8008774:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008778:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t72.re * 0.5 + t72.im * 0.0) - (t73.re * 0.5 + t73.im * 0.0);
 800877c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008780:	ed93 7b00 	vldr	d7, [r3]
 8008784:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008788:	ee27 6b06 	vmul.f64	d6, d7, d6
 800878c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008790:	ed93 7b02 	vldr	d7, [r3, #8]
 8008794:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8008818 <G_q+0x6500>
 8008798:	ee27 7b05 	vmul.f64	d7, d7, d5
 800879c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80087a0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80087a4:	ed93 7b00 	vldr	d7, [r3]
 80087a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80087ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80087b0:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 80087b4:	ed93 7b02 	vldr	d7, [r3, #8]
 80087b8:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8008818 <G_q+0x6500>
 80087bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80087c0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80087c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80087c8:	f241 3338 	movw	r3, #4920	; 0x1338
 80087cc:	443b      	add	r3, r7
 80087ce:	ed83 7b00 	vstr	d7, [r3]
  if (t74.im == 0.0) {
 80087d2:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80087d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80087da:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	d11f      	bne.n	8008824 <G_q+0x650c>
    t74_re = t74.re / 2.0;
 80087e4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 80087e8:	ed93 6b00 	vldr	d6, [r3]
 80087ec:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80087f0:	443b      	add	r3, r7
 80087f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80087f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087fa:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 80087fe:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008802:	443a      	add	r2, r7
 8008804:	f04f 0300 	mov.w	r3, #0
 8008808:	f04f 0400 	mov.w	r4, #0
 800880c:	e9c2 3400 	strd	r3, r4, [r2]
 8008810:	e042      	b.n	8008898 <G_q+0x6580>
 8008812:	bf00      	nop
 8008814:	f3af 8000 	nop.w
	...
 8008820:	ffffec70 	.word	0xffffec70
  } else if (t74.re == 0.0) {
 8008824:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008828:	ed93 7b00 	vldr	d7, [r3]
 800882c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	d116      	bne.n	8008864 <G_q+0x654c>
    t74_re = 0.0;
 8008836:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800883a:	443a      	add	r2, r7
 800883c:	f04f 0300 	mov.w	r3, #0
 8008840:	f04f 0400 	mov.w	r4, #0
 8008844:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t74.im / 2.0;
 8008848:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800884c:	ed93 6b02 	vldr	d6, [r3, #8]
 8008850:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008854:	443b      	add	r3, r7
 8008856:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800885a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800885e:	ed83 7b00 	vstr	d7, [r3]
 8008862:	e019      	b.n	8008898 <G_q+0x6580>
  } else {
    t74_re = t74.re / 2.0;
 8008864:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008868:	ed93 6b00 	vldr	d6, [r3]
 800886c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008870:	443b      	add	r3, r7
 8008872:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008876:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800887a:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t74.im / 2.0;
 800887e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008882:	ed93 6b02 	vldr	d6, [r3, #8]
 8008886:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800888a:	443b      	add	r3, r7
 800888c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008890:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008894:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t75.im == 0.0) {
 8008898:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800889c:	ed93 7b02 	vldr	d7, [r3, #8]
 80088a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a8:	d116      	bne.n	80088d8 <G_q+0x65c0>
    t34_re = t75.re / 2.0;
 80088aa:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80088ae:	ed93 6b00 	vldr	d6, [r3]
 80088b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088ba:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80088be:	443b      	add	r3, r7
 80088c0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	f04f 0400 	mov.w	r4, #0
 80088cc:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80088d0:	443a      	add	r2, r7
 80088d2:	e9c2 3400 	strd	r3, r4, [r2]
 80088d6:	e039      	b.n	800894c <G_q+0x6634>
  } else if (t75.re == 0.0) {
 80088d8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 80088dc:	ed93 7b00 	vldr	d7, [r3]
 80088e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088e8:	d116      	bne.n	8008918 <G_q+0x6600>
    t34_re = 0.0;
 80088ea:	f04f 0300 	mov.w	r3, #0
 80088ee:	f04f 0400 	mov.w	r4, #0
 80088f2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80088f6:	443a      	add	r2, r7
 80088f8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t75.im / 2.0;
 80088fc:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008900:	ed93 6b02 	vldr	d6, [r3, #8]
 8008904:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008908:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800890c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008910:	443b      	add	r3, r7
 8008912:	ed83 7b00 	vstr	d7, [r3]
 8008916:	e019      	b.n	800894c <G_q+0x6634>
  } else {
    t34_re = t75.re / 2.0;
 8008918:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 800891c:	ed93 6b00 	vldr	d6, [r3]
 8008920:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008924:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008928:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800892c:	443b      	add	r3, r7
 800892e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t75.im / 2.0;
 8008932:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008936:	ed93 6b02 	vldr	d6, [r3, #8]
 800893a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800893e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008942:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008946:	443b      	add	r3, r7
 8008948:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re += t34_re;
 800894c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008950:	443b      	add	r3, r7
 8008952:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008956:	443a      	add	r2, r7
 8008958:	ed92 6b00 	vldr	d6, [r2]
 800895c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008960:	443a      	add	r2, r7
 8008962:	ed92 7b00 	vldr	d7, [r2]
 8008966:	ee36 7b07 	vadd.f64	d7, d6, d7
 800896a:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800896e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008972:	443b      	add	r3, r7
 8008974:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008978:	443a      	add	r2, r7
 800897a:	ed92 6b00 	vldr	d6, [r2]
 800897e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008982:	443a      	add	r2, r7
 8008984:	ed92 7b00 	vldr	d7, [r2]
 8008988:	ee36 7b07 	vadd.f64	d7, d6, d7
 800898c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t76.re * 0.0 - t76.im * 0.5) - (t77.re * 0.0 - t77.im * 0.5);
 8008990:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008994:	ed93 7b00 	vldr	d7, [r3]
 8008998:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8008b70 <G_q+0x6858>
 800899c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80089a0:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80089a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80089a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80089ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80089b4:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80089b8:	ed93 7b00 	vldr	d7, [r3]
 80089bc:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008b70 <G_q+0x6858>
 80089c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80089c4:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 80089c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80089cc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80089d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80089d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80089d8:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80089dc:	443b      	add	r3, r7
 80089de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80089e2:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t76.re * 0.5 + t76.im * 0.0) - (t77.re * 0.5 + t77.im * 0.0);
 80089e6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80089ea:	ed93 7b00 	vldr	d7, [r3]
 80089ee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80089f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80089f6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 80089fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80089fe:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8008b70 <G_q+0x6858>
 8008a02:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a06:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008a0a:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008a0e:	ed93 7b00 	vldr	d7, [r3]
 8008a12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008a16:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008a1a:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008a1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a22:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8008b70 <G_q+0x6858>
 8008a26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a2a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008a2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008a32:	f241 3310 	movw	r3, #4880	; 0x1310
 8008a36:	443b      	add	r3, r7
 8008a38:	ed83 7b00 	vstr	d7, [r3]
  if (t62.im == 0.0) {
 8008a3c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008a40:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a4c:	d115      	bne.n	8008a7a <G_q+0x6762>
    t16_re = t62.re / 2.0;
 8008a4e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008a52:	ed93 6b00 	vldr	d6, [r3]
 8008a56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008a5e:	f241 3368 	movw	r3, #4968	; 0x1368
 8008a62:	443b      	add	r3, r7
 8008a64:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8008a68:	f04f 0300 	mov.w	r3, #0
 8008a6c:	f04f 0400 	mov.w	r4, #0
 8008a70:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8008a74:	e9c2 3400 	strd	r3, r4, [r2]
 8008a78:	e037      	b.n	8008aea <G_q+0x67d2>
  } else if (t62.re == 0.0) {
 8008a7a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008a7e:	ed93 7b00 	vldr	d7, [r3]
 8008a82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a8a:	d115      	bne.n	8008ab8 <G_q+0x67a0>
    t16_re = 0.0;
 8008a8c:	f04f 0300 	mov.w	r3, #0
 8008a90:	f04f 0400 	mov.w	r4, #0
 8008a94:	f241 3268 	movw	r2, #4968	; 0x1368
 8008a98:	443a      	add	r2, r7
 8008a9a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t62.im / 2.0;
 8008a9e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008aa2:	ed93 6b02 	vldr	d6, [r3, #8]
 8008aa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008aaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008aae:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008ab2:	ed83 7b00 	vstr	d7, [r3]
 8008ab6:	e018      	b.n	8008aea <G_q+0x67d2>
  } else {
    t16_re = t62.re / 2.0;
 8008ab8:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008abc:	ed93 6b00 	vldr	d6, [r3]
 8008ac0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008ac4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ac8:	f241 3368 	movw	r3, #4968	; 0x1368
 8008acc:	443b      	add	r3, r7
 8008ace:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t62.im / 2.0;
 8008ad2:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008ad6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008ada:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008ade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008ae2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008ae6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t63.im == 0.0) {
 8008aea:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008aee:	ed93 7b02 	vldr	d7, [r3, #8]
 8008af2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008afa:	d116      	bne.n	8008b2a <G_q+0x6812>
    t34_re = t63.re / 2.0;
 8008afc:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008b00:	ed93 6b00 	vldr	d6, [r3]
 8008b04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b0c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008b10:	443b      	add	r3, r7
 8008b12:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008b16:	f04f 0300 	mov.w	r3, #0
 8008b1a:	f04f 0400 	mov.w	r4, #0
 8008b1e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008b22:	443a      	add	r2, r7
 8008b24:	e9c2 3400 	strd	r3, r4, [r2]
 8008b28:	e044      	b.n	8008bb4 <G_q+0x689c>
  } else if (t63.re == 0.0) {
 8008b2a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008b2e:	ed93 7b00 	vldr	d7, [r3]
 8008b32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3a:	d121      	bne.n	8008b80 <G_q+0x6868>
    t34_re = 0.0;
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	f04f 0400 	mov.w	r4, #0
 8008b44:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008b48:	443a      	add	r2, r7
 8008b4a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t63.im / 2.0;
 8008b4e:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008b52:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b5e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008b62:	443b      	add	r3, r7
 8008b64:	ed83 7b00 	vstr	d7, [r3]
 8008b68:	e024      	b.n	8008bb4 <G_q+0x689c>
 8008b6a:	bf00      	nop
 8008b6c:	f3af 8000 	nop.w
	...
 8008b78:	33145c07 	.word	0x33145c07
 8008b7c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t63.re / 2.0;
 8008b80:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008b84:	ed93 6b00 	vldr	d6, [r3]
 8008b88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b90:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008b94:	443b      	add	r3, r7
 8008b96:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t63.im / 2.0;
 8008b9a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008b9e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008ba2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008ba6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008baa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008bae:	443b      	add	r3, r7
 8008bb0:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008bb4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008bb8:	ed93 7b00 	vldr	d7, [r3]
 8008bbc:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8008b70 <G_q+0x6858>
 8008bc0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008bc4:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008bc8:	ed93 7b02 	vldr	d7, [r3, #8]
 8008bcc:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8008b78 <G_q+0x6860>
 8008bd0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008bd4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008bd8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008bdc:	ed93 7b00 	vldr	d7, [r3]
 8008be0:	ed1f 5b1d 	vldr	d5, [pc, #-116]	; 8008b70 <G_q+0x6858>
 8008be4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t65.im * 3.061616997868383E-17);
 8008be8:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008bec:	ed93 7b02 	vldr	d7, [r3, #8]
 8008bf0:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8008b78 <G_q+0x6860>
 8008bf4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008bf8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008bfc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c00:	f241 3348 	movw	r3, #4936	; 0x1348
 8008c04:	443b      	add	r3, r7
 8008c06:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008c0a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008c0e:	ed93 7b00 	vldr	d7, [r3]
 8008c12:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8008b78 <G_q+0x6860>
 8008c16:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008c1a:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008c1e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c22:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 8008b70 <G_q+0x6858>
 8008c26:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008c2a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008c2e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008c32:	ed93 7b00 	vldr	d7, [r3]
 8008c36:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8008b78 <G_q+0x6860>
 8008c3a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t65.im * 0.0);
 8008c3e:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008c42:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c46:	ed1f 4b36 	vldr	d4, [pc, #-216]	; 8008b70 <G_q+0x6858>
 8008c4a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c4e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008c52:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c56:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008c5a:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_re;
 8008c5e:	f241 3368 	movw	r3, #4968	; 0x1368
 8008c62:	443b      	add	r3, r7
 8008c64:	ed93 6b00 	vldr	d6, [r3]
 8008c68:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008c6c:	443b      	add	r3, r7
 8008c6e:	ed93 7b00 	vldr	d7, [r3]
 8008c72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008c76:	f241 3368 	movw	r3, #4968	; 0x1368
 8008c7a:	443b      	add	r3, r7
 8008c7c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8008c80:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008c84:	ed93 6b00 	vldr	d6, [r3]
 8008c88:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008c8c:	443b      	add	r3, r7
 8008c8e:	ed93 7b00 	vldr	d7, [r3]
 8008c92:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008c96:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008c9a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t68.re * 3.061616997868383E-17 + t69.re * 3.061616997868383E-17;
 8008c9e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008ca2:	ed93 7b00 	vldr	d7, [r3]
 8008ca6:	ed1f 6b4c 	vldr	d6, [pc, #-304]	; 8008b78 <G_q+0x6860>
 8008caa:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008cae:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008cb2:	ed93 7b00 	vldr	d7, [r3]
 8008cb6:	ed1f 5b50 	vldr	d5, [pc, #-320]	; 8008b78 <G_q+0x6860>
 8008cba:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008cbe:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008cc2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008cc6:	443b      	add	r3, r7
 8008cc8:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t68.im * 3.061616997868383E-17 + t69.im * 3.061616997868383E-17;
 8008ccc:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008cd0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cd4:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8008b78 <G_q+0x6860>
 8008cd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008cdc:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008ce0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ce4:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8008b78 <G_q+0x6860>
 8008ce8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008cec:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008cf0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008cf4:	443b      	add	r3, r7
 8008cf6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t66.re * 0.0 - t66.im * 0.5) - (t67.re * 0.0 - t67.im * 0.5);
 8008cfa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008cfe:	ed93 7b00 	vldr	d7, [r3]
 8008d02:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8008b70 <G_q+0x6858>
 8008d06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008d0a:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008d16:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008d1e:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008d22:	ed93 7b00 	vldr	d7, [r3]
 8008d26:	ed1f 5b6e 	vldr	d5, [pc, #-440]	; 8008b70 <G_q+0x6858>
 8008d2a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008d2e:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008d32:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d36:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008d3a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d3e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d42:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d46:	f241 3378 	movw	r3, #4984	; 0x1378
 8008d4a:	443b      	add	r3, r7
 8008d4c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t66.re * 0.5 + t66.im * 0.0) - (t67.re * 0.5 + t67.im * 0.0);
 8008d50:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d54:	ed93 7b00 	vldr	d7, [r3]
 8008d58:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008d5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008d60:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008d64:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d68:	ed1f 5b7f 	vldr	d5, [pc, #-508]	; 8008b70 <G_q+0x6858>
 8008d6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d70:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008d74:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008d78:	ed93 7b00 	vldr	d7, [r3]
 8008d7c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008d80:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008d84:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008d88:	ed93 7b02 	vldr	d7, [r3, #8]
 8008d8c:	ed1f 4b88 	vldr	d4, [pc, #-544]	; 8008b70 <G_q+0x6858>
 8008d90:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d94:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008d98:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008d9c:	f241 3370 	movw	r3, #4976	; 0x1370
 8008da0:	443b      	add	r3, r7
 8008da2:	ed83 7b00 	vstr	d7, [r3]
  t23_re = t58.re * 3.061616997868383E-17 + t59.re * 3.061616997868383E-17;
 8008da6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008daa:	ed93 7b00 	vldr	d7, [r3]
 8008dae:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8008b78 <G_q+0x6860>
 8008db2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008db6:	4bca      	ldr	r3, [pc, #808]	; (80090e0 <G_q+0x6dc8>)
 8008db8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008dbc:	443a      	add	r2, r7
 8008dbe:	4413      	add	r3, r2
 8008dc0:	ed93 7b00 	vldr	d7, [r3]
 8008dc4:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 80090c8 <G_q+0x6db0>
 8008dc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008dcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008dd0:	f241 3330 	movw	r3, #4912	; 0x1330
 8008dd4:	443b      	add	r3, r7
 8008dd6:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t58.im * 3.061616997868383E-17 + t59.im * 3.061616997868383E-17;
 8008dda:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8008dde:	ed93 7b02 	vldr	d7, [r3, #8]
 8008de2:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 80090c8 <G_q+0x6db0>
 8008de6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008dea:	4bbd      	ldr	r3, [pc, #756]	; (80090e0 <G_q+0x6dc8>)
 8008dec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008df0:	443a      	add	r2, r7
 8008df2:	4413      	add	r3, r2
 8008df4:	ed93 7b02 	vldr	d7, [r3, #8]
 8008df8:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 80090c8 <G_q+0x6db0>
 8008dfc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e00:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8008e04:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008e08:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008e0c:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008e10:	ed93 7b00 	vldr	d7, [r3]
 8008e14:	ed9f 6bae 	vldr	d6, [pc, #696]	; 80090d0 <G_q+0x6db8>
 8008e18:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e1c:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008e20:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e24:	ed9f 5bac 	vldr	d5, [pc, #688]	; 80090d8 <G_q+0x6dc0>
 8008e28:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008e30:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008e34:	ed93 7b00 	vldr	d7, [r3]
 8008e38:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 80090d0 <G_q+0x6db8>
 8008e3c:	ee27 5b05 	vmul.f64	d5, d7, d5
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8008e40:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008e44:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e48:	ed9f 4ba3 	vldr	d4, [pc, #652]	; 80090d8 <G_q+0x6dc0>
 8008e4c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008e50:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e54:	ee36 6b47 	vsub.f64	d6, d6, d7
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8008e58:	f241 3348 	movw	r3, #4936	; 0x1348
 8008e5c:	443b      	add	r3, r7
 8008e5e:	ed93 5b00 	vldr	d5, [r3]
 8008e62:	f241 3368 	movw	r3, #4968	; 0x1368
 8008e66:	443b      	add	r3, r7
 8008e68:	ed93 7b00 	vldr	d7, [r3]
 8008e6c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008e70:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008e74:	ed93 4b00 	vldr	d4, [r3]
 8008e78:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008e7c:	ed93 7b00 	vldr	d7, [r3]
 8008e80:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008e84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008e88:	ee36 6b47 	vsub.f64	d6, d6, d7
             t16_im)) + (t34_re * t13_re - t34_im * t13_im);
 8008e8c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008e90:	443b      	add	r3, r7
 8008e92:	ed93 5b00 	vldr	d5, [r3]
 8008e96:	f241 3378 	movw	r3, #4984	; 0x1378
 8008e9a:	443b      	add	r3, r7
 8008e9c:	ed93 7b00 	vldr	d7, [r3]
 8008ea0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008ea4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008ea8:	443b      	add	r3, r7
 8008eaa:	ed93 4b00 	vldr	d4, [r3]
 8008eae:	f241 3370 	movw	r3, #4976	; 0x1370
 8008eb2:	443b      	add	r3, r7
 8008eb4:	ed93 7b00 	vldr	d7, [r3]
 8008eb8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008ebc:	ee35 7b47 	vsub.f64	d7, d5, d7
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8008ec0:	f241 2350 	movw	r3, #4688	; 0x1250
 8008ec4:	443b      	add	r3, r7
 8008ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008eca:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8008ece:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008ed2:	ed93 7b00 	vldr	d7, [r3]
 8008ed6:	ed9f 6b80 	vldr	d6, [pc, #512]	; 80090d8 <G_q+0x6dc0>
 8008eda:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008ede:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8008ee2:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ee6:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 80090d0 <G_q+0x6db8>
 8008eea:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008eee:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008ef2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008ef6:	ed93 7b00 	vldr	d7, [r3]
 8008efa:	ed9f 5b77 	vldr	d5, [pc, #476]	; 80090d8 <G_q+0x6dc0>
 8008efe:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 8008f02:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8008f06:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f0a:	ed9f 4b71 	vldr	d4, [pc, #452]	; 80090d0 <G_q+0x6db8>
 8008f0e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008f12:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8008f16:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 8008f1a:	f241 3348 	movw	r3, #4936	; 0x1348
 8008f1e:	443b      	add	r3, r7
 8008f20:	ed93 5b00 	vldr	d5, [r3]
 8008f24:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008f28:	ed93 7b00 	vldr	d7, [r3]
 8008f2c:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008f30:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008f34:	ed93 4b00 	vldr	d4, [r3]
 8008f38:	f241 3368 	movw	r3, #4968	; 0x1368
 8008f3c:	443b      	add	r3, r7
 8008f3e:	ed93 7b00 	vldr	d7, [r3]
 8008f42:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 8008f46:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008f4a:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008f4e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008f52:	443b      	add	r3, r7
 8008f54:	ed93 5b00 	vldr	d5, [r3]
 8008f58:	f241 3370 	movw	r3, #4976	; 0x1370
 8008f5c:	443b      	add	r3, r7
 8008f5e:	ed93 7b00 	vldr	d7, [r3]
 8008f62:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008f66:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008f6a:	443b      	add	r3, r7
 8008f6c:	ed93 4b00 	vldr	d4, [r3]
 8008f70:	f241 3378 	movw	r3, #4984	; 0x1378
 8008f74:	443b      	add	r3, r7
 8008f76:	ed93 7b00 	vldr	d7, [r3]
 8008f7a:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008f7e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8008f82:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f86:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008f8a:	ed83 7b00 	vstr	d7, [r3]
  if (t78.im == 0.0) {
 8008f8e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008f92:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f96:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f9e:	d116      	bne.n	8008fce <G_q+0x6cb6>
    t16_re = t78.re / 2.0;
 8008fa0:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008fa4:	ed93 6b00 	vldr	d6, [r3]
 8008fa8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008fac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008fb0:	f241 3368 	movw	r3, #4968	; 0x1368
 8008fb4:	443b      	add	r3, r7
 8008fb6:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	f04f 0400 	mov.w	r4, #0
 8008fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fc6:	443a      	add	r2, r7
 8008fc8:	e9c2 3400 	strd	r3, r4, [r2]
 8008fcc:	e039      	b.n	8009042 <G_q+0x6d2a>
  } else if (t78.re == 0.0) {
 8008fce:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008fd2:	ed93 7b00 	vldr	d7, [r3]
 8008fd6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fde:	d116      	bne.n	800900e <G_q+0x6cf6>
    t16_re = 0.0;
 8008fe0:	f04f 0300 	mov.w	r3, #0
 8008fe4:	f04f 0400 	mov.w	r4, #0
 8008fe8:	f241 3268 	movw	r2, #4968	; 0x1368
 8008fec:	443a      	add	r2, r7
 8008fee:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t78.im / 2.0;
 8008ff2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8008ff6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008ffa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008ffe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009002:	f241 3388 	movw	r3, #5000	; 0x1388
 8009006:	443b      	add	r3, r7
 8009008:	ed83 7b00 	vstr	d7, [r3]
 800900c:	e019      	b.n	8009042 <G_q+0x6d2a>
  } else {
    t16_re = t78.re / 2.0;
 800900e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009012:	ed93 6b00 	vldr	d6, [r3]
 8009016:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800901a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800901e:	f241 3368 	movw	r3, #4968	; 0x1368
 8009022:	443b      	add	r3, r7
 8009024:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t78.im / 2.0;
 8009028:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 800902c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009030:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009034:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009038:	f241 3388 	movw	r3, #5000	; 0x1388
 800903c:	443b      	add	r3, r7
 800903e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t79.im == 0.0) {
 8009042:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009046:	ed93 7b02 	vldr	d7, [r3, #8]
 800904a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800904e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009052:	d116      	bne.n	8009082 <G_q+0x6d6a>
    t34_re = t79.re / 2.0;
 8009054:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009058:	ed93 6b00 	vldr	d6, [r3]
 800905c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009064:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009068:	443b      	add	r3, r7
 800906a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800906e:	f04f 0300 	mov.w	r3, #0
 8009072:	f04f 0400 	mov.w	r4, #0
 8009076:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800907a:	443a      	add	r2, r7
 800907c:	e9c2 3400 	strd	r3, r4, [r2]
 8009080:	e04a      	b.n	8009118 <G_q+0x6e00>
  } else if (t79.re == 0.0) {
 8009082:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009086:	ed93 7b00 	vldr	d7, [r3]
 800908a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800908e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009092:	d127      	bne.n	80090e4 <G_q+0x6dcc>
    t34_re = 0.0;
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	f04f 0400 	mov.w	r4, #0
 800909c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80090a0:	443a      	add	r2, r7
 80090a2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t79.im / 2.0;
 80090a6:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80090aa:	ed93 6b02 	vldr	d6, [r3, #8]
 80090ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80090ba:	443b      	add	r3, r7
 80090bc:	ed83 7b00 	vstr	d7, [r3]
 80090c0:	e02a      	b.n	8009118 <G_q+0x6e00>
 80090c2:	bf00      	nop
 80090c4:	f3af 8000 	nop.w
 80090c8:	33145c07 	.word	0x33145c07
 80090cc:	3c81a626 	.word	0x3c81a626
	...
 80090d8:	33145c07 	.word	0x33145c07
 80090dc:	3c91a626 	.word	0x3c91a626
 80090e0:	ffffedb0 	.word	0xffffedb0
  } else {
    t34_re = t79.re / 2.0;
 80090e4:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80090e8:	ed93 6b00 	vldr	d6, [r3]
 80090ec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80090f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80090f4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80090f8:	443b      	add	r3, r7
 80090fa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t79.im / 2.0;
 80090fe:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009102:	ed93 6b02 	vldr	d6, [r3, #8]
 8009106:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800910a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800910e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009112:	443b      	add	r3, r7
 8009114:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t80.im == 0.0) {
 8009118:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800911c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009120:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009128:	d115      	bne.n	8009156 <G_q+0x6e3e>
    t16_im = t80.re / 2.0;
 800912a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800912e:	ed93 6b00 	vldr	d6, [r3]
 8009132:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009136:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800913a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800913e:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8009142:	f04f 0300 	mov.w	r3, #0
 8009146:	f04f 0400 	mov.w	r4, #0
 800914a:	f241 3248 	movw	r2, #4936	; 0x1348
 800914e:	443a      	add	r2, r7
 8009150:	e9c2 3400 	strd	r3, r4, [r2]
 8009154:	e037      	b.n	80091c6 <G_q+0x6eae>
  } else if (t80.re == 0.0) {
 8009156:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800915a:	ed93 7b00 	vldr	d7, [r3]
 800915e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009166:	d115      	bne.n	8009194 <G_q+0x6e7c>
    t16_im = 0.0;
 8009168:	f04f 0300 	mov.w	r3, #0
 800916c:	f04f 0400 	mov.w	r4, #0
 8009170:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8009174:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t80.im / 2.0;
 8009178:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800917c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009180:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009184:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009188:	f241 3348 	movw	r3, #4936	; 0x1348
 800918c:	443b      	add	r3, r7
 800918e:	ed83 7b00 	vstr	d7, [r3]
 8009192:	e018      	b.n	80091c6 <G_q+0x6eae>
  } else {
    t16_im = t80.re / 2.0;
 8009194:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009198:	ed93 6b00 	vldr	d6, [r3]
 800919c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091a4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80091a8:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t80.im / 2.0;
 80091ac:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80091b0:	ed93 6b02 	vldr	d6, [r3, #8]
 80091b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091bc:	f241 3348 	movw	r3, #4936	; 0x1348
 80091c0:	443b      	add	r3, r7
 80091c2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t81.im == 0.0) {
 80091c6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80091ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80091ce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80091d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091d6:	d116      	bne.n	8009206 <G_q+0x6eee>
    t13_re = t81.re / 2.0;
 80091d8:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80091dc:	ed93 6b00 	vldr	d6, [r3]
 80091e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80091e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80091e8:	f241 3378 	movw	r3, #4984	; 0x1378
 80091ec:	443b      	add	r3, r7
 80091ee:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80091f2:	f04f 0300 	mov.w	r3, #0
 80091f6:	f04f 0400 	mov.w	r4, #0
 80091fa:	f241 3270 	movw	r2, #4976	; 0x1370
 80091fe:	443a      	add	r2, r7
 8009200:	e9c2 3400 	strd	r3, r4, [r2]
 8009204:	e039      	b.n	800927a <G_q+0x6f62>
  } else if (t81.re == 0.0) {
 8009206:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800920a:	ed93 7b00 	vldr	d7, [r3]
 800920e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009216:	d116      	bne.n	8009246 <G_q+0x6f2e>
    t13_re = 0.0;
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	f04f 0400 	mov.w	r4, #0
 8009220:	f241 3278 	movw	r2, #4984	; 0x1378
 8009224:	443a      	add	r2, r7
 8009226:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t81.im / 2.0;
 800922a:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800922e:	ed93 6b02 	vldr	d6, [r3, #8]
 8009232:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009236:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800923a:	f241 3370 	movw	r3, #4976	; 0x1370
 800923e:	443b      	add	r3, r7
 8009240:	ed83 7b00 	vstr	d7, [r3]
 8009244:	e019      	b.n	800927a <G_q+0x6f62>
  } else {
    t13_re = t81.re / 2.0;
 8009246:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800924a:	ed93 6b00 	vldr	d6, [r3]
 800924e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009252:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009256:	f241 3378 	movw	r3, #4984	; 0x1378
 800925a:	443b      	add	r3, r7
 800925c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t81.im / 2.0;
 8009260:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009264:	ed93 6b02 	vldr	d6, [r3, #8]
 8009268:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800926c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009270:	f241 3370 	movw	r3, #4976	; 0x1370
 8009274:	443b      	add	r3, r7
 8009276:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 800927a:	f241 3368 	movw	r3, #4968	; 0x1368
 800927e:	443b      	add	r3, r7
 8009280:	ed93 6b00 	vldr	d6, [r3]
 8009284:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009288:	443b      	add	r3, r7
 800928a:	ed93 7b00 	vldr	d7, [r3]
 800928e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009292:	f241 3368 	movw	r3, #4968	; 0x1368
 8009296:	443b      	add	r3, r7
 8009298:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800929c:	f241 3388 	movw	r3, #5000	; 0x1388
 80092a0:	443b      	add	r3, r7
 80092a2:	ed93 6b00 	vldr	d6, [r3]
 80092a6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80092aa:	443b      	add	r3, r7
 80092ac:	ed93 7b00 	vldr	d7, [r3]
 80092b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80092b4:	f241 3388 	movw	r3, #5000	; 0x1388
 80092b8:	443b      	add	r3, r7
 80092ba:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t13_re;
 80092be:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80092c2:	ed93 6b00 	vldr	d6, [r3]
 80092c6:	f241 3378 	movw	r3, #4984	; 0x1378
 80092ca:	443b      	add	r3, r7
 80092cc:	ed93 7b00 	vldr	d7, [r3]
 80092d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80092d4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80092d8:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t13_im;
 80092dc:	f241 3348 	movw	r3, #4936	; 0x1348
 80092e0:	443b      	add	r3, r7
 80092e2:	ed93 6b00 	vldr	d6, [r3]
 80092e6:	f241 3370 	movw	r3, #4976	; 0x1370
 80092ea:	443b      	add	r3, r7
 80092ec:	ed93 7b00 	vldr	d7, [r3]
 80092f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80092f4:	f241 3348 	movw	r3, #4936	; 0x1348
 80092f8:	443b      	add	r3, r7
 80092fa:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t83.re * 0.0 - t83.im * 0.5) - (t82.re * 0.0 - t82.im * 0.5);
 80092fe:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009302:	ed93 7b00 	vldr	d7, [r3]
 8009306:	ed9f 6bec 	vldr	d6, [pc, #944]	; 80096b8 <G_q+0x73a0>
 800930a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800930e:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009312:	ed93 7b02 	vldr	d7, [r3, #8]
 8009316:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800931a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800931e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009322:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009326:	ed93 7b00 	vldr	d7, [r3]
 800932a:	ed9f 5be3 	vldr	d5, [pc, #908]	; 80096b8 <G_q+0x73a0>
 800932e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009332:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8009336:	ed93 7b02 	vldr	d7, [r3, #8]
 800933a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800933e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009342:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009346:	ee36 7b47 	vsub.f64	d7, d6, d7
 800934a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800934e:	443b      	add	r3, r7
 8009350:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t83.re * 0.5 + t83.im * 0.0) - (t82.re * 0.5 + t82.im * 0.0);
 8009354:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009358:	ed93 7b00 	vldr	d7, [r3]
 800935c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009360:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009364:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009368:	ed93 7b02 	vldr	d7, [r3, #8]
 800936c:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 80096b8 <G_q+0x73a0>
 8009370:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009374:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009378:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800937c:	ed93 7b00 	vldr	d7, [r3]
 8009380:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009384:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009388:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800938c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009390:	ed9f 4bc9 	vldr	d4, [pc, #804]	; 80096b8 <G_q+0x73a0>
 8009394:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009398:	ee35 7b07 	vadd.f64	d7, d5, d7
 800939c:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093a0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80093a4:	443b      	add	r3, r7
 80093a6:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t85.re * 0.0 - t85.im * 0.5) - (t84.re * 0.0 - t84.im * 0.5);
 80093aa:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80093ae:	ed93 7b00 	vldr	d7, [r3]
 80093b2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 80096b8 <G_q+0x73a0>
 80093b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80093ba:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80093be:	ed93 7b02 	vldr	d7, [r3, #8]
 80093c2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80093c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80093ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 80093ce:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80093d2:	ed93 7b00 	vldr	d7, [r3]
 80093d6:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 80096b8 <G_q+0x73a0>
 80093da:	ee27 5b05 	vmul.f64	d5, d7, d5
 80093de:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80093e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80093e6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80093ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80093ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 80093f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80093f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80093fa:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t85.re * 0.5 + t85.im * 0.0) - (t84.re * 0.5 + t84.im * 0.0);
 80093fe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009402:	ed93 7b00 	vldr	d7, [r3]
 8009406:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800940a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800940e:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8009412:	ed93 7b02 	vldr	d7, [r3, #8]
 8009416:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80096b8 <G_q+0x73a0>
 800941a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800941e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009422:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009426:	ed93 7b00 	vldr	d7, [r3]
 800942a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800942e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009432:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009436:	ed93 7b02 	vldr	d7, [r3, #8]
 800943a:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 80096b8 <G_q+0x73a0>
 800943e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009442:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009446:	ee36 7b47 	vsub.f64	d7, d6, d7
 800944a:	f241 3318 	movw	r3, #4888	; 0x1318
 800944e:	443b      	add	r3, r7
 8009450:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t16_re * t16_im - t12_re * t20_re) + (t34_re * t12_im - t34_im *
 8009454:	f241 3368 	movw	r3, #4968	; 0x1368
 8009458:	443b      	add	r3, r7
 800945a:	ed93 6b00 	vldr	d6, [r3]
 800945e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009462:	ed93 7b00 	vldr	d7, [r3]
 8009466:	ee26 6b07 	vmul.f64	d6, d6, d7
 800946a:	f241 3388 	movw	r3, #5000	; 0x1388
 800946e:	443b      	add	r3, r7
 8009470:	ed93 5b00 	vldr	d5, [r3]
 8009474:	f241 3348 	movw	r3, #4936	; 0x1348
 8009478:	443b      	add	r3, r7
 800947a:	ed93 7b00 	vldr	d7, [r3]
 800947e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009482:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009486:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800948a:	443b      	add	r3, r7
 800948c:	ed93 5b00 	vldr	d5, [r3]
 8009490:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009494:	ed93 7b00 	vldr	d7, [r3]
 8009498:	ee25 5b07 	vmul.f64	d5, d5, d7
 800949c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80094a0:	443b      	add	r3, r7
 80094a2:	ed93 4b00 	vldr	d4, [r3]
 80094a6:	f241 3318 	movw	r3, #4888	; 0x1318
 80094aa:	443b      	add	r3, r7
 80094ac:	ed93 7b00 	vldr	d7, [r3]
 80094b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80094b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80094b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80094bc:	f241 3370 	movw	r3, #4976	; 0x1370
 80094c0:	443b      	add	r3, r7
 80094c2:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t12_re = (t16_re * t20_re + t12_re * t16_im) + (t34_re * t85_im + t34_im *
 80094c6:	f241 3368 	movw	r3, #4968	; 0x1368
 80094ca:	443b      	add	r3, r7
 80094cc:	ed93 6b00 	vldr	d6, [r3]
 80094d0:	f241 3348 	movw	r3, #4936	; 0x1348
 80094d4:	443b      	add	r3, r7
 80094d6:	ed93 7b00 	vldr	d7, [r3]
 80094da:	ee26 6b07 	vmul.f64	d6, d6, d7
 80094de:	f241 3388 	movw	r3, #5000	; 0x1388
 80094e2:	443b      	add	r3, r7
 80094e4:	ed93 5b00 	vldr	d5, [r3]
 80094e8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80094ec:	ed93 7b00 	vldr	d7, [r3]
 80094f0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80094f4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80094f8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80094fc:	443b      	add	r3, r7
 80094fe:	ed93 5b00 	vldr	d5, [r3]
 8009502:	f241 3318 	movw	r3, #4888	; 0x1318
 8009506:	443b      	add	r3, r7
 8009508:	ed93 7b00 	vldr	d7, [r3]
 800950c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009510:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009514:	443b      	add	r3, r7
 8009516:	ed93 4b00 	vldr	d4, [r3]
 800951a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800951e:	ed93 7b00 	vldr	d7, [r3]
 8009522:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009526:	ee35 7b07 	vadd.f64	d7, d5, d7
 800952a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800952e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009532:	443b      	add	r3, r7
 8009534:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 8009538:	4b65      	ldr	r3, [pc, #404]	; (80096d0 <G_q+0x73b8>)
 800953a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800953e:	443a      	add	r2, r7
 8009540:	4413      	add	r3, r2
 8009542:	ed93 7b02 	vldr	d7, [r3, #8]
 8009546:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 80096c0 <G_q+0x73a8>
 800954a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800954e:	f241 2370 	movw	r3, #4720	; 0x1270
 8009552:	443b      	add	r3, r7
 8009554:	ed93 6b00 	vldr	d6, [r3]
 8009558:	ee36 6b47 	vsub.f64	d6, d6, d7
 800955c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009560:	ed93 7b00 	vldr	d7, [r3]
 8009564:	ed9f 5b54 	vldr	d5, [pc, #336]	; 80096b8 <G_q+0x73a0>
 8009568:	ee27 5b05 	vmul.f64	d5, d7, d5
    t86.im * 3.061616997868383E-17);
 800956c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009570:	ed93 7b02 	vldr	d7, [r3, #8]
 8009574:	ed9f 4b52 	vldr	d4, [pc, #328]	; 80096c0 <G_q+0x73a8>
 8009578:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 800957c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009580:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009584:	f241 3378 	movw	r3, #4984	; 0x1378
 8009588:	443b      	add	r3, r7
 800958a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 800958e:	4b50      	ldr	r3, [pc, #320]	; (80096d0 <G_q+0x73b8>)
 8009590:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009594:	443a      	add	r2, r7
 8009596:	4413      	add	r3, r2
 8009598:	ed93 7b00 	vldr	d7, [r3]
 800959c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 80096c0 <G_q+0x73a8>
 80095a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80095a4:	f241 2368 	movw	r3, #4712	; 0x1268
 80095a8:	443b      	add	r3, r7
 80095aa:	ed93 7b00 	vldr	d7, [r3]
 80095ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80095b2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80095b6:	ed93 7b00 	vldr	d7, [r3]
 80095ba:	ed9f 5b41 	vldr	d5, [pc, #260]	; 80096c0 <G_q+0x73a8>
 80095be:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t86.im * 0.0);
 80095c2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80095c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80095ca:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 80096b8 <G_q+0x73a0>
 80095ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095d2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 80095d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095da:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80095de:	443b      	add	r3, r7
 80095e0:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t55_re;
 80095e4:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80095e8:	443b      	add	r3, r7
 80095ea:	ed93 6b00 	vldr	d6, [r3]
 80095ee:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80095f2:	ed93 7b00 	vldr	d7, [r3]
 80095f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80095fa:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80095fe:	443b      	add	r3, r7
 8009600:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t55_im;
 8009604:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009608:	443b      	add	r3, r7
 800960a:	ed93 6b00 	vldr	d6, [r3]
 800960e:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8009612:	443b      	add	r3, r7
 8009614:	ed93 7b00 	vldr	d7, [r3]
 8009618:	ee36 7b07 	vadd.f64	d7, d6, d7
 800961c:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009620:	443b      	add	r3, r7
 8009622:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009626:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800962a:	ed93 7b00 	vldr	d7, [r3]
 800962e:	ed9f 6b22 	vldr	d6, [pc, #136]	; 80096b8 <G_q+0x73a0>
 8009632:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009636:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800963a:	ed93 7b02 	vldr	d7, [r3, #8]
 800963e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80096c8 <G_q+0x73b0>
 8009642:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009646:	ee36 6b47 	vsub.f64	d6, d6, d7
 800964a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800964e:	ed93 7b00 	vldr	d7, [r3]
 8009652:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80096b8 <G_q+0x73a0>
 8009656:	ee27 5b05 	vmul.f64	d5, d7, d5
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 800965a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800965e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009662:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80096c8 <G_q+0x73b0>
 8009666:	ee27 7b04 	vmul.f64	d7, d7, d4
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 800966a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800966e:	ee36 6b47 	vsub.f64	d6, d6, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009672:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8009676:	443a      	add	r2, r7
 8009678:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800967c:	ed92 5b00 	vldr	d5, [r2]
 8009680:	ed93 7b00 	vldr	d7, [r3]
 8009684:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009688:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800968c:	443b      	add	r3, r7
 800968e:	ed93 4b00 	vldr	d4, [r3]
 8009692:	f241 3338 	movw	r3, #4920	; 0x1338
 8009696:	443b      	add	r3, r7
 8009698:	ed93 7b00 	vldr	d7, [r3]
 800969c:	ee24 7b07 	vmul.f64	d7, d4, d7
 80096a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096a4:	ee36 6b07 	vadd.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 80096a8:	f241 22b8 	movw	r2, #4792	; 0x12b8
 80096ac:	443a      	add	r2, r7
 80096ae:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80096b2:	443b      	add	r3, r7
 80096b4:	e00e      	b.n	80096d4 <G_q+0x73bc>
 80096b6:	bf00      	nop
	...
 80096c0:	33145c07 	.word	0x33145c07
 80096c4:	3c81a626 	.word	0x3c81a626
 80096c8:	858a5d48 	.word	0x858a5d48
 80096cc:	393377ce 	.word	0x393377ce
 80096d0:	ffffedd0 	.word	0xffffedd0
 80096d4:	ed92 5b00 	vldr	d5, [r2]
 80096d8:	ed93 7b00 	vldr	d7, [r3]
 80096dc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80096e0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80096e4:	443b      	add	r3, r7
 80096e6:	ed93 4b00 	vldr	d4, [r3]
 80096ea:	f241 3310 	movw	r3, #4880	; 0x1310
 80096ee:	443b      	add	r3, r7
 80096f0:	ed93 7b00 	vldr	d7, [r3]
 80096f4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80096f8:	ee35 7b47 	vsub.f64	d7, d5, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 80096fc:	ee36 6b47 	vsub.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8009700:	f241 2350 	movw	r3, #4688	; 0x1250
 8009704:	443b      	add	r3, r7
 8009706:	f241 3230 	movw	r2, #4912	; 0x1330
 800970a:	443a      	add	r2, r7
 800970c:	ed92 5b00 	vldr	d5, [r2]
 8009710:	ed93 7b00 	vldr	d7, [r3]
 8009714:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009718:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800971c:	ed93 4b00 	vldr	d4, [r3]
 8009720:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009724:	ed93 7b00 	vldr	d7, [r3]
 8009728:	ee24 7b07 	vmul.f64	d7, d4, d7
 800972c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009730:	ee36 6b07 	vadd.f64	d6, d6, d7
             t20_im)) + (t13_im * t13_re - t12_re * t34_re);
 8009734:	f241 3370 	movw	r3, #4976	; 0x1370
 8009738:	443b      	add	r3, r7
 800973a:	ed93 5b00 	vldr	d5, [r3]
 800973e:	f241 3378 	movw	r3, #4984	; 0x1378
 8009742:	443b      	add	r3, r7
 8009744:	ed93 7b00 	vldr	d7, [r3]
 8009748:	ee25 5b07 	vmul.f64	d5, d5, d7
 800974c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009750:	443b      	add	r3, r7
 8009752:	ed93 4b00 	vldr	d4, [r3]
 8009756:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800975a:	443b      	add	r3, r7
 800975c:	ed93 7b00 	vldr	d7, [r3]
 8009760:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009764:	ee35 7b47 	vsub.f64	d7, d5, d7
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800976c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009770:	443b      	add	r3, r7
 8009772:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009776:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800977a:	ed93 7b00 	vldr	d7, [r3]
 800977e:	ed9f 6be8 	vldr	d6, [pc, #928]	; 8009b20 <G_q+0x7808>
 8009782:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009786:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 800978a:	ed93 7b02 	vldr	d7, [r3, #8]
 800978e:	ed9f 5be6 	vldr	d5, [pc, #920]	; 8009b28 <G_q+0x7810>
 8009792:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009796:	ee36 6b07 	vadd.f64	d6, d6, d7
 800979a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800979e:	ed93 7b00 	vldr	d7, [r3]
 80097a2:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8009b20 <G_q+0x7808>
 80097a6:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 80097aa:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80097ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80097b2:	ed9f 4bdd 	vldr	d4, [pc, #884]	; 8009b28 <G_q+0x7810>
 80097b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80097ba:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 80097be:	ee36 6b47 	vsub.f64	d6, d6, d7
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 80097c2:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80097c6:	443b      	add	r3, r7
 80097c8:	ed93 5b00 	vldr	d5, [r3]
 80097cc:	f241 3338 	movw	r3, #4920	; 0x1338
 80097d0:	443b      	add	r3, r7
 80097d2:	ed93 7b00 	vldr	d7, [r3]
 80097d6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80097da:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80097de:	443a      	add	r2, r7
 80097e0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80097e4:	ed92 4b00 	vldr	d4, [r2]
 80097e8:	ed93 7b00 	vldr	d7, [r3]
 80097ec:	ee24 7b07 	vmul.f64	d7, d4, d7
 80097f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80097f4:	ee36 6b07 	vadd.f64	d6, d6, d7
    t72_re)) - (t74_re * t3_im + t74_im * t76_re)) + (t23_re * t20_im + t58_im *
 80097f8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80097fc:	443b      	add	r3, r7
 80097fe:	ed93 5b00 	vldr	d5, [r3]
 8009802:	f241 3310 	movw	r3, #4880	; 0x1310
 8009806:	443b      	add	r3, r7
 8009808:	ed93 7b00 	vldr	d7, [r3]
 800980c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009810:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8009814:	443a      	add	r2, r7
 8009816:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800981a:	443b      	add	r3, r7
 800981c:	ed92 4b00 	vldr	d4, [r2]
 8009820:	ed93 7b00 	vldr	d7, [r3]
 8009824:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009828:	ee35 7b07 	vadd.f64	d7, d5, d7
 800982c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009830:	f241 3330 	movw	r3, #4912	; 0x1330
 8009834:	443b      	add	r3, r7
 8009836:	ed93 5b00 	vldr	d5, [r3]
 800983a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800983e:	ed93 7b00 	vldr	d7, [r3]
 8009842:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009846:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800984a:	f241 2350 	movw	r3, #4688	; 0x1250
 800984e:	443b      	add	r3, r7
 8009850:	ed92 4b00 	vldr	d4, [r2]
 8009854:	ed93 7b00 	vldr	d7, [r3]
 8009858:	ee24 7b07 	vmul.f64	d7, d4, d7
 800985c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009860:	ee36 6b07 	vadd.f64	d6, d6, d7
             t60_re)) + (t13_im * t34_re + t12_re * t13_re);
 8009864:	f241 3370 	movw	r3, #4976	; 0x1370
 8009868:	443b      	add	r3, r7
 800986a:	ed93 5b00 	vldr	d5, [r3]
 800986e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009872:	443b      	add	r3, r7
 8009874:	ed93 7b00 	vldr	d7, [r3]
 8009878:	ee25 5b07 	vmul.f64	d5, d5, d7
 800987c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009880:	443b      	add	r3, r7
 8009882:	ed93 4b00 	vldr	d4, [r3]
 8009886:	f241 3378 	movw	r3, #4984	; 0x1378
 800988a:	443b      	add	r3, r7
 800988c:	ed93 7b00 	vldr	d7, [r3]
 8009890:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009894:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009898:	ee36 7b07 	vadd.f64	d7, d6, d7
 800989c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80098a0:	443b      	add	r3, r7
 80098a2:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 80098a6:	4bae      	ldr	r3, [pc, #696]	; (8009b60 <G_q+0x7848>)
 80098a8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80098ac:	443a      	add	r2, r7
 80098ae:	4413      	add	r3, r2
 80098b0:	ed93 7b00 	vldr	d7, [r3]
 80098b4:	eeb1 6b47 	vneg.f64	d6, d7
 80098b8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80098bc:	ed93 7b00 	vldr	d7, [r3]
 80098c0:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8009b30 <G_q+0x7818>
 80098c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80098c8:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80098cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80098d0:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8009b38 <G_q+0x7820>
 80098d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80098d8:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 80098dc:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80098e0:	ed93 7b00 	vldr	d7, [r3]
 80098e4:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8009b30 <G_q+0x7818>
 80098e8:	ee27 4b04 	vmul.f64	d4, d7, d4
 80098ec:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80098f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80098f4:	ed9f 3b90 	vldr	d3, [pc, #576]	; 8009b38 <G_q+0x7820>
 80098f8:	ee27 7b03 	vmul.f64	d7, d7, d3
 80098fc:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009900:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009904:	f241 2398 	movw	r3, #4760	; 0x1298
 8009908:	443b      	add	r3, r7
 800990a:	f241 32c8 	movw	r2, #5064	; 0x13c8
 800990e:	443a      	add	r2, r7
 8009910:	ed92 4b00 	vldr	d4, [r2]
 8009914:	ed93 7b00 	vldr	d7, [r3]
 8009918:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 800991c:	f241 2390 	movw	r3, #4752	; 0x1290
 8009920:	443b      	add	r3, r7
 8009922:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009926:	ed92 3b00 	vldr	d3, [r2]
 800992a:	ed93 7b00 	vldr	d7, [r3]
 800992e:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009932:	ee34 7b47 	vsub.f64	d7, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009936:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8009b40 <G_q+0x7828>
 800993a:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 800993e:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009942:	f241 2388 	movw	r3, #4744	; 0x1288
 8009946:	443b      	add	r3, r7
 8009948:	f241 32a8 	movw	r2, #5032	; 0x13a8
 800994c:	443a      	add	r2, r7
 800994e:	ed92 4b00 	vldr	d4, [r2]
 8009952:	ed93 7b00 	vldr	d7, [r3]
 8009956:	ee24 4b07 	vmul.f64	d4, d4, d7
 800995a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 800995e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009962:	ed92 3b00 	vldr	d3, [r2]
 8009966:	ed93 7b00 	vldr	d7, [r3]
 800996a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800996e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009972:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8009b40 <G_q+0x7828>
 8009976:	ee27 7b04 	vmul.f64	d7, d7, d4
 800997a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 800997e:	f241 3328 	movw	r3, #4904	; 0x1328
 8009982:	443b      	add	r3, r7
 8009984:	ed93 4b00 	vldr	d4, [r3]
 8009988:	f241 3398 	movw	r3, #5016	; 0x1398
 800998c:	443b      	add	r3, r7
 800998e:	ed93 7b00 	vldr	d7, [r3]
 8009992:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009996:	f241 2378 	movw	r3, #4728	; 0x1278
 800999a:	443b      	add	r3, r7
 800999c:	ed93 3b00 	vldr	d3, [r3]
 80099a0:	f241 3390 	movw	r3, #5008	; 0x1390
 80099a4:	443b      	add	r3, r7
 80099a6:	ed93 7b00 	vldr	d7, [r3]
 80099aa:	ee23 7b07 	vmul.f64	d7, d3, d7
 80099ae:	ee34 7b47 	vsub.f64	d7, d4, d7
 80099b2:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009b48 <G_q+0x7830>
 80099b6:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 80099ba:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 80099be:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 80099c2:	f241 3258 	movw	r2, #4952	; 0x1358
 80099c6:	443a      	add	r2, r7
 80099c8:	ed92 4b00 	vldr	d4, [r2]
 80099cc:	ed93 7b00 	vldr	d7, [r3]
 80099d0:	ee24 4b07 	vmul.f64	d4, d4, d7
 80099d4:	f241 3350 	movw	r3, #4944	; 0x1350
 80099d8:	443b      	add	r3, r7
 80099da:	ed93 3b00 	vldr	d3, [r3]
 80099de:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 80099e2:	ed93 7b00 	vldr	d7, [r3]
 80099e6:	ee23 7b07 	vmul.f64	d7, d3, d7
 80099ea:	ee34 7b47 	vsub.f64	d7, d4, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 80099ee:	ed9f 4b58 	vldr	d4, [pc, #352]	; 8009b50 <G_q+0x7838>
 80099f2:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 80099f6:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 80099fa:	f241 2358 	movw	r3, #4696	; 0x1258
 80099fe:	443b      	add	r3, r7
 8009a00:	f241 3208 	movw	r2, #4872	; 0x1308
 8009a04:	443a      	add	r2, r7
 8009a06:	ed92 4b00 	vldr	d4, [r2]
 8009a0a:	ed93 7b00 	vldr	d7, [r3]
 8009a0e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009a12:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8009a16:	ed93 3b00 	vldr	d3, [r3]
 8009a1a:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009a1e:	443b      	add	r3, r7
 8009a20:	ed93 7b00 	vldr	d7, [r3]
 8009a24:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009a28:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009a2c:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8009b50 <G_q+0x7838>
 8009a30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a34:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009a38:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009a3c:	443b      	add	r3, r7
 8009a3e:	ed93 4b00 	vldr	d4, [r3]
 8009a42:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009a46:	443b      	add	r3, r7
 8009a48:	ed93 7b00 	vldr	d7, [r3]
 8009a4c:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009a50:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009a54:	443b      	add	r3, r7
 8009a56:	ed93 3b00 	vldr	d3, [r3]
 8009a5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009a5e:	443b      	add	r3, r7
 8009a60:	ed93 7b00 	vldr	d7, [r3]
 8009a64:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009a68:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_re) * 0.0215);
 8009a6c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8009b48 <G_q+0x7830>
 8009a70:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009a74:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009a78:	4b3a      	ldr	r3, [pc, #232]	; (8009b64 <G_q+0x784c>)
 8009a7a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009a7e:	443a      	add	r2, r7
 8009a80:	4413      	add	r3, r2
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	3310      	adds	r3, #16
 8009a86:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009a8a:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009a8e:	4b34      	ldr	r3, [pc, #208]	; (8009b60 <G_q+0x7848>)
 8009a90:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009a94:	443a      	add	r2, r7
 8009a96:	4413      	add	r3, r2
 8009a98:	ed93 7b00 	vldr	d7, [r3]
 8009a9c:	eeb1 6b47 	vneg.f64	d6, d7
 8009aa0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009aa4:	ed93 7b00 	vldr	d7, [r3]
 8009aa8:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8009b38 <G_q+0x7820>
 8009aac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009ab0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009ab4:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ab8:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8009b30 <G_q+0x7818>
 8009abc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ac0:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009ac4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009ac8:	ed93 7b00 	vldr	d7, [r3]
 8009acc:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8009b58 <G_q+0x7840>
 8009ad0:	ee27 4b04 	vmul.f64	d4, d7, d4
 8009ad4:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009ad8:	ed93 7b02 	vldr	d7, [r3, #8]
 8009adc:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8009b30 <G_q+0x7818>
 8009ae0:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009ae4:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009ae8:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009aec:	f241 2390 	movw	r3, #4752	; 0x1290
 8009af0:	443b      	add	r3, r7
 8009af2:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009af6:	443a      	add	r2, r7
 8009af8:	ed92 4b00 	vldr	d4, [r2]
 8009afc:	ed93 7b00 	vldr	d7, [r3]
 8009b00:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009b04:	f241 2398 	movw	r3, #4760	; 0x1298
 8009b08:	443b      	add	r3, r7
 8009b0a:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009b0e:	ed92 3b00 	vldr	d3, [r2]
 8009b12:	ed93 7b00 	vldr	d7, [r3]
 8009b16:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009b1a:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009b1e:	e023      	b.n	8009b68 <G_q+0x7850>
 8009b20:	858a5d48 	.word	0x858a5d48
 8009b24:	393377ce 	.word	0x393377ce
	...
 8009b30:	2b020c4a 	.word	0x2b020c4a
 8009b34:	3fc11687 	.word	0x3fc11687
 8009b38:	558ec760 	.word	0x558ec760
 8009b3c:	3c5621c2 	.word	0x3c5621c2
 8009b40:	75f6fd22 	.word	0x75f6fd22
 8009b44:	3fc19ce0 	.word	0x3fc19ce0
 8009b48:	9374bc6a 	.word	0x9374bc6a
 8009b4c:	3f960418 	.word	0x3f960418
 8009b50:	2ba953a1 	.word	0x2ba953a1
 8009b54:	3c3848f9 	.word	0x3c3848f9
 8009b58:	558ec760 	.word	0x558ec760
 8009b5c:	bc5621c2 	.word	0xbc5621c2
 8009b60:	ffffec58 	.word	0xffffec58
 8009b64:	ffffec34 	.word	0xffffec34
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009b68:	ed9f 4ba1 	vldr	d4, [pc, #644]	; 8009df0 <G_q+0x7ad8>
 8009b6c:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009b70:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009b74:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009b78:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009b7c:	443a      	add	r2, r7
 8009b7e:	ed92 4b00 	vldr	d4, [r2]
 8009b82:	ed93 7b00 	vldr	d7, [r3]
 8009b86:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009b8a:	f241 2388 	movw	r3, #4744	; 0x1288
 8009b8e:	443b      	add	r3, r7
 8009b90:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009b94:	ed92 3b00 	vldr	d3, [r2]
 8009b98:	ed93 7b00 	vldr	d7, [r3]
 8009b9c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009ba0:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009ba4:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8009df0 <G_q+0x7ad8>
 8009ba8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009bac:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009bb0:	f241 3328 	movw	r3, #4904	; 0x1328
 8009bb4:	443b      	add	r3, r7
 8009bb6:	ed93 4b00 	vldr	d4, [r3]
 8009bba:	f241 3390 	movw	r3, #5008	; 0x1390
 8009bbe:	443b      	add	r3, r7
 8009bc0:	ed93 7b00 	vldr	d7, [r3]
 8009bc4:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009bc8:	f241 2378 	movw	r3, #4728	; 0x1278
 8009bcc:	443b      	add	r3, r7
 8009bce:	ed93 3b00 	vldr	d3, [r3]
 8009bd2:	f241 3398 	movw	r3, #5016	; 0x1398
 8009bd6:	443b      	add	r3, r7
 8009bd8:	ed93 7b00 	vldr	d7, [r3]
 8009bdc:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009be0:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009be4:	ed9f 4b84 	vldr	d4, [pc, #528]	; 8009df8 <G_q+0x7ae0>
 8009be8:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009bec:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009bf0:	f241 3358 	movw	r3, #4952	; 0x1358
 8009bf4:	443b      	add	r3, r7
 8009bf6:	ed93 4b00 	vldr	d4, [r3]
 8009bfa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009bfe:	ed93 7b00 	vldr	d7, [r3]
 8009c02:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c06:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009c0a:	f241 3250 	movw	r2, #4944	; 0x1350
 8009c0e:	443a      	add	r2, r7
 8009c10:	ed92 3b00 	vldr	d3, [r2]
 8009c14:	ed93 7b00 	vldr	d7, [r3]
 8009c18:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c1c:	ee34 7b07 	vadd.f64	d7, d4, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009c20:	ed9f 4b77 	vldr	d4, [pc, #476]	; 8009e00 <G_q+0x7ae8>
 8009c24:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009c28:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009c2c:	f241 3308 	movw	r3, #4872	; 0x1308
 8009c30:	443b      	add	r3, r7
 8009c32:	ed93 4b00 	vldr	d4, [r3]
 8009c36:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009c3a:	443b      	add	r3, r7
 8009c3c:	ed93 7b00 	vldr	d7, [r3]
 8009c40:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c44:	f241 2358 	movw	r3, #4696	; 0x1258
 8009c48:	443b      	add	r3, r7
 8009c4a:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8009c4e:	ed92 3b00 	vldr	d3, [r2]
 8009c52:	ed93 7b00 	vldr	d7, [r3]
 8009c56:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c5a:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009c5e:	ed9f 4b68 	vldr	d4, [pc, #416]	; 8009e00 <G_q+0x7ae8>
 8009c62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c66:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009c6a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009c6e:	443b      	add	r3, r7
 8009c70:	ed93 4b00 	vldr	d4, [r3]
 8009c74:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009c78:	443b      	add	r3, r7
 8009c7a:	ed93 7b00 	vldr	d7, [r3]
 8009c7e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c82:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009c86:	443b      	add	r3, r7
 8009c88:	ed93 3b00 	vldr	d3, [r3]
 8009c8c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009c90:	443b      	add	r3, r7
 8009c92:	ed93 7b00 	vldr	d7, [r3]
 8009c96:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c9a:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_im) * 0.0215);
 8009c9e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8009df8 <G_q+0x7ae0>
 8009ca2:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009ca6:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009caa:	4b57      	ldr	r3, [pc, #348]	; (8009e08 <G_q+0x7af0>)
 8009cac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009cb0:	443a      	add	r2, r7
 8009cb2:	4413      	add	r3, r2
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3310      	adds	r3, #16
 8009cb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009cbc:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t154.im == 0.0) {
 8009cc0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009cc4:	ed93 7b02 	vldr	d7, [r3, #8]
 8009cc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cd0:	d115      	bne.n	8009cfe <G_q+0x79e6>
    t8_im = t154.re / 2.0;
 8009cd2:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009cd6:	ed93 6b00 	vldr	d6, [r3]
 8009cda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009cde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009ce2:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009ce6:	ed83 7b00 	vstr	d7, [r3]
    t54_re = 0.0;
 8009cea:	f04f 0300 	mov.w	r3, #0
 8009cee:	f04f 0400 	mov.w	r4, #0
 8009cf2:	f241 3228 	movw	r2, #4904	; 0x1328
 8009cf6:	443a      	add	r2, r7
 8009cf8:	e9c2 3400 	strd	r3, r4, [r2]
 8009cfc:	e037      	b.n	8009d6e <G_q+0x7a56>
  } else if (t154.re == 0.0) {
 8009cfe:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009d02:	ed93 7b00 	vldr	d7, [r3]
 8009d06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d0e:	d115      	bne.n	8009d3c <G_q+0x7a24>
    t8_im = 0.0;
 8009d10:	f04f 0300 	mov.w	r3, #0
 8009d14:	f04f 0400 	mov.w	r4, #0
 8009d18:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8009d1c:	e9c2 3400 	strd	r3, r4, [r2]
    t54_re = t154.im / 2.0;
 8009d20:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009d24:	ed93 6b02 	vldr	d6, [r3, #8]
 8009d28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009d2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009d30:	f241 3328 	movw	r3, #4904	; 0x1328
 8009d34:	443b      	add	r3, r7
 8009d36:	ed83 7b00 	vstr	d7, [r3]
 8009d3a:	e018      	b.n	8009d6e <G_q+0x7a56>
  } else {
    t8_im = t154.re / 2.0;
 8009d3c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009d40:	ed93 6b00 	vldr	d6, [r3]
 8009d44:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009d48:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009d4c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009d50:	ed83 7b00 	vstr	d7, [r3]
    t54_re = t154.im / 2.0;
 8009d54:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009d58:	ed93 6b02 	vldr	d6, [r3, #8]
 8009d5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009d60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009d64:	f241 3328 	movw	r3, #4904	; 0x1328
 8009d68:	443b      	add	r3, r7
 8009d6a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t155.im == 0.0) {
 8009d6e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009d72:	ed93 7b02 	vldr	d7, [r3, #8]
 8009d76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d7e:	d116      	bne.n	8009dae <G_q+0x7a96>
    t34_re = t155.re / 2.0;
 8009d80:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009d84:	ed93 6b00 	vldr	d6, [r3]
 8009d88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009d8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009d90:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009d94:	443b      	add	r3, r7
 8009d96:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8009d9a:	f04f 0300 	mov.w	r3, #0
 8009d9e:	f04f 0400 	mov.w	r4, #0
 8009da2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8009da6:	443a      	add	r2, r7
 8009da8:	e9c2 3400 	strd	r3, r4, [r2]
 8009dac:	e048      	b.n	8009e40 <G_q+0x7b28>
  } else if (t155.re == 0.0) {
 8009dae:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009db2:	ed93 7b00 	vldr	d7, [r3]
 8009db6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbe:	d125      	bne.n	8009e0c <G_q+0x7af4>
    t34_re = 0.0;
 8009dc0:	f04f 0300 	mov.w	r3, #0
 8009dc4:	f04f 0400 	mov.w	r4, #0
 8009dc8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009dcc:	443a      	add	r2, r7
 8009dce:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t155.im / 2.0;
 8009dd2:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009dd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8009dda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009dde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009de2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009de6:	443b      	add	r3, r7
 8009de8:	ed83 7b00 	vstr	d7, [r3]
 8009dec:	e028      	b.n	8009e40 <G_q+0x7b28>
 8009dee:	bf00      	nop
 8009df0:	75f6fd22 	.word	0x75f6fd22
 8009df4:	3fc19ce0 	.word	0x3fc19ce0
 8009df8:	9374bc6a 	.word	0x9374bc6a
 8009dfc:	3f960418 	.word	0x3f960418
 8009e00:	2ba953a1 	.word	0x2ba953a1
 8009e04:	3c3848f9 	.word	0x3c3848f9
 8009e08:	ffffec34 	.word	0xffffec34
  } else {
    t34_re = t155.re / 2.0;
 8009e0c:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009e10:	ed93 6b00 	vldr	d6, [r3]
 8009e14:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e1c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009e20:	443b      	add	r3, r7
 8009e22:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t155.im / 2.0;
 8009e26:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8009e2a:	ed93 6b02 	vldr	d6, [r3, #8]
 8009e2e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009e32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009e36:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009e3a:	443b      	add	r3, r7
 8009e3c:	ed83 7b00 	vstr	d7, [r3]
  }

  t8_im += t34_re;
 8009e40:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009e44:	ed93 6b00 	vldr	d6, [r3]
 8009e48:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009e4c:	443b      	add	r3, r7
 8009e4e:	ed93 7b00 	vldr	d7, [r3]
 8009e52:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009e56:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009e5a:	ed83 7b00 	vstr	d7, [r3]
  t54_re += t34_im;
 8009e5e:	f241 3328 	movw	r3, #4904	; 0x1328
 8009e62:	443b      	add	r3, r7
 8009e64:	ed93 6b00 	vldr	d6, [r3]
 8009e68:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009e6c:	443b      	add	r3, r7
 8009e6e:	ed93 7b00 	vldr	d7, [r3]
 8009e72:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009e76:	f241 3328 	movw	r3, #4904	; 0x1328
 8009e7a:	443b      	add	r3, r7
 8009e7c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = (t156.re * 0.0 - t156.im * 0.5) - (t157.re * 0.0 - t157.im * 0.5);
 8009e80:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009e84:	ed93 7b00 	vldr	d7, [r3]
 8009e88:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 800a170 <G_q+0x7e58>
 8009e8c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009e90:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009e94:	ed93 7b02 	vldr	d7, [r3, #8]
 8009e98:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009e9c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ea0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ea4:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009ea8:	ed93 7b00 	vldr	d7, [r3]
 8009eac:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 800a170 <G_q+0x7e58>
 8009eb0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009eb4:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009eb8:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ebc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009ec0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ec4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ec8:	f241 2370 	movw	r3, #4720	; 0x1270
 8009ecc:	443b      	add	r3, r7
 8009ece:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009ed2:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = (t156.re * 0.5 + t156.im * 0.0) - (t157.re * 0.5 + t157.im * 0.0);
 8009ed6:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009eda:	ed93 7b00 	vldr	d7, [r3]
 8009ede:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009ee2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009ee6:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8009eea:	ed93 7b02 	vldr	d7, [r3, #8]
 8009eee:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800a170 <G_q+0x7e58>
 8009ef2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ef6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009efa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009efe:	ed93 7b00 	vldr	d7, [r3]
 8009f02:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009f06:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009f0a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8009f0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f12:	ed9f 4b97 	vldr	d4, [pc, #604]	; 800a170 <G_q+0x7e58>
 8009f16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f1a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009f1e:	f241 2368 	movw	r3, #4712	; 0x1268
 8009f22:	443b      	add	r3, r7
 8009f24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009f28:	ed83 7b00 	vstr	d7, [r3]
  t41_im = t98.re * 3.061616997868383E-17 + t99.re * 3.061616997868383E-17;
 8009f2c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8009f30:	ed93 7b00 	vldr	d7, [r3]
 8009f34:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 800a160 <G_q+0x7e48>
 8009f38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009f3c:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8009f40:	ed93 7b00 	vldr	d7, [r3]
 8009f44:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800a160 <G_q+0x7e48>
 8009f48:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009f4c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f50:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8009f54:	ed83 7b00 	vstr	d7, [r3]
  t8_re = t98.im * 3.061616997868383E-17 + t99.im * 3.061616997868383E-17;
 8009f58:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8009f5c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f60:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 800a160 <G_q+0x7e48>
 8009f64:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009f68:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8009f6c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f70:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 800a160 <G_q+0x7e48>
 8009f74:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009f78:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009f7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009f80:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t96.re * 0.0 - t96.im * 0.5) - (t97.re * 0.0 - t97.im * 0.5);
 8009f84:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8009f88:	ed93 7b00 	vldr	d7, [r3]
 8009f8c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a170 <G_q+0x7e58>
 8009f90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009f94:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8009f98:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f9c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009fa0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009fa4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009fa8:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8009fac:	ed93 7b00 	vldr	d7, [r3]
 8009fb0:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800a170 <G_q+0x7e58>
 8009fb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009fb8:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8009fbc:	ed93 7b02 	vldr	d7, [r3, #8]
 8009fc0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009fc4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009fc8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009fcc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009fd0:	f241 3378 	movw	r3, #4984	; 0x1378
 8009fd4:	443b      	add	r3, r7
 8009fd6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t96.re * 0.5 + t96.im * 0.0) - (t97.re * 0.5 + t97.im * 0.0);
 8009fda:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8009fde:	ed93 7b00 	vldr	d7, [r3]
 8009fe2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009fe6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009fea:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8009fee:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ff2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800a170 <G_q+0x7e58>
 8009ff6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009ffa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009ffe:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a002:	ed93 7b00 	vldr	d7, [r3]
 800a006:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a00a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a00e:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a012:	ed93 7b02 	vldr	d7, [r3, #8]
 800a016:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a170 <G_q+0x7e58>
 800a01a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a01e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a022:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a026:	f241 3370 	movw	r3, #4976	; 0x1370
 800a02a:	443b      	add	r3, r7
 800a02c:	ed83 7b00 	vstr	d7, [r3]
  if (t94.im == 0.0) {
 800a030:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a034:	ed93 7b02 	vldr	d7, [r3, #8]
 800a038:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a03c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a040:	d115      	bne.n	800a06e <G_q+0x7d56>
    t16_re = t94.re / 2.0;
 800a042:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a046:	ed93 6b00 	vldr	d6, [r3]
 800a04a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a04e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a052:	f241 3368 	movw	r3, #4968	; 0x1368
 800a056:	443b      	add	r3, r7
 800a058:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a05c:	f04f 0300 	mov.w	r3, #0
 800a060:	f04f 0400 	mov.w	r4, #0
 800a064:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a068:	e9c2 3400 	strd	r3, r4, [r2]
 800a06c:	e037      	b.n	800a0de <G_q+0x7dc6>
  } else if (t94.re == 0.0) {
 800a06e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a072:	ed93 7b00 	vldr	d7, [r3]
 800a076:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a07a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a07e:	d115      	bne.n	800a0ac <G_q+0x7d94>
    t16_re = 0.0;
 800a080:	f04f 0300 	mov.w	r3, #0
 800a084:	f04f 0400 	mov.w	r4, #0
 800a088:	f241 3268 	movw	r2, #4968	; 0x1368
 800a08c:	443a      	add	r2, r7
 800a08e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t94.im / 2.0;
 800a092:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a096:	ed93 6b02 	vldr	d6, [r3, #8]
 800a09a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a09e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0a2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a0a6:	ed83 7b00 	vstr	d7, [r3]
 800a0aa:	e018      	b.n	800a0de <G_q+0x7dc6>
  } else {
    t16_re = t94.re / 2.0;
 800a0ac:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a0b0:	ed93 6b00 	vldr	d6, [r3]
 800a0b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0bc:	f241 3368 	movw	r3, #4968	; 0x1368
 800a0c0:	443b      	add	r3, r7
 800a0c2:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t94.im / 2.0;
 800a0c6:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a0ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800a0ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0d6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a0da:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t95.im == 0.0) {
 800a0de:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a0e2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a0e6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a0ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0ee:	d116      	bne.n	800a11e <G_q+0x7e06>
    t34_re = t95.re / 2.0;
 800a0f0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a0f4:	ed93 6b00 	vldr	d6, [r3]
 800a0f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a100:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a104:	443b      	add	r3, r7
 800a106:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a10a:	f04f 0300 	mov.w	r3, #0
 800a10e:	f04f 0400 	mov.w	r4, #0
 800a112:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a116:	443a      	add	r2, r7
 800a118:	e9c2 3400 	strd	r3, r4, [r2]
 800a11c:	e046      	b.n	800a1ac <G_q+0x7e94>
  } else if (t95.re == 0.0) {
 800a11e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a122:	ed93 7b00 	vldr	d7, [r3]
 800a126:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a12a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a12e:	d123      	bne.n	800a178 <G_q+0x7e60>
    t34_re = 0.0;
 800a130:	f04f 0300 	mov.w	r3, #0
 800a134:	f04f 0400 	mov.w	r4, #0
 800a138:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a13c:	443a      	add	r2, r7
 800a13e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t95.im / 2.0;
 800a142:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a146:	ed93 6b02 	vldr	d6, [r3, #8]
 800a14a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a14e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a152:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a156:	443b      	add	r3, r7
 800a158:	ed83 7b00 	vstr	d7, [r3]
 800a15c:	e026      	b.n	800a1ac <G_q+0x7e94>
 800a15e:	bf00      	nop
 800a160:	33145c07 	.word	0x33145c07
 800a164:	3c81a626 	.word	0x3c81a626
 800a168:	858a5d48 	.word	0x858a5d48
 800a16c:	394377ce 	.word	0x394377ce
	...
  } else {
    t34_re = t95.re / 2.0;
 800a178:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a17c:	ed93 6b00 	vldr	d6, [r3]
 800a180:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a184:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a188:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a18c:	443b      	add	r3, r7
 800a18e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t95.im / 2.0;
 800a192:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a196:	ed93 6b02 	vldr	d6, [r3, #8]
 800a19a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a19e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a1a2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a1a6:	443b      	add	r3, r7
 800a1a8:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a1ac:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a1b0:	ed93 7b00 	vldr	d7, [r3]
 800a1b4:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 800a170 <G_q+0x7e58>
 800a1b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a1bc:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a1c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800a1c4:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 800a160 <G_q+0x7e48>
 800a1c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a1cc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a1d0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a1d4:	ed93 7b00 	vldr	d7, [r3]
 800a1d8:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 800a170 <G_q+0x7e58>
 800a1dc:	ee27 5b05 	vmul.f64	d5, d7, d5
    t93.im * 3.061616997868383E-17);
 800a1e0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a1e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a1e8:	ed1f 4b23 	vldr	d4, [pc, #-140]	; 800a160 <G_q+0x7e48>
 800a1ec:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a1f0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a1f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a1f8:	f241 3348 	movw	r3, #4936	; 0x1348
 800a1fc:	443b      	add	r3, r7
 800a1fe:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a202:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a206:	ed93 7b00 	vldr	d7, [r3]
 800a20a:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 800a160 <G_q+0x7e48>
 800a20e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a212:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a216:	ed93 7b02 	vldr	d7, [r3, #8]
 800a21a:	ed1f 5b2b 	vldr	d5, [pc, #-172]	; 800a170 <G_q+0x7e58>
 800a21e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a222:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a226:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a22a:	ed93 7b00 	vldr	d7, [r3]
 800a22e:	ed1f 5b34 	vldr	d5, [pc, #-208]	; 800a160 <G_q+0x7e48>
 800a232:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t93.im * 0.0);
 800a236:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a23a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a23e:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 800a170 <G_q+0x7e58>
 800a242:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a246:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a24a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a24e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a252:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800a256:	f241 3368 	movw	r3, #4968	; 0x1368
 800a25a:	443b      	add	r3, r7
 800a25c:	ed93 6b00 	vldr	d6, [r3]
 800a260:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a264:	443b      	add	r3, r7
 800a266:	ed93 7b00 	vldr	d7, [r3]
 800a26a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a26e:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800a168 <G_q+0x7e50>
 800a272:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a276:	f241 3368 	movw	r3, #4968	; 0x1368
 800a27a:	443b      	add	r3, r7
 800a27c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800a280:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a284:	ed93 6b00 	vldr	d6, [r3]
 800a288:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a28c:	443b      	add	r3, r7
 800a28e:	ed93 7b00 	vldr	d7, [r3]
 800a292:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a296:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a29a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t41_im * t13_re - t8_re * t13_im) - (t20_re * t16_re - t20_im *
 800a29e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a2a2:	ed93 6b00 	vldr	d6, [r3]
 800a2a6:	f241 3378 	movw	r3, #4984	; 0x1378
 800a2aa:	443b      	add	r3, r7
 800a2ac:	ed93 7b00 	vldr	d7, [r3]
 800a2b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a2b4:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a2b8:	ed93 5b00 	vldr	d5, [r3]
 800a2bc:	f241 3370 	movw	r3, #4976	; 0x1370
 800a2c0:	443b      	add	r3, r7
 800a2c2:	ed93 7b00 	vldr	d7, [r3]
 800a2c6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a2ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a2ce:	f241 3348 	movw	r3, #4936	; 0x1348
 800a2d2:	443b      	add	r3, r7
 800a2d4:	ed93 5b00 	vldr	d5, [r3]
 800a2d8:	f241 3368 	movw	r3, #4968	; 0x1368
 800a2dc:	443b      	add	r3, r7
 800a2de:	ed93 7b00 	vldr	d7, [r3]
 800a2e2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a2e6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a2ea:	ed93 4b00 	vldr	d4, [r3]
 800a2ee:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a2f2:	ed93 7b00 	vldr	d7, [r3]
 800a2f6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a2fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a2fe:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a302:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a306:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t8_re = (t41_im * t13_im + t8_re * t13_re) - (t20_re * t16_im + t20_im *
 800a30a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a30e:	ed93 6b00 	vldr	d6, [r3]
 800a312:	f241 3370 	movw	r3, #4976	; 0x1370
 800a316:	443b      	add	r3, r7
 800a318:	ed93 7b00 	vldr	d7, [r3]
 800a31c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a320:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a324:	ed93 5b00 	vldr	d5, [r3]
 800a328:	f241 3378 	movw	r3, #4984	; 0x1378
 800a32c:	443b      	add	r3, r7
 800a32e:	ed93 7b00 	vldr	d7, [r3]
 800a332:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a336:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a33a:	f241 3348 	movw	r3, #4936	; 0x1348
 800a33e:	443b      	add	r3, r7
 800a340:	ed93 5b00 	vldr	d5, [r3]
 800a344:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a348:	ed93 7b00 	vldr	d7, [r3]
 800a34c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a350:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a354:	ed93 4b00 	vldr	d4, [r3]
 800a358:	f241 3368 	movw	r3, #4968	; 0x1368
 800a35c:	443b      	add	r3, r7
 800a35e:	ed93 7b00 	vldr	d7, [r3]
 800a362:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a366:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a36a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a36e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a372:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t58_im = (t100.re * 0.0 - t100.im * 0.5) - (t101.re * 0.0 - t101.im * 0.5);
 800a376:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a37a:	ed93 7b00 	vldr	d7, [r3]
 800a37e:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 800a170 <G_q+0x7e58>
 800a382:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a386:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a38a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a38e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a392:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a396:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a39a:	4be7      	ldr	r3, [pc, #924]	; (800a738 <G_q+0x8420>)
 800a39c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a3a0:	443a      	add	r2, r7
 800a3a2:	4413      	add	r3, r2
 800a3a4:	ed93 7b00 	vldr	d7, [r3]
 800a3a8:	ed9f 5be1 	vldr	d5, [pc, #900]	; 800a730 <G_q+0x8418>
 800a3ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a3b0:	4be1      	ldr	r3, [pc, #900]	; (800a738 <G_q+0x8420>)
 800a3b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a3b6:	443a      	add	r2, r7
 800a3b8:	4413      	add	r3, r2
 800a3ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800a3be:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a3c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a3c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a3ca:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a3ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a3d2:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t100.re * 0.5 + t100.im * 0.0) - (t101.re * 0.5 + t101.im * 0.0);
 800a3d6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a3da:	ed93 7b00 	vldr	d7, [r3]
 800a3de:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a3e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a3e6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a3ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800a3ee:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800a730 <G_q+0x8418>
 800a3f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a3f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a3fa:	4bcf      	ldr	r3, [pc, #828]	; (800a738 <G_q+0x8420>)
 800a3fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a400:	443a      	add	r2, r7
 800a402:	4413      	add	r3, r2
 800a404:	ed93 7b00 	vldr	d7, [r3]
 800a408:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a40c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a410:	4bc9      	ldr	r3, [pc, #804]	; (800a738 <G_q+0x8420>)
 800a412:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a416:	443a      	add	r2, r7
 800a418:	4413      	add	r3, r2
 800a41a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a41e:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800a730 <G_q+0x8418>
 800a422:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a426:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a42a:	f241 2350 	movw	r3, #4688	; 0x1250
 800a42e:	443b      	add	r3, r7
 800a430:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a434:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t104.re * 0.0 - t104.im * 0.5) - (t105.re * 0.0 - t105.im * 0.5);
 800a438:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a43c:	ed93 7b00 	vldr	d7, [r3]
 800a440:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 800a730 <G_q+0x8418>
 800a444:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a448:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a44c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a450:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a454:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a458:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a45c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a460:	ed93 7b00 	vldr	d7, [r3]
 800a464:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 800a730 <G_q+0x8418>
 800a468:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a46c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a470:	ed93 7b02 	vldr	d7, [r3, #8]
 800a474:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a478:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a47c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a480:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a484:	f241 3370 	movw	r3, #4976	; 0x1370
 800a488:	443b      	add	r3, r7
 800a48a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t104.re * 0.5 + t104.im * 0.0) - (t105.re * 0.5 + t105.im * 0.0);
 800a48e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a492:	ed93 7b00 	vldr	d7, [r3]
 800a496:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a49a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a49e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a4a2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4a6:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800a730 <G_q+0x8418>
 800a4aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a4b2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a4b6:	ed93 7b00 	vldr	d7, [r3]
 800a4ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a4be:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a4c2:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a4c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4ca:	ed9f 4b99 	vldr	d4, [pc, #612]	; 800a730 <G_q+0x8418>
 800a4ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4d2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a4d6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800a4da:	443b      	add	r3, r7
 800a4dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a4e0:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t106.re * 0.0 - t106.im * 0.5) - (t107.re * 0.0 - t107.im * 0.5);
 800a4e4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a4e8:	ed93 7b00 	vldr	d7, [r3]
 800a4ec:	ed9f 6b90 	vldr	d6, [pc, #576]	; 800a730 <G_q+0x8418>
 800a4f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a4f4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a4f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4fc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a500:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a504:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a508:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a50c:	ed93 7b00 	vldr	d7, [r3]
 800a510:	ed9f 5b87 	vldr	d5, [pc, #540]	; 800a730 <G_q+0x8418>
 800a514:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a518:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a51c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a520:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a524:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a528:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a52c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a530:	f241 3348 	movw	r3, #4936	; 0x1348
 800a534:	443b      	add	r3, r7
 800a536:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t106.re * 0.5 + t106.im * 0.0) - (t107.re * 0.5 + t107.im * 0.0);
 800a53a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a53e:	ed93 7b00 	vldr	d7, [r3]
 800a542:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a546:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a54a:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a54e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a552:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800a730 <G_q+0x8418>
 800a556:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a55a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a55e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a562:	ed93 7b00 	vldr	d7, [r3]
 800a566:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a56a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a56e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a572:	ed93 7b02 	vldr	d7, [r3, #8]
 800a576:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800a730 <G_q+0x8418>
 800a57a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a57e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a582:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a586:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a58a:	ed83 7b00 	vstr	d7, [r3]
  if (t108.im == 0.0) {
 800a58e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a592:	ed93 7b02 	vldr	d7, [r3, #8]
 800a596:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a59e:	d115      	bne.n	800a5cc <G_q+0x82b4>
    t12_re = t108.re / 2.0;
 800a5a0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a5a4:	ed93 6b00 	vldr	d6, [r3]
 800a5a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a5ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a5b0:	f241 3388 	movw	r3, #5000	; 0x1388
 800a5b4:	443b      	add	r3, r7
 800a5b6:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800a5ba:	f04f 0300 	mov.w	r3, #0
 800a5be:	f04f 0400 	mov.w	r4, #0
 800a5c2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800a5c6:	e9c2 3400 	strd	r3, r4, [r2]
 800a5ca:	e037      	b.n	800a63c <G_q+0x8324>
  } else if (t108.re == 0.0) {
 800a5cc:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a5d0:	ed93 7b00 	vldr	d7, [r3]
 800a5d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5dc:	d115      	bne.n	800a60a <G_q+0x82f2>
    t12_re = 0.0;
 800a5de:	f04f 0300 	mov.w	r3, #0
 800a5e2:	f04f 0400 	mov.w	r4, #0
 800a5e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ea:	443a      	add	r2, r7
 800a5ec:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t108.im / 2.0;
 800a5f0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a5f4:	ed93 6b02 	vldr	d6, [r3, #8]
 800a5f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a5fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a600:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a604:	ed83 7b00 	vstr	d7, [r3]
 800a608:	e018      	b.n	800a63c <G_q+0x8324>
  } else {
    t12_re = t108.re / 2.0;
 800a60a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a60e:	ed93 6b00 	vldr	d6, [r3]
 800a612:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a616:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a61a:	f241 3388 	movw	r3, #5000	; 0x1388
 800a61e:	443b      	add	r3, r7
 800a620:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t108.im / 2.0;
 800a624:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a628:	ed93 6b02 	vldr	d6, [r3, #8]
 800a62c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a630:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a634:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a638:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t109.im == 0.0) {
 800a63c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a640:	ed93 7b02 	vldr	d7, [r3, #8]
 800a644:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64c:	d116      	bne.n	800a67c <G_q+0x8364>
    t34_re = t109.re / 2.0;
 800a64e:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a652:	ed93 6b00 	vldr	d6, [r3]
 800a656:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a65a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a65e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a662:	443b      	add	r3, r7
 800a664:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a668:	f04f 0300 	mov.w	r3, #0
 800a66c:	f04f 0400 	mov.w	r4, #0
 800a670:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a674:	443a      	add	r2, r7
 800a676:	e9c2 3400 	strd	r3, r4, [r2]
 800a67a:	e039      	b.n	800a6f0 <G_q+0x83d8>
  } else if (t109.re == 0.0) {
 800a67c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a680:	ed93 7b00 	vldr	d7, [r3]
 800a684:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a68c:	d116      	bne.n	800a6bc <G_q+0x83a4>
    t34_re = 0.0;
 800a68e:	f04f 0300 	mov.w	r3, #0
 800a692:	f04f 0400 	mov.w	r4, #0
 800a696:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a69a:	443a      	add	r2, r7
 800a69c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t109.im / 2.0;
 800a6a0:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a6a4:	ed93 6b02 	vldr	d6, [r3, #8]
 800a6a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a6b0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a6b4:	443b      	add	r3, r7
 800a6b6:	ed83 7b00 	vstr	d7, [r3]
 800a6ba:	e019      	b.n	800a6f0 <G_q+0x83d8>
  } else {
    t34_re = t109.re / 2.0;
 800a6bc:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a6c0:	ed93 6b00 	vldr	d6, [r3]
 800a6c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a6cc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a6d0:	443b      	add	r3, r7
 800a6d2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t109.im / 2.0;
 800a6d6:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a6da:	ed93 6b02 	vldr	d6, [r3, #8]
 800a6de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a6e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a6e6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a6ea:	443b      	add	r3, r7
 800a6ec:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t110.im == 0.0) {
 800a6f0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a6f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a6fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a700:	d11c      	bne.n	800a73c <G_q+0x8424>
    b_t10_re = t110.re / 2.0;
 800a702:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a706:	ed93 6b00 	vldr	d6, [r3]
 800a70a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a70e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a712:	f241 3338 	movw	r3, #4920	; 0x1338
 800a716:	443b      	add	r3, r7
 800a718:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 800a71c:	f04f 0300 	mov.w	r3, #0
 800a720:	f04f 0400 	mov.w	r4, #0
 800a724:	f241 3218 	movw	r2, #4888	; 0x1318
 800a728:	443a      	add	r2, r7
 800a72a:	e9c2 3400 	strd	r3, r4, [r2]
 800a72e:	e03f      	b.n	800a7b0 <G_q+0x8498>
	...
 800a738:	ffffedf0 	.word	0xffffedf0
  } else if (t110.re == 0.0) {
 800a73c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a740:	ed93 7b00 	vldr	d7, [r3]
 800a744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74c:	d116      	bne.n	800a77c <G_q+0x8464>
    b_t10_re = 0.0;
 800a74e:	f04f 0300 	mov.w	r3, #0
 800a752:	f04f 0400 	mov.w	r4, #0
 800a756:	f241 3238 	movw	r2, #4920	; 0x1338
 800a75a:	443a      	add	r2, r7
 800a75c:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t110.im / 2.0;
 800a760:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a764:	ed93 6b02 	vldr	d6, [r3, #8]
 800a768:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a76c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a770:	f241 3318 	movw	r3, #4888	; 0x1318
 800a774:	443b      	add	r3, r7
 800a776:	ed83 7b00 	vstr	d7, [r3]
 800a77a:	e019      	b.n	800a7b0 <G_q+0x8498>
  } else {
    b_t10_re = t110.re / 2.0;
 800a77c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a780:	ed93 6b00 	vldr	d6, [r3]
 800a784:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a788:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a78c:	f241 3338 	movw	r3, #4920	; 0x1338
 800a790:	443b      	add	r3, r7
 800a792:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t110.im / 2.0;
 800a796:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a79a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a79e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7a6:	f241 3318 	movw	r3, #4888	; 0x1318
 800a7aa:	443b      	add	r3, r7
 800a7ac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t111.im == 0.0) {
 800a7b0:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a7b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a7b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7c0:	d115      	bne.n	800a7ee <G_q+0x84d6>
    t16_re = t111.re / 2.0;
 800a7c2:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a7c6:	ed93 6b00 	vldr	d6, [r3]
 800a7ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a7ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a7d2:	f241 3368 	movw	r3, #4968	; 0x1368
 800a7d6:	443b      	add	r3, r7
 800a7d8:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a7dc:	f04f 0300 	mov.w	r3, #0
 800a7e0:	f04f 0400 	mov.w	r4, #0
 800a7e4:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a7e8:	e9c2 3400 	strd	r3, r4, [r2]
 800a7ec:	e037      	b.n	800a85e <G_q+0x8546>
  } else if (t111.re == 0.0) {
 800a7ee:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a7f2:	ed93 7b00 	vldr	d7, [r3]
 800a7f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fe:	d115      	bne.n	800a82c <G_q+0x8514>
    t16_re = 0.0;
 800a800:	f04f 0300 	mov.w	r3, #0
 800a804:	f04f 0400 	mov.w	r4, #0
 800a808:	f241 3268 	movw	r2, #4968	; 0x1368
 800a80c:	443a      	add	r2, r7
 800a80e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t111.im / 2.0;
 800a812:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a816:	ed93 6b02 	vldr	d6, [r3, #8]
 800a81a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a81e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a822:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a826:	ed83 7b00 	vstr	d7, [r3]
 800a82a:	e018      	b.n	800a85e <G_q+0x8546>
  } else {
    t16_re = t111.re / 2.0;
 800a82c:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a830:	ed93 6b00 	vldr	d6, [r3]
 800a834:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a838:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a83c:	f241 3368 	movw	r3, #4968	; 0x1368
 800a840:	443b      	add	r3, r7
 800a842:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t111.im / 2.0;
 800a846:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800a84a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a84e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a852:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a856:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a85a:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800a85e:	f241 3388 	movw	r3, #5000	; 0x1388
 800a862:	443b      	add	r3, r7
 800a864:	ed93 6b00 	vldr	d6, [r3]
 800a868:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a86c:	443b      	add	r3, r7
 800a86e:	ed93 7b00 	vldr	d7, [r3]
 800a872:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a876:	f241 3388 	movw	r3, #5000	; 0x1388
 800a87a:	443b      	add	r3, r7
 800a87c:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800a880:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a884:	ed93 6b00 	vldr	d6, [r3]
 800a888:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a88c:	443b      	add	r3, r7
 800a88e:	ed93 7b00 	vldr	d7, [r3]
 800a892:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a896:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a89a:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (b_t10_re + t16_re) + 7.498798913309288E-33;
 800a89e:	f241 3338 	movw	r3, #4920	; 0x1338
 800a8a2:	443b      	add	r3, r7
 800a8a4:	ed93 6b00 	vldr	d6, [r3]
 800a8a8:	f241 3368 	movw	r3, #4968	; 0x1368
 800a8ac:	443b      	add	r3, r7
 800a8ae:	ed93 7b00 	vldr	d7, [r3]
 800a8b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a8b6:	ed9f 6b60 	vldr	d6, [pc, #384]	; 800aa38 <G_q+0x8720>
 800a8ba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a8be:	f241 3338 	movw	r3, #4920	; 0x1338
 800a8c2:	443b      	add	r3, r7
 800a8c4:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t16_im;
 800a8c8:	f241 3318 	movw	r3, #4888	; 0x1318
 800a8cc:	443b      	add	r3, r7
 800a8ce:	ed93 6b00 	vldr	d6, [r3]
 800a8d2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a8d6:	ed93 7b00 	vldr	d7, [r3]
 800a8da:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a8de:	f241 3318 	movw	r3, #4888	; 0x1318
 800a8e2:	443b      	add	r3, r7
 800a8e4:	ed83 7b00 	vstr	d7, [r3]
  if (t102.im == 0.0) {
 800a8e8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a8ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f8:	d116      	bne.n	800a928 <G_q+0x8610>
    t23_re = t102.re / 2.0;
 800a8fa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a8fe:	ed93 6b00 	vldr	d6, [r3]
 800a902:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a906:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a90a:	f241 3330 	movw	r3, #4912	; 0x1330
 800a90e:	443b      	add	r3, r7
 800a910:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800a914:	f04f 0300 	mov.w	r3, #0
 800a918:	f04f 0400 	mov.w	r4, #0
 800a91c:	f241 3210 	movw	r2, #4880	; 0x1310
 800a920:	443a      	add	r2, r7
 800a922:	e9c2 3400 	strd	r3, r4, [r2]
 800a926:	e039      	b.n	800a99c <G_q+0x8684>
  } else if (t102.re == 0.0) {
 800a928:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a92c:	ed93 7b00 	vldr	d7, [r3]
 800a930:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a938:	d116      	bne.n	800a968 <G_q+0x8650>
    t23_re = 0.0;
 800a93a:	f04f 0300 	mov.w	r3, #0
 800a93e:	f04f 0400 	mov.w	r4, #0
 800a942:	f241 3230 	movw	r2, #4912	; 0x1330
 800a946:	443a      	add	r2, r7
 800a948:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t102.im / 2.0;
 800a94c:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a950:	ed93 6b02 	vldr	d6, [r3, #8]
 800a954:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a958:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a95c:	f241 3310 	movw	r3, #4880	; 0x1310
 800a960:	443b      	add	r3, r7
 800a962:	ed83 7b00 	vstr	d7, [r3]
 800a966:	e019      	b.n	800a99c <G_q+0x8684>
  } else {
    t23_re = t102.re / 2.0;
 800a968:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a96c:	ed93 6b00 	vldr	d6, [r3]
 800a970:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a974:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a978:	f241 3330 	movw	r3, #4912	; 0x1330
 800a97c:	443b      	add	r3, r7
 800a97e:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t102.im / 2.0;
 800a982:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800a986:	ed93 6b02 	vldr	d6, [r3, #8]
 800a98a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a98e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a992:	f241 3310 	movw	r3, #4880	; 0x1310
 800a996:	443b      	add	r3, r7
 800a998:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t103.im == 0.0) {
 800a99c:	4b28      	ldr	r3, [pc, #160]	; (800aa40 <G_q+0x8728>)
 800a99e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a9a2:	443a      	add	r2, r7
 800a9a4:	4413      	add	r3, r2
 800a9a6:	ed93 7b02 	vldr	d7, [r3, #8]
 800a9aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b2:	d119      	bne.n	800a9e8 <G_q+0x86d0>
    t34_re = t103.re / 2.0;
 800a9b4:	4b22      	ldr	r3, [pc, #136]	; (800aa40 <G_q+0x8728>)
 800a9b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a9ba:	443a      	add	r2, r7
 800a9bc:	4413      	add	r3, r2
 800a9be:	ed93 6b00 	vldr	d6, [r3]
 800a9c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a9c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a9ca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a9ce:	443b      	add	r3, r7
 800a9d0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	f04f 0400 	mov.w	r4, #0
 800a9dc:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a9e0:	443a      	add	r2, r7
 800a9e2:	e9c2 3400 	strd	r3, r4, [r2]
 800a9e6:	e04d      	b.n	800aa84 <G_q+0x876c>
  } else if (t103.re == 0.0) {
 800a9e8:	4b15      	ldr	r3, [pc, #84]	; (800aa40 <G_q+0x8728>)
 800a9ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a9ee:	443a      	add	r2, r7
 800a9f0:	4413      	add	r3, r2
 800a9f2:	ed93 7b00 	vldr	d7, [r3]
 800a9f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fe:	d121      	bne.n	800aa44 <G_q+0x872c>
    t34_re = 0.0;
 800aa00:	f04f 0300 	mov.w	r3, #0
 800aa04:	f04f 0400 	mov.w	r4, #0
 800aa08:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800aa0c:	443a      	add	r2, r7
 800aa0e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t103.im / 2.0;
 800aa12:	4b0b      	ldr	r3, [pc, #44]	; (800aa40 <G_q+0x8728>)
 800aa14:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa18:	443a      	add	r2, r7
 800aa1a:	4413      	add	r3, r2
 800aa1c:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa28:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aa2c:	443b      	add	r3, r7
 800aa2e:	ed83 7b00 	vstr	d7, [r3]
 800aa32:	e027      	b.n	800aa84 <G_q+0x876c>
 800aa34:	f3af 8000 	nop.w
 800aa38:	858a5d48 	.word	0x858a5d48
 800aa3c:	394377ce 	.word	0x394377ce
 800aa40:	ffffee10 	.word	0xffffee10
  } else {
    t34_re = t103.re / 2.0;
 800aa44:	4bd4      	ldr	r3, [pc, #848]	; (800ad98 <G_q+0x8a80>)
 800aa46:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa4a:	443a      	add	r2, r7
 800aa4c:	4413      	add	r3, r2
 800aa4e:	ed93 6b00 	vldr	d6, [r3]
 800aa52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800aa5e:	443b      	add	r3, r7
 800aa60:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t103.im / 2.0;
 800aa64:	4bcc      	ldr	r3, [pc, #816]	; (800ad98 <G_q+0x8a80>)
 800aa66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aa6a:	443a      	add	r2, r7
 800aa6c:	4413      	add	r3, r2
 800aa6e:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800aa7e:	443b      	add	r3, r7
 800aa80:	ed83 7b00 	vstr	d7, [r3]
  }

  t13_re = (t13_im * t20_re - t76_re * t20_im) + (t12_re * b_t10_re - t12_im *
 800aa84:	f241 3370 	movw	r3, #4976	; 0x1370
 800aa88:	443b      	add	r3, r7
 800aa8a:	ed93 6b00 	vldr	d6, [r3]
 800aa8e:	f241 3348 	movw	r3, #4936	; 0x1348
 800aa92:	443b      	add	r3, r7
 800aa94:	ed93 7b00 	vldr	d7, [r3]
 800aa98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aa9c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800aaa0:	443b      	add	r3, r7
 800aaa2:	ed93 5b00 	vldr	d5, [r3]
 800aaa6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800aaaa:	ed93 7b00 	vldr	d7, [r3]
 800aaae:	ee25 7b07 	vmul.f64	d7, d5, d7
 800aab2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aab6:	f241 3388 	movw	r3, #5000	; 0x1388
 800aaba:	443b      	add	r3, r7
 800aabc:	ed93 5b00 	vldr	d5, [r3]
 800aac0:	f241 3338 	movw	r3, #4920	; 0x1338
 800aac4:	443b      	add	r3, r7
 800aac6:	ed93 7b00 	vldr	d7, [r3]
 800aaca:	ee25 5b07 	vmul.f64	d5, d5, d7
 800aace:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800aad2:	ed93 4b00 	vldr	d4, [r3]
 800aad6:	f241 3318 	movw	r3, #4888	; 0x1318
 800aada:	443b      	add	r3, r7
 800aadc:	ed93 7b00 	vldr	d7, [r3]
 800aae0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800aae4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aae8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aaec:	f241 3378 	movw	r3, #4984	; 0x1378
 800aaf0:	443b      	add	r3, r7
 800aaf2:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t76_re = (t13_im * t20_im + t76_re * t20_re) + (t12_re * t85_im + t12_im *
 800aaf6:	f241 3370 	movw	r3, #4976	; 0x1370
 800aafa:	443b      	add	r3, r7
 800aafc:	ed93 6b00 	vldr	d6, [r3]
 800ab00:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ab04:	ed93 7b00 	vldr	d7, [r3]
 800ab08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ab0c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ab10:	443b      	add	r3, r7
 800ab12:	ed93 5b00 	vldr	d5, [r3]
 800ab16:	f241 3348 	movw	r3, #4936	; 0x1348
 800ab1a:	443b      	add	r3, r7
 800ab1c:	ed93 7b00 	vldr	d7, [r3]
 800ab20:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ab24:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ab28:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab2c:	443b      	add	r3, r7
 800ab2e:	ed93 5b00 	vldr	d5, [r3]
 800ab32:	f241 3318 	movw	r3, #4888	; 0x1318
 800ab36:	443b      	add	r3, r7
 800ab38:	ed93 7b00 	vldr	d7, [r3]
 800ab3c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ab40:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ab44:	ed93 4b00 	vldr	d4, [r3]
 800ab48:	f241 3338 	movw	r3, #4920	; 0x1338
 800ab4c:	443b      	add	r3, r7
 800ab4e:	ed93 7b00 	vldr	d7, [r3]
 800ab52:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ab56:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ab5a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ab5e:	443b      	add	r3, r7
 800ab60:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab64:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t23_re += t34_re;
 800ab68:	f241 3330 	movw	r3, #4912	; 0x1330
 800ab6c:	443b      	add	r3, r7
 800ab6e:	ed93 6b00 	vldr	d6, [r3]
 800ab72:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ab76:	443b      	add	r3, r7
 800ab78:	ed93 7b00 	vldr	d7, [r3]
 800ab7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab80:	f241 3330 	movw	r3, #4912	; 0x1330
 800ab84:	443b      	add	r3, r7
 800ab86:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800ab8a:	f241 3310 	movw	r3, #4880	; 0x1310
 800ab8e:	443b      	add	r3, r7
 800ab90:	ed93 6b00 	vldr	d6, [r3]
 800ab94:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ab98:	443b      	add	r3, r7
 800ab9a:	ed93 7b00 	vldr	d7, [r3]
 800ab9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aba2:	f241 3310 	movw	r3, #4880	; 0x1310
 800aba6:	443b      	add	r3, r7
 800aba8:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t112.re * 0.0 - t112.im * 0.5) - (t113.re * 0.0 - t113.im * 0.5);
 800abac:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800abb0:	ed93 7b00 	vldr	d7, [r3]
 800abb4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800ad90 <G_q+0x8a78>
 800abb8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800abbc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800abc0:	ed93 7b02 	vldr	d7, [r3, #8]
 800abc4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800abc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800abcc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800abd0:	4b72      	ldr	r3, [pc, #456]	; (800ad9c <G_q+0x8a84>)
 800abd2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800abd6:	443a      	add	r2, r7
 800abd8:	4413      	add	r3, r2
 800abda:	ed93 7b00 	vldr	d7, [r3]
 800abde:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800ad90 <G_q+0x8a78>
 800abe2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800abe6:	4b6d      	ldr	r3, [pc, #436]	; (800ad9c <G_q+0x8a84>)
 800abe8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800abec:	443a      	add	r2, r7
 800abee:	4413      	add	r3, r2
 800abf0:	ed93 7b02 	vldr	d7, [r3, #8]
 800abf4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800abf8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abfc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ac00:	f241 2358 	movw	r3, #4696	; 0x1258
 800ac04:	443b      	add	r3, r7
 800ac06:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac0a:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t112.re * 0.5 + t112.im * 0.0) - (t113.re * 0.5 + t113.im * 0.0);
 800ac0e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac12:	ed93 7b00 	vldr	d7, [r3]
 800ac16:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ac1a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ac1e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac22:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac26:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800ad90 <G_q+0x8a78>
 800ac2a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ac2e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ac32:	4b5a      	ldr	r3, [pc, #360]	; (800ad9c <G_q+0x8a84>)
 800ac34:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ac38:	443a      	add	r2, r7
 800ac3a:	4413      	add	r3, r2
 800ac3c:	ed93 7b00 	vldr	d7, [r3]
 800ac40:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ac44:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ac48:	4b54      	ldr	r3, [pc, #336]	; (800ad9c <G_q+0x8a84>)
 800ac4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ac4e:	443a      	add	r2, r7
 800ac50:	4413      	add	r3, r2
 800ac52:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac56:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 800ad90 <G_q+0x8a78>
 800ac5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ac5e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ac62:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ac66:	f241 3308 	movw	r3, #4872	; 0x1308
 800ac6a:	443b      	add	r3, r7
 800ac6c:	ed83 7b00 	vstr	d7, [r3]
  t41_im = (t72_re * t58_im - t8_re * t60_re) + (t13_re * t23_re - t76_re *
 800ac70:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800ac74:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ac78:	ed92 6b00 	vldr	d6, [r2]
 800ac7c:	ed93 7b00 	vldr	d7, [r3]
 800ac80:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ac84:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800ac88:	f241 2350 	movw	r3, #4688	; 0x1250
 800ac8c:	443b      	add	r3, r7
 800ac8e:	ed92 5b00 	vldr	d5, [r2]
 800ac92:	ed93 7b00 	vldr	d7, [r3]
 800ac96:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ac9a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ac9e:	f241 3378 	movw	r3, #4984	; 0x1378
 800aca2:	443b      	add	r3, r7
 800aca4:	ed93 5b00 	vldr	d5, [r3]
 800aca8:	f241 3330 	movw	r3, #4912	; 0x1330
 800acac:	443b      	add	r3, r7
 800acae:	ed93 7b00 	vldr	d7, [r3]
 800acb2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800acb6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800acba:	443b      	add	r3, r7
 800acbc:	ed93 4b00 	vldr	d4, [r3]
 800acc0:	f241 3310 	movw	r3, #4880	; 0x1310
 800acc4:	443b      	add	r3, r7
 800acc6:	ed93 7b00 	vldr	d7, [r3]
 800acca:	ee24 7b07 	vmul.f64	d7, d4, d7
 800acce:	ee35 7b47 	vsub.f64	d7, d5, d7
 800acd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800acd6:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800acda:	ed83 7b00 	vstr	d7, [r3]
    t3_im);
  t8_re = (t72_re * t60_re + t8_re * t58_im) + (t13_re * t3_im + t76_re * t23_re);
 800acde:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800ace2:	f241 2350 	movw	r3, #4688	; 0x1250
 800ace6:	443b      	add	r3, r7
 800ace8:	ed92 6b00 	vldr	d6, [r2]
 800acec:	ed93 7b00 	vldr	d7, [r3]
 800acf0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800acf4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800acf8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800acfc:	ed92 5b00 	vldr	d5, [r2]
 800ad00:	ed93 7b00 	vldr	d7, [r3]
 800ad04:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad08:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ad0c:	f241 3378 	movw	r3, #4984	; 0x1378
 800ad10:	443b      	add	r3, r7
 800ad12:	ed93 5b00 	vldr	d5, [r3]
 800ad16:	f241 3310 	movw	r3, #4880	; 0x1310
 800ad1a:	443b      	add	r3, r7
 800ad1c:	ed93 7b00 	vldr	d7, [r3]
 800ad20:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ad24:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ad28:	443b      	add	r3, r7
 800ad2a:	ed93 4b00 	vldr	d4, [r3]
 800ad2e:	f241 3330 	movw	r3, #4912	; 0x1330
 800ad32:	443b      	add	r3, r7
 800ad34:	ed93 7b00 	vldr	d7, [r3]
 800ad38:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ad3c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ad40:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800ad44:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad48:	ed83 7b00 	vstr	d7, [r3]
  if (t124.im == 0.0) {
 800ad4c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ad50:	ed93 7b02 	vldr	d7, [r3, #8]
 800ad54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ad58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad5c:	d120      	bne.n	800ada0 <G_q+0x8a88>
    t43_im = t124.re / 2.0;
 800ad5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ad62:	ed93 6b00 	vldr	d6, [r3]
 800ad66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad6e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800ad72:	443b      	add	r3, r7
 800ad74:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = 0.0;
 800ad78:	f04f 0300 	mov.w	r3, #0
 800ad7c:	f04f 0400 	mov.w	r4, #0
 800ad80:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800ad84:	443a      	add	r2, r7
 800ad86:	e9c2 3400 	strd	r3, r4, [r2]
 800ad8a:	e043      	b.n	800ae14 <G_q+0x8afc>
 800ad8c:	f3af 8000 	nop.w
	...
 800ad98:	ffffee10 	.word	0xffffee10
 800ad9c:	ffffec90 	.word	0xffffec90
  } else if (t124.re == 0.0) {
 800ada0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ada4:	ed93 7b00 	vldr	d7, [r3]
 800ada8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adb0:	d116      	bne.n	800ade0 <G_q+0x8ac8>
    t43_im = 0.0;
 800adb2:	f04f 0300 	mov.w	r3, #0
 800adb6:	f04f 0400 	mov.w	r4, #0
 800adba:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800adbe:	443a      	add	r2, r7
 800adc0:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_re = t124.im / 2.0;
 800adc4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800adc8:	ed93 6b02 	vldr	d6, [r3, #8]
 800adcc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800add0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800add4:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800add8:	443b      	add	r3, r7
 800adda:	ed83 7b00 	vstr	d7, [r3]
 800adde:	e019      	b.n	800ae14 <G_q+0x8afc>
  } else {
    t43_im = t124.re / 2.0;
 800ade0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800ade4:	ed93 6b00 	vldr	d6, [r3]
 800ade8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800adec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800adf0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800adf4:	443b      	add	r3, r7
 800adf6:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = t124.im / 2.0;
 800adfa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800adfe:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae0a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800ae0e:	443b      	add	r3, r7
 800ae10:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t125.im == 0.0) {
 800ae14:	4b82      	ldr	r3, [pc, #520]	; (800b020 <G_q+0x8d08>)
 800ae16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae1a:	443a      	add	r2, r7
 800ae1c:	4413      	add	r3, r2
 800ae1e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ae22:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae2a:	d119      	bne.n	800ae60 <G_q+0x8b48>
    t55_im = t125.re / 2.0;
 800ae2c:	4b7c      	ldr	r3, [pc, #496]	; (800b020 <G_q+0x8d08>)
 800ae2e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae32:	443a      	add	r2, r7
 800ae34:	4413      	add	r3, r2
 800ae36:	ed93 6b00 	vldr	d6, [r3]
 800ae3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ae3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ae42:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800ae46:	443b      	add	r3, r7
 800ae48:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800ae4c:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ae50:	443a      	add	r2, r7
 800ae52:	f04f 0300 	mov.w	r3, #0
 800ae56:	f04f 0400 	mov.w	r4, #0
 800ae5a:	e9c2 3400 	strd	r3, r4, [r2]
 800ae5e:	e045      	b.n	800aeec <G_q+0x8bd4>
  } else if (t125.re == 0.0) {
 800ae60:	4b6f      	ldr	r3, [pc, #444]	; (800b020 <G_q+0x8d08>)
 800ae62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae66:	443a      	add	r2, r7
 800ae68:	4413      	add	r3, r2
 800ae6a:	ed93 7b00 	vldr	d7, [r3]
 800ae6e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ae72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae76:	d119      	bne.n	800aeac <G_q+0x8b94>
    t55_im = 0.0;
 800ae78:	f04f 0300 	mov.w	r3, #0
 800ae7c:	f04f 0400 	mov.w	r4, #0
 800ae80:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800ae84:	443a      	add	r2, r7
 800ae86:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t125.im / 2.0;
 800ae8a:	4b65      	ldr	r3, [pc, #404]	; (800b020 <G_q+0x8d08>)
 800ae8c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae90:	443a      	add	r2, r7
 800ae92:	4413      	add	r3, r2
 800ae94:	ed93 6b02 	vldr	d6, [r3, #8]
 800ae98:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ae9c:	443b      	add	r3, r7
 800ae9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aea6:	ed83 7b00 	vstr	d7, [r3]
 800aeaa:	e01f      	b.n	800aeec <G_q+0x8bd4>
  } else {
    t55_im = t125.re / 2.0;
 800aeac:	4b5c      	ldr	r3, [pc, #368]	; (800b020 <G_q+0x8d08>)
 800aeae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aeb2:	443a      	add	r2, r7
 800aeb4:	4413      	add	r3, r2
 800aeb6:	ed93 6b00 	vldr	d6, [r3]
 800aeba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aebe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aec2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800aec6:	443b      	add	r3, r7
 800aec8:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t125.im / 2.0;
 800aecc:	4b54      	ldr	r3, [pc, #336]	; (800b020 <G_q+0x8d08>)
 800aece:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aed2:	443a      	add	r2, r7
 800aed4:	4413      	add	r3, r2
 800aed6:	ed93 6b02 	vldr	d6, [r3, #8]
 800aeda:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800aede:	443b      	add	r3, r7
 800aee0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aee4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aee8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t136.im == 0.0) {
 800aeec:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800aef0:	ed93 7b02 	vldr	d7, [r3, #8]
 800aef4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aefc:	d116      	bne.n	800af2c <G_q+0x8c14>
    t70_im = t136.re / 2.0;
 800aefe:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800af02:	ed93 6b00 	vldr	d6, [r3]
 800af06:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800af0a:	443b      	add	r3, r7
 800af0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af14:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 800af18:	f04f 0300 	mov.w	r3, #0
 800af1c:	f04f 0400 	mov.w	r4, #0
 800af20:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800af24:	443a      	add	r2, r7
 800af26:	e9c2 3400 	strd	r3, r4, [r2]
 800af2a:	e039      	b.n	800afa0 <G_q+0x8c88>
  } else if (t136.re == 0.0) {
 800af2c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800af30:	ed93 7b00 	vldr	d7, [r3]
 800af34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800af38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af3c:	d116      	bne.n	800af6c <G_q+0x8c54>
    t70_im = 0.0;
 800af3e:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800af42:	443a      	add	r2, r7
 800af44:	f04f 0300 	mov.w	r3, #0
 800af48:	f04f 0400 	mov.w	r4, #0
 800af4c:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t136.im / 2.0;
 800af50:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800af54:	ed93 6b02 	vldr	d6, [r3, #8]
 800af58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af60:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800af64:	443b      	add	r3, r7
 800af66:	ed83 7b00 	vstr	d7, [r3]
 800af6a:	e019      	b.n	800afa0 <G_q+0x8c88>
  } else {
    t70_im = t136.re / 2.0;
 800af6c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800af70:	ed93 6b00 	vldr	d6, [r3]
 800af74:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800af78:	443b      	add	r3, r7
 800af7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af82:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t136.im / 2.0;
 800af86:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800af8a:	ed93 6b02 	vldr	d6, [r3, #8]
 800af8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800af92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800af96:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800af9a:	443b      	add	r3, r7
 800af9c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t137.im == 0.0) {
 800afa0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800afa4:	ed93 7b02 	vldr	d7, [r3, #8]
 800afa8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb0:	d116      	bne.n	800afe0 <G_q+0x8cc8>
    t34_re = t137.re / 2.0;
 800afb2:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800afb6:	ed93 6b00 	vldr	d6, [r3]
 800afba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800afbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800afc2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800afc6:	443b      	add	r3, r7
 800afc8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800afcc:	f04f 0300 	mov.w	r3, #0
 800afd0:	f04f 0400 	mov.w	r4, #0
 800afd4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800afd8:	443a      	add	r2, r7
 800afda:	e9c2 3400 	strd	r3, r4, [r2]
 800afde:	e03b      	b.n	800b058 <G_q+0x8d40>
  } else if (t137.re == 0.0) {
 800afe0:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800afe4:	ed93 7b00 	vldr	d7, [r3]
 800afe8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800afec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aff0:	d118      	bne.n	800b024 <G_q+0x8d0c>
    t34_re = 0.0;
 800aff2:	f04f 0300 	mov.w	r3, #0
 800aff6:	f04f 0400 	mov.w	r4, #0
 800affa:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800affe:	443a      	add	r2, r7
 800b000:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t137.im / 2.0;
 800b004:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b008:	ed93 6b02 	vldr	d6, [r3, #8]
 800b00c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b010:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b014:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b018:	443b      	add	r3, r7
 800b01a:	ed83 7b00 	vstr	d7, [r3]
 800b01e:	e01b      	b.n	800b058 <G_q+0x8d40>
 800b020:	ffffecb0 	.word	0xffffecb0
  } else {
    t34_re = t137.re / 2.0;
 800b024:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b028:	ed93 6b00 	vldr	d6, [r3]
 800b02c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b030:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b034:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b038:	443b      	add	r3, r7
 800b03a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t137.im / 2.0;
 800b03e:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b042:	ed93 6b02 	vldr	d6, [r3, #8]
 800b046:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b04a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b04e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b052:	443b      	add	r3, r7
 800b054:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_im += t34_re;
 800b058:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b05c:	443b      	add	r3, r7
 800b05e:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b062:	443a      	add	r2, r7
 800b064:	ed92 6b00 	vldr	d6, [r2]
 800b068:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b06c:	443a      	add	r2, r7
 800b06e:	ed92 7b00 	vldr	d7, [r2]
 800b072:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b076:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t34_im;
 800b07a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b07e:	443b      	add	r3, r7
 800b080:	ed93 6b00 	vldr	d6, [r3]
 800b084:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b088:	443b      	add	r3, r7
 800b08a:	ed93 7b00 	vldr	d7, [r3]
 800b08e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b092:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b096:	443b      	add	r3, r7
 800b098:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t138.re * 0.0 - t138.im * 0.5) - (t139.re * 0.0 - t139.im * 0.5);
 800b09c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b0a0:	ed93 7b00 	vldr	d7, [r3]
 800b0a4:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 800b380 <G_q+0x9068>
 800b0a8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b0ac:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b0b0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b0b4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b0b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b0bc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b0c0:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b0c4:	ed93 7b00 	vldr	d7, [r3]
 800b0c8:	ed9f 5bad 	vldr	d5, [pc, #692]	; 800b380 <G_q+0x9068>
 800b0cc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b0d0:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b0d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b0d8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b0dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b0e0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b0e4:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800b0e8:	443b      	add	r3, r7
 800b0ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b0ee:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t138.re * 0.5 + t138.im * 0.0) - (t139.re * 0.5 + t139.im * 0.0);
 800b0f2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b0f6:	ed93 7b00 	vldr	d7, [r3]
 800b0fa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b0fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b102:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b106:	ed93 7b02 	vldr	d7, [r3, #8]
 800b10a:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800b380 <G_q+0x9068>
 800b10e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b112:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b116:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b11a:	ed93 7b00 	vldr	d7, [r3]
 800b11e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b122:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b126:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b12a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b12e:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800b380 <G_q+0x9068>
 800b132:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b136:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b13a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800b13e:	443b      	add	r3, r7
 800b140:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b144:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t150.re * 3.061616997868383E-17 + t151.re * 3.061616997868383E-17;
 800b148:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b14c:	ed93 7b00 	vldr	d7, [r3]
 800b150:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800b390 <G_q+0x9078>
 800b154:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b158:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b15c:	ed93 7b00 	vldr	d7, [r3]
 800b160:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800b390 <G_q+0x9078>
 800b164:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b168:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b16c:	f241 3378 	movw	r3, #4984	; 0x1378
 800b170:	443b      	add	r3, r7
 800b172:	ed83 7b00 	vstr	d7, [r3]
  t55_re = t150.im * 3.061616997868383E-17 + t151.im * 3.061616997868383E-17;
 800b176:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b17a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b17e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 800b390 <G_q+0x9078>
 800b182:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b186:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b18a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b18e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 800b390 <G_q+0x9078>
 800b192:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b196:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b19a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b19e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t148.re * 0.0 - t148.im * 0.5) - (t149.re * 0.0 - t149.im * 0.5);
 800b1a2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b1a6:	ed93 7b00 	vldr	d7, [r3]
 800b1aa:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800b380 <G_q+0x9068>
 800b1ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b1b2:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b1b6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b1be:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b1c2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b1c6:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b1ca:	ed93 7b00 	vldr	d7, [r3]
 800b1ce:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b380 <G_q+0x9068>
 800b1d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b1d6:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b1da:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1de:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b1e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b1e6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b1ea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b1ee:	f241 3370 	movw	r3, #4976	; 0x1370
 800b1f2:	443b      	add	r3, r7
 800b1f4:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t148.re * 0.5 + t148.im * 0.0) - (t149.re * 0.5 + t149.im * 0.0);
 800b1f8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b1fc:	ed93 7b00 	vldr	d7, [r3]
 800b200:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b204:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b208:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b20c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b210:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800b380 <G_q+0x9068>
 800b214:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b218:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b21c:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b220:	ed93 7b00 	vldr	d7, [r3]
 800b224:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b228:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b22c:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b230:	ed93 7b02 	vldr	d7, [r3, #8]
 800b234:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800b380 <G_q+0x9068>
 800b238:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b23c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b240:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b244:	f241 3368 	movw	r3, #4968	; 0x1368
 800b248:	443b      	add	r3, r7
 800b24a:	ed83 7b00 	vstr	d7, [r3]
  if (t146.im == 0.0) {
 800b24e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b252:	ed93 7b02 	vldr	d7, [r3, #8]
 800b256:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b25a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25e:	d115      	bne.n	800b28c <G_q+0x8f74>
    t16_im = t146.re / 2.0;
 800b260:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b264:	ed93 6b00 	vldr	d6, [r3]
 800b268:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b26c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b270:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b274:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800b278:	f04f 0300 	mov.w	r3, #0
 800b27c:	f04f 0400 	mov.w	r4, #0
 800b280:	f241 3248 	movw	r2, #4936	; 0x1348
 800b284:	443a      	add	r2, r7
 800b286:	e9c2 3400 	strd	r3, r4, [r2]
 800b28a:	e037      	b.n	800b2fc <G_q+0x8fe4>
  } else if (t146.re == 0.0) {
 800b28c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b290:	ed93 7b00 	vldr	d7, [r3]
 800b294:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29c:	d115      	bne.n	800b2ca <G_q+0x8fb2>
    t16_im = 0.0;
 800b29e:	f04f 0300 	mov.w	r3, #0
 800b2a2:	f04f 0400 	mov.w	r4, #0
 800b2a6:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800b2aa:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t146.im / 2.0;
 800b2ae:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b2b2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b2b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2be:	f241 3348 	movw	r3, #4936	; 0x1348
 800b2c2:	443b      	add	r3, r7
 800b2c4:	ed83 7b00 	vstr	d7, [r3]
 800b2c8:	e018      	b.n	800b2fc <G_q+0x8fe4>
  } else {
    t16_im = t146.re / 2.0;
 800b2ca:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b2ce:	ed93 6b00 	vldr	d6, [r3]
 800b2d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2da:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b2de:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t146.im / 2.0;
 800b2e2:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b2e6:	ed93 6b02 	vldr	d6, [r3, #8]
 800b2ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2f2:	f241 3348 	movw	r3, #4936	; 0x1348
 800b2f6:	443b      	add	r3, r7
 800b2f8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t147.im == 0.0) {
 800b2fc:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b300:	ed93 7b02 	vldr	d7, [r3, #8]
 800b304:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b30c:	d116      	bne.n	800b33c <G_q+0x9024>
    t34_re = t147.re / 2.0;
 800b30e:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b312:	ed93 6b00 	vldr	d6, [r3]
 800b316:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b31a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b31e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b322:	443b      	add	r3, r7
 800b324:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b328:	f04f 0300 	mov.w	r3, #0
 800b32c:	f04f 0400 	mov.w	r4, #0
 800b330:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b334:	443a      	add	r2, r7
 800b336:	e9c2 3400 	strd	r3, r4, [r2]
 800b33a:	e047      	b.n	800b3cc <G_q+0x90b4>
  } else if (t147.re == 0.0) {
 800b33c:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b340:	ed93 7b00 	vldr	d7, [r3]
 800b344:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34c:	d124      	bne.n	800b398 <G_q+0x9080>
    t34_re = 0.0;
 800b34e:	f04f 0300 	mov.w	r3, #0
 800b352:	f04f 0400 	mov.w	r4, #0
 800b356:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b35a:	443a      	add	r2, r7
 800b35c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t147.im / 2.0;
 800b360:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b364:	ed93 6b02 	vldr	d6, [r3, #8]
 800b368:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b36c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b370:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b374:	443b      	add	r3, r7
 800b376:	ed83 7b00 	vstr	d7, [r3]
 800b37a:	e027      	b.n	800b3cc <G_q+0x90b4>
 800b37c:	f3af 8000 	nop.w
	...
 800b388:	858a5d48 	.word	0x858a5d48
 800b38c:	394377ce 	.word	0x394377ce
 800b390:	33145c07 	.word	0x33145c07
 800b394:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t147.re / 2.0;
 800b398:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b39c:	ed93 6b00 	vldr	d6, [r3]
 800b3a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b3a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b3a8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b3ac:	443b      	add	r3, r7
 800b3ae:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t147.im / 2.0;
 800b3b2:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b3b6:	ed93 6b02 	vldr	d6, [r3, #8]
 800b3ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b3be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b3c2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b3c6:	443b      	add	r3, r7
 800b3c8:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b3cc:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b3d0:	ed93 7b00 	vldr	d7, [r3]
 800b3d4:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 800b380 <G_q+0x9068>
 800b3d8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b3dc:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b3e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b3e4:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 800b390 <G_q+0x9078>
 800b3e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b3ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b3f0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b3f4:	ed93 7b00 	vldr	d7, [r3]
 800b3f8:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 800b380 <G_q+0x9068>
 800b3fc:	ee27 5b05 	vmul.f64	d5, d7, d5
    t145.im * 3.061616997868383E-17);
 800b400:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b404:	ed93 7b02 	vldr	d7, [r3, #8]
 800b408:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 800b390 <G_q+0x9078>
 800b40c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b410:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b414:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b418:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b41c:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b420:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b424:	ed93 7b00 	vldr	d7, [r3]
 800b428:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 800b390 <G_q+0x9078>
 800b42c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b430:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b434:	ed93 7b02 	vldr	d7, [r3, #8]
 800b438:	ed1f 5b2f 	vldr	d5, [pc, #-188]	; 800b380 <G_q+0x9068>
 800b43c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b440:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b444:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b448:	ed93 7b00 	vldr	d7, [r3]
 800b44c:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 800b390 <G_q+0x9078>
 800b450:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t145.im * 0.0);
 800b454:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b458:	ed93 7b02 	vldr	d7, [r3, #8]
 800b45c:	ed1f 4b38 	vldr	d4, [pc, #-224]	; 800b380 <G_q+0x9068>
 800b460:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b464:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b468:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b46c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b470:	443b      	add	r3, r7
 800b472:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800b476:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b47a:	ed93 6b00 	vldr	d6, [r3]
 800b47e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b482:	443b      	add	r3, r7
 800b484:	ed93 7b00 	vldr	d7, [r3]
 800b488:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b48c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800b388 <G_q+0x9070>
 800b490:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b494:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b498:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800b49c:	f241 3348 	movw	r3, #4936	; 0x1348
 800b4a0:	443b      	add	r3, r7
 800b4a2:	ed93 6b00 	vldr	d6, [r3]
 800b4a6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b4aa:	443b      	add	r3, r7
 800b4ac:	ed93 7b00 	vldr	d7, [r3]
 800b4b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4b4:	f241 3348 	movw	r3, #4936	; 0x1348
 800b4b8:	443b      	add	r3, r7
 800b4ba:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t152.re * 3.061616997868383E-17 + t153.re * 3.061616997868383E-17;
 800b4be:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b4c2:	ed93 7b00 	vldr	d7, [r3]
 800b4c6:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 800b390 <G_q+0x9078>
 800b4ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b4ce:	4be2      	ldr	r3, [pc, #904]	; (800b858 <G_q+0x9540>)
 800b4d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b4d4:	443a      	add	r2, r7
 800b4d6:	4413      	add	r3, r2
 800b4d8:	ed93 7b00 	vldr	d7, [r3]
 800b4dc:	ed9f 5bda 	vldr	d5, [pc, #872]	; 800b848 <G_q+0x9530>
 800b4e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4e4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b4e8:	443b      	add	r3, r7
 800b4ea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b4ee:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t152.im * 3.061616997868383E-17 + t153.im * 3.061616997868383E-17;
 800b4f2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b4f6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b4fa:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 800b848 <G_q+0x9530>
 800b4fe:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b502:	4bd5      	ldr	r3, [pc, #852]	; (800b858 <G_q+0x9540>)
 800b504:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b508:	443a      	add	r2, r7
 800b50a:	4413      	add	r3, r2
 800b50c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b510:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800b848 <G_q+0x9530>
 800b514:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b518:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b51c:	f241 3310 	movw	r3, #4880	; 0x1310
 800b520:	443b      	add	r3, r7
 800b522:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t13_re * t13_im - t55_re * t16_re) - (t20_im * t16_im - t12_re *
 800b526:	f241 3378 	movw	r3, #4984	; 0x1378
 800b52a:	443b      	add	r3, r7
 800b52c:	ed93 6b00 	vldr	d6, [r3]
 800b530:	f241 3370 	movw	r3, #4976	; 0x1370
 800b534:	443b      	add	r3, r7
 800b536:	ed93 7b00 	vldr	d7, [r3]
 800b53a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b53e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b542:	ed93 5b00 	vldr	d5, [r3]
 800b546:	f241 3368 	movw	r3, #4968	; 0x1368
 800b54a:	443b      	add	r3, r7
 800b54c:	ed93 7b00 	vldr	d7, [r3]
 800b550:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b554:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b558:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b55c:	ed93 5b00 	vldr	d5, [r3]
 800b560:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b564:	ed93 7b00 	vldr	d7, [r3]
 800b568:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b56c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b570:	443b      	add	r3, r7
 800b572:	ed93 4b00 	vldr	d4, [r3]
 800b576:	f241 3348 	movw	r3, #4936	; 0x1348
 800b57a:	443b      	add	r3, r7
 800b57c:	ed93 7b00 	vldr	d7, [r3]
 800b580:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b584:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b588:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800b58c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b590:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t55_re = (t13_re * t16_re + t55_re * t13_im) - (t20_im * t20_re + t12_re *
 800b594:	f241 3378 	movw	r3, #4984	; 0x1378
 800b598:	443b      	add	r3, r7
 800b59a:	ed93 6b00 	vldr	d6, [r3]
 800b59e:	f241 3368 	movw	r3, #4968	; 0x1368
 800b5a2:	443b      	add	r3, r7
 800b5a4:	ed93 7b00 	vldr	d7, [r3]
 800b5a8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b5ac:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b5b0:	ed93 5b00 	vldr	d5, [r3]
 800b5b4:	f241 3370 	movw	r3, #4976	; 0x1370
 800b5b8:	443b      	add	r3, r7
 800b5ba:	ed93 7b00 	vldr	d7, [r3]
 800b5be:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b5c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b5c6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b5ca:	ed93 5b00 	vldr	d5, [r3]
 800b5ce:	f241 3348 	movw	r3, #4936	; 0x1348
 800b5d2:	443b      	add	r3, r7
 800b5d4:	ed93 7b00 	vldr	d7, [r3]
 800b5d8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b5dc:	f241 3388 	movw	r3, #5000	; 0x1388
 800b5e0:	443b      	add	r3, r7
 800b5e2:	ed93 4b00 	vldr	d4, [r3]
 800b5e6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b5ea:	ed93 7b00 	vldr	d7, [r3]
 800b5ee:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b5f2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b5f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b5fa:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b5fe:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t16_re = (t126.re * 0.0 - t126.im * 0.5) - (t127.re * 0.0 - t127.im * 0.5);
 800b602:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b606:	ed93 7b00 	vldr	d7, [r3]
 800b60a:	ed9f 6b91 	vldr	d6, [pc, #580]	; 800b850 <G_q+0x9538>
 800b60e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b612:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b616:	ed93 7b02 	vldr	d7, [r3, #8]
 800b61a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b61e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b622:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b626:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b62a:	ed93 7b00 	vldr	d7, [r3]
 800b62e:	ed9f 5b88 	vldr	d5, [pc, #544]	; 800b850 <G_q+0x9538>
 800b632:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b636:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b63a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b63e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b642:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b646:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b64a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b64e:	f241 3368 	movw	r3, #4968	; 0x1368
 800b652:	443b      	add	r3, r7
 800b654:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t126.re * 0.5 + t126.im * 0.0) - (t127.re * 0.5 + t127.im * 0.0);
 800b658:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b65c:	ed93 7b00 	vldr	d7, [r3]
 800b660:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b664:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b668:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b66c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b670:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800b850 <G_q+0x9538>
 800b674:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b678:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b67c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b680:	ed93 7b00 	vldr	d7, [r3]
 800b684:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b688:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b68c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b690:	ed93 7b02 	vldr	d7, [r3, #8]
 800b694:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800b850 <G_q+0x9538>
 800b698:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b69c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b6a0:	f241 2350 	movw	r3, #4688	; 0x1250
 800b6a4:	443b      	add	r3, r7
 800b6a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6aa:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t128.re * 0.0 - t128.im * 0.5) - (t129.re * 0.0 - t129.im * 0.5);
 800b6ae:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b6b2:	ed93 7b00 	vldr	d7, [r3]
 800b6b6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800b850 <G_q+0x9538>
 800b6ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6be:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b6c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800b6c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b6ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b6ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b6d2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b6d6:	ed93 7b00 	vldr	d7, [r3]
 800b6da:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800b850 <G_q+0x9538>
 800b6de:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b6e2:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b6e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b6ea:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b6ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b6f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b6f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6fa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b6fe:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t128.re * 0.5 + t128.im * 0.0) - (t129.re * 0.5 + t129.im * 0.0);
 800b702:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b706:	ed93 7b00 	vldr	d7, [r3]
 800b70a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b70e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b712:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b716:	ed93 7b02 	vldr	d7, [r3, #8]
 800b71a:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800b850 <G_q+0x9538>
 800b71e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b722:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b726:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b72a:	ed93 7b00 	vldr	d7, [r3]
 800b72e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b732:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b736:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b73a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b73e:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800b850 <G_q+0x9538>
 800b742:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b746:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b74a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b74e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b752:	443b      	add	r3, r7
 800b754:	ed83 7b00 	vstr	d7, [r3]
  if (t130.im == 0.0) {
 800b758:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b75c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b760:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b768:	d115      	bne.n	800b796 <G_q+0x947e>
    t20_im = t130.re / 2.0;
 800b76a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b76e:	ed93 6b00 	vldr	d6, [r3]
 800b772:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b776:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b77a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b77e:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800b782:	f04f 0300 	mov.w	r3, #0
 800b786:	f04f 0400 	mov.w	r4, #0
 800b78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b78e:	443a      	add	r2, r7
 800b790:	e9c2 3400 	strd	r3, r4, [r2]
 800b794:	e037      	b.n	800b806 <G_q+0x94ee>
  } else if (t130.re == 0.0) {
 800b796:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b79a:	ed93 7b00 	vldr	d7, [r3]
 800b79e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7a6:	d115      	bne.n	800b7d4 <G_q+0x94bc>
    t20_im = 0.0;
 800b7a8:	f04f 0300 	mov.w	r3, #0
 800b7ac:	f04f 0400 	mov.w	r4, #0
 800b7b0:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800b7b4:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t130.im / 2.0;
 800b7b8:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b7bc:	ed93 6b02 	vldr	d6, [r3, #8]
 800b7c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b7c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b7c8:	f241 3388 	movw	r3, #5000	; 0x1388
 800b7cc:	443b      	add	r3, r7
 800b7ce:	ed83 7b00 	vstr	d7, [r3]
 800b7d2:	e018      	b.n	800b806 <G_q+0x94ee>
  } else {
    t20_im = t130.re / 2.0;
 800b7d4:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b7d8:	ed93 6b00 	vldr	d6, [r3]
 800b7dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b7e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b7e4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b7e8:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t130.im / 2.0;
 800b7ec:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800b7f0:	ed93 6b02 	vldr	d6, [r3, #8]
 800b7f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b7f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b7fc:	f241 3388 	movw	r3, #5000	; 0x1388
 800b800:	443b      	add	r3, r7
 800b802:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t131.im == 0.0) {
 800b806:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b80a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b80e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b816:	d121      	bne.n	800b85c <G_q+0x9544>
    t34_re = t131.re / 2.0;
 800b818:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b81c:	ed93 6b00 	vldr	d6, [r3]
 800b820:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b828:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b82c:	443b      	add	r3, r7
 800b82e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b832:	f04f 0300 	mov.w	r3, #0
 800b836:	f04f 0400 	mov.w	r4, #0
 800b83a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b83e:	443a      	add	r2, r7
 800b840:	e9c2 3400 	strd	r3, r4, [r2]
 800b844:	e044      	b.n	800b8d0 <G_q+0x95b8>
 800b846:	bf00      	nop
 800b848:	33145c07 	.word	0x33145c07
 800b84c:	3c81a626 	.word	0x3c81a626
	...
 800b858:	ffffee70 	.word	0xffffee70
  } else if (t131.re == 0.0) {
 800b85c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b860:	ed93 7b00 	vldr	d7, [r3]
 800b864:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b86c:	d116      	bne.n	800b89c <G_q+0x9584>
    t34_re = 0.0;
 800b86e:	f04f 0300 	mov.w	r3, #0
 800b872:	f04f 0400 	mov.w	r4, #0
 800b876:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b87a:	443a      	add	r2, r7
 800b87c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t131.im / 2.0;
 800b880:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b884:	ed93 6b02 	vldr	d6, [r3, #8]
 800b888:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b88c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b890:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b894:	443b      	add	r3, r7
 800b896:	ed83 7b00 	vstr	d7, [r3]
 800b89a:	e019      	b.n	800b8d0 <G_q+0x95b8>
  } else {
    t34_re = t131.re / 2.0;
 800b89c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b8a0:	ed93 6b00 	vldr	d6, [r3]
 800b8a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b8a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b8ac:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b8b0:	443b      	add	r3, r7
 800b8b2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t131.im / 2.0;
 800b8b6:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800b8ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800b8be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b8c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b8c6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b8ca:	443b      	add	r3, r7
 800b8cc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t132.im == 0.0) {
 800b8d0:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b8d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8e0:	d115      	bne.n	800b90e <G_q+0x95f6>
    t12_im = t132.re / 2.0;
 800b8e2:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b8e6:	ed93 6b00 	vldr	d6, [r3]
 800b8ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b8ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b8f2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b8f6:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800b8fa:	f04f 0300 	mov.w	r3, #0
 800b8fe:	f04f 0400 	mov.w	r4, #0
 800b902:	f241 3238 	movw	r2, #4920	; 0x1338
 800b906:	443a      	add	r2, r7
 800b908:	e9c2 3400 	strd	r3, r4, [r2]
 800b90c:	e037      	b.n	800b97e <G_q+0x9666>
  } else if (t132.re == 0.0) {
 800b90e:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b912:	ed93 7b00 	vldr	d7, [r3]
 800b916:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b91e:	d115      	bne.n	800b94c <G_q+0x9634>
    t12_im = 0.0;
 800b920:	f04f 0300 	mov.w	r3, #0
 800b924:	f04f 0400 	mov.w	r4, #0
 800b928:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800b92c:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t132.im / 2.0;
 800b930:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b934:	ed93 6b02 	vldr	d6, [r3, #8]
 800b938:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b93c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b940:	f241 3338 	movw	r3, #4920	; 0x1338
 800b944:	443b      	add	r3, r7
 800b946:	ed83 7b00 	vstr	d7, [r3]
 800b94a:	e018      	b.n	800b97e <G_q+0x9666>
  } else {
    t12_im = t132.re / 2.0;
 800b94c:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b950:	ed93 6b00 	vldr	d6, [r3]
 800b954:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b958:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b95c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800b960:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t132.im / 2.0;
 800b964:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800b968:	ed93 6b02 	vldr	d6, [r3, #8]
 800b96c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b970:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b974:	f241 3338 	movw	r3, #4920	; 0x1338
 800b978:	443b      	add	r3, r7
 800b97a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t133.im == 0.0) {
 800b97e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800b982:	ed93 7b02 	vldr	d7, [r3, #8]
 800b986:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98e:	d116      	bne.n	800b9be <G_q+0x96a6>
    t13_re = t133.re / 2.0;
 800b990:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800b994:	ed93 6b00 	vldr	d6, [r3]
 800b998:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b99c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9a0:	f241 3378 	movw	r3, #4984	; 0x1378
 800b9a4:	443b      	add	r3, r7
 800b9a6:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800b9aa:	f04f 0300 	mov.w	r3, #0
 800b9ae:	f04f 0400 	mov.w	r4, #0
 800b9b2:	f241 3270 	movw	r2, #4976	; 0x1370
 800b9b6:	443a      	add	r2, r7
 800b9b8:	e9c2 3400 	strd	r3, r4, [r2]
 800b9bc:	e039      	b.n	800ba32 <G_q+0x971a>
  } else if (t133.re == 0.0) {
 800b9be:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800b9c2:	ed93 7b00 	vldr	d7, [r3]
 800b9c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9ce:	d116      	bne.n	800b9fe <G_q+0x96e6>
    t13_re = 0.0;
 800b9d0:	f04f 0300 	mov.w	r3, #0
 800b9d4:	f04f 0400 	mov.w	r4, #0
 800b9d8:	f241 3278 	movw	r2, #4984	; 0x1378
 800b9dc:	443a      	add	r2, r7
 800b9de:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t133.im / 2.0;
 800b9e2:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800b9e6:	ed93 6b02 	vldr	d6, [r3, #8]
 800b9ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b9ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b9f2:	f241 3370 	movw	r3, #4976	; 0x1370
 800b9f6:	443b      	add	r3, r7
 800b9f8:	ed83 7b00 	vstr	d7, [r3]
 800b9fc:	e019      	b.n	800ba32 <G_q+0x971a>
  } else {
    t13_re = t133.re / 2.0;
 800b9fe:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800ba02:	ed93 6b00 	vldr	d6, [r3]
 800ba06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba0e:	f241 3378 	movw	r3, #4984	; 0x1378
 800ba12:	443b      	add	r3, r7
 800ba14:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t133.im / 2.0;
 800ba18:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800ba1c:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba28:	f241 3370 	movw	r3, #4976	; 0x1370
 800ba2c:	443b      	add	r3, r7
 800ba2e:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800ba32:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ba36:	ed93 6b00 	vldr	d6, [r3]
 800ba3a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ba3e:	443b      	add	r3, r7
 800ba40:	ed93 7b00 	vldr	d7, [r3]
 800ba44:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba48:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ba4c:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800ba50:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba54:	443b      	add	r3, r7
 800ba56:	ed93 6b00 	vldr	d6, [r3]
 800ba5a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ba5e:	443b      	add	r3, r7
 800ba60:	ed93 7b00 	vldr	d7, [r3]
 800ba64:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba68:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba6c:	443b      	add	r3, r7
 800ba6e:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800ba72:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ba76:	ed93 6b00 	vldr	d6, [r3]
 800ba7a:	f241 3378 	movw	r3, #4984	; 0x1378
 800ba7e:	443b      	add	r3, r7
 800ba80:	ed93 7b00 	vldr	d7, [r3]
 800ba84:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ba88:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800bd90 <G_q+0x9a78>
 800ba8c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ba90:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ba94:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800ba98:	f241 3338 	movw	r3, #4920	; 0x1338
 800ba9c:	443b      	add	r3, r7
 800ba9e:	ed93 6b00 	vldr	d6, [r3]
 800baa2:	f241 3370 	movw	r3, #4976	; 0x1370
 800baa6:	443b      	add	r3, r7
 800baa8:	ed93 7b00 	vldr	d7, [r3]
 800baac:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bab0:	f241 3338 	movw	r3, #4920	; 0x1338
 800bab4:	443b      	add	r3, r7
 800bab6:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800baba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800babe:	ed93 7b00 	vldr	d7, [r3]
 800bac2:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 800bd98 <G_q+0x9a80>
 800bac6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800baca:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bace:	ed93 7b02 	vldr	d7, [r3, #8]
 800bad2:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800bda0 <G_q+0x9a88>
 800bad6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bada:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bade:	4bb2      	ldr	r3, [pc, #712]	; (800bda8 <G_q+0x9a90>)
 800bae0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bae4:	443a      	add	r2, r7
 800bae6:	4413      	add	r3, r2
 800bae8:	ed93 7b00 	vldr	d7, [r3]
 800baec:	ed9f 5baa 	vldr	d5, [pc, #680]	; 800bd98 <G_q+0x9a80>
 800baf0:	ee27 5b05 	vmul.f64	d5, d7, d5
    t135.im * 3.061616997868383E-17);
 800baf4:	4bac      	ldr	r3, [pc, #688]	; (800bda8 <G_q+0x9a90>)
 800baf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bafa:	443a      	add	r2, r7
 800bafc:	4413      	add	r3, r2
 800bafe:	ed93 7b02 	vldr	d7, [r3, #8]
 800bb02:	ed9f 4ba7 	vldr	d4, [pc, #668]	; 800bda0 <G_q+0x9a88>
 800bb06:	ee27 7b04 	vmul.f64	d7, d7, d4
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800bb0a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bb0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb12:	f241 3318 	movw	r3, #4888	; 0x1318
 800bb16:	443b      	add	r3, r7
 800bb18:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800bb1c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb20:	ed93 7b00 	vldr	d7, [r3]
 800bb24:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800bda0 <G_q+0x9a88>
 800bb28:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bb2c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bb30:	ed93 7b02 	vldr	d7, [r3, #8]
 800bb34:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800bd98 <G_q+0x9a80>
 800bb38:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bb3c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bb40:	4b99      	ldr	r3, [pc, #612]	; (800bda8 <G_q+0x9a90>)
 800bb42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bb46:	443a      	add	r2, r7
 800bb48:	4413      	add	r3, r2
 800bb4a:	ed93 7b00 	vldr	d7, [r3]
 800bb4e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800bda0 <G_q+0x9a88>
 800bb52:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t135.im * 0.0);
 800bb56:	4b94      	ldr	r3, [pc, #592]	; (800bda8 <G_q+0x9a90>)
 800bb58:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bb5c:	443a      	add	r2, r7
 800bb5e:	4413      	add	r3, r2
 800bb60:	ed93 7b02 	vldr	d7, [r3, #8]
 800bb64:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 800bd98 <G_q+0x9a80>
 800bb68:	ee27 7b04 	vmul.f64	d7, d7, d4
 800bb6c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800bb70:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bb74:	f241 3330 	movw	r3, #4912	; 0x1330
 800bb78:	443b      	add	r3, r7
 800bb7a:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t16_re * t16_im - t60_re * t20_re) + (t20_im * t12_im - t12_re *
 800bb7e:	f241 3368 	movw	r3, #4968	; 0x1368
 800bb82:	443b      	add	r3, r7
 800bb84:	ed93 6b00 	vldr	d6, [r3]
 800bb88:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bb8c:	ed93 7b00 	vldr	d7, [r3]
 800bb90:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bb94:	f241 2350 	movw	r3, #4688	; 0x1250
 800bb98:	443b      	add	r3, r7
 800bb9a:	ed93 5b00 	vldr	d5, [r3]
 800bb9e:	f241 3348 	movw	r3, #4936	; 0x1348
 800bba2:	443b      	add	r3, r7
 800bba4:	ed93 7b00 	vldr	d7, [r3]
 800bba8:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bbac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bbb0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bbb4:	ed93 5b00 	vldr	d5, [r3]
 800bbb8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bbbc:	ed93 7b00 	vldr	d7, [r3]
 800bbc0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bbc4:	f241 3388 	movw	r3, #5000	; 0x1388
 800bbc8:	443b      	add	r3, r7
 800bbca:	ed93 4b00 	vldr	d4, [r3]
 800bbce:	f241 3338 	movw	r3, #4920	; 0x1338
 800bbd2:	443b      	add	r3, r7
 800bbd4:	ed93 7b00 	vldr	d7, [r3]
 800bbd8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bbdc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bbe0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800bbe4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bbe8:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t60_re = (t16_re * t20_re + t60_re * t16_im) + (t20_im * b_t10_re + t12_re *
 800bbec:	f241 3368 	movw	r3, #4968	; 0x1368
 800bbf0:	443b      	add	r3, r7
 800bbf2:	ed93 6b00 	vldr	d6, [r3]
 800bbf6:	f241 3348 	movw	r3, #4936	; 0x1348
 800bbfa:	443b      	add	r3, r7
 800bbfc:	ed93 7b00 	vldr	d7, [r3]
 800bc00:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bc04:	f241 2350 	movw	r3, #4688	; 0x1250
 800bc08:	443b      	add	r3, r7
 800bc0a:	ed93 5b00 	vldr	d5, [r3]
 800bc0e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bc12:	ed93 7b00 	vldr	d7, [r3]
 800bc16:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bc1a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bc1e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bc22:	ed93 5b00 	vldr	d5, [r3]
 800bc26:	f241 3338 	movw	r3, #4920	; 0x1338
 800bc2a:	443b      	add	r3, r7
 800bc2c:	ed93 7b00 	vldr	d7, [r3]
 800bc30:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bc34:	f241 3388 	movw	r3, #5000	; 0x1388
 800bc38:	443b      	add	r3, r7
 800bc3a:	ed93 4b00 	vldr	d4, [r3]
 800bc3e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bc42:	ed93 7b00 	vldr	d7, [r3]
 800bc46:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bc4a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800bc4e:	f241 2350 	movw	r3, #4688	; 0x1250
 800bc52:	443b      	add	r3, r7
 800bc54:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bc58:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  if (t142.im == 0.0) {
 800bc5c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bc60:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6c:	d116      	bne.n	800bc9c <G_q+0x9984>
    t13_re = t142.re / 2.0;
 800bc6e:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bc72:	ed93 6b00 	vldr	d6, [r3]
 800bc76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bc7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bc7e:	f241 3378 	movw	r3, #4984	; 0x1378
 800bc82:	443b      	add	r3, r7
 800bc84:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800bc88:	f04f 0300 	mov.w	r3, #0
 800bc8c:	f04f 0400 	mov.w	r4, #0
 800bc90:	f241 3270 	movw	r2, #4976	; 0x1370
 800bc94:	443a      	add	r2, r7
 800bc96:	e9c2 3400 	strd	r3, r4, [r2]
 800bc9a:	e039      	b.n	800bd10 <G_q+0x99f8>
  } else if (t142.re == 0.0) {
 800bc9c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bca0:	ed93 7b00 	vldr	d7, [r3]
 800bca4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bca8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcac:	d116      	bne.n	800bcdc <G_q+0x99c4>
    t13_re = 0.0;
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	f04f 0400 	mov.w	r4, #0
 800bcb6:	f241 3278 	movw	r2, #4984	; 0x1378
 800bcba:	443a      	add	r2, r7
 800bcbc:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t142.im / 2.0;
 800bcc0:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bcc4:	ed93 6b02 	vldr	d6, [r3, #8]
 800bcc8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bccc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcd0:	f241 3370 	movw	r3, #4976	; 0x1370
 800bcd4:	443b      	add	r3, r7
 800bcd6:	ed83 7b00 	vstr	d7, [r3]
 800bcda:	e019      	b.n	800bd10 <G_q+0x99f8>
  } else {
    t13_re = t142.re / 2.0;
 800bcdc:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bce0:	ed93 6b00 	vldr	d6, [r3]
 800bce4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bce8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcec:	f241 3378 	movw	r3, #4984	; 0x1378
 800bcf0:	443b      	add	r3, r7
 800bcf2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t142.im / 2.0;
 800bcf6:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bcfa:	ed93 6b02 	vldr	d6, [r3, #8]
 800bcfe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd06:	f241 3370 	movw	r3, #4976	; 0x1370
 800bd0a:	443b      	add	r3, r7
 800bd0c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t143.im == 0.0) {
 800bd10:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bd14:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd20:	d116      	bne.n	800bd50 <G_q+0x9a38>
    t34_re = t143.re / 2.0;
 800bd22:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bd26:	ed93 6b00 	vldr	d6, [r3]
 800bd2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd32:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bd36:	443b      	add	r3, r7
 800bd38:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bd3c:	f04f 0300 	mov.w	r3, #0
 800bd40:	f04f 0400 	mov.w	r4, #0
 800bd44:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800bd48:	443a      	add	r2, r7
 800bd4a:	e9c2 3400 	strd	r3, r4, [r2]
 800bd4e:	e047      	b.n	800bde0 <G_q+0x9ac8>
  } else if (t143.re == 0.0) {
 800bd50:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bd54:	ed93 7b00 	vldr	d7, [r3]
 800bd58:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bd5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd60:	d124      	bne.n	800bdac <G_q+0x9a94>
    t34_re = 0.0;
 800bd62:	f04f 0300 	mov.w	r3, #0
 800bd66:	f04f 0400 	mov.w	r4, #0
 800bd6a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800bd6e:	443a      	add	r2, r7
 800bd70:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t143.im / 2.0;
 800bd74:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bd78:	ed93 6b02 	vldr	d6, [r3, #8]
 800bd7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bd80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bd84:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bd88:	443b      	add	r3, r7
 800bd8a:	ed83 7b00 	vstr	d7, [r3]
 800bd8e:	e027      	b.n	800bde0 <G_q+0x9ac8>
 800bd90:	858a5d48 	.word	0x858a5d48
 800bd94:	394377ce 	.word	0x394377ce
	...
 800bda0:	33145c07 	.word	0x33145c07
 800bda4:	3c81a626 	.word	0x3c81a626
 800bda8:	ffffee50 	.word	0xffffee50
  } else {
    t34_re = t143.re / 2.0;
 800bdac:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bdb0:	ed93 6b00 	vldr	d6, [r3]
 800bdb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdbc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bdc0:	443b      	add	r3, r7
 800bdc2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t143.im / 2.0;
 800bdc6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bdca:	ed93 6b02 	vldr	d6, [r3, #8]
 800bdce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bdd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bdd6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bdda:	443b      	add	r3, r7
 800bddc:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t140.re * 0.0 - t140.im * 0.5) - (t141.re * 0.0 - t141.im * 0.5);
 800bde0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bde4:	ed93 7b00 	vldr	d7, [r3]
 800bde8:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 800c168 <G_q+0x9e50>
 800bdec:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bdf0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800bdf4:	ed93 7b02 	vldr	d7, [r3, #8]
 800bdf8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800bdfc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800be00:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be04:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800be08:	ed93 7b00 	vldr	d7, [r3]
 800be0c:	ed9f 5bd6 	vldr	d5, [pc, #856]	; 800c168 <G_q+0x9e50>
 800be10:	ee27 5b05 	vmul.f64	d5, d7, d5
 800be14:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800be18:	ed93 7b02 	vldr	d7, [r3, #8]
 800be1c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800be20:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be24:	ee35 7b47 	vsub.f64	d7, d5, d7
 800be28:	ee36 7b47 	vsub.f64	d7, d6, d7
 800be2c:	f241 3368 	movw	r3, #4968	; 0x1368
 800be30:	443b      	add	r3, r7
 800be32:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t140.re * 0.5 + t140.im * 0.0) - (t141.re * 0.5 + t141.im * 0.0);
 800be36:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800be3a:	ed93 7b00 	vldr	d7, [r3]
 800be3e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800be42:	ee27 6b06 	vmul.f64	d6, d7, d6
 800be46:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800be4a:	ed93 7b02 	vldr	d7, [r3, #8]
 800be4e:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 800c168 <G_q+0x9e50>
 800be52:	ee27 7b05 	vmul.f64	d7, d7, d5
 800be56:	ee36 6b07 	vadd.f64	d6, d6, d7
 800be5a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800be5e:	ed93 7b00 	vldr	d7, [r3]
 800be62:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800be66:	ee27 5b05 	vmul.f64	d5, d7, d5
 800be6a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800be6e:	ed93 7b02 	vldr	d7, [r3, #8]
 800be72:	ed9f 4bbd 	vldr	d4, [pc, #756]	; 800c168 <G_q+0x9e50>
 800be76:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be7a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800be7e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800be82:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800be86:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800be8a:	f241 3378 	movw	r3, #4984	; 0x1378
 800be8e:	443b      	add	r3, r7
 800be90:	ed93 6b00 	vldr	d6, [r3]
 800be94:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800be98:	443b      	add	r3, r7
 800be9a:	ed93 7b00 	vldr	d7, [r3]
 800be9e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bea2:	ed9f 6bad 	vldr	d6, [pc, #692]	; 800c158 <G_q+0x9e40>
 800bea6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800beaa:	f241 3378 	movw	r3, #4984	; 0x1378
 800beae:	443b      	add	r3, r7
 800beb0:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800beb4:	f241 3370 	movw	r3, #4976	; 0x1370
 800beb8:	443b      	add	r3, r7
 800beba:	ed93 6b00 	vldr	d6, [r3]
 800bebe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bec2:	443b      	add	r3, r7
 800bec4:	ed93 7b00 	vldr	d7, [r3]
 800bec8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800becc:	f241 3370 	movw	r3, #4976	; 0x1370
 800bed0:	443b      	add	r3, r7
 800bed2:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t55_im;
 800bed6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800beda:	443b      	add	r3, r7
 800bedc:	ed93 6b00 	vldr	d6, [r3]
 800bee0:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800bee4:	443b      	add	r3, r7
 800bee6:	ed93 7b00 	vldr	d7, [r3]
 800beea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800beee:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800bef2:	443b      	add	r3, r7
 800bef4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t70_re;
 800bef8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800befc:	443b      	add	r3, r7
 800befe:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800bf02:	443a      	add	r2, r7
 800bf04:	ed92 6b00 	vldr	d6, [r2]
 800bf08:	ed93 7b00 	vldr	d7, [r3]
 800bf0c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bf10:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800bf14:	443b      	add	r3, r7
 800bf16:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800bf1a:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800bf1e:	443a      	add	r2, r7
 800bf20:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800bf24:	443b      	add	r3, r7
 800bf26:	ed92 6b00 	vldr	d6, [r2]
 800bf2a:	ed93 7b00 	vldr	d7, [r3]
 800bf2e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bf32:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800bf36:	443b      	add	r3, r7
 800bf38:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800bf3c:	443a      	add	r2, r7
 800bf3e:	ed92 5b00 	vldr	d5, [r2]
 800bf42:	ed93 7b00 	vldr	d7, [r3]
 800bf46:	ee25 7b07 	vmul.f64	d7, d5, d7
 800bf4a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bf4e:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800bf52:	443a      	add	r2, r7
 800bf54:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800bf58:	ed92 5b00 	vldr	d5, [r2]
 800bf5c:	ed93 7b00 	vldr	d7, [r3]
 800bf60:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bf64:	f241 3310 	movw	r3, #4880	; 0x1310
 800bf68:	443b      	add	r3, r7
 800bf6a:	ed93 4b00 	vldr	d4, [r3]
 800bf6e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800bf72:	ed93 7b00 	vldr	d7, [r3]
 800bf76:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bf7a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bf7e:	ee36 6b47 	vsub.f64	d6, d6, d7
              t55_re)) + (t85_im * t58_im - t23_re * t60_re)) - (t16_re * t13_re
 800bf82:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800bf86:	f241 3218 	movw	r2, #4888	; 0x1318
 800bf8a:	443a      	add	r2, r7
 800bf8c:	ed92 5b00 	vldr	d5, [r2]
 800bf90:	ed93 7b00 	vldr	d7, [r3]
 800bf94:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bf98:	f241 2350 	movw	r3, #4688	; 0x1250
 800bf9c:	443b      	add	r3, r7
 800bf9e:	f241 3230 	movw	r2, #4912	; 0x1330
 800bfa2:	443a      	add	r2, r7
 800bfa4:	ed92 4b00 	vldr	d4, [r2]
 800bfa8:	ed93 7b00 	vldr	d7, [r3]
 800bfac:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bfb0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bfb4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bfb8:	f241 3368 	movw	r3, #4968	; 0x1368
 800bfbc:	443b      	add	r3, r7
 800bfbe:	ed93 5b00 	vldr	d5, [r3]
 800bfc2:	f241 3378 	movw	r3, #4984	; 0x1378
 800bfc6:	443b      	add	r3, r7
 800bfc8:	ed93 7b00 	vldr	d7, [r3]
 800bfcc:	ee25 5b07 	vmul.f64	d5, d5, d7
    - t16_im * t13_im);
 800bfd0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bfd4:	ed93 4b00 	vldr	d4, [r3]
 800bfd8:	f241 3370 	movw	r3, #4976	; 0x1370
 800bfdc:	443b      	add	r3, r7
 800bfde:	ed93 7b00 	vldr	d7, [r3]
 800bfe2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800bfe6:	ee35 7b47 	vsub.f64	d7, d5, d7
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800bfea:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bfee:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800bff2:	443b      	add	r3, r7
 800bff4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800bff8:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800bffc:	443a      	add	r2, r7
 800bffe:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c002:	443b      	add	r3, r7
 800c004:	ed92 6b00 	vldr	d6, [r2]
 800c008:	ed93 7b00 	vldr	d7, [r3]
 800c00c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c010:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c014:	443b      	add	r3, r7
 800c016:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c01a:	443a      	add	r2, r7
 800c01c:	ed92 5b00 	vldr	d5, [r2]
 800c020:	ed93 7b00 	vldr	d7, [r3]
 800c024:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c028:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c02c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c030:	443b      	add	r3, r7
 800c032:	ed93 5b00 	vldr	d5, [r3]
 800c036:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c03a:	ed93 7b00 	vldr	d7, [r3]
 800c03e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c042:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c046:	f241 3210 	movw	r2, #4880	; 0x1310
 800c04a:	443a      	add	r2, r7
 800c04c:	ed92 4b00 	vldr	d4, [r2]
 800c050:	ed93 7b00 	vldr	d7, [r3]
 800c054:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c058:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c05c:	ee36 6b47 	vsub.f64	d6, d6, d7
    t72_re)) + (t85_im * t60_re + t23_re * t58_im)) - (t16_re * t13_im + t16_im *
 800c060:	f241 2350 	movw	r3, #4688	; 0x1250
 800c064:	443b      	add	r3, r7
 800c066:	f241 3218 	movw	r2, #4888	; 0x1318
 800c06a:	443a      	add	r2, r7
 800c06c:	ed92 5b00 	vldr	d5, [r2]
 800c070:	ed93 7b00 	vldr	d7, [r3]
 800c074:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c078:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c07c:	f241 3230 	movw	r2, #4912	; 0x1330
 800c080:	443a      	add	r2, r7
 800c082:	ed92 4b00 	vldr	d4, [r2]
 800c086:	ed93 7b00 	vldr	d7, [r3]
 800c08a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c08e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c092:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c096:	f241 3368 	movw	r3, #4968	; 0x1368
 800c09a:	443b      	add	r3, r7
 800c09c:	ed93 5b00 	vldr	d5, [r3]
 800c0a0:	f241 3370 	movw	r3, #4976	; 0x1370
 800c0a4:	443b      	add	r3, r7
 800c0a6:	ed93 7b00 	vldr	d7, [r3]
 800c0aa:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c0ae:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c0b2:	ed93 4b00 	vldr	d4, [r3]
 800c0b6:	f241 3378 	movw	r3, #4984	; 0x1378
 800c0ba:	443b      	add	r3, r7
 800c0bc:	ed93 7b00 	vldr	d7, [r3]
 800c0c0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c0c4:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c0c8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c0cc:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800c0d0:	443b      	add	r3, r7
 800c0d2:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t170.im == 0.0) {
 800c0d6:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c0da:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c0e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0e6:	d115      	bne.n	800c114 <G_q+0x9dfc>
    t3_im = t170.re / 2.0;
 800c0e8:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c0ec:	ed93 6b00 	vldr	d6, [r3]
 800c0f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c0f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c0f8:	f241 3310 	movw	r3, #4880	; 0x1310
 800c0fc:	443b      	add	r3, r7
 800c0fe:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800c102:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c106:	f04f 0300 	mov.w	r3, #0
 800c10a:	f04f 0400 	mov.w	r4, #0
 800c10e:	e9c2 3400 	strd	r3, r4, [r2]
 800c112:	e046      	b.n	800c1a2 <G_q+0x9e8a>
  } else if (t170.re == 0.0) {
 800c114:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c118:	ed93 7b00 	vldr	d7, [r3]
 800c11c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c124:	d124      	bne.n	800c170 <G_q+0x9e58>
    t3_im = 0.0;
 800c126:	f04f 0300 	mov.w	r3, #0
 800c12a:	f04f 0400 	mov.w	r4, #0
 800c12e:	f241 3210 	movw	r2, #4880	; 0x1310
 800c132:	443a      	add	r2, r7
 800c134:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t170.im / 2.0;
 800c138:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c13c:	ed93 6b02 	vldr	d6, [r3, #8]
 800c140:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c144:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c14c:	ed83 7b00 	vstr	d7, [r3]
 800c150:	e027      	b.n	800c1a2 <G_q+0x9e8a>
 800c152:	bf00      	nop
 800c154:	f3af 8000 	nop.w
 800c158:	858a5d48 	.word	0x858a5d48
 800c15c:	394377ce 	.word	0x394377ce
 800c160:	33145c07 	.word	0x33145c07
 800c164:	3c81a626 	.word	0x3c81a626
	...
  } else {
    t3_im = t170.re / 2.0;
 800c170:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c174:	ed93 6b00 	vldr	d6, [r3]
 800c178:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c17c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c180:	f241 3310 	movw	r3, #4880	; 0x1310
 800c184:	443b      	add	r3, r7
 800c186:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t170.im / 2.0;
 800c18a:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c18e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c192:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c196:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c19a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c19e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t171.im == 0.0) {
 800c1a2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c1a6:	ed93 7b02 	vldr	d7, [r3, #8]
 800c1aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1b2:	d116      	bne.n	800c1e2 <G_q+0x9eca>
    t34_re = t171.re / 2.0;
 800c1b4:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c1b8:	ed93 6b00 	vldr	d6, [r3]
 800c1bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c1c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c1c4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c1c8:	443b      	add	r3, r7
 800c1ca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c1ce:	f04f 0300 	mov.w	r3, #0
 800c1d2:	f04f 0400 	mov.w	r4, #0
 800c1d6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c1da:	443a      	add	r2, r7
 800c1dc:	e9c2 3400 	strd	r3, r4, [r2]
 800c1e0:	e039      	b.n	800c256 <G_q+0x9f3e>
  } else if (t171.re == 0.0) {
 800c1e2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c1e6:	ed93 7b00 	vldr	d7, [r3]
 800c1ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c1ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f2:	d116      	bne.n	800c222 <G_q+0x9f0a>
    t34_re = 0.0;
 800c1f4:	f04f 0300 	mov.w	r3, #0
 800c1f8:	f04f 0400 	mov.w	r4, #0
 800c1fc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c200:	443a      	add	r2, r7
 800c202:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t171.im / 2.0;
 800c206:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c20a:	ed93 6b02 	vldr	d6, [r3, #8]
 800c20e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c212:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c216:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c21a:	443b      	add	r3, r7
 800c21c:	ed83 7b00 	vstr	d7, [r3]
 800c220:	e019      	b.n	800c256 <G_q+0x9f3e>
  } else {
    t34_re = t171.re / 2.0;
 800c222:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c226:	ed93 6b00 	vldr	d6, [r3]
 800c22a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c22e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c232:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c236:	443b      	add	r3, r7
 800c238:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t171.im / 2.0;
 800c23c:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c240:	ed93 6b02 	vldr	d6, [r3, #8]
 800c244:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c248:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c24c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c250:	443b      	add	r3, r7
 800c252:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re = (t168.re * 0.0 - t168.im * 0.5) - (t169.re * 0.0 - t169.im * 0.5);
 800c256:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c25a:	ed93 7b00 	vldr	d7, [r3]
 800c25e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 800c168 <G_q+0x9e50>
 800c262:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c266:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c26a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c26e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c272:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c276:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c27a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c27e:	ed93 7b00 	vldr	d7, [r3]
 800c282:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 800c168 <G_q+0x9e50>
 800c286:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c28a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c28e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c292:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c296:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c29a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c29e:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c2a2:	443b      	add	r3, r7
 800c2a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c2a8:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t168.re * 0.5 + t168.im * 0.0) - (t169.re * 0.5 + t169.im * 0.0);
 800c2ac:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c2b0:	ed93 7b00 	vldr	d7, [r3]
 800c2b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c2b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c2bc:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c2c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c2c4:	ed1f 5b58 	vldr	d5, [pc, #-352]	; 800c168 <G_q+0x9e50>
 800c2c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c2cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c2d0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c2d4:	ed93 7b00 	vldr	d7, [r3]
 800c2d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c2dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c2e0:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c2e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c2e8:	ed1f 4b61 	vldr	d4, [pc, #-388]	; 800c168 <G_q+0x9e50>
 800c2ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c2f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c2f4:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c2f8:	443b      	add	r3, r7
 800c2fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c2fe:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t3_im + t34_re) + 7.498798913309288E-33;
 800c302:	f241 3310 	movw	r3, #4880	; 0x1310
 800c306:	443b      	add	r3, r7
 800c308:	ed93 6b00 	vldr	d6, [r3]
 800c30c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c310:	443b      	add	r3, r7
 800c312:	ed93 7b00 	vldr	d7, [r3]
 800c316:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c31a:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 800c158 <G_q+0x9e40>
 800c31e:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c322:	f241 3310 	movw	r3, #4880	; 0x1310
 800c326:	443b      	add	r3, r7
 800c328:	ed83 7b00 	vstr	d7, [r3]
  t72_re += t34_im;
 800c32c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c330:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c334:	ed92 6b00 	vldr	d6, [r2]
 800c338:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c33c:	443a      	add	r2, r7
 800c33e:	ed92 7b00 	vldr	d7, [r2]
 800c342:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c346:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t120.re * 3.061616997868383E-17 + t121.re * 3.061616997868383E-17;
 800c34a:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c34e:	ed93 7b00 	vldr	d7, [r3]
 800c352:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 800c160 <G_q+0x9e48>
 800c356:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c35a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c35e:	ed93 7b00 	vldr	d7, [r3]
 800c362:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 800c160 <G_q+0x9e48>
 800c366:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c36a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c36e:	f241 3378 	movw	r3, #4984	; 0x1378
 800c372:	443b      	add	r3, r7
 800c374:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t120.im * 3.061616997868383E-17 + t121.im * 3.061616997868383E-17;
 800c378:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c37c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c380:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 800c160 <G_q+0x9e48>
 800c384:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c388:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c38c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c390:	ed1f 5b8d 	vldr	d5, [pc, #-564]	; 800c160 <G_q+0x9e48>
 800c394:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c398:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c39c:	443b      	add	r3, r7
 800c39e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c3a2:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t118.re * 0.0 - t118.im * 0.5) - (t119.re * 0.0 - t119.im * 0.5);
 800c3a6:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c3aa:	ed93 7b00 	vldr	d7, [r3]
 800c3ae:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 800c168 <G_q+0x9e50>
 800c3b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c3b6:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c3ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c3c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c3c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c3ca:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c3ce:	ed93 7b00 	vldr	d7, [r3]
 800c3d2:	ed1f 5b9b 	vldr	d5, [pc, #-620]	; 800c168 <G_q+0x9e50>
 800c3d6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c3da:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c3de:	ed93 7b02 	vldr	d7, [r3, #8]
 800c3e2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c3e6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c3ea:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c3ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c3f2:	f241 3370 	movw	r3, #4976	; 0x1370
 800c3f6:	443b      	add	r3, r7
 800c3f8:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t118.re * 0.5 + t118.im * 0.0) - (t119.re * 0.5 + t119.im * 0.0);
 800c3fc:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c400:	ed93 7b00 	vldr	d7, [r3]
 800c404:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c408:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c40c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c410:	ed93 7b02 	vldr	d7, [r3, #8]
 800c414:	ed1f 5bac 	vldr	d5, [pc, #-688]	; 800c168 <G_q+0x9e50>
 800c418:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c41c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c420:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c424:	ed93 7b00 	vldr	d7, [r3]
 800c428:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c42c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c430:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c434:	ed93 7b02 	vldr	d7, [r3, #8]
 800c438:	ed1f 4bb5 	vldr	d4, [pc, #-724]	; 800c168 <G_q+0x9e50>
 800c43c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c440:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c444:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c448:	f241 3368 	movw	r3, #4968	; 0x1368
 800c44c:	443b      	add	r3, r7
 800c44e:	ed83 7b00 	vstr	d7, [r3]
  if (t116.im == 0.0) {
 800c452:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c456:	ed93 7b02 	vldr	d7, [r3, #8]
 800c45a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c462:	d115      	bne.n	800c490 <G_q+0xa178>
    t16_im = t116.re / 2.0;
 800c464:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c468:	ed93 6b00 	vldr	d6, [r3]
 800c46c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c470:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c474:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c478:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800c47c:	f04f 0300 	mov.w	r3, #0
 800c480:	f04f 0400 	mov.w	r4, #0
 800c484:	f241 3248 	movw	r2, #4936	; 0x1348
 800c488:	443a      	add	r2, r7
 800c48a:	e9c2 3400 	strd	r3, r4, [r2]
 800c48e:	e037      	b.n	800c500 <G_q+0xa1e8>
  } else if (t116.re == 0.0) {
 800c490:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c494:	ed93 7b00 	vldr	d7, [r3]
 800c498:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a0:	d115      	bne.n	800c4ce <G_q+0xa1b6>
    t16_im = 0.0;
 800c4a2:	f04f 0300 	mov.w	r3, #0
 800c4a6:	f04f 0400 	mov.w	r4, #0
 800c4aa:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800c4ae:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t116.im / 2.0;
 800c4b2:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c4b6:	ed93 6b02 	vldr	d6, [r3, #8]
 800c4ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4c2:	f241 3348 	movw	r3, #4936	; 0x1348
 800c4c6:	443b      	add	r3, r7
 800c4c8:	ed83 7b00 	vstr	d7, [r3]
 800c4cc:	e018      	b.n	800c500 <G_q+0xa1e8>
  } else {
    t16_im = t116.re / 2.0;
 800c4ce:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c4d2:	ed93 6b00 	vldr	d6, [r3]
 800c4d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4de:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c4e2:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t116.im / 2.0;
 800c4e6:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c4ea:	ed93 6b02 	vldr	d6, [r3, #8]
 800c4ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4f6:	f241 3348 	movw	r3, #4936	; 0x1348
 800c4fa:	443b      	add	r3, r7
 800c4fc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t117.im == 0.0) {
 800c500:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c504:	ed93 7b02 	vldr	d7, [r3, #8]
 800c508:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c50c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c510:	d116      	bne.n	800c540 <G_q+0xa228>
    t34_re = t117.re / 2.0;
 800c512:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c516:	ed93 6b00 	vldr	d6, [r3]
 800c51a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c51e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c522:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c526:	443b      	add	r3, r7
 800c528:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c52c:	f04f 0300 	mov.w	r3, #0
 800c530:	f04f 0400 	mov.w	r4, #0
 800c534:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c538:	443a      	add	r2, r7
 800c53a:	e9c2 3400 	strd	r3, r4, [r2]
 800c53e:	e039      	b.n	800c5b4 <G_q+0xa29c>
  } else if (t117.re == 0.0) {
 800c540:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c544:	ed93 7b00 	vldr	d7, [r3]
 800c548:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c550:	d116      	bne.n	800c580 <G_q+0xa268>
    t34_re = 0.0;
 800c552:	f04f 0300 	mov.w	r3, #0
 800c556:	f04f 0400 	mov.w	r4, #0
 800c55a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c55e:	443a      	add	r2, r7
 800c560:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t117.im / 2.0;
 800c564:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c568:	ed93 6b02 	vldr	d6, [r3, #8]
 800c56c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c570:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c574:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c578:	443b      	add	r3, r7
 800c57a:	ed83 7b00 	vstr	d7, [r3]
 800c57e:	e019      	b.n	800c5b4 <G_q+0xa29c>
  } else {
    t34_re = t117.re / 2.0;
 800c580:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c584:	ed93 6b00 	vldr	d6, [r3]
 800c588:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c58c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c590:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c594:	443b      	add	r3, r7
 800c596:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t117.im / 2.0;
 800c59a:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c59e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c5a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c5a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c5aa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c5ae:	443b      	add	r3, r7
 800c5b0:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c5b4:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c5b8:	ed93 7b00 	vldr	d7, [r3]
 800c5bc:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800c7f0 <G_q+0xa4d8>
 800c5c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c5c4:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c5c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c5cc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800c7f8 <G_q+0xa4e0>
 800c5d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c5d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c5d8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c5dc:	ed93 7b00 	vldr	d7, [r3]
 800c5e0:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800c7f0 <G_q+0xa4d8>
 800c5e4:	ee27 5b05 	vmul.f64	d5, d7, d5
    t115.im * 3.061616997868383E-17);
 800c5e8:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c5ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800c5f0:	ed9f 4b81 	vldr	d4, [pc, #516]	; 800c7f8 <G_q+0xa4e0>
 800c5f4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c5f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c5fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c600:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c604:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c608:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c60c:	ed93 7b00 	vldr	d7, [r3]
 800c610:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800c7f8 <G_q+0xa4e0>
 800c614:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c618:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c61c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c620:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800c7f0 <G_q+0xa4d8>
 800c624:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c628:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c62c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c630:	ed93 7b00 	vldr	d7, [r3]
 800c634:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800c7f8 <G_q+0xa4e0>
 800c638:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t115.im * 0.0);
 800c63c:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c640:	ed93 7b02 	vldr	d7, [r3, #8]
 800c644:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 800c7f0 <G_q+0xa4d8>
 800c648:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c64c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c650:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c654:	f241 3388 	movw	r3, #5000	; 0x1388
 800c658:	443b      	add	r3, r7
 800c65a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800c65e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c662:	ed93 6b00 	vldr	d6, [r3]
 800c666:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c66a:	443b      	add	r3, r7
 800c66c:	ed93 7b00 	vldr	d7, [r3]
 800c670:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c674:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800c800 <G_q+0xa4e8>
 800c678:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c67c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c680:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800c684:	f241 3348 	movw	r3, #4936	; 0x1348
 800c688:	443b      	add	r3, r7
 800c68a:	ed93 6b00 	vldr	d6, [r3]
 800c68e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c692:	443b      	add	r3, r7
 800c694:	ed93 7b00 	vldr	d7, [r3]
 800c698:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c69c:	f241 3348 	movw	r3, #4936	; 0x1348
 800c6a0:	443b      	add	r3, r7
 800c6a2:	ed83 7b00 	vstr	d7, [r3]
  if (t122.im == 0.0) {
 800c6a6:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c6aa:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6b6:	d115      	bne.n	800c6e4 <G_q+0xa3cc>
    t23_re = t122.re / 2.0;
 800c6b8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c6bc:	ed93 6b00 	vldr	d6, [r3]
 800c6c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c6c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c6c8:	f241 3330 	movw	r3, #4912	; 0x1330
 800c6cc:	443b      	add	r3, r7
 800c6ce:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800c6d2:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800c6d6:	f04f 0300 	mov.w	r3, #0
 800c6da:	f04f 0400 	mov.w	r4, #0
 800c6de:	e9c2 3400 	strd	r3, r4, [r2]
 800c6e2:	e037      	b.n	800c754 <G_q+0xa43c>
  } else if (t122.re == 0.0) {
 800c6e4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c6e8:	ed93 7b00 	vldr	d7, [r3]
 800c6ec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c6f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6f4:	d115      	bne.n	800c722 <G_q+0xa40a>
    t23_re = 0.0;
 800c6f6:	f04f 0300 	mov.w	r3, #0
 800c6fa:	f04f 0400 	mov.w	r4, #0
 800c6fe:	f241 3230 	movw	r2, #4912	; 0x1330
 800c702:	443a      	add	r2, r7
 800c704:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t122.im / 2.0;
 800c708:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c70c:	ed93 6b02 	vldr	d6, [r3, #8]
 800c710:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c714:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c71c:	ed83 7b00 	vstr	d7, [r3]
 800c720:	e018      	b.n	800c754 <G_q+0xa43c>
  } else {
    t23_re = t122.re / 2.0;
 800c722:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c726:	ed93 6b00 	vldr	d6, [r3]
 800c72a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c72e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c732:	f241 3330 	movw	r3, #4912	; 0x1330
 800c736:	443b      	add	r3, r7
 800c738:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t122.im / 2.0;
 800c73c:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c740:	ed93 6b02 	vldr	d6, [r3, #8]
 800c744:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c748:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c74c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c750:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t123.im == 0.0) {
 800c754:	4b2c      	ldr	r3, [pc, #176]	; (800c808 <G_q+0xa4f0>)
 800c756:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c75a:	443a      	add	r2, r7
 800c75c:	4413      	add	r3, r2
 800c75e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c762:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c76a:	d119      	bne.n	800c7a0 <G_q+0xa488>
    t34_re = t123.re / 2.0;
 800c76c:	4b26      	ldr	r3, [pc, #152]	; (800c808 <G_q+0xa4f0>)
 800c76e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c772:	443a      	add	r2, r7
 800c774:	4413      	add	r3, r2
 800c776:	ed93 6b00 	vldr	d6, [r3]
 800c77a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c77e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c782:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c786:	443b      	add	r3, r7
 800c788:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c78c:	f04f 0300 	mov.w	r3, #0
 800c790:	f04f 0400 	mov.w	r4, #0
 800c794:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c798:	443a      	add	r2, r7
 800c79a:	e9c2 3400 	strd	r3, r4, [r2]
 800c79e:	e055      	b.n	800c84c <G_q+0xa534>
  } else if (t123.re == 0.0) {
 800c7a0:	4b19      	ldr	r3, [pc, #100]	; (800c808 <G_q+0xa4f0>)
 800c7a2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c7a6:	443a      	add	r2, r7
 800c7a8:	4413      	add	r3, r2
 800c7aa:	ed93 7b00 	vldr	d7, [r3]
 800c7ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7b6:	d129      	bne.n	800c80c <G_q+0xa4f4>
    t34_re = 0.0;
 800c7b8:	f04f 0300 	mov.w	r3, #0
 800c7bc:	f04f 0400 	mov.w	r4, #0
 800c7c0:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c7c4:	443a      	add	r2, r7
 800c7c6:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t123.im / 2.0;
 800c7ca:	4b0f      	ldr	r3, [pc, #60]	; (800c808 <G_q+0xa4f0>)
 800c7cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c7d0:	443a      	add	r2, r7
 800c7d2:	4413      	add	r3, r2
 800c7d4:	ed93 6b02 	vldr	d6, [r3, #8]
 800c7d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c7dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7e0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c7e4:	443b      	add	r3, r7
 800c7e6:	ed83 7b00 	vstr	d7, [r3]
 800c7ea:	e02f      	b.n	800c84c <G_q+0xa534>
 800c7ec:	f3af 8000 	nop.w
	...
 800c7f8:	33145c07 	.word	0x33145c07
 800c7fc:	3c81a626 	.word	0x3c81a626
 800c800:	858a5d48 	.word	0x858a5d48
 800c804:	394377ce 	.word	0x394377ce
 800c808:	ffffee30 	.word	0xffffee30
  } else {
    t34_re = t123.re / 2.0;
 800c80c:	4bd0      	ldr	r3, [pc, #832]	; (800cb50 <G_q+0xa838>)
 800c80e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c812:	443a      	add	r2, r7
 800c814:	4413      	add	r3, r2
 800c816:	ed93 6b00 	vldr	d6, [r3]
 800c81a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c81e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c822:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c826:	443b      	add	r3, r7
 800c828:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t123.im / 2.0;
 800c82c:	4bc8      	ldr	r3, [pc, #800]	; (800cb50 <G_q+0xa838>)
 800c82e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800c832:	443a      	add	r2, r7
 800c834:	4413      	add	r3, r2
 800c836:	ed93 6b02 	vldr	d6, [r3, #8]
 800c83a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c83e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c842:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c846:	443b      	add	r3, r7
 800c848:	ed83 7b00 	vstr	d7, [r3]
  }

  t60_re = (t13_re * t13_im - t76_re * t16_re) - (t20_im * t16_im - t12_re *
 800c84c:	f241 3378 	movw	r3, #4984	; 0x1378
 800c850:	443b      	add	r3, r7
 800c852:	ed93 6b00 	vldr	d6, [r3]
 800c856:	f241 3370 	movw	r3, #4976	; 0x1370
 800c85a:	443b      	add	r3, r7
 800c85c:	ed93 7b00 	vldr	d7, [r3]
 800c860:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c864:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c868:	443b      	add	r3, r7
 800c86a:	ed93 5b00 	vldr	d5, [r3]
 800c86e:	f241 3368 	movw	r3, #4968	; 0x1368
 800c872:	443b      	add	r3, r7
 800c874:	ed93 7b00 	vldr	d7, [r3]
 800c878:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c87c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c880:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c884:	ed93 5b00 	vldr	d5, [r3]
 800c888:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c88c:	ed93 7b00 	vldr	d7, [r3]
 800c890:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c894:	f241 3388 	movw	r3, #5000	; 0x1388
 800c898:	443b      	add	r3, r7
 800c89a:	ed93 4b00 	vldr	d4, [r3]
 800c89e:	f241 3348 	movw	r3, #4936	; 0x1348
 800c8a2:	443b      	add	r3, r7
 800c8a4:	ed93 7b00 	vldr	d7, [r3]
 800c8a8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c8ac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c8b0:	f241 2350 	movw	r3, #4688	; 0x1250
 800c8b4:	443b      	add	r3, r7
 800c8b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c8ba:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t76_re = (t13_re * t16_re + t76_re * t13_im) - (t20_im * t20_re + t12_re *
 800c8be:	f241 3378 	movw	r3, #4984	; 0x1378
 800c8c2:	443b      	add	r3, r7
 800c8c4:	ed93 6b00 	vldr	d6, [r3]
 800c8c8:	f241 3368 	movw	r3, #4968	; 0x1368
 800c8cc:	443b      	add	r3, r7
 800c8ce:	ed93 7b00 	vldr	d7, [r3]
 800c8d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c8d6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c8da:	443b      	add	r3, r7
 800c8dc:	ed93 5b00 	vldr	d5, [r3]
 800c8e0:	f241 3370 	movw	r3, #4976	; 0x1370
 800c8e4:	443b      	add	r3, r7
 800c8e6:	ed93 7b00 	vldr	d7, [r3]
 800c8ea:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c8ee:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c8f2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c8f6:	ed93 5b00 	vldr	d5, [r3]
 800c8fa:	f241 3348 	movw	r3, #4936	; 0x1348
 800c8fe:	443b      	add	r3, r7
 800c900:	ed93 7b00 	vldr	d7, [r3]
 800c904:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c908:	f241 3388 	movw	r3, #5000	; 0x1388
 800c90c:	443b      	add	r3, r7
 800c90e:	ed93 4b00 	vldr	d4, [r3]
 800c912:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c916:	ed93 7b00 	vldr	d7, [r3]
 800c91a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c91e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c922:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c926:	443b      	add	r3, r7
 800c928:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c92c:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re += t34_re;
 800c930:	f241 3330 	movw	r3, #4912	; 0x1330
 800c934:	443b      	add	r3, r7
 800c936:	ed93 6b00 	vldr	d6, [r3]
 800c93a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c93e:	443b      	add	r3, r7
 800c940:	ed93 7b00 	vldr	d7, [r3]
 800c944:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c948:	f241 3330 	movw	r3, #4912	; 0x1330
 800c94c:	443b      	add	r3, r7
 800c94e:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800c952:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c956:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800c95a:	ed92 6b00 	vldr	d6, [r2]
 800c95e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c962:	443a      	add	r2, r7
 800c964:	ed92 7b00 	vldr	d7, [r2]
 800c968:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c96c:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t160.re * 0.0 - t160.im * 0.5) - (t161.re * 0.0 - t161.im * 0.5);
 800c970:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800c974:	ed93 7b00 	vldr	d7, [r3]
 800c978:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800cb48 <G_q+0xa830>
 800c97c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c980:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800c984:	ed93 7b02 	vldr	d7, [r3, #8]
 800c988:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c98c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c990:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c994:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800c998:	ed93 7b00 	vldr	d7, [r3]
 800c99c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cb48 <G_q+0xa830>
 800c9a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c9a4:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800c9a8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c9ac:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c9b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c9b4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c9b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c9bc:	f241 3368 	movw	r3, #4968	; 0x1368
 800c9c0:	443b      	add	r3, r7
 800c9c2:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t160.re * 0.5 + t160.im * 0.0) - (t161.re * 0.5 + t161.im * 0.0);
 800c9c6:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800c9ca:	ed93 7b00 	vldr	d7, [r3]
 800c9ce:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c9d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c9d6:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800c9da:	ed93 7b02 	vldr	d7, [r3, #8]
 800c9de:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800cb48 <G_q+0xa830>
 800c9e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c9e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c9ea:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800c9ee:	ed93 7b00 	vldr	d7, [r3]
 800c9f2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c9f6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c9fa:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800c9fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca02:	ed9f 4b51 	vldr	d4, [pc, #324]	; 800cb48 <G_q+0xa830>
 800ca06:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca0a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ca0e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca12:	f241 3318 	movw	r3, #4888	; 0x1318
 800ca16:	443b      	add	r3, r7
 800ca18:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t162.re * 0.0 - t162.im * 0.5) - (t163.re * 0.0 - t163.im * 0.5);
 800ca1c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ca20:	ed93 7b00 	vldr	d7, [r3]
 800ca24:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800cb48 <G_q+0xa830>
 800ca28:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ca2c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ca30:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca34:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ca38:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca3c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca40:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ca44:	ed93 7b00 	vldr	d7, [r3]
 800ca48:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 800cb48 <G_q+0xa830>
 800ca4c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ca50:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ca54:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca58:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ca5c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ca60:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ca64:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ca68:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ca6c:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t162.re * 0.5 + t162.im * 0.0) - (t163.re * 0.5 + t163.im * 0.0);
 800ca70:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ca74:	ed93 7b00 	vldr	d7, [r3]
 800ca78:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ca7c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ca80:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ca84:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca88:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800cb48 <G_q+0xa830>
 800ca8c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ca90:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ca94:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ca98:	ed93 7b00 	vldr	d7, [r3]
 800ca9c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800caa0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800caa4:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800caa8:	ed93 7b02 	vldr	d7, [r3, #8]
 800caac:	ed9f 4b26 	vldr	d4, [pc, #152]	; 800cb48 <G_q+0xa830>
 800cab0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cab4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cab8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cabc:	f241 3348 	movw	r3, #4936	; 0x1348
 800cac0:	443b      	add	r3, r7
 800cac2:	ed83 7b00 	vstr	d7, [r3]
  if (t164.im == 0.0) {
 800cac6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800caca:	ed93 7b02 	vldr	d7, [r3, #8]
 800cace:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad6:	d115      	bne.n	800cb04 <G_q+0xa7ec>
    t20_im = t164.re / 2.0;
 800cad8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cadc:	ed93 6b00 	vldr	d6, [r3]
 800cae0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cae4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cae8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800caec:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800caf0:	f04f 0300 	mov.w	r3, #0
 800caf4:	f04f 0400 	mov.w	r4, #0
 800caf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cafc:	443a      	add	r2, r7
 800cafe:	e9c2 3400 	strd	r3, r4, [r2]
 800cb02:	e040      	b.n	800cb86 <G_q+0xa86e>
  } else if (t164.re == 0.0) {
 800cb04:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cb08:	ed93 7b00 	vldr	d7, [r3]
 800cb0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb14:	d11e      	bne.n	800cb54 <G_q+0xa83c>
    t20_im = 0.0;
 800cb16:	f04f 0300 	mov.w	r3, #0
 800cb1a:	f04f 0400 	mov.w	r4, #0
 800cb1e:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800cb22:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t164.im / 2.0;
 800cb26:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cb2a:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb2e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb36:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb3a:	443b      	add	r3, r7
 800cb3c:	ed83 7b00 	vstr	d7, [r3]
 800cb40:	e021      	b.n	800cb86 <G_q+0xa86e>
 800cb42:	bf00      	nop
 800cb44:	f3af 8000 	nop.w
	...
 800cb50:	ffffee30 	.word	0xffffee30
  } else {
    t20_im = t164.re / 2.0;
 800cb54:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cb58:	ed93 6b00 	vldr	d6, [r3]
 800cb5c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb60:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb64:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cb68:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t164.im / 2.0;
 800cb6c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cb70:	ed93 6b02 	vldr	d6, [r3, #8]
 800cb74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cb78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cb7c:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb80:	443b      	add	r3, r7
 800cb82:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t165.im == 0.0) {
 800cb86:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cb8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800cb8e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cb92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cb96:	d116      	bne.n	800cbc6 <G_q+0xa8ae>
    t34_re = t165.re / 2.0;
 800cb98:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cb9c:	ed93 6b00 	vldr	d6, [r3]
 800cba0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cba4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cba8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cbac:	443b      	add	r3, r7
 800cbae:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800cbb2:	f04f 0300 	mov.w	r3, #0
 800cbb6:	f04f 0400 	mov.w	r4, #0
 800cbba:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cbbe:	443a      	add	r2, r7
 800cbc0:	e9c2 3400 	strd	r3, r4, [r2]
 800cbc4:	e039      	b.n	800cc3a <G_q+0xa922>
  } else if (t165.re == 0.0) {
 800cbc6:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cbca:	ed93 7b00 	vldr	d7, [r3]
 800cbce:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cbd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd6:	d116      	bne.n	800cc06 <G_q+0xa8ee>
    t34_re = 0.0;
 800cbd8:	f04f 0300 	mov.w	r3, #0
 800cbdc:	f04f 0400 	mov.w	r4, #0
 800cbe0:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800cbe4:	443a      	add	r2, r7
 800cbe6:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t165.im / 2.0;
 800cbea:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cbee:	ed93 6b02 	vldr	d6, [r3, #8]
 800cbf2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cbf6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cbfa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cbfe:	443b      	add	r3, r7
 800cc00:	ed83 7b00 	vstr	d7, [r3]
 800cc04:	e019      	b.n	800cc3a <G_q+0xa922>
  } else {
    t34_re = t165.re / 2.0;
 800cc06:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cc0a:	ed93 6b00 	vldr	d6, [r3]
 800cc0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc16:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cc1a:	443b      	add	r3, r7
 800cc1c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t165.im / 2.0;
 800cc20:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800cc24:	ed93 6b02 	vldr	d6, [r3, #8]
 800cc28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc30:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cc34:	443b      	add	r3, r7
 800cc36:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t166.im == 0.0) {
 800cc3a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cc3e:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc4a:	d115      	bne.n	800cc78 <G_q+0xa960>
    t12_im = t166.re / 2.0;
 800cc4c:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cc50:	ed93 6b00 	vldr	d6, [r3]
 800cc54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cc58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cc5c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cc60:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800cc64:	f04f 0300 	mov.w	r3, #0
 800cc68:	f04f 0400 	mov.w	r4, #0
 800cc6c:	f241 3238 	movw	r2, #4920	; 0x1338
 800cc70:	443a      	add	r2, r7
 800cc72:	e9c2 3400 	strd	r3, r4, [r2]
 800cc76:	e037      	b.n	800cce8 <G_q+0xa9d0>
  } else if (t166.re == 0.0) {
 800cc78:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cc7c:	ed93 7b00 	vldr	d7, [r3]
 800cc80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cc84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc88:	d115      	bne.n	800ccb6 <G_q+0xa99e>
    t12_im = 0.0;
 800cc8a:	f04f 0300 	mov.w	r3, #0
 800cc8e:	f04f 0400 	mov.w	r4, #0
 800cc92:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800cc96:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t166.im / 2.0;
 800cc9a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cc9e:	ed93 6b02 	vldr	d6, [r3, #8]
 800cca2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cca6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ccaa:	f241 3338 	movw	r3, #4920	; 0x1338
 800ccae:	443b      	add	r3, r7
 800ccb0:	ed83 7b00 	vstr	d7, [r3]
 800ccb4:	e018      	b.n	800cce8 <G_q+0xa9d0>
  } else {
    t12_im = t166.re / 2.0;
 800ccb6:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800ccba:	ed93 6b00 	vldr	d6, [r3]
 800ccbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ccc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ccc6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ccca:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t166.im / 2.0;
 800ccce:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800ccd2:	ed93 6b02 	vldr	d6, [r3, #8]
 800ccd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ccda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ccde:	f241 3338 	movw	r3, #4920	; 0x1338
 800cce2:	443b      	add	r3, r7
 800cce4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t167.im == 0.0) {
 800cce8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ccec:	ed93 7b02 	vldr	d7, [r3, #8]
 800ccf0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf8:	d116      	bne.n	800cd28 <G_q+0xaa10>
    t13_re = t167.re / 2.0;
 800ccfa:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800ccfe:	ed93 6b00 	vldr	d6, [r3]
 800cd02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd0a:	f241 3378 	movw	r3, #4984	; 0x1378
 800cd0e:	443b      	add	r3, r7
 800cd10:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800cd14:	f04f 0300 	mov.w	r3, #0
 800cd18:	f04f 0400 	mov.w	r4, #0
 800cd1c:	f241 3270 	movw	r2, #4976	; 0x1370
 800cd20:	443a      	add	r2, r7
 800cd22:	e9c2 3400 	strd	r3, r4, [r2]
 800cd26:	e039      	b.n	800cd9c <G_q+0xaa84>
  } else if (t167.re == 0.0) {
 800cd28:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cd2c:	ed93 7b00 	vldr	d7, [r3]
 800cd30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd38:	d116      	bne.n	800cd68 <G_q+0xaa50>
    t13_re = 0.0;
 800cd3a:	f04f 0300 	mov.w	r3, #0
 800cd3e:	f04f 0400 	mov.w	r4, #0
 800cd42:	f241 3278 	movw	r2, #4984	; 0x1378
 800cd46:	443a      	add	r2, r7
 800cd48:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t167.im / 2.0;
 800cd4c:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cd50:	ed93 6b02 	vldr	d6, [r3, #8]
 800cd54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd5c:	f241 3370 	movw	r3, #4976	; 0x1370
 800cd60:	443b      	add	r3, r7
 800cd62:	ed83 7b00 	vstr	d7, [r3]
 800cd66:	e019      	b.n	800cd9c <G_q+0xaa84>
  } else {
    t13_re = t167.re / 2.0;
 800cd68:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cd6c:	ed93 6b00 	vldr	d6, [r3]
 800cd70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd78:	f241 3378 	movw	r3, #4984	; 0x1378
 800cd7c:	443b      	add	r3, r7
 800cd7e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t167.im / 2.0;
 800cd82:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cd86:	ed93 6b02 	vldr	d6, [r3, #8]
 800cd8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd92:	f241 3370 	movw	r3, #4976	; 0x1370
 800cd96:	443b      	add	r3, r7
 800cd98:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800cd9c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cda0:	ed93 6b00 	vldr	d6, [r3]
 800cda4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cda8:	443b      	add	r3, r7
 800cdaa:	ed93 7b00 	vldr	d7, [r3]
 800cdae:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cdb2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cdb6:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800cdba:	f241 3388 	movw	r3, #5000	; 0x1388
 800cdbe:	443b      	add	r3, r7
 800cdc0:	ed93 6b00 	vldr	d6, [r3]
 800cdc4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cdc8:	443b      	add	r3, r7
 800cdca:	ed93 7b00 	vldr	d7, [r3]
 800cdce:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cdd2:	f241 3388 	movw	r3, #5000	; 0x1388
 800cdd6:	443b      	add	r3, r7
 800cdd8:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800cddc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cde0:	ed93 6b00 	vldr	d6, [r3]
 800cde4:	f241 3378 	movw	r3, #4984	; 0x1378
 800cde8:	443b      	add	r3, r7
 800cdea:	ed93 7b00 	vldr	d7, [r3]
 800cdee:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cdf2:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800d180 <G_q+0xae68>
 800cdf6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800cdfa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cdfe:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800ce02:	f241 3338 	movw	r3, #4920	; 0x1338
 800ce06:	443b      	add	r3, r7
 800ce08:	ed93 6b00 	vldr	d6, [r3]
 800ce0c:	f241 3370 	movw	r3, #4976	; 0x1370
 800ce10:	443b      	add	r3, r7
 800ce12:	ed93 7b00 	vldr	d7, [r3]
 800ce16:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ce1a:	f241 3338 	movw	r3, #4920	; 0x1338
 800ce1e:	443b      	add	r3, r7
 800ce20:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t16_re * t16_im - t85_im * t20_re) + (t20_im * t12_im - t12_re *
 800ce24:	f241 3368 	movw	r3, #4968	; 0x1368
 800ce28:	443b      	add	r3, r7
 800ce2a:	ed93 6b00 	vldr	d6, [r3]
 800ce2e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ce32:	ed93 7b00 	vldr	d7, [r3]
 800ce36:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ce3a:	f241 3318 	movw	r3, #4888	; 0x1318
 800ce3e:	443b      	add	r3, r7
 800ce40:	ed93 5b00 	vldr	d5, [r3]
 800ce44:	f241 3348 	movw	r3, #4936	; 0x1348
 800ce48:	443b      	add	r3, r7
 800ce4a:	ed93 7b00 	vldr	d7, [r3]
 800ce4e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ce52:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ce56:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ce5a:	ed93 5b00 	vldr	d5, [r3]
 800ce5e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ce62:	ed93 7b00 	vldr	d7, [r3]
 800ce66:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ce6a:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce6e:	443b      	add	r3, r7
 800ce70:	ed93 4b00 	vldr	d4, [r3]
 800ce74:	f241 3338 	movw	r3, #4920	; 0x1338
 800ce78:	443b      	add	r3, r7
 800ce7a:	ed93 7b00 	vldr	d7, [r3]
 800ce7e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ce82:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ce86:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ce8a:	f241 3378 	movw	r3, #4984	; 0x1378
 800ce8e:	443b      	add	r3, r7
 800ce90:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t85_im = (t16_re * t20_re + t85_im * t16_im) + (t20_im * b_t10_re + t12_re *
 800ce94:	f241 3368 	movw	r3, #4968	; 0x1368
 800ce98:	443b      	add	r3, r7
 800ce9a:	ed93 6b00 	vldr	d6, [r3]
 800ce9e:	f241 3348 	movw	r3, #4936	; 0x1348
 800cea2:	443b      	add	r3, r7
 800cea4:	ed93 7b00 	vldr	d7, [r3]
 800cea8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ceac:	f241 3318 	movw	r3, #4888	; 0x1318
 800ceb0:	443b      	add	r3, r7
 800ceb2:	ed93 5b00 	vldr	d5, [r3]
 800ceb6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ceba:	ed93 7b00 	vldr	d7, [r3]
 800cebe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cec2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cec6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ceca:	ed93 5b00 	vldr	d5, [r3]
 800cece:	f241 3338 	movw	r3, #4920	; 0x1338
 800ced2:	443b      	add	r3, r7
 800ced4:	ed93 7b00 	vldr	d7, [r3]
 800ced8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cedc:	f241 3388 	movw	r3, #5000	; 0x1388
 800cee0:	443b      	add	r3, r7
 800cee2:	ed93 4b00 	vldr	d4, [r3]
 800cee6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ceea:	ed93 7b00 	vldr	d7, [r3]
 800ceee:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cef2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cef6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cefa:	f241 3318 	movw	r3, #4888	; 0x1318
 800cefe:	443b      	add	r3, r7
 800cf00:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t34_re = (t158.re * 0.0 - t158.im * 0.5) - (t159.re * 0.0 - t159.im * 0.5);
 800cf04:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800cf08:	ed93 7b00 	vldr	d7, [r3]
 800cf0c:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800d188 <G_q+0xae70>
 800cf10:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cf14:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800cf18:	ed93 7b02 	vldr	d7, [r3, #8]
 800cf1c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cf20:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cf24:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cf28:	4b9f      	ldr	r3, [pc, #636]	; (800d1a8 <G_q+0xae90>)
 800cf2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cf2e:	443a      	add	r2, r7
 800cf30:	4413      	add	r3, r2
 800cf32:	ed93 7b00 	vldr	d7, [r3]
 800cf36:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d188 <G_q+0xae70>
 800cf3a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cf3e:	4b9a      	ldr	r3, [pc, #616]	; (800d1a8 <G_q+0xae90>)
 800cf40:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cf44:	443a      	add	r2, r7
 800cf46:	4413      	add	r3, r2
 800cf48:	ed93 7b02 	vldr	d7, [r3, #8]
 800cf4c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cf50:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cf54:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cf58:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cf5c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cf60:	443b      	add	r3, r7
 800cf62:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t158.re * 0.5 + t158.im * 0.0) - (t159.re * 0.5 + t159.im * 0.0);
 800cf66:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800cf6a:	ed93 7b00 	vldr	d7, [r3]
 800cf6e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cf72:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cf76:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800cf7a:	ed93 7b02 	vldr	d7, [r3, #8]
 800cf7e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 800d188 <G_q+0xae70>
 800cf82:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cf86:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cf8a:	4b87      	ldr	r3, [pc, #540]	; (800d1a8 <G_q+0xae90>)
 800cf8c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cf90:	443a      	add	r2, r7
 800cf92:	4413      	add	r3, r2
 800cf94:	ed93 7b00 	vldr	d7, [r3]
 800cf98:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cf9c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cfa0:	4b81      	ldr	r3, [pc, #516]	; (800d1a8 <G_q+0xae90>)
 800cfa2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cfa6:	443a      	add	r2, r7
 800cfa8:	4413      	add	r3, r2
 800cfaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800cfae:	ed9f 4b76 	vldr	d4, [pc, #472]	; 800d188 <G_q+0xae70>
 800cfb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cfb6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cfba:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cfbe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cfc2:	443b      	add	r3, r7
 800cfc4:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800cfc8:	4b78      	ldr	r3, [pc, #480]	; (800d1ac <G_q+0xae94>)
 800cfca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cfce:	443a      	add	r2, r7
 800cfd0:	4413      	add	r3, r2
 800cfd2:	ed93 7b00 	vldr	d7, [r3]
 800cfd6:	eeb1 6b47 	vneg.f64	d6, d7
 800cfda:	f241 2370 	movw	r3, #4720	; 0x1270
 800cfde:	443b      	add	r3, r7
 800cfe0:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800cfe4:	ed92 5b00 	vldr	d5, [r2]
 800cfe8:	ed93 7b00 	vldr	d7, [r3]
 800cfec:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cff0:	f241 2368 	movw	r3, #4712	; 0x1268
 800cff4:	443b      	add	r3, r7
 800cff6:	f241 3228 	movw	r2, #4904	; 0x1328
 800cffa:	443a      	add	r2, r7
 800cffc:	ed92 4b00 	vldr	d4, [r2]
 800d000:	ed93 7b00 	vldr	d7, [r3]
 800d004:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d008:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d00c:	ed9f 5b60 	vldr	d5, [pc, #384]	; 800d190 <G_q+0xae78>
 800d010:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d014:	f241 2358 	movw	r3, #4696	; 0x1258
 800d018:	443b      	add	r3, r7
 800d01a:	ed93 4b00 	vldr	d4, [r3]
 800d01e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d022:	ed93 7b00 	vldr	d7, [r3]
 800d026:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d02a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d02e:	f241 3208 	movw	r2, #4872	; 0x1308
 800d032:	443a      	add	r2, r7
 800d034:	ed92 3b00 	vldr	d3, [r2]
 800d038:	ed93 7b00 	vldr	d7, [r3]
 800d03c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d040:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d044:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800d198 <G_q+0xae80>
 800d048:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d04c:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d050:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d054:	443b      	add	r3, r7
 800d056:	ed93 4b00 	vldr	d4, [r3]
 800d05a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d05e:	443b      	add	r3, r7
 800d060:	ed93 7b00 	vldr	d7, [r3]
 800d064:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d068:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d06c:	443b      	add	r3, r7
 800d06e:	ed93 3b00 	vldr	d3, [r3]
 800d072:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d076:	443b      	add	r3, r7
 800d078:	ed93 7b00 	vldr	d7, [r3]
 800d07c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d080:	ee34 7b47 	vsub.f64	d7, d4, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d084:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800d198 <G_q+0xae80>
 800d088:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d08c:	ee35 5b07 	vadd.f64	d5, d5, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d090:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800d094:	443b      	add	r3, r7
 800d096:	ed93 4b00 	vldr	d4, [r3]
 800d09a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d09e:	443b      	add	r3, r7
 800d0a0:	ed93 7b00 	vldr	d7, [r3]
 800d0a4:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d0a8:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800d0ac:	443a      	add	r2, r7
 800d0ae:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d0b2:	ed92 3b00 	vldr	d3, [r2]
 800d0b6:	ed93 7b00 	vldr	d7, [r3]
 800d0ba:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d0be:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d0c2:	ed9f 4b33 	vldr	d4, [pc, #204]	; 800d190 <G_q+0xae78>
 800d0c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d0ca:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d0ce:	f241 2350 	movw	r3, #4688	; 0x1250
 800d0d2:	443b      	add	r3, r7
 800d0d4:	ed93 4b00 	vldr	d4, [r3]
 800d0d8:	f241 3330 	movw	r3, #4912	; 0x1330
 800d0dc:	443b      	add	r3, r7
 800d0de:	ed93 7b00 	vldr	d7, [r3]
 800d0e2:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d0e6:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800d0ea:	443a      	add	r2, r7
 800d0ec:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d0f0:	ed92 3b00 	vldr	d3, [r2]
 800d0f4:	ed93 7b00 	vldr	d7, [r3]
 800d0f8:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d0fc:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d100:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800d1a0 <G_q+0xae88>
 800d104:	ee27 7b04 	vmul.f64	d7, d7, d4
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d108:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d10c:	f241 3378 	movw	r3, #4984	; 0x1378
 800d110:	443b      	add	r3, r7
 800d112:	ed93 4b00 	vldr	d4, [r3]
 800d116:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d11a:	443b      	add	r3, r7
 800d11c:	ed93 7b00 	vldr	d7, [r3]
 800d120:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d124:	f241 3318 	movw	r3, #4888	; 0x1318
 800d128:	443b      	add	r3, r7
 800d12a:	ed93 3b00 	vldr	d3, [r3]
 800d12e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d132:	443b      	add	r3, r7
 800d134:	ed93 7b00 	vldr	d7, [r3]
 800d138:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d13c:	ee34 7b47 	vsub.f64	d7, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d140:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800d1a0 <G_q+0xae88>
 800d144:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d148:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d14c:	4b18      	ldr	r3, [pc, #96]	; (800d1b0 <G_q+0xae98>)
 800d14e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d152:	443a      	add	r2, r7
 800d154:	4413      	add	r3, r2
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3320      	adds	r3, #32
 800d15a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d15e:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d162:	4b12      	ldr	r3, [pc, #72]	; (800d1ac <G_q+0xae94>)
 800d164:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d168:	443a      	add	r2, r7
 800d16a:	4413      	add	r3, r2
 800d16c:	ed93 7b00 	vldr	d7, [r3]
 800d170:	eeb1 6b47 	vneg.f64	d6, d7
 800d174:	f241 2368 	movw	r3, #4712	; 0x1268
 800d178:	443b      	add	r3, r7
 800d17a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d17e:	e019      	b.n	800d1b4 <G_q+0xae9c>
 800d180:	858a5d48 	.word	0x858a5d48
 800d184:	394377ce 	.word	0x394377ce
	...
 800d190:	75f6fd22 	.word	0x75f6fd22
 800d194:	3fc19ce0 	.word	0x3fc19ce0
 800d198:	9374bc6a 	.word	0x9374bc6a
 800d19c:	3f960418 	.word	0x3f960418
 800d1a0:	2ba953a1 	.word	0x2ba953a1
 800d1a4:	3c3848f9 	.word	0x3c3848f9
 800d1a8:	ffffee90 	.word	0xffffee90
 800d1ac:	ffffec58 	.word	0xffffec58
 800d1b0:	ffffec34 	.word	0xffffec34
 800d1b4:	ed92 5b00 	vldr	d5, [r2]
 800d1b8:	ed93 7b00 	vldr	d7, [r3]
 800d1bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d1c0:	f241 2370 	movw	r3, #4720	; 0x1270
 800d1c4:	443b      	add	r3, r7
 800d1c6:	f241 3228 	movw	r2, #4904	; 0x1328
 800d1ca:	443a      	add	r2, r7
 800d1cc:	ed92 4b00 	vldr	d4, [r2]
 800d1d0:	ed93 7b00 	vldr	d7, [r3]
 800d1d4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d1d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d1dc:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800d478 <G_q+0xb160>
 800d1e0:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d1e4:	f241 2258 	movw	r2, #4696	; 0x1258
 800d1e8:	443a      	add	r2, r7
 800d1ea:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d1ee:	ed92 4b00 	vldr	d4, [r2]
 800d1f2:	ed93 7b00 	vldr	d7, [r3]
 800d1f6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d1fa:	f241 3308 	movw	r3, #4872	; 0x1308
 800d1fe:	443b      	add	r3, r7
 800d200:	ed93 3b00 	vldr	d3, [r3]
 800d204:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d208:	ed93 7b00 	vldr	d7, [r3]
 800d20c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d210:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d214:	ed9f 4b9a 	vldr	d4, [pc, #616]	; 800d480 <G_q+0xb168>
 800d218:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d21c:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d220:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d224:	443b      	add	r3, r7
 800d226:	ed93 4b00 	vldr	d4, [r3]
 800d22a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d22e:	443b      	add	r3, r7
 800d230:	ed93 7b00 	vldr	d7, [r3]
 800d234:	ee24 4b07 	vmul.f64	d4, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d238:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d23c:	443b      	add	r3, r7
 800d23e:	ed93 3b00 	vldr	d3, [r3]
 800d242:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d246:	443b      	add	r3, r7
 800d248:	ed93 7b00 	vldr	d7, [r3]
 800d24c:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d250:	ee34 7b07 	vadd.f64	d7, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d254:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 800d480 <G_q+0xb168>
 800d258:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d25c:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d260:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800d264:	443a      	add	r2, r7
 800d266:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d26a:	ed92 4b00 	vldr	d4, [r2]
 800d26e:	ed93 7b00 	vldr	d7, [r3]
 800d272:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d276:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800d27a:	443b      	add	r3, r7
 800d27c:	ed93 3b00 	vldr	d3, [r3]
 800d280:	f241 3310 	movw	r3, #4880	; 0x1310
 800d284:	443b      	add	r3, r7
 800d286:	ed93 7b00 	vldr	d7, [r3]
 800d28a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d28e:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d292:	ed9f 4b79 	vldr	d4, [pc, #484]	; 800d478 <G_q+0xb160>
 800d296:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d29a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d29e:	f241 2250 	movw	r2, #4688	; 0x1250
 800d2a2:	443a      	add	r2, r7
 800d2a4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d2a8:	ed92 4b00 	vldr	d4, [r2]
 800d2ac:	ed93 7b00 	vldr	d7, [r3]
 800d2b0:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d2b4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800d2b8:	443b      	add	r3, r7
 800d2ba:	ed93 3b00 	vldr	d3, [r3]
 800d2be:	f241 3330 	movw	r3, #4912	; 0x1330
 800d2c2:	443b      	add	r3, r7
 800d2c4:	ed93 7b00 	vldr	d7, [r3]
 800d2c8:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d2cc:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d2d0:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800d488 <G_q+0xb170>
 800d2d4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d2d8:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d2dc:	f241 3378 	movw	r3, #4984	; 0x1378
 800d2e0:	443b      	add	r3, r7
 800d2e2:	ed93 4b00 	vldr	d4, [r3]
 800d2e6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d2ea:	443b      	add	r3, r7
 800d2ec:	ed93 7b00 	vldr	d7, [r3]
 800d2f0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d2f4:	f241 3318 	movw	r3, #4888	; 0x1318
 800d2f8:	443b      	add	r3, r7
 800d2fa:	ed93 3b00 	vldr	d3, [r3]
 800d2fe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d302:	443b      	add	r3, r7
 800d304:	ed93 7b00 	vldr	d7, [r3]
 800d308:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d30c:	ee34 7b07 	vadd.f64	d7, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d310:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800d488 <G_q+0xb170>
 800d314:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d318:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d31c:	4b5c      	ldr	r3, [pc, #368]	; (800d490 <G_q+0xb178>)
 800d31e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d322:	443a      	add	r2, r7
 800d324:	4413      	add	r3, r2
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3320      	adds	r3, #32
 800d32a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d32e:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t172.im == 0.0) {
 800d332:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d336:	ed93 7b02 	vldr	d7, [r3, #8]
 800d33a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d342:	d115      	bne.n	800d370 <G_q+0xb058>
    t85_im = t172.re / 2.0;
 800d344:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d348:	ed93 6b00 	vldr	d6, [r3]
 800d34c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d350:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d354:	f241 3318 	movw	r3, #4888	; 0x1318
 800d358:	443b      	add	r3, r7
 800d35a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 800d35e:	f04f 0300 	mov.w	r3, #0
 800d362:	f04f 0400 	mov.w	r4, #0
 800d366:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800d36a:	e9c2 3400 	strd	r3, r4, [r2]
 800d36e:	e037      	b.n	800d3e0 <G_q+0xb0c8>
  } else if (t172.re == 0.0) {
 800d370:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d374:	ed93 7b00 	vldr	d7, [r3]
 800d378:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d37c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d380:	d115      	bne.n	800d3ae <G_q+0xb096>
    t85_im = 0.0;
 800d382:	f04f 0300 	mov.w	r3, #0
 800d386:	f04f 0400 	mov.w	r4, #0
 800d38a:	f241 3218 	movw	r2, #4888	; 0x1318
 800d38e:	443a      	add	r2, r7
 800d390:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t172.im / 2.0;
 800d394:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d398:	ed93 6b02 	vldr	d6, [r3, #8]
 800d39c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3a4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d3a8:	ed83 7b00 	vstr	d7, [r3]
 800d3ac:	e018      	b.n	800d3e0 <G_q+0xb0c8>
  } else {
    t85_im = t172.re / 2.0;
 800d3ae:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d3b2:	ed93 6b00 	vldr	d6, [r3]
 800d3b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3be:	f241 3318 	movw	r3, #4888	; 0x1318
 800d3c2:	443b      	add	r3, r7
 800d3c4:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t172.im / 2.0;
 800d3c8:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d3cc:	ed93 6b02 	vldr	d6, [r3, #8]
 800d3d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d3d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d3d8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d3dc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t173.im == 0.0) {
 800d3e0:	4b2c      	ldr	r3, [pc, #176]	; (800d494 <G_q+0xb17c>)
 800d3e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d3e6:	443a      	add	r2, r7
 800d3e8:	4413      	add	r3, r2
 800d3ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800d3ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f6:	d119      	bne.n	800d42c <G_q+0xb114>
    t34_re = t173.re / 2.0;
 800d3f8:	4b26      	ldr	r3, [pc, #152]	; (800d494 <G_q+0xb17c>)
 800d3fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d3fe:	443a      	add	r2, r7
 800d400:	4413      	add	r3, r2
 800d402:	ed93 6b00 	vldr	d6, [r3]
 800d406:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d40a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d40e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d412:	443b      	add	r3, r7
 800d414:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d418:	f04f 0300 	mov.w	r3, #0
 800d41c:	f04f 0400 	mov.w	r4, #0
 800d420:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d424:	443a      	add	r2, r7
 800d426:	e9c2 3400 	strd	r3, r4, [r2]
 800d42a:	e055      	b.n	800d4d8 <G_q+0xb1c0>
  } else if (t173.re == 0.0) {
 800d42c:	4b19      	ldr	r3, [pc, #100]	; (800d494 <G_q+0xb17c>)
 800d42e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d432:	443a      	add	r2, r7
 800d434:	4413      	add	r3, r2
 800d436:	ed93 7b00 	vldr	d7, [r3]
 800d43a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d43e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d442:	d129      	bne.n	800d498 <G_q+0xb180>
    t34_re = 0.0;
 800d444:	f04f 0300 	mov.w	r3, #0
 800d448:	f04f 0400 	mov.w	r4, #0
 800d44c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d450:	443a      	add	r2, r7
 800d452:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t173.im / 2.0;
 800d456:	4b0f      	ldr	r3, [pc, #60]	; (800d494 <G_q+0xb17c>)
 800d458:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d45c:	443a      	add	r2, r7
 800d45e:	4413      	add	r3, r2
 800d460:	ed93 6b02 	vldr	d6, [r3, #8]
 800d464:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d468:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d46c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d470:	443b      	add	r3, r7
 800d472:	ed83 7b00 	vstr	d7, [r3]
 800d476:	e02f      	b.n	800d4d8 <G_q+0xb1c0>
 800d478:	75f6fd22 	.word	0x75f6fd22
 800d47c:	3fc19ce0 	.word	0x3fc19ce0
 800d480:	9374bc6a 	.word	0x9374bc6a
 800d484:	3f960418 	.word	0x3f960418
 800d488:	2ba953a1 	.word	0x2ba953a1
 800d48c:	3c3848f9 	.word	0x3c3848f9
 800d490:	ffffec34 	.word	0xffffec34
 800d494:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t34_re = t173.re / 2.0;
 800d498:	4bb5      	ldr	r3, [pc, #724]	; (800d770 <G_q+0xb458>)
 800d49a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d49e:	443a      	add	r2, r7
 800d4a0:	4413      	add	r3, r2
 800d4a2:	ed93 6b00 	vldr	d6, [r3]
 800d4a6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4aa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4ae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d4b2:	443b      	add	r3, r7
 800d4b4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t173.im / 2.0;
 800d4b8:	4bad      	ldr	r3, [pc, #692]	; (800d770 <G_q+0xb458>)
 800d4ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d4be:	443a      	add	r2, r7
 800d4c0:	4413      	add	r3, r2
 800d4c2:	ed93 6b02 	vldr	d6, [r3, #8]
 800d4c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d4ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d4ce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d4d2:	443b      	add	r3, r7
 800d4d4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d4d8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d4dc:	ed93 7b00 	vldr	d7, [r3]
 800d4e0:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 800d760 <G_q+0xb448>
 800d4e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d4e8:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d4ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800d4f0:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800d768 <G_q+0xb450>
 800d4f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d4f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d4fc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d500:	ed93 7b00 	vldr	d7, [r3]
 800d504:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800d760 <G_q+0xb448>
 800d508:	ee27 5b05 	vmul.f64	d5, d7, d5
    t183.im * 3.061616997868383E-17);
 800d50c:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d510:	ed93 7b02 	vldr	d7, [r3, #8]
 800d514:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800d768 <G_q+0xb450>
 800d518:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d51c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d520:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d524:	f241 3368 	movw	r3, #4968	; 0x1368
 800d528:	443b      	add	r3, r7
 800d52a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d52e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d532:	ed93 7b00 	vldr	d7, [r3]
 800d536:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800d768 <G_q+0xb450>
 800d53a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d53e:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d542:	ed93 7b02 	vldr	d7, [r3, #8]
 800d546:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800d760 <G_q+0xb448>
 800d54a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d54e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d552:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d556:	ed93 7b00 	vldr	d7, [r3]
 800d55a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800d768 <G_q+0xb450>
 800d55e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t183.im * 0.0);
 800d562:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d566:	ed93 7b02 	vldr	d7, [r3, #8]
 800d56a:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 800d760 <G_q+0xb448>
 800d56e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d572:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d576:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d57a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d57e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t180.re * 0.0 - t180.im * 0.5) - (t181.re * 0.0 - t181.im * 0.5);
 800d582:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d586:	ed93 7b00 	vldr	d7, [r3]
 800d58a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800d760 <G_q+0xb448>
 800d58e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d592:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d596:	ed93 7b02 	vldr	d7, [r3, #8]
 800d59a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d59e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d5a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d5a6:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d5aa:	ed93 7b00 	vldr	d7, [r3]
 800d5ae:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800d760 <G_q+0xb448>
 800d5b2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d5b6:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d5ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5be:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d5c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d5c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d5ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d5ce:	f241 3348 	movw	r3, #4936	; 0x1348
 800d5d2:	443b      	add	r3, r7
 800d5d4:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t180.re * 0.5 + t180.im * 0.0) - (t181.re * 0.5 + t181.im * 0.0);
 800d5d8:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d5dc:	ed93 7b00 	vldr	d7, [r3]
 800d5e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d5e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d5e8:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d5ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5f0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800d760 <G_q+0xb448>
 800d5f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d5f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d5fc:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d600:	ed93 7b00 	vldr	d7, [r3]
 800d604:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d608:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d60c:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d610:	ed93 7b02 	vldr	d7, [r3, #8]
 800d614:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800d760 <G_q+0xb448>
 800d618:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d61c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d620:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d624:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d628:	ed83 7b00 	vstr	d7, [r3]
  if (t178.im == 0.0) {
 800d62c:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d630:	ed93 7b02 	vldr	d7, [r3, #8]
 800d634:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d63c:	d115      	bne.n	800d66a <G_q+0xb352>
    t12_re = t178.re / 2.0;
 800d63e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d642:	ed93 6b00 	vldr	d6, [r3]
 800d646:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d64a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d64e:	f241 3388 	movw	r3, #5000	; 0x1388
 800d652:	443b      	add	r3, r7
 800d654:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800d658:	f04f 0300 	mov.w	r3, #0
 800d65c:	f04f 0400 	mov.w	r4, #0
 800d660:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800d664:	e9c2 3400 	strd	r3, r4, [r2]
 800d668:	e037      	b.n	800d6da <G_q+0xb3c2>
  } else if (t178.re == 0.0) {
 800d66a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d66e:	ed93 7b00 	vldr	d7, [r3]
 800d672:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67a:	d115      	bne.n	800d6a8 <G_q+0xb390>
    t12_re = 0.0;
 800d67c:	f04f 0300 	mov.w	r3, #0
 800d680:	f04f 0400 	mov.w	r4, #0
 800d684:	f241 3288 	movw	r2, #5000	; 0x1388
 800d688:	443a      	add	r2, r7
 800d68a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t178.im / 2.0;
 800d68e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d692:	ed93 6b02 	vldr	d6, [r3, #8]
 800d696:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d69a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d69e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d6a2:	ed83 7b00 	vstr	d7, [r3]
 800d6a6:	e018      	b.n	800d6da <G_q+0xb3c2>
  } else {
    t12_re = t178.re / 2.0;
 800d6a8:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d6ac:	ed93 6b00 	vldr	d6, [r3]
 800d6b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d6b4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d6b8:	f241 3388 	movw	r3, #5000	; 0x1388
 800d6bc:	443b      	add	r3, r7
 800d6be:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t178.im / 2.0;
 800d6c2:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d6c6:	ed93 6b02 	vldr	d6, [r3, #8]
 800d6ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d6ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d6d2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d6d6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t179.im == 0.0) {
 800d6da:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d6de:	ed93 7b02 	vldr	d7, [r3, #8]
 800d6e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6ea:	d116      	bne.n	800d71a <G_q+0xb402>
    t13_re = t179.re / 2.0;
 800d6ec:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d6f0:	ed93 6b00 	vldr	d6, [r3]
 800d6f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d6f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d6fc:	f241 3378 	movw	r3, #4984	; 0x1378
 800d700:	443b      	add	r3, r7
 800d702:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800d706:	f04f 0300 	mov.w	r3, #0
 800d70a:	f04f 0400 	mov.w	r4, #0
 800d70e:	f241 3270 	movw	r2, #4976	; 0x1370
 800d712:	443a      	add	r2, r7
 800d714:	e9c2 3400 	strd	r3, r4, [r2]
 800d718:	e046      	b.n	800d7a8 <G_q+0xb490>
  } else if (t179.re == 0.0) {
 800d71a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d71e:	ed93 7b00 	vldr	d7, [r3]
 800d722:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d72a:	d123      	bne.n	800d774 <G_q+0xb45c>
    t13_re = 0.0;
 800d72c:	f04f 0300 	mov.w	r3, #0
 800d730:	f04f 0400 	mov.w	r4, #0
 800d734:	f241 3278 	movw	r2, #4984	; 0x1378
 800d738:	443a      	add	r2, r7
 800d73a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t179.im / 2.0;
 800d73e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d742:	ed93 6b02 	vldr	d6, [r3, #8]
 800d746:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d74a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d74e:	f241 3370 	movw	r3, #4976	; 0x1370
 800d752:	443b      	add	r3, r7
 800d754:	ed83 7b00 	vstr	d7, [r3]
 800d758:	e026      	b.n	800d7a8 <G_q+0xb490>
 800d75a:	bf00      	nop
 800d75c:	f3af 8000 	nop.w
	...
 800d768:	33145c07 	.word	0x33145c07
 800d76c:	3c81a626 	.word	0x3c81a626
 800d770:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t13_re = t179.re / 2.0;
 800d774:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d778:	ed93 6b00 	vldr	d6, [r3]
 800d77c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d780:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d784:	f241 3378 	movw	r3, #4984	; 0x1378
 800d788:	443b      	add	r3, r7
 800d78a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t179.im / 2.0;
 800d78e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d792:	ed93 6b02 	vldr	d6, [r3, #8]
 800d796:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d79a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d79e:	f241 3370 	movw	r3, #4976	; 0x1370
 800d7a2:	443b      	add	r3, r7
 800d7a4:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t176.re * 3.061616997868383E-17 + t177.re * 3.061616997868383E-17;
 800d7a8:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800d7ac:	ed93 7b00 	vldr	d7, [r3]
 800d7b0:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 800daf8 <G_q+0xb7e0>
 800d7b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d7b8:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800d7bc:	ed93 7b00 	vldr	d7, [r3]
 800d7c0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800daf8 <G_q+0xb7e0>
 800d7c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d7c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d7cc:	f241 3330 	movw	r3, #4912	; 0x1330
 800d7d0:	443b      	add	r3, r7
 800d7d2:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t176.im * 3.061616997868383E-17 + t177.im * 3.061616997868383E-17;
 800d7d6:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800d7da:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7de:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 800daf8 <G_q+0xb7e0>
 800d7e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d7e6:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800d7ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7ee:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 800daf8 <G_q+0xb7e0>
 800d7f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d7f6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d7fa:	f241 3310 	movw	r3, #4880	; 0x1310
 800d7fe:	443b      	add	r3, r7
 800d800:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t13_re) + 7.498798913309288E-33;
 800d804:	f241 3388 	movw	r3, #5000	; 0x1388
 800d808:	443b      	add	r3, r7
 800d80a:	ed93 6b00 	vldr	d6, [r3]
 800d80e:	f241 3378 	movw	r3, #4984	; 0x1378
 800d812:	443b      	add	r3, r7
 800d814:	ed93 7b00 	vldr	d7, [r3]
 800d818:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d81c:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800db10 <G_q+0xb7f8>
 800d820:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d824:	f241 3388 	movw	r3, #5000	; 0x1388
 800d828:	443b      	add	r3, r7
 800d82a:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 800d82e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d832:	ed93 6b00 	vldr	d6, [r3]
 800d836:	f241 3370 	movw	r3, #4976	; 0x1370
 800d83a:	443b      	add	r3, r7
 800d83c:	ed93 7b00 	vldr	d7, [r3]
 800d840:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d844:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d848:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_re;
 800d84c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d850:	443b      	add	r3, r7
 800d852:	ed93 6b00 	vldr	d6, [r3]
 800d856:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d85a:	443b      	add	r3, r7
 800d85c:	ed93 7b00 	vldr	d7, [r3]
 800d860:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d864:	f241 3318 	movw	r3, #4888	; 0x1318
 800d868:	443b      	add	r3, r7
 800d86a:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t34_im;
 800d86e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d872:	ed93 6b00 	vldr	d6, [r3]
 800d876:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d87a:	443b      	add	r3, r7
 800d87c:	ed93 7b00 	vldr	d7, [r3]
 800d880:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d884:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d888:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800d88c:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800d890:	ed93 7b00 	vldr	d7, [r3]
 800d894:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 800db00 <G_q+0xb7e8>
 800d898:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d89c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800d8a0:	ed93 7b00 	vldr	d7, [r3]
 800d8a4:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800db00 <G_q+0xb7e8>
 800d8a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d8ac:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800d8b0:	f241 3368 	movw	r3, #4968	; 0x1368
 800d8b4:	443b      	add	r3, r7
 800d8b6:	ed93 5b00 	vldr	d5, [r3]
 800d8ba:	f241 3348 	movw	r3, #4936	; 0x1348
 800d8be:	443b      	add	r3, r7
 800d8c0:	ed93 7b00 	vldr	d7, [r3]
 800d8c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d8c8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d8cc:	ed93 4b00 	vldr	d4, [r3]
 800d8d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d8d4:	ed93 7b00 	vldr	d7, [r3]
 800d8d8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d8dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d8e0:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800d8e4:	f241 3330 	movw	r3, #4912	; 0x1330
 800d8e8:	443b      	add	r3, r7
 800d8ea:	ed93 5b00 	vldr	d5, [r3]
 800d8ee:	f241 3388 	movw	r3, #5000	; 0x1388
 800d8f2:	443b      	add	r3, r7
 800d8f4:	ed93 7b00 	vldr	d7, [r3]
 800d8f8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d8fc:	f241 3310 	movw	r3, #4880	; 0x1310
 800d900:	443b      	add	r3, r7
 800d902:	ed93 4b00 	vldr	d4, [r3]
 800d906:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d90a:	ed93 7b00 	vldr	d7, [r3]
 800d90e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d912:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800d916:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800d91a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800db00 <G_q+0xb7e8>
 800d91e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800d922:	f241 3338 	movw	r3, #4920	; 0x1338
 800d926:	443b      	add	r3, r7
 800d928:	ed83 7b00 	vstr	d7, [r3]
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800d92c:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800d930:	ed93 7b02 	vldr	d7, [r3, #8]
 800d934:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800db00 <G_q+0xb7e8>
 800d938:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d93c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800d940:	ed93 7b02 	vldr	d7, [r3, #8]
 800d944:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800db00 <G_q+0xb7e8>
 800d948:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d94c:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800d950:	f241 3368 	movw	r3, #4968	; 0x1368
 800d954:	443b      	add	r3, r7
 800d956:	ed93 5b00 	vldr	d5, [r3]
 800d95a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d95e:	ed93 7b00 	vldr	d7, [r3]
 800d962:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d966:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d96a:	ed93 4b00 	vldr	d4, [r3]
 800d96e:	f241 3348 	movw	r3, #4936	; 0x1348
 800d972:	443b      	add	r3, r7
 800d974:	ed93 7b00 	vldr	d7, [r3]
 800d978:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d97c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d980:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d984:	f241 3330 	movw	r3, #4912	; 0x1330
 800d988:	443b      	add	r3, r7
 800d98a:	ed93 5b00 	vldr	d5, [r3]
 800d98e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d992:	ed93 7b00 	vldr	d7, [r3]
 800d996:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d99a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d99e:	443b      	add	r3, r7
 800d9a0:	ed93 4b00 	vldr	d4, [r3]
 800d9a4:	f241 3388 	movw	r3, #5000	; 0x1388
 800d9a8:	443b      	add	r3, r7
 800d9aa:	ed93 7b00 	vldr	d7, [r3]
 800d9ae:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d9b2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800d9b6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d9ba:	f241 3330 	movw	r3, #4912	; 0x1330
 800d9be:	443b      	add	r3, r7
 800d9c0:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t186.im == 0.0) {
 800d9c4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d9c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d9cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9d4:	d116      	bne.n	800da04 <G_q+0xb6ec>
    t12_re = t186.re / 2.0;
 800d9d6:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800d9da:	ed93 6b00 	vldr	d6, [r3]
 800d9de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d9e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d9e6:	f241 3388 	movw	r3, #5000	; 0x1388
 800d9ea:	443b      	add	r3, r7
 800d9ec:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800d9f0:	f04f 0300 	mov.w	r3, #0
 800d9f4:	f04f 0400 	mov.w	r4, #0
 800d9f8:	f241 3210 	movw	r2, #4880	; 0x1310
 800d9fc:	443a      	add	r2, r7
 800d9fe:	e9c2 3400 	strd	r3, r4, [r2]
 800da02:	e039      	b.n	800da78 <G_q+0xb760>
  } else if (t186.re == 0.0) {
 800da04:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800da08:	ed93 7b00 	vldr	d7, [r3]
 800da0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da14:	d116      	bne.n	800da44 <G_q+0xb72c>
    t12_re = 0.0;
 800da16:	f04f 0300 	mov.w	r3, #0
 800da1a:	f04f 0400 	mov.w	r4, #0
 800da1e:	f241 3288 	movw	r2, #5000	; 0x1388
 800da22:	443a      	add	r2, r7
 800da24:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t186.im / 2.0;
 800da28:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800da2c:	ed93 6b02 	vldr	d6, [r3, #8]
 800da30:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da38:	f241 3310 	movw	r3, #4880	; 0x1310
 800da3c:	443b      	add	r3, r7
 800da3e:	ed83 7b00 	vstr	d7, [r3]
 800da42:	e019      	b.n	800da78 <G_q+0xb760>
  } else {
    t12_re = t186.re / 2.0;
 800da44:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800da48:	ed93 6b00 	vldr	d6, [r3]
 800da4c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da54:	f241 3388 	movw	r3, #5000	; 0x1388
 800da58:	443b      	add	r3, r7
 800da5a:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t186.im / 2.0;
 800da5e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800da62:	ed93 6b02 	vldr	d6, [r3, #8]
 800da66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da6e:	f241 3310 	movw	r3, #4880	; 0x1310
 800da72:	443b      	add	r3, r7
 800da74:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t187.im == 0.0) {
 800da78:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800da7c:	ed93 7b02 	vldr	d7, [r3, #8]
 800da80:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800da84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da88:	d116      	bne.n	800dab8 <G_q+0xb7a0>
    t34_re = t187.re / 2.0;
 800da8a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800da8e:	ed93 6b00 	vldr	d6, [r3]
 800da92:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da9a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800da9e:	443b      	add	r3, r7
 800daa0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800daa4:	f04f 0300 	mov.w	r3, #0
 800daa8:	f04f 0400 	mov.w	r4, #0
 800daac:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dab0:	443a      	add	r2, r7
 800dab2:	e9c2 3400 	strd	r3, r4, [r2]
 800dab6:	e049      	b.n	800db4c <G_q+0xb834>
  } else if (t187.re == 0.0) {
 800dab8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dabc:	ed93 7b00 	vldr	d7, [r3]
 800dac0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac8:	d126      	bne.n	800db18 <G_q+0xb800>
    t34_re = 0.0;
 800daca:	f04f 0300 	mov.w	r3, #0
 800dace:	f04f 0400 	mov.w	r4, #0
 800dad2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dad6:	443a      	add	r2, r7
 800dad8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t187.im / 2.0;
 800dadc:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dae0:	ed93 6b02 	vldr	d6, [r3, #8]
 800dae4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800daec:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800daf0:	443b      	add	r3, r7
 800daf2:	ed83 7b00 	vstr	d7, [r3]
 800daf6:	e029      	b.n	800db4c <G_q+0xb834>
 800daf8:	33145c07 	.word	0x33145c07
 800dafc:	3c81a626 	.word	0x3c81a626
 800db00:	33145c07 	.word	0x33145c07
 800db04:	3c91a626 	.word	0x3c91a626
	...
 800db10:	858a5d48 	.word	0x858a5d48
 800db14:	394377ce 	.word	0x394377ce
  } else {
    t34_re = t187.re / 2.0;
 800db18:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800db1c:	ed93 6b00 	vldr	d6, [r3]
 800db20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db28:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800db2c:	443b      	add	r3, r7
 800db2e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t187.im / 2.0;
 800db32:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800db36:	ed93 6b02 	vldr	d6, [r3, #8]
 800db3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800db3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800db42:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db46:	443b      	add	r3, r7
 800db48:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800db4c:	f241 3388 	movw	r3, #5000	; 0x1388
 800db50:	443b      	add	r3, r7
 800db52:	ed93 6b00 	vldr	d6, [r3]
 800db56:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800db5a:	443b      	add	r3, r7
 800db5c:	ed93 7b00 	vldr	d7, [r3]
 800db60:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db64:	f241 3388 	movw	r3, #5000	; 0x1388
 800db68:	443b      	add	r3, r7
 800db6a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800db6e:	f241 3310 	movw	r3, #4880	; 0x1310
 800db72:	443b      	add	r3, r7
 800db74:	ed93 6b00 	vldr	d6, [r3]
 800db78:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db7c:	443b      	add	r3, r7
 800db7e:	ed93 7b00 	vldr	d7, [r3]
 800db82:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db86:	f241 3310 	movw	r3, #4880	; 0x1310
 800db8a:	443b      	add	r3, r7
 800db8c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t188.re * 0.0 - t188.im * 0.5) - (t189.re * 0.0 - t189.im * 0.5);
 800db90:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800db94:	ed93 7b00 	vldr	d7, [r3]
 800db98:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 800db08 <G_q+0xb7f0>
 800db9c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dba0:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dba4:	ed93 7b02 	vldr	d7, [r3, #8]
 800dba8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dbac:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dbb0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dbb4:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dbb8:	ed93 7b00 	vldr	d7, [r3]
 800dbbc:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 800db08 <G_q+0xb7f0>
 800dbc0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dbc4:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dbc8:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbcc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dbd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dbd4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dbd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dbdc:	f241 3378 	movw	r3, #4984	; 0x1378
 800dbe0:	443b      	add	r3, r7
 800dbe2:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t188.re * 0.5 + t188.im * 0.0) - (t189.re * 0.5 + t189.im * 0.0);
 800dbe6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dbea:	ed93 7b00 	vldr	d7, [r3]
 800dbee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dbf2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dbf6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800dbfa:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbfe:	ed1f 5b3e 	vldr	d5, [pc, #-248]	; 800db08 <G_q+0xb7f0>
 800dc02:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dc06:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dc0a:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dc0e:	ed93 7b00 	vldr	d7, [r3]
 800dc12:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dc16:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dc1a:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dc1e:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc22:	ed1f 4b47 	vldr	d4, [pc, #-284]	; 800db08 <G_q+0xb7f0>
 800dc26:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dc2a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dc2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dc32:	f241 3370 	movw	r3, #4976	; 0x1370
 800dc36:	443b      	add	r3, r7
 800dc38:	ed83 7b00 	vstr	d7, [r3]
  if (t192.im == 0.0) {
 800dc3c:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dc40:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc4c:	d115      	bne.n	800dc7a <G_q+0xb962>
    t16_re = t192.re / 2.0;
 800dc4e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dc52:	ed93 6b00 	vldr	d6, [r3]
 800dc56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dc5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc5e:	f241 3368 	movw	r3, #4968	; 0x1368
 800dc62:	443b      	add	r3, r7
 800dc64:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800dc68:	f04f 0300 	mov.w	r3, #0
 800dc6c:	f04f 0400 	mov.w	r4, #0
 800dc70:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800dc74:	e9c2 3400 	strd	r3, r4, [r2]
 800dc78:	e037      	b.n	800dcea <G_q+0xb9d2>
  } else if (t192.re == 0.0) {
 800dc7a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dc7e:	ed93 7b00 	vldr	d7, [r3]
 800dc82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc8a:	d115      	bne.n	800dcb8 <G_q+0xb9a0>
    t16_re = 0.0;
 800dc8c:	f04f 0300 	mov.w	r3, #0
 800dc90:	f04f 0400 	mov.w	r4, #0
 800dc94:	f241 3268 	movw	r2, #4968	; 0x1368
 800dc98:	443a      	add	r2, r7
 800dc9a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t192.im / 2.0;
 800dc9e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dca2:	ed93 6b02 	vldr	d6, [r3, #8]
 800dca6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dcaa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dcae:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dcb2:	ed83 7b00 	vstr	d7, [r3]
 800dcb6:	e018      	b.n	800dcea <G_q+0xb9d2>
  } else {
    t16_re = t192.re / 2.0;
 800dcb8:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dcbc:	ed93 6b00 	vldr	d6, [r3]
 800dcc0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dcc4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dcc8:	f241 3368 	movw	r3, #4968	; 0x1368
 800dccc:	443b      	add	r3, r7
 800dcce:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t192.im / 2.0;
 800dcd2:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800dcd6:	ed93 6b02 	vldr	d6, [r3, #8]
 800dcda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dcde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dce2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dce6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t193.im == 0.0) {
 800dcea:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dcee:	ed93 7b02 	vldr	d7, [r3, #8]
 800dcf2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcfa:	d116      	bne.n	800dd2a <G_q+0xba12>
    t34_re = t193.re / 2.0;
 800dcfc:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dd00:	ed93 6b00 	vldr	d6, [r3]
 800dd04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd0c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dd10:	443b      	add	r3, r7
 800dd12:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800dd16:	f04f 0300 	mov.w	r3, #0
 800dd1a:	f04f 0400 	mov.w	r4, #0
 800dd1e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dd22:	443a      	add	r2, r7
 800dd24:	e9c2 3400 	strd	r3, r4, [r2]
 800dd28:	e039      	b.n	800dd9e <G_q+0xba86>
  } else if (t193.re == 0.0) {
 800dd2a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dd2e:	ed93 7b00 	vldr	d7, [r3]
 800dd32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd3a:	d116      	bne.n	800dd6a <G_q+0xba52>
    t34_re = 0.0;
 800dd3c:	f04f 0300 	mov.w	r3, #0
 800dd40:	f04f 0400 	mov.w	r4, #0
 800dd44:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dd48:	443a      	add	r2, r7
 800dd4a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t193.im / 2.0;
 800dd4e:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dd52:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd5e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dd62:	443b      	add	r3, r7
 800dd64:	ed83 7b00 	vstr	d7, [r3]
 800dd68:	e019      	b.n	800dd9e <G_q+0xba86>
  } else {
    t34_re = t193.re / 2.0;
 800dd6a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dd6e:	ed93 6b00 	vldr	d6, [r3]
 800dd72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd7a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dd7e:	443b      	add	r3, r7
 800dd80:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t193.im / 2.0;
 800dd84:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dd88:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd94:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dd98:	443b      	add	r3, r7
 800dd9a:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t190.re * 0.0 - t190.im * 0.5) - (t191.re * 0.0 - t191.im * 0.5);
 800dd9e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800dda2:	ed93 7b00 	vldr	d7, [r3]
 800dda6:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 800db08 <G_q+0xb7f0>
 800ddaa:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ddae:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800ddb2:	ed93 7b02 	vldr	d7, [r3, #8]
 800ddb6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ddba:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ddbe:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ddc2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800ddc6:	ed93 7b00 	vldr	d7, [r3]
 800ddca:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 800db08 <G_q+0xb7f0>
 800ddce:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ddd2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800ddd6:	ed93 7b02 	vldr	d7, [r3, #8]
 800ddda:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ddde:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dde2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dde6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ddea:	f241 3348 	movw	r3, #4936	; 0x1348
 800ddee:	443b      	add	r3, r7
 800ddf0:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t190.re * 0.5 + t190.im * 0.0) - (t191.re * 0.5 + t191.im * 0.0);
 800ddf4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800ddf8:	ed93 7b00 	vldr	d7, [r3]
 800ddfc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800de00:	ee27 6b06 	vmul.f64	d6, d7, d6
 800de04:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800de08:	ed93 7b02 	vldr	d7, [r3, #8]
 800de0c:	ed1f 5bc2 	vldr	d5, [pc, #-776]	; 800db08 <G_q+0xb7f0>
 800de10:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de14:	ee36 6b07 	vadd.f64	d6, d6, d7
 800de18:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800de1c:	ed93 7b00 	vldr	d7, [r3]
 800de20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800de24:	ee27 5b05 	vmul.f64	d5, d7, d5
 800de28:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800de2c:	ed93 7b02 	vldr	d7, [r3, #8]
 800de30:	ed1f 4bcb 	vldr	d4, [pc, #-812]	; 800db08 <G_q+0xb7f0>
 800de34:	ee27 7b04 	vmul.f64	d7, d7, d4
 800de38:	ee35 7b07 	vadd.f64	d7, d5, d7
 800de3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de40:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800de44:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800de48:	f241 3368 	movw	r3, #4968	; 0x1368
 800de4c:	443b      	add	r3, r7
 800de4e:	ed93 6b00 	vldr	d6, [r3]
 800de52:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800de56:	443b      	add	r3, r7
 800de58:	ed93 7b00 	vldr	d7, [r3]
 800de5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de60:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 800db10 <G_q+0xb7f8>
 800de64:	ee37 7b06 	vadd.f64	d7, d7, d6
 800de68:	f241 3368 	movw	r3, #4968	; 0x1368
 800de6c:	443b      	add	r3, r7
 800de6e:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800de72:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800de76:	ed93 6b00 	vldr	d6, [r3]
 800de7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800de7e:	443b      	add	r3, r7
 800de80:	ed93 7b00 	vldr	d7, [r3]
 800de84:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de88:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800de8c:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_re * t13_re - t3_im * t13_im) - (t20_re * t16_re - t20_im *
 800de90:	f241 3388 	movw	r3, #5000	; 0x1388
 800de94:	443b      	add	r3, r7
 800de96:	ed93 6b00 	vldr	d6, [r3]
 800de9a:	f241 3378 	movw	r3, #4984	; 0x1378
 800de9e:	443b      	add	r3, r7
 800dea0:	ed93 7b00 	vldr	d7, [r3]
 800dea4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800dea8:	f241 3310 	movw	r3, #4880	; 0x1310
 800deac:	443b      	add	r3, r7
 800deae:	ed93 5b00 	vldr	d5, [r3]
 800deb2:	f241 3370 	movw	r3, #4976	; 0x1370
 800deb6:	443b      	add	r3, r7
 800deb8:	ed93 7b00 	vldr	d7, [r3]
 800debc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800dec0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800dec4:	f241 3348 	movw	r3, #4936	; 0x1348
 800dec8:	443b      	add	r3, r7
 800deca:	ed93 5b00 	vldr	d5, [r3]
 800dece:	f241 3368 	movw	r3, #4968	; 0x1368
 800ded2:	443b      	add	r3, r7
 800ded4:	ed93 7b00 	vldr	d7, [r3]
 800ded8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dedc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dee0:	ed93 4b00 	vldr	d4, [r3]
 800dee4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dee8:	ed93 7b00 	vldr	d7, [r3]
 800deec:	ee24 7b07 	vmul.f64	d7, d4, d7
 800def0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800def4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800def8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800defc:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t3_im = (t12_re * t13_im + t3_im * t13_re) - (t20_re * t16_im + t20_im *
 800df00:	f241 3388 	movw	r3, #5000	; 0x1388
 800df04:	443b      	add	r3, r7
 800df06:	ed93 6b00 	vldr	d6, [r3]
 800df0a:	f241 3370 	movw	r3, #4976	; 0x1370
 800df0e:	443b      	add	r3, r7
 800df10:	ed93 7b00 	vldr	d7, [r3]
 800df14:	ee26 6b07 	vmul.f64	d6, d6, d7
 800df18:	f241 3310 	movw	r3, #4880	; 0x1310
 800df1c:	443b      	add	r3, r7
 800df1e:	ed93 5b00 	vldr	d5, [r3]
 800df22:	f241 3378 	movw	r3, #4984	; 0x1378
 800df26:	443b      	add	r3, r7
 800df28:	ed93 7b00 	vldr	d7, [r3]
 800df2c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800df30:	ee36 6b07 	vadd.f64	d6, d6, d7
 800df34:	f241 3348 	movw	r3, #4936	; 0x1348
 800df38:	443b      	add	r3, r7
 800df3a:	ed93 5b00 	vldr	d5, [r3]
 800df3e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df42:	ed93 7b00 	vldr	d7, [r3]
 800df46:	ee25 5b07 	vmul.f64	d5, d5, d7
 800df4a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800df4e:	ed93 4b00 	vldr	d4, [r3]
 800df52:	f241 3368 	movw	r3, #4968	; 0x1368
 800df56:	443b      	add	r3, r7
 800df58:	ed93 7b00 	vldr	d7, [r3]
 800df5c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800df60:	ee35 7b07 	vadd.f64	d7, d5, d7
 800df64:	ee36 7b47 	vsub.f64	d7, d6, d7
 800df68:	f241 3310 	movw	r3, #4880	; 0x1310
 800df6c:	443b      	add	r3, r7
 800df6e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t34_re = (t184.re * 0.0 - t184.im * 0.5) - (t185.re * 0.0 - t185.im * 0.5);
 800df72:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800df76:	ed93 7b00 	vldr	d7, [r3]
 800df7a:	ed9f 6bed 	vldr	d6, [pc, #948]	; 800e330 <G_q+0xc018>
 800df7e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800df82:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800df86:	ed93 7b02 	vldr	d7, [r3, #8]
 800df8a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800df8e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800df92:	ee36 6b47 	vsub.f64	d6, d6, d7
 800df96:	4bea      	ldr	r3, [pc, #936]	; (800e340 <G_q+0xc028>)
 800df98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800df9c:	443a      	add	r2, r7
 800df9e:	4413      	add	r3, r2
 800dfa0:	ed93 7b00 	vldr	d7, [r3]
 800dfa4:	ed9f 5be2 	vldr	d5, [pc, #904]	; 800e330 <G_q+0xc018>
 800dfa8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800dfac:	4be4      	ldr	r3, [pc, #912]	; (800e340 <G_q+0xc028>)
 800dfae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dfb2:	443a      	add	r2, r7
 800dfb4:	4413      	add	r3, r2
 800dfb6:	ed93 7b02 	vldr	d7, [r3, #8]
 800dfba:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800dfbe:	ee27 7b04 	vmul.f64	d7, d7, d4
 800dfc2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800dfc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dfca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dfce:	443b      	add	r3, r7
 800dfd0:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t184.re * 0.5 + t184.im * 0.0) - (t185.re * 0.5 + t185.im * 0.0);
 800dfd4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dfd8:	ed93 7b00 	vldr	d7, [r3]
 800dfdc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dfe0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dfe4:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800dfe8:	ed93 7b02 	vldr	d7, [r3, #8]
 800dfec:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800e330 <G_q+0xc018>
 800dff0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dff4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dff8:	4bd1      	ldr	r3, [pc, #836]	; (800e340 <G_q+0xc028>)
 800dffa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800dffe:	443a      	add	r2, r7
 800e000:	4413      	add	r3, r2
 800e002:	ed93 7b00 	vldr	d7, [r3]
 800e006:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e00a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e00e:	4bcc      	ldr	r3, [pc, #816]	; (800e340 <G_q+0xc028>)
 800e010:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e014:	443a      	add	r2, r7
 800e016:	4413      	add	r3, r2
 800e018:	ed93 7b02 	vldr	d7, [r3, #8]
 800e01c:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800e330 <G_q+0xc018>
 800e020:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e024:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e028:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e02c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e030:	443b      	add	r3, r7
 800e032:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (t194.re * 0.0 - t194.im * 0.5) - (t195.re * 0.0 - t195.im * 0.5);
 800e036:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e03a:	ed93 7b00 	vldr	d7, [r3]
 800e03e:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800e330 <G_q+0xc018>
 800e042:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e046:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e04a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e04e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e052:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e056:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e05a:	4bba      	ldr	r3, [pc, #744]	; (800e344 <G_q+0xc02c>)
 800e05c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e060:	443a      	add	r2, r7
 800e062:	4413      	add	r3, r2
 800e064:	ed93 7b00 	vldr	d7, [r3]
 800e068:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 800e330 <G_q+0xc018>
 800e06c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e070:	4bb4      	ldr	r3, [pc, #720]	; (800e344 <G_q+0xc02c>)
 800e072:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e076:	443a      	add	r2, r7
 800e078:	4413      	add	r3, r2
 800e07a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e07e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e082:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e086:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e08a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e08e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e092:	443b      	add	r3, r7
 800e094:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t194.re * 0.5 + t194.im * 0.0) - (t195.re * 0.5 + t195.im * 0.0);
 800e098:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e09c:	ed93 7b00 	vldr	d7, [r3]
 800e0a0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e0a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e0a8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e0ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0b0:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800e330 <G_q+0xc018>
 800e0b4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e0b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e0bc:	4ba1      	ldr	r3, [pc, #644]	; (800e344 <G_q+0xc02c>)
 800e0be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e0c2:	443a      	add	r2, r7
 800e0c4:	4413      	add	r3, r2
 800e0c6:	ed93 7b00 	vldr	d7, [r3]
 800e0ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e0ce:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e0d2:	4b9c      	ldr	r3, [pc, #624]	; (800e344 <G_q+0xc02c>)
 800e0d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e0d8:	443a      	add	r2, r7
 800e0da:	4413      	add	r3, r2
 800e0dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0e0:	ed9f 4b93 	vldr	d4, [pc, #588]	; 800e330 <G_q+0xc018>
 800e0e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e0e8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e0ec:	f241 2358 	movw	r3, #4696	; 0x1258
 800e0f0:	443b      	add	r3, r7
 800e0f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e0f6:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t85_im * b_t10_re - t41_im * t23_re) + (t12_im * t34_re - t3_im *
 800e0fa:	f241 3318 	movw	r3, #4888	; 0x1318
 800e0fe:	443b      	add	r3, r7
 800e100:	ed93 6b00 	vldr	d6, [r3]
 800e104:	f241 3338 	movw	r3, #4920	; 0x1338
 800e108:	443b      	add	r3, r7
 800e10a:	ed93 7b00 	vldr	d7, [r3]
 800e10e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e112:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e116:	ed93 5b00 	vldr	d5, [r3]
 800e11a:	f241 3330 	movw	r3, #4912	; 0x1330
 800e11e:	443b      	add	r3, r7
 800e120:	ed93 7b00 	vldr	d7, [r3]
 800e124:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e128:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e12c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e130:	ed93 5b00 	vldr	d5, [r3]
 800e134:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e138:	443b      	add	r3, r7
 800e13a:	ed93 7b00 	vldr	d7, [r3]
 800e13e:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e142:	f241 3310 	movw	r3, #4880	; 0x1310
 800e146:	443b      	add	r3, r7
 800e148:	ed93 4b00 	vldr	d4, [r3]
 800e14c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e150:	443b      	add	r3, r7
 800e152:	ed93 7b00 	vldr	d7, [r3]
 800e156:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e15a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e15e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e162:	f241 3308 	movw	r3, #4872	; 0x1308
 800e166:	443b      	add	r3, r7
 800e168:	ed83 7b00 	vstr	d7, [r3]
    t34_im);
  t41_im = (t85_im * t23_re + t41_im * b_t10_re) + (t12_im * t34_im + t3_im *
 800e16c:	f241 3318 	movw	r3, #4888	; 0x1318
 800e170:	443b      	add	r3, r7
 800e172:	ed93 6b00 	vldr	d6, [r3]
 800e176:	f241 3330 	movw	r3, #4912	; 0x1330
 800e17a:	443b      	add	r3, r7
 800e17c:	ed93 7b00 	vldr	d7, [r3]
 800e180:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e184:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e188:	ed93 5b00 	vldr	d5, [r3]
 800e18c:	f241 3338 	movw	r3, #4920	; 0x1338
 800e190:	443b      	add	r3, r7
 800e192:	ed93 7b00 	vldr	d7, [r3]
 800e196:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e19a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e19e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e1a2:	ed93 5b00 	vldr	d5, [r3]
 800e1a6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e1aa:	443b      	add	r3, r7
 800e1ac:	ed93 7b00 	vldr	d7, [r3]
 800e1b0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e1b4:	f241 3310 	movw	r3, #4880	; 0x1310
 800e1b8:	443b      	add	r3, r7
 800e1ba:	ed93 4b00 	vldr	d4, [r3]
 800e1be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e1c2:	443b      	add	r3, r7
 800e1c4:	ed93 7b00 	vldr	d7, [r3]
 800e1c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e1cc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e1d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e1d4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e1d8:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e1dc:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e1e0:	ed93 7b00 	vldr	d7, [r3]
 800e1e4:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e330 <G_q+0xc018>
 800e1e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e1ec:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e1f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e1f4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 800e338 <G_q+0xc020>
 800e1f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e1fc:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e200:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e204:	ed93 7b00 	vldr	d7, [r3]
 800e208:	ed9f 5b49 	vldr	d5, [pc, #292]	; 800e330 <G_q+0xc018>
 800e20c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t207.im * 3.061616997868383E-17);
 800e210:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e214:	ed93 7b02 	vldr	d7, [r3, #8]
 800e218:	ed9f 4b47 	vldr	d4, [pc, #284]	; 800e338 <G_q+0xc020>
 800e21c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e220:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e224:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e228:	f241 3368 	movw	r3, #4968	; 0x1368
 800e22c:	443b      	add	r3, r7
 800e22e:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e232:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e236:	ed93 7b00 	vldr	d7, [r3]
 800e23a:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800e338 <G_q+0xc020>
 800e23e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e242:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e246:	ed93 7b02 	vldr	d7, [r3, #8]
 800e24a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 800e330 <G_q+0xc018>
 800e24e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e252:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e256:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e25a:	ed93 7b00 	vldr	d7, [r3]
 800e25e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 800e338 <G_q+0xc020>
 800e262:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t207.im * 0.0);
 800e266:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e26a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e26e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800e330 <G_q+0xc018>
 800e272:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e276:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e27a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e27e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e282:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t204.re * 0.0 - t204.im * 0.5) - (t205.re * 0.0 - t205.im * 0.5);
 800e286:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e28a:	ed93 7b00 	vldr	d7, [r3]
 800e28e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 800e330 <G_q+0xc018>
 800e292:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e296:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e29a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e29e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e2aa:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e2ae:	ed93 7b00 	vldr	d7, [r3]
 800e2b2:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800e330 <G_q+0xc018>
 800e2b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e2ba:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e2be:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2c2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e2c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2ca:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e2ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e2d2:	f241 3348 	movw	r3, #4936	; 0x1348
 800e2d6:	443b      	add	r3, r7
 800e2d8:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t204.re * 0.5 + t204.im * 0.0) - (t205.re * 0.5 + t205.im * 0.0);
 800e2dc:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e2e0:	ed93 7b00 	vldr	d7, [r3]
 800e2e4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e2e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e2ec:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e2f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2f4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800e330 <G_q+0xc018>
 800e2f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2fc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e300:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e304:	ed93 7b00 	vldr	d7, [r3]
 800e308:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e30c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e310:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e314:	ed93 7b02 	vldr	d7, [r3, #8]
 800e318:	ed9f 4b05 	vldr	d4, [pc, #20]	; 800e330 <G_q+0xc018>
 800e31c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e320:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e324:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e328:	e00e      	b.n	800e348 <G_q+0xc030>
 800e32a:	bf00      	nop
 800e32c:	f3af 8000 	nop.w
	...
 800e338:	33145c07 	.word	0x33145c07
 800e33c:	3c81a626 	.word	0x3c81a626
 800e340:	ffffeed0 	.word	0xffffeed0
 800e344:	ffffecd0 	.word	0xffffecd0
 800e348:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e34c:	ed83 7b00 	vstr	d7, [r3]
  if (t202.im == 0.0) {
 800e350:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e354:	ed93 7b02 	vldr	d7, [r3, #8]
 800e358:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e35c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e360:	d115      	bne.n	800e38e <G_q+0xc076>
    t12_re = t202.re / 2.0;
 800e362:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e366:	ed93 6b00 	vldr	d6, [r3]
 800e36a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e36e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e372:	f241 3388 	movw	r3, #5000	; 0x1388
 800e376:	443b      	add	r3, r7
 800e378:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800e37c:	f04f 0300 	mov.w	r3, #0
 800e380:	f04f 0400 	mov.w	r4, #0
 800e384:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800e388:	e9c2 3400 	strd	r3, r4, [r2]
 800e38c:	e037      	b.n	800e3fe <G_q+0xc0e6>
  } else if (t202.re == 0.0) {
 800e38e:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e392:	ed93 7b00 	vldr	d7, [r3]
 800e396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e39e:	d115      	bne.n	800e3cc <G_q+0xc0b4>
    t12_re = 0.0;
 800e3a0:	f04f 0300 	mov.w	r3, #0
 800e3a4:	f04f 0400 	mov.w	r4, #0
 800e3a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800e3ac:	443a      	add	r2, r7
 800e3ae:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t202.im / 2.0;
 800e3b2:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e3b6:	ed93 6b02 	vldr	d6, [r3, #8]
 800e3ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3c2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e3c6:	ed83 7b00 	vstr	d7, [r3]
 800e3ca:	e018      	b.n	800e3fe <G_q+0xc0e6>
  } else {
    t12_re = t202.re / 2.0;
 800e3cc:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e3d0:	ed93 6b00 	vldr	d6, [r3]
 800e3d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3dc:	f241 3388 	movw	r3, #5000	; 0x1388
 800e3e0:	443b      	add	r3, r7
 800e3e2:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t202.im / 2.0;
 800e3e6:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e3ea:	ed93 6b02 	vldr	d6, [r3, #8]
 800e3ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e3f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e3f6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e3fa:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t203.im == 0.0) {
 800e3fe:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e402:	ed93 7b02 	vldr	d7, [r3, #8]
 800e406:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e40a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40e:	d116      	bne.n	800e43e <G_q+0xc126>
    t34_re = t203.re / 2.0;
 800e410:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e414:	ed93 6b00 	vldr	d6, [r3]
 800e418:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e41c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e420:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e424:	443b      	add	r3, r7
 800e426:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e42a:	f04f 0300 	mov.w	r3, #0
 800e42e:	f04f 0400 	mov.w	r4, #0
 800e432:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e436:	443a      	add	r2, r7
 800e438:	e9c2 3400 	strd	r3, r4, [r2]
 800e43c:	e039      	b.n	800e4b2 <G_q+0xc19a>
  } else if (t203.re == 0.0) {
 800e43e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e442:	ed93 7b00 	vldr	d7, [r3]
 800e446:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e44e:	d116      	bne.n	800e47e <G_q+0xc166>
    t34_re = 0.0;
 800e450:	f04f 0300 	mov.w	r3, #0
 800e454:	f04f 0400 	mov.w	r4, #0
 800e458:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e45c:	443a      	add	r2, r7
 800e45e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t203.im / 2.0;
 800e462:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e466:	ed93 6b02 	vldr	d6, [r3, #8]
 800e46a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e46e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e472:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e476:	443b      	add	r3, r7
 800e478:	ed83 7b00 	vstr	d7, [r3]
 800e47c:	e019      	b.n	800e4b2 <G_q+0xc19a>
  } else {
    t34_re = t203.re / 2.0;
 800e47e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e482:	ed93 6b00 	vldr	d6, [r3]
 800e486:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e48a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e48e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e492:	443b      	add	r3, r7
 800e494:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t203.im / 2.0;
 800e498:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e49c:	ed93 6b02 	vldr	d6, [r3, #8]
 800e4a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e4a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e4a8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e4ac:	443b      	add	r3, r7
 800e4ae:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t200.re * 3.061616997868383E-17 + t201.re * 3.061616997868383E-17;
 800e4b2:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e4b6:	ed93 7b00 	vldr	d7, [r3]
 800e4ba:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800e848 <G_q+0xc530>
 800e4be:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4c2:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e4c6:	ed93 7b00 	vldr	d7, [r3]
 800e4ca:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800e848 <G_q+0xc530>
 800e4ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e4d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e4d6:	f241 3330 	movw	r3, #4912	; 0x1330
 800e4da:	443b      	add	r3, r7
 800e4dc:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t200.im * 3.061616997868383E-17 + t201.im * 3.061616997868383E-17;
 800e4e0:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e4e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4e8:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800e848 <G_q+0xc530>
 800e4ec:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4f0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e4f4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4f8:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800e848 <G_q+0xc530>
 800e4fc:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e500:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e504:	f241 3310 	movw	r3, #4880	; 0x1310
 800e508:	443b      	add	r3, r7
 800e50a:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800e50e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e512:	443b      	add	r3, r7
 800e514:	ed93 6b00 	vldr	d6, [r3]
 800e518:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e51c:	443b      	add	r3, r7
 800e51e:	ed93 7b00 	vldr	d7, [r3]
 800e522:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e526:	ed9f 6bca 	vldr	d6, [pc, #808]	; 800e850 <G_q+0xc538>
 800e52a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e52e:	f241 3388 	movw	r3, #5000	; 0x1388
 800e532:	443b      	add	r3, r7
 800e534:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800e538:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e53c:	ed93 6b00 	vldr	d6, [r3]
 800e540:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e544:	443b      	add	r3, r7
 800e546:	ed93 7b00 	vldr	d7, [r3]
 800e54a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e54e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e552:	ed83 7b00 	vstr	d7, [r3]
  t70_im = (t196.re * 0.0 - t196.im * 0.5) - (t197.re * 0.0 - t197.im * 0.5);
 800e556:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e55a:	ed93 7b00 	vldr	d7, [r3]
 800e55e:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 800e858 <G_q+0xc540>
 800e562:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e566:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e56a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e56e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e572:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e576:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e57a:	4bbb      	ldr	r3, [pc, #748]	; (800e868 <G_q+0xc550>)
 800e57c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e580:	443a      	add	r2, r7
 800e582:	4413      	add	r3, r2
 800e584:	ed93 7b00 	vldr	d7, [r3]
 800e588:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800e858 <G_q+0xc540>
 800e58c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e590:	4bb5      	ldr	r3, [pc, #724]	; (800e868 <G_q+0xc550>)
 800e592:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e596:	443a      	add	r2, r7
 800e598:	4413      	add	r3, r2
 800e59a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e59e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e5a2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e5a6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e5aa:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e5ae:	443b      	add	r3, r7
 800e5b0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e5b4:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (t196.re * 0.5 + t196.im * 0.0) - (t197.re * 0.5 + t197.im * 0.0);
 800e5b8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e5bc:	ed93 7b00 	vldr	d7, [r3]
 800e5c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e5c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e5c8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e5cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e5d0:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800e858 <G_q+0xc540>
 800e5d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e5d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e5dc:	4ba2      	ldr	r3, [pc, #648]	; (800e868 <G_q+0xc550>)
 800e5de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e5e2:	443a      	add	r2, r7
 800e5e4:	4413      	add	r3, r2
 800e5e6:	ed93 7b00 	vldr	d7, [r3]
 800e5ea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e5ee:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e5f2:	4b9d      	ldr	r3, [pc, #628]	; (800e868 <G_q+0xc550>)
 800e5f4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e5f8:	443a      	add	r2, r7
 800e5fa:	4413      	add	r3, r2
 800e5fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e600:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800e858 <G_q+0xc540>
 800e604:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e608:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e60c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e610:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e614:	443b      	add	r3, r7
 800e616:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e61a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e61e:	ed93 7b00 	vldr	d7, [r3]
 800e622:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800e860 <G_q+0xc548>
 800e626:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e62a:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e62e:	ed93 7b00 	vldr	d7, [r3]
 800e632:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800e860 <G_q+0xc548>
 800e636:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e63a:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e63e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e642:	443b      	add	r3, r7
 800e644:	ed93 5b00 	vldr	d5, [r3]
 800e648:	f241 3348 	movw	r3, #4936	; 0x1348
 800e64c:	443b      	add	r3, r7
 800e64e:	ed93 7b00 	vldr	d7, [r3]
 800e652:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e656:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e65a:	ed93 4b00 	vldr	d4, [r3]
 800e65e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e662:	ed93 7b00 	vldr	d7, [r3]
 800e666:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e66a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e66e:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800e672:	f241 3330 	movw	r3, #4912	; 0x1330
 800e676:	443b      	add	r3, r7
 800e678:	ed93 5b00 	vldr	d5, [r3]
 800e67c:	f241 3388 	movw	r3, #5000	; 0x1388
 800e680:	443b      	add	r3, r7
 800e682:	ed93 7b00 	vldr	d7, [r3]
 800e686:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e68a:	f241 3310 	movw	r3, #4880	; 0x1310
 800e68e:	443b      	add	r3, r7
 800e690:	ed93 4b00 	vldr	d4, [r3]
 800e694:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e698:	ed93 7b00 	vldr	d7, [r3]
 800e69c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e6a0:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e6a4:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e6a8:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800e860 <G_q+0xc548>
 800e6ac:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e6b0:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800e6b4:	443b      	add	r3, r7
 800e6b6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e6ba:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e6be:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6c2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800e860 <G_q+0xc548>
 800e6c6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e6ca:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e6ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6d2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800e860 <G_q+0xc548>
 800e6d6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e6da:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800e6de:	f241 3368 	movw	r3, #4968	; 0x1368
 800e6e2:	443b      	add	r3, r7
 800e6e4:	ed93 5b00 	vldr	d5, [r3]
 800e6e8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e6ec:	ed93 7b00 	vldr	d7, [r3]
 800e6f0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e6f4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e6f8:	ed93 4b00 	vldr	d4, [r3]
 800e6fc:	f241 3348 	movw	r3, #4936	; 0x1348
 800e700:	443b      	add	r3, r7
 800e702:	ed93 7b00 	vldr	d7, [r3]
 800e706:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e70a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e70e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e712:	f241 3330 	movw	r3, #4912	; 0x1330
 800e716:	443b      	add	r3, r7
 800e718:	ed93 5b00 	vldr	d5, [r3]
 800e71c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e720:	ed93 7b00 	vldr	d7, [r3]
 800e724:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e728:	f241 3310 	movw	r3, #4880	; 0x1310
 800e72c:	443b      	add	r3, r7
 800e72e:	ed93 4b00 	vldr	d4, [r3]
 800e732:	f241 3388 	movw	r3, #5000	; 0x1388
 800e736:	443b      	add	r3, r7
 800e738:	ed93 7b00 	vldr	d7, [r3]
 800e73c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e740:	ee35 7b07 	vadd.f64	d7, d5, d7
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e744:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e748:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800e74c:	443b      	add	r3, r7
 800e74e:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t210.im == 0.0) {
 800e752:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e756:	ed93 7b02 	vldr	d7, [r3, #8]
 800e75a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e75e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e762:	d116      	bne.n	800e792 <G_q+0xc47a>
    t20_re = t210.re / 2.0;
 800e764:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e768:	ed93 6b00 	vldr	d6, [r3]
 800e76c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e770:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e774:	f241 3348 	movw	r3, #4936	; 0x1348
 800e778:	443b      	add	r3, r7
 800e77a:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800e77e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800e782:	443a      	add	r2, r7
 800e784:	f04f 0300 	mov.w	r3, #0
 800e788:	f04f 0400 	mov.w	r4, #0
 800e78c:	e9c2 3400 	strd	r3, r4, [r2]
 800e790:	e039      	b.n	800e806 <G_q+0xc4ee>
  } else if (t210.re == 0.0) {
 800e792:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e796:	ed93 7b00 	vldr	d7, [r3]
 800e79a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e79e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7a2:	d116      	bne.n	800e7d2 <G_q+0xc4ba>
    t20_re = 0.0;
 800e7a4:	f04f 0300 	mov.w	r3, #0
 800e7a8:	f04f 0400 	mov.w	r4, #0
 800e7ac:	f241 3248 	movw	r2, #4936	; 0x1348
 800e7b0:	443a      	add	r2, r7
 800e7b2:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t210.im / 2.0;
 800e7b6:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e7ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800e7be:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e7c2:	443b      	add	r3, r7
 800e7c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e7c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e7cc:	ed83 7b00 	vstr	d7, [r3]
 800e7d0:	e019      	b.n	800e806 <G_q+0xc4ee>
  } else {
    t20_re = t210.re / 2.0;
 800e7d2:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e7d6:	ed93 6b00 	vldr	d6, [r3]
 800e7da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e7de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e7e2:	f241 3348 	movw	r3, #4936	; 0x1348
 800e7e6:	443b      	add	r3, r7
 800e7e8:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t210.im / 2.0;
 800e7ec:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800e7f0:	ed93 6b02 	vldr	d6, [r3, #8]
 800e7f4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e7f8:	443b      	add	r3, r7
 800e7fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e7fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e802:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t211.im == 0.0) {
 800e806:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e80a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e80e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e816:	d129      	bne.n	800e86c <G_q+0xc554>
    t34_re = t211.re / 2.0;
 800e818:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e81c:	ed93 6b00 	vldr	d6, [r3]
 800e820:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e824:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e828:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e82c:	443b      	add	r3, r7
 800e82e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e832:	f04f 0300 	mov.w	r3, #0
 800e836:	f04f 0400 	mov.w	r4, #0
 800e83a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e83e:	443a      	add	r2, r7
 800e840:	e9c2 3400 	strd	r3, r4, [r2]
 800e844:	e04c      	b.n	800e8e0 <G_q+0xc5c8>
 800e846:	bf00      	nop
 800e848:	33145c07 	.word	0x33145c07
 800e84c:	3c81a626 	.word	0x3c81a626
 800e850:	858a5d48 	.word	0x858a5d48
 800e854:	394377ce 	.word	0x394377ce
	...
 800e860:	33145c07 	.word	0x33145c07
 800e864:	3c91a626 	.word	0x3c91a626
 800e868:	ffffeef0 	.word	0xffffeef0
  } else if (t211.re == 0.0) {
 800e86c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e870:	ed93 7b00 	vldr	d7, [r3]
 800e874:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e87c:	d116      	bne.n	800e8ac <G_q+0xc594>
    t34_re = 0.0;
 800e87e:	f04f 0300 	mov.w	r3, #0
 800e882:	f04f 0400 	mov.w	r4, #0
 800e886:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e88a:	443a      	add	r2, r7
 800e88c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t211.im / 2.0;
 800e890:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e894:	ed93 6b02 	vldr	d6, [r3, #8]
 800e898:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e89c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8a0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e8a4:	443b      	add	r3, r7
 800e8a6:	ed83 7b00 	vstr	d7, [r3]
 800e8aa:	e019      	b.n	800e8e0 <G_q+0xc5c8>
  } else {
    t34_re = t211.re / 2.0;
 800e8ac:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e8b0:	ed93 6b00 	vldr	d6, [r3]
 800e8b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e8b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e8c0:	443b      	add	r3, r7
 800e8c2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t211.im / 2.0;
 800e8c6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800e8ca:	ed93 6b02 	vldr	d6, [r3, #8]
 800e8ce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e8d2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e8d6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e8da:	443b      	add	r3, r7
 800e8dc:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re += t34_re;
 800e8e0:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8e4:	443b      	add	r3, r7
 800e8e6:	ed93 6b00 	vldr	d6, [r3]
 800e8ea:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e8ee:	443b      	add	r3, r7
 800e8f0:	ed93 7b00 	vldr	d7, [r3]
 800e8f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e8f8:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8fc:	443b      	add	r3, r7
 800e8fe:	ed83 7b00 	vstr	d7, [r3]
  t70_re += t34_im;
 800e902:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800e906:	443b      	add	r3, r7
 800e908:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800e90c:	443a      	add	r2, r7
 800e90e:	ed92 6b00 	vldr	d6, [r2]
 800e912:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e916:	443a      	add	r2, r7
 800e918:	ed92 7b00 	vldr	d7, [r2]
 800e91c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e920:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t212.re * 0.0 - t212.im * 0.5) - (t213.re * 0.0 - t213.im * 0.5);
 800e924:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800e928:	ed93 7b00 	vldr	d7, [r3]
 800e92c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 800ecb0 <G_q+0xc998>
 800e930:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e934:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800e938:	ed93 7b02 	vldr	d7, [r3, #8]
 800e93c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e940:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e944:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e948:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800e94c:	ed93 7b00 	vldr	d7, [r3]
 800e950:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 800ecb0 <G_q+0xc998>
 800e954:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e958:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800e95c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e960:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e964:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e968:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e96c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e970:	f241 3330 	movw	r3, #4912	; 0x1330
 800e974:	443b      	add	r3, r7
 800e976:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t212.re * 0.5 + t212.im * 0.0) - (t213.re * 0.5 + t213.im * 0.0);
 800e97a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800e97e:	ed93 7b00 	vldr	d7, [r3]
 800e982:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e986:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e98a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800e98e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e992:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 800ecb0 <G_q+0xc998>
 800e996:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e99a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e99e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800e9a2:	ed93 7b00 	vldr	d7, [r3]
 800e9a6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e9aa:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e9ae:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800e9b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e9b6:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 800ecb0 <G_q+0xc998>
 800e9ba:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e9be:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e9c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e9c6:	f241 3310 	movw	r3, #4880	; 0x1310
 800e9ca:	443b      	add	r3, r7
 800e9cc:	ed83 7b00 	vstr	d7, [r3]
  if (t216.im == 0.0) {
 800e9d0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800e9d4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e9d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9e0:	d116      	bne.n	800ea10 <G_q+0xc6f8>
    t13_re = t216.re / 2.0;
 800e9e2:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800e9e6:	ed93 6b00 	vldr	d6, [r3]
 800e9ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e9ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e9f2:	f241 3378 	movw	r3, #4984	; 0x1378
 800e9f6:	443b      	add	r3, r7
 800e9f8:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800e9fc:	f04f 0300 	mov.w	r3, #0
 800ea00:	f04f 0400 	mov.w	r4, #0
 800ea04:	f241 3270 	movw	r2, #4976	; 0x1370
 800ea08:	443a      	add	r2, r7
 800ea0a:	e9c2 3400 	strd	r3, r4, [r2]
 800ea0e:	e039      	b.n	800ea84 <G_q+0xc76c>
  } else if (t216.re == 0.0) {
 800ea10:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ea14:	ed93 7b00 	vldr	d7, [r3]
 800ea18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea20:	d116      	bne.n	800ea50 <G_q+0xc738>
    t13_re = 0.0;
 800ea22:	f04f 0300 	mov.w	r3, #0
 800ea26:	f04f 0400 	mov.w	r4, #0
 800ea2a:	f241 3278 	movw	r2, #4984	; 0x1378
 800ea2e:	443a      	add	r2, r7
 800ea30:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t216.im / 2.0;
 800ea34:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ea38:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea44:	f241 3370 	movw	r3, #4976	; 0x1370
 800ea48:	443b      	add	r3, r7
 800ea4a:	ed83 7b00 	vstr	d7, [r3]
 800ea4e:	e019      	b.n	800ea84 <G_q+0xc76c>
  } else {
    t13_re = t216.re / 2.0;
 800ea50:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ea54:	ed93 6b00 	vldr	d6, [r3]
 800ea58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea60:	f241 3378 	movw	r3, #4984	; 0x1378
 800ea64:	443b      	add	r3, r7
 800ea66:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t216.im / 2.0;
 800ea6a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ea6e:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea7a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ea7e:	443b      	add	r3, r7
 800ea80:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t217.im == 0.0) {
 800ea84:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ea88:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea94:	d116      	bne.n	800eac4 <G_q+0xc7ac>
    t34_re = t217.re / 2.0;
 800ea96:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ea9a:	ed93 6b00 	vldr	d6, [r3]
 800ea9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eaa2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eaa6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eaaa:	443b      	add	r3, r7
 800eaac:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800eab0:	f04f 0300 	mov.w	r3, #0
 800eab4:	f04f 0400 	mov.w	r4, #0
 800eab8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eabc:	443a      	add	r2, r7
 800eabe:	e9c2 3400 	strd	r3, r4, [r2]
 800eac2:	e039      	b.n	800eb38 <G_q+0xc820>
  } else if (t217.re == 0.0) {
 800eac4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eac8:	ed93 7b00 	vldr	d7, [r3]
 800eacc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ead0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ead4:	d116      	bne.n	800eb04 <G_q+0xc7ec>
    t34_re = 0.0;
 800ead6:	f04f 0300 	mov.w	r3, #0
 800eada:	f04f 0400 	mov.w	r4, #0
 800eade:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800eae2:	443a      	add	r2, r7
 800eae4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t217.im / 2.0;
 800eae8:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eaec:	ed93 6b02 	vldr	d6, [r3, #8]
 800eaf0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eaf4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eaf8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eafc:	443b      	add	r3, r7
 800eafe:	ed83 7b00 	vstr	d7, [r3]
 800eb02:	e019      	b.n	800eb38 <G_q+0xc820>
  } else {
    t34_re = t217.re / 2.0;
 800eb04:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eb08:	ed93 6b00 	vldr	d6, [r3]
 800eb0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb14:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb18:	443b      	add	r3, r7
 800eb1a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t217.im / 2.0;
 800eb1e:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800eb22:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb2e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb32:	443b      	add	r3, r7
 800eb34:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t214.re * 0.0 - t214.im * 0.5) - (t215.re * 0.0 - t215.im * 0.5);
 800eb38:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800eb3c:	ed93 7b00 	vldr	d7, [r3]
 800eb40:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 800ecb0 <G_q+0xc998>
 800eb44:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eb48:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800eb4c:	ed93 7b02 	vldr	d7, [r3, #8]
 800eb50:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800eb54:	ee27 7b05 	vmul.f64	d7, d7, d5
 800eb58:	ee36 6b47 	vsub.f64	d6, d6, d7
 800eb5c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800eb60:	ed93 7b00 	vldr	d7, [r3]
 800eb64:	ed9f 5b52 	vldr	d5, [pc, #328]	; 800ecb0 <G_q+0xc998>
 800eb68:	ee27 5b05 	vmul.f64	d5, d7, d5
 800eb6c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800eb70:	ed93 7b02 	vldr	d7, [r3, #8]
 800eb74:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800eb78:	ee27 7b04 	vmul.f64	d7, d7, d4
 800eb7c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eb80:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eb84:	f241 3368 	movw	r3, #4968	; 0x1368
 800eb88:	443b      	add	r3, r7
 800eb8a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t214.re * 0.5 + t214.im * 0.0) - (t215.re * 0.5 + t215.im * 0.0);
 800eb8e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800eb92:	ed93 7b00 	vldr	d7, [r3]
 800eb96:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800eb9a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800eb9e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800eba2:	ed93 7b02 	vldr	d7, [r3, #8]
 800eba6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800ecb0 <G_q+0xc998>
 800ebaa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ebae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ebb2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ebb6:	ed93 7b00 	vldr	d7, [r3]
 800ebba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ebbe:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ebc2:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ebc6:	ed93 7b02 	vldr	d7, [r3, #8]
 800ebca:	ed9f 4b39 	vldr	d4, [pc, #228]	; 800ecb0 <G_q+0xc998>
 800ebce:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ebd2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ebd6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ebda:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ebde:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800ebe2:	f241 3378 	movw	r3, #4984	; 0x1378
 800ebe6:	443b      	add	r3, r7
 800ebe8:	ed93 6b00 	vldr	d6, [r3]
 800ebec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ebf0:	443b      	add	r3, r7
 800ebf2:	ed93 7b00 	vldr	d7, [r3]
 800ebf6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ebfa:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800ecb8 <G_q+0xc9a0>
 800ebfe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ec02:	f241 3378 	movw	r3, #4984	; 0x1378
 800ec06:	443b      	add	r3, r7
 800ec08:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800ec0c:	f241 3370 	movw	r3, #4976	; 0x1370
 800ec10:	443b      	add	r3, r7
 800ec12:	ed93 6b00 	vldr	d6, [r3]
 800ec16:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ec1a:	443b      	add	r3, r7
 800ec1c:	ed93 7b00 	vldr	d7, [r3]
 800ec20:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ec24:	f241 3370 	movw	r3, #4976	; 0x1370
 800ec28:	443b      	add	r3, r7
 800ec2a:	ed83 7b00 	vstr	d7, [r3]
  if (t208.im == 0.0) {
 800ec2e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ec32:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec3e:	d116      	bne.n	800ec6e <G_q+0xc956>
    t74_re = t208.re / 2.0;
 800ec40:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ec44:	ed93 6b00 	vldr	d6, [r3]
 800ec48:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ec4c:	443b      	add	r3, r7
 800ec4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ec52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ec56:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 800ec5a:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800ec5e:	443a      	add	r2, r7
 800ec60:	f04f 0300 	mov.w	r3, #0
 800ec64:	f04f 0400 	mov.w	r4, #0
 800ec68:	e9c2 3400 	strd	r3, r4, [r2]
 800ec6c:	e042      	b.n	800ecf4 <G_q+0xc9dc>
  } else if (t208.re == 0.0) {
 800ec6e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ec72:	ed93 7b00 	vldr	d7, [r3]
 800ec76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec7e:	d11f      	bne.n	800ecc0 <G_q+0xc9a8>
    t74_re = 0.0;
 800ec80:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800ec84:	443a      	add	r2, r7
 800ec86:	f04f 0300 	mov.w	r3, #0
 800ec8a:	f04f 0400 	mov.w	r4, #0
 800ec8e:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t208.im / 2.0;
 800ec92:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ec96:	ed93 6b02 	vldr	d6, [r3, #8]
 800ec9a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ec9e:	443b      	add	r3, r7
 800eca0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eca8:	ed83 7b00 	vstr	d7, [r3]
 800ecac:	e022      	b.n	800ecf4 <G_q+0xc9dc>
 800ecae:	bf00      	nop
	...
 800ecb8:	858a5d48 	.word	0x858a5d48
 800ecbc:	394377ce 	.word	0x394377ce
  } else {
    t74_re = t208.re / 2.0;
 800ecc0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ecc4:	ed93 6b00 	vldr	d6, [r3]
 800ecc8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800eccc:	443b      	add	r3, r7
 800ecce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ecd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ecd6:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t208.im / 2.0;
 800ecda:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ecde:	ed93 6b02 	vldr	d6, [r3, #8]
 800ece2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ece6:	443b      	add	r3, r7
 800ece8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ecec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ecf0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t209.im == 0.0) {
 800ecf4:	4b25      	ldr	r3, [pc, #148]	; (800ed8c <G_q+0xca74>)
 800ecf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ecfa:	443a      	add	r2, r7
 800ecfc:	4413      	add	r3, r2
 800ecfe:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed0a:	d119      	bne.n	800ed40 <G_q+0xca28>
    t34_re = t209.re / 2.0;
 800ed0c:	4b1f      	ldr	r3, [pc, #124]	; (800ed8c <G_q+0xca74>)
 800ed0e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ed12:	443a      	add	r2, r7
 800ed14:	4413      	add	r3, r2
 800ed16:	ed93 6b00 	vldr	d6, [r3]
 800ed1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed22:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ed26:	443b      	add	r3, r7
 800ed28:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ed2c:	f04f 0300 	mov.w	r3, #0
 800ed30:	f04f 0400 	mov.w	r4, #0
 800ed34:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ed38:	443a      	add	r2, r7
 800ed3a:	e9c2 3400 	strd	r3, r4, [r2]
 800ed3e:	e047      	b.n	800edd0 <G_q+0xcab8>
  } else if (t209.re == 0.0) {
 800ed40:	4b12      	ldr	r3, [pc, #72]	; (800ed8c <G_q+0xca74>)
 800ed42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ed46:	443a      	add	r2, r7
 800ed48:	4413      	add	r3, r2
 800ed4a:	ed93 7b00 	vldr	d7, [r3]
 800ed4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed56:	d11b      	bne.n	800ed90 <G_q+0xca78>
    t34_re = 0.0;
 800ed58:	f04f 0300 	mov.w	r3, #0
 800ed5c:	f04f 0400 	mov.w	r4, #0
 800ed60:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ed64:	443a      	add	r2, r7
 800ed66:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t209.im / 2.0;
 800ed6a:	4b08      	ldr	r3, [pc, #32]	; (800ed8c <G_q+0xca74>)
 800ed6c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ed70:	443a      	add	r2, r7
 800ed72:	4413      	add	r3, r2
 800ed74:	ed93 6b02 	vldr	d6, [r3, #8]
 800ed78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ed84:	443b      	add	r3, r7
 800ed86:	ed83 7b00 	vstr	d7, [r3]
 800ed8a:	e021      	b.n	800edd0 <G_q+0xcab8>
 800ed8c:	ffffef10 	.word	0xffffef10
  } else {
    t34_re = t209.re / 2.0;
 800ed90:	4bd7      	ldr	r3, [pc, #860]	; (800f0f0 <G_q+0xcdd8>)
 800ed92:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ed96:	443a      	add	r2, r7
 800ed98:	4413      	add	r3, r2
 800ed9a:	ed93 6b00 	vldr	d6, [r3]
 800ed9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eda2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eda6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800edaa:	443b      	add	r3, r7
 800edac:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t209.im / 2.0;
 800edb0:	4bcf      	ldr	r3, [pc, #828]	; (800f0f0 <G_q+0xcdd8>)
 800edb2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800edb6:	443a      	add	r2, r7
 800edb8:	4413      	add	r3, r2
 800edba:	ed93 6b02 	vldr	d6, [r3, #8]
 800edbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edc6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800edca:	443b      	add	r3, r7
 800edcc:	ed83 7b00 	vstr	d7, [r3]
  }

  t55_re = (t20_re * t23_re - t70_re * t3_im) - (t16_re * t13_re - t16_im *
 800edd0:	f241 3348 	movw	r3, #4936	; 0x1348
 800edd4:	443b      	add	r3, r7
 800edd6:	ed93 6b00 	vldr	d6, [r3]
 800edda:	f241 3330 	movw	r3, #4912	; 0x1330
 800edde:	443b      	add	r3, r7
 800ede0:	ed93 7b00 	vldr	d7, [r3]
 800ede4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ede8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800edec:	443b      	add	r3, r7
 800edee:	ed93 5b00 	vldr	d5, [r3]
 800edf2:	f241 3310 	movw	r3, #4880	; 0x1310
 800edf6:	443b      	add	r3, r7
 800edf8:	ed93 7b00 	vldr	d7, [r3]
 800edfc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ee00:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ee04:	f241 3368 	movw	r3, #4968	; 0x1368
 800ee08:	443b      	add	r3, r7
 800ee0a:	ed93 5b00 	vldr	d5, [r3]
 800ee0e:	f241 3378 	movw	r3, #4984	; 0x1378
 800ee12:	443b      	add	r3, r7
 800ee14:	ed93 7b00 	vldr	d7, [r3]
 800ee18:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ee1c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ee20:	ed93 4b00 	vldr	d4, [r3]
 800ee24:	f241 3370 	movw	r3, #4976	; 0x1370
 800ee28:	443b      	add	r3, r7
 800ee2a:	ed93 7b00 	vldr	d7, [r3]
 800ee2e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ee32:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee36:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ee3a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800ee3e:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t70_re = (t20_re * t3_im + t70_re * t23_re) - (t16_re * t13_im + t16_im *
 800ee42:	f241 3348 	movw	r3, #4936	; 0x1348
 800ee46:	443b      	add	r3, r7
 800ee48:	ed93 6b00 	vldr	d6, [r3]
 800ee4c:	f241 3310 	movw	r3, #4880	; 0x1310
 800ee50:	443b      	add	r3, r7
 800ee52:	ed93 7b00 	vldr	d7, [r3]
 800ee56:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ee5a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ee5e:	443b      	add	r3, r7
 800ee60:	ed93 5b00 	vldr	d5, [r3]
 800ee64:	f241 3330 	movw	r3, #4912	; 0x1330
 800ee68:	443b      	add	r3, r7
 800ee6a:	ed93 7b00 	vldr	d7, [r3]
 800ee6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ee72:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee76:	f241 3368 	movw	r3, #4968	; 0x1368
 800ee7a:	443b      	add	r3, r7
 800ee7c:	ed93 5b00 	vldr	d5, [r3]
 800ee80:	f241 3370 	movw	r3, #4976	; 0x1370
 800ee84:	443b      	add	r3, r7
 800ee86:	ed93 7b00 	vldr	d7, [r3]
 800ee8a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ee8e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ee92:	ed93 4b00 	vldr	d4, [r3]
 800ee96:	f241 3378 	movw	r3, #4984	; 0x1378
 800ee9a:	443b      	add	r3, r7
 800ee9c:	ed93 7b00 	vldr	d7, [r3]
 800eea0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800eea4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800eea8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800eeac:	443b      	add	r3, r7
 800eeae:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eeb2:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  t74_re += t34_re;
 800eeb6:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800eeba:	443b      	add	r3, r7
 800eebc:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800eec0:	443a      	add	r2, r7
 800eec2:	ed92 6b00 	vldr	d6, [r2]
 800eec6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800eeca:	443a      	add	r2, r7
 800eecc:	ed92 7b00 	vldr	d7, [r2]
 800eed0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eed4:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800eed8:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800eedc:	443b      	add	r3, r7
 800eede:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800eee2:	443a      	add	r2, r7
 800eee4:	ed92 6b00 	vldr	d6, [r2]
 800eee8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eeec:	443a      	add	r2, r7
 800eeee:	ed92 7b00 	vldr	d7, [r2]
 800eef2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eef6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800eefa:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800eefe:	ed93 7b00 	vldr	d7, [r3]
 800ef02:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f0e0 <G_q+0xcdc8>
 800ef06:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ef0a:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800ef0e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ef12:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800f0e8 <G_q+0xcdd0>
 800ef16:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ef1a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ef1e:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800ef22:	ed93 7b00 	vldr	d7, [r3]
 800ef26:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800f0e0 <G_q+0xcdc8>
 800ef2a:	ee27 5b05 	vmul.f64	d5, d7, d5
    t241.im * 3.061616997868383E-17);
 800ef2e:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800ef32:	ed93 7b02 	vldr	d7, [r3, #8]
 800ef36:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 800f0e8 <G_q+0xcdd0>
 800ef3a:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800ef3e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ef42:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ef46:	f241 3378 	movw	r3, #4984	; 0x1378
 800ef4a:	443b      	add	r3, r7
 800ef4c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800ef50:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800ef54:	ed93 7b00 	vldr	d7, [r3]
 800ef58:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800f0e8 <G_q+0xcdd0>
 800ef5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ef60:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800ef64:	ed93 7b02 	vldr	d7, [r3, #8]
 800ef68:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800f0e0 <G_q+0xcdc8>
 800ef6c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ef70:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ef74:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800ef78:	ed93 7b00 	vldr	d7, [r3]
 800ef7c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800f0e8 <G_q+0xcdd0>
 800ef80:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t241.im * 0.0);
 800ef84:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800ef88:	ed93 7b02 	vldr	d7, [r3, #8]
 800ef8c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f0e0 <G_q+0xcdc8>
 800ef90:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ef94:	ee35 7b07 	vadd.f64	d7, d5, d7
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800ef98:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ef9c:	f241 3370 	movw	r3, #4976	; 0x1370
 800efa0:	443b      	add	r3, r7
 800efa2:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t238.re * 0.0 - t238.im * 0.5) - (t239.re * 0.0 - t239.im * 0.5);
 800efa6:	f241 0390 	movw	r3, #4240	; 0x1090
 800efaa:	443b      	add	r3, r7
 800efac:	ed93 7b00 	vldr	d7, [r3]
 800efb0:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800f0e0 <G_q+0xcdc8>
 800efb4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800efb8:	f241 0390 	movw	r3, #4240	; 0x1090
 800efbc:	443b      	add	r3, r7
 800efbe:	ed93 7b02 	vldr	d7, [r3, #8]
 800efc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800efc6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800efca:	ee36 6b47 	vsub.f64	d6, d6, d7
 800efce:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800efd2:	ed93 7b00 	vldr	d7, [r3]
 800efd6:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800f0e0 <G_q+0xcdc8>
 800efda:	ee27 5b05 	vmul.f64	d5, d7, d5
 800efde:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800efe2:	ed93 7b02 	vldr	d7, [r3, #8]
 800efe6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800efea:	ee27 7b04 	vmul.f64	d7, d7, d4
 800efee:	ee35 7b47 	vsub.f64	d7, d5, d7
 800eff2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800eff6:	f241 3368 	movw	r3, #4968	; 0x1368
 800effa:	443b      	add	r3, r7
 800effc:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t238.re * 0.5 + t238.im * 0.0) - (t239.re * 0.5 + t239.im * 0.0);
 800f000:	f241 0390 	movw	r3, #4240	; 0x1090
 800f004:	443b      	add	r3, r7
 800f006:	ed93 7b00 	vldr	d7, [r3]
 800f00a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f00e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f012:	f241 0390 	movw	r3, #4240	; 0x1090
 800f016:	443b      	add	r3, r7
 800f018:	ed93 7b02 	vldr	d7, [r3, #8]
 800f01c:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800f0e0 <G_q+0xcdc8>
 800f020:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f024:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f028:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f02c:	ed93 7b00 	vldr	d7, [r3]
 800f030:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f034:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f038:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f03c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f040:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800f0e0 <G_q+0xcdc8>
 800f044:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f048:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f04c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f050:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f054:	ed83 7b00 	vstr	d7, [r3]
  if (t236.im == 0.0) {
 800f058:	f241 0370 	movw	r3, #4208	; 0x1070
 800f05c:	443b      	add	r3, r7
 800f05e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f06a:	d116      	bne.n	800f09a <G_q+0xcd82>
    t20_re = t236.re / 2.0;
 800f06c:	f241 0370 	movw	r3, #4208	; 0x1070
 800f070:	443b      	add	r3, r7
 800f072:	ed93 6b00 	vldr	d6, [r3]
 800f076:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f07a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f07e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f082:	443b      	add	r3, r7
 800f084:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800f088:	f04f 0300 	mov.w	r3, #0
 800f08c:	f04f 0400 	mov.w	r4, #0
 800f090:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800f094:	e9c2 3400 	strd	r3, r4, [r2]
 800f098:	e047      	b.n	800f12a <G_q+0xce12>
  } else if (t236.re == 0.0) {
 800f09a:	f241 0370 	movw	r3, #4208	; 0x1070
 800f09e:	443b      	add	r3, r7
 800f0a0:	ed93 7b00 	vldr	d7, [r3]
 800f0a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ac:	d122      	bne.n	800f0f4 <G_q+0xcddc>
    t20_re = 0.0;
 800f0ae:	f04f 0300 	mov.w	r3, #0
 800f0b2:	f04f 0400 	mov.w	r4, #0
 800f0b6:	f241 3248 	movw	r2, #4936	; 0x1348
 800f0ba:	443a      	add	r2, r7
 800f0bc:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t236.im / 2.0;
 800f0c0:	f241 0370 	movw	r3, #4208	; 0x1070
 800f0c4:	443b      	add	r3, r7
 800f0c6:	ed93 6b02 	vldr	d6, [r3, #8]
 800f0ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f0ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f0d2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f0d6:	ed83 7b00 	vstr	d7, [r3]
 800f0da:	e026      	b.n	800f12a <G_q+0xce12>
 800f0dc:	f3af 8000 	nop.w
	...
 800f0e8:	33145c07 	.word	0x33145c07
 800f0ec:	3c81a626 	.word	0x3c81a626
 800f0f0:	ffffef10 	.word	0xffffef10
  } else {
    t20_re = t236.re / 2.0;
 800f0f4:	f241 0370 	movw	r3, #4208	; 0x1070
 800f0f8:	443b      	add	r3, r7
 800f0fa:	ed93 6b00 	vldr	d6, [r3]
 800f0fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f102:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f106:	f241 3348 	movw	r3, #4936	; 0x1348
 800f10a:	443b      	add	r3, r7
 800f10c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t236.im / 2.0;
 800f110:	f241 0370 	movw	r3, #4208	; 0x1070
 800f114:	443b      	add	r3, r7
 800f116:	ed93 6b02 	vldr	d6, [r3, #8]
 800f11a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f11e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f122:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f126:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t237.im == 0.0) {
 800f12a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f12e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f13a:	d116      	bne.n	800f16a <G_q+0xce52>
    t34_re = t237.re / 2.0;
 800f13c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f140:	ed93 6b00 	vldr	d6, [r3]
 800f144:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f14c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f150:	443b      	add	r3, r7
 800f152:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f156:	f04f 0300 	mov.w	r3, #0
 800f15a:	f04f 0400 	mov.w	r4, #0
 800f15e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f162:	443a      	add	r2, r7
 800f164:	e9c2 3400 	strd	r3, r4, [r2]
 800f168:	e039      	b.n	800f1de <G_q+0xcec6>
  } else if (t237.re == 0.0) {
 800f16a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f16e:	ed93 7b00 	vldr	d7, [r3]
 800f172:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f17a:	d116      	bne.n	800f1aa <G_q+0xce92>
    t34_re = 0.0;
 800f17c:	f04f 0300 	mov.w	r3, #0
 800f180:	f04f 0400 	mov.w	r4, #0
 800f184:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f188:	443a      	add	r2, r7
 800f18a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t237.im / 2.0;
 800f18e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f192:	ed93 6b02 	vldr	d6, [r3, #8]
 800f196:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f19a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f19e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f1a2:	443b      	add	r3, r7
 800f1a4:	ed83 7b00 	vstr	d7, [r3]
 800f1a8:	e019      	b.n	800f1de <G_q+0xcec6>
  } else {
    t34_re = t237.re / 2.0;
 800f1aa:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f1ae:	ed93 6b00 	vldr	d6, [r3]
 800f1b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f1b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f1ba:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f1be:	443b      	add	r3, r7
 800f1c0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t237.im / 2.0;
 800f1c4:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f1c8:	ed93 6b02 	vldr	d6, [r3, #8]
 800f1cc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f1d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f1d4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f1d8:	443b      	add	r3, r7
 800f1da:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t234.re * 3.061616997868383E-17 + t235.re * 3.061616997868383E-17;
 800f1de:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f1e2:	ed93 7b00 	vldr	d7, [r3]
 800f1e6:	ed9f 6be4 	vldr	d6, [pc, #912]	; 800f578 <G_q+0xd260>
 800f1ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f1ee:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f1f2:	ed93 7b00 	vldr	d7, [r3]
 800f1f6:	ed9f 5be0 	vldr	d5, [pc, #896]	; 800f578 <G_q+0xd260>
 800f1fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f1fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f202:	f241 3330 	movw	r3, #4912	; 0x1330
 800f206:	443b      	add	r3, r7
 800f208:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t234.im * 3.061616997868383E-17 + t235.im * 3.061616997868383E-17;
 800f20c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f210:	ed93 7b02 	vldr	d7, [r3, #8]
 800f214:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 800f578 <G_q+0xd260>
 800f218:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f21c:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f220:	ed93 7b02 	vldr	d7, [r3, #8]
 800f224:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 800f578 <G_q+0xd260>
 800f228:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f22c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f230:	f241 3310 	movw	r3, #4880	; 0x1310
 800f234:	443b      	add	r3, r7
 800f236:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t34_re) + 7.498798913309288E-33;
 800f23a:	f241 3348 	movw	r3, #4936	; 0x1348
 800f23e:	443b      	add	r3, r7
 800f240:	ed93 6b00 	vldr	d6, [r3]
 800f244:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f248:	443b      	add	r3, r7
 800f24a:	ed93 7b00 	vldr	d7, [r3]
 800f24e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f252:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 800f580 <G_q+0xd268>
 800f256:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f25a:	f241 3348 	movw	r3, #4936	; 0x1348
 800f25e:	443b      	add	r3, r7
 800f260:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 800f264:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f268:	ed93 6b00 	vldr	d6, [r3]
 800f26c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f270:	443b      	add	r3, r7
 800f272:	ed93 7b00 	vldr	d7, [r3]
 800f276:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f27a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f27e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f282:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f286:	ed93 7b00 	vldr	d7, [r3]
 800f28a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 800f588 <G_q+0xd270>
 800f28e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f292:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f296:	ed93 7b02 	vldr	d7, [r3, #8]
 800f29a:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 800f578 <G_q+0xd260>
 800f29e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f2a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f2a6:	4bbc      	ldr	r3, [pc, #752]	; (800f598 <G_q+0xd280>)
 800f2a8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f2ac:	443a      	add	r2, r7
 800f2ae:	4413      	add	r3, r2
 800f2b0:	ed93 7b00 	vldr	d7, [r3]
 800f2b4:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 800f588 <G_q+0xd270>
 800f2b8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t231.im * 3.061616997868383E-17);
 800f2bc:	4bb6      	ldr	r3, [pc, #728]	; (800f598 <G_q+0xd280>)
 800f2be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f2c2:	443a      	add	r2, r7
 800f2c4:	4413      	add	r3, r2
 800f2c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2ca:	ed9f 4bab 	vldr	d4, [pc, #684]	; 800f578 <G_q+0xd260>
 800f2ce:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f2d2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2d6:	f241 2350 	movw	r3, #4688	; 0x1250
 800f2da:	443b      	add	r3, r7
 800f2dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f2e0:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f2e4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f2e8:	ed93 7b00 	vldr	d7, [r3]
 800f2ec:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800f578 <G_q+0xd260>
 800f2f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f2f4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f2f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2fc:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800f588 <G_q+0xd270>
 800f300:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f304:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f308:	4ba3      	ldr	r3, [pc, #652]	; (800f598 <G_q+0xd280>)
 800f30a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f30e:	443a      	add	r2, r7
 800f310:	4413      	add	r3, r2
 800f312:	ed93 7b00 	vldr	d7, [r3]
 800f316:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800f578 <G_q+0xd260>
 800f31a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t231.im * 0.0);
 800f31e:	4b9e      	ldr	r3, [pc, #632]	; (800f598 <G_q+0xd280>)
 800f320:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f324:	443a      	add	r2, r7
 800f326:	4413      	add	r3, r2
 800f328:	ed93 7b02 	vldr	d7, [r3, #8]
 800f32c:	ed9f 4b96 	vldr	d4, [pc, #600]	; 800f588 <G_q+0xd270>
 800f330:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f334:	ee35 7b07 	vadd.f64	d7, d5, d7
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f338:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800f33c:	443b      	add	r3, r7
 800f33e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f342:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f346:	f241 0350 	movw	r3, #4176	; 0x1050
 800f34a:	443b      	add	r3, r7
 800f34c:	ed93 7b00 	vldr	d7, [r3]
 800f350:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800f590 <G_q+0xd278>
 800f354:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f358:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f35c:	ed93 7b00 	vldr	d7, [r3]
 800f360:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800f590 <G_q+0xd278>
 800f364:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f368:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t13_re * t16_re - t13_im * t16_im)) + (t23_re * t20_re - t3_im *
 800f36c:	f241 3378 	movw	r3, #4984	; 0x1378
 800f370:	443b      	add	r3, r7
 800f372:	ed93 5b00 	vldr	d5, [r3]
 800f376:	f241 3368 	movw	r3, #4968	; 0x1368
 800f37a:	443b      	add	r3, r7
 800f37c:	ed93 7b00 	vldr	d7, [r3]
 800f380:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f384:	f241 3370 	movw	r3, #4976	; 0x1370
 800f388:	443b      	add	r3, r7
 800f38a:	ed93 4b00 	vldr	d4, [r3]
 800f38e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f392:	ed93 7b00 	vldr	d7, [r3]
 800f396:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f39a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f39e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f3a2:	f241 3330 	movw	r3, #4912	; 0x1330
 800f3a6:	443b      	add	r3, r7
 800f3a8:	ed93 5b00 	vldr	d5, [r3]
 800f3ac:	f241 3348 	movw	r3, #4936	; 0x1348
 800f3b0:	443b      	add	r3, r7
 800f3b2:	ed93 7b00 	vldr	d7, [r3]
 800f3b6:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f3ba:	f241 3310 	movw	r3, #4880	; 0x1310
 800f3be:	443b      	add	r3, r7
 800f3c0:	ed93 4b00 	vldr	d4, [r3]
 800f3c4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f3c8:	ed93 7b00 	vldr	d7, [r3]
 800f3cc:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f3d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f3d4:	ee36 7b07 	vadd.f64	d7, d6, d7
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f3d8:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800f3dc:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f590 <G_q+0xd278>
 800f3e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f3e4:	ed83 7b00 	vstr	d7, [r3]
             t20_im)) - 6.123233995736766E-17;
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f3e8:	f241 0350 	movw	r3, #4176	; 0x1050
 800f3ec:	443b      	add	r3, r7
 800f3ee:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3f2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800f590 <G_q+0xd278>
 800f3f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f3fa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f3fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800f402:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800f590 <G_q+0xd278>
 800f406:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f40a:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t13_re * t16_im + t13_im * t16_re)) + (t23_re * t20_im + t3_im *
 800f40e:	f241 3378 	movw	r3, #4984	; 0x1378
 800f412:	443b      	add	r3, r7
 800f414:	ed93 5b00 	vldr	d5, [r3]
 800f418:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f41c:	ed93 7b00 	vldr	d7, [r3]
 800f420:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f424:	f241 3370 	movw	r3, #4976	; 0x1370
 800f428:	443b      	add	r3, r7
 800f42a:	ed93 4b00 	vldr	d4, [r3]
 800f42e:	f241 3368 	movw	r3, #4968	; 0x1368
 800f432:	443b      	add	r3, r7
 800f434:	ed93 7b00 	vldr	d7, [r3]
 800f438:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f43c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f440:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f444:	f241 3330 	movw	r3, #4912	; 0x1330
 800f448:	443b      	add	r3, r7
 800f44a:	ed93 5b00 	vldr	d5, [r3]
 800f44e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f452:	ed93 7b00 	vldr	d7, [r3]
 800f456:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f45a:	f241 3310 	movw	r3, #4880	; 0x1310
 800f45e:	443b      	add	r3, r7
 800f460:	ed93 4b00 	vldr	d4, [r3]
 800f464:	f241 3348 	movw	r3, #4936	; 0x1348
 800f468:	443b      	add	r3, r7
 800f46a:	ed93 7b00 	vldr	d7, [r3]
 800f46e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f472:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f476:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f47a:	f241 3330 	movw	r3, #4912	; 0x1330
 800f47e:	443b      	add	r3, r7
 800f480:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  if (t220.im == 0.0) {
 800f484:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f488:	ed93 7b02 	vldr	d7, [r3, #8]
 800f48c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f494:	d115      	bne.n	800f4c2 <G_q+0xd1aa>
    t12_re = t220.re / 2.0;
 800f496:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f49a:	ed93 6b00 	vldr	d6, [r3]
 800f49e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f4a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f4a6:	f241 3388 	movw	r3, #5000	; 0x1388
 800f4aa:	443b      	add	r3, r7
 800f4ac:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800f4b0:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f4b4:	f04f 0300 	mov.w	r3, #0
 800f4b8:	f04f 0400 	mov.w	r4, #0
 800f4bc:	e9c2 3400 	strd	r3, r4, [r2]
 800f4c0:	e037      	b.n	800f532 <G_q+0xd21a>
  } else if (t220.re == 0.0) {
 800f4c2:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f4c6:	ed93 7b00 	vldr	d7, [r3]
 800f4ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d2:	d115      	bne.n	800f500 <G_q+0xd1e8>
    t12_re = 0.0;
 800f4d4:	f04f 0300 	mov.w	r3, #0
 800f4d8:	f04f 0400 	mov.w	r4, #0
 800f4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4e0:	443a      	add	r2, r7
 800f4e2:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t220.im / 2.0;
 800f4e6:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f4ea:	ed93 6b02 	vldr	d6, [r3, #8]
 800f4ee:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f4f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f4f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f4fa:	ed83 7b00 	vstr	d7, [r3]
 800f4fe:	e018      	b.n	800f532 <G_q+0xd21a>
  } else {
    t12_re = t220.re / 2.0;
 800f500:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f504:	ed93 6b00 	vldr	d6, [r3]
 800f508:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f50c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f510:	f241 3388 	movw	r3, #5000	; 0x1388
 800f514:	443b      	add	r3, r7
 800f516:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t220.im / 2.0;
 800f51a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f51e:	ed93 6b02 	vldr	d6, [r3, #8]
 800f522:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f526:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f52a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f52e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t221.im == 0.0) {
 800f532:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f536:	ed93 7b02 	vldr	d7, [r3, #8]
 800f53a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f542:	d12b      	bne.n	800f59c <G_q+0xd284>
    t34_re = t221.re / 2.0;
 800f544:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f548:	ed93 6b00 	vldr	d6, [r3]
 800f54c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f550:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f554:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f558:	443b      	add	r3, r7
 800f55a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f55e:	f04f 0300 	mov.w	r3, #0
 800f562:	f04f 0400 	mov.w	r4, #0
 800f566:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f56a:	443a      	add	r2, r7
 800f56c:	e9c2 3400 	strd	r3, r4, [r2]
 800f570:	e04e      	b.n	800f610 <G_q+0xd2f8>
 800f572:	bf00      	nop
 800f574:	f3af 8000 	nop.w
 800f578:	33145c07 	.word	0x33145c07
 800f57c:	3c81a626 	.word	0x3c81a626
 800f580:	858a5d48 	.word	0x858a5d48
 800f584:	394377ce 	.word	0x394377ce
	...
 800f590:	33145c07 	.word	0x33145c07
 800f594:	3c91a626 	.word	0x3c91a626
 800f598:	ffffef50 	.word	0xffffef50
  } else if (t221.re == 0.0) {
 800f59c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f5a0:	ed93 7b00 	vldr	d7, [r3]
 800f5a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f5a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ac:	d116      	bne.n	800f5dc <G_q+0xd2c4>
    t34_re = 0.0;
 800f5ae:	f04f 0300 	mov.w	r3, #0
 800f5b2:	f04f 0400 	mov.w	r4, #0
 800f5b6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f5ba:	443a      	add	r2, r7
 800f5bc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t221.im / 2.0;
 800f5c0:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f5c4:	ed93 6b02 	vldr	d6, [r3, #8]
 800f5c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f5d0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f5d4:	443b      	add	r3, r7
 800f5d6:	ed83 7b00 	vstr	d7, [r3]
 800f5da:	e019      	b.n	800f610 <G_q+0xd2f8>
  } else {
    t34_re = t221.re / 2.0;
 800f5dc:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f5e0:	ed93 6b00 	vldr	d6, [r3]
 800f5e4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f5e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f5ec:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f5f0:	443b      	add	r3, r7
 800f5f2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t221.im / 2.0;
 800f5f6:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f5fa:	ed93 6b02 	vldr	d6, [r3, #8]
 800f5fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f606:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f60a:	443b      	add	r3, r7
 800f60c:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800f610:	f241 3388 	movw	r3, #5000	; 0x1388
 800f614:	443b      	add	r3, r7
 800f616:	ed93 6b00 	vldr	d6, [r3]
 800f61a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f61e:	443b      	add	r3, r7
 800f620:	ed93 7b00 	vldr	d7, [r3]
 800f624:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f628:	f241 3388 	movw	r3, #5000	; 0x1388
 800f62c:	443b      	add	r3, r7
 800f62e:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800f632:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f636:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f63a:	ed92 6b00 	vldr	d6, [r2]
 800f63e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f642:	443a      	add	r2, r7
 800f644:	ed92 7b00 	vldr	d7, [r2]
 800f648:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f64c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t222.re * 0.0 - t222.im * 0.5) - (t223.re * 0.0 - t223.im * 0.5);
 800f650:	f241 0310 	movw	r3, #4112	; 0x1010
 800f654:	443b      	add	r3, r7
 800f656:	ed93 7b00 	vldr	d7, [r3]
 800f65a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800f840 <G_q+0xd528>
 800f65e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f662:	f241 0310 	movw	r3, #4112	; 0x1010
 800f666:	443b      	add	r3, r7
 800f668:	ed93 7b02 	vldr	d7, [r3, #8]
 800f66c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f670:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f674:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f678:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f67c:	ed93 7b00 	vldr	d7, [r3]
 800f680:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800f840 <G_q+0xd528>
 800f684:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f688:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f68c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f690:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f694:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f698:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f69c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f6a0:	f241 3378 	movw	r3, #4984	; 0x1378
 800f6a4:	443b      	add	r3, r7
 800f6a6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t222.re * 0.5 + t222.im * 0.0) - (t223.re * 0.5 + t223.im * 0.0);
 800f6aa:	f241 0310 	movw	r3, #4112	; 0x1010
 800f6ae:	443b      	add	r3, r7
 800f6b0:	ed93 7b00 	vldr	d7, [r3]
 800f6b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f6b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f6bc:	f241 0310 	movw	r3, #4112	; 0x1010
 800f6c0:	443b      	add	r3, r7
 800f6c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6c6:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800f840 <G_q+0xd528>
 800f6ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f6ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f6d2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f6d6:	ed93 7b00 	vldr	d7, [r3]
 800f6da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f6de:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f6e2:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f6e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6ea:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800f840 <G_q+0xd528>
 800f6ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f6f2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f6f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f6fa:	f241 3370 	movw	r3, #4976	; 0x1370
 800f6fe:	443b      	add	r3, r7
 800f700:	ed83 7b00 	vstr	d7, [r3]
  if (t226.im == 0.0) {
 800f704:	f241 0330 	movw	r3, #4144	; 0x1030
 800f708:	443b      	add	r3, r7
 800f70a:	ed93 7b02 	vldr	d7, [r3, #8]
 800f70e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f716:	d116      	bne.n	800f746 <G_q+0xd42e>
    t16_re = t226.re / 2.0;
 800f718:	f241 0330 	movw	r3, #4144	; 0x1030
 800f71c:	443b      	add	r3, r7
 800f71e:	ed93 6b00 	vldr	d6, [r3]
 800f722:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f726:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f72a:	f241 3368 	movw	r3, #4968	; 0x1368
 800f72e:	443b      	add	r3, r7
 800f730:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800f734:	f04f 0300 	mov.w	r3, #0
 800f738:	f04f 0400 	mov.w	r4, #0
 800f73c:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800f740:	e9c2 3400 	strd	r3, r4, [r2]
 800f744:	e03b      	b.n	800f7be <G_q+0xd4a6>
  } else if (t226.re == 0.0) {
 800f746:	f241 0330 	movw	r3, #4144	; 0x1030
 800f74a:	443b      	add	r3, r7
 800f74c:	ed93 7b00 	vldr	d7, [r3]
 800f750:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f758:	d116      	bne.n	800f788 <G_q+0xd470>
    t16_re = 0.0;
 800f75a:	f04f 0300 	mov.w	r3, #0
 800f75e:	f04f 0400 	mov.w	r4, #0
 800f762:	f241 3268 	movw	r2, #4968	; 0x1368
 800f766:	443a      	add	r2, r7
 800f768:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t226.im / 2.0;
 800f76c:	f241 0330 	movw	r3, #4144	; 0x1030
 800f770:	443b      	add	r3, r7
 800f772:	ed93 6b02 	vldr	d6, [r3, #8]
 800f776:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f77a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f77e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f782:	ed83 7b00 	vstr	d7, [r3]
 800f786:	e01a      	b.n	800f7be <G_q+0xd4a6>
  } else {
    t16_re = t226.re / 2.0;
 800f788:	f241 0330 	movw	r3, #4144	; 0x1030
 800f78c:	443b      	add	r3, r7
 800f78e:	ed93 6b00 	vldr	d6, [r3]
 800f792:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f796:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f79a:	f241 3368 	movw	r3, #4968	; 0x1368
 800f79e:	443b      	add	r3, r7
 800f7a0:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t226.im / 2.0;
 800f7a4:	f241 0330 	movw	r3, #4144	; 0x1030
 800f7a8:	443b      	add	r3, r7
 800f7aa:	ed93 6b02 	vldr	d6, [r3, #8]
 800f7ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7b6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f7ba:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t227.im == 0.0) {
 800f7be:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f7c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7ce:	d116      	bne.n	800f7fe <G_q+0xd4e6>
    t34_re = t227.re / 2.0;
 800f7d0:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f7d4:	ed93 6b00 	vldr	d6, [r3]
 800f7d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7e0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f7e4:	443b      	add	r3, r7
 800f7e6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f7ea:	f04f 0300 	mov.w	r3, #0
 800f7ee:	f04f 0400 	mov.w	r4, #0
 800f7f2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f7f6:	443a      	add	r2, r7
 800f7f8:	e9c2 3400 	strd	r3, r4, [r2]
 800f7fc:	e03e      	b.n	800f87c <G_q+0xd564>
  } else if (t227.re == 0.0) {
 800f7fe:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f802:	ed93 7b00 	vldr	d7, [r3]
 800f806:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f80a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f80e:	d11b      	bne.n	800f848 <G_q+0xd530>
    t34_re = 0.0;
 800f810:	f04f 0300 	mov.w	r3, #0
 800f814:	f04f 0400 	mov.w	r4, #0
 800f818:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f81c:	443a      	add	r2, r7
 800f81e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t227.im / 2.0;
 800f822:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f826:	ed93 6b02 	vldr	d6, [r3, #8]
 800f82a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f82e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f832:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f836:	443b      	add	r3, r7
 800f838:	ed83 7b00 	vstr	d7, [r3]
 800f83c:	e01e      	b.n	800f87c <G_q+0xd564>
 800f83e:	bf00      	nop
	...
  } else {
    t34_re = t227.re / 2.0;
 800f848:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f84c:	ed93 6b00 	vldr	d6, [r3]
 800f850:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f854:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f858:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f85c:	443b      	add	r3, r7
 800f85e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t227.im / 2.0;
 800f862:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800f866:	ed93 6b02 	vldr	d6, [r3, #8]
 800f86a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f86e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f872:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f876:	443b      	add	r3, r7
 800f878:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t224.re * 0.0 - t224.im * 0.5) - (t225.re * 0.0 - t225.im * 0.5);
 800f87c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f880:	ed93 7b00 	vldr	d7, [r3]
 800f884:	ed9f 6bde 	vldr	d6, [pc, #888]	; 800fc00 <G_q+0xd8e8>
 800f888:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f88c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f890:	ed93 7b02 	vldr	d7, [r3, #8]
 800f894:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f898:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f89c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f8a0:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f8a4:	ed93 7b00 	vldr	d7, [r3]
 800f8a8:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 800fc00 <G_q+0xd8e8>
 800f8ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f8b0:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f8b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8b8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f8bc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f8c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f8c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f8c8:	f241 3348 	movw	r3, #4936	; 0x1348
 800f8cc:	443b      	add	r3, r7
 800f8ce:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t224.re * 0.5 + t224.im * 0.0) - (t225.re * 0.5 + t225.im * 0.0);
 800f8d2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f8d6:	ed93 7b00 	vldr	d7, [r3]
 800f8da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f8de:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f8e2:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800f8e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f8ea:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 800fc00 <G_q+0xd8e8>
 800f8ee:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f8f2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f8f6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f8fa:	ed93 7b00 	vldr	d7, [r3]
 800f8fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f902:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f906:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800f90a:	ed93 7b02 	vldr	d7, [r3, #8]
 800f90e:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 800fc00 <G_q+0xd8e8>
 800f912:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f916:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f91a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f91e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f922:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800f926:	f241 3368 	movw	r3, #4968	; 0x1368
 800f92a:	443b      	add	r3, r7
 800f92c:	ed93 6b00 	vldr	d6, [r3]
 800f930:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f934:	443b      	add	r3, r7
 800f936:	ed93 7b00 	vldr	d7, [r3]
 800f93a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f93e:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 800fc08 <G_q+0xd8f0>
 800f942:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f946:	f241 3368 	movw	r3, #4968	; 0x1368
 800f94a:	443b      	add	r3, r7
 800f94c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800f950:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f954:	ed93 6b00 	vldr	d6, [r3]
 800f958:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f95c:	443b      	add	r3, r7
 800f95e:	ed93 7b00 	vldr	d7, [r3]
 800f962:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f966:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f96a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = t228.re * 3.061616997868383E-17 + t229.re * 3.061616997868383E-17;
 800f96e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800f972:	ed93 7b00 	vldr	d7, [r3]
 800f976:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 800fc10 <G_q+0xd8f8>
 800f97a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f97e:	4ba6      	ldr	r3, [pc, #664]	; (800fc18 <G_q+0xd900>)
 800f980:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f984:	443a      	add	r2, r7
 800f986:	4413      	add	r3, r2
 800f988:	ed93 7b00 	vldr	d7, [r3]
 800f98c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800fc10 <G_q+0xd8f8>
 800f990:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f994:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f998:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800f99c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = t228.im * 3.061616997868383E-17 + t229.im * 3.061616997868383E-17;
 800f9a0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800f9a4:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9a8:	ed9f 6b99 	vldr	d6, [pc, #612]	; 800fc10 <G_q+0xd8f8>
 800f9ac:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f9b0:	4b99      	ldr	r3, [pc, #612]	; (800fc18 <G_q+0xd900>)
 800f9b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f9b6:	443a      	add	r2, r7
 800f9b8:	4413      	add	r3, r2
 800f9ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9be:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800fc10 <G_q+0xd8f8>
 800f9c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f9c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f9ca:	f241 3338 	movw	r3, #4920	; 0x1338
 800f9ce:	443b      	add	r3, r7
 800f9d0:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t12_re * t13_re - t58_im * t13_im) - (t20_re * t16_re - t20_im *
 800f9d4:	f241 3388 	movw	r3, #5000	; 0x1388
 800f9d8:	443b      	add	r3, r7
 800f9da:	ed93 6b00 	vldr	d6, [r3]
 800f9de:	f241 3378 	movw	r3, #4984	; 0x1378
 800f9e2:	443b      	add	r3, r7
 800f9e4:	ed93 7b00 	vldr	d7, [r3]
 800f9e8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f9ec:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f9f0:	ed93 5b00 	vldr	d5, [r3]
 800f9f4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f9f8:	443b      	add	r3, r7
 800f9fa:	ed93 7b00 	vldr	d7, [r3]
 800f9fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fa02:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fa06:	f241 3348 	movw	r3, #4936	; 0x1348
 800fa0a:	443b      	add	r3, r7
 800fa0c:	ed93 5b00 	vldr	d5, [r3]
 800fa10:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa14:	443b      	add	r3, r7
 800fa16:	ed93 7b00 	vldr	d7, [r3]
 800fa1a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fa1e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fa22:	ed93 4b00 	vldr	d4, [r3]
 800fa26:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa2a:	ed93 7b00 	vldr	d7, [r3]
 800fa2e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fa32:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fa36:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fa3a:	f241 3318 	movw	r3, #4888	; 0x1318
 800fa3e:	443b      	add	r3, r7
 800fa40:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t58_im = (t12_re * t13_im + t58_im * t13_re) - (t20_re * t16_im + t20_im *
 800fa44:	f241 3388 	movw	r3, #5000	; 0x1388
 800fa48:	443b      	add	r3, r7
 800fa4a:	ed93 6b00 	vldr	d6, [r3]
 800fa4e:	f241 3370 	movw	r3, #4976	; 0x1370
 800fa52:	443b      	add	r3, r7
 800fa54:	ed93 7b00 	vldr	d7, [r3]
 800fa58:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fa5c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fa60:	ed93 5b00 	vldr	d5, [r3]
 800fa64:	f241 3378 	movw	r3, #4984	; 0x1378
 800fa68:	443b      	add	r3, r7
 800fa6a:	ed93 7b00 	vldr	d7, [r3]
 800fa6e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fa72:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fa76:	f241 3348 	movw	r3, #4936	; 0x1348
 800fa7a:	443b      	add	r3, r7
 800fa7c:	ed93 5b00 	vldr	d5, [r3]
 800fa80:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa84:	ed93 7b00 	vldr	d7, [r3]
 800fa88:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fa8c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fa90:	ed93 4b00 	vldr	d4, [r3]
 800fa94:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa98:	443b      	add	r3, r7
 800fa9a:	ed93 7b00 	vldr	d7, [r3]
 800fa9e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800faa2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800faa6:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800faaa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800faae:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t218.im == 0.0) {
 800fab2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fab6:	ed93 7b02 	vldr	d7, [r3, #8]
 800faba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fac2:	d116      	bne.n	800faf2 <G_q+0xd7da>
    t34_re = t218.re / 2.0;
 800fac4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fac8:	ed93 6b00 	vldr	d6, [r3]
 800facc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fad0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fad4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fad8:	443b      	add	r3, r7
 800fada:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fade:	f04f 0300 	mov.w	r3, #0
 800fae2:	f04f 0400 	mov.w	r4, #0
 800fae6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800faea:	443a      	add	r2, r7
 800faec:	e9c2 3400 	strd	r3, r4, [r2]
 800faf0:	e039      	b.n	800fb66 <G_q+0xd84e>
  } else if (t218.re == 0.0) {
 800faf2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800faf6:	ed93 7b00 	vldr	d7, [r3]
 800fafa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb02:	d116      	bne.n	800fb32 <G_q+0xd81a>
    t34_re = 0.0;
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	f04f 0400 	mov.w	r4, #0
 800fb0c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fb10:	443a      	add	r2, r7
 800fb12:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t218.im / 2.0;
 800fb16:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fb1a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fb1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb26:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fb2a:	443b      	add	r3, r7
 800fb2c:	ed83 7b00 	vstr	d7, [r3]
 800fb30:	e019      	b.n	800fb66 <G_q+0xd84e>
  } else {
    t34_re = t218.re / 2.0;
 800fb32:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fb36:	ed93 6b00 	vldr	d6, [r3]
 800fb3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb42:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fb46:	443b      	add	r3, r7
 800fb48:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t218.im / 2.0;
 800fb4c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fb50:	ed93 6b02 	vldr	d6, [r3, #8]
 800fb54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb5c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fb60:	443b      	add	r3, r7
 800fb62:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t219.im == 0.0) {
 800fb66:	4b2d      	ldr	r3, [pc, #180]	; (800fc1c <G_q+0xd904>)
 800fb68:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fb6c:	443a      	add	r2, r7
 800fb6e:	4413      	add	r3, r2
 800fb70:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fb78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb7c:	d119      	bne.n	800fbb2 <G_q+0xd89a>
    t13_re = t219.re / 2.0;
 800fb7e:	4b27      	ldr	r3, [pc, #156]	; (800fc1c <G_q+0xd904>)
 800fb80:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fb84:	443a      	add	r2, r7
 800fb86:	4413      	add	r3, r2
 800fb88:	ed93 6b00 	vldr	d6, [r3]
 800fb8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb94:	f241 3378 	movw	r3, #4984	; 0x1378
 800fb98:	443b      	add	r3, r7
 800fb9a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800fb9e:	f04f 0300 	mov.w	r3, #0
 800fba2:	f04f 0400 	mov.w	r4, #0
 800fba6:	f241 3270 	movw	r2, #4976	; 0x1370
 800fbaa:	443a      	add	r2, r7
 800fbac:	e9c2 3400 	strd	r3, r4, [r2]
 800fbb0:	e056      	b.n	800fc60 <G_q+0xd948>
  } else if (t219.re == 0.0) {
 800fbb2:	4b1a      	ldr	r3, [pc, #104]	; (800fc1c <G_q+0xd904>)
 800fbb4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fbb8:	443a      	add	r2, r7
 800fbba:	4413      	add	r3, r2
 800fbbc:	ed93 7b00 	vldr	d7, [r3]
 800fbc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fbc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc8:	d12a      	bne.n	800fc20 <G_q+0xd908>
    t13_re = 0.0;
 800fbca:	f04f 0300 	mov.w	r3, #0
 800fbce:	f04f 0400 	mov.w	r4, #0
 800fbd2:	f241 3278 	movw	r2, #4984	; 0x1378
 800fbd6:	443a      	add	r2, r7
 800fbd8:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t219.im / 2.0;
 800fbdc:	4b0f      	ldr	r3, [pc, #60]	; (800fc1c <G_q+0xd904>)
 800fbde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fbe2:	443a      	add	r2, r7
 800fbe4:	4413      	add	r3, r2
 800fbe6:	ed93 6b02 	vldr	d6, [r3, #8]
 800fbea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fbee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fbf2:	f241 3370 	movw	r3, #4976	; 0x1370
 800fbf6:	443b      	add	r3, r7
 800fbf8:	ed83 7b00 	vstr	d7, [r3]
 800fbfc:	e030      	b.n	800fc60 <G_q+0xd948>
 800fbfe:	bf00      	nop
	...
 800fc08:	858a5d48 	.word	0x858a5d48
 800fc0c:	394377ce 	.word	0x394377ce
 800fc10:	33145c07 	.word	0x33145c07
 800fc14:	3c81a626 	.word	0x3c81a626
 800fc18:	ffffef30 	.word	0xffffef30
 800fc1c:	ffffecf0 	.word	0xffffecf0
  } else {
    t13_re = t219.re / 2.0;
 800fc20:	4be1      	ldr	r3, [pc, #900]	; (800ffa8 <G_q+0xdc90>)
 800fc22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc26:	443a      	add	r2, r7
 800fc28:	4413      	add	r3, r2
 800fc2a:	ed93 6b00 	vldr	d6, [r3]
 800fc2e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc36:	f241 3378 	movw	r3, #4984	; 0x1378
 800fc3a:	443b      	add	r3, r7
 800fc3c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t219.im / 2.0;
 800fc40:	4bd9      	ldr	r3, [pc, #868]	; (800ffa8 <G_q+0xdc90>)
 800fc42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc46:	443a      	add	r2, r7
 800fc48:	4413      	add	r3, r2
 800fc4a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fc4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fc52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fc56:	f241 3370 	movw	r3, #4976	; 0x1370
 800fc5a:	443b      	add	r3, r7
 800fc5c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t60_re * t72_re - t76_re * t23_re) - (t12_im * t85_im - b_t10_re *
 800fc60:	f241 2250 	movw	r2, #4688	; 0x1250
 800fc64:	443a      	add	r2, r7
 800fc66:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800fc6a:	ed92 6b00 	vldr	d6, [r2]
 800fc6e:	ed93 7b00 	vldr	d7, [r3]
 800fc72:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fc76:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800fc7a:	443b      	add	r3, r7
 800fc7c:	ed93 5b00 	vldr	d5, [r3]
 800fc80:	f241 3330 	movw	r3, #4912	; 0x1330
 800fc84:	443b      	add	r3, r7
 800fc86:	ed93 7b00 	vldr	d7, [r3]
 800fc8a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fc8e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fc92:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800fc96:	ed93 5b00 	vldr	d5, [r3]
 800fc9a:	f241 3318 	movw	r3, #4888	; 0x1318
 800fc9e:	443b      	add	r3, r7
 800fca0:	ed93 7b00 	vldr	d7, [r3]
 800fca4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fca8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fcac:	f241 3238 	movw	r2, #4920	; 0x1338
 800fcb0:	443a      	add	r2, r7
 800fcb2:	ed92 4b00 	vldr	d4, [r2]
 800fcb6:	ed93 7b00 	vldr	d7, [r3]
 800fcba:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fcbe:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fcc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fcc6:	f241 3368 	movw	r3, #4968	; 0x1368
 800fcca:	443b      	add	r3, r7
 800fccc:	ed83 7b00 	vstr	d7, [r3]
    t58_im);
  t76_re = (t60_re * t23_re + t76_re * t72_re) - (t12_im * t58_im + b_t10_re *
 800fcd0:	f241 2350 	movw	r3, #4688	; 0x1250
 800fcd4:	443b      	add	r3, r7
 800fcd6:	ed93 6b00 	vldr	d6, [r3]
 800fcda:	f241 3330 	movw	r3, #4912	; 0x1330
 800fcde:	443b      	add	r3, r7
 800fce0:	ed93 7b00 	vldr	d7, [r3]
 800fce4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fce8:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800fcec:	443a      	add	r2, r7
 800fcee:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800fcf2:	ed92 5b00 	vldr	d5, [r2]
 800fcf6:	ed93 7b00 	vldr	d7, [r3]
 800fcfa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fcfe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fd02:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fd06:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800fd0a:	ed92 5b00 	vldr	d5, [r2]
 800fd0e:	ed93 7b00 	vldr	d7, [r3]
 800fd12:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fd16:	f241 3338 	movw	r3, #4920	; 0x1338
 800fd1a:	443b      	add	r3, r7
 800fd1c:	ed93 4b00 	vldr	d4, [r3]
 800fd20:	f241 3318 	movw	r3, #4888	; 0x1318
 800fd24:	443b      	add	r3, r7
 800fd26:	ed93 7b00 	vldr	d7, [r3]
 800fd2a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fd2e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fd32:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800fd36:	443b      	add	r3, r7
 800fd38:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fd3c:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t34_re += t13_re;
 800fd40:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fd44:	443b      	add	r3, r7
 800fd46:	ed93 6b00 	vldr	d6, [r3]
 800fd4a:	f241 3378 	movw	r3, #4984	; 0x1378
 800fd4e:	443b      	add	r3, r7
 800fd50:	ed93 7b00 	vldr	d7, [r3]
 800fd54:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fd58:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fd5c:	443b      	add	r3, r7
 800fd5e:	ed83 7b00 	vstr	d7, [r3]
  t34_im += t13_im;
 800fd62:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fd66:	443b      	add	r3, r7
 800fd68:	ed93 6b00 	vldr	d6, [r3]
 800fd6c:	f241 3370 	movw	r3, #4976	; 0x1370
 800fd70:	443b      	add	r3, r7
 800fd72:	ed93 7b00 	vldr	d7, [r3]
 800fd76:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fd7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fd7e:	443b      	add	r3, r7
 800fd80:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800fd84:	4b89      	ldr	r3, [pc, #548]	; (800ffac <G_q+0xdc94>)
 800fd86:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fd8a:	443a      	add	r2, r7
 800fd8c:	4413      	add	r3, r2
 800fd8e:	ed93 7b00 	vldr	d7, [r3]
 800fd92:	eeb1 6b47 	vneg.f64	d6, d7
 800fd96:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800fd9a:	443b      	add	r3, r7
 800fd9c:	ed93 5b00 	vldr	d5, [r3]
 800fda0:	f241 3308 	movw	r3, #4872	; 0x1308
 800fda4:	443b      	add	r3, r7
 800fda6:	ed93 7b00 	vldr	d7, [r3]
 800fdaa:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fdae:	f241 2358 	movw	r3, #4696	; 0x1258
 800fdb2:	443b      	add	r3, r7
 800fdb4:	ed93 4b00 	vldr	d4, [r3]
 800fdb8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800fdbc:	ed93 7b00 	vldr	d7, [r3]
 800fdc0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fdc4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fdc8:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800ff98 <G_q+0xdc80>
 800fdcc:	ee27 5b05 	vmul.f64	d5, d7, d5
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800fdd0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800fdd4:	443b      	add	r3, r7
 800fdd6:	ed93 4b00 	vldr	d4, [r3]
 800fdda:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800fdde:	443b      	add	r3, r7
 800fde0:	ed93 7b00 	vldr	d7, [r3]
 800fde4:	ee24 4b07 	vmul.f64	d4, d4, d7
 800fde8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800fdec:	443b      	add	r3, r7
 800fdee:	ed93 3b00 	vldr	d3, [r3]
 800fdf2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800fdf6:	443b      	add	r3, r7
 800fdf8:	ed93 7b00 	vldr	d7, [r3]
 800fdfc:	ee23 7b07 	vmul.f64	d7, d3, d7
 800fe00:	ee34 7b47 	vsub.f64	d7, d4, d7
 800fe04:	ed9f 4b66 	vldr	d4, [pc, #408]	; 800ffa0 <G_q+0xdc88>
 800fe08:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800fe0c:	ee35 5b47 	vsub.f64	d5, d5, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800fe10:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800fe14:	443b      	add	r3, r7
 800fe16:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800fe1a:	ed92 4b00 	vldr	d4, [r2]
 800fe1e:	ed93 7b00 	vldr	d7, [r3]
 800fe22:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800fe26:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800fe2a:	443a      	add	r2, r7
 800fe2c:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800fe30:	443b      	add	r3, r7
 800fe32:	ed92 3b00 	vldr	d3, [r2]
 800fe36:	ed93 7b00 	vldr	d7, [r3]
 800fe3a:	ee23 7b07 	vmul.f64	d7, d3, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800fe3e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800fe42:	ed9f 4b57 	vldr	d4, [pc, #348]	; 800ffa0 <G_q+0xdc88>
 800fe46:	ee27 7b04 	vmul.f64	d7, d7, d4
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 800fe4a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800fe4e:	f241 3368 	movw	r3, #4968	; 0x1368
 800fe52:	443b      	add	r3, r7
 800fe54:	ed93 4b00 	vldr	d4, [r3]
 800fe58:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fe5c:	443b      	add	r3, r7
 800fe5e:	ed93 7b00 	vldr	d7, [r3]
 800fe62:	ee24 4b07 	vmul.f64	d4, d4, d7
 800fe66:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800fe6a:	443b      	add	r3, r7
 800fe6c:	ed93 3b00 	vldr	d3, [r3]
 800fe70:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fe74:	443b      	add	r3, r7
 800fe76:	ed93 7b00 	vldr	d7, [r3]
 800fe7a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800fe7e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_im) * 0.0215);
 800fe82:	ed9f 4b45 	vldr	d4, [pc, #276]	; 800ff98 <G_q+0xdc80>
 800fe86:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 800fe8a:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 800fe8e:	4b48      	ldr	r3, [pc, #288]	; (800ffb0 <G_q+0xdc98>)
 800fe90:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe94:	443a      	add	r2, r7
 800fe96:	4413      	add	r3, r2
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	3330      	adds	r3, #48	; 0x30
 800fe9c:	ee26 7b07 	vmul.f64	d7, d6, d7
 800fea0:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800fea4:	4b41      	ldr	r3, [pc, #260]	; (800ffac <G_q+0xdc94>)
 800fea6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800feaa:	443a      	add	r2, r7
 800feac:	4413      	add	r3, r2
 800feae:	ed93 7b00 	vldr	d7, [r3]
 800feb2:	eeb1 6b47 	vneg.f64	d6, d7
 800feb6:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800feba:	443b      	add	r3, r7
 800febc:	ed93 5b00 	vldr	d5, [r3]
 800fec0:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800fec4:	ed93 7b00 	vldr	d7, [r3]
 800fec8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fecc:	f241 2358 	movw	r3, #4696	; 0x1258
 800fed0:	443b      	add	r3, r7
 800fed2:	ed93 4b00 	vldr	d4, [r3]
 800fed6:	f241 3308 	movw	r3, #4872	; 0x1308
 800feda:	443b      	add	r3, r7
 800fedc:	ed93 7b00 	vldr	d7, [r3]
 800fee0:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fee4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fee8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 800ff98 <G_q+0xdc80>
 800feec:	ee27 5b05 	vmul.f64	d5, d7, d5
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800fef0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800fef4:	443b      	add	r3, r7
 800fef6:	ed93 4b00 	vldr	d4, [r3]
 800fefa:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800fefe:	443b      	add	r3, r7
 800ff00:	ed93 7b00 	vldr	d7, [r3]
 800ff04:	ee24 4b07 	vmul.f64	d4, d4, d7
 800ff08:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800ff0c:	443b      	add	r3, r7
 800ff0e:	ed93 3b00 	vldr	d3, [r3]
 800ff12:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800ff16:	443b      	add	r3, r7
 800ff18:	ed93 7b00 	vldr	d7, [r3]
 800ff1c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ff20:	ee34 7b07 	vadd.f64	d7, d4, d7
 800ff24:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 800ffa0 <G_q+0xdc88>
 800ff28:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800ff2c:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800ff30:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ff34:	443b      	add	r3, r7
 800ff36:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 800ff3a:	ed92 4b00 	vldr	d4, [r2]
 800ff3e:	ed93 7b00 	vldr	d7, [r3]
 800ff42:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800ff46:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ff4a:	443a      	add	r2, r7
 800ff4c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ff50:	443b      	add	r3, r7
 800ff52:	ed92 3b00 	vldr	d3, [r2]
 800ff56:	ed93 7b00 	vldr	d7, [r3]
 800ff5a:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800ff5e:	ee34 7b07 	vadd.f64	d7, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800ff62:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 800ffa0 <G_q+0xdc88>
 800ff66:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 800ff6a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800ff6e:	f241 3368 	movw	r3, #4968	; 0x1368
 800ff72:	443b      	add	r3, r7
 800ff74:	ed93 4b00 	vldr	d4, [r3]
 800ff78:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ff7c:	443b      	add	r3, r7
 800ff7e:	ed93 7b00 	vldr	d7, [r3]
 800ff82:	ee24 4b07 	vmul.f64	d4, d4, d7
 800ff86:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ff8a:	443b      	add	r3, r7
 800ff8c:	ed93 3b00 	vldr	d3, [r3]
 800ff90:	e010      	b.n	800ffb4 <G_q+0xdc9c>
 800ff92:	bf00      	nop
 800ff94:	f3af 8000 	nop.w
 800ff98:	9374bc6a 	.word	0x9374bc6a
 800ff9c:	3f960418 	.word	0x3f960418
 800ffa0:	2ba953a1 	.word	0x2ba953a1
 800ffa4:	3c3848f9 	.word	0x3c3848f9
 800ffa8:	ffffecf0 	.word	0xffffecf0
 800ffac:	ffffec58 	.word	0xffffec58
 800ffb0:	ffffec34 	.word	0xffffec34
 800ffb4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ffb8:	443b      	add	r3, r7
 800ffba:	ed93 7b00 	vldr	d7, [r3]
 800ffbe:	ee23 7b07 	vmul.f64	d7, d3, d7
 800ffc2:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_re) * 0.0215);
 800ffc6:	ed9f 4bd2 	vldr	d4, [pc, #840]	; 8010310 <G_q+0xdff8>
 800ffca:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 800ffce:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 800ffd2:	4bd5      	ldr	r3, [pc, #852]	; (8010328 <G_q+0xe010>)
 800ffd4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ffd8:	443a      	add	r2, r7
 800ffda:	4413      	add	r3, r2
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	3330      	adds	r3, #48	; 0x30
 800ffe0:	ee26 7b07 	vmul.f64	d7, d6, d7
 800ffe4:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t264.im == 0.0) {
 800ffe8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800ffec:	ed93 7b02 	vldr	d7, [r3, #8]
 800fff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff8:	d116      	bne.n	8010028 <G_q+0xdd10>
    t70_im = t264.re / 2.0;
 800fffa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800fffe:	ed93 6b00 	vldr	d6, [r3]
 8010002:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010006:	443b      	add	r3, r7
 8010008:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801000c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010010:	ed83 7b00 	vstr	d7, [r3]
    t43_im = 0.0;
 8010014:	f04f 0300 	mov.w	r3, #0
 8010018:	f04f 0400 	mov.w	r4, #0
 801001c:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8010020:	443a      	add	r2, r7
 8010022:	e9c2 3400 	strd	r3, r4, [r2]
 8010026:	e039      	b.n	801009c <G_q+0xdd84>
  } else if (t264.re == 0.0) {
 8010028:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801002c:	ed93 7b00 	vldr	d7, [r3]
 8010030:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010038:	d116      	bne.n	8010068 <G_q+0xdd50>
    t70_im = 0.0;
 801003a:	f241 22c8 	movw	r2, #4808	; 0x12c8
 801003e:	443a      	add	r2, r7
 8010040:	f04f 0300 	mov.w	r3, #0
 8010044:	f04f 0400 	mov.w	r4, #0
 8010048:	e9c2 3400 	strd	r3, r4, [r2]
    t43_im = t264.im / 2.0;
 801004c:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010050:	ed93 6b02 	vldr	d6, [r3, #8]
 8010054:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010058:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801005c:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010060:	443b      	add	r3, r7
 8010062:	ed83 7b00 	vstr	d7, [r3]
 8010066:	e019      	b.n	801009c <G_q+0xdd84>
  } else {
    t70_im = t264.re / 2.0;
 8010068:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801006c:	ed93 6b00 	vldr	d6, [r3]
 8010070:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010074:	443b      	add	r3, r7
 8010076:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801007a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801007e:	ed83 7b00 	vstr	d7, [r3]
    t43_im = t264.im / 2.0;
 8010082:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010086:	ed93 6b02 	vldr	d6, [r3, #8]
 801008a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801008e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010092:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010096:	443b      	add	r3, r7
 8010098:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t265.im == 0.0) {
 801009c:	4ba3      	ldr	r3, [pc, #652]	; (801032c <G_q+0xe014>)
 801009e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80100a2:	443a      	add	r2, r7
 80100a4:	4413      	add	r3, r2
 80100a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80100aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b2:	d118      	bne.n	80100e6 <G_q+0xddce>
    t76_re = t265.re / 2.0;
 80100b4:	4b9d      	ldr	r3, [pc, #628]	; (801032c <G_q+0xe014>)
 80100b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80100ba:	443a      	add	r2, r7
 80100bc:	4413      	add	r3, r2
 80100be:	ed93 6b00 	vldr	d6, [r3]
 80100c2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80100c6:	443b      	add	r3, r7
 80100c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80100cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80100d0:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 80100d4:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 80100d8:	f04f 0300 	mov.w	r3, #0
 80100dc:	f04f 0400 	mov.w	r4, #0
 80100e0:	e9c2 3400 	strd	r3, r4, [r2]
 80100e4:	e043      	b.n	801016e <G_q+0xde56>
  } else if (t265.re == 0.0) {
 80100e6:	4b91      	ldr	r3, [pc, #580]	; (801032c <G_q+0xe014>)
 80100e8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80100ec:	443a      	add	r2, r7
 80100ee:	4413      	add	r3, r2
 80100f0:	ed93 7b00 	vldr	d7, [r3]
 80100f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80100f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100fc:	d118      	bne.n	8010130 <G_q+0xde18>
    t76_re = 0.0;
 80100fe:	f241 22a8 	movw	r2, #4776	; 0x12a8
 8010102:	443a      	add	r2, r7
 8010104:	f04f 0300 	mov.w	r3, #0
 8010108:	f04f 0400 	mov.w	r4, #0
 801010c:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t265.im / 2.0;
 8010110:	4b86      	ldr	r3, [pc, #536]	; (801032c <G_q+0xe014>)
 8010112:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010116:	443a      	add	r2, r7
 8010118:	4413      	add	r3, r2
 801011a:	ed93 6b02 	vldr	d6, [r3, #8]
 801011e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010122:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010126:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801012a:	ed83 7b00 	vstr	d7, [r3]
 801012e:	e01e      	b.n	801016e <G_q+0xde56>
  } else {
    t76_re = t265.re / 2.0;
 8010130:	4b7e      	ldr	r3, [pc, #504]	; (801032c <G_q+0xe014>)
 8010132:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010136:	443a      	add	r2, r7
 8010138:	4413      	add	r3, r2
 801013a:	ed93 6b00 	vldr	d6, [r3]
 801013e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8010142:	443b      	add	r3, r7
 8010144:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010148:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801014c:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t265.im / 2.0;
 8010150:	4b76      	ldr	r3, [pc, #472]	; (801032c <G_q+0xe014>)
 8010152:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010156:	443a      	add	r2, r7
 8010158:	4413      	add	r3, r2
 801015a:	ed93 6b02 	vldr	d6, [r3, #8]
 801015e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010162:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010166:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801016a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 801016e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010172:	ed93 7b00 	vldr	d7, [r3]
 8010176:	ed9f 6b68 	vldr	d6, [pc, #416]	; 8010318 <G_q+0xe000>
 801017a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801017e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010182:	ed93 7b02 	vldr	d7, [r3, #8]
 8010186:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8010320 <G_q+0xe008>
 801018a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801018e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010192:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010196:	ed93 7b00 	vldr	d7, [r3]
 801019a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8010318 <G_q+0xe000>
 801019e:	ee27 5b05 	vmul.f64	d5, d7, d5
    t253.im * 3.061616997868383E-17);
 80101a2:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80101a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80101aa:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 8010320 <G_q+0xe008>
 80101ae:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 80101b2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80101b6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80101ba:	f241 3368 	movw	r3, #4968	; 0x1368
 80101be:	443b      	add	r3, r7
 80101c0:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 80101c4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80101c8:	ed93 7b00 	vldr	d7, [r3]
 80101cc:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8010320 <G_q+0xe008>
 80101d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80101d4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 80101d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80101dc:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8010318 <G_q+0xe000>
 80101e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80101e4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80101e8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80101ec:	ed93 7b00 	vldr	d7, [r3]
 80101f0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 8010320 <G_q+0xe008>
 80101f4:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t253.im * 0.0);
 80101f8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80101fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8010200:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8010318 <G_q+0xe000>
 8010204:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010208:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 801020c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010210:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010214:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t250.re * 0.0 - t250.im * 0.5) - (t251.re * 0.0 - t251.im * 0.5);
 8010218:	f241 03f0 	movw	r3, #4336	; 0x10f0
 801021c:	443b      	add	r3, r7
 801021e:	ed93 7b00 	vldr	d7, [r3]
 8010222:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8010318 <G_q+0xe000>
 8010226:	ee27 6b06 	vmul.f64	d6, d7, d6
 801022a:	f241 03f0 	movw	r3, #4336	; 0x10f0
 801022e:	443b      	add	r3, r7
 8010230:	ed93 7b02 	vldr	d7, [r3, #8]
 8010234:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010238:	ee27 7b05 	vmul.f64	d7, d7, d5
 801023c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010240:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8010244:	ed93 7b00 	vldr	d7, [r3]
 8010248:	ed9f 5b33 	vldr	d5, [pc, #204]	; 8010318 <G_q+0xe000>
 801024c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010250:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8010254:	ed93 7b02 	vldr	d7, [r3, #8]
 8010258:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801025c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010260:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010264:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010268:	f241 3348 	movw	r3, #4936	; 0x1348
 801026c:	443b      	add	r3, r7
 801026e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t250.re * 0.5 + t250.im * 0.0) - (t251.re * 0.5 + t251.im * 0.0);
 8010272:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010276:	443b      	add	r3, r7
 8010278:	ed93 7b00 	vldr	d7, [r3]
 801027c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010280:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010284:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010288:	443b      	add	r3, r7
 801028a:	ed93 7b02 	vldr	d7, [r3, #8]
 801028e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8010318 <G_q+0xe000>
 8010292:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010296:	ee36 6b07 	vadd.f64	d6, d6, d7
 801029a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801029e:	ed93 7b00 	vldr	d7, [r3]
 80102a2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80102a6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80102aa:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80102ae:	ed93 7b02 	vldr	d7, [r3, #8]
 80102b2:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8010318 <G_q+0xe000>
 80102b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80102ba:	ee35 7b07 	vadd.f64	d7, d5, d7
 80102be:	ee36 7b47 	vsub.f64	d7, d6, d7
 80102c2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80102c6:	ed83 7b00 	vstr	d7, [r3]
  if (t248.im == 0.0) {
 80102ca:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80102ce:	443b      	add	r3, r7
 80102d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80102d4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102dc:	d128      	bne.n	8010330 <G_q+0xe018>
    t12_re = t248.re / 2.0;
 80102de:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80102e2:	443b      	add	r3, r7
 80102e4:	ed93 6b00 	vldr	d6, [r3]
 80102e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80102ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102f0:	f241 3388 	movw	r3, #5000	; 0x1388
 80102f4:	443b      	add	r3, r7
 80102f6:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 80102fa:	f04f 0300 	mov.w	r3, #0
 80102fe:	f04f 0400 	mov.w	r4, #0
 8010302:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8010306:	e9c2 3400 	strd	r3, r4, [r2]
 801030a:	e04d      	b.n	80103a8 <G_q+0xe090>
 801030c:	f3af 8000 	nop.w
 8010310:	9374bc6a 	.word	0x9374bc6a
 8010314:	3f960418 	.word	0x3f960418
	...
 8010320:	33145c07 	.word	0x33145c07
 8010324:	3c81a626 	.word	0x3c81a626
 8010328:	ffffec34 	.word	0xffffec34
 801032c:	ffffed10 	.word	0xffffed10
  } else if (t248.re == 0.0) {
 8010330:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010334:	443b      	add	r3, r7
 8010336:	ed93 7b00 	vldr	d7, [r3]
 801033a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801033e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010342:	d116      	bne.n	8010372 <G_q+0xe05a>
    t12_re = 0.0;
 8010344:	f04f 0300 	mov.w	r3, #0
 8010348:	f04f 0400 	mov.w	r4, #0
 801034c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010350:	443a      	add	r2, r7
 8010352:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t248.im / 2.0;
 8010356:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801035a:	443b      	add	r3, r7
 801035c:	ed93 6b02 	vldr	d6, [r3, #8]
 8010360:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010364:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010368:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801036c:	ed83 7b00 	vstr	d7, [r3]
 8010370:	e01a      	b.n	80103a8 <G_q+0xe090>
  } else {
    t12_re = t248.re / 2.0;
 8010372:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010376:	443b      	add	r3, r7
 8010378:	ed93 6b00 	vldr	d6, [r3]
 801037c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010380:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010384:	f241 3388 	movw	r3, #5000	; 0x1388
 8010388:	443b      	add	r3, r7
 801038a:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t248.im / 2.0;
 801038e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010392:	443b      	add	r3, r7
 8010394:	ed93 6b02 	vldr	d6, [r3, #8]
 8010398:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801039c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103a0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80103a4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t249.im == 0.0) {
 80103a8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80103ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80103b0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103b8:	d116      	bne.n	80103e8 <G_q+0xe0d0>
    t34_re = t249.re / 2.0;
 80103ba:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80103be:	ed93 6b00 	vldr	d6, [r3]
 80103c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80103c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103ca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80103ce:	443b      	add	r3, r7
 80103d0:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80103d4:	f04f 0300 	mov.w	r3, #0
 80103d8:	f04f 0400 	mov.w	r4, #0
 80103dc:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80103e0:	443a      	add	r2, r7
 80103e2:	e9c2 3400 	strd	r3, r4, [r2]
 80103e6:	e039      	b.n	801045c <G_q+0xe144>
  } else if (t249.re == 0.0) {
 80103e8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80103ec:	ed93 7b00 	vldr	d7, [r3]
 80103f0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103f8:	d116      	bne.n	8010428 <G_q+0xe110>
    t34_re = 0.0;
 80103fa:	f04f 0300 	mov.w	r3, #0
 80103fe:	f04f 0400 	mov.w	r4, #0
 8010402:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010406:	443a      	add	r2, r7
 8010408:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t249.im / 2.0;
 801040c:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010410:	ed93 6b02 	vldr	d6, [r3, #8]
 8010414:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010418:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801041c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010420:	443b      	add	r3, r7
 8010422:	ed83 7b00 	vstr	d7, [r3]
 8010426:	e019      	b.n	801045c <G_q+0xe144>
  } else {
    t34_re = t249.re / 2.0;
 8010428:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801042c:	ed93 6b00 	vldr	d6, [r3]
 8010430:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010434:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010438:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801043c:	443b      	add	r3, r7
 801043e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t249.im / 2.0;
 8010442:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8010446:	ed93 6b02 	vldr	d6, [r3, #8]
 801044a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801044e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010452:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010456:	443b      	add	r3, r7
 8010458:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t246.re * 3.061616997868383E-17 + t247.re * 3.061616997868383E-17;
 801045c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010460:	ed93 7b00 	vldr	d7, [r3]
 8010464:	ed9f 6be2 	vldr	d6, [pc, #904]	; 80107f0 <G_q+0xe4d8>
 8010468:	ee27 6b06 	vmul.f64	d6, d7, d6
 801046c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010470:	ed93 7b00 	vldr	d7, [r3]
 8010474:	ed9f 5bde 	vldr	d5, [pc, #888]	; 80107f0 <G_q+0xe4d8>
 8010478:	ee27 7b05 	vmul.f64	d7, d7, d5
 801047c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010480:	f241 3330 	movw	r3, #4912	; 0x1330
 8010484:	443b      	add	r3, r7
 8010486:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t246.im * 3.061616997868383E-17 + t247.im * 3.061616997868383E-17;
 801048a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801048e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010492:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 80107f0 <G_q+0xe4d8>
 8010496:	ee27 6b06 	vmul.f64	d6, d7, d6
 801049a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801049e:	ed93 7b02 	vldr	d7, [r3, #8]
 80104a2:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 80107f0 <G_q+0xe4d8>
 80104a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80104aa:	ee36 7b07 	vadd.f64	d7, d6, d7
 80104ae:	f241 3310 	movw	r3, #4880	; 0x1310
 80104b2:	443b      	add	r3, r7
 80104b4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 80104b8:	f241 3388 	movw	r3, #5000	; 0x1388
 80104bc:	443b      	add	r3, r7
 80104be:	ed93 6b00 	vldr	d6, [r3]
 80104c2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80104c6:	443b      	add	r3, r7
 80104c8:	ed93 7b00 	vldr	d7, [r3]
 80104cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80104d0:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 80107f8 <G_q+0xe4e0>
 80104d4:	ee37 7b06 	vadd.f64	d7, d7, d6
 80104d8:	f241 3388 	movw	r3, #5000	; 0x1388
 80104dc:	443b      	add	r3, r7
 80104de:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 80104e2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80104e6:	ed93 6b00 	vldr	d6, [r3]
 80104ea:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80104ee:	443b      	add	r3, r7
 80104f0:	ed93 7b00 	vldr	d7, [r3]
 80104f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80104f8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80104fc:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t242.re * 0.0 - t242.im * 0.5) - (t243.re * 0.0 - t243.im * 0.5);
 8010500:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010504:	ed93 7b00 	vldr	d7, [r3]
 8010508:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8010800 <G_q+0xe4e8>
 801050c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010510:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010514:	ed93 7b02 	vldr	d7, [r3, #8]
 8010518:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801051c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010520:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010524:	4bba      	ldr	r3, [pc, #744]	; (8010810 <G_q+0xe4f8>)
 8010526:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801052a:	443a      	add	r2, r7
 801052c:	4413      	add	r3, r2
 801052e:	ed93 7b00 	vldr	d7, [r3]
 8010532:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8010800 <G_q+0xe4e8>
 8010536:	ee27 5b05 	vmul.f64	d5, d7, d5
 801053a:	4bb5      	ldr	r3, [pc, #724]	; (8010810 <G_q+0xe4f8>)
 801053c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010540:	443a      	add	r2, r7
 8010542:	4413      	add	r3, r2
 8010544:	ed93 7b02 	vldr	d7, [r3, #8]
 8010548:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801054c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010550:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010554:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010558:	ee36 7b47 	vsub.f64	d7, d6, d7
 801055c:	ed83 7b00 	vstr	d7, [r3]
  t70_re = (t242.re * 0.5 + t242.im * 0.0) - (t243.re * 0.5 + t243.im * 0.0);
 8010560:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010564:	ed93 7b00 	vldr	d7, [r3]
 8010568:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801056c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010570:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010574:	ed93 7b02 	vldr	d7, [r3, #8]
 8010578:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8010800 <G_q+0xe4e8>
 801057c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010580:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010584:	4ba2      	ldr	r3, [pc, #648]	; (8010810 <G_q+0xe4f8>)
 8010586:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801058a:	443a      	add	r2, r7
 801058c:	4413      	add	r3, r2
 801058e:	ed93 7b00 	vldr	d7, [r3]
 8010592:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010596:	ee27 5b05 	vmul.f64	d5, d7, d5
 801059a:	4b9d      	ldr	r3, [pc, #628]	; (8010810 <G_q+0xe4f8>)
 801059c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80105a0:	443a      	add	r2, r7
 80105a2:	4413      	add	r3, r2
 80105a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80105a8:	ed9f 4b95 	vldr	d4, [pc, #596]	; 8010800 <G_q+0xe4e8>
 80105ac:	ee27 7b04 	vmul.f64	d7, d7, d4
 80105b0:	ee35 7b07 	vadd.f64	d7, d5, d7
 80105b4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80105b8:	443b      	add	r3, r7
 80105ba:	ee36 7b47 	vsub.f64	d7, d6, d7
 80105be:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 80105c2:	f241 03b0 	movw	r3, #4272	; 0x10b0
 80105c6:	443b      	add	r3, r7
 80105c8:	ed93 7b00 	vldr	d7, [r3]
 80105cc:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8010808 <G_q+0xe4f0>
 80105d0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80105d4:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 80105d8:	ed93 7b00 	vldr	d7, [r3]
 80105dc:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8010808 <G_q+0xe4f0>
 80105e0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80105e4:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t16_re * t20_re - t16_im * t20_im)) + (t23_re * t12_re - t3_im *
 80105e8:	f241 3368 	movw	r3, #4968	; 0x1368
 80105ec:	443b      	add	r3, r7
 80105ee:	ed93 5b00 	vldr	d5, [r3]
 80105f2:	f241 3348 	movw	r3, #4936	; 0x1348
 80105f6:	443b      	add	r3, r7
 80105f8:	ed93 7b00 	vldr	d7, [r3]
 80105fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010600:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010604:	ed93 4b00 	vldr	d4, [r3]
 8010608:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801060c:	ed93 7b00 	vldr	d7, [r3]
 8010610:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010614:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010618:	ee36 6b07 	vadd.f64	d6, d6, d7
 801061c:	f241 3330 	movw	r3, #4912	; 0x1330
 8010620:	443b      	add	r3, r7
 8010622:	ed93 5b00 	vldr	d5, [r3]
 8010626:	f241 3388 	movw	r3, #5000	; 0x1388
 801062a:	443b      	add	r3, r7
 801062c:	ed93 7b00 	vldr	d7, [r3]
 8010630:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010634:	f241 3310 	movw	r3, #4880	; 0x1310
 8010638:	443b      	add	r3, r7
 801063a:	ed93 4b00 	vldr	d4, [r3]
 801063e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010642:	ed93 7b00 	vldr	d7, [r3]
 8010646:	ee24 7b07 	vmul.f64	d7, d4, d7
 801064a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801064e:	ee36 7b07 	vadd.f64	d7, d6, d7
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 8010652:	f241 2350 	movw	r3, #4688	; 0x1250
 8010656:	443b      	add	r3, r7
 8010658:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010808 <G_q+0xe4f0>
 801065c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010660:	ed83 7b00 	vstr	d7, [r3]
             t12_im)) - 6.123233995736766E-17;
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 8010664:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010668:	443b      	add	r3, r7
 801066a:	ed93 7b02 	vldr	d7, [r3, #8]
 801066e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010808 <G_q+0xe4f0>
 8010672:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010676:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 801067a:	ed93 7b02 	vldr	d7, [r3, #8]
 801067e:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8010808 <G_q+0xe4f0>
 8010682:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010686:	ee36 6b07 	vadd.f64	d6, d6, d7
              + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 801068a:	f241 3368 	movw	r3, #4968	; 0x1368
 801068e:	443b      	add	r3, r7
 8010690:	ed93 5b00 	vldr	d5, [r3]
 8010694:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010698:	ed93 7b00 	vldr	d7, [r3]
 801069c:	ee25 5b07 	vmul.f64	d5, d5, d7
 80106a0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80106a4:	ed93 4b00 	vldr	d4, [r3]
 80106a8:	f241 3348 	movw	r3, #4936	; 0x1348
 80106ac:	443b      	add	r3, r7
 80106ae:	ed93 7b00 	vldr	d7, [r3]
 80106b2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80106b6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80106ba:	ee36 6b07 	vadd.f64	d6, d6, d7
 80106be:	f241 3330 	movw	r3, #4912	; 0x1330
 80106c2:	443b      	add	r3, r7
 80106c4:	ed93 5b00 	vldr	d5, [r3]
 80106c8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80106cc:	ed93 7b00 	vldr	d7, [r3]
 80106d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80106d4:	f241 3310 	movw	r3, #4880	; 0x1310
 80106d8:	443b      	add	r3, r7
 80106da:	ed93 4b00 	vldr	d4, [r3]
 80106de:	f241 3388 	movw	r3, #5000	; 0x1388
 80106e2:	443b      	add	r3, r7
 80106e4:	ed93 7b00 	vldr	d7, [r3]
 80106e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80106ec:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 80106f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80106f4:	f241 3338 	movw	r3, #4920	; 0x1338
 80106f8:	443b      	add	r3, r7
 80106fa:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t256.im == 0.0) {
 80106fe:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010702:	ed93 7b02 	vldr	d7, [r3, #8]
 8010706:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801070a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801070e:	d115      	bne.n	801073c <G_q+0xe424>
    t20_im = t256.re / 2.0;
 8010710:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010714:	ed93 6b00 	vldr	d6, [r3]
 8010718:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801071c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010720:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010724:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8010728:	f04f 0300 	mov.w	r3, #0
 801072c:	f04f 0400 	mov.w	r4, #0
 8010730:	f241 3218 	movw	r2, #4888	; 0x1318
 8010734:	443a      	add	r2, r7
 8010736:	e9c2 3400 	strd	r3, r4, [r2]
 801073a:	e037      	b.n	80107ac <G_q+0xe494>
  } else if (t256.re == 0.0) {
 801073c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010740:	ed93 7b00 	vldr	d7, [r3]
 8010744:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801074c:	d115      	bne.n	801077a <G_q+0xe462>
    t20_im = 0.0;
 801074e:	f04f 0300 	mov.w	r3, #0
 8010752:	f04f 0400 	mov.w	r4, #0
 8010756:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 801075a:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t256.im / 2.0;
 801075e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010762:	ed93 6b02 	vldr	d6, [r3, #8]
 8010766:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801076a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801076e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010772:	443b      	add	r3, r7
 8010774:	ed83 7b00 	vstr	d7, [r3]
 8010778:	e018      	b.n	80107ac <G_q+0xe494>
  } else {
    t20_im = t256.re / 2.0;
 801077a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 801077e:	ed93 6b00 	vldr	d6, [r3]
 8010782:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010786:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801078a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801078e:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t256.im / 2.0;
 8010792:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010796:	ed93 6b02 	vldr	d6, [r3, #8]
 801079a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801079e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80107a2:	f241 3318 	movw	r3, #4888	; 0x1318
 80107a6:	443b      	add	r3, r7
 80107a8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t257.im == 0.0) {
 80107ac:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80107b0:	ed93 7b02 	vldr	d7, [r3, #8]
 80107b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80107b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107bc:	d12a      	bne.n	8010814 <G_q+0xe4fc>
    t34_re = t257.re / 2.0;
 80107be:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 80107c2:	ed93 6b00 	vldr	d6, [r3]
 80107c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80107ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80107ce:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80107d2:	443b      	add	r3, r7
 80107d4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80107d8:	f04f 0300 	mov.w	r3, #0
 80107dc:	f04f 0400 	mov.w	r4, #0
 80107e0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80107e4:	443a      	add	r2, r7
 80107e6:	e9c2 3400 	strd	r3, r4, [r2]
 80107ea:	e04d      	b.n	8010888 <G_q+0xe570>
 80107ec:	f3af 8000 	nop.w
 80107f0:	33145c07 	.word	0x33145c07
 80107f4:	3c81a626 	.word	0x3c81a626
 80107f8:	858a5d48 	.word	0x858a5d48
 80107fc:	394377ce 	.word	0x394377ce
	...
 8010808:	33145c07 	.word	0x33145c07
 801080c:	3c91a626 	.word	0x3c91a626
 8010810:	ffffef70 	.word	0xffffef70
  } else if (t257.re == 0.0) {
 8010814:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010818:	ed93 7b00 	vldr	d7, [r3]
 801081c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010824:	d116      	bne.n	8010854 <G_q+0xe53c>
    t34_re = 0.0;
 8010826:	f04f 0300 	mov.w	r3, #0
 801082a:	f04f 0400 	mov.w	r4, #0
 801082e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010832:	443a      	add	r2, r7
 8010834:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t257.im / 2.0;
 8010838:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 801083c:	ed93 6b02 	vldr	d6, [r3, #8]
 8010840:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010844:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010848:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801084c:	443b      	add	r3, r7
 801084e:	ed83 7b00 	vstr	d7, [r3]
 8010852:	e019      	b.n	8010888 <G_q+0xe570>
  } else {
    t34_re = t257.re / 2.0;
 8010854:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010858:	ed93 6b00 	vldr	d6, [r3]
 801085c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010860:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010864:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010868:	443b      	add	r3, r7
 801086a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t257.im / 2.0;
 801086e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010872:	ed93 6b02 	vldr	d6, [r3, #8]
 8010876:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801087a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801087e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010882:	443b      	add	r3, r7
 8010884:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 8010888:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801088c:	ed93 6b00 	vldr	d6, [r3]
 8010890:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010894:	443b      	add	r3, r7
 8010896:	ed93 7b00 	vldr	d7, [r3]
 801089a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801089e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80108a2:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_im;
 80108a6:	f241 3318 	movw	r3, #4888	; 0x1318
 80108aa:	443b      	add	r3, r7
 80108ac:	ed93 6b00 	vldr	d6, [r3]
 80108b0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80108b4:	443b      	add	r3, r7
 80108b6:	ed93 7b00 	vldr	d7, [r3]
 80108ba:	ee36 7b07 	vadd.f64	d7, d6, d7
 80108be:	f241 3318 	movw	r3, #4888	; 0x1318
 80108c2:	443b      	add	r3, r7
 80108c4:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t258.re * 0.0 - t258.im * 0.5) - (t259.re * 0.0 - t259.im * 0.5);
 80108c8:	f241 1310 	movw	r3, #4368	; 0x1110
 80108cc:	443b      	add	r3, r7
 80108ce:	ed93 7b00 	vldr	d7, [r3]
 80108d2:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8010c28 <G_q+0xe910>
 80108d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80108da:	f241 1310 	movw	r3, #4368	; 0x1110
 80108de:	443b      	add	r3, r7
 80108e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80108e4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80108e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80108ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80108f0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80108f4:	ed93 7b00 	vldr	d7, [r3]
 80108f8:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8010c28 <G_q+0xe910>
 80108fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010900:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010904:	ed93 7b02 	vldr	d7, [r3, #8]
 8010908:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801090c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010910:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010914:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010918:	f241 3310 	movw	r3, #4880	; 0x1310
 801091c:	443b      	add	r3, r7
 801091e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t258.re * 0.5 + t258.im * 0.0) - (t259.re * 0.5 + t259.im * 0.0);
 8010922:	f241 1310 	movw	r3, #4368	; 0x1110
 8010926:	443b      	add	r3, r7
 8010928:	ed93 7b00 	vldr	d7, [r3]
 801092c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010930:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010934:	f241 1310 	movw	r3, #4368	; 0x1110
 8010938:	443b      	add	r3, r7
 801093a:	ed93 7b02 	vldr	d7, [r3, #8]
 801093e:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8010c28 <G_q+0xe910>
 8010942:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010946:	ee36 6b07 	vadd.f64	d6, d6, d7
 801094a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 801094e:	ed93 7b00 	vldr	d7, [r3]
 8010952:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010956:	ee27 5b05 	vmul.f64	d5, d7, d5
 801095a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 801095e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010962:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8010c28 <G_q+0xe910>
 8010966:	ee27 7b04 	vmul.f64	d7, d7, d4
 801096a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801096e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010972:	f241 3378 	movw	r3, #4984	; 0x1378
 8010976:	443b      	add	r3, r7
 8010978:	ed83 7b00 	vstr	d7, [r3]
  if (t262.im == 0.0) {
 801097c:	f241 1330 	movw	r3, #4400	; 0x1130
 8010980:	443b      	add	r3, r7
 8010982:	ed93 7b02 	vldr	d7, [r3, #8]
 8010986:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801098a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801098e:	d117      	bne.n	80109c0 <G_q+0xe6a8>
    t13_im = t262.re / 2.0;
 8010990:	f241 1330 	movw	r3, #4400	; 0x1130
 8010994:	443b      	add	r3, r7
 8010996:	ed93 6b00 	vldr	d6, [r3]
 801099a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801099e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80109a2:	f241 3370 	movw	r3, #4976	; 0x1370
 80109a6:	443b      	add	r3, r7
 80109a8:	ed83 7b00 	vstr	d7, [r3]
    t16_re = 0.0;
 80109ac:	f04f 0300 	mov.w	r3, #0
 80109b0:	f04f 0400 	mov.w	r4, #0
 80109b4:	f241 3268 	movw	r2, #4968	; 0x1368
 80109b8:	443a      	add	r2, r7
 80109ba:	e9c2 3400 	strd	r3, r4, [r2]
 80109be:	e03d      	b.n	8010a3c <G_q+0xe724>
  } else if (t262.re == 0.0) {
 80109c0:	f241 1330 	movw	r3, #4400	; 0x1130
 80109c4:	443b      	add	r3, r7
 80109c6:	ed93 7b00 	vldr	d7, [r3]
 80109ca:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109d2:	d117      	bne.n	8010a04 <G_q+0xe6ec>
    t13_im = 0.0;
 80109d4:	f04f 0300 	mov.w	r3, #0
 80109d8:	f04f 0400 	mov.w	r4, #0
 80109dc:	f241 3270 	movw	r2, #4976	; 0x1370
 80109e0:	443a      	add	r2, r7
 80109e2:	e9c2 3400 	strd	r3, r4, [r2]
    t16_re = t262.im / 2.0;
 80109e6:	f241 1330 	movw	r3, #4400	; 0x1130
 80109ea:	443b      	add	r3, r7
 80109ec:	ed93 6b02 	vldr	d6, [r3, #8]
 80109f0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80109f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80109f8:	f241 3368 	movw	r3, #4968	; 0x1368
 80109fc:	443b      	add	r3, r7
 80109fe:	ed83 7b00 	vstr	d7, [r3]
 8010a02:	e01b      	b.n	8010a3c <G_q+0xe724>
  } else {
    t13_im = t262.re / 2.0;
 8010a04:	f241 1330 	movw	r3, #4400	; 0x1130
 8010a08:	443b      	add	r3, r7
 8010a0a:	ed93 6b00 	vldr	d6, [r3]
 8010a0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a16:	f241 3370 	movw	r3, #4976	; 0x1370
 8010a1a:	443b      	add	r3, r7
 8010a1c:	ed83 7b00 	vstr	d7, [r3]
    t16_re = t262.im / 2.0;
 8010a20:	f241 1330 	movw	r3, #4400	; 0x1130
 8010a24:	443b      	add	r3, r7
 8010a26:	ed93 6b02 	vldr	d6, [r3, #8]
 8010a2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a32:	f241 3368 	movw	r3, #4968	; 0x1368
 8010a36:	443b      	add	r3, r7
 8010a38:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t263.im == 0.0) {
 8010a3c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010a40:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a4c:	d116      	bne.n	8010a7c <G_q+0xe764>
    t34_re = t263.re / 2.0;
 8010a4e:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010a52:	ed93 6b00 	vldr	d6, [r3]
 8010a56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a5e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010a62:	443b      	add	r3, r7
 8010a64:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010a68:	f04f 0300 	mov.w	r3, #0
 8010a6c:	f04f 0400 	mov.w	r4, #0
 8010a70:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010a74:	443a      	add	r2, r7
 8010a76:	e9c2 3400 	strd	r3, r4, [r2]
 8010a7a:	e039      	b.n	8010af0 <G_q+0xe7d8>
  } else if (t263.re == 0.0) {
 8010a7c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010a80:	ed93 7b00 	vldr	d7, [r3]
 8010a84:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a8c:	d116      	bne.n	8010abc <G_q+0xe7a4>
    t34_re = 0.0;
 8010a8e:	f04f 0300 	mov.w	r3, #0
 8010a92:	f04f 0400 	mov.w	r4, #0
 8010a96:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010a9a:	443a      	add	r2, r7
 8010a9c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t263.im / 2.0;
 8010aa0:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010aa4:	ed93 6b02 	vldr	d6, [r3, #8]
 8010aa8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010aac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ab0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010ab4:	443b      	add	r3, r7
 8010ab6:	ed83 7b00 	vstr	d7, [r3]
 8010aba:	e019      	b.n	8010af0 <G_q+0xe7d8>
  } else {
    t34_re = t263.re / 2.0;
 8010abc:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010ac0:	ed93 6b00 	vldr	d6, [r3]
 8010ac4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ac8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010acc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010ad0:	443b      	add	r3, r7
 8010ad2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t263.im / 2.0;
 8010ad6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010ada:	ed93 6b02 	vldr	d6, [r3, #8]
 8010ade:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ae2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ae6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010aea:	443b      	add	r3, r7
 8010aec:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im = (t260.re * 0.0 - t260.im * 0.5) - (t261.re * 0.0 - t261.im * 0.5);
 8010af0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010af4:	ed93 7b00 	vldr	d7, [r3]
 8010af8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8010c28 <G_q+0xe910>
 8010afc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b00:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010b04:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b08:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010b0c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b10:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010b14:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010b18:	ed93 7b00 	vldr	d7, [r3]
 8010b1c:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8010c28 <G_q+0xe910>
 8010b20:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010b24:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010b28:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b2c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010b30:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010b34:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010b38:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010b3c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010b40:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t260.re * 0.5 + t260.im * 0.0) - (t261.re * 0.5 + t261.im * 0.0);
 8010b44:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010b48:	ed93 7b00 	vldr	d7, [r3]
 8010b4c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010b50:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b54:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010b58:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b5c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8010c28 <G_q+0xe910>
 8010b60:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b64:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010b68:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010b6c:	ed93 7b00 	vldr	d7, [r3]
 8010b70:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010b74:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010b78:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010b7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b80:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8010c28 <G_q+0xe910>
 8010b84:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010b88:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010b8c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010b90:	f241 3348 	movw	r3, #4936	; 0x1348
 8010b94:	443b      	add	r3, r7
 8010b96:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t13_im + t34_re) + 7.498798913309288E-33;
 8010b9a:	f241 3370 	movw	r3, #4976	; 0x1370
 8010b9e:	443b      	add	r3, r7
 8010ba0:	ed93 6b00 	vldr	d6, [r3]
 8010ba4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010ba8:	443b      	add	r3, r7
 8010baa:	ed93 7b00 	vldr	d7, [r3]
 8010bae:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010bb2:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010c30 <G_q+0xe918>
 8010bb6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010bba:	f241 3370 	movw	r3, #4976	; 0x1370
 8010bbe:	443b      	add	r3, r7
 8010bc0:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_im;
 8010bc4:	f241 3368 	movw	r3, #4968	; 0x1368
 8010bc8:	443b      	add	r3, r7
 8010bca:	ed93 6b00 	vldr	d6, [r3]
 8010bce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010bd2:	443b      	add	r3, r7
 8010bd4:	ed93 7b00 	vldr	d7, [r3]
 8010bd8:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010bdc:	f241 3368 	movw	r3, #4968	; 0x1368
 8010be0:	443b      	add	r3, r7
 8010be2:	ed83 7b00 	vstr	d7, [r3]
  if (t254.im == 0.0) {
 8010be6:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010bea:	ed93 7b02 	vldr	d7, [r3, #8]
 8010bee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bf6:	d11f      	bne.n	8010c38 <G_q+0xe920>
    t12_re = t254.re / 2.0;
 8010bf8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010bfc:	ed93 6b00 	vldr	d6, [r3]
 8010c00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010c04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8010c0c:	443b      	add	r3, r7
 8010c0e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8010c12:	f04f 0300 	mov.w	r3, #0
 8010c16:	f04f 0400 	mov.w	r4, #0
 8010c1a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8010c1e:	e9c2 3400 	strd	r3, r4, [r2]
 8010c22:	e041      	b.n	8010ca8 <G_q+0xe990>
 8010c24:	f3af 8000 	nop.w
	...
 8010c30:	858a5d48 	.word	0x858a5d48
 8010c34:	394377ce 	.word	0x394377ce
  } else if (t254.re == 0.0) {
 8010c38:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010c3c:	ed93 7b00 	vldr	d7, [r3]
 8010c40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c48:	d115      	bne.n	8010c76 <G_q+0xe95e>
    t12_re = 0.0;
 8010c4a:	f04f 0300 	mov.w	r3, #0
 8010c4e:	f04f 0400 	mov.w	r4, #0
 8010c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8010c56:	443a      	add	r2, r7
 8010c58:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t254.im / 2.0;
 8010c5c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010c60:	ed93 6b02 	vldr	d6, [r3, #8]
 8010c64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010c68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010c6c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010c70:	ed83 7b00 	vstr	d7, [r3]
 8010c74:	e018      	b.n	8010ca8 <G_q+0xe990>
  } else {
    t12_re = t254.re / 2.0;
 8010c76:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010c7a:	ed93 6b00 	vldr	d6, [r3]
 8010c7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010c82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010c86:	f241 3388 	movw	r3, #5000	; 0x1388
 8010c8a:	443b      	add	r3, r7
 8010c8c:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t254.im / 2.0;
 8010c90:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010c94:	ed93 6b02 	vldr	d6, [r3, #8]
 8010c98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ca0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010ca4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t255.im == 0.0) {
 8010ca8:	4b25      	ldr	r3, [pc, #148]	; (8010d40 <G_q+0xea28>)
 8010caa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010cae:	443a      	add	r2, r7
 8010cb0:	4413      	add	r3, r2
 8010cb2:	ed93 7b02 	vldr	d7, [r3, #8]
 8010cb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cbe:	d119      	bne.n	8010cf4 <G_q+0xe9dc>
    t34_re = t255.re / 2.0;
 8010cc0:	4b1f      	ldr	r3, [pc, #124]	; (8010d40 <G_q+0xea28>)
 8010cc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010cc6:	443a      	add	r2, r7
 8010cc8:	4413      	add	r3, r2
 8010cca:	ed93 6b00 	vldr	d6, [r3]
 8010cce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010cd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010cd6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010cda:	443b      	add	r3, r7
 8010cdc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010ce0:	f04f 0300 	mov.w	r3, #0
 8010ce4:	f04f 0400 	mov.w	r4, #0
 8010ce8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010cec:	443a      	add	r2, r7
 8010cee:	e9c2 3400 	strd	r3, r4, [r2]
 8010cf2:	e047      	b.n	8010d84 <G_q+0xea6c>
  } else if (t255.re == 0.0) {
 8010cf4:	4b12      	ldr	r3, [pc, #72]	; (8010d40 <G_q+0xea28>)
 8010cf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010cfa:	443a      	add	r2, r7
 8010cfc:	4413      	add	r3, r2
 8010cfe:	ed93 7b00 	vldr	d7, [r3]
 8010d02:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d0a:	d11b      	bne.n	8010d44 <G_q+0xea2c>
    t34_re = 0.0;
 8010d0c:	f04f 0300 	mov.w	r3, #0
 8010d10:	f04f 0400 	mov.w	r4, #0
 8010d14:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010d18:	443a      	add	r2, r7
 8010d1a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t255.im / 2.0;
 8010d1e:	4b08      	ldr	r3, [pc, #32]	; (8010d40 <G_q+0xea28>)
 8010d20:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010d24:	443a      	add	r2, r7
 8010d26:	4413      	add	r3, r2
 8010d28:	ed93 6b02 	vldr	d6, [r3, #8]
 8010d2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d34:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010d38:	443b      	add	r3, r7
 8010d3a:	ed83 7b00 	vstr	d7, [r3]
 8010d3e:	e021      	b.n	8010d84 <G_q+0xea6c>
 8010d40:	ffffef90 	.word	0xffffef90
  } else {
    t34_re = t255.re / 2.0;
 8010d44:	4be4      	ldr	r3, [pc, #912]	; (80110d8 <G_q+0xedc0>)
 8010d46:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010d4a:	443a      	add	r2, r7
 8010d4c:	4413      	add	r3, r2
 8010d4e:	ed93 6b00 	vldr	d6, [r3]
 8010d52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d5a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010d5e:	443b      	add	r3, r7
 8010d60:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t255.im / 2.0;
 8010d64:	4bdc      	ldr	r3, [pc, #880]	; (80110d8 <G_q+0xedc0>)
 8010d66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010d6a:	443a      	add	r2, r7
 8010d6c:	4413      	add	r3, r2
 8010d6e:	ed93 6b02 	vldr	d6, [r3, #8]
 8010d72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010d7e:	443b      	add	r3, r7
 8010d80:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = (t20_im * t3_im - t85_im * t13_re) - (t16_im * t13_im - t20_re *
 8010d84:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010d88:	ed93 6b00 	vldr	d6, [r3]
 8010d8c:	f241 3310 	movw	r3, #4880	; 0x1310
 8010d90:	443b      	add	r3, r7
 8010d92:	ed93 7b00 	vldr	d7, [r3]
 8010d96:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010d9a:	f241 3318 	movw	r3, #4888	; 0x1318
 8010d9e:	443b      	add	r3, r7
 8010da0:	ed93 5b00 	vldr	d5, [r3]
 8010da4:	f241 3378 	movw	r3, #4984	; 0x1378
 8010da8:	443b      	add	r3, r7
 8010daa:	ed93 7b00 	vldr	d7, [r3]
 8010dae:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010db2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010db6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010dba:	ed93 5b00 	vldr	d5, [r3]
 8010dbe:	f241 3370 	movw	r3, #4976	; 0x1370
 8010dc2:	443b      	add	r3, r7
 8010dc4:	ed93 7b00 	vldr	d7, [r3]
 8010dc8:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010dcc:	f241 3348 	movw	r3, #4936	; 0x1348
 8010dd0:	443b      	add	r3, r7
 8010dd2:	ed93 4b00 	vldr	d4, [r3]
 8010dd6:	f241 3368 	movw	r3, #4968	; 0x1368
 8010dda:	443b      	add	r3, r7
 8010ddc:	ed93 7b00 	vldr	d7, [r3]
 8010de0:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010de4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010de8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010dec:	f241 3330 	movw	r3, #4912	; 0x1330
 8010df0:	443b      	add	r3, r7
 8010df2:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t85_im = (t20_im * t13_re + t85_im * t3_im) - (t16_im * t16_re + t20_re *
 8010df6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010dfa:	ed93 6b00 	vldr	d6, [r3]
 8010dfe:	f241 3378 	movw	r3, #4984	; 0x1378
 8010e02:	443b      	add	r3, r7
 8010e04:	ed93 7b00 	vldr	d7, [r3]
 8010e08:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010e0c:	f241 3318 	movw	r3, #4888	; 0x1318
 8010e10:	443b      	add	r3, r7
 8010e12:	ed93 5b00 	vldr	d5, [r3]
 8010e16:	f241 3310 	movw	r3, #4880	; 0x1310
 8010e1a:	443b      	add	r3, r7
 8010e1c:	ed93 7b00 	vldr	d7, [r3]
 8010e20:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010e24:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010e28:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010e2c:	ed93 5b00 	vldr	d5, [r3]
 8010e30:	f241 3368 	movw	r3, #4968	; 0x1368
 8010e34:	443b      	add	r3, r7
 8010e36:	ed93 7b00 	vldr	d7, [r3]
 8010e3a:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010e3e:	f241 3348 	movw	r3, #4936	; 0x1348
 8010e42:	443b      	add	r3, r7
 8010e44:	ed93 4b00 	vldr	d4, [r3]
 8010e48:	f241 3370 	movw	r3, #4976	; 0x1370
 8010e4c:	443b      	add	r3, r7
 8010e4e:	ed93 7b00 	vldr	d7, [r3]
 8010e52:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010e56:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010e5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010e5e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010e62:	443b      	add	r3, r7
 8010e64:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t12_re += t34_re;
 8010e68:	f241 3388 	movw	r3, #5000	; 0x1388
 8010e6c:	443b      	add	r3, r7
 8010e6e:	ed93 6b00 	vldr	d6, [r3]
 8010e72:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010e76:	443b      	add	r3, r7
 8010e78:	ed93 7b00 	vldr	d7, [r3]
 8010e7c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010e80:	f241 3388 	movw	r3, #5000	; 0x1388
 8010e84:	443b      	add	r3, r7
 8010e86:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 8010e8a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010e8e:	ed93 6b00 	vldr	d6, [r3]
 8010e92:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010e96:	443b      	add	r3, r7
 8010e98:	ed93 7b00 	vldr	d7, [r3]
 8010e9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010ea0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010ea4:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t76_re;
 8010ea8:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010eac:	443b      	add	r3, r7
 8010eae:	f241 21c8 	movw	r1, #4808	; 0x12c8
 8010eb2:	4439      	add	r1, r7
 8010eb4:	f241 22a8 	movw	r2, #4776	; 0x12a8
 8010eb8:	443a      	add	r2, r7
 8010eba:	ed91 6b00 	vldr	d6, [r1]
 8010ebe:	ed92 7b00 	vldr	d7, [r2]
 8010ec2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010ec6:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t72_re;
 8010eca:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010ece:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8010ed2:	443a      	add	r2, r7
 8010ed4:	ed92 6b00 	vldr	d6, [r2]
 8010ed8:	ed93 7b00 	vldr	d7, [r3]
 8010edc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010ee0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010ee4:	443b      	add	r3, r7
 8010ee6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (t58_im * t60_re - t70_re * b_t10_re) - (t23_re * t12_re - t85_im *
 8010eea:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8010eee:	f241 2350 	movw	r3, #4688	; 0x1250
 8010ef2:	443b      	add	r3, r7
 8010ef4:	ed92 6b00 	vldr	d6, [r2]
 8010ef8:	ed93 7b00 	vldr	d7, [r3]
 8010efc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010f00:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8010f04:	443b      	add	r3, r7
 8010f06:	ed93 5b00 	vldr	d5, [r3]
 8010f0a:	f241 3338 	movw	r3, #4920	; 0x1338
 8010f0e:	443b      	add	r3, r7
 8010f10:	ed93 7b00 	vldr	d7, [r3]
 8010f14:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010f18:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010f1c:	f241 3330 	movw	r3, #4912	; 0x1330
 8010f20:	443b      	add	r3, r7
 8010f22:	ed93 5b00 	vldr	d5, [r3]
 8010f26:	f241 3388 	movw	r3, #5000	; 0x1388
 8010f2a:	443b      	add	r3, r7
 8010f2c:	ed93 7b00 	vldr	d7, [r3]
 8010f30:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010f34:	f241 3318 	movw	r3, #4888	; 0x1318
 8010f38:	443b      	add	r3, r7
 8010f3a:	ed93 4b00 	vldr	d4, [r3]
 8010f3e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010f42:	ed93 7b00 	vldr	d7, [r3]
 8010f46:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010f4a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010f4e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010f52:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8010f56:	443b      	add	r3, r7
 8010f58:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t70_re = (t58_im * b_t10_re + t70_re * t60_re) - (t23_re * t12_im + t85_im *
 8010f5c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010f60:	ed93 6b00 	vldr	d6, [r3]
 8010f64:	f241 3338 	movw	r3, #4920	; 0x1338
 8010f68:	443b      	add	r3, r7
 8010f6a:	ed93 7b00 	vldr	d7, [r3]
 8010f6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8010f72:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8010f76:	443a      	add	r2, r7
 8010f78:	f241 2350 	movw	r3, #4688	; 0x1250
 8010f7c:	443b      	add	r3, r7
 8010f7e:	ed92 5b00 	vldr	d5, [r2]
 8010f82:	ed93 7b00 	vldr	d7, [r3]
 8010f86:	ee25 7b07 	vmul.f64	d7, d5, d7
 8010f8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010f8e:	f241 3330 	movw	r3, #4912	; 0x1330
 8010f92:	443b      	add	r3, r7
 8010f94:	ed93 5b00 	vldr	d5, [r3]
 8010f98:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010f9c:	ed93 7b00 	vldr	d7, [r3]
 8010fa0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010fa4:	f241 3318 	movw	r3, #4888	; 0x1318
 8010fa8:	443b      	add	r3, r7
 8010faa:	ed93 4b00 	vldr	d4, [r3]
 8010fae:	f241 3388 	movw	r3, #5000	; 0x1388
 8010fb2:	443b      	add	r3, r7
 8010fb4:	ed93 7b00 	vldr	d7, [r3]
 8010fb8:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010fbc:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010fc0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8010fc4:	443b      	add	r3, r7
 8010fc6:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010fca:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  t72_re = (t280.re * 0.0 - t280.im * 0.5) - (t281.re * 0.0 - t281.im * 0.5);
 8010fce:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8010fd2:	443b      	add	r3, r7
 8010fd4:	ed93 7b00 	vldr	d7, [r3]
 8010fd8:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80110d0 <G_q+0xedb8>
 8010fdc:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010fe0:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8010fe4:	443b      	add	r3, r7
 8010fe6:	ed93 7b02 	vldr	d7, [r3, #8]
 8010fea:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010fee:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010ff2:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010ff6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8010ffa:	ed93 7b00 	vldr	d7, [r3]
 8010ffe:	ed9f 5b34 	vldr	d5, [pc, #208]	; 80110d0 <G_q+0xedb8>
 8011002:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011006:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 801100a:	ed93 7b02 	vldr	d7, [r3, #8]
 801100e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011012:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011016:	ee35 7b47 	vsub.f64	d7, d5, d7
 801101a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801101e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011022:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t280.re * 0.5 + t280.im * 0.0) - (t281.re * 0.5 + t281.im * 0.0);
 8011026:	f241 13b0 	movw	r3, #4528	; 0x11b0
 801102a:	443b      	add	r3, r7
 801102c:	ed93 7b00 	vldr	d7, [r3]
 8011030:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011034:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011038:	f241 13b0 	movw	r3, #4528	; 0x11b0
 801103c:	443b      	add	r3, r7
 801103e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011042:	ed9f 5b23 	vldr	d5, [pc, #140]	; 80110d0 <G_q+0xedb8>
 8011046:	ee27 7b05 	vmul.f64	d7, d7, d5
 801104a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801104e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011052:	ed93 7b00 	vldr	d7, [r3]
 8011056:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801105a:	ee27 5b05 	vmul.f64	d5, d7, d5
 801105e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011062:	ed93 7b02 	vldr	d7, [r3, #8]
 8011066:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 80110d0 <G_q+0xedb8>
 801106a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801106e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011072:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8011076:	443b      	add	r3, r7
 8011078:	ee36 7b47 	vsub.f64	d7, d6, d7
 801107c:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t282.re * 0.0 - t282.im * 0.5) - (t283.re * 0.0 - t283.im * 0.5);
 8011080:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011084:	ed93 7b00 	vldr	d7, [r3]
 8011088:	ed9f 6b11 	vldr	d6, [pc, #68]	; 80110d0 <G_q+0xedb8>
 801108c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011090:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011094:	ed93 7b02 	vldr	d7, [r3, #8]
 8011098:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801109c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80110a0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80110a4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80110a8:	ed93 7b00 	vldr	d7, [r3]
 80110ac:	ed9f 5b08 	vldr	d5, [pc, #32]	; 80110d0 <G_q+0xedb8>
 80110b0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80110b4:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80110b8:	ed93 7b02 	vldr	d7, [r3, #8]
 80110bc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80110c0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80110c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80110c8:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80110cc:	443b      	add	r3, r7
 80110ce:	e005      	b.n	80110dc <G_q+0xedc4>
	...
 80110d8:	ffffef90 	.word	0xffffef90
 80110dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80110e0:	ed83 7b00 	vstr	d7, [r3]
  t55_re = (t282.re * 0.5 + t282.im * 0.0) - (t283.re * 0.5 + t283.im * 0.0);
 80110e4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80110e8:	ed93 7b00 	vldr	d7, [r3]
 80110ec:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80110f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80110f4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80110f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80110fc:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 80113d8 <G_q+0xf0c0>
 8011100:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011104:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011108:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801110c:	ed93 7b00 	vldr	d7, [r3]
 8011110:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011114:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011118:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 801111c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011120:	ed9f 4bad 	vldr	d4, [pc, #692]	; 80113d8 <G_q+0xf0c0>
 8011124:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011128:	ee35 7b07 	vadd.f64	d7, d5, d7
 801112c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011130:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8011134:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 8011138:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 801113c:	ed93 7b00 	vldr	d7, [r3]
 8011140:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80113d8 <G_q+0xf0c0>
 8011144:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011148:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 801114c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011150:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 80113e8 <G_q+0xf0d0>
 8011154:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011158:	ee36 6b47 	vsub.f64	d6, d6, d7
 801115c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011160:	ed93 7b00 	vldr	d7, [r3]
 8011164:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 80113d8 <G_q+0xf0c0>
 8011168:	ee27 5b05 	vmul.f64	d5, d7, d5
    t295.im * 3.061616997868383E-17);
 801116c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011170:	ed93 7b02 	vldr	d7, [r3, #8]
 8011174:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 80113e8 <G_q+0xf0d0>
 8011178:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 801117c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011180:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011184:	f241 3388 	movw	r3, #5000	; 0x1388
 8011188:	443b      	add	r3, r7
 801118a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 801118e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011192:	ed93 7b00 	vldr	d7, [r3]
 8011196:	ed9f 6b94 	vldr	d6, [pc, #592]	; 80113e8 <G_q+0xf0d0>
 801119a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801119e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80111a2:	ed93 7b02 	vldr	d7, [r3, #8]
 80111a6:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 80113d8 <G_q+0xf0c0>
 80111aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 80111ae:	ee36 6b07 	vadd.f64	d6, d6, d7
 80111b2:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80111b6:	ed93 7b00 	vldr	d7, [r3]
 80111ba:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 80113e8 <G_q+0xf0d0>
 80111be:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t295.im * 0.0);
 80111c2:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 80111c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80111ca:	ed9f 4b83 	vldr	d4, [pc, #524]	; 80113d8 <G_q+0xf0c0>
 80111ce:	ee27 7b04 	vmul.f64	d7, d7, d4
 80111d2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 80111d6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80111da:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80111de:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t292.re * 0.0 - t292.im * 0.5) - (t293.re * 0.0 - t293.im * 0.5);
 80111e2:	f241 2310 	movw	r3, #4624	; 0x1210
 80111e6:	443b      	add	r3, r7
 80111e8:	ed93 7b00 	vldr	d7, [r3]
 80111ec:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 80113d8 <G_q+0xf0c0>
 80111f0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80111f4:	f241 2310 	movw	r3, #4624	; 0x1210
 80111f8:	443b      	add	r3, r7
 80111fa:	ed93 7b02 	vldr	d7, [r3, #8]
 80111fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011202:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011206:	ee36 6b47 	vsub.f64	d6, d6, d7
 801120a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 801120e:	ed93 7b00 	vldr	d7, [r3]
 8011212:	ed9f 5b71 	vldr	d5, [pc, #452]	; 80113d8 <G_q+0xf0c0>
 8011216:	ee27 5b05 	vmul.f64	d5, d7, d5
 801121a:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 801121e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011222:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011226:	ee27 7b04 	vmul.f64	d7, d7, d4
 801122a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801122e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011232:	f241 3330 	movw	r3, #4912	; 0x1330
 8011236:	443b      	add	r3, r7
 8011238:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t292.re * 0.5 + t292.im * 0.0) - (t293.re * 0.5 + t293.im * 0.0);
 801123c:	f241 2310 	movw	r3, #4624	; 0x1210
 8011240:	443b      	add	r3, r7
 8011242:	ed93 7b00 	vldr	d7, [r3]
 8011246:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801124a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801124e:	f241 2310 	movw	r3, #4624	; 0x1210
 8011252:	443b      	add	r3, r7
 8011254:	ed93 7b02 	vldr	d7, [r3, #8]
 8011258:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80113d8 <G_q+0xf0c0>
 801125c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011260:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011264:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011268:	ed93 7b00 	vldr	d7, [r3]
 801126c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011270:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011274:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011278:	ed93 7b02 	vldr	d7, [r3, #8]
 801127c:	ed9f 4b56 	vldr	d4, [pc, #344]	; 80113d8 <G_q+0xf0c0>
 8011280:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011284:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011288:	ee36 7b47 	vsub.f64	d7, d6, d7
 801128c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011290:	443b      	add	r3, r7
 8011292:	ed83 7b00 	vstr	d7, [r3]
  if (t290.im == 0.0) {
 8011296:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801129a:	443b      	add	r3, r7
 801129c:	ed93 7b02 	vldr	d7, [r3, #8]
 80112a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112a8:	d117      	bne.n	80112da <G_q+0xefc2>
    t13_re = t290.re / 2.0;
 80112aa:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80112ae:	443b      	add	r3, r7
 80112b0:	ed93 6b00 	vldr	d6, [r3]
 80112b4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80112b8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80112bc:	f241 3378 	movw	r3, #4984	; 0x1378
 80112c0:	443b      	add	r3, r7
 80112c2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80112c6:	f04f 0300 	mov.w	r3, #0
 80112ca:	f04f 0400 	mov.w	r4, #0
 80112ce:	f241 3270 	movw	r2, #4976	; 0x1370
 80112d2:	443a      	add	r2, r7
 80112d4:	e9c2 3400 	strd	r3, r4, [r2]
 80112d8:	e03d      	b.n	8011356 <G_q+0xf03e>
  } else if (t290.re == 0.0) {
 80112da:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80112de:	443b      	add	r3, r7
 80112e0:	ed93 7b00 	vldr	d7, [r3]
 80112e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	d117      	bne.n	801131e <G_q+0xf006>
    t13_re = 0.0;
 80112ee:	f04f 0300 	mov.w	r3, #0
 80112f2:	f04f 0400 	mov.w	r4, #0
 80112f6:	f241 3278 	movw	r2, #4984	; 0x1378
 80112fa:	443a      	add	r2, r7
 80112fc:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t290.im / 2.0;
 8011300:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011304:	443b      	add	r3, r7
 8011306:	ed93 6b02 	vldr	d6, [r3, #8]
 801130a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801130e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011312:	f241 3370 	movw	r3, #4976	; 0x1370
 8011316:	443b      	add	r3, r7
 8011318:	ed83 7b00 	vstr	d7, [r3]
 801131c:	e01b      	b.n	8011356 <G_q+0xf03e>
  } else {
    t13_re = t290.re / 2.0;
 801131e:	f241 13f0 	movw	r3, #4592	; 0x11f0
 8011322:	443b      	add	r3, r7
 8011324:	ed93 6b00 	vldr	d6, [r3]
 8011328:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801132c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011330:	f241 3378 	movw	r3, #4984	; 0x1378
 8011334:	443b      	add	r3, r7
 8011336:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t290.im / 2.0;
 801133a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801133e:	443b      	add	r3, r7
 8011340:	ed93 6b02 	vldr	d6, [r3, #8]
 8011344:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011348:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801134c:	f241 3370 	movw	r3, #4976	; 0x1370
 8011350:	443b      	add	r3, r7
 8011352:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t291.im == 0.0) {
 8011356:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801135a:	ed93 7b02 	vldr	d7, [r3, #8]
 801135e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	d116      	bne.n	8011396 <G_q+0xf07e>
    t34_re = t291.re / 2.0;
 8011368:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801136c:	ed93 6b00 	vldr	d6, [r3]
 8011370:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011374:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011378:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801137c:	443b      	add	r3, r7
 801137e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011382:	f04f 0300 	mov.w	r3, #0
 8011386:	f04f 0400 	mov.w	r4, #0
 801138a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801138e:	443a      	add	r2, r7
 8011390:	e9c2 3400 	strd	r3, r4, [r2]
 8011394:	e046      	b.n	8011424 <G_q+0xf10c>
  } else if (t291.re == 0.0) {
 8011396:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801139a:	ed93 7b00 	vldr	d7, [r3]
 801139e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80113a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a6:	d123      	bne.n	80113f0 <G_q+0xf0d8>
    t34_re = 0.0;
 80113a8:	f04f 0300 	mov.w	r3, #0
 80113ac:	f04f 0400 	mov.w	r4, #0
 80113b0:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80113b4:	443a      	add	r2, r7
 80113b6:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t291.im / 2.0;
 80113ba:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80113be:	ed93 6b02 	vldr	d6, [r3, #8]
 80113c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80113c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80113ca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80113ce:	443b      	add	r3, r7
 80113d0:	ed83 7b00 	vstr	d7, [r3]
 80113d4:	e026      	b.n	8011424 <G_q+0xf10c>
 80113d6:	bf00      	nop
	...
 80113e0:	858a5d48 	.word	0x858a5d48
 80113e4:	394377ce 	.word	0x394377ce
 80113e8:	33145c07 	.word	0x33145c07
 80113ec:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t291.re / 2.0;
 80113f0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80113f4:	ed93 6b00 	vldr	d6, [r3]
 80113f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80113fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011400:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011404:	443b      	add	r3, r7
 8011406:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t291.im / 2.0;
 801140a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801140e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011412:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801141a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801141e:	443b      	add	r3, r7
 8011420:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = t288.re * 3.061616997868383E-17 + t289.re * 3.061616997868383E-17;
 8011424:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011428:	ed93 7b00 	vldr	d7, [r3]
 801142c:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 80113e8 <G_q+0xf0d0>
 8011430:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011434:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011438:	ed93 7b00 	vldr	d7, [r3]
 801143c:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 80113e8 <G_q+0xf0d0>
 8011440:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011444:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011448:	f241 3368 	movw	r3, #4968	; 0x1368
 801144c:	443b      	add	r3, r7
 801144e:	ed83 7b00 	vstr	d7, [r3]
  t16_im = t288.im * 3.061616997868383E-17 + t289.im * 3.061616997868383E-17;
 8011452:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011456:	ed93 7b02 	vldr	d7, [r3, #8]
 801145a:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 80113e8 <G_q+0xf0d0>
 801145e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011462:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011466:	ed93 7b02 	vldr	d7, [r3, #8]
 801146a:	ed1f 5b21 	vldr	d5, [pc, #-132]	; 80113e8 <G_q+0xf0d0>
 801146e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011472:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011476:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801147a:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 801147e:	f241 3378 	movw	r3, #4984	; 0x1378
 8011482:	443b      	add	r3, r7
 8011484:	ed93 6b00 	vldr	d6, [r3]
 8011488:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801148c:	443b      	add	r3, r7
 801148e:	ed93 7b00 	vldr	d7, [r3]
 8011492:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011496:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 80113e0 <G_q+0xf0c8>
 801149a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801149e:	f241 3378 	movw	r3, #4984	; 0x1378
 80114a2:	443b      	add	r3, r7
 80114a4:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 80114a8:	f241 3370 	movw	r3, #4976	; 0x1370
 80114ac:	443b      	add	r3, r7
 80114ae:	ed93 6b00 	vldr	d6, [r3]
 80114b2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80114b6:	443b      	add	r3, r7
 80114b8:	ed93 7b00 	vldr	d7, [r3]
 80114bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80114c0:	f241 3370 	movw	r3, #4976	; 0x1370
 80114c4:	443b      	add	r3, r7
 80114c6:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t284.re * 3.061616997868383E-17 + t285.re * 3.061616997868383E-17;
 80114ca:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80114ce:	ed93 7b00 	vldr	d7, [r3]
 80114d2:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 80113e8 <G_q+0xf0d0>
 80114d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80114da:	4bb7      	ldr	r3, [pc, #732]	; (80117b8 <G_q+0xf4a0>)
 80114dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80114e0:	443a      	add	r2, r7
 80114e2:	4413      	add	r3, r2
 80114e4:	ed93 7b00 	vldr	d7, [r3]
 80114e8:	ed9f 5baf 	vldr	d5, [pc, #700]	; 80117a8 <G_q+0xf490>
 80114ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 80114f0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80114f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80114f8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = t284.im * 3.061616997868383E-17 + t285.im * 3.061616997868383E-17;
 80114fc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8011500:	ed93 7b02 	vldr	d7, [r3, #8]
 8011504:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80117a8 <G_q+0xf490>
 8011508:	ee27 6b06 	vmul.f64	d6, d7, d6
 801150c:	4baa      	ldr	r3, [pc, #680]	; (80117b8 <G_q+0xf4a0>)
 801150e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011512:	443a      	add	r2, r7
 8011514:	4413      	add	r3, r2
 8011516:	ed93 7b02 	vldr	d7, [r3, #8]
 801151a:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 80117a8 <G_q+0xf490>
 801151e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011522:	f241 2350 	movw	r3, #4688	; 0x1250
 8011526:	443b      	add	r3, r7
 8011528:	ee36 7b07 	vadd.f64	d7, d6, d7
 801152c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 8011530:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8011534:	443b      	add	r3, r7
 8011536:	ed93 7b00 	vldr	d7, [r3]
 801153a:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 80117b0 <G_q+0xf498>
 801153e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011542:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 8011546:	ed93 7b00 	vldr	d7, [r3]
 801154a:	ed9f 5b99 	vldr	d5, [pc, #612]	; 80117b0 <G_q+0xf498>
 801154e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011552:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t12_re * t23_re - t12_im * t3_im)) + (t16_re * t13_re - t16_im *
 8011556:	f241 3388 	movw	r3, #5000	; 0x1388
 801155a:	443b      	add	r3, r7
 801155c:	ed93 5b00 	vldr	d5, [r3]
 8011560:	f241 3330 	movw	r3, #4912	; 0x1330
 8011564:	443b      	add	r3, r7
 8011566:	ed93 7b00 	vldr	d7, [r3]
 801156a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801156e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011572:	ed93 4b00 	vldr	d4, [r3]
 8011576:	f241 3310 	movw	r3, #4880	; 0x1310
 801157a:	443b      	add	r3, r7
 801157c:	ed93 7b00 	vldr	d7, [r3]
 8011580:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011584:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011588:	ee36 6b07 	vadd.f64	d6, d6, d7
 801158c:	f241 3368 	movw	r3, #4968	; 0x1368
 8011590:	443b      	add	r3, r7
 8011592:	ed93 5b00 	vldr	d5, [r3]
 8011596:	f241 3378 	movw	r3, #4984	; 0x1378
 801159a:	443b      	add	r3, r7
 801159c:	ed93 7b00 	vldr	d7, [r3]
 80115a0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80115a4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80115a8:	ed93 4b00 	vldr	d4, [r3]
 80115ac:	f241 3370 	movw	r3, #4976	; 0x1370
 80115b0:	443b      	add	r3, r7
 80115b2:	ed93 7b00 	vldr	d7, [r3]
 80115b6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80115ba:	ee35 7b47 	vsub.f64	d7, d5, d7
 80115be:	ee36 7b07 	vadd.f64	d7, d6, d7
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 80115c2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80115c6:	443b      	add	r3, r7
 80115c8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80117b0 <G_q+0xf498>
 80115cc:	ee37 7b46 	vsub.f64	d7, d7, d6
 80115d0:	ed83 7b00 	vstr	d7, [r3]
             t13_im)) - 6.123233995736766E-17;
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 80115d4:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80115d8:	443b      	add	r3, r7
 80115da:	ed93 7b02 	vldr	d7, [r3, #8]
 80115de:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80117b0 <G_q+0xf498>
 80115e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80115e6:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80115ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80115ee:	ed9f 5b70 	vldr	d5, [pc, #448]	; 80117b0 <G_q+0xf498>
 80115f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80115f6:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t12_re * t3_im + t12_im * t23_re)) + (t16_re * t13_im + t16_im *
 80115fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80115fe:	443b      	add	r3, r7
 8011600:	ed93 5b00 	vldr	d5, [r3]
 8011604:	f241 3310 	movw	r3, #4880	; 0x1310
 8011608:	443b      	add	r3, r7
 801160a:	ed93 7b00 	vldr	d7, [r3]
 801160e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011612:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011616:	ed93 4b00 	vldr	d4, [r3]
 801161a:	f241 3330 	movw	r3, #4912	; 0x1330
 801161e:	443b      	add	r3, r7
 8011620:	ed93 7b00 	vldr	d7, [r3]
 8011624:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011628:	ee35 7b07 	vadd.f64	d7, d5, d7
 801162c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011630:	f241 3368 	movw	r3, #4968	; 0x1368
 8011634:	443b      	add	r3, r7
 8011636:	ed93 5b00 	vldr	d5, [r3]
 801163a:	f241 3370 	movw	r3, #4976	; 0x1370
 801163e:	443b      	add	r3, r7
 8011640:	ed93 7b00 	vldr	d7, [r3]
 8011644:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011648:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801164c:	ed93 4b00 	vldr	d4, [r3]
 8011650:	f241 3378 	movw	r3, #4984	; 0x1378
 8011654:	443b      	add	r3, r7
 8011656:	ed93 7b00 	vldr	d7, [r3]
 801165a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801165e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 8011662:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011666:	f241 3318 	movw	r3, #4888	; 0x1318
 801166a:	443b      	add	r3, r7
 801166c:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t270.im == 0.0) {
 8011670:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011674:	ed93 7b02 	vldr	d7, [r3, #8]
 8011678:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011680:	d116      	bne.n	80116b0 <G_q+0xf398>
    t3_im = t270.re / 2.0;
 8011682:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011686:	ed93 6b00 	vldr	d6, [r3]
 801168a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801168e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011692:	f241 3310 	movw	r3, #4880	; 0x1310
 8011696:	443b      	add	r3, r7
 8011698:	ed83 7b00 	vstr	d7, [r3]
    t23_re = 0.0;
 801169c:	f04f 0300 	mov.w	r3, #0
 80116a0:	f04f 0400 	mov.w	r4, #0
 80116a4:	f241 3230 	movw	r2, #4912	; 0x1330
 80116a8:	443a      	add	r2, r7
 80116aa:	e9c2 3400 	strd	r3, r4, [r2]
 80116ae:	e039      	b.n	8011724 <G_q+0xf40c>
  } else if (t270.re == 0.0) {
 80116b0:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80116b4:	ed93 7b00 	vldr	d7, [r3]
 80116b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80116bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80116c0:	d116      	bne.n	80116f0 <G_q+0xf3d8>
    t3_im = 0.0;
 80116c2:	f04f 0300 	mov.w	r3, #0
 80116c6:	f04f 0400 	mov.w	r4, #0
 80116ca:	f241 3210 	movw	r2, #4880	; 0x1310
 80116ce:	443a      	add	r2, r7
 80116d0:	e9c2 3400 	strd	r3, r4, [r2]
    t23_re = t270.im / 2.0;
 80116d4:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80116d8:	ed93 6b02 	vldr	d6, [r3, #8]
 80116dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80116e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80116e4:	f241 3330 	movw	r3, #4912	; 0x1330
 80116e8:	443b      	add	r3, r7
 80116ea:	ed83 7b00 	vstr	d7, [r3]
 80116ee:	e019      	b.n	8011724 <G_q+0xf40c>
  } else {
    t3_im = t270.re / 2.0;
 80116f0:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80116f4:	ed93 6b00 	vldr	d6, [r3]
 80116f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80116fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011700:	f241 3310 	movw	r3, #4880	; 0x1310
 8011704:	443b      	add	r3, r7
 8011706:	ed83 7b00 	vstr	d7, [r3]
    t23_re = t270.im / 2.0;
 801170a:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 801170e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011712:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801171a:	f241 3330 	movw	r3, #4912	; 0x1330
 801171e:	443b      	add	r3, r7
 8011720:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t271.im == 0.0) {
 8011724:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011728:	ed93 7b02 	vldr	d7, [r3, #8]
 801172c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011734:	d116      	bne.n	8011764 <G_q+0xf44c>
    t34_re = t271.re / 2.0;
 8011736:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 801173a:	ed93 6b00 	vldr	d6, [r3]
 801173e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011742:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011746:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801174a:	443b      	add	r3, r7
 801174c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011750:	f04f 0300 	mov.w	r3, #0
 8011754:	f04f 0400 	mov.w	r4, #0
 8011758:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801175c:	443a      	add	r2, r7
 801175e:	e9c2 3400 	strd	r3, r4, [r2]
 8011762:	e045      	b.n	80117f0 <G_q+0xf4d8>
  } else if (t271.re == 0.0) {
 8011764:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011768:	ed93 7b00 	vldr	d7, [r3]
 801176c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011774:	d122      	bne.n	80117bc <G_q+0xf4a4>
    t34_re = 0.0;
 8011776:	f04f 0300 	mov.w	r3, #0
 801177a:	f04f 0400 	mov.w	r4, #0
 801177e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011782:	443a      	add	r2, r7
 8011784:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t271.im / 2.0;
 8011788:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 801178c:	ed93 6b02 	vldr	d6, [r3, #8]
 8011790:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011794:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011798:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801179c:	443b      	add	r3, r7
 801179e:	ed83 7b00 	vstr	d7, [r3]
 80117a2:	e025      	b.n	80117f0 <G_q+0xf4d8>
 80117a4:	f3af 8000 	nop.w
 80117a8:	33145c07 	.word	0x33145c07
 80117ac:	3c81a626 	.word	0x3c81a626
 80117b0:	33145c07 	.word	0x33145c07
 80117b4:	3c91a626 	.word	0x3c91a626
 80117b8:	ffffefd0 	.word	0xffffefd0
  } else {
    t34_re = t271.re / 2.0;
 80117bc:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80117c0:	ed93 6b00 	vldr	d6, [r3]
 80117c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80117c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80117cc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80117d0:	443b      	add	r3, r7
 80117d2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t271.im / 2.0;
 80117d6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80117da:	ed93 6b02 	vldr	d6, [r3, #8]
 80117de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80117e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80117e6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80117ea:	443b      	add	r3, r7
 80117ec:	ed83 7b00 	vstr	d7, [r3]
  }

  t3_im += t34_re;
 80117f0:	f241 3310 	movw	r3, #4880	; 0x1310
 80117f4:	443b      	add	r3, r7
 80117f6:	ed93 6b00 	vldr	d6, [r3]
 80117fa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80117fe:	443b      	add	r3, r7
 8011800:	ed93 7b00 	vldr	d7, [r3]
 8011804:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011808:	f241 3310 	movw	r3, #4880	; 0x1310
 801180c:	443b      	add	r3, r7
 801180e:	ed83 7b00 	vstr	d7, [r3]
  t23_re += t34_im;
 8011812:	f241 3330 	movw	r3, #4912	; 0x1330
 8011816:	443b      	add	r3, r7
 8011818:	ed93 6b00 	vldr	d6, [r3]
 801181c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011820:	443b      	add	r3, r7
 8011822:	ed93 7b00 	vldr	d7, [r3]
 8011826:	ee36 7b07 	vadd.f64	d7, d6, d7
 801182a:	f241 3330 	movw	r3, #4912	; 0x1330
 801182e:	443b      	add	r3, r7
 8011830:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t272.re * 0.0 - t272.im * 0.5) - (t273.re * 0.0 - t273.im * 0.5);
 8011834:	f241 1370 	movw	r3, #4464	; 0x1170
 8011838:	443b      	add	r3, r7
 801183a:	ed93 7b00 	vldr	d7, [r3]
 801183e:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011a28 <G_q+0xf710>
 8011842:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011846:	f241 1370 	movw	r3, #4464	; 0x1170
 801184a:	443b      	add	r3, r7
 801184c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011850:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011854:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011858:	ee36 6b47 	vsub.f64	d6, d6, d7
 801185c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011860:	ed93 7b00 	vldr	d7, [r3]
 8011864:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8011a28 <G_q+0xf710>
 8011868:	ee27 5b05 	vmul.f64	d5, d7, d5
 801186c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011870:	ed93 7b02 	vldr	d7, [r3, #8]
 8011874:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011878:	ee27 7b04 	vmul.f64	d7, d7, d4
 801187c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011880:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011884:	f241 3378 	movw	r3, #4984	; 0x1378
 8011888:	443b      	add	r3, r7
 801188a:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t272.re * 0.5 + t272.im * 0.0) - (t273.re * 0.5 + t273.im * 0.0);
 801188e:	f241 1370 	movw	r3, #4464	; 0x1170
 8011892:	443b      	add	r3, r7
 8011894:	ed93 7b00 	vldr	d7, [r3]
 8011898:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801189c:	ee27 6b06 	vmul.f64	d6, d7, d6
 80118a0:	f241 1370 	movw	r3, #4464	; 0x1170
 80118a4:	443b      	add	r3, r7
 80118a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80118aa:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8011a28 <G_q+0xf710>
 80118ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80118b2:	ee36 6b07 	vadd.f64	d6, d6, d7
 80118b6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80118ba:	ed93 7b00 	vldr	d7, [r3]
 80118be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80118c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80118c6:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 80118ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80118ce:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8011a28 <G_q+0xf710>
 80118d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80118d6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80118da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80118de:	f241 3370 	movw	r3, #4976	; 0x1370
 80118e2:	443b      	add	r3, r7
 80118e4:	ed83 7b00 	vstr	d7, [r3]
  if (t276.im == 0.0) {
 80118e8:	f241 1390 	movw	r3, #4496	; 0x1190
 80118ec:	443b      	add	r3, r7
 80118ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80118f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80118f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80118fa:	d116      	bne.n	801192a <G_q+0xf612>
    t16_re = t276.re / 2.0;
 80118fc:	f241 1390 	movw	r3, #4496	; 0x1190
 8011900:	443b      	add	r3, r7
 8011902:	ed93 6b00 	vldr	d6, [r3]
 8011906:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801190a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801190e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011912:	443b      	add	r3, r7
 8011914:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011918:	f04f 0300 	mov.w	r3, #0
 801191c:	f04f 0400 	mov.w	r4, #0
 8011920:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011924:	e9c2 3400 	strd	r3, r4, [r2]
 8011928:	e03b      	b.n	80119a2 <G_q+0xf68a>
  } else if (t276.re == 0.0) {
 801192a:	f241 1390 	movw	r3, #4496	; 0x1190
 801192e:	443b      	add	r3, r7
 8011930:	ed93 7b00 	vldr	d7, [r3]
 8011934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801193c:	d116      	bne.n	801196c <G_q+0xf654>
    t16_re = 0.0;
 801193e:	f04f 0300 	mov.w	r3, #0
 8011942:	f04f 0400 	mov.w	r4, #0
 8011946:	f241 3268 	movw	r2, #4968	; 0x1368
 801194a:	443a      	add	r2, r7
 801194c:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t276.im / 2.0;
 8011950:	f241 1390 	movw	r3, #4496	; 0x1190
 8011954:	443b      	add	r3, r7
 8011956:	ed93 6b02 	vldr	d6, [r3, #8]
 801195a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801195e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011962:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011966:	ed83 7b00 	vstr	d7, [r3]
 801196a:	e01a      	b.n	80119a2 <G_q+0xf68a>
  } else {
    t16_re = t276.re / 2.0;
 801196c:	f241 1390 	movw	r3, #4496	; 0x1190
 8011970:	443b      	add	r3, r7
 8011972:	ed93 6b00 	vldr	d6, [r3]
 8011976:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801197a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801197e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011982:	443b      	add	r3, r7
 8011984:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t276.im / 2.0;
 8011988:	f241 1390 	movw	r3, #4496	; 0x1190
 801198c:	443b      	add	r3, r7
 801198e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011992:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011996:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801199a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801199e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t277.im == 0.0) {
 80119a2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80119a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80119aa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119b2:	d116      	bne.n	80119e2 <G_q+0xf6ca>
    t34_re = t277.re / 2.0;
 80119b4:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80119b8:	ed93 6b00 	vldr	d6, [r3]
 80119bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119c4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80119c8:	443b      	add	r3, r7
 80119ca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80119ce:	f04f 0300 	mov.w	r3, #0
 80119d2:	f04f 0400 	mov.w	r4, #0
 80119d6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80119da:	443a      	add	r2, r7
 80119dc:	e9c2 3400 	strd	r3, r4, [r2]
 80119e0:	e040      	b.n	8011a64 <G_q+0xf74c>
  } else if (t277.re == 0.0) {
 80119e2:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 80119e6:	ed93 7b00 	vldr	d7, [r3]
 80119ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119f2:	d11d      	bne.n	8011a30 <G_q+0xf718>
    t34_re = 0.0;
 80119f4:	f04f 0300 	mov.w	r3, #0
 80119f8:	f04f 0400 	mov.w	r4, #0
 80119fc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011a00:	443a      	add	r2, r7
 8011a02:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t277.im / 2.0;
 8011a06:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011a0a:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a16:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011a1a:	443b      	add	r3, r7
 8011a1c:	ed83 7b00 	vstr	d7, [r3]
 8011a20:	e020      	b.n	8011a64 <G_q+0xf74c>
 8011a22:	bf00      	nop
 8011a24:	f3af 8000 	nop.w
	...
  } else {
    t34_re = t277.re / 2.0;
 8011a30:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011a34:	ed93 6b00 	vldr	d6, [r3]
 8011a38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a40:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011a44:	443b      	add	r3, r7
 8011a46:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t277.im / 2.0;
 8011a4a:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011a4e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a5a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011a5e:	443b      	add	r3, r7
 8011a60:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t274.re * 0.0 - t274.im * 0.5) - (t275.re * 0.0 - t275.im * 0.5);
 8011a64:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011a68:	ed93 7b00 	vldr	d7, [r3]
 8011a6c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 8011df0 <G_q+0xfad8>
 8011a70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011a74:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011a78:	ed93 7b02 	vldr	d7, [r3, #8]
 8011a7c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011a80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011a84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011a88:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011a8c:	ed93 7b00 	vldr	d7, [r3]
 8011a90:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 8011df0 <G_q+0xfad8>
 8011a94:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011a98:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011a9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011aa0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011aa4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011aa8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011aac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ab0:	f241 3348 	movw	r3, #4936	; 0x1348
 8011ab4:	443b      	add	r3, r7
 8011ab6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t274.re * 0.5 + t274.im * 0.0) - (t275.re * 0.5 + t275.im * 0.0);
 8011aba:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011abe:	ed93 7b00 	vldr	d7, [r3]
 8011ac2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011ac6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011aca:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011ace:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ad2:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8011df0 <G_q+0xfad8>
 8011ad6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011ada:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011ade:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011ae2:	ed93 7b00 	vldr	d7, [r3]
 8011ae6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011aea:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011aee:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011af2:	ed93 7b02 	vldr	d7, [r3, #8]
 8011af6:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 8011df0 <G_q+0xfad8>
 8011afa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011afe:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011b02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b06:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011b0a:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 8011b0e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011b12:	443b      	add	r3, r7
 8011b14:	ed93 6b00 	vldr	d6, [r3]
 8011b18:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011b1c:	443b      	add	r3, r7
 8011b1e:	ed93 7b00 	vldr	d7, [r3]
 8011b22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b26:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 8011df8 <G_q+0xfae0>
 8011b2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011b2e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011b32:	443b      	add	r3, r7
 8011b34:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8011b38:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011b3c:	ed93 6b00 	vldr	d6, [r3]
 8011b40:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011b44:	443b      	add	r3, r7
 8011b46:	ed93 7b00 	vldr	d7, [r3]
 8011b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011b4e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011b52:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011b56:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011b5a:	ed93 7b00 	vldr	d7, [r3]
 8011b5e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8011df0 <G_q+0xfad8>
 8011b62:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b66:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011b6a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b6e:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 8011e00 <G_q+0xfae8>
 8011b72:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b76:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011b7a:	4ba3      	ldr	r3, [pc, #652]	; (8011e08 <G_q+0xfaf0>)
 8011b7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011b80:	443a      	add	r2, r7
 8011b82:	4413      	add	r3, r2
 8011b84:	ed93 7b00 	vldr	d7, [r3]
 8011b88:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8011df0 <G_q+0xfad8>
 8011b8c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t279.im * 3.061616997868383E-17);
 8011b90:	4b9d      	ldr	r3, [pc, #628]	; (8011e08 <G_q+0xfaf0>)
 8011b92:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011b96:	443a      	add	r2, r7
 8011b98:	4413      	add	r3, r2
 8011b9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b9e:	ed9f 4b98 	vldr	d4, [pc, #608]	; 8011e00 <G_q+0xfae8>
 8011ba2:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011ba6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011baa:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011bae:	f241 3388 	movw	r3, #5000	; 0x1388
 8011bb2:	443b      	add	r3, r7
 8011bb4:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011bb8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011bbc:	ed93 7b00 	vldr	d7, [r3]
 8011bc0:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 8011e00 <G_q+0xfae8>
 8011bc4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011bc8:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011bcc:	ed93 7b02 	vldr	d7, [r3, #8]
 8011bd0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 8011df0 <G_q+0xfad8>
 8011bd4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011bd8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011bdc:	4b8a      	ldr	r3, [pc, #552]	; (8011e08 <G_q+0xfaf0>)
 8011bde:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011be2:	443a      	add	r2, r7
 8011be4:	4413      	add	r3, r2
 8011be6:	ed93 7b00 	vldr	d7, [r3]
 8011bea:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8011e00 <G_q+0xfae8>
 8011bee:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t279.im * 0.0);
 8011bf2:	4b85      	ldr	r3, [pc, #532]	; (8011e08 <G_q+0xfaf0>)
 8011bf4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011bf8:	443a      	add	r2, r7
 8011bfa:	4413      	add	r3, r2
 8011bfc:	ed93 7b02 	vldr	d7, [r3, #8]
 8011c00:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 8011df0 <G_q+0xfad8>
 8011c04:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011c08:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011c0c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c10:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011c14:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t3_im * t13_re - t23_re * t13_im) - (t20_re * t16_re - t20_im *
 8011c18:	f241 3310 	movw	r3, #4880	; 0x1310
 8011c1c:	443b      	add	r3, r7
 8011c1e:	ed93 6b00 	vldr	d6, [r3]
 8011c22:	f241 3378 	movw	r3, #4984	; 0x1378
 8011c26:	443b      	add	r3, r7
 8011c28:	ed93 7b00 	vldr	d7, [r3]
 8011c2c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011c30:	f241 3330 	movw	r3, #4912	; 0x1330
 8011c34:	443b      	add	r3, r7
 8011c36:	ed93 5b00 	vldr	d5, [r3]
 8011c3a:	f241 3370 	movw	r3, #4976	; 0x1370
 8011c3e:	443b      	add	r3, r7
 8011c40:	ed93 7b00 	vldr	d7, [r3]
 8011c44:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011c48:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011c4c:	f241 3348 	movw	r3, #4936	; 0x1348
 8011c50:	443b      	add	r3, r7
 8011c52:	ed93 5b00 	vldr	d5, [r3]
 8011c56:	f241 3368 	movw	r3, #4968	; 0x1368
 8011c5a:	443b      	add	r3, r7
 8011c5c:	ed93 7b00 	vldr	d7, [r3]
 8011c60:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011c64:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011c68:	ed93 4b00 	vldr	d4, [r3]
 8011c6c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c70:	ed93 7b00 	vldr	d7, [r3]
 8011c74:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011c78:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011c7c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011c80:	f241 3338 	movw	r3, #4920	; 0x1338
 8011c84:	443b      	add	r3, r7
 8011c86:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re = (t3_im * t13_im + t23_re * t13_re) - (t20_re * t16_im + t20_im *
 8011c8a:	f241 3310 	movw	r3, #4880	; 0x1310
 8011c8e:	443b      	add	r3, r7
 8011c90:	ed93 6b00 	vldr	d6, [r3]
 8011c94:	f241 3370 	movw	r3, #4976	; 0x1370
 8011c98:	443b      	add	r3, r7
 8011c9a:	ed93 7b00 	vldr	d7, [r3]
 8011c9e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011ca2:	f241 3330 	movw	r3, #4912	; 0x1330
 8011ca6:	443b      	add	r3, r7
 8011ca8:	ed93 5b00 	vldr	d5, [r3]
 8011cac:	f241 3378 	movw	r3, #4984	; 0x1378
 8011cb0:	443b      	add	r3, r7
 8011cb2:	ed93 7b00 	vldr	d7, [r3]
 8011cb6:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011cba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011cbe:	f241 3348 	movw	r3, #4936	; 0x1348
 8011cc2:	443b      	add	r3, r7
 8011cc4:	ed93 5b00 	vldr	d5, [r3]
 8011cc8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011ccc:	ed93 7b00 	vldr	d7, [r3]
 8011cd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011cd4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011cd8:	ed93 4b00 	vldr	d4, [r3]
 8011cdc:	f241 3368 	movw	r3, #4968	; 0x1368
 8011ce0:	443b      	add	r3, r7
 8011ce2:	ed93 7b00 	vldr	d7, [r3]
 8011ce6:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011cea:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011cee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011cf2:	f241 3330 	movw	r3, #4912	; 0x1330
 8011cf6:	443b      	add	r3, r7
 8011cf8:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t296.im == 0.0) {
 8011cfc:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d00:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d04:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d0c:	d115      	bne.n	8011d3a <G_q+0xfa22>
    t16_re = t296.re / 2.0;
 8011d0e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d12:	ed93 6b00 	vldr	d6, [r3]
 8011d16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d1e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011d22:	443b      	add	r3, r7
 8011d24:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011d28:	f04f 0300 	mov.w	r3, #0
 8011d2c:	f04f 0400 	mov.w	r4, #0
 8011d30:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011d34:	e9c2 3400 	strd	r3, r4, [r2]
 8011d38:	e037      	b.n	8011daa <G_q+0xfa92>
  } else if (t296.re == 0.0) {
 8011d3a:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d3e:	ed93 7b00 	vldr	d7, [r3]
 8011d42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011d46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d4a:	d115      	bne.n	8011d78 <G_q+0xfa60>
    t16_re = 0.0;
 8011d4c:	f04f 0300 	mov.w	r3, #0
 8011d50:	f04f 0400 	mov.w	r4, #0
 8011d54:	f241 3268 	movw	r2, #4968	; 0x1368
 8011d58:	443a      	add	r2, r7
 8011d5a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t296.im / 2.0;
 8011d5e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d62:	ed93 6b02 	vldr	d6, [r3, #8]
 8011d66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d6e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011d72:	ed83 7b00 	vstr	d7, [r3]
 8011d76:	e018      	b.n	8011daa <G_q+0xfa92>
  } else {
    t16_re = t296.re / 2.0;
 8011d78:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d7c:	ed93 6b00 	vldr	d6, [r3]
 8011d80:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d88:	f241 3368 	movw	r3, #4968	; 0x1368
 8011d8c:	443b      	add	r3, r7
 8011d8e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t296.im / 2.0;
 8011d92:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011d96:	ed93 6b02 	vldr	d6, [r3, #8]
 8011d9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011da2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011da6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t297.im == 0.0) {
 8011daa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011dae:	ed93 7b02 	vldr	d7, [r3, #8]
 8011db2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011db6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011dba:	d127      	bne.n	8011e0c <G_q+0xfaf4>
    t34_re = t297.re / 2.0;
 8011dbc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011dc0:	ed93 6b00 	vldr	d6, [r3]
 8011dc4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011dc8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011dcc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011dd0:	443b      	add	r3, r7
 8011dd2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011dd6:	f04f 0300 	mov.w	r3, #0
 8011dda:	f04f 0400 	mov.w	r4, #0
 8011dde:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011de2:	443a      	add	r2, r7
 8011de4:	e9c2 3400 	strd	r3, r4, [r2]
 8011de8:	e04a      	b.n	8011e80 <G_q+0xfb68>
 8011dea:	bf00      	nop
 8011dec:	f3af 8000 	nop.w
	...
 8011df8:	858a5d48 	.word	0x858a5d48
 8011dfc:	394377ce 	.word	0x394377ce
 8011e00:	33145c07 	.word	0x33145c07
 8011e04:	3c81a626 	.word	0x3c81a626
 8011e08:	ffffefb0 	.word	0xffffefb0
  } else if (t297.re == 0.0) {
 8011e0c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011e10:	ed93 7b00 	vldr	d7, [r3]
 8011e14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e1c:	d116      	bne.n	8011e4c <G_q+0xfb34>
    t34_re = 0.0;
 8011e1e:	f04f 0300 	mov.w	r3, #0
 8011e22:	f04f 0400 	mov.w	r4, #0
 8011e26:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011e2a:	443a      	add	r2, r7
 8011e2c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t297.im / 2.0;
 8011e30:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011e34:	ed93 6b02 	vldr	d6, [r3, #8]
 8011e38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e40:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011e44:	443b      	add	r3, r7
 8011e46:	ed83 7b00 	vstr	d7, [r3]
 8011e4a:	e019      	b.n	8011e80 <G_q+0xfb68>
  } else {
    t34_re = t297.re / 2.0;
 8011e4c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011e50:	ed93 6b00 	vldr	d6, [r3]
 8011e54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e5c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011e60:	443b      	add	r3, r7
 8011e62:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t297.im / 2.0;
 8011e66:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8011e6a:	ed93 6b02 	vldr	d6, [r3, #8]
 8011e6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011e72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011e76:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011e7a:	443b      	add	r3, r7
 8011e7c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t298.im == 0.0) {
 8011e80:	f241 2330 	movw	r3, #4656	; 0x1230
 8011e84:	443b      	add	r3, r7
 8011e86:	ed93 7b02 	vldr	d7, [r3, #8]
 8011e8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e92:	d116      	bne.n	8011ec2 <G_q+0xfbaa>
    t20_re = t298.re / 2.0;
 8011e94:	f241 2330 	movw	r3, #4656	; 0x1230
 8011e98:	443b      	add	r3, r7
 8011e9a:	ed93 6b00 	vldr	d6, [r3]
 8011e9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ea2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011ea6:	f241 3348 	movw	r3, #4936	; 0x1348
 8011eaa:	443b      	add	r3, r7
 8011eac:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8011eb0:	f04f 0300 	mov.w	r3, #0
 8011eb4:	f04f 0400 	mov.w	r4, #0
 8011eb8:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8011ebc:	e9c2 3400 	strd	r3, r4, [r2]
 8011ec0:	e03b      	b.n	8011f3a <G_q+0xfc22>
  } else if (t298.re == 0.0) {
 8011ec2:	f241 2330 	movw	r3, #4656	; 0x1230
 8011ec6:	443b      	add	r3, r7
 8011ec8:	ed93 7b00 	vldr	d7, [r3]
 8011ecc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ed4:	d116      	bne.n	8011f04 <G_q+0xfbec>
    t20_re = 0.0;
 8011ed6:	f04f 0300 	mov.w	r3, #0
 8011eda:	f04f 0400 	mov.w	r4, #0
 8011ede:	f241 3248 	movw	r2, #4936	; 0x1348
 8011ee2:	443a      	add	r2, r7
 8011ee4:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t298.im / 2.0;
 8011ee8:	f241 2330 	movw	r3, #4656	; 0x1230
 8011eec:	443b      	add	r3, r7
 8011eee:	ed93 6b02 	vldr	d6, [r3, #8]
 8011ef2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011ef6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011efa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011efe:	ed83 7b00 	vstr	d7, [r3]
 8011f02:	e01a      	b.n	8011f3a <G_q+0xfc22>
  } else {
    t20_re = t298.re / 2.0;
 8011f04:	f241 2330 	movw	r3, #4656	; 0x1230
 8011f08:	443b      	add	r3, r7
 8011f0a:	ed93 6b00 	vldr	d6, [r3]
 8011f0e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f12:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f16:	f241 3348 	movw	r3, #4936	; 0x1348
 8011f1a:	443b      	add	r3, r7
 8011f1c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t298.im / 2.0;
 8011f20:	f241 2330 	movw	r3, #4656	; 0x1230
 8011f24:	443b      	add	r3, r7
 8011f26:	ed93 6b02 	vldr	d6, [r3, #8]
 8011f2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f32:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011f36:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t299.im == 0.0) {
 8011f3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011f3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011f42:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f4a:	d116      	bne.n	8011f7a <G_q+0xfc62>
    t13_re = t299.re / 2.0;
 8011f4c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011f50:	ed93 6b00 	vldr	d6, [r3]
 8011f54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011f58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011f5c:	f241 3378 	movw	r3, #4984	; 0x1378
 8011f60:	443b      	add	r3, r7
 8011f62:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8011f66:	f04f 0300 	mov.w	r3, #0
 8011f6a:	f04f 0400 	mov.w	r4, #0
 8011f6e:	f241 3270 	movw	r2, #4976	; 0x1370
 8011f72:	443a      	add	r2, r7
 8011f74:	e9c2 3400 	strd	r3, r4, [r2]
 8011f78:	e039      	b.n	8011fee <G_q+0xfcd6>
  } else if (t299.re == 0.0) {
 8011f7a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011f7e:	ed93 7b00 	vldr	d7, [r3]
 8011f82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f8a:	d116      	bne.n	8011fba <G_q+0xfca2>
    t13_re = 0.0;
 8011f8c:	f04f 0300 	mov.w	r3, #0
 8011f90:	f04f 0400 	mov.w	r4, #0
 8011f94:	f241 3278 	movw	r2, #4984	; 0x1378
 8011f98:	443a      	add	r2, r7
 8011f9a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t299.im / 2.0;
 8011f9e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011fa2:	ed93 6b02 	vldr	d6, [r3, #8]
 8011fa6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011faa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fae:	f241 3370 	movw	r3, #4976	; 0x1370
 8011fb2:	443b      	add	r3, r7
 8011fb4:	ed83 7b00 	vstr	d7, [r3]
 8011fb8:	e019      	b.n	8011fee <G_q+0xfcd6>
  } else {
    t13_re = t299.re / 2.0;
 8011fba:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011fbe:	ed93 6b00 	vldr	d6, [r3]
 8011fc2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011fc6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fca:	f241 3378 	movw	r3, #4984	; 0x1378
 8011fce:	443b      	add	r3, r7
 8011fd0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t299.im / 2.0;
 8011fd4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8011fd8:	ed93 6b02 	vldr	d6, [r3, #8]
 8011fdc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011fe0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fe4:	f241 3370 	movw	r3, #4976	; 0x1370
 8011fe8:	443b      	add	r3, r7
 8011fea:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 8011fee:	f241 3368 	movw	r3, #4968	; 0x1368
 8011ff2:	443b      	add	r3, r7
 8011ff4:	ed93 6b00 	vldr	d6, [r3]
 8011ff8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011ffc:	443b      	add	r3, r7
 8011ffe:	ed93 7b00 	vldr	d7, [r3]
 8012002:	ee36 7b07 	vadd.f64	d7, d6, d7
 8012006:	f241 3368 	movw	r3, #4968	; 0x1368
 801200a:	443b      	add	r3, r7
 801200c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8012010:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012014:	ed93 6b00 	vldr	d6, [r3]
 8012018:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801201c:	443b      	add	r3, r7
 801201e:	ed93 7b00 	vldr	d7, [r3]
 8012022:	ee36 7b07 	vadd.f64	d7, d6, d7
 8012026:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801202a:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t13_re) + 7.498798913309288E-33;
 801202e:	f241 3348 	movw	r3, #4936	; 0x1348
 8012032:	443b      	add	r3, r7
 8012034:	ed93 6b00 	vldr	d6, [r3]
 8012038:	f241 3378 	movw	r3, #4984	; 0x1378
 801203c:	443b      	add	r3, r7
 801203e:	ed93 7b00 	vldr	d7, [r3]
 8012042:	ee36 7b07 	vadd.f64	d7, d6, d7
 8012046:	ed9f 6be6 	vldr	d6, [pc, #920]	; 80123e0 <G_q+0x100c8>
 801204a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801204e:	f241 3348 	movw	r3, #4936	; 0x1348
 8012052:	443b      	add	r3, r7
 8012054:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t13_im;
 8012058:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801205c:	ed93 6b00 	vldr	d6, [r3]
 8012060:	f241 3370 	movw	r3, #4976	; 0x1370
 8012064:	443b      	add	r3, r7
 8012066:	ed93 7b00 	vldr	d7, [r3]
 801206a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801206e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012072:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t266.re * 0.0 - t266.im * 0.5) - (t267.re * 0.0 - t267.im * 0.5);
 8012076:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801207a:	ed93 7b00 	vldr	d7, [r3]
 801207e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 80123e8 <G_q+0x100d0>
 8012082:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012086:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801208a:	ed93 7b02 	vldr	d7, [r3, #8]
 801208e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012092:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012096:	ee36 6b47 	vsub.f64	d6, d6, d7
 801209a:	4bd9      	ldr	r3, [pc, #868]	; (8012400 <G_q+0x100e8>)
 801209c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80120a0:	443a      	add	r2, r7
 80120a2:	4413      	add	r3, r2
 80120a4:	ed93 7b00 	vldr	d7, [r3]
 80120a8:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 80123e8 <G_q+0x100d0>
 80120ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80120b0:	4bd3      	ldr	r3, [pc, #844]	; (8012400 <G_q+0x100e8>)
 80120b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80120b6:	443a      	add	r2, r7
 80120b8:	4413      	add	r3, r2
 80120ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80120be:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80120c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80120c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80120ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 80120ce:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80120d2:	443b      	add	r3, r7
 80120d4:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t266.re * 0.5 + t266.im * 0.0) - (t267.re * 0.5 + t267.im * 0.0);
 80120d8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80120dc:	ed93 7b00 	vldr	d7, [r3]
 80120e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80120e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80120e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80120ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80120f0:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 80123e8 <G_q+0x100d0>
 80120f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80120f8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80120fc:	4bc0      	ldr	r3, [pc, #768]	; (8012400 <G_q+0x100e8>)
 80120fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012102:	443a      	add	r2, r7
 8012104:	4413      	add	r3, r2
 8012106:	ed93 7b00 	vldr	d7, [r3]
 801210a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801210e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012112:	4bbb      	ldr	r3, [pc, #748]	; (8012400 <G_q+0x100e8>)
 8012114:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012118:	443a      	add	r2, r7
 801211a:	4413      	add	r3, r2
 801211c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012120:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 80123e8 <G_q+0x100d0>
 8012124:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012128:	ee35 7b07 	vadd.f64	d7, d5, d7
 801212c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012130:	f241 3378 	movw	r3, #4984	; 0x1378
 8012134:	443b      	add	r3, r7
 8012136:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 801213a:	f241 1350 	movw	r3, #4432	; 0x1150
 801213e:	443b      	add	r3, r7
 8012140:	ed93 7b00 	vldr	d7, [r3]
 8012144:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80123f0 <G_q+0x100d8>
 8012148:	ee27 6b06 	vmul.f64	d6, d7, d6
 801214c:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8012150:	ed93 7b00 	vldr	d7, [r3]
 8012154:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 80123f0 <G_q+0x100d8>
 8012158:	ee27 7b05 	vmul.f64	d7, d7, d5
 801215c:	ee36 6b07 	vadd.f64	d6, d6, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012160:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8012164:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8012168:	443b      	add	r3, r7
 801216a:	ed92 5b00 	vldr	d5, [r2]
 801216e:	ed93 7b00 	vldr	d7, [r3]
 8012172:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012176:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801217a:	443b      	add	r3, r7
 801217c:	ed93 4b00 	vldr	d4, [r3]
 8012180:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012184:	ed93 7b00 	vldr	d7, [r3]
 8012188:	ee24 7b07 	vmul.f64	d7, d4, d7
 801218c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012190:	ee36 6b47 	vsub.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8012194:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8012198:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801219c:	443b      	add	r3, r7
 801219e:	ed92 5b00 	vldr	d5, [r2]
 80121a2:	ed93 7b00 	vldr	d7, [r3]
 80121a6:	ee25 5b07 	vmul.f64	d5, d5, d7
 80121aa:	f241 2350 	movw	r3, #4688	; 0x1250
 80121ae:	443b      	add	r3, r7
 80121b0:	ed93 4b00 	vldr	d4, [r3]
 80121b4:	f241 3318 	movw	r3, #4888	; 0x1318
 80121b8:	443b      	add	r3, r7
 80121ba:	ed93 7b00 	vldr	d7, [r3]
 80121be:	ee24 7b07 	vmul.f64	d7, d4, d7
 80121c2:	ee35 7b47 	vsub.f64	d7, d5, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 80121c6:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 80121ca:	f241 3388 	movw	r3, #5000	; 0x1388
 80121ce:	443b      	add	r3, r7
 80121d0:	ed93 5b00 	vldr	d5, [r3]
 80121d4:	f241 3338 	movw	r3, #4920	; 0x1338
 80121d8:	443b      	add	r3, r7
 80121da:	ed93 7b00 	vldr	d7, [r3]
 80121de:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80121e2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80121e6:	ed93 4b00 	vldr	d4, [r3]
 80121ea:	f241 3330 	movw	r3, #4912	; 0x1330
 80121ee:	443b      	add	r3, r7
 80121f0:	ed93 7b00 	vldr	d7, [r3]
 80121f4:	ee24 7b07 	vmul.f64	d7, d4, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 80121f8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80121fc:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 8012200:	f241 3368 	movw	r3, #4968	; 0x1368
 8012204:	443b      	add	r3, r7
 8012206:	ed93 5b00 	vldr	d5, [r3]
 801220a:	f241 3348 	movw	r3, #4936	; 0x1348
 801220e:	443b      	add	r3, r7
 8012210:	ed93 7b00 	vldr	d7, [r3]
 8012214:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012218:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801221c:	ed93 4b00 	vldr	d4, [r3]
 8012220:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012224:	ed93 7b00 	vldr	d7, [r3]
 8012228:	ee24 7b07 	vmul.f64	d7, d4, d7
 801222c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012230:	ee36 7b47 	vsub.f64	d7, d6, d7
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 8012234:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80123f0 <G_q+0x100d8>
 8012238:	ee37 7b46 	vsub.f64	d7, d7, d6
 801223c:	f241 3370 	movw	r3, #4976	; 0x1370
 8012240:	443b      	add	r3, r7
 8012242:	ed83 7b00 	vstr	d7, [r3]
    3.749399456654644E-33;
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 8012246:	f241 1350 	movw	r3, #4432	; 0x1150
 801224a:	443b      	add	r3, r7
 801224c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012250:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80123f0 <G_q+0x100d8>
 8012254:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012258:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 801225c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012260:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80123f0 <G_q+0x100d8>
 8012264:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012268:	ee36 6b07 	vadd.f64	d6, d6, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801226c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8012270:	ed93 5b00 	vldr	d5, [r3]
 8012274:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012278:	ed93 7b00 	vldr	d7, [r3]
 801227c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012280:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8012284:	443a      	add	r2, r7
 8012286:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801228a:	443b      	add	r3, r7
 801228c:	ed92 4b00 	vldr	d4, [r2]
 8012290:	ed93 7b00 	vldr	d7, [r3]
 8012294:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012298:	ee35 7b07 	vadd.f64	d7, d5, d7
 801229c:	ee36 6b47 	vsub.f64	d6, d6, d7
 80122a0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80122a4:	ed93 5b00 	vldr	d5, [r3]
 80122a8:	f241 3318 	movw	r3, #4888	; 0x1318
 80122ac:	443b      	add	r3, r7
 80122ae:	ed93 7b00 	vldr	d7, [r3]
 80122b2:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 80122b6:	f241 2250 	movw	r2, #4688	; 0x1250
 80122ba:	443a      	add	r2, r7
 80122bc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80122c0:	443b      	add	r3, r7
 80122c2:	ed92 4b00 	vldr	d4, [r2]
 80122c6:	ed93 7b00 	vldr	d7, [r3]
 80122ca:	ee24 7b07 	vmul.f64	d7, d4, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 80122ce:	ee35 7b07 	vadd.f64	d7, d5, d7
 80122d2:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 80122d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80122da:	443b      	add	r3, r7
 80122dc:	ed93 5b00 	vldr	d5, [r3]
 80122e0:	f241 3330 	movw	r3, #4912	; 0x1330
 80122e4:	443b      	add	r3, r7
 80122e6:	ed93 7b00 	vldr	d7, [r3]
 80122ea:	ee25 5b07 	vmul.f64	d5, d5, d7
 80122ee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80122f2:	ed93 4b00 	vldr	d4, [r3]
 80122f6:	f241 3338 	movw	r3, #4920	; 0x1338
 80122fa:	443b      	add	r3, r7
 80122fc:	ed93 7b00 	vldr	d7, [r3]
 8012300:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012304:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012308:	ee36 6b07 	vadd.f64	d6, d6, d7
 801230c:	f241 3368 	movw	r3, #4968	; 0x1368
 8012310:	443b      	add	r3, r7
 8012312:	ed93 5b00 	vldr	d5, [r3]
 8012316:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801231a:	ed93 7b00 	vldr	d7, [r3]
 801231e:	ee25 5b07 	vmul.f64	d5, d5, d7
    t20_im + t16_im * t20_re);
 8012322:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012326:	ed93 4b00 	vldr	d4, [r3]
 801232a:	f241 3348 	movw	r3, #4936	; 0x1348
 801232e:	443b      	add	r3, r7
 8012330:	ed93 7b00 	vldr	d7, [r3]
 8012334:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012338:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 801233c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8012340:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012344:	443b      	add	r3, r7
 8012346:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 801234a:	4b2e      	ldr	r3, [pc, #184]	; (8012404 <G_q+0x100ec>)
 801234c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012350:	443a      	add	r2, r7
 8012352:	4413      	add	r3, r2
 8012354:	ed93 7b00 	vldr	d7, [r3]
 8012358:	eeb1 6b47 	vneg.f64	d6, d7
 801235c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8012360:	443b      	add	r3, r7
 8012362:	ed93 5b00 	vldr	d5, [r3]
 8012366:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801236a:	443b      	add	r3, r7
 801236c:	ed93 7b00 	vldr	d7, [r3]
 8012370:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012374:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012378:	443b      	add	r3, r7
 801237a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 801237e:	443a      	add	r2, r7
 8012380:	ed92 4b00 	vldr	d4, [r2]
 8012384:	ed93 7b00 	vldr	d7, [r3]
 8012388:	ee24 7b07 	vmul.f64	d7, d4, d7
 801238c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012390:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80123f8 <G_q+0x100e0>
 8012394:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012398:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801239c:	443b      	add	r3, r7
 801239e:	ed93 4b00 	vldr	d4, [r3]
 80123a2:	f241 3370 	movw	r3, #4976	; 0x1370
 80123a6:	443b      	add	r3, r7
 80123a8:	ed93 7b00 	vldr	d7, [r3]
 80123ac:	ee24 4b07 	vmul.f64	d4, d4, d7
    t13_im - t13_re * t34_re) * 0.0215);
 80123b0:	f241 3378 	movw	r3, #4984	; 0x1378
 80123b4:	443b      	add	r3, r7
 80123b6:	ed93 3b00 	vldr	d3, [r3]
 80123ba:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80123be:	443b      	add	r3, r7
 80123c0:	ed93 7b00 	vldr	d7, [r3]
 80123c4:	ee23 7b07 	vmul.f64	d7, d3, d7
 80123c8:	ee34 7b47 	vsub.f64	d7, d4, d7
 80123cc:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 80123f8 <G_q+0x100e0>
 80123d0:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 80123d4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80123d8:	e016      	b.n	8012408 <G_q+0x100f0>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	858a5d48 	.word	0x858a5d48
 80123e4:	394377ce 	.word	0x394377ce
	...
 80123f0:	858a5d48 	.word	0x858a5d48
 80123f4:	393377ce 	.word	0x393377ce
 80123f8:	9374bc6a 	.word	0x9374bc6a
 80123fc:	3f960418 	.word	0x3f960418
 8012400:	ffffed30 	.word	0xffffed30
 8012404:	ffffec58 	.word	0xffffec58
 8012408:	4b41      	ldr	r3, [pc, #260]	; (8012510 <G_q+0x101f8>)
 801240a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801240e:	443a      	add	r2, r7
 8012410:	4413      	add	r3, r2
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	3340      	adds	r3, #64	; 0x40
 8012416:	ee26 7b07 	vmul.f64	d7, d6, d7
 801241a:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 801241e:	4b3d      	ldr	r3, [pc, #244]	; (8012514 <G_q+0x101fc>)
 8012420:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012424:	443a      	add	r2, r7
 8012426:	4413      	add	r3, r2
 8012428:	ed93 7b00 	vldr	d7, [r3]
 801242c:	eeb1 6b47 	vneg.f64	d6, d7
 8012430:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8012434:	443a      	add	r2, r7
 8012436:	f241 23d0 	movw	r3, #4816	; 0x12d0
 801243a:	443b      	add	r3, r7
 801243c:	ed92 5b00 	vldr	d5, [r2]
 8012440:	ed93 7b00 	vldr	d7, [r3]
 8012444:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012448:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801244c:	443b      	add	r3, r7
 801244e:	ed93 4b00 	vldr	d4, [r3]
 8012452:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8012456:	443b      	add	r3, r7
 8012458:	ed93 7b00 	vldr	d7, [r3]
 801245c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012460:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012464:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8012508 <G_q+0x101f0>
 8012468:	ee27 5b05 	vmul.f64	d5, d7, d5
 801246c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012470:	443b      	add	r3, r7
 8012472:	ed93 4b00 	vldr	d4, [r3]
 8012476:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801247a:	443b      	add	r3, r7
 801247c:	ed93 7b00 	vldr	d7, [r3]
 8012480:	ee24 4b07 	vmul.f64	d4, d4, d7
    t34_re + t13_re * t13_im) * 0.0215);
 8012484:	f241 3378 	movw	r3, #4984	; 0x1378
 8012488:	443b      	add	r3, r7
 801248a:	ed93 3b00 	vldr	d3, [r3]
 801248e:	f241 3370 	movw	r3, #4976	; 0x1370
 8012492:	443b      	add	r3, r7
 8012494:	ed93 7b00 	vldr	d7, [r3]
 8012498:	ee23 7b07 	vmul.f64	d7, d3, d7
 801249c:	ee34 7b07 	vadd.f64	d7, d4, d7
 80124a0:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8012508 <G_q+0x101f0>
 80124a4:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 80124a8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80124ac:	4b18      	ldr	r3, [pc, #96]	; (8012510 <G_q+0x101f8>)
 80124ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80124b2:	443a      	add	r2, r7
 80124b4:	4413      	add	r3, r2
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	3340      	adds	r3, #64	; 0x40
 80124ba:	ee26 7b07 	vmul.f64	d7, d6, d7
 80124be:	ed83 7b02 	vstr	d7, [r3, #8]
  b_G_q[5].re = 0.0;
 80124c2:	4b13      	ldr	r3, [pc, #76]	; (8012510 <G_q+0x101f8>)
 80124c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80124c8:	443a      	add	r2, r7
 80124ca:	4413      	add	r3, r2
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80124d2:	f04f 0300 	mov.w	r3, #0
 80124d6:	f04f 0400 	mov.w	r4, #0
 80124da:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[5].im = 0.0;
 80124de:	4b0c      	ldr	r3, [pc, #48]	; (8012510 <G_q+0x101f8>)
 80124e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80124e4:	443a      	add	r2, r7
 80124e6:	4413      	add	r3, r2
 80124e8:	681b      	ldr	r3, [r3, #0]
 80124ea:	f103 0250 	add.w	r2, r3, #80	; 0x50
 80124ee:	f04f 0300 	mov.w	r3, #0
 80124f2:	f04f 0400 	mov.w	r4, #0
 80124f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80124fa:	bf00      	nop
 80124fc:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 8012500:	3714      	adds	r7, #20
 8012502:	46bd      	mov	sp, r7
 8012504:	bd90      	pop	{r4, r7, pc}
 8012506:	bf00      	nop
 8012508:	9374bc6a 	.word	0x9374bc6a
 801250c:	3f960418 	.word	0x3f960418
 8012510:	ffffec34 	.word	0xffffec34
 8012514:	ffffec58 	.word	0xffffec58

08012518 <G_q_initialize>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_initialize(void)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN();
 801251c:	f000 f88e 	bl	801263c <rt_InitInfAndNaN>
  isInitialized_G_q = true;
 8012520:	4b02      	ldr	r3, [pc, #8]	; (801252c <G_q_initialize+0x14>)
 8012522:	2201      	movs	r2, #1
 8012524:	701a      	strb	r2, [r3, #0]
}
 8012526:	bf00      	nop
 8012528:	bd80      	pop	{r7, pc}
 801252a:	bf00      	nop
 801252c:	24000304 	.word	0x24000304

08012530 <b_exp>:
/*
 * Arguments    : creal_T *x
 * Return Type  : void
 */
void b_exp(creal_T *x)
{
 8012530:	b590      	push	{r4, r7, lr}
 8012532:	b087      	sub	sp, #28
 8012534:	af00      	add	r7, sp, #0
 8012536:	6078      	str	r0, [r7, #4]
  double r;
  double d;
  if (x->im == 0.0) {
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	ed93 7b02 	vldr	d7, [r3, #8]
 801253e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012546:	d113      	bne.n	8012570 <b_exp+0x40>
    x->re = exp(x->re);
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	ed93 7b00 	vldr	d7, [r3]
 801254e:	eeb0 0b47 	vmov.f64	d0, d7
 8012552:	f00b ff15 	bl	801e380 <exp>
 8012556:	eeb0 7b40 	vmov.f64	d7, d0
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	ed83 7b00 	vstr	d7, [r3]
    x->im = 0.0;
 8012560:	687a      	ldr	r2, [r7, #4]
 8012562:	f04f 0300 	mov.w	r3, #0
 8012566:	f04f 0400 	mov.w	r4, #0
 801256a:	e9c2 3402 	strd	r3, r4, [r2, #8]
    r = exp(x->re / 2.0);
    d = x->im;
    x->re = r * (r * cos(x->im));
    x->im = r * (r * sin(d));
  }
}
 801256e:	e061      	b.n	8012634 <b_exp+0x104>
  } else if (rtIsInf(x->im) && rtIsInf(x->re) && (x->re < 0.0)) {
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	ed93 7b02 	vldr	d7, [r3, #8]
 8012576:	eeb0 0b47 	vmov.f64	d0, d7
 801257a:	f000 f899 	bl	80126b0 <rtIsInf>
 801257e:	4603      	mov	r3, r0
 8012580:	2b00      	cmp	r3, #0
 8012582:	d020      	beq.n	80125c6 <b_exp+0x96>
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	ed93 7b00 	vldr	d7, [r3]
 801258a:	eeb0 0b47 	vmov.f64	d0, d7
 801258e:	f000 f88f 	bl	80126b0 <rtIsInf>
 8012592:	4603      	mov	r3, r0
 8012594:	2b00      	cmp	r3, #0
 8012596:	d016      	beq.n	80125c6 <b_exp+0x96>
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	ed93 7b00 	vldr	d7, [r3]
 801259e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80125a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125a6:	d50e      	bpl.n	80125c6 <b_exp+0x96>
    x->re = 0.0;
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	f04f 0300 	mov.w	r3, #0
 80125ae:	f04f 0400 	mov.w	r4, #0
 80125b2:	e9c2 3400 	strd	r3, r4, [r2]
    x->im = 0.0;
 80125b6:	687a      	ldr	r2, [r7, #4]
 80125b8:	f04f 0300 	mov.w	r3, #0
 80125bc:	f04f 0400 	mov.w	r4, #0
 80125c0:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80125c4:	e036      	b.n	8012634 <b_exp+0x104>
    r = exp(x->re / 2.0);
 80125c6:	687b      	ldr	r3, [r7, #4]
 80125c8:	ed93 7b00 	vldr	d7, [r3]
 80125cc:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 80125d0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80125d4:	eeb0 0b45 	vmov.f64	d0, d5
 80125d8:	f00b fed2 	bl	801e380 <exp>
 80125dc:	ed87 0b04 	vstr	d0, [r7, #16]
    d = x->im;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80125e6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    x->re = r * (r * cos(x->im));
 80125ea:	687b      	ldr	r3, [r7, #4]
 80125ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80125f0:	eeb0 0b47 	vmov.f64	d0, d7
 80125f4:	f00b fe4c 	bl	801e290 <cos>
 80125f8:	eeb0 6b40 	vmov.f64	d6, d0
 80125fc:	ed97 7b04 	vldr	d7, [r7, #16]
 8012600:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012604:	ed97 7b04 	vldr	d7, [r7, #16]
 8012608:	ee26 7b07 	vmul.f64	d7, d6, d7
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	ed83 7b00 	vstr	d7, [r3]
    x->im = r * (r * sin(d));
 8012612:	ed97 0b02 	vldr	d0, [r7, #8]
 8012616:	f00b fe77 	bl	801e308 <sin>
 801261a:	eeb0 6b40 	vmov.f64	d6, d0
 801261e:	ed97 7b04 	vldr	d7, [r7, #16]
 8012622:	ee26 6b07 	vmul.f64	d6, d6, d7
 8012626:	ed97 7b04 	vldr	d7, [r7, #16]
 801262a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	ed83 7b02 	vstr	d7, [r3, #8]
}
 8012634:	bf00      	nop
 8012636:	371c      	adds	r7, #28
 8012638:	46bd      	mov	sp, r7
 801263a:	bd90      	pop	{r4, r7, pc}

0801263c <rt_InitInfAndNaN>:
#pragma warning(disable: 4756 56)

#endif

void rt_InitInfAndNaN()
{
 801263c:	b490      	push	{r4, r7}
 801263e:	af00      	add	r7, sp, #0
  rtNaN = nan("");
 8012640:	4a0f      	ldr	r2, [pc, #60]	; (8012680 <rt_InitInfAndNaN+0x44>)
 8012642:	f04f 0300 	mov.w	r3, #0
 8012646:	4c0f      	ldr	r4, [pc, #60]	; (8012684 <rt_InitInfAndNaN+0x48>)
 8012648:	e9c2 3400 	strd	r3, r4, [r2]
  rtNaNF = nanf("");
 801264c:	4b0e      	ldr	r3, [pc, #56]	; (8012688 <rt_InitInfAndNaN+0x4c>)
 801264e:	4a0f      	ldr	r2, [pc, #60]	; (801268c <rt_InitInfAndNaN+0x50>)
 8012650:	601a      	str	r2, [r3, #0]
  rtInf = (real_T)INFINITY;
 8012652:	4a0f      	ldr	r2, [pc, #60]	; (8012690 <rt_InitInfAndNaN+0x54>)
 8012654:	f04f 0300 	mov.w	r3, #0
 8012658:	4c0e      	ldr	r4, [pc, #56]	; (8012694 <rt_InitInfAndNaN+0x58>)
 801265a:	e9c2 3400 	strd	r3, r4, [r2]
  rtInfF = (real32_T)INFINITY;
 801265e:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <rt_InitInfAndNaN+0x5c>)
 8012660:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8012664:	601a      	str	r2, [r3, #0]
  rtMinusInf = -(real_T)INFINITY;
 8012666:	4a0d      	ldr	r2, [pc, #52]	; (801269c <rt_InitInfAndNaN+0x60>)
 8012668:	f04f 0300 	mov.w	r3, #0
 801266c:	4c0c      	ldr	r4, [pc, #48]	; (80126a0 <rt_InitInfAndNaN+0x64>)
 801266e:	e9c2 3400 	strd	r3, r4, [r2]
  rtMinusInfF = -(real32_T)INFINITY;
 8012672:	4b0c      	ldr	r3, [pc, #48]	; (80126a4 <rt_InitInfAndNaN+0x68>)
 8012674:	4a0c      	ldr	r2, [pc, #48]	; (80126a8 <rt_InitInfAndNaN+0x6c>)
 8012676:	601a      	str	r2, [r3, #0]

#pragma warning(default: 4756 56)

#endif

}
 8012678:	bf00      	nop
 801267a:	46bd      	mov	sp, r7
 801267c:	bc90      	pop	{r4, r7}
 801267e:	4770      	bx	lr
 8012680:	24000620 	.word	0x24000620
 8012684:	7ff80000 	.word	0x7ff80000
 8012688:	24000610 	.word	0x24000610
 801268c:	7fc00000 	.word	0x7fc00000
 8012690:	24000618 	.word	0x24000618
 8012694:	7ff00000 	.word	0x7ff00000
 8012698:	24000614 	.word	0x24000614
 801269c:	24000628 	.word	0x24000628
 80126a0:	fff00000 	.word	0xfff00000
 80126a4:	24000630 	.word	0x24000630
 80126a8:	ff800000 	.word	0xff800000
 80126ac:	00000000 	.word	0x00000000

080126b0 <rtIsInf>:
/* Function: rtIsInf ==================================================
 * Abstract:
 * Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 80126b0:	b480      	push	{r7}
 80126b2:	b083      	sub	sp, #12
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) ? 1U : 0U);
 80126ba:	ed97 7b00 	vldr	d7, [r7]
 80126be:	eeb0 7bc7 	vabs.f64	d7, d7
 80126c2:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80126f0 <rtIsInf+0x40>
 80126c6:	eeb4 7b46 	vcmp.f64	d7, d6
 80126ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80126ce:	bfd4      	ite	le
 80126d0:	2301      	movle	r3, #1
 80126d2:	2300      	movgt	r3, #0
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	f083 0301 	eor.w	r3, r3, #1
 80126da:	b2db      	uxtb	r3, r3
 80126dc:	b2db      	uxtb	r3, r3
}
 80126de:	4618      	mov	r0, r3
 80126e0:	370c      	adds	r7, #12
 80126e2:	46bd      	mov	sp, r7
 80126e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e8:	4770      	bx	lr
 80126ea:	bf00      	nop
 80126ec:	f3af 8000 	nop.w
 80126f0:	ffffffff 	.word	0xffffffff
 80126f4:	7fefffff 	.word	0x7fefffff

080126f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b082      	sub	sp, #8
 80126fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80126fe:	2003      	movs	r0, #3
 8012700:	f000 f98a 	bl	8012a18 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8012704:	f002 fdba 	bl	801527c <HAL_RCC_GetSysClockFreq>
 8012708:	4601      	mov	r1, r0
 801270a:	4b15      	ldr	r3, [pc, #84]	; (8012760 <HAL_Init+0x68>)
 801270c:	699b      	ldr	r3, [r3, #24]
 801270e:	0a1b      	lsrs	r3, r3, #8
 8012710:	f003 030f 	and.w	r3, r3, #15
 8012714:	4a13      	ldr	r2, [pc, #76]	; (8012764 <HAL_Init+0x6c>)
 8012716:	5cd3      	ldrb	r3, [r2, r3]
 8012718:	f003 031f 	and.w	r3, r3, #31
 801271c:	fa21 f303 	lsr.w	r3, r1, r3
 8012720:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8012722:	4b0f      	ldr	r3, [pc, #60]	; (8012760 <HAL_Init+0x68>)
 8012724:	699b      	ldr	r3, [r3, #24]
 8012726:	f003 030f 	and.w	r3, r3, #15
 801272a:	4a0e      	ldr	r2, [pc, #56]	; (8012764 <HAL_Init+0x6c>)
 801272c:	5cd3      	ldrb	r3, [r2, r3]
 801272e:	f003 031f 	and.w	r3, r3, #31
 8012732:	687a      	ldr	r2, [r7, #4]
 8012734:	fa22 f303 	lsr.w	r3, r2, r3
 8012738:	4a0b      	ldr	r2, [pc, #44]	; (8012768 <HAL_Init+0x70>)
 801273a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801273c:	4a0b      	ldr	r2, [pc, #44]	; (801276c <HAL_Init+0x74>)
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012742:	2000      	movs	r0, #0
 8012744:	f000 f814 	bl	8012770 <HAL_InitTick>
 8012748:	4603      	mov	r3, r0
 801274a:	2b00      	cmp	r3, #0
 801274c:	d001      	beq.n	8012752 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 801274e:	2301      	movs	r3, #1
 8012750:	e002      	b.n	8012758 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012752:	f7ef fa99 	bl	8001c88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012756:	2300      	movs	r3, #0
}
 8012758:	4618      	mov	r0, r3
 801275a:	3708      	adds	r7, #8
 801275c:	46bd      	mov	sp, r7
 801275e:	bd80      	pop	{r7, pc}
 8012760:	58024400 	.word	0x58024400
 8012764:	0801f388 	.word	0x0801f388
 8012768:	2400000c 	.word	0x2400000c
 801276c:	24000008 	.word	0x24000008

08012770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012770:	b580      	push	{r7, lr}
 8012772:	b082      	sub	sp, #8
 8012774:	af00      	add	r7, sp, #0
 8012776:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012778:	4b15      	ldr	r3, [pc, #84]	; (80127d0 <HAL_InitTick+0x60>)
 801277a:	781b      	ldrb	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d101      	bne.n	8012784 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012780:	2301      	movs	r3, #1
 8012782:	e021      	b.n	80127c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8012784:	4b13      	ldr	r3, [pc, #76]	; (80127d4 <HAL_InitTick+0x64>)
 8012786:	681a      	ldr	r2, [r3, #0]
 8012788:	4b11      	ldr	r3, [pc, #68]	; (80127d0 <HAL_InitTick+0x60>)
 801278a:	781b      	ldrb	r3, [r3, #0]
 801278c:	4619      	mov	r1, r3
 801278e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012792:	fbb3 f3f1 	udiv	r3, r3, r1
 8012796:	fbb2 f3f3 	udiv	r3, r2, r3
 801279a:	4618      	mov	r0, r3
 801279c:	f000 f96f 	bl	8012a7e <HAL_SYSTICK_Config>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d001      	beq.n	80127aa <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 80127a6:	2301      	movs	r3, #1
 80127a8:	e00e      	b.n	80127c8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b0f      	cmp	r3, #15
 80127ae:	d80a      	bhi.n	80127c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80127b0:	2200      	movs	r2, #0
 80127b2:	6879      	ldr	r1, [r7, #4]
 80127b4:	f04f 30ff 	mov.w	r0, #4294967295
 80127b8:	f000 f939 	bl	8012a2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80127bc:	4a06      	ldr	r2, [pc, #24]	; (80127d8 <HAL_InitTick+0x68>)
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80127c2:	2300      	movs	r3, #0
 80127c4:	e000      	b.n	80127c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80127c6:	2301      	movs	r3, #1
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3708      	adds	r7, #8
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	24000014 	.word	0x24000014
 80127d4:	24000008 	.word	0x24000008
 80127d8:	24000010 	.word	0x24000010

080127dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80127dc:	b480      	push	{r7}
 80127de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80127e0:	4b06      	ldr	r3, [pc, #24]	; (80127fc <HAL_IncTick+0x20>)
 80127e2:	781b      	ldrb	r3, [r3, #0]
 80127e4:	461a      	mov	r2, r3
 80127e6:	4b06      	ldr	r3, [pc, #24]	; (8012800 <HAL_IncTick+0x24>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	4413      	add	r3, r2
 80127ec:	4a04      	ldr	r2, [pc, #16]	; (8012800 <HAL_IncTick+0x24>)
 80127ee:	6013      	str	r3, [r2, #0]
}
 80127f0:	bf00      	nop
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	24000014 	.word	0x24000014
 8012800:	24000634 	.word	0x24000634

08012804 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012804:	b480      	push	{r7}
 8012806:	af00      	add	r7, sp, #0
  return uwTick;
 8012808:	4b03      	ldr	r3, [pc, #12]	; (8012818 <HAL_GetTick+0x14>)
 801280a:	681b      	ldr	r3, [r3, #0]
}
 801280c:	4618      	mov	r0, r3
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	24000634 	.word	0x24000634

0801281c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801281c:	b580      	push	{r7, lr}
 801281e:	b084      	sub	sp, #16
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012824:	f7ff ffee 	bl	8012804 <HAL_GetTick>
 8012828:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801282a:	687b      	ldr	r3, [r7, #4]
 801282c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012834:	d005      	beq.n	8012842 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012836:	4b09      	ldr	r3, [pc, #36]	; (801285c <HAL_Delay+0x40>)
 8012838:	781b      	ldrb	r3, [r3, #0]
 801283a:	461a      	mov	r2, r3
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	4413      	add	r3, r2
 8012840:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012842:	bf00      	nop
 8012844:	f7ff ffde 	bl	8012804 <HAL_GetTick>
 8012848:	4602      	mov	r2, r0
 801284a:	68bb      	ldr	r3, [r7, #8]
 801284c:	1ad3      	subs	r3, r2, r3
 801284e:	68fa      	ldr	r2, [r7, #12]
 8012850:	429a      	cmp	r2, r3
 8012852:	d8f7      	bhi.n	8012844 <HAL_Delay+0x28>
  {
  }
}
 8012854:	bf00      	nop
 8012856:	3710      	adds	r7, #16
 8012858:	46bd      	mov	sp, r7
 801285a:	bd80      	pop	{r7, pc}
 801285c:	24000014 	.word	0x24000014

08012860 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012860:	b480      	push	{r7}
 8012862:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012864:	4b03      	ldr	r3, [pc, #12]	; (8012874 <HAL_GetREVID+0x14>)
 8012866:	681b      	ldr	r3, [r3, #0]
 8012868:	0c1b      	lsrs	r3, r3, #16
}
 801286a:	4618      	mov	r0, r3
 801286c:	46bd      	mov	sp, r7
 801286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012872:	4770      	bx	lr
 8012874:	5c001000 	.word	0x5c001000

08012878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012878:	b480      	push	{r7}
 801287a:	b085      	sub	sp, #20
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	f003 0307 	and.w	r3, r3, #7
 8012886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012888:	4b0b      	ldr	r3, [pc, #44]	; (80128b8 <__NVIC_SetPriorityGrouping+0x40>)
 801288a:	68db      	ldr	r3, [r3, #12]
 801288c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801288e:	68ba      	ldr	r2, [r7, #8]
 8012890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012894:	4013      	ands	r3, r2
 8012896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012898:	68fb      	ldr	r3, [r7, #12]
 801289a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 801289c:	68bb      	ldr	r3, [r7, #8]
 801289e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80128a0:	4b06      	ldr	r3, [pc, #24]	; (80128bc <__NVIC_SetPriorityGrouping+0x44>)
 80128a2:	4313      	orrs	r3, r2
 80128a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80128a6:	4a04      	ldr	r2, [pc, #16]	; (80128b8 <__NVIC_SetPriorityGrouping+0x40>)
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	60d3      	str	r3, [r2, #12]
}
 80128ac:	bf00      	nop
 80128ae:	3714      	adds	r7, #20
 80128b0:	46bd      	mov	sp, r7
 80128b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b6:	4770      	bx	lr
 80128b8:	e000ed00 	.word	0xe000ed00
 80128bc:	05fa0000 	.word	0x05fa0000

080128c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80128c0:	b480      	push	{r7}
 80128c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80128c4:	4b04      	ldr	r3, [pc, #16]	; (80128d8 <__NVIC_GetPriorityGrouping+0x18>)
 80128c6:	68db      	ldr	r3, [r3, #12]
 80128c8:	0a1b      	lsrs	r3, r3, #8
 80128ca:	f003 0307 	and.w	r3, r3, #7
}
 80128ce:	4618      	mov	r0, r3
 80128d0:	46bd      	mov	sp, r7
 80128d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d6:	4770      	bx	lr
 80128d8:	e000ed00 	.word	0xe000ed00

080128dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80128dc:	b480      	push	{r7}
 80128de:	b083      	sub	sp, #12
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	4603      	mov	r3, r0
 80128e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80128e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	db0b      	blt.n	8012906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80128ee:	88fb      	ldrh	r3, [r7, #6]
 80128f0:	f003 021f 	and.w	r2, r3, #31
 80128f4:	4907      	ldr	r1, [pc, #28]	; (8012914 <__NVIC_EnableIRQ+0x38>)
 80128f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80128fa:	095b      	lsrs	r3, r3, #5
 80128fc:	2001      	movs	r0, #1
 80128fe:	fa00 f202 	lsl.w	r2, r0, r2
 8012902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012906:	bf00      	nop
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	e000e100 	.word	0xe000e100

08012918 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012918:	b480      	push	{r7}
 801291a:	b083      	sub	sp, #12
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	6039      	str	r1, [r7, #0]
 8012922:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012924:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012928:	2b00      	cmp	r3, #0
 801292a:	db0a      	blt.n	8012942 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	b2da      	uxtb	r2, r3
 8012930:	490c      	ldr	r1, [pc, #48]	; (8012964 <__NVIC_SetPriority+0x4c>)
 8012932:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012936:	0112      	lsls	r2, r2, #4
 8012938:	b2d2      	uxtb	r2, r2
 801293a:	440b      	add	r3, r1
 801293c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012940:	e00a      	b.n	8012958 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012942:	683b      	ldr	r3, [r7, #0]
 8012944:	b2da      	uxtb	r2, r3
 8012946:	4908      	ldr	r1, [pc, #32]	; (8012968 <__NVIC_SetPriority+0x50>)
 8012948:	88fb      	ldrh	r3, [r7, #6]
 801294a:	f003 030f 	and.w	r3, r3, #15
 801294e:	3b04      	subs	r3, #4
 8012950:	0112      	lsls	r2, r2, #4
 8012952:	b2d2      	uxtb	r2, r2
 8012954:	440b      	add	r3, r1
 8012956:	761a      	strb	r2, [r3, #24]
}
 8012958:	bf00      	nop
 801295a:	370c      	adds	r7, #12
 801295c:	46bd      	mov	sp, r7
 801295e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012962:	4770      	bx	lr
 8012964:	e000e100 	.word	0xe000e100
 8012968:	e000ed00 	.word	0xe000ed00

0801296c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801296c:	b480      	push	{r7}
 801296e:	b089      	sub	sp, #36	; 0x24
 8012970:	af00      	add	r7, sp, #0
 8012972:	60f8      	str	r0, [r7, #12]
 8012974:	60b9      	str	r1, [r7, #8]
 8012976:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	f003 0307 	and.w	r3, r3, #7
 801297e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012980:	69fb      	ldr	r3, [r7, #28]
 8012982:	f1c3 0307 	rsb	r3, r3, #7
 8012986:	2b04      	cmp	r3, #4
 8012988:	bf28      	it	cs
 801298a:	2304      	movcs	r3, #4
 801298c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	3304      	adds	r3, #4
 8012992:	2b06      	cmp	r3, #6
 8012994:	d902      	bls.n	801299c <NVIC_EncodePriority+0x30>
 8012996:	69fb      	ldr	r3, [r7, #28]
 8012998:	3b03      	subs	r3, #3
 801299a:	e000      	b.n	801299e <NVIC_EncodePriority+0x32>
 801299c:	2300      	movs	r3, #0
 801299e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80129a0:	f04f 32ff 	mov.w	r2, #4294967295
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	fa02 f303 	lsl.w	r3, r2, r3
 80129aa:	43da      	mvns	r2, r3
 80129ac:	68bb      	ldr	r3, [r7, #8]
 80129ae:	401a      	ands	r2, r3
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80129b4:	f04f 31ff 	mov.w	r1, #4294967295
 80129b8:	697b      	ldr	r3, [r7, #20]
 80129ba:	fa01 f303 	lsl.w	r3, r1, r3
 80129be:	43d9      	mvns	r1, r3
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80129c4:	4313      	orrs	r3, r2
         );
}
 80129c6:	4618      	mov	r0, r3
 80129c8:	3724      	adds	r7, #36	; 0x24
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
	...

080129d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b082      	sub	sp, #8
 80129d8:	af00      	add	r7, sp, #0
 80129da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	3b01      	subs	r3, #1
 80129e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80129e4:	d301      	bcc.n	80129ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80129e6:	2301      	movs	r3, #1
 80129e8:	e00f      	b.n	8012a0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80129ea:	4a0a      	ldr	r2, [pc, #40]	; (8012a14 <SysTick_Config+0x40>)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	3b01      	subs	r3, #1
 80129f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80129f2:	210f      	movs	r1, #15
 80129f4:	f04f 30ff 	mov.w	r0, #4294967295
 80129f8:	f7ff ff8e 	bl	8012918 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80129fc:	4b05      	ldr	r3, [pc, #20]	; (8012a14 <SysTick_Config+0x40>)
 80129fe:	2200      	movs	r2, #0
 8012a00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012a02:	4b04      	ldr	r3, [pc, #16]	; (8012a14 <SysTick_Config+0x40>)
 8012a04:	2207      	movs	r2, #7
 8012a06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012a08:	2300      	movs	r3, #0
}
 8012a0a:	4618      	mov	r0, r3
 8012a0c:	3708      	adds	r7, #8
 8012a0e:	46bd      	mov	sp, r7
 8012a10:	bd80      	pop	{r7, pc}
 8012a12:	bf00      	nop
 8012a14:	e000e010 	.word	0xe000e010

08012a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7ff ff29 	bl	8012878 <__NVIC_SetPriorityGrouping>
}
 8012a26:	bf00      	nop
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b086      	sub	sp, #24
 8012a32:	af00      	add	r7, sp, #0
 8012a34:	4603      	mov	r3, r0
 8012a36:	60b9      	str	r1, [r7, #8]
 8012a38:	607a      	str	r2, [r7, #4]
 8012a3a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012a3c:	f7ff ff40 	bl	80128c0 <__NVIC_GetPriorityGrouping>
 8012a40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012a42:	687a      	ldr	r2, [r7, #4]
 8012a44:	68b9      	ldr	r1, [r7, #8]
 8012a46:	6978      	ldr	r0, [r7, #20]
 8012a48:	f7ff ff90 	bl	801296c <NVIC_EncodePriority>
 8012a4c:	4602      	mov	r2, r0
 8012a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a52:	4611      	mov	r1, r2
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7ff ff5f 	bl	8012918 <__NVIC_SetPriority>
}
 8012a5a:	bf00      	nop
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}

08012a62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012a62:	b580      	push	{r7, lr}
 8012a64:	b082      	sub	sp, #8
 8012a66:	af00      	add	r7, sp, #0
 8012a68:	4603      	mov	r3, r0
 8012a6a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012a6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7ff ff33 	bl	80128dc <__NVIC_EnableIRQ>
}
 8012a76:	bf00      	nop
 8012a78:	3708      	adds	r7, #8
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}

08012a7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012a7e:	b580      	push	{r7, lr}
 8012a80:	b082      	sub	sp, #8
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7ff ffa4 	bl	80129d4 <SysTick_Config>
 8012a8c:	4603      	mov	r3, r0
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3708      	adds	r7, #8
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}
	...

08012a98 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012a98:	b580      	push	{r7, lr}
 8012a9a:	b084      	sub	sp, #16
 8012a9c:	af00      	add	r7, sp, #0
 8012a9e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d101      	bne.n	8012aaa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8012aa6:	2301      	movs	r3, #1
 8012aa8:	e205      	b.n	8012eb6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012ab0:	b2db      	uxtb	r3, r3
 8012ab2:	2b02      	cmp	r3, #2
 8012ab4:	d004      	beq.n	8012ac0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	2280      	movs	r2, #128	; 0x80
 8012aba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8012abc:	2301      	movs	r3, #1
 8012abe:	e1fa      	b.n	8012eb6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	4a8c      	ldr	r2, [pc, #560]	; (8012cf8 <HAL_DMA_Abort_IT+0x260>)
 8012ac6:	4293      	cmp	r3, r2
 8012ac8:	d04a      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	681b      	ldr	r3, [r3, #0]
 8012ace:	4a8b      	ldr	r2, [pc, #556]	; (8012cfc <HAL_DMA_Abort_IT+0x264>)
 8012ad0:	4293      	cmp	r3, r2
 8012ad2:	d045      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	4a89      	ldr	r2, [pc, #548]	; (8012d00 <HAL_DMA_Abort_IT+0x268>)
 8012ada:	4293      	cmp	r3, r2
 8012adc:	d040      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	4a88      	ldr	r2, [pc, #544]	; (8012d04 <HAL_DMA_Abort_IT+0x26c>)
 8012ae4:	4293      	cmp	r3, r2
 8012ae6:	d03b      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	681b      	ldr	r3, [r3, #0]
 8012aec:	4a86      	ldr	r2, [pc, #536]	; (8012d08 <HAL_DMA_Abort_IT+0x270>)
 8012aee:	4293      	cmp	r3, r2
 8012af0:	d036      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012af2:	687b      	ldr	r3, [r7, #4]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4a85      	ldr	r2, [pc, #532]	; (8012d0c <HAL_DMA_Abort_IT+0x274>)
 8012af8:	4293      	cmp	r3, r2
 8012afa:	d031      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	4a83      	ldr	r2, [pc, #524]	; (8012d10 <HAL_DMA_Abort_IT+0x278>)
 8012b02:	4293      	cmp	r3, r2
 8012b04:	d02c      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	4a82      	ldr	r2, [pc, #520]	; (8012d14 <HAL_DMA_Abort_IT+0x27c>)
 8012b0c:	4293      	cmp	r3, r2
 8012b0e:	d027      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	4a80      	ldr	r2, [pc, #512]	; (8012d18 <HAL_DMA_Abort_IT+0x280>)
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d022      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	4a7f      	ldr	r2, [pc, #508]	; (8012d1c <HAL_DMA_Abort_IT+0x284>)
 8012b20:	4293      	cmp	r3, r2
 8012b22:	d01d      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	4a7d      	ldr	r2, [pc, #500]	; (8012d20 <HAL_DMA_Abort_IT+0x288>)
 8012b2a:	4293      	cmp	r3, r2
 8012b2c:	d018      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	681b      	ldr	r3, [r3, #0]
 8012b32:	4a7c      	ldr	r2, [pc, #496]	; (8012d24 <HAL_DMA_Abort_IT+0x28c>)
 8012b34:	4293      	cmp	r3, r2
 8012b36:	d013      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	4a7a      	ldr	r2, [pc, #488]	; (8012d28 <HAL_DMA_Abort_IT+0x290>)
 8012b3e:	4293      	cmp	r3, r2
 8012b40:	d00e      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b42:	687b      	ldr	r3, [r7, #4]
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	4a79      	ldr	r2, [pc, #484]	; (8012d2c <HAL_DMA_Abort_IT+0x294>)
 8012b48:	4293      	cmp	r3, r2
 8012b4a:	d009      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	4a77      	ldr	r2, [pc, #476]	; (8012d30 <HAL_DMA_Abort_IT+0x298>)
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d004      	beq.n	8012b60 <HAL_DMA_Abort_IT+0xc8>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	4a76      	ldr	r2, [pc, #472]	; (8012d34 <HAL_DMA_Abort_IT+0x29c>)
 8012b5c:	4293      	cmp	r3, r2
 8012b5e:	d101      	bne.n	8012b64 <HAL_DMA_Abort_IT+0xcc>
 8012b60:	2301      	movs	r3, #1
 8012b62:	e000      	b.n	8012b66 <HAL_DMA_Abort_IT+0xce>
 8012b64:	2300      	movs	r3, #0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d065      	beq.n	8012c36 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	2204      	movs	r2, #4
 8012b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	4a60      	ldr	r2, [pc, #384]	; (8012cf8 <HAL_DMA_Abort_IT+0x260>)
 8012b78:	4293      	cmp	r3, r2
 8012b7a:	d04a      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	681b      	ldr	r3, [r3, #0]
 8012b80:	4a5e      	ldr	r2, [pc, #376]	; (8012cfc <HAL_DMA_Abort_IT+0x264>)
 8012b82:	4293      	cmp	r3, r2
 8012b84:	d045      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	4a5d      	ldr	r2, [pc, #372]	; (8012d00 <HAL_DMA_Abort_IT+0x268>)
 8012b8c:	4293      	cmp	r3, r2
 8012b8e:	d040      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	4a5b      	ldr	r2, [pc, #364]	; (8012d04 <HAL_DMA_Abort_IT+0x26c>)
 8012b96:	4293      	cmp	r3, r2
 8012b98:	d03b      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4a5a      	ldr	r2, [pc, #360]	; (8012d08 <HAL_DMA_Abort_IT+0x270>)
 8012ba0:	4293      	cmp	r3, r2
 8012ba2:	d036      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	681b      	ldr	r3, [r3, #0]
 8012ba8:	4a58      	ldr	r2, [pc, #352]	; (8012d0c <HAL_DMA_Abort_IT+0x274>)
 8012baa:	4293      	cmp	r3, r2
 8012bac:	d031      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	4a57      	ldr	r2, [pc, #348]	; (8012d10 <HAL_DMA_Abort_IT+0x278>)
 8012bb4:	4293      	cmp	r3, r2
 8012bb6:	d02c      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	4a55      	ldr	r2, [pc, #340]	; (8012d14 <HAL_DMA_Abort_IT+0x27c>)
 8012bbe:	4293      	cmp	r3, r2
 8012bc0:	d027      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	681b      	ldr	r3, [r3, #0]
 8012bc6:	4a54      	ldr	r2, [pc, #336]	; (8012d18 <HAL_DMA_Abort_IT+0x280>)
 8012bc8:	4293      	cmp	r3, r2
 8012bca:	d022      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	4a52      	ldr	r2, [pc, #328]	; (8012d1c <HAL_DMA_Abort_IT+0x284>)
 8012bd2:	4293      	cmp	r3, r2
 8012bd4:	d01d      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	4a51      	ldr	r2, [pc, #324]	; (8012d20 <HAL_DMA_Abort_IT+0x288>)
 8012bdc:	4293      	cmp	r3, r2
 8012bde:	d018      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	4a4f      	ldr	r2, [pc, #316]	; (8012d24 <HAL_DMA_Abort_IT+0x28c>)
 8012be6:	4293      	cmp	r3, r2
 8012be8:	d013      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	4a4e      	ldr	r2, [pc, #312]	; (8012d28 <HAL_DMA_Abort_IT+0x290>)
 8012bf0:	4293      	cmp	r3, r2
 8012bf2:	d00e      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	4a4c      	ldr	r2, [pc, #304]	; (8012d2c <HAL_DMA_Abort_IT+0x294>)
 8012bfa:	4293      	cmp	r3, r2
 8012bfc:	d009      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4a4b      	ldr	r2, [pc, #300]	; (8012d30 <HAL_DMA_Abort_IT+0x298>)
 8012c04:	4293      	cmp	r3, r2
 8012c06:	d004      	beq.n	8012c12 <HAL_DMA_Abort_IT+0x17a>
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	681b      	ldr	r3, [r3, #0]
 8012c0c:	4a49      	ldr	r2, [pc, #292]	; (8012d34 <HAL_DMA_Abort_IT+0x29c>)
 8012c0e:	4293      	cmp	r3, r2
 8012c10:	d108      	bne.n	8012c24 <HAL_DMA_Abort_IT+0x18c>
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	681a      	ldr	r2, [r3, #0]
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	681b      	ldr	r3, [r3, #0]
 8012c1c:	f022 0201 	bic.w	r2, r2, #1
 8012c20:	601a      	str	r2, [r3, #0]
 8012c22:	e147      	b.n	8012eb4 <HAL_DMA_Abort_IT+0x41c>
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	681a      	ldr	r2, [r3, #0]
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	f022 0201 	bic.w	r2, r2, #1
 8012c32:	601a      	str	r2, [r3, #0]
 8012c34:	e13e      	b.n	8012eb4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	681a      	ldr	r2, [r3, #0]
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	f022 020e 	bic.w	r2, r2, #14
 8012c44:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	4a2b      	ldr	r2, [pc, #172]	; (8012cf8 <HAL_DMA_Abort_IT+0x260>)
 8012c4c:	4293      	cmp	r3, r2
 8012c4e:	d04a      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c50:	687b      	ldr	r3, [r7, #4]
 8012c52:	681b      	ldr	r3, [r3, #0]
 8012c54:	4a29      	ldr	r2, [pc, #164]	; (8012cfc <HAL_DMA_Abort_IT+0x264>)
 8012c56:	4293      	cmp	r3, r2
 8012c58:	d045      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c5a:	687b      	ldr	r3, [r7, #4]
 8012c5c:	681b      	ldr	r3, [r3, #0]
 8012c5e:	4a28      	ldr	r2, [pc, #160]	; (8012d00 <HAL_DMA_Abort_IT+0x268>)
 8012c60:	4293      	cmp	r3, r2
 8012c62:	d040      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	4a26      	ldr	r2, [pc, #152]	; (8012d04 <HAL_DMA_Abort_IT+0x26c>)
 8012c6a:	4293      	cmp	r3, r2
 8012c6c:	d03b      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	4a25      	ldr	r2, [pc, #148]	; (8012d08 <HAL_DMA_Abort_IT+0x270>)
 8012c74:	4293      	cmp	r3, r2
 8012c76:	d036      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	4a23      	ldr	r2, [pc, #140]	; (8012d0c <HAL_DMA_Abort_IT+0x274>)
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	d031      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	4a22      	ldr	r2, [pc, #136]	; (8012d10 <HAL_DMA_Abort_IT+0x278>)
 8012c88:	4293      	cmp	r3, r2
 8012c8a:	d02c      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	4a20      	ldr	r2, [pc, #128]	; (8012d14 <HAL_DMA_Abort_IT+0x27c>)
 8012c92:	4293      	cmp	r3, r2
 8012c94:	d027      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012c96:	687b      	ldr	r3, [r7, #4]
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	4a1f      	ldr	r2, [pc, #124]	; (8012d18 <HAL_DMA_Abort_IT+0x280>)
 8012c9c:	4293      	cmp	r3, r2
 8012c9e:	d022      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	4a1d      	ldr	r2, [pc, #116]	; (8012d1c <HAL_DMA_Abort_IT+0x284>)
 8012ca6:	4293      	cmp	r3, r2
 8012ca8:	d01d      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	4a1c      	ldr	r2, [pc, #112]	; (8012d20 <HAL_DMA_Abort_IT+0x288>)
 8012cb0:	4293      	cmp	r3, r2
 8012cb2:	d018      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	4a1a      	ldr	r2, [pc, #104]	; (8012d24 <HAL_DMA_Abort_IT+0x28c>)
 8012cba:	4293      	cmp	r3, r2
 8012cbc:	d013      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	4a19      	ldr	r2, [pc, #100]	; (8012d28 <HAL_DMA_Abort_IT+0x290>)
 8012cc4:	4293      	cmp	r3, r2
 8012cc6:	d00e      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	681b      	ldr	r3, [r3, #0]
 8012ccc:	4a17      	ldr	r2, [pc, #92]	; (8012d2c <HAL_DMA_Abort_IT+0x294>)
 8012cce:	4293      	cmp	r3, r2
 8012cd0:	d009      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	681b      	ldr	r3, [r3, #0]
 8012cd6:	4a16      	ldr	r2, [pc, #88]	; (8012d30 <HAL_DMA_Abort_IT+0x298>)
 8012cd8:	4293      	cmp	r3, r2
 8012cda:	d004      	beq.n	8012ce6 <HAL_DMA_Abort_IT+0x24e>
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	4a14      	ldr	r2, [pc, #80]	; (8012d34 <HAL_DMA_Abort_IT+0x29c>)
 8012ce2:	4293      	cmp	r3, r2
 8012ce4:	d128      	bne.n	8012d38 <HAL_DMA_Abort_IT+0x2a0>
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	681a      	ldr	r2, [r3, #0]
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	f022 0201 	bic.w	r2, r2, #1
 8012cf4:	601a      	str	r2, [r3, #0]
 8012cf6:	e027      	b.n	8012d48 <HAL_DMA_Abort_IT+0x2b0>
 8012cf8:	40020010 	.word	0x40020010
 8012cfc:	40020028 	.word	0x40020028
 8012d00:	40020040 	.word	0x40020040
 8012d04:	40020058 	.word	0x40020058
 8012d08:	40020070 	.word	0x40020070
 8012d0c:	40020088 	.word	0x40020088
 8012d10:	400200a0 	.word	0x400200a0
 8012d14:	400200b8 	.word	0x400200b8
 8012d18:	40020410 	.word	0x40020410
 8012d1c:	40020428 	.word	0x40020428
 8012d20:	40020440 	.word	0x40020440
 8012d24:	40020458 	.word	0x40020458
 8012d28:	40020470 	.word	0x40020470
 8012d2c:	40020488 	.word	0x40020488
 8012d30:	400204a0 	.word	0x400204a0
 8012d34:	400204b8 	.word	0x400204b8
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	f022 0201 	bic.w	r2, r2, #1
 8012d46:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681b      	ldr	r3, [r3, #0]
 8012d4c:	4a5c      	ldr	r2, [pc, #368]	; (8012ec0 <HAL_DMA_Abort_IT+0x428>)
 8012d4e:	4293      	cmp	r3, r2
 8012d50:	d072      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	4a5b      	ldr	r2, [pc, #364]	; (8012ec4 <HAL_DMA_Abort_IT+0x42c>)
 8012d58:	4293      	cmp	r3, r2
 8012d5a:	d06d      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	681b      	ldr	r3, [r3, #0]
 8012d60:	4a59      	ldr	r2, [pc, #356]	; (8012ec8 <HAL_DMA_Abort_IT+0x430>)
 8012d62:	4293      	cmp	r3, r2
 8012d64:	d068      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4a58      	ldr	r2, [pc, #352]	; (8012ecc <HAL_DMA_Abort_IT+0x434>)
 8012d6c:	4293      	cmp	r3, r2
 8012d6e:	d063      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4a56      	ldr	r2, [pc, #344]	; (8012ed0 <HAL_DMA_Abort_IT+0x438>)
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d05e      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4a55      	ldr	r2, [pc, #340]	; (8012ed4 <HAL_DMA_Abort_IT+0x43c>)
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d059      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a53      	ldr	r2, [pc, #332]	; (8012ed8 <HAL_DMA_Abort_IT+0x440>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d054      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a52      	ldr	r2, [pc, #328]	; (8012edc <HAL_DMA_Abort_IT+0x444>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d04f      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a50      	ldr	r2, [pc, #320]	; (8012ee0 <HAL_DMA_Abort_IT+0x448>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d04a      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a4f      	ldr	r2, [pc, #316]	; (8012ee4 <HAL_DMA_Abort_IT+0x44c>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d045      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a4d      	ldr	r2, [pc, #308]	; (8012ee8 <HAL_DMA_Abort_IT+0x450>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d040      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a4c      	ldr	r2, [pc, #304]	; (8012eec <HAL_DMA_Abort_IT+0x454>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d03b      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a4a      	ldr	r2, [pc, #296]	; (8012ef0 <HAL_DMA_Abort_IT+0x458>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d036      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a49      	ldr	r2, [pc, #292]	; (8012ef4 <HAL_DMA_Abort_IT+0x45c>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d031      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a47      	ldr	r2, [pc, #284]	; (8012ef8 <HAL_DMA_Abort_IT+0x460>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d02c      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4a46      	ldr	r2, [pc, #280]	; (8012efc <HAL_DMA_Abort_IT+0x464>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d027      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a44      	ldr	r2, [pc, #272]	; (8012f00 <HAL_DMA_Abort_IT+0x468>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d022      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a43      	ldr	r2, [pc, #268]	; (8012f04 <HAL_DMA_Abort_IT+0x46c>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d01d      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a41      	ldr	r2, [pc, #260]	; (8012f08 <HAL_DMA_Abort_IT+0x470>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d018      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a40      	ldr	r2, [pc, #256]	; (8012f0c <HAL_DMA_Abort_IT+0x474>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d013      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012e10:	687b      	ldr	r3, [r7, #4]
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	4a3e      	ldr	r2, [pc, #248]	; (8012f10 <HAL_DMA_Abort_IT+0x478>)
 8012e16:	4293      	cmp	r3, r2
 8012e18:	d00e      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	681b      	ldr	r3, [r3, #0]
 8012e1e:	4a3d      	ldr	r2, [pc, #244]	; (8012f14 <HAL_DMA_Abort_IT+0x47c>)
 8012e20:	4293      	cmp	r3, r2
 8012e22:	d009      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012e24:	687b      	ldr	r3, [r7, #4]
 8012e26:	681b      	ldr	r3, [r3, #0]
 8012e28:	4a3b      	ldr	r2, [pc, #236]	; (8012f18 <HAL_DMA_Abort_IT+0x480>)
 8012e2a:	4293      	cmp	r3, r2
 8012e2c:	d004      	beq.n	8012e38 <HAL_DMA_Abort_IT+0x3a0>
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	681b      	ldr	r3, [r3, #0]
 8012e32:	4a3a      	ldr	r2, [pc, #232]	; (8012f1c <HAL_DMA_Abort_IT+0x484>)
 8012e34:	4293      	cmp	r3, r2
 8012e36:	d101      	bne.n	8012e3c <HAL_DMA_Abort_IT+0x3a4>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e000      	b.n	8012e3e <HAL_DMA_Abort_IT+0x3a6>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d028      	beq.n	8012e94 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e46:	681a      	ldr	r2, [r3, #0]
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012e4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012e50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012e56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8012e5c:	f003 031f 	and.w	r3, r3, #31
 8012e60:	2201      	movs	r2, #1
 8012e62:	409a      	lsls	r2, r3
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e6c:	687a      	ldr	r2, [r7, #4]
 8012e6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8012e70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	d00c      	beq.n	8012e94 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8012e88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012e8e:	687a      	ldr	r2, [r7, #4]
 8012e90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8012e92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	2200      	movs	r2, #0
 8012e98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2201      	movs	r2, #1
 8012ea0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d003      	beq.n	8012eb4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012eb0:	6878      	ldr	r0, [r7, #4]
 8012eb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8012eb4:	2300      	movs	r3, #0
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3710      	adds	r7, #16
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	40020010 	.word	0x40020010
 8012ec4:	40020028 	.word	0x40020028
 8012ec8:	40020040 	.word	0x40020040
 8012ecc:	40020058 	.word	0x40020058
 8012ed0:	40020070 	.word	0x40020070
 8012ed4:	40020088 	.word	0x40020088
 8012ed8:	400200a0 	.word	0x400200a0
 8012edc:	400200b8 	.word	0x400200b8
 8012ee0:	40020410 	.word	0x40020410
 8012ee4:	40020428 	.word	0x40020428
 8012ee8:	40020440 	.word	0x40020440
 8012eec:	40020458 	.word	0x40020458
 8012ef0:	40020470 	.word	0x40020470
 8012ef4:	40020488 	.word	0x40020488
 8012ef8:	400204a0 	.word	0x400204a0
 8012efc:	400204b8 	.word	0x400204b8
 8012f00:	58025408 	.word	0x58025408
 8012f04:	5802541c 	.word	0x5802541c
 8012f08:	58025430 	.word	0x58025430
 8012f0c:	58025444 	.word	0x58025444
 8012f10:	58025458 	.word	0x58025458
 8012f14:	5802546c 	.word	0x5802546c
 8012f18:	58025480 	.word	0x58025480
 8012f1c:	58025494 	.word	0x58025494

08012f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8012f20:	b480      	push	{r7}
 8012f22:	b089      	sub	sp, #36	; 0x24
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
 8012f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8012f2e:	4b89      	ldr	r3, [pc, #548]	; (8013154 <HAL_GPIO_Init+0x234>)
 8012f30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8012f32:	e194      	b.n	801325e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	2101      	movs	r1, #1
 8012f3a:	69fb      	ldr	r3, [r7, #28]
 8012f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8012f40:	4013      	ands	r3, r2
 8012f42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8012f44:	693b      	ldr	r3, [r7, #16]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	f000 8186 	beq.w	8013258 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	685b      	ldr	r3, [r3, #4]
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d00b      	beq.n	8012f6c <HAL_GPIO_Init+0x4c>
 8012f54:	683b      	ldr	r3, [r7, #0]
 8012f56:	685b      	ldr	r3, [r3, #4]
 8012f58:	2b02      	cmp	r3, #2
 8012f5a:	d007      	beq.n	8012f6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012f60:	2b11      	cmp	r3, #17
 8012f62:	d003      	beq.n	8012f6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012f64:	683b      	ldr	r3, [r7, #0]
 8012f66:	685b      	ldr	r3, [r3, #4]
 8012f68:	2b12      	cmp	r3, #18
 8012f6a:	d130      	bne.n	8012fce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8012f6c:	687b      	ldr	r3, [r7, #4]
 8012f6e:	689b      	ldr	r3, [r3, #8]
 8012f70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8012f72:	69fb      	ldr	r3, [r7, #28]
 8012f74:	005b      	lsls	r3, r3, #1
 8012f76:	2203      	movs	r2, #3
 8012f78:	fa02 f303 	lsl.w	r3, r2, r3
 8012f7c:	43db      	mvns	r3, r3
 8012f7e:	69ba      	ldr	r2, [r7, #24]
 8012f80:	4013      	ands	r3, r2
 8012f82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8012f84:	683b      	ldr	r3, [r7, #0]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	69fb      	ldr	r3, [r7, #28]
 8012f8a:	005b      	lsls	r3, r3, #1
 8012f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8012f90:	69ba      	ldr	r2, [r7, #24]
 8012f92:	4313      	orrs	r3, r2
 8012f94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	69ba      	ldr	r2, [r7, #24]
 8012f9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	685b      	ldr	r3, [r3, #4]
 8012fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8012fa2:	2201      	movs	r2, #1
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8012faa:	43db      	mvns	r3, r3
 8012fac:	69ba      	ldr	r2, [r7, #24]
 8012fae:	4013      	ands	r3, r2
 8012fb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	685b      	ldr	r3, [r3, #4]
 8012fb6:	091b      	lsrs	r3, r3, #4
 8012fb8:	f003 0201 	and.w	r2, r3, #1
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8012fc2:	69ba      	ldr	r2, [r7, #24]
 8012fc4:	4313      	orrs	r3, r2
 8012fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	69ba      	ldr	r2, [r7, #24]
 8012fcc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	68db      	ldr	r3, [r3, #12]
 8012fd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	005b      	lsls	r3, r3, #1
 8012fd8:	2203      	movs	r2, #3
 8012fda:	fa02 f303 	lsl.w	r3, r2, r3
 8012fde:	43db      	mvns	r3, r3
 8012fe0:	69ba      	ldr	r2, [r7, #24]
 8012fe2:	4013      	ands	r3, r2
 8012fe4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8012fe6:	683b      	ldr	r3, [r7, #0]
 8012fe8:	689a      	ldr	r2, [r3, #8]
 8012fea:	69fb      	ldr	r3, [r7, #28]
 8012fec:	005b      	lsls	r3, r3, #1
 8012fee:	fa02 f303 	lsl.w	r3, r2, r3
 8012ff2:	69ba      	ldr	r2, [r7, #24]
 8012ff4:	4313      	orrs	r3, r2
 8012ff6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	69ba      	ldr	r2, [r7, #24]
 8012ffc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	685b      	ldr	r3, [r3, #4]
 8013002:	2b02      	cmp	r3, #2
 8013004:	d003      	beq.n	801300e <HAL_GPIO_Init+0xee>
 8013006:	683b      	ldr	r3, [r7, #0]
 8013008:	685b      	ldr	r3, [r3, #4]
 801300a:	2b12      	cmp	r3, #18
 801300c:	d123      	bne.n	8013056 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	08da      	lsrs	r2, r3, #3
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3208      	adds	r2, #8
 8013016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	f003 0307 	and.w	r3, r3, #7
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	220f      	movs	r2, #15
 8013026:	fa02 f303 	lsl.w	r3, r2, r3
 801302a:	43db      	mvns	r3, r3
 801302c:	69ba      	ldr	r2, [r7, #24]
 801302e:	4013      	ands	r3, r2
 8013030:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	691a      	ldr	r2, [r3, #16]
 8013036:	69fb      	ldr	r3, [r7, #28]
 8013038:	f003 0307 	and.w	r3, r3, #7
 801303c:	009b      	lsls	r3, r3, #2
 801303e:	fa02 f303 	lsl.w	r3, r2, r3
 8013042:	69ba      	ldr	r2, [r7, #24]
 8013044:	4313      	orrs	r3, r2
 8013046:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8013048:	69fb      	ldr	r3, [r7, #28]
 801304a:	08da      	lsrs	r2, r3, #3
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	3208      	adds	r2, #8
 8013050:	69b9      	ldr	r1, [r7, #24]
 8013052:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	005b      	lsls	r3, r3, #1
 8013060:	2203      	movs	r2, #3
 8013062:	fa02 f303 	lsl.w	r3, r2, r3
 8013066:	43db      	mvns	r3, r3
 8013068:	69ba      	ldr	r2, [r7, #24]
 801306a:	4013      	ands	r3, r2
 801306c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801306e:	683b      	ldr	r3, [r7, #0]
 8013070:	685b      	ldr	r3, [r3, #4]
 8013072:	f003 0203 	and.w	r2, r3, #3
 8013076:	69fb      	ldr	r3, [r7, #28]
 8013078:	005b      	lsls	r3, r3, #1
 801307a:	fa02 f303 	lsl.w	r3, r2, r3
 801307e:	69ba      	ldr	r2, [r7, #24]
 8013080:	4313      	orrs	r3, r2
 8013082:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	69ba      	ldr	r2, [r7, #24]
 8013088:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801308a:	683b      	ldr	r3, [r7, #0]
 801308c:	685b      	ldr	r3, [r3, #4]
 801308e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013092:	2b00      	cmp	r3, #0
 8013094:	f000 80e0 	beq.w	8013258 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013098:	4b2f      	ldr	r3, [pc, #188]	; (8013158 <HAL_GPIO_Init+0x238>)
 801309a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801309e:	4a2e      	ldr	r2, [pc, #184]	; (8013158 <HAL_GPIO_Init+0x238>)
 80130a0:	f043 0302 	orr.w	r3, r3, #2
 80130a4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80130a8:	4b2b      	ldr	r3, [pc, #172]	; (8013158 <HAL_GPIO_Init+0x238>)
 80130aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80130ae:	f003 0302 	and.w	r3, r3, #2
 80130b2:	60fb      	str	r3, [r7, #12]
 80130b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80130b6:	4a29      	ldr	r2, [pc, #164]	; (801315c <HAL_GPIO_Init+0x23c>)
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	089b      	lsrs	r3, r3, #2
 80130bc:	3302      	adds	r3, #2
 80130be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80130c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	f003 0303 	and.w	r3, r3, #3
 80130ca:	009b      	lsls	r3, r3, #2
 80130cc:	220f      	movs	r2, #15
 80130ce:	fa02 f303 	lsl.w	r3, r2, r3
 80130d2:	43db      	mvns	r3, r3
 80130d4:	69ba      	ldr	r2, [r7, #24]
 80130d6:	4013      	ands	r3, r2
 80130d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80130da:	687b      	ldr	r3, [r7, #4]
 80130dc:	4a20      	ldr	r2, [pc, #128]	; (8013160 <HAL_GPIO_Init+0x240>)
 80130de:	4293      	cmp	r3, r2
 80130e0:	d052      	beq.n	8013188 <HAL_GPIO_Init+0x268>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4a1f      	ldr	r2, [pc, #124]	; (8013164 <HAL_GPIO_Init+0x244>)
 80130e6:	4293      	cmp	r3, r2
 80130e8:	d031      	beq.n	801314e <HAL_GPIO_Init+0x22e>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4a1e      	ldr	r2, [pc, #120]	; (8013168 <HAL_GPIO_Init+0x248>)
 80130ee:	4293      	cmp	r3, r2
 80130f0:	d02b      	beq.n	801314a <HAL_GPIO_Init+0x22a>
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	4a1d      	ldr	r2, [pc, #116]	; (801316c <HAL_GPIO_Init+0x24c>)
 80130f6:	4293      	cmp	r3, r2
 80130f8:	d025      	beq.n	8013146 <HAL_GPIO_Init+0x226>
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	4a1c      	ldr	r2, [pc, #112]	; (8013170 <HAL_GPIO_Init+0x250>)
 80130fe:	4293      	cmp	r3, r2
 8013100:	d01f      	beq.n	8013142 <HAL_GPIO_Init+0x222>
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	4a1b      	ldr	r2, [pc, #108]	; (8013174 <HAL_GPIO_Init+0x254>)
 8013106:	4293      	cmp	r3, r2
 8013108:	d019      	beq.n	801313e <HAL_GPIO_Init+0x21e>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	4a1a      	ldr	r2, [pc, #104]	; (8013178 <HAL_GPIO_Init+0x258>)
 801310e:	4293      	cmp	r3, r2
 8013110:	d013      	beq.n	801313a <HAL_GPIO_Init+0x21a>
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	4a19      	ldr	r2, [pc, #100]	; (801317c <HAL_GPIO_Init+0x25c>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d00d      	beq.n	8013136 <HAL_GPIO_Init+0x216>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4a18      	ldr	r2, [pc, #96]	; (8013180 <HAL_GPIO_Init+0x260>)
 801311e:	4293      	cmp	r3, r2
 8013120:	d007      	beq.n	8013132 <HAL_GPIO_Init+0x212>
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	4a17      	ldr	r2, [pc, #92]	; (8013184 <HAL_GPIO_Init+0x264>)
 8013126:	4293      	cmp	r3, r2
 8013128:	d101      	bne.n	801312e <HAL_GPIO_Init+0x20e>
 801312a:	2309      	movs	r3, #9
 801312c:	e02d      	b.n	801318a <HAL_GPIO_Init+0x26a>
 801312e:	230a      	movs	r3, #10
 8013130:	e02b      	b.n	801318a <HAL_GPIO_Init+0x26a>
 8013132:	2308      	movs	r3, #8
 8013134:	e029      	b.n	801318a <HAL_GPIO_Init+0x26a>
 8013136:	2307      	movs	r3, #7
 8013138:	e027      	b.n	801318a <HAL_GPIO_Init+0x26a>
 801313a:	2306      	movs	r3, #6
 801313c:	e025      	b.n	801318a <HAL_GPIO_Init+0x26a>
 801313e:	2305      	movs	r3, #5
 8013140:	e023      	b.n	801318a <HAL_GPIO_Init+0x26a>
 8013142:	2304      	movs	r3, #4
 8013144:	e021      	b.n	801318a <HAL_GPIO_Init+0x26a>
 8013146:	2303      	movs	r3, #3
 8013148:	e01f      	b.n	801318a <HAL_GPIO_Init+0x26a>
 801314a:	2302      	movs	r3, #2
 801314c:	e01d      	b.n	801318a <HAL_GPIO_Init+0x26a>
 801314e:	2301      	movs	r3, #1
 8013150:	e01b      	b.n	801318a <HAL_GPIO_Init+0x26a>
 8013152:	bf00      	nop
 8013154:	58000080 	.word	0x58000080
 8013158:	58024400 	.word	0x58024400
 801315c:	58000400 	.word	0x58000400
 8013160:	58020000 	.word	0x58020000
 8013164:	58020400 	.word	0x58020400
 8013168:	58020800 	.word	0x58020800
 801316c:	58020c00 	.word	0x58020c00
 8013170:	58021000 	.word	0x58021000
 8013174:	58021400 	.word	0x58021400
 8013178:	58021800 	.word	0x58021800
 801317c:	58021c00 	.word	0x58021c00
 8013180:	58022000 	.word	0x58022000
 8013184:	58022400 	.word	0x58022400
 8013188:	2300      	movs	r3, #0
 801318a:	69fa      	ldr	r2, [r7, #28]
 801318c:	f002 0203 	and.w	r2, r2, #3
 8013190:	0092      	lsls	r2, r2, #2
 8013192:	4093      	lsls	r3, r2
 8013194:	69ba      	ldr	r2, [r7, #24]
 8013196:	4313      	orrs	r3, r2
 8013198:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801319a:	4938      	ldr	r1, [pc, #224]	; (801327c <HAL_GPIO_Init+0x35c>)
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	089b      	lsrs	r3, r3, #2
 80131a0:	3302      	adds	r3, #2
 80131a2:	69ba      	ldr	r2, [r7, #24]
 80131a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80131a8:	697b      	ldr	r3, [r7, #20]
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	43db      	mvns	r3, r3
 80131b2:	69ba      	ldr	r2, [r7, #24]
 80131b4:	4013      	ands	r3, r2
 80131b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80131b8:	683b      	ldr	r3, [r7, #0]
 80131ba:	685b      	ldr	r3, [r3, #4]
 80131bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d003      	beq.n	80131cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80131c4:	69ba      	ldr	r2, [r7, #24]
 80131c6:	693b      	ldr	r3, [r7, #16]
 80131c8:	4313      	orrs	r3, r2
 80131ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80131cc:	697b      	ldr	r3, [r7, #20]
 80131ce:	69ba      	ldr	r2, [r7, #24]
 80131d0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	685b      	ldr	r3, [r3, #4]
 80131d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80131d8:	693b      	ldr	r3, [r7, #16]
 80131da:	43db      	mvns	r3, r3
 80131dc:	69ba      	ldr	r2, [r7, #24]
 80131de:	4013      	ands	r3, r2
 80131e0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d003      	beq.n	80131f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80131ee:	69ba      	ldr	r2, [r7, #24]
 80131f0:	693b      	ldr	r3, [r7, #16]
 80131f2:	4313      	orrs	r3, r2
 80131f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	69ba      	ldr	r2, [r7, #24]
 80131fa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80131fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013204:	693b      	ldr	r3, [r7, #16]
 8013206:	43db      	mvns	r3, r3
 8013208:	69ba      	ldr	r2, [r7, #24]
 801320a:	4013      	ands	r3, r2
 801320c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	685b      	ldr	r3, [r3, #4]
 8013212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013216:	2b00      	cmp	r3, #0
 8013218:	d003      	beq.n	8013222 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 801321a:	69ba      	ldr	r2, [r7, #24]
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	4313      	orrs	r3, r2
 8013220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8013222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801322a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013232:	693b      	ldr	r3, [r7, #16]
 8013234:	43db      	mvns	r3, r3
 8013236:	69ba      	ldr	r2, [r7, #24]
 8013238:	4013      	ands	r3, r2
 801323a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 801323c:	683b      	ldr	r3, [r7, #0]
 801323e:	685b      	ldr	r3, [r3, #4]
 8013240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013244:	2b00      	cmp	r3, #0
 8013246:	d003      	beq.n	8013250 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8013248:	69ba      	ldr	r2, [r7, #24]
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	4313      	orrs	r3, r2
 801324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013250:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013254:	69bb      	ldr	r3, [r7, #24]
 8013256:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8013258:	69fb      	ldr	r3, [r7, #28]
 801325a:	3301      	adds	r3, #1
 801325c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801325e:	683b      	ldr	r3, [r7, #0]
 8013260:	681a      	ldr	r2, [r3, #0]
 8013262:	69fb      	ldr	r3, [r7, #28]
 8013264:	fa22 f303 	lsr.w	r3, r2, r3
 8013268:	2b00      	cmp	r3, #0
 801326a:	f47f ae63 	bne.w	8012f34 <HAL_GPIO_Init+0x14>
  }
}
 801326e:	bf00      	nop
 8013270:	3724      	adds	r7, #36	; 0x24
 8013272:	46bd      	mov	sp, r7
 8013274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	58000400 	.word	0x58000400

08013280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013280:	b480      	push	{r7}
 8013282:	b085      	sub	sp, #20
 8013284:	af00      	add	r7, sp, #0
 8013286:	6078      	str	r0, [r7, #4]
 8013288:	460b      	mov	r3, r1
 801328a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	691a      	ldr	r2, [r3, #16]
 8013290:	887b      	ldrh	r3, [r7, #2]
 8013292:	4013      	ands	r3, r2
 8013294:	2b00      	cmp	r3, #0
 8013296:	d002      	beq.n	801329e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013298:	2301      	movs	r3, #1
 801329a:	73fb      	strb	r3, [r7, #15]
 801329c:	e001      	b.n	80132a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801329e:	2300      	movs	r3, #0
 80132a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80132a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80132a4:	4618      	mov	r0, r3
 80132a6:	3714      	adds	r7, #20
 80132a8:	46bd      	mov	sp, r7
 80132aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ae:	4770      	bx	lr

080132b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b083      	sub	sp, #12
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
 80132b8:	460b      	mov	r3, r1
 80132ba:	807b      	strh	r3, [r7, #2]
 80132bc:	4613      	mov	r3, r2
 80132be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80132c0:	787b      	ldrb	r3, [r7, #1]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d003      	beq.n	80132ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80132c6:	887a      	ldrh	r2, [r7, #2]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80132cc:	e003      	b.n	80132d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80132ce:	887b      	ldrh	r3, [r7, #2]
 80132d0:	041a      	lsls	r2, r3, #16
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	619a      	str	r2, [r3, #24]
}
 80132d6:	bf00      	nop
 80132d8:	370c      	adds	r7, #12
 80132da:	46bd      	mov	sp, r7
 80132dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132e0:	4770      	bx	lr

080132e2 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b082      	sub	sp, #8
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	4603      	mov	r3, r0
 80132ea:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80132ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80132f0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80132f4:	88fb      	ldrh	r3, [r7, #6]
 80132f6:	4013      	ands	r3, r2
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d008      	beq.n	801330e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80132fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013300:	88fb      	ldrh	r3, [r7, #6]
 8013302:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8013306:	88fb      	ldrh	r3, [r7, #6]
 8013308:	4618      	mov	r0, r3
 801330a:	f7ed f96d 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 801330e:	bf00      	nop
 8013310:	3708      	adds	r7, #8
 8013312:	46bd      	mov	sp, r7
 8013314:	bd80      	pop	{r7, pc}

08013316 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8013316:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013318:	b08f      	sub	sp, #60	; 0x3c
 801331a:	af0a      	add	r7, sp, #40	; 0x28
 801331c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2b00      	cmp	r3, #0
 8013322:	d101      	bne.n	8013328 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8013324:	2301      	movs	r3, #1
 8013326:	e116      	b.n	8013556 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8013334:	b2db      	uxtb	r3, r3
 8013336:	2b00      	cmp	r3, #0
 8013338:	d106      	bne.n	8013348 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	2200      	movs	r2, #0
 801333e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8013342:	6878      	ldr	r0, [r7, #4]
 8013344:	f00a fb36 	bl	801d9b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	2203      	movs	r2, #3
 801334c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8013350:	68bb      	ldr	r3, [r7, #8]
 8013352:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013358:	2b00      	cmp	r3, #0
 801335a:	d102      	bne.n	8013362 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	2200      	movs	r2, #0
 8013360:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	4618      	mov	r0, r3
 8013368:	f007 fba3 	bl	801aab2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	603b      	str	r3, [r7, #0]
 8013372:	687e      	ldr	r6, [r7, #4]
 8013374:	466d      	mov	r5, sp
 8013376:	f106 0410 	add.w	r4, r6, #16
 801337a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801337c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801337e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013380:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013382:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013386:	e885 0003 	stmia.w	r5, {r0, r1}
 801338a:	1d33      	adds	r3, r6, #4
 801338c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801338e:	6838      	ldr	r0, [r7, #0]
 8013390:	f007 fa7a 	bl	801a888 <USB_CoreInit>
 8013394:	4603      	mov	r3, r0
 8013396:	2b00      	cmp	r3, #0
 8013398:	d005      	beq.n	80133a6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	2202      	movs	r2, #2
 801339e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80133a2:	2301      	movs	r3, #1
 80133a4:	e0d7      	b.n	8013556 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	2100      	movs	r1, #0
 80133ac:	4618      	mov	r0, r3
 80133ae:	f007 fb91 	bl	801aad4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80133b2:	2300      	movs	r3, #0
 80133b4:	73fb      	strb	r3, [r7, #15]
 80133b6:	e04a      	b.n	801344e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80133b8:	7bfa      	ldrb	r2, [r7, #15]
 80133ba:	6879      	ldr	r1, [r7, #4]
 80133bc:	4613      	mov	r3, r2
 80133be:	00db      	lsls	r3, r3, #3
 80133c0:	1a9b      	subs	r3, r3, r2
 80133c2:	009b      	lsls	r3, r3, #2
 80133c4:	440b      	add	r3, r1
 80133c6:	333d      	adds	r3, #61	; 0x3d
 80133c8:	2201      	movs	r2, #1
 80133ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80133cc:	7bfa      	ldrb	r2, [r7, #15]
 80133ce:	6879      	ldr	r1, [r7, #4]
 80133d0:	4613      	mov	r3, r2
 80133d2:	00db      	lsls	r3, r3, #3
 80133d4:	1a9b      	subs	r3, r3, r2
 80133d6:	009b      	lsls	r3, r3, #2
 80133d8:	440b      	add	r3, r1
 80133da:	333c      	adds	r3, #60	; 0x3c
 80133dc:	7bfa      	ldrb	r2, [r7, #15]
 80133de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80133e0:	7bfa      	ldrb	r2, [r7, #15]
 80133e2:	7bfb      	ldrb	r3, [r7, #15]
 80133e4:	b298      	uxth	r0, r3
 80133e6:	6879      	ldr	r1, [r7, #4]
 80133e8:	4613      	mov	r3, r2
 80133ea:	00db      	lsls	r3, r3, #3
 80133ec:	1a9b      	subs	r3, r3, r2
 80133ee:	009b      	lsls	r3, r3, #2
 80133f0:	440b      	add	r3, r1
 80133f2:	3342      	adds	r3, #66	; 0x42
 80133f4:	4602      	mov	r2, r0
 80133f6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80133f8:	7bfa      	ldrb	r2, [r7, #15]
 80133fa:	6879      	ldr	r1, [r7, #4]
 80133fc:	4613      	mov	r3, r2
 80133fe:	00db      	lsls	r3, r3, #3
 8013400:	1a9b      	subs	r3, r3, r2
 8013402:	009b      	lsls	r3, r3, #2
 8013404:	440b      	add	r3, r1
 8013406:	333f      	adds	r3, #63	; 0x3f
 8013408:	2200      	movs	r2, #0
 801340a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 801340c:	7bfa      	ldrb	r2, [r7, #15]
 801340e:	6879      	ldr	r1, [r7, #4]
 8013410:	4613      	mov	r3, r2
 8013412:	00db      	lsls	r3, r3, #3
 8013414:	1a9b      	subs	r3, r3, r2
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	440b      	add	r3, r1
 801341a:	3344      	adds	r3, #68	; 0x44
 801341c:	2200      	movs	r2, #0
 801341e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8013420:	7bfa      	ldrb	r2, [r7, #15]
 8013422:	6879      	ldr	r1, [r7, #4]
 8013424:	4613      	mov	r3, r2
 8013426:	00db      	lsls	r3, r3, #3
 8013428:	1a9b      	subs	r3, r3, r2
 801342a:	009b      	lsls	r3, r3, #2
 801342c:	440b      	add	r3, r1
 801342e:	3348      	adds	r3, #72	; 0x48
 8013430:	2200      	movs	r2, #0
 8013432:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8013434:	7bfa      	ldrb	r2, [r7, #15]
 8013436:	6879      	ldr	r1, [r7, #4]
 8013438:	4613      	mov	r3, r2
 801343a:	00db      	lsls	r3, r3, #3
 801343c:	1a9b      	subs	r3, r3, r2
 801343e:	009b      	lsls	r3, r3, #2
 8013440:	440b      	add	r3, r1
 8013442:	3350      	adds	r3, #80	; 0x50
 8013444:	2200      	movs	r2, #0
 8013446:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013448:	7bfb      	ldrb	r3, [r7, #15]
 801344a:	3301      	adds	r3, #1
 801344c:	73fb      	strb	r3, [r7, #15]
 801344e:	7bfa      	ldrb	r2, [r7, #15]
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	685b      	ldr	r3, [r3, #4]
 8013454:	429a      	cmp	r2, r3
 8013456:	d3af      	bcc.n	80133b8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013458:	2300      	movs	r3, #0
 801345a:	73fb      	strb	r3, [r7, #15]
 801345c:	e044      	b.n	80134e8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801345e:	7bfa      	ldrb	r2, [r7, #15]
 8013460:	6879      	ldr	r1, [r7, #4]
 8013462:	4613      	mov	r3, r2
 8013464:	00db      	lsls	r3, r3, #3
 8013466:	1a9b      	subs	r3, r3, r2
 8013468:	009b      	lsls	r3, r3, #2
 801346a:	440b      	add	r3, r1
 801346c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8013470:	2200      	movs	r2, #0
 8013472:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013474:	7bfa      	ldrb	r2, [r7, #15]
 8013476:	6879      	ldr	r1, [r7, #4]
 8013478:	4613      	mov	r3, r2
 801347a:	00db      	lsls	r3, r3, #3
 801347c:	1a9b      	subs	r3, r3, r2
 801347e:	009b      	lsls	r3, r3, #2
 8013480:	440b      	add	r3, r1
 8013482:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8013486:	7bfa      	ldrb	r2, [r7, #15]
 8013488:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801348a:	7bfa      	ldrb	r2, [r7, #15]
 801348c:	6879      	ldr	r1, [r7, #4]
 801348e:	4613      	mov	r3, r2
 8013490:	00db      	lsls	r3, r3, #3
 8013492:	1a9b      	subs	r3, r3, r2
 8013494:	009b      	lsls	r3, r3, #2
 8013496:	440b      	add	r3, r1
 8013498:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801349c:	2200      	movs	r2, #0
 801349e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80134a0:	7bfa      	ldrb	r2, [r7, #15]
 80134a2:	6879      	ldr	r1, [r7, #4]
 80134a4:	4613      	mov	r3, r2
 80134a6:	00db      	lsls	r3, r3, #3
 80134a8:	1a9b      	subs	r3, r3, r2
 80134aa:	009b      	lsls	r3, r3, #2
 80134ac:	440b      	add	r3, r1
 80134ae:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80134b2:	2200      	movs	r2, #0
 80134b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80134b6:	7bfa      	ldrb	r2, [r7, #15]
 80134b8:	6879      	ldr	r1, [r7, #4]
 80134ba:	4613      	mov	r3, r2
 80134bc:	00db      	lsls	r3, r3, #3
 80134be:	1a9b      	subs	r3, r3, r2
 80134c0:	009b      	lsls	r3, r3, #2
 80134c2:	440b      	add	r3, r1
 80134c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80134c8:	2200      	movs	r2, #0
 80134ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80134cc:	7bfa      	ldrb	r2, [r7, #15]
 80134ce:	6879      	ldr	r1, [r7, #4]
 80134d0:	4613      	mov	r3, r2
 80134d2:	00db      	lsls	r3, r3, #3
 80134d4:	1a9b      	subs	r3, r3, r2
 80134d6:	009b      	lsls	r3, r3, #2
 80134d8:	440b      	add	r3, r1
 80134da:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80134de:	2200      	movs	r2, #0
 80134e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80134e2:	7bfb      	ldrb	r3, [r7, #15]
 80134e4:	3301      	adds	r3, #1
 80134e6:	73fb      	strb	r3, [r7, #15]
 80134e8:	7bfa      	ldrb	r2, [r7, #15]
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d3b5      	bcc.n	801345e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	681b      	ldr	r3, [r3, #0]
 80134f6:	603b      	str	r3, [r7, #0]
 80134f8:	687e      	ldr	r6, [r7, #4]
 80134fa:	466d      	mov	r5, sp
 80134fc:	f106 0410 	add.w	r4, r6, #16
 8013500:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013502:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013504:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013506:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013508:	e894 0003 	ldmia.w	r4, {r0, r1}
 801350c:	e885 0003 	stmia.w	r5, {r0, r1}
 8013510:	1d33      	adds	r3, r6, #4
 8013512:	cb0e      	ldmia	r3, {r1, r2, r3}
 8013514:	6838      	ldr	r0, [r7, #0]
 8013516:	f007 fb07 	bl	801ab28 <USB_DevInit>
 801351a:	4603      	mov	r3, r0
 801351c:	2b00      	cmp	r3, #0
 801351e:	d005      	beq.n	801352c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	2202      	movs	r2, #2
 8013524:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013528:	2301      	movs	r3, #1
 801352a:	e014      	b.n	8013556 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	2200      	movs	r2, #0
 8013530:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	2201      	movs	r2, #1
 8013538:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013540:	2b01      	cmp	r3, #1
 8013542:	d102      	bne.n	801354a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8013544:	6878      	ldr	r0, [r7, #4]
 8013546:	f001 f891 	bl	801466c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	4618      	mov	r0, r3
 8013550:	f008 faee 	bl	801bb30 <USB_DevDisconnect>

  return HAL_OK;
 8013554:	2300      	movs	r3, #0
}
 8013556:	4618      	mov	r0, r3
 8013558:	3714      	adds	r7, #20
 801355a:	46bd      	mov	sp, r7
 801355c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801355e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801355e:	b580      	push	{r7, lr}
 8013560:	b084      	sub	sp, #16
 8013562:	af00      	add	r7, sp, #0
 8013564:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	681b      	ldr	r3, [r3, #0]
 801356a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013572:	2b01      	cmp	r3, #1
 8013574:	d101      	bne.n	801357a <HAL_PCD_Start+0x1c>
 8013576:	2302      	movs	r3, #2
 8013578:	e020      	b.n	80135bc <HAL_PCD_Start+0x5e>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	2201      	movs	r2, #1
 801357e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013586:	2b01      	cmp	r3, #1
 8013588:	d109      	bne.n	801359e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801358e:	2b01      	cmp	r3, #1
 8013590:	d005      	beq.n	801359e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013596:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	4618      	mov	r0, r3
 80135a4:	f008 faac 	bl	801bb00 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f007 fa6f 	bl	801aa90 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	2200      	movs	r2, #0
 80135b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80135ba:	2300      	movs	r3, #0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3710      	adds	r7, #16
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80135c4:	b590      	push	{r4, r7, lr}
 80135c6:	b08d      	sub	sp, #52	; 0x34
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135d2:	6a3b      	ldr	r3, [r7, #32]
 80135d4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	4618      	mov	r0, r3
 80135dc:	f008 fb53 	bl	801bc86 <USB_GetMode>
 80135e0:	4603      	mov	r3, r0
 80135e2:	2b00      	cmp	r3, #0
 80135e4:	f040 83ca 	bne.w	8013d7c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	4618      	mov	r0, r3
 80135ee:	f008 fab7 	bl	801bb60 <USB_ReadInterrupts>
 80135f2:	4603      	mov	r3, r0
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	f000 83c0 	beq.w	8013d7a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	681b      	ldr	r3, [r3, #0]
 80135fe:	4618      	mov	r0, r3
 8013600:	f008 faae 	bl	801bb60 <USB_ReadInterrupts>
 8013604:	4603      	mov	r3, r0
 8013606:	f003 0302 	and.w	r3, r3, #2
 801360a:	2b02      	cmp	r3, #2
 801360c:	d107      	bne.n	801361e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	695a      	ldr	r2, [r3, #20]
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f002 0202 	and.w	r2, r2, #2
 801361c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	681b      	ldr	r3, [r3, #0]
 8013622:	4618      	mov	r0, r3
 8013624:	f008 fa9c 	bl	801bb60 <USB_ReadInterrupts>
 8013628:	4603      	mov	r3, r0
 801362a:	f003 0310 	and.w	r3, r3, #16
 801362e:	2b10      	cmp	r3, #16
 8013630:	d161      	bne.n	80136f6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	681b      	ldr	r3, [r3, #0]
 8013636:	699a      	ldr	r2, [r3, #24]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	681b      	ldr	r3, [r3, #0]
 801363c:	f022 0210 	bic.w	r2, r2, #16
 8013640:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8013642:	6a3b      	ldr	r3, [r7, #32]
 8013644:	6a1b      	ldr	r3, [r3, #32]
 8013646:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8013648:	69bb      	ldr	r3, [r7, #24]
 801364a:	f003 020f 	and.w	r2, r3, #15
 801364e:	4613      	mov	r3, r2
 8013650:	00db      	lsls	r3, r3, #3
 8013652:	1a9b      	subs	r3, r3, r2
 8013654:	009b      	lsls	r3, r3, #2
 8013656:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801365a:	687a      	ldr	r2, [r7, #4]
 801365c:	4413      	add	r3, r2
 801365e:	3304      	adds	r3, #4
 8013660:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8013662:	69bb      	ldr	r3, [r7, #24]
 8013664:	0c5b      	lsrs	r3, r3, #17
 8013666:	f003 030f 	and.w	r3, r3, #15
 801366a:	2b02      	cmp	r3, #2
 801366c:	d124      	bne.n	80136b8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801366e:	69ba      	ldr	r2, [r7, #24]
 8013670:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8013674:	4013      	ands	r3, r2
 8013676:	2b00      	cmp	r3, #0
 8013678:	d035      	beq.n	80136e6 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801367e:	69bb      	ldr	r3, [r7, #24]
 8013680:	091b      	lsrs	r3, r3, #4
 8013682:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013684:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013688:	b29b      	uxth	r3, r3
 801368a:	461a      	mov	r2, r3
 801368c:	6a38      	ldr	r0, [r7, #32]
 801368e:	f008 f914 	bl	801b8ba <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013692:	697b      	ldr	r3, [r7, #20]
 8013694:	68da      	ldr	r2, [r3, #12]
 8013696:	69bb      	ldr	r3, [r7, #24]
 8013698:	091b      	lsrs	r3, r3, #4
 801369a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801369e:	441a      	add	r2, r3
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80136a4:	697b      	ldr	r3, [r7, #20]
 80136a6:	699a      	ldr	r2, [r3, #24]
 80136a8:	69bb      	ldr	r3, [r7, #24]
 80136aa:	091b      	lsrs	r3, r3, #4
 80136ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80136b0:	441a      	add	r2, r3
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	619a      	str	r2, [r3, #24]
 80136b6:	e016      	b.n	80136e6 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80136b8:	69bb      	ldr	r3, [r7, #24]
 80136ba:	0c5b      	lsrs	r3, r3, #17
 80136bc:	f003 030f 	and.w	r3, r3, #15
 80136c0:	2b06      	cmp	r3, #6
 80136c2:	d110      	bne.n	80136e6 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80136ca:	2208      	movs	r2, #8
 80136cc:	4619      	mov	r1, r3
 80136ce:	6a38      	ldr	r0, [r7, #32]
 80136d0:	f008 f8f3 	bl	801b8ba <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80136d4:	697b      	ldr	r3, [r7, #20]
 80136d6:	699a      	ldr	r2, [r3, #24]
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	091b      	lsrs	r3, r3, #4
 80136dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80136e0:	441a      	add	r2, r3
 80136e2:	697b      	ldr	r3, [r7, #20]
 80136e4:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	699a      	ldr	r2, [r3, #24]
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f042 0210 	orr.w	r2, r2, #16
 80136f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4618      	mov	r0, r3
 80136fc:	f008 fa30 	bl	801bb60 <USB_ReadInterrupts>
 8013700:	4603      	mov	r3, r0
 8013702:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8013706:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 801370a:	d16e      	bne.n	80137ea <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 801370c:	2300      	movs	r3, #0
 801370e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8013710:	687b      	ldr	r3, [r7, #4]
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	4618      	mov	r0, r3
 8013716:	f008 fa36 	bl	801bb86 <USB_ReadDevAllOutEpInterrupt>
 801371a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 801371c:	e062      	b.n	80137e4 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 801371e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013720:	f003 0301 	and.w	r3, r3, #1
 8013724:	2b00      	cmp	r3, #0
 8013726:	d057      	beq.n	80137d8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801372e:	b2d2      	uxtb	r2, r2
 8013730:	4611      	mov	r1, r2
 8013732:	4618      	mov	r0, r3
 8013734:	f008 fa5b 	bl	801bbee <USB_ReadDevOutEPInterrupt>
 8013738:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 801373a:	693b      	ldr	r3, [r7, #16]
 801373c:	f003 0301 	and.w	r3, r3, #1
 8013740:	2b00      	cmp	r3, #0
 8013742:	d00c      	beq.n	801375e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8013744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013746:	015a      	lsls	r2, r3, #5
 8013748:	69fb      	ldr	r3, [r7, #28]
 801374a:	4413      	add	r3, r2
 801374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013750:	461a      	mov	r2, r3
 8013752:	2301      	movs	r3, #1
 8013754:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8013756:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013758:	6878      	ldr	r0, [r7, #4]
 801375a:	f000 fddd 	bl	8014318 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 801375e:	693b      	ldr	r3, [r7, #16]
 8013760:	f003 0308 	and.w	r3, r3, #8
 8013764:	2b00      	cmp	r3, #0
 8013766:	d00c      	beq.n	8013782 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8013768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801376a:	015a      	lsls	r2, r3, #5
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	4413      	add	r3, r2
 8013770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013774:	461a      	mov	r2, r3
 8013776:	2308      	movs	r3, #8
 8013778:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 801377a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801377c:	6878      	ldr	r0, [r7, #4]
 801377e:	f000 fed7 	bl	8014530 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8013782:	693b      	ldr	r3, [r7, #16]
 8013784:	f003 0310 	and.w	r3, r3, #16
 8013788:	2b00      	cmp	r3, #0
 801378a:	d008      	beq.n	801379e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 801378c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801378e:	015a      	lsls	r2, r3, #5
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	4413      	add	r3, r2
 8013794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013798:	461a      	mov	r2, r3
 801379a:	2310      	movs	r3, #16
 801379c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 801379e:	693b      	ldr	r3, [r7, #16]
 80137a0:	f003 0320 	and.w	r3, r3, #32
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d008      	beq.n	80137ba <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80137a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137aa:	015a      	lsls	r2, r3, #5
 80137ac:	69fb      	ldr	r3, [r7, #28]
 80137ae:	4413      	add	r3, r2
 80137b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137b4:	461a      	mov	r2, r3
 80137b6:	2320      	movs	r3, #32
 80137b8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80137ba:	693b      	ldr	r3, [r7, #16]
 80137bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d009      	beq.n	80137d8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80137c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137c6:	015a      	lsls	r2, r3, #5
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	4413      	add	r3, r2
 80137cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80137d0:	461a      	mov	r2, r3
 80137d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80137d6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80137d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80137da:	3301      	adds	r3, #1
 80137dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80137de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e0:	085b      	lsrs	r3, r3, #1
 80137e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80137e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d199      	bne.n	801371e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	4618      	mov	r0, r3
 80137f0:	f008 f9b6 	bl	801bb60 <USB_ReadInterrupts>
 80137f4:	4603      	mov	r3, r0
 80137f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80137fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80137fe:	f040 80c0 	bne.w	8013982 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	4618      	mov	r0, r3
 8013808:	f008 f9d7 	bl	801bbba <USB_ReadDevAllInEpInterrupt>
 801380c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 801380e:	2300      	movs	r3, #0
 8013810:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8013812:	e0b2      	b.n	801397a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	f003 0301 	and.w	r3, r3, #1
 801381a:	2b00      	cmp	r3, #0
 801381c:	f000 80a7 	beq.w	801396e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013826:	b2d2      	uxtb	r2, r2
 8013828:	4611      	mov	r1, r2
 801382a:	4618      	mov	r0, r3
 801382c:	f008 f9fd 	bl	801bc2a <USB_ReadDevInEPInterrupt>
 8013830:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8013832:	693b      	ldr	r3, [r7, #16]
 8013834:	f003 0301 	and.w	r3, r3, #1
 8013838:	2b00      	cmp	r3, #0
 801383a:	d057      	beq.n	80138ec <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801383e:	f003 030f 	and.w	r3, r3, #15
 8013842:	2201      	movs	r2, #1
 8013844:	fa02 f303 	lsl.w	r3, r2, r3
 8013848:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 801384a:	69fb      	ldr	r3, [r7, #28]
 801384c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	43db      	mvns	r3, r3
 8013856:	69f9      	ldr	r1, [r7, #28]
 8013858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801385c:	4013      	ands	r3, r2
 801385e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8013860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013862:	015a      	lsls	r2, r3, #5
 8013864:	69fb      	ldr	r3, [r7, #28]
 8013866:	4413      	add	r3, r2
 8013868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801386c:	461a      	mov	r2, r3
 801386e:	2301      	movs	r3, #1
 8013870:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	691b      	ldr	r3, [r3, #16]
 8013876:	2b01      	cmp	r3, #1
 8013878:	d132      	bne.n	80138e0 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 801387a:	6879      	ldr	r1, [r7, #4]
 801387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801387e:	4613      	mov	r3, r2
 8013880:	00db      	lsls	r3, r3, #3
 8013882:	1a9b      	subs	r3, r3, r2
 8013884:	009b      	lsls	r3, r3, #2
 8013886:	440b      	add	r3, r1
 8013888:	3348      	adds	r3, #72	; 0x48
 801388a:	6819      	ldr	r1, [r3, #0]
 801388c:	6878      	ldr	r0, [r7, #4]
 801388e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013890:	4613      	mov	r3, r2
 8013892:	00db      	lsls	r3, r3, #3
 8013894:	1a9b      	subs	r3, r3, r2
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	4403      	add	r3, r0
 801389a:	3344      	adds	r3, #68	; 0x44
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	4419      	add	r1, r3
 80138a0:	6878      	ldr	r0, [r7, #4]
 80138a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138a4:	4613      	mov	r3, r2
 80138a6:	00db      	lsls	r3, r3, #3
 80138a8:	1a9b      	subs	r3, r3, r2
 80138aa:	009b      	lsls	r3, r3, #2
 80138ac:	4403      	add	r3, r0
 80138ae:	3348      	adds	r3, #72	; 0x48
 80138b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80138b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d113      	bne.n	80138e0 <HAL_PCD_IRQHandler+0x31c>
 80138b8:	6879      	ldr	r1, [r7, #4]
 80138ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80138bc:	4613      	mov	r3, r2
 80138be:	00db      	lsls	r3, r3, #3
 80138c0:	1a9b      	subs	r3, r3, r2
 80138c2:	009b      	lsls	r3, r3, #2
 80138c4:	440b      	add	r3, r1
 80138c6:	3350      	adds	r3, #80	; 0x50
 80138c8:	681b      	ldr	r3, [r3, #0]
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d108      	bne.n	80138e0 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	6818      	ldr	r0, [r3, #0]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80138d8:	461a      	mov	r2, r3
 80138da:	2101      	movs	r1, #1
 80138dc:	f008 fa06 	bl	801bcec <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80138e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e2:	b2db      	uxtb	r3, r3
 80138e4:	4619      	mov	r1, r3
 80138e6:	6878      	ldr	r0, [r7, #4]
 80138e8:	f00a f8e3 	bl	801dab2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80138ec:	693b      	ldr	r3, [r7, #16]
 80138ee:	f003 0308 	and.w	r3, r3, #8
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d008      	beq.n	8013908 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	015a      	lsls	r2, r3, #5
 80138fa:	69fb      	ldr	r3, [r7, #28]
 80138fc:	4413      	add	r3, r2
 80138fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013902:	461a      	mov	r2, r3
 8013904:	2308      	movs	r3, #8
 8013906:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8013908:	693b      	ldr	r3, [r7, #16]
 801390a:	f003 0310 	and.w	r3, r3, #16
 801390e:	2b00      	cmp	r3, #0
 8013910:	d008      	beq.n	8013924 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8013912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013914:	015a      	lsls	r2, r3, #5
 8013916:	69fb      	ldr	r3, [r7, #28]
 8013918:	4413      	add	r3, r2
 801391a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801391e:	461a      	mov	r2, r3
 8013920:	2310      	movs	r3, #16
 8013922:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801392a:	2b00      	cmp	r3, #0
 801392c:	d008      	beq.n	8013940 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 801392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013930:	015a      	lsls	r2, r3, #5
 8013932:	69fb      	ldr	r3, [r7, #28]
 8013934:	4413      	add	r3, r2
 8013936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801393a:	461a      	mov	r2, r3
 801393c:	2340      	movs	r3, #64	; 0x40
 801393e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	f003 0302 	and.w	r3, r3, #2
 8013946:	2b00      	cmp	r3, #0
 8013948:	d008      	beq.n	801395c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 801394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801394c:	015a      	lsls	r2, r3, #5
 801394e:	69fb      	ldr	r3, [r7, #28]
 8013950:	4413      	add	r3, r2
 8013952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013956:	461a      	mov	r2, r3
 8013958:	2302      	movs	r3, #2
 801395a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 801395c:	693b      	ldr	r3, [r7, #16]
 801395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013962:	2b00      	cmp	r3, #0
 8013964:	d003      	beq.n	801396e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8013966:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013968:	6878      	ldr	r0, [r7, #4]
 801396a:	f000 fc48 	bl	80141fe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 801396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013970:	3301      	adds	r3, #1
 8013972:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013976:	085b      	lsrs	r3, r3, #1
 8013978:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 801397a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801397c:	2b00      	cmp	r3, #0
 801397e:	f47f af49 	bne.w	8013814 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	f008 f8ea 	bl	801bb60 <USB_ReadInterrupts>
 801398c:	4603      	mov	r3, r0
 801398e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013992:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013996:	d122      	bne.n	80139de <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	69fa      	ldr	r2, [r7, #28]
 80139a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80139a6:	f023 0301 	bic.w	r3, r3, #1
 80139aa:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80139b2:	2b01      	cmp	r3, #1
 80139b4:	d108      	bne.n	80139c8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	2200      	movs	r2, #0
 80139ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80139be:	2100      	movs	r1, #0
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fe77 	bl	80146b4 <HAL_PCDEx_LPM_Callback>
 80139c6:	e002      	b.n	80139ce <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f00a f8e9 	bl	801dba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	695a      	ldr	r2, [r3, #20]
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80139dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	4618      	mov	r0, r3
 80139e4:	f008 f8bc 	bl	801bb60 <USB_ReadInterrupts>
 80139e8:	4603      	mov	r3, r0
 80139ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80139ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80139f2:	d112      	bne.n	8013a1a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80139fa:	689b      	ldr	r3, [r3, #8]
 80139fc:	f003 0301 	and.w	r3, r3, #1
 8013a00:	2b01      	cmp	r3, #1
 8013a02:	d102      	bne.n	8013a0a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013a04:	6878      	ldr	r0, [r7, #4]
 8013a06:	f00a f8a5 	bl	801db54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	695a      	ldr	r2, [r3, #20]
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8013a18:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	4618      	mov	r0, r3
 8013a20:	f008 f89e 	bl	801bb60 <USB_ReadInterrupts>
 8013a24:	4603      	mov	r3, r0
 8013a26:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013a2a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013a2e:	d121      	bne.n	8013a74 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	681b      	ldr	r3, [r3, #0]
 8013a34:	695a      	ldr	r2, [r3, #20]
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013a3e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d111      	bne.n	8013a6e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2201      	movs	r2, #1
 8013a4e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013a58:	089b      	lsrs	r3, r3, #2
 8013a5a:	f003 020f 	and.w	r2, r3, #15
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013a64:	2101      	movs	r1, #1
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fe24 	bl	80146b4 <HAL_PCDEx_LPM_Callback>
 8013a6c:	e002      	b.n	8013a74 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f00a f870 	bl	801db54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f008 f871 	bl	801bb60 <USB_ReadInterrupts>
 8013a7e:	4603      	mov	r3, r0
 8013a80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013a84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013a88:	f040 80c7 	bne.w	8013c1a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013a8c:	69fb      	ldr	r3, [r7, #28]
 8013a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	69fa      	ldr	r2, [r7, #28]
 8013a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a9a:	f023 0301 	bic.w	r3, r3, #1
 8013a9e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	2110      	movs	r1, #16
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f007 f99c 	bl	801ade4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013aac:	2300      	movs	r3, #0
 8013aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013ab0:	e056      	b.n	8013b60 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8013ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ab4:	015a      	lsls	r2, r3, #5
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	4413      	add	r3, r2
 8013aba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013abe:	461a      	mov	r2, r3
 8013ac0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013ac4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ac8:	015a      	lsls	r2, r3, #5
 8013aca:	69fb      	ldr	r3, [r7, #28]
 8013acc:	4413      	add	r3, r2
 8013ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013ad6:	0151      	lsls	r1, r2, #5
 8013ad8:	69fa      	ldr	r2, [r7, #28]
 8013ada:	440a      	add	r2, r1
 8013adc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ae0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013ae4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae8:	015a      	lsls	r2, r3, #5
 8013aea:	69fb      	ldr	r3, [r7, #28]
 8013aec:	4413      	add	r3, r2
 8013aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013af6:	0151      	lsls	r1, r2, #5
 8013af8:	69fa      	ldr	r2, [r7, #28]
 8013afa:	440a      	add	r2, r1
 8013afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013b00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013b04:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8013b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b08:	015a      	lsls	r2, r3, #5
 8013b0a:	69fb      	ldr	r3, [r7, #28]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b12:	461a      	mov	r2, r3
 8013b14:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013b18:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b1c:	015a      	lsls	r2, r3, #5
 8013b1e:	69fb      	ldr	r3, [r7, #28]
 8013b20:	4413      	add	r3, r2
 8013b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b2a:	0151      	lsls	r1, r2, #5
 8013b2c:	69fa      	ldr	r2, [r7, #28]
 8013b2e:	440a      	add	r2, r1
 8013b30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013b38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b3c:	015a      	lsls	r2, r3, #5
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	4413      	add	r3, r2
 8013b42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b4a:	0151      	lsls	r1, r2, #5
 8013b4c:	69fa      	ldr	r2, [r7, #28]
 8013b4e:	440a      	add	r2, r1
 8013b50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013b54:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013b58:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b5c:	3301      	adds	r3, #1
 8013b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	685b      	ldr	r3, [r3, #4]
 8013b64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013b66:	429a      	cmp	r2, r3
 8013b68:	d3a3      	bcc.n	8013ab2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8013b6a:	69fb      	ldr	r3, [r7, #28]
 8013b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b70:	69db      	ldr	r3, [r3, #28]
 8013b72:	69fa      	ldr	r2, [r7, #28]
 8013b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b78:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8013b7c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d016      	beq.n	8013bb4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8013b86:	69fb      	ldr	r3, [r7, #28]
 8013b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013b90:	69fa      	ldr	r2, [r7, #28]
 8013b92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013b96:	f043 030b 	orr.w	r3, r3, #11
 8013b9a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8013b9e:	69fb      	ldr	r3, [r7, #28]
 8013ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ba6:	69fa      	ldr	r2, [r7, #28]
 8013ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bac:	f043 030b 	orr.w	r3, r3, #11
 8013bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8013bb2:	e015      	b.n	8013be0 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8013bb4:	69fb      	ldr	r3, [r7, #28]
 8013bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bba:	695a      	ldr	r2, [r3, #20]
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bc2:	4619      	mov	r1, r3
 8013bc4:	f242 032b 	movw	r3, #8235	; 0x202b
 8013bc8:	4313      	orrs	r3, r2
 8013bca:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8013bcc:	69fb      	ldr	r3, [r7, #28]
 8013bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bd2:	691b      	ldr	r3, [r3, #16]
 8013bd4:	69fa      	ldr	r2, [r7, #28]
 8013bd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bda:	f043 030b 	orr.w	r3, r3, #11
 8013bde:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8013be0:	69fb      	ldr	r3, [r7, #28]
 8013be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	69fa      	ldr	r2, [r7, #28]
 8013bea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013bee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013bf2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6818      	ldr	r0, [r3, #0]
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	691b      	ldr	r3, [r3, #16]
 8013bfc:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013c04:	461a      	mov	r2, r3
 8013c06:	f008 f871 	bl	801bcec <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	695a      	ldr	r2, [r3, #20]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	681b      	ldr	r3, [r3, #0]
 8013c14:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	681b      	ldr	r3, [r3, #0]
 8013c1e:	4618      	mov	r0, r3
 8013c20:	f007 ff9e 	bl	801bb60 <USB_ReadInterrupts>
 8013c24:	4603      	mov	r3, r0
 8013c26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013c2e:	d124      	bne.n	8013c7a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	4618      	mov	r0, r3
 8013c36:	f008 f835 	bl	801bca4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	4618      	mov	r0, r3
 8013c40:	f007 f931 	bl	801aea6 <USB_GetDevSpeed>
 8013c44:	4603      	mov	r3, r0
 8013c46:	461a      	mov	r2, r3
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	681c      	ldr	r4, [r3, #0]
 8013c50:	f001 fc86 	bl	8015560 <HAL_RCC_GetHCLKFreq>
 8013c54:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013c5a:	b2db      	uxtb	r3, r3
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	4620      	mov	r0, r4
 8013c60:	f006 fe74 	bl	801a94c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8013c64:	6878      	ldr	r0, [r7, #4]
 8013c66:	f009 ff4c 	bl	801db02 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	695a      	ldr	r2, [r3, #20]
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8013c78:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f007 ff6e 	bl	801bb60 <USB_ReadInterrupts>
 8013c84:	4603      	mov	r3, r0
 8013c86:	f003 0308 	and.w	r3, r3, #8
 8013c8a:	2b08      	cmp	r3, #8
 8013c8c:	d10a      	bne.n	8013ca4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f009 ff29 	bl	801dae6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	695a      	ldr	r2, [r3, #20]
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	f002 0208 	and.w	r2, r2, #8
 8013ca2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	681b      	ldr	r3, [r3, #0]
 8013ca8:	4618      	mov	r0, r3
 8013caa:	f007 ff59 	bl	801bb60 <USB_ReadInterrupts>
 8013cae:	4603      	mov	r3, r0
 8013cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013cb8:	d10f      	bne.n	8013cda <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013cba:	2300      	movs	r3, #0
 8013cbc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8013cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cc0:	b2db      	uxtb	r3, r3
 8013cc2:	4619      	mov	r1, r3
 8013cc4:	6878      	ldr	r0, [r7, #4]
 8013cc6:	f009 ff8b 	bl	801dbe0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	695a      	ldr	r2, [r3, #20]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8013cd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f007 ff3e 	bl	801bb60 <USB_ReadInterrupts>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013cea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013cee:	d10f      	bne.n	8013d10 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8013cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013cf6:	b2db      	uxtb	r3, r3
 8013cf8:	4619      	mov	r1, r3
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f009 ff5e 	bl	801dbbc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	695a      	ldr	r2, [r3, #20]
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8013d0e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	4618      	mov	r0, r3
 8013d16:	f007 ff23 	bl	801bb60 <USB_ReadInterrupts>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013d24:	d10a      	bne.n	8013d3c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f009 ff6c 	bl	801dc04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	695a      	ldr	r2, [r3, #20]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8013d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	681b      	ldr	r3, [r3, #0]
 8013d40:	4618      	mov	r0, r3
 8013d42:	f007 ff0d 	bl	801bb60 <USB_ReadInterrupts>
 8013d46:	4603      	mov	r3, r0
 8013d48:	f003 0304 	and.w	r3, r3, #4
 8013d4c:	2b04      	cmp	r3, #4
 8013d4e:	d115      	bne.n	8013d7c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	685b      	ldr	r3, [r3, #4]
 8013d56:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8013d58:	69bb      	ldr	r3, [r7, #24]
 8013d5a:	f003 0304 	and.w	r3, r3, #4
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d002      	beq.n	8013d68 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8013d62:	6878      	ldr	r0, [r7, #4]
 8013d64:	f009 ff5c 	bl	801dc20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	6859      	ldr	r1, [r3, #4]
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	69ba      	ldr	r2, [r7, #24]
 8013d74:	430a      	orrs	r2, r1
 8013d76:	605a      	str	r2, [r3, #4]
 8013d78:	e000      	b.n	8013d7c <HAL_PCD_IRQHandler+0x7b8>
      return;
 8013d7a:	bf00      	nop
    }
  }
}
 8013d7c:	3734      	adds	r7, #52	; 0x34
 8013d7e:	46bd      	mov	sp, r7
 8013d80:	bd90      	pop	{r4, r7, pc}

08013d82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8013d82:	b580      	push	{r7, lr}
 8013d84:	b082      	sub	sp, #8
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
 8013d8a:	460b      	mov	r3, r1
 8013d8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d101      	bne.n	8013d9c <HAL_PCD_SetAddress+0x1a>
 8013d98:	2302      	movs	r3, #2
 8013d9a:	e013      	b.n	8013dc4 <HAL_PCD_SetAddress+0x42>
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8013da4:	687b      	ldr	r3, [r7, #4]
 8013da6:	78fa      	ldrb	r2, [r7, #3]
 8013da8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	78fa      	ldrb	r2, [r7, #3]
 8013db2:	4611      	mov	r1, r2
 8013db4:	4618      	mov	r0, r3
 8013db6:	f007 fe7d 	bl	801bab4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8013dc2:	2300      	movs	r3, #0
}
 8013dc4:	4618      	mov	r0, r3
 8013dc6:	3708      	adds	r7, #8
 8013dc8:	46bd      	mov	sp, r7
 8013dca:	bd80      	pop	{r7, pc}

08013dcc <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b084      	sub	sp, #16
 8013dd0:	af00      	add	r7, sp, #0
 8013dd2:	6078      	str	r0, [r7, #4]
 8013dd4:	4608      	mov	r0, r1
 8013dd6:	4611      	mov	r1, r2
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4603      	mov	r3, r0
 8013ddc:	70fb      	strb	r3, [r7, #3]
 8013dde:	460b      	mov	r3, r1
 8013de0:	803b      	strh	r3, [r7, #0]
 8013de2:	4613      	mov	r3, r2
 8013de4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8013de6:	2300      	movs	r3, #0
 8013de8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013dea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	da0f      	bge.n	8013e12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013df2:	78fb      	ldrb	r3, [r7, #3]
 8013df4:	f003 020f 	and.w	r2, r3, #15
 8013df8:	4613      	mov	r3, r2
 8013dfa:	00db      	lsls	r3, r3, #3
 8013dfc:	1a9b      	subs	r3, r3, r2
 8013dfe:	009b      	lsls	r3, r3, #2
 8013e00:	3338      	adds	r3, #56	; 0x38
 8013e02:	687a      	ldr	r2, [r7, #4]
 8013e04:	4413      	add	r3, r2
 8013e06:	3304      	adds	r3, #4
 8013e08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013e0a:	68fb      	ldr	r3, [r7, #12]
 8013e0c:	2201      	movs	r2, #1
 8013e0e:	705a      	strb	r2, [r3, #1]
 8013e10:	e00f      	b.n	8013e32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013e12:	78fb      	ldrb	r3, [r7, #3]
 8013e14:	f003 020f 	and.w	r2, r3, #15
 8013e18:	4613      	mov	r3, r2
 8013e1a:	00db      	lsls	r3, r3, #3
 8013e1c:	1a9b      	subs	r3, r3, r2
 8013e1e:	009b      	lsls	r3, r3, #2
 8013e20:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013e24:	687a      	ldr	r2, [r7, #4]
 8013e26:	4413      	add	r3, r2
 8013e28:	3304      	adds	r3, #4
 8013e2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8013e32:	78fb      	ldrb	r3, [r7, #3]
 8013e34:	f003 030f 	and.w	r3, r3, #15
 8013e38:	b2da      	uxtb	r2, r3
 8013e3a:	68fb      	ldr	r3, [r7, #12]
 8013e3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8013e3e:	883a      	ldrh	r2, [r7, #0]
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	78ba      	ldrb	r2, [r7, #2]
 8013e48:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8013e4a:	68fb      	ldr	r3, [r7, #12]
 8013e4c:	785b      	ldrb	r3, [r3, #1]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d004      	beq.n	8013e5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	b29a      	uxth	r2, r3
 8013e58:	68fb      	ldr	r3, [r7, #12]
 8013e5a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8013e5c:	78bb      	ldrb	r3, [r7, #2]
 8013e5e:	2b02      	cmp	r3, #2
 8013e60:	d102      	bne.n	8013e68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	2200      	movs	r2, #0
 8013e66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013e6e:	2b01      	cmp	r3, #1
 8013e70:	d101      	bne.n	8013e76 <HAL_PCD_EP_Open+0xaa>
 8013e72:	2302      	movs	r3, #2
 8013e74:	e00e      	b.n	8013e94 <HAL_PCD_EP_Open+0xc8>
 8013e76:	687b      	ldr	r3, [r7, #4]
 8013e78:	2201      	movs	r2, #1
 8013e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	681b      	ldr	r3, [r3, #0]
 8013e82:	68f9      	ldr	r1, [r7, #12]
 8013e84:	4618      	mov	r0, r3
 8013e86:	f007 f833 	bl	801aef0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	2200      	movs	r2, #0
 8013e8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8013e92:	7afb      	ldrb	r3, [r7, #11]
}
 8013e94:	4618      	mov	r0, r3
 8013e96:	3710      	adds	r7, #16
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	bd80      	pop	{r7, pc}

08013e9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013e9c:	b580      	push	{r7, lr}
 8013e9e:	b084      	sub	sp, #16
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8013ea8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	da0f      	bge.n	8013ed0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8013eb0:	78fb      	ldrb	r3, [r7, #3]
 8013eb2:	f003 020f 	and.w	r2, r3, #15
 8013eb6:	4613      	mov	r3, r2
 8013eb8:	00db      	lsls	r3, r3, #3
 8013eba:	1a9b      	subs	r3, r3, r2
 8013ebc:	009b      	lsls	r3, r3, #2
 8013ebe:	3338      	adds	r3, #56	; 0x38
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	4413      	add	r3, r2
 8013ec4:	3304      	adds	r3, #4
 8013ec6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	2201      	movs	r2, #1
 8013ecc:	705a      	strb	r2, [r3, #1]
 8013ece:	e00f      	b.n	8013ef0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013ed0:	78fb      	ldrb	r3, [r7, #3]
 8013ed2:	f003 020f 	and.w	r2, r3, #15
 8013ed6:	4613      	mov	r3, r2
 8013ed8:	00db      	lsls	r3, r3, #3
 8013eda:	1a9b      	subs	r3, r3, r2
 8013edc:	009b      	lsls	r3, r3, #2
 8013ede:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013ee2:	687a      	ldr	r2, [r7, #4]
 8013ee4:	4413      	add	r3, r2
 8013ee6:	3304      	adds	r3, #4
 8013ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2200      	movs	r2, #0
 8013eee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8013ef0:	78fb      	ldrb	r3, [r7, #3]
 8013ef2:	f003 030f 	and.w	r3, r3, #15
 8013ef6:	b2da      	uxtb	r2, r3
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013f02:	2b01      	cmp	r3, #1
 8013f04:	d101      	bne.n	8013f0a <HAL_PCD_EP_Close+0x6e>
 8013f06:	2302      	movs	r3, #2
 8013f08:	e00e      	b.n	8013f28 <HAL_PCD_EP_Close+0x8c>
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2201      	movs	r2, #1
 8013f0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	68f9      	ldr	r1, [r7, #12]
 8013f18:	4618      	mov	r0, r3
 8013f1a:	f007 f871 	bl	801b000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8013f1e:	687b      	ldr	r3, [r7, #4]
 8013f20:	2200      	movs	r2, #0
 8013f22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8013f26:	2300      	movs	r3, #0
}
 8013f28:	4618      	mov	r0, r3
 8013f2a:	3710      	adds	r7, #16
 8013f2c:	46bd      	mov	sp, r7
 8013f2e:	bd80      	pop	{r7, pc}

08013f30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013f30:	b580      	push	{r7, lr}
 8013f32:	b086      	sub	sp, #24
 8013f34:	af00      	add	r7, sp, #0
 8013f36:	60f8      	str	r0, [r7, #12]
 8013f38:	607a      	str	r2, [r7, #4]
 8013f3a:	603b      	str	r3, [r7, #0]
 8013f3c:	460b      	mov	r3, r1
 8013f3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8013f40:	7afb      	ldrb	r3, [r7, #11]
 8013f42:	f003 020f 	and.w	r2, r3, #15
 8013f46:	4613      	mov	r3, r2
 8013f48:	00db      	lsls	r3, r3, #3
 8013f4a:	1a9b      	subs	r3, r3, r2
 8013f4c:	009b      	lsls	r3, r3, #2
 8013f4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8013f52:	68fa      	ldr	r2, [r7, #12]
 8013f54:	4413      	add	r3, r2
 8013f56:	3304      	adds	r3, #4
 8013f58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	687a      	ldr	r2, [r7, #4]
 8013f5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	683a      	ldr	r2, [r7, #0]
 8013f64:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8013f66:	697b      	ldr	r3, [r7, #20]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8013f6c:	697b      	ldr	r3, [r7, #20]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8013f72:	7afb      	ldrb	r3, [r7, #11]
 8013f74:	f003 030f 	and.w	r3, r3, #15
 8013f78:	b2da      	uxtb	r2, r3
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8013f7e:	68fb      	ldr	r3, [r7, #12]
 8013f80:	691b      	ldr	r3, [r3, #16]
 8013f82:	2b01      	cmp	r3, #1
 8013f84:	d102      	bne.n	8013f8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8013f86:	687a      	ldr	r2, [r7, #4]
 8013f88:	697b      	ldr	r3, [r7, #20]
 8013f8a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8013f8c:	7afb      	ldrb	r3, [r7, #11]
 8013f8e:	f003 030f 	and.w	r3, r3, #15
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d109      	bne.n	8013faa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	6818      	ldr	r0, [r3, #0]
 8013f9a:	68fb      	ldr	r3, [r7, #12]
 8013f9c:	691b      	ldr	r3, [r3, #16]
 8013f9e:	b2db      	uxtb	r3, r3
 8013fa0:	461a      	mov	r2, r3
 8013fa2:	6979      	ldr	r1, [r7, #20]
 8013fa4:	f007 fafc 	bl	801b5a0 <USB_EP0StartXfer>
 8013fa8:	e008      	b.n	8013fbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8013faa:	68fb      	ldr	r3, [r7, #12]
 8013fac:	6818      	ldr	r0, [r3, #0]
 8013fae:	68fb      	ldr	r3, [r7, #12]
 8013fb0:	691b      	ldr	r3, [r3, #16]
 8013fb2:	b2db      	uxtb	r3, r3
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	6979      	ldr	r1, [r7, #20]
 8013fb8:	f007 f8a6 	bl	801b108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8013fbc:	2300      	movs	r3, #0
}
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	3718      	adds	r7, #24
 8013fc2:	46bd      	mov	sp, r7
 8013fc4:	bd80      	pop	{r7, pc}

08013fc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8013fc6:	b480      	push	{r7}
 8013fc8:	b083      	sub	sp, #12
 8013fca:	af00      	add	r7, sp, #0
 8013fcc:	6078      	str	r0, [r7, #4]
 8013fce:	460b      	mov	r3, r1
 8013fd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8013fd2:	78fb      	ldrb	r3, [r7, #3]
 8013fd4:	f003 020f 	and.w	r2, r3, #15
 8013fd8:	6879      	ldr	r1, [r7, #4]
 8013fda:	4613      	mov	r3, r2
 8013fdc:	00db      	lsls	r3, r3, #3
 8013fde:	1a9b      	subs	r3, r3, r2
 8013fe0:	009b      	lsls	r3, r3, #2
 8013fe2:	440b      	add	r3, r1
 8013fe4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8013fe8:	681b      	ldr	r3, [r3, #0]
}
 8013fea:	4618      	mov	r0, r3
 8013fec:	370c      	adds	r7, #12
 8013fee:	46bd      	mov	sp, r7
 8013ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ff4:	4770      	bx	lr

08013ff6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8013ff6:	b580      	push	{r7, lr}
 8013ff8:	b086      	sub	sp, #24
 8013ffa:	af00      	add	r7, sp, #0
 8013ffc:	60f8      	str	r0, [r7, #12]
 8013ffe:	607a      	str	r2, [r7, #4]
 8014000:	603b      	str	r3, [r7, #0]
 8014002:	460b      	mov	r3, r1
 8014004:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014006:	7afb      	ldrb	r3, [r7, #11]
 8014008:	f003 020f 	and.w	r2, r3, #15
 801400c:	4613      	mov	r3, r2
 801400e:	00db      	lsls	r3, r3, #3
 8014010:	1a9b      	subs	r3, r3, r2
 8014012:	009b      	lsls	r3, r3, #2
 8014014:	3338      	adds	r3, #56	; 0x38
 8014016:	68fa      	ldr	r2, [r7, #12]
 8014018:	4413      	add	r3, r2
 801401a:	3304      	adds	r3, #4
 801401c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	687a      	ldr	r2, [r7, #4]
 8014022:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	683a      	ldr	r2, [r7, #0]
 8014028:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2200      	movs	r2, #0
 801402e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	2201      	movs	r2, #1
 8014034:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014036:	7afb      	ldrb	r3, [r7, #11]
 8014038:	f003 030f 	and.w	r3, r3, #15
 801403c:	b2da      	uxtb	r2, r3
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8014042:	68fb      	ldr	r3, [r7, #12]
 8014044:	691b      	ldr	r3, [r3, #16]
 8014046:	2b01      	cmp	r3, #1
 8014048:	d102      	bne.n	8014050 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 801404a:	687a      	ldr	r2, [r7, #4]
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014050:	7afb      	ldrb	r3, [r7, #11]
 8014052:	f003 030f 	and.w	r3, r3, #15
 8014056:	2b00      	cmp	r3, #0
 8014058:	d109      	bne.n	801406e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801405a:	68fb      	ldr	r3, [r7, #12]
 801405c:	6818      	ldr	r0, [r3, #0]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	691b      	ldr	r3, [r3, #16]
 8014062:	b2db      	uxtb	r3, r3
 8014064:	461a      	mov	r2, r3
 8014066:	6979      	ldr	r1, [r7, #20]
 8014068:	f007 fa9a 	bl	801b5a0 <USB_EP0StartXfer>
 801406c:	e008      	b.n	8014080 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	6818      	ldr	r0, [r3, #0]
 8014072:	68fb      	ldr	r3, [r7, #12]
 8014074:	691b      	ldr	r3, [r3, #16]
 8014076:	b2db      	uxtb	r3, r3
 8014078:	461a      	mov	r2, r3
 801407a:	6979      	ldr	r1, [r7, #20]
 801407c:	f007 f844 	bl	801b108 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3718      	adds	r7, #24
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}

0801408a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801408a:	b580      	push	{r7, lr}
 801408c:	b084      	sub	sp, #16
 801408e:	af00      	add	r7, sp, #0
 8014090:	6078      	str	r0, [r7, #4]
 8014092:	460b      	mov	r3, r1
 8014094:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8014096:	78fb      	ldrb	r3, [r7, #3]
 8014098:	f003 020f 	and.w	r2, r3, #15
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	685b      	ldr	r3, [r3, #4]
 80140a0:	429a      	cmp	r2, r3
 80140a2:	d901      	bls.n	80140a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80140a4:	2301      	movs	r3, #1
 80140a6:	e050      	b.n	801414a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80140a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	da0f      	bge.n	80140d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80140b0:	78fb      	ldrb	r3, [r7, #3]
 80140b2:	f003 020f 	and.w	r2, r3, #15
 80140b6:	4613      	mov	r3, r2
 80140b8:	00db      	lsls	r3, r3, #3
 80140ba:	1a9b      	subs	r3, r3, r2
 80140bc:	009b      	lsls	r3, r3, #2
 80140be:	3338      	adds	r3, #56	; 0x38
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	4413      	add	r3, r2
 80140c4:	3304      	adds	r3, #4
 80140c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80140c8:	68fb      	ldr	r3, [r7, #12]
 80140ca:	2201      	movs	r2, #1
 80140cc:	705a      	strb	r2, [r3, #1]
 80140ce:	e00d      	b.n	80140ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80140d0:	78fa      	ldrb	r2, [r7, #3]
 80140d2:	4613      	mov	r3, r2
 80140d4:	00db      	lsls	r3, r3, #3
 80140d6:	1a9b      	subs	r3, r3, r2
 80140d8:	009b      	lsls	r3, r3, #2
 80140da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80140de:	687a      	ldr	r2, [r7, #4]
 80140e0:	4413      	add	r3, r2
 80140e2:	3304      	adds	r3, #4
 80140e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80140e6:	68fb      	ldr	r3, [r7, #12]
 80140e8:	2200      	movs	r2, #0
 80140ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	2201      	movs	r2, #1
 80140f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80140f2:	78fb      	ldrb	r3, [r7, #3]
 80140f4:	f003 030f 	and.w	r3, r3, #15
 80140f8:	b2da      	uxtb	r2, r3
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014104:	2b01      	cmp	r3, #1
 8014106:	d101      	bne.n	801410c <HAL_PCD_EP_SetStall+0x82>
 8014108:	2302      	movs	r3, #2
 801410a:	e01e      	b.n	801414a <HAL_PCD_EP_SetStall+0xc0>
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2201      	movs	r2, #1
 8014110:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	68f9      	ldr	r1, [r7, #12]
 801411a:	4618      	mov	r0, r3
 801411c:	f007 fbf6 	bl	801b90c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014120:	78fb      	ldrb	r3, [r7, #3]
 8014122:	f003 030f 	and.w	r3, r3, #15
 8014126:	2b00      	cmp	r3, #0
 8014128:	d10a      	bne.n	8014140 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	6818      	ldr	r0, [r3, #0]
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	691b      	ldr	r3, [r3, #16]
 8014132:	b2d9      	uxtb	r1, r3
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801413a:	461a      	mov	r2, r3
 801413c:	f007 fdd6 	bl	801bcec <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2200      	movs	r2, #0
 8014144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8014148:	2300      	movs	r3, #0
}
 801414a:	4618      	mov	r0, r3
 801414c:	3710      	adds	r7, #16
 801414e:	46bd      	mov	sp, r7
 8014150:	bd80      	pop	{r7, pc}

08014152 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014152:	b580      	push	{r7, lr}
 8014154:	b084      	sub	sp, #16
 8014156:	af00      	add	r7, sp, #0
 8014158:	6078      	str	r0, [r7, #4]
 801415a:	460b      	mov	r3, r1
 801415c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801415e:	78fb      	ldrb	r3, [r7, #3]
 8014160:	f003 020f 	and.w	r2, r3, #15
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	685b      	ldr	r3, [r3, #4]
 8014168:	429a      	cmp	r2, r3
 801416a:	d901      	bls.n	8014170 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801416c:	2301      	movs	r3, #1
 801416e:	e042      	b.n	80141f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014170:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014174:	2b00      	cmp	r3, #0
 8014176:	da0f      	bge.n	8014198 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014178:	78fb      	ldrb	r3, [r7, #3]
 801417a:	f003 020f 	and.w	r2, r3, #15
 801417e:	4613      	mov	r3, r2
 8014180:	00db      	lsls	r3, r3, #3
 8014182:	1a9b      	subs	r3, r3, r2
 8014184:	009b      	lsls	r3, r3, #2
 8014186:	3338      	adds	r3, #56	; 0x38
 8014188:	687a      	ldr	r2, [r7, #4]
 801418a:	4413      	add	r3, r2
 801418c:	3304      	adds	r3, #4
 801418e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014190:	68fb      	ldr	r3, [r7, #12]
 8014192:	2201      	movs	r2, #1
 8014194:	705a      	strb	r2, [r3, #1]
 8014196:	e00f      	b.n	80141b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014198:	78fb      	ldrb	r3, [r7, #3]
 801419a:	f003 020f 	and.w	r2, r3, #15
 801419e:	4613      	mov	r3, r2
 80141a0:	00db      	lsls	r3, r3, #3
 80141a2:	1a9b      	subs	r3, r3, r2
 80141a4:	009b      	lsls	r3, r3, #2
 80141a6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80141aa:	687a      	ldr	r2, [r7, #4]
 80141ac:	4413      	add	r3, r2
 80141ae:	3304      	adds	r3, #4
 80141b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	2200      	movs	r2, #0
 80141b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	2200      	movs	r2, #0
 80141bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80141be:	78fb      	ldrb	r3, [r7, #3]
 80141c0:	f003 030f 	and.w	r3, r3, #15
 80141c4:	b2da      	uxtb	r2, r3
 80141c6:	68fb      	ldr	r3, [r7, #12]
 80141c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80141d0:	2b01      	cmp	r3, #1
 80141d2:	d101      	bne.n	80141d8 <HAL_PCD_EP_ClrStall+0x86>
 80141d4:	2302      	movs	r3, #2
 80141d6:	e00e      	b.n	80141f6 <HAL_PCD_EP_ClrStall+0xa4>
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	2201      	movs	r2, #1
 80141dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	68f9      	ldr	r1, [r7, #12]
 80141e6:	4618      	mov	r0, r3
 80141e8:	f007 fbfe 	bl	801b9e8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	2200      	movs	r2, #0
 80141f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80141f4:	2300      	movs	r3, #0
}
 80141f6:	4618      	mov	r0, r3
 80141f8:	3710      	adds	r7, #16
 80141fa:	46bd      	mov	sp, r7
 80141fc:	bd80      	pop	{r7, pc}

080141fe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80141fe:	b580      	push	{r7, lr}
 8014200:	b08a      	sub	sp, #40	; 0x28
 8014202:	af02      	add	r7, sp, #8
 8014204:	6078      	str	r0, [r7, #4]
 8014206:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	4613      	mov	r3, r2
 8014216:	00db      	lsls	r3, r3, #3
 8014218:	1a9b      	subs	r3, r3, r2
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	3338      	adds	r3, #56	; 0x38
 801421e:	687a      	ldr	r2, [r7, #4]
 8014220:	4413      	add	r3, r2
 8014222:	3304      	adds	r3, #4
 8014224:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	699a      	ldr	r2, [r3, #24]
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	695b      	ldr	r3, [r3, #20]
 801422e:	429a      	cmp	r2, r3
 8014230:	d901      	bls.n	8014236 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8014232:	2301      	movs	r3, #1
 8014234:	e06c      	b.n	8014310 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8014236:	68fb      	ldr	r3, [r7, #12]
 8014238:	695a      	ldr	r2, [r3, #20]
 801423a:	68fb      	ldr	r3, [r7, #12]
 801423c:	699b      	ldr	r3, [r3, #24]
 801423e:	1ad3      	subs	r3, r2, r3
 8014240:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	69fa      	ldr	r2, [r7, #28]
 8014248:	429a      	cmp	r2, r3
 801424a:	d902      	bls.n	8014252 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 801424c:	68fb      	ldr	r3, [r7, #12]
 801424e:	689b      	ldr	r3, [r3, #8]
 8014250:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8014252:	69fb      	ldr	r3, [r7, #28]
 8014254:	3303      	adds	r3, #3
 8014256:	089b      	lsrs	r3, r3, #2
 8014258:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801425a:	e02b      	b.n	80142b4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801425c:	68fb      	ldr	r3, [r7, #12]
 801425e:	695a      	ldr	r2, [r3, #20]
 8014260:	68fb      	ldr	r3, [r7, #12]
 8014262:	699b      	ldr	r3, [r3, #24]
 8014264:	1ad3      	subs	r3, r2, r3
 8014266:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	689b      	ldr	r3, [r3, #8]
 801426c:	69fa      	ldr	r2, [r7, #28]
 801426e:	429a      	cmp	r2, r3
 8014270:	d902      	bls.n	8014278 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8014272:	68fb      	ldr	r3, [r7, #12]
 8014274:	689b      	ldr	r3, [r3, #8]
 8014276:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8014278:	69fb      	ldr	r3, [r7, #28]
 801427a:	3303      	adds	r3, #3
 801427c:	089b      	lsrs	r3, r3, #2
 801427e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	68d9      	ldr	r1, [r3, #12]
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	b2da      	uxtb	r2, r3
 8014288:	69fb      	ldr	r3, [r7, #28]
 801428a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014290:	b2db      	uxtb	r3, r3
 8014292:	9300      	str	r3, [sp, #0]
 8014294:	4603      	mov	r3, r0
 8014296:	6978      	ldr	r0, [r7, #20]
 8014298:	f007 fada 	bl	801b850 <USB_WritePacket>

    ep->xfer_buff  += len;
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	68da      	ldr	r2, [r3, #12]
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	441a      	add	r2, r3
 80142a4:	68fb      	ldr	r3, [r7, #12]
 80142a6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80142a8:	68fb      	ldr	r3, [r7, #12]
 80142aa:	699a      	ldr	r2, [r3, #24]
 80142ac:	69fb      	ldr	r3, [r7, #28]
 80142ae:	441a      	add	r2, r3
 80142b0:	68fb      	ldr	r3, [r7, #12]
 80142b2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80142b4:	683b      	ldr	r3, [r7, #0]
 80142b6:	015a      	lsls	r2, r3, #5
 80142b8:	693b      	ldr	r3, [r7, #16]
 80142ba:	4413      	add	r3, r2
 80142bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142c0:	699b      	ldr	r3, [r3, #24]
 80142c2:	b29b      	uxth	r3, r3
 80142c4:	69ba      	ldr	r2, [r7, #24]
 80142c6:	429a      	cmp	r2, r3
 80142c8:	d809      	bhi.n	80142de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	699a      	ldr	r2, [r3, #24]
 80142ce:	68fb      	ldr	r3, [r7, #12]
 80142d0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80142d2:	429a      	cmp	r2, r3
 80142d4:	d203      	bcs.n	80142de <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	695b      	ldr	r3, [r3, #20]
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d1be      	bne.n	801425c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80142de:	68fb      	ldr	r3, [r7, #12]
 80142e0:	695a      	ldr	r2, [r3, #20]
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	699b      	ldr	r3, [r3, #24]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d811      	bhi.n	801430e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80142ea:	683b      	ldr	r3, [r7, #0]
 80142ec:	f003 030f 	and.w	r3, r3, #15
 80142f0:	2201      	movs	r2, #1
 80142f2:	fa02 f303 	lsl.w	r3, r2, r3
 80142f6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80142f8:	693b      	ldr	r3, [r7, #16]
 80142fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80142fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014300:	68bb      	ldr	r3, [r7, #8]
 8014302:	43db      	mvns	r3, r3
 8014304:	6939      	ldr	r1, [r7, #16]
 8014306:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801430a:	4013      	ands	r3, r2
 801430c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801430e:	2300      	movs	r3, #0
}
 8014310:	4618      	mov	r0, r3
 8014312:	3720      	adds	r7, #32
 8014314:	46bd      	mov	sp, r7
 8014316:	bd80      	pop	{r7, pc}

08014318 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014318:	b580      	push	{r7, lr}
 801431a:	b086      	sub	sp, #24
 801431c:	af00      	add	r7, sp, #0
 801431e:	6078      	str	r0, [r7, #4]
 8014320:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014328:	697b      	ldr	r3, [r7, #20]
 801432a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801432c:	697b      	ldr	r3, [r7, #20]
 801432e:	333c      	adds	r3, #60	; 0x3c
 8014330:	3304      	adds	r3, #4
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	015a      	lsls	r2, r3, #5
 801433a:	693b      	ldr	r3, [r7, #16]
 801433c:	4413      	add	r3, r2
 801433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014342:	689b      	ldr	r3, [r3, #8]
 8014344:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	2b01      	cmp	r3, #1
 801434c:	f040 80a0 	bne.w	8014490 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8014350:	68bb      	ldr	r3, [r7, #8]
 8014352:	f003 0308 	and.w	r3, r3, #8
 8014356:	2b00      	cmp	r3, #0
 8014358:	d015      	beq.n	8014386 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801435a:	68fb      	ldr	r3, [r7, #12]
 801435c:	4a72      	ldr	r2, [pc, #456]	; (8014528 <PCD_EP_OutXfrComplete_int+0x210>)
 801435e:	4293      	cmp	r3, r2
 8014360:	f240 80dd 	bls.w	801451e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014364:	68bb      	ldr	r3, [r7, #8]
 8014366:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801436a:	2b00      	cmp	r3, #0
 801436c:	f000 80d7 	beq.w	801451e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	015a      	lsls	r2, r3, #5
 8014374:	693b      	ldr	r3, [r7, #16]
 8014376:	4413      	add	r3, r2
 8014378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801437c:	461a      	mov	r2, r3
 801437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014382:	6093      	str	r3, [r2, #8]
 8014384:	e0cb      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	f003 0320 	and.w	r3, r3, #32
 801438c:	2b00      	cmp	r3, #0
 801438e:	d009      	beq.n	80143a4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	015a      	lsls	r2, r3, #5
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	4413      	add	r3, r2
 8014398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801439c:	461a      	mov	r2, r3
 801439e:	2320      	movs	r3, #32
 80143a0:	6093      	str	r3, [r2, #8]
 80143a2:	e0bc      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	f040 80b7 	bne.w	801451e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	4a5d      	ldr	r2, [pc, #372]	; (8014528 <PCD_EP_OutXfrComplete_int+0x210>)
 80143b4:	4293      	cmp	r3, r2
 80143b6:	d90f      	bls.n	80143d8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80143b8:	68bb      	ldr	r3, [r7, #8]
 80143ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80143be:	2b00      	cmp	r3, #0
 80143c0:	d00a      	beq.n	80143d8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	015a      	lsls	r2, r3, #5
 80143c6:	693b      	ldr	r3, [r7, #16]
 80143c8:	4413      	add	r3, r2
 80143ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ce:	461a      	mov	r2, r3
 80143d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80143d4:	6093      	str	r3, [r2, #8]
 80143d6:	e0a2      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80143d8:	6879      	ldr	r1, [r7, #4]
 80143da:	683a      	ldr	r2, [r7, #0]
 80143dc:	4613      	mov	r3, r2
 80143de:	00db      	lsls	r3, r3, #3
 80143e0:	1a9b      	subs	r3, r3, r2
 80143e2:	009b      	lsls	r3, r3, #2
 80143e4:	440b      	add	r3, r1
 80143e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80143ea:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80143ec:	683b      	ldr	r3, [r7, #0]
 80143ee:	0159      	lsls	r1, r3, #5
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	440b      	add	r3, r1
 80143f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143f8:	691b      	ldr	r3, [r3, #16]
 80143fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80143fe:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8014400:	6878      	ldr	r0, [r7, #4]
 8014402:	683a      	ldr	r2, [r7, #0]
 8014404:	4613      	mov	r3, r2
 8014406:	00db      	lsls	r3, r3, #3
 8014408:	1a9b      	subs	r3, r3, r2
 801440a:	009b      	lsls	r3, r3, #2
 801440c:	4403      	add	r3, r0
 801440e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014412:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8014414:	6879      	ldr	r1, [r7, #4]
 8014416:	683a      	ldr	r2, [r7, #0]
 8014418:	4613      	mov	r3, r2
 801441a:	00db      	lsls	r3, r3, #3
 801441c:	1a9b      	subs	r3, r3, r2
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	440b      	add	r3, r1
 8014422:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014426:	6819      	ldr	r1, [r3, #0]
 8014428:	6878      	ldr	r0, [r7, #4]
 801442a:	683a      	ldr	r2, [r7, #0]
 801442c:	4613      	mov	r3, r2
 801442e:	00db      	lsls	r3, r3, #3
 8014430:	1a9b      	subs	r3, r3, r2
 8014432:	009b      	lsls	r3, r3, #2
 8014434:	4403      	add	r3, r0
 8014436:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	4419      	add	r1, r3
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	683a      	ldr	r2, [r7, #0]
 8014442:	4613      	mov	r3, r2
 8014444:	00db      	lsls	r3, r3, #3
 8014446:	1a9b      	subs	r3, r3, r2
 8014448:	009b      	lsls	r3, r3, #2
 801444a:	4403      	add	r3, r0
 801444c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014450:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014452:	683b      	ldr	r3, [r7, #0]
 8014454:	2b00      	cmp	r3, #0
 8014456:	d114      	bne.n	8014482 <PCD_EP_OutXfrComplete_int+0x16a>
 8014458:	6879      	ldr	r1, [r7, #4]
 801445a:	683a      	ldr	r2, [r7, #0]
 801445c:	4613      	mov	r3, r2
 801445e:	00db      	lsls	r3, r3, #3
 8014460:	1a9b      	subs	r3, r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	440b      	add	r3, r1
 8014466:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d108      	bne.n	8014482 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	6818      	ldr	r0, [r3, #0]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801447a:	461a      	mov	r2, r3
 801447c:	2101      	movs	r1, #1
 801447e:	f007 fc35 	bl	801bcec <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014482:	683b      	ldr	r3, [r7, #0]
 8014484:	b2db      	uxtb	r3, r3
 8014486:	4619      	mov	r1, r3
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f009 faf7 	bl	801da7c <HAL_PCD_DataOutStageCallback>
 801448e:	e046      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8014490:	68fb      	ldr	r3, [r7, #12]
 8014492:	4a26      	ldr	r2, [pc, #152]	; (801452c <PCD_EP_OutXfrComplete_int+0x214>)
 8014494:	4293      	cmp	r3, r2
 8014496:	d124      	bne.n	80144e2 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d00a      	beq.n	80144b8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	015a      	lsls	r2, r3, #5
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	4413      	add	r3, r2
 80144aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144ae:	461a      	mov	r2, r3
 80144b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80144b4:	6093      	str	r3, [r2, #8]
 80144b6:	e032      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	f003 0320 	and.w	r3, r3, #32
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d008      	beq.n	80144d4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80144c2:	683b      	ldr	r3, [r7, #0]
 80144c4:	015a      	lsls	r2, r3, #5
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	4413      	add	r3, r2
 80144ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144ce:	461a      	mov	r2, r3
 80144d0:	2320      	movs	r3, #32
 80144d2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80144d4:	683b      	ldr	r3, [r7, #0]
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	4619      	mov	r1, r3
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f009 face 	bl	801da7c <HAL_PCD_DataOutStageCallback>
 80144e0:	e01d      	b.n	801451e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80144e2:	683b      	ldr	r3, [r7, #0]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d114      	bne.n	8014512 <PCD_EP_OutXfrComplete_int+0x1fa>
 80144e8:	6879      	ldr	r1, [r7, #4]
 80144ea:	683a      	ldr	r2, [r7, #0]
 80144ec:	4613      	mov	r3, r2
 80144ee:	00db      	lsls	r3, r3, #3
 80144f0:	1a9b      	subs	r3, r3, r2
 80144f2:	009b      	lsls	r3, r3, #2
 80144f4:	440b      	add	r3, r1
 80144f6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80144fa:	681b      	ldr	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d108      	bne.n	8014512 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	6818      	ldr	r0, [r3, #0]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801450a:	461a      	mov	r2, r3
 801450c:	2100      	movs	r1, #0
 801450e:	f007 fbed 	bl	801bcec <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014512:	683b      	ldr	r3, [r7, #0]
 8014514:	b2db      	uxtb	r3, r3
 8014516:	4619      	mov	r1, r3
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f009 faaf 	bl	801da7c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 801451e:	2300      	movs	r3, #0
}
 8014520:	4618      	mov	r0, r3
 8014522:	3718      	adds	r7, #24
 8014524:	46bd      	mov	sp, r7
 8014526:	bd80      	pop	{r7, pc}
 8014528:	4f54300a 	.word	0x4f54300a
 801452c:	4f54310a 	.word	0x4f54310a

08014530 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b086      	sub	sp, #24
 8014534:	af00      	add	r7, sp, #0
 8014536:	6078      	str	r0, [r7, #4]
 8014538:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014540:	697b      	ldr	r3, [r7, #20]
 8014542:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	333c      	adds	r3, #60	; 0x3c
 8014548:	3304      	adds	r3, #4
 801454a:	681b      	ldr	r3, [r3, #0]
 801454c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 801454e:	683b      	ldr	r3, [r7, #0]
 8014550:	015a      	lsls	r2, r3, #5
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	4413      	add	r3, r2
 8014556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801455a:	689b      	ldr	r3, [r3, #8]
 801455c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	4a15      	ldr	r2, [pc, #84]	; (80145b8 <PCD_EP_OutSetupPacket_int+0x88>)
 8014562:	4293      	cmp	r3, r2
 8014564:	d90e      	bls.n	8014584 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801456c:	2b00      	cmp	r3, #0
 801456e:	d009      	beq.n	8014584 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014570:	683b      	ldr	r3, [r7, #0]
 8014572:	015a      	lsls	r2, r3, #5
 8014574:	693b      	ldr	r3, [r7, #16]
 8014576:	4413      	add	r3, r2
 8014578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801457c:	461a      	mov	r2, r3
 801457e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014582:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8014584:	6878      	ldr	r0, [r7, #4]
 8014586:	f009 fa67 	bl	801da58 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	4a0a      	ldr	r2, [pc, #40]	; (80145b8 <PCD_EP_OutSetupPacket_int+0x88>)
 801458e:	4293      	cmp	r3, r2
 8014590:	d90c      	bls.n	80145ac <PCD_EP_OutSetupPacket_int+0x7c>
 8014592:	687b      	ldr	r3, [r7, #4]
 8014594:	691b      	ldr	r3, [r3, #16]
 8014596:	2b01      	cmp	r3, #1
 8014598:	d108      	bne.n	80145ac <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6818      	ldr	r0, [r3, #0]
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80145a4:	461a      	mov	r2, r3
 80145a6:	2101      	movs	r1, #1
 80145a8:	f007 fba0 	bl	801bcec <USB_EP0_OutStart>
  }

  return HAL_OK;
 80145ac:	2300      	movs	r3, #0
}
 80145ae:	4618      	mov	r0, r3
 80145b0:	3718      	adds	r7, #24
 80145b2:	46bd      	mov	sp, r7
 80145b4:	bd80      	pop	{r7, pc}
 80145b6:	bf00      	nop
 80145b8:	4f54300a 	.word	0x4f54300a

080145bc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80145bc:	b480      	push	{r7}
 80145be:	b085      	sub	sp, #20
 80145c0:	af00      	add	r7, sp, #0
 80145c2:	6078      	str	r0, [r7, #4]
 80145c4:	460b      	mov	r3, r1
 80145c6:	70fb      	strb	r3, [r7, #3]
 80145c8:	4613      	mov	r3, r2
 80145ca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145d2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80145d4:	78fb      	ldrb	r3, [r7, #3]
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d107      	bne.n	80145ea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80145da:	883b      	ldrh	r3, [r7, #0]
 80145dc:	0419      	lsls	r1, r3, #16
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	68ba      	ldr	r2, [r7, #8]
 80145e4:	430a      	orrs	r2, r1
 80145e6:	629a      	str	r2, [r3, #40]	; 0x28
 80145e8:	e028      	b.n	801463c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80145ea:	687b      	ldr	r3, [r7, #4]
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80145f0:	0c1b      	lsrs	r3, r3, #16
 80145f2:	68ba      	ldr	r2, [r7, #8]
 80145f4:	4413      	add	r3, r2
 80145f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80145f8:	2300      	movs	r3, #0
 80145fa:	73fb      	strb	r3, [r7, #15]
 80145fc:	e00d      	b.n	801461a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80145fe:	687b      	ldr	r3, [r7, #4]
 8014600:	681a      	ldr	r2, [r3, #0]
 8014602:	7bfb      	ldrb	r3, [r7, #15]
 8014604:	3340      	adds	r3, #64	; 0x40
 8014606:	009b      	lsls	r3, r3, #2
 8014608:	4413      	add	r3, r2
 801460a:	685b      	ldr	r3, [r3, #4]
 801460c:	0c1b      	lsrs	r3, r3, #16
 801460e:	68ba      	ldr	r2, [r7, #8]
 8014610:	4413      	add	r3, r2
 8014612:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8014614:	7bfb      	ldrb	r3, [r7, #15]
 8014616:	3301      	adds	r3, #1
 8014618:	73fb      	strb	r3, [r7, #15]
 801461a:	7bfa      	ldrb	r2, [r7, #15]
 801461c:	78fb      	ldrb	r3, [r7, #3]
 801461e:	3b01      	subs	r3, #1
 8014620:	429a      	cmp	r2, r3
 8014622:	d3ec      	bcc.n	80145fe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8014624:	883b      	ldrh	r3, [r7, #0]
 8014626:	0418      	lsls	r0, r3, #16
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	6819      	ldr	r1, [r3, #0]
 801462c:	78fb      	ldrb	r3, [r7, #3]
 801462e:	3b01      	subs	r3, #1
 8014630:	68ba      	ldr	r2, [r7, #8]
 8014632:	4302      	orrs	r2, r0
 8014634:	3340      	adds	r3, #64	; 0x40
 8014636:	009b      	lsls	r3, r3, #2
 8014638:	440b      	add	r3, r1
 801463a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 801463c:	2300      	movs	r3, #0
}
 801463e:	4618      	mov	r0, r3
 8014640:	3714      	adds	r7, #20
 8014642:	46bd      	mov	sp, r7
 8014644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014648:	4770      	bx	lr

0801464a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 801464a:	b480      	push	{r7}
 801464c:	b083      	sub	sp, #12
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
 8014652:	460b      	mov	r3, r1
 8014654:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	887a      	ldrh	r2, [r7, #2]
 801465c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801465e:	2300      	movs	r3, #0
}
 8014660:	4618      	mov	r0, r3
 8014662:	370c      	adds	r7, #12
 8014664:	46bd      	mov	sp, r7
 8014666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801466a:	4770      	bx	lr

0801466c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801466c:	b480      	push	{r7}
 801466e:	b085      	sub	sp, #20
 8014670:	af00      	add	r7, sp, #0
 8014672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2201      	movs	r2, #1
 801467e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	2200      	movs	r2, #0
 8014686:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	699b      	ldr	r3, [r3, #24]
 801468e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014692:	68fb      	ldr	r3, [r7, #12]
 8014694:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801469a:	4b05      	ldr	r3, [pc, #20]	; (80146b0 <HAL_PCDEx_ActivateLPM+0x44>)
 801469c:	4313      	orrs	r3, r2
 801469e:	68fa      	ldr	r2, [r7, #12]
 80146a0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80146a2:	2300      	movs	r3, #0
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3714      	adds	r7, #20
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr
 80146b0:	10000003 	.word	0x10000003

080146b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80146b4:	b480      	push	{r7}
 80146b6:	b083      	sub	sp, #12
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	460b      	mov	r3, r1
 80146be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b084      	sub	sp, #16
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80146d4:	4b19      	ldr	r3, [pc, #100]	; (801473c <HAL_PWREx_ConfigSupply+0x70>)
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	f003 0304 	and.w	r3, r3, #4
 80146dc:	2b04      	cmp	r3, #4
 80146de:	d00a      	beq.n	80146f6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80146e0:	4b16      	ldr	r3, [pc, #88]	; (801473c <HAL_PWREx_ConfigSupply+0x70>)
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	f003 0307 	and.w	r3, r3, #7
 80146e8:	687a      	ldr	r2, [r7, #4]
 80146ea:	429a      	cmp	r2, r3
 80146ec:	d001      	beq.n	80146f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80146ee:	2301      	movs	r3, #1
 80146f0:	e01f      	b.n	8014732 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80146f2:	2300      	movs	r3, #0
 80146f4:	e01d      	b.n	8014732 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80146f6:	4b11      	ldr	r3, [pc, #68]	; (801473c <HAL_PWREx_ConfigSupply+0x70>)
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	f023 0207 	bic.w	r2, r3, #7
 80146fe:	490f      	ldr	r1, [pc, #60]	; (801473c <HAL_PWREx_ConfigSupply+0x70>)
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	4313      	orrs	r3, r2
 8014704:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8014706:	f7fe f87d 	bl	8012804 <HAL_GetTick>
 801470a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801470c:	e009      	b.n	8014722 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801470e:	f7fe f879 	bl	8012804 <HAL_GetTick>
 8014712:	4602      	mov	r2, r0
 8014714:	68fb      	ldr	r3, [r7, #12]
 8014716:	1ad3      	subs	r3, r2, r3
 8014718:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801471c:	d901      	bls.n	8014722 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801471e:	2301      	movs	r3, #1
 8014720:	e007      	b.n	8014732 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8014722:	4b06      	ldr	r3, [pc, #24]	; (801473c <HAL_PWREx_ConfigSupply+0x70>)
 8014724:	685b      	ldr	r3, [r3, #4]
 8014726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801472a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801472e:	d1ee      	bne.n	801470e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8014730:	2300      	movs	r3, #0
}
 8014732:	4618      	mov	r0, r3
 8014734:	3710      	adds	r7, #16
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
 801473a:	bf00      	nop
 801473c:	58024800 	.word	0x58024800

08014740 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8014740:	b480      	push	{r7}
 8014742:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8014744:	4b05      	ldr	r3, [pc, #20]	; (801475c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8014746:	68db      	ldr	r3, [r3, #12]
 8014748:	4a04      	ldr	r2, [pc, #16]	; (801475c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 801474a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801474e:	60d3      	str	r3, [r2, #12]
}
 8014750:	bf00      	nop
 8014752:	46bd      	mov	sp, r7
 8014754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014758:	4770      	bx	lr
 801475a:	bf00      	nop
 801475c:	58024800 	.word	0x58024800

08014760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b08c      	sub	sp, #48	; 0x30
 8014764:	af00      	add	r7, sp, #0
 8014766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d101      	bne.n	8014772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801476e:	2301      	movs	r3, #1
 8014770:	e3c4      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	681b      	ldr	r3, [r3, #0]
 8014776:	f003 0301 	and.w	r3, r3, #1
 801477a:	2b00      	cmp	r3, #0
 801477c:	f000 8087 	beq.w	801488e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014780:	4ba2      	ldr	r3, [pc, #648]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014782:	691b      	ldr	r3, [r3, #16]
 8014784:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014788:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801478a:	4ba0      	ldr	r3, [pc, #640]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801478e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014792:	2b10      	cmp	r3, #16
 8014794:	d007      	beq.n	80147a6 <HAL_RCC_OscConfig+0x46>
 8014796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014798:	2b18      	cmp	r3, #24
 801479a:	d110      	bne.n	80147be <HAL_RCC_OscConfig+0x5e>
 801479c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479e:	f003 0303 	and.w	r3, r3, #3
 80147a2:	2b02      	cmp	r3, #2
 80147a4:	d10b      	bne.n	80147be <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80147a6:	4b99      	ldr	r3, [pc, #612]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80147ae:	2b00      	cmp	r3, #0
 80147b0:	d06c      	beq.n	801488c <HAL_RCC_OscConfig+0x12c>
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	685b      	ldr	r3, [r3, #4]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d168      	bne.n	801488c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80147ba:	2301      	movs	r3, #1
 80147bc:	e39e      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	685b      	ldr	r3, [r3, #4]
 80147c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80147c6:	d106      	bne.n	80147d6 <HAL_RCC_OscConfig+0x76>
 80147c8:	4b90      	ldr	r3, [pc, #576]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a8f      	ldr	r2, [pc, #572]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80147d2:	6013      	str	r3, [r2, #0]
 80147d4:	e02e      	b.n	8014834 <HAL_RCC_OscConfig+0xd4>
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	685b      	ldr	r3, [r3, #4]
 80147da:	2b00      	cmp	r3, #0
 80147dc:	d10c      	bne.n	80147f8 <HAL_RCC_OscConfig+0x98>
 80147de:	4b8b      	ldr	r3, [pc, #556]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	4a8a      	ldr	r2, [pc, #552]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80147e8:	6013      	str	r3, [r2, #0]
 80147ea:	4b88      	ldr	r3, [pc, #544]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	4a87      	ldr	r2, [pc, #540]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80147f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80147f4:	6013      	str	r3, [r2, #0]
 80147f6:	e01d      	b.n	8014834 <HAL_RCC_OscConfig+0xd4>
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	685b      	ldr	r3, [r3, #4]
 80147fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014800:	d10c      	bne.n	801481c <HAL_RCC_OscConfig+0xbc>
 8014802:	4b82      	ldr	r3, [pc, #520]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	4a81      	ldr	r2, [pc, #516]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014808:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801480c:	6013      	str	r3, [r2, #0]
 801480e:	4b7f      	ldr	r3, [pc, #508]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4a7e      	ldr	r2, [pc, #504]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014814:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014818:	6013      	str	r3, [r2, #0]
 801481a:	e00b      	b.n	8014834 <HAL_RCC_OscConfig+0xd4>
 801481c:	4b7b      	ldr	r3, [pc, #492]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	4a7a      	ldr	r2, [pc, #488]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014826:	6013      	str	r3, [r2, #0]
 8014828:	4b78      	ldr	r3, [pc, #480]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801482a:	681b      	ldr	r3, [r3, #0]
 801482c:	4a77      	ldr	r2, [pc, #476]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801482e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014832:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	685b      	ldr	r3, [r3, #4]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d013      	beq.n	8014864 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801483c:	f7fd ffe2 	bl	8012804 <HAL_GetTick>
 8014840:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014842:	e008      	b.n	8014856 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014844:	f7fd ffde 	bl	8012804 <HAL_GetTick>
 8014848:	4602      	mov	r2, r0
 801484a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484c:	1ad3      	subs	r3, r2, r3
 801484e:	2b64      	cmp	r3, #100	; 0x64
 8014850:	d901      	bls.n	8014856 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8014852:	2303      	movs	r3, #3
 8014854:	e352      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014856:	4b6d      	ldr	r3, [pc, #436]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801485e:	2b00      	cmp	r3, #0
 8014860:	d0f0      	beq.n	8014844 <HAL_RCC_OscConfig+0xe4>
 8014862:	e014      	b.n	801488e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014864:	f7fd ffce 	bl	8012804 <HAL_GetTick>
 8014868:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801486a:	e008      	b.n	801487e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 801486c:	f7fd ffca 	bl	8012804 <HAL_GetTick>
 8014870:	4602      	mov	r2, r0
 8014872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014874:	1ad3      	subs	r3, r2, r3
 8014876:	2b64      	cmp	r3, #100	; 0x64
 8014878:	d901      	bls.n	801487e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801487a:	2303      	movs	r3, #3
 801487c:	e33e      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801487e:	4b63      	ldr	r3, [pc, #396]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014886:	2b00      	cmp	r3, #0
 8014888:	d1f0      	bne.n	801486c <HAL_RCC_OscConfig+0x10c>
 801488a:	e000      	b.n	801488e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801488c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	f003 0302 	and.w	r3, r3, #2
 8014896:	2b00      	cmp	r3, #0
 8014898:	f000 8092 	beq.w	80149c0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801489c:	4b5b      	ldr	r3, [pc, #364]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801489e:	691b      	ldr	r3, [r3, #16]
 80148a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80148a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80148a6:	4b59      	ldr	r3, [pc, #356]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80148a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148aa:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80148ac:	6a3b      	ldr	r3, [r7, #32]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d007      	beq.n	80148c2 <HAL_RCC_OscConfig+0x162>
 80148b2:	6a3b      	ldr	r3, [r7, #32]
 80148b4:	2b18      	cmp	r3, #24
 80148b6:	d12d      	bne.n	8014914 <HAL_RCC_OscConfig+0x1b4>
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	f003 0303 	and.w	r3, r3, #3
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d128      	bne.n	8014914 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80148c2:	4b52      	ldr	r3, [pc, #328]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	f003 0304 	and.w	r3, r3, #4
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	d005      	beq.n	80148da <HAL_RCC_OscConfig+0x17a>
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d101      	bne.n	80148da <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80148d6:	2301      	movs	r3, #1
 80148d8:	e310      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80148da:	f7fd ffc1 	bl	8012860 <HAL_GetREVID>
 80148de:	4602      	mov	r2, r0
 80148e0:	f241 0303 	movw	r3, #4099	; 0x1003
 80148e4:	429a      	cmp	r2, r3
 80148e6:	d80a      	bhi.n	80148fe <HAL_RCC_OscConfig+0x19e>
 80148e8:	4b48      	ldr	r3, [pc, #288]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	691b      	ldr	r3, [r3, #16]
 80148f4:	031b      	lsls	r3, r3, #12
 80148f6:	4945      	ldr	r1, [pc, #276]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80148f8:	4313      	orrs	r3, r2
 80148fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80148fc:	e060      	b.n	80149c0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80148fe:	4b43      	ldr	r3, [pc, #268]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014900:	685b      	ldr	r3, [r3, #4]
 8014902:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	691b      	ldr	r3, [r3, #16]
 801490a:	061b      	lsls	r3, r3, #24
 801490c:	493f      	ldr	r1, [pc, #252]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801490e:	4313      	orrs	r3, r2
 8014910:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014912:	e055      	b.n	80149c0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014914:	687b      	ldr	r3, [r7, #4]
 8014916:	68db      	ldr	r3, [r3, #12]
 8014918:	2b00      	cmp	r3, #0
 801491a:	d038      	beq.n	801498e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801491c:	4b3b      	ldr	r3, [pc, #236]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	f023 0219 	bic.w	r2, r3, #25
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	4938      	ldr	r1, [pc, #224]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801492a:	4313      	orrs	r3, r2
 801492c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801492e:	f7fd ff69 	bl	8012804 <HAL_GetTick>
 8014932:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014934:	e008      	b.n	8014948 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014936:	f7fd ff65 	bl	8012804 <HAL_GetTick>
 801493a:	4602      	mov	r2, r0
 801493c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801493e:	1ad3      	subs	r3, r2, r3
 8014940:	2b02      	cmp	r3, #2
 8014942:	d901      	bls.n	8014948 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8014944:	2303      	movs	r3, #3
 8014946:	e2d9      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014948:	4b30      	ldr	r3, [pc, #192]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	f003 0304 	and.w	r3, r3, #4
 8014950:	2b00      	cmp	r3, #0
 8014952:	d0f0      	beq.n	8014936 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014954:	f7fd ff84 	bl	8012860 <HAL_GetREVID>
 8014958:	4602      	mov	r2, r0
 801495a:	f241 0303 	movw	r3, #4099	; 0x1003
 801495e:	429a      	cmp	r2, r3
 8014960:	d80a      	bhi.n	8014978 <HAL_RCC_OscConfig+0x218>
 8014962:	4b2a      	ldr	r3, [pc, #168]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014964:	685b      	ldr	r3, [r3, #4]
 8014966:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	691b      	ldr	r3, [r3, #16]
 801496e:	031b      	lsls	r3, r3, #12
 8014970:	4926      	ldr	r1, [pc, #152]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014972:	4313      	orrs	r3, r2
 8014974:	604b      	str	r3, [r1, #4]
 8014976:	e023      	b.n	80149c0 <HAL_RCC_OscConfig+0x260>
 8014978:	4b24      	ldr	r3, [pc, #144]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 801497a:	685b      	ldr	r3, [r3, #4]
 801497c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	691b      	ldr	r3, [r3, #16]
 8014984:	061b      	lsls	r3, r3, #24
 8014986:	4921      	ldr	r1, [pc, #132]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014988:	4313      	orrs	r3, r2
 801498a:	604b      	str	r3, [r1, #4]
 801498c:	e018      	b.n	80149c0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801498e:	4b1f      	ldr	r3, [pc, #124]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4a1e      	ldr	r2, [pc, #120]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 8014994:	f023 0301 	bic.w	r3, r3, #1
 8014998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801499a:	f7fd ff33 	bl	8012804 <HAL_GetTick>
 801499e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80149a0:	e008      	b.n	80149b4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80149a2:	f7fd ff2f 	bl	8012804 <HAL_GetTick>
 80149a6:	4602      	mov	r2, r0
 80149a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80149aa:	1ad3      	subs	r3, r2, r3
 80149ac:	2b02      	cmp	r3, #2
 80149ae:	d901      	bls.n	80149b4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80149b0:	2303      	movs	r3, #3
 80149b2:	e2a3      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80149b4:	4b15      	ldr	r3, [pc, #84]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	f003 0304 	and.w	r3, r3, #4
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d1f0      	bne.n	80149a2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	f003 0310 	and.w	r3, r3, #16
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	f000 8091 	beq.w	8014af0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80149ce:	4b0f      	ldr	r3, [pc, #60]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80149d0:	691b      	ldr	r3, [r3, #16]
 80149d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80149d6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80149d8:	4b0c      	ldr	r3, [pc, #48]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80149da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149dc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80149de:	69bb      	ldr	r3, [r7, #24]
 80149e0:	2b08      	cmp	r3, #8
 80149e2:	d007      	beq.n	80149f4 <HAL_RCC_OscConfig+0x294>
 80149e4:	69bb      	ldr	r3, [r7, #24]
 80149e6:	2b18      	cmp	r3, #24
 80149e8:	d12f      	bne.n	8014a4a <HAL_RCC_OscConfig+0x2ea>
 80149ea:	697b      	ldr	r3, [r7, #20]
 80149ec:	f003 0303 	and.w	r3, r3, #3
 80149f0:	2b01      	cmp	r3, #1
 80149f2:	d12a      	bne.n	8014a4a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <HAL_RCC_OscConfig+0x2ac>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d007      	beq.n	8014a10 <HAL_RCC_OscConfig+0x2b0>
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	69db      	ldr	r3, [r3, #28]
 8014a04:	2b80      	cmp	r3, #128	; 0x80
 8014a06:	d003      	beq.n	8014a10 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8014a08:	2301      	movs	r3, #1
 8014a0a:	e277      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
 8014a0c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014a10:	f7fd ff26 	bl	8012860 <HAL_GetREVID>
 8014a14:	4602      	mov	r2, r0
 8014a16:	f241 0303 	movw	r3, #4099	; 0x1003
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d80a      	bhi.n	8014a34 <HAL_RCC_OscConfig+0x2d4>
 8014a1e:	4ba2      	ldr	r3, [pc, #648]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	6a1b      	ldr	r3, [r3, #32]
 8014a2a:	069b      	lsls	r3, r3, #26
 8014a2c:	499e      	ldr	r1, [pc, #632]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a2e:	4313      	orrs	r3, r2
 8014a30:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014a32:	e05d      	b.n	8014af0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014a34:	4b9c      	ldr	r3, [pc, #624]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a36:	68db      	ldr	r3, [r3, #12]
 8014a38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	6a1b      	ldr	r3, [r3, #32]
 8014a40:	061b      	lsls	r3, r3, #24
 8014a42:	4999      	ldr	r1, [pc, #612]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a44:	4313      	orrs	r3, r2
 8014a46:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014a48:	e052      	b.n	8014af0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	69db      	ldr	r3, [r3, #28]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d035      	beq.n	8014abe <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014a52:	4b95      	ldr	r3, [pc, #596]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	4a94      	ldr	r2, [pc, #592]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014a5e:	f7fd fed1 	bl	8012804 <HAL_GetTick>
 8014a62:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014a64:	e008      	b.n	8014a78 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014a66:	f7fd fecd 	bl	8012804 <HAL_GetTick>
 8014a6a:	4602      	mov	r2, r0
 8014a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014a6e:	1ad3      	subs	r3, r2, r3
 8014a70:	2b02      	cmp	r3, #2
 8014a72:	d901      	bls.n	8014a78 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8014a74:	2303      	movs	r3, #3
 8014a76:	e241      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014a78:	4b8b      	ldr	r3, [pc, #556]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d0f0      	beq.n	8014a66 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014a84:	f7fd feec 	bl	8012860 <HAL_GetREVID>
 8014a88:	4602      	mov	r2, r0
 8014a8a:	f241 0303 	movw	r3, #4099	; 0x1003
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d80a      	bhi.n	8014aa8 <HAL_RCC_OscConfig+0x348>
 8014a92:	4b85      	ldr	r3, [pc, #532]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6a1b      	ldr	r3, [r3, #32]
 8014a9e:	069b      	lsls	r3, r3, #26
 8014aa0:	4981      	ldr	r1, [pc, #516]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014aa2:	4313      	orrs	r3, r2
 8014aa4:	604b      	str	r3, [r1, #4]
 8014aa6:	e023      	b.n	8014af0 <HAL_RCC_OscConfig+0x390>
 8014aa8:	4b7f      	ldr	r3, [pc, #508]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	6a1b      	ldr	r3, [r3, #32]
 8014ab4:	061b      	lsls	r3, r3, #24
 8014ab6:	497c      	ldr	r1, [pc, #496]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014ab8:	4313      	orrs	r3, r2
 8014aba:	60cb      	str	r3, [r1, #12]
 8014abc:	e018      	b.n	8014af0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014abe:	4b7a      	ldr	r3, [pc, #488]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a79      	ldr	r2, [pc, #484]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014ac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014aca:	f7fd fe9b 	bl	8012804 <HAL_GetTick>
 8014ace:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014ad0:	e008      	b.n	8014ae4 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014ad2:	f7fd fe97 	bl	8012804 <HAL_GetTick>
 8014ad6:	4602      	mov	r2, r0
 8014ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ada:	1ad3      	subs	r3, r2, r3
 8014adc:	2b02      	cmp	r3, #2
 8014ade:	d901      	bls.n	8014ae4 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8014ae0:	2303      	movs	r3, #3
 8014ae2:	e20b      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014ae4:	4b70      	ldr	r3, [pc, #448]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d1f0      	bne.n	8014ad2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	f003 0308 	and.w	r3, r3, #8
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d036      	beq.n	8014b6a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	695b      	ldr	r3, [r3, #20]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d019      	beq.n	8014b38 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014b04:	4b68      	ldr	r3, [pc, #416]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b08:	4a67      	ldr	r2, [pc, #412]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b0a:	f043 0301 	orr.w	r3, r3, #1
 8014b0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b10:	f7fd fe78 	bl	8012804 <HAL_GetTick>
 8014b14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014b16:	e008      	b.n	8014b2a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014b18:	f7fd fe74 	bl	8012804 <HAL_GetTick>
 8014b1c:	4602      	mov	r2, r0
 8014b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b20:	1ad3      	subs	r3, r2, r3
 8014b22:	2b02      	cmp	r3, #2
 8014b24:	d901      	bls.n	8014b2a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8014b26:	2303      	movs	r3, #3
 8014b28:	e1e8      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014b2a:	4b5f      	ldr	r3, [pc, #380]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b2e:	f003 0302 	and.w	r3, r3, #2
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d0f0      	beq.n	8014b18 <HAL_RCC_OscConfig+0x3b8>
 8014b36:	e018      	b.n	8014b6a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014b38:	4b5b      	ldr	r3, [pc, #364]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b3c:	4a5a      	ldr	r2, [pc, #360]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b3e:	f023 0301 	bic.w	r3, r3, #1
 8014b42:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014b44:	f7fd fe5e 	bl	8012804 <HAL_GetTick>
 8014b48:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014b4a:	e008      	b.n	8014b5e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014b4c:	f7fd fe5a 	bl	8012804 <HAL_GetTick>
 8014b50:	4602      	mov	r2, r0
 8014b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	2b02      	cmp	r3, #2
 8014b58:	d901      	bls.n	8014b5e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8014b5a:	2303      	movs	r3, #3
 8014b5c:	e1ce      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014b5e:	4b52      	ldr	r3, [pc, #328]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b62:	f003 0302 	and.w	r3, r3, #2
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d1f0      	bne.n	8014b4c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	f003 0320 	and.w	r3, r3, #32
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	d036      	beq.n	8014be4 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	699b      	ldr	r3, [r3, #24]
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d019      	beq.n	8014bb2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014b7e:	4b4a      	ldr	r3, [pc, #296]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b80:	681b      	ldr	r3, [r3, #0]
 8014b82:	4a49      	ldr	r2, [pc, #292]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014b84:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014b88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014b8a:	f7fd fe3b 	bl	8012804 <HAL_GetTick>
 8014b8e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014b90:	e008      	b.n	8014ba4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014b92:	f7fd fe37 	bl	8012804 <HAL_GetTick>
 8014b96:	4602      	mov	r2, r0
 8014b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b9a:	1ad3      	subs	r3, r2, r3
 8014b9c:	2b02      	cmp	r3, #2
 8014b9e:	d901      	bls.n	8014ba4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8014ba0:	2303      	movs	r3, #3
 8014ba2:	e1ab      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014ba4:	4b40      	ldr	r3, [pc, #256]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d0f0      	beq.n	8014b92 <HAL_RCC_OscConfig+0x432>
 8014bb0:	e018      	b.n	8014be4 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014bb2:	4b3d      	ldr	r3, [pc, #244]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	4a3c      	ldr	r2, [pc, #240]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014bbc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014bbe:	f7fd fe21 	bl	8012804 <HAL_GetTick>
 8014bc2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014bc4:	e008      	b.n	8014bd8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014bc6:	f7fd fe1d 	bl	8012804 <HAL_GetTick>
 8014bca:	4602      	mov	r2, r0
 8014bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bce:	1ad3      	subs	r3, r2, r3
 8014bd0:	2b02      	cmp	r3, #2
 8014bd2:	d901      	bls.n	8014bd8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8014bd4:	2303      	movs	r3, #3
 8014bd6:	e191      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014bd8:	4b33      	ldr	r3, [pc, #204]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1f0      	bne.n	8014bc6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	f003 0304 	and.w	r3, r3, #4
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f000 8086 	beq.w	8014cfe <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014bf2:	4b2e      	ldr	r3, [pc, #184]	; (8014cac <HAL_RCC_OscConfig+0x54c>)
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	4a2d      	ldr	r2, [pc, #180]	; (8014cac <HAL_RCC_OscConfig+0x54c>)
 8014bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014bfc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014bfe:	f7fd fe01 	bl	8012804 <HAL_GetTick>
 8014c02:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014c04:	e008      	b.n	8014c18 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8014c06:	f7fd fdfd 	bl	8012804 <HAL_GetTick>
 8014c0a:	4602      	mov	r2, r0
 8014c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	2b64      	cmp	r3, #100	; 0x64
 8014c12:	d901      	bls.n	8014c18 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8014c14:	2303      	movs	r3, #3
 8014c16:	e171      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014c18:	4b24      	ldr	r3, [pc, #144]	; (8014cac <HAL_RCC_OscConfig+0x54c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d0f0      	beq.n	8014c06 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014c24:	687b      	ldr	r3, [r7, #4]
 8014c26:	689b      	ldr	r3, [r3, #8]
 8014c28:	2b01      	cmp	r3, #1
 8014c2a:	d106      	bne.n	8014c3a <HAL_RCC_OscConfig+0x4da>
 8014c2c:	4b1e      	ldr	r3, [pc, #120]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c30:	4a1d      	ldr	r2, [pc, #116]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c32:	f043 0301 	orr.w	r3, r3, #1
 8014c36:	6713      	str	r3, [r2, #112]	; 0x70
 8014c38:	e02d      	b.n	8014c96 <HAL_RCC_OscConfig+0x536>
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	689b      	ldr	r3, [r3, #8]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d10c      	bne.n	8014c5c <HAL_RCC_OscConfig+0x4fc>
 8014c42:	4b19      	ldr	r3, [pc, #100]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c46:	4a18      	ldr	r2, [pc, #96]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c48:	f023 0301 	bic.w	r3, r3, #1
 8014c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8014c4e:	4b16      	ldr	r3, [pc, #88]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c52:	4a15      	ldr	r2, [pc, #84]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c54:	f023 0304 	bic.w	r3, r3, #4
 8014c58:	6713      	str	r3, [r2, #112]	; 0x70
 8014c5a:	e01c      	b.n	8014c96 <HAL_RCC_OscConfig+0x536>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	689b      	ldr	r3, [r3, #8]
 8014c60:	2b05      	cmp	r3, #5
 8014c62:	d10c      	bne.n	8014c7e <HAL_RCC_OscConfig+0x51e>
 8014c64:	4b10      	ldr	r3, [pc, #64]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c68:	4a0f      	ldr	r2, [pc, #60]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c6a:	f043 0304 	orr.w	r3, r3, #4
 8014c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8014c70:	4b0d      	ldr	r3, [pc, #52]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c74:	4a0c      	ldr	r2, [pc, #48]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c76:	f043 0301 	orr.w	r3, r3, #1
 8014c7a:	6713      	str	r3, [r2, #112]	; 0x70
 8014c7c:	e00b      	b.n	8014c96 <HAL_RCC_OscConfig+0x536>
 8014c7e:	4b0a      	ldr	r3, [pc, #40]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c82:	4a09      	ldr	r2, [pc, #36]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c84:	f023 0301 	bic.w	r3, r3, #1
 8014c88:	6713      	str	r3, [r2, #112]	; 0x70
 8014c8a:	4b07      	ldr	r3, [pc, #28]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014c8e:	4a06      	ldr	r2, [pc, #24]	; (8014ca8 <HAL_RCC_OscConfig+0x548>)
 8014c90:	f023 0304 	bic.w	r3, r3, #4
 8014c94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	689b      	ldr	r3, [r3, #8]
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d01a      	beq.n	8014cd4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014c9e:	f7fd fdb1 	bl	8012804 <HAL_GetTick>
 8014ca2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014ca4:	e00f      	b.n	8014cc6 <HAL_RCC_OscConfig+0x566>
 8014ca6:	bf00      	nop
 8014ca8:	58024400 	.word	0x58024400
 8014cac:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014cb0:	f7fd fda8 	bl	8012804 <HAL_GetTick>
 8014cb4:	4602      	mov	r2, r0
 8014cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014cb8:	1ad3      	subs	r3, r2, r3
 8014cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8014cbe:	4293      	cmp	r3, r2
 8014cc0:	d901      	bls.n	8014cc6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8014cc2:	2303      	movs	r3, #3
 8014cc4:	e11a      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014cc6:	4b8f      	ldr	r3, [pc, #572]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cca:	f003 0302 	and.w	r3, r3, #2
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d0ee      	beq.n	8014cb0 <HAL_RCC_OscConfig+0x550>
 8014cd2:	e014      	b.n	8014cfe <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014cd4:	f7fd fd96 	bl	8012804 <HAL_GetTick>
 8014cd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014cda:	e00a      	b.n	8014cf2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014cdc:	f7fd fd92 	bl	8012804 <HAL_GetTick>
 8014ce0:	4602      	mov	r2, r0
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ce4:	1ad3      	subs	r3, r2, r3
 8014ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8014cea:	4293      	cmp	r3, r2
 8014cec:	d901      	bls.n	8014cf2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8014cee:	2303      	movs	r3, #3
 8014cf0:	e104      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014cf2:	4b84      	ldr	r3, [pc, #528]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014cf6:	f003 0302 	and.w	r3, r3, #2
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d1ee      	bne.n	8014cdc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	f000 80f9 	beq.w	8014efa <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8014d08:	4b7e      	ldr	r3, [pc, #504]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d0a:	691b      	ldr	r3, [r3, #16]
 8014d0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014d10:	2b18      	cmp	r3, #24
 8014d12:	f000 80b4 	beq.w	8014e7e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d1a:	2b02      	cmp	r3, #2
 8014d1c:	f040 8095 	bne.w	8014e4a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014d20:	4b78      	ldr	r3, [pc, #480]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	4a77      	ldr	r2, [pc, #476]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d2c:	f7fd fd6a 	bl	8012804 <HAL_GetTick>
 8014d30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014d32:	e008      	b.n	8014d46 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014d34:	f7fd fd66 	bl	8012804 <HAL_GetTick>
 8014d38:	4602      	mov	r2, r0
 8014d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d3c:	1ad3      	subs	r3, r2, r3
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d901      	bls.n	8014d46 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8014d42:	2303      	movs	r3, #3
 8014d44:	e0da      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014d46:	4b6f      	ldr	r3, [pc, #444]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d48:	681b      	ldr	r3, [r3, #0]
 8014d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d1f0      	bne.n	8014d34 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8014d52:	4b6c      	ldr	r3, [pc, #432]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014d56:	4b6c      	ldr	r3, [pc, #432]	; (8014f08 <HAL_RCC_OscConfig+0x7a8>)
 8014d58:	4013      	ands	r3, r2
 8014d5a:	687a      	ldr	r2, [r7, #4]
 8014d5c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8014d5e:	687a      	ldr	r2, [r7, #4]
 8014d60:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014d62:	0112      	lsls	r2, r2, #4
 8014d64:	430a      	orrs	r2, r1
 8014d66:	4967      	ldr	r1, [pc, #412]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d70:	3b01      	subs	r3, #1
 8014d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014d7a:	3b01      	subs	r3, #1
 8014d7c:	025b      	lsls	r3, r3, #9
 8014d7e:	b29b      	uxth	r3, r3
 8014d80:	431a      	orrs	r2, r3
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014d86:	3b01      	subs	r3, #1
 8014d88:	041b      	lsls	r3, r3, #16
 8014d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8014d8e:	431a      	orrs	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d94:	3b01      	subs	r3, #1
 8014d96:	061b      	lsls	r3, r3, #24
 8014d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8014d9c:	4959      	ldr	r1, [pc, #356]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014d9e:	4313      	orrs	r3, r2
 8014da0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8014da2:	4b58      	ldr	r3, [pc, #352]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014da6:	4a57      	ldr	r2, [pc, #348]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014da8:	f023 0301 	bic.w	r3, r3, #1
 8014dac:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8014dae:	4b55      	ldr	r3, [pc, #340]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014db2:	4b56      	ldr	r3, [pc, #344]	; (8014f0c <HAL_RCC_OscConfig+0x7ac>)
 8014db4:	4013      	ands	r3, r2
 8014db6:	687a      	ldr	r2, [r7, #4]
 8014db8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8014dba:	00d2      	lsls	r2, r2, #3
 8014dbc:	4951      	ldr	r1, [pc, #324]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8014dc2:	4b50      	ldr	r3, [pc, #320]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dc6:	f023 020c 	bic.w	r2, r3, #12
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dce:	494d      	ldr	r1, [pc, #308]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014dd0:	4313      	orrs	r3, r2
 8014dd2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8014dd4:	4b4b      	ldr	r3, [pc, #300]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dd8:	f023 0202 	bic.w	r2, r3, #2
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014de0:	4948      	ldr	r1, [pc, #288]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014de2:	4313      	orrs	r3, r2
 8014de4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8014de6:	4b47      	ldr	r3, [pc, #284]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014dea:	4a46      	ldr	r2, [pc, #280]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8014df2:	4b44      	ldr	r3, [pc, #272]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014df6:	4a43      	ldr	r2, [pc, #268]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8014dfe:	4b41      	ldr	r3, [pc, #260]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e02:	4a40      	ldr	r2, [pc, #256]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014e08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8014e0a:	4b3e      	ldr	r3, [pc, #248]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e0e:	4a3d      	ldr	r2, [pc, #244]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e10:	f043 0301 	orr.w	r3, r3, #1
 8014e14:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8014e16:	4b3b      	ldr	r3, [pc, #236]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	4a3a      	ldr	r2, [pc, #232]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014e20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e22:	f7fd fcef 	bl	8012804 <HAL_GetTick>
 8014e26:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014e28:	e008      	b.n	8014e3c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014e2a:	f7fd fceb 	bl	8012804 <HAL_GetTick>
 8014e2e:	4602      	mov	r2, r0
 8014e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e32:	1ad3      	subs	r3, r2, r3
 8014e34:	2b02      	cmp	r3, #2
 8014e36:	d901      	bls.n	8014e3c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8014e38:	2303      	movs	r3, #3
 8014e3a:	e05f      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8014e3c:	4b31      	ldr	r3, [pc, #196]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d0f0      	beq.n	8014e2a <HAL_RCC_OscConfig+0x6ca>
 8014e48:	e057      	b.n	8014efa <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014e4a:	4b2e      	ldr	r3, [pc, #184]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	4a2d      	ldr	r2, [pc, #180]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e56:	f7fd fcd5 	bl	8012804 <HAL_GetTick>
 8014e5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014e5c:	e008      	b.n	8014e70 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014e5e:	f7fd fcd1 	bl	8012804 <HAL_GetTick>
 8014e62:	4602      	mov	r2, r0
 8014e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e66:	1ad3      	subs	r3, r2, r3
 8014e68:	2b02      	cmp	r3, #2
 8014e6a:	d901      	bls.n	8014e70 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8014e6c:	2303      	movs	r3, #3
 8014e6e:	e045      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014e70:	4b24      	ldr	r3, [pc, #144]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e72:	681b      	ldr	r3, [r3, #0]
 8014e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014e78:	2b00      	cmp	r3, #0
 8014e7a:	d1f0      	bne.n	8014e5e <HAL_RCC_OscConfig+0x6fe>
 8014e7c:	e03d      	b.n	8014efa <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8014e7e:	4b21      	ldr	r3, [pc, #132]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e82:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8014e84:	4b1f      	ldr	r3, [pc, #124]	; (8014f04 <HAL_RCC_OscConfig+0x7a4>)
 8014e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e88:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d031      	beq.n	8014ef6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014e92:	693b      	ldr	r3, [r7, #16]
 8014e94:	f003 0203 	and.w	r2, r3, #3
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8014e9c:	429a      	cmp	r2, r3
 8014e9e:	d12a      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014ea0:	693b      	ldr	r3, [r7, #16]
 8014ea2:	091b      	lsrs	r3, r3, #4
 8014ea4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d122      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014eba:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8014ebc:	429a      	cmp	r2, r3
 8014ebe:	d11a      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	0a5b      	lsrs	r3, r3, #9
 8014ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014ecc:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8014ece:	429a      	cmp	r2, r3
 8014ed0:	d111      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	0c1b      	lsrs	r3, r3, #16
 8014ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014ede:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d108      	bne.n	8014ef6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	0e1b      	lsrs	r3, r3, #24
 8014ee8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014ef0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8014ef2:	429a      	cmp	r2, r3
 8014ef4:	d001      	beq.n	8014efa <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	e000      	b.n	8014efc <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8014efa:	2300      	movs	r3, #0
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	3730      	adds	r7, #48	; 0x30
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bd80      	pop	{r7, pc}
 8014f04:	58024400 	.word	0x58024400
 8014f08:	fffffc0c 	.word	0xfffffc0c
 8014f0c:	ffff0007 	.word	0xffff0007

08014f10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d101      	bne.n	8014f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8014f20:	2301      	movs	r3, #1
 8014f22:	e19c      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8014f24:	4b8a      	ldr	r3, [pc, #552]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f003 030f 	and.w	r3, r3, #15
 8014f2c:	683a      	ldr	r2, [r7, #0]
 8014f2e:	429a      	cmp	r2, r3
 8014f30:	d910      	bls.n	8014f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8014f32:	4b87      	ldr	r3, [pc, #540]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	f023 020f 	bic.w	r2, r3, #15
 8014f3a:	4985      	ldr	r1, [pc, #532]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8014f3c:	683b      	ldr	r3, [r7, #0]
 8014f3e:	4313      	orrs	r3, r2
 8014f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8014f42:	4b83      	ldr	r3, [pc, #524]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8014f44:	681b      	ldr	r3, [r3, #0]
 8014f46:	f003 030f 	and.w	r3, r3, #15
 8014f4a:	683a      	ldr	r2, [r7, #0]
 8014f4c:	429a      	cmp	r2, r3
 8014f4e:	d001      	beq.n	8014f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8014f50:	2301      	movs	r3, #1
 8014f52:	e184      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	681b      	ldr	r3, [r3, #0]
 8014f58:	f003 0304 	and.w	r3, r3, #4
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d010      	beq.n	8014f82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	691a      	ldr	r2, [r3, #16]
 8014f64:	4b7b      	ldr	r3, [pc, #492]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014f66:	699b      	ldr	r3, [r3, #24]
 8014f68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014f6c:	429a      	cmp	r2, r3
 8014f6e:	d908      	bls.n	8014f82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8014f70:	4b78      	ldr	r3, [pc, #480]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014f72:	699b      	ldr	r3, [r3, #24]
 8014f74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	691b      	ldr	r3, [r3, #16]
 8014f7c:	4975      	ldr	r1, [pc, #468]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014f7e:	4313      	orrs	r3, r2
 8014f80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	681b      	ldr	r3, [r3, #0]
 8014f86:	f003 0308 	and.w	r3, r3, #8
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d010      	beq.n	8014fb0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	695a      	ldr	r2, [r3, #20]
 8014f92:	4b70      	ldr	r3, [pc, #448]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014f94:	69db      	ldr	r3, [r3, #28]
 8014f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014f9a:	429a      	cmp	r2, r3
 8014f9c:	d908      	bls.n	8014fb0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8014f9e:	4b6d      	ldr	r3, [pc, #436]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014fa0:	69db      	ldr	r3, [r3, #28]
 8014fa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8014fa6:	687b      	ldr	r3, [r7, #4]
 8014fa8:	695b      	ldr	r3, [r3, #20]
 8014faa:	496a      	ldr	r1, [pc, #424]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014fac:	4313      	orrs	r3, r2
 8014fae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	f003 0310 	and.w	r3, r3, #16
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d010      	beq.n	8014fde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8014fbc:	687b      	ldr	r3, [r7, #4]
 8014fbe:	699a      	ldr	r2, [r3, #24]
 8014fc0:	4b64      	ldr	r3, [pc, #400]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014fc2:	69db      	ldr	r3, [r3, #28]
 8014fc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8014fc8:	429a      	cmp	r2, r3
 8014fca:	d908      	bls.n	8014fde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8014fcc:	4b61      	ldr	r3, [pc, #388]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014fce:	69db      	ldr	r3, [r3, #28]
 8014fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	699b      	ldr	r3, [r3, #24]
 8014fd8:	495e      	ldr	r1, [pc, #376]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014fda:	4313      	orrs	r3, r2
 8014fdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	681b      	ldr	r3, [r3, #0]
 8014fe2:	f003 0320 	and.w	r3, r3, #32
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d010      	beq.n	801500c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	69da      	ldr	r2, [r3, #28]
 8014fee:	4b59      	ldr	r3, [pc, #356]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014ff0:	6a1b      	ldr	r3, [r3, #32]
 8014ff2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8014ff6:	429a      	cmp	r2, r3
 8014ff8:	d908      	bls.n	801500c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8014ffa:	4b56      	ldr	r3, [pc, #344]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8014ffc:	6a1b      	ldr	r3, [r3, #32]
 8014ffe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	69db      	ldr	r3, [r3, #28]
 8015006:	4953      	ldr	r1, [pc, #332]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015008:	4313      	orrs	r3, r2
 801500a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	f003 0302 	and.w	r3, r3, #2
 8015014:	2b00      	cmp	r3, #0
 8015016:	d010      	beq.n	801503a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	68da      	ldr	r2, [r3, #12]
 801501c:	4b4d      	ldr	r3, [pc, #308]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 801501e:	699b      	ldr	r3, [r3, #24]
 8015020:	f003 030f 	and.w	r3, r3, #15
 8015024:	429a      	cmp	r2, r3
 8015026:	d908      	bls.n	801503a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8015028:	4b4a      	ldr	r3, [pc, #296]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 801502a:	699b      	ldr	r3, [r3, #24]
 801502c:	f023 020f 	bic.w	r2, r3, #15
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	68db      	ldr	r3, [r3, #12]
 8015034:	4947      	ldr	r1, [pc, #284]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015036:	4313      	orrs	r3, r2
 8015038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	f003 0301 	and.w	r3, r3, #1
 8015042:	2b00      	cmp	r3, #0
 8015044:	d055      	beq.n	80150f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8015046:	4b43      	ldr	r3, [pc, #268]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015048:	699b      	ldr	r3, [r3, #24]
 801504a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	689b      	ldr	r3, [r3, #8]
 8015052:	4940      	ldr	r1, [pc, #256]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015054:	4313      	orrs	r3, r2
 8015056:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	685b      	ldr	r3, [r3, #4]
 801505c:	2b02      	cmp	r3, #2
 801505e:	d107      	bne.n	8015070 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015060:	4b3c      	ldr	r3, [pc, #240]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015068:	2b00      	cmp	r3, #0
 801506a:	d121      	bne.n	80150b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801506c:	2301      	movs	r3, #1
 801506e:	e0f6      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	2b03      	cmp	r3, #3
 8015076:	d107      	bne.n	8015088 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015078:	4b36      	ldr	r3, [pc, #216]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015080:	2b00      	cmp	r3, #0
 8015082:	d115      	bne.n	80150b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015084:	2301      	movs	r3, #1
 8015086:	e0ea      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	685b      	ldr	r3, [r3, #4]
 801508c:	2b01      	cmp	r3, #1
 801508e:	d107      	bne.n	80150a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015090:	4b30      	ldr	r3, [pc, #192]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015098:	2b00      	cmp	r3, #0
 801509a:	d109      	bne.n	80150b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801509c:	2301      	movs	r3, #1
 801509e:	e0de      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80150a0:	4b2c      	ldr	r3, [pc, #176]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	f003 0304 	and.w	r3, r3, #4
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d101      	bne.n	80150b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80150ac:	2301      	movs	r3, #1
 80150ae:	e0d6      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80150b0:	4b28      	ldr	r3, [pc, #160]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 80150b2:	691b      	ldr	r3, [r3, #16]
 80150b4:	f023 0207 	bic.w	r2, r3, #7
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	685b      	ldr	r3, [r3, #4]
 80150bc:	4925      	ldr	r1, [pc, #148]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 80150be:	4313      	orrs	r3, r2
 80150c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80150c2:	f7fd fb9f 	bl	8012804 <HAL_GetTick>
 80150c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80150c8:	e00a      	b.n	80150e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80150ca:	f7fd fb9b 	bl	8012804 <HAL_GetTick>
 80150ce:	4602      	mov	r2, r0
 80150d0:	697b      	ldr	r3, [r7, #20]
 80150d2:	1ad3      	subs	r3, r2, r3
 80150d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80150d8:	4293      	cmp	r3, r2
 80150da:	d901      	bls.n	80150e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80150dc:	2303      	movs	r3, #3
 80150de:	e0be      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80150e0:	4b1c      	ldr	r3, [pc, #112]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 80150e2:	691b      	ldr	r3, [r3, #16]
 80150e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	685b      	ldr	r3, [r3, #4]
 80150ec:	00db      	lsls	r3, r3, #3
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d1eb      	bne.n	80150ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	f003 0302 	and.w	r3, r3, #2
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d010      	beq.n	8015120 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	68da      	ldr	r2, [r3, #12]
 8015102:	4b14      	ldr	r3, [pc, #80]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015104:	699b      	ldr	r3, [r3, #24]
 8015106:	f003 030f 	and.w	r3, r3, #15
 801510a:	429a      	cmp	r2, r3
 801510c:	d208      	bcs.n	8015120 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801510e:	4b11      	ldr	r3, [pc, #68]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 8015110:	699b      	ldr	r3, [r3, #24]
 8015112:	f023 020f 	bic.w	r2, r3, #15
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	68db      	ldr	r3, [r3, #12]
 801511a:	490e      	ldr	r1, [pc, #56]	; (8015154 <HAL_RCC_ClockConfig+0x244>)
 801511c:	4313      	orrs	r3, r2
 801511e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8015120:	4b0b      	ldr	r3, [pc, #44]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	f003 030f 	and.w	r3, r3, #15
 8015128:	683a      	ldr	r2, [r7, #0]
 801512a:	429a      	cmp	r2, r3
 801512c:	d214      	bcs.n	8015158 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801512e:	4b08      	ldr	r3, [pc, #32]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	f023 020f 	bic.w	r2, r3, #15
 8015136:	4906      	ldr	r1, [pc, #24]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8015138:	683b      	ldr	r3, [r7, #0]
 801513a:	4313      	orrs	r3, r2
 801513c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801513e:	4b04      	ldr	r3, [pc, #16]	; (8015150 <HAL_RCC_ClockConfig+0x240>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	f003 030f 	and.w	r3, r3, #15
 8015146:	683a      	ldr	r2, [r7, #0]
 8015148:	429a      	cmp	r2, r3
 801514a:	d005      	beq.n	8015158 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801514c:	2301      	movs	r3, #1
 801514e:	e086      	b.n	801525e <HAL_RCC_ClockConfig+0x34e>
 8015150:	52002000 	.word	0x52002000
 8015154:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	f003 0304 	and.w	r3, r3, #4
 8015160:	2b00      	cmp	r3, #0
 8015162:	d010      	beq.n	8015186 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	691a      	ldr	r2, [r3, #16]
 8015168:	4b3f      	ldr	r3, [pc, #252]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 801516a:	699b      	ldr	r3, [r3, #24]
 801516c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015170:	429a      	cmp	r2, r3
 8015172:	d208      	bcs.n	8015186 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015174:	4b3c      	ldr	r3, [pc, #240]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	691b      	ldr	r3, [r3, #16]
 8015180:	4939      	ldr	r1, [pc, #228]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015182:	4313      	orrs	r3, r2
 8015184:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	f003 0308 	and.w	r3, r3, #8
 801518e:	2b00      	cmp	r3, #0
 8015190:	d010      	beq.n	80151b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	695a      	ldr	r2, [r3, #20]
 8015196:	4b34      	ldr	r3, [pc, #208]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015198:	69db      	ldr	r3, [r3, #28]
 801519a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801519e:	429a      	cmp	r2, r3
 80151a0:	d208      	bcs.n	80151b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80151a2:	4b31      	ldr	r3, [pc, #196]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151a4:	69db      	ldr	r3, [r3, #28]
 80151a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	695b      	ldr	r3, [r3, #20]
 80151ae:	492e      	ldr	r1, [pc, #184]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151b0:	4313      	orrs	r3, r2
 80151b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	681b      	ldr	r3, [r3, #0]
 80151b8:	f003 0310 	and.w	r3, r3, #16
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d010      	beq.n	80151e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	699a      	ldr	r2, [r3, #24]
 80151c4:	4b28      	ldr	r3, [pc, #160]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151c6:	69db      	ldr	r3, [r3, #28]
 80151c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80151cc:	429a      	cmp	r2, r3
 80151ce:	d208      	bcs.n	80151e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80151d0:	4b25      	ldr	r3, [pc, #148]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151d2:	69db      	ldr	r3, [r3, #28]
 80151d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	699b      	ldr	r3, [r3, #24]
 80151dc:	4922      	ldr	r1, [pc, #136]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151de:	4313      	orrs	r3, r2
 80151e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f003 0320 	and.w	r3, r3, #32
 80151ea:	2b00      	cmp	r3, #0
 80151ec:	d010      	beq.n	8015210 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	69da      	ldr	r2, [r3, #28]
 80151f2:	4b1d      	ldr	r3, [pc, #116]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 80151f4:	6a1b      	ldr	r3, [r3, #32]
 80151f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80151fa:	429a      	cmp	r2, r3
 80151fc:	d208      	bcs.n	8015210 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80151fe:	4b1a      	ldr	r3, [pc, #104]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015200:	6a1b      	ldr	r3, [r3, #32]
 8015202:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	69db      	ldr	r3, [r3, #28]
 801520a:	4917      	ldr	r1, [pc, #92]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 801520c:	4313      	orrs	r3, r2
 801520e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015210:	f000 f834 	bl	801527c <HAL_RCC_GetSysClockFreq>
 8015214:	4601      	mov	r1, r0
 8015216:	4b14      	ldr	r3, [pc, #80]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015218:	699b      	ldr	r3, [r3, #24]
 801521a:	0a1b      	lsrs	r3, r3, #8
 801521c:	f003 030f 	and.w	r3, r3, #15
 8015220:	4a12      	ldr	r2, [pc, #72]	; (801526c <HAL_RCC_ClockConfig+0x35c>)
 8015222:	5cd3      	ldrb	r3, [r2, r3]
 8015224:	f003 031f 	and.w	r3, r3, #31
 8015228:	fa21 f303 	lsr.w	r3, r1, r3
 801522c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801522e:	4b0e      	ldr	r3, [pc, #56]	; (8015268 <HAL_RCC_ClockConfig+0x358>)
 8015230:	699b      	ldr	r3, [r3, #24]
 8015232:	f003 030f 	and.w	r3, r3, #15
 8015236:	4a0d      	ldr	r2, [pc, #52]	; (801526c <HAL_RCC_ClockConfig+0x35c>)
 8015238:	5cd3      	ldrb	r3, [r2, r3]
 801523a:	f003 031f 	and.w	r3, r3, #31
 801523e:	693a      	ldr	r2, [r7, #16]
 8015240:	fa22 f303 	lsr.w	r3, r2, r3
 8015244:	4a0a      	ldr	r2, [pc, #40]	; (8015270 <HAL_RCC_ClockConfig+0x360>)
 8015246:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015248:	4a0a      	ldr	r2, [pc, #40]	; (8015274 <HAL_RCC_ClockConfig+0x364>)
 801524a:	693b      	ldr	r3, [r7, #16]
 801524c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 801524e:	4b0a      	ldr	r3, [pc, #40]	; (8015278 <HAL_RCC_ClockConfig+0x368>)
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	4618      	mov	r0, r3
 8015254:	f7fd fa8c 	bl	8012770 <HAL_InitTick>
 8015258:	4603      	mov	r3, r0
 801525a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801525c:	7bfb      	ldrb	r3, [r7, #15]
}
 801525e:	4618      	mov	r0, r3
 8015260:	3718      	adds	r7, #24
 8015262:	46bd      	mov	sp, r7
 8015264:	bd80      	pop	{r7, pc}
 8015266:	bf00      	nop
 8015268:	58024400 	.word	0x58024400
 801526c:	0801f388 	.word	0x0801f388
 8015270:	2400000c 	.word	0x2400000c
 8015274:	24000008 	.word	0x24000008
 8015278:	24000010 	.word	0x24000010

0801527c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801527c:	b480      	push	{r7}
 801527e:	b089      	sub	sp, #36	; 0x24
 8015280:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015282:	4baf      	ldr	r3, [pc, #700]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015284:	691b      	ldr	r3, [r3, #16]
 8015286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801528a:	2b18      	cmp	r3, #24
 801528c:	f200 814e 	bhi.w	801552c <HAL_RCC_GetSysClockFreq+0x2b0>
 8015290:	a201      	add	r2, pc, #4	; (adr r2, 8015298 <HAL_RCC_GetSysClockFreq+0x1c>)
 8015292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015296:	bf00      	nop
 8015298:	080152fd 	.word	0x080152fd
 801529c:	0801552d 	.word	0x0801552d
 80152a0:	0801552d 	.word	0x0801552d
 80152a4:	0801552d 	.word	0x0801552d
 80152a8:	0801552d 	.word	0x0801552d
 80152ac:	0801552d 	.word	0x0801552d
 80152b0:	0801552d 	.word	0x0801552d
 80152b4:	0801552d 	.word	0x0801552d
 80152b8:	08015323 	.word	0x08015323
 80152bc:	0801552d 	.word	0x0801552d
 80152c0:	0801552d 	.word	0x0801552d
 80152c4:	0801552d 	.word	0x0801552d
 80152c8:	0801552d 	.word	0x0801552d
 80152cc:	0801552d 	.word	0x0801552d
 80152d0:	0801552d 	.word	0x0801552d
 80152d4:	0801552d 	.word	0x0801552d
 80152d8:	08015329 	.word	0x08015329
 80152dc:	0801552d 	.word	0x0801552d
 80152e0:	0801552d 	.word	0x0801552d
 80152e4:	0801552d 	.word	0x0801552d
 80152e8:	0801552d 	.word	0x0801552d
 80152ec:	0801552d 	.word	0x0801552d
 80152f0:	0801552d 	.word	0x0801552d
 80152f4:	0801552d 	.word	0x0801552d
 80152f8:	0801532f 	.word	0x0801532f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80152fc:	4b90      	ldr	r3, [pc, #576]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	f003 0320 	and.w	r3, r3, #32
 8015304:	2b00      	cmp	r3, #0
 8015306:	d009      	beq.n	801531c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8015308:	4b8d      	ldr	r3, [pc, #564]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801530a:	681b      	ldr	r3, [r3, #0]
 801530c:	08db      	lsrs	r3, r3, #3
 801530e:	f003 0303 	and.w	r3, r3, #3
 8015312:	4a8c      	ldr	r2, [pc, #560]	; (8015544 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8015314:	fa22 f303 	lsr.w	r3, r2, r3
 8015318:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 801531a:	e10a      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801531c:	4b89      	ldr	r3, [pc, #548]	; (8015544 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801531e:	61bb      	str	r3, [r7, #24]
    break;
 8015320:	e107      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8015322:	4b89      	ldr	r3, [pc, #548]	; (8015548 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8015324:	61bb      	str	r3, [r7, #24]
    break;
 8015326:	e104      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8015328:	4b88      	ldr	r3, [pc, #544]	; (801554c <HAL_RCC_GetSysClockFreq+0x2d0>)
 801532a:	61bb      	str	r3, [r7, #24]
    break;
 801532c:	e101      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801532e:	4b84      	ldr	r3, [pc, #528]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015332:	f003 0303 	and.w	r3, r3, #3
 8015336:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8015338:	4b81      	ldr	r3, [pc, #516]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801533a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801533c:	091b      	lsrs	r3, r3, #4
 801533e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015342:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8015344:	4b7e      	ldr	r3, [pc, #504]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015348:	f003 0301 	and.w	r3, r3, #1
 801534c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 801534e:	4b7c      	ldr	r3, [pc, #496]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015352:	08db      	lsrs	r3, r3, #3
 8015354:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015358:	68fa      	ldr	r2, [r7, #12]
 801535a:	fb02 f303 	mul.w	r3, r2, r3
 801535e:	ee07 3a90 	vmov	s15, r3
 8015362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015366:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801536a:	693b      	ldr	r3, [r7, #16]
 801536c:	2b00      	cmp	r3, #0
 801536e:	f000 80da 	beq.w	8015526 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8015372:	697b      	ldr	r3, [r7, #20]
 8015374:	2b01      	cmp	r3, #1
 8015376:	d05a      	beq.n	801542e <HAL_RCC_GetSysClockFreq+0x1b2>
 8015378:	2b01      	cmp	r3, #1
 801537a:	d302      	bcc.n	8015382 <HAL_RCC_GetSysClockFreq+0x106>
 801537c:	2b02      	cmp	r3, #2
 801537e:	d078      	beq.n	8015472 <HAL_RCC_GetSysClockFreq+0x1f6>
 8015380:	e099      	b.n	80154b6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015382:	4b6f      	ldr	r3, [pc, #444]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015384:	681b      	ldr	r3, [r3, #0]
 8015386:	f003 0320 	and.w	r3, r3, #32
 801538a:	2b00      	cmp	r3, #0
 801538c:	d02d      	beq.n	80153ea <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801538e:	4b6c      	ldr	r3, [pc, #432]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	08db      	lsrs	r3, r3, #3
 8015394:	f003 0303 	and.w	r3, r3, #3
 8015398:	4a6a      	ldr	r2, [pc, #424]	; (8015544 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801539a:	fa22 f303 	lsr.w	r3, r2, r3
 801539e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	ee07 3a90 	vmov	s15, r3
 80153a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153aa:	693b      	ldr	r3, [r7, #16]
 80153ac:	ee07 3a90 	vmov	s15, r3
 80153b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80153b8:	4b61      	ldr	r3, [pc, #388]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80153ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80153bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80153c0:	ee07 3a90 	vmov	s15, r3
 80153c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80153c8:	ed97 6a02 	vldr	s12, [r7, #8]
 80153cc:	eddf 5a60 	vldr	s11, [pc, #384]	; 8015550 <HAL_RCC_GetSysClockFreq+0x2d4>
 80153d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80153d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80153d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80153dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80153e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80153e4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80153e8:	e087      	b.n	80154fa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80153ea:	693b      	ldr	r3, [r7, #16]
 80153ec:	ee07 3a90 	vmov	s15, r3
 80153f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80153f4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015554 <HAL_RCC_GetSysClockFreq+0x2d8>
 80153f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80153fc:	4b50      	ldr	r3, [pc, #320]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80153fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015404:	ee07 3a90 	vmov	s15, r3
 8015408:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801540c:	ed97 6a02 	vldr	s12, [r7, #8]
 8015410:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8015550 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015414:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015418:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801541c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015420:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015428:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801542c:	e065      	b.n	80154fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801542e:	693b      	ldr	r3, [r7, #16]
 8015430:	ee07 3a90 	vmov	s15, r3
 8015434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015438:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015558 <HAL_RCC_GetSysClockFreq+0x2dc>
 801543c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015440:	4b3f      	ldr	r3, [pc, #252]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015448:	ee07 3a90 	vmov	s15, r3
 801544c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015450:	ed97 6a02 	vldr	s12, [r7, #8]
 8015454:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015550 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015458:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801545c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015460:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015464:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015468:	ee67 7a27 	vmul.f32	s15, s14, s15
 801546c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015470:	e043      	b.n	80154fa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015472:	693b      	ldr	r3, [r7, #16]
 8015474:	ee07 3a90 	vmov	s15, r3
 8015478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801547c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801555c <HAL_RCC_GetSysClockFreq+0x2e0>
 8015480:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015484:	4b2e      	ldr	r3, [pc, #184]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801548c:	ee07 3a90 	vmov	s15, r3
 8015490:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015494:	ed97 6a02 	vldr	s12, [r7, #8]
 8015498:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015550 <HAL_RCC_GetSysClockFreq+0x2d4>
 801549c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80154a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80154b4:	e021      	b.n	80154fa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	ee07 3a90 	vmov	s15, r3
 80154bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80154c0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015558 <HAL_RCC_GetSysClockFreq+0x2dc>
 80154c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80154c8:	4b1d      	ldr	r3, [pc, #116]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80154ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80154d0:	ee07 3a90 	vmov	s15, r3
 80154d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80154d8:	ed97 6a02 	vldr	s12, [r7, #8]
 80154dc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8015550 <HAL_RCC_GetSysClockFreq+0x2d4>
 80154e0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80154e4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80154e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80154ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80154f4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80154f8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80154fa:	4b11      	ldr	r3, [pc, #68]	; (8015540 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80154fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80154fe:	0a5b      	lsrs	r3, r3, #9
 8015500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015504:	3301      	adds	r3, #1
 8015506:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8015508:	683b      	ldr	r3, [r7, #0]
 801550a:	ee07 3a90 	vmov	s15, r3
 801550e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015512:	edd7 6a07 	vldr	s13, [r7, #28]
 8015516:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801551a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801551e:	ee17 3a90 	vmov	r3, s15
 8015522:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8015524:	e005      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8015526:	2300      	movs	r3, #0
 8015528:	61bb      	str	r3, [r7, #24]
    break;
 801552a:	e002      	b.n	8015532 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 801552c:	4b06      	ldr	r3, [pc, #24]	; (8015548 <HAL_RCC_GetSysClockFreq+0x2cc>)
 801552e:	61bb      	str	r3, [r7, #24]
    break;
 8015530:	bf00      	nop
  }

  return sysclockfreq;
 8015532:	69bb      	ldr	r3, [r7, #24]
}
 8015534:	4618      	mov	r0, r3
 8015536:	3724      	adds	r7, #36	; 0x24
 8015538:	46bd      	mov	sp, r7
 801553a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553e:	4770      	bx	lr
 8015540:	58024400 	.word	0x58024400
 8015544:	03d09000 	.word	0x03d09000
 8015548:	003d0900 	.word	0x003d0900
 801554c:	007a1200 	.word	0x007a1200
 8015550:	46000000 	.word	0x46000000
 8015554:	4c742400 	.word	0x4c742400
 8015558:	4a742400 	.word	0x4a742400
 801555c:	4af42400 	.word	0x4af42400

08015560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015560:	b580      	push	{r7, lr}
 8015562:	b082      	sub	sp, #8
 8015564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015566:	f7ff fe89 	bl	801527c <HAL_RCC_GetSysClockFreq>
 801556a:	4601      	mov	r1, r0
 801556c:	4b10      	ldr	r3, [pc, #64]	; (80155b0 <HAL_RCC_GetHCLKFreq+0x50>)
 801556e:	699b      	ldr	r3, [r3, #24]
 8015570:	0a1b      	lsrs	r3, r3, #8
 8015572:	f003 030f 	and.w	r3, r3, #15
 8015576:	4a0f      	ldr	r2, [pc, #60]	; (80155b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8015578:	5cd3      	ldrb	r3, [r2, r3]
 801557a:	f003 031f 	and.w	r3, r3, #31
 801557e:	fa21 f303 	lsr.w	r3, r1, r3
 8015582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015584:	4b0a      	ldr	r3, [pc, #40]	; (80155b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8015586:	699b      	ldr	r3, [r3, #24]
 8015588:	f003 030f 	and.w	r3, r3, #15
 801558c:	4a09      	ldr	r2, [pc, #36]	; (80155b4 <HAL_RCC_GetHCLKFreq+0x54>)
 801558e:	5cd3      	ldrb	r3, [r2, r3]
 8015590:	f003 031f 	and.w	r3, r3, #31
 8015594:	687a      	ldr	r2, [r7, #4]
 8015596:	fa22 f303 	lsr.w	r3, r2, r3
 801559a:	4a07      	ldr	r2, [pc, #28]	; (80155b8 <HAL_RCC_GetHCLKFreq+0x58>)
 801559c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801559e:	4a07      	ldr	r2, [pc, #28]	; (80155bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80155a4:	4b04      	ldr	r3, [pc, #16]	; (80155b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80155a6:	681b      	ldr	r3, [r3, #0]
}
 80155a8:	4618      	mov	r0, r3
 80155aa:	3708      	adds	r7, #8
 80155ac:	46bd      	mov	sp, r7
 80155ae:	bd80      	pop	{r7, pc}
 80155b0:	58024400 	.word	0x58024400
 80155b4:	0801f388 	.word	0x0801f388
 80155b8:	2400000c 	.word	0x2400000c
 80155bc:	24000008 	.word	0x24000008

080155c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80155c4:	f7ff ffcc 	bl	8015560 <HAL_RCC_GetHCLKFreq>
 80155c8:	4601      	mov	r1, r0
 80155ca:	4b06      	ldr	r3, [pc, #24]	; (80155e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80155cc:	69db      	ldr	r3, [r3, #28]
 80155ce:	091b      	lsrs	r3, r3, #4
 80155d0:	f003 0307 	and.w	r3, r3, #7
 80155d4:	4a04      	ldr	r2, [pc, #16]	; (80155e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80155d6:	5cd3      	ldrb	r3, [r2, r3]
 80155d8:	f003 031f 	and.w	r3, r3, #31
 80155dc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80155e0:	4618      	mov	r0, r3
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	58024400 	.word	0x58024400
 80155e8:	0801f388 	.word	0x0801f388

080155ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80155ec:	b580      	push	{r7, lr}
 80155ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80155f0:	f7ff ffb6 	bl	8015560 <HAL_RCC_GetHCLKFreq>
 80155f4:	4601      	mov	r1, r0
 80155f6:	4b06      	ldr	r3, [pc, #24]	; (8015610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80155f8:	69db      	ldr	r3, [r3, #28]
 80155fa:	0a1b      	lsrs	r3, r3, #8
 80155fc:	f003 0307 	and.w	r3, r3, #7
 8015600:	4a04      	ldr	r2, [pc, #16]	; (8015614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8015602:	5cd3      	ldrb	r3, [r2, r3]
 8015604:	f003 031f 	and.w	r3, r3, #31
 8015608:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801560c:	4618      	mov	r0, r3
 801560e:	bd80      	pop	{r7, pc}
 8015610:	58024400 	.word	0x58024400
 8015614:	0801f388 	.word	0x0801f388

08015618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8015618:	b580      	push	{r7, lr}
 801561a:	b086      	sub	sp, #24
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8015620:	2300      	movs	r3, #0
 8015622:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8015624:	2300      	movs	r3, #0
 8015626:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8015630:	2b00      	cmp	r3, #0
 8015632:	d03d      	beq.n	80156b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015638:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801563c:	d013      	beq.n	8015666 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 801563e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015642:	d802      	bhi.n	801564a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8015644:	2b00      	cmp	r3, #0
 8015646:	d007      	beq.n	8015658 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8015648:	e01f      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x72>
 801564a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801564e:	d013      	beq.n	8015678 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8015650:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015654:	d01c      	beq.n	8015690 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8015656:	e018      	b.n	801568a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015658:	4baf      	ldr	r3, [pc, #700]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801565a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801565c:	4aae      	ldr	r2, [pc, #696]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801565e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015662:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015664:	e015      	b.n	8015692 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	3304      	adds	r3, #4
 801566a:	2102      	movs	r1, #2
 801566c:	4618      	mov	r0, r3
 801566e:	f001 f95f 	bl	8016930 <RCCEx_PLL2_Config>
 8015672:	4603      	mov	r3, r0
 8015674:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015676:	e00c      	b.n	8015692 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	3324      	adds	r3, #36	; 0x24
 801567c:	2102      	movs	r1, #2
 801567e:	4618      	mov	r0, r3
 8015680:	f001 fa08 	bl	8016a94 <RCCEx_PLL3_Config>
 8015684:	4603      	mov	r3, r0
 8015686:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015688:	e003      	b.n	8015692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801568a:	2301      	movs	r3, #1
 801568c:	75fb      	strb	r3, [r7, #23]
      break;
 801568e:	e000      	b.n	8015692 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8015690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015692:	7dfb      	ldrb	r3, [r7, #23]
 8015694:	2b00      	cmp	r3, #0
 8015696:	d109      	bne.n	80156ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015698:	4b9f      	ldr	r3, [pc, #636]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801569a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801569c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80156a4:	499c      	ldr	r1, [pc, #624]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80156a6:	4313      	orrs	r3, r2
 80156a8:	650b      	str	r3, [r1, #80]	; 0x50
 80156aa:	e001      	b.n	80156b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80156ac:	7dfb      	ldrb	r3, [r7, #23]
 80156ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d03d      	beq.n	8015738 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80156c0:	2b04      	cmp	r3, #4
 80156c2:	d826      	bhi.n	8015712 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80156c4:	a201      	add	r2, pc, #4	; (adr r2, 80156cc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80156c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ca:	bf00      	nop
 80156cc:	080156e1 	.word	0x080156e1
 80156d0:	080156ef 	.word	0x080156ef
 80156d4:	08015701 	.word	0x08015701
 80156d8:	08015719 	.word	0x08015719
 80156dc:	08015719 	.word	0x08015719
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80156e0:	4b8d      	ldr	r3, [pc, #564]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80156e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156e4:	4a8c      	ldr	r2, [pc, #560]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80156e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80156ea:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80156ec:	e015      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80156ee:	687b      	ldr	r3, [r7, #4]
 80156f0:	3304      	adds	r3, #4
 80156f2:	2100      	movs	r1, #0
 80156f4:	4618      	mov	r0, r3
 80156f6:	f001 f91b 	bl	8016930 <RCCEx_PLL2_Config>
 80156fa:	4603      	mov	r3, r0
 80156fc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80156fe:	e00c      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	3324      	adds	r3, #36	; 0x24
 8015704:	2100      	movs	r1, #0
 8015706:	4618      	mov	r0, r3
 8015708:	f001 f9c4 	bl	8016a94 <RCCEx_PLL3_Config>
 801570c:	4603      	mov	r3, r0
 801570e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015710:	e003      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015712:	2301      	movs	r3, #1
 8015714:	75fb      	strb	r3, [r7, #23]
      break;
 8015716:	e000      	b.n	801571a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8015718:	bf00      	nop
    }

    if(ret == HAL_OK)
 801571a:	7dfb      	ldrb	r3, [r7, #23]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d109      	bne.n	8015734 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015720:	4b7d      	ldr	r3, [pc, #500]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015724:	f023 0207 	bic.w	r2, r3, #7
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801572c:	497a      	ldr	r1, [pc, #488]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801572e:	4313      	orrs	r3, r2
 8015730:	650b      	str	r3, [r1, #80]	; 0x50
 8015732:	e001      	b.n	8015738 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015734:	7dfb      	ldrb	r3, [r7, #23]
 8015736:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015740:	2b00      	cmp	r3, #0
 8015742:	d03e      	beq.n	80157c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8015744:	687b      	ldr	r3, [r7, #4]
 8015746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015748:	2b80      	cmp	r3, #128	; 0x80
 801574a:	d01c      	beq.n	8015786 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 801574c:	2b80      	cmp	r3, #128	; 0x80
 801574e:	d804      	bhi.n	801575a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8015750:	2b00      	cmp	r3, #0
 8015752:	d008      	beq.n	8015766 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8015754:	2b40      	cmp	r3, #64	; 0x40
 8015756:	d00d      	beq.n	8015774 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8015758:	e01e      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x180>
 801575a:	2bc0      	cmp	r3, #192	; 0xc0
 801575c:	d01f      	beq.n	801579e <HAL_RCCEx_PeriphCLKConfig+0x186>
 801575e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015762:	d01e      	beq.n	80157a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8015764:	e018      	b.n	8015798 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015766:	4b6c      	ldr	r3, [pc, #432]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801576a:	4a6b      	ldr	r2, [pc, #428]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801576c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015770:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015772:	e017      	b.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	3304      	adds	r3, #4
 8015778:	2100      	movs	r1, #0
 801577a:	4618      	mov	r0, r3
 801577c:	f001 f8d8 	bl	8016930 <RCCEx_PLL2_Config>
 8015780:	4603      	mov	r3, r0
 8015782:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015784:	e00e      	b.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	3324      	adds	r3, #36	; 0x24
 801578a:	2100      	movs	r1, #0
 801578c:	4618      	mov	r0, r3
 801578e:	f001 f981 	bl	8016a94 <RCCEx_PLL3_Config>
 8015792:	4603      	mov	r3, r0
 8015794:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015796:	e005      	b.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015798:	2301      	movs	r3, #1
 801579a:	75fb      	strb	r3, [r7, #23]
      break;
 801579c:	e002      	b.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 801579e:	bf00      	nop
 80157a0:	e000      	b.n	80157a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80157a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80157a4:	7dfb      	ldrb	r3, [r7, #23]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d109      	bne.n	80157be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80157aa:	4b5b      	ldr	r3, [pc, #364]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157ae:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80157b2:	687b      	ldr	r3, [r7, #4]
 80157b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80157b6:	4958      	ldr	r1, [pc, #352]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157b8:	4313      	orrs	r3, r2
 80157ba:	650b      	str	r3, [r1, #80]	; 0x50
 80157bc:	e001      	b.n	80157c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80157be:	7dfb      	ldrb	r3, [r7, #23]
 80157c0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	681b      	ldr	r3, [r3, #0]
 80157c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d044      	beq.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80157d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80157d8:	d01f      	beq.n	801581a <HAL_RCCEx_PeriphCLKConfig+0x202>
 80157da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80157de:	d805      	bhi.n	80157ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d00a      	beq.n	80157fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80157e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80157e8:	d00e      	beq.n	8015808 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80157ea:	e01f      	b.n	801582c <HAL_RCCEx_PeriphCLKConfig+0x214>
 80157ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80157f0:	d01f      	beq.n	8015832 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80157f2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80157f6:	d01e      	beq.n	8015836 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80157f8:	e018      	b.n	801582c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80157fa:	4b47      	ldr	r3, [pc, #284]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80157fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157fe:	4a46      	ldr	r2, [pc, #280]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015804:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015806:	e017      	b.n	8015838 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015808:	687b      	ldr	r3, [r7, #4]
 801580a:	3304      	adds	r3, #4
 801580c:	2100      	movs	r1, #0
 801580e:	4618      	mov	r0, r3
 8015810:	f001 f88e 	bl	8016930 <RCCEx_PLL2_Config>
 8015814:	4603      	mov	r3, r0
 8015816:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015818:	e00e      	b.n	8015838 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 801581a:	687b      	ldr	r3, [r7, #4]
 801581c:	3324      	adds	r3, #36	; 0x24
 801581e:	2100      	movs	r1, #0
 8015820:	4618      	mov	r0, r3
 8015822:	f001 f937 	bl	8016a94 <RCCEx_PLL3_Config>
 8015826:	4603      	mov	r3, r0
 8015828:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801582a:	e005      	b.n	8015838 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801582c:	2301      	movs	r3, #1
 801582e:	75fb      	strb	r3, [r7, #23]
      break;
 8015830:	e002      	b.n	8015838 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015832:	bf00      	nop
 8015834:	e000      	b.n	8015838 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015836:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015838:	7dfb      	ldrb	r3, [r7, #23]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801583e:	4b36      	ldr	r3, [pc, #216]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015842:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8015846:	687b      	ldr	r3, [r7, #4]
 8015848:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801584c:	4932      	ldr	r1, [pc, #200]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801584e:	4313      	orrs	r3, r2
 8015850:	658b      	str	r3, [r1, #88]	; 0x58
 8015852:	e001      	b.n	8015858 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015854:	7dfb      	ldrb	r3, [r7, #23]
 8015856:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015860:	2b00      	cmp	r3, #0
 8015862:	d044      	beq.n	80158ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801586a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801586e:	d01f      	beq.n	80158b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8015870:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015874:	d805      	bhi.n	8015882 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00a      	beq.n	8015890 <HAL_RCCEx_PeriphCLKConfig+0x278>
 801587a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801587e:	d00e      	beq.n	801589e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8015880:	e01f      	b.n	80158c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8015882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015886:	d01f      	beq.n	80158c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8015888:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801588c:	d01e      	beq.n	80158cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801588e:	e018      	b.n	80158c2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015890:	4b21      	ldr	r3, [pc, #132]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015894:	4a20      	ldr	r2, [pc, #128]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015896:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801589a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801589c:	e017      	b.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	3304      	adds	r3, #4
 80158a2:	2100      	movs	r1, #0
 80158a4:	4618      	mov	r0, r3
 80158a6:	f001 f843 	bl	8016930 <RCCEx_PLL2_Config>
 80158aa:	4603      	mov	r3, r0
 80158ac:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80158ae:	e00e      	b.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80158b0:	687b      	ldr	r3, [r7, #4]
 80158b2:	3324      	adds	r3, #36	; 0x24
 80158b4:	2100      	movs	r1, #0
 80158b6:	4618      	mov	r0, r3
 80158b8:	f001 f8ec 	bl	8016a94 <RCCEx_PLL3_Config>
 80158bc:	4603      	mov	r3, r0
 80158be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80158c0:	e005      	b.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80158c2:	2301      	movs	r3, #1
 80158c4:	75fb      	strb	r3, [r7, #23]
      break;
 80158c6:	e002      	b.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80158c8:	bf00      	nop
 80158ca:	e000      	b.n	80158ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80158cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80158ce:	7dfb      	ldrb	r3, [r7, #23]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d10a      	bne.n	80158ea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80158d4:	4b10      	ldr	r3, [pc, #64]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80158d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80158d8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80158e2:	490d      	ldr	r1, [pc, #52]	; (8015918 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80158e4:	4313      	orrs	r3, r2
 80158e6:	658b      	str	r3, [r1, #88]	; 0x58
 80158e8:	e001      	b.n	80158ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	681b      	ldr	r3, [r3, #0]
 80158f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d035      	beq.n	8015966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80158fa:	687b      	ldr	r3, [r7, #4]
 80158fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80158fe:	2b10      	cmp	r3, #16
 8015900:	d00c      	beq.n	801591c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8015902:	2b10      	cmp	r3, #16
 8015904:	d802      	bhi.n	801590c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8015906:	2b00      	cmp	r3, #0
 8015908:	d01b      	beq.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 801590a:	e017      	b.n	801593c <HAL_RCCEx_PeriphCLKConfig+0x324>
 801590c:	2b20      	cmp	r3, #32
 801590e:	d00c      	beq.n	801592a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8015910:	2b30      	cmp	r3, #48	; 0x30
 8015912:	d018      	beq.n	8015946 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8015914:	e012      	b.n	801593c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015916:	bf00      	nop
 8015918:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801591c:	4baf      	ldr	r3, [pc, #700]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801591e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015920:	4aae      	ldr	r2, [pc, #696]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015926:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015928:	e00e      	b.n	8015948 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	3304      	adds	r3, #4
 801592e:	2102      	movs	r1, #2
 8015930:	4618      	mov	r0, r3
 8015932:	f000 fffd 	bl	8016930 <RCCEx_PLL2_Config>
 8015936:	4603      	mov	r3, r0
 8015938:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 801593a:	e005      	b.n	8015948 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 801593c:	2301      	movs	r3, #1
 801593e:	75fb      	strb	r3, [r7, #23]
      break;
 8015940:	e002      	b.n	8015948 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015942:	bf00      	nop
 8015944:	e000      	b.n	8015948 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015946:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015948:	7dfb      	ldrb	r3, [r7, #23]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d109      	bne.n	8015962 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801594e:	4ba3      	ldr	r3, [pc, #652]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015952:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801595a:	49a0      	ldr	r1, [pc, #640]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801595c:	4313      	orrs	r3, r2
 801595e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015960:	e001      	b.n	8015966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015962:	7dfb      	ldrb	r3, [r7, #23]
 8015964:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8015966:	687b      	ldr	r3, [r7, #4]
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801596e:	2b00      	cmp	r3, #0
 8015970:	d042      	beq.n	80159f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015976:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801597a:	d01f      	beq.n	80159bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 801597c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015980:	d805      	bhi.n	801598e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015982:	2b00      	cmp	r3, #0
 8015984:	d00a      	beq.n	801599c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8015986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801598a:	d00e      	beq.n	80159aa <HAL_RCCEx_PeriphCLKConfig+0x392>
 801598c:	e01f      	b.n	80159ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 801598e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015992:	d01f      	beq.n	80159d4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8015994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015998:	d01e      	beq.n	80159d8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 801599a:	e018      	b.n	80159ce <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801599c:	4b8f      	ldr	r3, [pc, #572]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 801599e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a0:	4a8e      	ldr	r2, [pc, #568]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80159a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80159a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80159a8:	e017      	b.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	3304      	adds	r3, #4
 80159ae:	2100      	movs	r1, #0
 80159b0:	4618      	mov	r0, r3
 80159b2:	f000 ffbd 	bl	8016930 <RCCEx_PLL2_Config>
 80159b6:	4603      	mov	r3, r0
 80159b8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80159ba:	e00e      	b.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	3324      	adds	r3, #36	; 0x24
 80159c0:	2100      	movs	r1, #0
 80159c2:	4618      	mov	r0, r3
 80159c4:	f001 f866 	bl	8016a94 <RCCEx_PLL3_Config>
 80159c8:	4603      	mov	r3, r0
 80159ca:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80159cc:	e005      	b.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80159ce:	2301      	movs	r3, #1
 80159d0:	75fb      	strb	r3, [r7, #23]
      break;
 80159d2:	e002      	b.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80159d4:	bf00      	nop
 80159d6:	e000      	b.n	80159da <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80159d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80159da:	7dfb      	ldrb	r3, [r7, #23]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d109      	bne.n	80159f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80159e0:	4b7e      	ldr	r3, [pc, #504]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80159e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159e4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159ec:	497b      	ldr	r1, [pc, #492]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80159ee:	4313      	orrs	r3, r2
 80159f0:	650b      	str	r3, [r1, #80]	; 0x50
 80159f2:	e001      	b.n	80159f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159f4:	7dfb      	ldrb	r3, [r7, #23]
 80159f6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	681b      	ldr	r3, [r3, #0]
 80159fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d042      	beq.n	8015a8a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015a0c:	d01b      	beq.n	8015a46 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8015a0e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015a12:	d805      	bhi.n	8015a20 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d022      	beq.n	8015a5e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8015a18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015a1c:	d00a      	beq.n	8015a34 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8015a1e:	e01b      	b.n	8015a58 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8015a20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015a24:	d01d      	beq.n	8015a62 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8015a26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015a2a:	d01c      	beq.n	8015a66 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8015a2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015a30:	d01b      	beq.n	8015a6a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8015a32:	e011      	b.n	8015a58 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	3304      	adds	r3, #4
 8015a38:	2101      	movs	r1, #1
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f000 ff78 	bl	8016930 <RCCEx_PLL2_Config>
 8015a40:	4603      	mov	r3, r0
 8015a42:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015a44:	e012      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	3324      	adds	r3, #36	; 0x24
 8015a4a:	2101      	movs	r1, #1
 8015a4c:	4618      	mov	r0, r3
 8015a4e:	f001 f821 	bl	8016a94 <RCCEx_PLL3_Config>
 8015a52:	4603      	mov	r3, r0
 8015a54:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015a56:	e009      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015a58:	2301      	movs	r3, #1
 8015a5a:	75fb      	strb	r3, [r7, #23]
      break;
 8015a5c:	e006      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015a5e:	bf00      	nop
 8015a60:	e004      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015a62:	bf00      	nop
 8015a64:	e002      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015a66:	bf00      	nop
 8015a68:	e000      	b.n	8015a6c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015a6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015a6c:	7dfb      	ldrb	r3, [r7, #23]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d109      	bne.n	8015a86 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015a72:	4b5a      	ldr	r3, [pc, #360]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a76:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015a7e:	4957      	ldr	r1, [pc, #348]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015a80:	4313      	orrs	r3, r2
 8015a82:	650b      	str	r3, [r1, #80]	; 0x50
 8015a84:	e001      	b.n	8015a8a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a86:	7dfb      	ldrb	r3, [r7, #23]
 8015a88:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d044      	beq.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015aa0:	d01b      	beq.n	8015ada <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8015aa2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015aa6:	d805      	bhi.n	8015ab4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d022      	beq.n	8015af2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015aac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015ab0:	d00a      	beq.n	8015ac8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8015ab2:	e01b      	b.n	8015aec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8015ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015ab8:	d01d      	beq.n	8015af6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015abe:	d01c      	beq.n	8015afa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8015ac0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015ac4:	d01b      	beq.n	8015afe <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8015ac6:	e011      	b.n	8015aec <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015ac8:	687b      	ldr	r3, [r7, #4]
 8015aca:	3304      	adds	r3, #4
 8015acc:	2101      	movs	r1, #1
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f000 ff2e 	bl	8016930 <RCCEx_PLL2_Config>
 8015ad4:	4603      	mov	r3, r0
 8015ad6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015ad8:	e012      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	3324      	adds	r3, #36	; 0x24
 8015ade:	2101      	movs	r1, #1
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	f000 ffd7 	bl	8016a94 <RCCEx_PLL3_Config>
 8015ae6:	4603      	mov	r3, r0
 8015ae8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015aea:	e009      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8015aec:	2301      	movs	r3, #1
 8015aee:	75fb      	strb	r3, [r7, #23]
      break;
 8015af0:	e006      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015af2:	bf00      	nop
 8015af4:	e004      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015af6:	bf00      	nop
 8015af8:	e002      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015afa:	bf00      	nop
 8015afc:	e000      	b.n	8015b00 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b00:	7dfb      	ldrb	r3, [r7, #23]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d10a      	bne.n	8015b1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015b06:	4b35      	ldr	r3, [pc, #212]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b0a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015b14:	4931      	ldr	r1, [pc, #196]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b16:	4313      	orrs	r3, r2
 8015b18:	658b      	str	r3, [r1, #88]	; 0x58
 8015b1a:	e001      	b.n	8015b20 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b1c:	7dfb      	ldrb	r3, [r7, #23]
 8015b1e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	681b      	ldr	r3, [r3, #0]
 8015b24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d02d      	beq.n	8015b88 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015b34:	d005      	beq.n	8015b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8015b36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015b3a:	d009      	beq.n	8015b50 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d013      	beq.n	8015b68 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8015b40:	e00f      	b.n	8015b62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015b42:	4b26      	ldr	r3, [pc, #152]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b46:	4a25      	ldr	r2, [pc, #148]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015b4e:	e00c      	b.n	8015b6a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	3304      	adds	r3, #4
 8015b54:	2101      	movs	r1, #1
 8015b56:	4618      	mov	r0, r3
 8015b58:	f000 feea 	bl	8016930 <RCCEx_PLL2_Config>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015b60:	e003      	b.n	8015b6a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b62:	2301      	movs	r3, #1
 8015b64:	75fb      	strb	r3, [r7, #23]
      break;
 8015b66:	e000      	b.n	8015b6a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8015b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b6a:	7dfb      	ldrb	r3, [r7, #23]
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d109      	bne.n	8015b84 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015b70:	4b1a      	ldr	r3, [pc, #104]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015b74:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b7c:	4917      	ldr	r1, [pc, #92]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015b7e:	4313      	orrs	r3, r2
 8015b80:	650b      	str	r3, [r1, #80]	; 0x50
 8015b82:	e001      	b.n	8015b88 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b84:	7dfb      	ldrb	r3, [r7, #23]
 8015b86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	681b      	ldr	r3, [r3, #0]
 8015b8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d035      	beq.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b98:	2b03      	cmp	r3, #3
 8015b9a:	d81b      	bhi.n	8015bd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8015b9c:	a201      	add	r2, pc, #4	; (adr r2, 8015ba4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8015b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ba2:	bf00      	nop
 8015ba4:	08015be1 	.word	0x08015be1
 8015ba8:	08015bb5 	.word	0x08015bb5
 8015bac:	08015bc3 	.word	0x08015bc3
 8015bb0:	08015be1 	.word	0x08015be1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015bb4:	4b09      	ldr	r3, [pc, #36]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bb8:	4a08      	ldr	r2, [pc, #32]	; (8015bdc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015bc0:	e00f      	b.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	3304      	adds	r3, #4
 8015bc6:	2102      	movs	r1, #2
 8015bc8:	4618      	mov	r0, r3
 8015bca:	f000 feb1 	bl	8016930 <RCCEx_PLL2_Config>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015bd2:	e006      	b.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015bd4:	2301      	movs	r3, #1
 8015bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8015bd8:	e003      	b.n	8015be2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8015bda:	bf00      	nop
 8015bdc:	58024400 	.word	0x58024400
      break;
 8015be0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015be2:	7dfb      	ldrb	r3, [r7, #23]
 8015be4:	2b00      	cmp	r3, #0
 8015be6:	d109      	bne.n	8015bfc <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015be8:	4bba      	ldr	r3, [pc, #744]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015bec:	f023 0203 	bic.w	r2, r3, #3
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015bf4:	49b7      	ldr	r1, [pc, #732]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015bf6:	4313      	orrs	r3, r2
 8015bf8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015bfa:	e001      	b.n	8015c00 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015bfc:	7dfb      	ldrb	r3, [r7, #23]
 8015bfe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015c08:	2b00      	cmp	r3, #0
 8015c0a:	f000 8086 	beq.w	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015c0e:	4bb2      	ldr	r3, [pc, #712]	; (8015ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	4ab1      	ldr	r2, [pc, #708]	; (8015ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015c1a:	f7fc fdf3 	bl	8012804 <HAL_GetTick>
 8015c1e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015c20:	e009      	b.n	8015c36 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015c22:	f7fc fdef 	bl	8012804 <HAL_GetTick>
 8015c26:	4602      	mov	r2, r0
 8015c28:	693b      	ldr	r3, [r7, #16]
 8015c2a:	1ad3      	subs	r3, r2, r3
 8015c2c:	2b64      	cmp	r3, #100	; 0x64
 8015c2e:	d902      	bls.n	8015c36 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8015c30:	2303      	movs	r3, #3
 8015c32:	75fb      	strb	r3, [r7, #23]
        break;
 8015c34:	e005      	b.n	8015c42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015c36:	4ba8      	ldr	r3, [pc, #672]	; (8015ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d0ef      	beq.n	8015c22 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8015c42:	7dfb      	ldrb	r3, [r7, #23]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d166      	bne.n	8015d16 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015c48:	4ba2      	ldr	r3, [pc, #648]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015c52:	4053      	eors	r3, r2
 8015c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d013      	beq.n	8015c84 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015c5c:	4b9d      	ldr	r3, [pc, #628]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015c64:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015c66:	4b9b      	ldr	r3, [pc, #620]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c6a:	4a9a      	ldr	r2, [pc, #616]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015c70:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015c72:	4b98      	ldr	r3, [pc, #608]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015c76:	4a97      	ldr	r2, [pc, #604]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015c7c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015c7e:	4a95      	ldr	r2, [pc, #596]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015c8e:	d115      	bne.n	8015cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015c90:	f7fc fdb8 	bl	8012804 <HAL_GetTick>
 8015c94:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015c96:	e00b      	b.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015c98:	f7fc fdb4 	bl	8012804 <HAL_GetTick>
 8015c9c:	4602      	mov	r2, r0
 8015c9e:	693b      	ldr	r3, [r7, #16]
 8015ca0:	1ad3      	subs	r3, r2, r3
 8015ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8015ca6:	4293      	cmp	r3, r2
 8015ca8:	d902      	bls.n	8015cb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8015caa:	2303      	movs	r3, #3
 8015cac:	75fb      	strb	r3, [r7, #23]
            break;
 8015cae:	e005      	b.n	8015cbc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015cb0:	4b88      	ldr	r3, [pc, #544]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015cb4:	f003 0302 	and.w	r3, r3, #2
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d0ed      	beq.n	8015c98 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8015cbc:	7dfb      	ldrb	r3, [r7, #23]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d126      	bne.n	8015d10 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015cd0:	d10d      	bne.n	8015cee <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8015cd2:	4b80      	ldr	r3, [pc, #512]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cd4:	691b      	ldr	r3, [r3, #16]
 8015cd6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015ce0:	0919      	lsrs	r1, r3, #4
 8015ce2:	4b7e      	ldr	r3, [pc, #504]	; (8015edc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8015ce4:	400b      	ands	r3, r1
 8015ce6:	497b      	ldr	r1, [pc, #492]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015ce8:	4313      	orrs	r3, r2
 8015cea:	610b      	str	r3, [r1, #16]
 8015cec:	e005      	b.n	8015cfa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8015cee:	4b79      	ldr	r3, [pc, #484]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cf0:	691b      	ldr	r3, [r3, #16]
 8015cf2:	4a78      	ldr	r2, [pc, #480]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cf4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015cf8:	6113      	str	r3, [r2, #16]
 8015cfa:	4b76      	ldr	r3, [pc, #472]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015cfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015d08:	4972      	ldr	r1, [pc, #456]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015d0a:	4313      	orrs	r3, r2
 8015d0c:	670b      	str	r3, [r1, #112]	; 0x70
 8015d0e:	e004      	b.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015d10:	7dfb      	ldrb	r3, [r7, #23]
 8015d12:	75bb      	strb	r3, [r7, #22]
 8015d14:	e001      	b.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d16:	7dfb      	ldrb	r3, [r7, #23]
 8015d18:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	f003 0301 	and.w	r3, r3, #1
 8015d22:	2b00      	cmp	r3, #0
 8015d24:	d07d      	beq.n	8015e22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015d2a:	2b28      	cmp	r3, #40	; 0x28
 8015d2c:	d866      	bhi.n	8015dfc <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8015d2e:	a201      	add	r2, pc, #4	; (adr r2, 8015d34 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8015d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015d34:	08015e03 	.word	0x08015e03
 8015d38:	08015dfd 	.word	0x08015dfd
 8015d3c:	08015dfd 	.word	0x08015dfd
 8015d40:	08015dfd 	.word	0x08015dfd
 8015d44:	08015dfd 	.word	0x08015dfd
 8015d48:	08015dfd 	.word	0x08015dfd
 8015d4c:	08015dfd 	.word	0x08015dfd
 8015d50:	08015dfd 	.word	0x08015dfd
 8015d54:	08015dd9 	.word	0x08015dd9
 8015d58:	08015dfd 	.word	0x08015dfd
 8015d5c:	08015dfd 	.word	0x08015dfd
 8015d60:	08015dfd 	.word	0x08015dfd
 8015d64:	08015dfd 	.word	0x08015dfd
 8015d68:	08015dfd 	.word	0x08015dfd
 8015d6c:	08015dfd 	.word	0x08015dfd
 8015d70:	08015dfd 	.word	0x08015dfd
 8015d74:	08015deb 	.word	0x08015deb
 8015d78:	08015dfd 	.word	0x08015dfd
 8015d7c:	08015dfd 	.word	0x08015dfd
 8015d80:	08015dfd 	.word	0x08015dfd
 8015d84:	08015dfd 	.word	0x08015dfd
 8015d88:	08015dfd 	.word	0x08015dfd
 8015d8c:	08015dfd 	.word	0x08015dfd
 8015d90:	08015dfd 	.word	0x08015dfd
 8015d94:	08015e03 	.word	0x08015e03
 8015d98:	08015dfd 	.word	0x08015dfd
 8015d9c:	08015dfd 	.word	0x08015dfd
 8015da0:	08015dfd 	.word	0x08015dfd
 8015da4:	08015dfd 	.word	0x08015dfd
 8015da8:	08015dfd 	.word	0x08015dfd
 8015dac:	08015dfd 	.word	0x08015dfd
 8015db0:	08015dfd 	.word	0x08015dfd
 8015db4:	08015e03 	.word	0x08015e03
 8015db8:	08015dfd 	.word	0x08015dfd
 8015dbc:	08015dfd 	.word	0x08015dfd
 8015dc0:	08015dfd 	.word	0x08015dfd
 8015dc4:	08015dfd 	.word	0x08015dfd
 8015dc8:	08015dfd 	.word	0x08015dfd
 8015dcc:	08015dfd 	.word	0x08015dfd
 8015dd0:	08015dfd 	.word	0x08015dfd
 8015dd4:	08015e03 	.word	0x08015e03
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	3304      	adds	r3, #4
 8015ddc:	2101      	movs	r1, #1
 8015dde:	4618      	mov	r0, r3
 8015de0:	f000 fda6 	bl	8016930 <RCCEx_PLL2_Config>
 8015de4:	4603      	mov	r3, r0
 8015de6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015de8:	e00c      	b.n	8015e04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	3324      	adds	r3, #36	; 0x24
 8015dee:	2101      	movs	r1, #1
 8015df0:	4618      	mov	r0, r3
 8015df2:	f000 fe4f 	bl	8016a94 <RCCEx_PLL3_Config>
 8015df6:	4603      	mov	r3, r0
 8015df8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8015dfa:	e003      	b.n	8015e04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015dfc:	2301      	movs	r3, #1
 8015dfe:	75fb      	strb	r3, [r7, #23]
      break;
 8015e00:	e000      	b.n	8015e04 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8015e02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e04:	7dfb      	ldrb	r3, [r7, #23]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d109      	bne.n	8015e1e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8015e0a:	4b32      	ldr	r3, [pc, #200]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e0e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e16:	492f      	ldr	r1, [pc, #188]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e18:	4313      	orrs	r3, r2
 8015e1a:	654b      	str	r3, [r1, #84]	; 0x54
 8015e1c:	e001      	b.n	8015e22 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e1e:	7dfb      	ldrb	r3, [r7, #23]
 8015e20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	f003 0302 	and.w	r3, r3, #2
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d037      	beq.n	8015e9e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e32:	2b05      	cmp	r3, #5
 8015e34:	d820      	bhi.n	8015e78 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8015e36:	a201      	add	r2, pc, #4	; (adr r2, 8015e3c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8015e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e3c:	08015e7f 	.word	0x08015e7f
 8015e40:	08015e55 	.word	0x08015e55
 8015e44:	08015e67 	.word	0x08015e67
 8015e48:	08015e7f 	.word	0x08015e7f
 8015e4c:	08015e7f 	.word	0x08015e7f
 8015e50:	08015e7f 	.word	0x08015e7f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	3304      	adds	r3, #4
 8015e58:	2101      	movs	r1, #1
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	f000 fd68 	bl	8016930 <RCCEx_PLL2_Config>
 8015e60:	4603      	mov	r3, r0
 8015e62:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015e64:	e00c      	b.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	3324      	adds	r3, #36	; 0x24
 8015e6a:	2101      	movs	r1, #1
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	f000 fe11 	bl	8016a94 <RCCEx_PLL3_Config>
 8015e72:	4603      	mov	r3, r0
 8015e74:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8015e76:	e003      	b.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015e78:	2301      	movs	r3, #1
 8015e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8015e7c:	e000      	b.n	8015e80 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8015e7e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e80:	7dfb      	ldrb	r3, [r7, #23]
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d109      	bne.n	8015e9a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8015e86:	4b13      	ldr	r3, [pc, #76]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e8a:	f023 0207 	bic.w	r2, r3, #7
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015e92:	4910      	ldr	r1, [pc, #64]	; (8015ed4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e94:	4313      	orrs	r3, r2
 8015e96:	654b      	str	r3, [r1, #84]	; 0x54
 8015e98:	e001      	b.n	8015e9e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e9a:	7dfb      	ldrb	r3, [r7, #23]
 8015e9c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	f003 0304 	and.w	r3, r3, #4
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d040      	beq.n	8015f2c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8015eaa:	687b      	ldr	r3, [r7, #4]
 8015eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015eb0:	2b05      	cmp	r3, #5
 8015eb2:	d827      	bhi.n	8015f04 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8015eb4:	a201      	add	r2, pc, #4	; (adr r2, 8015ebc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8015eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eba:	bf00      	nop
 8015ebc:	08015f0b 	.word	0x08015f0b
 8015ec0:	08015ee1 	.word	0x08015ee1
 8015ec4:	08015ef3 	.word	0x08015ef3
 8015ec8:	08015f0b 	.word	0x08015f0b
 8015ecc:	08015f0b 	.word	0x08015f0b
 8015ed0:	08015f0b 	.word	0x08015f0b
 8015ed4:	58024400 	.word	0x58024400
 8015ed8:	58024800 	.word	0x58024800
 8015edc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	3304      	adds	r3, #4
 8015ee4:	2101      	movs	r1, #1
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f000 fd22 	bl	8016930 <RCCEx_PLL2_Config>
 8015eec:	4603      	mov	r3, r0
 8015eee:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8015ef0:	e00c      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	3324      	adds	r3, #36	; 0x24
 8015ef6:	2101      	movs	r1, #1
 8015ef8:	4618      	mov	r0, r3
 8015efa:	f000 fdcb 	bl	8016a94 <RCCEx_PLL3_Config>
 8015efe:	4603      	mov	r3, r0
 8015f00:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8015f02:	e003      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f04:	2301      	movs	r3, #1
 8015f06:	75fb      	strb	r3, [r7, #23]
      break;
 8015f08:	e000      	b.n	8015f0c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8015f0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015f0c:	7dfb      	ldrb	r3, [r7, #23]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d10a      	bne.n	8015f28 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8015f12:	4bb2      	ldr	r3, [pc, #712]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8015f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015f16:	f023 0207 	bic.w	r2, r3, #7
 8015f1a:	687b      	ldr	r3, [r7, #4]
 8015f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015f20:	49ae      	ldr	r1, [pc, #696]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8015f22:	4313      	orrs	r3, r2
 8015f24:	658b      	str	r3, [r1, #88]	; 0x58
 8015f26:	e001      	b.n	8015f2c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015f28:	7dfb      	ldrb	r3, [r7, #23]
 8015f2a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f003 0320 	and.w	r3, r3, #32
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d044      	beq.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f42:	d01b      	beq.n	8015f7c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8015f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015f48:	d805      	bhi.n	8015f56 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d022      	beq.n	8015f94 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8015f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015f52:	d00a      	beq.n	8015f6a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8015f54:	e01b      	b.n	8015f8e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8015f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015f5a:	d01d      	beq.n	8015f98 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8015f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015f60:	d01c      	beq.n	8015f9c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8015f62:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015f66:	d01b      	beq.n	8015fa0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8015f68:	e011      	b.n	8015f8e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	3304      	adds	r3, #4
 8015f6e:	2100      	movs	r1, #0
 8015f70:	4618      	mov	r0, r3
 8015f72:	f000 fcdd 	bl	8016930 <RCCEx_PLL2_Config>
 8015f76:	4603      	mov	r3, r0
 8015f78:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015f7a:	e012      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	3324      	adds	r3, #36	; 0x24
 8015f80:	2102      	movs	r1, #2
 8015f82:	4618      	mov	r0, r3
 8015f84:	f000 fd86 	bl	8016a94 <RCCEx_PLL3_Config>
 8015f88:	4603      	mov	r3, r0
 8015f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8015f8c:	e009      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015f8e:	2301      	movs	r3, #1
 8015f90:	75fb      	strb	r3, [r7, #23]
      break;
 8015f92:	e006      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8015f94:	bf00      	nop
 8015f96:	e004      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8015f98:	bf00      	nop
 8015f9a:	e002      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8015f9c:	bf00      	nop
 8015f9e:	e000      	b.n	8015fa2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8015fa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015fa2:	7dfb      	ldrb	r3, [r7, #23]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d10a      	bne.n	8015fbe <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015fa8:	4b8c      	ldr	r3, [pc, #560]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8015faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015fac:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015fb6:	4989      	ldr	r1, [pc, #548]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8015fb8:	4313      	orrs	r3, r2
 8015fba:	654b      	str	r3, [r1, #84]	; 0x54
 8015fbc:	e001      	b.n	8015fc2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fbe:	7dfb      	ldrb	r3, [r7, #23]
 8015fc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d044      	beq.n	8016058 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8015fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fd8:	d01b      	beq.n	8016012 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8015fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8015fde:	d805      	bhi.n	8015fec <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d022      	beq.n	801602a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8015fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015fe8:	d00a      	beq.n	8016000 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8015fea:	e01b      	b.n	8016024 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8015fec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015ff0:	d01d      	beq.n	801602e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8015ff2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8015ff6:	d01c      	beq.n	8016032 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8015ff8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8015ffc:	d01b      	beq.n	8016036 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8015ffe:	e011      	b.n	8016024 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	3304      	adds	r3, #4
 8016004:	2100      	movs	r1, #0
 8016006:	4618      	mov	r0, r3
 8016008:	f000 fc92 	bl	8016930 <RCCEx_PLL2_Config>
 801600c:	4603      	mov	r3, r0
 801600e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8016010:	e012      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016012:	687b      	ldr	r3, [r7, #4]
 8016014:	3324      	adds	r3, #36	; 0x24
 8016016:	2102      	movs	r1, #2
 8016018:	4618      	mov	r0, r3
 801601a:	f000 fd3b 	bl	8016a94 <RCCEx_PLL3_Config>
 801601e:	4603      	mov	r3, r0
 8016020:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8016022:	e009      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016024:	2301      	movs	r3, #1
 8016026:	75fb      	strb	r3, [r7, #23]
      break;
 8016028:	e006      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801602a:	bf00      	nop
 801602c:	e004      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 801602e:	bf00      	nop
 8016030:	e002      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8016032:	bf00      	nop
 8016034:	e000      	b.n	8016038 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8016036:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016038:	7dfb      	ldrb	r3, [r7, #23]
 801603a:	2b00      	cmp	r3, #0
 801603c:	d10a      	bne.n	8016054 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801603e:	4b67      	ldr	r3, [pc, #412]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016042:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801604c:	4963      	ldr	r1, [pc, #396]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801604e:	4313      	orrs	r3, r2
 8016050:	658b      	str	r3, [r1, #88]	; 0x58
 8016052:	e001      	b.n	8016058 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016054:	7dfb      	ldrb	r3, [r7, #23]
 8016056:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	681b      	ldr	r3, [r3, #0]
 801605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016060:	2b00      	cmp	r3, #0
 8016062:	d044      	beq.n	80160ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801606a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801606e:	d01b      	beq.n	80160a8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8016070:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016074:	d805      	bhi.n	8016082 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8016076:	2b00      	cmp	r3, #0
 8016078:	d022      	beq.n	80160c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801607a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801607e:	d00a      	beq.n	8016096 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016080:	e01b      	b.n	80160ba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8016082:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016086:	d01d      	beq.n	80160c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016088:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801608c:	d01c      	beq.n	80160c8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801608e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8016092:	d01b      	beq.n	80160cc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8016094:	e011      	b.n	80160ba <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	3304      	adds	r3, #4
 801609a:	2100      	movs	r1, #0
 801609c:	4618      	mov	r0, r3
 801609e:	f000 fc47 	bl	8016930 <RCCEx_PLL2_Config>
 80160a2:	4603      	mov	r3, r0
 80160a4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80160a6:	e012      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	3324      	adds	r3, #36	; 0x24
 80160ac:	2102      	movs	r1, #2
 80160ae:	4618      	mov	r0, r3
 80160b0:	f000 fcf0 	bl	8016a94 <RCCEx_PLL3_Config>
 80160b4:	4603      	mov	r3, r0
 80160b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80160b8:	e009      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80160ba:	2301      	movs	r3, #1
 80160bc:	75fb      	strb	r3, [r7, #23]
      break;
 80160be:	e006      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80160c0:	bf00      	nop
 80160c2:	e004      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80160c4:	bf00      	nop
 80160c6:	e002      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80160c8:	bf00      	nop
 80160ca:	e000      	b.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80160cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80160ce:	7dfb      	ldrb	r3, [r7, #23]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d10a      	bne.n	80160ea <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80160d4:	4b41      	ldr	r3, [pc, #260]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80160d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80160d8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80160e2:	493e      	ldr	r1, [pc, #248]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80160e4:	4313      	orrs	r3, r2
 80160e6:	658b      	str	r3, [r1, #88]	; 0x58
 80160e8:	e001      	b.n	80160ee <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160ea:	7dfb      	ldrb	r3, [r7, #23]
 80160ec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	681b      	ldr	r3, [r3, #0]
 80160f2:	f003 0308 	and.w	r3, r3, #8
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d01a      	beq.n	8016130 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8016104:	d10a      	bne.n	801611c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	3324      	adds	r3, #36	; 0x24
 801610a:	2102      	movs	r1, #2
 801610c:	4618      	mov	r0, r3
 801610e:	f000 fcc1 	bl	8016a94 <RCCEx_PLL3_Config>
 8016112:	4603      	mov	r3, r0
 8016114:	2b00      	cmp	r3, #0
 8016116:	d001      	beq.n	801611c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8016118:	2301      	movs	r3, #1
 801611a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801611c:	4b2f      	ldr	r3, [pc, #188]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801611e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016120:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801612a:	492c      	ldr	r1, [pc, #176]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801612c:	4313      	orrs	r3, r2
 801612e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	f003 0310 	and.w	r3, r3, #16
 8016138:	2b00      	cmp	r3, #0
 801613a:	d01a      	beq.n	8016172 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8016142:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016146:	d10a      	bne.n	801615e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	3324      	adds	r3, #36	; 0x24
 801614c:	2102      	movs	r1, #2
 801614e:	4618      	mov	r0, r3
 8016150:	f000 fca0 	bl	8016a94 <RCCEx_PLL3_Config>
 8016154:	4603      	mov	r3, r0
 8016156:	2b00      	cmp	r3, #0
 8016158:	d001      	beq.n	801615e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 801615a:	2301      	movs	r3, #1
 801615c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801615e:	4b1f      	ldr	r3, [pc, #124]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016162:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801616c:	491b      	ldr	r1, [pc, #108]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801616e:	4313      	orrs	r3, r2
 8016170:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801617a:	2b00      	cmp	r3, #0
 801617c:	d032      	beq.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016188:	d00d      	beq.n	80161a6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801618a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801618e:	d016      	beq.n	80161be <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8016190:	2b00      	cmp	r3, #0
 8016192:	d111      	bne.n	80161b8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	3304      	adds	r3, #4
 8016198:	2100      	movs	r1, #0
 801619a:	4618      	mov	r0, r3
 801619c:	f000 fbc8 	bl	8016930 <RCCEx_PLL2_Config>
 80161a0:	4603      	mov	r3, r0
 80161a2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80161a4:	e00c      	b.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	3324      	adds	r3, #36	; 0x24
 80161aa:	2102      	movs	r1, #2
 80161ac:	4618      	mov	r0, r3
 80161ae:	f000 fc71 	bl	8016a94 <RCCEx_PLL3_Config>
 80161b2:	4603      	mov	r3, r0
 80161b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80161b6:	e003      	b.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80161b8:	2301      	movs	r3, #1
 80161ba:	75fb      	strb	r3, [r7, #23]
      break;
 80161bc:	e000      	b.n	80161c0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80161be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80161c0:	7dfb      	ldrb	r3, [r7, #23]
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	d10c      	bne.n	80161e0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80161c6:	4b05      	ldr	r3, [pc, #20]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80161d4:	4901      	ldr	r1, [pc, #4]	; (80161dc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161d6:	4313      	orrs	r3, r2
 80161d8:	658b      	str	r3, [r1, #88]	; 0x58
 80161da:	e003      	b.n	80161e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80161dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161e0:	7dfb      	ldrb	r3, [r7, #23]
 80161e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d02f      	beq.n	8016250 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80161f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80161fa:	d00c      	beq.n	8016216 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80161fc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8016200:	d015      	beq.n	801622e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8016202:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016206:	d10f      	bne.n	8016228 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016208:	4b71      	ldr	r3, [pc, #452]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801620a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801620c:	4a70      	ldr	r2, [pc, #448]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801620e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016212:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8016214:	e00c      	b.n	8016230 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	3324      	adds	r3, #36	; 0x24
 801621a:	2101      	movs	r1, #1
 801621c:	4618      	mov	r0, r3
 801621e:	f000 fc39 	bl	8016a94 <RCCEx_PLL3_Config>
 8016222:	4603      	mov	r3, r0
 8016224:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8016226:	e003      	b.n	8016230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016228:	2301      	movs	r3, #1
 801622a:	75fb      	strb	r3, [r7, #23]
      break;
 801622c:	e000      	b.n	8016230 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 801622e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016230:	7dfb      	ldrb	r3, [r7, #23]
 8016232:	2b00      	cmp	r3, #0
 8016234:	d10a      	bne.n	801624c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8016236:	4b66      	ldr	r3, [pc, #408]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801623a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016244:	4962      	ldr	r1, [pc, #392]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016246:	4313      	orrs	r3, r2
 8016248:	654b      	str	r3, [r1, #84]	; 0x54
 801624a:	e001      	b.n	8016250 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801624c:	7dfb      	ldrb	r3, [r7, #23]
 801624e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	681b      	ldr	r3, [r3, #0]
 8016254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016258:	2b00      	cmp	r3, #0
 801625a:	d029      	beq.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016260:	2b00      	cmp	r3, #0
 8016262:	d003      	beq.n	801626c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8016264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016268:	d007      	beq.n	801627a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801626a:	e00f      	b.n	801628c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801626c:	4b58      	ldr	r3, [pc, #352]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016270:	4a57      	ldr	r2, [pc, #348]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016272:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016276:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016278:	e00b      	b.n	8016292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801627a:	687b      	ldr	r3, [r7, #4]
 801627c:	3304      	adds	r3, #4
 801627e:	2102      	movs	r1, #2
 8016280:	4618      	mov	r0, r3
 8016282:	f000 fb55 	bl	8016930 <RCCEx_PLL2_Config>
 8016286:	4603      	mov	r3, r0
 8016288:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801628a:	e002      	b.n	8016292 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801628c:	2301      	movs	r3, #1
 801628e:	75fb      	strb	r3, [r7, #23]
      break;
 8016290:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016292:	7dfb      	ldrb	r3, [r7, #23]
 8016294:	2b00      	cmp	r3, #0
 8016296:	d109      	bne.n	80162ac <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016298:	4b4d      	ldr	r3, [pc, #308]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801629a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801629c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80162a4:	494a      	ldr	r1, [pc, #296]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80162a6:	4313      	orrs	r3, r2
 80162a8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80162aa:	e001      	b.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80162ac:	7dfb      	ldrb	r3, [r7, #23]
 80162ae:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d00a      	beq.n	80162d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	3324      	adds	r3, #36	; 0x24
 80162c0:	2102      	movs	r1, #2
 80162c2:	4618      	mov	r0, r3
 80162c4:	f000 fbe6 	bl	8016a94 <RCCEx_PLL3_Config>
 80162c8:	4603      	mov	r3, r0
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d001      	beq.n	80162d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80162ce:	2301      	movs	r3, #1
 80162d0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80162da:	2b00      	cmp	r3, #0
 80162dc:	d02f      	beq.n	801633e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80162e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80162e6:	d00c      	beq.n	8016302 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80162e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80162ec:	d802      	bhi.n	80162f4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d011      	beq.n	8016316 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80162f2:	e00d      	b.n	8016310 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80162f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80162f8:	d00f      	beq.n	801631a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80162fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80162fe:	d00e      	beq.n	801631e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8016300:	e006      	b.n	8016310 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8016302:	4b33      	ldr	r3, [pc, #204]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016306:	4a32      	ldr	r2, [pc, #200]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801630c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 801630e:	e007      	b.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016310:	2301      	movs	r3, #1
 8016312:	75fb      	strb	r3, [r7, #23]
      break;
 8016314:	e004      	b.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8016316:	bf00      	nop
 8016318:	e002      	b.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801631a:	bf00      	nop
 801631c:	e000      	b.n	8016320 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 801631e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016320:	7dfb      	ldrb	r3, [r7, #23]
 8016322:	2b00      	cmp	r3, #0
 8016324:	d109      	bne.n	801633a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8016326:	4b2a      	ldr	r3, [pc, #168]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801632a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016332:	4927      	ldr	r1, [pc, #156]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016334:	4313      	orrs	r3, r2
 8016336:	654b      	str	r3, [r1, #84]	; 0x54
 8016338:	e001      	b.n	801633e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801633a:	7dfb      	ldrb	r3, [r7, #23]
 801633c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801633e:	687b      	ldr	r3, [r7, #4]
 8016340:	681b      	ldr	r3, [r3, #0]
 8016342:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8016346:	2b00      	cmp	r3, #0
 8016348:	d008      	beq.n	801635c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801634a:	4b21      	ldr	r3, [pc, #132]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801634c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801634e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016356:	491e      	ldr	r1, [pc, #120]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016358:	4313      	orrs	r3, r2
 801635a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	681b      	ldr	r3, [r3, #0]
 8016360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016364:	2b00      	cmp	r3, #0
 8016366:	d008      	beq.n	801637a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016368:	4b19      	ldr	r3, [pc, #100]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801636a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801636c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016374:	4916      	ldr	r1, [pc, #88]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016376:	4313      	orrs	r3, r2
 8016378:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801637a:	687b      	ldr	r3, [r7, #4]
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016382:	2b00      	cmp	r3, #0
 8016384:	d00d      	beq.n	80163a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016386:	4b12      	ldr	r3, [pc, #72]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016388:	691b      	ldr	r3, [r3, #16]
 801638a:	4a11      	ldr	r2, [pc, #68]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801638c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016390:	6113      	str	r3, [r2, #16]
 8016392:	4b0f      	ldr	r3, [pc, #60]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016394:	691a      	ldr	r2, [r3, #16]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801639c:	490c      	ldr	r1, [pc, #48]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801639e:	4313      	orrs	r3, r2
 80163a0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	681b      	ldr	r3, [r3, #0]
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	da08      	bge.n	80163bc <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80163aa:	4b09      	ldr	r3, [pc, #36]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80163ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80163b6:	4906      	ldr	r1, [pc, #24]	; (80163d0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80163b8:	4313      	orrs	r3, r2
 80163ba:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80163bc:	7dbb      	ldrb	r3, [r7, #22]
 80163be:	2b00      	cmp	r3, #0
 80163c0:	d101      	bne.n	80163c6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80163c2:	2300      	movs	r3, #0
 80163c4:	e000      	b.n	80163c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80163c6:	2301      	movs	r3, #1
}
 80163c8:	4618      	mov	r0, r3
 80163ca:	3718      	adds	r7, #24
 80163cc:	46bd      	mov	sp, r7
 80163ce:	bd80      	pop	{r7, pc}
 80163d0:	58024400 	.word	0x58024400

080163d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80163d4:	b580      	push	{r7, lr}
 80163d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80163d8:	f7ff f8c2 	bl	8015560 <HAL_RCC_GetHCLKFreq>
 80163dc:	4601      	mov	r1, r0
 80163de:	4b06      	ldr	r3, [pc, #24]	; (80163f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80163e0:	6a1b      	ldr	r3, [r3, #32]
 80163e2:	091b      	lsrs	r3, r3, #4
 80163e4:	f003 0307 	and.w	r3, r3, #7
 80163e8:	4a04      	ldr	r2, [pc, #16]	; (80163fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80163ea:	5cd3      	ldrb	r3, [r2, r3]
 80163ec:	f003 031f 	and.w	r3, r3, #31
 80163f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80163f4:	4618      	mov	r0, r3
 80163f6:	bd80      	pop	{r7, pc}
 80163f8:	58024400 	.word	0x58024400
 80163fc:	0801f388 	.word	0x0801f388

08016400 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8016400:	b480      	push	{r7}
 8016402:	b089      	sub	sp, #36	; 0x24
 8016404:	af00      	add	r7, sp, #0
 8016406:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016408:	4b9d      	ldr	r3, [pc, #628]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801640c:	f003 0303 	and.w	r3, r3, #3
 8016410:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8016412:	4b9b      	ldr	r3, [pc, #620]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016416:	0b1b      	lsrs	r3, r3, #12
 8016418:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801641c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801641e:	4b98      	ldr	r3, [pc, #608]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016422:	091b      	lsrs	r3, r3, #4
 8016424:	f003 0301 	and.w	r3, r3, #1
 8016428:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 801642a:	4b95      	ldr	r3, [pc, #596]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801642c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801642e:	08db      	lsrs	r3, r3, #3
 8016430:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016434:	693a      	ldr	r2, [r7, #16]
 8016436:	fb02 f303 	mul.w	r3, r2, r3
 801643a:	ee07 3a90 	vmov	s15, r3
 801643e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016442:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	2b00      	cmp	r3, #0
 801644a:	f000 810a 	beq.w	8016662 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 801644e:	69bb      	ldr	r3, [r7, #24]
 8016450:	2b01      	cmp	r3, #1
 8016452:	d05a      	beq.n	801650a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8016454:	2b01      	cmp	r3, #1
 8016456:	d302      	bcc.n	801645e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8016458:	2b02      	cmp	r3, #2
 801645a:	d078      	beq.n	801654e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 801645c:	e099      	b.n	8016592 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801645e:	4b88      	ldr	r3, [pc, #544]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	f003 0320 	and.w	r3, r3, #32
 8016466:	2b00      	cmp	r3, #0
 8016468:	d02d      	beq.n	80164c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801646a:	4b85      	ldr	r3, [pc, #532]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	08db      	lsrs	r3, r3, #3
 8016470:	f003 0303 	and.w	r3, r3, #3
 8016474:	4a83      	ldr	r2, [pc, #524]	; (8016684 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8016476:	fa22 f303 	lsr.w	r3, r2, r3
 801647a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	ee07 3a90 	vmov	s15, r3
 8016482:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016486:	697b      	ldr	r3, [r7, #20]
 8016488:	ee07 3a90 	vmov	s15, r3
 801648c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016490:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016494:	4b7a      	ldr	r3, [pc, #488]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801649c:	ee07 3a90 	vmov	s15, r3
 80164a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80164a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80164a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80164ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80164b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80164b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80164b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80164bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80164c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80164c4:	e087      	b.n	80165d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	ee07 3a90 	vmov	s15, r3
 80164cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80164d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801668c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80164d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80164d8:	4b69      	ldr	r3, [pc, #420]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80164da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80164e0:	ee07 3a90 	vmov	s15, r3
 80164e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80164e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80164ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80164f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80164f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80164f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80164fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016500:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016504:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016508:	e065      	b.n	80165d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801650a:	697b      	ldr	r3, [r7, #20]
 801650c:	ee07 3a90 	vmov	s15, r3
 8016510:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016514:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801651c:	4b58      	ldr	r3, [pc, #352]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801651e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016524:	ee07 3a90 	vmov	s15, r3
 8016528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801652c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016530:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801653c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016548:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801654c:	e043      	b.n	80165d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801654e:	697b      	ldr	r3, [r7, #20]
 8016550:	ee07 3a90 	vmov	s15, r3
 8016554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016558:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016694 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 801655c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016560:	4b47      	ldr	r3, [pc, #284]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016568:	ee07 3a90 	vmov	s15, r3
 801656c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016570:	ed97 6a03 	vldr	s12, [r7, #12]
 8016574:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801657c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016580:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016588:	ee67 7a27 	vmul.f32	s15, s14, s15
 801658c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016590:	e021      	b.n	80165d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	ee07 3a90 	vmov	s15, r3
 8016598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801659c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016690 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80165a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80165a4:	4b36      	ldr	r3, [pc, #216]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80165a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80165ac:	ee07 3a90 	vmov	s15, r3
 80165b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80165b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80165b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016688 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80165bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80165c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80165c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80165c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80165cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80165d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80165d4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80165d6:	4b2a      	ldr	r3, [pc, #168]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80165d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80165da:	0a5b      	lsrs	r3, r3, #9
 80165dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80165e0:	ee07 3a90 	vmov	s15, r3
 80165e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80165e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80165ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80165f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80165f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80165f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80165fc:	ee17 2a90 	vmov	r2, s15
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8016604:	4b1e      	ldr	r3, [pc, #120]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016608:	0c1b      	lsrs	r3, r3, #16
 801660a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801660e:	ee07 3a90 	vmov	s15, r3
 8016612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016616:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801661a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801661e:	edd7 6a07 	vldr	s13, [r7, #28]
 8016622:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016626:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801662a:	ee17 2a90 	vmov	r2, s15
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8016632:	4b13      	ldr	r3, [pc, #76]	; (8016680 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016636:	0e1b      	lsrs	r3, r3, #24
 8016638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801663c:	ee07 3a90 	vmov	s15, r3
 8016640:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016648:	ee37 7a87 	vadd.f32	s14, s15, s14
 801664c:	edd7 6a07 	vldr	s13, [r7, #28]
 8016650:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016658:	ee17 2a90 	vmov	r2, s15
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016660:	e008      	b.n	8016674 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	2200      	movs	r2, #0
 8016666:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016668:	687b      	ldr	r3, [r7, #4]
 801666a:	2200      	movs	r2, #0
 801666c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	2200      	movs	r2, #0
 8016672:	609a      	str	r2, [r3, #8]
}
 8016674:	bf00      	nop
 8016676:	3724      	adds	r7, #36	; 0x24
 8016678:	46bd      	mov	sp, r7
 801667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667e:	4770      	bx	lr
 8016680:	58024400 	.word	0x58024400
 8016684:	03d09000 	.word	0x03d09000
 8016688:	46000000 	.word	0x46000000
 801668c:	4c742400 	.word	0x4c742400
 8016690:	4a742400 	.word	0x4a742400
 8016694:	4af42400 	.word	0x4af42400

08016698 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8016698:	b480      	push	{r7}
 801669a:	b089      	sub	sp, #36	; 0x24
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80166a0:	4b9d      	ldr	r3, [pc, #628]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80166a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166a4:	f003 0303 	and.w	r3, r3, #3
 80166a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80166aa:	4b9b      	ldr	r3, [pc, #620]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80166ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166ae:	0d1b      	lsrs	r3, r3, #20
 80166b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80166b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80166b6:	4b98      	ldr	r3, [pc, #608]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80166b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ba:	0a1b      	lsrs	r3, r3, #8
 80166bc:	f003 0301 	and.w	r3, r3, #1
 80166c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80166c2:	4b95      	ldr	r3, [pc, #596]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80166c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80166c6:	08db      	lsrs	r3, r3, #3
 80166c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166cc:	693a      	ldr	r2, [r7, #16]
 80166ce:	fb02 f303 	mul.w	r3, r2, r3
 80166d2:	ee07 3a90 	vmov	s15, r3
 80166d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80166da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	f000 810a 	beq.w	80168fa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80166e6:	69bb      	ldr	r3, [r7, #24]
 80166e8:	2b01      	cmp	r3, #1
 80166ea:	d05a      	beq.n	80167a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80166ec:	2b01      	cmp	r3, #1
 80166ee:	d302      	bcc.n	80166f6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80166f0:	2b02      	cmp	r3, #2
 80166f2:	d078      	beq.n	80167e6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80166f4:	e099      	b.n	801682a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80166f6:	4b88      	ldr	r3, [pc, #544]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f003 0320 	and.w	r3, r3, #32
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d02d      	beq.n	801675e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8016702:	4b85      	ldr	r3, [pc, #532]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	08db      	lsrs	r3, r3, #3
 8016708:	f003 0303 	and.w	r3, r3, #3
 801670c:	4a83      	ldr	r2, [pc, #524]	; (801691c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 801670e:	fa22 f303 	lsr.w	r3, r2, r3
 8016712:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016714:	68bb      	ldr	r3, [r7, #8]
 8016716:	ee07 3a90 	vmov	s15, r3
 801671a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801671e:	697b      	ldr	r3, [r7, #20]
 8016720:	ee07 3a90 	vmov	s15, r3
 8016724:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016728:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801672c:	4b7a      	ldr	r3, [pc, #488]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801672e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016734:	ee07 3a90 	vmov	s15, r3
 8016738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801673c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016740:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016744:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016748:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801674c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016750:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016754:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016758:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 801675c:	e087      	b.n	801686e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	ee07 3a90 	vmov	s15, r3
 8016764:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016768:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016924 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 801676c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016770:	4b69      	ldr	r3, [pc, #420]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016778:	ee07 3a90 	vmov	s15, r3
 801677c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016780:	ed97 6a03 	vldr	s12, [r7, #12]
 8016784:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016788:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801678c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016790:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016794:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016798:	ee67 7a27 	vmul.f32	s15, s14, s15
 801679c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80167a0:	e065      	b.n	801686e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80167a2:	697b      	ldr	r3, [r7, #20]
 80167a4:	ee07 3a90 	vmov	s15, r3
 80167a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80167b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80167b4:	4b58      	ldr	r3, [pc, #352]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167bc:	ee07 3a90 	vmov	s15, r3
 80167c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80167c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80167c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80167cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80167d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80167d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80167d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80167dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80167e4:	e043      	b.n	801686e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80167e6:	697b      	ldr	r3, [r7, #20]
 80167e8:	ee07 3a90 	vmov	s15, r3
 80167ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801692c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80167f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80167f8:	4b47      	ldr	r3, [pc, #284]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80167fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80167fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016800:	ee07 3a90 	vmov	s15, r3
 8016804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016808:	ed97 6a03 	vldr	s12, [r7, #12]
 801680c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016810:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016814:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801681c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016824:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016828:	e021      	b.n	801686e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 801682a:	697b      	ldr	r3, [r7, #20]
 801682c:	ee07 3a90 	vmov	s15, r3
 8016830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016834:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016928 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016838:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801683c:	4b36      	ldr	r3, [pc, #216]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801683e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016844:	ee07 3a90 	vmov	s15, r3
 8016848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801684c:	ed97 6a03 	vldr	s12, [r7, #12]
 8016850:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016920 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016854:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016858:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801685c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016860:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016868:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 801686c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 801686e:	4b2a      	ldr	r3, [pc, #168]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016872:	0a5b      	lsrs	r3, r3, #9
 8016874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016878:	ee07 3a90 	vmov	s15, r3
 801687c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016880:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016888:	edd7 6a07 	vldr	s13, [r7, #28]
 801688c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016894:	ee17 2a90 	vmov	r2, s15
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 801689c:	4b1e      	ldr	r3, [pc, #120]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168a0:	0c1b      	lsrs	r3, r3, #16
 80168a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168a6:	ee07 3a90 	vmov	s15, r3
 80168aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80168b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80168ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80168be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168c2:	ee17 2a90 	vmov	r2, s15
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80168ca:	4b13      	ldr	r3, [pc, #76]	; (8016918 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80168cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80168ce:	0e1b      	lsrs	r3, r3, #24
 80168d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168d4:	ee07 3a90 	vmov	s15, r3
 80168d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80168e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80168e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80168ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168f0:	ee17 2a90 	vmov	r2, s15
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80168f8:	e008      	b.n	801690c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	2200      	movs	r2, #0
 80168fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	2200      	movs	r2, #0
 8016904:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	2200      	movs	r2, #0
 801690a:	609a      	str	r2, [r3, #8]
}
 801690c:	bf00      	nop
 801690e:	3724      	adds	r7, #36	; 0x24
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	58024400 	.word	0x58024400
 801691c:	03d09000 	.word	0x03d09000
 8016920:	46000000 	.word	0x46000000
 8016924:	4c742400 	.word	0x4c742400
 8016928:	4a742400 	.word	0x4a742400
 801692c:	4af42400 	.word	0x4af42400

08016930 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016930:	b580      	push	{r7, lr}
 8016932:	b084      	sub	sp, #16
 8016934:	af00      	add	r7, sp, #0
 8016936:	6078      	str	r0, [r7, #4]
 8016938:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801693a:	2300      	movs	r3, #0
 801693c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801693e:	4b53      	ldr	r3, [pc, #332]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016942:	f003 0303 	and.w	r3, r3, #3
 8016946:	2b03      	cmp	r3, #3
 8016948:	d101      	bne.n	801694e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801694a:	2301      	movs	r3, #1
 801694c:	e099      	b.n	8016a82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801694e:	4b4f      	ldr	r3, [pc, #316]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4a4e      	ldr	r2, [pc, #312]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016954:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016958:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801695a:	f7fb ff53 	bl	8012804 <HAL_GetTick>
 801695e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016960:	e008      	b.n	8016974 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016962:	f7fb ff4f 	bl	8012804 <HAL_GetTick>
 8016966:	4602      	mov	r2, r0
 8016968:	68bb      	ldr	r3, [r7, #8]
 801696a:	1ad3      	subs	r3, r2, r3
 801696c:	2b02      	cmp	r3, #2
 801696e:	d901      	bls.n	8016974 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016970:	2303      	movs	r3, #3
 8016972:	e086      	b.n	8016a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016974:	4b45      	ldr	r3, [pc, #276]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801697c:	2b00      	cmp	r3, #0
 801697e:	d1f0      	bne.n	8016962 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016980:	4b42      	ldr	r3, [pc, #264]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016984:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	031b      	lsls	r3, r3, #12
 801698e:	493f      	ldr	r1, [pc, #252]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016990:	4313      	orrs	r3, r2
 8016992:	628b      	str	r3, [r1, #40]	; 0x28
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	685b      	ldr	r3, [r3, #4]
 8016998:	3b01      	subs	r3, #1
 801699a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	689b      	ldr	r3, [r3, #8]
 80169a2:	3b01      	subs	r3, #1
 80169a4:	025b      	lsls	r3, r3, #9
 80169a6:	b29b      	uxth	r3, r3
 80169a8:	431a      	orrs	r2, r3
 80169aa:	687b      	ldr	r3, [r7, #4]
 80169ac:	68db      	ldr	r3, [r3, #12]
 80169ae:	3b01      	subs	r3, #1
 80169b0:	041b      	lsls	r3, r3, #16
 80169b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80169b6:	431a      	orrs	r2, r3
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	691b      	ldr	r3, [r3, #16]
 80169bc:	3b01      	subs	r3, #1
 80169be:	061b      	lsls	r3, r3, #24
 80169c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80169c4:	4931      	ldr	r1, [pc, #196]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169c6:	4313      	orrs	r3, r2
 80169c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80169ca:	4b30      	ldr	r3, [pc, #192]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	695b      	ldr	r3, [r3, #20]
 80169d6:	492d      	ldr	r1, [pc, #180]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169d8:	4313      	orrs	r3, r2
 80169da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80169dc:	4b2b      	ldr	r3, [pc, #172]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e0:	f023 0220 	bic.w	r2, r3, #32
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	699b      	ldr	r3, [r3, #24]
 80169e8:	4928      	ldr	r1, [pc, #160]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169ea:	4313      	orrs	r3, r2
 80169ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80169ee:	4b27      	ldr	r3, [pc, #156]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169f2:	4a26      	ldr	r2, [pc, #152]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169f4:	f023 0310 	bic.w	r3, r3, #16
 80169f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80169fa:	4b24      	ldr	r3, [pc, #144]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 80169fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80169fe:	4b24      	ldr	r3, [pc, #144]	; (8016a90 <RCCEx_PLL2_Config+0x160>)
 8016a00:	4013      	ands	r3, r2
 8016a02:	687a      	ldr	r2, [r7, #4]
 8016a04:	69d2      	ldr	r2, [r2, #28]
 8016a06:	00d2      	lsls	r2, r2, #3
 8016a08:	4920      	ldr	r1, [pc, #128]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a0a:	4313      	orrs	r3, r2
 8016a0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016a0e:	4b1f      	ldr	r3, [pc, #124]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a12:	4a1e      	ldr	r2, [pc, #120]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a14:	f043 0310 	orr.w	r3, r3, #16
 8016a18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016a1a:	683b      	ldr	r3, [r7, #0]
 8016a1c:	2b00      	cmp	r3, #0
 8016a1e:	d106      	bne.n	8016a2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8016a20:	4b1a      	ldr	r3, [pc, #104]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a24:	4a19      	ldr	r2, [pc, #100]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016a2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016a2c:	e00f      	b.n	8016a4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016a2e:	683b      	ldr	r3, [r7, #0]
 8016a30:	2b01      	cmp	r3, #1
 8016a32:	d106      	bne.n	8016a42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016a34:	4b15      	ldr	r3, [pc, #84]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a38:	4a14      	ldr	r2, [pc, #80]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016a3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016a40:	e005      	b.n	8016a4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8016a42:	4b12      	ldr	r3, [pc, #72]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a46:	4a11      	ldr	r2, [pc, #68]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016a4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016a4e:	4b0f      	ldr	r3, [pc, #60]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	4a0e      	ldr	r2, [pc, #56]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016a58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016a5a:	f7fb fed3 	bl	8012804 <HAL_GetTick>
 8016a5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016a60:	e008      	b.n	8016a74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016a62:	f7fb fecf 	bl	8012804 <HAL_GetTick>
 8016a66:	4602      	mov	r2, r0
 8016a68:	68bb      	ldr	r3, [r7, #8]
 8016a6a:	1ad3      	subs	r3, r2, r3
 8016a6c:	2b02      	cmp	r3, #2
 8016a6e:	d901      	bls.n	8016a74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016a70:	2303      	movs	r3, #3
 8016a72:	e006      	b.n	8016a82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016a74:	4b05      	ldr	r3, [pc, #20]	; (8016a8c <RCCEx_PLL2_Config+0x15c>)
 8016a76:	681b      	ldr	r3, [r3, #0]
 8016a78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d0f0      	beq.n	8016a62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a82:	4618      	mov	r0, r3
 8016a84:	3710      	adds	r7, #16
 8016a86:	46bd      	mov	sp, r7
 8016a88:	bd80      	pop	{r7, pc}
 8016a8a:	bf00      	nop
 8016a8c:	58024400 	.word	0x58024400
 8016a90:	ffff0007 	.word	0xffff0007

08016a94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b084      	sub	sp, #16
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016a9e:	2300      	movs	r3, #0
 8016aa0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016aa2:	4b53      	ldr	r3, [pc, #332]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016aa6:	f003 0303 	and.w	r3, r3, #3
 8016aaa:	2b03      	cmp	r3, #3
 8016aac:	d101      	bne.n	8016ab2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016aae:	2301      	movs	r3, #1
 8016ab0:	e099      	b.n	8016be6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8016ab2:	4b4f      	ldr	r3, [pc, #316]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	4a4e      	ldr	r2, [pc, #312]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016abc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016abe:	f7fb fea1 	bl	8012804 <HAL_GetTick>
 8016ac2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016ac4:	e008      	b.n	8016ad8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016ac6:	f7fb fe9d 	bl	8012804 <HAL_GetTick>
 8016aca:	4602      	mov	r2, r0
 8016acc:	68bb      	ldr	r3, [r7, #8]
 8016ace:	1ad3      	subs	r3, r2, r3
 8016ad0:	2b02      	cmp	r3, #2
 8016ad2:	d901      	bls.n	8016ad8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016ad4:	2303      	movs	r3, #3
 8016ad6:	e086      	b.n	8016be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016ad8:	4b45      	ldr	r3, [pc, #276]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d1f0      	bne.n	8016ac6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016ae4:	4b42      	ldr	r3, [pc, #264]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016ae8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	051b      	lsls	r3, r3, #20
 8016af2:	493f      	ldr	r1, [pc, #252]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016af4:	4313      	orrs	r3, r2
 8016af6:	628b      	str	r3, [r1, #40]	; 0x28
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	685b      	ldr	r3, [r3, #4]
 8016afc:	3b01      	subs	r3, #1
 8016afe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	689b      	ldr	r3, [r3, #8]
 8016b06:	3b01      	subs	r3, #1
 8016b08:	025b      	lsls	r3, r3, #9
 8016b0a:	b29b      	uxth	r3, r3
 8016b0c:	431a      	orrs	r2, r3
 8016b0e:	687b      	ldr	r3, [r7, #4]
 8016b10:	68db      	ldr	r3, [r3, #12]
 8016b12:	3b01      	subs	r3, #1
 8016b14:	041b      	lsls	r3, r3, #16
 8016b16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016b1a:	431a      	orrs	r2, r3
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	691b      	ldr	r3, [r3, #16]
 8016b20:	3b01      	subs	r3, #1
 8016b22:	061b      	lsls	r3, r3, #24
 8016b24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016b28:	4931      	ldr	r1, [pc, #196]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b2a:	4313      	orrs	r3, r2
 8016b2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016b2e:	4b30      	ldr	r3, [pc, #192]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	695b      	ldr	r3, [r3, #20]
 8016b3a:	492d      	ldr	r1, [pc, #180]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b3c:	4313      	orrs	r3, r2
 8016b3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016b40:	4b2b      	ldr	r3, [pc, #172]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	699b      	ldr	r3, [r3, #24]
 8016b4c:	4928      	ldr	r1, [pc, #160]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b4e:	4313      	orrs	r3, r2
 8016b50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016b52:	4b27      	ldr	r3, [pc, #156]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b56:	4a26      	ldr	r2, [pc, #152]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016b5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016b5e:	4b24      	ldr	r3, [pc, #144]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016b62:	4b24      	ldr	r3, [pc, #144]	; (8016bf4 <RCCEx_PLL3_Config+0x160>)
 8016b64:	4013      	ands	r3, r2
 8016b66:	687a      	ldr	r2, [r7, #4]
 8016b68:	69d2      	ldr	r2, [r2, #28]
 8016b6a:	00d2      	lsls	r2, r2, #3
 8016b6c:	4920      	ldr	r1, [pc, #128]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b6e:	4313      	orrs	r3, r2
 8016b70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8016b72:	4b1f      	ldr	r3, [pc, #124]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b76:	4a1e      	ldr	r2, [pc, #120]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016b7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	d106      	bne.n	8016b92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016b84:	4b1a      	ldr	r3, [pc, #104]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b88:	4a19      	ldr	r2, [pc, #100]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016b90:	e00f      	b.n	8016bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016b92:	683b      	ldr	r3, [r7, #0]
 8016b94:	2b01      	cmp	r3, #1
 8016b96:	d106      	bne.n	8016ba6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016b98:	4b15      	ldr	r3, [pc, #84]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016b9c:	4a14      	ldr	r2, [pc, #80]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016b9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016ba2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016ba4:	e005      	b.n	8016bb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016ba6:	4b12      	ldr	r3, [pc, #72]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016baa:	4a11      	ldr	r2, [pc, #68]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016bac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016bb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016bb2:	4b0f      	ldr	r3, [pc, #60]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4a0e      	ldr	r2, [pc, #56]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016bbe:	f7fb fe21 	bl	8012804 <HAL_GetTick>
 8016bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016bc4:	e008      	b.n	8016bd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016bc6:	f7fb fe1d 	bl	8012804 <HAL_GetTick>
 8016bca:	4602      	mov	r2, r0
 8016bcc:	68bb      	ldr	r3, [r7, #8]
 8016bce:	1ad3      	subs	r3, r2, r3
 8016bd0:	2b02      	cmp	r3, #2
 8016bd2:	d901      	bls.n	8016bd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016bd4:	2303      	movs	r3, #3
 8016bd6:	e006      	b.n	8016be6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016bd8:	4b05      	ldr	r3, [pc, #20]	; (8016bf0 <RCCEx_PLL3_Config+0x15c>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d0f0      	beq.n	8016bc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8016be6:	4618      	mov	r0, r3
 8016be8:	3710      	adds	r7, #16
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	58024400 	.word	0x58024400
 8016bf4:	ffff0007 	.word	0xffff0007

08016bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016bf8:	b580      	push	{r7, lr}
 8016bfa:	b082      	sub	sp, #8
 8016bfc:	af00      	add	r7, sp, #0
 8016bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	2b00      	cmp	r3, #0
 8016c04:	d101      	bne.n	8016c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016c06:	2301      	movs	r3, #1
 8016c08:	e01d      	b.n	8016c46 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016c10:	b2db      	uxtb	r3, r3
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d106      	bne.n	8016c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	2200      	movs	r2, #0
 8016c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016c1e:	6878      	ldr	r0, [r7, #4]
 8016c20:	f7eb f8b2 	bl	8001d88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	2202      	movs	r2, #2
 8016c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	681a      	ldr	r2, [r3, #0]
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	3304      	adds	r3, #4
 8016c34:	4619      	mov	r1, r3
 8016c36:	4610      	mov	r0, r2
 8016c38:	f000 fb18 	bl	801726c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016c3c:	687b      	ldr	r3, [r7, #4]
 8016c3e:	2201      	movs	r2, #1
 8016c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016c44:	2300      	movs	r3, #0
}
 8016c46:	4618      	mov	r0, r3
 8016c48:	3708      	adds	r7, #8
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}
	...

08016c50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016c50:	b480      	push	{r7}
 8016c52:	b085      	sub	sp, #20
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	68da      	ldr	r2, [r3, #12]
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f042 0201 	orr.w	r2, r2, #1
 8016c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	689a      	ldr	r2, [r3, #8]
 8016c6e:	4b0c      	ldr	r3, [pc, #48]	; (8016ca0 <HAL_TIM_Base_Start_IT+0x50>)
 8016c70:	4013      	ands	r3, r2
 8016c72:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	2b06      	cmp	r3, #6
 8016c78:	d00b      	beq.n	8016c92 <HAL_TIM_Base_Start_IT+0x42>
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c80:	d007      	beq.n	8016c92 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	681a      	ldr	r2, [r3, #0]
 8016c88:	687b      	ldr	r3, [r7, #4]
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f042 0201 	orr.w	r2, r2, #1
 8016c90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016c92:	2300      	movs	r3, #0
}
 8016c94:	4618      	mov	r0, r3
 8016c96:	3714      	adds	r7, #20
 8016c98:	46bd      	mov	sp, r7
 8016c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9e:	4770      	bx	lr
 8016ca0:	00010007 	.word	0x00010007

08016ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016ca4:	b580      	push	{r7, lr}
 8016ca6:	b082      	sub	sp, #8
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	2b00      	cmp	r3, #0
 8016cb0:	d101      	bne.n	8016cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016cb2:	2301      	movs	r3, #1
 8016cb4:	e01d      	b.n	8016cf2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016cbc:	b2db      	uxtb	r3, r3
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d106      	bne.n	8016cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2200      	movs	r2, #0
 8016cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016cca:	6878      	ldr	r0, [r7, #4]
 8016ccc:	f7ea fff6 	bl	8001cbc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	2202      	movs	r2, #2
 8016cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681a      	ldr	r2, [r3, #0]
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	3304      	adds	r3, #4
 8016ce0:	4619      	mov	r1, r3
 8016ce2:	4610      	mov	r0, r2
 8016ce4:	f000 fac2 	bl	801726c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	2201      	movs	r2, #1
 8016cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016cf0:	2300      	movs	r3, #0
}
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	3708      	adds	r7, #8
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	bd80      	pop	{r7, pc}
	...

08016cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016cfc:	b580      	push	{r7, lr}
 8016cfe:	b084      	sub	sp, #16
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	6078      	str	r0, [r7, #4]
 8016d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2201      	movs	r2, #1
 8016d0c:	6839      	ldr	r1, [r7, #0]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f000 fe14 	bl	801793c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	4a1e      	ldr	r2, [pc, #120]	; (8016d94 <HAL_TIM_PWM_Start+0x98>)
 8016d1a:	4293      	cmp	r3, r2
 8016d1c:	d013      	beq.n	8016d46 <HAL_TIM_PWM_Start+0x4a>
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	4a1d      	ldr	r2, [pc, #116]	; (8016d98 <HAL_TIM_PWM_Start+0x9c>)
 8016d24:	4293      	cmp	r3, r2
 8016d26:	d00e      	beq.n	8016d46 <HAL_TIM_PWM_Start+0x4a>
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	4a1b      	ldr	r2, [pc, #108]	; (8016d9c <HAL_TIM_PWM_Start+0xa0>)
 8016d2e:	4293      	cmp	r3, r2
 8016d30:	d009      	beq.n	8016d46 <HAL_TIM_PWM_Start+0x4a>
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	681b      	ldr	r3, [r3, #0]
 8016d36:	4a1a      	ldr	r2, [pc, #104]	; (8016da0 <HAL_TIM_PWM_Start+0xa4>)
 8016d38:	4293      	cmp	r3, r2
 8016d3a:	d004      	beq.n	8016d46 <HAL_TIM_PWM_Start+0x4a>
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	681b      	ldr	r3, [r3, #0]
 8016d40:	4a18      	ldr	r2, [pc, #96]	; (8016da4 <HAL_TIM_PWM_Start+0xa8>)
 8016d42:	4293      	cmp	r3, r2
 8016d44:	d101      	bne.n	8016d4a <HAL_TIM_PWM_Start+0x4e>
 8016d46:	2301      	movs	r3, #1
 8016d48:	e000      	b.n	8016d4c <HAL_TIM_PWM_Start+0x50>
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d007      	beq.n	8016d60 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	681b      	ldr	r3, [r3, #0]
 8016d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8016d5e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	689a      	ldr	r2, [r3, #8]
 8016d66:	4b10      	ldr	r3, [pc, #64]	; (8016da8 <HAL_TIM_PWM_Start+0xac>)
 8016d68:	4013      	ands	r3, r2
 8016d6a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016d6c:	68fb      	ldr	r3, [r7, #12]
 8016d6e:	2b06      	cmp	r3, #6
 8016d70:	d00b      	beq.n	8016d8a <HAL_TIM_PWM_Start+0x8e>
 8016d72:	68fb      	ldr	r3, [r7, #12]
 8016d74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d78:	d007      	beq.n	8016d8a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	681a      	ldr	r2, [r3, #0]
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	f042 0201 	orr.w	r2, r2, #1
 8016d88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016d8a:	2300      	movs	r3, #0
}
 8016d8c:	4618      	mov	r0, r3
 8016d8e:	3710      	adds	r7, #16
 8016d90:	46bd      	mov	sp, r7
 8016d92:	bd80      	pop	{r7, pc}
 8016d94:	40010000 	.word	0x40010000
 8016d98:	40010400 	.word	0x40010400
 8016d9c:	40014000 	.word	0x40014000
 8016da0:	40014400 	.word	0x40014400
 8016da4:	40014800 	.word	0x40014800
 8016da8:	00010007 	.word	0x00010007

08016dac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b082      	sub	sp, #8
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	691b      	ldr	r3, [r3, #16]
 8016dba:	f003 0302 	and.w	r3, r3, #2
 8016dbe:	2b02      	cmp	r3, #2
 8016dc0:	d122      	bne.n	8016e08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8016dc2:	687b      	ldr	r3, [r7, #4]
 8016dc4:	681b      	ldr	r3, [r3, #0]
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	f003 0302 	and.w	r3, r3, #2
 8016dcc:	2b02      	cmp	r3, #2
 8016dce:	d11b      	bne.n	8016e08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	f06f 0202 	mvn.w	r2, #2
 8016dd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8016dda:	687b      	ldr	r3, [r7, #4]
 8016ddc:	2201      	movs	r2, #1
 8016dde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	699b      	ldr	r3, [r3, #24]
 8016de6:	f003 0303 	and.w	r3, r3, #3
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d003      	beq.n	8016df6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8016dee:	6878      	ldr	r0, [r7, #4]
 8016df0:	f000 fa1e 	bl	8017230 <HAL_TIM_IC_CaptureCallback>
 8016df4:	e005      	b.n	8016e02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8016df6:	6878      	ldr	r0, [r7, #4]
 8016df8:	f000 fa10 	bl	801721c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016dfc:	6878      	ldr	r0, [r7, #4]
 8016dfe:	f000 fa21 	bl	8017244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	2200      	movs	r2, #0
 8016e06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	691b      	ldr	r3, [r3, #16]
 8016e0e:	f003 0304 	and.w	r3, r3, #4
 8016e12:	2b04      	cmp	r3, #4
 8016e14:	d122      	bne.n	8016e5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	f003 0304 	and.w	r3, r3, #4
 8016e20:	2b04      	cmp	r3, #4
 8016e22:	d11b      	bne.n	8016e5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	f06f 0204 	mvn.w	r2, #4
 8016e2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	2202      	movs	r2, #2
 8016e32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8016e34:	687b      	ldr	r3, [r7, #4]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	699b      	ldr	r3, [r3, #24]
 8016e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016e3e:	2b00      	cmp	r3, #0
 8016e40:	d003      	beq.n	8016e4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e42:	6878      	ldr	r0, [r7, #4]
 8016e44:	f000 f9f4 	bl	8017230 <HAL_TIM_IC_CaptureCallback>
 8016e48:	e005      	b.n	8016e56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e4a:	6878      	ldr	r0, [r7, #4]
 8016e4c:	f000 f9e6 	bl	801721c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016e50:	6878      	ldr	r0, [r7, #4]
 8016e52:	f000 f9f7 	bl	8017244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	2200      	movs	r2, #0
 8016e5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	691b      	ldr	r3, [r3, #16]
 8016e62:	f003 0308 	and.w	r3, r3, #8
 8016e66:	2b08      	cmp	r3, #8
 8016e68:	d122      	bne.n	8016eb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	68db      	ldr	r3, [r3, #12]
 8016e70:	f003 0308 	and.w	r3, r3, #8
 8016e74:	2b08      	cmp	r3, #8
 8016e76:	d11b      	bne.n	8016eb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f06f 0208 	mvn.w	r2, #8
 8016e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	2204      	movs	r2, #4
 8016e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	69db      	ldr	r3, [r3, #28]
 8016e8e:	f003 0303 	and.w	r3, r3, #3
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d003      	beq.n	8016e9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016e96:	6878      	ldr	r0, [r7, #4]
 8016e98:	f000 f9ca 	bl	8017230 <HAL_TIM_IC_CaptureCallback>
 8016e9c:	e005      	b.n	8016eaa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016e9e:	6878      	ldr	r0, [r7, #4]
 8016ea0:	f000 f9bc 	bl	801721c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f000 f9cd 	bl	8017244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	2200      	movs	r2, #0
 8016eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	691b      	ldr	r3, [r3, #16]
 8016eb6:	f003 0310 	and.w	r3, r3, #16
 8016eba:	2b10      	cmp	r3, #16
 8016ebc:	d122      	bne.n	8016f04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	681b      	ldr	r3, [r3, #0]
 8016ec2:	68db      	ldr	r3, [r3, #12]
 8016ec4:	f003 0310 	and.w	r3, r3, #16
 8016ec8:	2b10      	cmp	r3, #16
 8016eca:	d11b      	bne.n	8016f04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	f06f 0210 	mvn.w	r2, #16
 8016ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	2208      	movs	r2, #8
 8016eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	69db      	ldr	r3, [r3, #28]
 8016ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d003      	beq.n	8016ef2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f000 f9a0 	bl	8017230 <HAL_TIM_IC_CaptureCallback>
 8016ef0:	e005      	b.n	8016efe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8016ef2:	6878      	ldr	r0, [r7, #4]
 8016ef4:	f000 f992 	bl	801721c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8016ef8:	6878      	ldr	r0, [r7, #4]
 8016efa:	f000 f9a3 	bl	8017244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2200      	movs	r2, #0
 8016f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	691b      	ldr	r3, [r3, #16]
 8016f0a:	f003 0301 	and.w	r3, r3, #1
 8016f0e:	2b01      	cmp	r3, #1
 8016f10:	d10e      	bne.n	8016f30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	681b      	ldr	r3, [r3, #0]
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	f003 0301 	and.w	r3, r3, #1
 8016f1c:	2b01      	cmp	r3, #1
 8016f1e:	d107      	bne.n	8016f30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	681b      	ldr	r3, [r3, #0]
 8016f24:	f06f 0201 	mvn.w	r2, #1
 8016f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f7e9 fe20 	bl	8000b70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8016f30:	687b      	ldr	r3, [r7, #4]
 8016f32:	681b      	ldr	r3, [r3, #0]
 8016f34:	691b      	ldr	r3, [r3, #16]
 8016f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f3a:	2b80      	cmp	r3, #128	; 0x80
 8016f3c:	d10e      	bne.n	8016f5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	681b      	ldr	r3, [r3, #0]
 8016f42:	68db      	ldr	r3, [r3, #12]
 8016f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f48:	2b80      	cmp	r3, #128	; 0x80
 8016f4a:	d107      	bne.n	8016f5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8016f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8016f56:	6878      	ldr	r0, [r7, #4]
 8016f58:	f000 fe26 	bl	8017ba8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	681b      	ldr	r3, [r3, #0]
 8016f60:	691b      	ldr	r3, [r3, #16]
 8016f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016f66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016f6a:	d10e      	bne.n	8016f8a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	68db      	ldr	r3, [r3, #12]
 8016f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f76:	2b80      	cmp	r3, #128	; 0x80
 8016f78:	d107      	bne.n	8016f8a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8016f7a:	687b      	ldr	r3, [r7, #4]
 8016f7c:	681b      	ldr	r3, [r3, #0]
 8016f7e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8016f82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8016f84:	6878      	ldr	r0, [r7, #4]
 8016f86:	f000 fe19 	bl	8017bbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	691b      	ldr	r3, [r3, #16]
 8016f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016f94:	2b40      	cmp	r3, #64	; 0x40
 8016f96:	d10e      	bne.n	8016fb6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	68db      	ldr	r3, [r3, #12]
 8016f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016fa2:	2b40      	cmp	r3, #64	; 0x40
 8016fa4:	d107      	bne.n	8016fb6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8016fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8016fb0:	6878      	ldr	r0, [r7, #4]
 8016fb2:	f000 f951 	bl	8017258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	691b      	ldr	r3, [r3, #16]
 8016fbc:	f003 0320 	and.w	r3, r3, #32
 8016fc0:	2b20      	cmp	r3, #32
 8016fc2:	d10e      	bne.n	8016fe2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	68db      	ldr	r3, [r3, #12]
 8016fca:	f003 0320 	and.w	r3, r3, #32
 8016fce:	2b20      	cmp	r3, #32
 8016fd0:	d107      	bne.n	8016fe2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	f06f 0220 	mvn.w	r2, #32
 8016fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8016fdc:	6878      	ldr	r0, [r7, #4]
 8016fde:	f000 fdd9 	bl	8017b94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8016fe2:	bf00      	nop
 8016fe4:	3708      	adds	r7, #8
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
	...

08016fec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8016fec:	b580      	push	{r7, lr}
 8016fee:	b084      	sub	sp, #16
 8016ff0:	af00      	add	r7, sp, #0
 8016ff2:	60f8      	str	r0, [r7, #12]
 8016ff4:	60b9      	str	r1, [r7, #8]
 8016ff6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8016ff8:	68fb      	ldr	r3, [r7, #12]
 8016ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8016ffe:	2b01      	cmp	r3, #1
 8017000:	d101      	bne.n	8017006 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8017002:	2302      	movs	r3, #2
 8017004:	e105      	b.n	8017212 <HAL_TIM_PWM_ConfigChannel+0x226>
 8017006:	68fb      	ldr	r3, [r7, #12]
 8017008:	2201      	movs	r2, #1
 801700a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	2202      	movs	r2, #2
 8017012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	2b14      	cmp	r3, #20
 801701a:	f200 80f0 	bhi.w	80171fe <HAL_TIM_PWM_ConfigChannel+0x212>
 801701e:	a201      	add	r2, pc, #4	; (adr r2, 8017024 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8017020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017024:	08017079 	.word	0x08017079
 8017028:	080171ff 	.word	0x080171ff
 801702c:	080171ff 	.word	0x080171ff
 8017030:	080171ff 	.word	0x080171ff
 8017034:	080170b9 	.word	0x080170b9
 8017038:	080171ff 	.word	0x080171ff
 801703c:	080171ff 	.word	0x080171ff
 8017040:	080171ff 	.word	0x080171ff
 8017044:	080170fb 	.word	0x080170fb
 8017048:	080171ff 	.word	0x080171ff
 801704c:	080171ff 	.word	0x080171ff
 8017050:	080171ff 	.word	0x080171ff
 8017054:	0801713b 	.word	0x0801713b
 8017058:	080171ff 	.word	0x080171ff
 801705c:	080171ff 	.word	0x080171ff
 8017060:	080171ff 	.word	0x080171ff
 8017064:	0801717d 	.word	0x0801717d
 8017068:	080171ff 	.word	0x080171ff
 801706c:	080171ff 	.word	0x080171ff
 8017070:	080171ff 	.word	0x080171ff
 8017074:	080171bd 	.word	0x080171bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	68b9      	ldr	r1, [r7, #8]
 801707e:	4618      	mov	r0, r3
 8017080:	f000 f98e 	bl	80173a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	699a      	ldr	r2, [r3, #24]
 801708a:	68fb      	ldr	r3, [r7, #12]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f042 0208 	orr.w	r2, r2, #8
 8017092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017094:	68fb      	ldr	r3, [r7, #12]
 8017096:	681b      	ldr	r3, [r3, #0]
 8017098:	699a      	ldr	r2, [r3, #24]
 801709a:	68fb      	ldr	r3, [r7, #12]
 801709c:	681b      	ldr	r3, [r3, #0]
 801709e:	f022 0204 	bic.w	r2, r2, #4
 80170a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	6999      	ldr	r1, [r3, #24]
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	691a      	ldr	r2, [r3, #16]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	681b      	ldr	r3, [r3, #0]
 80170b2:	430a      	orrs	r2, r1
 80170b4:	619a      	str	r2, [r3, #24]
      break;
 80170b6:	e0a3      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	68b9      	ldr	r1, [r7, #8]
 80170be:	4618      	mov	r0, r3
 80170c0:	f000 f9fe 	bl	80174c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	699a      	ldr	r2, [r3, #24]
 80170ca:	68fb      	ldr	r3, [r7, #12]
 80170cc:	681b      	ldr	r3, [r3, #0]
 80170ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80170d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	699a      	ldr	r2, [r3, #24]
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80170e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	6999      	ldr	r1, [r3, #24]
 80170ea:	68bb      	ldr	r3, [r7, #8]
 80170ec:	691b      	ldr	r3, [r3, #16]
 80170ee:	021a      	lsls	r2, r3, #8
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	430a      	orrs	r2, r1
 80170f6:	619a      	str	r2, [r3, #24]
      break;
 80170f8:	e082      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80170fa:	68fb      	ldr	r3, [r7, #12]
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	68b9      	ldr	r1, [r7, #8]
 8017100:	4618      	mov	r0, r3
 8017102:	f000 fa67 	bl	80175d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	69da      	ldr	r2, [r3, #28]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	f042 0208 	orr.w	r2, r2, #8
 8017114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8017116:	68fb      	ldr	r3, [r7, #12]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	69da      	ldr	r2, [r3, #28]
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	f022 0204 	bic.w	r2, r2, #4
 8017124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8017126:	68fb      	ldr	r3, [r7, #12]
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	69d9      	ldr	r1, [r3, #28]
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	691a      	ldr	r2, [r3, #16]
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	430a      	orrs	r2, r1
 8017136:	61da      	str	r2, [r3, #28]
      break;
 8017138:	e062      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	68b9      	ldr	r1, [r7, #8]
 8017140:	4618      	mov	r0, r3
 8017142:	f000 facd 	bl	80176e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	69da      	ldr	r2, [r3, #28]
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	681b      	ldr	r3, [r3, #0]
 801715a:	69da      	ldr	r2, [r3, #28]
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	69d9      	ldr	r1, [r3, #28]
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	691b      	ldr	r3, [r3, #16]
 8017170:	021a      	lsls	r2, r3, #8
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	430a      	orrs	r2, r1
 8017178:	61da      	str	r2, [r3, #28]
      break;
 801717a:	e041      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	68b9      	ldr	r1, [r7, #8]
 8017182:	4618      	mov	r0, r3
 8017184:	f000 fb14 	bl	80177b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017188:	68fb      	ldr	r3, [r7, #12]
 801718a:	681b      	ldr	r3, [r3, #0]
 801718c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801718e:	68fb      	ldr	r3, [r7, #12]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f042 0208 	orr.w	r2, r2, #8
 8017196:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f022 0204 	bic.w	r2, r2, #4
 80171a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80171a8:	68fb      	ldr	r3, [r7, #12]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80171ae:	68bb      	ldr	r3, [r7, #8]
 80171b0:	691a      	ldr	r2, [r3, #16]
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	430a      	orrs	r2, r1
 80171b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80171ba:	e021      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	68b9      	ldr	r1, [r7, #8]
 80171c2:	4618      	mov	r0, r3
 80171c4:	f000 fb56 	bl	8017874 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80171c8:	68fb      	ldr	r3, [r7, #12]
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80171d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80171d8:	68fb      	ldr	r3, [r7, #12]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	681b      	ldr	r3, [r3, #0]
 80171e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80171e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80171ee:	68bb      	ldr	r3, [r7, #8]
 80171f0:	691b      	ldr	r3, [r3, #16]
 80171f2:	021a      	lsls	r2, r3, #8
 80171f4:	68fb      	ldr	r3, [r7, #12]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	430a      	orrs	r2, r1
 80171fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80171fc:	e000      	b.n	8017200 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80171fe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	2201      	movs	r2, #1
 8017204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017208:	68fb      	ldr	r3, [r7, #12]
 801720a:	2200      	movs	r2, #0
 801720c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017210:	2300      	movs	r3, #0
}
 8017212:	4618      	mov	r0, r3
 8017214:	3710      	adds	r7, #16
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop

0801721c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8017224:	bf00      	nop
 8017226:	370c      	adds	r7, #12
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr

08017230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8017238:	bf00      	nop
 801723a:	370c      	adds	r7, #12
 801723c:	46bd      	mov	sp, r7
 801723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017242:	4770      	bx	lr

08017244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801724c:	bf00      	nop
 801724e:	370c      	adds	r7, #12
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017260:	bf00      	nop
 8017262:	370c      	adds	r7, #12
 8017264:	46bd      	mov	sp, r7
 8017266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726a:	4770      	bx	lr

0801726c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801726c:	b480      	push	{r7}
 801726e:	b085      	sub	sp, #20
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
 8017274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	681b      	ldr	r3, [r3, #0]
 801727a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	4a40      	ldr	r2, [pc, #256]	; (8017380 <TIM_Base_SetConfig+0x114>)
 8017280:	4293      	cmp	r3, r2
 8017282:	d013      	beq.n	80172ac <TIM_Base_SetConfig+0x40>
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801728a:	d00f      	beq.n	80172ac <TIM_Base_SetConfig+0x40>
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	4a3d      	ldr	r2, [pc, #244]	; (8017384 <TIM_Base_SetConfig+0x118>)
 8017290:	4293      	cmp	r3, r2
 8017292:	d00b      	beq.n	80172ac <TIM_Base_SetConfig+0x40>
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	4a3c      	ldr	r2, [pc, #240]	; (8017388 <TIM_Base_SetConfig+0x11c>)
 8017298:	4293      	cmp	r3, r2
 801729a:	d007      	beq.n	80172ac <TIM_Base_SetConfig+0x40>
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	4a3b      	ldr	r2, [pc, #236]	; (801738c <TIM_Base_SetConfig+0x120>)
 80172a0:	4293      	cmp	r3, r2
 80172a2:	d003      	beq.n	80172ac <TIM_Base_SetConfig+0x40>
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	4a3a      	ldr	r2, [pc, #232]	; (8017390 <TIM_Base_SetConfig+0x124>)
 80172a8:	4293      	cmp	r3, r2
 80172aa:	d108      	bne.n	80172be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80172ac:	68fb      	ldr	r3, [r7, #12]
 80172ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80172b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	685b      	ldr	r3, [r3, #4]
 80172b8:	68fa      	ldr	r2, [r7, #12]
 80172ba:	4313      	orrs	r3, r2
 80172bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	4a2f      	ldr	r2, [pc, #188]	; (8017380 <TIM_Base_SetConfig+0x114>)
 80172c2:	4293      	cmp	r3, r2
 80172c4:	d01f      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80172cc:	d01b      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	4a2c      	ldr	r2, [pc, #176]	; (8017384 <TIM_Base_SetConfig+0x118>)
 80172d2:	4293      	cmp	r3, r2
 80172d4:	d017      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	4a2b      	ldr	r2, [pc, #172]	; (8017388 <TIM_Base_SetConfig+0x11c>)
 80172da:	4293      	cmp	r3, r2
 80172dc:	d013      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	4a2a      	ldr	r2, [pc, #168]	; (801738c <TIM_Base_SetConfig+0x120>)
 80172e2:	4293      	cmp	r3, r2
 80172e4:	d00f      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	4a29      	ldr	r2, [pc, #164]	; (8017390 <TIM_Base_SetConfig+0x124>)
 80172ea:	4293      	cmp	r3, r2
 80172ec:	d00b      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	4a28      	ldr	r2, [pc, #160]	; (8017394 <TIM_Base_SetConfig+0x128>)
 80172f2:	4293      	cmp	r3, r2
 80172f4:	d007      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	4a27      	ldr	r2, [pc, #156]	; (8017398 <TIM_Base_SetConfig+0x12c>)
 80172fa:	4293      	cmp	r3, r2
 80172fc:	d003      	beq.n	8017306 <TIM_Base_SetConfig+0x9a>
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	4a26      	ldr	r2, [pc, #152]	; (801739c <TIM_Base_SetConfig+0x130>)
 8017302:	4293      	cmp	r3, r2
 8017304:	d108      	bne.n	8017318 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801730c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	68db      	ldr	r3, [r3, #12]
 8017312:	68fa      	ldr	r2, [r7, #12]
 8017314:	4313      	orrs	r3, r2
 8017316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801731e:	683b      	ldr	r3, [r7, #0]
 8017320:	695b      	ldr	r3, [r3, #20]
 8017322:	4313      	orrs	r3, r2
 8017324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8017326:	687b      	ldr	r3, [r7, #4]
 8017328:	68fa      	ldr	r2, [r7, #12]
 801732a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801732c:	683b      	ldr	r3, [r7, #0]
 801732e:	689a      	ldr	r2, [r3, #8]
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	681a      	ldr	r2, [r3, #0]
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	4a10      	ldr	r2, [pc, #64]	; (8017380 <TIM_Base_SetConfig+0x114>)
 8017340:	4293      	cmp	r3, r2
 8017342:	d00f      	beq.n	8017364 <TIM_Base_SetConfig+0xf8>
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	4a12      	ldr	r2, [pc, #72]	; (8017390 <TIM_Base_SetConfig+0x124>)
 8017348:	4293      	cmp	r3, r2
 801734a:	d00b      	beq.n	8017364 <TIM_Base_SetConfig+0xf8>
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	4a11      	ldr	r2, [pc, #68]	; (8017394 <TIM_Base_SetConfig+0x128>)
 8017350:	4293      	cmp	r3, r2
 8017352:	d007      	beq.n	8017364 <TIM_Base_SetConfig+0xf8>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	4a10      	ldr	r2, [pc, #64]	; (8017398 <TIM_Base_SetConfig+0x12c>)
 8017358:	4293      	cmp	r3, r2
 801735a:	d003      	beq.n	8017364 <TIM_Base_SetConfig+0xf8>
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	4a0f      	ldr	r2, [pc, #60]	; (801739c <TIM_Base_SetConfig+0x130>)
 8017360:	4293      	cmp	r3, r2
 8017362:	d103      	bne.n	801736c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017364:	683b      	ldr	r3, [r7, #0]
 8017366:	691a      	ldr	r2, [r3, #16]
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	2201      	movs	r2, #1
 8017370:	615a      	str	r2, [r3, #20]
}
 8017372:	bf00      	nop
 8017374:	3714      	adds	r7, #20
 8017376:	46bd      	mov	sp, r7
 8017378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801737c:	4770      	bx	lr
 801737e:	bf00      	nop
 8017380:	40010000 	.word	0x40010000
 8017384:	40000400 	.word	0x40000400
 8017388:	40000800 	.word	0x40000800
 801738c:	40000c00 	.word	0x40000c00
 8017390:	40010400 	.word	0x40010400
 8017394:	40014000 	.word	0x40014000
 8017398:	40014400 	.word	0x40014400
 801739c:	40014800 	.word	0x40014800

080173a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80173a0:	b480      	push	{r7}
 80173a2:	b087      	sub	sp, #28
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
 80173a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	6a1b      	ldr	r3, [r3, #32]
 80173ae:	f023 0201 	bic.w	r2, r3, #1
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	6a1b      	ldr	r3, [r3, #32]
 80173ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	685b      	ldr	r3, [r3, #4]
 80173c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	699b      	ldr	r3, [r3, #24]
 80173c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80173c8:	68fa      	ldr	r2, [r7, #12]
 80173ca:	4b37      	ldr	r3, [pc, #220]	; (80174a8 <TIM_OC1_SetConfig+0x108>)
 80173cc:	4013      	ands	r3, r2
 80173ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	f023 0303 	bic.w	r3, r3, #3
 80173d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80173d8:	683b      	ldr	r3, [r7, #0]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	68fa      	ldr	r2, [r7, #12]
 80173de:	4313      	orrs	r3, r2
 80173e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80173e2:	697b      	ldr	r3, [r7, #20]
 80173e4:	f023 0302 	bic.w	r3, r3, #2
 80173e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80173ea:	683b      	ldr	r3, [r7, #0]
 80173ec:	689b      	ldr	r3, [r3, #8]
 80173ee:	697a      	ldr	r2, [r7, #20]
 80173f0:	4313      	orrs	r3, r2
 80173f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	4a2d      	ldr	r2, [pc, #180]	; (80174ac <TIM_OC1_SetConfig+0x10c>)
 80173f8:	4293      	cmp	r3, r2
 80173fa:	d00f      	beq.n	801741c <TIM_OC1_SetConfig+0x7c>
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	4a2c      	ldr	r2, [pc, #176]	; (80174b0 <TIM_OC1_SetConfig+0x110>)
 8017400:	4293      	cmp	r3, r2
 8017402:	d00b      	beq.n	801741c <TIM_OC1_SetConfig+0x7c>
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	4a2b      	ldr	r2, [pc, #172]	; (80174b4 <TIM_OC1_SetConfig+0x114>)
 8017408:	4293      	cmp	r3, r2
 801740a:	d007      	beq.n	801741c <TIM_OC1_SetConfig+0x7c>
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	4a2a      	ldr	r2, [pc, #168]	; (80174b8 <TIM_OC1_SetConfig+0x118>)
 8017410:	4293      	cmp	r3, r2
 8017412:	d003      	beq.n	801741c <TIM_OC1_SetConfig+0x7c>
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	4a29      	ldr	r2, [pc, #164]	; (80174bc <TIM_OC1_SetConfig+0x11c>)
 8017418:	4293      	cmp	r3, r2
 801741a:	d10c      	bne.n	8017436 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801741c:	697b      	ldr	r3, [r7, #20]
 801741e:	f023 0308 	bic.w	r3, r3, #8
 8017422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	68db      	ldr	r3, [r3, #12]
 8017428:	697a      	ldr	r2, [r7, #20]
 801742a:	4313      	orrs	r3, r2
 801742c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801742e:	697b      	ldr	r3, [r7, #20]
 8017430:	f023 0304 	bic.w	r3, r3, #4
 8017434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	4a1c      	ldr	r2, [pc, #112]	; (80174ac <TIM_OC1_SetConfig+0x10c>)
 801743a:	4293      	cmp	r3, r2
 801743c:	d00f      	beq.n	801745e <TIM_OC1_SetConfig+0xbe>
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	4a1b      	ldr	r2, [pc, #108]	; (80174b0 <TIM_OC1_SetConfig+0x110>)
 8017442:	4293      	cmp	r3, r2
 8017444:	d00b      	beq.n	801745e <TIM_OC1_SetConfig+0xbe>
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	4a1a      	ldr	r2, [pc, #104]	; (80174b4 <TIM_OC1_SetConfig+0x114>)
 801744a:	4293      	cmp	r3, r2
 801744c:	d007      	beq.n	801745e <TIM_OC1_SetConfig+0xbe>
 801744e:	687b      	ldr	r3, [r7, #4]
 8017450:	4a19      	ldr	r2, [pc, #100]	; (80174b8 <TIM_OC1_SetConfig+0x118>)
 8017452:	4293      	cmp	r3, r2
 8017454:	d003      	beq.n	801745e <TIM_OC1_SetConfig+0xbe>
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	4a18      	ldr	r2, [pc, #96]	; (80174bc <TIM_OC1_SetConfig+0x11c>)
 801745a:	4293      	cmp	r3, r2
 801745c:	d111      	bne.n	8017482 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801745e:	693b      	ldr	r3, [r7, #16]
 8017460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017466:	693b      	ldr	r3, [r7, #16]
 8017468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801746c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801746e:	683b      	ldr	r3, [r7, #0]
 8017470:	695b      	ldr	r3, [r3, #20]
 8017472:	693a      	ldr	r2, [r7, #16]
 8017474:	4313      	orrs	r3, r2
 8017476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017478:	683b      	ldr	r3, [r7, #0]
 801747a:	699b      	ldr	r3, [r3, #24]
 801747c:	693a      	ldr	r2, [r7, #16]
 801747e:	4313      	orrs	r3, r2
 8017480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	693a      	ldr	r2, [r7, #16]
 8017486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	68fa      	ldr	r2, [r7, #12]
 801748c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	685a      	ldr	r2, [r3, #4]
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	697a      	ldr	r2, [r7, #20]
 801749a:	621a      	str	r2, [r3, #32]
}
 801749c:	bf00      	nop
 801749e:	371c      	adds	r7, #28
 80174a0:	46bd      	mov	sp, r7
 80174a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a6:	4770      	bx	lr
 80174a8:	fffeff8f 	.word	0xfffeff8f
 80174ac:	40010000 	.word	0x40010000
 80174b0:	40010400 	.word	0x40010400
 80174b4:	40014000 	.word	0x40014000
 80174b8:	40014400 	.word	0x40014400
 80174bc:	40014800 	.word	0x40014800

080174c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80174c0:	b480      	push	{r7}
 80174c2:	b087      	sub	sp, #28
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	6078      	str	r0, [r7, #4]
 80174c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	6a1b      	ldr	r3, [r3, #32]
 80174ce:	f023 0210 	bic.w	r2, r3, #16
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6a1b      	ldr	r3, [r3, #32]
 80174da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	685b      	ldr	r3, [r3, #4]
 80174e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	699b      	ldr	r3, [r3, #24]
 80174e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80174e8:	68fa      	ldr	r2, [r7, #12]
 80174ea:	4b34      	ldr	r3, [pc, #208]	; (80175bc <TIM_OC2_SetConfig+0xfc>)
 80174ec:	4013      	ands	r3, r2
 80174ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80174f0:	68fb      	ldr	r3, [r7, #12]
 80174f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80174f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	681b      	ldr	r3, [r3, #0]
 80174fc:	021b      	lsls	r3, r3, #8
 80174fe:	68fa      	ldr	r2, [r7, #12]
 8017500:	4313      	orrs	r3, r2
 8017502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	f023 0320 	bic.w	r3, r3, #32
 801750a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801750c:	683b      	ldr	r3, [r7, #0]
 801750e:	689b      	ldr	r3, [r3, #8]
 8017510:	011b      	lsls	r3, r3, #4
 8017512:	697a      	ldr	r2, [r7, #20]
 8017514:	4313      	orrs	r3, r2
 8017516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	4a29      	ldr	r2, [pc, #164]	; (80175c0 <TIM_OC2_SetConfig+0x100>)
 801751c:	4293      	cmp	r3, r2
 801751e:	d003      	beq.n	8017528 <TIM_OC2_SetConfig+0x68>
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	4a28      	ldr	r2, [pc, #160]	; (80175c4 <TIM_OC2_SetConfig+0x104>)
 8017524:	4293      	cmp	r3, r2
 8017526:	d10d      	bne.n	8017544 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8017528:	697b      	ldr	r3, [r7, #20]
 801752a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801752e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8017530:	683b      	ldr	r3, [r7, #0]
 8017532:	68db      	ldr	r3, [r3, #12]
 8017534:	011b      	lsls	r3, r3, #4
 8017536:	697a      	ldr	r2, [r7, #20]
 8017538:	4313      	orrs	r3, r2
 801753a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801753c:	697b      	ldr	r3, [r7, #20]
 801753e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017542:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	4a1e      	ldr	r2, [pc, #120]	; (80175c0 <TIM_OC2_SetConfig+0x100>)
 8017548:	4293      	cmp	r3, r2
 801754a:	d00f      	beq.n	801756c <TIM_OC2_SetConfig+0xac>
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	4a1d      	ldr	r2, [pc, #116]	; (80175c4 <TIM_OC2_SetConfig+0x104>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d00b      	beq.n	801756c <TIM_OC2_SetConfig+0xac>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	4a1c      	ldr	r2, [pc, #112]	; (80175c8 <TIM_OC2_SetConfig+0x108>)
 8017558:	4293      	cmp	r3, r2
 801755a:	d007      	beq.n	801756c <TIM_OC2_SetConfig+0xac>
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	4a1b      	ldr	r2, [pc, #108]	; (80175cc <TIM_OC2_SetConfig+0x10c>)
 8017560:	4293      	cmp	r3, r2
 8017562:	d003      	beq.n	801756c <TIM_OC2_SetConfig+0xac>
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	4a1a      	ldr	r2, [pc, #104]	; (80175d0 <TIM_OC2_SetConfig+0x110>)
 8017568:	4293      	cmp	r3, r2
 801756a:	d113      	bne.n	8017594 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801756c:	693b      	ldr	r3, [r7, #16]
 801756e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017574:	693b      	ldr	r3, [r7, #16]
 8017576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801757a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801757c:	683b      	ldr	r3, [r7, #0]
 801757e:	695b      	ldr	r3, [r3, #20]
 8017580:	009b      	lsls	r3, r3, #2
 8017582:	693a      	ldr	r2, [r7, #16]
 8017584:	4313      	orrs	r3, r2
 8017586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017588:	683b      	ldr	r3, [r7, #0]
 801758a:	699b      	ldr	r3, [r3, #24]
 801758c:	009b      	lsls	r3, r3, #2
 801758e:	693a      	ldr	r2, [r7, #16]
 8017590:	4313      	orrs	r3, r2
 8017592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	693a      	ldr	r2, [r7, #16]
 8017598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	68fa      	ldr	r2, [r7, #12]
 801759e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80175a0:	683b      	ldr	r3, [r7, #0]
 80175a2:	685a      	ldr	r2, [r3, #4]
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	697a      	ldr	r2, [r7, #20]
 80175ac:	621a      	str	r2, [r3, #32]
}
 80175ae:	bf00      	nop
 80175b0:	371c      	adds	r7, #28
 80175b2:	46bd      	mov	sp, r7
 80175b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b8:	4770      	bx	lr
 80175ba:	bf00      	nop
 80175bc:	feff8fff 	.word	0xfeff8fff
 80175c0:	40010000 	.word	0x40010000
 80175c4:	40010400 	.word	0x40010400
 80175c8:	40014000 	.word	0x40014000
 80175cc:	40014400 	.word	0x40014400
 80175d0:	40014800 	.word	0x40014800

080175d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b087      	sub	sp, #28
 80175d8:	af00      	add	r7, sp, #0
 80175da:	6078      	str	r0, [r7, #4]
 80175dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	6a1b      	ldr	r3, [r3, #32]
 80175e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80175ea:	687b      	ldr	r3, [r7, #4]
 80175ec:	6a1b      	ldr	r3, [r3, #32]
 80175ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80175f0:	687b      	ldr	r3, [r7, #4]
 80175f2:	685b      	ldr	r3, [r3, #4]
 80175f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80175f6:	687b      	ldr	r3, [r7, #4]
 80175f8:	69db      	ldr	r3, [r3, #28]
 80175fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f023 0303 	bic.w	r3, r3, #3
 801760a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801760c:	683b      	ldr	r3, [r7, #0]
 801760e:	681b      	ldr	r3, [r3, #0]
 8017610:	68fa      	ldr	r2, [r7, #12]
 8017612:	4313      	orrs	r3, r2
 8017614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8017616:	697b      	ldr	r3, [r7, #20]
 8017618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801761c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801761e:	683b      	ldr	r3, [r7, #0]
 8017620:	689b      	ldr	r3, [r3, #8]
 8017622:	021b      	lsls	r3, r3, #8
 8017624:	697a      	ldr	r2, [r7, #20]
 8017626:	4313      	orrs	r3, r2
 8017628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801762a:	687b      	ldr	r3, [r7, #4]
 801762c:	4a27      	ldr	r2, [pc, #156]	; (80176cc <TIM_OC3_SetConfig+0xf8>)
 801762e:	4293      	cmp	r3, r2
 8017630:	d003      	beq.n	801763a <TIM_OC3_SetConfig+0x66>
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	4a26      	ldr	r2, [pc, #152]	; (80176d0 <TIM_OC3_SetConfig+0xfc>)
 8017636:	4293      	cmp	r3, r2
 8017638:	d10d      	bne.n	8017656 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8017642:	683b      	ldr	r3, [r7, #0]
 8017644:	68db      	ldr	r3, [r3, #12]
 8017646:	021b      	lsls	r3, r3, #8
 8017648:	697a      	ldr	r2, [r7, #20]
 801764a:	4313      	orrs	r3, r2
 801764c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801764e:	697b      	ldr	r3, [r7, #20]
 8017650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	4a1c      	ldr	r2, [pc, #112]	; (80176cc <TIM_OC3_SetConfig+0xf8>)
 801765a:	4293      	cmp	r3, r2
 801765c:	d00f      	beq.n	801767e <TIM_OC3_SetConfig+0xaa>
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	4a1b      	ldr	r2, [pc, #108]	; (80176d0 <TIM_OC3_SetConfig+0xfc>)
 8017662:	4293      	cmp	r3, r2
 8017664:	d00b      	beq.n	801767e <TIM_OC3_SetConfig+0xaa>
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	4a1a      	ldr	r2, [pc, #104]	; (80176d4 <TIM_OC3_SetConfig+0x100>)
 801766a:	4293      	cmp	r3, r2
 801766c:	d007      	beq.n	801767e <TIM_OC3_SetConfig+0xaa>
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	4a19      	ldr	r2, [pc, #100]	; (80176d8 <TIM_OC3_SetConfig+0x104>)
 8017672:	4293      	cmp	r3, r2
 8017674:	d003      	beq.n	801767e <TIM_OC3_SetConfig+0xaa>
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4a18      	ldr	r2, [pc, #96]	; (80176dc <TIM_OC3_SetConfig+0x108>)
 801767a:	4293      	cmp	r3, r2
 801767c:	d113      	bne.n	80176a6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801767e:	693b      	ldr	r3, [r7, #16]
 8017680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017686:	693b      	ldr	r3, [r7, #16]
 8017688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801768c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801768e:	683b      	ldr	r3, [r7, #0]
 8017690:	695b      	ldr	r3, [r3, #20]
 8017692:	011b      	lsls	r3, r3, #4
 8017694:	693a      	ldr	r2, [r7, #16]
 8017696:	4313      	orrs	r3, r2
 8017698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	699b      	ldr	r3, [r3, #24]
 801769e:	011b      	lsls	r3, r3, #4
 80176a0:	693a      	ldr	r2, [r7, #16]
 80176a2:	4313      	orrs	r3, r2
 80176a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	693a      	ldr	r2, [r7, #16]
 80176aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	68fa      	ldr	r2, [r7, #12]
 80176b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	685a      	ldr	r2, [r3, #4]
 80176b6:	687b      	ldr	r3, [r7, #4]
 80176b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	697a      	ldr	r2, [r7, #20]
 80176be:	621a      	str	r2, [r3, #32]
}
 80176c0:	bf00      	nop
 80176c2:	371c      	adds	r7, #28
 80176c4:	46bd      	mov	sp, r7
 80176c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ca:	4770      	bx	lr
 80176cc:	40010000 	.word	0x40010000
 80176d0:	40010400 	.word	0x40010400
 80176d4:	40014000 	.word	0x40014000
 80176d8:	40014400 	.word	0x40014400
 80176dc:	40014800 	.word	0x40014800

080176e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80176e0:	b480      	push	{r7}
 80176e2:	b087      	sub	sp, #28
 80176e4:	af00      	add	r7, sp, #0
 80176e6:	6078      	str	r0, [r7, #4]
 80176e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	6a1b      	ldr	r3, [r3, #32]
 80176ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80176f2:	687b      	ldr	r3, [r7, #4]
 80176f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	6a1b      	ldr	r3, [r3, #32]
 80176fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80176fc:	687b      	ldr	r3, [r7, #4]
 80176fe:	685b      	ldr	r3, [r3, #4]
 8017700:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	69db      	ldr	r3, [r3, #28]
 8017706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8017708:	68fb      	ldr	r3, [r7, #12]
 801770a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801770e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8017710:	68fb      	ldr	r3, [r7, #12]
 8017712:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8017716:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017718:	683b      	ldr	r3, [r7, #0]
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	021b      	lsls	r3, r3, #8
 801771e:	68fa      	ldr	r2, [r7, #12]
 8017720:	4313      	orrs	r3, r2
 8017722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8017724:	693b      	ldr	r3, [r7, #16]
 8017726:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801772a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801772c:	683b      	ldr	r3, [r7, #0]
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	031b      	lsls	r3, r3, #12
 8017732:	693a      	ldr	r2, [r7, #16]
 8017734:	4313      	orrs	r3, r2
 8017736:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	4a18      	ldr	r2, [pc, #96]	; (801779c <TIM_OC4_SetConfig+0xbc>)
 801773c:	4293      	cmp	r3, r2
 801773e:	d00f      	beq.n	8017760 <TIM_OC4_SetConfig+0x80>
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	4a17      	ldr	r2, [pc, #92]	; (80177a0 <TIM_OC4_SetConfig+0xc0>)
 8017744:	4293      	cmp	r3, r2
 8017746:	d00b      	beq.n	8017760 <TIM_OC4_SetConfig+0x80>
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	4a16      	ldr	r2, [pc, #88]	; (80177a4 <TIM_OC4_SetConfig+0xc4>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d007      	beq.n	8017760 <TIM_OC4_SetConfig+0x80>
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	4a15      	ldr	r2, [pc, #84]	; (80177a8 <TIM_OC4_SetConfig+0xc8>)
 8017754:	4293      	cmp	r3, r2
 8017756:	d003      	beq.n	8017760 <TIM_OC4_SetConfig+0x80>
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	4a14      	ldr	r2, [pc, #80]	; (80177ac <TIM_OC4_SetConfig+0xcc>)
 801775c:	4293      	cmp	r3, r2
 801775e:	d109      	bne.n	8017774 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017760:	697b      	ldr	r3, [r7, #20]
 8017762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017766:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	695b      	ldr	r3, [r3, #20]
 801776c:	019b      	lsls	r3, r3, #6
 801776e:	697a      	ldr	r2, [r7, #20]
 8017770:	4313      	orrs	r3, r2
 8017772:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	697a      	ldr	r2, [r7, #20]
 8017778:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	68fa      	ldr	r2, [r7, #12]
 801777e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017780:	683b      	ldr	r3, [r7, #0]
 8017782:	685a      	ldr	r2, [r3, #4]
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	693a      	ldr	r2, [r7, #16]
 801778c:	621a      	str	r2, [r3, #32]
}
 801778e:	bf00      	nop
 8017790:	371c      	adds	r7, #28
 8017792:	46bd      	mov	sp, r7
 8017794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017798:	4770      	bx	lr
 801779a:	bf00      	nop
 801779c:	40010000 	.word	0x40010000
 80177a0:	40010400 	.word	0x40010400
 80177a4:	40014000 	.word	0x40014000
 80177a8:	40014400 	.word	0x40014400
 80177ac:	40014800 	.word	0x40014800

080177b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80177b0:	b480      	push	{r7}
 80177b2:	b087      	sub	sp, #28
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	6078      	str	r0, [r7, #4]
 80177b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	6a1b      	ldr	r3, [r3, #32]
 80177be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6a1b      	ldr	r3, [r3, #32]
 80177ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	685b      	ldr	r3, [r3, #4]
 80177d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80177d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80177de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	68fa      	ldr	r2, [r7, #12]
 80177e6:	4313      	orrs	r3, r2
 80177e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80177f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80177f2:	683b      	ldr	r3, [r7, #0]
 80177f4:	689b      	ldr	r3, [r3, #8]
 80177f6:	041b      	lsls	r3, r3, #16
 80177f8:	693a      	ldr	r2, [r7, #16]
 80177fa:	4313      	orrs	r3, r2
 80177fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	4a17      	ldr	r2, [pc, #92]	; (8017860 <TIM_OC5_SetConfig+0xb0>)
 8017802:	4293      	cmp	r3, r2
 8017804:	d00f      	beq.n	8017826 <TIM_OC5_SetConfig+0x76>
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	4a16      	ldr	r2, [pc, #88]	; (8017864 <TIM_OC5_SetConfig+0xb4>)
 801780a:	4293      	cmp	r3, r2
 801780c:	d00b      	beq.n	8017826 <TIM_OC5_SetConfig+0x76>
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	4a15      	ldr	r2, [pc, #84]	; (8017868 <TIM_OC5_SetConfig+0xb8>)
 8017812:	4293      	cmp	r3, r2
 8017814:	d007      	beq.n	8017826 <TIM_OC5_SetConfig+0x76>
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	4a14      	ldr	r2, [pc, #80]	; (801786c <TIM_OC5_SetConfig+0xbc>)
 801781a:	4293      	cmp	r3, r2
 801781c:	d003      	beq.n	8017826 <TIM_OC5_SetConfig+0x76>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	4a13      	ldr	r2, [pc, #76]	; (8017870 <TIM_OC5_SetConfig+0xc0>)
 8017822:	4293      	cmp	r3, r2
 8017824:	d109      	bne.n	801783a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017826:	697b      	ldr	r3, [r7, #20]
 8017828:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801782c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801782e:	683b      	ldr	r3, [r7, #0]
 8017830:	695b      	ldr	r3, [r3, #20]
 8017832:	021b      	lsls	r3, r3, #8
 8017834:	697a      	ldr	r2, [r7, #20]
 8017836:	4313      	orrs	r3, r2
 8017838:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	697a      	ldr	r2, [r7, #20]
 801783e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	68fa      	ldr	r2, [r7, #12]
 8017844:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	685a      	ldr	r2, [r3, #4]
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801784e:	687b      	ldr	r3, [r7, #4]
 8017850:	693a      	ldr	r2, [r7, #16]
 8017852:	621a      	str	r2, [r3, #32]
}
 8017854:	bf00      	nop
 8017856:	371c      	adds	r7, #28
 8017858:	46bd      	mov	sp, r7
 801785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801785e:	4770      	bx	lr
 8017860:	40010000 	.word	0x40010000
 8017864:	40010400 	.word	0x40010400
 8017868:	40014000 	.word	0x40014000
 801786c:	40014400 	.word	0x40014400
 8017870:	40014800 	.word	0x40014800

08017874 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017874:	b480      	push	{r7}
 8017876:	b087      	sub	sp, #28
 8017878:	af00      	add	r7, sp, #0
 801787a:	6078      	str	r0, [r7, #4]
 801787c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	6a1b      	ldr	r3, [r3, #32]
 8017882:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017886:	687b      	ldr	r3, [r7, #4]
 8017888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	6a1b      	ldr	r3, [r3, #32]
 801788e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	685b      	ldr	r3, [r3, #4]
 8017894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801789a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80178a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80178a4:	683b      	ldr	r3, [r7, #0]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	021b      	lsls	r3, r3, #8
 80178aa:	68fa      	ldr	r2, [r7, #12]
 80178ac:	4313      	orrs	r3, r2
 80178ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80178b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80178b8:	683b      	ldr	r3, [r7, #0]
 80178ba:	689b      	ldr	r3, [r3, #8]
 80178bc:	051b      	lsls	r3, r3, #20
 80178be:	693a      	ldr	r2, [r7, #16]
 80178c0:	4313      	orrs	r3, r2
 80178c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	4a18      	ldr	r2, [pc, #96]	; (8017928 <TIM_OC6_SetConfig+0xb4>)
 80178c8:	4293      	cmp	r3, r2
 80178ca:	d00f      	beq.n	80178ec <TIM_OC6_SetConfig+0x78>
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	4a17      	ldr	r2, [pc, #92]	; (801792c <TIM_OC6_SetConfig+0xb8>)
 80178d0:	4293      	cmp	r3, r2
 80178d2:	d00b      	beq.n	80178ec <TIM_OC6_SetConfig+0x78>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	4a16      	ldr	r2, [pc, #88]	; (8017930 <TIM_OC6_SetConfig+0xbc>)
 80178d8:	4293      	cmp	r3, r2
 80178da:	d007      	beq.n	80178ec <TIM_OC6_SetConfig+0x78>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	4a15      	ldr	r2, [pc, #84]	; (8017934 <TIM_OC6_SetConfig+0xc0>)
 80178e0:	4293      	cmp	r3, r2
 80178e2:	d003      	beq.n	80178ec <TIM_OC6_SetConfig+0x78>
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	4a14      	ldr	r2, [pc, #80]	; (8017938 <TIM_OC6_SetConfig+0xc4>)
 80178e8:	4293      	cmp	r3, r2
 80178ea:	d109      	bne.n	8017900 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80178ec:	697b      	ldr	r3, [r7, #20]
 80178ee:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80178f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80178f4:	683b      	ldr	r3, [r7, #0]
 80178f6:	695b      	ldr	r3, [r3, #20]
 80178f8:	029b      	lsls	r3, r3, #10
 80178fa:	697a      	ldr	r2, [r7, #20]
 80178fc:	4313      	orrs	r3, r2
 80178fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	697a      	ldr	r2, [r7, #20]
 8017904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	68fa      	ldr	r2, [r7, #12]
 801790a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801790c:	683b      	ldr	r3, [r7, #0]
 801790e:	685a      	ldr	r2, [r3, #4]
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	693a      	ldr	r2, [r7, #16]
 8017918:	621a      	str	r2, [r3, #32]
}
 801791a:	bf00      	nop
 801791c:	371c      	adds	r7, #28
 801791e:	46bd      	mov	sp, r7
 8017920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017924:	4770      	bx	lr
 8017926:	bf00      	nop
 8017928:	40010000 	.word	0x40010000
 801792c:	40010400 	.word	0x40010400
 8017930:	40014000 	.word	0x40014000
 8017934:	40014400 	.word	0x40014400
 8017938:	40014800 	.word	0x40014800

0801793c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 801793c:	b480      	push	{r7}
 801793e:	b087      	sub	sp, #28
 8017940:	af00      	add	r7, sp, #0
 8017942:	60f8      	str	r0, [r7, #12]
 8017944:	60b9      	str	r1, [r7, #8]
 8017946:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017948:	68bb      	ldr	r3, [r7, #8]
 801794a:	f003 031f 	and.w	r3, r3, #31
 801794e:	2201      	movs	r2, #1
 8017950:	fa02 f303 	lsl.w	r3, r2, r3
 8017954:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017956:	68fb      	ldr	r3, [r7, #12]
 8017958:	6a1a      	ldr	r2, [r3, #32]
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	43db      	mvns	r3, r3
 801795e:	401a      	ands	r2, r3
 8017960:	68fb      	ldr	r3, [r7, #12]
 8017962:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017964:	68fb      	ldr	r3, [r7, #12]
 8017966:	6a1a      	ldr	r2, [r3, #32]
 8017968:	68bb      	ldr	r3, [r7, #8]
 801796a:	f003 031f 	and.w	r3, r3, #31
 801796e:	6879      	ldr	r1, [r7, #4]
 8017970:	fa01 f303 	lsl.w	r3, r1, r3
 8017974:	431a      	orrs	r2, r3
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	621a      	str	r2, [r3, #32]
}
 801797a:	bf00      	nop
 801797c:	371c      	adds	r7, #28
 801797e:	46bd      	mov	sp, r7
 8017980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017984:	4770      	bx	lr
	...

08017988 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017988:	b480      	push	{r7}
 801798a:	b085      	sub	sp, #20
 801798c:	af00      	add	r7, sp, #0
 801798e:	6078      	str	r0, [r7, #4]
 8017990:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017998:	2b01      	cmp	r3, #1
 801799a:	d101      	bne.n	80179a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801799c:	2302      	movs	r3, #2
 801799e:	e068      	b.n	8017a72 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2201      	movs	r2, #1
 80179a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	2202      	movs	r2, #2
 80179ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	689b      	ldr	r3, [r3, #8]
 80179be:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	4a2e      	ldr	r2, [pc, #184]	; (8017a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80179c6:	4293      	cmp	r3, r2
 80179c8:	d004      	beq.n	80179d4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	681b      	ldr	r3, [r3, #0]
 80179ce:	4a2d      	ldr	r2, [pc, #180]	; (8017a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80179d0:	4293      	cmp	r3, r2
 80179d2:	d108      	bne.n	80179e6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80179d4:	68fb      	ldr	r3, [r7, #12]
 80179d6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80179da:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	68fa      	ldr	r2, [r7, #12]
 80179e2:	4313      	orrs	r3, r2
 80179e4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80179ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80179ee:	683b      	ldr	r3, [r7, #0]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	68fa      	ldr	r2, [r7, #12]
 80179f4:	4313      	orrs	r3, r2
 80179f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	68fa      	ldr	r2, [r7, #12]
 80179fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	4a1e      	ldr	r2, [pc, #120]	; (8017a80 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017a06:	4293      	cmp	r3, r2
 8017a08:	d01d      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	681b      	ldr	r3, [r3, #0]
 8017a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017a12:	d018      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	4a1b      	ldr	r2, [pc, #108]	; (8017a88 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017a1a:	4293      	cmp	r3, r2
 8017a1c:	d013      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	4a1a      	ldr	r2, [pc, #104]	; (8017a8c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d00e      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	4a18      	ldr	r2, [pc, #96]	; (8017a90 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8017a2e:	4293      	cmp	r3, r2
 8017a30:	d009      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	681b      	ldr	r3, [r3, #0]
 8017a36:	4a13      	ldr	r2, [pc, #76]	; (8017a84 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017a38:	4293      	cmp	r3, r2
 8017a3a:	d004      	beq.n	8017a46 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	4a14      	ldr	r2, [pc, #80]	; (8017a94 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017a42:	4293      	cmp	r3, r2
 8017a44:	d10c      	bne.n	8017a60 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017a46:	68bb      	ldr	r3, [r7, #8]
 8017a48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017a4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	689b      	ldr	r3, [r3, #8]
 8017a52:	68ba      	ldr	r2, [r7, #8]
 8017a54:	4313      	orrs	r3, r2
 8017a56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	68ba      	ldr	r2, [r7, #8]
 8017a5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2201      	movs	r2, #1
 8017a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017a70:	2300      	movs	r3, #0
}
 8017a72:	4618      	mov	r0, r3
 8017a74:	3714      	adds	r7, #20
 8017a76:	46bd      	mov	sp, r7
 8017a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a7c:	4770      	bx	lr
 8017a7e:	bf00      	nop
 8017a80:	40010000 	.word	0x40010000
 8017a84:	40010400 	.word	0x40010400
 8017a88:	40000400 	.word	0x40000400
 8017a8c:	40000800 	.word	0x40000800
 8017a90:	40000c00 	.word	0x40000c00
 8017a94:	40001800 	.word	0x40001800

08017a98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017a98:	b480      	push	{r7}
 8017a9a:	b085      	sub	sp, #20
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	6078      	str	r0, [r7, #4]
 8017aa0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017aac:	2b01      	cmp	r3, #1
 8017aae:	d101      	bne.n	8017ab4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017ab0:	2302      	movs	r3, #2
 8017ab2:	e065      	b.n	8017b80 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	2201      	movs	r2, #1
 8017ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017abc:	68fb      	ldr	r3, [r7, #12]
 8017abe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8017ac2:	683b      	ldr	r3, [r7, #0]
 8017ac4:	68db      	ldr	r3, [r3, #12]
 8017ac6:	4313      	orrs	r3, r2
 8017ac8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017aca:	68fb      	ldr	r3, [r7, #12]
 8017acc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017ad0:	683b      	ldr	r3, [r7, #0]
 8017ad2:	689b      	ldr	r3, [r3, #8]
 8017ad4:	4313      	orrs	r3, r2
 8017ad6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017ad8:	68fb      	ldr	r3, [r7, #12]
 8017ada:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	685b      	ldr	r3, [r3, #4]
 8017ae2:	4313      	orrs	r3, r2
 8017ae4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8017aec:	683b      	ldr	r3, [r7, #0]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	4313      	orrs	r3, r2
 8017af2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017af4:	68fb      	ldr	r3, [r7, #12]
 8017af6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017afa:	683b      	ldr	r3, [r7, #0]
 8017afc:	691b      	ldr	r3, [r3, #16]
 8017afe:	4313      	orrs	r3, r2
 8017b00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017b02:	68fb      	ldr	r3, [r7, #12]
 8017b04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8017b08:	683b      	ldr	r3, [r7, #0]
 8017b0a:	695b      	ldr	r3, [r3, #20]
 8017b0c:	4313      	orrs	r3, r2
 8017b0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017b10:	68fb      	ldr	r3, [r7, #12]
 8017b12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8017b16:	683b      	ldr	r3, [r7, #0]
 8017b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017b1a:	4313      	orrs	r3, r2
 8017b1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017b1e:	68fb      	ldr	r3, [r7, #12]
 8017b20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8017b24:	683b      	ldr	r3, [r7, #0]
 8017b26:	699b      	ldr	r3, [r3, #24]
 8017b28:	041b      	lsls	r3, r3, #16
 8017b2a:	4313      	orrs	r3, r2
 8017b2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	4a16      	ldr	r2, [pc, #88]	; (8017b8c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d004      	beq.n	8017b42 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	4a14      	ldr	r2, [pc, #80]	; (8017b90 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8017b3e:	4293      	cmp	r3, r2
 8017b40:	d115      	bne.n	8017b6e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017b42:	68fb      	ldr	r3, [r7, #12]
 8017b44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017b4c:	051b      	lsls	r3, r3, #20
 8017b4e:	4313      	orrs	r3, r2
 8017b50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017b58:	683b      	ldr	r3, [r7, #0]
 8017b5a:	69db      	ldr	r3, [r3, #28]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017b60:	68fb      	ldr	r3, [r7, #12]
 8017b62:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017b66:	683b      	ldr	r3, [r7, #0]
 8017b68:	6a1b      	ldr	r3, [r3, #32]
 8017b6a:	4313      	orrs	r3, r2
 8017b6c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	681b      	ldr	r3, [r3, #0]
 8017b72:	68fa      	ldr	r2, [r7, #12]
 8017b74:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017b7e:	2300      	movs	r3, #0
}
 8017b80:	4618      	mov	r0, r3
 8017b82:	3714      	adds	r7, #20
 8017b84:	46bd      	mov	sp, r7
 8017b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8a:	4770      	bx	lr
 8017b8c:	40010000 	.word	0x40010000
 8017b90:	40010400 	.word	0x40010400

08017b94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017b94:	b480      	push	{r7}
 8017b96:	b083      	sub	sp, #12
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017b9c:	bf00      	nop
 8017b9e:	370c      	adds	r7, #12
 8017ba0:	46bd      	mov	sp, r7
 8017ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ba6:	4770      	bx	lr

08017ba8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017ba8:	b480      	push	{r7}
 8017baa:	b083      	sub	sp, #12
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017bb0:	bf00      	nop
 8017bb2:	370c      	adds	r7, #12
 8017bb4:	46bd      	mov	sp, r7
 8017bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bba:	4770      	bx	lr

08017bbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017bbc:	b480      	push	{r7}
 8017bbe:	b083      	sub	sp, #12
 8017bc0:	af00      	add	r7, sp, #0
 8017bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017bc4:	bf00      	nop
 8017bc6:	370c      	adds	r7, #12
 8017bc8:	46bd      	mov	sp, r7
 8017bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bce:	4770      	bx	lr

08017bd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b082      	sub	sp, #8
 8017bd4:	af00      	add	r7, sp, #0
 8017bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d101      	bne.n	8017be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017bde:	2301      	movs	r3, #1
 8017be0:	e042      	b.n	8017c68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d106      	bne.n	8017bfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	2200      	movs	r2, #0
 8017bf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017bf4:	6878      	ldr	r0, [r7, #4]
 8017bf6:	f7ea f9c1 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2224      	movs	r2, #36	; 0x24
 8017bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8017c02:	687b      	ldr	r3, [r7, #4]
 8017c04:	681b      	ldr	r3, [r3, #0]
 8017c06:	681a      	ldr	r2, [r3, #0]
 8017c08:	687b      	ldr	r3, [r7, #4]
 8017c0a:	681b      	ldr	r3, [r3, #0]
 8017c0c:	f022 0201 	bic.w	r2, r2, #1
 8017c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017c12:	6878      	ldr	r0, [r7, #4]
 8017c14:	f000 f9c0 	bl	8017f98 <UART_SetConfig>
 8017c18:	4603      	mov	r3, r0
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d101      	bne.n	8017c22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8017c1e:	2301      	movs	r3, #1
 8017c20:	e022      	b.n	8017c68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d002      	beq.n	8017c30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8017c2a:	6878      	ldr	r0, [r7, #4]
 8017c2c:	f002 fb32 	bl	801a294 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	685a      	ldr	r2, [r3, #4]
 8017c36:	687b      	ldr	r3, [r7, #4]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	689a      	ldr	r2, [r3, #8]
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	681a      	ldr	r2, [r3, #0]
 8017c56:	687b      	ldr	r3, [r7, #4]
 8017c58:	681b      	ldr	r3, [r3, #0]
 8017c5a:	f042 0201 	orr.w	r2, r2, #1
 8017c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017c60:	6878      	ldr	r0, [r7, #4]
 8017c62:	f002 fbb9 	bl	801a3d8 <UART_CheckIdleState>
 8017c66:	4603      	mov	r3, r0
}
 8017c68:	4618      	mov	r0, r3
 8017c6a:	3708      	adds	r7, #8
 8017c6c:	46bd      	mov	sp, r7
 8017c6e:	bd80      	pop	{r7, pc}

08017c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017c70:	b580      	push	{r7, lr}
 8017c72:	b088      	sub	sp, #32
 8017c74:	af00      	add	r7, sp, #0
 8017c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	69db      	ldr	r3, [r3, #28]
 8017c7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	689b      	ldr	r3, [r3, #8]
 8017c8e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017c90:	69fa      	ldr	r2, [r7, #28]
 8017c92:	f640 030f 	movw	r3, #2063	; 0x80f
 8017c96:	4013      	ands	r3, r2
 8017c98:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8017c9a:	693b      	ldr	r3, [r7, #16]
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d118      	bne.n	8017cd2 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017ca0:	69fb      	ldr	r3, [r7, #28]
 8017ca2:	f003 0320 	and.w	r3, r3, #32
 8017ca6:	2b00      	cmp	r3, #0
 8017ca8:	d013      	beq.n	8017cd2 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017caa:	69bb      	ldr	r3, [r7, #24]
 8017cac:	f003 0320 	and.w	r3, r3, #32
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d104      	bne.n	8017cbe <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017cb4:	697b      	ldr	r3, [r7, #20]
 8017cb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d009      	beq.n	8017cd2 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	f000 8145 	beq.w	8017f52 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ccc:	6878      	ldr	r0, [r7, #4]
 8017cce:	4798      	blx	r3
      }
      return;
 8017cd0:	e13f      	b.n	8017f52 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017cd2:	693b      	ldr	r3, [r7, #16]
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	f000 80e8 	beq.w	8017eaa <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017cda:	697a      	ldr	r2, [r7, #20]
 8017cdc:	4ba1      	ldr	r3, [pc, #644]	; (8017f64 <HAL_UART_IRQHandler+0x2f4>)
 8017cde:	4013      	ands	r3, r2
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d105      	bne.n	8017cf0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017ce4:	69ba      	ldr	r2, [r7, #24]
 8017ce6:	4ba0      	ldr	r3, [pc, #640]	; (8017f68 <HAL_UART_IRQHandler+0x2f8>)
 8017ce8:	4013      	ands	r3, r2
 8017cea:	2b00      	cmp	r3, #0
 8017cec:	f000 80dd 	beq.w	8017eaa <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017cf0:	69fb      	ldr	r3, [r7, #28]
 8017cf2:	f003 0301 	and.w	r3, r3, #1
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	d010      	beq.n	8017d1c <HAL_UART_IRQHandler+0xac>
 8017cfa:	69bb      	ldr	r3, [r7, #24]
 8017cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d00b      	beq.n	8017d1c <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017d04:	687b      	ldr	r3, [r7, #4]
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	2201      	movs	r2, #1
 8017d0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d12:	f043 0201 	orr.w	r2, r3, #1
 8017d16:	687b      	ldr	r3, [r7, #4]
 8017d18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017d1c:	69fb      	ldr	r3, [r7, #28]
 8017d1e:	f003 0302 	and.w	r3, r3, #2
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d010      	beq.n	8017d48 <HAL_UART_IRQHandler+0xd8>
 8017d26:	697b      	ldr	r3, [r7, #20]
 8017d28:	f003 0301 	and.w	r3, r3, #1
 8017d2c:	2b00      	cmp	r3, #0
 8017d2e:	d00b      	beq.n	8017d48 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	2202      	movs	r2, #2
 8017d36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d3e:	f043 0204 	orr.w	r2, r3, #4
 8017d42:	687b      	ldr	r3, [r7, #4]
 8017d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017d48:	69fb      	ldr	r3, [r7, #28]
 8017d4a:	f003 0304 	and.w	r3, r3, #4
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	d010      	beq.n	8017d74 <HAL_UART_IRQHandler+0x104>
 8017d52:	697b      	ldr	r3, [r7, #20]
 8017d54:	f003 0301 	and.w	r3, r3, #1
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d00b      	beq.n	8017d74 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	2204      	movs	r2, #4
 8017d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017d6a:	f043 0202 	orr.w	r2, r3, #2
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8017d74:	69fb      	ldr	r3, [r7, #28]
 8017d76:	f003 0308 	and.w	r3, r3, #8
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	d015      	beq.n	8017daa <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d7e:	69bb      	ldr	r3, [r7, #24]
 8017d80:	f003 0320 	and.w	r3, r3, #32
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	d104      	bne.n	8017d92 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8017d88:	697a      	ldr	r2, [r7, #20]
 8017d8a:	4b76      	ldr	r3, [pc, #472]	; (8017f64 <HAL_UART_IRQHandler+0x2f4>)
 8017d8c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d00b      	beq.n	8017daa <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	2208      	movs	r2, #8
 8017d98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017da0:	f043 0208 	orr.w	r2, r3, #8
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8017daa:	69fb      	ldr	r3, [r7, #28]
 8017dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d011      	beq.n	8017dd8 <HAL_UART_IRQHandler+0x168>
 8017db4:	69bb      	ldr	r3, [r7, #24]
 8017db6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d00c      	beq.n	8017dd8 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8017dbe:	687b      	ldr	r3, [r7, #4]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017dc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dce:	f043 0220 	orr.w	r2, r3, #32
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	f000 80b9 	beq.w	8017f56 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017de4:	69fb      	ldr	r3, [r7, #28]
 8017de6:	f003 0320 	and.w	r3, r3, #32
 8017dea:	2b00      	cmp	r3, #0
 8017dec:	d011      	beq.n	8017e12 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017dee:	69bb      	ldr	r3, [r7, #24]
 8017df0:	f003 0320 	and.w	r3, r3, #32
 8017df4:	2b00      	cmp	r3, #0
 8017df6:	d104      	bne.n	8017e02 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017df8:	697b      	ldr	r3, [r7, #20]
 8017dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d007      	beq.n	8017e12 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d003      	beq.n	8017e12 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8017e0a:	687b      	ldr	r3, [r7, #4]
 8017e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8017e12:	687b      	ldr	r3, [r7, #4]
 8017e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e18:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017e1a:	687b      	ldr	r3, [r7, #4]
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	689b      	ldr	r3, [r3, #8]
 8017e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e24:	2b40      	cmp	r3, #64	; 0x40
 8017e26:	d004      	beq.n	8017e32 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8017e28:	68fb      	ldr	r3, [r7, #12]
 8017e2a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d031      	beq.n	8017e96 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8017e32:	6878      	ldr	r0, [r7, #4]
 8017e34:	f002 fb98 	bl	801a568 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e38:	687b      	ldr	r3, [r7, #4]
 8017e3a:	681b      	ldr	r3, [r3, #0]
 8017e3c:	689b      	ldr	r3, [r3, #8]
 8017e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017e42:	2b40      	cmp	r3, #64	; 0x40
 8017e44:	d123      	bne.n	8017e8e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	689a      	ldr	r2, [r3, #8]
 8017e4c:	687b      	ldr	r3, [r7, #4]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8017e54:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8017e56:	687b      	ldr	r3, [r7, #4]
 8017e58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d013      	beq.n	8017e86 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e62:	4a42      	ldr	r2, [pc, #264]	; (8017f6c <HAL_UART_IRQHandler+0x2fc>)
 8017e64:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e6a:	4618      	mov	r0, r3
 8017e6c:	f7fa fe14 	bl	8012a98 <HAL_DMA_Abort_IT>
 8017e70:	4603      	mov	r3, r0
 8017e72:	2b00      	cmp	r3, #0
 8017e74:	d017      	beq.n	8017ea6 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8017e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017e7c:	687a      	ldr	r2, [r7, #4]
 8017e7e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8017e80:	4610      	mov	r0, r2
 8017e82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e84:	e00f      	b.n	8017ea6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8017e86:	6878      	ldr	r0, [r7, #4]
 8017e88:	f000 f87c 	bl	8017f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e8c:	e00b      	b.n	8017ea6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017e8e:	6878      	ldr	r0, [r7, #4]
 8017e90:	f000 f878 	bl	8017f84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017e94:	e007      	b.n	8017ea6 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8017e96:	6878      	ldr	r0, [r7, #4]
 8017e98:	f000 f874 	bl	8017f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8017ea4:	e057      	b.n	8017f56 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8017ea6:	bf00      	nop
    return;
 8017ea8:	e055      	b.n	8017f56 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8017eaa:	69fb      	ldr	r3, [r7, #28]
 8017eac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d00d      	beq.n	8017ed0 <HAL_UART_IRQHandler+0x260>
 8017eb4:	697b      	ldr	r3, [r7, #20]
 8017eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d008      	beq.n	8017ed0 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017ec6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8017ec8:	6878      	ldr	r0, [r7, #4]
 8017eca:	f002 fba1 	bl	801a610 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017ece:	e045      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8017ed0:	69fb      	ldr	r3, [r7, #28]
 8017ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d012      	beq.n	8017f00 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8017eda:	69bb      	ldr	r3, [r7, #24]
 8017edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d104      	bne.n	8017eee <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8017ee4:	697b      	ldr	r3, [r7, #20]
 8017ee6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d008      	beq.n	8017f00 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ef2:	2b00      	cmp	r3, #0
 8017ef4:	d031      	beq.n	8017f5a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	4798      	blx	r3
    }
    return;
 8017efe:	e02c      	b.n	8017f5a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8017f00:	69fb      	ldr	r3, [r7, #28]
 8017f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	d008      	beq.n	8017f1c <HAL_UART_IRQHandler+0x2ac>
 8017f0a:	69bb      	ldr	r3, [r7, #24]
 8017f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d003      	beq.n	8017f1c <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8017f14:	6878      	ldr	r0, [r7, #4]
 8017f16:	f002 fb61 	bl	801a5dc <UART_EndTransmit_IT>
    return;
 8017f1a:	e01f      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017f22:	2b00      	cmp	r3, #0
 8017f24:	d008      	beq.n	8017f38 <HAL_UART_IRQHandler+0x2c8>
 8017f26:	69bb      	ldr	r3, [r7, #24]
 8017f28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	d003      	beq.n	8017f38 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8017f30:	6878      	ldr	r0, [r7, #4]
 8017f32:	f002 fb81 	bl	801a638 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f36:	e011      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8017f38:	69fb      	ldr	r3, [r7, #28]
 8017f3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d00c      	beq.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
 8017f42:	69bb      	ldr	r3, [r7, #24]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	da09      	bge.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8017f48:	6878      	ldr	r0, [r7, #4]
 8017f4a:	f002 fb6b 	bl	801a624 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8017f4e:	bf00      	nop
 8017f50:	e004      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
      return;
 8017f52:	bf00      	nop
 8017f54:	e002      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
    return;
 8017f56:	bf00      	nop
 8017f58:	e000      	b.n	8017f5c <HAL_UART_IRQHandler+0x2ec>
    return;
 8017f5a:	bf00      	nop
  }
}
 8017f5c:	3720      	adds	r7, #32
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	bd80      	pop	{r7, pc}
 8017f62:	bf00      	nop
 8017f64:	10000001 	.word	0x10000001
 8017f68:	04000120 	.word	0x04000120
 8017f6c:	0801a5b1 	.word	0x0801a5b1

08017f70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8017f70:	b480      	push	{r7}
 8017f72:	b083      	sub	sp, #12
 8017f74:	af00      	add	r7, sp, #0
 8017f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8017f78:	bf00      	nop
 8017f7a:	370c      	adds	r7, #12
 8017f7c:	46bd      	mov	sp, r7
 8017f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f82:	4770      	bx	lr

08017f84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8017f84:	b480      	push	{r7}
 8017f86:	b083      	sub	sp, #12
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8017f8c:	bf00      	nop
 8017f8e:	370c      	adds	r7, #12
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr

08017f98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8017f98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8017f9c:	b090      	sub	sp, #64	; 0x40
 8017f9e:	af00      	add	r7, sp, #0
 8017fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8017fac:	2300      	movs	r3, #0
 8017fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	689a      	ldr	r2, [r3, #8]
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	691b      	ldr	r3, [r3, #16]
 8017fb8:	431a      	orrs	r2, r3
 8017fba:	687b      	ldr	r3, [r7, #4]
 8017fbc:	695b      	ldr	r3, [r3, #20]
 8017fbe:	431a      	orrs	r2, r3
 8017fc0:	687b      	ldr	r3, [r7, #4]
 8017fc2:	69db      	ldr	r3, [r3, #28]
 8017fc4:	4313      	orrs	r3, r2
 8017fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017fcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8017fce:	4313      	orrs	r3, r2
 8017fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	681b      	ldr	r3, [r3, #0]
 8017fd6:	681a      	ldr	r2, [r3, #0]
 8017fd8:	4bc1      	ldr	r3, [pc, #772]	; (80182e0 <UART_SetConfig+0x348>)
 8017fda:	4013      	ands	r3, r2
 8017fdc:	687a      	ldr	r2, [r7, #4]
 8017fde:	6812      	ldr	r2, [r2, #0]
 8017fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017fe2:	430b      	orrs	r3, r1
 8017fe4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	681b      	ldr	r3, [r3, #0]
 8017fea:	685b      	ldr	r3, [r3, #4]
 8017fec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8017ff0:	687b      	ldr	r3, [r7, #4]
 8017ff2:	68da      	ldr	r2, [r3, #12]
 8017ff4:	687b      	ldr	r3, [r7, #4]
 8017ff6:	681b      	ldr	r3, [r3, #0]
 8017ff8:	430a      	orrs	r2, r1
 8017ffa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	699b      	ldr	r3, [r3, #24]
 8018000:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	681b      	ldr	r3, [r3, #0]
 8018006:	4ab7      	ldr	r2, [pc, #732]	; (80182e4 <UART_SetConfig+0x34c>)
 8018008:	4293      	cmp	r3, r2
 801800a:	d004      	beq.n	8018016 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	6a1b      	ldr	r3, [r3, #32]
 8018010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018012:	4313      	orrs	r3, r2
 8018014:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	689a      	ldr	r2, [r3, #8]
 801801c:	4bb2      	ldr	r3, [pc, #712]	; (80182e8 <UART_SetConfig+0x350>)
 801801e:	4013      	ands	r3, r2
 8018020:	687a      	ldr	r2, [r7, #4]
 8018022:	6812      	ldr	r2, [r2, #0]
 8018024:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018026:	430b      	orrs	r3, r1
 8018028:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	681b      	ldr	r3, [r3, #0]
 801802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018030:	f023 010f 	bic.w	r1, r3, #15
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	430a      	orrs	r2, r1
 801803e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	4aa9      	ldr	r2, [pc, #676]	; (80182ec <UART_SetConfig+0x354>)
 8018046:	4293      	cmp	r3, r2
 8018048:	d177      	bne.n	801813a <UART_SetConfig+0x1a2>
 801804a:	4ba9      	ldr	r3, [pc, #676]	; (80182f0 <UART_SetConfig+0x358>)
 801804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801804e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018052:	2b28      	cmp	r3, #40	; 0x28
 8018054:	d86c      	bhi.n	8018130 <UART_SetConfig+0x198>
 8018056:	a201      	add	r2, pc, #4	; (adr r2, 801805c <UART_SetConfig+0xc4>)
 8018058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801805c:	08018101 	.word	0x08018101
 8018060:	08018131 	.word	0x08018131
 8018064:	08018131 	.word	0x08018131
 8018068:	08018131 	.word	0x08018131
 801806c:	08018131 	.word	0x08018131
 8018070:	08018131 	.word	0x08018131
 8018074:	08018131 	.word	0x08018131
 8018078:	08018131 	.word	0x08018131
 801807c:	08018109 	.word	0x08018109
 8018080:	08018131 	.word	0x08018131
 8018084:	08018131 	.word	0x08018131
 8018088:	08018131 	.word	0x08018131
 801808c:	08018131 	.word	0x08018131
 8018090:	08018131 	.word	0x08018131
 8018094:	08018131 	.word	0x08018131
 8018098:	08018131 	.word	0x08018131
 801809c:	08018111 	.word	0x08018111
 80180a0:	08018131 	.word	0x08018131
 80180a4:	08018131 	.word	0x08018131
 80180a8:	08018131 	.word	0x08018131
 80180ac:	08018131 	.word	0x08018131
 80180b0:	08018131 	.word	0x08018131
 80180b4:	08018131 	.word	0x08018131
 80180b8:	08018131 	.word	0x08018131
 80180bc:	08018119 	.word	0x08018119
 80180c0:	08018131 	.word	0x08018131
 80180c4:	08018131 	.word	0x08018131
 80180c8:	08018131 	.word	0x08018131
 80180cc:	08018131 	.word	0x08018131
 80180d0:	08018131 	.word	0x08018131
 80180d4:	08018131 	.word	0x08018131
 80180d8:	08018131 	.word	0x08018131
 80180dc:	08018121 	.word	0x08018121
 80180e0:	08018131 	.word	0x08018131
 80180e4:	08018131 	.word	0x08018131
 80180e8:	08018131 	.word	0x08018131
 80180ec:	08018131 	.word	0x08018131
 80180f0:	08018131 	.word	0x08018131
 80180f4:	08018131 	.word	0x08018131
 80180f8:	08018131 	.word	0x08018131
 80180fc:	08018129 	.word	0x08018129
 8018100:	2301      	movs	r3, #1
 8018102:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018106:	e233      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018108:	2304      	movs	r3, #4
 801810a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801810e:	e22f      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018110:	2308      	movs	r3, #8
 8018112:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018116:	e22b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018118:	2310      	movs	r3, #16
 801811a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801811e:	e227      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018120:	2320      	movs	r3, #32
 8018122:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018126:	e223      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018128:	2340      	movs	r3, #64	; 0x40
 801812a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801812e:	e21f      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018130:	2380      	movs	r3, #128	; 0x80
 8018132:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018136:	bf00      	nop
 8018138:	e21a      	b.n	8018570 <UART_SetConfig+0x5d8>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	4a6d      	ldr	r2, [pc, #436]	; (80182f4 <UART_SetConfig+0x35c>)
 8018140:	4293      	cmp	r3, r2
 8018142:	d132      	bne.n	80181aa <UART_SetConfig+0x212>
 8018144:	4b6a      	ldr	r3, [pc, #424]	; (80182f0 <UART_SetConfig+0x358>)
 8018146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018148:	f003 0307 	and.w	r3, r3, #7
 801814c:	2b05      	cmp	r3, #5
 801814e:	d827      	bhi.n	80181a0 <UART_SetConfig+0x208>
 8018150:	a201      	add	r2, pc, #4	; (adr r2, 8018158 <UART_SetConfig+0x1c0>)
 8018152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018156:	bf00      	nop
 8018158:	08018171 	.word	0x08018171
 801815c:	08018179 	.word	0x08018179
 8018160:	08018181 	.word	0x08018181
 8018164:	08018189 	.word	0x08018189
 8018168:	08018191 	.word	0x08018191
 801816c:	08018199 	.word	0x08018199
 8018170:	2300      	movs	r3, #0
 8018172:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018176:	e1fb      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018178:	2304      	movs	r3, #4
 801817a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801817e:	e1f7      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018180:	2308      	movs	r3, #8
 8018182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018186:	e1f3      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018188:	2310      	movs	r3, #16
 801818a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801818e:	e1ef      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018190:	2320      	movs	r3, #32
 8018192:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018196:	e1eb      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018198:	2340      	movs	r3, #64	; 0x40
 801819a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801819e:	e1e7      	b.n	8018570 <UART_SetConfig+0x5d8>
 80181a0:	2380      	movs	r3, #128	; 0x80
 80181a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80181a6:	bf00      	nop
 80181a8:	e1e2      	b.n	8018570 <UART_SetConfig+0x5d8>
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	4a52      	ldr	r2, [pc, #328]	; (80182f8 <UART_SetConfig+0x360>)
 80181b0:	4293      	cmp	r3, r2
 80181b2:	d132      	bne.n	801821a <UART_SetConfig+0x282>
 80181b4:	4b4e      	ldr	r3, [pc, #312]	; (80182f0 <UART_SetConfig+0x358>)
 80181b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80181b8:	f003 0307 	and.w	r3, r3, #7
 80181bc:	2b05      	cmp	r3, #5
 80181be:	d827      	bhi.n	8018210 <UART_SetConfig+0x278>
 80181c0:	a201      	add	r2, pc, #4	; (adr r2, 80181c8 <UART_SetConfig+0x230>)
 80181c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80181c6:	bf00      	nop
 80181c8:	080181e1 	.word	0x080181e1
 80181cc:	080181e9 	.word	0x080181e9
 80181d0:	080181f1 	.word	0x080181f1
 80181d4:	080181f9 	.word	0x080181f9
 80181d8:	08018201 	.word	0x08018201
 80181dc:	08018209 	.word	0x08018209
 80181e0:	2300      	movs	r3, #0
 80181e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80181e6:	e1c3      	b.n	8018570 <UART_SetConfig+0x5d8>
 80181e8:	2304      	movs	r3, #4
 80181ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80181ee:	e1bf      	b.n	8018570 <UART_SetConfig+0x5d8>
 80181f0:	2308      	movs	r3, #8
 80181f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80181f6:	e1bb      	b.n	8018570 <UART_SetConfig+0x5d8>
 80181f8:	2310      	movs	r3, #16
 80181fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80181fe:	e1b7      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018200:	2320      	movs	r3, #32
 8018202:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018206:	e1b3      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018208:	2340      	movs	r3, #64	; 0x40
 801820a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801820e:	e1af      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018210:	2380      	movs	r3, #128	; 0x80
 8018212:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018216:	bf00      	nop
 8018218:	e1aa      	b.n	8018570 <UART_SetConfig+0x5d8>
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4a37      	ldr	r2, [pc, #220]	; (80182fc <UART_SetConfig+0x364>)
 8018220:	4293      	cmp	r3, r2
 8018222:	d132      	bne.n	801828a <UART_SetConfig+0x2f2>
 8018224:	4b32      	ldr	r3, [pc, #200]	; (80182f0 <UART_SetConfig+0x358>)
 8018226:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018228:	f003 0307 	and.w	r3, r3, #7
 801822c:	2b05      	cmp	r3, #5
 801822e:	d827      	bhi.n	8018280 <UART_SetConfig+0x2e8>
 8018230:	a201      	add	r2, pc, #4	; (adr r2, 8018238 <UART_SetConfig+0x2a0>)
 8018232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018236:	bf00      	nop
 8018238:	08018251 	.word	0x08018251
 801823c:	08018259 	.word	0x08018259
 8018240:	08018261 	.word	0x08018261
 8018244:	08018269 	.word	0x08018269
 8018248:	08018271 	.word	0x08018271
 801824c:	08018279 	.word	0x08018279
 8018250:	2300      	movs	r3, #0
 8018252:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018256:	e18b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018258:	2304      	movs	r3, #4
 801825a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801825e:	e187      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018260:	2308      	movs	r3, #8
 8018262:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018266:	e183      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018268:	2310      	movs	r3, #16
 801826a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801826e:	e17f      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018270:	2320      	movs	r3, #32
 8018272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018276:	e17b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018278:	2340      	movs	r3, #64	; 0x40
 801827a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801827e:	e177      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018280:	2380      	movs	r3, #128	; 0x80
 8018282:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018286:	bf00      	nop
 8018288:	e172      	b.n	8018570 <UART_SetConfig+0x5d8>
 801828a:	687b      	ldr	r3, [r7, #4]
 801828c:	681b      	ldr	r3, [r3, #0]
 801828e:	4a1c      	ldr	r2, [pc, #112]	; (8018300 <UART_SetConfig+0x368>)
 8018290:	4293      	cmp	r3, r2
 8018292:	d144      	bne.n	801831e <UART_SetConfig+0x386>
 8018294:	4b16      	ldr	r3, [pc, #88]	; (80182f0 <UART_SetConfig+0x358>)
 8018296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018298:	f003 0307 	and.w	r3, r3, #7
 801829c:	2b05      	cmp	r3, #5
 801829e:	d839      	bhi.n	8018314 <UART_SetConfig+0x37c>
 80182a0:	a201      	add	r2, pc, #4	; (adr r2, 80182a8 <UART_SetConfig+0x310>)
 80182a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80182a6:	bf00      	nop
 80182a8:	080182c1 	.word	0x080182c1
 80182ac:	080182c9 	.word	0x080182c9
 80182b0:	080182d1 	.word	0x080182d1
 80182b4:	080182d9 	.word	0x080182d9
 80182b8:	08018305 	.word	0x08018305
 80182bc:	0801830d 	.word	0x0801830d
 80182c0:	2300      	movs	r3, #0
 80182c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182c6:	e153      	b.n	8018570 <UART_SetConfig+0x5d8>
 80182c8:	2304      	movs	r3, #4
 80182ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182ce:	e14f      	b.n	8018570 <UART_SetConfig+0x5d8>
 80182d0:	2308      	movs	r3, #8
 80182d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182d6:	e14b      	b.n	8018570 <UART_SetConfig+0x5d8>
 80182d8:	2310      	movs	r3, #16
 80182da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80182de:	e147      	b.n	8018570 <UART_SetConfig+0x5d8>
 80182e0:	cfff69f3 	.word	0xcfff69f3
 80182e4:	58000c00 	.word	0x58000c00
 80182e8:	11fff4ff 	.word	0x11fff4ff
 80182ec:	40011000 	.word	0x40011000
 80182f0:	58024400 	.word	0x58024400
 80182f4:	40004400 	.word	0x40004400
 80182f8:	40004800 	.word	0x40004800
 80182fc:	40004c00 	.word	0x40004c00
 8018300:	40005000 	.word	0x40005000
 8018304:	2320      	movs	r3, #32
 8018306:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801830a:	e131      	b.n	8018570 <UART_SetConfig+0x5d8>
 801830c:	2340      	movs	r3, #64	; 0x40
 801830e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018312:	e12d      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018314:	2380      	movs	r3, #128	; 0x80
 8018316:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801831a:	bf00      	nop
 801831c:	e128      	b.n	8018570 <UART_SetConfig+0x5d8>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4ac3      	ldr	r2, [pc, #780]	; (8018630 <UART_SetConfig+0x698>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d178      	bne.n	801841a <UART_SetConfig+0x482>
 8018328:	4bc2      	ldr	r3, [pc, #776]	; (8018634 <UART_SetConfig+0x69c>)
 801832a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801832c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018330:	2b28      	cmp	r3, #40	; 0x28
 8018332:	d86d      	bhi.n	8018410 <UART_SetConfig+0x478>
 8018334:	a201      	add	r2, pc, #4	; (adr r2, 801833c <UART_SetConfig+0x3a4>)
 8018336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801833a:	bf00      	nop
 801833c:	080183e1 	.word	0x080183e1
 8018340:	08018411 	.word	0x08018411
 8018344:	08018411 	.word	0x08018411
 8018348:	08018411 	.word	0x08018411
 801834c:	08018411 	.word	0x08018411
 8018350:	08018411 	.word	0x08018411
 8018354:	08018411 	.word	0x08018411
 8018358:	08018411 	.word	0x08018411
 801835c:	080183e9 	.word	0x080183e9
 8018360:	08018411 	.word	0x08018411
 8018364:	08018411 	.word	0x08018411
 8018368:	08018411 	.word	0x08018411
 801836c:	08018411 	.word	0x08018411
 8018370:	08018411 	.word	0x08018411
 8018374:	08018411 	.word	0x08018411
 8018378:	08018411 	.word	0x08018411
 801837c:	080183f1 	.word	0x080183f1
 8018380:	08018411 	.word	0x08018411
 8018384:	08018411 	.word	0x08018411
 8018388:	08018411 	.word	0x08018411
 801838c:	08018411 	.word	0x08018411
 8018390:	08018411 	.word	0x08018411
 8018394:	08018411 	.word	0x08018411
 8018398:	08018411 	.word	0x08018411
 801839c:	080183f9 	.word	0x080183f9
 80183a0:	08018411 	.word	0x08018411
 80183a4:	08018411 	.word	0x08018411
 80183a8:	08018411 	.word	0x08018411
 80183ac:	08018411 	.word	0x08018411
 80183b0:	08018411 	.word	0x08018411
 80183b4:	08018411 	.word	0x08018411
 80183b8:	08018411 	.word	0x08018411
 80183bc:	08018401 	.word	0x08018401
 80183c0:	08018411 	.word	0x08018411
 80183c4:	08018411 	.word	0x08018411
 80183c8:	08018411 	.word	0x08018411
 80183cc:	08018411 	.word	0x08018411
 80183d0:	08018411 	.word	0x08018411
 80183d4:	08018411 	.word	0x08018411
 80183d8:	08018411 	.word	0x08018411
 80183dc:	08018409 	.word	0x08018409
 80183e0:	2301      	movs	r3, #1
 80183e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183e6:	e0c3      	b.n	8018570 <UART_SetConfig+0x5d8>
 80183e8:	2304      	movs	r3, #4
 80183ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183ee:	e0bf      	b.n	8018570 <UART_SetConfig+0x5d8>
 80183f0:	2308      	movs	r3, #8
 80183f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183f6:	e0bb      	b.n	8018570 <UART_SetConfig+0x5d8>
 80183f8:	2310      	movs	r3, #16
 80183fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183fe:	e0b7      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018400:	2320      	movs	r3, #32
 8018402:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018406:	e0b3      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018408:	2340      	movs	r3, #64	; 0x40
 801840a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801840e:	e0af      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018410:	2380      	movs	r3, #128	; 0x80
 8018412:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018416:	bf00      	nop
 8018418:	e0aa      	b.n	8018570 <UART_SetConfig+0x5d8>
 801841a:	687b      	ldr	r3, [r7, #4]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	4a86      	ldr	r2, [pc, #536]	; (8018638 <UART_SetConfig+0x6a0>)
 8018420:	4293      	cmp	r3, r2
 8018422:	d132      	bne.n	801848a <UART_SetConfig+0x4f2>
 8018424:	4b83      	ldr	r3, [pc, #524]	; (8018634 <UART_SetConfig+0x69c>)
 8018426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018428:	f003 0307 	and.w	r3, r3, #7
 801842c:	2b05      	cmp	r3, #5
 801842e:	d827      	bhi.n	8018480 <UART_SetConfig+0x4e8>
 8018430:	a201      	add	r2, pc, #4	; (adr r2, 8018438 <UART_SetConfig+0x4a0>)
 8018432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018436:	bf00      	nop
 8018438:	08018451 	.word	0x08018451
 801843c:	08018459 	.word	0x08018459
 8018440:	08018461 	.word	0x08018461
 8018444:	08018469 	.word	0x08018469
 8018448:	08018471 	.word	0x08018471
 801844c:	08018479 	.word	0x08018479
 8018450:	2300      	movs	r3, #0
 8018452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018456:	e08b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018458:	2304      	movs	r3, #4
 801845a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801845e:	e087      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018460:	2308      	movs	r3, #8
 8018462:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018466:	e083      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018468:	2310      	movs	r3, #16
 801846a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801846e:	e07f      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018470:	2320      	movs	r3, #32
 8018472:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018476:	e07b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018478:	2340      	movs	r3, #64	; 0x40
 801847a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801847e:	e077      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018480:	2380      	movs	r3, #128	; 0x80
 8018482:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018486:	bf00      	nop
 8018488:	e072      	b.n	8018570 <UART_SetConfig+0x5d8>
 801848a:	687b      	ldr	r3, [r7, #4]
 801848c:	681b      	ldr	r3, [r3, #0]
 801848e:	4a6b      	ldr	r2, [pc, #428]	; (801863c <UART_SetConfig+0x6a4>)
 8018490:	4293      	cmp	r3, r2
 8018492:	d132      	bne.n	80184fa <UART_SetConfig+0x562>
 8018494:	4b67      	ldr	r3, [pc, #412]	; (8018634 <UART_SetConfig+0x69c>)
 8018496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018498:	f003 0307 	and.w	r3, r3, #7
 801849c:	2b05      	cmp	r3, #5
 801849e:	d827      	bhi.n	80184f0 <UART_SetConfig+0x558>
 80184a0:	a201      	add	r2, pc, #4	; (adr r2, 80184a8 <UART_SetConfig+0x510>)
 80184a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184a6:	bf00      	nop
 80184a8:	080184c1 	.word	0x080184c1
 80184ac:	080184c9 	.word	0x080184c9
 80184b0:	080184d1 	.word	0x080184d1
 80184b4:	080184d9 	.word	0x080184d9
 80184b8:	080184e1 	.word	0x080184e1
 80184bc:	080184e9 	.word	0x080184e9
 80184c0:	2300      	movs	r3, #0
 80184c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184c6:	e053      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184c8:	2304      	movs	r3, #4
 80184ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184ce:	e04f      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184d0:	2308      	movs	r3, #8
 80184d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184d6:	e04b      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184d8:	2310      	movs	r3, #16
 80184da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184de:	e047      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184e0:	2320      	movs	r3, #32
 80184e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184e6:	e043      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184e8:	2340      	movs	r3, #64	; 0x40
 80184ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184ee:	e03f      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184f0:	2380      	movs	r3, #128	; 0x80
 80184f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184f6:	bf00      	nop
 80184f8:	e03a      	b.n	8018570 <UART_SetConfig+0x5d8>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4a50      	ldr	r2, [pc, #320]	; (8018640 <UART_SetConfig+0x6a8>)
 8018500:	4293      	cmp	r3, r2
 8018502:	d132      	bne.n	801856a <UART_SetConfig+0x5d2>
 8018504:	4b4b      	ldr	r3, [pc, #300]	; (8018634 <UART_SetConfig+0x69c>)
 8018506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018508:	f003 0307 	and.w	r3, r3, #7
 801850c:	2b05      	cmp	r3, #5
 801850e:	d827      	bhi.n	8018560 <UART_SetConfig+0x5c8>
 8018510:	a201      	add	r2, pc, #4	; (adr r2, 8018518 <UART_SetConfig+0x580>)
 8018512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018516:	bf00      	nop
 8018518:	08018531 	.word	0x08018531
 801851c:	08018539 	.word	0x08018539
 8018520:	08018541 	.word	0x08018541
 8018524:	08018549 	.word	0x08018549
 8018528:	08018551 	.word	0x08018551
 801852c:	08018559 	.word	0x08018559
 8018530:	2302      	movs	r3, #2
 8018532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018536:	e01b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018538:	2304      	movs	r3, #4
 801853a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801853e:	e017      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018540:	2308      	movs	r3, #8
 8018542:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018546:	e013      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018548:	2310      	movs	r3, #16
 801854a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801854e:	e00f      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018550:	2320      	movs	r3, #32
 8018552:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018556:	e00b      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018558:	2340      	movs	r3, #64	; 0x40
 801855a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801855e:	e007      	b.n	8018570 <UART_SetConfig+0x5d8>
 8018560:	2380      	movs	r3, #128	; 0x80
 8018562:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018566:	bf00      	nop
 8018568:	e002      	b.n	8018570 <UART_SetConfig+0x5d8>
 801856a:	2380      	movs	r3, #128	; 0x80
 801856c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018570:	687b      	ldr	r3, [r7, #4]
 8018572:	681b      	ldr	r3, [r3, #0]
 8018574:	4a32      	ldr	r2, [pc, #200]	; (8018640 <UART_SetConfig+0x6a8>)
 8018576:	4293      	cmp	r3, r2
 8018578:	f040 86f7 	bne.w	801936a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801857c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018580:	2b08      	cmp	r3, #8
 8018582:	f000 80c0 	beq.w	8018706 <UART_SetConfig+0x76e>
 8018586:	2b08      	cmp	r3, #8
 8018588:	dc04      	bgt.n	8018594 <UART_SetConfig+0x5fc>
 801858a:	2b02      	cmp	r3, #2
 801858c:	d00c      	beq.n	80185a8 <UART_SetConfig+0x610>
 801858e:	2b04      	cmp	r3, #4
 8018590:	d065      	beq.n	801865e <UART_SetConfig+0x6c6>
 8018592:	e27a      	b.n	8018a8a <UART_SetConfig+0xaf2>
 8018594:	2b20      	cmp	r3, #32
 8018596:	f000 81b0 	beq.w	80188fa <UART_SetConfig+0x962>
 801859a:	2b40      	cmp	r3, #64	; 0x40
 801859c:	f000 821e 	beq.w	80189dc <UART_SetConfig+0xa44>
 80185a0:	2b10      	cmp	r3, #16
 80185a2:	f000 8104 	beq.w	80187ae <UART_SetConfig+0x816>
 80185a6:	e270      	b.n	8018a8a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80185a8:	f7fd ff14 	bl	80163d4 <HAL_RCCEx_GetD3PCLK1Freq>
 80185ac:	4602      	mov	r2, r0
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d04e      	beq.n	8018654 <UART_SetConfig+0x6bc>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ba:	2b01      	cmp	r3, #1
 80185bc:	d048      	beq.n	8018650 <UART_SetConfig+0x6b8>
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185c2:	2b02      	cmp	r3, #2
 80185c4:	d042      	beq.n	801864c <UART_SetConfig+0x6b4>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ca:	2b03      	cmp	r3, #3
 80185cc:	d03c      	beq.n	8018648 <UART_SetConfig+0x6b0>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185d2:	2b04      	cmp	r3, #4
 80185d4:	d036      	beq.n	8018644 <UART_SetConfig+0x6ac>
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185da:	2b05      	cmp	r3, #5
 80185dc:	d026      	beq.n	801862c <UART_SetConfig+0x694>
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185e2:	2b06      	cmp	r3, #6
 80185e4:	d020      	beq.n	8018628 <UART_SetConfig+0x690>
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185ea:	2b07      	cmp	r3, #7
 80185ec:	d01a      	beq.n	8018624 <UART_SetConfig+0x68c>
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185f2:	2b08      	cmp	r3, #8
 80185f4:	d014      	beq.n	8018620 <UART_SetConfig+0x688>
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80185fa:	2b09      	cmp	r3, #9
 80185fc:	d00e      	beq.n	801861c <UART_SetConfig+0x684>
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018602:	2b0a      	cmp	r3, #10
 8018604:	d008      	beq.n	8018618 <UART_SetConfig+0x680>
 8018606:	687b      	ldr	r3, [r7, #4]
 8018608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801860a:	2b0b      	cmp	r3, #11
 801860c:	d102      	bne.n	8018614 <UART_SetConfig+0x67c>
 801860e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018612:	e020      	b.n	8018656 <UART_SetConfig+0x6be>
 8018614:	2301      	movs	r3, #1
 8018616:	e01e      	b.n	8018656 <UART_SetConfig+0x6be>
 8018618:	2380      	movs	r3, #128	; 0x80
 801861a:	e01c      	b.n	8018656 <UART_SetConfig+0x6be>
 801861c:	2340      	movs	r3, #64	; 0x40
 801861e:	e01a      	b.n	8018656 <UART_SetConfig+0x6be>
 8018620:	2320      	movs	r3, #32
 8018622:	e018      	b.n	8018656 <UART_SetConfig+0x6be>
 8018624:	2310      	movs	r3, #16
 8018626:	e016      	b.n	8018656 <UART_SetConfig+0x6be>
 8018628:	230c      	movs	r3, #12
 801862a:	e014      	b.n	8018656 <UART_SetConfig+0x6be>
 801862c:	230a      	movs	r3, #10
 801862e:	e012      	b.n	8018656 <UART_SetConfig+0x6be>
 8018630:	40011400 	.word	0x40011400
 8018634:	58024400 	.word	0x58024400
 8018638:	40007800 	.word	0x40007800
 801863c:	40007c00 	.word	0x40007c00
 8018640:	58000c00 	.word	0x58000c00
 8018644:	2308      	movs	r3, #8
 8018646:	e006      	b.n	8018656 <UART_SetConfig+0x6be>
 8018648:	2306      	movs	r3, #6
 801864a:	e004      	b.n	8018656 <UART_SetConfig+0x6be>
 801864c:	2304      	movs	r3, #4
 801864e:	e002      	b.n	8018656 <UART_SetConfig+0x6be>
 8018650:	2302      	movs	r3, #2
 8018652:	e000      	b.n	8018656 <UART_SetConfig+0x6be>
 8018654:	2301      	movs	r3, #1
 8018656:	fbb2 f3f3 	udiv	r3, r2, r3
 801865a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801865c:	e219      	b.n	8018a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801865e:	f107 0318 	add.w	r3, r7, #24
 8018662:	4618      	mov	r0, r3
 8018664:	f7fd fecc 	bl	8016400 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018668:	69fa      	ldr	r2, [r7, #28]
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801866e:	2b00      	cmp	r3, #0
 8018670:	d044      	beq.n	80186fc <UART_SetConfig+0x764>
 8018672:	687b      	ldr	r3, [r7, #4]
 8018674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018676:	2b01      	cmp	r3, #1
 8018678:	d03e      	beq.n	80186f8 <UART_SetConfig+0x760>
 801867a:	687b      	ldr	r3, [r7, #4]
 801867c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801867e:	2b02      	cmp	r3, #2
 8018680:	d038      	beq.n	80186f4 <UART_SetConfig+0x75c>
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018686:	2b03      	cmp	r3, #3
 8018688:	d032      	beq.n	80186f0 <UART_SetConfig+0x758>
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801868e:	2b04      	cmp	r3, #4
 8018690:	d02c      	beq.n	80186ec <UART_SetConfig+0x754>
 8018692:	687b      	ldr	r3, [r7, #4]
 8018694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018696:	2b05      	cmp	r3, #5
 8018698:	d026      	beq.n	80186e8 <UART_SetConfig+0x750>
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801869e:	2b06      	cmp	r3, #6
 80186a0:	d020      	beq.n	80186e4 <UART_SetConfig+0x74c>
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186a6:	2b07      	cmp	r3, #7
 80186a8:	d01a      	beq.n	80186e0 <UART_SetConfig+0x748>
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186ae:	2b08      	cmp	r3, #8
 80186b0:	d014      	beq.n	80186dc <UART_SetConfig+0x744>
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186b6:	2b09      	cmp	r3, #9
 80186b8:	d00e      	beq.n	80186d8 <UART_SetConfig+0x740>
 80186ba:	687b      	ldr	r3, [r7, #4]
 80186bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186be:	2b0a      	cmp	r3, #10
 80186c0:	d008      	beq.n	80186d4 <UART_SetConfig+0x73c>
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186c6:	2b0b      	cmp	r3, #11
 80186c8:	d102      	bne.n	80186d0 <UART_SetConfig+0x738>
 80186ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80186ce:	e016      	b.n	80186fe <UART_SetConfig+0x766>
 80186d0:	2301      	movs	r3, #1
 80186d2:	e014      	b.n	80186fe <UART_SetConfig+0x766>
 80186d4:	2380      	movs	r3, #128	; 0x80
 80186d6:	e012      	b.n	80186fe <UART_SetConfig+0x766>
 80186d8:	2340      	movs	r3, #64	; 0x40
 80186da:	e010      	b.n	80186fe <UART_SetConfig+0x766>
 80186dc:	2320      	movs	r3, #32
 80186de:	e00e      	b.n	80186fe <UART_SetConfig+0x766>
 80186e0:	2310      	movs	r3, #16
 80186e2:	e00c      	b.n	80186fe <UART_SetConfig+0x766>
 80186e4:	230c      	movs	r3, #12
 80186e6:	e00a      	b.n	80186fe <UART_SetConfig+0x766>
 80186e8:	230a      	movs	r3, #10
 80186ea:	e008      	b.n	80186fe <UART_SetConfig+0x766>
 80186ec:	2308      	movs	r3, #8
 80186ee:	e006      	b.n	80186fe <UART_SetConfig+0x766>
 80186f0:	2306      	movs	r3, #6
 80186f2:	e004      	b.n	80186fe <UART_SetConfig+0x766>
 80186f4:	2304      	movs	r3, #4
 80186f6:	e002      	b.n	80186fe <UART_SetConfig+0x766>
 80186f8:	2302      	movs	r3, #2
 80186fa:	e000      	b.n	80186fe <UART_SetConfig+0x766>
 80186fc:	2301      	movs	r3, #1
 80186fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8018702:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018704:	e1c5      	b.n	8018a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018706:	f107 030c 	add.w	r3, r7, #12
 801870a:	4618      	mov	r0, r3
 801870c:	f7fd ffc4 	bl	8016698 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018710:	693a      	ldr	r2, [r7, #16]
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018716:	2b00      	cmp	r3, #0
 8018718:	d044      	beq.n	80187a4 <UART_SetConfig+0x80c>
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801871e:	2b01      	cmp	r3, #1
 8018720:	d03e      	beq.n	80187a0 <UART_SetConfig+0x808>
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018726:	2b02      	cmp	r3, #2
 8018728:	d038      	beq.n	801879c <UART_SetConfig+0x804>
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801872e:	2b03      	cmp	r3, #3
 8018730:	d032      	beq.n	8018798 <UART_SetConfig+0x800>
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018736:	2b04      	cmp	r3, #4
 8018738:	d02c      	beq.n	8018794 <UART_SetConfig+0x7fc>
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801873e:	2b05      	cmp	r3, #5
 8018740:	d026      	beq.n	8018790 <UART_SetConfig+0x7f8>
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018746:	2b06      	cmp	r3, #6
 8018748:	d020      	beq.n	801878c <UART_SetConfig+0x7f4>
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801874e:	2b07      	cmp	r3, #7
 8018750:	d01a      	beq.n	8018788 <UART_SetConfig+0x7f0>
 8018752:	687b      	ldr	r3, [r7, #4]
 8018754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018756:	2b08      	cmp	r3, #8
 8018758:	d014      	beq.n	8018784 <UART_SetConfig+0x7ec>
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801875e:	2b09      	cmp	r3, #9
 8018760:	d00e      	beq.n	8018780 <UART_SetConfig+0x7e8>
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018766:	2b0a      	cmp	r3, #10
 8018768:	d008      	beq.n	801877c <UART_SetConfig+0x7e4>
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801876e:	2b0b      	cmp	r3, #11
 8018770:	d102      	bne.n	8018778 <UART_SetConfig+0x7e0>
 8018772:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018776:	e016      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018778:	2301      	movs	r3, #1
 801877a:	e014      	b.n	80187a6 <UART_SetConfig+0x80e>
 801877c:	2380      	movs	r3, #128	; 0x80
 801877e:	e012      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018780:	2340      	movs	r3, #64	; 0x40
 8018782:	e010      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018784:	2320      	movs	r3, #32
 8018786:	e00e      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018788:	2310      	movs	r3, #16
 801878a:	e00c      	b.n	80187a6 <UART_SetConfig+0x80e>
 801878c:	230c      	movs	r3, #12
 801878e:	e00a      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018790:	230a      	movs	r3, #10
 8018792:	e008      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018794:	2308      	movs	r3, #8
 8018796:	e006      	b.n	80187a6 <UART_SetConfig+0x80e>
 8018798:	2306      	movs	r3, #6
 801879a:	e004      	b.n	80187a6 <UART_SetConfig+0x80e>
 801879c:	2304      	movs	r3, #4
 801879e:	e002      	b.n	80187a6 <UART_SetConfig+0x80e>
 80187a0:	2302      	movs	r3, #2
 80187a2:	e000      	b.n	80187a6 <UART_SetConfig+0x80e>
 80187a4:	2301      	movs	r3, #1
 80187a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80187aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80187ac:	e171      	b.n	8018a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80187ae:	4b7a      	ldr	r3, [pc, #488]	; (8018998 <UART_SetConfig+0xa00>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	f003 0320 	and.w	r3, r3, #32
 80187b6:	2b00      	cmp	r3, #0
 80187b8:	d054      	beq.n	8018864 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80187ba:	4b77      	ldr	r3, [pc, #476]	; (8018998 <UART_SetConfig+0xa00>)
 80187bc:	681b      	ldr	r3, [r3, #0]
 80187be:	08db      	lsrs	r3, r3, #3
 80187c0:	f003 0303 	and.w	r3, r3, #3
 80187c4:	4a75      	ldr	r2, [pc, #468]	; (801899c <UART_SetConfig+0xa04>)
 80187c6:	40da      	lsrs	r2, r3
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d044      	beq.n	801885a <UART_SetConfig+0x8c2>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187d4:	2b01      	cmp	r3, #1
 80187d6:	d03e      	beq.n	8018856 <UART_SetConfig+0x8be>
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187dc:	2b02      	cmp	r3, #2
 80187de:	d038      	beq.n	8018852 <UART_SetConfig+0x8ba>
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187e4:	2b03      	cmp	r3, #3
 80187e6:	d032      	beq.n	801884e <UART_SetConfig+0x8b6>
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187ec:	2b04      	cmp	r3, #4
 80187ee:	d02c      	beq.n	801884a <UART_SetConfig+0x8b2>
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187f4:	2b05      	cmp	r3, #5
 80187f6:	d026      	beq.n	8018846 <UART_SetConfig+0x8ae>
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80187fc:	2b06      	cmp	r3, #6
 80187fe:	d020      	beq.n	8018842 <UART_SetConfig+0x8aa>
 8018800:	687b      	ldr	r3, [r7, #4]
 8018802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018804:	2b07      	cmp	r3, #7
 8018806:	d01a      	beq.n	801883e <UART_SetConfig+0x8a6>
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801880c:	2b08      	cmp	r3, #8
 801880e:	d014      	beq.n	801883a <UART_SetConfig+0x8a2>
 8018810:	687b      	ldr	r3, [r7, #4]
 8018812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018814:	2b09      	cmp	r3, #9
 8018816:	d00e      	beq.n	8018836 <UART_SetConfig+0x89e>
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801881c:	2b0a      	cmp	r3, #10
 801881e:	d008      	beq.n	8018832 <UART_SetConfig+0x89a>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018824:	2b0b      	cmp	r3, #11
 8018826:	d102      	bne.n	801882e <UART_SetConfig+0x896>
 8018828:	f44f 7380 	mov.w	r3, #256	; 0x100
 801882c:	e016      	b.n	801885c <UART_SetConfig+0x8c4>
 801882e:	2301      	movs	r3, #1
 8018830:	e014      	b.n	801885c <UART_SetConfig+0x8c4>
 8018832:	2380      	movs	r3, #128	; 0x80
 8018834:	e012      	b.n	801885c <UART_SetConfig+0x8c4>
 8018836:	2340      	movs	r3, #64	; 0x40
 8018838:	e010      	b.n	801885c <UART_SetConfig+0x8c4>
 801883a:	2320      	movs	r3, #32
 801883c:	e00e      	b.n	801885c <UART_SetConfig+0x8c4>
 801883e:	2310      	movs	r3, #16
 8018840:	e00c      	b.n	801885c <UART_SetConfig+0x8c4>
 8018842:	230c      	movs	r3, #12
 8018844:	e00a      	b.n	801885c <UART_SetConfig+0x8c4>
 8018846:	230a      	movs	r3, #10
 8018848:	e008      	b.n	801885c <UART_SetConfig+0x8c4>
 801884a:	2308      	movs	r3, #8
 801884c:	e006      	b.n	801885c <UART_SetConfig+0x8c4>
 801884e:	2306      	movs	r3, #6
 8018850:	e004      	b.n	801885c <UART_SetConfig+0x8c4>
 8018852:	2304      	movs	r3, #4
 8018854:	e002      	b.n	801885c <UART_SetConfig+0x8c4>
 8018856:	2302      	movs	r3, #2
 8018858:	e000      	b.n	801885c <UART_SetConfig+0x8c4>
 801885a:	2301      	movs	r3, #1
 801885c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018860:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8018862:	e116      	b.n	8018a92 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018868:	2b00      	cmp	r3, #0
 801886a:	d043      	beq.n	80188f4 <UART_SetConfig+0x95c>
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018870:	2b01      	cmp	r3, #1
 8018872:	d03d      	beq.n	80188f0 <UART_SetConfig+0x958>
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018878:	2b02      	cmp	r3, #2
 801887a:	d037      	beq.n	80188ec <UART_SetConfig+0x954>
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018880:	2b03      	cmp	r3, #3
 8018882:	d031      	beq.n	80188e8 <UART_SetConfig+0x950>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018888:	2b04      	cmp	r3, #4
 801888a:	d02b      	beq.n	80188e4 <UART_SetConfig+0x94c>
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018890:	2b05      	cmp	r3, #5
 8018892:	d025      	beq.n	80188e0 <UART_SetConfig+0x948>
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018898:	2b06      	cmp	r3, #6
 801889a:	d01f      	beq.n	80188dc <UART_SetConfig+0x944>
 801889c:	687b      	ldr	r3, [r7, #4]
 801889e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a0:	2b07      	cmp	r3, #7
 80188a2:	d019      	beq.n	80188d8 <UART_SetConfig+0x940>
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a8:	2b08      	cmp	r3, #8
 80188aa:	d013      	beq.n	80188d4 <UART_SetConfig+0x93c>
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b0:	2b09      	cmp	r3, #9
 80188b2:	d00d      	beq.n	80188d0 <UART_SetConfig+0x938>
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b8:	2b0a      	cmp	r3, #10
 80188ba:	d007      	beq.n	80188cc <UART_SetConfig+0x934>
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188c0:	2b0b      	cmp	r3, #11
 80188c2:	d101      	bne.n	80188c8 <UART_SetConfig+0x930>
 80188c4:	4b36      	ldr	r3, [pc, #216]	; (80189a0 <UART_SetConfig+0xa08>)
 80188c6:	e016      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188c8:	4b34      	ldr	r3, [pc, #208]	; (801899c <UART_SetConfig+0xa04>)
 80188ca:	e014      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188cc:	4b35      	ldr	r3, [pc, #212]	; (80189a4 <UART_SetConfig+0xa0c>)
 80188ce:	e012      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188d0:	4b35      	ldr	r3, [pc, #212]	; (80189a8 <UART_SetConfig+0xa10>)
 80188d2:	e010      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188d4:	4b35      	ldr	r3, [pc, #212]	; (80189ac <UART_SetConfig+0xa14>)
 80188d6:	e00e      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188d8:	4b35      	ldr	r3, [pc, #212]	; (80189b0 <UART_SetConfig+0xa18>)
 80188da:	e00c      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188dc:	4b35      	ldr	r3, [pc, #212]	; (80189b4 <UART_SetConfig+0xa1c>)
 80188de:	e00a      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188e0:	4b35      	ldr	r3, [pc, #212]	; (80189b8 <UART_SetConfig+0xa20>)
 80188e2:	e008      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188e4:	4b35      	ldr	r3, [pc, #212]	; (80189bc <UART_SetConfig+0xa24>)
 80188e6:	e006      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188e8:	4b35      	ldr	r3, [pc, #212]	; (80189c0 <UART_SetConfig+0xa28>)
 80188ea:	e004      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188ec:	4b35      	ldr	r3, [pc, #212]	; (80189c4 <UART_SetConfig+0xa2c>)
 80188ee:	e002      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188f0:	4b35      	ldr	r3, [pc, #212]	; (80189c8 <UART_SetConfig+0xa30>)
 80188f2:	e000      	b.n	80188f6 <UART_SetConfig+0x95e>
 80188f4:	4b29      	ldr	r3, [pc, #164]	; (801899c <UART_SetConfig+0xa04>)
 80188f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80188f8:	e0cb      	b.n	8018a92 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80188fa:	687b      	ldr	r3, [r7, #4]
 80188fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d046      	beq.n	8018990 <UART_SetConfig+0x9f8>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018906:	2b01      	cmp	r3, #1
 8018908:	d040      	beq.n	801898c <UART_SetConfig+0x9f4>
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801890e:	2b02      	cmp	r3, #2
 8018910:	d03a      	beq.n	8018988 <UART_SetConfig+0x9f0>
 8018912:	687b      	ldr	r3, [r7, #4]
 8018914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018916:	2b03      	cmp	r3, #3
 8018918:	d034      	beq.n	8018984 <UART_SetConfig+0x9ec>
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801891e:	2b04      	cmp	r3, #4
 8018920:	d02e      	beq.n	8018980 <UART_SetConfig+0x9e8>
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018926:	2b05      	cmp	r3, #5
 8018928:	d028      	beq.n	801897c <UART_SetConfig+0x9e4>
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801892e:	2b06      	cmp	r3, #6
 8018930:	d022      	beq.n	8018978 <UART_SetConfig+0x9e0>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018936:	2b07      	cmp	r3, #7
 8018938:	d01c      	beq.n	8018974 <UART_SetConfig+0x9dc>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801893e:	2b08      	cmp	r3, #8
 8018940:	d016      	beq.n	8018970 <UART_SetConfig+0x9d8>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018946:	2b09      	cmp	r3, #9
 8018948:	d00f      	beq.n	801896a <UART_SetConfig+0x9d2>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801894e:	2b0a      	cmp	r3, #10
 8018950:	d008      	beq.n	8018964 <UART_SetConfig+0x9cc>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018956:	2b0b      	cmp	r3, #11
 8018958:	d102      	bne.n	8018960 <UART_SetConfig+0x9c8>
 801895a:	f643 5309 	movw	r3, #15625	; 0x3d09
 801895e:	e018      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018960:	4b13      	ldr	r3, [pc, #76]	; (80189b0 <UART_SetConfig+0xa18>)
 8018962:	e016      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018964:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018968:	e013      	b.n	8018992 <UART_SetConfig+0x9fa>
 801896a:	f24f 4324 	movw	r3, #62500	; 0xf424
 801896e:	e010      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018970:	4b16      	ldr	r3, [pc, #88]	; (80189cc <UART_SetConfig+0xa34>)
 8018972:	e00e      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018974:	4b0a      	ldr	r3, [pc, #40]	; (80189a0 <UART_SetConfig+0xa08>)
 8018976:	e00c      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018978:	4b15      	ldr	r3, [pc, #84]	; (80189d0 <UART_SetConfig+0xa38>)
 801897a:	e00a      	b.n	8018992 <UART_SetConfig+0x9fa>
 801897c:	4b15      	ldr	r3, [pc, #84]	; (80189d4 <UART_SetConfig+0xa3c>)
 801897e:	e008      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018980:	4b08      	ldr	r3, [pc, #32]	; (80189a4 <UART_SetConfig+0xa0c>)
 8018982:	e006      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018984:	4b14      	ldr	r3, [pc, #80]	; (80189d8 <UART_SetConfig+0xa40>)
 8018986:	e004      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018988:	4b07      	ldr	r3, [pc, #28]	; (80189a8 <UART_SetConfig+0xa10>)
 801898a:	e002      	b.n	8018992 <UART_SetConfig+0x9fa>
 801898c:	4b07      	ldr	r3, [pc, #28]	; (80189ac <UART_SetConfig+0xa14>)
 801898e:	e000      	b.n	8018992 <UART_SetConfig+0x9fa>
 8018990:	4b07      	ldr	r3, [pc, #28]	; (80189b0 <UART_SetConfig+0xa18>)
 8018992:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018994:	e07d      	b.n	8018a92 <UART_SetConfig+0xafa>
 8018996:	bf00      	nop
 8018998:	58024400 	.word	0x58024400
 801899c:	03d09000 	.word	0x03d09000
 80189a0:	0003d090 	.word	0x0003d090
 80189a4:	0007a120 	.word	0x0007a120
 80189a8:	000f4240 	.word	0x000f4240
 80189ac:	001e8480 	.word	0x001e8480
 80189b0:	003d0900 	.word	0x003d0900
 80189b4:	00516155 	.word	0x00516155
 80189b8:	0061a800 	.word	0x0061a800
 80189bc:	007a1200 	.word	0x007a1200
 80189c0:	00a2c2aa 	.word	0x00a2c2aa
 80189c4:	00f42400 	.word	0x00f42400
 80189c8:	01e84800 	.word	0x01e84800
 80189cc:	0001e848 	.word	0x0001e848
 80189d0:	00051615 	.word	0x00051615
 80189d4:	00061a80 	.word	0x00061a80
 80189d8:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e0:	2b00      	cmp	r3, #0
 80189e2:	d04e      	beq.n	8018a82 <UART_SetConfig+0xaea>
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e8:	2b01      	cmp	r3, #1
 80189ea:	d047      	beq.n	8018a7c <UART_SetConfig+0xae4>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f0:	2b02      	cmp	r3, #2
 80189f2:	d040      	beq.n	8018a76 <UART_SetConfig+0xade>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f8:	2b03      	cmp	r3, #3
 80189fa:	d039      	beq.n	8018a70 <UART_SetConfig+0xad8>
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a00:	2b04      	cmp	r3, #4
 8018a02:	d032      	beq.n	8018a6a <UART_SetConfig+0xad2>
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a08:	2b05      	cmp	r3, #5
 8018a0a:	d02b      	beq.n	8018a64 <UART_SetConfig+0xacc>
 8018a0c:	687b      	ldr	r3, [r7, #4]
 8018a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a10:	2b06      	cmp	r3, #6
 8018a12:	d024      	beq.n	8018a5e <UART_SetConfig+0xac6>
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a18:	2b07      	cmp	r3, #7
 8018a1a:	d01d      	beq.n	8018a58 <UART_SetConfig+0xac0>
 8018a1c:	687b      	ldr	r3, [r7, #4]
 8018a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a20:	2b08      	cmp	r3, #8
 8018a22:	d016      	beq.n	8018a52 <UART_SetConfig+0xaba>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a28:	2b09      	cmp	r3, #9
 8018a2a:	d00f      	beq.n	8018a4c <UART_SetConfig+0xab4>
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a30:	2b0a      	cmp	r3, #10
 8018a32:	d008      	beq.n	8018a46 <UART_SetConfig+0xaae>
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a38:	2b0b      	cmp	r3, #11
 8018a3a:	d101      	bne.n	8018a40 <UART_SetConfig+0xaa8>
 8018a3c:	2380      	movs	r3, #128	; 0x80
 8018a3e:	e022      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a44:	e01f      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018a4a:	e01c      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018a50:	e019      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018a56:	e016      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018a5c:	e013      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a5e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8018a62:	e010      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a64:	f640 43cc 	movw	r3, #3276	; 0xccc
 8018a68:	e00d      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018a6e:	e00a      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a70:	f241 5355 	movw	r3, #5461	; 0x1555
 8018a74:	e007      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018a7a:	e004      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018a80:	e001      	b.n	8018a86 <UART_SetConfig+0xaee>
 8018a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018a86:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a88:	e003      	b.n	8018a92 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8018a8a:	2301      	movs	r3, #1
 8018a8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8018a90:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8018a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a94:	2b00      	cmp	r3, #0
 8018a96:	f001 83e8 	beq.w	801a26a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	685a      	ldr	r2, [r3, #4]
 8018a9e:	4613      	mov	r3, r2
 8018aa0:	005b      	lsls	r3, r3, #1
 8018aa2:	4413      	add	r3, r2
 8018aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018aa6:	429a      	cmp	r2, r3
 8018aa8:	d305      	bcc.n	8018ab6 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	685b      	ldr	r3, [r3, #4]
 8018aae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018ab0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d904      	bls.n	8018ac0 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018abc:	f001 bbd5 	b.w	801a26a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8018ac0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018ac4:	2b08      	cmp	r3, #8
 8018ac6:	f000 8154 	beq.w	8018d72 <UART_SetConfig+0xdda>
 8018aca:	2b08      	cmp	r3, #8
 8018acc:	dc06      	bgt.n	8018adc <UART_SetConfig+0xb44>
 8018ace:	2b02      	cmp	r3, #2
 8018ad0:	d00f      	beq.n	8018af2 <UART_SetConfig+0xb5a>
 8018ad2:	2b04      	cmp	r3, #4
 8018ad4:	f000 80ac 	beq.w	8018c30 <UART_SetConfig+0xc98>
 8018ad8:	f000 bc30 	b.w	801933c <UART_SetConfig+0x13a4>
 8018adc:	2b20      	cmp	r3, #32
 8018ade:	f000 832d 	beq.w	801913c <UART_SetConfig+0x11a4>
 8018ae2:	2b40      	cmp	r3, #64	; 0x40
 8018ae4:	f000 83a5 	beq.w	8019232 <UART_SetConfig+0x129a>
 8018ae8:	2b10      	cmp	r3, #16
 8018aea:	f000 81e3 	beq.w	8018eb4 <UART_SetConfig+0xf1c>
 8018aee:	f000 bc25 	b.w	801933c <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018af2:	f7fd fc6f 	bl	80163d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8018af6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afa:	4618      	mov	r0, r3
 8018afc:	f04f 0100 	mov.w	r1, #0
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	d067      	beq.n	8018bd8 <UART_SetConfig+0xc40>
 8018b08:	687b      	ldr	r3, [r7, #4]
 8018b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b0c:	2b01      	cmp	r3, #1
 8018b0e:	d05e      	beq.n	8018bce <UART_SetConfig+0xc36>
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b14:	2b02      	cmp	r3, #2
 8018b16:	d055      	beq.n	8018bc4 <UART_SetConfig+0xc2c>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b1c:	2b03      	cmp	r3, #3
 8018b1e:	d04c      	beq.n	8018bba <UART_SetConfig+0xc22>
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b24:	2b04      	cmp	r3, #4
 8018b26:	d043      	beq.n	8018bb0 <UART_SetConfig+0xc18>
 8018b28:	687b      	ldr	r3, [r7, #4]
 8018b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b2c:	2b05      	cmp	r3, #5
 8018b2e:	d03a      	beq.n	8018ba6 <UART_SetConfig+0xc0e>
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b34:	2b06      	cmp	r3, #6
 8018b36:	d031      	beq.n	8018b9c <UART_SetConfig+0xc04>
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b3c:	2b07      	cmp	r3, #7
 8018b3e:	d028      	beq.n	8018b92 <UART_SetConfig+0xbfa>
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b44:	2b08      	cmp	r3, #8
 8018b46:	d01f      	beq.n	8018b88 <UART_SetConfig+0xbf0>
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b4c:	2b09      	cmp	r3, #9
 8018b4e:	d016      	beq.n	8018b7e <UART_SetConfig+0xbe6>
 8018b50:	687b      	ldr	r3, [r7, #4]
 8018b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b54:	2b0a      	cmp	r3, #10
 8018b56:	d00d      	beq.n	8018b74 <UART_SetConfig+0xbdc>
 8018b58:	687b      	ldr	r3, [r7, #4]
 8018b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b5c:	2b0b      	cmp	r3, #11
 8018b5e:	d104      	bne.n	8018b6a <UART_SetConfig+0xbd2>
 8018b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018b64:	f04f 0400 	mov.w	r4, #0
 8018b68:	e03a      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b6a:	f04f 0301 	mov.w	r3, #1
 8018b6e:	f04f 0400 	mov.w	r4, #0
 8018b72:	e035      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b74:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018b78:	f04f 0400 	mov.w	r4, #0
 8018b7c:	e030      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b7e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018b82:	f04f 0400 	mov.w	r4, #0
 8018b86:	e02b      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b88:	f04f 0320 	mov.w	r3, #32
 8018b8c:	f04f 0400 	mov.w	r4, #0
 8018b90:	e026      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b92:	f04f 0310 	mov.w	r3, #16
 8018b96:	f04f 0400 	mov.w	r4, #0
 8018b9a:	e021      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018b9c:	f04f 030c 	mov.w	r3, #12
 8018ba0:	f04f 0400 	mov.w	r4, #0
 8018ba4:	e01c      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018ba6:	f04f 030a 	mov.w	r3, #10
 8018baa:	f04f 0400 	mov.w	r4, #0
 8018bae:	e017      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018bb0:	f04f 0308 	mov.w	r3, #8
 8018bb4:	f04f 0400 	mov.w	r4, #0
 8018bb8:	e012      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018bba:	f04f 0306 	mov.w	r3, #6
 8018bbe:	f04f 0400 	mov.w	r4, #0
 8018bc2:	e00d      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018bc4:	f04f 0304 	mov.w	r3, #4
 8018bc8:	f04f 0400 	mov.w	r4, #0
 8018bcc:	e008      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018bce:	f04f 0302 	mov.w	r3, #2
 8018bd2:	f04f 0400 	mov.w	r4, #0
 8018bd6:	e003      	b.n	8018be0 <UART_SetConfig+0xc48>
 8018bd8:	f04f 0301 	mov.w	r3, #1
 8018bdc:	f04f 0400 	mov.w	r4, #0
 8018be0:	461a      	mov	r2, r3
 8018be2:	4623      	mov	r3, r4
 8018be4:	f7e7 fb80 	bl	80002e8 <__aeabi_uldivmod>
 8018be8:	4603      	mov	r3, r0
 8018bea:	460c      	mov	r4, r1
 8018bec:	4619      	mov	r1, r3
 8018bee:	4622      	mov	r2, r4
 8018bf0:	f04f 0300 	mov.w	r3, #0
 8018bf4:	f04f 0400 	mov.w	r4, #0
 8018bf8:	0214      	lsls	r4, r2, #8
 8018bfa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018bfe:	020b      	lsls	r3, r1, #8
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	6852      	ldr	r2, [r2, #4]
 8018c04:	0852      	lsrs	r2, r2, #1
 8018c06:	4611      	mov	r1, r2
 8018c08:	f04f 0200 	mov.w	r2, #0
 8018c0c:	eb13 0b01 	adds.w	fp, r3, r1
 8018c10:	eb44 0c02 	adc.w	ip, r4, r2
 8018c14:	4658      	mov	r0, fp
 8018c16:	4661      	mov	r1, ip
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	685b      	ldr	r3, [r3, #4]
 8018c1c:	f04f 0400 	mov.w	r4, #0
 8018c20:	461a      	mov	r2, r3
 8018c22:	4623      	mov	r3, r4
 8018c24:	f7e7 fb60 	bl	80002e8 <__aeabi_uldivmod>
 8018c28:	4603      	mov	r3, r0
 8018c2a:	460c      	mov	r4, r1
 8018c2c:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018c2e:	e389      	b.n	8019344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018c30:	f107 0318 	add.w	r3, r7, #24
 8018c34:	4618      	mov	r0, r3
 8018c36:	f7fd fbe3 	bl	8016400 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018c3a:	69fb      	ldr	r3, [r7, #28]
 8018c3c:	4618      	mov	r0, r3
 8018c3e:	f04f 0100 	mov.w	r1, #0
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c46:	2b00      	cmp	r3, #0
 8018c48:	d067      	beq.n	8018d1a <UART_SetConfig+0xd82>
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c4e:	2b01      	cmp	r3, #1
 8018c50:	d05e      	beq.n	8018d10 <UART_SetConfig+0xd78>
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c56:	2b02      	cmp	r3, #2
 8018c58:	d055      	beq.n	8018d06 <UART_SetConfig+0xd6e>
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c5e:	2b03      	cmp	r3, #3
 8018c60:	d04c      	beq.n	8018cfc <UART_SetConfig+0xd64>
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c66:	2b04      	cmp	r3, #4
 8018c68:	d043      	beq.n	8018cf2 <UART_SetConfig+0xd5a>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c6e:	2b05      	cmp	r3, #5
 8018c70:	d03a      	beq.n	8018ce8 <UART_SetConfig+0xd50>
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c76:	2b06      	cmp	r3, #6
 8018c78:	d031      	beq.n	8018cde <UART_SetConfig+0xd46>
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c7e:	2b07      	cmp	r3, #7
 8018c80:	d028      	beq.n	8018cd4 <UART_SetConfig+0xd3c>
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c86:	2b08      	cmp	r3, #8
 8018c88:	d01f      	beq.n	8018cca <UART_SetConfig+0xd32>
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c8e:	2b09      	cmp	r3, #9
 8018c90:	d016      	beq.n	8018cc0 <UART_SetConfig+0xd28>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c96:	2b0a      	cmp	r3, #10
 8018c98:	d00d      	beq.n	8018cb6 <UART_SetConfig+0xd1e>
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c9e:	2b0b      	cmp	r3, #11
 8018ca0:	d104      	bne.n	8018cac <UART_SetConfig+0xd14>
 8018ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018ca6:	f04f 0400 	mov.w	r4, #0
 8018caa:	e03a      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cac:	f04f 0301 	mov.w	r3, #1
 8018cb0:	f04f 0400 	mov.w	r4, #0
 8018cb4:	e035      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cb6:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018cba:	f04f 0400 	mov.w	r4, #0
 8018cbe:	e030      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018cc4:	f04f 0400 	mov.w	r4, #0
 8018cc8:	e02b      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cca:	f04f 0320 	mov.w	r3, #32
 8018cce:	f04f 0400 	mov.w	r4, #0
 8018cd2:	e026      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cd4:	f04f 0310 	mov.w	r3, #16
 8018cd8:	f04f 0400 	mov.w	r4, #0
 8018cdc:	e021      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cde:	f04f 030c 	mov.w	r3, #12
 8018ce2:	f04f 0400 	mov.w	r4, #0
 8018ce6:	e01c      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018ce8:	f04f 030a 	mov.w	r3, #10
 8018cec:	f04f 0400 	mov.w	r4, #0
 8018cf0:	e017      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cf2:	f04f 0308 	mov.w	r3, #8
 8018cf6:	f04f 0400 	mov.w	r4, #0
 8018cfa:	e012      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018cfc:	f04f 0306 	mov.w	r3, #6
 8018d00:	f04f 0400 	mov.w	r4, #0
 8018d04:	e00d      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018d06:	f04f 0304 	mov.w	r3, #4
 8018d0a:	f04f 0400 	mov.w	r4, #0
 8018d0e:	e008      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018d10:	f04f 0302 	mov.w	r3, #2
 8018d14:	f04f 0400 	mov.w	r4, #0
 8018d18:	e003      	b.n	8018d22 <UART_SetConfig+0xd8a>
 8018d1a:	f04f 0301 	mov.w	r3, #1
 8018d1e:	f04f 0400 	mov.w	r4, #0
 8018d22:	461a      	mov	r2, r3
 8018d24:	4623      	mov	r3, r4
 8018d26:	f7e7 fadf 	bl	80002e8 <__aeabi_uldivmod>
 8018d2a:	4603      	mov	r3, r0
 8018d2c:	460c      	mov	r4, r1
 8018d2e:	4619      	mov	r1, r3
 8018d30:	4622      	mov	r2, r4
 8018d32:	f04f 0300 	mov.w	r3, #0
 8018d36:	f04f 0400 	mov.w	r4, #0
 8018d3a:	0214      	lsls	r4, r2, #8
 8018d3c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018d40:	020b      	lsls	r3, r1, #8
 8018d42:	687a      	ldr	r2, [r7, #4]
 8018d44:	6852      	ldr	r2, [r2, #4]
 8018d46:	0852      	lsrs	r2, r2, #1
 8018d48:	4611      	mov	r1, r2
 8018d4a:	f04f 0200 	mov.w	r2, #0
 8018d4e:	eb13 0b01 	adds.w	fp, r3, r1
 8018d52:	eb44 0c02 	adc.w	ip, r4, r2
 8018d56:	4658      	mov	r0, fp
 8018d58:	4661      	mov	r1, ip
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	f04f 0400 	mov.w	r4, #0
 8018d62:	461a      	mov	r2, r3
 8018d64:	4623      	mov	r3, r4
 8018d66:	f7e7 fabf 	bl	80002e8 <__aeabi_uldivmod>
 8018d6a:	4603      	mov	r3, r0
 8018d6c:	460c      	mov	r4, r1
 8018d6e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018d70:	e2e8      	b.n	8019344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8018d72:	f107 030c 	add.w	r3, r7, #12
 8018d76:	4618      	mov	r0, r3
 8018d78:	f7fd fc8e 	bl	8016698 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018d7c:	693b      	ldr	r3, [r7, #16]
 8018d7e:	4618      	mov	r0, r3
 8018d80:	f04f 0100 	mov.w	r1, #0
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d067      	beq.n	8018e5c <UART_SetConfig+0xec4>
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d90:	2b01      	cmp	r3, #1
 8018d92:	d05e      	beq.n	8018e52 <UART_SetConfig+0xeba>
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018d98:	2b02      	cmp	r3, #2
 8018d9a:	d055      	beq.n	8018e48 <UART_SetConfig+0xeb0>
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da0:	2b03      	cmp	r3, #3
 8018da2:	d04c      	beq.n	8018e3e <UART_SetConfig+0xea6>
 8018da4:	687b      	ldr	r3, [r7, #4]
 8018da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018da8:	2b04      	cmp	r3, #4
 8018daa:	d043      	beq.n	8018e34 <UART_SetConfig+0xe9c>
 8018dac:	687b      	ldr	r3, [r7, #4]
 8018dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db0:	2b05      	cmp	r3, #5
 8018db2:	d03a      	beq.n	8018e2a <UART_SetConfig+0xe92>
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db8:	2b06      	cmp	r3, #6
 8018dba:	d031      	beq.n	8018e20 <UART_SetConfig+0xe88>
 8018dbc:	687b      	ldr	r3, [r7, #4]
 8018dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc0:	2b07      	cmp	r3, #7
 8018dc2:	d028      	beq.n	8018e16 <UART_SetConfig+0xe7e>
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc8:	2b08      	cmp	r3, #8
 8018dca:	d01f      	beq.n	8018e0c <UART_SetConfig+0xe74>
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd0:	2b09      	cmp	r3, #9
 8018dd2:	d016      	beq.n	8018e02 <UART_SetConfig+0xe6a>
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd8:	2b0a      	cmp	r3, #10
 8018dda:	d00d      	beq.n	8018df8 <UART_SetConfig+0xe60>
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de0:	2b0b      	cmp	r3, #11
 8018de2:	d104      	bne.n	8018dee <UART_SetConfig+0xe56>
 8018de4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018de8:	f04f 0400 	mov.w	r4, #0
 8018dec:	e03a      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018dee:	f04f 0301 	mov.w	r3, #1
 8018df2:	f04f 0400 	mov.w	r4, #0
 8018df6:	e035      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018df8:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018dfc:	f04f 0400 	mov.w	r4, #0
 8018e00:	e030      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e02:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018e06:	f04f 0400 	mov.w	r4, #0
 8018e0a:	e02b      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e0c:	f04f 0320 	mov.w	r3, #32
 8018e10:	f04f 0400 	mov.w	r4, #0
 8018e14:	e026      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e16:	f04f 0310 	mov.w	r3, #16
 8018e1a:	f04f 0400 	mov.w	r4, #0
 8018e1e:	e021      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e20:	f04f 030c 	mov.w	r3, #12
 8018e24:	f04f 0400 	mov.w	r4, #0
 8018e28:	e01c      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e2a:	f04f 030a 	mov.w	r3, #10
 8018e2e:	f04f 0400 	mov.w	r4, #0
 8018e32:	e017      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e34:	f04f 0308 	mov.w	r3, #8
 8018e38:	f04f 0400 	mov.w	r4, #0
 8018e3c:	e012      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e3e:	f04f 0306 	mov.w	r3, #6
 8018e42:	f04f 0400 	mov.w	r4, #0
 8018e46:	e00d      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e48:	f04f 0304 	mov.w	r3, #4
 8018e4c:	f04f 0400 	mov.w	r4, #0
 8018e50:	e008      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e52:	f04f 0302 	mov.w	r3, #2
 8018e56:	f04f 0400 	mov.w	r4, #0
 8018e5a:	e003      	b.n	8018e64 <UART_SetConfig+0xecc>
 8018e5c:	f04f 0301 	mov.w	r3, #1
 8018e60:	f04f 0400 	mov.w	r4, #0
 8018e64:	461a      	mov	r2, r3
 8018e66:	4623      	mov	r3, r4
 8018e68:	f7e7 fa3e 	bl	80002e8 <__aeabi_uldivmod>
 8018e6c:	4603      	mov	r3, r0
 8018e6e:	460c      	mov	r4, r1
 8018e70:	4619      	mov	r1, r3
 8018e72:	4622      	mov	r2, r4
 8018e74:	f04f 0300 	mov.w	r3, #0
 8018e78:	f04f 0400 	mov.w	r4, #0
 8018e7c:	0214      	lsls	r4, r2, #8
 8018e7e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018e82:	020b      	lsls	r3, r1, #8
 8018e84:	687a      	ldr	r2, [r7, #4]
 8018e86:	6852      	ldr	r2, [r2, #4]
 8018e88:	0852      	lsrs	r2, r2, #1
 8018e8a:	4611      	mov	r1, r2
 8018e8c:	f04f 0200 	mov.w	r2, #0
 8018e90:	eb13 0b01 	adds.w	fp, r3, r1
 8018e94:	eb44 0c02 	adc.w	ip, r4, r2
 8018e98:	4658      	mov	r0, fp
 8018e9a:	4661      	mov	r1, ip
 8018e9c:	687b      	ldr	r3, [r7, #4]
 8018e9e:	685b      	ldr	r3, [r3, #4]
 8018ea0:	f04f 0400 	mov.w	r4, #0
 8018ea4:	461a      	mov	r2, r3
 8018ea6:	4623      	mov	r3, r4
 8018ea8:	f7e7 fa1e 	bl	80002e8 <__aeabi_uldivmod>
 8018eac:	4603      	mov	r3, r0
 8018eae:	460c      	mov	r4, r1
 8018eb0:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018eb2:	e247      	b.n	8019344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018eb4:	4b96      	ldr	r3, [pc, #600]	; (8019110 <UART_SetConfig+0x1178>)
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	f003 0320 	and.w	r3, r3, #32
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	f000 80a3 	beq.w	8019008 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018ec2:	4b93      	ldr	r3, [pc, #588]	; (8019110 <UART_SetConfig+0x1178>)
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	08db      	lsrs	r3, r3, #3
 8018ec8:	f003 0303 	and.w	r3, r3, #3
 8018ecc:	4a91      	ldr	r2, [pc, #580]	; (8019114 <UART_SetConfig+0x117c>)
 8018ece:	fa22 f303 	lsr.w	r3, r2, r3
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	f04f 0100 	mov.w	r1, #0
 8018ed8:	687b      	ldr	r3, [r7, #4]
 8018eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d067      	beq.n	8018fb0 <UART_SetConfig+0x1018>
 8018ee0:	687b      	ldr	r3, [r7, #4]
 8018ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ee4:	2b01      	cmp	r3, #1
 8018ee6:	d05e      	beq.n	8018fa6 <UART_SetConfig+0x100e>
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018eec:	2b02      	cmp	r3, #2
 8018eee:	d055      	beq.n	8018f9c <UART_SetConfig+0x1004>
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ef4:	2b03      	cmp	r3, #3
 8018ef6:	d04c      	beq.n	8018f92 <UART_SetConfig+0xffa>
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018efc:	2b04      	cmp	r3, #4
 8018efe:	d043      	beq.n	8018f88 <UART_SetConfig+0xff0>
 8018f00:	687b      	ldr	r3, [r7, #4]
 8018f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f04:	2b05      	cmp	r3, #5
 8018f06:	d03a      	beq.n	8018f7e <UART_SetConfig+0xfe6>
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f0c:	2b06      	cmp	r3, #6
 8018f0e:	d031      	beq.n	8018f74 <UART_SetConfig+0xfdc>
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f14:	2b07      	cmp	r3, #7
 8018f16:	d028      	beq.n	8018f6a <UART_SetConfig+0xfd2>
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f1c:	2b08      	cmp	r3, #8
 8018f1e:	d01f      	beq.n	8018f60 <UART_SetConfig+0xfc8>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f24:	2b09      	cmp	r3, #9
 8018f26:	d016      	beq.n	8018f56 <UART_SetConfig+0xfbe>
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2c:	2b0a      	cmp	r3, #10
 8018f2e:	d00d      	beq.n	8018f4c <UART_SetConfig+0xfb4>
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f34:	2b0b      	cmp	r3, #11
 8018f36:	d104      	bne.n	8018f42 <UART_SetConfig+0xfaa>
 8018f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018f3c:	f04f 0400 	mov.w	r4, #0
 8018f40:	e03a      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f42:	f04f 0301 	mov.w	r3, #1
 8018f46:	f04f 0400 	mov.w	r4, #0
 8018f4a:	e035      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f4c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018f50:	f04f 0400 	mov.w	r4, #0
 8018f54:	e030      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f56:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018f5a:	f04f 0400 	mov.w	r4, #0
 8018f5e:	e02b      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f60:	f04f 0320 	mov.w	r3, #32
 8018f64:	f04f 0400 	mov.w	r4, #0
 8018f68:	e026      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f6a:	f04f 0310 	mov.w	r3, #16
 8018f6e:	f04f 0400 	mov.w	r4, #0
 8018f72:	e021      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f74:	f04f 030c 	mov.w	r3, #12
 8018f78:	f04f 0400 	mov.w	r4, #0
 8018f7c:	e01c      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f7e:	f04f 030a 	mov.w	r3, #10
 8018f82:	f04f 0400 	mov.w	r4, #0
 8018f86:	e017      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f88:	f04f 0308 	mov.w	r3, #8
 8018f8c:	f04f 0400 	mov.w	r4, #0
 8018f90:	e012      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f92:	f04f 0306 	mov.w	r3, #6
 8018f96:	f04f 0400 	mov.w	r4, #0
 8018f9a:	e00d      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018f9c:	f04f 0304 	mov.w	r3, #4
 8018fa0:	f04f 0400 	mov.w	r4, #0
 8018fa4:	e008      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018fa6:	f04f 0302 	mov.w	r3, #2
 8018faa:	f04f 0400 	mov.w	r4, #0
 8018fae:	e003      	b.n	8018fb8 <UART_SetConfig+0x1020>
 8018fb0:	f04f 0301 	mov.w	r3, #1
 8018fb4:	f04f 0400 	mov.w	r4, #0
 8018fb8:	461a      	mov	r2, r3
 8018fba:	4623      	mov	r3, r4
 8018fbc:	f7e7 f994 	bl	80002e8 <__aeabi_uldivmod>
 8018fc0:	4603      	mov	r3, r0
 8018fc2:	460c      	mov	r4, r1
 8018fc4:	4619      	mov	r1, r3
 8018fc6:	4622      	mov	r2, r4
 8018fc8:	f04f 0300 	mov.w	r3, #0
 8018fcc:	f04f 0400 	mov.w	r4, #0
 8018fd0:	0214      	lsls	r4, r2, #8
 8018fd2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018fd6:	020b      	lsls	r3, r1, #8
 8018fd8:	687a      	ldr	r2, [r7, #4]
 8018fda:	6852      	ldr	r2, [r2, #4]
 8018fdc:	0852      	lsrs	r2, r2, #1
 8018fde:	4611      	mov	r1, r2
 8018fe0:	f04f 0200 	mov.w	r2, #0
 8018fe4:	eb13 0b01 	adds.w	fp, r3, r1
 8018fe8:	eb44 0c02 	adc.w	ip, r4, r2
 8018fec:	4658      	mov	r0, fp
 8018fee:	4661      	mov	r1, ip
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	685b      	ldr	r3, [r3, #4]
 8018ff4:	f04f 0400 	mov.w	r4, #0
 8018ff8:	461a      	mov	r2, r3
 8018ffa:	4623      	mov	r3, r4
 8018ffc:	f7e7 f974 	bl	80002e8 <__aeabi_uldivmod>
 8019000:	4603      	mov	r3, r0
 8019002:	460c      	mov	r4, r1
 8019004:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8019006:	e19d      	b.n	8019344 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900c:	2b00      	cmp	r3, #0
 801900e:	d05b      	beq.n	80190c8 <UART_SetConfig+0x1130>
 8019010:	687b      	ldr	r3, [r7, #4]
 8019012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019014:	2b01      	cmp	r3, #1
 8019016:	d053      	beq.n	80190c0 <UART_SetConfig+0x1128>
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801901c:	2b02      	cmp	r3, #2
 801901e:	d04b      	beq.n	80190b8 <UART_SetConfig+0x1120>
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019024:	2b03      	cmp	r3, #3
 8019026:	d043      	beq.n	80190b0 <UART_SetConfig+0x1118>
 8019028:	687b      	ldr	r3, [r7, #4]
 801902a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902c:	2b04      	cmp	r3, #4
 801902e:	d03b      	beq.n	80190a8 <UART_SetConfig+0x1110>
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019034:	2b05      	cmp	r3, #5
 8019036:	d033      	beq.n	80190a0 <UART_SetConfig+0x1108>
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801903c:	2b06      	cmp	r3, #6
 801903e:	d02b      	beq.n	8019098 <UART_SetConfig+0x1100>
 8019040:	687b      	ldr	r3, [r7, #4]
 8019042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019044:	2b07      	cmp	r3, #7
 8019046:	d023      	beq.n	8019090 <UART_SetConfig+0x10f8>
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801904c:	2b08      	cmp	r3, #8
 801904e:	d01b      	beq.n	8019088 <UART_SetConfig+0x10f0>
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019054:	2b09      	cmp	r3, #9
 8019056:	d013      	beq.n	8019080 <UART_SetConfig+0x10e8>
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801905c:	2b0a      	cmp	r3, #10
 801905e:	d00b      	beq.n	8019078 <UART_SetConfig+0x10e0>
 8019060:	687b      	ldr	r3, [r7, #4]
 8019062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019064:	2b0b      	cmp	r3, #11
 8019066:	d103      	bne.n	8019070 <UART_SetConfig+0x10d8>
 8019068:	4b2a      	ldr	r3, [pc, #168]	; (8019114 <UART_SetConfig+0x117c>)
 801906a:	f04f 0400 	mov.w	r4, #0
 801906e:	e02e      	b.n	80190ce <UART_SetConfig+0x1136>
 8019070:	4b29      	ldr	r3, [pc, #164]	; (8019118 <UART_SetConfig+0x1180>)
 8019072:	f04f 0403 	mov.w	r4, #3
 8019076:	e02a      	b.n	80190ce <UART_SetConfig+0x1136>
 8019078:	4b28      	ldr	r3, [pc, #160]	; (801911c <UART_SetConfig+0x1184>)
 801907a:	f04f 0400 	mov.w	r4, #0
 801907e:	e026      	b.n	80190ce <UART_SetConfig+0x1136>
 8019080:	4b27      	ldr	r3, [pc, #156]	; (8019120 <UART_SetConfig+0x1188>)
 8019082:	f04f 0400 	mov.w	r4, #0
 8019086:	e022      	b.n	80190ce <UART_SetConfig+0x1136>
 8019088:	4b26      	ldr	r3, [pc, #152]	; (8019124 <UART_SetConfig+0x118c>)
 801908a:	f04f 0400 	mov.w	r4, #0
 801908e:	e01e      	b.n	80190ce <UART_SetConfig+0x1136>
 8019090:	4b25      	ldr	r3, [pc, #148]	; (8019128 <UART_SetConfig+0x1190>)
 8019092:	f04f 0400 	mov.w	r4, #0
 8019096:	e01a      	b.n	80190ce <UART_SetConfig+0x1136>
 8019098:	a419      	add	r4, pc, #100	; (adr r4, 8019100 <UART_SetConfig+0x1168>)
 801909a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801909e:	e016      	b.n	80190ce <UART_SetConfig+0x1136>
 80190a0:	4b22      	ldr	r3, [pc, #136]	; (801912c <UART_SetConfig+0x1194>)
 80190a2:	f04f 0400 	mov.w	r4, #0
 80190a6:	e012      	b.n	80190ce <UART_SetConfig+0x1136>
 80190a8:	4b21      	ldr	r3, [pc, #132]	; (8019130 <UART_SetConfig+0x1198>)
 80190aa:	f04f 0400 	mov.w	r4, #0
 80190ae:	e00e      	b.n	80190ce <UART_SetConfig+0x1136>
 80190b0:	a415      	add	r4, pc, #84	; (adr r4, 8019108 <UART_SetConfig+0x1170>)
 80190b2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80190b6:	e00a      	b.n	80190ce <UART_SetConfig+0x1136>
 80190b8:	4b1e      	ldr	r3, [pc, #120]	; (8019134 <UART_SetConfig+0x119c>)
 80190ba:	f04f 0400 	mov.w	r4, #0
 80190be:	e006      	b.n	80190ce <UART_SetConfig+0x1136>
 80190c0:	4b1d      	ldr	r3, [pc, #116]	; (8019138 <UART_SetConfig+0x11a0>)
 80190c2:	f04f 0401 	mov.w	r4, #1
 80190c6:	e002      	b.n	80190ce <UART_SetConfig+0x1136>
 80190c8:	4b13      	ldr	r3, [pc, #76]	; (8019118 <UART_SetConfig+0x1180>)
 80190ca:	f04f 0403 	mov.w	r4, #3
 80190ce:	687a      	ldr	r2, [r7, #4]
 80190d0:	6852      	ldr	r2, [r2, #4]
 80190d2:	0852      	lsrs	r2, r2, #1
 80190d4:	4611      	mov	r1, r2
 80190d6:	f04f 0200 	mov.w	r2, #0
 80190da:	eb13 0b01 	adds.w	fp, r3, r1
 80190de:	eb44 0c02 	adc.w	ip, r4, r2
 80190e2:	4658      	mov	r0, fp
 80190e4:	4661      	mov	r1, ip
 80190e6:	687b      	ldr	r3, [r7, #4]
 80190e8:	685b      	ldr	r3, [r3, #4]
 80190ea:	f04f 0400 	mov.w	r4, #0
 80190ee:	461a      	mov	r2, r3
 80190f0:	4623      	mov	r3, r4
 80190f2:	f7e7 f8f9 	bl	80002e8 <__aeabi_uldivmod>
 80190f6:	4603      	mov	r3, r0
 80190f8:	460c      	mov	r4, r1
 80190fa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80190fc:	e122      	b.n	8019344 <UART_SetConfig+0x13ac>
 80190fe:	bf00      	nop
 8019100:	51615500 	.word	0x51615500
 8019104:	00000000 	.word	0x00000000
 8019108:	a2c2aa00 	.word	0xa2c2aa00
 801910c:	00000000 	.word	0x00000000
 8019110:	58024400 	.word	0x58024400
 8019114:	03d09000 	.word	0x03d09000
 8019118:	d0900000 	.word	0xd0900000
 801911c:	07a12000 	.word	0x07a12000
 8019120:	0f424000 	.word	0x0f424000
 8019124:	1e848000 	.word	0x1e848000
 8019128:	3d090000 	.word	0x3d090000
 801912c:	61a80000 	.word	0x61a80000
 8019130:	7a120000 	.word	0x7a120000
 8019134:	f4240000 	.word	0xf4240000
 8019138:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019140:	2b00      	cmp	r3, #0
 8019142:	d05b      	beq.n	80191fc <UART_SetConfig+0x1264>
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019148:	2b01      	cmp	r3, #1
 801914a:	d053      	beq.n	80191f4 <UART_SetConfig+0x125c>
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019150:	2b02      	cmp	r3, #2
 8019152:	d04b      	beq.n	80191ec <UART_SetConfig+0x1254>
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019158:	2b03      	cmp	r3, #3
 801915a:	d043      	beq.n	80191e4 <UART_SetConfig+0x124c>
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019160:	2b04      	cmp	r3, #4
 8019162:	d03b      	beq.n	80191dc <UART_SetConfig+0x1244>
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019168:	2b05      	cmp	r3, #5
 801916a:	d033      	beq.n	80191d4 <UART_SetConfig+0x123c>
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019170:	2b06      	cmp	r3, #6
 8019172:	d02b      	beq.n	80191cc <UART_SetConfig+0x1234>
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019178:	2b07      	cmp	r3, #7
 801917a:	d023      	beq.n	80191c4 <UART_SetConfig+0x122c>
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019180:	2b08      	cmp	r3, #8
 8019182:	d01b      	beq.n	80191bc <UART_SetConfig+0x1224>
 8019184:	687b      	ldr	r3, [r7, #4]
 8019186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019188:	2b09      	cmp	r3, #9
 801918a:	d013      	beq.n	80191b4 <UART_SetConfig+0x121c>
 801918c:	687b      	ldr	r3, [r7, #4]
 801918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019190:	2b0a      	cmp	r3, #10
 8019192:	d00b      	beq.n	80191ac <UART_SetConfig+0x1214>
 8019194:	687b      	ldr	r3, [r7, #4]
 8019196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019198:	2b0b      	cmp	r3, #11
 801919a:	d103      	bne.n	80191a4 <UART_SetConfig+0x120c>
 801919c:	4bc0      	ldr	r3, [pc, #768]	; (80194a0 <UART_SetConfig+0x1508>)
 801919e:	f04f 0400 	mov.w	r4, #0
 80191a2:	e02e      	b.n	8019202 <UART_SetConfig+0x126a>
 80191a4:	4bbf      	ldr	r3, [pc, #764]	; (80194a4 <UART_SetConfig+0x150c>)
 80191a6:	f04f 0400 	mov.w	r4, #0
 80191aa:	e02a      	b.n	8019202 <UART_SetConfig+0x126a>
 80191ac:	4bbe      	ldr	r3, [pc, #760]	; (80194a8 <UART_SetConfig+0x1510>)
 80191ae:	f04f 0400 	mov.w	r4, #0
 80191b2:	e026      	b.n	8019202 <UART_SetConfig+0x126a>
 80191b4:	4bbd      	ldr	r3, [pc, #756]	; (80194ac <UART_SetConfig+0x1514>)
 80191b6:	f04f 0400 	mov.w	r4, #0
 80191ba:	e022      	b.n	8019202 <UART_SetConfig+0x126a>
 80191bc:	4bbc      	ldr	r3, [pc, #752]	; (80194b0 <UART_SetConfig+0x1518>)
 80191be:	f04f 0400 	mov.w	r4, #0
 80191c2:	e01e      	b.n	8019202 <UART_SetConfig+0x126a>
 80191c4:	4bbb      	ldr	r3, [pc, #748]	; (80194b4 <UART_SetConfig+0x151c>)
 80191c6:	f04f 0400 	mov.w	r4, #0
 80191ca:	e01a      	b.n	8019202 <UART_SetConfig+0x126a>
 80191cc:	a4b0      	add	r4, pc, #704	; (adr r4, 8019490 <UART_SetConfig+0x14f8>)
 80191ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80191d2:	e016      	b.n	8019202 <UART_SetConfig+0x126a>
 80191d4:	4bb8      	ldr	r3, [pc, #736]	; (80194b8 <UART_SetConfig+0x1520>)
 80191d6:	f04f 0400 	mov.w	r4, #0
 80191da:	e012      	b.n	8019202 <UART_SetConfig+0x126a>
 80191dc:	4bb7      	ldr	r3, [pc, #732]	; (80194bc <UART_SetConfig+0x1524>)
 80191de:	f04f 0400 	mov.w	r4, #0
 80191e2:	e00e      	b.n	8019202 <UART_SetConfig+0x126a>
 80191e4:	a4ac      	add	r4, pc, #688	; (adr r4, 8019498 <UART_SetConfig+0x1500>)
 80191e6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80191ea:	e00a      	b.n	8019202 <UART_SetConfig+0x126a>
 80191ec:	4bb4      	ldr	r3, [pc, #720]	; (80194c0 <UART_SetConfig+0x1528>)
 80191ee:	f04f 0400 	mov.w	r4, #0
 80191f2:	e006      	b.n	8019202 <UART_SetConfig+0x126a>
 80191f4:	4bb3      	ldr	r3, [pc, #716]	; (80194c4 <UART_SetConfig+0x152c>)
 80191f6:	f04f 0400 	mov.w	r4, #0
 80191fa:	e002      	b.n	8019202 <UART_SetConfig+0x126a>
 80191fc:	4ba9      	ldr	r3, [pc, #676]	; (80194a4 <UART_SetConfig+0x150c>)
 80191fe:	f04f 0400 	mov.w	r4, #0
 8019202:	687a      	ldr	r2, [r7, #4]
 8019204:	6852      	ldr	r2, [r2, #4]
 8019206:	0852      	lsrs	r2, r2, #1
 8019208:	4611      	mov	r1, r2
 801920a:	f04f 0200 	mov.w	r2, #0
 801920e:	eb13 0b01 	adds.w	fp, r3, r1
 8019212:	eb44 0c02 	adc.w	ip, r4, r2
 8019216:	4658      	mov	r0, fp
 8019218:	4661      	mov	r1, ip
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	685b      	ldr	r3, [r3, #4]
 801921e:	f04f 0400 	mov.w	r4, #0
 8019222:	461a      	mov	r2, r3
 8019224:	4623      	mov	r3, r4
 8019226:	f7e7 f85f 	bl	80002e8 <__aeabi_uldivmod>
 801922a:	4603      	mov	r3, r0
 801922c:	460c      	mov	r4, r1
 801922e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019230:	e088      	b.n	8019344 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019232:	687b      	ldr	r3, [r7, #4]
 8019234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019236:	2b00      	cmp	r3, #0
 8019238:	d064      	beq.n	8019304 <UART_SetConfig+0x136c>
 801923a:	687b      	ldr	r3, [r7, #4]
 801923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801923e:	2b01      	cmp	r3, #1
 8019240:	d05b      	beq.n	80192fa <UART_SetConfig+0x1362>
 8019242:	687b      	ldr	r3, [r7, #4]
 8019244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019246:	2b02      	cmp	r3, #2
 8019248:	d052      	beq.n	80192f0 <UART_SetConfig+0x1358>
 801924a:	687b      	ldr	r3, [r7, #4]
 801924c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801924e:	2b03      	cmp	r3, #3
 8019250:	d04a      	beq.n	80192e8 <UART_SetConfig+0x1350>
 8019252:	687b      	ldr	r3, [r7, #4]
 8019254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019256:	2b04      	cmp	r3, #4
 8019258:	d041      	beq.n	80192de <UART_SetConfig+0x1346>
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801925e:	2b05      	cmp	r3, #5
 8019260:	d039      	beq.n	80192d6 <UART_SetConfig+0x133e>
 8019262:	687b      	ldr	r3, [r7, #4]
 8019264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019266:	2b06      	cmp	r3, #6
 8019268:	d031      	beq.n	80192ce <UART_SetConfig+0x1336>
 801926a:	687b      	ldr	r3, [r7, #4]
 801926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801926e:	2b07      	cmp	r3, #7
 8019270:	d028      	beq.n	80192c4 <UART_SetConfig+0x132c>
 8019272:	687b      	ldr	r3, [r7, #4]
 8019274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019276:	2b08      	cmp	r3, #8
 8019278:	d01f      	beq.n	80192ba <UART_SetConfig+0x1322>
 801927a:	687b      	ldr	r3, [r7, #4]
 801927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801927e:	2b09      	cmp	r3, #9
 8019280:	d016      	beq.n	80192b0 <UART_SetConfig+0x1318>
 8019282:	687b      	ldr	r3, [r7, #4]
 8019284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019286:	2b0a      	cmp	r3, #10
 8019288:	d00d      	beq.n	80192a6 <UART_SetConfig+0x130e>
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801928e:	2b0b      	cmp	r3, #11
 8019290:	d104      	bne.n	801929c <UART_SetConfig+0x1304>
 8019292:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019296:	f04f 0400 	mov.w	r4, #0
 801929a:	e037      	b.n	801930c <UART_SetConfig+0x1374>
 801929c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80192a0:	f04f 0400 	mov.w	r4, #0
 80192a4:	e032      	b.n	801930c <UART_SetConfig+0x1374>
 80192a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80192aa:	f04f 0400 	mov.w	r4, #0
 80192ae:	e02d      	b.n	801930c <UART_SetConfig+0x1374>
 80192b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80192b4:	f04f 0400 	mov.w	r4, #0
 80192b8:	e028      	b.n	801930c <UART_SetConfig+0x1374>
 80192ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80192be:	f04f 0400 	mov.w	r4, #0
 80192c2:	e023      	b.n	801930c <UART_SetConfig+0x1374>
 80192c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80192c8:	f04f 0400 	mov.w	r4, #0
 80192cc:	e01e      	b.n	801930c <UART_SetConfig+0x1374>
 80192ce:	4b7e      	ldr	r3, [pc, #504]	; (80194c8 <UART_SetConfig+0x1530>)
 80192d0:	f04f 0400 	mov.w	r4, #0
 80192d4:	e01a      	b.n	801930c <UART_SetConfig+0x1374>
 80192d6:	4b7d      	ldr	r3, [pc, #500]	; (80194cc <UART_SetConfig+0x1534>)
 80192d8:	f04f 0400 	mov.w	r4, #0
 80192dc:	e016      	b.n	801930c <UART_SetConfig+0x1374>
 80192de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80192e2:	f04f 0400 	mov.w	r4, #0
 80192e6:	e011      	b.n	801930c <UART_SetConfig+0x1374>
 80192e8:	4b79      	ldr	r3, [pc, #484]	; (80194d0 <UART_SetConfig+0x1538>)
 80192ea:	f04f 0400 	mov.w	r4, #0
 80192ee:	e00d      	b.n	801930c <UART_SetConfig+0x1374>
 80192f0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80192f4:	f04f 0400 	mov.w	r4, #0
 80192f8:	e008      	b.n	801930c <UART_SetConfig+0x1374>
 80192fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80192fe:	f04f 0400 	mov.w	r4, #0
 8019302:	e003      	b.n	801930c <UART_SetConfig+0x1374>
 8019304:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019308:	f04f 0400 	mov.w	r4, #0
 801930c:	687a      	ldr	r2, [r7, #4]
 801930e:	6852      	ldr	r2, [r2, #4]
 8019310:	0852      	lsrs	r2, r2, #1
 8019312:	4611      	mov	r1, r2
 8019314:	f04f 0200 	mov.w	r2, #0
 8019318:	eb13 0b01 	adds.w	fp, r3, r1
 801931c:	eb44 0c02 	adc.w	ip, r4, r2
 8019320:	4658      	mov	r0, fp
 8019322:	4661      	mov	r1, ip
 8019324:	687b      	ldr	r3, [r7, #4]
 8019326:	685b      	ldr	r3, [r3, #4]
 8019328:	f04f 0400 	mov.w	r4, #0
 801932c:	461a      	mov	r2, r3
 801932e:	4623      	mov	r3, r4
 8019330:	f7e6 ffda 	bl	80002e8 <__aeabi_uldivmod>
 8019334:	4603      	mov	r3, r0
 8019336:	460c      	mov	r4, r1
 8019338:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 801933a:	e003      	b.n	8019344 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 801933c:	2301      	movs	r3, #1
 801933e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8019342:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801934a:	d309      	bcc.n	8019360 <UART_SetConfig+0x13c8>
 801934c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801934e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019352:	d205      	bcs.n	8019360 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8019354:	687b      	ldr	r3, [r7, #4]
 8019356:	681b      	ldr	r3, [r3, #0]
 8019358:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801935a:	60da      	str	r2, [r3, #12]
 801935c:	f000 bf85 	b.w	801a26a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8019360:	2301      	movs	r3, #1
 8019362:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019366:	f000 bf80 	b.w	801a26a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	69db      	ldr	r3, [r3, #28]
 801936e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019372:	f040 83da 	bne.w	8019b2a <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8019376:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801937a:	2b40      	cmp	r3, #64	; 0x40
 801937c:	f200 83b3 	bhi.w	8019ae6 <UART_SetConfig+0x1b4e>
 8019380:	a201      	add	r2, pc, #4	; (adr r2, 8019388 <UART_SetConfig+0x13f0>)
 8019382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019386:	bf00      	nop
 8019388:	080194d5 	.word	0x080194d5
 801938c:	0801958d 	.word	0x0801958d
 8019390:	08019ae7 	.word	0x08019ae7
 8019394:	08019ae7 	.word	0x08019ae7
 8019398:	08019645 	.word	0x08019645
 801939c:	08019ae7 	.word	0x08019ae7
 80193a0:	08019ae7 	.word	0x08019ae7
 80193a4:	08019ae7 	.word	0x08019ae7
 80193a8:	08019701 	.word	0x08019701
 80193ac:	08019ae7 	.word	0x08019ae7
 80193b0:	08019ae7 	.word	0x08019ae7
 80193b4:	08019ae7 	.word	0x08019ae7
 80193b8:	08019ae7 	.word	0x08019ae7
 80193bc:	08019ae7 	.word	0x08019ae7
 80193c0:	08019ae7 	.word	0x08019ae7
 80193c4:	08019ae7 	.word	0x08019ae7
 80193c8:	080197bd 	.word	0x080197bd
 80193cc:	08019ae7 	.word	0x08019ae7
 80193d0:	08019ae7 	.word	0x08019ae7
 80193d4:	08019ae7 	.word	0x08019ae7
 80193d8:	08019ae7 	.word	0x08019ae7
 80193dc:	08019ae7 	.word	0x08019ae7
 80193e0:	08019ae7 	.word	0x08019ae7
 80193e4:	08019ae7 	.word	0x08019ae7
 80193e8:	08019ae7 	.word	0x08019ae7
 80193ec:	08019ae7 	.word	0x08019ae7
 80193f0:	08019ae7 	.word	0x08019ae7
 80193f4:	08019ae7 	.word	0x08019ae7
 80193f8:	08019ae7 	.word	0x08019ae7
 80193fc:	08019ae7 	.word	0x08019ae7
 8019400:	08019ae7 	.word	0x08019ae7
 8019404:	08019ae7 	.word	0x08019ae7
 8019408:	0801992f 	.word	0x0801992f
 801940c:	08019ae7 	.word	0x08019ae7
 8019410:	08019ae7 	.word	0x08019ae7
 8019414:	08019ae7 	.word	0x08019ae7
 8019418:	08019ae7 	.word	0x08019ae7
 801941c:	08019ae7 	.word	0x08019ae7
 8019420:	08019ae7 	.word	0x08019ae7
 8019424:	08019ae7 	.word	0x08019ae7
 8019428:	08019ae7 	.word	0x08019ae7
 801942c:	08019ae7 	.word	0x08019ae7
 8019430:	08019ae7 	.word	0x08019ae7
 8019434:	08019ae7 	.word	0x08019ae7
 8019438:	08019ae7 	.word	0x08019ae7
 801943c:	08019ae7 	.word	0x08019ae7
 8019440:	08019ae7 	.word	0x08019ae7
 8019444:	08019ae7 	.word	0x08019ae7
 8019448:	08019ae7 	.word	0x08019ae7
 801944c:	08019ae7 	.word	0x08019ae7
 8019450:	08019ae7 	.word	0x08019ae7
 8019454:	08019ae7 	.word	0x08019ae7
 8019458:	08019ae7 	.word	0x08019ae7
 801945c:	08019ae7 	.word	0x08019ae7
 8019460:	08019ae7 	.word	0x08019ae7
 8019464:	08019ae7 	.word	0x08019ae7
 8019468:	08019ae7 	.word	0x08019ae7
 801946c:	08019ae7 	.word	0x08019ae7
 8019470:	08019ae7 	.word	0x08019ae7
 8019474:	08019ae7 	.word	0x08019ae7
 8019478:	08019ae7 	.word	0x08019ae7
 801947c:	08019ae7 	.word	0x08019ae7
 8019480:	08019ae7 	.word	0x08019ae7
 8019484:	08019ae7 	.word	0x08019ae7
 8019488:	08019a25 	.word	0x08019a25
 801948c:	f3af 8000 	nop.w
 8019490:	05161500 	.word	0x05161500
 8019494:	00000000 	.word	0x00000000
 8019498:	0a2c2a00 	.word	0x0a2c2a00
 801949c:	00000000 	.word	0x00000000
 80194a0:	003d0900 	.word	0x003d0900
 80194a4:	3d090000 	.word	0x3d090000
 80194a8:	007a1200 	.word	0x007a1200
 80194ac:	00f42400 	.word	0x00f42400
 80194b0:	01e84800 	.word	0x01e84800
 80194b4:	03d09000 	.word	0x03d09000
 80194b8:	061a8000 	.word	0x061a8000
 80194bc:	07a12000 	.word	0x07a12000
 80194c0:	0f424000 	.word	0x0f424000
 80194c4:	1e848000 	.word	0x1e848000
 80194c8:	000aaa00 	.word	0x000aaa00
 80194cc:	000ccc00 	.word	0x000ccc00
 80194d0:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80194d4:	f7fc f874 	bl	80155c0 <HAL_RCC_GetPCLK1Freq>
 80194d8:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d044      	beq.n	801956c <UART_SetConfig+0x15d4>
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194e6:	2b01      	cmp	r3, #1
 80194e8:	d03e      	beq.n	8019568 <UART_SetConfig+0x15d0>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ee:	2b02      	cmp	r3, #2
 80194f0:	d038      	beq.n	8019564 <UART_SetConfig+0x15cc>
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f6:	2b03      	cmp	r3, #3
 80194f8:	d032      	beq.n	8019560 <UART_SetConfig+0x15c8>
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194fe:	2b04      	cmp	r3, #4
 8019500:	d02c      	beq.n	801955c <UART_SetConfig+0x15c4>
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019506:	2b05      	cmp	r3, #5
 8019508:	d026      	beq.n	8019558 <UART_SetConfig+0x15c0>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801950e:	2b06      	cmp	r3, #6
 8019510:	d020      	beq.n	8019554 <UART_SetConfig+0x15bc>
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019516:	2b07      	cmp	r3, #7
 8019518:	d01a      	beq.n	8019550 <UART_SetConfig+0x15b8>
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801951e:	2b08      	cmp	r3, #8
 8019520:	d014      	beq.n	801954c <UART_SetConfig+0x15b4>
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019526:	2b09      	cmp	r3, #9
 8019528:	d00e      	beq.n	8019548 <UART_SetConfig+0x15b0>
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952e:	2b0a      	cmp	r3, #10
 8019530:	d008      	beq.n	8019544 <UART_SetConfig+0x15ac>
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019536:	2b0b      	cmp	r3, #11
 8019538:	d102      	bne.n	8019540 <UART_SetConfig+0x15a8>
 801953a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801953e:	e016      	b.n	801956e <UART_SetConfig+0x15d6>
 8019540:	2301      	movs	r3, #1
 8019542:	e014      	b.n	801956e <UART_SetConfig+0x15d6>
 8019544:	2380      	movs	r3, #128	; 0x80
 8019546:	e012      	b.n	801956e <UART_SetConfig+0x15d6>
 8019548:	2340      	movs	r3, #64	; 0x40
 801954a:	e010      	b.n	801956e <UART_SetConfig+0x15d6>
 801954c:	2320      	movs	r3, #32
 801954e:	e00e      	b.n	801956e <UART_SetConfig+0x15d6>
 8019550:	2310      	movs	r3, #16
 8019552:	e00c      	b.n	801956e <UART_SetConfig+0x15d6>
 8019554:	230c      	movs	r3, #12
 8019556:	e00a      	b.n	801956e <UART_SetConfig+0x15d6>
 8019558:	230a      	movs	r3, #10
 801955a:	e008      	b.n	801956e <UART_SetConfig+0x15d6>
 801955c:	2308      	movs	r3, #8
 801955e:	e006      	b.n	801956e <UART_SetConfig+0x15d6>
 8019560:	2306      	movs	r3, #6
 8019562:	e004      	b.n	801956e <UART_SetConfig+0x15d6>
 8019564:	2304      	movs	r3, #4
 8019566:	e002      	b.n	801956e <UART_SetConfig+0x15d6>
 8019568:	2302      	movs	r3, #2
 801956a:	e000      	b.n	801956e <UART_SetConfig+0x15d6>
 801956c:	2301      	movs	r3, #1
 801956e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019570:	fbb2 f3f3 	udiv	r3, r2, r3
 8019574:	005a      	lsls	r2, r3, #1
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	085b      	lsrs	r3, r3, #1
 801957c:	441a      	add	r2, r3
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	685b      	ldr	r3, [r3, #4]
 8019582:	fbb2 f3f3 	udiv	r3, r2, r3
 8019586:	b29b      	uxth	r3, r3
 8019588:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801958a:	e2b0      	b.n	8019aee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801958c:	f7fc f82e 	bl	80155ec <HAL_RCC_GetPCLK2Freq>
 8019590:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019596:	2b00      	cmp	r3, #0
 8019598:	d044      	beq.n	8019624 <UART_SetConfig+0x168c>
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801959e:	2b01      	cmp	r3, #1
 80195a0:	d03e      	beq.n	8019620 <UART_SetConfig+0x1688>
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195a6:	2b02      	cmp	r3, #2
 80195a8:	d038      	beq.n	801961c <UART_SetConfig+0x1684>
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ae:	2b03      	cmp	r3, #3
 80195b0:	d032      	beq.n	8019618 <UART_SetConfig+0x1680>
 80195b2:	687b      	ldr	r3, [r7, #4]
 80195b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195b6:	2b04      	cmp	r3, #4
 80195b8:	d02c      	beq.n	8019614 <UART_SetConfig+0x167c>
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195be:	2b05      	cmp	r3, #5
 80195c0:	d026      	beq.n	8019610 <UART_SetConfig+0x1678>
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195c6:	2b06      	cmp	r3, #6
 80195c8:	d020      	beq.n	801960c <UART_SetConfig+0x1674>
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ce:	2b07      	cmp	r3, #7
 80195d0:	d01a      	beq.n	8019608 <UART_SetConfig+0x1670>
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195d6:	2b08      	cmp	r3, #8
 80195d8:	d014      	beq.n	8019604 <UART_SetConfig+0x166c>
 80195da:	687b      	ldr	r3, [r7, #4]
 80195dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195de:	2b09      	cmp	r3, #9
 80195e0:	d00e      	beq.n	8019600 <UART_SetConfig+0x1668>
 80195e2:	687b      	ldr	r3, [r7, #4]
 80195e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195e6:	2b0a      	cmp	r3, #10
 80195e8:	d008      	beq.n	80195fc <UART_SetConfig+0x1664>
 80195ea:	687b      	ldr	r3, [r7, #4]
 80195ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80195ee:	2b0b      	cmp	r3, #11
 80195f0:	d102      	bne.n	80195f8 <UART_SetConfig+0x1660>
 80195f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80195f6:	e016      	b.n	8019626 <UART_SetConfig+0x168e>
 80195f8:	2301      	movs	r3, #1
 80195fa:	e014      	b.n	8019626 <UART_SetConfig+0x168e>
 80195fc:	2380      	movs	r3, #128	; 0x80
 80195fe:	e012      	b.n	8019626 <UART_SetConfig+0x168e>
 8019600:	2340      	movs	r3, #64	; 0x40
 8019602:	e010      	b.n	8019626 <UART_SetConfig+0x168e>
 8019604:	2320      	movs	r3, #32
 8019606:	e00e      	b.n	8019626 <UART_SetConfig+0x168e>
 8019608:	2310      	movs	r3, #16
 801960a:	e00c      	b.n	8019626 <UART_SetConfig+0x168e>
 801960c:	230c      	movs	r3, #12
 801960e:	e00a      	b.n	8019626 <UART_SetConfig+0x168e>
 8019610:	230a      	movs	r3, #10
 8019612:	e008      	b.n	8019626 <UART_SetConfig+0x168e>
 8019614:	2308      	movs	r3, #8
 8019616:	e006      	b.n	8019626 <UART_SetConfig+0x168e>
 8019618:	2306      	movs	r3, #6
 801961a:	e004      	b.n	8019626 <UART_SetConfig+0x168e>
 801961c:	2304      	movs	r3, #4
 801961e:	e002      	b.n	8019626 <UART_SetConfig+0x168e>
 8019620:	2302      	movs	r3, #2
 8019622:	e000      	b.n	8019626 <UART_SetConfig+0x168e>
 8019624:	2301      	movs	r3, #1
 8019626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019628:	fbb2 f3f3 	udiv	r3, r2, r3
 801962c:	005a      	lsls	r2, r3, #1
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	685b      	ldr	r3, [r3, #4]
 8019632:	085b      	lsrs	r3, r3, #1
 8019634:	441a      	add	r2, r3
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	685b      	ldr	r3, [r3, #4]
 801963a:	fbb2 f3f3 	udiv	r3, r2, r3
 801963e:	b29b      	uxth	r3, r3
 8019640:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019642:	e254      	b.n	8019aee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019644:	f107 0318 	add.w	r3, r7, #24
 8019648:	4618      	mov	r0, r3
 801964a:	f7fc fed9 	bl	8016400 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801964e:	69fa      	ldr	r2, [r7, #28]
 8019650:	687b      	ldr	r3, [r7, #4]
 8019652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019654:	2b00      	cmp	r3, #0
 8019656:	d044      	beq.n	80196e2 <UART_SetConfig+0x174a>
 8019658:	687b      	ldr	r3, [r7, #4]
 801965a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801965c:	2b01      	cmp	r3, #1
 801965e:	d03e      	beq.n	80196de <UART_SetConfig+0x1746>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019664:	2b02      	cmp	r3, #2
 8019666:	d038      	beq.n	80196da <UART_SetConfig+0x1742>
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801966c:	2b03      	cmp	r3, #3
 801966e:	d032      	beq.n	80196d6 <UART_SetConfig+0x173e>
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019674:	2b04      	cmp	r3, #4
 8019676:	d02c      	beq.n	80196d2 <UART_SetConfig+0x173a>
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801967c:	2b05      	cmp	r3, #5
 801967e:	d026      	beq.n	80196ce <UART_SetConfig+0x1736>
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019684:	2b06      	cmp	r3, #6
 8019686:	d020      	beq.n	80196ca <UART_SetConfig+0x1732>
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801968c:	2b07      	cmp	r3, #7
 801968e:	d01a      	beq.n	80196c6 <UART_SetConfig+0x172e>
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019694:	2b08      	cmp	r3, #8
 8019696:	d014      	beq.n	80196c2 <UART_SetConfig+0x172a>
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801969c:	2b09      	cmp	r3, #9
 801969e:	d00e      	beq.n	80196be <UART_SetConfig+0x1726>
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196a4:	2b0a      	cmp	r3, #10
 80196a6:	d008      	beq.n	80196ba <UART_SetConfig+0x1722>
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80196ac:	2b0b      	cmp	r3, #11
 80196ae:	d102      	bne.n	80196b6 <UART_SetConfig+0x171e>
 80196b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80196b4:	e016      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196b6:	2301      	movs	r3, #1
 80196b8:	e014      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196ba:	2380      	movs	r3, #128	; 0x80
 80196bc:	e012      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196be:	2340      	movs	r3, #64	; 0x40
 80196c0:	e010      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196c2:	2320      	movs	r3, #32
 80196c4:	e00e      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196c6:	2310      	movs	r3, #16
 80196c8:	e00c      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196ca:	230c      	movs	r3, #12
 80196cc:	e00a      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196ce:	230a      	movs	r3, #10
 80196d0:	e008      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196d2:	2308      	movs	r3, #8
 80196d4:	e006      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196d6:	2306      	movs	r3, #6
 80196d8:	e004      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196da:	2304      	movs	r3, #4
 80196dc:	e002      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196de:	2302      	movs	r3, #2
 80196e0:	e000      	b.n	80196e4 <UART_SetConfig+0x174c>
 80196e2:	2301      	movs	r3, #1
 80196e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80196e8:	005a      	lsls	r2, r3, #1
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	085b      	lsrs	r3, r3, #1
 80196f0:	441a      	add	r2, r3
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	685b      	ldr	r3, [r3, #4]
 80196f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80196fe:	e1f6      	b.n	8019aee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019700:	f107 030c 	add.w	r3, r7, #12
 8019704:	4618      	mov	r0, r3
 8019706:	f7fc ffc7 	bl	8016698 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801970a:	693a      	ldr	r2, [r7, #16]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019710:	2b00      	cmp	r3, #0
 8019712:	d044      	beq.n	801979e <UART_SetConfig+0x1806>
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019718:	2b01      	cmp	r3, #1
 801971a:	d03e      	beq.n	801979a <UART_SetConfig+0x1802>
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019720:	2b02      	cmp	r3, #2
 8019722:	d038      	beq.n	8019796 <UART_SetConfig+0x17fe>
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019728:	2b03      	cmp	r3, #3
 801972a:	d032      	beq.n	8019792 <UART_SetConfig+0x17fa>
 801972c:	687b      	ldr	r3, [r7, #4]
 801972e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019730:	2b04      	cmp	r3, #4
 8019732:	d02c      	beq.n	801978e <UART_SetConfig+0x17f6>
 8019734:	687b      	ldr	r3, [r7, #4]
 8019736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019738:	2b05      	cmp	r3, #5
 801973a:	d026      	beq.n	801978a <UART_SetConfig+0x17f2>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019740:	2b06      	cmp	r3, #6
 8019742:	d020      	beq.n	8019786 <UART_SetConfig+0x17ee>
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019748:	2b07      	cmp	r3, #7
 801974a:	d01a      	beq.n	8019782 <UART_SetConfig+0x17ea>
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019750:	2b08      	cmp	r3, #8
 8019752:	d014      	beq.n	801977e <UART_SetConfig+0x17e6>
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019758:	2b09      	cmp	r3, #9
 801975a:	d00e      	beq.n	801977a <UART_SetConfig+0x17e2>
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019760:	2b0a      	cmp	r3, #10
 8019762:	d008      	beq.n	8019776 <UART_SetConfig+0x17de>
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019768:	2b0b      	cmp	r3, #11
 801976a:	d102      	bne.n	8019772 <UART_SetConfig+0x17da>
 801976c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019770:	e016      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019772:	2301      	movs	r3, #1
 8019774:	e014      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019776:	2380      	movs	r3, #128	; 0x80
 8019778:	e012      	b.n	80197a0 <UART_SetConfig+0x1808>
 801977a:	2340      	movs	r3, #64	; 0x40
 801977c:	e010      	b.n	80197a0 <UART_SetConfig+0x1808>
 801977e:	2320      	movs	r3, #32
 8019780:	e00e      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019782:	2310      	movs	r3, #16
 8019784:	e00c      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019786:	230c      	movs	r3, #12
 8019788:	e00a      	b.n	80197a0 <UART_SetConfig+0x1808>
 801978a:	230a      	movs	r3, #10
 801978c:	e008      	b.n	80197a0 <UART_SetConfig+0x1808>
 801978e:	2308      	movs	r3, #8
 8019790:	e006      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019792:	2306      	movs	r3, #6
 8019794:	e004      	b.n	80197a0 <UART_SetConfig+0x1808>
 8019796:	2304      	movs	r3, #4
 8019798:	e002      	b.n	80197a0 <UART_SetConfig+0x1808>
 801979a:	2302      	movs	r3, #2
 801979c:	e000      	b.n	80197a0 <UART_SetConfig+0x1808>
 801979e:	2301      	movs	r3, #1
 80197a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80197a4:	005a      	lsls	r2, r3, #1
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	685b      	ldr	r3, [r3, #4]
 80197aa:	085b      	lsrs	r3, r3, #1
 80197ac:	441a      	add	r2, r3
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	685b      	ldr	r3, [r3, #4]
 80197b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80197b6:	b29b      	uxth	r3, r3
 80197b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80197ba:	e198      	b.n	8019aee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80197bc:	4b87      	ldr	r3, [pc, #540]	; (80199dc <UART_SetConfig+0x1a44>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	f003 0320 	and.w	r3, r3, #32
 80197c4:	2b00      	cmp	r3, #0
 80197c6:	d05e      	beq.n	8019886 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80197c8:	4b84      	ldr	r3, [pc, #528]	; (80199dc <UART_SetConfig+0x1a44>)
 80197ca:	681b      	ldr	r3, [r3, #0]
 80197cc:	08db      	lsrs	r3, r3, #3
 80197ce:	f003 0303 	and.w	r3, r3, #3
 80197d2:	4a83      	ldr	r2, [pc, #524]	; (80199e0 <UART_SetConfig+0x1a48>)
 80197d4:	40da      	lsrs	r2, r3
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d044      	beq.n	8019868 <UART_SetConfig+0x18d0>
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e2:	2b01      	cmp	r3, #1
 80197e4:	d03e      	beq.n	8019864 <UART_SetConfig+0x18cc>
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ea:	2b02      	cmp	r3, #2
 80197ec:	d038      	beq.n	8019860 <UART_SetConfig+0x18c8>
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197f2:	2b03      	cmp	r3, #3
 80197f4:	d032      	beq.n	801985c <UART_SetConfig+0x18c4>
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197fa:	2b04      	cmp	r3, #4
 80197fc:	d02c      	beq.n	8019858 <UART_SetConfig+0x18c0>
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019802:	2b05      	cmp	r3, #5
 8019804:	d026      	beq.n	8019854 <UART_SetConfig+0x18bc>
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801980a:	2b06      	cmp	r3, #6
 801980c:	d020      	beq.n	8019850 <UART_SetConfig+0x18b8>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019812:	2b07      	cmp	r3, #7
 8019814:	d01a      	beq.n	801984c <UART_SetConfig+0x18b4>
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801981a:	2b08      	cmp	r3, #8
 801981c:	d014      	beq.n	8019848 <UART_SetConfig+0x18b0>
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019822:	2b09      	cmp	r3, #9
 8019824:	d00e      	beq.n	8019844 <UART_SetConfig+0x18ac>
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801982a:	2b0a      	cmp	r3, #10
 801982c:	d008      	beq.n	8019840 <UART_SetConfig+0x18a8>
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019832:	2b0b      	cmp	r3, #11
 8019834:	d102      	bne.n	801983c <UART_SetConfig+0x18a4>
 8019836:	f44f 7380 	mov.w	r3, #256	; 0x100
 801983a:	e016      	b.n	801986a <UART_SetConfig+0x18d2>
 801983c:	2301      	movs	r3, #1
 801983e:	e014      	b.n	801986a <UART_SetConfig+0x18d2>
 8019840:	2380      	movs	r3, #128	; 0x80
 8019842:	e012      	b.n	801986a <UART_SetConfig+0x18d2>
 8019844:	2340      	movs	r3, #64	; 0x40
 8019846:	e010      	b.n	801986a <UART_SetConfig+0x18d2>
 8019848:	2320      	movs	r3, #32
 801984a:	e00e      	b.n	801986a <UART_SetConfig+0x18d2>
 801984c:	2310      	movs	r3, #16
 801984e:	e00c      	b.n	801986a <UART_SetConfig+0x18d2>
 8019850:	230c      	movs	r3, #12
 8019852:	e00a      	b.n	801986a <UART_SetConfig+0x18d2>
 8019854:	230a      	movs	r3, #10
 8019856:	e008      	b.n	801986a <UART_SetConfig+0x18d2>
 8019858:	2308      	movs	r3, #8
 801985a:	e006      	b.n	801986a <UART_SetConfig+0x18d2>
 801985c:	2306      	movs	r3, #6
 801985e:	e004      	b.n	801986a <UART_SetConfig+0x18d2>
 8019860:	2304      	movs	r3, #4
 8019862:	e002      	b.n	801986a <UART_SetConfig+0x18d2>
 8019864:	2302      	movs	r3, #2
 8019866:	e000      	b.n	801986a <UART_SetConfig+0x18d2>
 8019868:	2301      	movs	r3, #1
 801986a:	fbb2 f3f3 	udiv	r3, r2, r3
 801986e:	005a      	lsls	r2, r3, #1
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	685b      	ldr	r3, [r3, #4]
 8019874:	085b      	lsrs	r3, r3, #1
 8019876:	441a      	add	r2, r3
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	685b      	ldr	r3, [r3, #4]
 801987c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019880:	b29b      	uxth	r3, r3
 8019882:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8019884:	e133      	b.n	8019aee <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801988a:	2b00      	cmp	r3, #0
 801988c:	d043      	beq.n	8019916 <UART_SetConfig+0x197e>
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019892:	2b01      	cmp	r3, #1
 8019894:	d03d      	beq.n	8019912 <UART_SetConfig+0x197a>
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801989a:	2b02      	cmp	r3, #2
 801989c:	d037      	beq.n	801990e <UART_SetConfig+0x1976>
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198a2:	2b03      	cmp	r3, #3
 80198a4:	d031      	beq.n	801990a <UART_SetConfig+0x1972>
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198aa:	2b04      	cmp	r3, #4
 80198ac:	d02b      	beq.n	8019906 <UART_SetConfig+0x196e>
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198b2:	2b05      	cmp	r3, #5
 80198b4:	d025      	beq.n	8019902 <UART_SetConfig+0x196a>
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ba:	2b06      	cmp	r3, #6
 80198bc:	d01f      	beq.n	80198fe <UART_SetConfig+0x1966>
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198c2:	2b07      	cmp	r3, #7
 80198c4:	d019      	beq.n	80198fa <UART_SetConfig+0x1962>
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198ca:	2b08      	cmp	r3, #8
 80198cc:	d013      	beq.n	80198f6 <UART_SetConfig+0x195e>
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198d2:	2b09      	cmp	r3, #9
 80198d4:	d00d      	beq.n	80198f2 <UART_SetConfig+0x195a>
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198da:	2b0a      	cmp	r3, #10
 80198dc:	d007      	beq.n	80198ee <UART_SetConfig+0x1956>
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80198e2:	2b0b      	cmp	r3, #11
 80198e4:	d101      	bne.n	80198ea <UART_SetConfig+0x1952>
 80198e6:	4b3f      	ldr	r3, [pc, #252]	; (80199e4 <UART_SetConfig+0x1a4c>)
 80198e8:	e016      	b.n	8019918 <UART_SetConfig+0x1980>
 80198ea:	4b3f      	ldr	r3, [pc, #252]	; (80199e8 <UART_SetConfig+0x1a50>)
 80198ec:	e014      	b.n	8019918 <UART_SetConfig+0x1980>
 80198ee:	4b3f      	ldr	r3, [pc, #252]	; (80199ec <UART_SetConfig+0x1a54>)
 80198f0:	e012      	b.n	8019918 <UART_SetConfig+0x1980>
 80198f2:	4b3f      	ldr	r3, [pc, #252]	; (80199f0 <UART_SetConfig+0x1a58>)
 80198f4:	e010      	b.n	8019918 <UART_SetConfig+0x1980>
 80198f6:	4b3f      	ldr	r3, [pc, #252]	; (80199f4 <UART_SetConfig+0x1a5c>)
 80198f8:	e00e      	b.n	8019918 <UART_SetConfig+0x1980>
 80198fa:	4b3f      	ldr	r3, [pc, #252]	; (80199f8 <UART_SetConfig+0x1a60>)
 80198fc:	e00c      	b.n	8019918 <UART_SetConfig+0x1980>
 80198fe:	4b3f      	ldr	r3, [pc, #252]	; (80199fc <UART_SetConfig+0x1a64>)
 8019900:	e00a      	b.n	8019918 <UART_SetConfig+0x1980>
 8019902:	4b3f      	ldr	r3, [pc, #252]	; (8019a00 <UART_SetConfig+0x1a68>)
 8019904:	e008      	b.n	8019918 <UART_SetConfig+0x1980>
 8019906:	4b3f      	ldr	r3, [pc, #252]	; (8019a04 <UART_SetConfig+0x1a6c>)
 8019908:	e006      	b.n	8019918 <UART_SetConfig+0x1980>
 801990a:	4b3f      	ldr	r3, [pc, #252]	; (8019a08 <UART_SetConfig+0x1a70>)
 801990c:	e004      	b.n	8019918 <UART_SetConfig+0x1980>
 801990e:	4b3f      	ldr	r3, [pc, #252]	; (8019a0c <UART_SetConfig+0x1a74>)
 8019910:	e002      	b.n	8019918 <UART_SetConfig+0x1980>
 8019912:	4b33      	ldr	r3, [pc, #204]	; (80199e0 <UART_SetConfig+0x1a48>)
 8019914:	e000      	b.n	8019918 <UART_SetConfig+0x1980>
 8019916:	4b34      	ldr	r3, [pc, #208]	; (80199e8 <UART_SetConfig+0x1a50>)
 8019918:	687a      	ldr	r2, [r7, #4]
 801991a:	6852      	ldr	r2, [r2, #4]
 801991c:	0852      	lsrs	r2, r2, #1
 801991e:	441a      	add	r2, r3
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	685b      	ldr	r3, [r3, #4]
 8019924:	fbb2 f3f3 	udiv	r3, r2, r3
 8019928:	b29b      	uxth	r3, r3
 801992a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801992c:	e0df      	b.n	8019aee <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019932:	2b00      	cmp	r3, #0
 8019934:	d045      	beq.n	80199c2 <UART_SetConfig+0x1a2a>
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993a:	2b01      	cmp	r3, #1
 801993c:	d03f      	beq.n	80199be <UART_SetConfig+0x1a26>
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019942:	2b02      	cmp	r3, #2
 8019944:	d039      	beq.n	80199ba <UART_SetConfig+0x1a22>
 8019946:	687b      	ldr	r3, [r7, #4]
 8019948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801994a:	2b03      	cmp	r3, #3
 801994c:	d033      	beq.n	80199b6 <UART_SetConfig+0x1a1e>
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019952:	2b04      	cmp	r3, #4
 8019954:	d02d      	beq.n	80199b2 <UART_SetConfig+0x1a1a>
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801995a:	2b05      	cmp	r3, #5
 801995c:	d027      	beq.n	80199ae <UART_SetConfig+0x1a16>
 801995e:	687b      	ldr	r3, [r7, #4]
 8019960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019962:	2b06      	cmp	r3, #6
 8019964:	d021      	beq.n	80199aa <UART_SetConfig+0x1a12>
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801996a:	2b07      	cmp	r3, #7
 801996c:	d01b      	beq.n	80199a6 <UART_SetConfig+0x1a0e>
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019972:	2b08      	cmp	r3, #8
 8019974:	d015      	beq.n	80199a2 <UART_SetConfig+0x1a0a>
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801997a:	2b09      	cmp	r3, #9
 801997c:	d00f      	beq.n	801999e <UART_SetConfig+0x1a06>
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019982:	2b0a      	cmp	r3, #10
 8019984:	d008      	beq.n	8019998 <UART_SetConfig+0x1a00>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801998a:	2b0b      	cmp	r3, #11
 801998c:	d102      	bne.n	8019994 <UART_SetConfig+0x19fc>
 801998e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019992:	e017      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 8019994:	4b18      	ldr	r3, [pc, #96]	; (80199f8 <UART_SetConfig+0x1a60>)
 8019996:	e015      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 8019998:	f24f 4324 	movw	r3, #62500	; 0xf424
 801999c:	e012      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 801999e:	4b1c      	ldr	r3, [pc, #112]	; (8019a10 <UART_SetConfig+0x1a78>)
 80199a0:	e010      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199a2:	4b1c      	ldr	r3, [pc, #112]	; (8019a14 <UART_SetConfig+0x1a7c>)
 80199a4:	e00e      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199a6:	4b0f      	ldr	r3, [pc, #60]	; (80199e4 <UART_SetConfig+0x1a4c>)
 80199a8:	e00c      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199aa:	4b1b      	ldr	r3, [pc, #108]	; (8019a18 <UART_SetConfig+0x1a80>)
 80199ac:	e00a      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199ae:	4b1b      	ldr	r3, [pc, #108]	; (8019a1c <UART_SetConfig+0x1a84>)
 80199b0:	e008      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199b2:	4b0e      	ldr	r3, [pc, #56]	; (80199ec <UART_SetConfig+0x1a54>)
 80199b4:	e006      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199b6:	4b1a      	ldr	r3, [pc, #104]	; (8019a20 <UART_SetConfig+0x1a88>)
 80199b8:	e004      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199ba:	4b0d      	ldr	r3, [pc, #52]	; (80199f0 <UART_SetConfig+0x1a58>)
 80199bc:	e002      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199be:	4b0d      	ldr	r3, [pc, #52]	; (80199f4 <UART_SetConfig+0x1a5c>)
 80199c0:	e000      	b.n	80199c4 <UART_SetConfig+0x1a2c>
 80199c2:	4b0d      	ldr	r3, [pc, #52]	; (80199f8 <UART_SetConfig+0x1a60>)
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	6852      	ldr	r2, [r2, #4]
 80199c8:	0852      	lsrs	r2, r2, #1
 80199ca:	441a      	add	r2, r3
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	685b      	ldr	r3, [r3, #4]
 80199d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80199d4:	b29b      	uxth	r3, r3
 80199d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80199d8:	e089      	b.n	8019aee <UART_SetConfig+0x1b56>
 80199da:	bf00      	nop
 80199dc:	58024400 	.word	0x58024400
 80199e0:	03d09000 	.word	0x03d09000
 80199e4:	0007a120 	.word	0x0007a120
 80199e8:	07a12000 	.word	0x07a12000
 80199ec:	000f4240 	.word	0x000f4240
 80199f0:	001e8480 	.word	0x001e8480
 80199f4:	003d0900 	.word	0x003d0900
 80199f8:	007a1200 	.word	0x007a1200
 80199fc:	00a2c2aa 	.word	0x00a2c2aa
 8019a00:	00c35000 	.word	0x00c35000
 8019a04:	00f42400 	.word	0x00f42400
 8019a08:	01458554 	.word	0x01458554
 8019a0c:	01e84800 	.word	0x01e84800
 8019a10:	0001e848 	.word	0x0001e848
 8019a14:	0003d090 	.word	0x0003d090
 8019a18:	000a2c2a 	.word	0x000a2c2a
 8019a1c:	000c3500 	.word	0x000c3500
 8019a20:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a28:	2b00      	cmp	r3, #0
 8019a2a:	d04f      	beq.n	8019acc <UART_SetConfig+0x1b34>
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a30:	2b01      	cmp	r3, #1
 8019a32:	d048      	beq.n	8019ac6 <UART_SetConfig+0x1b2e>
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a38:	2b02      	cmp	r3, #2
 8019a3a:	d041      	beq.n	8019ac0 <UART_SetConfig+0x1b28>
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a40:	2b03      	cmp	r3, #3
 8019a42:	d03a      	beq.n	8019aba <UART_SetConfig+0x1b22>
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a48:	2b04      	cmp	r3, #4
 8019a4a:	d033      	beq.n	8019ab4 <UART_SetConfig+0x1b1c>
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a50:	2b05      	cmp	r3, #5
 8019a52:	d02c      	beq.n	8019aae <UART_SetConfig+0x1b16>
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a58:	2b06      	cmp	r3, #6
 8019a5a:	d025      	beq.n	8019aa8 <UART_SetConfig+0x1b10>
 8019a5c:	687b      	ldr	r3, [r7, #4]
 8019a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a60:	2b07      	cmp	r3, #7
 8019a62:	d01e      	beq.n	8019aa2 <UART_SetConfig+0x1b0a>
 8019a64:	687b      	ldr	r3, [r7, #4]
 8019a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a68:	2b08      	cmp	r3, #8
 8019a6a:	d017      	beq.n	8019a9c <UART_SetConfig+0x1b04>
 8019a6c:	687b      	ldr	r3, [r7, #4]
 8019a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a70:	2b09      	cmp	r3, #9
 8019a72:	d010      	beq.n	8019a96 <UART_SetConfig+0x1afe>
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a78:	2b0a      	cmp	r3, #10
 8019a7a:	d009      	beq.n	8019a90 <UART_SetConfig+0x1af8>
 8019a7c:	687b      	ldr	r3, [r7, #4]
 8019a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a80:	2b0b      	cmp	r3, #11
 8019a82:	d102      	bne.n	8019a8a <UART_SetConfig+0x1af2>
 8019a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019a88:	e022      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019a8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019a8e:	e01f      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019a94:	e01c      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019a9a:	e019      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019a9c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019aa0:	e016      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019aa2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019aa6:	e013      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019aa8:	f241 5354 	movw	r3, #5460	; 0x1554
 8019aac:	e010      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019aae:	f641 1398 	movw	r3, #6552	; 0x1998
 8019ab2:	e00d      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019ab4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019ab8:	e00a      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019aba:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8019abe:	e007      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019ac0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019ac4:	e004      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019ac6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019aca:	e001      	b.n	8019ad0 <UART_SetConfig+0x1b38>
 8019acc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019ad0:	687a      	ldr	r2, [r7, #4]
 8019ad2:	6852      	ldr	r2, [r2, #4]
 8019ad4:	0852      	lsrs	r2, r2, #1
 8019ad6:	441a      	add	r2, r3
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	685b      	ldr	r3, [r3, #4]
 8019adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8019ae0:	b29b      	uxth	r3, r3
 8019ae2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019ae4:	e003      	b.n	8019aee <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8019ae6:	2301      	movs	r3, #1
 8019ae8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8019aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019aee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019af0:	2b0f      	cmp	r3, #15
 8019af2:	d916      	bls.n	8019b22 <UART_SetConfig+0x1b8a>
 8019af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019afa:	d212      	bcs.n	8019b22 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019afe:	b29b      	uxth	r3, r3
 8019b00:	f023 030f 	bic.w	r3, r3, #15
 8019b04:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019b08:	085b      	lsrs	r3, r3, #1
 8019b0a:	b29b      	uxth	r3, r3
 8019b0c:	f003 0307 	and.w	r3, r3, #7
 8019b10:	b29a      	uxth	r2, r3
 8019b12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019b14:	4313      	orrs	r3, r2
 8019b16:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	681b      	ldr	r3, [r3, #0]
 8019b1c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019b1e:	60da      	str	r2, [r3, #12]
 8019b20:	e3a3      	b.n	801a26a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8019b22:	2301      	movs	r3, #1
 8019b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019b28:	e39f      	b.n	801a26a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8019b2a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019b2e:	2b40      	cmp	r3, #64	; 0x40
 8019b30:	f200 8388 	bhi.w	801a244 <UART_SetConfig+0x22ac>
 8019b34:	a201      	add	r2, pc, #4	; (adr r2, 8019b3c <UART_SetConfig+0x1ba4>)
 8019b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b3a:	bf00      	nop
 8019b3c:	08019c41 	.word	0x08019c41
 8019b40:	08019cf7 	.word	0x08019cf7
 8019b44:	0801a245 	.word	0x0801a245
 8019b48:	0801a245 	.word	0x0801a245
 8019b4c:	08019dad 	.word	0x08019dad
 8019b50:	0801a245 	.word	0x0801a245
 8019b54:	0801a245 	.word	0x0801a245
 8019b58:	0801a245 	.word	0x0801a245
 8019b5c:	08019e67 	.word	0x08019e67
 8019b60:	0801a245 	.word	0x0801a245
 8019b64:	0801a245 	.word	0x0801a245
 8019b68:	0801a245 	.word	0x0801a245
 8019b6c:	0801a245 	.word	0x0801a245
 8019b70:	0801a245 	.word	0x0801a245
 8019b74:	0801a245 	.word	0x0801a245
 8019b78:	0801a245 	.word	0x0801a245
 8019b7c:	08019f21 	.word	0x08019f21
 8019b80:	0801a245 	.word	0x0801a245
 8019b84:	0801a245 	.word	0x0801a245
 8019b88:	0801a245 	.word	0x0801a245
 8019b8c:	0801a245 	.word	0x0801a245
 8019b90:	0801a245 	.word	0x0801a245
 8019b94:	0801a245 	.word	0x0801a245
 8019b98:	0801a245 	.word	0x0801a245
 8019b9c:	0801a245 	.word	0x0801a245
 8019ba0:	0801a245 	.word	0x0801a245
 8019ba4:	0801a245 	.word	0x0801a245
 8019ba8:	0801a245 	.word	0x0801a245
 8019bac:	0801a245 	.word	0x0801a245
 8019bb0:	0801a245 	.word	0x0801a245
 8019bb4:	0801a245 	.word	0x0801a245
 8019bb8:	0801a245 	.word	0x0801a245
 8019bbc:	0801a091 	.word	0x0801a091
 8019bc0:	0801a245 	.word	0x0801a245
 8019bc4:	0801a245 	.word	0x0801a245
 8019bc8:	0801a245 	.word	0x0801a245
 8019bcc:	0801a245 	.word	0x0801a245
 8019bd0:	0801a245 	.word	0x0801a245
 8019bd4:	0801a245 	.word	0x0801a245
 8019bd8:	0801a245 	.word	0x0801a245
 8019bdc:	0801a245 	.word	0x0801a245
 8019be0:	0801a245 	.word	0x0801a245
 8019be4:	0801a245 	.word	0x0801a245
 8019be8:	0801a245 	.word	0x0801a245
 8019bec:	0801a245 	.word	0x0801a245
 8019bf0:	0801a245 	.word	0x0801a245
 8019bf4:	0801a245 	.word	0x0801a245
 8019bf8:	0801a245 	.word	0x0801a245
 8019bfc:	0801a245 	.word	0x0801a245
 8019c00:	0801a245 	.word	0x0801a245
 8019c04:	0801a245 	.word	0x0801a245
 8019c08:	0801a245 	.word	0x0801a245
 8019c0c:	0801a245 	.word	0x0801a245
 8019c10:	0801a245 	.word	0x0801a245
 8019c14:	0801a245 	.word	0x0801a245
 8019c18:	0801a245 	.word	0x0801a245
 8019c1c:	0801a245 	.word	0x0801a245
 8019c20:	0801a245 	.word	0x0801a245
 8019c24:	0801a245 	.word	0x0801a245
 8019c28:	0801a245 	.word	0x0801a245
 8019c2c:	0801a245 	.word	0x0801a245
 8019c30:	0801a245 	.word	0x0801a245
 8019c34:	0801a245 	.word	0x0801a245
 8019c38:	0801a245 	.word	0x0801a245
 8019c3c:	0801a185 	.word	0x0801a185
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019c40:	f7fb fcbe 	bl	80155c0 <HAL_RCC_GetPCLK1Freq>
 8019c44:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c4a:	2b00      	cmp	r3, #0
 8019c4c:	d044      	beq.n	8019cd8 <UART_SetConfig+0x1d40>
 8019c4e:	687b      	ldr	r3, [r7, #4]
 8019c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c52:	2b01      	cmp	r3, #1
 8019c54:	d03e      	beq.n	8019cd4 <UART_SetConfig+0x1d3c>
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c5a:	2b02      	cmp	r3, #2
 8019c5c:	d038      	beq.n	8019cd0 <UART_SetConfig+0x1d38>
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c62:	2b03      	cmp	r3, #3
 8019c64:	d032      	beq.n	8019ccc <UART_SetConfig+0x1d34>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c6a:	2b04      	cmp	r3, #4
 8019c6c:	d02c      	beq.n	8019cc8 <UART_SetConfig+0x1d30>
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c72:	2b05      	cmp	r3, #5
 8019c74:	d026      	beq.n	8019cc4 <UART_SetConfig+0x1d2c>
 8019c76:	687b      	ldr	r3, [r7, #4]
 8019c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c7a:	2b06      	cmp	r3, #6
 8019c7c:	d020      	beq.n	8019cc0 <UART_SetConfig+0x1d28>
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c82:	2b07      	cmp	r3, #7
 8019c84:	d01a      	beq.n	8019cbc <UART_SetConfig+0x1d24>
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c8a:	2b08      	cmp	r3, #8
 8019c8c:	d014      	beq.n	8019cb8 <UART_SetConfig+0x1d20>
 8019c8e:	687b      	ldr	r3, [r7, #4]
 8019c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c92:	2b09      	cmp	r3, #9
 8019c94:	d00e      	beq.n	8019cb4 <UART_SetConfig+0x1d1c>
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c9a:	2b0a      	cmp	r3, #10
 8019c9c:	d008      	beq.n	8019cb0 <UART_SetConfig+0x1d18>
 8019c9e:	687b      	ldr	r3, [r7, #4]
 8019ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ca2:	2b0b      	cmp	r3, #11
 8019ca4:	d102      	bne.n	8019cac <UART_SetConfig+0x1d14>
 8019ca6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019caa:	e016      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cac:	2301      	movs	r3, #1
 8019cae:	e014      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cb0:	2380      	movs	r3, #128	; 0x80
 8019cb2:	e012      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cb4:	2340      	movs	r3, #64	; 0x40
 8019cb6:	e010      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cb8:	2320      	movs	r3, #32
 8019cba:	e00e      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cbc:	2310      	movs	r3, #16
 8019cbe:	e00c      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cc0:	230c      	movs	r3, #12
 8019cc2:	e00a      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cc4:	230a      	movs	r3, #10
 8019cc6:	e008      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cc8:	2308      	movs	r3, #8
 8019cca:	e006      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019ccc:	2306      	movs	r3, #6
 8019cce:	e004      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cd0:	2304      	movs	r3, #4
 8019cd2:	e002      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cd4:	2302      	movs	r3, #2
 8019cd6:	e000      	b.n	8019cda <UART_SetConfig+0x1d42>
 8019cd8:	2301      	movs	r3, #1
 8019cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8019ce0:	687b      	ldr	r3, [r7, #4]
 8019ce2:	685b      	ldr	r3, [r3, #4]
 8019ce4:	085b      	lsrs	r3, r3, #1
 8019ce6:	441a      	add	r2, r3
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	685b      	ldr	r3, [r3, #4]
 8019cec:	fbb2 f3f3 	udiv	r3, r2, r3
 8019cf0:	b29b      	uxth	r3, r3
 8019cf2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019cf4:	e2aa      	b.n	801a24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019cf6:	f7fb fc79 	bl	80155ec <HAL_RCC_GetPCLK2Freq>
 8019cfa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d00:	2b00      	cmp	r3, #0
 8019d02:	d044      	beq.n	8019d8e <UART_SetConfig+0x1df6>
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d08:	2b01      	cmp	r3, #1
 8019d0a:	d03e      	beq.n	8019d8a <UART_SetConfig+0x1df2>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d10:	2b02      	cmp	r3, #2
 8019d12:	d038      	beq.n	8019d86 <UART_SetConfig+0x1dee>
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d18:	2b03      	cmp	r3, #3
 8019d1a:	d032      	beq.n	8019d82 <UART_SetConfig+0x1dea>
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d20:	2b04      	cmp	r3, #4
 8019d22:	d02c      	beq.n	8019d7e <UART_SetConfig+0x1de6>
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d28:	2b05      	cmp	r3, #5
 8019d2a:	d026      	beq.n	8019d7a <UART_SetConfig+0x1de2>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d30:	2b06      	cmp	r3, #6
 8019d32:	d020      	beq.n	8019d76 <UART_SetConfig+0x1dde>
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d38:	2b07      	cmp	r3, #7
 8019d3a:	d01a      	beq.n	8019d72 <UART_SetConfig+0x1dda>
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d40:	2b08      	cmp	r3, #8
 8019d42:	d014      	beq.n	8019d6e <UART_SetConfig+0x1dd6>
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d48:	2b09      	cmp	r3, #9
 8019d4a:	d00e      	beq.n	8019d6a <UART_SetConfig+0x1dd2>
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d50:	2b0a      	cmp	r3, #10
 8019d52:	d008      	beq.n	8019d66 <UART_SetConfig+0x1dce>
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d58:	2b0b      	cmp	r3, #11
 8019d5a:	d102      	bne.n	8019d62 <UART_SetConfig+0x1dca>
 8019d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d60:	e016      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d62:	2301      	movs	r3, #1
 8019d64:	e014      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d66:	2380      	movs	r3, #128	; 0x80
 8019d68:	e012      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d6a:	2340      	movs	r3, #64	; 0x40
 8019d6c:	e010      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d6e:	2320      	movs	r3, #32
 8019d70:	e00e      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d72:	2310      	movs	r3, #16
 8019d74:	e00c      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d76:	230c      	movs	r3, #12
 8019d78:	e00a      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d7a:	230a      	movs	r3, #10
 8019d7c:	e008      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d7e:	2308      	movs	r3, #8
 8019d80:	e006      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d82:	2306      	movs	r3, #6
 8019d84:	e004      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d86:	2304      	movs	r3, #4
 8019d88:	e002      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d8a:	2302      	movs	r3, #2
 8019d8c:	e000      	b.n	8019d90 <UART_SetConfig+0x1df8>
 8019d8e:	2301      	movs	r3, #1
 8019d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019d92:	fbb2 f2f3 	udiv	r2, r2, r3
 8019d96:	687b      	ldr	r3, [r7, #4]
 8019d98:	685b      	ldr	r3, [r3, #4]
 8019d9a:	085b      	lsrs	r3, r3, #1
 8019d9c:	441a      	add	r2, r3
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	685b      	ldr	r3, [r3, #4]
 8019da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8019da6:	b29b      	uxth	r3, r3
 8019da8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019daa:	e24f      	b.n	801a24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8019dac:	f107 0318 	add.w	r3, r7, #24
 8019db0:	4618      	mov	r0, r3
 8019db2:	f7fc fb25 	bl	8016400 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019db6:	69fa      	ldr	r2, [r7, #28]
 8019db8:	687b      	ldr	r3, [r7, #4]
 8019dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dbc:	2b00      	cmp	r3, #0
 8019dbe:	d044      	beq.n	8019e4a <UART_SetConfig+0x1eb2>
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dc4:	2b01      	cmp	r3, #1
 8019dc6:	d03e      	beq.n	8019e46 <UART_SetConfig+0x1eae>
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dcc:	2b02      	cmp	r3, #2
 8019dce:	d038      	beq.n	8019e42 <UART_SetConfig+0x1eaa>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dd4:	2b03      	cmp	r3, #3
 8019dd6:	d032      	beq.n	8019e3e <UART_SetConfig+0x1ea6>
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ddc:	2b04      	cmp	r3, #4
 8019dde:	d02c      	beq.n	8019e3a <UART_SetConfig+0x1ea2>
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019de4:	2b05      	cmp	r3, #5
 8019de6:	d026      	beq.n	8019e36 <UART_SetConfig+0x1e9e>
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dec:	2b06      	cmp	r3, #6
 8019dee:	d020      	beq.n	8019e32 <UART_SetConfig+0x1e9a>
 8019df0:	687b      	ldr	r3, [r7, #4]
 8019df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019df4:	2b07      	cmp	r3, #7
 8019df6:	d01a      	beq.n	8019e2e <UART_SetConfig+0x1e96>
 8019df8:	687b      	ldr	r3, [r7, #4]
 8019dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019dfc:	2b08      	cmp	r3, #8
 8019dfe:	d014      	beq.n	8019e2a <UART_SetConfig+0x1e92>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e04:	2b09      	cmp	r3, #9
 8019e06:	d00e      	beq.n	8019e26 <UART_SetConfig+0x1e8e>
 8019e08:	687b      	ldr	r3, [r7, #4]
 8019e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e0c:	2b0a      	cmp	r3, #10
 8019e0e:	d008      	beq.n	8019e22 <UART_SetConfig+0x1e8a>
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e14:	2b0b      	cmp	r3, #11
 8019e16:	d102      	bne.n	8019e1e <UART_SetConfig+0x1e86>
 8019e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019e1c:	e016      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e1e:	2301      	movs	r3, #1
 8019e20:	e014      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e22:	2380      	movs	r3, #128	; 0x80
 8019e24:	e012      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e26:	2340      	movs	r3, #64	; 0x40
 8019e28:	e010      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e2a:	2320      	movs	r3, #32
 8019e2c:	e00e      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e2e:	2310      	movs	r3, #16
 8019e30:	e00c      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e32:	230c      	movs	r3, #12
 8019e34:	e00a      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e36:	230a      	movs	r3, #10
 8019e38:	e008      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e3a:	2308      	movs	r3, #8
 8019e3c:	e006      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e3e:	2306      	movs	r3, #6
 8019e40:	e004      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e42:	2304      	movs	r3, #4
 8019e44:	e002      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e46:	2302      	movs	r3, #2
 8019e48:	e000      	b.n	8019e4c <UART_SetConfig+0x1eb4>
 8019e4a:	2301      	movs	r3, #1
 8019e4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	685b      	ldr	r3, [r3, #4]
 8019e54:	085b      	lsrs	r3, r3, #1
 8019e56:	441a      	add	r2, r3
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	685b      	ldr	r3, [r3, #4]
 8019e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019e60:	b29b      	uxth	r3, r3
 8019e62:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019e64:	e1f2      	b.n	801a24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019e66:	f107 030c 	add.w	r3, r7, #12
 8019e6a:	4618      	mov	r0, r3
 8019e6c:	f7fc fc14 	bl	8016698 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019e70:	693a      	ldr	r2, [r7, #16]
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e76:	2b00      	cmp	r3, #0
 8019e78:	d044      	beq.n	8019f04 <UART_SetConfig+0x1f6c>
 8019e7a:	687b      	ldr	r3, [r7, #4]
 8019e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e7e:	2b01      	cmp	r3, #1
 8019e80:	d03e      	beq.n	8019f00 <UART_SetConfig+0x1f68>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e86:	2b02      	cmp	r3, #2
 8019e88:	d038      	beq.n	8019efc <UART_SetConfig+0x1f64>
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e8e:	2b03      	cmp	r3, #3
 8019e90:	d032      	beq.n	8019ef8 <UART_SetConfig+0x1f60>
 8019e92:	687b      	ldr	r3, [r7, #4]
 8019e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e96:	2b04      	cmp	r3, #4
 8019e98:	d02c      	beq.n	8019ef4 <UART_SetConfig+0x1f5c>
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e9e:	2b05      	cmp	r3, #5
 8019ea0:	d026      	beq.n	8019ef0 <UART_SetConfig+0x1f58>
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ea6:	2b06      	cmp	r3, #6
 8019ea8:	d020      	beq.n	8019eec <UART_SetConfig+0x1f54>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eae:	2b07      	cmp	r3, #7
 8019eb0:	d01a      	beq.n	8019ee8 <UART_SetConfig+0x1f50>
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019eb6:	2b08      	cmp	r3, #8
 8019eb8:	d014      	beq.n	8019ee4 <UART_SetConfig+0x1f4c>
 8019eba:	687b      	ldr	r3, [r7, #4]
 8019ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ebe:	2b09      	cmp	r3, #9
 8019ec0:	d00e      	beq.n	8019ee0 <UART_SetConfig+0x1f48>
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ec6:	2b0a      	cmp	r3, #10
 8019ec8:	d008      	beq.n	8019edc <UART_SetConfig+0x1f44>
 8019eca:	687b      	ldr	r3, [r7, #4]
 8019ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ece:	2b0b      	cmp	r3, #11
 8019ed0:	d102      	bne.n	8019ed8 <UART_SetConfig+0x1f40>
 8019ed2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019ed6:	e016      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ed8:	2301      	movs	r3, #1
 8019eda:	e014      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019edc:	2380      	movs	r3, #128	; 0x80
 8019ede:	e012      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ee0:	2340      	movs	r3, #64	; 0x40
 8019ee2:	e010      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ee4:	2320      	movs	r3, #32
 8019ee6:	e00e      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ee8:	2310      	movs	r3, #16
 8019eea:	e00c      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019eec:	230c      	movs	r3, #12
 8019eee:	e00a      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ef0:	230a      	movs	r3, #10
 8019ef2:	e008      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ef4:	2308      	movs	r3, #8
 8019ef6:	e006      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019ef8:	2306      	movs	r3, #6
 8019efa:	e004      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019efc:	2304      	movs	r3, #4
 8019efe:	e002      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019f00:	2302      	movs	r3, #2
 8019f02:	e000      	b.n	8019f06 <UART_SetConfig+0x1f6e>
 8019f04:	2301      	movs	r3, #1
 8019f06:	fbb2 f2f3 	udiv	r2, r2, r3
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	685b      	ldr	r3, [r3, #4]
 8019f0e:	085b      	lsrs	r3, r3, #1
 8019f10:	441a      	add	r2, r3
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	685b      	ldr	r3, [r3, #4]
 8019f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8019f1a:	b29b      	uxth	r3, r3
 8019f1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019f1e:	e195      	b.n	801a24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019f20:	4b87      	ldr	r3, [pc, #540]	; (801a140 <UART_SetConfig+0x21a8>)
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	f003 0320 	and.w	r3, r3, #32
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d05d      	beq.n	8019fe8 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019f2c:	4b84      	ldr	r3, [pc, #528]	; (801a140 <UART_SetConfig+0x21a8>)
 8019f2e:	681b      	ldr	r3, [r3, #0]
 8019f30:	08db      	lsrs	r3, r3, #3
 8019f32:	f003 0303 	and.w	r3, r3, #3
 8019f36:	4a83      	ldr	r2, [pc, #524]	; (801a144 <UART_SetConfig+0x21ac>)
 8019f38:	40da      	lsrs	r2, r3
 8019f3a:	687b      	ldr	r3, [r7, #4]
 8019f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	d044      	beq.n	8019fcc <UART_SetConfig+0x2034>
 8019f42:	687b      	ldr	r3, [r7, #4]
 8019f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f46:	2b01      	cmp	r3, #1
 8019f48:	d03e      	beq.n	8019fc8 <UART_SetConfig+0x2030>
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4e:	2b02      	cmp	r3, #2
 8019f50:	d038      	beq.n	8019fc4 <UART_SetConfig+0x202c>
 8019f52:	687b      	ldr	r3, [r7, #4]
 8019f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f56:	2b03      	cmp	r3, #3
 8019f58:	d032      	beq.n	8019fc0 <UART_SetConfig+0x2028>
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f5e:	2b04      	cmp	r3, #4
 8019f60:	d02c      	beq.n	8019fbc <UART_SetConfig+0x2024>
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f66:	2b05      	cmp	r3, #5
 8019f68:	d026      	beq.n	8019fb8 <UART_SetConfig+0x2020>
 8019f6a:	687b      	ldr	r3, [r7, #4]
 8019f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f6e:	2b06      	cmp	r3, #6
 8019f70:	d020      	beq.n	8019fb4 <UART_SetConfig+0x201c>
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f76:	2b07      	cmp	r3, #7
 8019f78:	d01a      	beq.n	8019fb0 <UART_SetConfig+0x2018>
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f7e:	2b08      	cmp	r3, #8
 8019f80:	d014      	beq.n	8019fac <UART_SetConfig+0x2014>
 8019f82:	687b      	ldr	r3, [r7, #4]
 8019f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f86:	2b09      	cmp	r3, #9
 8019f88:	d00e      	beq.n	8019fa8 <UART_SetConfig+0x2010>
 8019f8a:	687b      	ldr	r3, [r7, #4]
 8019f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f8e:	2b0a      	cmp	r3, #10
 8019f90:	d008      	beq.n	8019fa4 <UART_SetConfig+0x200c>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f96:	2b0b      	cmp	r3, #11
 8019f98:	d102      	bne.n	8019fa0 <UART_SetConfig+0x2008>
 8019f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019f9e:	e016      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fa0:	2301      	movs	r3, #1
 8019fa2:	e014      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fa4:	2380      	movs	r3, #128	; 0x80
 8019fa6:	e012      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fa8:	2340      	movs	r3, #64	; 0x40
 8019faa:	e010      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fac:	2320      	movs	r3, #32
 8019fae:	e00e      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fb0:	2310      	movs	r3, #16
 8019fb2:	e00c      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fb4:	230c      	movs	r3, #12
 8019fb6:	e00a      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fb8:	230a      	movs	r3, #10
 8019fba:	e008      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fbc:	2308      	movs	r3, #8
 8019fbe:	e006      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fc0:	2306      	movs	r3, #6
 8019fc2:	e004      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fc4:	2304      	movs	r3, #4
 8019fc6:	e002      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fc8:	2302      	movs	r3, #2
 8019fca:	e000      	b.n	8019fce <UART_SetConfig+0x2036>
 8019fcc:	2301      	movs	r3, #1
 8019fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8019fd2:	687b      	ldr	r3, [r7, #4]
 8019fd4:	685b      	ldr	r3, [r3, #4]
 8019fd6:	085b      	lsrs	r3, r3, #1
 8019fd8:	441a      	add	r2, r3
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	685b      	ldr	r3, [r3, #4]
 8019fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8019fe6:	e131      	b.n	801a24c <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d043      	beq.n	801a078 <UART_SetConfig+0x20e0>
 8019ff0:	687b      	ldr	r3, [r7, #4]
 8019ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff4:	2b01      	cmp	r3, #1
 8019ff6:	d03d      	beq.n	801a074 <UART_SetConfig+0x20dc>
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ffc:	2b02      	cmp	r3, #2
 8019ffe:	d037      	beq.n	801a070 <UART_SetConfig+0x20d8>
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a004:	2b03      	cmp	r3, #3
 801a006:	d031      	beq.n	801a06c <UART_SetConfig+0x20d4>
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a00c:	2b04      	cmp	r3, #4
 801a00e:	d02b      	beq.n	801a068 <UART_SetConfig+0x20d0>
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a014:	2b05      	cmp	r3, #5
 801a016:	d025      	beq.n	801a064 <UART_SetConfig+0x20cc>
 801a018:	687b      	ldr	r3, [r7, #4]
 801a01a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a01c:	2b06      	cmp	r3, #6
 801a01e:	d01f      	beq.n	801a060 <UART_SetConfig+0x20c8>
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a024:	2b07      	cmp	r3, #7
 801a026:	d019      	beq.n	801a05c <UART_SetConfig+0x20c4>
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a02c:	2b08      	cmp	r3, #8
 801a02e:	d013      	beq.n	801a058 <UART_SetConfig+0x20c0>
 801a030:	687b      	ldr	r3, [r7, #4]
 801a032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a034:	2b09      	cmp	r3, #9
 801a036:	d00d      	beq.n	801a054 <UART_SetConfig+0x20bc>
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a03c:	2b0a      	cmp	r3, #10
 801a03e:	d007      	beq.n	801a050 <UART_SetConfig+0x20b8>
 801a040:	687b      	ldr	r3, [r7, #4]
 801a042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a044:	2b0b      	cmp	r3, #11
 801a046:	d101      	bne.n	801a04c <UART_SetConfig+0x20b4>
 801a048:	4b3f      	ldr	r3, [pc, #252]	; (801a148 <UART_SetConfig+0x21b0>)
 801a04a:	e016      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a04c:	4b3d      	ldr	r3, [pc, #244]	; (801a144 <UART_SetConfig+0x21ac>)
 801a04e:	e014      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a050:	4b3e      	ldr	r3, [pc, #248]	; (801a14c <UART_SetConfig+0x21b4>)
 801a052:	e012      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a054:	4b3e      	ldr	r3, [pc, #248]	; (801a150 <UART_SetConfig+0x21b8>)
 801a056:	e010      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a058:	4b3e      	ldr	r3, [pc, #248]	; (801a154 <UART_SetConfig+0x21bc>)
 801a05a:	e00e      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a05c:	4b3e      	ldr	r3, [pc, #248]	; (801a158 <UART_SetConfig+0x21c0>)
 801a05e:	e00c      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a060:	4b3e      	ldr	r3, [pc, #248]	; (801a15c <UART_SetConfig+0x21c4>)
 801a062:	e00a      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a064:	4b3e      	ldr	r3, [pc, #248]	; (801a160 <UART_SetConfig+0x21c8>)
 801a066:	e008      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a068:	4b3e      	ldr	r3, [pc, #248]	; (801a164 <UART_SetConfig+0x21cc>)
 801a06a:	e006      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a06c:	4b3e      	ldr	r3, [pc, #248]	; (801a168 <UART_SetConfig+0x21d0>)
 801a06e:	e004      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a070:	4b3e      	ldr	r3, [pc, #248]	; (801a16c <UART_SetConfig+0x21d4>)
 801a072:	e002      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a074:	4b3e      	ldr	r3, [pc, #248]	; (801a170 <UART_SetConfig+0x21d8>)
 801a076:	e000      	b.n	801a07a <UART_SetConfig+0x20e2>
 801a078:	4b32      	ldr	r3, [pc, #200]	; (801a144 <UART_SetConfig+0x21ac>)
 801a07a:	687a      	ldr	r2, [r7, #4]
 801a07c:	6852      	ldr	r2, [r2, #4]
 801a07e:	0852      	lsrs	r2, r2, #1
 801a080:	441a      	add	r2, r3
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	685b      	ldr	r3, [r3, #4]
 801a086:	fbb2 f3f3 	udiv	r3, r2, r3
 801a08a:	b29b      	uxth	r3, r3
 801a08c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a08e:	e0dd      	b.n	801a24c <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a094:	2b00      	cmp	r3, #0
 801a096:	d046      	beq.n	801a126 <UART_SetConfig+0x218e>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a09c:	2b01      	cmp	r3, #1
 801a09e:	d040      	beq.n	801a122 <UART_SetConfig+0x218a>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0a4:	2b02      	cmp	r3, #2
 801a0a6:	d03a      	beq.n	801a11e <UART_SetConfig+0x2186>
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ac:	2b03      	cmp	r3, #3
 801a0ae:	d034      	beq.n	801a11a <UART_SetConfig+0x2182>
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0b4:	2b04      	cmp	r3, #4
 801a0b6:	d02e      	beq.n	801a116 <UART_SetConfig+0x217e>
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0bc:	2b05      	cmp	r3, #5
 801a0be:	d028      	beq.n	801a112 <UART_SetConfig+0x217a>
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0c4:	2b06      	cmp	r3, #6
 801a0c6:	d022      	beq.n	801a10e <UART_SetConfig+0x2176>
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0cc:	2b07      	cmp	r3, #7
 801a0ce:	d01c      	beq.n	801a10a <UART_SetConfig+0x2172>
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0d4:	2b08      	cmp	r3, #8
 801a0d6:	d016      	beq.n	801a106 <UART_SetConfig+0x216e>
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0dc:	2b09      	cmp	r3, #9
 801a0de:	d00f      	beq.n	801a100 <UART_SetConfig+0x2168>
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0e4:	2b0a      	cmp	r3, #10
 801a0e6:	d008      	beq.n	801a0fa <UART_SetConfig+0x2162>
 801a0e8:	687b      	ldr	r3, [r7, #4]
 801a0ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ec:	2b0b      	cmp	r3, #11
 801a0ee:	d102      	bne.n	801a0f6 <UART_SetConfig+0x215e>
 801a0f0:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a0f4:	e018      	b.n	801a128 <UART_SetConfig+0x2190>
 801a0f6:	4b18      	ldr	r3, [pc, #96]	; (801a158 <UART_SetConfig+0x21c0>)
 801a0f8:	e016      	b.n	801a128 <UART_SetConfig+0x2190>
 801a0fa:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a0fe:	e013      	b.n	801a128 <UART_SetConfig+0x2190>
 801a100:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a104:	e010      	b.n	801a128 <UART_SetConfig+0x2190>
 801a106:	4b1b      	ldr	r3, [pc, #108]	; (801a174 <UART_SetConfig+0x21dc>)
 801a108:	e00e      	b.n	801a128 <UART_SetConfig+0x2190>
 801a10a:	4b0f      	ldr	r3, [pc, #60]	; (801a148 <UART_SetConfig+0x21b0>)
 801a10c:	e00c      	b.n	801a128 <UART_SetConfig+0x2190>
 801a10e:	4b1a      	ldr	r3, [pc, #104]	; (801a178 <UART_SetConfig+0x21e0>)
 801a110:	e00a      	b.n	801a128 <UART_SetConfig+0x2190>
 801a112:	4b1a      	ldr	r3, [pc, #104]	; (801a17c <UART_SetConfig+0x21e4>)
 801a114:	e008      	b.n	801a128 <UART_SetConfig+0x2190>
 801a116:	4b0d      	ldr	r3, [pc, #52]	; (801a14c <UART_SetConfig+0x21b4>)
 801a118:	e006      	b.n	801a128 <UART_SetConfig+0x2190>
 801a11a:	4b19      	ldr	r3, [pc, #100]	; (801a180 <UART_SetConfig+0x21e8>)
 801a11c:	e004      	b.n	801a128 <UART_SetConfig+0x2190>
 801a11e:	4b0c      	ldr	r3, [pc, #48]	; (801a150 <UART_SetConfig+0x21b8>)
 801a120:	e002      	b.n	801a128 <UART_SetConfig+0x2190>
 801a122:	4b0c      	ldr	r3, [pc, #48]	; (801a154 <UART_SetConfig+0x21bc>)
 801a124:	e000      	b.n	801a128 <UART_SetConfig+0x2190>
 801a126:	4b0c      	ldr	r3, [pc, #48]	; (801a158 <UART_SetConfig+0x21c0>)
 801a128:	687a      	ldr	r2, [r7, #4]
 801a12a:	6852      	ldr	r2, [r2, #4]
 801a12c:	0852      	lsrs	r2, r2, #1
 801a12e:	441a      	add	r2, r3
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	685b      	ldr	r3, [r3, #4]
 801a134:	fbb2 f3f3 	udiv	r3, r2, r3
 801a138:	b29b      	uxth	r3, r3
 801a13a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a13c:	e086      	b.n	801a24c <UART_SetConfig+0x22b4>
 801a13e:	bf00      	nop
 801a140:	58024400 	.word	0x58024400
 801a144:	03d09000 	.word	0x03d09000
 801a148:	0003d090 	.word	0x0003d090
 801a14c:	0007a120 	.word	0x0007a120
 801a150:	000f4240 	.word	0x000f4240
 801a154:	001e8480 	.word	0x001e8480
 801a158:	003d0900 	.word	0x003d0900
 801a15c:	00516155 	.word	0x00516155
 801a160:	0061a800 	.word	0x0061a800
 801a164:	007a1200 	.word	0x007a1200
 801a168:	00a2c2aa 	.word	0x00a2c2aa
 801a16c:	00f42400 	.word	0x00f42400
 801a170:	01e84800 	.word	0x01e84800
 801a174:	0001e848 	.word	0x0001e848
 801a178:	00051615 	.word	0x00051615
 801a17c:	00061a80 	.word	0x00061a80
 801a180:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d04e      	beq.n	801a22a <UART_SetConfig+0x2292>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a190:	2b01      	cmp	r3, #1
 801a192:	d047      	beq.n	801a224 <UART_SetConfig+0x228c>
 801a194:	687b      	ldr	r3, [r7, #4]
 801a196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a198:	2b02      	cmp	r3, #2
 801a19a:	d040      	beq.n	801a21e <UART_SetConfig+0x2286>
 801a19c:	687b      	ldr	r3, [r7, #4]
 801a19e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a0:	2b03      	cmp	r3, #3
 801a1a2:	d039      	beq.n	801a218 <UART_SetConfig+0x2280>
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1a8:	2b04      	cmp	r3, #4
 801a1aa:	d032      	beq.n	801a212 <UART_SetConfig+0x227a>
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1b0:	2b05      	cmp	r3, #5
 801a1b2:	d02b      	beq.n	801a20c <UART_SetConfig+0x2274>
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1b8:	2b06      	cmp	r3, #6
 801a1ba:	d024      	beq.n	801a206 <UART_SetConfig+0x226e>
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c0:	2b07      	cmp	r3, #7
 801a1c2:	d01d      	beq.n	801a200 <UART_SetConfig+0x2268>
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c8:	2b08      	cmp	r3, #8
 801a1ca:	d016      	beq.n	801a1fa <UART_SetConfig+0x2262>
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1d0:	2b09      	cmp	r3, #9
 801a1d2:	d00f      	beq.n	801a1f4 <UART_SetConfig+0x225c>
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1d8:	2b0a      	cmp	r3, #10
 801a1da:	d008      	beq.n	801a1ee <UART_SetConfig+0x2256>
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1e0:	2b0b      	cmp	r3, #11
 801a1e2:	d101      	bne.n	801a1e8 <UART_SetConfig+0x2250>
 801a1e4:	2380      	movs	r3, #128	; 0x80
 801a1e6:	e022      	b.n	801a22e <UART_SetConfig+0x2296>
 801a1e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a1ec:	e01f      	b.n	801a22e <UART_SetConfig+0x2296>
 801a1ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a1f2:	e01c      	b.n	801a22e <UART_SetConfig+0x2296>
 801a1f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a1f8:	e019      	b.n	801a22e <UART_SetConfig+0x2296>
 801a1fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a1fe:	e016      	b.n	801a22e <UART_SetConfig+0x2296>
 801a200:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a204:	e013      	b.n	801a22e <UART_SetConfig+0x2296>
 801a206:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801a20a:	e010      	b.n	801a22e <UART_SetConfig+0x2296>
 801a20c:	f640 43cc 	movw	r3, #3276	; 0xccc
 801a210:	e00d      	b.n	801a22e <UART_SetConfig+0x2296>
 801a212:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a216:	e00a      	b.n	801a22e <UART_SetConfig+0x2296>
 801a218:	f241 5355 	movw	r3, #5461	; 0x1555
 801a21c:	e007      	b.n	801a22e <UART_SetConfig+0x2296>
 801a21e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a222:	e004      	b.n	801a22e <UART_SetConfig+0x2296>
 801a224:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a228:	e001      	b.n	801a22e <UART_SetConfig+0x2296>
 801a22a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a22e:	687a      	ldr	r2, [r7, #4]
 801a230:	6852      	ldr	r2, [r2, #4]
 801a232:	0852      	lsrs	r2, r2, #1
 801a234:	441a      	add	r2, r3
 801a236:	687b      	ldr	r3, [r7, #4]
 801a238:	685b      	ldr	r3, [r3, #4]
 801a23a:	fbb2 f3f3 	udiv	r3, r2, r3
 801a23e:	b29b      	uxth	r3, r3
 801a240:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a242:	e003      	b.n	801a24c <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 801a244:	2301      	movs	r3, #1
 801a246:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a24a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a24c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a24e:	2b0f      	cmp	r3, #15
 801a250:	d908      	bls.n	801a264 <UART_SetConfig+0x22cc>
 801a252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a258:	d204      	bcs.n	801a264 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a260:	60da      	str	r2, [r3, #12]
 801a262:	e002      	b.n	801a26a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a264:	2301      	movs	r3, #1
 801a266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a26a:	687b      	ldr	r3, [r7, #4]
 801a26c:	2201      	movs	r2, #1
 801a26e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	2201      	movs	r2, #1
 801a276:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	2200      	movs	r2, #0
 801a27e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	2200      	movs	r2, #0
 801a284:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801a286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801a28a:	4618      	mov	r0, r3
 801a28c:	3740      	adds	r7, #64	; 0x40
 801a28e:	46bd      	mov	sp, r7
 801a290:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801a294 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a294:	b480      	push	{r7}
 801a296:	b083      	sub	sp, #12
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2a0:	f003 0301 	and.w	r3, r3, #1
 801a2a4:	2b00      	cmp	r3, #0
 801a2a6:	d00a      	beq.n	801a2be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	685b      	ldr	r3, [r3, #4]
 801a2ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2b6:	687b      	ldr	r3, [r7, #4]
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	430a      	orrs	r2, r1
 801a2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a2be:	687b      	ldr	r3, [r7, #4]
 801a2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2c2:	f003 0302 	and.w	r3, r3, #2
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d00a      	beq.n	801a2e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	685b      	ldr	r3, [r3, #4]
 801a2d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a2d4:	687b      	ldr	r3, [r7, #4]
 801a2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	430a      	orrs	r2, r1
 801a2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a2e4:	f003 0304 	and.w	r3, r3, #4
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d00a      	beq.n	801a302 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a2ec:	687b      	ldr	r3, [r7, #4]
 801a2ee:	681b      	ldr	r3, [r3, #0]
 801a2f0:	685b      	ldr	r3, [r3, #4]
 801a2f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	430a      	orrs	r2, r1
 801a300:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a306:	f003 0308 	and.w	r3, r3, #8
 801a30a:	2b00      	cmp	r3, #0
 801a30c:	d00a      	beq.n	801a324 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a30e:	687b      	ldr	r3, [r7, #4]
 801a310:	681b      	ldr	r3, [r3, #0]
 801a312:	685b      	ldr	r3, [r3, #4]
 801a314:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	430a      	orrs	r2, r1
 801a322:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a324:	687b      	ldr	r3, [r7, #4]
 801a326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a328:	f003 0310 	and.w	r3, r3, #16
 801a32c:	2b00      	cmp	r3, #0
 801a32e:	d00a      	beq.n	801a346 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	689b      	ldr	r3, [r3, #8]
 801a336:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	430a      	orrs	r2, r1
 801a344:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a34a:	f003 0320 	and.w	r3, r3, #32
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d00a      	beq.n	801a368 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	681b      	ldr	r3, [r3, #0]
 801a356:	689b      	ldr	r3, [r3, #8]
 801a358:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a35c:	687b      	ldr	r3, [r7, #4]
 801a35e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	681b      	ldr	r3, [r3, #0]
 801a364:	430a      	orrs	r2, r1
 801a366:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a36c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a370:	2b00      	cmp	r3, #0
 801a372:	d01a      	beq.n	801a3aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	681b      	ldr	r3, [r3, #0]
 801a386:	430a      	orrs	r2, r1
 801a388:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a38a:	687b      	ldr	r3, [r7, #4]
 801a38c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a38e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a392:	d10a      	bne.n	801a3aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	681b      	ldr	r3, [r3, #0]
 801a398:	685b      	ldr	r3, [r3, #4]
 801a39a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	430a      	orrs	r2, r1
 801a3a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a3b2:	2b00      	cmp	r3, #0
 801a3b4:	d00a      	beq.n	801a3cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	685b      	ldr	r3, [r3, #4]
 801a3bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	430a      	orrs	r2, r1
 801a3ca:	605a      	str	r2, [r3, #4]
  }
}
 801a3cc:	bf00      	nop
 801a3ce:	370c      	adds	r7, #12
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d6:	4770      	bx	lr

0801a3d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b086      	sub	sp, #24
 801a3dc:	af02      	add	r7, sp, #8
 801a3de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	2200      	movs	r2, #0
 801a3e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801a3e8:	f7f8 fa0c 	bl	8012804 <HAL_GetTick>
 801a3ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	f003 0308 	and.w	r3, r3, #8
 801a3f8:	2b08      	cmp	r3, #8
 801a3fa:	d10e      	bne.n	801a41a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a3fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a400:	9300      	str	r3, [sp, #0]
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	2200      	movs	r2, #0
 801a406:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a40a:	6878      	ldr	r0, [r7, #4]
 801a40c:	f000 f82c 	bl	801a468 <UART_WaitOnFlagUntilTimeout>
 801a410:	4603      	mov	r3, r0
 801a412:	2b00      	cmp	r3, #0
 801a414:	d001      	beq.n	801a41a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a416:	2303      	movs	r3, #3
 801a418:	e022      	b.n	801a460 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	681b      	ldr	r3, [r3, #0]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	f003 0304 	and.w	r3, r3, #4
 801a424:	2b04      	cmp	r3, #4
 801a426:	d10e      	bne.n	801a446 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a42c:	9300      	str	r3, [sp, #0]
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	2200      	movs	r2, #0
 801a432:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a436:	6878      	ldr	r0, [r7, #4]
 801a438:	f000 f816 	bl	801a468 <UART_WaitOnFlagUntilTimeout>
 801a43c:	4603      	mov	r3, r0
 801a43e:	2b00      	cmp	r3, #0
 801a440:	d001      	beq.n	801a446 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a442:	2303      	movs	r3, #3
 801a444:	e00c      	b.n	801a460 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	2220      	movs	r2, #32
 801a44a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	2220      	movs	r2, #32
 801a452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	2200      	movs	r2, #0
 801a45a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a45e:	2300      	movs	r3, #0
}
 801a460:	4618      	mov	r0, r3
 801a462:	3710      	adds	r7, #16
 801a464:	46bd      	mov	sp, r7
 801a466:	bd80      	pop	{r7, pc}

0801a468 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b084      	sub	sp, #16
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	60f8      	str	r0, [r7, #12]
 801a470:	60b9      	str	r1, [r7, #8]
 801a472:	603b      	str	r3, [r7, #0]
 801a474:	4613      	mov	r3, r2
 801a476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a478:	e062      	b.n	801a540 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a47a:	69bb      	ldr	r3, [r7, #24]
 801a47c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a480:	d05e      	beq.n	801a540 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a482:	f7f8 f9bf 	bl	8012804 <HAL_GetTick>
 801a486:	4602      	mov	r2, r0
 801a488:	683b      	ldr	r3, [r7, #0]
 801a48a:	1ad3      	subs	r3, r2, r3
 801a48c:	69ba      	ldr	r2, [r7, #24]
 801a48e:	429a      	cmp	r2, r3
 801a490:	d302      	bcc.n	801a498 <UART_WaitOnFlagUntilTimeout+0x30>
 801a492:	69bb      	ldr	r3, [r7, #24]
 801a494:	2b00      	cmp	r3, #0
 801a496:	d11d      	bne.n	801a4d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a498:	68fb      	ldr	r3, [r7, #12]
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	681a      	ldr	r2, [r3, #0]
 801a49e:	68fb      	ldr	r3, [r7, #12]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a4a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a4a8:	68fb      	ldr	r3, [r7, #12]
 801a4aa:	681b      	ldr	r3, [r3, #0]
 801a4ac:	689a      	ldr	r2, [r3, #8]
 801a4ae:	68fb      	ldr	r3, [r7, #12]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	f022 0201 	bic.w	r2, r2, #1
 801a4b6:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801a4b8:	68fb      	ldr	r3, [r7, #12]
 801a4ba:	2220      	movs	r2, #32
 801a4bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801a4c0:	68fb      	ldr	r3, [r7, #12]
 801a4c2:	2220      	movs	r2, #32
 801a4c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801a4c8:	68fb      	ldr	r3, [r7, #12]
 801a4ca:	2200      	movs	r2, #0
 801a4cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801a4d0:	2303      	movs	r3, #3
 801a4d2:	e045      	b.n	801a560 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	681b      	ldr	r3, [r3, #0]
 801a4d8:	681b      	ldr	r3, [r3, #0]
 801a4da:	f003 0304 	and.w	r3, r3, #4
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d02e      	beq.n	801a540 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	681b      	ldr	r3, [r3, #0]
 801a4e6:	69db      	ldr	r3, [r3, #28]
 801a4e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a4ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a4f0:	d126      	bne.n	801a540 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a4fa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	681b      	ldr	r3, [r3, #0]
 801a500:	681a      	ldr	r2, [r3, #0]
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a50a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a50c:	68fb      	ldr	r3, [r7, #12]
 801a50e:	681b      	ldr	r3, [r3, #0]
 801a510:	689a      	ldr	r2, [r3, #8]
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	f022 0201 	bic.w	r2, r2, #1
 801a51a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	2220      	movs	r2, #32
 801a520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	2220      	movs	r2, #32
 801a528:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a52c:	68fb      	ldr	r3, [r7, #12]
 801a52e:	2220      	movs	r2, #32
 801a530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	2200      	movs	r2, #0
 801a538:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801a53c:	2303      	movs	r3, #3
 801a53e:	e00f      	b.n	801a560 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a540:	68fb      	ldr	r3, [r7, #12]
 801a542:	681b      	ldr	r3, [r3, #0]
 801a544:	69da      	ldr	r2, [r3, #28]
 801a546:	68bb      	ldr	r3, [r7, #8]
 801a548:	4013      	ands	r3, r2
 801a54a:	68ba      	ldr	r2, [r7, #8]
 801a54c:	429a      	cmp	r2, r3
 801a54e:	bf0c      	ite	eq
 801a550:	2301      	moveq	r3, #1
 801a552:	2300      	movne	r3, #0
 801a554:	b2db      	uxtb	r3, r3
 801a556:	461a      	mov	r2, r3
 801a558:	79fb      	ldrb	r3, [r7, #7]
 801a55a:	429a      	cmp	r2, r3
 801a55c:	d08d      	beq.n	801a47a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a55e:	2300      	movs	r3, #0
}
 801a560:	4618      	mov	r0, r3
 801a562:	3710      	adds	r7, #16
 801a564:	46bd      	mov	sp, r7
 801a566:	bd80      	pop	{r7, pc}

0801a568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a568:	b480      	push	{r7}
 801a56a:	b083      	sub	sp, #12
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a570:	687b      	ldr	r3, [r7, #4]
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	681a      	ldr	r2, [r3, #0]
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801a57e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	6899      	ldr	r1, [r3, #8]
 801a586:	687b      	ldr	r3, [r7, #4]
 801a588:	681a      	ldr	r2, [r3, #0]
 801a58a:	4b08      	ldr	r3, [pc, #32]	; (801a5ac <UART_EndRxTransfer+0x44>)
 801a58c:	400b      	ands	r3, r1
 801a58e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	2220      	movs	r2, #32
 801a594:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a598:	687b      	ldr	r3, [r7, #4]
 801a59a:	2200      	movs	r2, #0
 801a59c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801a59e:	bf00      	nop
 801a5a0:	370c      	adds	r7, #12
 801a5a2:	46bd      	mov	sp, r7
 801a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a8:	4770      	bx	lr
 801a5aa:	bf00      	nop
 801a5ac:	effffffe 	.word	0xeffffffe

0801a5b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a5b0:	b580      	push	{r7, lr}
 801a5b2:	b084      	sub	sp, #16
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	2200      	movs	r2, #0
 801a5c2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801a5c6:	68fb      	ldr	r3, [r7, #12]
 801a5c8:	2200      	movs	r2, #0
 801a5ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a5ce:	68f8      	ldr	r0, [r7, #12]
 801a5d0:	f7fd fcd8 	bl	8017f84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a5d4:	bf00      	nop
 801a5d6:	3710      	adds	r7, #16
 801a5d8:	46bd      	mov	sp, r7
 801a5da:	bd80      	pop	{r7, pc}

0801a5dc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a5dc:	b580      	push	{r7, lr}
 801a5de:	b082      	sub	sp, #8
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	681a      	ldr	r2, [r3, #0]
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a5f2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a5f4:	687b      	ldr	r3, [r7, #4]
 801a5f6:	2220      	movs	r2, #32
 801a5f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a5fc:	687b      	ldr	r3, [r7, #4]
 801a5fe:	2200      	movs	r2, #0
 801a600:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a602:	6878      	ldr	r0, [r7, #4]
 801a604:	f7fd fcb4 	bl	8017f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a608:	bf00      	nop
 801a60a:	3708      	adds	r7, #8
 801a60c:	46bd      	mov	sp, r7
 801a60e:	bd80      	pop	{r7, pc}

0801a610 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a610:	b480      	push	{r7}
 801a612:	b083      	sub	sp, #12
 801a614:	af00      	add	r7, sp, #0
 801a616:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a618:	bf00      	nop
 801a61a:	370c      	adds	r7, #12
 801a61c:	46bd      	mov	sp, r7
 801a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a622:	4770      	bx	lr

0801a624 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a624:	b480      	push	{r7}
 801a626:	b083      	sub	sp, #12
 801a628:	af00      	add	r7, sp, #0
 801a62a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a62c:	bf00      	nop
 801a62e:	370c      	adds	r7, #12
 801a630:	46bd      	mov	sp, r7
 801a632:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a636:	4770      	bx	lr

0801a638 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a638:	b480      	push	{r7}
 801a63a:	b083      	sub	sp, #12
 801a63c:	af00      	add	r7, sp, #0
 801a63e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a640:	bf00      	nop
 801a642:	370c      	adds	r7, #12
 801a644:	46bd      	mov	sp, r7
 801a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a64a:	4770      	bx	lr

0801a64c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a64c:	b480      	push	{r7}
 801a64e:	b085      	sub	sp, #20
 801a650:	af00      	add	r7, sp, #0
 801a652:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a654:	687b      	ldr	r3, [r7, #4]
 801a656:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a65a:	2b01      	cmp	r3, #1
 801a65c:	d101      	bne.n	801a662 <HAL_UARTEx_DisableFifoMode+0x16>
 801a65e:	2302      	movs	r3, #2
 801a660:	e027      	b.n	801a6b2 <HAL_UARTEx_DisableFifoMode+0x66>
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	2201      	movs	r2, #1
 801a666:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a66a:	687b      	ldr	r3, [r7, #4]
 801a66c:	2224      	movs	r2, #36	; 0x24
 801a66e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a672:	687b      	ldr	r3, [r7, #4]
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	681a      	ldr	r2, [r3, #0]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f022 0201 	bic.w	r2, r2, #1
 801a688:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a68a:	68fb      	ldr	r3, [r7, #12]
 801a68c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a690:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	2200      	movs	r2, #0
 801a696:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a698:	687b      	ldr	r3, [r7, #4]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	68fa      	ldr	r2, [r7, #12]
 801a69e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	2220      	movs	r2, #32
 801a6a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a6b0:	2300      	movs	r3, #0
}
 801a6b2:	4618      	mov	r0, r3
 801a6b4:	3714      	adds	r7, #20
 801a6b6:	46bd      	mov	sp, r7
 801a6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6bc:	4770      	bx	lr

0801a6be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a6be:	b580      	push	{r7, lr}
 801a6c0:	b084      	sub	sp, #16
 801a6c2:	af00      	add	r7, sp, #0
 801a6c4:	6078      	str	r0, [r7, #4]
 801a6c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a6c8:	687b      	ldr	r3, [r7, #4]
 801a6ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a6ce:	2b01      	cmp	r3, #1
 801a6d0:	d101      	bne.n	801a6d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a6d2:	2302      	movs	r3, #2
 801a6d4:	e02d      	b.n	801a732 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	2201      	movs	r2, #1
 801a6da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a6de:	687b      	ldr	r3, [r7, #4]
 801a6e0:	2224      	movs	r2, #36	; 0x24
 801a6e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a6e6:	687b      	ldr	r3, [r7, #4]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a6ee:	687b      	ldr	r3, [r7, #4]
 801a6f0:	681b      	ldr	r3, [r3, #0]
 801a6f2:	681a      	ldr	r2, [r3, #0]
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	681b      	ldr	r3, [r3, #0]
 801a6f8:	f022 0201 	bic.w	r2, r2, #1
 801a6fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	689b      	ldr	r3, [r3, #8]
 801a704:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	683a      	ldr	r2, [r7, #0]
 801a70e:	430a      	orrs	r2, r1
 801a710:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a712:	6878      	ldr	r0, [r7, #4]
 801a714:	f000 f850 	bl	801a7b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	68fa      	ldr	r2, [r7, #12]
 801a71e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a720:	687b      	ldr	r3, [r7, #4]
 801a722:	2220      	movs	r2, #32
 801a724:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a728:	687b      	ldr	r3, [r7, #4]
 801a72a:	2200      	movs	r2, #0
 801a72c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a730:	2300      	movs	r3, #0
}
 801a732:	4618      	mov	r0, r3
 801a734:	3710      	adds	r7, #16
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}

0801a73a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a73a:	b580      	push	{r7, lr}
 801a73c:	b084      	sub	sp, #16
 801a73e:	af00      	add	r7, sp, #0
 801a740:	6078      	str	r0, [r7, #4]
 801a742:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a74a:	2b01      	cmp	r3, #1
 801a74c:	d101      	bne.n	801a752 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a74e:	2302      	movs	r3, #2
 801a750:	e02d      	b.n	801a7ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	2201      	movs	r2, #1
 801a756:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a75a:	687b      	ldr	r3, [r7, #4]
 801a75c:	2224      	movs	r2, #36	; 0x24
 801a75e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	681a      	ldr	r2, [r3, #0]
 801a770:	687b      	ldr	r3, [r7, #4]
 801a772:	681b      	ldr	r3, [r3, #0]
 801a774:	f022 0201 	bic.w	r2, r2, #1
 801a778:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	689b      	ldr	r3, [r3, #8]
 801a780:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	683a      	ldr	r2, [r7, #0]
 801a78a:	430a      	orrs	r2, r1
 801a78c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a78e:	6878      	ldr	r0, [r7, #4]
 801a790:	f000 f812 	bl	801a7b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	68fa      	ldr	r2, [r7, #12]
 801a79a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	2220      	movs	r2, #32
 801a7a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2200      	movs	r2, #0
 801a7a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a7ac:	2300      	movs	r3, #0
}
 801a7ae:	4618      	mov	r0, r3
 801a7b0:	3710      	adds	r7, #16
 801a7b2:	46bd      	mov	sp, r7
 801a7b4:	bd80      	pop	{r7, pc}
	...

0801a7b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801a7b8:	b480      	push	{r7}
 801a7ba:	b089      	sub	sp, #36	; 0x24
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801a7c0:	4a2f      	ldr	r2, [pc, #188]	; (801a880 <UARTEx_SetNbDataToProcess+0xc8>)
 801a7c2:	f107 0314 	add.w	r3, r7, #20
 801a7c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a7ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801a7ce:	4a2d      	ldr	r2, [pc, #180]	; (801a884 <UARTEx_SetNbDataToProcess+0xcc>)
 801a7d0:	f107 030c 	add.w	r3, r7, #12
 801a7d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a7d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801a7e0:	2b00      	cmp	r3, #0
 801a7e2:	d108      	bne.n	801a7f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	2201      	movs	r2, #1
 801a7e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	2201      	movs	r2, #1
 801a7f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801a7f4:	e03d      	b.n	801a872 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801a7f6:	2308      	movs	r3, #8
 801a7f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801a7fa:	2308      	movs	r3, #8
 801a7fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	681b      	ldr	r3, [r3, #0]
 801a802:	689b      	ldr	r3, [r3, #8]
 801a804:	0e5b      	lsrs	r3, r3, #25
 801a806:	b2db      	uxtb	r3, r3
 801a808:	f003 0307 	and.w	r3, r3, #7
 801a80c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	681b      	ldr	r3, [r3, #0]
 801a812:	689b      	ldr	r3, [r3, #8]
 801a814:	0f5b      	lsrs	r3, r3, #29
 801a816:	b2db      	uxtb	r3, r3
 801a818:	f003 0307 	and.w	r3, r3, #7
 801a81c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801a81e:	7fbb      	ldrb	r3, [r7, #30]
 801a820:	7f3a      	ldrb	r2, [r7, #28]
 801a822:	f107 0120 	add.w	r1, r7, #32
 801a826:	440a      	add	r2, r1
 801a828:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801a82c:	fb02 f303 	mul.w	r3, r2, r3
 801a830:	7f3a      	ldrb	r2, [r7, #28]
 801a832:	f107 0120 	add.w	r1, r7, #32
 801a836:	440a      	add	r2, r1
 801a838:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801a83c:	fb93 f3f2 	sdiv	r3, r3, r2
 801a840:	b29a      	uxth	r2, r3
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 801a848:	7ffb      	ldrb	r3, [r7, #31]
 801a84a:	7f7a      	ldrb	r2, [r7, #29]
 801a84c:	f107 0120 	add.w	r1, r7, #32
 801a850:	440a      	add	r2, r1
 801a852:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801a856:	fb02 f303 	mul.w	r3, r2, r3
 801a85a:	7f7a      	ldrb	r2, [r7, #29]
 801a85c:	f107 0120 	add.w	r1, r7, #32
 801a860:	440a      	add	r2, r1
 801a862:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801a866:	fb93 f3f2 	sdiv	r3, r3, r2
 801a86a:	b29a      	uxth	r2, r3
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801a872:	bf00      	nop
 801a874:	3724      	adds	r7, #36	; 0x24
 801a876:	46bd      	mov	sp, r7
 801a878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a87c:	4770      	bx	lr
 801a87e:	bf00      	nop
 801a880:	0801f23c 	.word	0x0801f23c
 801a884:	0801f244 	.word	0x0801f244

0801a888 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801a888:	b084      	sub	sp, #16
 801a88a:	b580      	push	{r7, lr}
 801a88c:	b084      	sub	sp, #16
 801a88e:	af00      	add	r7, sp, #0
 801a890:	6078      	str	r0, [r7, #4]
 801a892:	f107 001c 	add.w	r0, r7, #28
 801a896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801a89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a89c:	2b01      	cmp	r3, #1
 801a89e:	d120      	bne.n	801a8e2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	68da      	ldr	r2, [r3, #12]
 801a8b0:	4b25      	ldr	r3, [pc, #148]	; (801a948 <USB_CoreInit+0xc0>)
 801a8b2:	4013      	ands	r3, r2
 801a8b4:	687a      	ldr	r2, [r7, #4]
 801a8b6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	68db      	ldr	r3, [r3, #12]
 801a8bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801a8c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a8c6:	2b01      	cmp	r3, #1
 801a8c8:	d105      	bne.n	801a8d6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	68db      	ldr	r3, [r3, #12]
 801a8ce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801a8d6:	6878      	ldr	r0, [r7, #4]
 801a8d8:	f001 fa66 	bl	801bda8 <USB_CoreReset>
 801a8dc:	4603      	mov	r3, r0
 801a8de:	73fb      	strb	r3, [r7, #15]
 801a8e0:	e01a      	b.n	801a918 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	68db      	ldr	r3, [r3, #12]
 801a8e6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801a8ee:	6878      	ldr	r0, [r7, #4]
 801a8f0:	f001 fa5a 	bl	801bda8 <USB_CoreReset>
 801a8f4:	4603      	mov	r3, r0
 801a8f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801a8f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a8fa:	2b00      	cmp	r3, #0
 801a8fc:	d106      	bne.n	801a90c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a902:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	639a      	str	r2, [r3, #56]	; 0x38
 801a90a:	e005      	b.n	801a918 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801a90c:	687b      	ldr	r3, [r7, #4]
 801a90e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a910:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801a918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a91a:	2b01      	cmp	r3, #1
 801a91c:	d10b      	bne.n	801a936 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	689b      	ldr	r3, [r3, #8]
 801a922:	f043 0206 	orr.w	r2, r3, #6
 801a926:	687b      	ldr	r3, [r7, #4]
 801a928:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	689b      	ldr	r3, [r3, #8]
 801a92e:	f043 0220 	orr.w	r2, r3, #32
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801a936:	7bfb      	ldrb	r3, [r7, #15]
}
 801a938:	4618      	mov	r0, r3
 801a93a:	3710      	adds	r7, #16
 801a93c:	46bd      	mov	sp, r7
 801a93e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801a942:	b004      	add	sp, #16
 801a944:	4770      	bx	lr
 801a946:	bf00      	nop
 801a948:	ffbdffbf 	.word	0xffbdffbf

0801a94c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801a94c:	b480      	push	{r7}
 801a94e:	b087      	sub	sp, #28
 801a950:	af00      	add	r7, sp, #0
 801a952:	60f8      	str	r0, [r7, #12]
 801a954:	60b9      	str	r1, [r7, #8]
 801a956:	4613      	mov	r3, r2
 801a958:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801a95a:	79fb      	ldrb	r3, [r7, #7]
 801a95c:	2b02      	cmp	r3, #2
 801a95e:	d165      	bne.n	801aa2c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801a960:	68bb      	ldr	r3, [r7, #8]
 801a962:	4a41      	ldr	r2, [pc, #260]	; (801aa68 <USB_SetTurnaroundTime+0x11c>)
 801a964:	4293      	cmp	r3, r2
 801a966:	d906      	bls.n	801a976 <USB_SetTurnaroundTime+0x2a>
 801a968:	68bb      	ldr	r3, [r7, #8]
 801a96a:	4a40      	ldr	r2, [pc, #256]	; (801aa6c <USB_SetTurnaroundTime+0x120>)
 801a96c:	4293      	cmp	r3, r2
 801a96e:	d802      	bhi.n	801a976 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801a970:	230f      	movs	r3, #15
 801a972:	617b      	str	r3, [r7, #20]
 801a974:	e062      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801a976:	68bb      	ldr	r3, [r7, #8]
 801a978:	4a3c      	ldr	r2, [pc, #240]	; (801aa6c <USB_SetTurnaroundTime+0x120>)
 801a97a:	4293      	cmp	r3, r2
 801a97c:	d906      	bls.n	801a98c <USB_SetTurnaroundTime+0x40>
 801a97e:	68bb      	ldr	r3, [r7, #8]
 801a980:	4a3b      	ldr	r2, [pc, #236]	; (801aa70 <USB_SetTurnaroundTime+0x124>)
 801a982:	4293      	cmp	r3, r2
 801a984:	d802      	bhi.n	801a98c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801a986:	230e      	movs	r3, #14
 801a988:	617b      	str	r3, [r7, #20]
 801a98a:	e057      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801a98c:	68bb      	ldr	r3, [r7, #8]
 801a98e:	4a38      	ldr	r2, [pc, #224]	; (801aa70 <USB_SetTurnaroundTime+0x124>)
 801a990:	4293      	cmp	r3, r2
 801a992:	d906      	bls.n	801a9a2 <USB_SetTurnaroundTime+0x56>
 801a994:	68bb      	ldr	r3, [r7, #8]
 801a996:	4a37      	ldr	r2, [pc, #220]	; (801aa74 <USB_SetTurnaroundTime+0x128>)
 801a998:	4293      	cmp	r3, r2
 801a99a:	d802      	bhi.n	801a9a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801a99c:	230d      	movs	r3, #13
 801a99e:	617b      	str	r3, [r7, #20]
 801a9a0:	e04c      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801a9a2:	68bb      	ldr	r3, [r7, #8]
 801a9a4:	4a33      	ldr	r2, [pc, #204]	; (801aa74 <USB_SetTurnaroundTime+0x128>)
 801a9a6:	4293      	cmp	r3, r2
 801a9a8:	d906      	bls.n	801a9b8 <USB_SetTurnaroundTime+0x6c>
 801a9aa:	68bb      	ldr	r3, [r7, #8]
 801a9ac:	4a32      	ldr	r2, [pc, #200]	; (801aa78 <USB_SetTurnaroundTime+0x12c>)
 801a9ae:	4293      	cmp	r3, r2
 801a9b0:	d802      	bhi.n	801a9b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801a9b2:	230c      	movs	r3, #12
 801a9b4:	617b      	str	r3, [r7, #20]
 801a9b6:	e041      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801a9b8:	68bb      	ldr	r3, [r7, #8]
 801a9ba:	4a2f      	ldr	r2, [pc, #188]	; (801aa78 <USB_SetTurnaroundTime+0x12c>)
 801a9bc:	4293      	cmp	r3, r2
 801a9be:	d906      	bls.n	801a9ce <USB_SetTurnaroundTime+0x82>
 801a9c0:	68bb      	ldr	r3, [r7, #8]
 801a9c2:	4a2e      	ldr	r2, [pc, #184]	; (801aa7c <USB_SetTurnaroundTime+0x130>)
 801a9c4:	4293      	cmp	r3, r2
 801a9c6:	d802      	bhi.n	801a9ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801a9c8:	230b      	movs	r3, #11
 801a9ca:	617b      	str	r3, [r7, #20]
 801a9cc:	e036      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801a9ce:	68bb      	ldr	r3, [r7, #8]
 801a9d0:	4a2a      	ldr	r2, [pc, #168]	; (801aa7c <USB_SetTurnaroundTime+0x130>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d906      	bls.n	801a9e4 <USB_SetTurnaroundTime+0x98>
 801a9d6:	68bb      	ldr	r3, [r7, #8]
 801a9d8:	4a29      	ldr	r2, [pc, #164]	; (801aa80 <USB_SetTurnaroundTime+0x134>)
 801a9da:	4293      	cmp	r3, r2
 801a9dc:	d802      	bhi.n	801a9e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801a9de:	230a      	movs	r3, #10
 801a9e0:	617b      	str	r3, [r7, #20]
 801a9e2:	e02b      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801a9e4:	68bb      	ldr	r3, [r7, #8]
 801a9e6:	4a26      	ldr	r2, [pc, #152]	; (801aa80 <USB_SetTurnaroundTime+0x134>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	d906      	bls.n	801a9fa <USB_SetTurnaroundTime+0xae>
 801a9ec:	68bb      	ldr	r3, [r7, #8]
 801a9ee:	4a25      	ldr	r2, [pc, #148]	; (801aa84 <USB_SetTurnaroundTime+0x138>)
 801a9f0:	4293      	cmp	r3, r2
 801a9f2:	d802      	bhi.n	801a9fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801a9f4:	2309      	movs	r3, #9
 801a9f6:	617b      	str	r3, [r7, #20]
 801a9f8:	e020      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801a9fa:	68bb      	ldr	r3, [r7, #8]
 801a9fc:	4a21      	ldr	r2, [pc, #132]	; (801aa84 <USB_SetTurnaroundTime+0x138>)
 801a9fe:	4293      	cmp	r3, r2
 801aa00:	d906      	bls.n	801aa10 <USB_SetTurnaroundTime+0xc4>
 801aa02:	68bb      	ldr	r3, [r7, #8]
 801aa04:	4a20      	ldr	r2, [pc, #128]	; (801aa88 <USB_SetTurnaroundTime+0x13c>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d802      	bhi.n	801aa10 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801aa0a:	2308      	movs	r3, #8
 801aa0c:	617b      	str	r3, [r7, #20]
 801aa0e:	e015      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801aa10:	68bb      	ldr	r3, [r7, #8]
 801aa12:	4a1d      	ldr	r2, [pc, #116]	; (801aa88 <USB_SetTurnaroundTime+0x13c>)
 801aa14:	4293      	cmp	r3, r2
 801aa16:	d906      	bls.n	801aa26 <USB_SetTurnaroundTime+0xda>
 801aa18:	68bb      	ldr	r3, [r7, #8]
 801aa1a:	4a1c      	ldr	r2, [pc, #112]	; (801aa8c <USB_SetTurnaroundTime+0x140>)
 801aa1c:	4293      	cmp	r3, r2
 801aa1e:	d802      	bhi.n	801aa26 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801aa20:	2307      	movs	r3, #7
 801aa22:	617b      	str	r3, [r7, #20]
 801aa24:	e00a      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801aa26:	2306      	movs	r3, #6
 801aa28:	617b      	str	r3, [r7, #20]
 801aa2a:	e007      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801aa2c:	79fb      	ldrb	r3, [r7, #7]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d102      	bne.n	801aa38 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801aa32:	2309      	movs	r3, #9
 801aa34:	617b      	str	r3, [r7, #20]
 801aa36:	e001      	b.n	801aa3c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801aa38:	2309      	movs	r3, #9
 801aa3a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801aa3c:	68fb      	ldr	r3, [r7, #12]
 801aa3e:	68db      	ldr	r3, [r3, #12]
 801aa40:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801aa44:	68fb      	ldr	r3, [r7, #12]
 801aa46:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801aa48:	68fb      	ldr	r3, [r7, #12]
 801aa4a:	68da      	ldr	r2, [r3, #12]
 801aa4c:	697b      	ldr	r3, [r7, #20]
 801aa4e:	029b      	lsls	r3, r3, #10
 801aa50:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801aa54:	431a      	orrs	r2, r3
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801aa5a:	2300      	movs	r3, #0
}
 801aa5c:	4618      	mov	r0, r3
 801aa5e:	371c      	adds	r7, #28
 801aa60:	46bd      	mov	sp, r7
 801aa62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa66:	4770      	bx	lr
 801aa68:	00d8acbf 	.word	0x00d8acbf
 801aa6c:	00e4e1bf 	.word	0x00e4e1bf
 801aa70:	00f423ff 	.word	0x00f423ff
 801aa74:	0106737f 	.word	0x0106737f
 801aa78:	011a499f 	.word	0x011a499f
 801aa7c:	01312cff 	.word	0x01312cff
 801aa80:	014ca43f 	.word	0x014ca43f
 801aa84:	016e35ff 	.word	0x016e35ff
 801aa88:	01a6ab1f 	.word	0x01a6ab1f
 801aa8c:	01e847ff 	.word	0x01e847ff

0801aa90 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801aa90:	b480      	push	{r7}
 801aa92:	b083      	sub	sp, #12
 801aa94:	af00      	add	r7, sp, #0
 801aa96:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801aa98:	687b      	ldr	r3, [r7, #4]
 801aa9a:	689b      	ldr	r3, [r3, #8]
 801aa9c:	f043 0201 	orr.w	r2, r3, #1
 801aaa0:	687b      	ldr	r3, [r7, #4]
 801aaa2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801aaa4:	2300      	movs	r3, #0
}
 801aaa6:	4618      	mov	r0, r3
 801aaa8:	370c      	adds	r7, #12
 801aaaa:	46bd      	mov	sp, r7
 801aaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aab0:	4770      	bx	lr

0801aab2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801aab2:	b480      	push	{r7}
 801aab4:	b083      	sub	sp, #12
 801aab6:	af00      	add	r7, sp, #0
 801aab8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801aaba:	687b      	ldr	r3, [r7, #4]
 801aabc:	689b      	ldr	r3, [r3, #8]
 801aabe:	f023 0201 	bic.w	r2, r3, #1
 801aac2:	687b      	ldr	r3, [r7, #4]
 801aac4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801aac6:	2300      	movs	r3, #0
}
 801aac8:	4618      	mov	r0, r3
 801aaca:	370c      	adds	r7, #12
 801aacc:	46bd      	mov	sp, r7
 801aace:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aad2:	4770      	bx	lr

0801aad4 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801aad4:	b580      	push	{r7, lr}
 801aad6:	b082      	sub	sp, #8
 801aad8:	af00      	add	r7, sp, #0
 801aada:	6078      	str	r0, [r7, #4]
 801aadc:	460b      	mov	r3, r1
 801aade:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801aae0:	687b      	ldr	r3, [r7, #4]
 801aae2:	68db      	ldr	r3, [r3, #12]
 801aae4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801aae8:	687b      	ldr	r3, [r7, #4]
 801aaea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801aaec:	78fb      	ldrb	r3, [r7, #3]
 801aaee:	2b01      	cmp	r3, #1
 801aaf0:	d106      	bne.n	801ab00 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	68db      	ldr	r3, [r3, #12]
 801aaf6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	60da      	str	r2, [r3, #12]
 801aafe:	e00b      	b.n	801ab18 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801ab00:	78fb      	ldrb	r3, [r7, #3]
 801ab02:	2b00      	cmp	r3, #0
 801ab04:	d106      	bne.n	801ab14 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801ab06:	687b      	ldr	r3, [r7, #4]
 801ab08:	68db      	ldr	r3, [r3, #12]
 801ab0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801ab0e:	687b      	ldr	r3, [r7, #4]
 801ab10:	60da      	str	r2, [r3, #12]
 801ab12:	e001      	b.n	801ab18 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801ab14:	2301      	movs	r3, #1
 801ab16:	e003      	b.n	801ab20 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801ab18:	2032      	movs	r0, #50	; 0x32
 801ab1a:	f7f7 fe7f 	bl	801281c <HAL_Delay>

  return HAL_OK;
 801ab1e:	2300      	movs	r3, #0
}
 801ab20:	4618      	mov	r0, r3
 801ab22:	3708      	adds	r7, #8
 801ab24:	46bd      	mov	sp, r7
 801ab26:	bd80      	pop	{r7, pc}

0801ab28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ab28:	b084      	sub	sp, #16
 801ab2a:	b580      	push	{r7, lr}
 801ab2c:	b086      	sub	sp, #24
 801ab2e:	af00      	add	r7, sp, #0
 801ab30:	6078      	str	r0, [r7, #4]
 801ab32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ab36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801ab3a:	2300      	movs	r3, #0
 801ab3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ab3e:	687b      	ldr	r3, [r7, #4]
 801ab40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801ab42:	2300      	movs	r3, #0
 801ab44:	613b      	str	r3, [r7, #16]
 801ab46:	e009      	b.n	801ab5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801ab48:	687a      	ldr	r2, [r7, #4]
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	3340      	adds	r3, #64	; 0x40
 801ab4e:	009b      	lsls	r3, r3, #2
 801ab50:	4413      	add	r3, r2
 801ab52:	2200      	movs	r2, #0
 801ab54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801ab56:	693b      	ldr	r3, [r7, #16]
 801ab58:	3301      	adds	r3, #1
 801ab5a:	613b      	str	r3, [r7, #16]
 801ab5c:	693b      	ldr	r3, [r7, #16]
 801ab5e:	2b0e      	cmp	r3, #14
 801ab60:	d9f2      	bls.n	801ab48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801ab62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d11c      	bne.n	801aba2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	68fa      	ldr	r2, [r7, #12]
 801ab72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ab76:	f043 0302 	orr.w	r3, r3, #2
 801ab7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	601a      	str	r2, [r3, #0]
 801aba0:	e005      	b.n	801abae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801aba2:	687b      	ldr	r3, [r7, #4]
 801aba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aba6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801abae:	68fb      	ldr	r3, [r7, #12]
 801abb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801abb4:	461a      	mov	r2, r3
 801abb6:	2300      	movs	r3, #0
 801abb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801abba:	68fb      	ldr	r3, [r7, #12]
 801abbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801abc0:	4619      	mov	r1, r3
 801abc2:	68fb      	ldr	r3, [r7, #12]
 801abc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801abc8:	461a      	mov	r2, r3
 801abca:	680b      	ldr	r3, [r1, #0]
 801abcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801abce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd0:	2b01      	cmp	r3, #1
 801abd2:	d10c      	bne.n	801abee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801abd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801abd6:	2b00      	cmp	r3, #0
 801abd8:	d104      	bne.n	801abe4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801abda:	2100      	movs	r1, #0
 801abdc:	6878      	ldr	r0, [r7, #4]
 801abde:	f000 f949 	bl	801ae74 <USB_SetDevSpeed>
 801abe2:	e008      	b.n	801abf6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801abe4:	2101      	movs	r1, #1
 801abe6:	6878      	ldr	r0, [r7, #4]
 801abe8:	f000 f944 	bl	801ae74 <USB_SetDevSpeed>
 801abec:	e003      	b.n	801abf6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801abee:	2103      	movs	r1, #3
 801abf0:	6878      	ldr	r0, [r7, #4]
 801abf2:	f000 f93f 	bl	801ae74 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801abf6:	2110      	movs	r1, #16
 801abf8:	6878      	ldr	r0, [r7, #4]
 801abfa:	f000 f8f3 	bl	801ade4 <USB_FlushTxFifo>
 801abfe:	4603      	mov	r3, r0
 801ac00:	2b00      	cmp	r3, #0
 801ac02:	d001      	beq.n	801ac08 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801ac04:	2301      	movs	r3, #1
 801ac06:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801ac08:	6878      	ldr	r0, [r7, #4]
 801ac0a:	f000 f911 	bl	801ae30 <USB_FlushRxFifo>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d001      	beq.n	801ac18 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801ac14:	2301      	movs	r3, #1
 801ac16:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801ac18:	68fb      	ldr	r3, [r7, #12]
 801ac1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac1e:	461a      	mov	r2, r3
 801ac20:	2300      	movs	r3, #0
 801ac22:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801ac24:	68fb      	ldr	r3, [r7, #12]
 801ac26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac2a:	461a      	mov	r2, r3
 801ac2c:	2300      	movs	r3, #0
 801ac2e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801ac30:	68fb      	ldr	r3, [r7, #12]
 801ac32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ac36:	461a      	mov	r2, r3
 801ac38:	2300      	movs	r3, #0
 801ac3a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801ac3c:	2300      	movs	r3, #0
 801ac3e:	613b      	str	r3, [r7, #16]
 801ac40:	e043      	b.n	801acca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801ac42:	693b      	ldr	r3, [r7, #16]
 801ac44:	015a      	lsls	r2, r3, #5
 801ac46:	68fb      	ldr	r3, [r7, #12]
 801ac48:	4413      	add	r3, r2
 801ac4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801ac54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801ac58:	d118      	bne.n	801ac8c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801ac5a:	693b      	ldr	r3, [r7, #16]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d10a      	bne.n	801ac76 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801ac60:	693b      	ldr	r3, [r7, #16]
 801ac62:	015a      	lsls	r2, r3, #5
 801ac64:	68fb      	ldr	r3, [r7, #12]
 801ac66:	4413      	add	r3, r2
 801ac68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac6c:	461a      	mov	r2, r3
 801ac6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ac72:	6013      	str	r3, [r2, #0]
 801ac74:	e013      	b.n	801ac9e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801ac76:	693b      	ldr	r3, [r7, #16]
 801ac78:	015a      	lsls	r2, r3, #5
 801ac7a:	68fb      	ldr	r3, [r7, #12]
 801ac7c:	4413      	add	r3, r2
 801ac7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac82:	461a      	mov	r2, r3
 801ac84:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801ac88:	6013      	str	r3, [r2, #0]
 801ac8a:	e008      	b.n	801ac9e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801ac8c:	693b      	ldr	r3, [r7, #16]
 801ac8e:	015a      	lsls	r2, r3, #5
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	4413      	add	r3, r2
 801ac94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ac98:	461a      	mov	r2, r3
 801ac9a:	2300      	movs	r3, #0
 801ac9c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801ac9e:	693b      	ldr	r3, [r7, #16]
 801aca0:	015a      	lsls	r2, r3, #5
 801aca2:	68fb      	ldr	r3, [r7, #12]
 801aca4:	4413      	add	r3, r2
 801aca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801acaa:	461a      	mov	r2, r3
 801acac:	2300      	movs	r3, #0
 801acae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801acb0:	693b      	ldr	r3, [r7, #16]
 801acb2:	015a      	lsls	r2, r3, #5
 801acb4:	68fb      	ldr	r3, [r7, #12]
 801acb6:	4413      	add	r3, r2
 801acb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801acbc:	461a      	mov	r2, r3
 801acbe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801acc2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801acc4:	693b      	ldr	r3, [r7, #16]
 801acc6:	3301      	adds	r3, #1
 801acc8:	613b      	str	r3, [r7, #16]
 801acca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801accc:	693a      	ldr	r2, [r7, #16]
 801acce:	429a      	cmp	r2, r3
 801acd0:	d3b7      	bcc.n	801ac42 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801acd2:	2300      	movs	r3, #0
 801acd4:	613b      	str	r3, [r7, #16]
 801acd6:	e043      	b.n	801ad60 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801acd8:	693b      	ldr	r3, [r7, #16]
 801acda:	015a      	lsls	r2, r3, #5
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	4413      	add	r3, r2
 801ace0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ace4:	681b      	ldr	r3, [r3, #0]
 801ace6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801acea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801acee:	d118      	bne.n	801ad22 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	2b00      	cmp	r3, #0
 801acf4:	d10a      	bne.n	801ad0c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801acf6:	693b      	ldr	r3, [r7, #16]
 801acf8:	015a      	lsls	r2, r3, #5
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	4413      	add	r3, r2
 801acfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad02:	461a      	mov	r2, r3
 801ad04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801ad08:	6013      	str	r3, [r2, #0]
 801ad0a:	e013      	b.n	801ad34 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801ad0c:	693b      	ldr	r3, [r7, #16]
 801ad0e:	015a      	lsls	r2, r3, #5
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	4413      	add	r3, r2
 801ad14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad18:	461a      	mov	r2, r3
 801ad1a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801ad1e:	6013      	str	r3, [r2, #0]
 801ad20:	e008      	b.n	801ad34 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801ad22:	693b      	ldr	r3, [r7, #16]
 801ad24:	015a      	lsls	r2, r3, #5
 801ad26:	68fb      	ldr	r3, [r7, #12]
 801ad28:	4413      	add	r3, r2
 801ad2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad2e:	461a      	mov	r2, r3
 801ad30:	2300      	movs	r3, #0
 801ad32:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801ad34:	693b      	ldr	r3, [r7, #16]
 801ad36:	015a      	lsls	r2, r3, #5
 801ad38:	68fb      	ldr	r3, [r7, #12]
 801ad3a:	4413      	add	r3, r2
 801ad3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad40:	461a      	mov	r2, r3
 801ad42:	2300      	movs	r3, #0
 801ad44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801ad46:	693b      	ldr	r3, [r7, #16]
 801ad48:	015a      	lsls	r2, r3, #5
 801ad4a:	68fb      	ldr	r3, [r7, #12]
 801ad4c:	4413      	add	r3, r2
 801ad4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ad52:	461a      	mov	r2, r3
 801ad54:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801ad58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	3301      	adds	r3, #1
 801ad5e:	613b      	str	r3, [r7, #16]
 801ad60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad62:	693a      	ldr	r2, [r7, #16]
 801ad64:	429a      	cmp	r2, r3
 801ad66:	d3b7      	bcc.n	801acd8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801ad68:	68fb      	ldr	r3, [r7, #12]
 801ad6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ad6e:	691b      	ldr	r3, [r3, #16]
 801ad70:	68fa      	ldr	r2, [r7, #12]
 801ad72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ad76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801ad7a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	2200      	movs	r2, #0
 801ad80:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801ad88:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801ad8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad8c:	2b00      	cmp	r3, #0
 801ad8e:	d105      	bne.n	801ad9c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	699b      	ldr	r3, [r3, #24]
 801ad94:	f043 0210 	orr.w	r2, r3, #16
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801ad9c:	687b      	ldr	r3, [r7, #4]
 801ad9e:	699a      	ldr	r2, [r3, #24]
 801ada0:	4b0e      	ldr	r3, [pc, #56]	; (801addc <USB_DevInit+0x2b4>)
 801ada2:	4313      	orrs	r3, r2
 801ada4:	687a      	ldr	r2, [r7, #4]
 801ada6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801ada8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801adaa:	2b00      	cmp	r3, #0
 801adac:	d005      	beq.n	801adba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801adae:	687b      	ldr	r3, [r7, #4]
 801adb0:	699b      	ldr	r3, [r3, #24]
 801adb2:	f043 0208 	orr.w	r2, r3, #8
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801adba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801adbc:	2b01      	cmp	r3, #1
 801adbe:	d105      	bne.n	801adcc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	699a      	ldr	r2, [r3, #24]
 801adc4:	4b06      	ldr	r3, [pc, #24]	; (801ade0 <USB_DevInit+0x2b8>)
 801adc6:	4313      	orrs	r3, r2
 801adc8:	687a      	ldr	r2, [r7, #4]
 801adca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801adcc:	7dfb      	ldrb	r3, [r7, #23]
}
 801adce:	4618      	mov	r0, r3
 801add0:	3718      	adds	r7, #24
 801add2:	46bd      	mov	sp, r7
 801add4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801add8:	b004      	add	sp, #16
 801adda:	4770      	bx	lr
 801addc:	803c3800 	.word	0x803c3800
 801ade0:	40000004 	.word	0x40000004

0801ade4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801ade4:	b480      	push	{r7}
 801ade6:	b085      	sub	sp, #20
 801ade8:	af00      	add	r7, sp, #0
 801adea:	6078      	str	r0, [r7, #4]
 801adec:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801adee:	2300      	movs	r3, #0
 801adf0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801adf2:	683b      	ldr	r3, [r7, #0]
 801adf4:	019b      	lsls	r3, r3, #6
 801adf6:	f043 0220 	orr.w	r2, r3, #32
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	3301      	adds	r3, #1
 801ae02:	60fb      	str	r3, [r7, #12]
 801ae04:	68fb      	ldr	r3, [r7, #12]
 801ae06:	4a09      	ldr	r2, [pc, #36]	; (801ae2c <USB_FlushTxFifo+0x48>)
 801ae08:	4293      	cmp	r3, r2
 801ae0a:	d901      	bls.n	801ae10 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801ae0c:	2303      	movs	r3, #3
 801ae0e:	e006      	b.n	801ae1e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801ae10:	687b      	ldr	r3, [r7, #4]
 801ae12:	691b      	ldr	r3, [r3, #16]
 801ae14:	f003 0320 	and.w	r3, r3, #32
 801ae18:	2b20      	cmp	r3, #32
 801ae1a:	d0f0      	beq.n	801adfe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801ae1c:	2300      	movs	r3, #0
}
 801ae1e:	4618      	mov	r0, r3
 801ae20:	3714      	adds	r7, #20
 801ae22:	46bd      	mov	sp, r7
 801ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae28:	4770      	bx	lr
 801ae2a:	bf00      	nop
 801ae2c:	00030d40 	.word	0x00030d40

0801ae30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801ae30:	b480      	push	{r7}
 801ae32:	b085      	sub	sp, #20
 801ae34:	af00      	add	r7, sp, #0
 801ae36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801ae38:	2300      	movs	r3, #0
 801ae3a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	2210      	movs	r2, #16
 801ae40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	3301      	adds	r3, #1
 801ae46:	60fb      	str	r3, [r7, #12]
 801ae48:	68fb      	ldr	r3, [r7, #12]
 801ae4a:	4a09      	ldr	r2, [pc, #36]	; (801ae70 <USB_FlushRxFifo+0x40>)
 801ae4c:	4293      	cmp	r3, r2
 801ae4e:	d901      	bls.n	801ae54 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801ae50:	2303      	movs	r3, #3
 801ae52:	e006      	b.n	801ae62 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	691b      	ldr	r3, [r3, #16]
 801ae58:	f003 0310 	and.w	r3, r3, #16
 801ae5c:	2b10      	cmp	r3, #16
 801ae5e:	d0f0      	beq.n	801ae42 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801ae60:	2300      	movs	r3, #0
}
 801ae62:	4618      	mov	r0, r3
 801ae64:	3714      	adds	r7, #20
 801ae66:	46bd      	mov	sp, r7
 801ae68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae6c:	4770      	bx	lr
 801ae6e:	bf00      	nop
 801ae70:	00030d40 	.word	0x00030d40

0801ae74 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801ae74:	b480      	push	{r7}
 801ae76:	b085      	sub	sp, #20
 801ae78:	af00      	add	r7, sp, #0
 801ae7a:	6078      	str	r0, [r7, #4]
 801ae7c:	460b      	mov	r3, r1
 801ae7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801ae84:	68fb      	ldr	r3, [r7, #12]
 801ae86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae8a:	681a      	ldr	r2, [r3, #0]
 801ae8c:	78fb      	ldrb	r3, [r7, #3]
 801ae8e:	68f9      	ldr	r1, [r7, #12]
 801ae90:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ae94:	4313      	orrs	r3, r2
 801ae96:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3714      	adds	r7, #20
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea4:	4770      	bx	lr

0801aea6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801aea6:	b480      	push	{r7}
 801aea8:	b087      	sub	sp, #28
 801aeaa:	af00      	add	r7, sp, #0
 801aeac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801aeb2:	693b      	ldr	r3, [r7, #16]
 801aeb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aeb8:	689b      	ldr	r3, [r3, #8]
 801aeba:	f003 0306 	and.w	r3, r3, #6
 801aebe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d102      	bne.n	801aecc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801aec6:	2300      	movs	r3, #0
 801aec8:	75fb      	strb	r3, [r7, #23]
 801aeca:	e00a      	b.n	801aee2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801aecc:	68fb      	ldr	r3, [r7, #12]
 801aece:	2b02      	cmp	r3, #2
 801aed0:	d002      	beq.n	801aed8 <USB_GetDevSpeed+0x32>
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	2b06      	cmp	r3, #6
 801aed6:	d102      	bne.n	801aede <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801aed8:	2302      	movs	r3, #2
 801aeda:	75fb      	strb	r3, [r7, #23]
 801aedc:	e001      	b.n	801aee2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801aede:	230f      	movs	r3, #15
 801aee0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801aee2:	7dfb      	ldrb	r3, [r7, #23]
}
 801aee4:	4618      	mov	r0, r3
 801aee6:	371c      	adds	r7, #28
 801aee8:	46bd      	mov	sp, r7
 801aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aeee:	4770      	bx	lr

0801aef0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801aef0:	b480      	push	{r7}
 801aef2:	b085      	sub	sp, #20
 801aef4:	af00      	add	r7, sp, #0
 801aef6:	6078      	str	r0, [r7, #4]
 801aef8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801aefe:	683b      	ldr	r3, [r7, #0]
 801af00:	781b      	ldrb	r3, [r3, #0]
 801af02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801af04:	683b      	ldr	r3, [r7, #0]
 801af06:	785b      	ldrb	r3, [r3, #1]
 801af08:	2b01      	cmp	r3, #1
 801af0a:	d139      	bne.n	801af80 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801af0c:	68fb      	ldr	r3, [r7, #12]
 801af0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801af12:	69da      	ldr	r2, [r3, #28]
 801af14:	683b      	ldr	r3, [r7, #0]
 801af16:	781b      	ldrb	r3, [r3, #0]
 801af18:	f003 030f 	and.w	r3, r3, #15
 801af1c:	2101      	movs	r1, #1
 801af1e:	fa01 f303 	lsl.w	r3, r1, r3
 801af22:	b29b      	uxth	r3, r3
 801af24:	68f9      	ldr	r1, [r7, #12]
 801af26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801af2a:	4313      	orrs	r3, r2
 801af2c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801af2e:	68bb      	ldr	r3, [r7, #8]
 801af30:	015a      	lsls	r2, r3, #5
 801af32:	68fb      	ldr	r3, [r7, #12]
 801af34:	4413      	add	r3, r2
 801af36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801af40:	2b00      	cmp	r3, #0
 801af42:	d153      	bne.n	801afec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801af44:	68bb      	ldr	r3, [r7, #8]
 801af46:	015a      	lsls	r2, r3, #5
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	4413      	add	r3, r2
 801af4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af50:	681a      	ldr	r2, [r3, #0]
 801af52:	683b      	ldr	r3, [r7, #0]
 801af54:	689b      	ldr	r3, [r3, #8]
 801af56:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801af5a:	683b      	ldr	r3, [r7, #0]
 801af5c:	78db      	ldrb	r3, [r3, #3]
 801af5e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801af60:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801af62:	68bb      	ldr	r3, [r7, #8]
 801af64:	059b      	lsls	r3, r3, #22
 801af66:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801af68:	431a      	orrs	r2, r3
 801af6a:	68bb      	ldr	r3, [r7, #8]
 801af6c:	0159      	lsls	r1, r3, #5
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	440b      	add	r3, r1
 801af72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af76:	4619      	mov	r1, r3
 801af78:	4b20      	ldr	r3, [pc, #128]	; (801affc <USB_ActivateEndpoint+0x10c>)
 801af7a:	4313      	orrs	r3, r2
 801af7c:	600b      	str	r3, [r1, #0]
 801af7e:	e035      	b.n	801afec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801af86:	69da      	ldr	r2, [r3, #28]
 801af88:	683b      	ldr	r3, [r7, #0]
 801af8a:	781b      	ldrb	r3, [r3, #0]
 801af8c:	f003 030f 	and.w	r3, r3, #15
 801af90:	2101      	movs	r1, #1
 801af92:	fa01 f303 	lsl.w	r3, r1, r3
 801af96:	041b      	lsls	r3, r3, #16
 801af98:	68f9      	ldr	r1, [r7, #12]
 801af9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801af9e:	4313      	orrs	r3, r2
 801afa0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801afa2:	68bb      	ldr	r3, [r7, #8]
 801afa4:	015a      	lsls	r2, r3, #5
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	4413      	add	r3, r2
 801afaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afae:	681b      	ldr	r3, [r3, #0]
 801afb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d119      	bne.n	801afec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801afb8:	68bb      	ldr	r3, [r7, #8]
 801afba:	015a      	lsls	r2, r3, #5
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	4413      	add	r3, r2
 801afc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afc4:	681a      	ldr	r2, [r3, #0]
 801afc6:	683b      	ldr	r3, [r7, #0]
 801afc8:	689b      	ldr	r3, [r3, #8]
 801afca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801afce:	683b      	ldr	r3, [r7, #0]
 801afd0:	78db      	ldrb	r3, [r3, #3]
 801afd2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801afd4:	430b      	orrs	r3, r1
 801afd6:	431a      	orrs	r2, r3
 801afd8:	68bb      	ldr	r3, [r7, #8]
 801afda:	0159      	lsls	r1, r3, #5
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	440b      	add	r3, r1
 801afe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afe4:	4619      	mov	r1, r3
 801afe6:	4b05      	ldr	r3, [pc, #20]	; (801affc <USB_ActivateEndpoint+0x10c>)
 801afe8:	4313      	orrs	r3, r2
 801afea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801afec:	2300      	movs	r3, #0
}
 801afee:	4618      	mov	r0, r3
 801aff0:	3714      	adds	r7, #20
 801aff2:	46bd      	mov	sp, r7
 801aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aff8:	4770      	bx	lr
 801affa:	bf00      	nop
 801affc:	10008000 	.word	0x10008000

0801b000 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b000:	b480      	push	{r7}
 801b002:	b085      	sub	sp, #20
 801b004:	af00      	add	r7, sp, #0
 801b006:	6078      	str	r0, [r7, #4]
 801b008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b00e:	683b      	ldr	r3, [r7, #0]
 801b010:	781b      	ldrb	r3, [r3, #0]
 801b012:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b014:	683b      	ldr	r3, [r7, #0]
 801b016:	785b      	ldrb	r3, [r3, #1]
 801b018:	2b01      	cmp	r3, #1
 801b01a:	d135      	bne.n	801b088 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b01c:	68fb      	ldr	r3, [r7, #12]
 801b01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	781b      	ldrb	r3, [r3, #0]
 801b028:	f003 030f 	and.w	r3, r3, #15
 801b02c:	2101      	movs	r1, #1
 801b02e:	fa01 f303 	lsl.w	r3, r1, r3
 801b032:	b29b      	uxth	r3, r3
 801b034:	43db      	mvns	r3, r3
 801b036:	68f9      	ldr	r1, [r7, #12]
 801b038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b03c:	4013      	ands	r3, r2
 801b03e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b040:	68fb      	ldr	r3, [r7, #12]
 801b042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b046:	69da      	ldr	r2, [r3, #28]
 801b048:	683b      	ldr	r3, [r7, #0]
 801b04a:	781b      	ldrb	r3, [r3, #0]
 801b04c:	f003 030f 	and.w	r3, r3, #15
 801b050:	2101      	movs	r1, #1
 801b052:	fa01 f303 	lsl.w	r3, r1, r3
 801b056:	b29b      	uxth	r3, r3
 801b058:	43db      	mvns	r3, r3
 801b05a:	68f9      	ldr	r1, [r7, #12]
 801b05c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b060:	4013      	ands	r3, r2
 801b062:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b064:	68bb      	ldr	r3, [r7, #8]
 801b066:	015a      	lsls	r2, r3, #5
 801b068:	68fb      	ldr	r3, [r7, #12]
 801b06a:	4413      	add	r3, r2
 801b06c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b070:	681a      	ldr	r2, [r3, #0]
 801b072:	68bb      	ldr	r3, [r7, #8]
 801b074:	0159      	lsls	r1, r3, #5
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	440b      	add	r3, r1
 801b07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b07e:	4619      	mov	r1, r3
 801b080:	4b1f      	ldr	r3, [pc, #124]	; (801b100 <USB_DeactivateEndpoint+0x100>)
 801b082:	4013      	ands	r3, r2
 801b084:	600b      	str	r3, [r1, #0]
 801b086:	e034      	b.n	801b0f2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b088:	68fb      	ldr	r3, [r7, #12]
 801b08a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b08e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b090:	683b      	ldr	r3, [r7, #0]
 801b092:	781b      	ldrb	r3, [r3, #0]
 801b094:	f003 030f 	and.w	r3, r3, #15
 801b098:	2101      	movs	r1, #1
 801b09a:	fa01 f303 	lsl.w	r3, r1, r3
 801b09e:	041b      	lsls	r3, r3, #16
 801b0a0:	43db      	mvns	r3, r3
 801b0a2:	68f9      	ldr	r1, [r7, #12]
 801b0a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b0a8:	4013      	ands	r3, r2
 801b0aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b0b2:	69da      	ldr	r2, [r3, #28]
 801b0b4:	683b      	ldr	r3, [r7, #0]
 801b0b6:	781b      	ldrb	r3, [r3, #0]
 801b0b8:	f003 030f 	and.w	r3, r3, #15
 801b0bc:	2101      	movs	r1, #1
 801b0be:	fa01 f303 	lsl.w	r3, r1, r3
 801b0c2:	041b      	lsls	r3, r3, #16
 801b0c4:	43db      	mvns	r3, r3
 801b0c6:	68f9      	ldr	r1, [r7, #12]
 801b0c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b0cc:	4013      	ands	r3, r2
 801b0ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b0d0:	68bb      	ldr	r3, [r7, #8]
 801b0d2:	015a      	lsls	r2, r3, #5
 801b0d4:	68fb      	ldr	r3, [r7, #12]
 801b0d6:	4413      	add	r3, r2
 801b0d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0dc:	681a      	ldr	r2, [r3, #0]
 801b0de:	68bb      	ldr	r3, [r7, #8]
 801b0e0:	0159      	lsls	r1, r3, #5
 801b0e2:	68fb      	ldr	r3, [r7, #12]
 801b0e4:	440b      	add	r3, r1
 801b0e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b0ea:	4619      	mov	r1, r3
 801b0ec:	4b05      	ldr	r3, [pc, #20]	; (801b104 <USB_DeactivateEndpoint+0x104>)
 801b0ee:	4013      	ands	r3, r2
 801b0f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b0f2:	2300      	movs	r3, #0
}
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	3714      	adds	r7, #20
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0fe:	4770      	bx	lr
 801b100:	ec337800 	.word	0xec337800
 801b104:	eff37800 	.word	0xeff37800

0801b108 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b108:	b580      	push	{r7, lr}
 801b10a:	b08a      	sub	sp, #40	; 0x28
 801b10c:	af02      	add	r7, sp, #8
 801b10e:	60f8      	str	r0, [r7, #12]
 801b110:	60b9      	str	r1, [r7, #8]
 801b112:	4613      	mov	r3, r2
 801b114:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b116:	68fb      	ldr	r3, [r7, #12]
 801b118:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b11a:	68bb      	ldr	r3, [r7, #8]
 801b11c:	781b      	ldrb	r3, [r3, #0]
 801b11e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b120:	68bb      	ldr	r3, [r7, #8]
 801b122:	785b      	ldrb	r3, [r3, #1]
 801b124:	2b01      	cmp	r3, #1
 801b126:	f040 8163 	bne.w	801b3f0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b12a:	68bb      	ldr	r3, [r7, #8]
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d132      	bne.n	801b198 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b132:	69bb      	ldr	r3, [r7, #24]
 801b134:	015a      	lsls	r2, r3, #5
 801b136:	69fb      	ldr	r3, [r7, #28]
 801b138:	4413      	add	r3, r2
 801b13a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b13e:	691a      	ldr	r2, [r3, #16]
 801b140:	69bb      	ldr	r3, [r7, #24]
 801b142:	0159      	lsls	r1, r3, #5
 801b144:	69fb      	ldr	r3, [r7, #28]
 801b146:	440b      	add	r3, r1
 801b148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b14c:	4619      	mov	r1, r3
 801b14e:	4ba5      	ldr	r3, [pc, #660]	; (801b3e4 <USB_EPStartXfer+0x2dc>)
 801b150:	4013      	ands	r3, r2
 801b152:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b154:	69bb      	ldr	r3, [r7, #24]
 801b156:	015a      	lsls	r2, r3, #5
 801b158:	69fb      	ldr	r3, [r7, #28]
 801b15a:	4413      	add	r3, r2
 801b15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b160:	691b      	ldr	r3, [r3, #16]
 801b162:	69ba      	ldr	r2, [r7, #24]
 801b164:	0151      	lsls	r1, r2, #5
 801b166:	69fa      	ldr	r2, [r7, #28]
 801b168:	440a      	add	r2, r1
 801b16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b16e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b172:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b174:	69bb      	ldr	r3, [r7, #24]
 801b176:	015a      	lsls	r2, r3, #5
 801b178:	69fb      	ldr	r3, [r7, #28]
 801b17a:	4413      	add	r3, r2
 801b17c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b180:	691a      	ldr	r2, [r3, #16]
 801b182:	69bb      	ldr	r3, [r7, #24]
 801b184:	0159      	lsls	r1, r3, #5
 801b186:	69fb      	ldr	r3, [r7, #28]
 801b188:	440b      	add	r3, r1
 801b18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b18e:	4619      	mov	r1, r3
 801b190:	4b95      	ldr	r3, [pc, #596]	; (801b3e8 <USB_EPStartXfer+0x2e0>)
 801b192:	4013      	ands	r3, r2
 801b194:	610b      	str	r3, [r1, #16]
 801b196:	e074      	b.n	801b282 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b198:	69bb      	ldr	r3, [r7, #24]
 801b19a:	015a      	lsls	r2, r3, #5
 801b19c:	69fb      	ldr	r3, [r7, #28]
 801b19e:	4413      	add	r3, r2
 801b1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1a4:	691a      	ldr	r2, [r3, #16]
 801b1a6:	69bb      	ldr	r3, [r7, #24]
 801b1a8:	0159      	lsls	r1, r3, #5
 801b1aa:	69fb      	ldr	r3, [r7, #28]
 801b1ac:	440b      	add	r3, r1
 801b1ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1b2:	4619      	mov	r1, r3
 801b1b4:	4b8c      	ldr	r3, [pc, #560]	; (801b3e8 <USB_EPStartXfer+0x2e0>)
 801b1b6:	4013      	ands	r3, r2
 801b1b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b1ba:	69bb      	ldr	r3, [r7, #24]
 801b1bc:	015a      	lsls	r2, r3, #5
 801b1be:	69fb      	ldr	r3, [r7, #28]
 801b1c0:	4413      	add	r3, r2
 801b1c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1c6:	691a      	ldr	r2, [r3, #16]
 801b1c8:	69bb      	ldr	r3, [r7, #24]
 801b1ca:	0159      	lsls	r1, r3, #5
 801b1cc:	69fb      	ldr	r3, [r7, #28]
 801b1ce:	440b      	add	r3, r1
 801b1d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1d4:	4619      	mov	r1, r3
 801b1d6:	4b83      	ldr	r3, [pc, #524]	; (801b3e4 <USB_EPStartXfer+0x2dc>)
 801b1d8:	4013      	ands	r3, r2
 801b1da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b1dc:	69bb      	ldr	r3, [r7, #24]
 801b1de:	015a      	lsls	r2, r3, #5
 801b1e0:	69fb      	ldr	r3, [r7, #28]
 801b1e2:	4413      	add	r3, r2
 801b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1e8:	691a      	ldr	r2, [r3, #16]
 801b1ea:	68bb      	ldr	r3, [r7, #8]
 801b1ec:	6959      	ldr	r1, [r3, #20]
 801b1ee:	68bb      	ldr	r3, [r7, #8]
 801b1f0:	689b      	ldr	r3, [r3, #8]
 801b1f2:	440b      	add	r3, r1
 801b1f4:	1e59      	subs	r1, r3, #1
 801b1f6:	68bb      	ldr	r3, [r7, #8]
 801b1f8:	689b      	ldr	r3, [r3, #8]
 801b1fa:	fbb1 f3f3 	udiv	r3, r1, r3
 801b1fe:	04d9      	lsls	r1, r3, #19
 801b200:	4b7a      	ldr	r3, [pc, #488]	; (801b3ec <USB_EPStartXfer+0x2e4>)
 801b202:	400b      	ands	r3, r1
 801b204:	69b9      	ldr	r1, [r7, #24]
 801b206:	0148      	lsls	r0, r1, #5
 801b208:	69f9      	ldr	r1, [r7, #28]
 801b20a:	4401      	add	r1, r0
 801b20c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b210:	4313      	orrs	r3, r2
 801b212:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b214:	69bb      	ldr	r3, [r7, #24]
 801b216:	015a      	lsls	r2, r3, #5
 801b218:	69fb      	ldr	r3, [r7, #28]
 801b21a:	4413      	add	r3, r2
 801b21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b220:	691a      	ldr	r2, [r3, #16]
 801b222:	68bb      	ldr	r3, [r7, #8]
 801b224:	695b      	ldr	r3, [r3, #20]
 801b226:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b22a:	69b9      	ldr	r1, [r7, #24]
 801b22c:	0148      	lsls	r0, r1, #5
 801b22e:	69f9      	ldr	r1, [r7, #28]
 801b230:	4401      	add	r1, r0
 801b232:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b236:	4313      	orrs	r3, r2
 801b238:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b23a:	68bb      	ldr	r3, [r7, #8]
 801b23c:	78db      	ldrb	r3, [r3, #3]
 801b23e:	2b01      	cmp	r3, #1
 801b240:	d11f      	bne.n	801b282 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b242:	69bb      	ldr	r3, [r7, #24]
 801b244:	015a      	lsls	r2, r3, #5
 801b246:	69fb      	ldr	r3, [r7, #28]
 801b248:	4413      	add	r3, r2
 801b24a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b24e:	691b      	ldr	r3, [r3, #16]
 801b250:	69ba      	ldr	r2, [r7, #24]
 801b252:	0151      	lsls	r1, r2, #5
 801b254:	69fa      	ldr	r2, [r7, #28]
 801b256:	440a      	add	r2, r1
 801b258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b25c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b260:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b262:	69bb      	ldr	r3, [r7, #24]
 801b264:	015a      	lsls	r2, r3, #5
 801b266:	69fb      	ldr	r3, [r7, #28]
 801b268:	4413      	add	r3, r2
 801b26a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b26e:	691b      	ldr	r3, [r3, #16]
 801b270:	69ba      	ldr	r2, [r7, #24]
 801b272:	0151      	lsls	r1, r2, #5
 801b274:	69fa      	ldr	r2, [r7, #28]
 801b276:	440a      	add	r2, r1
 801b278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b27c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b280:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b282:	79fb      	ldrb	r3, [r7, #7]
 801b284:	2b01      	cmp	r3, #1
 801b286:	d14b      	bne.n	801b320 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	691b      	ldr	r3, [r3, #16]
 801b28c:	2b00      	cmp	r3, #0
 801b28e:	d009      	beq.n	801b2a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b290:	69bb      	ldr	r3, [r7, #24]
 801b292:	015a      	lsls	r2, r3, #5
 801b294:	69fb      	ldr	r3, [r7, #28]
 801b296:	4413      	add	r3, r2
 801b298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b29c:	461a      	mov	r2, r3
 801b29e:	68bb      	ldr	r3, [r7, #8]
 801b2a0:	691b      	ldr	r3, [r3, #16]
 801b2a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801b2a4:	68bb      	ldr	r3, [r7, #8]
 801b2a6:	78db      	ldrb	r3, [r3, #3]
 801b2a8:	2b01      	cmp	r3, #1
 801b2aa:	d128      	bne.n	801b2fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b2ac:	69fb      	ldr	r3, [r7, #28]
 801b2ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2b2:	689b      	ldr	r3, [r3, #8]
 801b2b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b2b8:	2b00      	cmp	r3, #0
 801b2ba:	d110      	bne.n	801b2de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b2bc:	69bb      	ldr	r3, [r7, #24]
 801b2be:	015a      	lsls	r2, r3, #5
 801b2c0:	69fb      	ldr	r3, [r7, #28]
 801b2c2:	4413      	add	r3, r2
 801b2c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	69ba      	ldr	r2, [r7, #24]
 801b2cc:	0151      	lsls	r1, r2, #5
 801b2ce:	69fa      	ldr	r2, [r7, #28]
 801b2d0:	440a      	add	r2, r1
 801b2d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b2d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b2da:	6013      	str	r3, [r2, #0]
 801b2dc:	e00f      	b.n	801b2fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b2de:	69bb      	ldr	r3, [r7, #24]
 801b2e0:	015a      	lsls	r2, r3, #5
 801b2e2:	69fb      	ldr	r3, [r7, #28]
 801b2e4:	4413      	add	r3, r2
 801b2e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	69ba      	ldr	r2, [r7, #24]
 801b2ee:	0151      	lsls	r1, r2, #5
 801b2f0:	69fa      	ldr	r2, [r7, #28]
 801b2f2:	440a      	add	r2, r1
 801b2f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b2f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b2fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b2fe:	69bb      	ldr	r3, [r7, #24]
 801b300:	015a      	lsls	r2, r3, #5
 801b302:	69fb      	ldr	r3, [r7, #28]
 801b304:	4413      	add	r3, r2
 801b306:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b30a:	681b      	ldr	r3, [r3, #0]
 801b30c:	69ba      	ldr	r2, [r7, #24]
 801b30e:	0151      	lsls	r1, r2, #5
 801b310:	69fa      	ldr	r2, [r7, #28]
 801b312:	440a      	add	r2, r1
 801b314:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b31c:	6013      	str	r3, [r2, #0]
 801b31e:	e133      	b.n	801b588 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b320:	69bb      	ldr	r3, [r7, #24]
 801b322:	015a      	lsls	r2, r3, #5
 801b324:	69fb      	ldr	r3, [r7, #28]
 801b326:	4413      	add	r3, r2
 801b328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	69ba      	ldr	r2, [r7, #24]
 801b330:	0151      	lsls	r1, r2, #5
 801b332:	69fa      	ldr	r2, [r7, #28]
 801b334:	440a      	add	r2, r1
 801b336:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b33a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b33e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	78db      	ldrb	r3, [r3, #3]
 801b344:	2b01      	cmp	r3, #1
 801b346:	d015      	beq.n	801b374 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801b348:	68bb      	ldr	r3, [r7, #8]
 801b34a:	695b      	ldr	r3, [r3, #20]
 801b34c:	2b00      	cmp	r3, #0
 801b34e:	f000 811b 	beq.w	801b588 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b352:	69fb      	ldr	r3, [r7, #28]
 801b354:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b35a:	68bb      	ldr	r3, [r7, #8]
 801b35c:	781b      	ldrb	r3, [r3, #0]
 801b35e:	f003 030f 	and.w	r3, r3, #15
 801b362:	2101      	movs	r1, #1
 801b364:	fa01 f303 	lsl.w	r3, r1, r3
 801b368:	69f9      	ldr	r1, [r7, #28]
 801b36a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b36e:	4313      	orrs	r3, r2
 801b370:	634b      	str	r3, [r1, #52]	; 0x34
 801b372:	e109      	b.n	801b588 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b374:	69fb      	ldr	r3, [r7, #28]
 801b376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b37a:	689b      	ldr	r3, [r3, #8]
 801b37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b380:	2b00      	cmp	r3, #0
 801b382:	d110      	bne.n	801b3a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b384:	69bb      	ldr	r3, [r7, #24]
 801b386:	015a      	lsls	r2, r3, #5
 801b388:	69fb      	ldr	r3, [r7, #28]
 801b38a:	4413      	add	r3, r2
 801b38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b390:	681b      	ldr	r3, [r3, #0]
 801b392:	69ba      	ldr	r2, [r7, #24]
 801b394:	0151      	lsls	r1, r2, #5
 801b396:	69fa      	ldr	r2, [r7, #28]
 801b398:	440a      	add	r2, r1
 801b39a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b39e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b3a2:	6013      	str	r3, [r2, #0]
 801b3a4:	e00f      	b.n	801b3c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b3a6:	69bb      	ldr	r3, [r7, #24]
 801b3a8:	015a      	lsls	r2, r3, #5
 801b3aa:	69fb      	ldr	r3, [r7, #28]
 801b3ac:	4413      	add	r3, r2
 801b3ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3b2:	681b      	ldr	r3, [r3, #0]
 801b3b4:	69ba      	ldr	r2, [r7, #24]
 801b3b6:	0151      	lsls	r1, r2, #5
 801b3b8:	69fa      	ldr	r2, [r7, #28]
 801b3ba:	440a      	add	r2, r1
 801b3bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b3c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b3c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801b3c6:	68bb      	ldr	r3, [r7, #8]
 801b3c8:	68d9      	ldr	r1, [r3, #12]
 801b3ca:	68bb      	ldr	r3, [r7, #8]
 801b3cc:	781a      	ldrb	r2, [r3, #0]
 801b3ce:	68bb      	ldr	r3, [r7, #8]
 801b3d0:	695b      	ldr	r3, [r3, #20]
 801b3d2:	b298      	uxth	r0, r3
 801b3d4:	79fb      	ldrb	r3, [r7, #7]
 801b3d6:	9300      	str	r3, [sp, #0]
 801b3d8:	4603      	mov	r3, r0
 801b3da:	68f8      	ldr	r0, [r7, #12]
 801b3dc:	f000 fa38 	bl	801b850 <USB_WritePacket>
 801b3e0:	e0d2      	b.n	801b588 <USB_EPStartXfer+0x480>
 801b3e2:	bf00      	nop
 801b3e4:	e007ffff 	.word	0xe007ffff
 801b3e8:	fff80000 	.word	0xfff80000
 801b3ec:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b3f0:	69bb      	ldr	r3, [r7, #24]
 801b3f2:	015a      	lsls	r2, r3, #5
 801b3f4:	69fb      	ldr	r3, [r7, #28]
 801b3f6:	4413      	add	r3, r2
 801b3f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b3fc:	691a      	ldr	r2, [r3, #16]
 801b3fe:	69bb      	ldr	r3, [r7, #24]
 801b400:	0159      	lsls	r1, r3, #5
 801b402:	69fb      	ldr	r3, [r7, #28]
 801b404:	440b      	add	r3, r1
 801b406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b40a:	4619      	mov	r1, r3
 801b40c:	4b61      	ldr	r3, [pc, #388]	; (801b594 <USB_EPStartXfer+0x48c>)
 801b40e:	4013      	ands	r3, r2
 801b410:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b412:	69bb      	ldr	r3, [r7, #24]
 801b414:	015a      	lsls	r2, r3, #5
 801b416:	69fb      	ldr	r3, [r7, #28]
 801b418:	4413      	add	r3, r2
 801b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b41e:	691a      	ldr	r2, [r3, #16]
 801b420:	69bb      	ldr	r3, [r7, #24]
 801b422:	0159      	lsls	r1, r3, #5
 801b424:	69fb      	ldr	r3, [r7, #28]
 801b426:	440b      	add	r3, r1
 801b428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b42c:	4619      	mov	r1, r3
 801b42e:	4b5a      	ldr	r3, [pc, #360]	; (801b598 <USB_EPStartXfer+0x490>)
 801b430:	4013      	ands	r3, r2
 801b432:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801b434:	68bb      	ldr	r3, [r7, #8]
 801b436:	695b      	ldr	r3, [r3, #20]
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d123      	bne.n	801b484 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801b43c:	69bb      	ldr	r3, [r7, #24]
 801b43e:	015a      	lsls	r2, r3, #5
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	4413      	add	r3, r2
 801b444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b448:	691a      	ldr	r2, [r3, #16]
 801b44a:	68bb      	ldr	r3, [r7, #8]
 801b44c:	689b      	ldr	r3, [r3, #8]
 801b44e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b452:	69b9      	ldr	r1, [r7, #24]
 801b454:	0148      	lsls	r0, r1, #5
 801b456:	69f9      	ldr	r1, [r7, #28]
 801b458:	4401      	add	r1, r0
 801b45a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b45e:	4313      	orrs	r3, r2
 801b460:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b462:	69bb      	ldr	r3, [r7, #24]
 801b464:	015a      	lsls	r2, r3, #5
 801b466:	69fb      	ldr	r3, [r7, #28]
 801b468:	4413      	add	r3, r2
 801b46a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b46e:	691b      	ldr	r3, [r3, #16]
 801b470:	69ba      	ldr	r2, [r7, #24]
 801b472:	0151      	lsls	r1, r2, #5
 801b474:	69fa      	ldr	r2, [r7, #28]
 801b476:	440a      	add	r2, r1
 801b478:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b47c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b480:	6113      	str	r3, [r2, #16]
 801b482:	e033      	b.n	801b4ec <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801b484:	68bb      	ldr	r3, [r7, #8]
 801b486:	695a      	ldr	r2, [r3, #20]
 801b488:	68bb      	ldr	r3, [r7, #8]
 801b48a:	689b      	ldr	r3, [r3, #8]
 801b48c:	4413      	add	r3, r2
 801b48e:	1e5a      	subs	r2, r3, #1
 801b490:	68bb      	ldr	r3, [r7, #8]
 801b492:	689b      	ldr	r3, [r3, #8]
 801b494:	fbb2 f3f3 	udiv	r3, r2, r3
 801b498:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801b49a:	69bb      	ldr	r3, [r7, #24]
 801b49c:	015a      	lsls	r2, r3, #5
 801b49e:	69fb      	ldr	r3, [r7, #28]
 801b4a0:	4413      	add	r3, r2
 801b4a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4a6:	691a      	ldr	r2, [r3, #16]
 801b4a8:	8afb      	ldrh	r3, [r7, #22]
 801b4aa:	04d9      	lsls	r1, r3, #19
 801b4ac:	4b3b      	ldr	r3, [pc, #236]	; (801b59c <USB_EPStartXfer+0x494>)
 801b4ae:	400b      	ands	r3, r1
 801b4b0:	69b9      	ldr	r1, [r7, #24]
 801b4b2:	0148      	lsls	r0, r1, #5
 801b4b4:	69f9      	ldr	r1, [r7, #28]
 801b4b6:	4401      	add	r1, r0
 801b4b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b4bc:	4313      	orrs	r3, r2
 801b4be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801b4c0:	69bb      	ldr	r3, [r7, #24]
 801b4c2:	015a      	lsls	r2, r3, #5
 801b4c4:	69fb      	ldr	r3, [r7, #28]
 801b4c6:	4413      	add	r3, r2
 801b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b4cc:	691a      	ldr	r2, [r3, #16]
 801b4ce:	68bb      	ldr	r3, [r7, #8]
 801b4d0:	689b      	ldr	r3, [r3, #8]
 801b4d2:	8af9      	ldrh	r1, [r7, #22]
 801b4d4:	fb01 f303 	mul.w	r3, r1, r3
 801b4d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b4dc:	69b9      	ldr	r1, [r7, #24]
 801b4de:	0148      	lsls	r0, r1, #5
 801b4e0:	69f9      	ldr	r1, [r7, #28]
 801b4e2:	4401      	add	r1, r0
 801b4e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b4e8:	4313      	orrs	r3, r2
 801b4ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b4ec:	79fb      	ldrb	r3, [r7, #7]
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d10d      	bne.n	801b50e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	68db      	ldr	r3, [r3, #12]
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d009      	beq.n	801b50e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b4fa:	68bb      	ldr	r3, [r7, #8]
 801b4fc:	68d9      	ldr	r1, [r3, #12]
 801b4fe:	69bb      	ldr	r3, [r7, #24]
 801b500:	015a      	lsls	r2, r3, #5
 801b502:	69fb      	ldr	r3, [r7, #28]
 801b504:	4413      	add	r3, r2
 801b506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b50a:	460a      	mov	r2, r1
 801b50c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801b50e:	68bb      	ldr	r3, [r7, #8]
 801b510:	78db      	ldrb	r3, [r3, #3]
 801b512:	2b01      	cmp	r3, #1
 801b514:	d128      	bne.n	801b568 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b516:	69fb      	ldr	r3, [r7, #28]
 801b518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b51c:	689b      	ldr	r3, [r3, #8]
 801b51e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b522:	2b00      	cmp	r3, #0
 801b524:	d110      	bne.n	801b548 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801b526:	69bb      	ldr	r3, [r7, #24]
 801b528:	015a      	lsls	r2, r3, #5
 801b52a:	69fb      	ldr	r3, [r7, #28]
 801b52c:	4413      	add	r3, r2
 801b52e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	69ba      	ldr	r2, [r7, #24]
 801b536:	0151      	lsls	r1, r2, #5
 801b538:	69fa      	ldr	r2, [r7, #28]
 801b53a:	440a      	add	r2, r1
 801b53c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b544:	6013      	str	r3, [r2, #0]
 801b546:	e00f      	b.n	801b568 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801b548:	69bb      	ldr	r3, [r7, #24]
 801b54a:	015a      	lsls	r2, r3, #5
 801b54c:	69fb      	ldr	r3, [r7, #28]
 801b54e:	4413      	add	r3, r2
 801b550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b554:	681b      	ldr	r3, [r3, #0]
 801b556:	69ba      	ldr	r2, [r7, #24]
 801b558:	0151      	lsls	r1, r2, #5
 801b55a:	69fa      	ldr	r2, [r7, #28]
 801b55c:	440a      	add	r2, r1
 801b55e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b566:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b568:	69bb      	ldr	r3, [r7, #24]
 801b56a:	015a      	lsls	r2, r3, #5
 801b56c:	69fb      	ldr	r3, [r7, #28]
 801b56e:	4413      	add	r3, r2
 801b570:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	69ba      	ldr	r2, [r7, #24]
 801b578:	0151      	lsls	r1, r2, #5
 801b57a:	69fa      	ldr	r2, [r7, #28]
 801b57c:	440a      	add	r2, r1
 801b57e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b586:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b588:	2300      	movs	r3, #0
}
 801b58a:	4618      	mov	r0, r3
 801b58c:	3720      	adds	r7, #32
 801b58e:	46bd      	mov	sp, r7
 801b590:	bd80      	pop	{r7, pc}
 801b592:	bf00      	nop
 801b594:	fff80000 	.word	0xfff80000
 801b598:	e007ffff 	.word	0xe007ffff
 801b59c:	1ff80000 	.word	0x1ff80000

0801b5a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b5a0:	b480      	push	{r7}
 801b5a2:	b087      	sub	sp, #28
 801b5a4:	af00      	add	r7, sp, #0
 801b5a6:	60f8      	str	r0, [r7, #12]
 801b5a8:	60b9      	str	r1, [r7, #8]
 801b5aa:	4613      	mov	r3, r2
 801b5ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b5ae:	68fb      	ldr	r3, [r7, #12]
 801b5b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801b5b2:	68bb      	ldr	r3, [r7, #8]
 801b5b4:	781b      	ldrb	r3, [r3, #0]
 801b5b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b5b8:	68bb      	ldr	r3, [r7, #8]
 801b5ba:	785b      	ldrb	r3, [r3, #1]
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	f040 80cd 	bne.w	801b75c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b5c2:	68bb      	ldr	r3, [r7, #8]
 801b5c4:	695b      	ldr	r3, [r3, #20]
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d132      	bne.n	801b630 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b5ca:	693b      	ldr	r3, [r7, #16]
 801b5cc:	015a      	lsls	r2, r3, #5
 801b5ce:	697b      	ldr	r3, [r7, #20]
 801b5d0:	4413      	add	r3, r2
 801b5d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5d6:	691a      	ldr	r2, [r3, #16]
 801b5d8:	693b      	ldr	r3, [r7, #16]
 801b5da:	0159      	lsls	r1, r3, #5
 801b5dc:	697b      	ldr	r3, [r7, #20]
 801b5de:	440b      	add	r3, r1
 801b5e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5e4:	4619      	mov	r1, r3
 801b5e6:	4b98      	ldr	r3, [pc, #608]	; (801b848 <USB_EP0StartXfer+0x2a8>)
 801b5e8:	4013      	ands	r3, r2
 801b5ea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b5ec:	693b      	ldr	r3, [r7, #16]
 801b5ee:	015a      	lsls	r2, r3, #5
 801b5f0:	697b      	ldr	r3, [r7, #20]
 801b5f2:	4413      	add	r3, r2
 801b5f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5f8:	691b      	ldr	r3, [r3, #16]
 801b5fa:	693a      	ldr	r2, [r7, #16]
 801b5fc:	0151      	lsls	r1, r2, #5
 801b5fe:	697a      	ldr	r2, [r7, #20]
 801b600:	440a      	add	r2, r1
 801b602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b606:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b60a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b60c:	693b      	ldr	r3, [r7, #16]
 801b60e:	015a      	lsls	r2, r3, #5
 801b610:	697b      	ldr	r3, [r7, #20]
 801b612:	4413      	add	r3, r2
 801b614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b618:	691a      	ldr	r2, [r3, #16]
 801b61a:	693b      	ldr	r3, [r7, #16]
 801b61c:	0159      	lsls	r1, r3, #5
 801b61e:	697b      	ldr	r3, [r7, #20]
 801b620:	440b      	add	r3, r1
 801b622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b626:	4619      	mov	r1, r3
 801b628:	4b88      	ldr	r3, [pc, #544]	; (801b84c <USB_EP0StartXfer+0x2ac>)
 801b62a:	4013      	ands	r3, r2
 801b62c:	610b      	str	r3, [r1, #16]
 801b62e:	e04e      	b.n	801b6ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b630:	693b      	ldr	r3, [r7, #16]
 801b632:	015a      	lsls	r2, r3, #5
 801b634:	697b      	ldr	r3, [r7, #20]
 801b636:	4413      	add	r3, r2
 801b638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b63c:	691a      	ldr	r2, [r3, #16]
 801b63e:	693b      	ldr	r3, [r7, #16]
 801b640:	0159      	lsls	r1, r3, #5
 801b642:	697b      	ldr	r3, [r7, #20]
 801b644:	440b      	add	r3, r1
 801b646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b64a:	4619      	mov	r1, r3
 801b64c:	4b7f      	ldr	r3, [pc, #508]	; (801b84c <USB_EP0StartXfer+0x2ac>)
 801b64e:	4013      	ands	r3, r2
 801b650:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b652:	693b      	ldr	r3, [r7, #16]
 801b654:	015a      	lsls	r2, r3, #5
 801b656:	697b      	ldr	r3, [r7, #20]
 801b658:	4413      	add	r3, r2
 801b65a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b65e:	691a      	ldr	r2, [r3, #16]
 801b660:	693b      	ldr	r3, [r7, #16]
 801b662:	0159      	lsls	r1, r3, #5
 801b664:	697b      	ldr	r3, [r7, #20]
 801b666:	440b      	add	r3, r1
 801b668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b66c:	4619      	mov	r1, r3
 801b66e:	4b76      	ldr	r3, [pc, #472]	; (801b848 <USB_EP0StartXfer+0x2a8>)
 801b670:	4013      	ands	r3, r2
 801b672:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	695a      	ldr	r2, [r3, #20]
 801b678:	68bb      	ldr	r3, [r7, #8]
 801b67a:	689b      	ldr	r3, [r3, #8]
 801b67c:	429a      	cmp	r2, r3
 801b67e:	d903      	bls.n	801b688 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801b680:	68bb      	ldr	r3, [r7, #8]
 801b682:	689a      	ldr	r2, [r3, #8]
 801b684:	68bb      	ldr	r3, [r7, #8]
 801b686:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b688:	693b      	ldr	r3, [r7, #16]
 801b68a:	015a      	lsls	r2, r3, #5
 801b68c:	697b      	ldr	r3, [r7, #20]
 801b68e:	4413      	add	r3, r2
 801b690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b694:	691b      	ldr	r3, [r3, #16]
 801b696:	693a      	ldr	r2, [r7, #16]
 801b698:	0151      	lsls	r1, r2, #5
 801b69a:	697a      	ldr	r2, [r7, #20]
 801b69c:	440a      	add	r2, r1
 801b69e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b6a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b6a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b6a8:	693b      	ldr	r3, [r7, #16]
 801b6aa:	015a      	lsls	r2, r3, #5
 801b6ac:	697b      	ldr	r3, [r7, #20]
 801b6ae:	4413      	add	r3, r2
 801b6b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6b4:	691a      	ldr	r2, [r3, #16]
 801b6b6:	68bb      	ldr	r3, [r7, #8]
 801b6b8:	695b      	ldr	r3, [r3, #20]
 801b6ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b6be:	6939      	ldr	r1, [r7, #16]
 801b6c0:	0148      	lsls	r0, r1, #5
 801b6c2:	6979      	ldr	r1, [r7, #20]
 801b6c4:	4401      	add	r1, r0
 801b6c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b6ca:	4313      	orrs	r3, r2
 801b6cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b6ce:	79fb      	ldrb	r3, [r7, #7]
 801b6d0:	2b01      	cmp	r3, #1
 801b6d2:	d11e      	bne.n	801b712 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b6d4:	68bb      	ldr	r3, [r7, #8]
 801b6d6:	691b      	ldr	r3, [r3, #16]
 801b6d8:	2b00      	cmp	r3, #0
 801b6da:	d009      	beq.n	801b6f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b6dc:	693b      	ldr	r3, [r7, #16]
 801b6de:	015a      	lsls	r2, r3, #5
 801b6e0:	697b      	ldr	r3, [r7, #20]
 801b6e2:	4413      	add	r3, r2
 801b6e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6e8:	461a      	mov	r2, r3
 801b6ea:	68bb      	ldr	r3, [r7, #8]
 801b6ec:	691b      	ldr	r3, [r3, #16]
 801b6ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b6f0:	693b      	ldr	r3, [r7, #16]
 801b6f2:	015a      	lsls	r2, r3, #5
 801b6f4:	697b      	ldr	r3, [r7, #20]
 801b6f6:	4413      	add	r3, r2
 801b6f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b6fc:	681b      	ldr	r3, [r3, #0]
 801b6fe:	693a      	ldr	r2, [r7, #16]
 801b700:	0151      	lsls	r1, r2, #5
 801b702:	697a      	ldr	r2, [r7, #20]
 801b704:	440a      	add	r2, r1
 801b706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b70a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b70e:	6013      	str	r3, [r2, #0]
 801b710:	e092      	b.n	801b838 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b712:	693b      	ldr	r3, [r7, #16]
 801b714:	015a      	lsls	r2, r3, #5
 801b716:	697b      	ldr	r3, [r7, #20]
 801b718:	4413      	add	r3, r2
 801b71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	693a      	ldr	r2, [r7, #16]
 801b722:	0151      	lsls	r1, r2, #5
 801b724:	697a      	ldr	r2, [r7, #20]
 801b726:	440a      	add	r2, r1
 801b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b72c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b730:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801b732:	68bb      	ldr	r3, [r7, #8]
 801b734:	695b      	ldr	r3, [r3, #20]
 801b736:	2b00      	cmp	r3, #0
 801b738:	d07e      	beq.n	801b838 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b73a:	697b      	ldr	r3, [r7, #20]
 801b73c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b740:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b742:	68bb      	ldr	r3, [r7, #8]
 801b744:	781b      	ldrb	r3, [r3, #0]
 801b746:	f003 030f 	and.w	r3, r3, #15
 801b74a:	2101      	movs	r1, #1
 801b74c:	fa01 f303 	lsl.w	r3, r1, r3
 801b750:	6979      	ldr	r1, [r7, #20]
 801b752:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b756:	4313      	orrs	r3, r2
 801b758:	634b      	str	r3, [r1, #52]	; 0x34
 801b75a:	e06d      	b.n	801b838 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b75c:	693b      	ldr	r3, [r7, #16]
 801b75e:	015a      	lsls	r2, r3, #5
 801b760:	697b      	ldr	r3, [r7, #20]
 801b762:	4413      	add	r3, r2
 801b764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b768:	691a      	ldr	r2, [r3, #16]
 801b76a:	693b      	ldr	r3, [r7, #16]
 801b76c:	0159      	lsls	r1, r3, #5
 801b76e:	697b      	ldr	r3, [r7, #20]
 801b770:	440b      	add	r3, r1
 801b772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b776:	4619      	mov	r1, r3
 801b778:	4b34      	ldr	r3, [pc, #208]	; (801b84c <USB_EP0StartXfer+0x2ac>)
 801b77a:	4013      	ands	r3, r2
 801b77c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b77e:	693b      	ldr	r3, [r7, #16]
 801b780:	015a      	lsls	r2, r3, #5
 801b782:	697b      	ldr	r3, [r7, #20]
 801b784:	4413      	add	r3, r2
 801b786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b78a:	691a      	ldr	r2, [r3, #16]
 801b78c:	693b      	ldr	r3, [r7, #16]
 801b78e:	0159      	lsls	r1, r3, #5
 801b790:	697b      	ldr	r3, [r7, #20]
 801b792:	440b      	add	r3, r1
 801b794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b798:	4619      	mov	r1, r3
 801b79a:	4b2b      	ldr	r3, [pc, #172]	; (801b848 <USB_EP0StartXfer+0x2a8>)
 801b79c:	4013      	ands	r3, r2
 801b79e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801b7a0:	68bb      	ldr	r3, [r7, #8]
 801b7a2:	695b      	ldr	r3, [r3, #20]
 801b7a4:	2b00      	cmp	r3, #0
 801b7a6:	d003      	beq.n	801b7b0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801b7a8:	68bb      	ldr	r3, [r7, #8]
 801b7aa:	689a      	ldr	r2, [r3, #8]
 801b7ac:	68bb      	ldr	r3, [r7, #8]
 801b7ae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b7b0:	693b      	ldr	r3, [r7, #16]
 801b7b2:	015a      	lsls	r2, r3, #5
 801b7b4:	697b      	ldr	r3, [r7, #20]
 801b7b6:	4413      	add	r3, r2
 801b7b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7bc:	691b      	ldr	r3, [r3, #16]
 801b7be:	693a      	ldr	r2, [r7, #16]
 801b7c0:	0151      	lsls	r1, r2, #5
 801b7c2:	697a      	ldr	r2, [r7, #20]
 801b7c4:	440a      	add	r2, r1
 801b7c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b7ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b7ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801b7d0:	693b      	ldr	r3, [r7, #16]
 801b7d2:	015a      	lsls	r2, r3, #5
 801b7d4:	697b      	ldr	r3, [r7, #20]
 801b7d6:	4413      	add	r3, r2
 801b7d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7dc:	691a      	ldr	r2, [r3, #16]
 801b7de:	68bb      	ldr	r3, [r7, #8]
 801b7e0:	689b      	ldr	r3, [r3, #8]
 801b7e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b7e6:	6939      	ldr	r1, [r7, #16]
 801b7e8:	0148      	lsls	r0, r1, #5
 801b7ea:	6979      	ldr	r1, [r7, #20]
 801b7ec:	4401      	add	r1, r0
 801b7ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b7f2:	4313      	orrs	r3, r2
 801b7f4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801b7f6:	79fb      	ldrb	r3, [r7, #7]
 801b7f8:	2b01      	cmp	r3, #1
 801b7fa:	d10d      	bne.n	801b818 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b7fc:	68bb      	ldr	r3, [r7, #8]
 801b7fe:	68db      	ldr	r3, [r3, #12]
 801b800:	2b00      	cmp	r3, #0
 801b802:	d009      	beq.n	801b818 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b804:	68bb      	ldr	r3, [r7, #8]
 801b806:	68d9      	ldr	r1, [r3, #12]
 801b808:	693b      	ldr	r3, [r7, #16]
 801b80a:	015a      	lsls	r2, r3, #5
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	4413      	add	r3, r2
 801b810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b814:	460a      	mov	r2, r1
 801b816:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b818:	693b      	ldr	r3, [r7, #16]
 801b81a:	015a      	lsls	r2, r3, #5
 801b81c:	697b      	ldr	r3, [r7, #20]
 801b81e:	4413      	add	r3, r2
 801b820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	693a      	ldr	r2, [r7, #16]
 801b828:	0151      	lsls	r1, r2, #5
 801b82a:	697a      	ldr	r2, [r7, #20]
 801b82c:	440a      	add	r2, r1
 801b82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b838:	2300      	movs	r3, #0
}
 801b83a:	4618      	mov	r0, r3
 801b83c:	371c      	adds	r7, #28
 801b83e:	46bd      	mov	sp, r7
 801b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b844:	4770      	bx	lr
 801b846:	bf00      	nop
 801b848:	e007ffff 	.word	0xe007ffff
 801b84c:	fff80000 	.word	0xfff80000

0801b850 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801b850:	b480      	push	{r7}
 801b852:	b089      	sub	sp, #36	; 0x24
 801b854:	af00      	add	r7, sp, #0
 801b856:	60f8      	str	r0, [r7, #12]
 801b858:	60b9      	str	r1, [r7, #8]
 801b85a:	4611      	mov	r1, r2
 801b85c:	461a      	mov	r2, r3
 801b85e:	460b      	mov	r3, r1
 801b860:	71fb      	strb	r3, [r7, #7]
 801b862:	4613      	mov	r3, r2
 801b864:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b866:	68fb      	ldr	r3, [r7, #12]
 801b868:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801b86a:	68bb      	ldr	r3, [r7, #8]
 801b86c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801b86e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801b872:	2b00      	cmp	r3, #0
 801b874:	d11a      	bne.n	801b8ac <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801b876:	88bb      	ldrh	r3, [r7, #4]
 801b878:	3303      	adds	r3, #3
 801b87a:	089b      	lsrs	r3, r3, #2
 801b87c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801b87e:	2300      	movs	r3, #0
 801b880:	61bb      	str	r3, [r7, #24]
 801b882:	e00f      	b.n	801b8a4 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801b884:	79fb      	ldrb	r3, [r7, #7]
 801b886:	031a      	lsls	r2, r3, #12
 801b888:	697b      	ldr	r3, [r7, #20]
 801b88a:	4413      	add	r3, r2
 801b88c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b890:	461a      	mov	r2, r3
 801b892:	69fb      	ldr	r3, [r7, #28]
 801b894:	681b      	ldr	r3, [r3, #0]
 801b896:	6013      	str	r3, [r2, #0]
      pSrc++;
 801b898:	69fb      	ldr	r3, [r7, #28]
 801b89a:	3304      	adds	r3, #4
 801b89c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801b89e:	69bb      	ldr	r3, [r7, #24]
 801b8a0:	3301      	adds	r3, #1
 801b8a2:	61bb      	str	r3, [r7, #24]
 801b8a4:	69ba      	ldr	r2, [r7, #24]
 801b8a6:	693b      	ldr	r3, [r7, #16]
 801b8a8:	429a      	cmp	r2, r3
 801b8aa:	d3eb      	bcc.n	801b884 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801b8ac:	2300      	movs	r3, #0
}
 801b8ae:	4618      	mov	r0, r3
 801b8b0:	3724      	adds	r7, #36	; 0x24
 801b8b2:	46bd      	mov	sp, r7
 801b8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b8b8:	4770      	bx	lr

0801b8ba <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801b8ba:	b480      	push	{r7}
 801b8bc:	b089      	sub	sp, #36	; 0x24
 801b8be:	af00      	add	r7, sp, #0
 801b8c0:	60f8      	str	r0, [r7, #12]
 801b8c2:	60b9      	str	r1, [r7, #8]
 801b8c4:	4613      	mov	r3, r2
 801b8c6:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b8c8:	68fb      	ldr	r3, [r7, #12]
 801b8ca:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801b8d0:	88fb      	ldrh	r3, [r7, #6]
 801b8d2:	3303      	adds	r3, #3
 801b8d4:	089b      	lsrs	r3, r3, #2
 801b8d6:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801b8d8:	2300      	movs	r3, #0
 801b8da:	61bb      	str	r3, [r7, #24]
 801b8dc:	e00b      	b.n	801b8f6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801b8de:	697b      	ldr	r3, [r7, #20]
 801b8e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801b8e4:	681a      	ldr	r2, [r3, #0]
 801b8e6:	69fb      	ldr	r3, [r7, #28]
 801b8e8:	601a      	str	r2, [r3, #0]
    pDest++;
 801b8ea:	69fb      	ldr	r3, [r7, #28]
 801b8ec:	3304      	adds	r3, #4
 801b8ee:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801b8f0:	69bb      	ldr	r3, [r7, #24]
 801b8f2:	3301      	adds	r3, #1
 801b8f4:	61bb      	str	r3, [r7, #24]
 801b8f6:	69ba      	ldr	r2, [r7, #24]
 801b8f8:	693b      	ldr	r3, [r7, #16]
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	d3ef      	bcc.n	801b8de <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801b8fe:	69fb      	ldr	r3, [r7, #28]
}
 801b900:	4618      	mov	r0, r3
 801b902:	3724      	adds	r7, #36	; 0x24
 801b904:	46bd      	mov	sp, r7
 801b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b90a:	4770      	bx	lr

0801b90c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b90c:	b480      	push	{r7}
 801b90e:	b085      	sub	sp, #20
 801b910:	af00      	add	r7, sp, #0
 801b912:	6078      	str	r0, [r7, #4]
 801b914:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b91a:	683b      	ldr	r3, [r7, #0]
 801b91c:	781b      	ldrb	r3, [r3, #0]
 801b91e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b920:	683b      	ldr	r3, [r7, #0]
 801b922:	785b      	ldrb	r3, [r3, #1]
 801b924:	2b01      	cmp	r3, #1
 801b926:	d12c      	bne.n	801b982 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	015a      	lsls	r2, r3, #5
 801b92c:	68fb      	ldr	r3, [r7, #12]
 801b92e:	4413      	add	r3, r2
 801b930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b934:	681b      	ldr	r3, [r3, #0]
 801b936:	2b00      	cmp	r3, #0
 801b938:	db12      	blt.n	801b960 <USB_EPSetStall+0x54>
 801b93a:	68bb      	ldr	r3, [r7, #8]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d00f      	beq.n	801b960 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801b940:	68bb      	ldr	r3, [r7, #8]
 801b942:	015a      	lsls	r2, r3, #5
 801b944:	68fb      	ldr	r3, [r7, #12]
 801b946:	4413      	add	r3, r2
 801b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b94c:	681b      	ldr	r3, [r3, #0]
 801b94e:	68ba      	ldr	r2, [r7, #8]
 801b950:	0151      	lsls	r1, r2, #5
 801b952:	68fa      	ldr	r2, [r7, #12]
 801b954:	440a      	add	r2, r1
 801b956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b95a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801b95e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801b960:	68bb      	ldr	r3, [r7, #8]
 801b962:	015a      	lsls	r2, r3, #5
 801b964:	68fb      	ldr	r3, [r7, #12]
 801b966:	4413      	add	r3, r2
 801b968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	68ba      	ldr	r2, [r7, #8]
 801b970:	0151      	lsls	r1, r2, #5
 801b972:	68fa      	ldr	r2, [r7, #12]
 801b974:	440a      	add	r2, r1
 801b976:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b97a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b97e:	6013      	str	r3, [r2, #0]
 801b980:	e02b      	b.n	801b9da <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801b982:	68bb      	ldr	r3, [r7, #8]
 801b984:	015a      	lsls	r2, r3, #5
 801b986:	68fb      	ldr	r3, [r7, #12]
 801b988:	4413      	add	r3, r2
 801b98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b98e:	681b      	ldr	r3, [r3, #0]
 801b990:	2b00      	cmp	r3, #0
 801b992:	db12      	blt.n	801b9ba <USB_EPSetStall+0xae>
 801b994:	68bb      	ldr	r3, [r7, #8]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d00f      	beq.n	801b9ba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	015a      	lsls	r2, r3, #5
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	4413      	add	r3, r2
 801b9a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b9a6:	681b      	ldr	r3, [r3, #0]
 801b9a8:	68ba      	ldr	r2, [r7, #8]
 801b9aa:	0151      	lsls	r1, r2, #5
 801b9ac:	68fa      	ldr	r2, [r7, #12]
 801b9ae:	440a      	add	r2, r1
 801b9b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b9b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801b9b8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801b9ba:	68bb      	ldr	r3, [r7, #8]
 801b9bc:	015a      	lsls	r2, r3, #5
 801b9be:	68fb      	ldr	r3, [r7, #12]
 801b9c0:	4413      	add	r3, r2
 801b9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	68ba      	ldr	r2, [r7, #8]
 801b9ca:	0151      	lsls	r1, r2, #5
 801b9cc:	68fa      	ldr	r2, [r7, #12]
 801b9ce:	440a      	add	r2, r1
 801b9d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b9d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801b9d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b9da:	2300      	movs	r3, #0
}
 801b9dc:	4618      	mov	r0, r3
 801b9de:	3714      	adds	r7, #20
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9e6:	4770      	bx	lr

0801b9e8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b9e8:	b480      	push	{r7}
 801b9ea:	b085      	sub	sp, #20
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b9f2:	687b      	ldr	r3, [r7, #4]
 801b9f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b9f6:	683b      	ldr	r3, [r7, #0]
 801b9f8:	781b      	ldrb	r3, [r3, #0]
 801b9fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b9fc:	683b      	ldr	r3, [r7, #0]
 801b9fe:	785b      	ldrb	r3, [r3, #1]
 801ba00:	2b01      	cmp	r3, #1
 801ba02:	d128      	bne.n	801ba56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801ba04:	68bb      	ldr	r3, [r7, #8]
 801ba06:	015a      	lsls	r2, r3, #5
 801ba08:	68fb      	ldr	r3, [r7, #12]
 801ba0a:	4413      	add	r3, r2
 801ba0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	68ba      	ldr	r2, [r7, #8]
 801ba14:	0151      	lsls	r1, r2, #5
 801ba16:	68fa      	ldr	r2, [r7, #12]
 801ba18:	440a      	add	r2, r1
 801ba1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ba22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ba24:	683b      	ldr	r3, [r7, #0]
 801ba26:	78db      	ldrb	r3, [r3, #3]
 801ba28:	2b03      	cmp	r3, #3
 801ba2a:	d003      	beq.n	801ba34 <USB_EPClearStall+0x4c>
 801ba2c:	683b      	ldr	r3, [r7, #0]
 801ba2e:	78db      	ldrb	r3, [r3, #3]
 801ba30:	2b02      	cmp	r3, #2
 801ba32:	d138      	bne.n	801baa6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	015a      	lsls	r2, r3, #5
 801ba38:	68fb      	ldr	r3, [r7, #12]
 801ba3a:	4413      	add	r3, r2
 801ba3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801ba40:	681b      	ldr	r3, [r3, #0]
 801ba42:	68ba      	ldr	r2, [r7, #8]
 801ba44:	0151      	lsls	r1, r2, #5
 801ba46:	68fa      	ldr	r2, [r7, #12]
 801ba48:	440a      	add	r2, r1
 801ba4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801ba4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801ba52:	6013      	str	r3, [r2, #0]
 801ba54:	e027      	b.n	801baa6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801ba56:	68bb      	ldr	r3, [r7, #8]
 801ba58:	015a      	lsls	r2, r3, #5
 801ba5a:	68fb      	ldr	r3, [r7, #12]
 801ba5c:	4413      	add	r3, r2
 801ba5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba62:	681b      	ldr	r3, [r3, #0]
 801ba64:	68ba      	ldr	r2, [r7, #8]
 801ba66:	0151      	lsls	r1, r2, #5
 801ba68:	68fa      	ldr	r2, [r7, #12]
 801ba6a:	440a      	add	r2, r1
 801ba6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ba70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801ba74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801ba76:	683b      	ldr	r3, [r7, #0]
 801ba78:	78db      	ldrb	r3, [r3, #3]
 801ba7a:	2b03      	cmp	r3, #3
 801ba7c:	d003      	beq.n	801ba86 <USB_EPClearStall+0x9e>
 801ba7e:	683b      	ldr	r3, [r7, #0]
 801ba80:	78db      	ldrb	r3, [r3, #3]
 801ba82:	2b02      	cmp	r3, #2
 801ba84:	d10f      	bne.n	801baa6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801ba86:	68bb      	ldr	r3, [r7, #8]
 801ba88:	015a      	lsls	r2, r3, #5
 801ba8a:	68fb      	ldr	r3, [r7, #12]
 801ba8c:	4413      	add	r3, r2
 801ba8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba92:	681b      	ldr	r3, [r3, #0]
 801ba94:	68ba      	ldr	r2, [r7, #8]
 801ba96:	0151      	lsls	r1, r2, #5
 801ba98:	68fa      	ldr	r2, [r7, #12]
 801ba9a:	440a      	add	r2, r1
 801ba9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801baa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801baa4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801baa6:	2300      	movs	r3, #0
}
 801baa8:	4618      	mov	r0, r3
 801baaa:	3714      	adds	r7, #20
 801baac:	46bd      	mov	sp, r7
 801baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab2:	4770      	bx	lr

0801bab4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801bab4:	b480      	push	{r7}
 801bab6:	b085      	sub	sp, #20
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
 801babc:	460b      	mov	r3, r1
 801babe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801bac4:	68fb      	ldr	r3, [r7, #12]
 801bac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801baca:	681b      	ldr	r3, [r3, #0]
 801bacc:	68fa      	ldr	r2, [r7, #12]
 801bace:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bad2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801bad6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801bad8:	68fb      	ldr	r3, [r7, #12]
 801bada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bade:	681a      	ldr	r2, [r3, #0]
 801bae0:	78fb      	ldrb	r3, [r7, #3]
 801bae2:	011b      	lsls	r3, r3, #4
 801bae4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801bae8:	68f9      	ldr	r1, [r7, #12]
 801baea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801baee:	4313      	orrs	r3, r2
 801baf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801baf2:	2300      	movs	r3, #0
}
 801baf4:	4618      	mov	r0, r3
 801baf6:	3714      	adds	r7, #20
 801baf8:	46bd      	mov	sp, r7
 801bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bafe:	4770      	bx	lr

0801bb00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bb00:	b580      	push	{r7, lr}
 801bb02:	b084      	sub	sp, #16
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801bb0c:	68fb      	ldr	r3, [r7, #12]
 801bb0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bb12:	685b      	ldr	r3, [r3, #4]
 801bb14:	68fa      	ldr	r2, [r7, #12]
 801bb16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bb1a:	f023 0302 	bic.w	r3, r3, #2
 801bb1e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801bb20:	2003      	movs	r0, #3
 801bb22:	f7f6 fe7b 	bl	801281c <HAL_Delay>

  return HAL_OK;
 801bb26:	2300      	movs	r3, #0
}
 801bb28:	4618      	mov	r0, r3
 801bb2a:	3710      	adds	r7, #16
 801bb2c:	46bd      	mov	sp, r7
 801bb2e:	bd80      	pop	{r7, pc}

0801bb30 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b084      	sub	sp, #16
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801bb3c:	68fb      	ldr	r3, [r7, #12]
 801bb3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bb42:	685b      	ldr	r3, [r3, #4]
 801bb44:	68fa      	ldr	r2, [r7, #12]
 801bb46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bb4a:	f043 0302 	orr.w	r3, r3, #2
 801bb4e:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801bb50:	2003      	movs	r0, #3
 801bb52:	f7f6 fe63 	bl	801281c <HAL_Delay>

  return HAL_OK;
 801bb56:	2300      	movs	r3, #0
}
 801bb58:	4618      	mov	r0, r3
 801bb5a:	3710      	adds	r7, #16
 801bb5c:	46bd      	mov	sp, r7
 801bb5e:	bd80      	pop	{r7, pc}

0801bb60 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801bb60:	b480      	push	{r7}
 801bb62:	b085      	sub	sp, #20
 801bb64:	af00      	add	r7, sp, #0
 801bb66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	695b      	ldr	r3, [r3, #20]
 801bb6c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801bb6e:	687b      	ldr	r3, [r7, #4]
 801bb70:	699b      	ldr	r3, [r3, #24]
 801bb72:	68fa      	ldr	r2, [r7, #12]
 801bb74:	4013      	ands	r3, r2
 801bb76:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801bb78:	68fb      	ldr	r3, [r7, #12]
}
 801bb7a:	4618      	mov	r0, r3
 801bb7c:	3714      	adds	r7, #20
 801bb7e:	46bd      	mov	sp, r7
 801bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb84:	4770      	bx	lr

0801bb86 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801bb86:	b480      	push	{r7}
 801bb88:	b085      	sub	sp, #20
 801bb8a:	af00      	add	r7, sp, #0
 801bb8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bb98:	699b      	ldr	r3, [r3, #24]
 801bb9a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801bb9c:	68fb      	ldr	r3, [r7, #12]
 801bb9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bba2:	69db      	ldr	r3, [r3, #28]
 801bba4:	68ba      	ldr	r2, [r7, #8]
 801bba6:	4013      	ands	r3, r2
 801bba8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801bbaa:	68bb      	ldr	r3, [r7, #8]
 801bbac:	0c1b      	lsrs	r3, r3, #16
}
 801bbae:	4618      	mov	r0, r3
 801bbb0:	3714      	adds	r7, #20
 801bbb2:	46bd      	mov	sp, r7
 801bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb8:	4770      	bx	lr

0801bbba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801bbba:	b480      	push	{r7}
 801bbbc:	b085      	sub	sp, #20
 801bbbe:	af00      	add	r7, sp, #0
 801bbc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bbc2:	687b      	ldr	r3, [r7, #4]
 801bbc4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801bbc6:	68fb      	ldr	r3, [r7, #12]
 801bbc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbcc:	699b      	ldr	r3, [r3, #24]
 801bbce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801bbd0:	68fb      	ldr	r3, [r7, #12]
 801bbd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bbd6:	69db      	ldr	r3, [r3, #28]
 801bbd8:	68ba      	ldr	r2, [r7, #8]
 801bbda:	4013      	ands	r3, r2
 801bbdc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801bbde:	68bb      	ldr	r3, [r7, #8]
 801bbe0:	b29b      	uxth	r3, r3
}
 801bbe2:	4618      	mov	r0, r3
 801bbe4:	3714      	adds	r7, #20
 801bbe6:	46bd      	mov	sp, r7
 801bbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbec:	4770      	bx	lr

0801bbee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801bbee:	b480      	push	{r7}
 801bbf0:	b085      	sub	sp, #20
 801bbf2:	af00      	add	r7, sp, #0
 801bbf4:	6078      	str	r0, [r7, #4]
 801bbf6:	460b      	mov	r3, r1
 801bbf8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801bbfe:	78fb      	ldrb	r3, [r7, #3]
 801bc00:	015a      	lsls	r2, r3, #5
 801bc02:	68fb      	ldr	r3, [r7, #12]
 801bc04:	4413      	add	r3, r2
 801bc06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc0a:	689b      	ldr	r3, [r3, #8]
 801bc0c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801bc0e:	68fb      	ldr	r3, [r7, #12]
 801bc10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc14:	695b      	ldr	r3, [r3, #20]
 801bc16:	68ba      	ldr	r2, [r7, #8]
 801bc18:	4013      	ands	r3, r2
 801bc1a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bc1c:	68bb      	ldr	r3, [r7, #8]
}
 801bc1e:	4618      	mov	r0, r3
 801bc20:	3714      	adds	r7, #20
 801bc22:	46bd      	mov	sp, r7
 801bc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc28:	4770      	bx	lr

0801bc2a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801bc2a:	b480      	push	{r7}
 801bc2c:	b087      	sub	sp, #28
 801bc2e:	af00      	add	r7, sp, #0
 801bc30:	6078      	str	r0, [r7, #4]
 801bc32:	460b      	mov	r3, r1
 801bc34:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801bc3a:	697b      	ldr	r3, [r7, #20]
 801bc3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc40:	691b      	ldr	r3, [r3, #16]
 801bc42:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801bc44:	697b      	ldr	r3, [r7, #20]
 801bc46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bc4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bc4c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801bc4e:	78fb      	ldrb	r3, [r7, #3]
 801bc50:	f003 030f 	and.w	r3, r3, #15
 801bc54:	68fa      	ldr	r2, [r7, #12]
 801bc56:	fa22 f303 	lsr.w	r3, r2, r3
 801bc5a:	01db      	lsls	r3, r3, #7
 801bc5c:	b2db      	uxtb	r3, r3
 801bc5e:	693a      	ldr	r2, [r7, #16]
 801bc60:	4313      	orrs	r3, r2
 801bc62:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801bc64:	78fb      	ldrb	r3, [r7, #3]
 801bc66:	015a      	lsls	r2, r3, #5
 801bc68:	697b      	ldr	r3, [r7, #20]
 801bc6a:	4413      	add	r3, r2
 801bc6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc70:	689b      	ldr	r3, [r3, #8]
 801bc72:	693a      	ldr	r2, [r7, #16]
 801bc74:	4013      	ands	r3, r2
 801bc76:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bc78:	68bb      	ldr	r3, [r7, #8]
}
 801bc7a:	4618      	mov	r0, r3
 801bc7c:	371c      	adds	r7, #28
 801bc7e:	46bd      	mov	sp, r7
 801bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc84:	4770      	bx	lr

0801bc86 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801bc86:	b480      	push	{r7}
 801bc88:	b083      	sub	sp, #12
 801bc8a:	af00      	add	r7, sp, #0
 801bc8c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801bc8e:	687b      	ldr	r3, [r7, #4]
 801bc90:	695b      	ldr	r3, [r3, #20]
 801bc92:	f003 0301 	and.w	r3, r3, #1
}
 801bc96:	4618      	mov	r0, r3
 801bc98:	370c      	adds	r7, #12
 801bc9a:	46bd      	mov	sp, r7
 801bc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bca0:	4770      	bx	lr
	...

0801bca4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801bca4:	b480      	push	{r7}
 801bca6:	b085      	sub	sp, #20
 801bca8:	af00      	add	r7, sp, #0
 801bcaa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bcac:	687b      	ldr	r3, [r7, #4]
 801bcae:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcb6:	681a      	ldr	r2, [r3, #0]
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcbe:	4619      	mov	r1, r3
 801bcc0:	4b09      	ldr	r3, [pc, #36]	; (801bce8 <USB_ActivateSetup+0x44>)
 801bcc2:	4013      	ands	r3, r2
 801bcc4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801bcc6:	68fb      	ldr	r3, [r7, #12]
 801bcc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bccc:	685b      	ldr	r3, [r3, #4]
 801bcce:	68fa      	ldr	r2, [r7, #12]
 801bcd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bcd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bcd8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801bcda:	2300      	movs	r3, #0
}
 801bcdc:	4618      	mov	r0, r3
 801bcde:	3714      	adds	r7, #20
 801bce0:	46bd      	mov	sp, r7
 801bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bce6:	4770      	bx	lr
 801bce8:	fffff800 	.word	0xfffff800

0801bcec <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801bcec:	b480      	push	{r7}
 801bcee:	b087      	sub	sp, #28
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	60f8      	str	r0, [r7, #12]
 801bcf4:	460b      	mov	r3, r1
 801bcf6:	607a      	str	r2, [r7, #4]
 801bcf8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bcfa:	68fb      	ldr	r3, [r7, #12]
 801bcfc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801bcfe:	68fb      	ldr	r3, [r7, #12]
 801bd00:	333c      	adds	r3, #60	; 0x3c
 801bd02:	3304      	adds	r3, #4
 801bd04:	681b      	ldr	r3, [r3, #0]
 801bd06:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801bd08:	693b      	ldr	r3, [r7, #16]
 801bd0a:	4a26      	ldr	r2, [pc, #152]	; (801bda4 <USB_EP0_OutStart+0xb8>)
 801bd0c:	4293      	cmp	r3, r2
 801bd0e:	d90a      	bls.n	801bd26 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801bd10:	697b      	ldr	r3, [r7, #20]
 801bd12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd16:	681b      	ldr	r3, [r3, #0]
 801bd18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bd1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bd20:	d101      	bne.n	801bd26 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801bd22:	2300      	movs	r3, #0
 801bd24:	e037      	b.n	801bd96 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801bd26:	697b      	ldr	r3, [r7, #20]
 801bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd2c:	461a      	mov	r2, r3
 801bd2e:	2300      	movs	r3, #0
 801bd30:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bd32:	697b      	ldr	r3, [r7, #20]
 801bd34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd38:	691b      	ldr	r3, [r3, #16]
 801bd3a:	697a      	ldr	r2, [r7, #20]
 801bd3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bd44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801bd46:	697b      	ldr	r3, [r7, #20]
 801bd48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd4c:	691b      	ldr	r3, [r3, #16]
 801bd4e:	697a      	ldr	r2, [r7, #20]
 801bd50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd54:	f043 0318 	orr.w	r3, r3, #24
 801bd58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801bd5a:	697b      	ldr	r3, [r7, #20]
 801bd5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd60:	691b      	ldr	r3, [r3, #16]
 801bd62:	697a      	ldr	r2, [r7, #20]
 801bd64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd68:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801bd6c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801bd6e:	7afb      	ldrb	r3, [r7, #11]
 801bd70:	2b01      	cmp	r3, #1
 801bd72:	d10f      	bne.n	801bd94 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801bd74:	697b      	ldr	r3, [r7, #20]
 801bd76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd7a:	461a      	mov	r2, r3
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801bd80:	697b      	ldr	r3, [r7, #20]
 801bd82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd86:	681b      	ldr	r3, [r3, #0]
 801bd88:	697a      	ldr	r2, [r7, #20]
 801bd8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd8e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801bd92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bd94:	2300      	movs	r3, #0
}
 801bd96:	4618      	mov	r0, r3
 801bd98:	371c      	adds	r7, #28
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda0:	4770      	bx	lr
 801bda2:	bf00      	nop
 801bda4:	4f54300a 	.word	0x4f54300a

0801bda8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801bda8:	b480      	push	{r7}
 801bdaa:	b085      	sub	sp, #20
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801bdb4:	68fb      	ldr	r3, [r7, #12]
 801bdb6:	3301      	adds	r3, #1
 801bdb8:	60fb      	str	r3, [r7, #12]
 801bdba:	68fb      	ldr	r3, [r7, #12]
 801bdbc:	4a13      	ldr	r2, [pc, #76]	; (801be0c <USB_CoreReset+0x64>)
 801bdbe:	4293      	cmp	r3, r2
 801bdc0:	d901      	bls.n	801bdc6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801bdc2:	2303      	movs	r3, #3
 801bdc4:	e01b      	b.n	801bdfe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	691b      	ldr	r3, [r3, #16]
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	daf2      	bge.n	801bdb4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801bdce:	2300      	movs	r3, #0
 801bdd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801bdd2:	687b      	ldr	r3, [r7, #4]
 801bdd4:	691b      	ldr	r3, [r3, #16]
 801bdd6:	f043 0201 	orr.w	r2, r3, #1
 801bdda:	687b      	ldr	r3, [r7, #4]
 801bddc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801bdde:	68fb      	ldr	r3, [r7, #12]
 801bde0:	3301      	adds	r3, #1
 801bde2:	60fb      	str	r3, [r7, #12]
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	4a09      	ldr	r2, [pc, #36]	; (801be0c <USB_CoreReset+0x64>)
 801bde8:	4293      	cmp	r3, r2
 801bdea:	d901      	bls.n	801bdf0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801bdec:	2303      	movs	r3, #3
 801bdee:	e006      	b.n	801bdfe <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801bdf0:	687b      	ldr	r3, [r7, #4]
 801bdf2:	691b      	ldr	r3, [r3, #16]
 801bdf4:	f003 0301 	and.w	r3, r3, #1
 801bdf8:	2b01      	cmp	r3, #1
 801bdfa:	d0f0      	beq.n	801bdde <USB_CoreReset+0x36>

  return HAL_OK;
 801bdfc:	2300      	movs	r3, #0
}
 801bdfe:	4618      	mov	r0, r3
 801be00:	3714      	adds	r7, #20
 801be02:	46bd      	mov	sp, r7
 801be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be08:	4770      	bx	lr
 801be0a:	bf00      	nop
 801be0c:	00030d40 	.word	0x00030d40

0801be10 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801be10:	b580      	push	{r7, lr}
 801be12:	b084      	sub	sp, #16
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
 801be18:	460b      	mov	r3, r1
 801be1a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801be1c:	2300      	movs	r3, #0
 801be1e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801be20:	687b      	ldr	r3, [r7, #4]
 801be22:	7c1b      	ldrb	r3, [r3, #16]
 801be24:	2b00      	cmp	r3, #0
 801be26:	d115      	bne.n	801be54 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801be28:	f44f 7300 	mov.w	r3, #512	; 0x200
 801be2c:	2202      	movs	r2, #2
 801be2e:	2181      	movs	r1, #129	; 0x81
 801be30:	6878      	ldr	r0, [r7, #4]
 801be32:	f001 ff6e 	bl	801dd12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801be36:	687b      	ldr	r3, [r7, #4]
 801be38:	2201      	movs	r2, #1
 801be3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801be3c:	f44f 7300 	mov.w	r3, #512	; 0x200
 801be40:	2202      	movs	r2, #2
 801be42:	2101      	movs	r1, #1
 801be44:	6878      	ldr	r0, [r7, #4]
 801be46:	f001 ff64 	bl	801dd12 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801be4a:	687b      	ldr	r3, [r7, #4]
 801be4c:	2201      	movs	r2, #1
 801be4e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801be52:	e012      	b.n	801be7a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801be54:	2340      	movs	r3, #64	; 0x40
 801be56:	2202      	movs	r2, #2
 801be58:	2181      	movs	r1, #129	; 0x81
 801be5a:	6878      	ldr	r0, [r7, #4]
 801be5c:	f001 ff59 	bl	801dd12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	2201      	movs	r2, #1
 801be64:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801be66:	2340      	movs	r3, #64	; 0x40
 801be68:	2202      	movs	r2, #2
 801be6a:	2101      	movs	r1, #1
 801be6c:	6878      	ldr	r0, [r7, #4]
 801be6e:	f001 ff50 	bl	801dd12 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	2201      	movs	r2, #1
 801be76:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801be7a:	2308      	movs	r3, #8
 801be7c:	2203      	movs	r2, #3
 801be7e:	2182      	movs	r1, #130	; 0x82
 801be80:	6878      	ldr	r0, [r7, #4]
 801be82:	f001 ff46 	bl	801dd12 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801be86:	687b      	ldr	r3, [r7, #4]
 801be88:	2201      	movs	r2, #1
 801be8a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801be8c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801be90:	f002 f8d6 	bl	801e040 <malloc>
 801be94:	4603      	mov	r3, r0
 801be96:	461a      	mov	r2, r3
 801be98:	687b      	ldr	r3, [r7, #4]
 801be9a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bea4:	2b00      	cmp	r3, #0
 801bea6:	d102      	bne.n	801beae <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801bea8:	2301      	movs	r3, #1
 801beaa:	73fb      	strb	r3, [r7, #15]
 801beac:	e026      	b.n	801befc <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801beb4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801beb6:	687b      	ldr	r3, [r7, #4]
 801beb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bebc:	681b      	ldr	r3, [r3, #0]
 801bebe:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	2200      	movs	r2, #0
 801bec4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801bec8:	68bb      	ldr	r3, [r7, #8]
 801beca:	2200      	movs	r2, #0
 801becc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	7c1b      	ldrb	r3, [r3, #16]
 801bed4:	2b00      	cmp	r3, #0
 801bed6:	d109      	bne.n	801beec <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801bed8:	68bb      	ldr	r3, [r7, #8]
 801beda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bede:	f44f 7300 	mov.w	r3, #512	; 0x200
 801bee2:	2101      	movs	r1, #1
 801bee4:	6878      	ldr	r0, [r7, #4]
 801bee6:	f002 f805 	bl	801def4 <USBD_LL_PrepareReceive>
 801beea:	e007      	b.n	801befc <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801bef2:	2340      	movs	r3, #64	; 0x40
 801bef4:	2101      	movs	r1, #1
 801bef6:	6878      	ldr	r0, [r7, #4]
 801bef8:	f001 fffc 	bl	801def4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801befc:	7bfb      	ldrb	r3, [r7, #15]
}
 801befe:	4618      	mov	r0, r3
 801bf00:	3710      	adds	r7, #16
 801bf02:	46bd      	mov	sp, r7
 801bf04:	bd80      	pop	{r7, pc}

0801bf06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801bf06:	b580      	push	{r7, lr}
 801bf08:	b084      	sub	sp, #16
 801bf0a:	af00      	add	r7, sp, #0
 801bf0c:	6078      	str	r0, [r7, #4]
 801bf0e:	460b      	mov	r3, r1
 801bf10:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801bf12:	2300      	movs	r3, #0
 801bf14:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801bf16:	2181      	movs	r1, #129	; 0x81
 801bf18:	6878      	ldr	r0, [r7, #4]
 801bf1a:	f001 ff20 	bl	801dd5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	2200      	movs	r2, #0
 801bf22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801bf24:	2101      	movs	r1, #1
 801bf26:	6878      	ldr	r0, [r7, #4]
 801bf28:	f001 ff19 	bl	801dd5e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	2200      	movs	r2, #0
 801bf30:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801bf34:	2182      	movs	r1, #130	; 0x82
 801bf36:	6878      	ldr	r0, [r7, #4]
 801bf38:	f001 ff11 	bl	801dd5e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	2200      	movs	r2, #0
 801bf40:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf48:	2b00      	cmp	r3, #0
 801bf4a:	d00e      	beq.n	801bf6a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801bf4c:	687b      	ldr	r3, [r7, #4]
 801bf4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bf52:	685b      	ldr	r3, [r3, #4]
 801bf54:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf5c:	4618      	mov	r0, r3
 801bf5e:	f002 f877 	bl	801e050 <free>
    pdev->pClassData = NULL;
 801bf62:	687b      	ldr	r3, [r7, #4]
 801bf64:	2200      	movs	r2, #0
 801bf66:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801bf6a:	7bfb      	ldrb	r3, [r7, #15]
}
 801bf6c:	4618      	mov	r0, r3
 801bf6e:	3710      	adds	r7, #16
 801bf70:	46bd      	mov	sp, r7
 801bf72:	bd80      	pop	{r7, pc}

0801bf74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801bf74:	b580      	push	{r7, lr}
 801bf76:	b086      	sub	sp, #24
 801bf78:	af00      	add	r7, sp, #0
 801bf7a:	6078      	str	r0, [r7, #4]
 801bf7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801bf84:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801bf86:	2300      	movs	r3, #0
 801bf88:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801bf8e:	2300      	movs	r3, #0
 801bf90:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801bf92:	683b      	ldr	r3, [r7, #0]
 801bf94:	781b      	ldrb	r3, [r3, #0]
 801bf96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d039      	beq.n	801c012 <USBD_CDC_Setup+0x9e>
 801bf9e:	2b20      	cmp	r3, #32
 801bfa0:	d17c      	bne.n	801c09c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801bfa2:	683b      	ldr	r3, [r7, #0]
 801bfa4:	88db      	ldrh	r3, [r3, #6]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d029      	beq.n	801bffe <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801bfaa:	683b      	ldr	r3, [r7, #0]
 801bfac:	781b      	ldrb	r3, [r3, #0]
 801bfae:	b25b      	sxtb	r3, r3
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	da11      	bge.n	801bfd8 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bfb4:	687b      	ldr	r3, [r7, #4]
 801bfb6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801bfba:	689b      	ldr	r3, [r3, #8]
 801bfbc:	683a      	ldr	r2, [r7, #0]
 801bfbe:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801bfc0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bfc2:	683a      	ldr	r2, [r7, #0]
 801bfc4:	88d2      	ldrh	r2, [r2, #6]
 801bfc6:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801bfc8:	6939      	ldr	r1, [r7, #16]
 801bfca:	683b      	ldr	r3, [r7, #0]
 801bfcc:	88db      	ldrh	r3, [r3, #6]
 801bfce:	461a      	mov	r2, r3
 801bfd0:	6878      	ldr	r0, [r7, #4]
 801bfd2:	f001 fa3f 	bl	801d454 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801bfd6:	e068      	b.n	801c0aa <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 801bfd8:	683b      	ldr	r3, [r7, #0]
 801bfda:	785a      	ldrb	r2, [r3, #1]
 801bfdc:	693b      	ldr	r3, [r7, #16]
 801bfde:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801bfe2:	683b      	ldr	r3, [r7, #0]
 801bfe4:	88db      	ldrh	r3, [r3, #6]
 801bfe6:	b2da      	uxtb	r2, r3
 801bfe8:	693b      	ldr	r3, [r7, #16]
 801bfea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801bfee:	6939      	ldr	r1, [r7, #16]
 801bff0:	683b      	ldr	r3, [r7, #0]
 801bff2:	88db      	ldrh	r3, [r3, #6]
 801bff4:	461a      	mov	r2, r3
 801bff6:	6878      	ldr	r0, [r7, #4]
 801bff8:	f001 fa5a 	bl	801d4b0 <USBD_CtlPrepareRx>
      break;
 801bffc:	e055      	b.n	801c0aa <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801bffe:	687b      	ldr	r3, [r7, #4]
 801c000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c004:	689b      	ldr	r3, [r3, #8]
 801c006:	683a      	ldr	r2, [r7, #0]
 801c008:	7850      	ldrb	r0, [r2, #1]
 801c00a:	2200      	movs	r2, #0
 801c00c:	6839      	ldr	r1, [r7, #0]
 801c00e:	4798      	blx	r3
      break;
 801c010:	e04b      	b.n	801c0aa <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c012:	683b      	ldr	r3, [r7, #0]
 801c014:	785b      	ldrb	r3, [r3, #1]
 801c016:	2b0a      	cmp	r3, #10
 801c018:	d017      	beq.n	801c04a <USBD_CDC_Setup+0xd6>
 801c01a:	2b0b      	cmp	r3, #11
 801c01c:	d029      	beq.n	801c072 <USBD_CDC_Setup+0xfe>
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d133      	bne.n	801c08a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c028:	2b03      	cmp	r3, #3
 801c02a:	d107      	bne.n	801c03c <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801c02c:	f107 030c 	add.w	r3, r7, #12
 801c030:	2202      	movs	r2, #2
 801c032:	4619      	mov	r1, r3
 801c034:	6878      	ldr	r0, [r7, #4]
 801c036:	f001 fa0d 	bl	801d454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c03a:	e02e      	b.n	801c09a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c03c:	6839      	ldr	r1, [r7, #0]
 801c03e:	6878      	ldr	r0, [r7, #4]
 801c040:	f001 f99d 	bl	801d37e <USBD_CtlError>
            ret = USBD_FAIL;
 801c044:	2302      	movs	r3, #2
 801c046:	75fb      	strb	r3, [r7, #23]
          break;
 801c048:	e027      	b.n	801c09a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c04a:	687b      	ldr	r3, [r7, #4]
 801c04c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c050:	2b03      	cmp	r3, #3
 801c052:	d107      	bne.n	801c064 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801c054:	f107 030f 	add.w	r3, r7, #15
 801c058:	2201      	movs	r2, #1
 801c05a:	4619      	mov	r1, r3
 801c05c:	6878      	ldr	r0, [r7, #4]
 801c05e:	f001 f9f9 	bl	801d454 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c062:	e01a      	b.n	801c09a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c064:	6839      	ldr	r1, [r7, #0]
 801c066:	6878      	ldr	r0, [r7, #4]
 801c068:	f001 f989 	bl	801d37e <USBD_CtlError>
            ret = USBD_FAIL;
 801c06c:	2302      	movs	r3, #2
 801c06e:	75fb      	strb	r3, [r7, #23]
          break;
 801c070:	e013      	b.n	801c09a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c072:	687b      	ldr	r3, [r7, #4]
 801c074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c078:	2b03      	cmp	r3, #3
 801c07a:	d00d      	beq.n	801c098 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 801c07c:	6839      	ldr	r1, [r7, #0]
 801c07e:	6878      	ldr	r0, [r7, #4]
 801c080:	f001 f97d 	bl	801d37e <USBD_CtlError>
            ret = USBD_FAIL;
 801c084:	2302      	movs	r3, #2
 801c086:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c088:	e006      	b.n	801c098 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 801c08a:	6839      	ldr	r1, [r7, #0]
 801c08c:	6878      	ldr	r0, [r7, #4]
 801c08e:	f001 f976 	bl	801d37e <USBD_CtlError>
          ret = USBD_FAIL;
 801c092:	2302      	movs	r3, #2
 801c094:	75fb      	strb	r3, [r7, #23]
          break;
 801c096:	e000      	b.n	801c09a <USBD_CDC_Setup+0x126>
          break;
 801c098:	bf00      	nop
      }
      break;
 801c09a:	e006      	b.n	801c0aa <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801c09c:	6839      	ldr	r1, [r7, #0]
 801c09e:	6878      	ldr	r0, [r7, #4]
 801c0a0:	f001 f96d 	bl	801d37e <USBD_CtlError>
      ret = USBD_FAIL;
 801c0a4:	2302      	movs	r3, #2
 801c0a6:	75fb      	strb	r3, [r7, #23]
      break;
 801c0a8:	bf00      	nop
  }

  return ret;
 801c0aa:	7dfb      	ldrb	r3, [r7, #23]
}
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	3718      	adds	r7, #24
 801c0b0:	46bd      	mov	sp, r7
 801c0b2:	bd80      	pop	{r7, pc}

0801c0b4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b084      	sub	sp, #16
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
 801c0bc:	460b      	mov	r3, r1
 801c0be:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c0c6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c0ce:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d03a      	beq.n	801c150 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c0da:	78fa      	ldrb	r2, [r7, #3]
 801c0dc:	6879      	ldr	r1, [r7, #4]
 801c0de:	4613      	mov	r3, r2
 801c0e0:	009b      	lsls	r3, r3, #2
 801c0e2:	4413      	add	r3, r2
 801c0e4:	009b      	lsls	r3, r3, #2
 801c0e6:	440b      	add	r3, r1
 801c0e8:	331c      	adds	r3, #28
 801c0ea:	681b      	ldr	r3, [r3, #0]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	d029      	beq.n	801c144 <USBD_CDC_DataIn+0x90>
 801c0f0:	78fa      	ldrb	r2, [r7, #3]
 801c0f2:	6879      	ldr	r1, [r7, #4]
 801c0f4:	4613      	mov	r3, r2
 801c0f6:	009b      	lsls	r3, r3, #2
 801c0f8:	4413      	add	r3, r2
 801c0fa:	009b      	lsls	r3, r3, #2
 801c0fc:	440b      	add	r3, r1
 801c0fe:	331c      	adds	r3, #28
 801c100:	681a      	ldr	r2, [r3, #0]
 801c102:	78f9      	ldrb	r1, [r7, #3]
 801c104:	68b8      	ldr	r0, [r7, #8]
 801c106:	460b      	mov	r3, r1
 801c108:	00db      	lsls	r3, r3, #3
 801c10a:	1a5b      	subs	r3, r3, r1
 801c10c:	009b      	lsls	r3, r3, #2
 801c10e:	4403      	add	r3, r0
 801c110:	3344      	adds	r3, #68	; 0x44
 801c112:	681b      	ldr	r3, [r3, #0]
 801c114:	fbb2 f1f3 	udiv	r1, r2, r3
 801c118:	fb03 f301 	mul.w	r3, r3, r1
 801c11c:	1ad3      	subs	r3, r2, r3
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d110      	bne.n	801c144 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c122:	78fa      	ldrb	r2, [r7, #3]
 801c124:	6879      	ldr	r1, [r7, #4]
 801c126:	4613      	mov	r3, r2
 801c128:	009b      	lsls	r3, r3, #2
 801c12a:	4413      	add	r3, r2
 801c12c:	009b      	lsls	r3, r3, #2
 801c12e:	440b      	add	r3, r1
 801c130:	331c      	adds	r3, #28
 801c132:	2200      	movs	r2, #0
 801c134:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c136:	78f9      	ldrb	r1, [r7, #3]
 801c138:	2300      	movs	r3, #0
 801c13a:	2200      	movs	r2, #0
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f001 feb6 	bl	801deae <USBD_LL_Transmit>
 801c142:	e003      	b.n	801c14c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801c144:	68fb      	ldr	r3, [r7, #12]
 801c146:	2200      	movs	r2, #0
 801c148:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801c14c:	2300      	movs	r3, #0
 801c14e:	e000      	b.n	801c152 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801c150:	2302      	movs	r3, #2
  }
}
 801c152:	4618      	mov	r0, r3
 801c154:	3710      	adds	r7, #16
 801c156:	46bd      	mov	sp, r7
 801c158:	bd80      	pop	{r7, pc}

0801c15a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c15a:	b580      	push	{r7, lr}
 801c15c:	b084      	sub	sp, #16
 801c15e:	af00      	add	r7, sp, #0
 801c160:	6078      	str	r0, [r7, #4]
 801c162:	460b      	mov	r3, r1
 801c164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c16c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c16e:	78fb      	ldrb	r3, [r7, #3]
 801c170:	4619      	mov	r1, r3
 801c172:	6878      	ldr	r0, [r7, #4]
 801c174:	f001 fee1 	bl	801df3a <USBD_LL_GetRxDataSize>
 801c178:	4602      	mov	r2, r0
 801c17a:	68fb      	ldr	r3, [r7, #12]
 801c17c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c186:	2b00      	cmp	r3, #0
 801c188:	d00d      	beq.n	801c1a6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c18a:	687b      	ldr	r3, [r7, #4]
 801c18c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c190:	68db      	ldr	r3, [r3, #12]
 801c192:	68fa      	ldr	r2, [r7, #12]
 801c194:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c198:	68fa      	ldr	r2, [r7, #12]
 801c19a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c19e:	4611      	mov	r1, r2
 801c1a0:	4798      	blx	r3

    return USBD_OK;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	e000      	b.n	801c1a8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801c1a6:	2302      	movs	r3, #2
  }
}
 801c1a8:	4618      	mov	r0, r3
 801c1aa:	3710      	adds	r7, #16
 801c1ac:	46bd      	mov	sp, r7
 801c1ae:	bd80      	pop	{r7, pc}

0801c1b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c1b0:	b580      	push	{r7, lr}
 801c1b2:	b084      	sub	sp, #16
 801c1b4:	af00      	add	r7, sp, #0
 801c1b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c1be:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c1c0:	687b      	ldr	r3, [r7, #4]
 801c1c2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1c6:	2b00      	cmp	r3, #0
 801c1c8:	d015      	beq.n	801c1f6 <USBD_CDC_EP0_RxReady+0x46>
 801c1ca:	68fb      	ldr	r3, [r7, #12]
 801c1cc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c1d0:	2bff      	cmp	r3, #255	; 0xff
 801c1d2:	d010      	beq.n	801c1f6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c1d4:	687b      	ldr	r3, [r7, #4]
 801c1d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c1da:	689b      	ldr	r3, [r3, #8]
 801c1dc:	68fa      	ldr	r2, [r7, #12]
 801c1de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801c1e2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c1e4:	68fa      	ldr	r2, [r7, #12]
 801c1e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c1ea:	b292      	uxth	r2, r2
 801c1ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c1ee:	68fb      	ldr	r3, [r7, #12]
 801c1f0:	22ff      	movs	r2, #255	; 0xff
 801c1f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801c1f6:	2300      	movs	r3, #0
}
 801c1f8:	4618      	mov	r0, r3
 801c1fa:	3710      	adds	r7, #16
 801c1fc:	46bd      	mov	sp, r7
 801c1fe:	bd80      	pop	{r7, pc}

0801c200 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c200:	b480      	push	{r7}
 801c202:	b083      	sub	sp, #12
 801c204:	af00      	add	r7, sp, #0
 801c206:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	2243      	movs	r2, #67	; 0x43
 801c20c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c20e:	4b03      	ldr	r3, [pc, #12]	; (801c21c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801c210:	4618      	mov	r0, r3
 801c212:	370c      	adds	r7, #12
 801c214:	46bd      	mov	sp, r7
 801c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c21a:	4770      	bx	lr
 801c21c:	240000a0 	.word	0x240000a0

0801c220 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c220:	b480      	push	{r7}
 801c222:	b083      	sub	sp, #12
 801c224:	af00      	add	r7, sp, #0
 801c226:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c228:	687b      	ldr	r3, [r7, #4]
 801c22a:	2243      	movs	r2, #67	; 0x43
 801c22c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c22e:	4b03      	ldr	r3, [pc, #12]	; (801c23c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801c230:	4618      	mov	r0, r3
 801c232:	370c      	adds	r7, #12
 801c234:	46bd      	mov	sp, r7
 801c236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c23a:	4770      	bx	lr
 801c23c:	2400005c 	.word	0x2400005c

0801c240 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c240:	b480      	push	{r7}
 801c242:	b083      	sub	sp, #12
 801c244:	af00      	add	r7, sp, #0
 801c246:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	2243      	movs	r2, #67	; 0x43
 801c24c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c24e:	4b03      	ldr	r3, [pc, #12]	; (801c25c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801c250:	4618      	mov	r0, r3
 801c252:	370c      	adds	r7, #12
 801c254:	46bd      	mov	sp, r7
 801c256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c25a:	4770      	bx	lr
 801c25c:	240000e4 	.word	0x240000e4

0801c260 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c260:	b480      	push	{r7}
 801c262:	b083      	sub	sp, #12
 801c264:	af00      	add	r7, sp, #0
 801c266:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c268:	687b      	ldr	r3, [r7, #4]
 801c26a:	220a      	movs	r2, #10
 801c26c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c26e:	4b03      	ldr	r3, [pc, #12]	; (801c27c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c270:	4618      	mov	r0, r3
 801c272:	370c      	adds	r7, #12
 801c274:	46bd      	mov	sp, r7
 801c276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c27a:	4770      	bx	lr
 801c27c:	24000018 	.word	0x24000018

0801c280 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c280:	b480      	push	{r7}
 801c282:	b085      	sub	sp, #20
 801c284:	af00      	add	r7, sp, #0
 801c286:	6078      	str	r0, [r7, #4]
 801c288:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c28a:	2302      	movs	r3, #2
 801c28c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801c28e:	683b      	ldr	r3, [r7, #0]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d005      	beq.n	801c2a0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801c294:	687b      	ldr	r3, [r7, #4]
 801c296:	683a      	ldr	r2, [r7, #0]
 801c298:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801c29c:	2300      	movs	r3, #0
 801c29e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801c2a0:	7bfb      	ldrb	r3, [r7, #15]
}
 801c2a2:	4618      	mov	r0, r3
 801c2a4:	3714      	adds	r7, #20
 801c2a6:	46bd      	mov	sp, r7
 801c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2ac:	4770      	bx	lr

0801c2ae <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c2ae:	b480      	push	{r7}
 801c2b0:	b087      	sub	sp, #28
 801c2b2:	af00      	add	r7, sp, #0
 801c2b4:	60f8      	str	r0, [r7, #12]
 801c2b6:	60b9      	str	r1, [r7, #8]
 801c2b8:	4613      	mov	r3, r2
 801c2ba:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c2c2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c2c4:	697b      	ldr	r3, [r7, #20]
 801c2c6:	68ba      	ldr	r2, [r7, #8]
 801c2c8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c2cc:	88fa      	ldrh	r2, [r7, #6]
 801c2ce:	697b      	ldr	r3, [r7, #20]
 801c2d0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801c2d4:	2300      	movs	r3, #0
}
 801c2d6:	4618      	mov	r0, r3
 801c2d8:	371c      	adds	r7, #28
 801c2da:	46bd      	mov	sp, r7
 801c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c2e0:	4770      	bx	lr

0801c2e2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c2e2:	b480      	push	{r7}
 801c2e4:	b085      	sub	sp, #20
 801c2e6:	af00      	add	r7, sp, #0
 801c2e8:	6078      	str	r0, [r7, #4]
 801c2ea:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c2f2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c2f4:	68fb      	ldr	r3, [r7, #12]
 801c2f6:	683a      	ldr	r2, [r7, #0]
 801c2f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801c2fc:	2300      	movs	r3, #0
}
 801c2fe:	4618      	mov	r0, r3
 801c300:	3714      	adds	r7, #20
 801c302:	46bd      	mov	sp, r7
 801c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c308:	4770      	bx	lr

0801c30a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c30a:	b580      	push	{r7, lr}
 801c30c:	b084      	sub	sp, #16
 801c30e:	af00      	add	r7, sp, #0
 801c310:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c312:	687b      	ldr	r3, [r7, #4]
 801c314:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c318:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c320:	2b00      	cmp	r3, #0
 801c322:	d01c      	beq.n	801c35e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801c324:	68fb      	ldr	r3, [r7, #12]
 801c326:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d115      	bne.n	801c35a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c32e:	68fb      	ldr	r3, [r7, #12]
 801c330:	2201      	movs	r2, #1
 801c332:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c336:	68fb      	ldr	r3, [r7, #12]
 801c338:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c340:	68fb      	ldr	r3, [r7, #12]
 801c342:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801c346:	68fb      	ldr	r3, [r7, #12]
 801c348:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c34c:	b29b      	uxth	r3, r3
 801c34e:	2181      	movs	r1, #129	; 0x81
 801c350:	6878      	ldr	r0, [r7, #4]
 801c352:	f001 fdac 	bl	801deae <USBD_LL_Transmit>

      return USBD_OK;
 801c356:	2300      	movs	r3, #0
 801c358:	e002      	b.n	801c360 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801c35a:	2301      	movs	r3, #1
 801c35c:	e000      	b.n	801c360 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801c35e:	2302      	movs	r3, #2
  }
}
 801c360:	4618      	mov	r0, r3
 801c362:	3710      	adds	r7, #16
 801c364:	46bd      	mov	sp, r7
 801c366:	bd80      	pop	{r7, pc}

0801c368 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c368:	b580      	push	{r7, lr}
 801c36a:	b084      	sub	sp, #16
 801c36c:	af00      	add	r7, sp, #0
 801c36e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c376:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d017      	beq.n	801c3b2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c382:	687b      	ldr	r3, [r7, #4]
 801c384:	7c1b      	ldrb	r3, [r3, #16]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d109      	bne.n	801c39e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c38a:	68fb      	ldr	r3, [r7, #12]
 801c38c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c390:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c394:	2101      	movs	r1, #1
 801c396:	6878      	ldr	r0, [r7, #4]
 801c398:	f001 fdac 	bl	801def4 <USBD_LL_PrepareReceive>
 801c39c:	e007      	b.n	801c3ae <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c3a4:	2340      	movs	r3, #64	; 0x40
 801c3a6:	2101      	movs	r1, #1
 801c3a8:	6878      	ldr	r0, [r7, #4]
 801c3aa:	f001 fda3 	bl	801def4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801c3ae:	2300      	movs	r3, #0
 801c3b0:	e000      	b.n	801c3b4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801c3b2:	2302      	movs	r3, #2
  }
}
 801c3b4:	4618      	mov	r0, r3
 801c3b6:	3710      	adds	r7, #16
 801c3b8:	46bd      	mov	sp, r7
 801c3ba:	bd80      	pop	{r7, pc}

0801c3bc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c3bc:	b580      	push	{r7, lr}
 801c3be:	b084      	sub	sp, #16
 801c3c0:	af00      	add	r7, sp, #0
 801c3c2:	60f8      	str	r0, [r7, #12]
 801c3c4:	60b9      	str	r1, [r7, #8]
 801c3c6:	4613      	mov	r3, r2
 801c3c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	2b00      	cmp	r3, #0
 801c3ce:	d101      	bne.n	801c3d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c3d0:	2302      	movs	r3, #2
 801c3d2:	e01a      	b.n	801c40a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c3d4:	68fb      	ldr	r3, [r7, #12]
 801c3d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d003      	beq.n	801c3e6 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	2200      	movs	r2, #0
 801c3e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c3e6:	68bb      	ldr	r3, [r7, #8]
 801c3e8:	2b00      	cmp	r3, #0
 801c3ea:	d003      	beq.n	801c3f4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	68ba      	ldr	r2, [r7, #8]
 801c3f0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	2201      	movs	r2, #1
 801c3f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801c3fc:	68fb      	ldr	r3, [r7, #12]
 801c3fe:	79fa      	ldrb	r2, [r7, #7]
 801c400:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c402:	68f8      	ldr	r0, [r7, #12]
 801c404:	f001 fc1a 	bl	801dc3c <USBD_LL_Init>

  return USBD_OK;
 801c408:	2300      	movs	r3, #0
}
 801c40a:	4618      	mov	r0, r3
 801c40c:	3710      	adds	r7, #16
 801c40e:	46bd      	mov	sp, r7
 801c410:	bd80      	pop	{r7, pc}

0801c412 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c412:	b480      	push	{r7}
 801c414:	b085      	sub	sp, #20
 801c416:	af00      	add	r7, sp, #0
 801c418:	6078      	str	r0, [r7, #4]
 801c41a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c41c:	2300      	movs	r3, #0
 801c41e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801c420:	683b      	ldr	r3, [r7, #0]
 801c422:	2b00      	cmp	r3, #0
 801c424:	d006      	beq.n	801c434 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c426:	687b      	ldr	r3, [r7, #4]
 801c428:	683a      	ldr	r2, [r7, #0]
 801c42a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801c42e:	2300      	movs	r3, #0
 801c430:	73fb      	strb	r3, [r7, #15]
 801c432:	e001      	b.n	801c438 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c434:	2302      	movs	r3, #2
 801c436:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801c438:	7bfb      	ldrb	r3, [r7, #15]
}
 801c43a:	4618      	mov	r0, r3
 801c43c:	3714      	adds	r7, #20
 801c43e:	46bd      	mov	sp, r7
 801c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c444:	4770      	bx	lr

0801c446 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c446:	b580      	push	{r7, lr}
 801c448:	b082      	sub	sp, #8
 801c44a:	af00      	add	r7, sp, #0
 801c44c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c44e:	6878      	ldr	r0, [r7, #4]
 801c450:	f001 fc44 	bl	801dcdc <USBD_LL_Start>

  return USBD_OK;
 801c454:	2300      	movs	r3, #0
}
 801c456:	4618      	mov	r0, r3
 801c458:	3708      	adds	r7, #8
 801c45a:	46bd      	mov	sp, r7
 801c45c:	bd80      	pop	{r7, pc}

0801c45e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c45e:	b480      	push	{r7}
 801c460:	b083      	sub	sp, #12
 801c462:	af00      	add	r7, sp, #0
 801c464:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c466:	2300      	movs	r3, #0
}
 801c468:	4618      	mov	r0, r3
 801c46a:	370c      	adds	r7, #12
 801c46c:	46bd      	mov	sp, r7
 801c46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c472:	4770      	bx	lr

0801c474 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b084      	sub	sp, #16
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	460b      	mov	r3, r1
 801c47e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c480:	2302      	movs	r3, #2
 801c482:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d00c      	beq.n	801c4a8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c48e:	687b      	ldr	r3, [r7, #4]
 801c490:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c494:	681b      	ldr	r3, [r3, #0]
 801c496:	78fa      	ldrb	r2, [r7, #3]
 801c498:	4611      	mov	r1, r2
 801c49a:	6878      	ldr	r0, [r7, #4]
 801c49c:	4798      	blx	r3
 801c49e:	4603      	mov	r3, r0
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d101      	bne.n	801c4a8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801c4a4:	2300      	movs	r3, #0
 801c4a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801c4a8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	3710      	adds	r7, #16
 801c4ae:	46bd      	mov	sp, r7
 801c4b0:	bd80      	pop	{r7, pc}

0801c4b2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c4b2:	b580      	push	{r7, lr}
 801c4b4:	b082      	sub	sp, #8
 801c4b6:	af00      	add	r7, sp, #0
 801c4b8:	6078      	str	r0, [r7, #4]
 801c4ba:	460b      	mov	r3, r1
 801c4bc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c4be:	687b      	ldr	r3, [r7, #4]
 801c4c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c4c4:	685b      	ldr	r3, [r3, #4]
 801c4c6:	78fa      	ldrb	r2, [r7, #3]
 801c4c8:	4611      	mov	r1, r2
 801c4ca:	6878      	ldr	r0, [r7, #4]
 801c4cc:	4798      	blx	r3

  return USBD_OK;
 801c4ce:	2300      	movs	r3, #0
}
 801c4d0:	4618      	mov	r0, r3
 801c4d2:	3708      	adds	r7, #8
 801c4d4:	46bd      	mov	sp, r7
 801c4d6:	bd80      	pop	{r7, pc}

0801c4d8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c4d8:	b580      	push	{r7, lr}
 801c4da:	b082      	sub	sp, #8
 801c4dc:	af00      	add	r7, sp, #0
 801c4de:	6078      	str	r0, [r7, #4]
 801c4e0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c4e8:	6839      	ldr	r1, [r7, #0]
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	f000 ff0a 	bl	801d304 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	2201      	movs	r2, #1
 801c4f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c4fe:	461a      	mov	r2, r3
 801c500:	687b      	ldr	r3, [r7, #4]
 801c502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801c506:	687b      	ldr	r3, [r7, #4]
 801c508:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c50c:	f003 031f 	and.w	r3, r3, #31
 801c510:	2b01      	cmp	r3, #1
 801c512:	d00c      	beq.n	801c52e <USBD_LL_SetupStage+0x56>
 801c514:	2b01      	cmp	r3, #1
 801c516:	d302      	bcc.n	801c51e <USBD_LL_SetupStage+0x46>
 801c518:	2b02      	cmp	r3, #2
 801c51a:	d010      	beq.n	801c53e <USBD_LL_SetupStage+0x66>
 801c51c:	e017      	b.n	801c54e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c51e:	687b      	ldr	r3, [r7, #4]
 801c520:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c524:	4619      	mov	r1, r3
 801c526:	6878      	ldr	r0, [r7, #4]
 801c528:	f000 fa0a 	bl	801c940 <USBD_StdDevReq>
      break;
 801c52c:	e01a      	b.n	801c564 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c534:	4619      	mov	r1, r3
 801c536:	6878      	ldr	r0, [r7, #4]
 801c538:	f000 fa6c 	bl	801ca14 <USBD_StdItfReq>
      break;
 801c53c:	e012      	b.n	801c564 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c53e:	687b      	ldr	r3, [r7, #4]
 801c540:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c544:	4619      	mov	r1, r3
 801c546:	6878      	ldr	r0, [r7, #4]
 801c548:	f000 faaa 	bl	801caa0 <USBD_StdEPReq>
      break;
 801c54c:	e00a      	b.n	801c564 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c54e:	687b      	ldr	r3, [r7, #4]
 801c550:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c554:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c558:	b2db      	uxtb	r3, r3
 801c55a:	4619      	mov	r1, r3
 801c55c:	6878      	ldr	r0, [r7, #4]
 801c55e:	f001 fc1d 	bl	801dd9c <USBD_LL_StallEP>
      break;
 801c562:	bf00      	nop
  }

  return USBD_OK;
 801c564:	2300      	movs	r3, #0
}
 801c566:	4618      	mov	r0, r3
 801c568:	3708      	adds	r7, #8
 801c56a:	46bd      	mov	sp, r7
 801c56c:	bd80      	pop	{r7, pc}

0801c56e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c56e:	b580      	push	{r7, lr}
 801c570:	b086      	sub	sp, #24
 801c572:	af00      	add	r7, sp, #0
 801c574:	60f8      	str	r0, [r7, #12]
 801c576:	460b      	mov	r3, r1
 801c578:	607a      	str	r2, [r7, #4]
 801c57a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c57c:	7afb      	ldrb	r3, [r7, #11]
 801c57e:	2b00      	cmp	r3, #0
 801c580:	d14b      	bne.n	801c61a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801c582:	68fb      	ldr	r3, [r7, #12]
 801c584:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801c588:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c590:	2b03      	cmp	r3, #3
 801c592:	d134      	bne.n	801c5fe <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801c594:	697b      	ldr	r3, [r7, #20]
 801c596:	68da      	ldr	r2, [r3, #12]
 801c598:	697b      	ldr	r3, [r7, #20]
 801c59a:	691b      	ldr	r3, [r3, #16]
 801c59c:	429a      	cmp	r2, r3
 801c59e:	d919      	bls.n	801c5d4 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c5a0:	697b      	ldr	r3, [r7, #20]
 801c5a2:	68da      	ldr	r2, [r3, #12]
 801c5a4:	697b      	ldr	r3, [r7, #20]
 801c5a6:	691b      	ldr	r3, [r3, #16]
 801c5a8:	1ad2      	subs	r2, r2, r3
 801c5aa:	697b      	ldr	r3, [r7, #20]
 801c5ac:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5ae:	697b      	ldr	r3, [r7, #20]
 801c5b0:	68da      	ldr	r2, [r3, #12]
 801c5b2:	697b      	ldr	r3, [r7, #20]
 801c5b4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5b6:	429a      	cmp	r2, r3
 801c5b8:	d203      	bcs.n	801c5c2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5ba:	697b      	ldr	r3, [r7, #20]
 801c5bc:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c5be:	b29b      	uxth	r3, r3
 801c5c0:	e002      	b.n	801c5c8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c5c2:	697b      	ldr	r3, [r7, #20]
 801c5c4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c5c6:	b29b      	uxth	r3, r3
 801c5c8:	461a      	mov	r2, r3
 801c5ca:	6879      	ldr	r1, [r7, #4]
 801c5cc:	68f8      	ldr	r0, [r7, #12]
 801c5ce:	f000 ff8d 	bl	801d4ec <USBD_CtlContinueRx>
 801c5d2:	e038      	b.n	801c646 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c5da:	691b      	ldr	r3, [r3, #16]
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d00a      	beq.n	801c5f6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c5e0:	68fb      	ldr	r3, [r7, #12]
 801c5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c5e6:	2b03      	cmp	r3, #3
 801c5e8:	d105      	bne.n	801c5f6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c5ea:	68fb      	ldr	r3, [r7, #12]
 801c5ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c5f0:	691b      	ldr	r3, [r3, #16]
 801c5f2:	68f8      	ldr	r0, [r7, #12]
 801c5f4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c5f6:	68f8      	ldr	r0, [r7, #12]
 801c5f8:	f000 ff8a 	bl	801d510 <USBD_CtlSendStatus>
 801c5fc:	e023      	b.n	801c646 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c5fe:	68fb      	ldr	r3, [r7, #12]
 801c600:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c604:	2b05      	cmp	r3, #5
 801c606:	d11e      	bne.n	801c646 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c608:	68fb      	ldr	r3, [r7, #12]
 801c60a:	2200      	movs	r2, #0
 801c60c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801c610:	2100      	movs	r1, #0
 801c612:	68f8      	ldr	r0, [r7, #12]
 801c614:	f001 fbc2 	bl	801dd9c <USBD_LL_StallEP>
 801c618:	e015      	b.n	801c646 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c61a:	68fb      	ldr	r3, [r7, #12]
 801c61c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c620:	699b      	ldr	r3, [r3, #24]
 801c622:	2b00      	cmp	r3, #0
 801c624:	d00d      	beq.n	801c642 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801c62c:	2b03      	cmp	r3, #3
 801c62e:	d108      	bne.n	801c642 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c630:	68fb      	ldr	r3, [r7, #12]
 801c632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c636:	699b      	ldr	r3, [r3, #24]
 801c638:	7afa      	ldrb	r2, [r7, #11]
 801c63a:	4611      	mov	r1, r2
 801c63c:	68f8      	ldr	r0, [r7, #12]
 801c63e:	4798      	blx	r3
 801c640:	e001      	b.n	801c646 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c642:	2302      	movs	r3, #2
 801c644:	e000      	b.n	801c648 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801c646:	2300      	movs	r3, #0
}
 801c648:	4618      	mov	r0, r3
 801c64a:	3718      	adds	r7, #24
 801c64c:	46bd      	mov	sp, r7
 801c64e:	bd80      	pop	{r7, pc}

0801c650 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c650:	b580      	push	{r7, lr}
 801c652:	b086      	sub	sp, #24
 801c654:	af00      	add	r7, sp, #0
 801c656:	60f8      	str	r0, [r7, #12]
 801c658:	460b      	mov	r3, r1
 801c65a:	607a      	str	r2, [r7, #4]
 801c65c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c65e:	7afb      	ldrb	r3, [r7, #11]
 801c660:	2b00      	cmp	r3, #0
 801c662:	d17f      	bne.n	801c764 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801c664:	68fb      	ldr	r3, [r7, #12]
 801c666:	3314      	adds	r3, #20
 801c668:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c66a:	68fb      	ldr	r3, [r7, #12]
 801c66c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c670:	2b02      	cmp	r3, #2
 801c672:	d15c      	bne.n	801c72e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801c674:	697b      	ldr	r3, [r7, #20]
 801c676:	68da      	ldr	r2, [r3, #12]
 801c678:	697b      	ldr	r3, [r7, #20]
 801c67a:	691b      	ldr	r3, [r3, #16]
 801c67c:	429a      	cmp	r2, r3
 801c67e:	d915      	bls.n	801c6ac <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801c680:	697b      	ldr	r3, [r7, #20]
 801c682:	68da      	ldr	r2, [r3, #12]
 801c684:	697b      	ldr	r3, [r7, #20]
 801c686:	691b      	ldr	r3, [r3, #16]
 801c688:	1ad2      	subs	r2, r2, r3
 801c68a:	697b      	ldr	r3, [r7, #20]
 801c68c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c68e:	697b      	ldr	r3, [r7, #20]
 801c690:	68db      	ldr	r3, [r3, #12]
 801c692:	b29b      	uxth	r3, r3
 801c694:	461a      	mov	r2, r3
 801c696:	6879      	ldr	r1, [r7, #4]
 801c698:	68f8      	ldr	r0, [r7, #12]
 801c69a:	f000 fef7 	bl	801d48c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c69e:	2300      	movs	r3, #0
 801c6a0:	2200      	movs	r2, #0
 801c6a2:	2100      	movs	r1, #0
 801c6a4:	68f8      	ldr	r0, [r7, #12]
 801c6a6:	f001 fc25 	bl	801def4 <USBD_LL_PrepareReceive>
 801c6aa:	e04e      	b.n	801c74a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6ac:	697b      	ldr	r3, [r7, #20]
 801c6ae:	689b      	ldr	r3, [r3, #8]
 801c6b0:	697a      	ldr	r2, [r7, #20]
 801c6b2:	6912      	ldr	r2, [r2, #16]
 801c6b4:	fbb3 f1f2 	udiv	r1, r3, r2
 801c6b8:	fb02 f201 	mul.w	r2, r2, r1
 801c6bc:	1a9b      	subs	r3, r3, r2
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	d11c      	bne.n	801c6fc <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801c6c2:	697b      	ldr	r3, [r7, #20]
 801c6c4:	689a      	ldr	r2, [r3, #8]
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c6ca:	429a      	cmp	r2, r3
 801c6cc:	d316      	bcc.n	801c6fc <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801c6ce:	697b      	ldr	r3, [r7, #20]
 801c6d0:	689a      	ldr	r2, [r3, #8]
 801c6d2:	68fb      	ldr	r3, [r7, #12]
 801c6d4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d20f      	bcs.n	801c6fc <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c6dc:	2200      	movs	r2, #0
 801c6de:	2100      	movs	r1, #0
 801c6e0:	68f8      	ldr	r0, [r7, #12]
 801c6e2:	f000 fed3 	bl	801d48c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c6e6:	68fb      	ldr	r3, [r7, #12]
 801c6e8:	2200      	movs	r2, #0
 801c6ea:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c6ee:	2300      	movs	r3, #0
 801c6f0:	2200      	movs	r2, #0
 801c6f2:	2100      	movs	r1, #0
 801c6f4:	68f8      	ldr	r0, [r7, #12]
 801c6f6:	f001 fbfd 	bl	801def4 <USBD_LL_PrepareReceive>
 801c6fa:	e026      	b.n	801c74a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c6fc:	68fb      	ldr	r3, [r7, #12]
 801c6fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c702:	68db      	ldr	r3, [r3, #12]
 801c704:	2b00      	cmp	r3, #0
 801c706:	d00a      	beq.n	801c71e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c708:	68fb      	ldr	r3, [r7, #12]
 801c70a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c70e:	2b03      	cmp	r3, #3
 801c710:	d105      	bne.n	801c71e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c712:	68fb      	ldr	r3, [r7, #12]
 801c714:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c718:	68db      	ldr	r3, [r3, #12]
 801c71a:	68f8      	ldr	r0, [r7, #12]
 801c71c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c71e:	2180      	movs	r1, #128	; 0x80
 801c720:	68f8      	ldr	r0, [r7, #12]
 801c722:	f001 fb3b 	bl	801dd9c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c726:	68f8      	ldr	r0, [r7, #12]
 801c728:	f000 ff05 	bl	801d536 <USBD_CtlReceiveStatus>
 801c72c:	e00d      	b.n	801c74a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c72e:	68fb      	ldr	r3, [r7, #12]
 801c730:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c734:	2b04      	cmp	r3, #4
 801c736:	d004      	beq.n	801c742 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c738:	68fb      	ldr	r3, [r7, #12]
 801c73a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c73e:	2b00      	cmp	r3, #0
 801c740:	d103      	bne.n	801c74a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c742:	2180      	movs	r1, #128	; 0x80
 801c744:	68f8      	ldr	r0, [r7, #12]
 801c746:	f001 fb29 	bl	801dd9c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c74a:	68fb      	ldr	r3, [r7, #12]
 801c74c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801c750:	2b01      	cmp	r3, #1
 801c752:	d11d      	bne.n	801c790 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801c754:	68f8      	ldr	r0, [r7, #12]
 801c756:	f7ff fe82 	bl	801c45e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801c75a:	68fb      	ldr	r3, [r7, #12]
 801c75c:	2200      	movs	r2, #0
 801c75e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801c762:	e015      	b.n	801c790 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801c764:	68fb      	ldr	r3, [r7, #12]
 801c766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c76a:	695b      	ldr	r3, [r3, #20]
 801c76c:	2b00      	cmp	r3, #0
 801c76e:	d00d      	beq.n	801c78c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c770:	68fb      	ldr	r3, [r7, #12]
 801c772:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801c776:	2b03      	cmp	r3, #3
 801c778:	d108      	bne.n	801c78c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801c77a:	68fb      	ldr	r3, [r7, #12]
 801c77c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c780:	695b      	ldr	r3, [r3, #20]
 801c782:	7afa      	ldrb	r2, [r7, #11]
 801c784:	4611      	mov	r1, r2
 801c786:	68f8      	ldr	r0, [r7, #12]
 801c788:	4798      	blx	r3
 801c78a:	e001      	b.n	801c790 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c78c:	2302      	movs	r3, #2
 801c78e:	e000      	b.n	801c792 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801c790:	2300      	movs	r3, #0
}
 801c792:	4618      	mov	r0, r3
 801c794:	3718      	adds	r7, #24
 801c796:	46bd      	mov	sp, r7
 801c798:	bd80      	pop	{r7, pc}

0801c79a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801c79a:	b580      	push	{r7, lr}
 801c79c:	b082      	sub	sp, #8
 801c79e:	af00      	add	r7, sp, #0
 801c7a0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7a2:	2340      	movs	r3, #64	; 0x40
 801c7a4:	2200      	movs	r2, #0
 801c7a6:	2100      	movs	r1, #0
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	f001 fab2 	bl	801dd12 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801c7ae:	687b      	ldr	r3, [r7, #4]
 801c7b0:	2201      	movs	r2, #1
 801c7b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	2240      	movs	r2, #64	; 0x40
 801c7ba:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801c7be:	2340      	movs	r3, #64	; 0x40
 801c7c0:	2200      	movs	r2, #0
 801c7c2:	2180      	movs	r1, #128	; 0x80
 801c7c4:	6878      	ldr	r0, [r7, #4]
 801c7c6:	f001 faa4 	bl	801dd12 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	2201      	movs	r2, #1
 801c7ce:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801c7d0:	687b      	ldr	r3, [r7, #4]
 801c7d2:	2240      	movs	r2, #64	; 0x40
 801c7d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c7d6:	687b      	ldr	r3, [r7, #4]
 801c7d8:	2201      	movs	r2, #1
 801c7da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	2200      	movs	r2, #0
 801c7e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801c7e6:	687b      	ldr	r3, [r7, #4]
 801c7e8:	2200      	movs	r2, #0
 801c7ea:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	2200      	movs	r2, #0
 801c7f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801c7f4:	687b      	ldr	r3, [r7, #4]
 801c7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d009      	beq.n	801c812 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c804:	685b      	ldr	r3, [r3, #4]
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	6852      	ldr	r2, [r2, #4]
 801c80a:	b2d2      	uxtb	r2, r2
 801c80c:	4611      	mov	r1, r2
 801c80e:	6878      	ldr	r0, [r7, #4]
 801c810:	4798      	blx	r3
  }

  return USBD_OK;
 801c812:	2300      	movs	r3, #0
}
 801c814:	4618      	mov	r0, r3
 801c816:	3708      	adds	r7, #8
 801c818:	46bd      	mov	sp, r7
 801c81a:	bd80      	pop	{r7, pc}

0801c81c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801c81c:	b480      	push	{r7}
 801c81e:	b083      	sub	sp, #12
 801c820:	af00      	add	r7, sp, #0
 801c822:	6078      	str	r0, [r7, #4]
 801c824:	460b      	mov	r3, r1
 801c826:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801c828:	687b      	ldr	r3, [r7, #4]
 801c82a:	78fa      	ldrb	r2, [r7, #3]
 801c82c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801c82e:	2300      	movs	r3, #0
}
 801c830:	4618      	mov	r0, r3
 801c832:	370c      	adds	r7, #12
 801c834:	46bd      	mov	sp, r7
 801c836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c83a:	4770      	bx	lr

0801c83c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801c83c:	b480      	push	{r7}
 801c83e:	b083      	sub	sp, #12
 801c840:	af00      	add	r7, sp, #0
 801c842:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801c844:	687b      	ldr	r3, [r7, #4]
 801c846:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	2204      	movs	r2, #4
 801c854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801c858:	2300      	movs	r3, #0
}
 801c85a:	4618      	mov	r0, r3
 801c85c:	370c      	adds	r7, #12
 801c85e:	46bd      	mov	sp, r7
 801c860:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c864:	4770      	bx	lr

0801c866 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801c866:	b480      	push	{r7}
 801c868:	b083      	sub	sp, #12
 801c86a:	af00      	add	r7, sp, #0
 801c86c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801c86e:	687b      	ldr	r3, [r7, #4]
 801c870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c874:	2b04      	cmp	r3, #4
 801c876:	d105      	bne.n	801c884 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801c87e:	687b      	ldr	r3, [r7, #4]
 801c880:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801c884:	2300      	movs	r3, #0
}
 801c886:	4618      	mov	r0, r3
 801c888:	370c      	adds	r7, #12
 801c88a:	46bd      	mov	sp, r7
 801c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c890:	4770      	bx	lr

0801c892 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801c892:	b580      	push	{r7, lr}
 801c894:	b082      	sub	sp, #8
 801c896:	af00      	add	r7, sp, #0
 801c898:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c8a0:	2b03      	cmp	r3, #3
 801c8a2:	d10b      	bne.n	801c8bc <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8aa:	69db      	ldr	r3, [r3, #28]
 801c8ac:	2b00      	cmp	r3, #0
 801c8ae:	d005      	beq.n	801c8bc <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801c8b0:	687b      	ldr	r3, [r7, #4]
 801c8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8b6:	69db      	ldr	r3, [r3, #28]
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801c8bc:	2300      	movs	r3, #0
}
 801c8be:	4618      	mov	r0, r3
 801c8c0:	3708      	adds	r7, #8
 801c8c2:	46bd      	mov	sp, r7
 801c8c4:	bd80      	pop	{r7, pc}

0801c8c6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801c8c6:	b480      	push	{r7}
 801c8c8:	b083      	sub	sp, #12
 801c8ca:	af00      	add	r7, sp, #0
 801c8cc:	6078      	str	r0, [r7, #4]
 801c8ce:	460b      	mov	r3, r1
 801c8d0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801c8d2:	2300      	movs	r3, #0
}
 801c8d4:	4618      	mov	r0, r3
 801c8d6:	370c      	adds	r7, #12
 801c8d8:	46bd      	mov	sp, r7
 801c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8de:	4770      	bx	lr

0801c8e0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801c8e0:	b480      	push	{r7}
 801c8e2:	b083      	sub	sp, #12
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
 801c8e8:	460b      	mov	r3, r1
 801c8ea:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801c8ec:	2300      	movs	r3, #0
}
 801c8ee:	4618      	mov	r0, r3
 801c8f0:	370c      	adds	r7, #12
 801c8f2:	46bd      	mov	sp, r7
 801c8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8f8:	4770      	bx	lr

0801c8fa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801c8fa:	b480      	push	{r7}
 801c8fc:	b083      	sub	sp, #12
 801c8fe:	af00      	add	r7, sp, #0
 801c900:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c902:	2300      	movs	r3, #0
}
 801c904:	4618      	mov	r0, r3
 801c906:	370c      	adds	r7, #12
 801c908:	46bd      	mov	sp, r7
 801c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c90e:	4770      	bx	lr

0801c910 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801c910:	b580      	push	{r7, lr}
 801c912:	b082      	sub	sp, #8
 801c914:	af00      	add	r7, sp, #0
 801c916:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c918:	687b      	ldr	r3, [r7, #4]
 801c91a:	2201      	movs	r2, #1
 801c91c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801c920:	687b      	ldr	r3, [r7, #4]
 801c922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c926:	685b      	ldr	r3, [r3, #4]
 801c928:	687a      	ldr	r2, [r7, #4]
 801c92a:	6852      	ldr	r2, [r2, #4]
 801c92c:	b2d2      	uxtb	r2, r2
 801c92e:	4611      	mov	r1, r2
 801c930:	6878      	ldr	r0, [r7, #4]
 801c932:	4798      	blx	r3

  return USBD_OK;
 801c934:	2300      	movs	r3, #0
}
 801c936:	4618      	mov	r0, r3
 801c938:	3708      	adds	r7, #8
 801c93a:	46bd      	mov	sp, r7
 801c93c:	bd80      	pop	{r7, pc}
	...

0801c940 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801c940:	b580      	push	{r7, lr}
 801c942:	b084      	sub	sp, #16
 801c944:	af00      	add	r7, sp, #0
 801c946:	6078      	str	r0, [r7, #4]
 801c948:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801c94a:	2300      	movs	r3, #0
 801c94c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c94e:	683b      	ldr	r3, [r7, #0]
 801c950:	781b      	ldrb	r3, [r3, #0]
 801c952:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c956:	2b20      	cmp	r3, #32
 801c958:	d004      	beq.n	801c964 <USBD_StdDevReq+0x24>
 801c95a:	2b40      	cmp	r3, #64	; 0x40
 801c95c:	d002      	beq.n	801c964 <USBD_StdDevReq+0x24>
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d008      	beq.n	801c974 <USBD_StdDevReq+0x34>
 801c962:	e04c      	b.n	801c9fe <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801c964:	687b      	ldr	r3, [r7, #4]
 801c966:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c96a:	689b      	ldr	r3, [r3, #8]
 801c96c:	6839      	ldr	r1, [r7, #0]
 801c96e:	6878      	ldr	r0, [r7, #4]
 801c970:	4798      	blx	r3
      break;
 801c972:	e049      	b.n	801ca08 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c974:	683b      	ldr	r3, [r7, #0]
 801c976:	785b      	ldrb	r3, [r3, #1]
 801c978:	2b09      	cmp	r3, #9
 801c97a:	d83a      	bhi.n	801c9f2 <USBD_StdDevReq+0xb2>
 801c97c:	a201      	add	r2, pc, #4	; (adr r2, 801c984 <USBD_StdDevReq+0x44>)
 801c97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c982:	bf00      	nop
 801c984:	0801c9d5 	.word	0x0801c9d5
 801c988:	0801c9e9 	.word	0x0801c9e9
 801c98c:	0801c9f3 	.word	0x0801c9f3
 801c990:	0801c9df 	.word	0x0801c9df
 801c994:	0801c9f3 	.word	0x0801c9f3
 801c998:	0801c9b7 	.word	0x0801c9b7
 801c99c:	0801c9ad 	.word	0x0801c9ad
 801c9a0:	0801c9f3 	.word	0x0801c9f3
 801c9a4:	0801c9cb 	.word	0x0801c9cb
 801c9a8:	0801c9c1 	.word	0x0801c9c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801c9ac:	6839      	ldr	r1, [r7, #0]
 801c9ae:	6878      	ldr	r0, [r7, #4]
 801c9b0:	f000 f9d4 	bl	801cd5c <USBD_GetDescriptor>
          break;
 801c9b4:	e022      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801c9b6:	6839      	ldr	r1, [r7, #0]
 801c9b8:	6878      	ldr	r0, [r7, #4]
 801c9ba:	f000 fb37 	bl	801d02c <USBD_SetAddress>
          break;
 801c9be:	e01d      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801c9c0:	6839      	ldr	r1, [r7, #0]
 801c9c2:	6878      	ldr	r0, [r7, #4]
 801c9c4:	f000 fb74 	bl	801d0b0 <USBD_SetConfig>
          break;
 801c9c8:	e018      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801c9ca:	6839      	ldr	r1, [r7, #0]
 801c9cc:	6878      	ldr	r0, [r7, #4]
 801c9ce:	f000 fbfd 	bl	801d1cc <USBD_GetConfig>
          break;
 801c9d2:	e013      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801c9d4:	6839      	ldr	r1, [r7, #0]
 801c9d6:	6878      	ldr	r0, [r7, #4]
 801c9d8:	f000 fc2c 	bl	801d234 <USBD_GetStatus>
          break;
 801c9dc:	e00e      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801c9de:	6839      	ldr	r1, [r7, #0]
 801c9e0:	6878      	ldr	r0, [r7, #4]
 801c9e2:	f000 fc5a 	bl	801d29a <USBD_SetFeature>
          break;
 801c9e6:	e009      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801c9e8:	6839      	ldr	r1, [r7, #0]
 801c9ea:	6878      	ldr	r0, [r7, #4]
 801c9ec:	f000 fc69 	bl	801d2c2 <USBD_ClrFeature>
          break;
 801c9f0:	e004      	b.n	801c9fc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801c9f2:	6839      	ldr	r1, [r7, #0]
 801c9f4:	6878      	ldr	r0, [r7, #4]
 801c9f6:	f000 fcc2 	bl	801d37e <USBD_CtlError>
          break;
 801c9fa:	bf00      	nop
      }
      break;
 801c9fc:	e004      	b.n	801ca08 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801c9fe:	6839      	ldr	r1, [r7, #0]
 801ca00:	6878      	ldr	r0, [r7, #4]
 801ca02:	f000 fcbc 	bl	801d37e <USBD_CtlError>
      break;
 801ca06:	bf00      	nop
  }

  return ret;
 801ca08:	7bfb      	ldrb	r3, [r7, #15]
}
 801ca0a:	4618      	mov	r0, r3
 801ca0c:	3710      	adds	r7, #16
 801ca0e:	46bd      	mov	sp, r7
 801ca10:	bd80      	pop	{r7, pc}
 801ca12:	bf00      	nop

0801ca14 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801ca14:	b580      	push	{r7, lr}
 801ca16:	b084      	sub	sp, #16
 801ca18:	af00      	add	r7, sp, #0
 801ca1a:	6078      	str	r0, [r7, #4]
 801ca1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ca1e:	2300      	movs	r3, #0
 801ca20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ca22:	683b      	ldr	r3, [r7, #0]
 801ca24:	781b      	ldrb	r3, [r3, #0]
 801ca26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ca2a:	2b20      	cmp	r3, #32
 801ca2c:	d003      	beq.n	801ca36 <USBD_StdItfReq+0x22>
 801ca2e:	2b40      	cmp	r3, #64	; 0x40
 801ca30:	d001      	beq.n	801ca36 <USBD_StdItfReq+0x22>
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d12a      	bne.n	801ca8c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801ca36:	687b      	ldr	r3, [r7, #4]
 801ca38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ca3c:	3b01      	subs	r3, #1
 801ca3e:	2b02      	cmp	r3, #2
 801ca40:	d81d      	bhi.n	801ca7e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ca42:	683b      	ldr	r3, [r7, #0]
 801ca44:	889b      	ldrh	r3, [r3, #4]
 801ca46:	b2db      	uxtb	r3, r3
 801ca48:	2b01      	cmp	r3, #1
 801ca4a:	d813      	bhi.n	801ca74 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ca4c:	687b      	ldr	r3, [r7, #4]
 801ca4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca52:	689b      	ldr	r3, [r3, #8]
 801ca54:	6839      	ldr	r1, [r7, #0]
 801ca56:	6878      	ldr	r0, [r7, #4]
 801ca58:	4798      	blx	r3
 801ca5a:	4603      	mov	r3, r0
 801ca5c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801ca5e:	683b      	ldr	r3, [r7, #0]
 801ca60:	88db      	ldrh	r3, [r3, #6]
 801ca62:	2b00      	cmp	r3, #0
 801ca64:	d110      	bne.n	801ca88 <USBD_StdItfReq+0x74>
 801ca66:	7bfb      	ldrb	r3, [r7, #15]
 801ca68:	2b00      	cmp	r3, #0
 801ca6a:	d10d      	bne.n	801ca88 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801ca6c:	6878      	ldr	r0, [r7, #4]
 801ca6e:	f000 fd4f 	bl	801d510 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801ca72:	e009      	b.n	801ca88 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801ca74:	6839      	ldr	r1, [r7, #0]
 801ca76:	6878      	ldr	r0, [r7, #4]
 801ca78:	f000 fc81 	bl	801d37e <USBD_CtlError>
          break;
 801ca7c:	e004      	b.n	801ca88 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801ca7e:	6839      	ldr	r1, [r7, #0]
 801ca80:	6878      	ldr	r0, [r7, #4]
 801ca82:	f000 fc7c 	bl	801d37e <USBD_CtlError>
          break;
 801ca86:	e000      	b.n	801ca8a <USBD_StdItfReq+0x76>
          break;
 801ca88:	bf00      	nop
      }
      break;
 801ca8a:	e004      	b.n	801ca96 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801ca8c:	6839      	ldr	r1, [r7, #0]
 801ca8e:	6878      	ldr	r0, [r7, #4]
 801ca90:	f000 fc75 	bl	801d37e <USBD_CtlError>
      break;
 801ca94:	bf00      	nop
  }

  return USBD_OK;
 801ca96:	2300      	movs	r3, #0
}
 801ca98:	4618      	mov	r0, r3
 801ca9a:	3710      	adds	r7, #16
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	bd80      	pop	{r7, pc}

0801caa0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801caa0:	b580      	push	{r7, lr}
 801caa2:	b084      	sub	sp, #16
 801caa4:	af00      	add	r7, sp, #0
 801caa6:	6078      	str	r0, [r7, #4]
 801caa8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801caaa:	2300      	movs	r3, #0
 801caac:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801caae:	683b      	ldr	r3, [r7, #0]
 801cab0:	889b      	ldrh	r3, [r3, #4]
 801cab2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cab4:	683b      	ldr	r3, [r7, #0]
 801cab6:	781b      	ldrb	r3, [r3, #0]
 801cab8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cabc:	2b20      	cmp	r3, #32
 801cabe:	d004      	beq.n	801caca <USBD_StdEPReq+0x2a>
 801cac0:	2b40      	cmp	r3, #64	; 0x40
 801cac2:	d002      	beq.n	801caca <USBD_StdEPReq+0x2a>
 801cac4:	2b00      	cmp	r3, #0
 801cac6:	d008      	beq.n	801cada <USBD_StdEPReq+0x3a>
 801cac8:	e13d      	b.n	801cd46 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cad0:	689b      	ldr	r3, [r3, #8]
 801cad2:	6839      	ldr	r1, [r7, #0]
 801cad4:	6878      	ldr	r0, [r7, #4]
 801cad6:	4798      	blx	r3
      break;
 801cad8:	e13a      	b.n	801cd50 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801cada:	683b      	ldr	r3, [r7, #0]
 801cadc:	781b      	ldrb	r3, [r3, #0]
 801cade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cae2:	2b20      	cmp	r3, #32
 801cae4:	d10a      	bne.n	801cafc <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801cae6:	687b      	ldr	r3, [r7, #4]
 801cae8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801caec:	689b      	ldr	r3, [r3, #8]
 801caee:	6839      	ldr	r1, [r7, #0]
 801caf0:	6878      	ldr	r0, [r7, #4]
 801caf2:	4798      	blx	r3
 801caf4:	4603      	mov	r3, r0
 801caf6:	73fb      	strb	r3, [r7, #15]

        return ret;
 801caf8:	7bfb      	ldrb	r3, [r7, #15]
 801cafa:	e12a      	b.n	801cd52 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	785b      	ldrb	r3, [r3, #1]
 801cb00:	2b01      	cmp	r3, #1
 801cb02:	d03e      	beq.n	801cb82 <USBD_StdEPReq+0xe2>
 801cb04:	2b03      	cmp	r3, #3
 801cb06:	d002      	beq.n	801cb0e <USBD_StdEPReq+0x6e>
 801cb08:	2b00      	cmp	r3, #0
 801cb0a:	d070      	beq.n	801cbee <USBD_StdEPReq+0x14e>
 801cb0c:	e115      	b.n	801cd3a <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cb0e:	687b      	ldr	r3, [r7, #4]
 801cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb14:	2b02      	cmp	r3, #2
 801cb16:	d002      	beq.n	801cb1e <USBD_StdEPReq+0x7e>
 801cb18:	2b03      	cmp	r3, #3
 801cb1a:	d015      	beq.n	801cb48 <USBD_StdEPReq+0xa8>
 801cb1c:	e02b      	b.n	801cb76 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cb1e:	7bbb      	ldrb	r3, [r7, #14]
 801cb20:	2b00      	cmp	r3, #0
 801cb22:	d00c      	beq.n	801cb3e <USBD_StdEPReq+0x9e>
 801cb24:	7bbb      	ldrb	r3, [r7, #14]
 801cb26:	2b80      	cmp	r3, #128	; 0x80
 801cb28:	d009      	beq.n	801cb3e <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cb2a:	7bbb      	ldrb	r3, [r7, #14]
 801cb2c:	4619      	mov	r1, r3
 801cb2e:	6878      	ldr	r0, [r7, #4]
 801cb30:	f001 f934 	bl	801dd9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cb34:	2180      	movs	r1, #128	; 0x80
 801cb36:	6878      	ldr	r0, [r7, #4]
 801cb38:	f001 f930 	bl	801dd9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cb3c:	e020      	b.n	801cb80 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801cb3e:	6839      	ldr	r1, [r7, #0]
 801cb40:	6878      	ldr	r0, [r7, #4]
 801cb42:	f000 fc1c 	bl	801d37e <USBD_CtlError>
              break;
 801cb46:	e01b      	b.n	801cb80 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cb48:	683b      	ldr	r3, [r7, #0]
 801cb4a:	885b      	ldrh	r3, [r3, #2]
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	d10e      	bne.n	801cb6e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801cb50:	7bbb      	ldrb	r3, [r7, #14]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d00b      	beq.n	801cb6e <USBD_StdEPReq+0xce>
 801cb56:	7bbb      	ldrb	r3, [r7, #14]
 801cb58:	2b80      	cmp	r3, #128	; 0x80
 801cb5a:	d008      	beq.n	801cb6e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801cb5c:	683b      	ldr	r3, [r7, #0]
 801cb5e:	88db      	ldrh	r3, [r3, #6]
 801cb60:	2b00      	cmp	r3, #0
 801cb62:	d104      	bne.n	801cb6e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801cb64:	7bbb      	ldrb	r3, [r7, #14]
 801cb66:	4619      	mov	r1, r3
 801cb68:	6878      	ldr	r0, [r7, #4]
 801cb6a:	f001 f917 	bl	801dd9c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801cb6e:	6878      	ldr	r0, [r7, #4]
 801cb70:	f000 fcce 	bl	801d510 <USBD_CtlSendStatus>

              break;
 801cb74:	e004      	b.n	801cb80 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801cb76:	6839      	ldr	r1, [r7, #0]
 801cb78:	6878      	ldr	r0, [r7, #4]
 801cb7a:	f000 fc00 	bl	801d37e <USBD_CtlError>
              break;
 801cb7e:	bf00      	nop
          }
          break;
 801cb80:	e0e0      	b.n	801cd44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb88:	2b02      	cmp	r3, #2
 801cb8a:	d002      	beq.n	801cb92 <USBD_StdEPReq+0xf2>
 801cb8c:	2b03      	cmp	r3, #3
 801cb8e:	d015      	beq.n	801cbbc <USBD_StdEPReq+0x11c>
 801cb90:	e026      	b.n	801cbe0 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cb92:	7bbb      	ldrb	r3, [r7, #14]
 801cb94:	2b00      	cmp	r3, #0
 801cb96:	d00c      	beq.n	801cbb2 <USBD_StdEPReq+0x112>
 801cb98:	7bbb      	ldrb	r3, [r7, #14]
 801cb9a:	2b80      	cmp	r3, #128	; 0x80
 801cb9c:	d009      	beq.n	801cbb2 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cb9e:	7bbb      	ldrb	r3, [r7, #14]
 801cba0:	4619      	mov	r1, r3
 801cba2:	6878      	ldr	r0, [r7, #4]
 801cba4:	f001 f8fa 	bl	801dd9c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cba8:	2180      	movs	r1, #128	; 0x80
 801cbaa:	6878      	ldr	r0, [r7, #4]
 801cbac:	f001 f8f6 	bl	801dd9c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cbb0:	e01c      	b.n	801cbec <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801cbb2:	6839      	ldr	r1, [r7, #0]
 801cbb4:	6878      	ldr	r0, [r7, #4]
 801cbb6:	f000 fbe2 	bl	801d37e <USBD_CtlError>
              break;
 801cbba:	e017      	b.n	801cbec <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cbbc:	683b      	ldr	r3, [r7, #0]
 801cbbe:	885b      	ldrh	r3, [r3, #2]
 801cbc0:	2b00      	cmp	r3, #0
 801cbc2:	d112      	bne.n	801cbea <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801cbc4:	7bbb      	ldrb	r3, [r7, #14]
 801cbc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801cbca:	2b00      	cmp	r3, #0
 801cbcc:	d004      	beq.n	801cbd8 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801cbce:	7bbb      	ldrb	r3, [r7, #14]
 801cbd0:	4619      	mov	r1, r3
 801cbd2:	6878      	ldr	r0, [r7, #4]
 801cbd4:	f001 f901 	bl	801ddda <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801cbd8:	6878      	ldr	r0, [r7, #4]
 801cbda:	f000 fc99 	bl	801d510 <USBD_CtlSendStatus>
              }
              break;
 801cbde:	e004      	b.n	801cbea <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801cbe0:	6839      	ldr	r1, [r7, #0]
 801cbe2:	6878      	ldr	r0, [r7, #4]
 801cbe4:	f000 fbcb 	bl	801d37e <USBD_CtlError>
              break;
 801cbe8:	e000      	b.n	801cbec <USBD_StdEPReq+0x14c>
              break;
 801cbea:	bf00      	nop
          }
          break;
 801cbec:	e0aa      	b.n	801cd44 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801cbee:	687b      	ldr	r3, [r7, #4]
 801cbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cbf4:	2b02      	cmp	r3, #2
 801cbf6:	d002      	beq.n	801cbfe <USBD_StdEPReq+0x15e>
 801cbf8:	2b03      	cmp	r3, #3
 801cbfa:	d032      	beq.n	801cc62 <USBD_StdEPReq+0x1c2>
 801cbfc:	e097      	b.n	801cd2e <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cbfe:	7bbb      	ldrb	r3, [r7, #14]
 801cc00:	2b00      	cmp	r3, #0
 801cc02:	d007      	beq.n	801cc14 <USBD_StdEPReq+0x174>
 801cc04:	7bbb      	ldrb	r3, [r7, #14]
 801cc06:	2b80      	cmp	r3, #128	; 0x80
 801cc08:	d004      	beq.n	801cc14 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801cc0a:	6839      	ldr	r1, [r7, #0]
 801cc0c:	6878      	ldr	r0, [r7, #4]
 801cc0e:	f000 fbb6 	bl	801d37e <USBD_CtlError>
                break;
 801cc12:	e091      	b.n	801cd38 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cc18:	2b00      	cmp	r3, #0
 801cc1a:	da0b      	bge.n	801cc34 <USBD_StdEPReq+0x194>
 801cc1c:	7bbb      	ldrb	r3, [r7, #14]
 801cc1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cc22:	4613      	mov	r3, r2
 801cc24:	009b      	lsls	r3, r3, #2
 801cc26:	4413      	add	r3, r2
 801cc28:	009b      	lsls	r3, r3, #2
 801cc2a:	3310      	adds	r3, #16
 801cc2c:	687a      	ldr	r2, [r7, #4]
 801cc2e:	4413      	add	r3, r2
 801cc30:	3304      	adds	r3, #4
 801cc32:	e00b      	b.n	801cc4c <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cc34:	7bbb      	ldrb	r3, [r7, #14]
 801cc36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cc3a:	4613      	mov	r3, r2
 801cc3c:	009b      	lsls	r3, r3, #2
 801cc3e:	4413      	add	r3, r2
 801cc40:	009b      	lsls	r3, r3, #2
 801cc42:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cc46:	687a      	ldr	r2, [r7, #4]
 801cc48:	4413      	add	r3, r2
 801cc4a:	3304      	adds	r3, #4
 801cc4c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801cc4e:	68bb      	ldr	r3, [r7, #8]
 801cc50:	2200      	movs	r2, #0
 801cc52:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cc54:	68bb      	ldr	r3, [r7, #8]
 801cc56:	2202      	movs	r2, #2
 801cc58:	4619      	mov	r1, r3
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	f000 fbfa 	bl	801d454 <USBD_CtlSendData>
              break;
 801cc60:	e06a      	b.n	801cd38 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801cc62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cc66:	2b00      	cmp	r3, #0
 801cc68:	da11      	bge.n	801cc8e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801cc6a:	7bbb      	ldrb	r3, [r7, #14]
 801cc6c:	f003 020f 	and.w	r2, r3, #15
 801cc70:	6879      	ldr	r1, [r7, #4]
 801cc72:	4613      	mov	r3, r2
 801cc74:	009b      	lsls	r3, r3, #2
 801cc76:	4413      	add	r3, r2
 801cc78:	009b      	lsls	r3, r3, #2
 801cc7a:	440b      	add	r3, r1
 801cc7c:	3318      	adds	r3, #24
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d117      	bne.n	801ccb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cc84:	6839      	ldr	r1, [r7, #0]
 801cc86:	6878      	ldr	r0, [r7, #4]
 801cc88:	f000 fb79 	bl	801d37e <USBD_CtlError>
                  break;
 801cc8c:	e054      	b.n	801cd38 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cc8e:	7bbb      	ldrb	r3, [r7, #14]
 801cc90:	f003 020f 	and.w	r2, r3, #15
 801cc94:	6879      	ldr	r1, [r7, #4]
 801cc96:	4613      	mov	r3, r2
 801cc98:	009b      	lsls	r3, r3, #2
 801cc9a:	4413      	add	r3, r2
 801cc9c:	009b      	lsls	r3, r3, #2
 801cc9e:	440b      	add	r3, r1
 801cca0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801cca4:	681b      	ldr	r3, [r3, #0]
 801cca6:	2b00      	cmp	r3, #0
 801cca8:	d104      	bne.n	801ccb4 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801ccaa:	6839      	ldr	r1, [r7, #0]
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	f000 fb66 	bl	801d37e <USBD_CtlError>
                  break;
 801ccb2:	e041      	b.n	801cd38 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ccb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ccb8:	2b00      	cmp	r3, #0
 801ccba:	da0b      	bge.n	801ccd4 <USBD_StdEPReq+0x234>
 801ccbc:	7bbb      	ldrb	r3, [r7, #14]
 801ccbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ccc2:	4613      	mov	r3, r2
 801ccc4:	009b      	lsls	r3, r3, #2
 801ccc6:	4413      	add	r3, r2
 801ccc8:	009b      	lsls	r3, r3, #2
 801ccca:	3310      	adds	r3, #16
 801cccc:	687a      	ldr	r2, [r7, #4]
 801ccce:	4413      	add	r3, r2
 801ccd0:	3304      	adds	r3, #4
 801ccd2:	e00b      	b.n	801ccec <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801ccd4:	7bbb      	ldrb	r3, [r7, #14]
 801ccd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ccda:	4613      	mov	r3, r2
 801ccdc:	009b      	lsls	r3, r3, #2
 801ccde:	4413      	add	r3, r2
 801cce0:	009b      	lsls	r3, r3, #2
 801cce2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cce6:	687a      	ldr	r2, [r7, #4]
 801cce8:	4413      	add	r3, r2
 801ccea:	3304      	adds	r3, #4
 801ccec:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801ccee:	7bbb      	ldrb	r3, [r7, #14]
 801ccf0:	2b00      	cmp	r3, #0
 801ccf2:	d002      	beq.n	801ccfa <USBD_StdEPReq+0x25a>
 801ccf4:	7bbb      	ldrb	r3, [r7, #14]
 801ccf6:	2b80      	cmp	r3, #128	; 0x80
 801ccf8:	d103      	bne.n	801cd02 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801ccfa:	68bb      	ldr	r3, [r7, #8]
 801ccfc:	2200      	movs	r2, #0
 801ccfe:	601a      	str	r2, [r3, #0]
 801cd00:	e00e      	b.n	801cd20 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801cd02:	7bbb      	ldrb	r3, [r7, #14]
 801cd04:	4619      	mov	r1, r3
 801cd06:	6878      	ldr	r0, [r7, #4]
 801cd08:	f001 f886 	bl	801de18 <USBD_LL_IsStallEP>
 801cd0c:	4603      	mov	r3, r0
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d003      	beq.n	801cd1a <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801cd12:	68bb      	ldr	r3, [r7, #8]
 801cd14:	2201      	movs	r2, #1
 801cd16:	601a      	str	r2, [r3, #0]
 801cd18:	e002      	b.n	801cd20 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801cd1a:	68bb      	ldr	r3, [r7, #8]
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cd20:	68bb      	ldr	r3, [r7, #8]
 801cd22:	2202      	movs	r2, #2
 801cd24:	4619      	mov	r1, r3
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f000 fb94 	bl	801d454 <USBD_CtlSendData>
              break;
 801cd2c:	e004      	b.n	801cd38 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801cd2e:	6839      	ldr	r1, [r7, #0]
 801cd30:	6878      	ldr	r0, [r7, #4]
 801cd32:	f000 fb24 	bl	801d37e <USBD_CtlError>
              break;
 801cd36:	bf00      	nop
          }
          break;
 801cd38:	e004      	b.n	801cd44 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801cd3a:	6839      	ldr	r1, [r7, #0]
 801cd3c:	6878      	ldr	r0, [r7, #4]
 801cd3e:	f000 fb1e 	bl	801d37e <USBD_CtlError>
          break;
 801cd42:	bf00      	nop
      }
      break;
 801cd44:	e004      	b.n	801cd50 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801cd46:	6839      	ldr	r1, [r7, #0]
 801cd48:	6878      	ldr	r0, [r7, #4]
 801cd4a:	f000 fb18 	bl	801d37e <USBD_CtlError>
      break;
 801cd4e:	bf00      	nop
  }

  return ret;
 801cd50:	7bfb      	ldrb	r3, [r7, #15]
}
 801cd52:	4618      	mov	r0, r3
 801cd54:	3710      	adds	r7, #16
 801cd56:	46bd      	mov	sp, r7
 801cd58:	bd80      	pop	{r7, pc}
	...

0801cd5c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b084      	sub	sp, #16
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	6078      	str	r0, [r7, #4]
 801cd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801cd66:	2300      	movs	r3, #0
 801cd68:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801cd6e:	2300      	movs	r3, #0
 801cd70:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801cd72:	683b      	ldr	r3, [r7, #0]
 801cd74:	885b      	ldrh	r3, [r3, #2]
 801cd76:	0a1b      	lsrs	r3, r3, #8
 801cd78:	b29b      	uxth	r3, r3
 801cd7a:	3b01      	subs	r3, #1
 801cd7c:	2b06      	cmp	r3, #6
 801cd7e:	f200 8128 	bhi.w	801cfd2 <USBD_GetDescriptor+0x276>
 801cd82:	a201      	add	r2, pc, #4	; (adr r2, 801cd88 <USBD_GetDescriptor+0x2c>)
 801cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd88:	0801cda5 	.word	0x0801cda5
 801cd8c:	0801cdbd 	.word	0x0801cdbd
 801cd90:	0801cdfd 	.word	0x0801cdfd
 801cd94:	0801cfd3 	.word	0x0801cfd3
 801cd98:	0801cfd3 	.word	0x0801cfd3
 801cd9c:	0801cf73 	.word	0x0801cf73
 801cda0:	0801cf9f 	.word	0x0801cf9f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801cda4:	687b      	ldr	r3, [r7, #4]
 801cda6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cdaa:	681b      	ldr	r3, [r3, #0]
 801cdac:	687a      	ldr	r2, [r7, #4]
 801cdae:	7c12      	ldrb	r2, [r2, #16]
 801cdb0:	f107 0108 	add.w	r1, r7, #8
 801cdb4:	4610      	mov	r0, r2
 801cdb6:	4798      	blx	r3
 801cdb8:	60f8      	str	r0, [r7, #12]
      break;
 801cdba:	e112      	b.n	801cfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	7c1b      	ldrb	r3, [r3, #16]
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d10d      	bne.n	801cde0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cdca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cdcc:	f107 0208 	add.w	r2, r7, #8
 801cdd0:	4610      	mov	r0, r2
 801cdd2:	4798      	blx	r3
 801cdd4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cdd6:	68fb      	ldr	r3, [r7, #12]
 801cdd8:	3301      	adds	r3, #1
 801cdda:	2202      	movs	r2, #2
 801cddc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801cdde:	e100      	b.n	801cfe2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801cde0:	687b      	ldr	r3, [r7, #4]
 801cde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cde8:	f107 0208 	add.w	r2, r7, #8
 801cdec:	4610      	mov	r0, r2
 801cdee:	4798      	blx	r3
 801cdf0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801cdf2:	68fb      	ldr	r3, [r7, #12]
 801cdf4:	3301      	adds	r3, #1
 801cdf6:	2202      	movs	r2, #2
 801cdf8:	701a      	strb	r2, [r3, #0]
      break;
 801cdfa:	e0f2      	b.n	801cfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801cdfc:	683b      	ldr	r3, [r7, #0]
 801cdfe:	885b      	ldrh	r3, [r3, #2]
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	2b05      	cmp	r3, #5
 801ce04:	f200 80ac 	bhi.w	801cf60 <USBD_GetDescriptor+0x204>
 801ce08:	a201      	add	r2, pc, #4	; (adr r2, 801ce10 <USBD_GetDescriptor+0xb4>)
 801ce0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce0e:	bf00      	nop
 801ce10:	0801ce29 	.word	0x0801ce29
 801ce14:	0801ce5d 	.word	0x0801ce5d
 801ce18:	0801ce91 	.word	0x0801ce91
 801ce1c:	0801cec5 	.word	0x0801cec5
 801ce20:	0801cef9 	.word	0x0801cef9
 801ce24:	0801cf2d 	.word	0x0801cf2d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce2e:	685b      	ldr	r3, [r3, #4]
 801ce30:	2b00      	cmp	r3, #0
 801ce32:	d00b      	beq.n	801ce4c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801ce34:	687b      	ldr	r3, [r7, #4]
 801ce36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce3a:	685b      	ldr	r3, [r3, #4]
 801ce3c:	687a      	ldr	r2, [r7, #4]
 801ce3e:	7c12      	ldrb	r2, [r2, #16]
 801ce40:	f107 0108 	add.w	r1, r7, #8
 801ce44:	4610      	mov	r0, r2
 801ce46:	4798      	blx	r3
 801ce48:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce4a:	e091      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ce4c:	6839      	ldr	r1, [r7, #0]
 801ce4e:	6878      	ldr	r0, [r7, #4]
 801ce50:	f000 fa95 	bl	801d37e <USBD_CtlError>
            err++;
 801ce54:	7afb      	ldrb	r3, [r7, #11]
 801ce56:	3301      	adds	r3, #1
 801ce58:	72fb      	strb	r3, [r7, #11]
          break;
 801ce5a:	e089      	b.n	801cf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce62:	689b      	ldr	r3, [r3, #8]
 801ce64:	2b00      	cmp	r3, #0
 801ce66:	d00b      	beq.n	801ce80 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801ce68:	687b      	ldr	r3, [r7, #4]
 801ce6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce6e:	689b      	ldr	r3, [r3, #8]
 801ce70:	687a      	ldr	r2, [r7, #4]
 801ce72:	7c12      	ldrb	r2, [r2, #16]
 801ce74:	f107 0108 	add.w	r1, r7, #8
 801ce78:	4610      	mov	r0, r2
 801ce7a:	4798      	blx	r3
 801ce7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ce7e:	e077      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ce80:	6839      	ldr	r1, [r7, #0]
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	f000 fa7b 	bl	801d37e <USBD_CtlError>
            err++;
 801ce88:	7afb      	ldrb	r3, [r7, #11]
 801ce8a:	3301      	adds	r3, #1
 801ce8c:	72fb      	strb	r3, [r7, #11]
          break;
 801ce8e:	e06f      	b.n	801cf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ce96:	68db      	ldr	r3, [r3, #12]
 801ce98:	2b00      	cmp	r3, #0
 801ce9a:	d00b      	beq.n	801ceb4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801ce9c:	687b      	ldr	r3, [r7, #4]
 801ce9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cea2:	68db      	ldr	r3, [r3, #12]
 801cea4:	687a      	ldr	r2, [r7, #4]
 801cea6:	7c12      	ldrb	r2, [r2, #16]
 801cea8:	f107 0108 	add.w	r1, r7, #8
 801ceac:	4610      	mov	r0, r2
 801ceae:	4798      	blx	r3
 801ceb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801ceb2:	e05d      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801ceb4:	6839      	ldr	r1, [r7, #0]
 801ceb6:	6878      	ldr	r0, [r7, #4]
 801ceb8:	f000 fa61 	bl	801d37e <USBD_CtlError>
            err++;
 801cebc:	7afb      	ldrb	r3, [r7, #11]
 801cebe:	3301      	adds	r3, #1
 801cec0:	72fb      	strb	r3, [r7, #11]
          break;
 801cec2:	e055      	b.n	801cf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801cec4:	687b      	ldr	r3, [r7, #4]
 801cec6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ceca:	691b      	ldr	r3, [r3, #16]
 801cecc:	2b00      	cmp	r3, #0
 801cece:	d00b      	beq.n	801cee8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801ced0:	687b      	ldr	r3, [r7, #4]
 801ced2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801ced6:	691b      	ldr	r3, [r3, #16]
 801ced8:	687a      	ldr	r2, [r7, #4]
 801ceda:	7c12      	ldrb	r2, [r2, #16]
 801cedc:	f107 0108 	add.w	r1, r7, #8
 801cee0:	4610      	mov	r0, r2
 801cee2:	4798      	blx	r3
 801cee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cee6:	e043      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cee8:	6839      	ldr	r1, [r7, #0]
 801ceea:	6878      	ldr	r0, [r7, #4]
 801ceec:	f000 fa47 	bl	801d37e <USBD_CtlError>
            err++;
 801cef0:	7afb      	ldrb	r3, [r7, #11]
 801cef2:	3301      	adds	r3, #1
 801cef4:	72fb      	strb	r3, [r7, #11]
          break;
 801cef6:	e03b      	b.n	801cf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801cef8:	687b      	ldr	r3, [r7, #4]
 801cefa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cefe:	695b      	ldr	r3, [r3, #20]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	d00b      	beq.n	801cf1c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801cf04:	687b      	ldr	r3, [r7, #4]
 801cf06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf0a:	695b      	ldr	r3, [r3, #20]
 801cf0c:	687a      	ldr	r2, [r7, #4]
 801cf0e:	7c12      	ldrb	r2, [r2, #16]
 801cf10:	f107 0108 	add.w	r1, r7, #8
 801cf14:	4610      	mov	r0, r2
 801cf16:	4798      	blx	r3
 801cf18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf1a:	e029      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cf1c:	6839      	ldr	r1, [r7, #0]
 801cf1e:	6878      	ldr	r0, [r7, #4]
 801cf20:	f000 fa2d 	bl	801d37e <USBD_CtlError>
            err++;
 801cf24:	7afb      	ldrb	r3, [r7, #11]
 801cf26:	3301      	adds	r3, #1
 801cf28:	72fb      	strb	r3, [r7, #11]
          break;
 801cf2a:	e021      	b.n	801cf70 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf32:	699b      	ldr	r3, [r3, #24]
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d00b      	beq.n	801cf50 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801cf38:	687b      	ldr	r3, [r7, #4]
 801cf3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801cf3e:	699b      	ldr	r3, [r3, #24]
 801cf40:	687a      	ldr	r2, [r7, #4]
 801cf42:	7c12      	ldrb	r2, [r2, #16]
 801cf44:	f107 0108 	add.w	r1, r7, #8
 801cf48:	4610      	mov	r0, r2
 801cf4a:	4798      	blx	r3
 801cf4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801cf4e:	e00f      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801cf50:	6839      	ldr	r1, [r7, #0]
 801cf52:	6878      	ldr	r0, [r7, #4]
 801cf54:	f000 fa13 	bl	801d37e <USBD_CtlError>
            err++;
 801cf58:	7afb      	ldrb	r3, [r7, #11]
 801cf5a:	3301      	adds	r3, #1
 801cf5c:	72fb      	strb	r3, [r7, #11]
          break;
 801cf5e:	e007      	b.n	801cf70 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801cf60:	6839      	ldr	r1, [r7, #0]
 801cf62:	6878      	ldr	r0, [r7, #4]
 801cf64:	f000 fa0b 	bl	801d37e <USBD_CtlError>
          err++;
 801cf68:	7afb      	ldrb	r3, [r7, #11]
 801cf6a:	3301      	adds	r3, #1
 801cf6c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801cf6e:	e038      	b.n	801cfe2 <USBD_GetDescriptor+0x286>
 801cf70:	e037      	b.n	801cfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	7c1b      	ldrb	r3, [r3, #16]
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d109      	bne.n	801cf8e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cf80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cf82:	f107 0208 	add.w	r2, r7, #8
 801cf86:	4610      	mov	r0, r2
 801cf88:	4798      	blx	r3
 801cf8a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cf8c:	e029      	b.n	801cfe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801cf8e:	6839      	ldr	r1, [r7, #0]
 801cf90:	6878      	ldr	r0, [r7, #4]
 801cf92:	f000 f9f4 	bl	801d37e <USBD_CtlError>
        err++;
 801cf96:	7afb      	ldrb	r3, [r7, #11]
 801cf98:	3301      	adds	r3, #1
 801cf9a:	72fb      	strb	r3, [r7, #11]
      break;
 801cf9c:	e021      	b.n	801cfe2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801cf9e:	687b      	ldr	r3, [r7, #4]
 801cfa0:	7c1b      	ldrb	r3, [r3, #16]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d10d      	bne.n	801cfc2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801cfa6:	687b      	ldr	r3, [r7, #4]
 801cfa8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cfac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cfae:	f107 0208 	add.w	r2, r7, #8
 801cfb2:	4610      	mov	r0, r2
 801cfb4:	4798      	blx	r3
 801cfb6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801cfb8:	68fb      	ldr	r3, [r7, #12]
 801cfba:	3301      	adds	r3, #1
 801cfbc:	2207      	movs	r2, #7
 801cfbe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801cfc0:	e00f      	b.n	801cfe2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801cfc2:	6839      	ldr	r1, [r7, #0]
 801cfc4:	6878      	ldr	r0, [r7, #4]
 801cfc6:	f000 f9da 	bl	801d37e <USBD_CtlError>
        err++;
 801cfca:	7afb      	ldrb	r3, [r7, #11]
 801cfcc:	3301      	adds	r3, #1
 801cfce:	72fb      	strb	r3, [r7, #11]
      break;
 801cfd0:	e007      	b.n	801cfe2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801cfd2:	6839      	ldr	r1, [r7, #0]
 801cfd4:	6878      	ldr	r0, [r7, #4]
 801cfd6:	f000 f9d2 	bl	801d37e <USBD_CtlError>
      err++;
 801cfda:	7afb      	ldrb	r3, [r7, #11]
 801cfdc:	3301      	adds	r3, #1
 801cfde:	72fb      	strb	r3, [r7, #11]
      break;
 801cfe0:	bf00      	nop
  }

  if (err != 0U)
 801cfe2:	7afb      	ldrb	r3, [r7, #11]
 801cfe4:	2b00      	cmp	r3, #0
 801cfe6:	d11c      	bne.n	801d022 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801cfe8:	893b      	ldrh	r3, [r7, #8]
 801cfea:	2b00      	cmp	r3, #0
 801cfec:	d011      	beq.n	801d012 <USBD_GetDescriptor+0x2b6>
 801cfee:	683b      	ldr	r3, [r7, #0]
 801cff0:	88db      	ldrh	r3, [r3, #6]
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d00d      	beq.n	801d012 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801cff6:	683b      	ldr	r3, [r7, #0]
 801cff8:	88da      	ldrh	r2, [r3, #6]
 801cffa:	893b      	ldrh	r3, [r7, #8]
 801cffc:	4293      	cmp	r3, r2
 801cffe:	bf28      	it	cs
 801d000:	4613      	movcs	r3, r2
 801d002:	b29b      	uxth	r3, r3
 801d004:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d006:	893b      	ldrh	r3, [r7, #8]
 801d008:	461a      	mov	r2, r3
 801d00a:	68f9      	ldr	r1, [r7, #12]
 801d00c:	6878      	ldr	r0, [r7, #4]
 801d00e:	f000 fa21 	bl	801d454 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d012:	683b      	ldr	r3, [r7, #0]
 801d014:	88db      	ldrh	r3, [r3, #6]
 801d016:	2b00      	cmp	r3, #0
 801d018:	d104      	bne.n	801d024 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d01a:	6878      	ldr	r0, [r7, #4]
 801d01c:	f000 fa78 	bl	801d510 <USBD_CtlSendStatus>
 801d020:	e000      	b.n	801d024 <USBD_GetDescriptor+0x2c8>
    return;
 801d022:	bf00      	nop
    }
  }
}
 801d024:	3710      	adds	r7, #16
 801d026:	46bd      	mov	sp, r7
 801d028:	bd80      	pop	{r7, pc}
 801d02a:	bf00      	nop

0801d02c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b084      	sub	sp, #16
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
 801d034:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d036:	683b      	ldr	r3, [r7, #0]
 801d038:	889b      	ldrh	r3, [r3, #4]
 801d03a:	2b00      	cmp	r3, #0
 801d03c:	d130      	bne.n	801d0a0 <USBD_SetAddress+0x74>
 801d03e:	683b      	ldr	r3, [r7, #0]
 801d040:	88db      	ldrh	r3, [r3, #6]
 801d042:	2b00      	cmp	r3, #0
 801d044:	d12c      	bne.n	801d0a0 <USBD_SetAddress+0x74>
 801d046:	683b      	ldr	r3, [r7, #0]
 801d048:	885b      	ldrh	r3, [r3, #2]
 801d04a:	2b7f      	cmp	r3, #127	; 0x7f
 801d04c:	d828      	bhi.n	801d0a0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d04e:	683b      	ldr	r3, [r7, #0]
 801d050:	885b      	ldrh	r3, [r3, #2]
 801d052:	b2db      	uxtb	r3, r3
 801d054:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d058:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d05a:	687b      	ldr	r3, [r7, #4]
 801d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d060:	2b03      	cmp	r3, #3
 801d062:	d104      	bne.n	801d06e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d064:	6839      	ldr	r1, [r7, #0]
 801d066:	6878      	ldr	r0, [r7, #4]
 801d068:	f000 f989 	bl	801d37e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d06c:	e01c      	b.n	801d0a8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d06e:	687b      	ldr	r3, [r7, #4]
 801d070:	7bfa      	ldrb	r2, [r7, #15]
 801d072:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d076:	7bfb      	ldrb	r3, [r7, #15]
 801d078:	4619      	mov	r1, r3
 801d07a:	6878      	ldr	r0, [r7, #4]
 801d07c:	f000 fef8 	bl	801de70 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d080:	6878      	ldr	r0, [r7, #4]
 801d082:	f000 fa45 	bl	801d510 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d086:	7bfb      	ldrb	r3, [r7, #15]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d004      	beq.n	801d096 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d08c:	687b      	ldr	r3, [r7, #4]
 801d08e:	2202      	movs	r2, #2
 801d090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d094:	e008      	b.n	801d0a8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d096:	687b      	ldr	r3, [r7, #4]
 801d098:	2201      	movs	r2, #1
 801d09a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d09e:	e003      	b.n	801d0a8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d0a0:	6839      	ldr	r1, [r7, #0]
 801d0a2:	6878      	ldr	r0, [r7, #4]
 801d0a4:	f000 f96b 	bl	801d37e <USBD_CtlError>
  }
}
 801d0a8:	bf00      	nop
 801d0aa:	3710      	adds	r7, #16
 801d0ac:	46bd      	mov	sp, r7
 801d0ae:	bd80      	pop	{r7, pc}

0801d0b0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d0b0:	b580      	push	{r7, lr}
 801d0b2:	b082      	sub	sp, #8
 801d0b4:	af00      	add	r7, sp, #0
 801d0b6:	6078      	str	r0, [r7, #4]
 801d0b8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d0ba:	683b      	ldr	r3, [r7, #0]
 801d0bc:	885b      	ldrh	r3, [r3, #2]
 801d0be:	b2da      	uxtb	r2, r3
 801d0c0:	4b41      	ldr	r3, [pc, #260]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d0c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d0c4:	4b40      	ldr	r3, [pc, #256]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d0c6:	781b      	ldrb	r3, [r3, #0]
 801d0c8:	2b01      	cmp	r3, #1
 801d0ca:	d904      	bls.n	801d0d6 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d0cc:	6839      	ldr	r1, [r7, #0]
 801d0ce:	6878      	ldr	r0, [r7, #4]
 801d0d0:	f000 f955 	bl	801d37e <USBD_CtlError>
 801d0d4:	e075      	b.n	801d1c2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d0d6:	687b      	ldr	r3, [r7, #4]
 801d0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d0dc:	2b02      	cmp	r3, #2
 801d0de:	d002      	beq.n	801d0e6 <USBD_SetConfig+0x36>
 801d0e0:	2b03      	cmp	r3, #3
 801d0e2:	d023      	beq.n	801d12c <USBD_SetConfig+0x7c>
 801d0e4:	e062      	b.n	801d1ac <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d0e6:	4b38      	ldr	r3, [pc, #224]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d0e8:	781b      	ldrb	r3, [r3, #0]
 801d0ea:	2b00      	cmp	r3, #0
 801d0ec:	d01a      	beq.n	801d124 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d0ee:	4b36      	ldr	r3, [pc, #216]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d0f0:	781b      	ldrb	r3, [r3, #0]
 801d0f2:	461a      	mov	r2, r3
 801d0f4:	687b      	ldr	r3, [r7, #4]
 801d0f6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d0f8:	687b      	ldr	r3, [r7, #4]
 801d0fa:	2203      	movs	r2, #3
 801d0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d100:	4b31      	ldr	r3, [pc, #196]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d102:	781b      	ldrb	r3, [r3, #0]
 801d104:	4619      	mov	r1, r3
 801d106:	6878      	ldr	r0, [r7, #4]
 801d108:	f7ff f9b4 	bl	801c474 <USBD_SetClassConfig>
 801d10c:	4603      	mov	r3, r0
 801d10e:	2b02      	cmp	r3, #2
 801d110:	d104      	bne.n	801d11c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d112:	6839      	ldr	r1, [r7, #0]
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f000 f932 	bl	801d37e <USBD_CtlError>
            return;
 801d11a:	e052      	b.n	801d1c2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d11c:	6878      	ldr	r0, [r7, #4]
 801d11e:	f000 f9f7 	bl	801d510 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d122:	e04e      	b.n	801d1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d124:	6878      	ldr	r0, [r7, #4]
 801d126:	f000 f9f3 	bl	801d510 <USBD_CtlSendStatus>
        break;
 801d12a:	e04a      	b.n	801d1c2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d12c:	4b26      	ldr	r3, [pc, #152]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d12e:	781b      	ldrb	r3, [r3, #0]
 801d130:	2b00      	cmp	r3, #0
 801d132:	d112      	bne.n	801d15a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d134:	687b      	ldr	r3, [r7, #4]
 801d136:	2202      	movs	r2, #2
 801d138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d13c:	4b22      	ldr	r3, [pc, #136]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d13e:	781b      	ldrb	r3, [r3, #0]
 801d140:	461a      	mov	r2, r3
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d146:	4b20      	ldr	r3, [pc, #128]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d148:	781b      	ldrb	r3, [r3, #0]
 801d14a:	4619      	mov	r1, r3
 801d14c:	6878      	ldr	r0, [r7, #4]
 801d14e:	f7ff f9b0 	bl	801c4b2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d152:	6878      	ldr	r0, [r7, #4]
 801d154:	f000 f9dc 	bl	801d510 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d158:	e033      	b.n	801d1c2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d15a:	4b1b      	ldr	r3, [pc, #108]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d15c:	781b      	ldrb	r3, [r3, #0]
 801d15e:	461a      	mov	r2, r3
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	685b      	ldr	r3, [r3, #4]
 801d164:	429a      	cmp	r2, r3
 801d166:	d01d      	beq.n	801d1a4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d168:	687b      	ldr	r3, [r7, #4]
 801d16a:	685b      	ldr	r3, [r3, #4]
 801d16c:	b2db      	uxtb	r3, r3
 801d16e:	4619      	mov	r1, r3
 801d170:	6878      	ldr	r0, [r7, #4]
 801d172:	f7ff f99e 	bl	801c4b2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d176:	4b14      	ldr	r3, [pc, #80]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d178:	781b      	ldrb	r3, [r3, #0]
 801d17a:	461a      	mov	r2, r3
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d180:	4b11      	ldr	r3, [pc, #68]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d182:	781b      	ldrb	r3, [r3, #0]
 801d184:	4619      	mov	r1, r3
 801d186:	6878      	ldr	r0, [r7, #4]
 801d188:	f7ff f974 	bl	801c474 <USBD_SetClassConfig>
 801d18c:	4603      	mov	r3, r0
 801d18e:	2b02      	cmp	r3, #2
 801d190:	d104      	bne.n	801d19c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d192:	6839      	ldr	r1, [r7, #0]
 801d194:	6878      	ldr	r0, [r7, #4]
 801d196:	f000 f8f2 	bl	801d37e <USBD_CtlError>
            return;
 801d19a:	e012      	b.n	801d1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d19c:	6878      	ldr	r0, [r7, #4]
 801d19e:	f000 f9b7 	bl	801d510 <USBD_CtlSendStatus>
        break;
 801d1a2:	e00e      	b.n	801d1c2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d1a4:	6878      	ldr	r0, [r7, #4]
 801d1a6:	f000 f9b3 	bl	801d510 <USBD_CtlSendStatus>
        break;
 801d1aa:	e00a      	b.n	801d1c2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d1ac:	6839      	ldr	r1, [r7, #0]
 801d1ae:	6878      	ldr	r0, [r7, #4]
 801d1b0:	f000 f8e5 	bl	801d37e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d1b4:	4b04      	ldr	r3, [pc, #16]	; (801d1c8 <USBD_SetConfig+0x118>)
 801d1b6:	781b      	ldrb	r3, [r3, #0]
 801d1b8:	4619      	mov	r1, r3
 801d1ba:	6878      	ldr	r0, [r7, #4]
 801d1bc:	f7ff f979 	bl	801c4b2 <USBD_ClrClassConfig>
        break;
 801d1c0:	bf00      	nop
    }
  }
}
 801d1c2:	3708      	adds	r7, #8
 801d1c4:	46bd      	mov	sp, r7
 801d1c6:	bd80      	pop	{r7, pc}
 801d1c8:	24000305 	.word	0x24000305

0801d1cc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d1cc:	b580      	push	{r7, lr}
 801d1ce:	b082      	sub	sp, #8
 801d1d0:	af00      	add	r7, sp, #0
 801d1d2:	6078      	str	r0, [r7, #4]
 801d1d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d1d6:	683b      	ldr	r3, [r7, #0]
 801d1d8:	88db      	ldrh	r3, [r3, #6]
 801d1da:	2b01      	cmp	r3, #1
 801d1dc:	d004      	beq.n	801d1e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d1de:	6839      	ldr	r1, [r7, #0]
 801d1e0:	6878      	ldr	r0, [r7, #4]
 801d1e2:	f000 f8cc 	bl	801d37e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d1e6:	e021      	b.n	801d22c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d1ee:	2b01      	cmp	r3, #1
 801d1f0:	db17      	blt.n	801d222 <USBD_GetConfig+0x56>
 801d1f2:	2b02      	cmp	r3, #2
 801d1f4:	dd02      	ble.n	801d1fc <USBD_GetConfig+0x30>
 801d1f6:	2b03      	cmp	r3, #3
 801d1f8:	d00b      	beq.n	801d212 <USBD_GetConfig+0x46>
 801d1fa:	e012      	b.n	801d222 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d1fc:	687b      	ldr	r3, [r7, #4]
 801d1fe:	2200      	movs	r2, #0
 801d200:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d202:	687b      	ldr	r3, [r7, #4]
 801d204:	3308      	adds	r3, #8
 801d206:	2201      	movs	r2, #1
 801d208:	4619      	mov	r1, r3
 801d20a:	6878      	ldr	r0, [r7, #4]
 801d20c:	f000 f922 	bl	801d454 <USBD_CtlSendData>
        break;
 801d210:	e00c      	b.n	801d22c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d212:	687b      	ldr	r3, [r7, #4]
 801d214:	3304      	adds	r3, #4
 801d216:	2201      	movs	r2, #1
 801d218:	4619      	mov	r1, r3
 801d21a:	6878      	ldr	r0, [r7, #4]
 801d21c:	f000 f91a 	bl	801d454 <USBD_CtlSendData>
        break;
 801d220:	e004      	b.n	801d22c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d222:	6839      	ldr	r1, [r7, #0]
 801d224:	6878      	ldr	r0, [r7, #4]
 801d226:	f000 f8aa 	bl	801d37e <USBD_CtlError>
        break;
 801d22a:	bf00      	nop
}
 801d22c:	bf00      	nop
 801d22e:	3708      	adds	r7, #8
 801d230:	46bd      	mov	sp, r7
 801d232:	bd80      	pop	{r7, pc}

0801d234 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d234:	b580      	push	{r7, lr}
 801d236:	b082      	sub	sp, #8
 801d238:	af00      	add	r7, sp, #0
 801d23a:	6078      	str	r0, [r7, #4]
 801d23c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d23e:	687b      	ldr	r3, [r7, #4]
 801d240:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d244:	3b01      	subs	r3, #1
 801d246:	2b02      	cmp	r3, #2
 801d248:	d81e      	bhi.n	801d288 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d24a:	683b      	ldr	r3, [r7, #0]
 801d24c:	88db      	ldrh	r3, [r3, #6]
 801d24e:	2b02      	cmp	r3, #2
 801d250:	d004      	beq.n	801d25c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d252:	6839      	ldr	r1, [r7, #0]
 801d254:	6878      	ldr	r0, [r7, #4]
 801d256:	f000 f892 	bl	801d37e <USBD_CtlError>
        break;
 801d25a:	e01a      	b.n	801d292 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	2201      	movs	r2, #1
 801d260:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d262:	687b      	ldr	r3, [r7, #4]
 801d264:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d268:	2b00      	cmp	r3, #0
 801d26a:	d005      	beq.n	801d278 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d26c:	687b      	ldr	r3, [r7, #4]
 801d26e:	68db      	ldr	r3, [r3, #12]
 801d270:	f043 0202 	orr.w	r2, r3, #2
 801d274:	687b      	ldr	r3, [r7, #4]
 801d276:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d278:	687b      	ldr	r3, [r7, #4]
 801d27a:	330c      	adds	r3, #12
 801d27c:	2202      	movs	r2, #2
 801d27e:	4619      	mov	r1, r3
 801d280:	6878      	ldr	r0, [r7, #4]
 801d282:	f000 f8e7 	bl	801d454 <USBD_CtlSendData>
      break;
 801d286:	e004      	b.n	801d292 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d288:	6839      	ldr	r1, [r7, #0]
 801d28a:	6878      	ldr	r0, [r7, #4]
 801d28c:	f000 f877 	bl	801d37e <USBD_CtlError>
      break;
 801d290:	bf00      	nop
  }
}
 801d292:	bf00      	nop
 801d294:	3708      	adds	r7, #8
 801d296:	46bd      	mov	sp, r7
 801d298:	bd80      	pop	{r7, pc}

0801d29a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d29a:	b580      	push	{r7, lr}
 801d29c:	b082      	sub	sp, #8
 801d29e:	af00      	add	r7, sp, #0
 801d2a0:	6078      	str	r0, [r7, #4]
 801d2a2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d2a4:	683b      	ldr	r3, [r7, #0]
 801d2a6:	885b      	ldrh	r3, [r3, #2]
 801d2a8:	2b01      	cmp	r3, #1
 801d2aa:	d106      	bne.n	801d2ba <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d2ac:	687b      	ldr	r3, [r7, #4]
 801d2ae:	2201      	movs	r2, #1
 801d2b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d2b4:	6878      	ldr	r0, [r7, #4]
 801d2b6:	f000 f92b 	bl	801d510 <USBD_CtlSendStatus>
  }
}
 801d2ba:	bf00      	nop
 801d2bc:	3708      	adds	r7, #8
 801d2be:	46bd      	mov	sp, r7
 801d2c0:	bd80      	pop	{r7, pc}

0801d2c2 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d2c2:	b580      	push	{r7, lr}
 801d2c4:	b082      	sub	sp, #8
 801d2c6:	af00      	add	r7, sp, #0
 801d2c8:	6078      	str	r0, [r7, #4]
 801d2ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d2cc:	687b      	ldr	r3, [r7, #4]
 801d2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d2d2:	3b01      	subs	r3, #1
 801d2d4:	2b02      	cmp	r3, #2
 801d2d6:	d80b      	bhi.n	801d2f0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d2d8:	683b      	ldr	r3, [r7, #0]
 801d2da:	885b      	ldrh	r3, [r3, #2]
 801d2dc:	2b01      	cmp	r3, #1
 801d2de:	d10c      	bne.n	801d2fa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d2e0:	687b      	ldr	r3, [r7, #4]
 801d2e2:	2200      	movs	r2, #0
 801d2e4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d2e8:	6878      	ldr	r0, [r7, #4]
 801d2ea:	f000 f911 	bl	801d510 <USBD_CtlSendStatus>
      }
      break;
 801d2ee:	e004      	b.n	801d2fa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d2f0:	6839      	ldr	r1, [r7, #0]
 801d2f2:	6878      	ldr	r0, [r7, #4]
 801d2f4:	f000 f843 	bl	801d37e <USBD_CtlError>
      break;
 801d2f8:	e000      	b.n	801d2fc <USBD_ClrFeature+0x3a>
      break;
 801d2fa:	bf00      	nop
  }
}
 801d2fc:	bf00      	nop
 801d2fe:	3708      	adds	r7, #8
 801d300:	46bd      	mov	sp, r7
 801d302:	bd80      	pop	{r7, pc}

0801d304 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d304:	b480      	push	{r7}
 801d306:	b083      	sub	sp, #12
 801d308:	af00      	add	r7, sp, #0
 801d30a:	6078      	str	r0, [r7, #4]
 801d30c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d30e:	683b      	ldr	r3, [r7, #0]
 801d310:	781a      	ldrb	r2, [r3, #0]
 801d312:	687b      	ldr	r3, [r7, #4]
 801d314:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d316:	683b      	ldr	r3, [r7, #0]
 801d318:	785a      	ldrb	r2, [r3, #1]
 801d31a:	687b      	ldr	r3, [r7, #4]
 801d31c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d31e:	683b      	ldr	r3, [r7, #0]
 801d320:	3302      	adds	r3, #2
 801d322:	781b      	ldrb	r3, [r3, #0]
 801d324:	b29a      	uxth	r2, r3
 801d326:	683b      	ldr	r3, [r7, #0]
 801d328:	3303      	adds	r3, #3
 801d32a:	781b      	ldrb	r3, [r3, #0]
 801d32c:	b29b      	uxth	r3, r3
 801d32e:	021b      	lsls	r3, r3, #8
 801d330:	b29b      	uxth	r3, r3
 801d332:	4413      	add	r3, r2
 801d334:	b29a      	uxth	r2, r3
 801d336:	687b      	ldr	r3, [r7, #4]
 801d338:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d33a:	683b      	ldr	r3, [r7, #0]
 801d33c:	3304      	adds	r3, #4
 801d33e:	781b      	ldrb	r3, [r3, #0]
 801d340:	b29a      	uxth	r2, r3
 801d342:	683b      	ldr	r3, [r7, #0]
 801d344:	3305      	adds	r3, #5
 801d346:	781b      	ldrb	r3, [r3, #0]
 801d348:	b29b      	uxth	r3, r3
 801d34a:	021b      	lsls	r3, r3, #8
 801d34c:	b29b      	uxth	r3, r3
 801d34e:	4413      	add	r3, r2
 801d350:	b29a      	uxth	r2, r3
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d356:	683b      	ldr	r3, [r7, #0]
 801d358:	3306      	adds	r3, #6
 801d35a:	781b      	ldrb	r3, [r3, #0]
 801d35c:	b29a      	uxth	r2, r3
 801d35e:	683b      	ldr	r3, [r7, #0]
 801d360:	3307      	adds	r3, #7
 801d362:	781b      	ldrb	r3, [r3, #0]
 801d364:	b29b      	uxth	r3, r3
 801d366:	021b      	lsls	r3, r3, #8
 801d368:	b29b      	uxth	r3, r3
 801d36a:	4413      	add	r3, r2
 801d36c:	b29a      	uxth	r2, r3
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	80da      	strh	r2, [r3, #6]

}
 801d372:	bf00      	nop
 801d374:	370c      	adds	r7, #12
 801d376:	46bd      	mov	sp, r7
 801d378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d37c:	4770      	bx	lr

0801d37e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d37e:	b580      	push	{r7, lr}
 801d380:	b082      	sub	sp, #8
 801d382:	af00      	add	r7, sp, #0
 801d384:	6078      	str	r0, [r7, #4]
 801d386:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d388:	2180      	movs	r1, #128	; 0x80
 801d38a:	6878      	ldr	r0, [r7, #4]
 801d38c:	f000 fd06 	bl	801dd9c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d390:	2100      	movs	r1, #0
 801d392:	6878      	ldr	r0, [r7, #4]
 801d394:	f000 fd02 	bl	801dd9c <USBD_LL_StallEP>
}
 801d398:	bf00      	nop
 801d39a:	3708      	adds	r7, #8
 801d39c:	46bd      	mov	sp, r7
 801d39e:	bd80      	pop	{r7, pc}

0801d3a0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d3a0:	b580      	push	{r7, lr}
 801d3a2:	b086      	sub	sp, #24
 801d3a4:	af00      	add	r7, sp, #0
 801d3a6:	60f8      	str	r0, [r7, #12]
 801d3a8:	60b9      	str	r1, [r7, #8]
 801d3aa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d3ac:	2300      	movs	r3, #0
 801d3ae:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	2b00      	cmp	r3, #0
 801d3b4:	d032      	beq.n	801d41c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d3b6:	68f8      	ldr	r0, [r7, #12]
 801d3b8:	f000 f834 	bl	801d424 <USBD_GetLen>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	3301      	adds	r3, #1
 801d3c0:	b29b      	uxth	r3, r3
 801d3c2:	005b      	lsls	r3, r3, #1
 801d3c4:	b29a      	uxth	r2, r3
 801d3c6:	687b      	ldr	r3, [r7, #4]
 801d3c8:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d3ca:	7dfb      	ldrb	r3, [r7, #23]
 801d3cc:	1c5a      	adds	r2, r3, #1
 801d3ce:	75fa      	strb	r2, [r7, #23]
 801d3d0:	461a      	mov	r2, r3
 801d3d2:	68bb      	ldr	r3, [r7, #8]
 801d3d4:	4413      	add	r3, r2
 801d3d6:	687a      	ldr	r2, [r7, #4]
 801d3d8:	7812      	ldrb	r2, [r2, #0]
 801d3da:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d3dc:	7dfb      	ldrb	r3, [r7, #23]
 801d3de:	1c5a      	adds	r2, r3, #1
 801d3e0:	75fa      	strb	r2, [r7, #23]
 801d3e2:	461a      	mov	r2, r3
 801d3e4:	68bb      	ldr	r3, [r7, #8]
 801d3e6:	4413      	add	r3, r2
 801d3e8:	2203      	movs	r2, #3
 801d3ea:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d3ec:	e012      	b.n	801d414 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801d3ee:	68fb      	ldr	r3, [r7, #12]
 801d3f0:	1c5a      	adds	r2, r3, #1
 801d3f2:	60fa      	str	r2, [r7, #12]
 801d3f4:	7dfa      	ldrb	r2, [r7, #23]
 801d3f6:	1c51      	adds	r1, r2, #1
 801d3f8:	75f9      	strb	r1, [r7, #23]
 801d3fa:	4611      	mov	r1, r2
 801d3fc:	68ba      	ldr	r2, [r7, #8]
 801d3fe:	440a      	add	r2, r1
 801d400:	781b      	ldrb	r3, [r3, #0]
 801d402:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d404:	7dfb      	ldrb	r3, [r7, #23]
 801d406:	1c5a      	adds	r2, r3, #1
 801d408:	75fa      	strb	r2, [r7, #23]
 801d40a:	461a      	mov	r2, r3
 801d40c:	68bb      	ldr	r3, [r7, #8]
 801d40e:	4413      	add	r3, r2
 801d410:	2200      	movs	r2, #0
 801d412:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d414:	68fb      	ldr	r3, [r7, #12]
 801d416:	781b      	ldrb	r3, [r3, #0]
 801d418:	2b00      	cmp	r3, #0
 801d41a:	d1e8      	bne.n	801d3ee <USBD_GetString+0x4e>
    }
  }
}
 801d41c:	bf00      	nop
 801d41e:	3718      	adds	r7, #24
 801d420:	46bd      	mov	sp, r7
 801d422:	bd80      	pop	{r7, pc}

0801d424 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d424:	b480      	push	{r7}
 801d426:	b085      	sub	sp, #20
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d42c:	2300      	movs	r3, #0
 801d42e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801d430:	e005      	b.n	801d43e <USBD_GetLen+0x1a>
  {
    len++;
 801d432:	7bfb      	ldrb	r3, [r7, #15]
 801d434:	3301      	adds	r3, #1
 801d436:	73fb      	strb	r3, [r7, #15]
    buf++;
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	3301      	adds	r3, #1
 801d43c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d43e:	687b      	ldr	r3, [r7, #4]
 801d440:	781b      	ldrb	r3, [r3, #0]
 801d442:	2b00      	cmp	r3, #0
 801d444:	d1f5      	bne.n	801d432 <USBD_GetLen+0xe>
  }

  return len;
 801d446:	7bfb      	ldrb	r3, [r7, #15]
}
 801d448:	4618      	mov	r0, r3
 801d44a:	3714      	adds	r7, #20
 801d44c:	46bd      	mov	sp, r7
 801d44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d452:	4770      	bx	lr

0801d454 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d454:	b580      	push	{r7, lr}
 801d456:	b084      	sub	sp, #16
 801d458:	af00      	add	r7, sp, #0
 801d45a:	60f8      	str	r0, [r7, #12]
 801d45c:	60b9      	str	r1, [r7, #8]
 801d45e:	4613      	mov	r3, r2
 801d460:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d462:	68fb      	ldr	r3, [r7, #12]
 801d464:	2202      	movs	r2, #2
 801d466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d46a:	88fa      	ldrh	r2, [r7, #6]
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d470:	88fa      	ldrh	r2, [r7, #6]
 801d472:	68fb      	ldr	r3, [r7, #12]
 801d474:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d476:	88fb      	ldrh	r3, [r7, #6]
 801d478:	68ba      	ldr	r2, [r7, #8]
 801d47a:	2100      	movs	r1, #0
 801d47c:	68f8      	ldr	r0, [r7, #12]
 801d47e:	f000 fd16 	bl	801deae <USBD_LL_Transmit>

  return USBD_OK;
 801d482:	2300      	movs	r3, #0
}
 801d484:	4618      	mov	r0, r3
 801d486:	3710      	adds	r7, #16
 801d488:	46bd      	mov	sp, r7
 801d48a:	bd80      	pop	{r7, pc}

0801d48c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d48c:	b580      	push	{r7, lr}
 801d48e:	b084      	sub	sp, #16
 801d490:	af00      	add	r7, sp, #0
 801d492:	60f8      	str	r0, [r7, #12]
 801d494:	60b9      	str	r1, [r7, #8]
 801d496:	4613      	mov	r3, r2
 801d498:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d49a:	88fb      	ldrh	r3, [r7, #6]
 801d49c:	68ba      	ldr	r2, [r7, #8]
 801d49e:	2100      	movs	r1, #0
 801d4a0:	68f8      	ldr	r0, [r7, #12]
 801d4a2:	f000 fd04 	bl	801deae <USBD_LL_Transmit>

  return USBD_OK;
 801d4a6:	2300      	movs	r3, #0
}
 801d4a8:	4618      	mov	r0, r3
 801d4aa:	3710      	adds	r7, #16
 801d4ac:	46bd      	mov	sp, r7
 801d4ae:	bd80      	pop	{r7, pc}

0801d4b0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d4b0:	b580      	push	{r7, lr}
 801d4b2:	b084      	sub	sp, #16
 801d4b4:	af00      	add	r7, sp, #0
 801d4b6:	60f8      	str	r0, [r7, #12]
 801d4b8:	60b9      	str	r1, [r7, #8]
 801d4ba:	4613      	mov	r3, r2
 801d4bc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d4be:	68fb      	ldr	r3, [r7, #12]
 801d4c0:	2203      	movs	r2, #3
 801d4c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d4c6:	88fa      	ldrh	r2, [r7, #6]
 801d4c8:	68fb      	ldr	r3, [r7, #12]
 801d4ca:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801d4ce:	88fa      	ldrh	r2, [r7, #6]
 801d4d0:	68fb      	ldr	r3, [r7, #12]
 801d4d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d4d6:	88fb      	ldrh	r3, [r7, #6]
 801d4d8:	68ba      	ldr	r2, [r7, #8]
 801d4da:	2100      	movs	r1, #0
 801d4dc:	68f8      	ldr	r0, [r7, #12]
 801d4de:	f000 fd09 	bl	801def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d4e2:	2300      	movs	r3, #0
}
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	3710      	adds	r7, #16
 801d4e8:	46bd      	mov	sp, r7
 801d4ea:	bd80      	pop	{r7, pc}

0801d4ec <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d4ec:	b580      	push	{r7, lr}
 801d4ee:	b084      	sub	sp, #16
 801d4f0:	af00      	add	r7, sp, #0
 801d4f2:	60f8      	str	r0, [r7, #12]
 801d4f4:	60b9      	str	r1, [r7, #8]
 801d4f6:	4613      	mov	r3, r2
 801d4f8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d4fa:	88fb      	ldrh	r3, [r7, #6]
 801d4fc:	68ba      	ldr	r2, [r7, #8]
 801d4fe:	2100      	movs	r1, #0
 801d500:	68f8      	ldr	r0, [r7, #12]
 801d502:	f000 fcf7 	bl	801def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d506:	2300      	movs	r3, #0
}
 801d508:	4618      	mov	r0, r3
 801d50a:	3710      	adds	r7, #16
 801d50c:	46bd      	mov	sp, r7
 801d50e:	bd80      	pop	{r7, pc}

0801d510 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d510:	b580      	push	{r7, lr}
 801d512:	b082      	sub	sp, #8
 801d514:	af00      	add	r7, sp, #0
 801d516:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d518:	687b      	ldr	r3, [r7, #4]
 801d51a:	2204      	movs	r2, #4
 801d51c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d520:	2300      	movs	r3, #0
 801d522:	2200      	movs	r2, #0
 801d524:	2100      	movs	r1, #0
 801d526:	6878      	ldr	r0, [r7, #4]
 801d528:	f000 fcc1 	bl	801deae <USBD_LL_Transmit>

  return USBD_OK;
 801d52c:	2300      	movs	r3, #0
}
 801d52e:	4618      	mov	r0, r3
 801d530:	3708      	adds	r7, #8
 801d532:	46bd      	mov	sp, r7
 801d534:	bd80      	pop	{r7, pc}

0801d536 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d536:	b580      	push	{r7, lr}
 801d538:	b082      	sub	sp, #8
 801d53a:	af00      	add	r7, sp, #0
 801d53c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d53e:	687b      	ldr	r3, [r7, #4]
 801d540:	2205      	movs	r2, #5
 801d542:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d546:	2300      	movs	r3, #0
 801d548:	2200      	movs	r2, #0
 801d54a:	2100      	movs	r1, #0
 801d54c:	6878      	ldr	r0, [r7, #4]
 801d54e:	f000 fcd1 	bl	801def4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d552:	2300      	movs	r3, #0
}
 801d554:	4618      	mov	r0, r3
 801d556:	3708      	adds	r7, #8
 801d558:	46bd      	mov	sp, r7
 801d55a:	bd80      	pop	{r7, pc}

0801d55c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d55c:	b580      	push	{r7, lr}
 801d55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d560:	2200      	movs	r2, #0
 801d562:	4913      	ldr	r1, [pc, #76]	; (801d5b0 <MX_USB_DEVICE_Init+0x54>)
 801d564:	4813      	ldr	r0, [pc, #76]	; (801d5b4 <MX_USB_DEVICE_Init+0x58>)
 801d566:	f7fe ff29 	bl	801c3bc <USBD_Init>
 801d56a:	4603      	mov	r3, r0
 801d56c:	2b00      	cmp	r3, #0
 801d56e:	d001      	beq.n	801d574 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d570:	f7e4 fb82 	bl	8001c78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d574:	4910      	ldr	r1, [pc, #64]	; (801d5b8 <MX_USB_DEVICE_Init+0x5c>)
 801d576:	480f      	ldr	r0, [pc, #60]	; (801d5b4 <MX_USB_DEVICE_Init+0x58>)
 801d578:	f7fe ff4b 	bl	801c412 <USBD_RegisterClass>
 801d57c:	4603      	mov	r3, r0
 801d57e:	2b00      	cmp	r3, #0
 801d580:	d001      	beq.n	801d586 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d582:	f7e4 fb79 	bl	8001c78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d586:	490d      	ldr	r1, [pc, #52]	; (801d5bc <MX_USB_DEVICE_Init+0x60>)
 801d588:	480a      	ldr	r0, [pc, #40]	; (801d5b4 <MX_USB_DEVICE_Init+0x58>)
 801d58a:	f7fe fe79 	bl	801c280 <USBD_CDC_RegisterInterface>
 801d58e:	4603      	mov	r3, r0
 801d590:	2b00      	cmp	r3, #0
 801d592:	d001      	beq.n	801d598 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d594:	f7e4 fb70 	bl	8001c78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d598:	4806      	ldr	r0, [pc, #24]	; (801d5b4 <MX_USB_DEVICE_Init+0x58>)
 801d59a:	f7fe ff54 	bl	801c446 <USBD_Start>
 801d59e:	4603      	mov	r3, r0
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d001      	beq.n	801d5a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d5a4:	f7e4 fb68 	bl	8001c78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801d5a8:	f7f7 f8ca 	bl	8014740 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d5ac:	bf00      	nop
 801d5ae:	bd80      	pop	{r7, pc}
 801d5b0:	24000138 	.word	0x24000138
 801d5b4:	24000638 	.word	0x24000638
 801d5b8:	24000024 	.word	0x24000024
 801d5bc:	24000128 	.word	0x24000128

0801d5c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d5c0:	b580      	push	{r7, lr}
 801d5c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d5c4:	2200      	movs	r2, #0
 801d5c6:	4905      	ldr	r1, [pc, #20]	; (801d5dc <CDC_Init_FS+0x1c>)
 801d5c8:	4805      	ldr	r0, [pc, #20]	; (801d5e0 <CDC_Init_FS+0x20>)
 801d5ca:	f7fe fe70 	bl	801c2ae <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d5ce:	4905      	ldr	r1, [pc, #20]	; (801d5e4 <CDC_Init_FS+0x24>)
 801d5d0:	4803      	ldr	r0, [pc, #12]	; (801d5e0 <CDC_Init_FS+0x20>)
 801d5d2:	f7fe fe86 	bl	801c2e2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d5d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d5d8:	4618      	mov	r0, r3
 801d5da:	bd80      	pop	{r7, pc}
 801d5dc:	240010fc 	.word	0x240010fc
 801d5e0:	24000638 	.word	0x24000638
 801d5e4:	240008fc 	.word	0x240008fc

0801d5e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d5e8:	b480      	push	{r7}
 801d5ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d5ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d5ee:	4618      	mov	r0, r3
 801d5f0:	46bd      	mov	sp, r7
 801d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d5f6:	4770      	bx	lr

0801d5f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d5f8:	b480      	push	{r7}
 801d5fa:	b085      	sub	sp, #20
 801d5fc:	af00      	add	r7, sp, #0
 801d5fe:	4603      	mov	r3, r0
 801d600:	6039      	str	r1, [r7, #0]
 801d602:	71fb      	strb	r3, [r7, #7]
 801d604:	4613      	mov	r3, r2
 801d606:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801d608:	f107 0308 	add.w	r3, r7, #8
 801d60c:	2200      	movs	r2, #0
 801d60e:	601a      	str	r2, [r3, #0]
 801d610:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 801d614:	79fb      	ldrb	r3, [r7, #7]
 801d616:	2b23      	cmp	r3, #35	; 0x23
 801d618:	d87c      	bhi.n	801d714 <CDC_Control_FS+0x11c>
 801d61a:	a201      	add	r2, pc, #4	; (adr r2, 801d620 <CDC_Control_FS+0x28>)
 801d61c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d620:	0801d715 	.word	0x0801d715
 801d624:	0801d715 	.word	0x0801d715
 801d628:	0801d715 	.word	0x0801d715
 801d62c:	0801d715 	.word	0x0801d715
 801d630:	0801d715 	.word	0x0801d715
 801d634:	0801d715 	.word	0x0801d715
 801d638:	0801d715 	.word	0x0801d715
 801d63c:	0801d715 	.word	0x0801d715
 801d640:	0801d715 	.word	0x0801d715
 801d644:	0801d715 	.word	0x0801d715
 801d648:	0801d715 	.word	0x0801d715
 801d64c:	0801d715 	.word	0x0801d715
 801d650:	0801d715 	.word	0x0801d715
 801d654:	0801d715 	.word	0x0801d715
 801d658:	0801d715 	.word	0x0801d715
 801d65c:	0801d715 	.word	0x0801d715
 801d660:	0801d715 	.word	0x0801d715
 801d664:	0801d715 	.word	0x0801d715
 801d668:	0801d715 	.word	0x0801d715
 801d66c:	0801d715 	.word	0x0801d715
 801d670:	0801d715 	.word	0x0801d715
 801d674:	0801d715 	.word	0x0801d715
 801d678:	0801d715 	.word	0x0801d715
 801d67c:	0801d715 	.word	0x0801d715
 801d680:	0801d715 	.word	0x0801d715
 801d684:	0801d715 	.word	0x0801d715
 801d688:	0801d715 	.word	0x0801d715
 801d68c:	0801d715 	.word	0x0801d715
 801d690:	0801d715 	.word	0x0801d715
 801d694:	0801d715 	.word	0x0801d715
 801d698:	0801d715 	.word	0x0801d715
 801d69c:	0801d715 	.word	0x0801d715
 801d6a0:	0801d6b1 	.word	0x0801d6b1
 801d6a4:	0801d6dd 	.word	0x0801d6dd
 801d6a8:	0801d715 	.word	0x0801d715
 801d6ac:	0801d715 	.word	0x0801d715
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 801d6b0:	683b      	ldr	r3, [r7, #0]
 801d6b2:	781b      	ldrb	r3, [r3, #0]
 801d6b4:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 801d6b6:	683b      	ldr	r3, [r7, #0]
 801d6b8:	785b      	ldrb	r3, [r3, #1]
 801d6ba:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 801d6bc:	683b      	ldr	r3, [r7, #0]
 801d6be:	789b      	ldrb	r3, [r3, #2]
 801d6c0:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 801d6c2:	683b      	ldr	r3, [r7, #0]
 801d6c4:	78db      	ldrb	r3, [r3, #3]
 801d6c6:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 801d6c8:	683b      	ldr	r3, [r7, #0]
 801d6ca:	791b      	ldrb	r3, [r3, #4]
 801d6cc:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 801d6ce:	683b      	ldr	r3, [r7, #0]
 801d6d0:	795b      	ldrb	r3, [r3, #5]
 801d6d2:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 801d6d4:	683b      	ldr	r3, [r7, #0]
 801d6d6:	799b      	ldrb	r3, [r3, #6]
 801d6d8:	73bb      	strb	r3, [r7, #14]
     	break;
 801d6da:	e01c      	b.n	801d716 <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 801d6dc:	7a3a      	ldrb	r2, [r7, #8]
 801d6de:	683b      	ldr	r3, [r7, #0]
 801d6e0:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 801d6e2:	683b      	ldr	r3, [r7, #0]
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	7a7a      	ldrb	r2, [r7, #9]
 801d6e8:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 801d6ea:	683b      	ldr	r3, [r7, #0]
 801d6ec:	3302      	adds	r3, #2
 801d6ee:	7aba      	ldrb	r2, [r7, #10]
 801d6f0:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 801d6f2:	683b      	ldr	r3, [r7, #0]
 801d6f4:	3303      	adds	r3, #3
 801d6f6:	7afa      	ldrb	r2, [r7, #11]
 801d6f8:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 801d6fa:	683b      	ldr	r3, [r7, #0]
 801d6fc:	3304      	adds	r3, #4
 801d6fe:	7b3a      	ldrb	r2, [r7, #12]
 801d700:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 801d702:	683b      	ldr	r3, [r7, #0]
 801d704:	3305      	adds	r3, #5
 801d706:	7b7a      	ldrb	r2, [r7, #13]
 801d708:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 801d70a:	683b      	ldr	r3, [r7, #0]
 801d70c:	3306      	adds	r3, #6
 801d70e:	7bba      	ldrb	r2, [r7, #14]
 801d710:	701a      	strb	r2, [r3, #0]
     	break;
 801d712:	e000      	b.n	801d716 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d714:	bf00      	nop
  }

  return (USBD_OK);
 801d716:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d718:	4618      	mov	r0, r3
 801d71a:	3714      	adds	r7, #20
 801d71c:	46bd      	mov	sp, r7
 801d71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d722:	4770      	bx	lr

0801d724 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d724:	b580      	push	{r7, lr}
 801d726:	b082      	sub	sp, #8
 801d728:	af00      	add	r7, sp, #0
 801d72a:	6078      	str	r0, [r7, #4]
 801d72c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d72e:	6879      	ldr	r1, [r7, #4]
 801d730:	4805      	ldr	r0, [pc, #20]	; (801d748 <CDC_Receive_FS+0x24>)
 801d732:	f7fe fdd6 	bl	801c2e2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d736:	4804      	ldr	r0, [pc, #16]	; (801d748 <CDC_Receive_FS+0x24>)
 801d738:	f7fe fe16 	bl	801c368 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d73c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d73e:	4618      	mov	r0, r3
 801d740:	3708      	adds	r7, #8
 801d742:	46bd      	mov	sp, r7
 801d744:	bd80      	pop	{r7, pc}
 801d746:	bf00      	nop
 801d748:	24000638 	.word	0x24000638

0801d74c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d74c:	b580      	push	{r7, lr}
 801d74e:	b084      	sub	sp, #16
 801d750:	af00      	add	r7, sp, #0
 801d752:	6078      	str	r0, [r7, #4]
 801d754:	460b      	mov	r3, r1
 801d756:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801d758:	2300      	movs	r3, #0
 801d75a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801d75c:	4b0d      	ldr	r3, [pc, #52]	; (801d794 <CDC_Transmit_FS+0x48>)
 801d75e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801d762:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801d764:	68bb      	ldr	r3, [r7, #8]
 801d766:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d001      	beq.n	801d772 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801d76e:	2301      	movs	r3, #1
 801d770:	e00b      	b.n	801d78a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801d772:	887b      	ldrh	r3, [r7, #2]
 801d774:	461a      	mov	r2, r3
 801d776:	6879      	ldr	r1, [r7, #4]
 801d778:	4806      	ldr	r0, [pc, #24]	; (801d794 <CDC_Transmit_FS+0x48>)
 801d77a:	f7fe fd98 	bl	801c2ae <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801d77e:	4805      	ldr	r0, [pc, #20]	; (801d794 <CDC_Transmit_FS+0x48>)
 801d780:	f7fe fdc3 	bl	801c30a <USBD_CDC_TransmitPacket>
 801d784:	4603      	mov	r3, r0
 801d786:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801d788:	7bfb      	ldrb	r3, [r7, #15]
}
 801d78a:	4618      	mov	r0, r3
 801d78c:	3710      	adds	r7, #16
 801d78e:	46bd      	mov	sp, r7
 801d790:	bd80      	pop	{r7, pc}
 801d792:	bf00      	nop
 801d794:	24000638 	.word	0x24000638

0801d798 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d798:	b480      	push	{r7}
 801d79a:	b083      	sub	sp, #12
 801d79c:	af00      	add	r7, sp, #0
 801d79e:	4603      	mov	r3, r0
 801d7a0:	6039      	str	r1, [r7, #0]
 801d7a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801d7a4:	683b      	ldr	r3, [r7, #0]
 801d7a6:	2212      	movs	r2, #18
 801d7a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801d7aa:	4b03      	ldr	r3, [pc, #12]	; (801d7b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 801d7ac:	4618      	mov	r0, r3
 801d7ae:	370c      	adds	r7, #12
 801d7b0:	46bd      	mov	sp, r7
 801d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7b6:	4770      	bx	lr
 801d7b8:	24000154 	.word	0x24000154

0801d7bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d7bc:	b480      	push	{r7}
 801d7be:	b083      	sub	sp, #12
 801d7c0:	af00      	add	r7, sp, #0
 801d7c2:	4603      	mov	r3, r0
 801d7c4:	6039      	str	r1, [r7, #0]
 801d7c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801d7c8:	683b      	ldr	r3, [r7, #0]
 801d7ca:	2204      	movs	r2, #4
 801d7cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801d7ce:	4b03      	ldr	r3, [pc, #12]	; (801d7dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801d7d0:	4618      	mov	r0, r3
 801d7d2:	370c      	adds	r7, #12
 801d7d4:	46bd      	mov	sp, r7
 801d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d7da:	4770      	bx	lr
 801d7dc:	24000168 	.word	0x24000168

0801d7e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d7e0:	b580      	push	{r7, lr}
 801d7e2:	b082      	sub	sp, #8
 801d7e4:	af00      	add	r7, sp, #0
 801d7e6:	4603      	mov	r3, r0
 801d7e8:	6039      	str	r1, [r7, #0]
 801d7ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d7ec:	79fb      	ldrb	r3, [r7, #7]
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	d105      	bne.n	801d7fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d7f2:	683a      	ldr	r2, [r7, #0]
 801d7f4:	4907      	ldr	r1, [pc, #28]	; (801d814 <USBD_FS_ProductStrDescriptor+0x34>)
 801d7f6:	4808      	ldr	r0, [pc, #32]	; (801d818 <USBD_FS_ProductStrDescriptor+0x38>)
 801d7f8:	f7ff fdd2 	bl	801d3a0 <USBD_GetString>
 801d7fc:	e004      	b.n	801d808 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801d7fe:	683a      	ldr	r2, [r7, #0]
 801d800:	4904      	ldr	r1, [pc, #16]	; (801d814 <USBD_FS_ProductStrDescriptor+0x34>)
 801d802:	4805      	ldr	r0, [pc, #20]	; (801d818 <USBD_FS_ProductStrDescriptor+0x38>)
 801d804:	f7ff fdcc 	bl	801d3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d808:	4b02      	ldr	r3, [pc, #8]	; (801d814 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801d80a:	4618      	mov	r0, r3
 801d80c:	3708      	adds	r7, #8
 801d80e:	46bd      	mov	sp, r7
 801d810:	bd80      	pop	{r7, pc}
 801d812:	bf00      	nop
 801d814:	240018fc 	.word	0x240018fc
 801d818:	0801f24c 	.word	0x0801f24c

0801d81c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d81c:	b580      	push	{r7, lr}
 801d81e:	b082      	sub	sp, #8
 801d820:	af00      	add	r7, sp, #0
 801d822:	4603      	mov	r3, r0
 801d824:	6039      	str	r1, [r7, #0]
 801d826:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801d828:	683a      	ldr	r2, [r7, #0]
 801d82a:	4904      	ldr	r1, [pc, #16]	; (801d83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801d82c:	4804      	ldr	r0, [pc, #16]	; (801d840 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801d82e:	f7ff fdb7 	bl	801d3a0 <USBD_GetString>
  return USBD_StrDesc;
 801d832:	4b02      	ldr	r3, [pc, #8]	; (801d83c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801d834:	4618      	mov	r0, r3
 801d836:	3708      	adds	r7, #8
 801d838:	46bd      	mov	sp, r7
 801d83a:	bd80      	pop	{r7, pc}
 801d83c:	240018fc 	.word	0x240018fc
 801d840:	0801f264 	.word	0x0801f264

0801d844 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d844:	b580      	push	{r7, lr}
 801d846:	b082      	sub	sp, #8
 801d848:	af00      	add	r7, sp, #0
 801d84a:	4603      	mov	r3, r0
 801d84c:	6039      	str	r1, [r7, #0]
 801d84e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801d850:	683b      	ldr	r3, [r7, #0]
 801d852:	221a      	movs	r2, #26
 801d854:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801d856:	f000 f843 	bl	801d8e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801d85a:	4b02      	ldr	r3, [pc, #8]	; (801d864 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801d85c:	4618      	mov	r0, r3
 801d85e:	3708      	adds	r7, #8
 801d860:	46bd      	mov	sp, r7
 801d862:	bd80      	pop	{r7, pc}
 801d864:	2400016c 	.word	0x2400016c

0801d868 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d868:	b580      	push	{r7, lr}
 801d86a:	b082      	sub	sp, #8
 801d86c:	af00      	add	r7, sp, #0
 801d86e:	4603      	mov	r3, r0
 801d870:	6039      	str	r1, [r7, #0]
 801d872:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801d874:	79fb      	ldrb	r3, [r7, #7]
 801d876:	2b00      	cmp	r3, #0
 801d878:	d105      	bne.n	801d886 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d87a:	683a      	ldr	r2, [r7, #0]
 801d87c:	4907      	ldr	r1, [pc, #28]	; (801d89c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d87e:	4808      	ldr	r0, [pc, #32]	; (801d8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d880:	f7ff fd8e 	bl	801d3a0 <USBD_GetString>
 801d884:	e004      	b.n	801d890 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801d886:	683a      	ldr	r2, [r7, #0]
 801d888:	4904      	ldr	r1, [pc, #16]	; (801d89c <USBD_FS_ConfigStrDescriptor+0x34>)
 801d88a:	4805      	ldr	r0, [pc, #20]	; (801d8a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 801d88c:	f7ff fd88 	bl	801d3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d890:	4b02      	ldr	r3, [pc, #8]	; (801d89c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801d892:	4618      	mov	r0, r3
 801d894:	3708      	adds	r7, #8
 801d896:	46bd      	mov	sp, r7
 801d898:	bd80      	pop	{r7, pc}
 801d89a:	bf00      	nop
 801d89c:	240018fc 	.word	0x240018fc
 801d8a0:	0801f278 	.word	0x0801f278

0801d8a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b082      	sub	sp, #8
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	4603      	mov	r3, r0
 801d8ac:	6039      	str	r1, [r7, #0]
 801d8ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801d8b0:	79fb      	ldrb	r3, [r7, #7]
 801d8b2:	2b00      	cmp	r3, #0
 801d8b4:	d105      	bne.n	801d8c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d8b6:	683a      	ldr	r2, [r7, #0]
 801d8b8:	4907      	ldr	r1, [pc, #28]	; (801d8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d8ba:	4808      	ldr	r0, [pc, #32]	; (801d8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d8bc:	f7ff fd70 	bl	801d3a0 <USBD_GetString>
 801d8c0:	e004      	b.n	801d8cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801d8c2:	683a      	ldr	r2, [r7, #0]
 801d8c4:	4904      	ldr	r1, [pc, #16]	; (801d8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801d8c6:	4805      	ldr	r0, [pc, #20]	; (801d8dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 801d8c8:	f7ff fd6a 	bl	801d3a0 <USBD_GetString>
  }
  return USBD_StrDesc;
 801d8cc:	4b02      	ldr	r3, [pc, #8]	; (801d8d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801d8ce:	4618      	mov	r0, r3
 801d8d0:	3708      	adds	r7, #8
 801d8d2:	46bd      	mov	sp, r7
 801d8d4:	bd80      	pop	{r7, pc}
 801d8d6:	bf00      	nop
 801d8d8:	240018fc 	.word	0x240018fc
 801d8dc:	0801f284 	.word	0x0801f284

0801d8e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801d8e0:	b580      	push	{r7, lr}
 801d8e2:	b084      	sub	sp, #16
 801d8e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801d8e6:	4b0f      	ldr	r3, [pc, #60]	; (801d924 <Get_SerialNum+0x44>)
 801d8e8:	681b      	ldr	r3, [r3, #0]
 801d8ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801d8ec:	4b0e      	ldr	r3, [pc, #56]	; (801d928 <Get_SerialNum+0x48>)
 801d8ee:	681b      	ldr	r3, [r3, #0]
 801d8f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801d8f2:	4b0e      	ldr	r3, [pc, #56]	; (801d92c <Get_SerialNum+0x4c>)
 801d8f4:	681b      	ldr	r3, [r3, #0]
 801d8f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801d8f8:	68fa      	ldr	r2, [r7, #12]
 801d8fa:	687b      	ldr	r3, [r7, #4]
 801d8fc:	4413      	add	r3, r2
 801d8fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801d900:	68fb      	ldr	r3, [r7, #12]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d009      	beq.n	801d91a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801d906:	2208      	movs	r2, #8
 801d908:	4909      	ldr	r1, [pc, #36]	; (801d930 <Get_SerialNum+0x50>)
 801d90a:	68f8      	ldr	r0, [r7, #12]
 801d90c:	f000 f814 	bl	801d938 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801d910:	2204      	movs	r2, #4
 801d912:	4908      	ldr	r1, [pc, #32]	; (801d934 <Get_SerialNum+0x54>)
 801d914:	68b8      	ldr	r0, [r7, #8]
 801d916:	f000 f80f 	bl	801d938 <IntToUnicode>
  }
}
 801d91a:	bf00      	nop
 801d91c:	3710      	adds	r7, #16
 801d91e:	46bd      	mov	sp, r7
 801d920:	bd80      	pop	{r7, pc}
 801d922:	bf00      	nop
 801d924:	1ff1e800 	.word	0x1ff1e800
 801d928:	1ff1e804 	.word	0x1ff1e804
 801d92c:	1ff1e808 	.word	0x1ff1e808
 801d930:	2400016e 	.word	0x2400016e
 801d934:	2400017e 	.word	0x2400017e

0801d938 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801d938:	b480      	push	{r7}
 801d93a:	b087      	sub	sp, #28
 801d93c:	af00      	add	r7, sp, #0
 801d93e:	60f8      	str	r0, [r7, #12]
 801d940:	60b9      	str	r1, [r7, #8]
 801d942:	4613      	mov	r3, r2
 801d944:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801d946:	2300      	movs	r3, #0
 801d948:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801d94a:	2300      	movs	r3, #0
 801d94c:	75fb      	strb	r3, [r7, #23]
 801d94e:	e027      	b.n	801d9a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801d950:	68fb      	ldr	r3, [r7, #12]
 801d952:	0f1b      	lsrs	r3, r3, #28
 801d954:	2b09      	cmp	r3, #9
 801d956:	d80b      	bhi.n	801d970 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801d958:	68fb      	ldr	r3, [r7, #12]
 801d95a:	0f1b      	lsrs	r3, r3, #28
 801d95c:	b2da      	uxtb	r2, r3
 801d95e:	7dfb      	ldrb	r3, [r7, #23]
 801d960:	005b      	lsls	r3, r3, #1
 801d962:	4619      	mov	r1, r3
 801d964:	68bb      	ldr	r3, [r7, #8]
 801d966:	440b      	add	r3, r1
 801d968:	3230      	adds	r2, #48	; 0x30
 801d96a:	b2d2      	uxtb	r2, r2
 801d96c:	701a      	strb	r2, [r3, #0]
 801d96e:	e00a      	b.n	801d986 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801d970:	68fb      	ldr	r3, [r7, #12]
 801d972:	0f1b      	lsrs	r3, r3, #28
 801d974:	b2da      	uxtb	r2, r3
 801d976:	7dfb      	ldrb	r3, [r7, #23]
 801d978:	005b      	lsls	r3, r3, #1
 801d97a:	4619      	mov	r1, r3
 801d97c:	68bb      	ldr	r3, [r7, #8]
 801d97e:	440b      	add	r3, r1
 801d980:	3237      	adds	r2, #55	; 0x37
 801d982:	b2d2      	uxtb	r2, r2
 801d984:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801d986:	68fb      	ldr	r3, [r7, #12]
 801d988:	011b      	lsls	r3, r3, #4
 801d98a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801d98c:	7dfb      	ldrb	r3, [r7, #23]
 801d98e:	005b      	lsls	r3, r3, #1
 801d990:	3301      	adds	r3, #1
 801d992:	68ba      	ldr	r2, [r7, #8]
 801d994:	4413      	add	r3, r2
 801d996:	2200      	movs	r2, #0
 801d998:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801d99a:	7dfb      	ldrb	r3, [r7, #23]
 801d99c:	3301      	adds	r3, #1
 801d99e:	75fb      	strb	r3, [r7, #23]
 801d9a0:	7dfa      	ldrb	r2, [r7, #23]
 801d9a2:	79fb      	ldrb	r3, [r7, #7]
 801d9a4:	429a      	cmp	r2, r3
 801d9a6:	d3d3      	bcc.n	801d950 <IntToUnicode+0x18>
  }
}
 801d9a8:	bf00      	nop
 801d9aa:	371c      	adds	r7, #28
 801d9ac:	46bd      	mov	sp, r7
 801d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9b2:	4770      	bx	lr

0801d9b4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801d9b4:	b580      	push	{r7, lr}
 801d9b6:	b08a      	sub	sp, #40	; 0x28
 801d9b8:	af00      	add	r7, sp, #0
 801d9ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d9bc:	f107 0314 	add.w	r3, r7, #20
 801d9c0:	2200      	movs	r2, #0
 801d9c2:	601a      	str	r2, [r3, #0]
 801d9c4:	605a      	str	r2, [r3, #4]
 801d9c6:	609a      	str	r2, [r3, #8]
 801d9c8:	60da      	str	r2, [r3, #12]
 801d9ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801d9cc:	687b      	ldr	r3, [r7, #4]
 801d9ce:	681b      	ldr	r3, [r3, #0]
 801d9d0:	4a1e      	ldr	r2, [pc, #120]	; (801da4c <HAL_PCD_MspInit+0x98>)
 801d9d2:	4293      	cmp	r3, r2
 801d9d4:	d136      	bne.n	801da44 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d9d6:	4b1e      	ldr	r3, [pc, #120]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801d9d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9dc:	4a1c      	ldr	r2, [pc, #112]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801d9de:	f043 0301 	orr.w	r3, r3, #1
 801d9e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801d9e6:	4b1a      	ldr	r3, [pc, #104]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801d9e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801d9ec:	f003 0301 	and.w	r3, r3, #1
 801d9f0:	613b      	str	r3, [r7, #16]
 801d9f2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801d9f4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801d9f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d9fa:	2302      	movs	r3, #2
 801d9fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d9fe:	2300      	movs	r3, #0
 801da00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801da02:	2300      	movs	r3, #0
 801da04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801da06:	230a      	movs	r3, #10
 801da08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801da0a:	f107 0314 	add.w	r3, r7, #20
 801da0e:	4619      	mov	r1, r3
 801da10:	4810      	ldr	r0, [pc, #64]	; (801da54 <HAL_PCD_MspInit+0xa0>)
 801da12:	f7f5 fa85 	bl	8012f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801da16:	4b0e      	ldr	r3, [pc, #56]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801da18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801da1c:	4a0c      	ldr	r2, [pc, #48]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801da1e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801da22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801da26:	4b0a      	ldr	r3, [pc, #40]	; (801da50 <HAL_PCD_MspInit+0x9c>)
 801da28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801da2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da30:	60fb      	str	r3, [r7, #12]
 801da32:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801da34:	2200      	movs	r2, #0
 801da36:	2100      	movs	r1, #0
 801da38:	2065      	movs	r0, #101	; 0x65
 801da3a:	f7f4 fff8 	bl	8012a2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801da3e:	2065      	movs	r0, #101	; 0x65
 801da40:	f7f5 f80f 	bl	8012a62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801da44:	bf00      	nop
 801da46:	3728      	adds	r7, #40	; 0x28
 801da48:	46bd      	mov	sp, r7
 801da4a:	bd80      	pop	{r7, pc}
 801da4c:	40080000 	.word	0x40080000
 801da50:	58024400 	.word	0x58024400
 801da54:	58020000 	.word	0x58020000

0801da58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da58:	b580      	push	{r7, lr}
 801da5a:	b082      	sub	sp, #8
 801da5c:	af00      	add	r7, sp, #0
 801da5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801da60:	687b      	ldr	r3, [r7, #4]
 801da62:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801da66:	687b      	ldr	r3, [r7, #4]
 801da68:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801da6c:	4619      	mov	r1, r3
 801da6e:	4610      	mov	r0, r2
 801da70:	f7fe fd32 	bl	801c4d8 <USBD_LL_SetupStage>
}
 801da74:	bf00      	nop
 801da76:	3708      	adds	r7, #8
 801da78:	46bd      	mov	sp, r7
 801da7a:	bd80      	pop	{r7, pc}

0801da7c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801da7c:	b580      	push	{r7, lr}
 801da7e:	b082      	sub	sp, #8
 801da80:	af00      	add	r7, sp, #0
 801da82:	6078      	str	r0, [r7, #4]
 801da84:	460b      	mov	r3, r1
 801da86:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801da88:	687b      	ldr	r3, [r7, #4]
 801da8a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801da8e:	78fa      	ldrb	r2, [r7, #3]
 801da90:	6879      	ldr	r1, [r7, #4]
 801da92:	4613      	mov	r3, r2
 801da94:	00db      	lsls	r3, r3, #3
 801da96:	1a9b      	subs	r3, r3, r2
 801da98:	009b      	lsls	r3, r3, #2
 801da9a:	440b      	add	r3, r1
 801da9c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801daa0:	681a      	ldr	r2, [r3, #0]
 801daa2:	78fb      	ldrb	r3, [r7, #3]
 801daa4:	4619      	mov	r1, r3
 801daa6:	f7fe fd62 	bl	801c56e <USBD_LL_DataOutStage>
}
 801daaa:	bf00      	nop
 801daac:	3708      	adds	r7, #8
 801daae:	46bd      	mov	sp, r7
 801dab0:	bd80      	pop	{r7, pc}

0801dab2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dab2:	b580      	push	{r7, lr}
 801dab4:	b082      	sub	sp, #8
 801dab6:	af00      	add	r7, sp, #0
 801dab8:	6078      	str	r0, [r7, #4]
 801daba:	460b      	mov	r3, r1
 801dabc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dabe:	687b      	ldr	r3, [r7, #4]
 801dac0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801dac4:	78fa      	ldrb	r2, [r7, #3]
 801dac6:	6879      	ldr	r1, [r7, #4]
 801dac8:	4613      	mov	r3, r2
 801daca:	00db      	lsls	r3, r3, #3
 801dacc:	1a9b      	subs	r3, r3, r2
 801dace:	009b      	lsls	r3, r3, #2
 801dad0:	440b      	add	r3, r1
 801dad2:	3348      	adds	r3, #72	; 0x48
 801dad4:	681a      	ldr	r2, [r3, #0]
 801dad6:	78fb      	ldrb	r3, [r7, #3]
 801dad8:	4619      	mov	r1, r3
 801dada:	f7fe fdb9 	bl	801c650 <USBD_LL_DataInStage>
}
 801dade:	bf00      	nop
 801dae0:	3708      	adds	r7, #8
 801dae2:	46bd      	mov	sp, r7
 801dae4:	bd80      	pop	{r7, pc}

0801dae6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dae6:	b580      	push	{r7, lr}
 801dae8:	b082      	sub	sp, #8
 801daea:	af00      	add	r7, sp, #0
 801daec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801daee:	687b      	ldr	r3, [r7, #4]
 801daf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801daf4:	4618      	mov	r0, r3
 801daf6:	f7fe fecc 	bl	801c892 <USBD_LL_SOF>
}
 801dafa:	bf00      	nop
 801dafc:	3708      	adds	r7, #8
 801dafe:	46bd      	mov	sp, r7
 801db00:	bd80      	pop	{r7, pc}

0801db02 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801db02:	b580      	push	{r7, lr}
 801db04:	b084      	sub	sp, #16
 801db06:	af00      	add	r7, sp, #0
 801db08:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801db0a:	2301      	movs	r3, #1
 801db0c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801db0e:	687b      	ldr	r3, [r7, #4]
 801db10:	68db      	ldr	r3, [r3, #12]
 801db12:	2b00      	cmp	r3, #0
 801db14:	d102      	bne.n	801db1c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801db16:	2300      	movs	r3, #0
 801db18:	73fb      	strb	r3, [r7, #15]
 801db1a:	e008      	b.n	801db2e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	68db      	ldr	r3, [r3, #12]
 801db20:	2b02      	cmp	r3, #2
 801db22:	d102      	bne.n	801db2a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801db24:	2301      	movs	r3, #1
 801db26:	73fb      	strb	r3, [r7, #15]
 801db28:	e001      	b.n	801db2e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801db2a:	f7e4 f8a5 	bl	8001c78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801db2e:	687b      	ldr	r3, [r7, #4]
 801db30:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801db34:	7bfa      	ldrb	r2, [r7, #15]
 801db36:	4611      	mov	r1, r2
 801db38:	4618      	mov	r0, r3
 801db3a:	f7fe fe6f 	bl	801c81c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801db3e:	687b      	ldr	r3, [r7, #4]
 801db40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801db44:	4618      	mov	r0, r3
 801db46:	f7fe fe28 	bl	801c79a <USBD_LL_Reset>
}
 801db4a:	bf00      	nop
 801db4c:	3710      	adds	r7, #16
 801db4e:	46bd      	mov	sp, r7
 801db50:	bd80      	pop	{r7, pc}
	...

0801db54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801db54:	b580      	push	{r7, lr}
 801db56:	b082      	sub	sp, #8
 801db58:	af00      	add	r7, sp, #0
 801db5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801db62:	4618      	mov	r0, r3
 801db64:	f7fe fe6a 	bl	801c83c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801db68:	687b      	ldr	r3, [r7, #4]
 801db6a:	681b      	ldr	r3, [r3, #0]
 801db6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801db70:	681b      	ldr	r3, [r3, #0]
 801db72:	687a      	ldr	r2, [r7, #4]
 801db74:	6812      	ldr	r2, [r2, #0]
 801db76:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801db7a:	f043 0301 	orr.w	r3, r3, #1
 801db7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	6a1b      	ldr	r3, [r3, #32]
 801db84:	2b00      	cmp	r3, #0
 801db86:	d005      	beq.n	801db94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801db88:	4b04      	ldr	r3, [pc, #16]	; (801db9c <HAL_PCD_SuspendCallback+0x48>)
 801db8a:	691b      	ldr	r3, [r3, #16]
 801db8c:	4a03      	ldr	r2, [pc, #12]	; (801db9c <HAL_PCD_SuspendCallback+0x48>)
 801db8e:	f043 0306 	orr.w	r3, r3, #6
 801db92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801db94:	bf00      	nop
 801db96:	3708      	adds	r7, #8
 801db98:	46bd      	mov	sp, r7
 801db9a:	bd80      	pop	{r7, pc}
 801db9c:	e000ed00 	.word	0xe000ed00

0801dba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dba0:	b580      	push	{r7, lr}
 801dba2:	b082      	sub	sp, #8
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801dba8:	687b      	ldr	r3, [r7, #4]
 801dbaa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dbae:	4618      	mov	r0, r3
 801dbb0:	f7fe fe59 	bl	801c866 <USBD_LL_Resume>
}
 801dbb4:	bf00      	nop
 801dbb6:	3708      	adds	r7, #8
 801dbb8:	46bd      	mov	sp, r7
 801dbba:	bd80      	pop	{r7, pc}

0801dbbc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbbc:	b580      	push	{r7, lr}
 801dbbe:	b082      	sub	sp, #8
 801dbc0:	af00      	add	r7, sp, #0
 801dbc2:	6078      	str	r0, [r7, #4]
 801dbc4:	460b      	mov	r3, r1
 801dbc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801dbc8:	687b      	ldr	r3, [r7, #4]
 801dbca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dbce:	78fa      	ldrb	r2, [r7, #3]
 801dbd0:	4611      	mov	r1, r2
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	f7fe fe84 	bl	801c8e0 <USBD_LL_IsoOUTIncomplete>
}
 801dbd8:	bf00      	nop
 801dbda:	3708      	adds	r7, #8
 801dbdc:	46bd      	mov	sp, r7
 801dbde:	bd80      	pop	{r7, pc}

0801dbe0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dbe0:	b580      	push	{r7, lr}
 801dbe2:	b082      	sub	sp, #8
 801dbe4:	af00      	add	r7, sp, #0
 801dbe6:	6078      	str	r0, [r7, #4]
 801dbe8:	460b      	mov	r3, r1
 801dbea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dbf2:	78fa      	ldrb	r2, [r7, #3]
 801dbf4:	4611      	mov	r1, r2
 801dbf6:	4618      	mov	r0, r3
 801dbf8:	f7fe fe65 	bl	801c8c6 <USBD_LL_IsoINIncomplete>
}
 801dbfc:	bf00      	nop
 801dbfe:	3708      	adds	r7, #8
 801dc00:	46bd      	mov	sp, r7
 801dc02:	bd80      	pop	{r7, pc}

0801dc04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc04:	b580      	push	{r7, lr}
 801dc06:	b082      	sub	sp, #8
 801dc08:	af00      	add	r7, sp, #0
 801dc0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801dc0c:	687b      	ldr	r3, [r7, #4]
 801dc0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dc12:	4618      	mov	r0, r3
 801dc14:	f7fe fe71 	bl	801c8fa <USBD_LL_DevConnected>
}
 801dc18:	bf00      	nop
 801dc1a:	3708      	adds	r7, #8
 801dc1c:	46bd      	mov	sp, r7
 801dc1e:	bd80      	pop	{r7, pc}

0801dc20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dc20:	b580      	push	{r7, lr}
 801dc22:	b082      	sub	sp, #8
 801dc24:	af00      	add	r7, sp, #0
 801dc26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801dc28:	687b      	ldr	r3, [r7, #4]
 801dc2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dc2e:	4618      	mov	r0, r3
 801dc30:	f7fe fe6e 	bl	801c910 <USBD_LL_DevDisconnected>
}
 801dc34:	bf00      	nop
 801dc36:	3708      	adds	r7, #8
 801dc38:	46bd      	mov	sp, r7
 801dc3a:	bd80      	pop	{r7, pc}

0801dc3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801dc3c:	b580      	push	{r7, lr}
 801dc3e:	b082      	sub	sp, #8
 801dc40:	af00      	add	r7, sp, #0
 801dc42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801dc44:	687b      	ldr	r3, [r7, #4]
 801dc46:	781b      	ldrb	r3, [r3, #0]
 801dc48:	2b00      	cmp	r3, #0
 801dc4a:	d13e      	bne.n	801dcca <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801dc4c:	4a21      	ldr	r2, [pc, #132]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801dc54:	687b      	ldr	r3, [r7, #4]
 801dc56:	4a1f      	ldr	r2, [pc, #124]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801dc5c:	4b1d      	ldr	r3, [pc, #116]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc5e:	4a1e      	ldr	r2, [pc, #120]	; (801dcd8 <USBD_LL_Init+0x9c>)
 801dc60:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801dc62:	4b1c      	ldr	r3, [pc, #112]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc64:	2209      	movs	r2, #9
 801dc66:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801dc68:	4b1a      	ldr	r3, [pc, #104]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc6a:	2202      	movs	r2, #2
 801dc6c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801dc6e:	4b19      	ldr	r3, [pc, #100]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc70:	2200      	movs	r2, #0
 801dc72:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801dc74:	4b17      	ldr	r3, [pc, #92]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc76:	2202      	movs	r2, #2
 801dc78:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801dc7a:	4b16      	ldr	r3, [pc, #88]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc7c:	2201      	movs	r2, #1
 801dc7e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801dc80:	4b14      	ldr	r3, [pc, #80]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc82:	2200      	movs	r2, #0
 801dc84:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801dc86:	4b13      	ldr	r3, [pc, #76]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc88:	2200      	movs	r2, #0
 801dc8a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801dc8c:	4b11      	ldr	r3, [pc, #68]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc8e:	2200      	movs	r2, #0
 801dc90:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801dc92:	4b10      	ldr	r3, [pc, #64]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc94:	2200      	movs	r2, #0
 801dc96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801dc98:	4b0e      	ldr	r3, [pc, #56]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dc9a:	2200      	movs	r2, #0
 801dc9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801dc9e:	480d      	ldr	r0, [pc, #52]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dca0:	f7f5 fb39 	bl	8013316 <HAL_PCD_Init>
 801dca4:	4603      	mov	r3, r0
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d001      	beq.n	801dcae <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801dcaa:	f7e3 ffe5 	bl	8001c78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801dcae:	2180      	movs	r1, #128	; 0x80
 801dcb0:	4808      	ldr	r0, [pc, #32]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dcb2:	f7f6 fcca 	bl	801464a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801dcb6:	2240      	movs	r2, #64	; 0x40
 801dcb8:	2100      	movs	r1, #0
 801dcba:	4806      	ldr	r0, [pc, #24]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dcbc:	f7f6 fc7e 	bl	80145bc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801dcc0:	2280      	movs	r2, #128	; 0x80
 801dcc2:	2101      	movs	r1, #1
 801dcc4:	4803      	ldr	r0, [pc, #12]	; (801dcd4 <USBD_LL_Init+0x98>)
 801dcc6:	f7f6 fc79 	bl	80145bc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801dcca:	2300      	movs	r3, #0
}
 801dccc:	4618      	mov	r0, r3
 801dcce:	3708      	adds	r7, #8
 801dcd0:	46bd      	mov	sp, r7
 801dcd2:	bd80      	pop	{r7, pc}
 801dcd4:	24001afc 	.word	0x24001afc
 801dcd8:	40080000 	.word	0x40080000

0801dcdc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801dcdc:	b580      	push	{r7, lr}
 801dcde:	b084      	sub	sp, #16
 801dce0:	af00      	add	r7, sp, #0
 801dce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dce4:	2300      	movs	r3, #0
 801dce6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dce8:	2300      	movs	r3, #0
 801dcea:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801dcec:	687b      	ldr	r3, [r7, #4]
 801dcee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dcf2:	4618      	mov	r0, r3
 801dcf4:	f7f5 fc33 	bl	801355e <HAL_PCD_Start>
 801dcf8:	4603      	mov	r3, r0
 801dcfa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801dcfc:	7bfb      	ldrb	r3, [r7, #15]
 801dcfe:	4618      	mov	r0, r3
 801dd00:	f000 f92e 	bl	801df60 <USBD_Get_USB_Status>
 801dd04:	4603      	mov	r3, r0
 801dd06:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dd08:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd0a:	4618      	mov	r0, r3
 801dd0c:	3710      	adds	r7, #16
 801dd0e:	46bd      	mov	sp, r7
 801dd10:	bd80      	pop	{r7, pc}

0801dd12 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dd12:	b580      	push	{r7, lr}
 801dd14:	b084      	sub	sp, #16
 801dd16:	af00      	add	r7, sp, #0
 801dd18:	6078      	str	r0, [r7, #4]
 801dd1a:	4608      	mov	r0, r1
 801dd1c:	4611      	mov	r1, r2
 801dd1e:	461a      	mov	r2, r3
 801dd20:	4603      	mov	r3, r0
 801dd22:	70fb      	strb	r3, [r7, #3]
 801dd24:	460b      	mov	r3, r1
 801dd26:	70bb      	strb	r3, [r7, #2]
 801dd28:	4613      	mov	r3, r2
 801dd2a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd2c:	2300      	movs	r3, #0
 801dd2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd30:	2300      	movs	r3, #0
 801dd32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801dd34:	687b      	ldr	r3, [r7, #4]
 801dd36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801dd3a:	78bb      	ldrb	r3, [r7, #2]
 801dd3c:	883a      	ldrh	r2, [r7, #0]
 801dd3e:	78f9      	ldrb	r1, [r7, #3]
 801dd40:	f7f6 f844 	bl	8013dcc <HAL_PCD_EP_Open>
 801dd44:	4603      	mov	r3, r0
 801dd46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dd48:	7bfb      	ldrb	r3, [r7, #15]
 801dd4a:	4618      	mov	r0, r3
 801dd4c:	f000 f908 	bl	801df60 <USBD_Get_USB_Status>
 801dd50:	4603      	mov	r3, r0
 801dd52:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dd54:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd56:	4618      	mov	r0, r3
 801dd58:	3710      	adds	r7, #16
 801dd5a:	46bd      	mov	sp, r7
 801dd5c:	bd80      	pop	{r7, pc}

0801dd5e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dd5e:	b580      	push	{r7, lr}
 801dd60:	b084      	sub	sp, #16
 801dd62:	af00      	add	r7, sp, #0
 801dd64:	6078      	str	r0, [r7, #4]
 801dd66:	460b      	mov	r3, r1
 801dd68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dd6a:	2300      	movs	r3, #0
 801dd6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dd6e:	2300      	movs	r3, #0
 801dd70:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801dd72:	687b      	ldr	r3, [r7, #4]
 801dd74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dd78:	78fa      	ldrb	r2, [r7, #3]
 801dd7a:	4611      	mov	r1, r2
 801dd7c:	4618      	mov	r0, r3
 801dd7e:	f7f6 f88d 	bl	8013e9c <HAL_PCD_EP_Close>
 801dd82:	4603      	mov	r3, r0
 801dd84:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801dd86:	7bfb      	ldrb	r3, [r7, #15]
 801dd88:	4618      	mov	r0, r3
 801dd8a:	f000 f8e9 	bl	801df60 <USBD_Get_USB_Status>
 801dd8e:	4603      	mov	r3, r0
 801dd90:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801dd92:	7bbb      	ldrb	r3, [r7, #14]
}
 801dd94:	4618      	mov	r0, r3
 801dd96:	3710      	adds	r7, #16
 801dd98:	46bd      	mov	sp, r7
 801dd9a:	bd80      	pop	{r7, pc}

0801dd9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801dd9c:	b580      	push	{r7, lr}
 801dd9e:	b084      	sub	sp, #16
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
 801dda4:	460b      	mov	r3, r1
 801dda6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dda8:	2300      	movs	r3, #0
 801ddaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ddac:	2300      	movs	r3, #0
 801ddae:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801ddb0:	687b      	ldr	r3, [r7, #4]
 801ddb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ddb6:	78fa      	ldrb	r2, [r7, #3]
 801ddb8:	4611      	mov	r1, r2
 801ddba:	4618      	mov	r0, r3
 801ddbc:	f7f6 f965 	bl	801408a <HAL_PCD_EP_SetStall>
 801ddc0:	4603      	mov	r3, r0
 801ddc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801ddc4:	7bfb      	ldrb	r3, [r7, #15]
 801ddc6:	4618      	mov	r0, r3
 801ddc8:	f000 f8ca 	bl	801df60 <USBD_Get_USB_Status>
 801ddcc:	4603      	mov	r3, r0
 801ddce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801ddd0:	7bbb      	ldrb	r3, [r7, #14]
}
 801ddd2:	4618      	mov	r0, r3
 801ddd4:	3710      	adds	r7, #16
 801ddd6:	46bd      	mov	sp, r7
 801ddd8:	bd80      	pop	{r7, pc}

0801ddda <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ddda:	b580      	push	{r7, lr}
 801dddc:	b084      	sub	sp, #16
 801ddde:	af00      	add	r7, sp, #0
 801dde0:	6078      	str	r0, [r7, #4]
 801dde2:	460b      	mov	r3, r1
 801dde4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dde6:	2300      	movs	r3, #0
 801dde8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ddea:	2300      	movs	r3, #0
 801ddec:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801ddf4:	78fa      	ldrb	r2, [r7, #3]
 801ddf6:	4611      	mov	r1, r2
 801ddf8:	4618      	mov	r0, r3
 801ddfa:	f7f6 f9aa 	bl	8014152 <HAL_PCD_EP_ClrStall>
 801ddfe:	4603      	mov	r3, r0
 801de00:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801de02:	7bfb      	ldrb	r3, [r7, #15]
 801de04:	4618      	mov	r0, r3
 801de06:	f000 f8ab 	bl	801df60 <USBD_Get_USB_Status>
 801de0a:	4603      	mov	r3, r0
 801de0c:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801de0e:	7bbb      	ldrb	r3, [r7, #14]
}
 801de10:	4618      	mov	r0, r3
 801de12:	3710      	adds	r7, #16
 801de14:	46bd      	mov	sp, r7
 801de16:	bd80      	pop	{r7, pc}

0801de18 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801de18:	b480      	push	{r7}
 801de1a:	b085      	sub	sp, #20
 801de1c:	af00      	add	r7, sp, #0
 801de1e:	6078      	str	r0, [r7, #4]
 801de20:	460b      	mov	r3, r1
 801de22:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801de24:	687b      	ldr	r3, [r7, #4]
 801de26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de2a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801de2c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801de30:	2b00      	cmp	r3, #0
 801de32:	da0b      	bge.n	801de4c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801de34:	78fb      	ldrb	r3, [r7, #3]
 801de36:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801de3a:	68f9      	ldr	r1, [r7, #12]
 801de3c:	4613      	mov	r3, r2
 801de3e:	00db      	lsls	r3, r3, #3
 801de40:	1a9b      	subs	r3, r3, r2
 801de42:	009b      	lsls	r3, r3, #2
 801de44:	440b      	add	r3, r1
 801de46:	333e      	adds	r3, #62	; 0x3e
 801de48:	781b      	ldrb	r3, [r3, #0]
 801de4a:	e00b      	b.n	801de64 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801de4c:	78fb      	ldrb	r3, [r7, #3]
 801de4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801de52:	68f9      	ldr	r1, [r7, #12]
 801de54:	4613      	mov	r3, r2
 801de56:	00db      	lsls	r3, r3, #3
 801de58:	1a9b      	subs	r3, r3, r2
 801de5a:	009b      	lsls	r3, r3, #2
 801de5c:	440b      	add	r3, r1
 801de5e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801de62:	781b      	ldrb	r3, [r3, #0]
  }
}
 801de64:	4618      	mov	r0, r3
 801de66:	3714      	adds	r7, #20
 801de68:	46bd      	mov	sp, r7
 801de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6e:	4770      	bx	lr

0801de70 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801de70:	b580      	push	{r7, lr}
 801de72:	b084      	sub	sp, #16
 801de74:	af00      	add	r7, sp, #0
 801de76:	6078      	str	r0, [r7, #4]
 801de78:	460b      	mov	r3, r1
 801de7a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801de7c:	2300      	movs	r3, #0
 801de7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801de80:	2300      	movs	r3, #0
 801de82:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801de84:	687b      	ldr	r3, [r7, #4]
 801de86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801de8a:	78fa      	ldrb	r2, [r7, #3]
 801de8c:	4611      	mov	r1, r2
 801de8e:	4618      	mov	r0, r3
 801de90:	f7f5 ff77 	bl	8013d82 <HAL_PCD_SetAddress>
 801de94:	4603      	mov	r3, r0
 801de96:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801de98:	7bfb      	ldrb	r3, [r7, #15]
 801de9a:	4618      	mov	r0, r3
 801de9c:	f000 f860 	bl	801df60 <USBD_Get_USB_Status>
 801dea0:	4603      	mov	r3, r0
 801dea2:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801dea4:	7bbb      	ldrb	r3, [r7, #14]
}
 801dea6:	4618      	mov	r0, r3
 801dea8:	3710      	adds	r7, #16
 801deaa:	46bd      	mov	sp, r7
 801deac:	bd80      	pop	{r7, pc}

0801deae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801deae:	b580      	push	{r7, lr}
 801deb0:	b086      	sub	sp, #24
 801deb2:	af00      	add	r7, sp, #0
 801deb4:	60f8      	str	r0, [r7, #12]
 801deb6:	607a      	str	r2, [r7, #4]
 801deb8:	461a      	mov	r2, r3
 801deba:	460b      	mov	r3, r1
 801debc:	72fb      	strb	r3, [r7, #11]
 801debe:	4613      	mov	r3, r2
 801dec0:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dec2:	2300      	movs	r3, #0
 801dec4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dec6:	2300      	movs	r3, #0
 801dec8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801deca:	68fb      	ldr	r3, [r7, #12]
 801decc:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801ded0:	893b      	ldrh	r3, [r7, #8]
 801ded2:	7af9      	ldrb	r1, [r7, #11]
 801ded4:	687a      	ldr	r2, [r7, #4]
 801ded6:	f7f6 f88e 	bl	8013ff6 <HAL_PCD_EP_Transmit>
 801deda:	4603      	mov	r3, r0
 801dedc:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801dede:	7dfb      	ldrb	r3, [r7, #23]
 801dee0:	4618      	mov	r0, r3
 801dee2:	f000 f83d 	bl	801df60 <USBD_Get_USB_Status>
 801dee6:	4603      	mov	r3, r0
 801dee8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801deea:	7dbb      	ldrb	r3, [r7, #22]
}
 801deec:	4618      	mov	r0, r3
 801deee:	3718      	adds	r7, #24
 801def0:	46bd      	mov	sp, r7
 801def2:	bd80      	pop	{r7, pc}

0801def4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801def4:	b580      	push	{r7, lr}
 801def6:	b086      	sub	sp, #24
 801def8:	af00      	add	r7, sp, #0
 801defa:	60f8      	str	r0, [r7, #12]
 801defc:	607a      	str	r2, [r7, #4]
 801defe:	461a      	mov	r2, r3
 801df00:	460b      	mov	r3, r1
 801df02:	72fb      	strb	r3, [r7, #11]
 801df04:	4613      	mov	r3, r2
 801df06:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df08:	2300      	movs	r3, #0
 801df0a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df0c:	2300      	movs	r3, #0
 801df0e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801df10:	68fb      	ldr	r3, [r7, #12]
 801df12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801df16:	893b      	ldrh	r3, [r7, #8]
 801df18:	7af9      	ldrb	r1, [r7, #11]
 801df1a:	687a      	ldr	r2, [r7, #4]
 801df1c:	f7f6 f808 	bl	8013f30 <HAL_PCD_EP_Receive>
 801df20:	4603      	mov	r3, r0
 801df22:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801df24:	7dfb      	ldrb	r3, [r7, #23]
 801df26:	4618      	mov	r0, r3
 801df28:	f000 f81a 	bl	801df60 <USBD_Get_USB_Status>
 801df2c:	4603      	mov	r3, r0
 801df2e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801df30:	7dbb      	ldrb	r3, [r7, #22]
}
 801df32:	4618      	mov	r0, r3
 801df34:	3718      	adds	r7, #24
 801df36:	46bd      	mov	sp, r7
 801df38:	bd80      	pop	{r7, pc}

0801df3a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801df3a:	b580      	push	{r7, lr}
 801df3c:	b082      	sub	sp, #8
 801df3e:	af00      	add	r7, sp, #0
 801df40:	6078      	str	r0, [r7, #4]
 801df42:	460b      	mov	r3, r1
 801df44:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801df4c:	78fa      	ldrb	r2, [r7, #3]
 801df4e:	4611      	mov	r1, r2
 801df50:	4618      	mov	r0, r3
 801df52:	f7f6 f838 	bl	8013fc6 <HAL_PCD_EP_GetRxCount>
 801df56:	4603      	mov	r3, r0
}
 801df58:	4618      	mov	r0, r3
 801df5a:	3708      	adds	r7, #8
 801df5c:	46bd      	mov	sp, r7
 801df5e:	bd80      	pop	{r7, pc}

0801df60 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801df60:	b480      	push	{r7}
 801df62:	b085      	sub	sp, #20
 801df64:	af00      	add	r7, sp, #0
 801df66:	4603      	mov	r3, r0
 801df68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df6a:	2300      	movs	r3, #0
 801df6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801df6e:	79fb      	ldrb	r3, [r7, #7]
 801df70:	2b03      	cmp	r3, #3
 801df72:	d817      	bhi.n	801dfa4 <USBD_Get_USB_Status+0x44>
 801df74:	a201      	add	r2, pc, #4	; (adr r2, 801df7c <USBD_Get_USB_Status+0x1c>)
 801df76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801df7a:	bf00      	nop
 801df7c:	0801df8d 	.word	0x0801df8d
 801df80:	0801df93 	.word	0x0801df93
 801df84:	0801df99 	.word	0x0801df99
 801df88:	0801df9f 	.word	0x0801df9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801df8c:	2300      	movs	r3, #0
 801df8e:	73fb      	strb	r3, [r7, #15]
    break;
 801df90:	e00b      	b.n	801dfaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801df92:	2302      	movs	r3, #2
 801df94:	73fb      	strb	r3, [r7, #15]
    break;
 801df96:	e008      	b.n	801dfaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801df98:	2301      	movs	r3, #1
 801df9a:	73fb      	strb	r3, [r7, #15]
    break;
 801df9c:	e005      	b.n	801dfaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801df9e:	2302      	movs	r3, #2
 801dfa0:	73fb      	strb	r3, [r7, #15]
    break;
 801dfa2:	e002      	b.n	801dfaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801dfa4:	2302      	movs	r3, #2
 801dfa6:	73fb      	strb	r3, [r7, #15]
    break;
 801dfa8:	bf00      	nop
  }
  return usb_status;
 801dfaa:	7bfb      	ldrb	r3, [r7, #15]
}
 801dfac:	4618      	mov	r0, r3
 801dfae:	3714      	adds	r7, #20
 801dfb0:	46bd      	mov	sp, r7
 801dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfb6:	4770      	bx	lr

0801dfb8 <__errno>:
 801dfb8:	4b01      	ldr	r3, [pc, #4]	; (801dfc0 <__errno+0x8>)
 801dfba:	6818      	ldr	r0, [r3, #0]
 801dfbc:	4770      	bx	lr
 801dfbe:	bf00      	nop
 801dfc0:	24000188 	.word	0x24000188

0801dfc4 <__libc_init_array>:
 801dfc4:	b570      	push	{r4, r5, r6, lr}
 801dfc6:	4e0d      	ldr	r6, [pc, #52]	; (801dffc <__libc_init_array+0x38>)
 801dfc8:	4c0d      	ldr	r4, [pc, #52]	; (801e000 <__libc_init_array+0x3c>)
 801dfca:	1ba4      	subs	r4, r4, r6
 801dfcc:	10a4      	asrs	r4, r4, #2
 801dfce:	2500      	movs	r5, #0
 801dfd0:	42a5      	cmp	r5, r4
 801dfd2:	d109      	bne.n	801dfe8 <__libc_init_array+0x24>
 801dfd4:	4e0b      	ldr	r6, [pc, #44]	; (801e004 <__libc_init_array+0x40>)
 801dfd6:	4c0c      	ldr	r4, [pc, #48]	; (801e008 <__libc_init_array+0x44>)
 801dfd8:	f001 f908 	bl	801f1ec <_init>
 801dfdc:	1ba4      	subs	r4, r4, r6
 801dfde:	10a4      	asrs	r4, r4, #2
 801dfe0:	2500      	movs	r5, #0
 801dfe2:	42a5      	cmp	r5, r4
 801dfe4:	d105      	bne.n	801dff2 <__libc_init_array+0x2e>
 801dfe6:	bd70      	pop	{r4, r5, r6, pc}
 801dfe8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dfec:	4798      	blx	r3
 801dfee:	3501      	adds	r5, #1
 801dff0:	e7ee      	b.n	801dfd0 <__libc_init_array+0xc>
 801dff2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801dff6:	4798      	blx	r3
 801dff8:	3501      	adds	r5, #1
 801dffa:	e7f2      	b.n	801dfe2 <__libc_init_array+0x1e>
 801dffc:	0801f5d8 	.word	0x0801f5d8
 801e000:	0801f5d8 	.word	0x0801f5d8
 801e004:	0801f5d8 	.word	0x0801f5d8
 801e008:	0801f5dc 	.word	0x0801f5dc

0801e00c <__itoa>:
 801e00c:	1e93      	subs	r3, r2, #2
 801e00e:	2b22      	cmp	r3, #34	; 0x22
 801e010:	b510      	push	{r4, lr}
 801e012:	460c      	mov	r4, r1
 801e014:	d904      	bls.n	801e020 <__itoa+0x14>
 801e016:	2300      	movs	r3, #0
 801e018:	700b      	strb	r3, [r1, #0]
 801e01a:	461c      	mov	r4, r3
 801e01c:	4620      	mov	r0, r4
 801e01e:	bd10      	pop	{r4, pc}
 801e020:	2a0a      	cmp	r2, #10
 801e022:	d109      	bne.n	801e038 <__itoa+0x2c>
 801e024:	2800      	cmp	r0, #0
 801e026:	da07      	bge.n	801e038 <__itoa+0x2c>
 801e028:	232d      	movs	r3, #45	; 0x2d
 801e02a:	700b      	strb	r3, [r1, #0]
 801e02c:	4240      	negs	r0, r0
 801e02e:	2101      	movs	r1, #1
 801e030:	4421      	add	r1, r4
 801e032:	f000 f8ed 	bl	801e210 <__utoa>
 801e036:	e7f1      	b.n	801e01c <__itoa+0x10>
 801e038:	2100      	movs	r1, #0
 801e03a:	e7f9      	b.n	801e030 <__itoa+0x24>

0801e03c <itoa>:
 801e03c:	f7ff bfe6 	b.w	801e00c <__itoa>

0801e040 <malloc>:
 801e040:	4b02      	ldr	r3, [pc, #8]	; (801e04c <malloc+0xc>)
 801e042:	4601      	mov	r1, r0
 801e044:	6818      	ldr	r0, [r3, #0]
 801e046:	f000 b861 	b.w	801e10c <_malloc_r>
 801e04a:	bf00      	nop
 801e04c:	24000188 	.word	0x24000188

0801e050 <free>:
 801e050:	4b02      	ldr	r3, [pc, #8]	; (801e05c <free+0xc>)
 801e052:	4601      	mov	r1, r0
 801e054:	6818      	ldr	r0, [r3, #0]
 801e056:	f000 b80b 	b.w	801e070 <_free_r>
 801e05a:	bf00      	nop
 801e05c:	24000188 	.word	0x24000188

0801e060 <memset>:
 801e060:	4402      	add	r2, r0
 801e062:	4603      	mov	r3, r0
 801e064:	4293      	cmp	r3, r2
 801e066:	d100      	bne.n	801e06a <memset+0xa>
 801e068:	4770      	bx	lr
 801e06a:	f803 1b01 	strb.w	r1, [r3], #1
 801e06e:	e7f9      	b.n	801e064 <memset+0x4>

0801e070 <_free_r>:
 801e070:	b538      	push	{r3, r4, r5, lr}
 801e072:	4605      	mov	r5, r0
 801e074:	2900      	cmp	r1, #0
 801e076:	d045      	beq.n	801e104 <_free_r+0x94>
 801e078:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e07c:	1f0c      	subs	r4, r1, #4
 801e07e:	2b00      	cmp	r3, #0
 801e080:	bfb8      	it	lt
 801e082:	18e4      	addlt	r4, r4, r3
 801e084:	f000 f902 	bl	801e28c <__malloc_lock>
 801e088:	4a1f      	ldr	r2, [pc, #124]	; (801e108 <_free_r+0x98>)
 801e08a:	6813      	ldr	r3, [r2, #0]
 801e08c:	4610      	mov	r0, r2
 801e08e:	b933      	cbnz	r3, 801e09e <_free_r+0x2e>
 801e090:	6063      	str	r3, [r4, #4]
 801e092:	6014      	str	r4, [r2, #0]
 801e094:	4628      	mov	r0, r5
 801e096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e09a:	f000 b8f8 	b.w	801e28e <__malloc_unlock>
 801e09e:	42a3      	cmp	r3, r4
 801e0a0:	d90c      	bls.n	801e0bc <_free_r+0x4c>
 801e0a2:	6821      	ldr	r1, [r4, #0]
 801e0a4:	1862      	adds	r2, r4, r1
 801e0a6:	4293      	cmp	r3, r2
 801e0a8:	bf04      	itt	eq
 801e0aa:	681a      	ldreq	r2, [r3, #0]
 801e0ac:	685b      	ldreq	r3, [r3, #4]
 801e0ae:	6063      	str	r3, [r4, #4]
 801e0b0:	bf04      	itt	eq
 801e0b2:	1852      	addeq	r2, r2, r1
 801e0b4:	6022      	streq	r2, [r4, #0]
 801e0b6:	6004      	str	r4, [r0, #0]
 801e0b8:	e7ec      	b.n	801e094 <_free_r+0x24>
 801e0ba:	4613      	mov	r3, r2
 801e0bc:	685a      	ldr	r2, [r3, #4]
 801e0be:	b10a      	cbz	r2, 801e0c4 <_free_r+0x54>
 801e0c0:	42a2      	cmp	r2, r4
 801e0c2:	d9fa      	bls.n	801e0ba <_free_r+0x4a>
 801e0c4:	6819      	ldr	r1, [r3, #0]
 801e0c6:	1858      	adds	r0, r3, r1
 801e0c8:	42a0      	cmp	r0, r4
 801e0ca:	d10b      	bne.n	801e0e4 <_free_r+0x74>
 801e0cc:	6820      	ldr	r0, [r4, #0]
 801e0ce:	4401      	add	r1, r0
 801e0d0:	1858      	adds	r0, r3, r1
 801e0d2:	4282      	cmp	r2, r0
 801e0d4:	6019      	str	r1, [r3, #0]
 801e0d6:	d1dd      	bne.n	801e094 <_free_r+0x24>
 801e0d8:	6810      	ldr	r0, [r2, #0]
 801e0da:	6852      	ldr	r2, [r2, #4]
 801e0dc:	605a      	str	r2, [r3, #4]
 801e0de:	4401      	add	r1, r0
 801e0e0:	6019      	str	r1, [r3, #0]
 801e0e2:	e7d7      	b.n	801e094 <_free_r+0x24>
 801e0e4:	d902      	bls.n	801e0ec <_free_r+0x7c>
 801e0e6:	230c      	movs	r3, #12
 801e0e8:	602b      	str	r3, [r5, #0]
 801e0ea:	e7d3      	b.n	801e094 <_free_r+0x24>
 801e0ec:	6820      	ldr	r0, [r4, #0]
 801e0ee:	1821      	adds	r1, r4, r0
 801e0f0:	428a      	cmp	r2, r1
 801e0f2:	bf04      	itt	eq
 801e0f4:	6811      	ldreq	r1, [r2, #0]
 801e0f6:	6852      	ldreq	r2, [r2, #4]
 801e0f8:	6062      	str	r2, [r4, #4]
 801e0fa:	bf04      	itt	eq
 801e0fc:	1809      	addeq	r1, r1, r0
 801e0fe:	6021      	streq	r1, [r4, #0]
 801e100:	605c      	str	r4, [r3, #4]
 801e102:	e7c7      	b.n	801e094 <_free_r+0x24>
 801e104:	bd38      	pop	{r3, r4, r5, pc}
 801e106:	bf00      	nop
 801e108:	24000308 	.word	0x24000308

0801e10c <_malloc_r>:
 801e10c:	b570      	push	{r4, r5, r6, lr}
 801e10e:	1ccd      	adds	r5, r1, #3
 801e110:	f025 0503 	bic.w	r5, r5, #3
 801e114:	3508      	adds	r5, #8
 801e116:	2d0c      	cmp	r5, #12
 801e118:	bf38      	it	cc
 801e11a:	250c      	movcc	r5, #12
 801e11c:	2d00      	cmp	r5, #0
 801e11e:	4606      	mov	r6, r0
 801e120:	db01      	blt.n	801e126 <_malloc_r+0x1a>
 801e122:	42a9      	cmp	r1, r5
 801e124:	d903      	bls.n	801e12e <_malloc_r+0x22>
 801e126:	230c      	movs	r3, #12
 801e128:	6033      	str	r3, [r6, #0]
 801e12a:	2000      	movs	r0, #0
 801e12c:	bd70      	pop	{r4, r5, r6, pc}
 801e12e:	f000 f8ad 	bl	801e28c <__malloc_lock>
 801e132:	4a21      	ldr	r2, [pc, #132]	; (801e1b8 <_malloc_r+0xac>)
 801e134:	6814      	ldr	r4, [r2, #0]
 801e136:	4621      	mov	r1, r4
 801e138:	b991      	cbnz	r1, 801e160 <_malloc_r+0x54>
 801e13a:	4c20      	ldr	r4, [pc, #128]	; (801e1bc <_malloc_r+0xb0>)
 801e13c:	6823      	ldr	r3, [r4, #0]
 801e13e:	b91b      	cbnz	r3, 801e148 <_malloc_r+0x3c>
 801e140:	4630      	mov	r0, r6
 801e142:	f000 f83d 	bl	801e1c0 <_sbrk_r>
 801e146:	6020      	str	r0, [r4, #0]
 801e148:	4629      	mov	r1, r5
 801e14a:	4630      	mov	r0, r6
 801e14c:	f000 f838 	bl	801e1c0 <_sbrk_r>
 801e150:	1c43      	adds	r3, r0, #1
 801e152:	d124      	bne.n	801e19e <_malloc_r+0x92>
 801e154:	230c      	movs	r3, #12
 801e156:	6033      	str	r3, [r6, #0]
 801e158:	4630      	mov	r0, r6
 801e15a:	f000 f898 	bl	801e28e <__malloc_unlock>
 801e15e:	e7e4      	b.n	801e12a <_malloc_r+0x1e>
 801e160:	680b      	ldr	r3, [r1, #0]
 801e162:	1b5b      	subs	r3, r3, r5
 801e164:	d418      	bmi.n	801e198 <_malloc_r+0x8c>
 801e166:	2b0b      	cmp	r3, #11
 801e168:	d90f      	bls.n	801e18a <_malloc_r+0x7e>
 801e16a:	600b      	str	r3, [r1, #0]
 801e16c:	50cd      	str	r5, [r1, r3]
 801e16e:	18cc      	adds	r4, r1, r3
 801e170:	4630      	mov	r0, r6
 801e172:	f000 f88c 	bl	801e28e <__malloc_unlock>
 801e176:	f104 000b 	add.w	r0, r4, #11
 801e17a:	1d23      	adds	r3, r4, #4
 801e17c:	f020 0007 	bic.w	r0, r0, #7
 801e180:	1ac3      	subs	r3, r0, r3
 801e182:	d0d3      	beq.n	801e12c <_malloc_r+0x20>
 801e184:	425a      	negs	r2, r3
 801e186:	50e2      	str	r2, [r4, r3]
 801e188:	e7d0      	b.n	801e12c <_malloc_r+0x20>
 801e18a:	428c      	cmp	r4, r1
 801e18c:	684b      	ldr	r3, [r1, #4]
 801e18e:	bf16      	itet	ne
 801e190:	6063      	strne	r3, [r4, #4]
 801e192:	6013      	streq	r3, [r2, #0]
 801e194:	460c      	movne	r4, r1
 801e196:	e7eb      	b.n	801e170 <_malloc_r+0x64>
 801e198:	460c      	mov	r4, r1
 801e19a:	6849      	ldr	r1, [r1, #4]
 801e19c:	e7cc      	b.n	801e138 <_malloc_r+0x2c>
 801e19e:	1cc4      	adds	r4, r0, #3
 801e1a0:	f024 0403 	bic.w	r4, r4, #3
 801e1a4:	42a0      	cmp	r0, r4
 801e1a6:	d005      	beq.n	801e1b4 <_malloc_r+0xa8>
 801e1a8:	1a21      	subs	r1, r4, r0
 801e1aa:	4630      	mov	r0, r6
 801e1ac:	f000 f808 	bl	801e1c0 <_sbrk_r>
 801e1b0:	3001      	adds	r0, #1
 801e1b2:	d0cf      	beq.n	801e154 <_malloc_r+0x48>
 801e1b4:	6025      	str	r5, [r4, #0]
 801e1b6:	e7db      	b.n	801e170 <_malloc_r+0x64>
 801e1b8:	24000308 	.word	0x24000308
 801e1bc:	2400030c 	.word	0x2400030c

0801e1c0 <_sbrk_r>:
 801e1c0:	b538      	push	{r3, r4, r5, lr}
 801e1c2:	4c06      	ldr	r4, [pc, #24]	; (801e1dc <_sbrk_r+0x1c>)
 801e1c4:	2300      	movs	r3, #0
 801e1c6:	4605      	mov	r5, r0
 801e1c8:	4608      	mov	r0, r1
 801e1ca:	6023      	str	r3, [r4, #0]
 801e1cc:	f7e3 ffec 	bl	80021a8 <_sbrk>
 801e1d0:	1c43      	adds	r3, r0, #1
 801e1d2:	d102      	bne.n	801e1da <_sbrk_r+0x1a>
 801e1d4:	6823      	ldr	r3, [r4, #0]
 801e1d6:	b103      	cbz	r3, 801e1da <_sbrk_r+0x1a>
 801e1d8:	602b      	str	r3, [r5, #0]
 801e1da:	bd38      	pop	{r3, r4, r5, pc}
 801e1dc:	24001f04 	.word	0x24001f04

0801e1e0 <strcat>:
 801e1e0:	b510      	push	{r4, lr}
 801e1e2:	4603      	mov	r3, r0
 801e1e4:	781a      	ldrb	r2, [r3, #0]
 801e1e6:	1c5c      	adds	r4, r3, #1
 801e1e8:	b93a      	cbnz	r2, 801e1fa <strcat+0x1a>
 801e1ea:	3b01      	subs	r3, #1
 801e1ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e1f0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e1f4:	2a00      	cmp	r2, #0
 801e1f6:	d1f9      	bne.n	801e1ec <strcat+0xc>
 801e1f8:	bd10      	pop	{r4, pc}
 801e1fa:	4623      	mov	r3, r4
 801e1fc:	e7f2      	b.n	801e1e4 <strcat+0x4>

0801e1fe <strcpy>:
 801e1fe:	4603      	mov	r3, r0
 801e200:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e204:	f803 2b01 	strb.w	r2, [r3], #1
 801e208:	2a00      	cmp	r2, #0
 801e20a:	d1f9      	bne.n	801e200 <strcpy+0x2>
 801e20c:	4770      	bx	lr
	...

0801e210 <__utoa>:
 801e210:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e212:	4b1d      	ldr	r3, [pc, #116]	; (801e288 <__utoa+0x78>)
 801e214:	b08b      	sub	sp, #44	; 0x2c
 801e216:	4605      	mov	r5, r0
 801e218:	460c      	mov	r4, r1
 801e21a:	466e      	mov	r6, sp
 801e21c:	f103 0c20 	add.w	ip, r3, #32
 801e220:	6818      	ldr	r0, [r3, #0]
 801e222:	6859      	ldr	r1, [r3, #4]
 801e224:	4637      	mov	r7, r6
 801e226:	c703      	stmia	r7!, {r0, r1}
 801e228:	3308      	adds	r3, #8
 801e22a:	4563      	cmp	r3, ip
 801e22c:	463e      	mov	r6, r7
 801e22e:	d1f7      	bne.n	801e220 <__utoa+0x10>
 801e230:	6818      	ldr	r0, [r3, #0]
 801e232:	791b      	ldrb	r3, [r3, #4]
 801e234:	713b      	strb	r3, [r7, #4]
 801e236:	1e93      	subs	r3, r2, #2
 801e238:	2b22      	cmp	r3, #34	; 0x22
 801e23a:	6038      	str	r0, [r7, #0]
 801e23c:	f04f 0300 	mov.w	r3, #0
 801e240:	d904      	bls.n	801e24c <__utoa+0x3c>
 801e242:	7023      	strb	r3, [r4, #0]
 801e244:	461c      	mov	r4, r3
 801e246:	4620      	mov	r0, r4
 801e248:	b00b      	add	sp, #44	; 0x2c
 801e24a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e24c:	1e66      	subs	r6, r4, #1
 801e24e:	fbb5 f0f2 	udiv	r0, r5, r2
 801e252:	af0a      	add	r7, sp, #40	; 0x28
 801e254:	fb02 5510 	mls	r5, r2, r0, r5
 801e258:	443d      	add	r5, r7
 801e25a:	1c59      	adds	r1, r3, #1
 801e25c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801e260:	f806 5f01 	strb.w	r5, [r6, #1]!
 801e264:	4605      	mov	r5, r0
 801e266:	b968      	cbnz	r0, 801e284 <__utoa+0x74>
 801e268:	5460      	strb	r0, [r4, r1]
 801e26a:	4423      	add	r3, r4
 801e26c:	4622      	mov	r2, r4
 801e26e:	1b19      	subs	r1, r3, r4
 801e270:	1b10      	subs	r0, r2, r4
 801e272:	4281      	cmp	r1, r0
 801e274:	dde7      	ble.n	801e246 <__utoa+0x36>
 801e276:	7811      	ldrb	r1, [r2, #0]
 801e278:	7818      	ldrb	r0, [r3, #0]
 801e27a:	f802 0b01 	strb.w	r0, [r2], #1
 801e27e:	f803 1901 	strb.w	r1, [r3], #-1
 801e282:	e7f4      	b.n	801e26e <__utoa+0x5e>
 801e284:	460b      	mov	r3, r1
 801e286:	e7e2      	b.n	801e24e <__utoa+0x3e>
 801e288:	0801f398 	.word	0x0801f398

0801e28c <__malloc_lock>:
 801e28c:	4770      	bx	lr

0801e28e <__malloc_unlock>:
 801e28e:	4770      	bx	lr

0801e290 <cos>:
 801e290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e292:	eeb0 7b40 	vmov.f64	d7, d0
 801e296:	ee17 3a90 	vmov	r3, s15
 801e29a:	4a19      	ldr	r2, [pc, #100]	; (801e300 <cos+0x70>)
 801e29c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e2a0:	4293      	cmp	r3, r2
 801e2a2:	dc04      	bgt.n	801e2ae <cos+0x1e>
 801e2a4:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e2f8 <cos+0x68>
 801e2a8:	f000 fb22 	bl	801e8f0 <__kernel_cos>
 801e2ac:	e004      	b.n	801e2b8 <cos+0x28>
 801e2ae:	4a15      	ldr	r2, [pc, #84]	; (801e304 <cos+0x74>)
 801e2b0:	4293      	cmp	r3, r2
 801e2b2:	dd04      	ble.n	801e2be <cos+0x2e>
 801e2b4:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e2b8:	b005      	add	sp, #20
 801e2ba:	f85d fb04 	ldr.w	pc, [sp], #4
 801e2be:	4668      	mov	r0, sp
 801e2c0:	f000 f9da 	bl	801e678 <__ieee754_rem_pio2>
 801e2c4:	f000 0003 	and.w	r0, r0, #3
 801e2c8:	2801      	cmp	r0, #1
 801e2ca:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e2ce:	ed9d 0b00 	vldr	d0, [sp]
 801e2d2:	d007      	beq.n	801e2e4 <cos+0x54>
 801e2d4:	2802      	cmp	r0, #2
 801e2d6:	d00a      	beq.n	801e2ee <cos+0x5e>
 801e2d8:	2800      	cmp	r0, #0
 801e2da:	d0e5      	beq.n	801e2a8 <cos+0x18>
 801e2dc:	2001      	movs	r0, #1
 801e2de:	f000 fe0f 	bl	801ef00 <__kernel_sin>
 801e2e2:	e7e9      	b.n	801e2b8 <cos+0x28>
 801e2e4:	f000 fe0c 	bl	801ef00 <__kernel_sin>
 801e2e8:	eeb1 0b40 	vneg.f64	d0, d0
 801e2ec:	e7e4      	b.n	801e2b8 <cos+0x28>
 801e2ee:	f000 faff 	bl	801e8f0 <__kernel_cos>
 801e2f2:	e7f9      	b.n	801e2e8 <cos+0x58>
 801e2f4:	f3af 8000 	nop.w
	...
 801e300:	3fe921fb 	.word	0x3fe921fb
 801e304:	7fefffff 	.word	0x7fefffff

0801e308 <sin>:
 801e308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e30a:	eeb0 7b40 	vmov.f64	d7, d0
 801e30e:	ee17 3a90 	vmov	r3, s15
 801e312:	4a19      	ldr	r2, [pc, #100]	; (801e378 <sin+0x70>)
 801e314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e318:	4293      	cmp	r3, r2
 801e31a:	dc05      	bgt.n	801e328 <sin+0x20>
 801e31c:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e370 <sin+0x68>
 801e320:	2000      	movs	r0, #0
 801e322:	f000 fded 	bl	801ef00 <__kernel_sin>
 801e326:	e004      	b.n	801e332 <sin+0x2a>
 801e328:	4a14      	ldr	r2, [pc, #80]	; (801e37c <sin+0x74>)
 801e32a:	4293      	cmp	r3, r2
 801e32c:	dd04      	ble.n	801e338 <sin+0x30>
 801e32e:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e332:	b005      	add	sp, #20
 801e334:	f85d fb04 	ldr.w	pc, [sp], #4
 801e338:	4668      	mov	r0, sp
 801e33a:	f000 f99d 	bl	801e678 <__ieee754_rem_pio2>
 801e33e:	f000 0003 	and.w	r0, r0, #3
 801e342:	2801      	cmp	r0, #1
 801e344:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e348:	ed9d 0b00 	vldr	d0, [sp]
 801e34c:	d004      	beq.n	801e358 <sin+0x50>
 801e34e:	2802      	cmp	r0, #2
 801e350:	d005      	beq.n	801e35e <sin+0x56>
 801e352:	b950      	cbnz	r0, 801e36a <sin+0x62>
 801e354:	2001      	movs	r0, #1
 801e356:	e7e4      	b.n	801e322 <sin+0x1a>
 801e358:	f000 faca 	bl	801e8f0 <__kernel_cos>
 801e35c:	e7e9      	b.n	801e332 <sin+0x2a>
 801e35e:	2001      	movs	r0, #1
 801e360:	f000 fdce 	bl	801ef00 <__kernel_sin>
 801e364:	eeb1 0b40 	vneg.f64	d0, d0
 801e368:	e7e3      	b.n	801e332 <sin+0x2a>
 801e36a:	f000 fac1 	bl	801e8f0 <__kernel_cos>
 801e36e:	e7f9      	b.n	801e364 <sin+0x5c>
	...
 801e378:	3fe921fb 	.word	0x3fe921fb
 801e37c:	7fefffff 	.word	0x7fefffff

0801e380 <exp>:
 801e380:	b510      	push	{r4, lr}
 801e382:	ed2d 8b04 	vpush	{d8-d9}
 801e386:	eeb0 8b40 	vmov.f64	d8, d0
 801e38a:	4c33      	ldr	r4, [pc, #204]	; (801e458 <exp+0xd8>)
 801e38c:	b08a      	sub	sp, #40	; 0x28
 801e38e:	f000 f86b 	bl	801e468 <__ieee754_exp>
 801e392:	f994 3000 	ldrsb.w	r3, [r4]
 801e396:	eeb0 9b40 	vmov.f64	d9, d0
 801e39a:	3301      	adds	r3, #1
 801e39c:	d029      	beq.n	801e3f2 <exp+0x72>
 801e39e:	eeb0 0b48 	vmov.f64	d0, d8
 801e3a2:	f000 fe0e 	bl	801efc2 <finite>
 801e3a6:	b320      	cbz	r0, 801e3f2 <exp+0x72>
 801e3a8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801e448 <exp+0xc8>
 801e3ac:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e3b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e3b4:	dd2e      	ble.n	801e414 <exp+0x94>
 801e3b6:	2303      	movs	r3, #3
 801e3b8:	9300      	str	r3, [sp, #0]
 801e3ba:	4b28      	ldr	r3, [pc, #160]	; (801e45c <exp+0xdc>)
 801e3bc:	9301      	str	r3, [sp, #4]
 801e3be:	2300      	movs	r3, #0
 801e3c0:	9308      	str	r3, [sp, #32]
 801e3c2:	f994 3000 	ldrsb.w	r3, [r4]
 801e3c6:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e3ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e3ce:	b9b3      	cbnz	r3, 801e3fe <exp+0x7e>
 801e3d0:	4b23      	ldr	r3, [pc, #140]	; (801e460 <exp+0xe0>)
 801e3d2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801e3d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e3da:	4668      	mov	r0, sp
 801e3dc:	f000 fe74 	bl	801f0c8 <matherr>
 801e3e0:	b198      	cbz	r0, 801e40a <exp+0x8a>
 801e3e2:	9b08      	ldr	r3, [sp, #32]
 801e3e4:	b11b      	cbz	r3, 801e3ee <exp+0x6e>
 801e3e6:	f7ff fde7 	bl	801dfb8 <__errno>
 801e3ea:	9b08      	ldr	r3, [sp, #32]
 801e3ec:	6003      	str	r3, [r0, #0]
 801e3ee:	ed9d 9b06 	vldr	d9, [sp, #24]
 801e3f2:	eeb0 0b49 	vmov.f64	d0, d9
 801e3f6:	b00a      	add	sp, #40	; 0x28
 801e3f8:	ecbd 8b04 	vpop	{d8-d9}
 801e3fc:	bd10      	pop	{r4, pc}
 801e3fe:	4919      	ldr	r1, [pc, #100]	; (801e464 <exp+0xe4>)
 801e400:	2000      	movs	r0, #0
 801e402:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e406:	2b02      	cmp	r3, #2
 801e408:	d1e7      	bne.n	801e3da <exp+0x5a>
 801e40a:	f7ff fdd5 	bl	801dfb8 <__errno>
 801e40e:	2322      	movs	r3, #34	; 0x22
 801e410:	6003      	str	r3, [r0, #0]
 801e412:	e7e6      	b.n	801e3e2 <exp+0x62>
 801e414:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801e450 <exp+0xd0>
 801e418:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e41c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e420:	d5e7      	bpl.n	801e3f2 <exp+0x72>
 801e422:	2304      	movs	r3, #4
 801e424:	9300      	str	r3, [sp, #0]
 801e426:	4b0d      	ldr	r3, [pc, #52]	; (801e45c <exp+0xdc>)
 801e428:	9301      	str	r3, [sp, #4]
 801e42a:	2300      	movs	r3, #0
 801e42c:	9308      	str	r3, [sp, #32]
 801e42e:	2200      	movs	r2, #0
 801e430:	2300      	movs	r3, #0
 801e432:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e436:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e43a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e43e:	f994 3000 	ldrsb.w	r3, [r4]
 801e442:	e7e0      	b.n	801e406 <exp+0x86>
 801e444:	f3af 8000 	nop.w
 801e448:	fefa39ef 	.word	0xfefa39ef
 801e44c:	40862e42 	.word	0x40862e42
 801e450:	d52d3051 	.word	0xd52d3051
 801e454:	c0874910 	.word	0xc0874910
 801e458:	240001ec 	.word	0x240001ec
 801e45c:	0801f3bd 	.word	0x0801f3bd
 801e460:	47efffff 	.word	0x47efffff
 801e464:	7ff00000 	.word	0x7ff00000

0801e468 <__ieee754_exp>:
 801e468:	ee10 1a90 	vmov	r1, s1
 801e46c:	4b7a      	ldr	r3, [pc, #488]	; (801e658 <__ieee754_exp+0x1f0>)
 801e46e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801e472:	429a      	cmp	r2, r3
 801e474:	b082      	sub	sp, #8
 801e476:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801e47a:	d928      	bls.n	801e4ce <__ieee754_exp+0x66>
 801e47c:	4b77      	ldr	r3, [pc, #476]	; (801e65c <__ieee754_exp+0x1f4>)
 801e47e:	429a      	cmp	r2, r3
 801e480:	d90f      	bls.n	801e4a2 <__ieee754_exp+0x3a>
 801e482:	ee10 3a10 	vmov	r3, s0
 801e486:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e48a:	430b      	orrs	r3, r1
 801e48c:	d003      	beq.n	801e496 <__ieee754_exp+0x2e>
 801e48e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e492:	b002      	add	sp, #8
 801e494:	4770      	bx	lr
 801e496:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801e5f0 <__ieee754_exp+0x188>
 801e49a:	2800      	cmp	r0, #0
 801e49c:	fe00 0b07 	vseleq.f64	d0, d0, d7
 801e4a0:	e7f7      	b.n	801e492 <__ieee754_exp+0x2a>
 801e4a2:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e5f8 <__ieee754_exp+0x190>
 801e4a6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e4aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4ae:	dd04      	ble.n	801e4ba <__ieee754_exp+0x52>
 801e4b0:	ed9f 0b53 	vldr	d0, [pc, #332]	; 801e600 <__ieee754_exp+0x198>
 801e4b4:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e4b8:	e7eb      	b.n	801e492 <__ieee754_exp+0x2a>
 801e4ba:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801e608 <__ieee754_exp+0x1a0>
 801e4be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e4c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e4c6:	d505      	bpl.n	801e4d4 <__ieee754_exp+0x6c>
 801e4c8:	ed9f 0b49 	vldr	d0, [pc, #292]	; 801e5f0 <__ieee754_exp+0x188>
 801e4cc:	e7e1      	b.n	801e492 <__ieee754_exp+0x2a>
 801e4ce:	4b64      	ldr	r3, [pc, #400]	; (801e660 <__ieee754_exp+0x1f8>)
 801e4d0:	429a      	cmp	r2, r3
 801e4d2:	d956      	bls.n	801e582 <__ieee754_exp+0x11a>
 801e4d4:	4b63      	ldr	r3, [pc, #396]	; (801e664 <__ieee754_exp+0x1fc>)
 801e4d6:	429a      	cmp	r2, r3
 801e4d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801e4dc:	d838      	bhi.n	801e550 <__ieee754_exp+0xe8>
 801e4de:	4b62      	ldr	r3, [pc, #392]	; (801e668 <__ieee754_exp+0x200>)
 801e4e0:	4413      	add	r3, r2
 801e4e2:	ed93 6b00 	vldr	d6, [r3]
 801e4e6:	4b61      	ldr	r3, [pc, #388]	; (801e66c <__ieee754_exp+0x204>)
 801e4e8:	ee30 6b46 	vsub.f64	d6, d0, d6
 801e4ec:	4413      	add	r3, r2
 801e4ee:	ed93 7b00 	vldr	d7, [r3]
 801e4f2:	f1c0 0301 	rsb	r3, r0, #1
 801e4f6:	1a1b      	subs	r3, r3, r0
 801e4f8:	ee36 0b47 	vsub.f64	d0, d6, d7
 801e4fc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e610 <__ieee754_exp+0x1a8>
 801e500:	ee20 5b00 	vmul.f64	d5, d0, d0
 801e504:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e618 <__ieee754_exp+0x1b0>
 801e508:	eea5 3b04 	vfma.f64	d3, d5, d4
 801e50c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e620 <__ieee754_exp+0x1b8>
 801e510:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e514:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e628 <__ieee754_exp+0x1c0>
 801e518:	eea4 3b05 	vfma.f64	d3, d4, d5
 801e51c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e630 <__ieee754_exp+0x1c8>
 801e520:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e524:	eeb0 3b40 	vmov.f64	d3, d0
 801e528:	eea4 3b45 	vfms.f64	d3, d4, d5
 801e52c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801e530:	eeb0 5b43 	vmov.f64	d5, d3
 801e534:	ee20 2b03 	vmul.f64	d2, d0, d3
 801e538:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801e53c:	bba3      	cbnz	r3, 801e5a8 <__ieee754_exp+0x140>
 801e53e:	ee35 5b44 	vsub.f64	d5, d5, d4
 801e542:	ee82 7b05 	vdiv.f64	d7, d2, d5
 801e546:	ee37 0b40 	vsub.f64	d0, d7, d0
 801e54a:	ee33 0b40 	vsub.f64	d0, d3, d0
 801e54e:	e7a0      	b.n	801e492 <__ieee754_exp+0x2a>
 801e550:	4b47      	ldr	r3, [pc, #284]	; (801e670 <__ieee754_exp+0x208>)
 801e552:	4413      	add	r3, r2
 801e554:	ed93 7b00 	vldr	d7, [r3]
 801e558:	ed9f 6b37 	vldr	d6, [pc, #220]	; 801e638 <__ieee754_exp+0x1d0>
 801e55c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801e640 <__ieee754_exp+0x1d8>
 801e560:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e564:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801e648 <__ieee754_exp+0x1e0>
 801e568:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e56c:	ee17 3a90 	vmov	r3, s15
 801e570:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e574:	eea7 0b46 	vfms.f64	d0, d7, d6
 801e578:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e57c:	eeb0 6b40 	vmov.f64	d6, d0
 801e580:	e7ba      	b.n	801e4f8 <__ieee754_exp+0x90>
 801e582:	4b3c      	ldr	r3, [pc, #240]	; (801e674 <__ieee754_exp+0x20c>)
 801e584:	429a      	cmp	r2, r3
 801e586:	d80d      	bhi.n	801e5a4 <__ieee754_exp+0x13c>
 801e588:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e58c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801e600 <__ieee754_exp+0x198>
 801e590:	ee30 5b05 	vadd.f64	d5, d0, d5
 801e594:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801e598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e59c:	dd02      	ble.n	801e5a4 <__ieee754_exp+0x13c>
 801e59e:	ee30 0b04 	vadd.f64	d0, d0, d4
 801e5a2:	e776      	b.n	801e492 <__ieee754_exp+0x2a>
 801e5a4:	2300      	movs	r3, #0
 801e5a6:	e7a9      	b.n	801e4fc <__ieee754_exp+0x94>
 801e5a8:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801e5ac:	ee34 5b45 	vsub.f64	d5, d4, d5
 801e5b0:	428b      	cmp	r3, r1
 801e5b2:	ee82 4b05 	vdiv.f64	d4, d2, d5
 801e5b6:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e5ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e5be:	ee33 7b47 	vsub.f64	d7, d3, d7
 801e5c2:	ed8d 7b00 	vstr	d7, [sp]
 801e5c6:	9a01      	ldr	r2, [sp, #4]
 801e5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e5cc:	db04      	blt.n	801e5d8 <__ieee754_exp+0x170>
 801e5ce:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e5d2:	ec41 0b10 	vmov	d0, r0, r1
 801e5d6:	e75c      	b.n	801e492 <__ieee754_exp+0x2a>
 801e5d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801e5dc:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e5e0:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 801e650 <__ieee754_exp+0x1e8>
 801e5e4:	ec41 0b10 	vmov	d0, r0, r1
 801e5e8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e5ec:	e751      	b.n	801e492 <__ieee754_exp+0x2a>
 801e5ee:	bf00      	nop
	...
 801e5f8:	fefa39ef 	.word	0xfefa39ef
 801e5fc:	40862e42 	.word	0x40862e42
 801e600:	8800759c 	.word	0x8800759c
 801e604:	7e37e43c 	.word	0x7e37e43c
 801e608:	d52d3051 	.word	0xd52d3051
 801e60c:	c0874910 	.word	0xc0874910
 801e610:	72bea4d0 	.word	0x72bea4d0
 801e614:	3e663769 	.word	0x3e663769
 801e618:	c5d26bf1 	.word	0xc5d26bf1
 801e61c:	bebbbd41 	.word	0xbebbbd41
 801e620:	af25de2c 	.word	0xaf25de2c
 801e624:	3f11566a 	.word	0x3f11566a
 801e628:	16bebd93 	.word	0x16bebd93
 801e62c:	bf66c16c 	.word	0xbf66c16c
 801e630:	5555553e 	.word	0x5555553e
 801e634:	3fc55555 	.word	0x3fc55555
 801e638:	652b82fe 	.word	0x652b82fe
 801e63c:	3ff71547 	.word	0x3ff71547
 801e640:	35793c76 	.word	0x35793c76
 801e644:	3dea39ef 	.word	0x3dea39ef
 801e648:	fee00000 	.word	0xfee00000
 801e64c:	3fe62e42 	.word	0x3fe62e42
 801e650:	00000000 	.word	0x00000000
 801e654:	01700000 	.word	0x01700000
 801e658:	40862e41 	.word	0x40862e41
 801e65c:	7fefffff 	.word	0x7fefffff
 801e660:	3fd62e42 	.word	0x3fd62e42
 801e664:	3ff0a2b1 	.word	0x3ff0a2b1
 801e668:	0801f3d8 	.word	0x0801f3d8
 801e66c:	0801f3e8 	.word	0x0801f3e8
 801e670:	0801f3c8 	.word	0x0801f3c8
 801e674:	3e2fffff 	.word	0x3e2fffff

0801e678 <__ieee754_rem_pio2>:
 801e678:	b570      	push	{r4, r5, r6, lr}
 801e67a:	eeb0 7b40 	vmov.f64	d7, d0
 801e67e:	ee17 5a90 	vmov	r5, s15
 801e682:	4b95      	ldr	r3, [pc, #596]	; (801e8d8 <__ieee754_rem_pio2+0x260>)
 801e684:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e688:	429e      	cmp	r6, r3
 801e68a:	b088      	sub	sp, #32
 801e68c:	4604      	mov	r4, r0
 801e68e:	dc07      	bgt.n	801e6a0 <__ieee754_rem_pio2+0x28>
 801e690:	2200      	movs	r2, #0
 801e692:	2300      	movs	r3, #0
 801e694:	ed84 0b00 	vstr	d0, [r4]
 801e698:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e69c:	2000      	movs	r0, #0
 801e69e:	e01b      	b.n	801e6d8 <__ieee754_rem_pio2+0x60>
 801e6a0:	4b8e      	ldr	r3, [pc, #568]	; (801e8dc <__ieee754_rem_pio2+0x264>)
 801e6a2:	429e      	cmp	r6, r3
 801e6a4:	dc3b      	bgt.n	801e71e <__ieee754_rem_pio2+0xa6>
 801e6a6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e6aa:	2d00      	cmp	r5, #0
 801e6ac:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 801e898 <__ieee754_rem_pio2+0x220>
 801e6b0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e6b4:	dd19      	ble.n	801e6ea <__ieee754_rem_pio2+0x72>
 801e6b6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e6ba:	429e      	cmp	r6, r3
 801e6bc:	d00e      	beq.n	801e6dc <__ieee754_rem_pio2+0x64>
 801e6be:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801e8a0 <__ieee754_rem_pio2+0x228>
 801e6c2:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e6c6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e6ca:	ed84 5b00 	vstr	d5, [r4]
 801e6ce:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e6d2:	ed84 7b02 	vstr	d7, [r4, #8]
 801e6d6:	2001      	movs	r0, #1
 801e6d8:	b008      	add	sp, #32
 801e6da:	bd70      	pop	{r4, r5, r6, pc}
 801e6dc:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801e8a8 <__ieee754_rem_pio2+0x230>
 801e6e0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e6e4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801e8b0 <__ieee754_rem_pio2+0x238>
 801e6e8:	e7eb      	b.n	801e6c2 <__ieee754_rem_pio2+0x4a>
 801e6ea:	429e      	cmp	r6, r3
 801e6ec:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e6f0:	d00e      	beq.n	801e710 <__ieee754_rem_pio2+0x98>
 801e6f2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801e8a0 <__ieee754_rem_pio2+0x228>
 801e6f6:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e6fa:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e6fe:	ed84 5b00 	vstr	d5, [r4]
 801e702:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e706:	f04f 30ff 	mov.w	r0, #4294967295
 801e70a:	ed84 7b02 	vstr	d7, [r4, #8]
 801e70e:	e7e3      	b.n	801e6d8 <__ieee754_rem_pio2+0x60>
 801e710:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801e8a8 <__ieee754_rem_pio2+0x230>
 801e714:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e718:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801e8b0 <__ieee754_rem_pio2+0x238>
 801e71c:	e7eb      	b.n	801e6f6 <__ieee754_rem_pio2+0x7e>
 801e71e:	4b70      	ldr	r3, [pc, #448]	; (801e8e0 <__ieee754_rem_pio2+0x268>)
 801e720:	429e      	cmp	r6, r3
 801e722:	dc6c      	bgt.n	801e7fe <__ieee754_rem_pio2+0x186>
 801e724:	f000 fc44 	bl	801efb0 <fabs>
 801e728:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e72c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 801e8b8 <__ieee754_rem_pio2+0x240>
 801e730:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e734:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e738:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801e73c:	ee17 0a90 	vmov	r0, s15
 801e740:	eeb1 5b44 	vneg.f64	d5, d4
 801e744:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801e898 <__ieee754_rem_pio2+0x220>
 801e748:	eea5 0b07 	vfma.f64	d0, d5, d7
 801e74c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801e8a0 <__ieee754_rem_pio2+0x228>
 801e750:	281f      	cmp	r0, #31
 801e752:	ee24 7b07 	vmul.f64	d7, d4, d7
 801e756:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e75a:	dc08      	bgt.n	801e76e <__ieee754_rem_pio2+0xf6>
 801e75c:	1e42      	subs	r2, r0, #1
 801e75e:	4b61      	ldr	r3, [pc, #388]	; (801e8e4 <__ieee754_rem_pio2+0x26c>)
 801e760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e764:	42b3      	cmp	r3, r6
 801e766:	d002      	beq.n	801e76e <__ieee754_rem_pio2+0xf6>
 801e768:	ed84 6b00 	vstr	d6, [r4]
 801e76c:	e022      	b.n	801e7b4 <__ieee754_rem_pio2+0x13c>
 801e76e:	ee16 3a90 	vmov	r3, s13
 801e772:	1536      	asrs	r6, r6, #20
 801e774:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e778:	1af3      	subs	r3, r6, r3
 801e77a:	2b10      	cmp	r3, #16
 801e77c:	ddf4      	ble.n	801e768 <__ieee754_rem_pio2+0xf0>
 801e77e:	eeb0 6b40 	vmov.f64	d6, d0
 801e782:	ed9f 3b49 	vldr	d3, [pc, #292]	; 801e8a8 <__ieee754_rem_pio2+0x230>
 801e786:	eea5 6b03 	vfma.f64	d6, d5, d3
 801e78a:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e78e:	eea5 7b03 	vfma.f64	d7, d5, d3
 801e792:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801e8b0 <__ieee754_rem_pio2+0x238>
 801e796:	ee94 7b03 	vfnms.f64	d7, d4, d3
 801e79a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e79e:	ee13 3a90 	vmov	r3, s7
 801e7a2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e7a6:	1af6      	subs	r6, r6, r3
 801e7a8:	2e31      	cmp	r6, #49	; 0x31
 801e7aa:	dc17      	bgt.n	801e7dc <__ieee754_rem_pio2+0x164>
 801e7ac:	eeb0 0b46 	vmov.f64	d0, d6
 801e7b0:	ed84 3b00 	vstr	d3, [r4]
 801e7b4:	ed94 6b00 	vldr	d6, [r4]
 801e7b8:	2d00      	cmp	r5, #0
 801e7ba:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e7be:	ee30 7b47 	vsub.f64	d7, d0, d7
 801e7c2:	ed84 7b02 	vstr	d7, [r4, #8]
 801e7c6:	da87      	bge.n	801e6d8 <__ieee754_rem_pio2+0x60>
 801e7c8:	eeb1 6b46 	vneg.f64	d6, d6
 801e7cc:	ed84 6b00 	vstr	d6, [r4]
 801e7d0:	eeb1 7b47 	vneg.f64	d7, d7
 801e7d4:	4240      	negs	r0, r0
 801e7d6:	ed84 7b02 	vstr	d7, [r4, #8]
 801e7da:	e77d      	b.n	801e6d8 <__ieee754_rem_pio2+0x60>
 801e7dc:	ed9f 3b38 	vldr	d3, [pc, #224]	; 801e8c0 <__ieee754_rem_pio2+0x248>
 801e7e0:	eeb0 0b46 	vmov.f64	d0, d6
 801e7e4:	eea5 0b03 	vfma.f64	d0, d5, d3
 801e7e8:	ee36 7b40 	vsub.f64	d7, d6, d0
 801e7ec:	ed9f 6b36 	vldr	d6, [pc, #216]	; 801e8c8 <__ieee754_rem_pio2+0x250>
 801e7f0:	eea5 7b03 	vfma.f64	d7, d5, d3
 801e7f4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 801e7f8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e7fc:	e7b4      	b.n	801e768 <__ieee754_rem_pio2+0xf0>
 801e7fe:	4b3a      	ldr	r3, [pc, #232]	; (801e8e8 <__ieee754_rem_pio2+0x270>)
 801e800:	429e      	cmp	r6, r3
 801e802:	dd06      	ble.n	801e812 <__ieee754_rem_pio2+0x19a>
 801e804:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e808:	ed80 7b02 	vstr	d7, [r0, #8]
 801e80c:	ed80 7b00 	vstr	d7, [r0]
 801e810:	e744      	b.n	801e69c <__ieee754_rem_pio2+0x24>
 801e812:	1532      	asrs	r2, r6, #20
 801e814:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801e818:	ee10 0a10 	vmov	r0, s0
 801e81c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e820:	ec41 0b17 	vmov	d7, r0, r1
 801e824:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e828:	ed9f 5b29 	vldr	d5, [pc, #164]	; 801e8d0 <__ieee754_rem_pio2+0x258>
 801e82c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e830:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e834:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e838:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e83c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e840:	a908      	add	r1, sp, #32
 801e842:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e846:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e84a:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e84e:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e852:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e856:	2303      	movs	r3, #3
 801e858:	ed31 7b02 	vldmdb	r1!, {d7}
 801e85c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e864:	f103 30ff 	add.w	r0, r3, #4294967295
 801e868:	d013      	beq.n	801e892 <__ieee754_rem_pio2+0x21a>
 801e86a:	4920      	ldr	r1, [pc, #128]	; (801e8ec <__ieee754_rem_pio2+0x274>)
 801e86c:	9101      	str	r1, [sp, #4]
 801e86e:	2102      	movs	r1, #2
 801e870:	9100      	str	r1, [sp, #0]
 801e872:	a802      	add	r0, sp, #8
 801e874:	4621      	mov	r1, r4
 801e876:	f000 f8a7 	bl	801e9c8 <__kernel_rem_pio2>
 801e87a:	2d00      	cmp	r5, #0
 801e87c:	f6bf af2c 	bge.w	801e6d8 <__ieee754_rem_pio2+0x60>
 801e880:	ed94 7b00 	vldr	d7, [r4]
 801e884:	eeb1 7b47 	vneg.f64	d7, d7
 801e888:	ed84 7b00 	vstr	d7, [r4]
 801e88c:	ed94 7b02 	vldr	d7, [r4, #8]
 801e890:	e79e      	b.n	801e7d0 <__ieee754_rem_pio2+0x158>
 801e892:	4603      	mov	r3, r0
 801e894:	e7e0      	b.n	801e858 <__ieee754_rem_pio2+0x1e0>
 801e896:	bf00      	nop
 801e898:	54400000 	.word	0x54400000
 801e89c:	3ff921fb 	.word	0x3ff921fb
 801e8a0:	1a626331 	.word	0x1a626331
 801e8a4:	3dd0b461 	.word	0x3dd0b461
 801e8a8:	1a600000 	.word	0x1a600000
 801e8ac:	3dd0b461 	.word	0x3dd0b461
 801e8b0:	2e037073 	.word	0x2e037073
 801e8b4:	3ba3198a 	.word	0x3ba3198a
 801e8b8:	6dc9c883 	.word	0x6dc9c883
 801e8bc:	3fe45f30 	.word	0x3fe45f30
 801e8c0:	2e000000 	.word	0x2e000000
 801e8c4:	3ba3198a 	.word	0x3ba3198a
 801e8c8:	252049c1 	.word	0x252049c1
 801e8cc:	397b839a 	.word	0x397b839a
 801e8d0:	00000000 	.word	0x00000000
 801e8d4:	41700000 	.word	0x41700000
 801e8d8:	3fe921fb 	.word	0x3fe921fb
 801e8dc:	4002d97b 	.word	0x4002d97b
 801e8e0:	413921fb 	.word	0x413921fb
 801e8e4:	0801f3f8 	.word	0x0801f3f8
 801e8e8:	7fefffff 	.word	0x7fefffff
 801e8ec:	0801f478 	.word	0x0801f478

0801e8f0 <__kernel_cos>:
 801e8f0:	ee10 1a90 	vmov	r1, s1
 801e8f4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801e8f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801e8fc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801e900:	da05      	bge.n	801e90e <__kernel_cos+0x1e>
 801e902:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801e906:	ee16 3a90 	vmov	r3, s13
 801e90a:	2b00      	cmp	r3, #0
 801e90c:	d03d      	beq.n	801e98a <__kernel_cos+0x9a>
 801e90e:	ee20 4b00 	vmul.f64	d4, d0, d0
 801e912:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801e916:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 801e990 <__kernel_cos+0xa0>
 801e91a:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801e91e:	ee24 6b06 	vmul.f64	d6, d4, d6
 801e922:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801e998 <__kernel_cos+0xa8>
 801e926:	eea4 5b03 	vfma.f64	d5, d4, d3
 801e92a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801e9a0 <__kernel_cos+0xb0>
 801e92e:	eea5 3b04 	vfma.f64	d3, d5, d4
 801e932:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801e9a8 <__kernel_cos+0xb8>
 801e936:	eea3 5b04 	vfma.f64	d5, d3, d4
 801e93a:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801e9b0 <__kernel_cos+0xc0>
 801e93e:	4b20      	ldr	r3, [pc, #128]	; (801e9c0 <__kernel_cos+0xd0>)
 801e940:	eea5 3b04 	vfma.f64	d3, d5, d4
 801e944:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801e9b8 <__kernel_cos+0xc8>
 801e948:	4299      	cmp	r1, r3
 801e94a:	eea3 5b04 	vfma.f64	d5, d3, d4
 801e94e:	ee25 5b04 	vmul.f64	d5, d5, d4
 801e952:	eea4 1b05 	vfma.f64	d1, d4, d5
 801e956:	dc04      	bgt.n	801e962 <__kernel_cos+0x72>
 801e958:	ee36 6b41 	vsub.f64	d6, d6, d1
 801e95c:	ee37 0b46 	vsub.f64	d0, d7, d6
 801e960:	4770      	bx	lr
 801e962:	4b18      	ldr	r3, [pc, #96]	; (801e9c4 <__kernel_cos+0xd4>)
 801e964:	4299      	cmp	r1, r3
 801e966:	dc0d      	bgt.n	801e984 <__kernel_cos+0x94>
 801e968:	2200      	movs	r2, #0
 801e96a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801e96e:	ec43 2b15 	vmov	d5, r2, r3
 801e972:	ee37 0b45 	vsub.f64	d0, d7, d5
 801e976:	ee36 6b45 	vsub.f64	d6, d6, d5
 801e97a:	ee36 6b41 	vsub.f64	d6, d6, d1
 801e97e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e982:	4770      	bx	lr
 801e984:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801e988:	e7f3      	b.n	801e972 <__kernel_cos+0x82>
 801e98a:	eeb0 0b47 	vmov.f64	d0, d7
 801e98e:	4770      	bx	lr
 801e990:	be8838d4 	.word	0xbe8838d4
 801e994:	bda8fae9 	.word	0xbda8fae9
 801e998:	bdb4b1c4 	.word	0xbdb4b1c4
 801e99c:	3e21ee9e 	.word	0x3e21ee9e
 801e9a0:	809c52ad 	.word	0x809c52ad
 801e9a4:	be927e4f 	.word	0xbe927e4f
 801e9a8:	19cb1590 	.word	0x19cb1590
 801e9ac:	3efa01a0 	.word	0x3efa01a0
 801e9b0:	16c15177 	.word	0x16c15177
 801e9b4:	bf56c16c 	.word	0xbf56c16c
 801e9b8:	5555554c 	.word	0x5555554c
 801e9bc:	3fa55555 	.word	0x3fa55555
 801e9c0:	3fd33332 	.word	0x3fd33332
 801e9c4:	3fe90000 	.word	0x3fe90000

0801e9c8 <__kernel_rem_pio2>:
 801e9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e9cc:	ed2d 8b06 	vpush	{d8-d10}
 801e9d0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801e9d4:	469b      	mov	fp, r3
 801e9d6:	460e      	mov	r6, r1
 801e9d8:	4bc7      	ldr	r3, [pc, #796]	; (801ecf8 <__kernel_rem_pio2+0x330>)
 801e9da:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801e9dc:	9002      	str	r0, [sp, #8]
 801e9de:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801e9e2:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801e9e4:	1ed1      	subs	r1, r2, #3
 801e9e6:	2318      	movs	r3, #24
 801e9e8:	f06f 0417 	mvn.w	r4, #23
 801e9ec:	fb91 f1f3 	sdiv	r1, r1, r3
 801e9f0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801e9f4:	f10b 3aff 	add.w	sl, fp, #4294967295
 801e9f8:	fb01 4404 	mla	r4, r1, r4, r4
 801e9fc:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 801ece0 <__kernel_rem_pio2+0x318>
 801ea00:	4414      	add	r4, r2
 801ea02:	eba1 050a 	sub.w	r5, r1, sl
 801ea06:	aa1a      	add	r2, sp, #104	; 0x68
 801ea08:	eb09 070a 	add.w	r7, r9, sl
 801ea0c:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801ea10:	4696      	mov	lr, r2
 801ea12:	2300      	movs	r3, #0
 801ea14:	42bb      	cmp	r3, r7
 801ea16:	dd0f      	ble.n	801ea38 <__kernel_rem_pio2+0x70>
 801ea18:	af6a      	add	r7, sp, #424	; 0x1a8
 801ea1a:	2200      	movs	r2, #0
 801ea1c:	454a      	cmp	r2, r9
 801ea1e:	dc28      	bgt.n	801ea72 <__kernel_rem_pio2+0xaa>
 801ea20:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801ea24:	eb0b 0302 	add.w	r3, fp, r2
 801ea28:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801ea2c:	9d02      	ldr	r5, [sp, #8]
 801ea2e:	ed9f 7bac 	vldr	d7, [pc, #688]	; 801ece0 <__kernel_rem_pio2+0x318>
 801ea32:	f04f 0c00 	mov.w	ip, #0
 801ea36:	e016      	b.n	801ea66 <__kernel_rem_pio2+0x9e>
 801ea38:	42dd      	cmn	r5, r3
 801ea3a:	d409      	bmi.n	801ea50 <__kernel_rem_pio2+0x88>
 801ea3c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ea40:	ee07 2a90 	vmov	s15, r2
 801ea44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ea48:	ecae 7b02 	vstmia	lr!, {d7}
 801ea4c:	3301      	adds	r3, #1
 801ea4e:	e7e1      	b.n	801ea14 <__kernel_rem_pio2+0x4c>
 801ea50:	eeb0 7b46 	vmov.f64	d7, d6
 801ea54:	e7f8      	b.n	801ea48 <__kernel_rem_pio2+0x80>
 801ea56:	ecb5 5b02 	vldmia	r5!, {d5}
 801ea5a:	ed33 6b02 	vldmdb	r3!, {d6}
 801ea5e:	f10c 0c01 	add.w	ip, ip, #1
 801ea62:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ea66:	45d4      	cmp	ip, sl
 801ea68:	ddf5      	ble.n	801ea56 <__kernel_rem_pio2+0x8e>
 801ea6a:	eca7 7b02 	vstmia	r7!, {d7}
 801ea6e:	3201      	adds	r2, #1
 801ea70:	e7d4      	b.n	801ea1c <__kernel_rem_pio2+0x54>
 801ea72:	ab06      	add	r3, sp, #24
 801ea74:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801ea78:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 801ece8 <__kernel_rem_pio2+0x320>
 801ea7c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 801ecf0 <__kernel_rem_pio2+0x328>
 801ea80:	9304      	str	r3, [sp, #16]
 801ea82:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801ea86:	9303      	str	r3, [sp, #12]
 801ea88:	464d      	mov	r5, r9
 801ea8a:	ab92      	add	r3, sp, #584	; 0x248
 801ea8c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 801ea90:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ea94:	3f01      	subs	r7, #1
 801ea96:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801ea9a:	00ff      	lsls	r7, r7, #3
 801ea9c:	ab92      	add	r3, sp, #584	; 0x248
 801ea9e:	19da      	adds	r2, r3, r7
 801eaa0:	3a98      	subs	r2, #152	; 0x98
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	1ae9      	subs	r1, r5, r3
 801eaa6:	2900      	cmp	r1, #0
 801eaa8:	dc4e      	bgt.n	801eb48 <__kernel_rem_pio2+0x180>
 801eaaa:	4620      	mov	r0, r4
 801eaac:	f000 fb10 	bl	801f0d0 <scalbn>
 801eab0:	eeb0 8b40 	vmov.f64	d8, d0
 801eab4:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801eab8:	ee28 0b00 	vmul.f64	d0, d8, d0
 801eabc:	f000 fa8c 	bl	801efd8 <floor>
 801eac0:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801eac4:	eea0 8b47 	vfms.f64	d8, d0, d7
 801eac8:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801eacc:	2c00      	cmp	r4, #0
 801eace:	edcd 7a01 	vstr	s15, [sp, #4]
 801ead2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ead6:	ee38 8b47 	vsub.f64	d8, d8, d7
 801eada:	dd4a      	ble.n	801eb72 <__kernel_rem_pio2+0x1aa>
 801eadc:	1e69      	subs	r1, r5, #1
 801eade:	ab06      	add	r3, sp, #24
 801eae0:	f1c4 0018 	rsb	r0, r4, #24
 801eae4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801eae8:	9a01      	ldr	r2, [sp, #4]
 801eaea:	fa4c f300 	asr.w	r3, ip, r0
 801eaee:	441a      	add	r2, r3
 801eaf0:	4083      	lsls	r3, r0
 801eaf2:	9201      	str	r2, [sp, #4]
 801eaf4:	ebac 0203 	sub.w	r2, ip, r3
 801eaf8:	ab06      	add	r3, sp, #24
 801eafa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801eafe:	f1c4 0317 	rsb	r3, r4, #23
 801eb02:	fa42 f803 	asr.w	r8, r2, r3
 801eb06:	f1b8 0f00 	cmp.w	r8, #0
 801eb0a:	dd43      	ble.n	801eb94 <__kernel_rem_pio2+0x1cc>
 801eb0c:	9b01      	ldr	r3, [sp, #4]
 801eb0e:	2000      	movs	r0, #0
 801eb10:	3301      	adds	r3, #1
 801eb12:	9301      	str	r3, [sp, #4]
 801eb14:	4601      	mov	r1, r0
 801eb16:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 801eb1a:	4285      	cmp	r5, r0
 801eb1c:	dc6e      	bgt.n	801ebfc <__kernel_rem_pio2+0x234>
 801eb1e:	2c00      	cmp	r4, #0
 801eb20:	dd04      	ble.n	801eb2c <__kernel_rem_pio2+0x164>
 801eb22:	2c01      	cmp	r4, #1
 801eb24:	d07f      	beq.n	801ec26 <__kernel_rem_pio2+0x25e>
 801eb26:	2c02      	cmp	r4, #2
 801eb28:	f000 8087 	beq.w	801ec3a <__kernel_rem_pio2+0x272>
 801eb2c:	f1b8 0f02 	cmp.w	r8, #2
 801eb30:	d130      	bne.n	801eb94 <__kernel_rem_pio2+0x1cc>
 801eb32:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801eb36:	ee30 8b48 	vsub.f64	d8, d0, d8
 801eb3a:	b359      	cbz	r1, 801eb94 <__kernel_rem_pio2+0x1cc>
 801eb3c:	4620      	mov	r0, r4
 801eb3e:	f000 fac7 	bl	801f0d0 <scalbn>
 801eb42:	ee38 8b40 	vsub.f64	d8, d8, d0
 801eb46:	e025      	b.n	801eb94 <__kernel_rem_pio2+0x1cc>
 801eb48:	ee20 7b09 	vmul.f64	d7, d0, d9
 801eb4c:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801eb50:	a806      	add	r0, sp, #24
 801eb52:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801eb56:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801eb5a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801eb5e:	ee10 1a10 	vmov	r1, s0
 801eb62:	ed32 0b02 	vldmdb	r2!, {d0}
 801eb66:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801eb6a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801eb6e:	3301      	adds	r3, #1
 801eb70:	e798      	b.n	801eaa4 <__kernel_rem_pio2+0xdc>
 801eb72:	d106      	bne.n	801eb82 <__kernel_rem_pio2+0x1ba>
 801eb74:	1e6b      	subs	r3, r5, #1
 801eb76:	aa06      	add	r2, sp, #24
 801eb78:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801eb7c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 801eb80:	e7c1      	b.n	801eb06 <__kernel_rem_pio2+0x13e>
 801eb82:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801eb86:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801eb8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb8e:	da32      	bge.n	801ebf6 <__kernel_rem_pio2+0x22e>
 801eb90:	f04f 0800 	mov.w	r8, #0
 801eb94:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801eb98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb9c:	f040 80b0 	bne.w	801ed00 <__kernel_rem_pio2+0x338>
 801eba0:	1e6b      	subs	r3, r5, #1
 801eba2:	4618      	mov	r0, r3
 801eba4:	2200      	movs	r2, #0
 801eba6:	4548      	cmp	r0, r9
 801eba8:	da4e      	bge.n	801ec48 <__kernel_rem_pio2+0x280>
 801ebaa:	2a00      	cmp	r2, #0
 801ebac:	f000 8088 	beq.w	801ecc0 <__kernel_rem_pio2+0x2f8>
 801ebb0:	aa06      	add	r2, sp, #24
 801ebb2:	3c18      	subs	r4, #24
 801ebb4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ebb8:	2900      	cmp	r1, #0
 801ebba:	f000 808e 	beq.w	801ecda <__kernel_rem_pio2+0x312>
 801ebbe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ebc2:	4620      	mov	r0, r4
 801ebc4:	9302      	str	r3, [sp, #8]
 801ebc6:	f000 fa83 	bl	801f0d0 <scalbn>
 801ebca:	9b02      	ldr	r3, [sp, #8]
 801ebcc:	aa6a      	add	r2, sp, #424	; 0x1a8
 801ebce:	00d9      	lsls	r1, r3, #3
 801ebd0:	ed9f 6b45 	vldr	d6, [pc, #276]	; 801ece8 <__kernel_rem_pio2+0x320>
 801ebd4:	1850      	adds	r0, r2, r1
 801ebd6:	f100 0508 	add.w	r5, r0, #8
 801ebda:	461c      	mov	r4, r3
 801ebdc:	2c00      	cmp	r4, #0
 801ebde:	f280 80bd 	bge.w	801ed5c <__kernel_rem_pio2+0x394>
 801ebe2:	2500      	movs	r5, #0
 801ebe4:	1b5c      	subs	r4, r3, r5
 801ebe6:	2c00      	cmp	r4, #0
 801ebe8:	f2c0 80dd 	blt.w	801eda6 <__kernel_rem_pio2+0x3de>
 801ebec:	4f43      	ldr	r7, [pc, #268]	; (801ecfc <__kernel_rem_pio2+0x334>)
 801ebee:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 801ece0 <__kernel_rem_pio2+0x318>
 801ebf2:	2400      	movs	r4, #0
 801ebf4:	e0cb      	b.n	801ed8e <__kernel_rem_pio2+0x3c6>
 801ebf6:	f04f 0802 	mov.w	r8, #2
 801ebfa:	e787      	b.n	801eb0c <__kernel_rem_pio2+0x144>
 801ebfc:	ab06      	add	r3, sp, #24
 801ebfe:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ec02:	b949      	cbnz	r1, 801ec18 <__kernel_rem_pio2+0x250>
 801ec04:	b12b      	cbz	r3, 801ec12 <__kernel_rem_pio2+0x24a>
 801ec06:	aa06      	add	r2, sp, #24
 801ec08:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801ec0c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ec10:	2301      	movs	r3, #1
 801ec12:	3001      	adds	r0, #1
 801ec14:	4619      	mov	r1, r3
 801ec16:	e780      	b.n	801eb1a <__kernel_rem_pio2+0x152>
 801ec18:	aa06      	add	r2, sp, #24
 801ec1a:	ebac 0303 	sub.w	r3, ip, r3
 801ec1e:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ec22:	460b      	mov	r3, r1
 801ec24:	e7f5      	b.n	801ec12 <__kernel_rem_pio2+0x24a>
 801ec26:	1e68      	subs	r0, r5, #1
 801ec28:	ab06      	add	r3, sp, #24
 801ec2a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ec2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801ec32:	aa06      	add	r2, sp, #24
 801ec34:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801ec38:	e778      	b.n	801eb2c <__kernel_rem_pio2+0x164>
 801ec3a:	1e68      	subs	r0, r5, #1
 801ec3c:	ab06      	add	r3, sp, #24
 801ec3e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801ec42:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801ec46:	e7f4      	b.n	801ec32 <__kernel_rem_pio2+0x26a>
 801ec48:	a906      	add	r1, sp, #24
 801ec4a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801ec4e:	3801      	subs	r0, #1
 801ec50:	430a      	orrs	r2, r1
 801ec52:	e7a8      	b.n	801eba6 <__kernel_rem_pio2+0x1de>
 801ec54:	f10c 0c01 	add.w	ip, ip, #1
 801ec58:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ec5c:	2a00      	cmp	r2, #0
 801ec5e:	d0f9      	beq.n	801ec54 <__kernel_rem_pio2+0x28c>
 801ec60:	eb0b 0305 	add.w	r3, fp, r5
 801ec64:	aa1a      	add	r2, sp, #104	; 0x68
 801ec66:	00db      	lsls	r3, r3, #3
 801ec68:	1898      	adds	r0, r3, r2
 801ec6a:	3008      	adds	r0, #8
 801ec6c:	1c69      	adds	r1, r5, #1
 801ec6e:	3708      	adds	r7, #8
 801ec70:	2200      	movs	r2, #0
 801ec72:	4465      	add	r5, ip
 801ec74:	9005      	str	r0, [sp, #20]
 801ec76:	428d      	cmp	r5, r1
 801ec78:	f6ff af07 	blt.w	801ea8a <__kernel_rem_pio2+0xc2>
 801ec7c:	a81a      	add	r0, sp, #104	; 0x68
 801ec7e:	eb02 0c03 	add.w	ip, r2, r3
 801ec82:	4484      	add	ip, r0
 801ec84:	9803      	ldr	r0, [sp, #12]
 801ec86:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ec8a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801ec8e:	9001      	str	r0, [sp, #4]
 801ec90:	ee07 0a90 	vmov	s15, r0
 801ec94:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ec98:	9805      	ldr	r0, [sp, #20]
 801ec9a:	ed8c 7b00 	vstr	d7, [ip]
 801ec9e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ece0 <__kernel_rem_pio2+0x318>
 801eca2:	eb00 0802 	add.w	r8, r0, r2
 801eca6:	f04f 0c00 	mov.w	ip, #0
 801ecaa:	45d4      	cmp	ip, sl
 801ecac:	dd0c      	ble.n	801ecc8 <__kernel_rem_pio2+0x300>
 801ecae:	eb02 0c07 	add.w	ip, r2, r7
 801ecb2:	a86a      	add	r0, sp, #424	; 0x1a8
 801ecb4:	4484      	add	ip, r0
 801ecb6:	ed8c 7b02 	vstr	d7, [ip, #8]
 801ecba:	3101      	adds	r1, #1
 801ecbc:	3208      	adds	r2, #8
 801ecbe:	e7da      	b.n	801ec76 <__kernel_rem_pio2+0x2ae>
 801ecc0:	9b04      	ldr	r3, [sp, #16]
 801ecc2:	f04f 0c01 	mov.w	ip, #1
 801ecc6:	e7c7      	b.n	801ec58 <__kernel_rem_pio2+0x290>
 801ecc8:	ecbe 5b02 	vldmia	lr!, {d5}
 801eccc:	ed38 6b02 	vldmdb	r8!, {d6}
 801ecd0:	f10c 0c01 	add.w	ip, ip, #1
 801ecd4:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ecd8:	e7e7      	b.n	801ecaa <__kernel_rem_pio2+0x2e2>
 801ecda:	3b01      	subs	r3, #1
 801ecdc:	e768      	b.n	801ebb0 <__kernel_rem_pio2+0x1e8>
 801ecde:	bf00      	nop
	...
 801ecec:	3e700000 	.word	0x3e700000
 801ecf0:	00000000 	.word	0x00000000
 801ecf4:	41700000 	.word	0x41700000
 801ecf8:	0801f5c0 	.word	0x0801f5c0
 801ecfc:	0801f580 	.word	0x0801f580
 801ed00:	4260      	negs	r0, r4
 801ed02:	eeb0 0b48 	vmov.f64	d0, d8
 801ed06:	f000 f9e3 	bl	801f0d0 <scalbn>
 801ed0a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801eee8 <__kernel_rem_pio2+0x520>
 801ed0e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801ed12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ed16:	db18      	blt.n	801ed4a <__kernel_rem_pio2+0x382>
 801ed18:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801eef0 <__kernel_rem_pio2+0x528>
 801ed1c:	ee20 7b07 	vmul.f64	d7, d0, d7
 801ed20:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ed24:	aa06      	add	r2, sp, #24
 801ed26:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801ed2a:	eea5 0b46 	vfms.f64	d0, d5, d6
 801ed2e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ed32:	a906      	add	r1, sp, #24
 801ed34:	ee10 3a10 	vmov	r3, s0
 801ed38:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801ed3c:	1c6b      	adds	r3, r5, #1
 801ed3e:	ee17 2a10 	vmov	r2, s14
 801ed42:	3418      	adds	r4, #24
 801ed44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801ed48:	e739      	b.n	801ebbe <__kernel_rem_pio2+0x1f6>
 801ed4a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ed4e:	aa06      	add	r2, sp, #24
 801ed50:	ee10 3a10 	vmov	r3, s0
 801ed54:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801ed58:	462b      	mov	r3, r5
 801ed5a:	e730      	b.n	801ebbe <__kernel_rem_pio2+0x1f6>
 801ed5c:	aa06      	add	r2, sp, #24
 801ed5e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801ed62:	9202      	str	r2, [sp, #8]
 801ed64:	ee07 2a90 	vmov	s15, r2
 801ed68:	3c01      	subs	r4, #1
 801ed6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ed6e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801ed72:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ed76:	ed25 7b02 	vstmdb	r5!, {d7}
 801ed7a:	e72f      	b.n	801ebdc <__kernel_rem_pio2+0x214>
 801ed7c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801ed80:	ecb7 5b02 	vldmia	r7!, {d5}
 801ed84:	ed9c 6b00 	vldr	d6, [ip]
 801ed88:	3401      	adds	r4, #1
 801ed8a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ed8e:	454c      	cmp	r4, r9
 801ed90:	dc01      	bgt.n	801ed96 <__kernel_rem_pio2+0x3ce>
 801ed92:	42a5      	cmp	r5, r4
 801ed94:	daf2      	bge.n	801ed7c <__kernel_rem_pio2+0x3b4>
 801ed96:	aa42      	add	r2, sp, #264	; 0x108
 801ed98:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801ed9c:	ed84 7b00 	vstr	d7, [r4]
 801eda0:	3501      	adds	r5, #1
 801eda2:	3808      	subs	r0, #8
 801eda4:	e71e      	b.n	801ebe4 <__kernel_rem_pio2+0x21c>
 801eda6:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801eda8:	2a03      	cmp	r2, #3
 801edaa:	d84e      	bhi.n	801ee4a <__kernel_rem_pio2+0x482>
 801edac:	e8df f002 	tbb	[pc, r2]
 801edb0:	021f1f3e 	.word	0x021f1f3e
 801edb4:	3108      	adds	r1, #8
 801edb6:	aa42      	add	r2, sp, #264	; 0x108
 801edb8:	4411      	add	r1, r2
 801edba:	4608      	mov	r0, r1
 801edbc:	461c      	mov	r4, r3
 801edbe:	2c00      	cmp	r4, #0
 801edc0:	dc61      	bgt.n	801ee86 <__kernel_rem_pio2+0x4be>
 801edc2:	4608      	mov	r0, r1
 801edc4:	461c      	mov	r4, r3
 801edc6:	2c01      	cmp	r4, #1
 801edc8:	dc6d      	bgt.n	801eea6 <__kernel_rem_pio2+0x4de>
 801edca:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801eef8 <__kernel_rem_pio2+0x530>
 801edce:	2b01      	cmp	r3, #1
 801edd0:	dc79      	bgt.n	801eec6 <__kernel_rem_pio2+0x4fe>
 801edd2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801edd6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801edda:	f1b8 0f00 	cmp.w	r8, #0
 801edde:	d178      	bne.n	801eed2 <__kernel_rem_pio2+0x50a>
 801ede0:	ed86 5b00 	vstr	d5, [r6]
 801ede4:	ed86 6b02 	vstr	d6, [r6, #8]
 801ede8:	ed86 7b04 	vstr	d7, [r6, #16]
 801edec:	e02d      	b.n	801ee4a <__kernel_rem_pio2+0x482>
 801edee:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801eef8 <__kernel_rem_pio2+0x530>
 801edf2:	3108      	adds	r1, #8
 801edf4:	aa42      	add	r2, sp, #264	; 0x108
 801edf6:	4411      	add	r1, r2
 801edf8:	4618      	mov	r0, r3
 801edfa:	2800      	cmp	r0, #0
 801edfc:	da34      	bge.n	801ee68 <__kernel_rem_pio2+0x4a0>
 801edfe:	f1b8 0f00 	cmp.w	r8, #0
 801ee02:	d037      	beq.n	801ee74 <__kernel_rem_pio2+0x4ac>
 801ee04:	eeb1 7b46 	vneg.f64	d7, d6
 801ee08:	ed86 7b00 	vstr	d7, [r6]
 801ee0c:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801ee10:	a844      	add	r0, sp, #272	; 0x110
 801ee12:	2101      	movs	r1, #1
 801ee14:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ee18:	428b      	cmp	r3, r1
 801ee1a:	da2e      	bge.n	801ee7a <__kernel_rem_pio2+0x4b2>
 801ee1c:	f1b8 0f00 	cmp.w	r8, #0
 801ee20:	d001      	beq.n	801ee26 <__kernel_rem_pio2+0x45e>
 801ee22:	eeb1 7b47 	vneg.f64	d7, d7
 801ee26:	ed86 7b02 	vstr	d7, [r6, #8]
 801ee2a:	e00e      	b.n	801ee4a <__kernel_rem_pio2+0x482>
 801ee2c:	aa92      	add	r2, sp, #584	; 0x248
 801ee2e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 801eef8 <__kernel_rem_pio2+0x530>
 801ee32:	4411      	add	r1, r2
 801ee34:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801ee38:	2b00      	cmp	r3, #0
 801ee3a:	da0f      	bge.n	801ee5c <__kernel_rem_pio2+0x494>
 801ee3c:	f1b8 0f00 	cmp.w	r8, #0
 801ee40:	d001      	beq.n	801ee46 <__kernel_rem_pio2+0x47e>
 801ee42:	eeb1 7b47 	vneg.f64	d7, d7
 801ee46:	ed86 7b00 	vstr	d7, [r6]
 801ee4a:	9b01      	ldr	r3, [sp, #4]
 801ee4c:	f003 0007 	and.w	r0, r3, #7
 801ee50:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801ee54:	ecbd 8b06 	vpop	{d8-d10}
 801ee58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee5c:	ed31 6b02 	vldmdb	r1!, {d6}
 801ee60:	3b01      	subs	r3, #1
 801ee62:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ee66:	e7e7      	b.n	801ee38 <__kernel_rem_pio2+0x470>
 801ee68:	ed31 7b02 	vldmdb	r1!, {d7}
 801ee6c:	3801      	subs	r0, #1
 801ee6e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801ee72:	e7c2      	b.n	801edfa <__kernel_rem_pio2+0x432>
 801ee74:	eeb0 7b46 	vmov.f64	d7, d6
 801ee78:	e7c6      	b.n	801ee08 <__kernel_rem_pio2+0x440>
 801ee7a:	ecb0 6b02 	vldmia	r0!, {d6}
 801ee7e:	3101      	adds	r1, #1
 801ee80:	ee37 7b06 	vadd.f64	d7, d7, d6
 801ee84:	e7c8      	b.n	801ee18 <__kernel_rem_pio2+0x450>
 801ee86:	ed10 7b04 	vldr	d7, [r0, #-16]
 801ee8a:	ed30 5b02 	vldmdb	r0!, {d5}
 801ee8e:	3c01      	subs	r4, #1
 801ee90:	ee37 6b05 	vadd.f64	d6, d7, d5
 801ee94:	ee37 7b46 	vsub.f64	d7, d7, d6
 801ee98:	ed00 6b02 	vstr	d6, [r0, #-8]
 801ee9c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eea0:	ed80 7b00 	vstr	d7, [r0]
 801eea4:	e78b      	b.n	801edbe <__kernel_rem_pio2+0x3f6>
 801eea6:	ed10 7b04 	vldr	d7, [r0, #-16]
 801eeaa:	ed30 5b02 	vldmdb	r0!, {d5}
 801eeae:	3c01      	subs	r4, #1
 801eeb0:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eeb4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eeb8:	ed00 6b02 	vstr	d6, [r0, #-8]
 801eebc:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eec0:	ed80 7b00 	vstr	d7, [r0]
 801eec4:	e77f      	b.n	801edc6 <__kernel_rem_pio2+0x3fe>
 801eec6:	ed31 6b02 	vldmdb	r1!, {d6}
 801eeca:	3b01      	subs	r3, #1
 801eecc:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eed0:	e77d      	b.n	801edce <__kernel_rem_pio2+0x406>
 801eed2:	eeb1 5b45 	vneg.f64	d5, d5
 801eed6:	eeb1 6b46 	vneg.f64	d6, d6
 801eeda:	ed86 5b00 	vstr	d5, [r6]
 801eede:	eeb1 7b47 	vneg.f64	d7, d7
 801eee2:	ed86 6b02 	vstr	d6, [r6, #8]
 801eee6:	e77f      	b.n	801ede8 <__kernel_rem_pio2+0x420>
 801eee8:	00000000 	.word	0x00000000
 801eeec:	41700000 	.word	0x41700000
 801eef0:	00000000 	.word	0x00000000
 801eef4:	3e700000 	.word	0x3e700000
	...

0801ef00 <__kernel_sin>:
 801ef00:	ee10 3a90 	vmov	r3, s1
 801ef04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ef08:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801ef0c:	da04      	bge.n	801ef18 <__kernel_sin+0x18>
 801ef0e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801ef12:	ee17 3a90 	vmov	r3, s15
 801ef16:	b35b      	cbz	r3, 801ef70 <__kernel_sin+0x70>
 801ef18:	ee20 6b00 	vmul.f64	d6, d0, d0
 801ef1c:	ee20 5b06 	vmul.f64	d5, d0, d6
 801ef20:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801ef78 <__kernel_sin+0x78>
 801ef24:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ef80 <__kernel_sin+0x80>
 801ef28:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ef2c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ef88 <__kernel_sin+0x88>
 801ef30:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ef34:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801ef90 <__kernel_sin+0x90>
 801ef38:	eea7 4b06 	vfma.f64	d4, d7, d6
 801ef3c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801ef98 <__kernel_sin+0x98>
 801ef40:	eea4 7b06 	vfma.f64	d7, d4, d6
 801ef44:	b930      	cbnz	r0, 801ef54 <__kernel_sin+0x54>
 801ef46:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801efa0 <__kernel_sin+0xa0>
 801ef4a:	eea6 4b07 	vfma.f64	d4, d6, d7
 801ef4e:	eea4 0b05 	vfma.f64	d0, d4, d5
 801ef52:	4770      	bx	lr
 801ef54:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801ef58:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801ef5c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801ef60:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801ef64:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801efa8 <__kernel_sin+0xa8>
 801ef68:	eea5 1b07 	vfma.f64	d1, d5, d7
 801ef6c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801ef70:	4770      	bx	lr
 801ef72:	bf00      	nop
 801ef74:	f3af 8000 	nop.w
 801ef78:	5acfd57c 	.word	0x5acfd57c
 801ef7c:	3de5d93a 	.word	0x3de5d93a
 801ef80:	8a2b9ceb 	.word	0x8a2b9ceb
 801ef84:	be5ae5e6 	.word	0xbe5ae5e6
 801ef88:	57b1fe7d 	.word	0x57b1fe7d
 801ef8c:	3ec71de3 	.word	0x3ec71de3
 801ef90:	19c161d5 	.word	0x19c161d5
 801ef94:	bf2a01a0 	.word	0xbf2a01a0
 801ef98:	1110f8a6 	.word	0x1110f8a6
 801ef9c:	3f811111 	.word	0x3f811111
 801efa0:	55555549 	.word	0x55555549
 801efa4:	bfc55555 	.word	0xbfc55555
 801efa8:	55555549 	.word	0x55555549
 801efac:	3fc55555 	.word	0x3fc55555

0801efb0 <fabs>:
 801efb0:	ec51 0b10 	vmov	r0, r1, d0
 801efb4:	ee10 2a10 	vmov	r2, s0
 801efb8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801efbc:	ec43 2b10 	vmov	d0, r2, r3
 801efc0:	4770      	bx	lr

0801efc2 <finite>:
 801efc2:	ee10 3a90 	vmov	r3, s1
 801efc6:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801efca:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801efce:	0fc0      	lsrs	r0, r0, #31
 801efd0:	4770      	bx	lr
 801efd2:	0000      	movs	r0, r0
 801efd4:	0000      	movs	r0, r0
	...

0801efd8 <floor>:
 801efd8:	ee10 1a90 	vmov	r1, s1
 801efdc:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801efe0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801efe4:	2b13      	cmp	r3, #19
 801efe6:	b530      	push	{r4, r5, lr}
 801efe8:	ee10 0a10 	vmov	r0, s0
 801efec:	ee10 5a10 	vmov	r5, s0
 801eff0:	dc33      	bgt.n	801f05a <floor+0x82>
 801eff2:	2b00      	cmp	r3, #0
 801eff4:	da17      	bge.n	801f026 <floor+0x4e>
 801eff6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f0b8 <floor+0xe0>
 801effa:	ee30 0b07 	vadd.f64	d0, d0, d7
 801effe:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f006:	dd09      	ble.n	801f01c <floor+0x44>
 801f008:	2900      	cmp	r1, #0
 801f00a:	da50      	bge.n	801f0ae <floor+0xd6>
 801f00c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f010:	4a2b      	ldr	r2, [pc, #172]	; (801f0c0 <floor+0xe8>)
 801f012:	4303      	orrs	r3, r0
 801f014:	2000      	movs	r0, #0
 801f016:	4283      	cmp	r3, r0
 801f018:	bf18      	it	ne
 801f01a:	4611      	movne	r1, r2
 801f01c:	460b      	mov	r3, r1
 801f01e:	4602      	mov	r2, r0
 801f020:	ec43 2b10 	vmov	d0, r2, r3
 801f024:	e020      	b.n	801f068 <floor+0x90>
 801f026:	4a27      	ldr	r2, [pc, #156]	; (801f0c4 <floor+0xec>)
 801f028:	411a      	asrs	r2, r3
 801f02a:	ea01 0402 	and.w	r4, r1, r2
 801f02e:	4304      	orrs	r4, r0
 801f030:	d01a      	beq.n	801f068 <floor+0x90>
 801f032:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f0b8 <floor+0xe0>
 801f036:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f03a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f03e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f042:	ddeb      	ble.n	801f01c <floor+0x44>
 801f044:	2900      	cmp	r1, #0
 801f046:	bfbe      	ittt	lt
 801f048:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f04c:	fa40 f303 	asrlt.w	r3, r0, r3
 801f050:	18c9      	addlt	r1, r1, r3
 801f052:	ea21 0102 	bic.w	r1, r1, r2
 801f056:	2000      	movs	r0, #0
 801f058:	e7e0      	b.n	801f01c <floor+0x44>
 801f05a:	2b33      	cmp	r3, #51	; 0x33
 801f05c:	dd05      	ble.n	801f06a <floor+0x92>
 801f05e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f062:	d101      	bne.n	801f068 <floor+0x90>
 801f064:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f068:	bd30      	pop	{r4, r5, pc}
 801f06a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f06e:	f04f 32ff 	mov.w	r2, #4294967295
 801f072:	40e2      	lsrs	r2, r4
 801f074:	4202      	tst	r2, r0
 801f076:	d0f7      	beq.n	801f068 <floor+0x90>
 801f078:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f0b8 <floor+0xe0>
 801f07c:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f080:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f088:	ddc8      	ble.n	801f01c <floor+0x44>
 801f08a:	2900      	cmp	r1, #0
 801f08c:	da02      	bge.n	801f094 <floor+0xbc>
 801f08e:	2b14      	cmp	r3, #20
 801f090:	d103      	bne.n	801f09a <floor+0xc2>
 801f092:	3101      	adds	r1, #1
 801f094:	ea20 0002 	bic.w	r0, r0, r2
 801f098:	e7c0      	b.n	801f01c <floor+0x44>
 801f09a:	2401      	movs	r4, #1
 801f09c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f0a0:	fa04 f303 	lsl.w	r3, r4, r3
 801f0a4:	4418      	add	r0, r3
 801f0a6:	42a8      	cmp	r0, r5
 801f0a8:	bf38      	it	cc
 801f0aa:	1909      	addcc	r1, r1, r4
 801f0ac:	e7f2      	b.n	801f094 <floor+0xbc>
 801f0ae:	2000      	movs	r0, #0
 801f0b0:	4601      	mov	r1, r0
 801f0b2:	e7b3      	b.n	801f01c <floor+0x44>
 801f0b4:	f3af 8000 	nop.w
 801f0b8:	8800759c 	.word	0x8800759c
 801f0bc:	7e37e43c 	.word	0x7e37e43c
 801f0c0:	bff00000 	.word	0xbff00000
 801f0c4:	000fffff 	.word	0x000fffff

0801f0c8 <matherr>:
 801f0c8:	2000      	movs	r0, #0
 801f0ca:	4770      	bx	lr
 801f0cc:	0000      	movs	r0, r0
	...

0801f0d0 <scalbn>:
 801f0d0:	b500      	push	{lr}
 801f0d2:	ed2d 8b02 	vpush	{d8}
 801f0d6:	b083      	sub	sp, #12
 801f0d8:	ed8d 0b00 	vstr	d0, [sp]
 801f0dc:	9b01      	ldr	r3, [sp, #4]
 801f0de:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f0e2:	b9a2      	cbnz	r2, 801f10e <scalbn+0x3e>
 801f0e4:	9a00      	ldr	r2, [sp, #0]
 801f0e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f0ea:	4313      	orrs	r3, r2
 801f0ec:	d03a      	beq.n	801f164 <scalbn+0x94>
 801f0ee:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f1a8 <scalbn+0xd8>
 801f0f2:	4b35      	ldr	r3, [pc, #212]	; (801f1c8 <scalbn+0xf8>)
 801f0f4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f0f8:	4298      	cmp	r0, r3
 801f0fa:	ed8d 7b00 	vstr	d7, [sp]
 801f0fe:	da11      	bge.n	801f124 <scalbn+0x54>
 801f100:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f1b0 <scalbn+0xe0>
 801f104:	ed9d 6b00 	vldr	d6, [sp]
 801f108:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f10c:	e007      	b.n	801f11e <scalbn+0x4e>
 801f10e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f112:	428a      	cmp	r2, r1
 801f114:	d10a      	bne.n	801f12c <scalbn+0x5c>
 801f116:	ed9d 7b00 	vldr	d7, [sp]
 801f11a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f11e:	ed8d 7b00 	vstr	d7, [sp]
 801f122:	e01f      	b.n	801f164 <scalbn+0x94>
 801f124:	9b01      	ldr	r3, [sp, #4]
 801f126:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f12a:	3a36      	subs	r2, #54	; 0x36
 801f12c:	4402      	add	r2, r0
 801f12e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f132:	428a      	cmp	r2, r1
 801f134:	dd0a      	ble.n	801f14c <scalbn+0x7c>
 801f136:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801f1b8 <scalbn+0xe8>
 801f13a:	eeb0 0b48 	vmov.f64	d0, d8
 801f13e:	ed9d 1b00 	vldr	d1, [sp]
 801f142:	f000 f843 	bl	801f1cc <copysign>
 801f146:	ee20 7b08 	vmul.f64	d7, d0, d8
 801f14a:	e7e8      	b.n	801f11e <scalbn+0x4e>
 801f14c:	2a00      	cmp	r2, #0
 801f14e:	dd10      	ble.n	801f172 <scalbn+0xa2>
 801f150:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f154:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f158:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f15c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f160:	e9cd 0100 	strd	r0, r1, [sp]
 801f164:	ed9d 0b00 	vldr	d0, [sp]
 801f168:	b003      	add	sp, #12
 801f16a:	ecbd 8b02 	vpop	{d8}
 801f16e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f172:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f176:	da06      	bge.n	801f186 <scalbn+0xb6>
 801f178:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f17c:	4298      	cmp	r0, r3
 801f17e:	dcda      	bgt.n	801f136 <scalbn+0x66>
 801f180:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801f1b0 <scalbn+0xe0>
 801f184:	e7d9      	b.n	801f13a <scalbn+0x6a>
 801f186:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f18a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f18e:	3236      	adds	r2, #54	; 0x36
 801f190:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f194:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f198:	ec41 0b17 	vmov	d7, r0, r1
 801f19c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801f1c0 <scalbn+0xf0>
 801f1a0:	e7b2      	b.n	801f108 <scalbn+0x38>
 801f1a2:	bf00      	nop
 801f1a4:	f3af 8000 	nop.w
 801f1a8:	00000000 	.word	0x00000000
 801f1ac:	43500000 	.word	0x43500000
 801f1b0:	c2f8f359 	.word	0xc2f8f359
 801f1b4:	01a56e1f 	.word	0x01a56e1f
 801f1b8:	8800759c 	.word	0x8800759c
 801f1bc:	7e37e43c 	.word	0x7e37e43c
 801f1c0:	00000000 	.word	0x00000000
 801f1c4:	3c900000 	.word	0x3c900000
 801f1c8:	ffff3cb0 	.word	0xffff3cb0

0801f1cc <copysign>:
 801f1cc:	ec51 0b10 	vmov	r0, r1, d0
 801f1d0:	ee11 0a90 	vmov	r0, s3
 801f1d4:	ee10 2a10 	vmov	r2, s0
 801f1d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f1dc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f1e0:	ea41 0300 	orr.w	r3, r1, r0
 801f1e4:	ec43 2b10 	vmov	d0, r2, r3
 801f1e8:	4770      	bx	lr
	...

0801f1ec <_init>:
 801f1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1ee:	bf00      	nop
 801f1f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1f2:	bc08      	pop	{r3}
 801f1f4:	469e      	mov	lr, r3
 801f1f6:	4770      	bx	lr

0801f1f8 <_fini>:
 801f1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1fa:	bf00      	nop
 801f1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1fe:	bc08      	pop	{r3}
 801f200:	469e      	mov	lr, r3
 801f202:	4770      	bx	lr
