
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008550  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080087e8  080087e8  000187e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008810  08008810  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08008818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08008828  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08008888  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000658  240000d0  080088e8  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000728  080088e8  00020728  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000223db  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003190  00000000  00000000  000424d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 000014a8  00000000  00000000  00045670  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001380  00000000  00000000  00046b18  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00037cbf  00000000  00000000  00047e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   00010bb5  00000000  00000000  0007fb57  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00166b97  00000000  00000000  0009070c  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001f72a3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005914  00000000  00000000  001f7320  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080087d0 	.word	0x080087d0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080087d0 	.word	0x080087d0

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	80fb      	strh	r3, [r7, #6]

}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f001 f853 	bl	800169c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f811 	bl	800061c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 fb5d 	bl	8000cb8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005fe:	f000 f8c7 	bl	8000790 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000602:	f000 fadb 	bl	8000bbc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000606:	f000 fb25 	bl	8000c54 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM1_Init();
 800060a:	f000 f913 	bl	8000834 <MX_TIM1_Init>
  MX_TIM2_Init();
 800060e:	f000 f9ad 	bl	800096c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000612:	f000 fa05 	bl	8000a20 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000616:	f000 fa75 	bl	8000b04 <MX_TIM5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800061a:	e7fe      	b.n	800061a <main+0x2c>

0800061c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b0cc      	sub	sp, #304	; 0x130
 8000620:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000622:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000626:	224c      	movs	r2, #76	; 0x4c
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f008 f8c8 	bl	80087c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000630:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000634:	2220      	movs	r2, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f008 f8c1 	bl	80087c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4618      	mov	r0, r3
 8000644:	23bc      	movs	r3, #188	; 0xbc
 8000646:	461a      	mov	r2, r3
 8000648:	2100      	movs	r1, #0
 800064a:	f008 f8b9 	bl	80087c0 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800064e:	2002      	movs	r0, #2
 8000650:	f002 f94a 	bl	80028e8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	4b4a      	ldr	r3, [pc, #296]	; (8000784 <SystemClock_Config+0x168>)
 800065c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800065e:	4a49      	ldr	r2, [pc, #292]	; (8000784 <SystemClock_Config+0x168>)
 8000660:	f023 0301 	bic.w	r3, r3, #1
 8000664:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000666:	4b47      	ldr	r3, [pc, #284]	; (8000784 <SystemClock_Config+0x168>)
 8000668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800066a:	f003 0201 	and.w	r2, r3, #1
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	4b45      	ldr	r3, [pc, #276]	; (8000788 <SystemClock_Config+0x16c>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a44      	ldr	r2, [pc, #272]	; (8000788 <SystemClock_Config+0x16c>)
 8000678:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800067c:	6193      	str	r3, [r2, #24]
 800067e:	4b42      	ldr	r3, [pc, #264]	; (8000788 <SystemClock_Config+0x16c>)
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000686:	1d3b      	adds	r3, r7, #4
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800068e:	bf00      	nop
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemClock_Config+0x16c>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000698:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800069c:	d1f8      	bne.n	8000690 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800069e:	2301      	movs	r3, #1
 80006a0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b2:	2302      	movs	r3, #2
 80006b4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 80006be:	2336      	movs	r3, #54	; 0x36
 80006c0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006ca:	2309      	movs	r3, #9
 80006cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006d6:	230c      	movs	r3, #12
 80006d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80006ec:	4618      	mov	r0, r3
 80006ee:	f002 f945 	bl	800297c <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80006f8:	f000 fc08 	bl	8000f0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	233f      	movs	r3, #63	; 0x3f
 80006fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000702:	2303      	movs	r3, #3
 8000704:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000714:	2340      	movs	r3, #64	; 0x40
 8000716:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800071a:	2340      	movs	r3, #64	; 0x40
 800071c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000720:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000724:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000728:	2340      	movs	r3, #64	; 0x40
 800072a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000732:	2103      	movs	r1, #3
 8000734:	4618      	mov	r0, r3
 8000736:	f002 fcf9 	bl	800312c <HAL_RCC_ClockConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000740:	f000 fbe4 	bl	8000f0c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 8000744:	f107 0308 	add.w	r3, r7, #8
 8000748:	4a10      	ldr	r2, [pc, #64]	; (800078c <SystemClock_Config+0x170>)
 800074a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800075c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000760:	f107 0308 	add.w	r3, r7, #8
 8000764:	4618      	mov	r0, r3
 8000766:	f003 f865 	bl	8003834 <HAL_RCCEx_PeriphCLKConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8000770:	f000 fbcc 	bl	8000f0c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000774:	f002 f8f2 	bl	800295c <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000778:	bf00      	nop
 800077a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58000400 	.word	0x58000400
 8000788:	58024800 	.word	0x58024800
 800078c:	00040002 	.word	0x00040002

08000790 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <MX_ETH_Init+0x90>)
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_ETH_Init+0x94>)
 8000798:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 800079a:	4b21      	ldr	r3, [pc, #132]	; (8000820 <MX_ETH_Init+0x90>)
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007a2:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <MX_ETH_Init+0x90>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	3301      	adds	r3, #1
 80007a8:	2280      	movs	r2, #128	; 0x80
 80007aa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007ac:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ETH_Init+0x90>)
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	3302      	adds	r3, #2
 80007b2:	22e1      	movs	r2, #225	; 0xe1
 80007b4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007b6:	4b1a      	ldr	r3, [pc, #104]	; (8000820 <MX_ETH_Init+0x90>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	3303      	adds	r3, #3
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <MX_ETH_Init+0x90>)
 80007c2:	685b      	ldr	r3, [r3, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007ca:	4b15      	ldr	r3, [pc, #84]	; (8000820 <MX_ETH_Init+0x90>)
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	3305      	adds	r3, #5
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80007d4:	4b12      	ldr	r3, [pc, #72]	; (8000820 <MX_ETH_Init+0x90>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80007da:	4b11      	ldr	r3, [pc, #68]	; (8000820 <MX_ETH_Init+0x90>)
 80007dc:	4a12      	ldr	r2, [pc, #72]	; (8000828 <MX_ETH_Init+0x98>)
 80007de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80007e0:	4b0f      	ldr	r3, [pc, #60]	; (8000820 <MX_ETH_Init+0x90>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_ETH_Init+0x9c>)
 80007e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80007e6:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <MX_ETH_Init+0x90>)
 80007e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80007ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007ee:	480c      	ldr	r0, [pc, #48]	; (8000820 <MX_ETH_Init+0x90>)
 80007f0:	f001 f938 	bl	8001a64 <HAL_ETH_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fb87 	bl	8000f0c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007fe:	2234      	movs	r2, #52	; 0x34
 8000800:	2100      	movs	r1, #0
 8000802:	480b      	ldr	r0, [pc, #44]	; (8000830 <MX_ETH_Init+0xa0>)
 8000804:	f007 ffdc 	bl	80087c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_ETH_Init+0xa0>)
 800080a:	2221      	movs	r2, #33	; 0x21
 800080c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_ETH_Init+0xa0>)
 8000810:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000814:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000816:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_ETH_Init+0xa0>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	24000680 	.word	0x24000680
 8000824:	40028000 	.word	0x40028000
 8000828:	24000070 	.word	0x24000070
 800082c:	24000010 	.word	0x24000010
 8000830:	240006f0 	.word	0x240006f0

08000834 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b096      	sub	sp, #88	; 0x58
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800083a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000846:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
 8000854:	611a      	str	r2, [r3, #16]
 8000856:	615a      	str	r2, [r3, #20]
 8000858:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	222c      	movs	r2, #44	; 0x2c
 800085e:	2100      	movs	r1, #0
 8000860:	4618      	mov	r0, r3
 8000862:	f007 ffad 	bl	80087c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000866:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <MX_TIM1_Init+0x130>)
 8000868:	4a3f      	ldr	r2, [pc, #252]	; (8000968 <MX_TIM1_Init+0x134>)
 800086a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <MX_TIM1_Init+0x130>)
 800086e:	f240 4237 	movw	r2, #1079	; 0x437
 8000872:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000874:	4b3b      	ldr	r3, [pc, #236]	; (8000964 <MX_TIM1_Init+0x130>)
 8000876:	2200      	movs	r2, #0
 8000878:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 800087a:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <MX_TIM1_Init+0x130>)
 800087c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000880:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000882:	4b38      	ldr	r3, [pc, #224]	; (8000964 <MX_TIM1_Init+0x130>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000888:	4b36      	ldr	r3, [pc, #216]	; (8000964 <MX_TIM1_Init+0x130>)
 800088a:	2200      	movs	r2, #0
 800088c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800088e:	4b35      	ldr	r3, [pc, #212]	; (8000964 <MX_TIM1_Init+0x130>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000894:	4833      	ldr	r0, [pc, #204]	; (8000964 <MX_TIM1_Init+0x130>)
 8000896:	f004 fabd 	bl	8004e14 <HAL_TIM_PWM_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80008a0:	f000 fb34 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a8:	2300      	movs	r3, #0
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ac:	2300      	movs	r3, #0
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80008b4:	4619      	mov	r1, r3
 80008b6:	482b      	ldr	r0, [pc, #172]	; (8000964 <MX_TIM1_Init+0x130>)
 80008b8:	f004 ff58 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80008c2:	f000 fb23 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c6:	2360      	movs	r3, #96	; 0x60
 80008c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80008ca:	2300      	movs	r3, #0
 80008cc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008ce:	2300      	movs	r3, #0
 80008d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008d2:	2300      	movs	r3, #0
 80008d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008da:	2300      	movs	r3, #0
 80008dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008de:	2300      	movs	r3, #0
 80008e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e6:	2204      	movs	r2, #4
 80008e8:	4619      	mov	r1, r3
 80008ea:	481e      	ldr	r0, [pc, #120]	; (8000964 <MX_TIM1_Init+0x130>)
 80008ec:	f004 fabe 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80008f6:	f000 fb09 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_TIM1_Init+0x130>)
 8000904:	f004 fab2 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800090e:	f000 fafd 	bl	8000f0c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800093e:	2300      	movs	r3, #0
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_TIM1_Init+0x130>)
 8000948:	f004 ff98 	bl	800587c <HAL_TIMEx_ConfigBreakDeadTime>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8000952:	f000 fadb 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <MX_TIM1_Init+0x130>)
 8000958:	f000 fc2e 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 800095c:	bf00      	nop
 800095e:	3758      	adds	r7, #88	; 0x58
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	24000600 	.word	0x24000600
 8000968:	40010000 	.word	0x40010000

0800096c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097e:	463b      	mov	r3, r7
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
 800098c:	615a      	str	r2, [r3, #20]
 800098e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <MX_TIM2_Init+0xb0>)
 8000992:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000996:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_TIM2_Init+0xb0>)
 800099a:	f240 4237 	movw	r2, #1079	; 0x437
 800099e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b1e      	ldr	r3, [pc, #120]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 80009a6:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009a8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80009ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009bc:	f004 fa2a 	bl	8004e14 <HAL_TIM_PWM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 80009c6:	f000 faa1 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009d2:	f107 031c 	add.w	r3, r7, #28
 80009d6:	4619      	mov	r1, r3
 80009d8:	4810      	ldr	r0, [pc, #64]	; (8000a1c <MX_TIM2_Init+0xb0>)
 80009da:	f004 fec7 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80009e4:	f000 fa92 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e8:	2360      	movs	r3, #96	; 0x60
 80009ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009f8:	463b      	mov	r3, r7
 80009fa:	2200      	movs	r2, #0
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <MX_TIM2_Init+0xb0>)
 8000a00:	f004 fa34 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8000a0a:	f000 fa7f 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a0e:	4803      	ldr	r0, [pc, #12]	; (8000a1c <MX_TIM2_Init+0xb0>)
 8000a10:	f000 fbd2 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	24000640 	.word	0x24000640

08000a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	; 0x28
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a32:	463b      	mov	r3, r7
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
 8000a40:	615a      	str	r2, [r3, #20]
 8000a42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a44:	4b2d      	ldr	r3, [pc, #180]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a46:	4a2e      	ldr	r2, [pc, #184]	; (8000b00 <MX_TIM3_Init+0xe0>)
 8000a48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a4c:	f240 4237 	movw	r2, #1079	; 0x437
 8000a50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b2a      	ldr	r3, [pc, #168]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a5a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000a5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b26      	ldr	r3, [pc, #152]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a6c:	4823      	ldr	r0, [pc, #140]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a6e:	f004 f9d1 	bl	8004e14 <HAL_TIM_PWM_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000a78:	f000 fa48 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	481c      	ldr	r0, [pc, #112]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000a8c:	f004 fe6e 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 fa39 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a9a:	2360      	movs	r3, #96	; 0x60
 8000a9c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aaa:	463b      	mov	r3, r7
 8000aac:	2200      	movs	r2, #0
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4812      	ldr	r0, [pc, #72]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000ab2:	f004 f9db 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000abc:	f000 fa26 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ac0:	463b      	mov	r3, r7
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	480d      	ldr	r0, [pc, #52]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000ac8:	f004 f9d0 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8000ad2:	f000 fa1b 	bl	8000f0c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	220c      	movs	r2, #12
 8000ada:	4619      	mov	r1, r3
 8000adc:	4807      	ldr	r0, [pc, #28]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000ade:	f004 f9c5 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8000ae8:	f000 fa10 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <MX_TIM3_Init+0xdc>)
 8000aee:	f000 fb63 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000af2:	bf00      	nop
 8000af4:	3728      	adds	r7, #40	; 0x28
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	240005c0 	.word	0x240005c0
 8000b00:	40000400 	.word	0x40000400

08000b04 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	; 0x28
 8000b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0a:	f107 031c 	add.w	r3, r7, #28
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]
 8000b24:	615a      	str	r2, [r3, #20]
 8000b26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b28:	4b22      	ldr	r3, [pc, #136]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b2a:	4a23      	ldr	r2, [pc, #140]	; (8000bb8 <MX_TIM5_Init+0xb4>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 8000b2e:	4b21      	ldr	r3, [pc, #132]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b30:	f240 4237 	movw	r2, #1079	; 0x437
 8000b34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b36:	4b1f      	ldr	r3, [pc, #124]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 8000b3c:	4b1d      	ldr	r3, [pc, #116]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b3e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000b42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b44:	4b1b      	ldr	r3, [pc, #108]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000b50:	4818      	ldr	r0, [pc, #96]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b52:	f004 f95f 	bl	8004e14 <HAL_TIM_PWM_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 f9d6 	bl	8000f0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4811      	ldr	r0, [pc, #68]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b70:	f004 fdfc 	bl	800576c <HAL_TIMEx_MasterConfigSynchronization>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 8000b7a:	f000 f9c7 	bl	8000f0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b7e:	2360      	movs	r3, #96	; 0x60
 8000b80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b82:	2300      	movs	r3, #0
 8000b84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	220c      	movs	r2, #12
 8000b92:	4619      	mov	r1, r3
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000b96:	f004 f969 	bl	8004e6c <HAL_TIM_PWM_ConfigChannel>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8000ba0:	f000 f9b4 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MX_TIM5_Init+0xb0>)
 8000ba6:	f000 fb07 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 8000baa:	bf00      	nop
 8000bac:	3728      	adds	r7, #40	; 0x28
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	24000580 	.word	0x24000580
 8000bb8:	40000c00 	.word	0x40000c00

08000bbc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bc0:	4b22      	ldr	r3, [pc, #136]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bc2:	4a23      	ldr	r2, [pc, #140]	; (8000c50 <MX_USART3_UART_Init+0x94>)
 8000bc4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bc6:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bcc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bce:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bd4:	4b1d      	ldr	r3, [pc, #116]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bda:	4b1c      	ldr	r3, [pc, #112]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000be0:	4b1a      	ldr	r3, [pc, #104]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000be2:	220c      	movs	r2, #12
 8000be4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000be6:	4b19      	ldr	r3, [pc, #100]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bec:	4b17      	ldr	r3, [pc, #92]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bf2:	4b16      	ldr	r3, [pc, #88]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf8:	4b14      	ldr	r3, [pc, #80]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bfe:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c04:	4811      	ldr	r0, [pc, #68]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000c06:	f004 feb7 	bl	8005978 <HAL_UART_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c10:	f000 f97c 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c14:	2100      	movs	r1, #0
 8000c16:	480d      	ldr	r0, [pc, #52]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000c18:	f007 fa1f 	bl	800805a <HAL_UARTEx_SetTxFifoThreshold>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c22:	f000 f973 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c26:	2100      	movs	r1, #0
 8000c28:	4808      	ldr	r0, [pc, #32]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000c2a:	f007 fa54 	bl	80080d6 <HAL_UARTEx_SetRxFifoThreshold>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c34:	f000 f96a 	bl	8000f0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_USART3_UART_Init+0x90>)
 8000c3a:	f007 f9d5 	bl	8007fe8 <HAL_UARTEx_DisableFifoMode>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c44:	f000 f962 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	240000ec 	.word	0x240000ec
 8000c50:	40004800 	.word	0x40004800

08000c54 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c58:	4b15      	ldr	r3, [pc, #84]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c5e:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c60:	2209      	movs	r2, #9
 8000c62:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c66:	2202      	movs	r2, #2
 8000c68:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c6a:	4b11      	ldr	r3, [pc, #68]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c70:	4b0f      	ldr	r3, [pc, #60]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c72:	2202      	movs	r2, #2
 8000c74:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c76:	4b0e      	ldr	r3, [pc, #56]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c82:	4b0b      	ldr	r3, [pc, #44]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000c88:	4b09      	ldr	r3, [pc, #36]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c8e:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c9a:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9c:	f001 fcdb 	bl	8002656 <HAL_PCD_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000ca6:	f000 f931 	bl	8000f0c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	24000178 	.word	0x24000178
 8000cb4:	40080000 	.word	0x40080000

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08e      	sub	sp, #56	; 0x38
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b89      	ldr	r3, [pc, #548]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cd4:	4a87      	ldr	r2, [pc, #540]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cde:	4b85      	ldr	r3, [pc, #532]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	623b      	str	r3, [r7, #32]
 8000cea:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cec:	4b81      	ldr	r3, [pc, #516]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf2:	4a80      	ldr	r2, [pc, #512]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfc:	4b7d      	ldr	r3, [pc, #500]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	61fb      	str	r3, [r7, #28]
 8000d08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	4b7a      	ldr	r3, [pc, #488]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d10:	4a78      	ldr	r2, [pc, #480]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1a:	4b76      	ldr	r3, [pc, #472]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	61bb      	str	r3, [r7, #24]
 8000d26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	4b72      	ldr	r3, [pc, #456]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d2e:	4a71      	ldr	r2, [pc, #452]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d38:	4b6e      	ldr	r3, [pc, #440]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d46:	4b6b      	ldr	r3, [pc, #428]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a69      	ldr	r2, [pc, #420]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d4e:	f043 0320 	orr.w	r3, r3, #32
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b67      	ldr	r3, [pc, #412]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 0320 	and.w	r3, r3, #32
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d64:	4b63      	ldr	r3, [pc, #396]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6a:	4a62      	ldr	r2, [pc, #392]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d70:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d74:	4b5f      	ldr	r3, [pc, #380]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d7e:	60fb      	str	r3, [r7, #12]
 8000d80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d82:	4b5c      	ldr	r3, [pc, #368]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d88:	4a5a      	ldr	r2, [pc, #360]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d92:	4b58      	ldr	r3, [pc, #352]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d98:	f003 0310 	and.w	r3, r3, #16
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000da0:	4b54      	ldr	r3, [pc, #336]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000da2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da6:	4a53      	ldr	r2, [pc, #332]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000da8:	f043 0308 	orr.w	r3, r3, #8
 8000dac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db0:	4b50      	ldr	r3, [pc, #320]	; (8000ef4 <MX_GPIO_Init+0x23c>)
 8000db2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db6:	f003 0308 	and.w	r3, r3, #8
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000dc4:	484c      	ldr	r0, [pc, #304]	; (8000ef8 <MX_GPIO_Init+0x240>)
 8000dc6:	f001 fc13 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2140      	movs	r1, #64	; 0x40
 8000dce:	484b      	ldr	r0, [pc, #300]	; (8000efc <MX_GPIO_Init+0x244>)
 8000dd0:	f001 fc0e 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB2 PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_10;
 8000dd4:	f240 4304 	movw	r3, #1028	; 0x404
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000dda:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <MX_GPIO_Init+0x248>)
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de6:	4619      	mov	r1, r3
 8000de8:	4843      	ldr	r0, [pc, #268]	; (8000ef8 <MX_GPIO_Init+0x240>)
 8000dea:	f001 fa51 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF11 PF12 PF13 PF14 
                           PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14 
 8000dee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000df4:	4b42      	ldr	r3, [pc, #264]	; (8000f00 <MX_GPIO_Init+0x248>)
 8000df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e00:	4619      	mov	r1, r3
 8000e02:	4840      	ldr	r0, [pc, #256]	; (8000f04 <MX_GPIO_Init+0x24c>)
 8000e04:	f001 fa44 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000e08:	230b      	movs	r3, #11
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e0c:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_GPIO_Init+0x248>)
 8000e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4838      	ldr	r0, [pc, #224]	; (8000efc <MX_GPIO_Init+0x244>)
 8000e1c:	f001 fa38 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8000e20:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000e26:	4b36      	ldr	r3, [pc, #216]	; (8000f00 <MX_GPIO_Init+0x248>)
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	4834      	ldr	r0, [pc, #208]	; (8000f08 <MX_GPIO_Init+0x250>)
 8000e36:	f001 fa2b 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e3a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4829      	ldr	r0, [pc, #164]	; (8000ef8 <MX_GPIO_Init+0x240>)
 8000e54:	f001 fa1c 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e58:	2340      	movs	r3, #64	; 0x40
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4823      	ldr	r0, [pc, #140]	; (8000efc <MX_GPIO_Init+0x244>)
 8000e70:	f001 fa0e 	bl	8002290 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e74:	2380      	movs	r3, #128	; 0x80
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e84:	4619      	mov	r1, r3
 8000e86:	481d      	ldr	r0, [pc, #116]	; (8000efc <MX_GPIO_Init+0x244>)
 8000e88:	f001 fa02 	bl	8002290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	2100      	movs	r1, #0
 8000e90:	2006      	movs	r0, #6
 8000e92:	f000 fdb2 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e96:	2006      	movs	r0, #6
 8000e98:	f000 fdc9 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2007      	movs	r0, #7
 8000ea2:	f000 fdaa 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ea6:	2007      	movs	r0, #7
 8000ea8:	f000 fdc1 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2008      	movs	r0, #8
 8000eb2:	f000 fda2 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000eb6:	2008      	movs	r0, #8
 8000eb8:	f000 fdb9 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2009      	movs	r0, #9
 8000ec2:	f000 fd9a 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ec6:	2009      	movs	r0, #9
 8000ec8:	f000 fdb1 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2017      	movs	r0, #23
 8000ed2:	f000 fd92 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ed6:	2017      	movs	r0, #23
 8000ed8:	f000 fda9 	bl	8001a2e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2028      	movs	r0, #40	; 0x28
 8000ee2:	f000 fd8a 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ee6:	2028      	movs	r0, #40	; 0x28
 8000ee8:	f000 fda1 	bl	8001a2e <HAL_NVIC_EnableIRQ>

}
 8000eec:	bf00      	nop
 8000eee:	3738      	adds	r7, #56	; 0x38
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	58024400 	.word	0x58024400
 8000ef8:	58020400 	.word	0x58020400
 8000efc:	58021800 	.word	0x58021800
 8000f00:	11310000 	.word	0x11310000
 8000f04:	58021400 	.word	0x58021400
 8000f08:	58021000 	.word	0x58021000

08000f0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
	...

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_MspInit+0x30>)
 8000f24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f28:	4a08      	ldr	r2, [pc, #32]	; (8000f4c <HAL_MspInit+0x30>)
 8000f2a:	f043 0302 	orr.w	r3, r3, #2
 8000f2e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000f32:	4b06      	ldr	r3, [pc, #24]	; (8000f4c <HAL_MspInit+0x30>)
 8000f34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000f38:	f003 0302 	and.w	r3, r3, #2
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	58024400 	.word	0x58024400

08000f50 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08e      	sub	sp, #56	; 0x38
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <HAL_ETH_MspInit+0x184>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	f040 80ab 	bne.w	80010ca <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000f74:	4b58      	ldr	r3, [pc, #352]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f7a:	4a57      	ldr	r2, [pc, #348]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f80:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f84:	4b54      	ldr	r3, [pc, #336]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f86:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f8e:	623b      	str	r3, [r7, #32]
 8000f90:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f92:	4b51      	ldr	r3, [pc, #324]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f98:	4a4f      	ldr	r2, [pc, #316]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fa2:	4b4d      	ldr	r3, [pc, #308]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fa4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fac:	61fb      	str	r3, [r7, #28]
 8000fae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fb6:	4a48      	ldr	r2, [pc, #288]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000fc0:	4b45      	ldr	r3, [pc, #276]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fc2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	4b42      	ldr	r3, [pc, #264]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd4:	4a40      	ldr	r2, [pc, #256]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fd6:	f043 0304 	orr.w	r3, r3, #4
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fde:	4b3e      	ldr	r3, [pc, #248]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fec:	4b3a      	ldr	r3, [pc, #232]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff2:	4a39      	ldr	r2, [pc, #228]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffc:	4b36      	ldr	r3, [pc, #216]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	4b33      	ldr	r3, [pc, #204]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001010:	4a31      	ldr	r2, [pc, #196]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8001012:	f043 0302 	orr.w	r3, r3, #2
 8001016:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800101c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001020:	f003 0302 	and.w	r3, r3, #2
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001028:	4b2b      	ldr	r3, [pc, #172]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800102a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800102e:	4a2a      	ldr	r2, [pc, #168]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 8001030:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001038:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <HAL_ETH_MspInit+0x188>)
 800103a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001046:	2332      	movs	r3, #50	; 0x32
 8001048:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104a:	2302      	movs	r3, #2
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104e:	2300      	movs	r3, #0
 8001050:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	2300      	movs	r3, #0
 8001054:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001056:	230b      	movs	r3, #11
 8001058:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800105e:	4619      	mov	r1, r3
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <HAL_ETH_MspInit+0x18c>)
 8001062:	f001 f915 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001066:	2386      	movs	r3, #134	; 0x86
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001076:	230b      	movs	r3, #11
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4619      	mov	r1, r3
 8001080:	4817      	ldr	r0, [pc, #92]	; (80010e0 <HAL_ETH_MspInit+0x190>)
 8001082:	f001 f905 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001086:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108c:	2302      	movs	r3, #2
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001098:	230b      	movs	r3, #11
 800109a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800109c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010a0:	4619      	mov	r1, r3
 80010a2:	4810      	ldr	r0, [pc, #64]	; (80010e4 <HAL_ETH_MspInit+0x194>)
 80010a4:	f001 f8f4 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80010a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b2:	2300      	movs	r3, #0
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010ba:	230b      	movs	r3, #11
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c2:	4619      	mov	r1, r3
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <HAL_ETH_MspInit+0x198>)
 80010c6:	f001 f8e3 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	40028000 	.word	0x40028000
 80010d8:	58024400 	.word	0x58024400
 80010dc:	58020800 	.word	0x58020800
 80010e0:	58020000 	.word	0x58020000
 80010e4:	58020400 	.word	0x58020400
 80010e8:	58021800 	.word	0x58021800

080010ec <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b087      	sub	sp, #28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a2b      	ldr	r2, [pc, #172]	; (80011a8 <HAL_TIM_PWM_MspInit+0xbc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10f      	bne.n	800111e <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	4b2b      	ldr	r3, [pc, #172]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001100:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001104:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001110:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	617b      	str	r3, [r7, #20]
 800111a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800111c:	e03d      	b.n	800119a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001126:	d10f      	bne.n	8001148 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001128:	4b20      	ldr	r3, [pc, #128]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 800112a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800112e:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001138:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 800113a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	613b      	str	r3, [r7, #16]
 8001144:	693b      	ldr	r3, [r7, #16]
}
 8001146:	e028      	b.n	800119a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <HAL_TIM_PWM_MspInit+0xc4>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d10f      	bne.n	8001172 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001154:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001158:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001164:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	60fb      	str	r3, [r7, #12]
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	e013      	b.n	800119a <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <HAL_TIM_PWM_MspInit+0xc8>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d10e      	bne.n	800119a <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800117c:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 800117e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 8001184:	f043 0308 	orr.w	r3, r3, #8
 8001188:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <HAL_TIM_PWM_MspInit+0xc0>)
 800118e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001192:	f003 0308 	and.w	r3, r3, #8
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
}
 800119a:	bf00      	nop
 800119c:	371c      	adds	r7, #28
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40010000 	.word	0x40010000
 80011ac:	58024400 	.word	0x58024400
 80011b0:	40000400 	.word	0x40000400
 80011b4:	40000c00 	.word	0x40000c00

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b08c      	sub	sp, #48	; 0x30
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_TIM_MspPostInit+0x188>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d120      	bne.n	800121c <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011da:	4b5a      	ldr	r3, [pc, #360]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 80011dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011e0:	4a58      	ldr	r2, [pc, #352]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 80011e2:	f043 0310 	orr.w	r3, r3, #16
 80011e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011ea:	4b56      	ldr	r3, [pc, #344]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 80011ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f0:	f003 0310 	and.w	r3, r3, #16
 80011f4:	61bb      	str	r3, [r7, #24]
 80011f6:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80011f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800120a:	2301      	movs	r3, #1
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	484c      	ldr	r0, [pc, #304]	; (8001348 <HAL_TIM_MspPostInit+0x190>)
 8001216:	f001 f83b 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800121a:	e08c      	b.n	8001336 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001224:	d11f      	bne.n	8001266 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	4b47      	ldr	r3, [pc, #284]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800122c:	4a45      	ldr	r2, [pc, #276]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 800122e:	f043 0301 	orr.w	r3, r3, #1
 8001232:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001236:	4b43      	ldr	r3, [pc, #268]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001238:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001244:	2320      	movs	r3, #32
 8001246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001254:	2301      	movs	r3, #1
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001258:	f107 031c 	add.w	r3, r7, #28
 800125c:	4619      	mov	r1, r3
 800125e:	483b      	ldr	r0, [pc, #236]	; (800134c <HAL_TIM_MspPostInit+0x194>)
 8001260:	f001 f816 	bl	8002290 <HAL_GPIO_Init>
}
 8001264:	e067      	b.n	8001336 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a39      	ldr	r2, [pc, #228]	; (8001350 <HAL_TIM_MspPostInit+0x198>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d13e      	bne.n	80012ee <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001272:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001276:	4a33      	ldr	r2, [pc, #204]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001280:	4b30      	ldr	r3, [pc, #192]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001282:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001290:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001294:	4a2b      	ldr	r2, [pc, #172]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 80012a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012ac:	2340      	movs	r3, #64	; 0x40
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012bc:	2302      	movs	r3, #2
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4821      	ldr	r0, [pc, #132]	; (800134c <HAL_TIM_MspPostInit+0x194>)
 80012c8:	f000 ffe2 	bl	8002290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012cc:	2303      	movs	r3, #3
 80012ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012dc:	2302      	movs	r3, #2
 80012de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 031c 	add.w	r3, r7, #28
 80012e4:	4619      	mov	r1, r3
 80012e6:	481b      	ldr	r0, [pc, #108]	; (8001354 <HAL_TIM_MspPostInit+0x19c>)
 80012e8:	f000 ffd2 	bl	8002290 <HAL_GPIO_Init>
}
 80012ec:	e023      	b.n	8001336 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a19      	ldr	r2, [pc, #100]	; (8001358 <HAL_TIM_MspPostInit+0x1a0>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d11e      	bne.n	8001336 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 80012fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012fe:	4a11      	ldr	r2, [pc, #68]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 8001300:	f043 0301 	orr.w	r3, r3, #1
 8001304:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_TIM_MspPostInit+0x18c>)
 800130a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001316:	2308      	movs	r3, #8
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001326:	2302      	movs	r3, #2
 8001328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <HAL_TIM_MspPostInit+0x194>)
 8001332:	f000 ffad 	bl	8002290 <HAL_GPIO_Init>
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40010000 	.word	0x40010000
 8001344:	58024400 	.word	0x58024400
 8001348:	58021000 	.word	0x58021000
 800134c:	58020000 	.word	0x58020000
 8001350:	40000400 	.word	0x40000400
 8001354:	58020400 	.word	0x58020400
 8001358:	40000c00 	.word	0x40000c00

0800135c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08a      	sub	sp, #40	; 0x28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a1a      	ldr	r2, [pc, #104]	; (80013e4 <HAL_UART_MspInit+0x88>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d12e      	bne.n	80013dc <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 8001380:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001384:	4a18      	ldr	r2, [pc, #96]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 8001386:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800138a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800138e:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 8001390:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001394:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001398:	613b      	str	r3, [r7, #16]
 800139a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 800139e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013a2:	4a11      	ldr	r2, [pc, #68]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 80013a4:	f043 0308 	orr.w	r3, r3, #8
 80013a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <HAL_UART_MspInit+0x8c>)
 80013ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b2:	f003 0308 	and.w	r3, r3, #8
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013cc:	2307      	movs	r3, #7
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	4619      	mov	r1, r3
 80013d6:	4805      	ldr	r0, [pc, #20]	; (80013ec <HAL_UART_MspInit+0x90>)
 80013d8:	f000 ff5a 	bl	8002290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	40004800 	.word	0x40004800
 80013e8:	58024400 	.word	0x58024400
 80013ec:	58020c00 	.word	0x58020c00

080013f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08a      	sub	sp, #40	; 0x28
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a21      	ldr	r2, [pc, #132]	; (8001494 <HAL_PCD_MspInit+0xa4>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d13b      	bne.n	800148a <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0301 	and.w	r3, r3, #1
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001430:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001442:	230a      	movs	r3, #10
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	; (800149c <HAL_PCD_MspInit+0xac>)
 800144e:	f000 ff1f 	bl	8002290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001456:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001460:	f107 0314 	add.w	r3, r7, #20
 8001464:	4619      	mov	r1, r3
 8001466:	480d      	ldr	r0, [pc, #52]	; (800149c <HAL_PCD_MspInit+0xac>)
 8001468:	f000 ff12 	bl	8002290 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800146c:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 800146e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001472:	4a09      	ldr	r2, [pc, #36]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 8001474:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001478:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_PCD_MspInit+0xa8>)
 800147e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001482:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800148a:	bf00      	nop
 800148c:	3728      	adds	r7, #40	; 0x28
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40080000 	.word	0x40080000
 8001498:	58024400 	.word	0x58024400
 800149c:	58020000 	.word	0x58020000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <HardFault_Handler+0x4>

080014b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <MemManage_Handler+0x4>

080014ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014be:	e7fe      	b.n	80014be <BusFault_Handler+0x4>

080014c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <UsageFault_Handler+0x4>

080014c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014c6:	b480      	push	{r7}
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f4:	f000 f944 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}

080014fc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001500:	2001      	movs	r0, #1
 8001502:	f001 f88e 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}

0800150a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800150e:	2002      	movs	r0, #2
 8001510:	f001 f887 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001514:	bf00      	nop
 8001516:	bd80      	pop	{r7, pc}

08001518 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800151c:	2004      	movs	r0, #4
 800151e:	f001 f880 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}

08001526 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 800152a:	2008      	movs	r0, #8
 800152c:	f001 f879 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	bd80      	pop	{r7, pc}

08001534 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001538:	2080      	movs	r0, #128	; 0x80
 800153a:	f001 f872 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800153e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001542:	f001 f86e 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800154e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001552:	f001 f866 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001556:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800155a:	f001 f862 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800155e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001562:	f001 f85e 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001566:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800156a:	f001 f85a 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800156e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001572:	f001 f856 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001576:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800157a:	f001 f852 	bl	8002622 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <SystemInit+0xac>)
 800158a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800158e:	4a28      	ldr	r2, [pc, #160]	; (8001630 <SystemInit+0xac>)
 8001590:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001594:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001598:	4b26      	ldr	r3, [pc, #152]	; (8001634 <SystemInit+0xb0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <SystemInit+0xb0>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SystemInit+0xb0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015aa:	4b22      	ldr	r3, [pc, #136]	; (8001634 <SystemInit+0xb0>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	4921      	ldr	r1, [pc, #132]	; (8001634 <SystemInit+0xb0>)
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <SystemInit+0xb4>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <SystemInit+0xb0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015bc:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <SystemInit+0xb0>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	; (8001634 <SystemInit+0xb0>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <SystemInit+0xb0>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80015ce:	4b19      	ldr	r3, [pc, #100]	; (8001634 <SystemInit+0xb0>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80015d4:	4b17      	ldr	r3, [pc, #92]	; (8001634 <SystemInit+0xb0>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015da:	4b16      	ldr	r3, [pc, #88]	; (8001634 <SystemInit+0xb0>)
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <SystemInit+0xb0>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <SystemInit+0xb0>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <SystemInit+0xb0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <SystemInit+0xb0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f8:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <SystemInit+0xb0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <SystemInit+0xb0>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <SystemInit+0xb0>)
 8001606:	2200      	movs	r2, #0
 8001608:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <SystemInit+0xb8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b0c      	ldr	r3, [pc, #48]	; (8001640 <SystemInit+0xbc>)
 8001610:	4013      	ands	r3, r2
 8001612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001616:	d202      	bcs.n	800161e <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001618:	4b0a      	ldr	r3, [pc, #40]	; (8001644 <SystemInit+0xc0>)
 800161a:	2201      	movs	r2, #1
 800161c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SystemInit+0xac>)
 8001620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001624:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000ed00 	.word	0xe000ed00
 8001634:	58024400 	.word	0x58024400
 8001638:	eaf6ed7f 	.word	0xeaf6ed7f
 800163c:	5c001000 	.word	0x5c001000
 8001640:	ffff0000 	.word	0xffff0000
 8001644:	51008108 	.word	0x51008108

08001648 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001648:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001680 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800164c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800164e:	e003      	b.n	8001658 <LoopCopyDataInit>

08001650 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001650:	4b0c      	ldr	r3, [pc, #48]	; (8001684 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001652:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001654:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001656:	3104      	adds	r1, #4

08001658 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800165a:	4b0c      	ldr	r3, [pc, #48]	; (800168c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800165c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800165e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001660:	d3f6      	bcc.n	8001650 <CopyDataInit>
  ldr  r2, =_sbss
 8001662:	4a0b      	ldr	r2, [pc, #44]	; (8001690 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001664:	e002      	b.n	800166c <LoopFillZerobss>

08001666 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001666:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001668:	f842 3b04 	str.w	r3, [r2], #4

0800166c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800166e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001670:	d3f9      	bcc.n	8001666 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001672:	f7ff ff87 	bl	8001584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001676:	f007 f87f 	bl	8008778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800167a:	f7fe ffb8 	bl	80005ee <main>
  bx  lr    
 800167e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001680:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001684:	08008818 	.word	0x08008818
  ldr  r0, =_sdata
 8001688:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 800168c:	24000010 	.word	0x24000010
  ldr  r2, =_sbss
 8001690:	240000d0 	.word	0x240000d0
  ldr  r3, = _ebss
 8001694:	24000728 	.word	0x24000728

08001698 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001698:	e7fe      	b.n	8001698 <ADC3_IRQHandler>
	...

0800169c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016a2:	2003      	movs	r0, #3
 80016a4:	f000 f99e 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80016a8:	f001 fef6 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 80016ac:	4601      	mov	r1, r0
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_Init+0x68>)
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	0a1b      	lsrs	r3, r3, #8
 80016b4:	f003 030f 	and.w	r3, r3, #15
 80016b8:	4a13      	ldr	r2, [pc, #76]	; (8001708 <HAL_Init+0x6c>)
 80016ba:	5cd3      	ldrb	r3, [r2, r3]
 80016bc:	f003 031f 	and.w	r3, r3, #31
 80016c0:	fa21 f303 	lsr.w	r3, r1, r3
 80016c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016c6:	4b0f      	ldr	r3, [pc, #60]	; (8001704 <HAL_Init+0x68>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 030f 	and.w	r3, r3, #15
 80016ce:	4a0e      	ldr	r2, [pc, #56]	; (8001708 <HAL_Init+0x6c>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	f003 031f 	and.w	r3, r3, #31
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	fa22 f303 	lsr.w	r3, r2, r3
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <HAL_Init+0x70>)
 80016de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016e0:	4a0b      	ldr	r2, [pc, #44]	; (8001710 <HAL_Init+0x74>)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 f814 	bl	8001714 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e002      	b.n	80016fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016f6:	f7ff fc11 	bl	8000f1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	58024400 	.word	0x58024400
 8001708:	080087f8 	.word	0x080087f8
 800170c:	24000004 	.word	0x24000004
 8001710:	24000000 	.word	0x24000000

08001714 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800171c:	4b15      	ldr	r3, [pc, #84]	; (8001774 <HAL_InitTick+0x60>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e021      	b.n	800176c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <HAL_InitTick+0x64>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <HAL_InitTick+0x60>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	4619      	mov	r1, r3
 8001732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001736:	fbb3 f3f1 	udiv	r3, r3, r1
 800173a:	fbb2 f3f3 	udiv	r3, r2, r3
 800173e:	4618      	mov	r0, r3
 8001740:	f000 f983 	bl	8001a4a <HAL_SYSTICK_Config>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e00e      	b.n	800176c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b0f      	cmp	r3, #15
 8001752:	d80a      	bhi.n	800176a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001754:	2200      	movs	r2, #0
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	f04f 30ff 	mov.w	r0, #4294967295
 800175c:	f000 f94d 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001760:	4a06      	ldr	r2, [pc, #24]	; (800177c <HAL_InitTick+0x68>)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
 8001768:	e000      	b.n	800176c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
}
 800176c:	4618      	mov	r0, r3
 800176e:	3708      	adds	r7, #8
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	2400000c 	.word	0x2400000c
 8001778:	24000000 	.word	0x24000000
 800177c:	24000008 	.word	0x24000008

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	; (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	2400000c 	.word	0x2400000c
 80017a4:	24000724 	.word	0x24000724

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	24000724 	.word	0x24000724

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_Delay+0x40>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2400000c 	.word	0x2400000c

08001804 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <HAL_GetREVID+0x14>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	0c1b      	lsrs	r3, r3, #16
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	5c001000 	.word	0x5c001000

0800181c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4313      	orrs	r3, r2
 8001832:	604b      	str	r3, [r1, #4]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	58000400 	.word	0x58000400

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0b      	ldr	r3, [pc, #44]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 800186e:	4313      	orrs	r3, r2
 8001870:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001872:	4a04      	ldr	r2, [pc, #16]	; (8001884 <__NVIC_SetPriorityGrouping+0x40>)
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	60d3      	str	r3, [r2, #12]
}
 8001878:	bf00      	nop
 800187a:	3714      	adds	r7, #20
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000ed00 	.word	0xe000ed00
 8001888:	05fa0000 	.word	0x05fa0000

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	88fb      	ldrh	r3, [r7, #6]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	; (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	; (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	; 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	; 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	; (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	; (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a08:	f7ff ff40 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	68b9      	ldr	r1, [r7, #8]
 8001a12:	6978      	ldr	r0, [r7, #20]
 8001a14:	f7ff ff90 	bl	8001938 <NVIC_EncodePriority>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a1e:	4611      	mov	r1, r2
 8001a20:	4618      	mov	r0, r3
 8001a22:	f7ff ff5f 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff ff33 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}

08001a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4a:	b580      	push	{r7, lr}
 8001a4c:	b082      	sub	sp, #8
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7ff ffa4 	bl	80019a0 <SysTick_Config>
 8001a58:	4603      	mov	r3, r0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	e0c6      	b.n	8001c04 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d102      	bne.n	8001a84 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff fa66 	bl	8000f50 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2223      	movs	r2, #35	; 0x23
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	4b60      	ldr	r3, [pc, #384]	; (8001c0c <HAL_ETH_Init+0x1a8>)
 8001a8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a90:	4a5e      	ldr	r2, [pc, #376]	; (8001c0c <HAL_ETH_Init+0x1a8>)
 8001a92:	f043 0302 	orr.w	r3, r3, #2
 8001a96:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a9a:	4b5c      	ldr	r3, [pc, #368]	; (8001c0c <HAL_ETH_Init+0x1a8>)
 8001a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7a1b      	ldrb	r3, [r3, #8]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f7ff feb3 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
 8001ab6:	e003      	b.n	8001ac0 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001ab8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001abc:	f7ff feae 	bl	800181c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f042 0201 	orr.w	r2, r2, #1
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ad8:	f7ff fe66 	bl	80017a8 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001ade:	e00f      	b.n	8001b00 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001ae0:	f7ff fe62 	bl	80017a8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001aee:	d907      	bls.n	8001b00 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2204      	movs	r2, #4
 8001af4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	22e0      	movs	r2, #224	; 0xe0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e081      	b.n	8001c04 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1e6      	bne.n	8001ae0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 fac0 	bl	8002098 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001b18:	f001 fe30 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b3c      	ldr	r3, [pc, #240]	; (8001c10 <HAL_ETH_Init+0x1ac>)
 8001b20:	fba3 2302 	umull	r2, r3, r3, r2
 8001b24:	0c9a      	lsrs	r2, r3, #18
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	3a01      	subs	r2, #1
 8001b2c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fa13 	bl	8001f5c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001b4c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001b50:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d007      	beq.n	8001b6e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	22e0      	movs	r2, #224	; 0xe0
 8001b68:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e04a      	b.n	8001c04 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b76:	4413      	add	r3, r2
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	4b26      	ldr	r3, [pc, #152]	; (8001c14 <HAL_ETH_Init+0x1b0>)
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	6952      	ldr	r2, [r2, #20]
 8001b82:	0052      	lsls	r2, r2, #1
 8001b84:	6879      	ldr	r1, [r7, #4]
 8001b86:	6809      	ldr	r1, [r1, #0]
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	f241 1308 	movw	r3, #4360	; 0x1108
 8001b8e:	440b      	add	r3, r1
 8001b90:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fad8 	bl	8002148 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f000 fb1c 	bl	80021d6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	3305      	adds	r3, #5
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	021a      	lsls	r2, r3, #8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	3304      	adds	r3, #4
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	061a      	lsls	r2, r3, #24
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	3302      	adds	r3, #2
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bdc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001bea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001bec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2210      	movs	r2, #16
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8001c02:	2300      	movs	r3, #0
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3710      	adds	r7, #16
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	58024400 	.word	0x58024400
 8001c10:	431bde83 	.word	0x431bde83
 8001c14:	ffff8001 	.word	0xffff8001

08001c18 <ETH_SetMACConfig>:
/**
  * @}
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b085      	sub	sp, #20
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8001c2a:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	791b      	ldrb	r3, [r3, #4]
 8001c30:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8001c32:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	7b1b      	ldrb	r3, [r3, #12]
 8001c38:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8001c3a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	7b5b      	ldrb	r3, [r3, #13]
 8001c40:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001c42:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	7b9b      	ldrb	r3, [r3, #14]
 8001c48:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8001c4a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	7bdb      	ldrb	r3, [r3, #15]
 8001c50:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001c52:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	7c12      	ldrb	r2, [r2, #16]
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	d102      	bne.n	8001c62 <ETH_SetMACConfig+0x4a>
 8001c5c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c60:	e000      	b.n	8001c64 <ETH_SetMACConfig+0x4c>
 8001c62:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001c64:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c66:	683a      	ldr	r2, [r7, #0]
 8001c68:	7c52      	ldrb	r2, [r2, #17]
 8001c6a:	2a00      	cmp	r2, #0
 8001c6c:	d102      	bne.n	8001c74 <ETH_SetMACConfig+0x5c>
 8001c6e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c72:	e000      	b.n	8001c76 <ETH_SetMACConfig+0x5e>
 8001c74:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001c76:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	7c9b      	ldrb	r3, [r3, #18]
 8001c7c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001c7e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001c84:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001c8a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	7f1b      	ldrb	r3, [r3, #28]
 8001c90:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8001c92:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	7f5b      	ldrb	r3, [r3, #29]
 8001c98:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001c9a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	7f92      	ldrb	r2, [r2, #30]
 8001ca0:	2a00      	cmp	r2, #0
 8001ca2:	d102      	bne.n	8001caa <ETH_SetMACConfig+0x92>
 8001ca4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ca8:	e000      	b.n	8001cac <ETH_SetMACConfig+0x94>
 8001caa:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001cac:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	7fdb      	ldrb	r3, [r3, #31]
 8001cb2:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001cb4:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cbc:	2a00      	cmp	r2, #0
 8001cbe:	d102      	bne.n	8001cc6 <ETH_SetMACConfig+0xae>
 8001cc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cc4:	e000      	b.n	8001cc8 <ETH_SetMACConfig+0xb0>
 8001cc6:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001cc8:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001cce:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001cd6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001cd8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b56      	ldr	r3, [pc, #344]	; (8001e44 <ETH_SetMACConfig+0x22c>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	6812      	ldr	r2, [r2, #0]
 8001cf0:	68f9      	ldr	r1, [r7, #12]
 8001cf2:	430b      	orrs	r3, r1
 8001cf4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cfa:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d02:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d04:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001d0c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8001d0e:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001d16:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8001d18:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001d20:	2a00      	cmp	r2, #0
 8001d22:	d102      	bne.n	8001d2a <ETH_SetMACConfig+0x112>
 8001d24:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d28:	e000      	b.n	8001d2c <ETH_SetMACConfig+0x114>
 8001d2a:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8001d2c:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8001d32:	4313      	orrs	r3, r2
 8001d34:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4b42      	ldr	r3, [pc, #264]	; (8001e48 <ETH_SetMACConfig+0x230>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	6812      	ldr	r2, [r2, #0]
 8001d44:	68f9      	ldr	r1, [r7, #12]
 8001d46:	430b      	orrs	r3, r1
 8001d48:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d50:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001d56:	4313      	orrs	r3, r2
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <ETH_SetMACConfig+0x234>)
 8001d62:	4013      	ands	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	68f9      	ldr	r1, [r7, #12]
 8001d6a:	430b      	orrs	r3, r1
 8001d6c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001d74:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d7a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d101      	bne.n	8001d8a <ETH_SetMACConfig+0x172>
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	e000      	b.n	8001d8c <ETH_SetMACConfig+0x174>
 8001d8a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001d8c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001d94:	4313      	orrs	r3, r2
 8001d96:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d9e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001da2:	4013      	ands	r3, r2
 8001da4:	687a      	ldr	r2, [r7, #4]
 8001da6:	6812      	ldr	r2, [r2, #0]
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	430b      	orrs	r3, r1
 8001dac:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001db4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001dbc:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	f023 0103 	bic.w	r1, r3, #3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	68fa      	ldr	r2, [r7, #12]
 8001dd4:	430a      	orrs	r2, r1
 8001dd6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001de2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	430a      	orrs	r2, r1
 8001df0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001dfe:	2a00      	cmp	r2, #0
 8001e00:	d101      	bne.n	8001e06 <ETH_SetMACConfig+0x1ee>
 8001e02:	2240      	movs	r2, #64	; 0x40
 8001e04:	e000      	b.n	8001e08 <ETH_SetMACConfig+0x1f0>
 8001e06:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001e08:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001e10:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001e12:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001e1a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001e28:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68fa      	ldr	r2, [r7, #12]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	00048083 	.word	0x00048083
 8001e48:	c0f88000 	.word	0xc0f88000
 8001e4c:	fffffef0 	.word	0xfffffef0

08001e50 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b38      	ldr	r3, [pc, #224]	; (8001f48 <ETH_SetDMAConfig+0xf8>)
 8001e66:	4013      	ands	r3, r2
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	6812      	ldr	r2, [r2, #0]
 8001e6c:	6879      	ldr	r1, [r7, #4]
 8001e6e:	6809      	ldr	r1, [r1, #0]
 8001e70:	431a      	orrs	r2, r3
 8001e72:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8001e76:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	791b      	ldrb	r3, [r3, #4]
 8001e7c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e82:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	7b1b      	ldrb	r3, [r3, #12]
 8001e88:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	f241 0304 	movw	r3, #4100	; 0x1004
 8001e96:	4413      	add	r3, r2
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <ETH_SetDMAConfig+0xfc>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	687a      	ldr	r2, [r7, #4]
 8001ea0:	6811      	ldr	r1, [r2, #0]
 8001ea2:	68fa      	ldr	r2, [r7, #12]
 8001ea4:	431a      	orrs	r2, r3
 8001ea6:	f241 0304 	movw	r3, #4100	; 0x1004
 8001eaa:	440b      	add	r3, r1
 8001eac:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	7b5b      	ldrb	r3, [r3, #13]
 8001eb2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	4b22      	ldr	r3, [pc, #136]	; (8001f50 <ETH_SetDMAConfig+0x100>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	6811      	ldr	r1, [r2, #0]
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 8001ed6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	7d1b      	ldrb	r3, [r3, #20]
 8001ee0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ee2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	7f5b      	ldrb	r3, [r3, #29]
 8001ee8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001eea:	4313      	orrs	r3, r2
 8001eec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	f241 1304 	movw	r3, #4356	; 0x1104
 8001ef6:	4413      	add	r3, r2
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <ETH_SetDMAConfig+0x104>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	6811      	ldr	r1, [r2, #0]
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	431a      	orrs	r2, r3
 8001f06:	f241 1304 	movw	r3, #4356	; 0x1104
 8001f0a:	440b      	add	r3, r1
 8001f0c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7f1b      	ldrb	r3, [r3, #28]
 8001f12:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f24:	4413      	add	r3, r2
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <ETH_SetDMAConfig+0x108>)
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	6811      	ldr	r1, [r2, #0]
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	f241 1308 	movw	r3, #4360	; 0x1108
 8001f38:	440b      	add	r3, r1
 8001f3a:	601a      	str	r2, [r3, #0]
}
 8001f3c:	bf00      	nop
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	ffff87fd 	.word	0xffff87fd
 8001f4c:	ffff2ffe 	.word	0xffff2ffe
 8001f50:	fffec000 	.word	0xfffec000
 8001f54:	ffc0efef 	.word	0xffc0efef
 8001f58:	7fc0ffff 	.word	0x7fc0ffff

08001f5c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b0a4      	sub	sp, #144	; 0x90
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001f64:	2301      	movs	r3, #1
 8001f66:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f74:	2300      	movs	r3, #0
 8001f76:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001f86:	2301      	movs	r3, #1
 8001f88:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001f92:	2301      	movs	r3, #1
 8001f94:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f9c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001fb4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001fb8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ff4:	2320      	movs	r3, #32
 8001ff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8002000:	2300      	movs	r3, #0
 8002002:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8002006:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800200a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800200c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002010:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002024:	2300      	movs	r3, #0
 8002026:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800202a:	2300      	movs	r3, #0
 800202c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002030:	2301      	movs	r3, #1
 8002032:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002036:	2300      	movs	r3, #0
 8002038:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800203a:	2301      	movs	r3, #1
 800203c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff fde6 	bl	8001c18 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800204c:	2301      	movs	r3, #1
 800204e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002050:	2301      	movs	r3, #1
 8002052:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002054:	2300      	movs	r3, #0
 8002056:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002058:	2300      	movs	r3, #0
 800205a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002066:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800206a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002070:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002074:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002076:	2300      	movs	r3, #0
 8002078:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800207c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002080:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002082:	f107 0308 	add.w	r3, r7, #8
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fee1 	bl	8001e50 <ETH_SetDMAConfig>
}
 800208e:	bf00      	nop
 8002090:	3790      	adds	r7, #144	; 0x90
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80020b2:	f001 fb63 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80020b6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4a1e      	ldr	r2, [pc, #120]	; (8002134 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d908      	bls.n	80020d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d804      	bhi.n	80020d2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	e027      	b.n	8002122 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d908      	bls.n	80020ec <ETH_MAC_MDIO_ClkConfig+0x54>
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4a17      	ldr	r2, [pc, #92]	; (800213c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d804      	bhi.n	80020ec <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e01a      	b.n	8002122 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	4a13      	ldr	r2, [pc, #76]	; (800213c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d903      	bls.n	80020fc <ETH_MAC_MDIO_ClkConfig+0x64>
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	4a12      	ldr	r2, [pc, #72]	; (8002140 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d911      	bls.n	8002120 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	4a10      	ldr	r2, [pc, #64]	; (8002140 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d908      	bls.n	8002116 <ETH_MAC_MDIO_ClkConfig+0x7e>
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	4a0f      	ldr	r2, [pc, #60]	; (8002144 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d804      	bhi.n	8002116 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e005      	b.n	8002122 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	e000      	b.n	8002122 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002120:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	01312cff 	.word	0x01312cff
 8002138:	02160ebf 	.word	0x02160ebf
 800213c:	039386ff 	.word	0x039386ff
 8002140:	05f5e0ff 	.word	0x05f5e0ff
 8002144:	08f0d17f 	.word	0x08f0d17f

08002148 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	e01d      	b.n	8002192 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	68d9      	ldr	r1, [r3, #12]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	4613      	mov	r3, r2
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	4413      	add	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	440b      	add	r3, r1
 8002166:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2200      	movs	r2, #0
 800216c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68fa      	ldr	r2, [r7, #12]
 8002186:	3206      	adds	r2, #6
 8002188:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d9de      	bls.n	8002156 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f241 132c 	movw	r3, #4396	; 0x112c
 80021a6:	4413      	add	r3, r2
 80021a8:	2203      	movs	r2, #3
 80021aa:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68d9      	ldr	r1, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	f241 1314 	movw	r3, #4372	; 0x1114
 80021b8:	4413      	add	r3, r2
 80021ba:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	68da      	ldr	r2, [r3, #12]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80021c8:	601a      	str	r2, [r3, #0]
}
 80021ca:	bf00      	nop
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b085      	sub	sp, #20
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	e024      	b.n	800222e <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6919      	ldr	r1, [r3, #16]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	4613      	mov	r3, r2
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4413      	add	r3, r2
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	440b      	add	r3, r1
 80021f4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2200      	movs	r2, #0
 8002218:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	330a      	adds	r3, #10
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3301      	adds	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2b03      	cmp	r3, #3
 8002232:	d9d7      	bls.n	80021e4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	f241 1330 	movw	r3, #4400	; 0x1130
 800225a:	4413      	add	r3, r2
 800225c:	2203      	movs	r2, #3
 800225e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6919      	ldr	r1, [r3, #16]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	f241 131c 	movw	r3, #4380	; 0x111c
 800226c:	4413      	add	r3, r2
 800226e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (((uint32_t)(ETH_RX_DESC_CNT - 1))*sizeof(ETH_DMADescTypeDef)))));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f503 61d8 	add.w	r1, r3, #1728	; 0x6c0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002280:	4413      	add	r3, r2
 8002282:	6019      	str	r1, [r3, #0]
}
 8002284:	bf00      	nop
 8002286:	3714      	adds	r7, #20
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b089      	sub	sp, #36	; 0x24
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800229e:	4b89      	ldr	r3, [pc, #548]	; (80024c4 <HAL_GPIO_Init+0x234>)
 80022a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022a2:	e194      	b.n	80025ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	4013      	ands	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8186 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d00b      	beq.n	80022dc <HAL_GPIO_Init+0x4c>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d007      	beq.n	80022dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022d0:	2b11      	cmp	r3, #17
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	2b12      	cmp	r3, #18
 80022da:	d130      	bne.n	800233e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	2203      	movs	r2, #3
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	68da      	ldr	r2, [r3, #12]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002312:	2201      	movs	r2, #1
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	fa02 f303 	lsl.w	r3, r2, r3
 800231a:	43db      	mvns	r3, r3
 800231c:	69ba      	ldr	r2, [r7, #24]
 800231e:	4013      	ands	r3, r2
 8002320:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	091b      	lsrs	r3, r3, #4
 8002328:	f003 0201 	and.w	r2, r3, #1
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	4013      	ands	r3, r2
 8002354:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	69fb      	ldr	r3, [r7, #28]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69ba      	ldr	r2, [r7, #24]
 800236c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0xee>
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b12      	cmp	r3, #18
 800237c:	d123      	bne.n	80023c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	691a      	ldr	r2, [r3, #16]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	69ba      	ldr	r2, [r7, #24]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	08da      	lsrs	r2, r3, #3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3208      	adds	r2, #8
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 0203 	and.w	r2, r3, #3
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002402:	2b00      	cmp	r3, #0
 8002404:	f000 80e0 	beq.w	80025c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002408:	4b2f      	ldr	r3, [pc, #188]	; (80024c8 <HAL_GPIO_Init+0x238>)
 800240a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800240e:	4a2e      	ldr	r2, [pc, #184]	; (80024c8 <HAL_GPIO_Init+0x238>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002418:	4b2b      	ldr	r3, [pc, #172]	; (80024c8 <HAL_GPIO_Init+0x238>)
 800241a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	60fb      	str	r3, [r7, #12]
 8002424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002426:	4a29      	ldr	r2, [pc, #164]	; (80024cc <HAL_GPIO_Init+0x23c>)
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	089b      	lsrs	r3, r3, #2
 800242c:	3302      	adds	r3, #2
 800242e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 0303 	and.w	r3, r3, #3
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	220f      	movs	r2, #15
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43db      	mvns	r3, r3
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	4013      	ands	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a20      	ldr	r2, [pc, #128]	; (80024d0 <HAL_GPIO_Init+0x240>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d052      	beq.n	80024f8 <HAL_GPIO_Init+0x268>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <HAL_GPIO_Init+0x244>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d031      	beq.n	80024be <HAL_GPIO_Init+0x22e>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <HAL_GPIO_Init+0x248>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d02b      	beq.n	80024ba <HAL_GPIO_Init+0x22a>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a1d      	ldr	r2, [pc, #116]	; (80024dc <HAL_GPIO_Init+0x24c>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x226>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a1c      	ldr	r2, [pc, #112]	; (80024e0 <HAL_GPIO_Init+0x250>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x222>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a1b      	ldr	r2, [pc, #108]	; (80024e4 <HAL_GPIO_Init+0x254>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x21e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <HAL_GPIO_Init+0x258>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_GPIO_Init+0x25c>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a18      	ldr	r2, [pc, #96]	; (80024f0 <HAL_GPIO_Init+0x260>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a17      	ldr	r2, [pc, #92]	; (80024f4 <HAL_GPIO_Init+0x264>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x20e>
 800249a:	2309      	movs	r3, #9
 800249c:	e02d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 800249e:	230a      	movs	r3, #10
 80024a0:	e02b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a2:	2308      	movs	r3, #8
 80024a4:	e029      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024a6:	2307      	movs	r3, #7
 80024a8:	e027      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024aa:	2306      	movs	r3, #6
 80024ac:	e025      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ae:	2305      	movs	r3, #5
 80024b0:	e023      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b2:	2304      	movs	r3, #4
 80024b4:	e021      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024b6:	2303      	movs	r3, #3
 80024b8:	e01f      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e01d      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024be:	2301      	movs	r3, #1
 80024c0:	e01b      	b.n	80024fa <HAL_GPIO_Init+0x26a>
 80024c2:	bf00      	nop
 80024c4:	58000080 	.word	0x58000080
 80024c8:	58024400 	.word	0x58024400
 80024cc:	58000400 	.word	0x58000400
 80024d0:	58020000 	.word	0x58020000
 80024d4:	58020400 	.word	0x58020400
 80024d8:	58020800 	.word	0x58020800
 80024dc:	58020c00 	.word	0x58020c00
 80024e0:	58021000 	.word	0x58021000
 80024e4:	58021400 	.word	0x58021400
 80024e8:	58021800 	.word	0x58021800
 80024ec:	58021c00 	.word	0x58021c00
 80024f0:	58022000 	.word	0x58022000
 80024f4:	58022400 	.word	0x58022400
 80024f8:	2300      	movs	r3, #0
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	f002 0203 	and.w	r2, r2, #3
 8002500:	0092      	lsls	r2, r2, #2
 8002502:	4093      	lsls	r3, r2
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800250a:	4938      	ldr	r1, [pc, #224]	; (80025ec <HAL_GPIO_Init+0x35c>)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	089b      	lsrs	r3, r3, #2
 8002510:	3302      	adds	r3, #2
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800256c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002592:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800259a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	3301      	adds	r3, #1
 80025cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f47f ae63 	bne.w	80022a4 <HAL_GPIO_Init+0x14>
  }
}
 80025de:	bf00      	nop
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	58000400 	.word	0x58000400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800260c:	e003      	b.n	8002616 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800260e:	887b      	ldrh	r3, [r7, #2]
 8002610:	041a      	lsls	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	619a      	str	r2, [r3, #24]
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800262c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002630:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d008      	beq.n	800264e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800263c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	4618      	mov	r0, r3
 800264a:	f7fd ffc5 	bl	80005d8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800264e:	bf00      	nop
 8002650:	3708      	adds	r7, #8
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}

08002656 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002656:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002658:	b08f      	sub	sp, #60	; 0x3c
 800265a:	af0a      	add	r7, sp, #40	; 0x28
 800265c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e116      	b.n	8002896 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002674:	b2db      	uxtb	r3, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d106      	bne.n	8002688 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f7fe feb4 	bl	80013f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2203      	movs	r2, #3
 800268c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d102      	bne.n	80026a2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f005 fe1e 	bl	80082e8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	687e      	ldr	r6, [r7, #4]
 80026b4:	466d      	mov	r5, sp
 80026b6:	f106 0410 	add.w	r4, r6, #16
 80026ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80026ca:	1d33      	adds	r3, r6, #4
 80026cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	f005 fda8 	bl	8008224 <USB_CoreInit>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d005      	beq.n	80026e6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2202      	movs	r2, #2
 80026de:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e0d7      	b.n	8002896 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2100      	movs	r1, #0
 80026ec:	4618      	mov	r0, r3
 80026ee:	f005 fe0c 	bl	800830a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	73fb      	strb	r3, [r7, #15]
 80026f6:	e04a      	b.n	800278e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	333d      	adds	r3, #61	; 0x3d
 8002708:	2201      	movs	r2, #1
 800270a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800270c:	7bfa      	ldrb	r2, [r7, #15]
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	00db      	lsls	r3, r3, #3
 8002714:	1a9b      	subs	r3, r3, r2
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	440b      	add	r3, r1
 800271a:	333c      	adds	r3, #60	; 0x3c
 800271c:	7bfa      	ldrb	r2, [r7, #15]
 800271e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002720:	7bfa      	ldrb	r2, [r7, #15]
 8002722:	7bfb      	ldrb	r3, [r7, #15]
 8002724:	b298      	uxth	r0, r3
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3342      	adds	r3, #66	; 0x42
 8002734:	4602      	mov	r2, r0
 8002736:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002738:	7bfa      	ldrb	r2, [r7, #15]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	00db      	lsls	r3, r3, #3
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	333f      	adds	r3, #63	; 0x3f
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800274c:	7bfa      	ldrb	r2, [r7, #15]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	3344      	adds	r3, #68	; 0x44
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002760:	7bfa      	ldrb	r2, [r7, #15]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	00db      	lsls	r3, r3, #3
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	3348      	adds	r3, #72	; 0x48
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3350      	adds	r3, #80	; 0x50
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	3301      	adds	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	d3af      	bcc.n	80026f8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002798:	2300      	movs	r3, #0
 800279a:	73fb      	strb	r3, [r7, #15]
 800279c:	e044      	b.n	8002828 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800279e:	7bfa      	ldrb	r2, [r7, #15]
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	1a9b      	subs	r3, r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80027b0:	2200      	movs	r2, #0
 80027b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80027b4:	7bfa      	ldrb	r2, [r7, #15]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	4613      	mov	r3, r2
 80027ba:	00db      	lsls	r3, r3, #3
 80027bc:	1a9b      	subs	r3, r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027ca:	7bfa      	ldrb	r2, [r7, #15]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027e0:	7bfa      	ldrb	r2, [r7, #15]
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4613      	mov	r3, r2
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	1a9b      	subs	r3, r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	440b      	add	r3, r1
 80027ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800280c:	7bfa      	ldrb	r2, [r7, #15]
 800280e:	6879      	ldr	r1, [r7, #4]
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	1a9b      	subs	r3, r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002822:	7bfb      	ldrb	r3, [r7, #15]
 8002824:	3301      	adds	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
 8002828:	7bfa      	ldrb	r2, [r7, #15]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	429a      	cmp	r2, r3
 8002830:	d3b5      	bcc.n	800279e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	687e      	ldr	r6, [r7, #4]
 800283a:	466d      	mov	r5, sp
 800283c:	f106 0410 	add.w	r4, r6, #16
 8002840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002848:	e894 0003 	ldmia.w	r4, {r0, r1}
 800284c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002850:	1d33      	adds	r3, r6, #4
 8002852:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	f005 fd83 	bl	8008360 <USB_DevInit>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2202      	movs	r2, #2
 8002864:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e014      	b.n	8002896 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	2b01      	cmp	r3, #1
 8002882:	d102      	bne.n	800288a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f80b 	bl	80028a0 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f005 ff25 	bl	80086de <USB_DevDisconnect>

  return HAL_OK;
 8002894:	2300      	movs	r3, #0
}
 8002896:	4618      	mov	r0, r3
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080028a0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80028ce:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_PCDEx_ActivateLPM+0x44>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3714      	adds	r7, #20
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	10000003 	.word	0x10000003

080028e8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80028f0:	4b19      	ldr	r3, [pc, #100]	; (8002958 <HAL_PWREx_ConfigSupply+0x70>)
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d00a      	beq.n	8002912 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80028fc:	4b16      	ldr	r3, [pc, #88]	; (8002958 <HAL_PWREx_ConfigSupply+0x70>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	429a      	cmp	r2, r3
 8002908:	d001      	beq.n	800290e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e01f      	b.n	800294e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	e01d      	b.n	800294e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_PWREx_ConfigSupply+0x70>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f023 0207 	bic.w	r2, r3, #7
 800291a:	490f      	ldr	r1, [pc, #60]	; (8002958 <HAL_PWREx_ConfigSupply+0x70>)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	4313      	orrs	r3, r2
 8002920:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002922:	f7fe ff41 	bl	80017a8 <HAL_GetTick>
 8002926:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002928:	e009      	b.n	800293e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800292a:	f7fe ff3d 	bl	80017a8 <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002938:	d901      	bls.n	800293e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e007      	b.n	800294e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800293e:	4b06      	ldr	r3, [pc, #24]	; (8002958 <HAL_PWREx_ConfigSupply+0x70>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800294a:	d1ee      	bne.n	800292a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3710      	adds	r7, #16
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	58024800 	.word	0x58024800

0800295c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002960:	4b05      	ldr	r3, [pc, #20]	; (8002978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4a04      	ldr	r2, [pc, #16]	; (8002978 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002966:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	58024800 	.word	0x58024800

0800297c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08c      	sub	sp, #48	; 0x30
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e3c4      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 8087 	beq.w	8002aaa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800299c:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80029a6:	4ba0      	ldr	r3, [pc, #640]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029aa:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80029ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ae:	2b10      	cmp	r3, #16
 80029b0:	d007      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46>
 80029b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b4:	2b18      	cmp	r3, #24
 80029b6:	d110      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
 80029b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d10b      	bne.n	80029da <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029c2:	4b99      	ldr	r3, [pc, #612]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d06c      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d168      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e39e      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d106      	bne.n	80029f2 <HAL_RCC_OscConfig+0x76>
 80029e4:	4b90      	ldr	r3, [pc, #576]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a8f      	ldr	r2, [pc, #572]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	6013      	str	r3, [r2, #0]
 80029f0:	e02e      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d10c      	bne.n	8002a14 <HAL_RCC_OscConfig+0x98>
 80029fa:	4b8b      	ldr	r3, [pc, #556]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a8a      	ldr	r2, [pc, #552]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	6013      	str	r3, [r2, #0]
 8002a06:	4b88      	ldr	r3, [pc, #544]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a87      	ldr	r2, [pc, #540]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a10:	6013      	str	r3, [r2, #0]
 8002a12:	e01d      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a1c:	d10c      	bne.n	8002a38 <HAL_RCC_OscConfig+0xbc>
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a81      	ldr	r2, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a28:	6013      	str	r3, [r2, #0]
 8002a2a:	4b7f      	ldr	r3, [pc, #508]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a7e      	ldr	r2, [pc, #504]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e00b      	b.n	8002a50 <HAL_RCC_OscConfig+0xd4>
 8002a38:	4b7b      	ldr	r3, [pc, #492]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a7a      	ldr	r2, [pc, #488]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	4b78      	ldr	r3, [pc, #480]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a77      	ldr	r2, [pc, #476]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d013      	beq.n	8002a80 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a58:	f7fe fea6 	bl	80017a8 <HAL_GetTick>
 8002a5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a60:	f7fe fea2 	bl	80017a8 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b64      	cmp	r3, #100	; 0x64
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e352      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a72:	4b6d      	ldr	r3, [pc, #436]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0xe4>
 8002a7e:	e014      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a80:	f7fe fe92 	bl	80017a8 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7fe fe8e 	bl	80017a8 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e33e      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a9a:	4b63      	ldr	r3, [pc, #396]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f0      	bne.n	8002a88 <HAL_RCC_OscConfig+0x10c>
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aa8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f000 8092 	beq.w	8002bdc <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ab8:	4b5b      	ldr	r3, [pc, #364]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ac0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ac2:	4b59      	ldr	r3, [pc, #356]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ac6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ac8:	6a3b      	ldr	r3, [r7, #32]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d007      	beq.n	8002ade <HAL_RCC_OscConfig+0x162>
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b18      	cmp	r3, #24
 8002ad2:	d12d      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d128      	bne.n	8002b30 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ade:	4b52      	ldr	r3, [pc, #328]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0304 	and.w	r3, r3, #4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d005      	beq.n	8002af6 <HAL_RCC_OscConfig+0x17a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e310      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002af6:	f7fe fe85 	bl	8001804 <HAL_GetREVID>
 8002afa:	4602      	mov	r2, r0
 8002afc:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d80a      	bhi.n	8002b1a <HAL_RCC_OscConfig+0x19e>
 8002b04:	4b48      	ldr	r3, [pc, #288]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	4945      	ldr	r1, [pc, #276]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b18:	e060      	b.n	8002bdc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b43      	ldr	r3, [pc, #268]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	493f      	ldr	r1, [pc, #252]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b2e:	e055      	b.n	8002bdc <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d038      	beq.n	8002baa <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f023 0219 	bic.w	r2, r3, #25
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	4938      	ldr	r1, [pc, #224]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b4a:	f7fe fe2d 	bl	80017a8 <HAL_GetTick>
 8002b4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b52:	f7fe fe29 	bl	80017a8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e2d9      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d0f0      	beq.n	8002b52 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b70:	f7fe fe48 	bl	8001804 <HAL_GetREVID>
 8002b74:	4602      	mov	r2, r0
 8002b76:	f241 0303 	movw	r3, #4099	; 0x1003
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d80a      	bhi.n	8002b94 <HAL_RCC_OscConfig+0x218>
 8002b7e:	4b2a      	ldr	r3, [pc, #168]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	031b      	lsls	r3, r3, #12
 8002b8c:	4926      	ldr	r1, [pc, #152]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
 8002b92:	e023      	b.n	8002bdc <HAL_RCC_OscConfig+0x260>
 8002b94:	4b24      	ldr	r3, [pc, #144]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	691b      	ldr	r3, [r3, #16]
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	4921      	ldr	r1, [pc, #132]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
 8002ba8:	e018      	b.n	8002bdc <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002baa:	4b1f      	ldr	r3, [pc, #124]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1e      	ldr	r2, [pc, #120]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb6:	f7fe fdf7 	bl	80017a8 <HAL_GetTick>
 8002bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bbc:	e008      	b.n	8002bd0 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002bbe:	f7fe fdf3 	bl	80017a8 <HAL_GetTick>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	1ad3      	subs	r3, r2, r3
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d901      	bls.n	8002bd0 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e2a3      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002bd0:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d1f0      	bne.n	8002bbe <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 8091 	beq.w	8002d0c <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bf2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b08      	cmp	r3, #8
 8002bfe:	d007      	beq.n	8002c10 <HAL_RCC_OscConfig+0x294>
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	2b18      	cmp	r3, #24
 8002c04:	d12f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ea>
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d12a      	bne.n	8002c66 <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_OscConfig+0x2ac>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d007      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2b0>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69db      	ldr	r3, [r3, #28]
 8002c20:	2b80      	cmp	r3, #128	; 0x80
 8002c22:	d003      	beq.n	8002c2c <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e277      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
 8002c28:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c2c:	f7fe fdea 	bl	8001804 <HAL_GetREVID>
 8002c30:	4602      	mov	r2, r0
 8002c32:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d80a      	bhi.n	8002c50 <HAL_RCC_OscConfig+0x2d4>
 8002c3a:	4ba2      	ldr	r3, [pc, #648]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	069b      	lsls	r3, r3, #26
 8002c48:	499e      	ldr	r1, [pc, #632]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c4e:	e05d      	b.n	8002d0c <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002c50:	4b9c      	ldr	r3, [pc, #624]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	061b      	lsls	r3, r3, #24
 8002c5e:	4999      	ldr	r1, [pc, #612]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002c64:	e052      	b.n	8002d0c <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	69db      	ldr	r3, [r3, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d035      	beq.n	8002cda <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002c6e:	4b95      	ldr	r3, [pc, #596]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a94      	ldr	r2, [pc, #592]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7a:	f7fe fd95 	bl	80017a8 <HAL_GetTick>
 8002c7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c80:	e008      	b.n	8002c94 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002c82:	f7fe fd91 	bl	80017a8 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d901      	bls.n	8002c94 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e241      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c94:	4b8b      	ldr	r3, [pc, #556]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0f0      	beq.n	8002c82 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ca0:	f7fe fdb0 	bl	8001804 <HAL_GetREVID>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f241 0303 	movw	r3, #4099	; 0x1003
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d80a      	bhi.n	8002cc4 <HAL_RCC_OscConfig+0x348>
 8002cae:	4b85      	ldr	r3, [pc, #532]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a1b      	ldr	r3, [r3, #32]
 8002cba:	069b      	lsls	r3, r3, #26
 8002cbc:	4981      	ldr	r1, [pc, #516]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	604b      	str	r3, [r1, #4]
 8002cc2:	e023      	b.n	8002d0c <HAL_RCC_OscConfig+0x390>
 8002cc4:	4b7f      	ldr	r3, [pc, #508]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6a1b      	ldr	r3, [r3, #32]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	497c      	ldr	r1, [pc, #496]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60cb      	str	r3, [r1, #12]
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002cda:	4b7a      	ldr	r3, [pc, #488]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a79      	ldr	r2, [pc, #484]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002ce0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fd5f 	bl	80017a8 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002cee:	f7fe fd5b 	bl	80017a8 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e20b      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002d00:	4b70      	ldr	r3, [pc, #448]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d036      	beq.n	8002d86 <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d019      	beq.n	8002d54 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d20:	4b68      	ldr	r3, [pc, #416]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d24:	4a67      	ldr	r2, [pc, #412]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d2c:	f7fe fd3c 	bl	80017a8 <HAL_GetTick>
 8002d30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d34:	f7fe fd38 	bl	80017a8 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e1e8      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002d46:	4b5f      	ldr	r3, [pc, #380]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x3b8>
 8002d52:	e018      	b.n	8002d86 <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d54:	4b5b      	ldr	r3, [pc, #364]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d58:	4a5a      	ldr	r2, [pc, #360]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d5a:	f023 0301 	bic.w	r3, r3, #1
 8002d5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d60:	f7fe fd22 	bl	80017a8 <HAL_GetTick>
 8002d64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d66:	e008      	b.n	8002d7a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d68:	f7fe fd1e 	bl	80017a8 <HAL_GetTick>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	1ad3      	subs	r3, r2, r3
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e1ce      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002d7a:	4b52      	ldr	r3, [pc, #328]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1f0      	bne.n	8002d68 <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d036      	beq.n	8002e00 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d019      	beq.n	8002dce <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002d9a:	4b4a      	ldr	r3, [pc, #296]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a49      	ldr	r2, [pc, #292]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002da0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002da4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002da6:	f7fe fcff 	bl	80017a8 <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dac:	e008      	b.n	8002dc0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002dae:	f7fe fcfb 	bl	80017a8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d901      	bls.n	8002dc0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	e1ab      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002dc0:	4b40      	ldr	r3, [pc, #256]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d0f0      	beq.n	8002dae <HAL_RCC_OscConfig+0x432>
 8002dcc:	e018      	b.n	8002e00 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002dce:	4b3d      	ldr	r3, [pc, #244]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a3c      	ldr	r2, [pc, #240]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002dd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fce5 	bl	80017a8 <HAL_GetTick>
 8002dde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002de2:	f7fe fce1 	bl	80017a8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e191      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002df4:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0304 	and.w	r3, r3, #4
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	f000 8086 	beq.w	8002f1a <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e0e:	4b2e      	ldr	r3, [pc, #184]	; (8002ec8 <HAL_RCC_OscConfig+0x54c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a2d      	ldr	r2, [pc, #180]	; (8002ec8 <HAL_RCC_OscConfig+0x54c>)
 8002e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e1a:	f7fe fcc5 	bl	80017a8 <HAL_GetTick>
 8002e1e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e22:	f7fe fcc1 	bl	80017a8 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b64      	cmp	r3, #100	; 0x64
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e171      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <HAL_RCC_OscConfig+0x54c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d106      	bne.n	8002e56 <HAL_RCC_OscConfig+0x4da>
 8002e48:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e4e:	f043 0301 	orr.w	r3, r3, #1
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
 8002e54:	e02d      	b.n	8002eb2 <HAL_RCC_OscConfig+0x536>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10c      	bne.n	8002e78 <HAL_RCC_OscConfig+0x4fc>
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	6713      	str	r3, [r2, #112]	; 0x70
 8002e6a:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	4a15      	ldr	r2, [pc, #84]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e70:	f023 0304 	bic.w	r3, r3, #4
 8002e74:	6713      	str	r3, [r2, #112]	; 0x70
 8002e76:	e01c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x536>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x51e>
 8002e80:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e84:	4a0f      	ldr	r2, [pc, #60]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e86:	f043 0304 	orr.w	r3, r3, #4
 8002e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e8c:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e90:	4a0c      	ldr	r2, [pc, #48]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e92:	f043 0301 	orr.w	r3, r3, #1
 8002e96:	6713      	str	r3, [r2, #112]	; 0x70
 8002e98:	e00b      	b.n	8002eb2 <HAL_RCC_OscConfig+0x536>
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9e:	4a09      	ldr	r2, [pc, #36]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002ea0:	f023 0301 	bic.w	r3, r3, #1
 8002ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ea6:	4b07      	ldr	r3, [pc, #28]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	4a06      	ldr	r2, [pc, #24]	; (8002ec4 <HAL_RCC_OscConfig+0x548>)
 8002eac:	f023 0304 	bic.w	r3, r3, #4
 8002eb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d01a      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eba:	f7fe fc75 	bl	80017a8 <HAL_GetTick>
 8002ebe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ec0:	e00f      	b.n	8002ee2 <HAL_RCC_OscConfig+0x566>
 8002ec2:	bf00      	nop
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fc6c 	bl	80017a8 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e11a      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee2:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d0ee      	beq.n	8002ecc <HAL_RCC_OscConfig+0x550>
 8002eee:	e014      	b.n	8002f1a <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef0:	f7fe fc5a 	bl	80017a8 <HAL_GetTick>
 8002ef4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ef6:	e00a      	b.n	8002f0e <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ef8:	f7fe fc56 	bl	80017a8 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e104      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002f0e:	4b84      	ldr	r3, [pc, #528]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d1ee      	bne.n	8002ef8 <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	f000 80f9 	beq.w	8003116 <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002f24:	4b7e      	ldr	r3, [pc, #504]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f2c:	2b18      	cmp	r3, #24
 8002f2e:	f000 80b4 	beq.w	800309a <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	f040 8095 	bne.w	8003066 <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f3c:	4b78      	ldr	r3, [pc, #480]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a77      	ldr	r2, [pc, #476]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc2e 	bl	80017a8 <HAL_GetTick>
 8002f4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fc2a 	bl	80017a8 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e0da      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002f62:	4b6f      	ldr	r3, [pc, #444]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f72:	4b6c      	ldr	r3, [pc, #432]	; (8003124 <HAL_RCC_OscConfig+0x7a8>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002f7e:	0112      	lsls	r2, r2, #4
 8002f80:	430a      	orrs	r2, r1
 8002f82:	4967      	ldr	r1, [pc, #412]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	628b      	str	r3, [r1, #40]	; 0x28
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f96:	3b01      	subs	r3, #1
 8002f98:	025b      	lsls	r3, r3, #9
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	061b      	lsls	r3, r3, #24
 8002fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002fb8:	4959      	ldr	r1, [pc, #356]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002fbe:	4b58      	ldr	r3, [pc, #352]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc2:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fc4:	f023 0301 	bic.w	r3, r3, #1
 8002fc8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002fca:	4b55      	ldr	r3, [pc, #340]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fcc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fce:	4b56      	ldr	r3, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x7ac>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fd6:	00d2      	lsls	r2, r2, #3
 8002fd8:	4951      	ldr	r1, [pc, #324]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002fde:	4b50      	ldr	r3, [pc, #320]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe2:	f023 020c 	bic.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	494d      	ldr	r1, [pc, #308]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ff0:	4b4b      	ldr	r3, [pc, #300]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff4:	f023 0202 	bic.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffc:	4948      	ldr	r1, [pc, #288]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003002:	4b47      	ldr	r3, [pc, #284]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	4a46      	ldr	r2, [pc, #280]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800300c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800300e:	4b44      	ldr	r3, [pc, #272]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003012:	4a43      	ldr	r2, [pc, #268]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003018:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800301a:	4b41      	ldr	r3, [pc, #260]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	4a40      	ldr	r2, [pc, #256]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003024:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003026:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800302a:	4a3d      	ldr	r2, [pc, #244]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003032:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003038:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800303c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800303e:	f7fe fbb3 	bl	80017a8 <HAL_GetTick>
 8003042:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003046:	f7fe fbaf 	bl	80017a8 <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e05f      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003058:	4b31      	ldr	r3, [pc, #196]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x6ca>
 8003064:	e057      	b.n	8003116 <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003066:	4b2e      	ldr	r3, [pc, #184]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2d      	ldr	r2, [pc, #180]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800306c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003072:	f7fe fb99 	bl	80017a8 <HAL_GetTick>
 8003076:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003078:	e008      	b.n	800308c <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800307a:	f7fe fb95 	bl	80017a8 <HAL_GetTick>
 800307e:	4602      	mov	r2, r0
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	2b02      	cmp	r3, #2
 8003086:	d901      	bls.n	800308c <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e045      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1f0      	bne.n	800307a <HAL_RCC_OscConfig+0x6fe>
 8003098:	e03d      	b.n	8003116 <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 800309c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800309e:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <HAL_RCC_OscConfig+0x7a4>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d031      	beq.n	8003112 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d12a      	bne.n	8003112 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	091b      	lsrs	r3, r3, #4
 80030c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d122      	bne.n	8003112 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80030d8:	429a      	cmp	r2, r3
 80030da:	d11a      	bne.n	8003112 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	0a5b      	lsrs	r3, r3, #9
 80030e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e8:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d111      	bne.n	8003112 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	0c1b      	lsrs	r3, r3, #16
 80030f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d108      	bne.n	8003112 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	0e1b      	lsrs	r3, r3, #24
 8003104:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800310e:	429a      	cmp	r2, r3
 8003110:	d001      	beq.n	8003116 <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 8003116:	2300      	movs	r3, #0
}
 8003118:	4618      	mov	r0, r3
 800311a:	3730      	adds	r7, #48	; 0x30
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400
 8003124:	fffffc0c 	.word	0xfffffc0c
 8003128:	ffff0007 	.word	0xffff0007

0800312c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e19c      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003140:	4b8a      	ldr	r3, [pc, #552]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d910      	bls.n	8003170 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b87      	ldr	r3, [pc, #540]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	4985      	ldr	r1, [pc, #532]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	4313      	orrs	r3, r2
 800315c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800315e:	4b83      	ldr	r3, [pc, #524]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d001      	beq.n	8003170 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e184      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691a      	ldr	r2, [r3, #16]
 8003180:	4b7b      	ldr	r3, [pc, #492]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003188:	429a      	cmp	r2, r3
 800318a:	d908      	bls.n	800319e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800318c:	4b78      	ldr	r3, [pc, #480]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	4975      	ldr	r1, [pc, #468]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800319a:	4313      	orrs	r3, r2
 800319c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0308 	and.w	r3, r3, #8
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d010      	beq.n	80031cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695a      	ldr	r2, [r3, #20]
 80031ae:	4b70      	ldr	r3, [pc, #448]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d908      	bls.n	80031cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031ba:	4b6d      	ldr	r3, [pc, #436]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031bc:	69db      	ldr	r3, [r3, #28]
 80031be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	496a      	ldr	r1, [pc, #424]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f003 0310 	and.w	r3, r3, #16
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d010      	beq.n	80031fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b64      	ldr	r3, [pc, #400]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d908      	bls.n	80031fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80031e8:	4b61      	ldr	r3, [pc, #388]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031ea:	69db      	ldr	r3, [r3, #28]
 80031ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	495e      	ldr	r1, [pc, #376]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d010      	beq.n	8003228 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69da      	ldr	r2, [r3, #28]
 800320a:	4b59      	ldr	r3, [pc, #356]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003212:	429a      	cmp	r2, r3
 8003214:	d908      	bls.n	8003228 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003216:	4b56      	ldr	r3, [pc, #344]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4953      	ldr	r1, [pc, #332]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003224:	4313      	orrs	r3, r2
 8003226:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d010      	beq.n	8003256 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b4d      	ldr	r3, [pc, #308]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	429a      	cmp	r2, r3
 8003242:	d908      	bls.n	8003256 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003244:	4b4a      	ldr	r3, [pc, #296]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003246:	699b      	ldr	r3, [r3, #24]
 8003248:	f023 020f 	bic.w	r2, r3, #15
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	4947      	ldr	r1, [pc, #284]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003252:	4313      	orrs	r3, r2
 8003254:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0301 	and.w	r3, r3, #1
 800325e:	2b00      	cmp	r3, #0
 8003260:	d055      	beq.n	800330e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003262:	4b43      	ldr	r3, [pc, #268]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4940      	ldr	r1, [pc, #256]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003270:	4313      	orrs	r3, r2
 8003272:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	2b02      	cmp	r3, #2
 800327a:	d107      	bne.n	800328c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327c:	4b3c      	ldr	r3, [pc, #240]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d121      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0f6      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b03      	cmp	r3, #3
 8003292:	d107      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003294:	4b36      	ldr	r3, [pc, #216]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d115      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0ea      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d107      	bne.n	80032bc <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032ac:	4b30      	ldr	r3, [pc, #192]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d109      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e0de      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80032bc:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d101      	bne.n	80032cc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e0d6      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032cc:	4b28      	ldr	r3, [pc, #160]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	4925      	ldr	r1, [pc, #148]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032de:	f7fe fa63 	bl	80017a8 <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e4:	e00a      	b.n	80032fc <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032e6:	f7fe fa5f 	bl	80017a8 <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e0be      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	4b1c      	ldr	r3, [pc, #112]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	429a      	cmp	r2, r3
 800330c:	d1eb      	bne.n	80032e6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d010      	beq.n	800333c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68da      	ldr	r2, [r3, #12]
 800331e:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	429a      	cmp	r2, r3
 8003328:	d208      	bcs.n	800333c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	f023 020f 	bic.w	r2, r3, #15
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	490e      	ldr	r1, [pc, #56]	; (8003370 <HAL_RCC_ClockConfig+0x244>)
 8003338:	4313      	orrs	r3, r2
 800333a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d214      	bcs.n	8003374 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b08      	ldr	r3, [pc, #32]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 020f 	bic.w	r2, r3, #15
 8003352:	4906      	ldr	r1, [pc, #24]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800335a:	4b04      	ldr	r3, [pc, #16]	; (800336c <HAL_RCC_ClockConfig+0x240>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	683a      	ldr	r2, [r7, #0]
 8003364:	429a      	cmp	r2, r3
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e086      	b.n	800347a <HAL_RCC_ClockConfig+0x34e>
 800336c:	52002000 	.word	0x52002000
 8003370:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	2b00      	cmp	r3, #0
 800337e:	d010      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	691a      	ldr	r2, [r3, #16]
 8003384:	4b3f      	ldr	r3, [pc, #252]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800338c:	429a      	cmp	r2, r3
 800338e:	d208      	bcs.n	80033a2 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003390:	4b3c      	ldr	r3, [pc, #240]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003392:	699b      	ldr	r3, [r3, #24]
 8003394:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	4939      	ldr	r1, [pc, #228]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d010      	beq.n	80033d0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	4b34      	ldr	r3, [pc, #208]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d208      	bcs.n	80033d0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80033be:	4b31      	ldr	r3, [pc, #196]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	492e      	ldr	r1, [pc, #184]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d010      	beq.n	80033fe <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d208      	bcs.n	80033fe <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033ee:	69db      	ldr	r3, [r3, #28]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	4922      	ldr	r1, [pc, #136]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0320 	and.w	r3, r3, #32
 8003406:	2b00      	cmp	r3, #0
 8003408:	d010      	beq.n	800342c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	4b1d      	ldr	r3, [pc, #116]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003416:	429a      	cmp	r2, r3
 8003418:	d208      	bcs.n	800342c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800341a:	4b1a      	ldr	r3, [pc, #104]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	4917      	ldr	r1, [pc, #92]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003428:	4313      	orrs	r3, r2
 800342a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800342c:	f000 f834 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003430:	4601      	mov	r1, r0
 8003432:	4b14      	ldr	r3, [pc, #80]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	4a12      	ldr	r2, [pc, #72]	; (8003488 <HAL_RCC_ClockConfig+0x35c>)
 800343e:	5cd3      	ldrb	r3, [r2, r3]
 8003440:	f003 031f 	and.w	r3, r3, #31
 8003444:	fa21 f303 	lsr.w	r3, r1, r3
 8003448:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344a:	4b0e      	ldr	r3, [pc, #56]	; (8003484 <HAL_RCC_ClockConfig+0x358>)
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	f003 030f 	and.w	r3, r3, #15
 8003452:	4a0d      	ldr	r2, [pc, #52]	; (8003488 <HAL_RCC_ClockConfig+0x35c>)
 8003454:	5cd3      	ldrb	r3, [r2, r3]
 8003456:	f003 031f 	and.w	r3, r3, #31
 800345a:	693a      	ldr	r2, [r7, #16]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x360>)
 8003462:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003464:	4a0a      	ldr	r2, [pc, #40]	; (8003490 <HAL_RCC_ClockConfig+0x364>)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_RCC_ClockConfig+0x368>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7fe f950 	bl	8001714 <HAL_InitTick>
 8003474:	4603      	mov	r3, r0
 8003476:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003478:	7bfb      	ldrb	r3, [r7, #15]
}
 800347a:	4618      	mov	r0, r3
 800347c:	3718      	adds	r7, #24
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	58024400 	.word	0x58024400
 8003488:	080087f8 	.word	0x080087f8
 800348c:	24000004 	.word	0x24000004
 8003490:	24000000 	.word	0x24000000
 8003494:	24000008 	.word	0x24000008

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800349e:	4baf      	ldr	r3, [pc, #700]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80034a0:	691b      	ldr	r3, [r3, #16]
 80034a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034a6:	2b18      	cmp	r3, #24
 80034a8:	f200 814e 	bhi.w	8003748 <HAL_RCC_GetSysClockFreq+0x2b0>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003749 	.word	0x08003749
 80034bc:	08003749 	.word	0x08003749
 80034c0:	08003749 	.word	0x08003749
 80034c4:	08003749 	.word	0x08003749
 80034c8:	08003749 	.word	0x08003749
 80034cc:	08003749 	.word	0x08003749
 80034d0:	08003749 	.word	0x08003749
 80034d4:	0800353f 	.word	0x0800353f
 80034d8:	08003749 	.word	0x08003749
 80034dc:	08003749 	.word	0x08003749
 80034e0:	08003749 	.word	0x08003749
 80034e4:	08003749 	.word	0x08003749
 80034e8:	08003749 	.word	0x08003749
 80034ec:	08003749 	.word	0x08003749
 80034f0:	08003749 	.word	0x08003749
 80034f4:	08003545 	.word	0x08003545
 80034f8:	08003749 	.word	0x08003749
 80034fc:	08003749 	.word	0x08003749
 8003500:	08003749 	.word	0x08003749
 8003504:	08003749 	.word	0x08003749
 8003508:	08003749 	.word	0x08003749
 800350c:	08003749 	.word	0x08003749
 8003510:	08003749 	.word	0x08003749
 8003514:	0800354b 	.word	0x0800354b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003518:	4b90      	ldr	r3, [pc, #576]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003524:	4b8d      	ldr	r3, [pc, #564]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	08db      	lsrs	r3, r3, #3
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	4a8c      	ldr	r2, [pc, #560]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003530:	fa22 f303 	lsr.w	r3, r2, r3
 8003534:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003536:	e10a      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003538:	4b89      	ldr	r3, [pc, #548]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800353a:	61bb      	str	r3, [r7, #24]
    break;
 800353c:	e107      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800353e:	4b89      	ldr	r3, [pc, #548]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003540:	61bb      	str	r3, [r7, #24]
    break;
 8003542:	e104      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003544:	4b88      	ldr	r3, [pc, #544]	; (8003768 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003546:	61bb      	str	r3, [r7, #24]
    break;
 8003548:	e101      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800354a:	4b84      	ldr	r3, [pc, #528]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800354c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003554:	4b81      	ldr	r3, [pc, #516]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	091b      	lsrs	r3, r3, #4
 800355a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800355e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003560:	4b7e      	ldr	r3, [pc, #504]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800356a:	4b7c      	ldr	r3, [pc, #496]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800356c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800356e:	08db      	lsrs	r3, r3, #3
 8003570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	ee07 3a90 	vmov	s15, r3
 800357e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003582:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 80da 	beq.w	8003742 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d05a      	beq.n	800364a <HAL_RCC_GetSysClockFreq+0x1b2>
 8003594:	2b01      	cmp	r3, #1
 8003596:	d302      	bcc.n	800359e <HAL_RCC_GetSysClockFreq+0x106>
 8003598:	2b02      	cmp	r3, #2
 800359a:	d078      	beq.n	800368e <HAL_RCC_GetSysClockFreq+0x1f6>
 800359c:	e099      	b.n	80036d2 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800359e:	4b6f      	ldr	r3, [pc, #444]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d02d      	beq.n	8003606 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80035aa:	4b6c      	ldr	r3, [pc, #432]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	08db      	lsrs	r3, r3, #3
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	4a6a      	ldr	r2, [pc, #424]	; (8003760 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80035b6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ba:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	ee07 3a90 	vmov	s15, r3
 80035c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	ee07 3a90 	vmov	s15, r3
 80035cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80035d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80035d4:	4b61      	ldr	r3, [pc, #388]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	ee07 3a90 	vmov	s15, r3
 80035e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80035e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80035e8:	eddf 5a60 	vldr	s11, [pc, #384]	; 800376c <HAL_RCC_GetSysClockFreq+0x2d4>
 80035ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80035f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80035f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80035f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80035fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003600:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003604:	e087      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	ee07 3a90 	vmov	s15, r3
 800360c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003610:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003770 <HAL_RCC_GetSysClockFreq+0x2d8>
 8003614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800361a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003620:	ee07 3a90 	vmov	s15, r3
 8003624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003628:	ed97 6a02 	vldr	s12, [r7, #8]
 800362c:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800376c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003630:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003634:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003638:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800363c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003640:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003644:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003648:	e065      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	ee07 3a90 	vmov	s15, r3
 8003650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003654:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003774 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003658:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800365c:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003664:	ee07 3a90 	vmov	s15, r3
 8003668:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800366c:	ed97 6a02 	vldr	s12, [r7, #8]
 8003670:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800376c <HAL_RCC_GetSysClockFreq+0x2d4>
 8003674:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003678:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800367c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003680:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003684:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003688:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800368c:	e043      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	ee07 3a90 	vmov	s15, r3
 8003694:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003698:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003778 <HAL_RCC_GetSysClockFreq+0x2e0>
 800369c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036a0:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	ee07 3a90 	vmov	s15, r3
 80036ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036b0:	ed97 6a02 	vldr	s12, [r7, #8]
 80036b4:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800376c <HAL_RCC_GetSysClockFreq+0x2d4>
 80036b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036c0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80036c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80036d0:	e021      	b.n	8003716 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	ee07 3a90 	vmov	s15, r3
 80036d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036dc:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003774 <HAL_RCC_GetSysClockFreq+0x2dc>
 80036e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036e4:	4b1d      	ldr	r3, [pc, #116]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80036f8:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800376c <HAL_RCC_GetSysClockFreq+0x2d4>
 80036fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003700:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003704:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003708:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800370c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003710:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003714:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003716:	4b11      	ldr	r3, [pc, #68]	; (800375c <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	0a5b      	lsrs	r3, r3, #9
 800371c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003720:	3301      	adds	r3, #1
 8003722:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800372e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800373a:	ee17 3a90 	vmov	r3, s15
 800373e:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003740:	e005      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	61bb      	str	r3, [r7, #24]
    break;
 8003746:	e002      	b.n	800374e <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800374a:	61bb      	str	r3, [r7, #24]
    break;
 800374c:	bf00      	nop
  }

  return sysclockfreq;
 800374e:	69bb      	ldr	r3, [r7, #24]
}
 8003750:	4618      	mov	r0, r3
 8003752:	3724      	adds	r7, #36	; 0x24
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	58024400 	.word	0x58024400
 8003760:	03d09000 	.word	0x03d09000
 8003764:	003d0900 	.word	0x003d0900
 8003768:	007a1200 	.word	0x007a1200
 800376c:	46000000 	.word	0x46000000
 8003770:	4c742400 	.word	0x4c742400
 8003774:	4a742400 	.word	0x4a742400
 8003778:	4af42400 	.word	0x4af42400

0800377c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003782:	f7ff fe89 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003786:	4601      	mov	r1, r0
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <HAL_RCC_GetHCLKFreq+0x50>)
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	0a1b      	lsrs	r3, r3, #8
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003794:	5cd3      	ldrb	r3, [r2, r3]
 8003796:	f003 031f 	and.w	r3, r3, #31
 800379a:	fa21 f303 	lsr.w	r3, r1, r3
 800379e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80037a0:	4b0a      	ldr	r3, [pc, #40]	; (80037cc <HAL_RCC_GetHCLKFreq+0x50>)
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f003 030f 	and.w	r3, r3, #15
 80037a8:	4a09      	ldr	r2, [pc, #36]	; (80037d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80037aa:	5cd3      	ldrb	r3, [r2, r3]
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a07      	ldr	r2, [pc, #28]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80037b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80037ba:	4a07      	ldr	r2, [pc, #28]	; (80037d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80037c2:	681b      	ldr	r3, [r3, #0]
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	58024400 	.word	0x58024400
 80037d0:	080087f8 	.word	0x080087f8
 80037d4:	24000004 	.word	0x24000004
 80037d8:	24000000 	.word	0x24000000

080037dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80037e0:	f7ff ffcc 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80037e4:	4601      	mov	r1, r0
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	091b      	lsrs	r3, r3, #4
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <HAL_RCC_GetPCLK1Freq+0x28>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	f003 031f 	and.w	r3, r3, #31
 80037f8:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	58024400 	.word	0x58024400
 8003804:	080087f8 	.word	0x080087f8

08003808 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800380c:	f7ff ffb6 	bl	800377c <HAL_RCC_GetHCLKFreq>
 8003810:	4601      	mov	r1, r0
 8003812:	4b06      	ldr	r3, [pc, #24]	; (800382c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	0a1b      	lsrs	r3, r3, #8
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	4a04      	ldr	r2, [pc, #16]	; (8003830 <HAL_RCC_GetPCLK2Freq+0x28>)
 800381e:	5cd3      	ldrb	r3, [r2, r3]
 8003820:	f003 031f 	and.w	r3, r3, #31
 8003824:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003828:	4618      	mov	r0, r3
 800382a:	bd80      	pop	{r7, pc}
 800382c:	58024400 	.word	0x58024400
 8003830:	080087f8 	.word	0x080087f8

08003834 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800383c:	2300      	movs	r3, #0
 800383e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003840:	2300      	movs	r3, #0
 8003842:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d03d      	beq.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003858:	d013      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800385a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800385e:	d802      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d007      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003864:	e01f      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003866:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800386a:	d013      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800386c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003870:	d01c      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003872:	e018      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003874:	4baf      	ldr	r3, [pc, #700]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003878:	4aae      	ldr	r2, [pc, #696]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800387a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800387e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003880:	e015      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	3304      	adds	r3, #4
 8003886:	2102      	movs	r1, #2
 8003888:	4618      	mov	r0, r3
 800388a:	f001 f95f 	bl	8004b4c <RCCEx_PLL2_Config>
 800388e:	4603      	mov	r3, r0
 8003890:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003892:	e00c      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	3324      	adds	r3, #36	; 0x24
 8003898:	2102      	movs	r1, #2
 800389a:	4618      	mov	r0, r3
 800389c:	f001 fa08 	bl	8004cb0 <RCCEx_PLL3_Config>
 80038a0:	4603      	mov	r3, r0
 80038a2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80038a4:	e003      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	75fb      	strb	r3, [r7, #23]
      break;
 80038aa:	e000      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80038ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80038b4:	4b9f      	ldr	r3, [pc, #636]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038c0:	499c      	ldr	r1, [pc, #624]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	650b      	str	r3, [r1, #80]	; 0x50
 80038c6:	e001      	b.n	80038cc <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038c8:	7dfb      	ldrb	r3, [r7, #23]
 80038ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03d      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d826      	bhi.n	800392e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038fd 	.word	0x080038fd
 80038ec:	0800390b 	.word	0x0800390b
 80038f0:	0800391d 	.word	0x0800391d
 80038f4:	08003935 	.word	0x08003935
 80038f8:	08003935 	.word	0x08003935
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038fc:	4b8d      	ldr	r3, [pc, #564]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	4a8c      	ldr	r2, [pc, #560]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003902:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003906:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003908:	e015      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	3304      	adds	r3, #4
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f91b 	bl	8004b4c <RCCEx_PLL2_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800391a:	e00c      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3324      	adds	r3, #36	; 0x24
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f001 f9c4 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800392c:	e003      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	75fb      	strb	r3, [r7, #23]
      break;
 8003932:	e000      	b.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003934:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003936:	7dfb      	ldrb	r3, [r7, #23]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800393c:	4b7d      	ldr	r3, [pc, #500]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800393e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003940:	f023 0207 	bic.w	r2, r3, #7
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003948:	497a      	ldr	r1, [pc, #488]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800394a:	4313      	orrs	r3, r2
 800394c:	650b      	str	r3, [r1, #80]	; 0x50
 800394e:	e001      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003950:	7dfb      	ldrb	r3, [r7, #23]
 8003952:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800395c:	2b00      	cmp	r3, #0
 800395e:	d03e      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003964:	2b80      	cmp	r3, #128	; 0x80
 8003966:	d01c      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003968:	2b80      	cmp	r3, #128	; 0x80
 800396a:	d804      	bhi.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d008      	beq.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003970:	2b40      	cmp	r3, #64	; 0x40
 8003972:	d00d      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003974:	e01e      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003976:	2bc0      	cmp	r3, #192	; 0xc0
 8003978:	d01f      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x186>
 800397a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397e:	d01e      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003980:	e018      	b.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003982:	4b6c      	ldr	r3, [pc, #432]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003986:	4a6b      	ldr	r2, [pc, #428]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800398c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800398e:	e017      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	3304      	adds	r3, #4
 8003994:	2100      	movs	r1, #0
 8003996:	4618      	mov	r0, r3
 8003998:	f001 f8d8 	bl	8004b4c <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039a0:	e00e      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3324      	adds	r3, #36	; 0x24
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f001 f981 	bl	8004cb0 <RCCEx_PLL3_Config>
 80039ae:	4603      	mov	r3, r0
 80039b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80039b2:	e005      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
      break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 80039be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039c0:	7dfb      	ldrb	r3, [r7, #23]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d109      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80039c6:	4b5b      	ldr	r3, [pc, #364]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4958      	ldr	r1, [pc, #352]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	650b      	str	r3, [r1, #80]	; 0x50
 80039d8:	e001      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039da:	7dfb      	ldrb	r3, [r7, #23]
 80039dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d044      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80039f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039f4:	d01f      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80039f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039fa:	d805      	bhi.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003a00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a04:	d00e      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003a06:	e01f      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003a08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003a0c:	d01f      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003a12:	d01e      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003a14:	e018      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a16:	4b47      	ldr	r3, [pc, #284]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	4a46      	ldr	r2, [pc, #280]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a22:	e017      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3304      	adds	r3, #4
 8003a28:	2100      	movs	r1, #0
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f001 f88e 	bl	8004b4c <RCCEx_PLL2_Config>
 8003a30:	4603      	mov	r3, r0
 8003a32:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003a34:	e00e      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	3324      	adds	r3, #36	; 0x24
 8003a3a:	2100      	movs	r1, #0
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f001 f937 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003a42:	4603      	mov	r3, r0
 8003a44:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003a46:	e005      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4c:	e002      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a4e:	bf00      	nop
 8003a50:	e000      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a54:	7dfb      	ldrb	r3, [r7, #23]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d10a      	bne.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003a5a:	4b36      	ldr	r3, [pc, #216]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003a68:	4932      	ldr	r1, [pc, #200]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a6e:	e001      	b.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a70:	7dfb      	ldrb	r3, [r7, #23]
 8003a72:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d044      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003a86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a8a:	d01f      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a90:	d805      	bhi.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003a96:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a9a:	d00e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003a9c:	e01f      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003a9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003aa2:	d01f      	beq.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003aa4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003aa8:	d01e      	beq.n	8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003aaa:	e018      	b.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ab8:	e017      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f001 f843 	bl	8004b4c <RCCEx_PLL2_Config>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003aca:	e00e      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3324      	adds	r3, #36	; 0x24
 8003ad0:	2100      	movs	r1, #0
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f001 f8ec 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003adc:	e005      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	75fb      	strb	r3, [r7, #23]
      break;
 8003ae2:	e002      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ae4:	bf00      	nop
 8003ae6:	e000      	b.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8003ae8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003aea:	7dfb      	ldrb	r3, [r7, #23]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003af0:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003afe:	490d      	ldr	r1, [pc, #52]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	658b      	str	r3, [r1, #88]	; 0x58
 8003b04:	e001      	b.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b06:	7dfb      	ldrb	r3, [r7, #23]
 8003b08:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d035      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b1a:	2b10      	cmp	r3, #16
 8003b1c:	d00c      	beq.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d802      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d01b      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8003b26:	e017      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d00c      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	d018      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003b30:	e012      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8003b32:	bf00      	nop
 8003b34:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b38:	4baf      	ldr	r3, [pc, #700]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b3c:	4aae      	ldr	r2, [pc, #696]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b44:	e00e      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	3304      	adds	r3, #4
 8003b4a:	2102      	movs	r1, #2
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f000 fffd 	bl	8004b4c <RCCEx_PLL2_Config>
 8003b52:	4603      	mov	r3, r0
 8003b54:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003b56:	e005      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b5c:	e002      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b5e:	bf00      	nop
 8003b60:	e000      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8003b62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b64:	7dfb      	ldrb	r3, [r7, #23]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d109      	bne.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003b6a:	4ba3      	ldr	r3, [pc, #652]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b76:	49a0      	ldr	r1, [pc, #640]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003b7c:	e001      	b.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
 8003b80:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d042      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b96:	d01f      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8003b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b9c:	d805      	bhi.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00a      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8003ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8003ba8:	e01f      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8003baa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003bae:	d01f      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8003bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bb4:	d01e      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8003bb6:	e018      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bb8:	4b8f      	ldr	r3, [pc, #572]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	4a8e      	ldr	r2, [pc, #568]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bc4:	e017      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3304      	adds	r3, #4
 8003bca:	2100      	movs	r1, #0
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f000 ffbd 	bl	8004b4c <RCCEx_PLL2_Config>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003bd6:	e00e      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	3324      	adds	r3, #36	; 0x24
 8003bdc:	2100      	movs	r1, #0
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f866 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003be4:	4603      	mov	r3, r0
 8003be6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003be8:	e005      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	75fb      	strb	r3, [r7, #23]
      break;
 8003bee:	e002      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003bf0:	bf00      	nop
 8003bf2:	e000      	b.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8003bf4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bf6:	7dfb      	ldrb	r3, [r7, #23]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d109      	bne.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003bfc:	4b7e      	ldr	r3, [pc, #504]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c00:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c08:	497b      	ldr	r1, [pc, #492]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	650b      	str	r3, [r1, #80]	; 0x50
 8003c0e:	e001      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d042      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c28:	d01b      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003c2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c2e:	d805      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x408>
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d022      	beq.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003c3a:	e01b      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003c3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003c40:	d01d      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8003c42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c46:	d01c      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8003c48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c4c:	d01b      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003c4e:	e011      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	3304      	adds	r3, #4
 8003c54:	2101      	movs	r1, #1
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 ff78 	bl	8004b4c <RCCEx_PLL2_Config>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c60:	e012      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3324      	adds	r3, #36	; 0x24
 8003c66:	2101      	movs	r1, #1
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f001 f821 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003c72:	e009      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	75fb      	strb	r3, [r7, #23]
      break;
 8003c78:	e006      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c7a:	bf00      	nop
 8003c7c:	e004      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c7e:	bf00      	nop
 8003c80:	e002      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c82:	bf00      	nop
 8003c84:	e000      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8003c86:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c88:	7dfb      	ldrb	r3, [r7, #23]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d109      	bne.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c8e:	4b5a      	ldr	r3, [pc, #360]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9a:	4957      	ldr	r1, [pc, #348]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	650b      	str	r3, [r1, #80]	; 0x50
 8003ca0:	e001      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca2:	7dfb      	ldrb	r3, [r7, #23]
 8003ca4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003cb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cbc:	d01b      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8003cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cc2:	d805      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d022      	beq.n	8003d0e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003cc8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ccc:	d00a      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003cce:	e01b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d01d      	beq.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003cd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cda:	d01c      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8003cdc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ce0:	d01b      	beq.n	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8003ce2:	e011      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	3304      	adds	r3, #4
 8003ce8:	2101      	movs	r1, #1
 8003cea:	4618      	mov	r0, r3
 8003cec:	f000 ff2e 	bl	8004b4c <RCCEx_PLL2_Config>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003cf4:	e012      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	3324      	adds	r3, #36	; 0x24
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ffd7 	bl	8004cb0 <RCCEx_PLL3_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003d06:	e009      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d0e:	bf00      	nop
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d12:	bf00      	nop
 8003d14:	e002      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d16:	bf00      	nop
 8003d18:	e000      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8003d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d1c:	7dfb      	ldrb	r3, [r7, #23]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10a      	bne.n	8003d38 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003d22:	4b35      	ldr	r3, [pc, #212]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d26:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d30:	4931      	ldr	r1, [pc, #196]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	658b      	str	r3, [r1, #88]	; 0x58
 8003d36:	e001      	b.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
 8003d3a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d02d      	beq.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d50:	d005      	beq.n	8003d5e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d56:	d009      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003d5c:	e00f      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d5e:	4b26      	ldr	r3, [pc, #152]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d62:	4a25      	ldr	r2, [pc, #148]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d68:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d6a:	e00c      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 feea 	bl	8004b4c <RCCEx_PLL2_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003d7c:	e003      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
      break;
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8003d84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d86:	7dfb      	ldrb	r3, [r7, #23]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d109      	bne.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d8c:	4b1a      	ldr	r3, [pc, #104]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d98:	4917      	ldr	r1, [pc, #92]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	650b      	str	r3, [r1, #80]	; 0x50
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d035      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db4:	2b03      	cmp	r3, #3
 8003db6:	d81b      	bhi.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8003db8:	a201      	add	r2, pc, #4	; (adr r2, 8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8003dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbe:	bf00      	nop
 8003dc0:	08003dfd 	.word	0x08003dfd
 8003dc4:	08003dd1 	.word	0x08003dd1
 8003dc8:	08003ddf 	.word	0x08003ddf
 8003dcc:	08003dfd 	.word	0x08003dfd
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dd0:	4b09      	ldr	r3, [pc, #36]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8003dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003ddc:	e00f      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	3304      	adds	r3, #4
 8003de2:	2102      	movs	r1, #2
 8003de4:	4618      	mov	r0, r3
 8003de6:	f000 feb1 	bl	8004b4c <RCCEx_PLL2_Config>
 8003dea:	4603      	mov	r3, r0
 8003dec:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003dee:	e006      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	75fb      	strb	r3, [r7, #23]
      break;
 8003df4:	e003      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8003df6:	bf00      	nop
 8003df8:	58024400 	.word	0x58024400
      break;
 8003dfc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dfe:	7dfb      	ldrb	r3, [r7, #23]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d109      	bne.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e04:	4bba      	ldr	r3, [pc, #744]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e08:	f023 0203 	bic.w	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e10:	49b7      	ldr	r1, [pc, #732]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e12:	4313      	orrs	r3, r2
 8003e14:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e16:	e001      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e18:	7dfb      	ldrb	r3, [r7, #23]
 8003e1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8086 	beq.w	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2a:	4bb2      	ldr	r3, [pc, #712]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4ab1      	ldr	r2, [pc, #708]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e36:	f7fd fcb7 	bl	80017a8 <HAL_GetTick>
 8003e3a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e3c:	e009      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e3e:	f7fd fcb3 	bl	80017a8 <HAL_GetTick>
 8003e42:	4602      	mov	r2, r0
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1ad3      	subs	r3, r2, r3
 8003e48:	2b64      	cmp	r3, #100	; 0x64
 8003e4a:	d902      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	75fb      	strb	r3, [r7, #23]
        break;
 8003e50:	e005      	b.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e52:	4ba8      	ldr	r3, [pc, #672]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ef      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8003e5e:	7dfb      	ldrb	r3, [r7, #23]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d166      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e64:	4ba2      	ldr	r3, [pc, #648]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e66:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003e6e:	4053      	eors	r3, r2
 8003e70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e78:	4b9d      	ldr	r3, [pc, #628]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e80:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e82:	4b9b      	ldr	r3, [pc, #620]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a9a      	ldr	r2, [pc, #616]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e8e:	4b98      	ldr	r3, [pc, #608]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a97      	ldr	r2, [pc, #604]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e9a:	4a95      	ldr	r2, [pc, #596]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ea6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eaa:	d115      	bne.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fd fc7c 	bl	80017a8 <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eb2:	e00b      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eb4:	f7fd fc78 	bl	80017a8 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d902      	bls.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	75fb      	strb	r3, [r7, #23]
            break;
 8003eca:	e005      	b.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ecc:	4b88      	ldr	r3, [pc, #544]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0ed      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8003ed8:	7dfb      	ldrb	r3, [r7, #23]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d126      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eec:	d10d      	bne.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8003eee:	4b80      	ldr	r3, [pc, #512]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003efc:	0919      	lsrs	r1, r3, #4
 8003efe:	4b7e      	ldr	r3, [pc, #504]	; (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8003f00:	400b      	ands	r3, r1
 8003f02:	497b      	ldr	r1, [pc, #492]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	610b      	str	r3, [r1, #16]
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8003f0a:	4b79      	ldr	r3, [pc, #484]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4a78      	ldr	r2, [pc, #480]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f14:	6113      	str	r3, [r2, #16]
 8003f16:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f24:	4972      	ldr	r1, [pc, #456]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	670b      	str	r3, [r1, #112]	; 0x70
 8003f2a:	e004      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	75bb      	strb	r3, [r7, #22]
 8003f30:	e001      	b.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
 8003f34:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d07d      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f46:	2b28      	cmp	r3, #40	; 0x28
 8003f48:	d866      	bhi.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8003f4a:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8003f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f50:	0800401f 	.word	0x0800401f
 8003f54:	08004019 	.word	0x08004019
 8003f58:	08004019 	.word	0x08004019
 8003f5c:	08004019 	.word	0x08004019
 8003f60:	08004019 	.word	0x08004019
 8003f64:	08004019 	.word	0x08004019
 8003f68:	08004019 	.word	0x08004019
 8003f6c:	08004019 	.word	0x08004019
 8003f70:	08003ff5 	.word	0x08003ff5
 8003f74:	08004019 	.word	0x08004019
 8003f78:	08004019 	.word	0x08004019
 8003f7c:	08004019 	.word	0x08004019
 8003f80:	08004019 	.word	0x08004019
 8003f84:	08004019 	.word	0x08004019
 8003f88:	08004019 	.word	0x08004019
 8003f8c:	08004019 	.word	0x08004019
 8003f90:	08004007 	.word	0x08004007
 8003f94:	08004019 	.word	0x08004019
 8003f98:	08004019 	.word	0x08004019
 8003f9c:	08004019 	.word	0x08004019
 8003fa0:	08004019 	.word	0x08004019
 8003fa4:	08004019 	.word	0x08004019
 8003fa8:	08004019 	.word	0x08004019
 8003fac:	08004019 	.word	0x08004019
 8003fb0:	0800401f 	.word	0x0800401f
 8003fb4:	08004019 	.word	0x08004019
 8003fb8:	08004019 	.word	0x08004019
 8003fbc:	08004019 	.word	0x08004019
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08004019 	.word	0x08004019
 8003fcc:	08004019 	.word	0x08004019
 8003fd0:	0800401f 	.word	0x0800401f
 8003fd4:	08004019 	.word	0x08004019
 8003fd8:	08004019 	.word	0x08004019
 8003fdc:	08004019 	.word	0x08004019
 8003fe0:	08004019 	.word	0x08004019
 8003fe4:	08004019 	.word	0x08004019
 8003fe8:	08004019 	.word	0x08004019
 8003fec:	08004019 	.word	0x08004019
 8003ff0:	0800401f 	.word	0x0800401f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	3304      	adds	r3, #4
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 fda6 	bl	8004b4c <RCCEx_PLL2_Config>
 8004000:	4603      	mov	r3, r0
 8004002:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004004:	e00c      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	3324      	adds	r3, #36	; 0x24
 800400a:	2101      	movs	r1, #1
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fe4f 	bl	8004cb0 <RCCEx_PLL3_Config>
 8004012:	4603      	mov	r3, r0
 8004014:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004016:	e003      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	75fb      	strb	r3, [r7, #23]
      break;
 800401c:	e000      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800401e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004020:	7dfb      	ldrb	r3, [r7, #23]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d109      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004026:	4b32      	ldr	r3, [pc, #200]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004032:	492f      	ldr	r1, [pc, #188]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004034:	4313      	orrs	r3, r2
 8004036:	654b      	str	r3, [r1, #84]	; 0x54
 8004038:	e001      	b.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800403a:	7dfb      	ldrb	r3, [r7, #23]
 800403c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d037      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800404e:	2b05      	cmp	r3, #5
 8004050:	d820      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8004052:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004058:	0800409b 	.word	0x0800409b
 800405c:	08004071 	.word	0x08004071
 8004060:	08004083 	.word	0x08004083
 8004064:	0800409b 	.word	0x0800409b
 8004068:	0800409b 	.word	0x0800409b
 800406c:	0800409b 	.word	0x0800409b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	2101      	movs	r1, #1
 8004076:	4618      	mov	r0, r3
 8004078:	f000 fd68 	bl	8004b4c <RCCEx_PLL2_Config>
 800407c:	4603      	mov	r3, r0
 800407e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004080:	e00c      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3324      	adds	r3, #36	; 0x24
 8004086:	2101      	movs	r1, #1
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fe11 	bl	8004cb0 <RCCEx_PLL3_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004092:	e003      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e000      	b.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800409a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80040a2:	4b13      	ldr	r3, [pc, #76]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ae:	4910      	ldr	r1, [pc, #64]	; (80040f0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	654b      	str	r3, [r1, #84]	; 0x54
 80040b4:	e001      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
 80040b8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0304 	and.w	r3, r3, #4
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d040      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	2b05      	cmp	r3, #5
 80040ce:	d827      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80040d0:	a201      	add	r2, pc, #4	; (adr r2, 80040d8 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80040d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040d6:	bf00      	nop
 80040d8:	08004127 	.word	0x08004127
 80040dc:	080040fd 	.word	0x080040fd
 80040e0:	0800410f 	.word	0x0800410f
 80040e4:	08004127 	.word	0x08004127
 80040e8:	08004127 	.word	0x08004127
 80040ec:	08004127 	.word	0x08004127
 80040f0:	58024400 	.word	0x58024400
 80040f4:	58024800 	.word	0x58024800
 80040f8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3304      	adds	r3, #4
 8004100:	2101      	movs	r1, #1
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fd22 	bl	8004b4c <RCCEx_PLL2_Config>
 8004108:	4603      	mov	r3, r0
 800410a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800410c:	e00c      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	3324      	adds	r3, #36	; 0x24
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 fdcb 	bl	8004cb0 <RCCEx_PLL3_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800411e:	e003      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	75fb      	strb	r3, [r7, #23]
      break;
 8004124:	e000      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004126:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004128:	7dfb      	ldrb	r3, [r7, #23]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800412e:	4bb2      	ldr	r3, [pc, #712]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004132:	f023 0207 	bic.w	r2, r3, #7
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413c:	49ae      	ldr	r1, [pc, #696]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800413e:	4313      	orrs	r3, r2
 8004140:	658b      	str	r3, [r1, #88]	; 0x58
 8004142:	e001      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004144:	7dfb      	ldrb	r3, [r7, #23]
 8004146:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d044      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800415a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800415e:	d01b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8004160:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004164:	d805      	bhi.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d022      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800416a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800416e:	d00a      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8004170:	e01b      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x976>
 8004172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004176:	d01d      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8004178:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800417c:	d01c      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800417e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004182:	d01b      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x988>
 8004184:	e011      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2100      	movs	r1, #0
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fcdd 	bl	8004b4c <RCCEx_PLL2_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004196:	e012      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	3324      	adds	r3, #36	; 0x24
 800419c:	2102      	movs	r1, #2
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fd86 	bl	8004cb0 <RCCEx_PLL3_Config>
 80041a4:	4603      	mov	r3, r0
 80041a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80041a8:	e009      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
      break;
 80041ae:	e006      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041b0:	bf00      	nop
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041b4:	bf00      	nop
 80041b6:	e002      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041b8:	bf00      	nop
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80041bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041be:	7dfb      	ldrb	r3, [r7, #23]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10a      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041c4:	4b8c      	ldr	r3, [pc, #560]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041c8:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041d2:	4989      	ldr	r1, [pc, #548]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	654b      	str	r3, [r1, #84]	; 0x54
 80041d8:	e001      	b.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d044      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80041f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041f4:	d01b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80041f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041fa:	d805      	bhi.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d022      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8004200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004204:	d00a      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004206:	e01b      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800420c:	d01d      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800420e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004212:	d01c      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004214:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004218:	d01b      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800421a:	e011      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	3304      	adds	r3, #4
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f000 fc92 	bl	8004b4c <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800422c:	e012      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3324      	adds	r3, #36	; 0x24
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fd3b 	bl	8004cb0 <RCCEx_PLL3_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800423e:	e009      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	75fb      	strb	r3, [r7, #23]
      break;
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004246:	bf00      	nop
 8004248:	e004      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800424a:	bf00      	nop
 800424c:	e002      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800424e:	bf00      	nop
 8004250:	e000      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004254:	7dfb      	ldrb	r3, [r7, #23]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10a      	bne.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800425a:	4b67      	ldr	r3, [pc, #412]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004268:	4963      	ldr	r1, [pc, #396]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800426a:	4313      	orrs	r3, r2
 800426c:	658b      	str	r3, [r1, #88]	; 0x58
 800426e:	e001      	b.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004270:	7dfb      	ldrb	r3, [r7, #23]
 8004272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427c:	2b00      	cmp	r3, #0
 800427e:	d044      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800428a:	d01b      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800428c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004290:	d805      	bhi.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8004292:	2b00      	cmp	r3, #0
 8004294:	d022      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8004296:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800429c:	e01b      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800429e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a2:	d01d      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80042a4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80042a8:	d01c      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80042aa:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80042ae:	d01b      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80042b0:	e011      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2100      	movs	r1, #0
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 fc47 	bl	8004b4c <RCCEx_PLL2_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042c2:	e012      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	3324      	adds	r3, #36	; 0x24
 80042c8:	2102      	movs	r1, #2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fcf0 	bl	8004cb0 <RCCEx_PLL3_Config>
 80042d0:	4603      	mov	r3, r0
 80042d2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80042d4:	e009      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	75fb      	strb	r3, [r7, #23]
      break;
 80042da:	e006      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042dc:	bf00      	nop
 80042de:	e004      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042e0:	bf00      	nop
 80042e2:	e002      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042e4:	bf00      	nop
 80042e6:	e000      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80042e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042ea:	7dfb      	ldrb	r3, [r7, #23]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10a      	bne.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042f0:	4b41      	ldr	r3, [pc, #260]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80042f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042fe:	493e      	ldr	r1, [pc, #248]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004300:	4313      	orrs	r3, r2
 8004302:	658b      	str	r3, [r1, #88]	; 0x58
 8004304:	e001      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	7dfb      	ldrb	r3, [r7, #23]
 8004308:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d01a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800431c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004320:	d10a      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	3324      	adds	r3, #36	; 0x24
 8004326:	2102      	movs	r1, #2
 8004328:	4618      	mov	r0, r3
 800432a:	f000 fcc1 	bl	8004cb0 <RCCEx_PLL3_Config>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004346:	492c      	ldr	r1, [pc, #176]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004348:	4313      	orrs	r3, r2
 800434a:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0310 	and.w	r3, r3, #16
 8004354:	2b00      	cmp	r3, #0
 8004356:	d01a      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800435e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004362:	d10a      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	3324      	adds	r3, #36	; 0x24
 8004368:	2102      	movs	r1, #2
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fca0 	bl	8004cb0 <RCCEx_PLL3_Config>
 8004370:	4603      	mov	r3, r0
 8004372:	2b00      	cmp	r3, #0
 8004374:	d001      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800437a:	4b1f      	ldr	r3, [pc, #124]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004388:	491b      	ldr	r1, [pc, #108]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800438a:	4313      	orrs	r3, r2
 800438c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d032      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043a4:	d00d      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80043a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80043aa:	d016      	beq.n	80043da <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d111      	bne.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	3304      	adds	r3, #4
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f000 fbc8 	bl	8004b4c <RCCEx_PLL2_Config>
 80043bc:	4603      	mov	r3, r0
 80043be:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043c0:	e00c      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3324      	adds	r3, #36	; 0x24
 80043c6:	2102      	movs	r1, #2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 fc71 	bl	8004cb0 <RCCEx_PLL3_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80043d2:	e003      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	75fb      	strb	r3, [r7, #23]
      break;
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80043da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043dc:	7dfb      	ldrb	r3, [r7, #23]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10c      	bne.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043f0:	4901      	ldr	r1, [pc, #4]	; (80043f8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	658b      	str	r3, [r1, #88]	; 0x58
 80043f6:	e003      	b.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80043f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fc:	7dfb      	ldrb	r3, [r7, #23]
 80043fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02f      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004412:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004416:	d00c      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004418:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800441c:	d015      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d10f      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4b71      	ldr	r3, [pc, #452]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	4a70      	ldr	r2, [pc, #448]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004430:	e00c      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	2101      	movs	r1, #1
 8004438:	4618      	mov	r0, r3
 800443a:	f000 fc39 	bl	8004cb0 <RCCEx_PLL3_Config>
 800443e:	4603      	mov	r3, r0
 8004440:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	75fb      	strb	r3, [r7, #23]
      break;
 8004448:	e000      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800444a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10a      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004452:	4b66      	ldr	r3, [pc, #408]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004460:	4962      	ldr	r1, [pc, #392]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	654b      	str	r3, [r1, #84]	; 0x54
 8004466:	e001      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004474:	2b00      	cmp	r3, #0
 8004476:	d029      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800447c:	2b00      	cmp	r3, #0
 800447e:	d003      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8004480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004484:	d007      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8004486:	e00f      	b.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4b58      	ldr	r3, [pc, #352]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	4a57      	ldr	r2, [pc, #348]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004494:	e00b      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3304      	adds	r3, #4
 800449a:	2102      	movs	r1, #2
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fb55 	bl	8004b4c <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80044a6:	e002      	b.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	75fb      	strb	r3, [r7, #23]
      break;
 80044ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d109      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044b4:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80044b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044c0:	494a      	ldr	r1, [pc, #296]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044c6:	e001      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d00a      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3324      	adds	r3, #36	; 0x24
 80044dc:	2102      	movs	r1, #2
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fbe6 	bl	8004cb0 <RCCEx_PLL3_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d02f      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004502:	d00c      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004504:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004508:	d802      	bhi.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800450a:	2b00      	cmp	r3, #0
 800450c:	d011      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800450e:	e00d      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004514:	d00f      	beq.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004516:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800451a:	d00e      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800451c:	e006      	b.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800451e:	4b33      	ldr	r3, [pc, #204]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	4a32      	ldr	r2, [pc, #200]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004524:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004528:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800452a:	e007      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	75fb      	strb	r3, [r7, #23]
      break;
 8004530:	e004      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004532:	bf00      	nop
 8004534:	e002      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004536:	bf00      	nop
 8004538:	e000      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800453a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004542:	4b2a      	ldr	r3, [pc, #168]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800454e:	4927      	ldr	r1, [pc, #156]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004550:	4313      	orrs	r3, r2
 8004552:	654b      	str	r3, [r1, #84]	; 0x54
 8004554:	e001      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004566:	4b21      	ldr	r3, [pc, #132]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800456a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004572:	491e      	ldr	r1, [pc, #120]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004574:	4313      	orrs	r3, r2
 8004576:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d008      	beq.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004588:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004590:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8004592:	4313      	orrs	r3, r2
 8004594:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80045a2:	4b12      	ldr	r3, [pc, #72]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	4a11      	ldr	r2, [pc, #68]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80045ac:	6113      	str	r3, [r2, #16]
 80045ae:	4b0f      	ldr	r3, [pc, #60]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045b8:	490c      	ldr	r1, [pc, #48]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	da08      	bge.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80045c6:	4b09      	ldr	r3, [pc, #36]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d2:	4906      	ldr	r1, [pc, #24]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80045d8:	7dbb      	ldrb	r3, [r7, #22]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	58024400 	.word	0x58024400

080045f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045f4:	f7ff f8c2 	bl	800377c <HAL_RCC_GetHCLKFreq>
 80045f8:	4601      	mov	r1, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	091b      	lsrs	r3, r3, #4
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004606:	5cd3      	ldrb	r3, [r2, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	58024400 	.word	0x58024400
 8004618:	080087f8 	.word	0x080087f8

0800461c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800461c:	b480      	push	{r7}
 800461e:	b089      	sub	sp, #36	; 0x24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004624:	4b9d      	ldr	r3, [pc, #628]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800462e:	4b9b      	ldr	r3, [pc, #620]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004632:	0b1b      	lsrs	r3, r3, #12
 8004634:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004638:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800463a:	4b98      	ldr	r3, [pc, #608]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800463c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463e:	091b      	lsrs	r3, r3, #4
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004646:	4b95      	ldr	r3, [pc, #596]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	08db      	lsrs	r3, r3, #3
 800464c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	fb02 f303 	mul.w	r3, r2, r3
 8004656:	ee07 3a90 	vmov	s15, r3
 800465a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	f000 810a 	beq.w	800487e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	2b01      	cmp	r3, #1
 800466e:	d05a      	beq.n	8004726 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004670:	2b01      	cmp	r3, #1
 8004672:	d302      	bcc.n	800467a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004674:	2b02      	cmp	r3, #2
 8004676:	d078      	beq.n	800476a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004678:	e099      	b.n	80047ae <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0320 	and.w	r3, r3, #32
 8004682:	2b00      	cmp	r3, #0
 8004684:	d02d      	beq.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004686:	4b85      	ldr	r3, [pc, #532]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	08db      	lsrs	r3, r3, #3
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	4a83      	ldr	r2, [pc, #524]	; (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004692:	fa22 f303 	lsr.w	r3, r2, r3
 8004696:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	ee07 3a90 	vmov	s15, r3
 800469e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	ee07 3a90 	vmov	s15, r3
 80046a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b0:	4b7a      	ldr	r3, [pc, #488]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c0:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c4:	eddf 5a77 	vldr	s11, [pc, #476]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80046c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046dc:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80046e0:	e087      	b.n	80047f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	ee07 3a90 	vmov	s15, r3
 80046e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ec:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80046f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f4:	4b69      	ldr	r3, [pc, #420]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80046f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fc:	ee07 3a90 	vmov	s15, r3
 8004700:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004704:	ed97 6a03 	vldr	s12, [r7, #12]
 8004708:	eddf 5a66 	vldr	s11, [pc, #408]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800470c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004710:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004714:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004718:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004720:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004724:	e065      	b.n	80047f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	ee07 3a90 	vmov	s15, r3
 800472c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004730:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004734:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004738:	4b58      	ldr	r3, [pc, #352]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004748:	ed97 6a03 	vldr	s12, [r7, #12]
 800474c:	eddf 5a55 	vldr	s11, [pc, #340]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004750:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004754:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004764:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004768:	e043      	b.n	80047f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	ee07 3a90 	vmov	s15, r3
 8004770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004774:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477c:	4b47      	ldr	r3, [pc, #284]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	ee07 3a90 	vmov	s15, r3
 8004788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004790:	eddf 5a44 	vldr	s11, [pc, #272]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004794:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004798:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047ac:	e021      	b.n	80047f2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	ee07 3a90 	vmov	s15, r3
 80047b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b8:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80047bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c0:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	ee07 3a90 	vmov	s15, r3
 80047cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d0:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d4:	eddf 5a33 	vldr	s11, [pc, #204]	; 80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80047d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ec:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80047f0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80047f2:	4b2a      	ldr	r3, [pc, #168]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80047f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f6:	0a5b      	lsrs	r3, r3, #9
 80047f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047fc:	ee07 3a90 	vmov	s15, r3
 8004800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800480c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004818:	ee17 2a90 	vmov	r2, s15
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004820:	4b1e      	ldr	r3, [pc, #120]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	0c1b      	lsrs	r3, r3, #16
 8004826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800482a:	ee07 3a90 	vmov	s15, r3
 800482e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483a:	edd7 6a07 	vldr	s13, [r7, #28]
 800483e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004846:	ee17 2a90 	vmov	r2, s15
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	0e1b      	lsrs	r3, r3, #24
 8004854:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004858:	ee07 3a90 	vmov	s15, r3
 800485c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004860:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004868:	edd7 6a07 	vldr	s13, [r7, #28]
 800486c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004874:	ee17 2a90 	vmov	r2, s15
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800487c:	e008      	b.n	8004890 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	609a      	str	r2, [r3, #8]
}
 8004890:	bf00      	nop
 8004892:	3724      	adds	r7, #36	; 0x24
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	58024400 	.word	0x58024400
 80048a0:	03d09000 	.word	0x03d09000
 80048a4:	46000000 	.word	0x46000000
 80048a8:	4c742400 	.word	0x4c742400
 80048ac:	4a742400 	.word	0x4a742400
 80048b0:	4af42400 	.word	0x4af42400

080048b4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b089      	sub	sp, #36	; 0x24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048bc:	4b9d      	ldr	r3, [pc, #628]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c0:	f003 0303 	and.w	r3, r3, #3
 80048c4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80048c6:	4b9b      	ldr	r3, [pc, #620]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	0d1b      	lsrs	r3, r3, #20
 80048cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048d0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048d2:	4b98      	ldr	r3, [pc, #608]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d6:	0a1b      	lsrs	r3, r3, #8
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80048de:	4b95      	ldr	r3, [pc, #596]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80048e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 810a 	beq.w	8004b16 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b01      	cmp	r3, #1
 8004906:	d05a      	beq.n	80049be <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004908:	2b01      	cmp	r3, #1
 800490a:	d302      	bcc.n	8004912 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800490c:	2b02      	cmp	r3, #2
 800490e:	d078      	beq.n	8004a02 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004910:	e099      	b.n	8004a46 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004912:	4b88      	ldr	r3, [pc, #544]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b00      	cmp	r3, #0
 800491c:	d02d      	beq.n	800497a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800491e:	4b85      	ldr	r3, [pc, #532]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	f003 0303 	and.w	r3, r3, #3
 8004928:	4a83      	ldr	r2, [pc, #524]	; (8004b38 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800492a:	fa22 f303 	lsr.w	r3, r2, r3
 800492e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	ee07 3a90 	vmov	s15, r3
 8004936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004948:	4b7a      	ldr	r3, [pc, #488]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004958:	ed97 6a03 	vldr	s12, [r7, #12]
 800495c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004960:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004964:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004968:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800496c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004974:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004978:	e087      	b.n	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	ee07 3a90 	vmov	s15, r3
 8004980:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004984:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004988:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498c:	4b69      	ldr	r3, [pc, #420]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004994:	ee07 3a90 	vmov	s15, r3
 8004998:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499c:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049b8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80049bc:	e065      	b.n	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	ee07 3a90 	vmov	s15, r3
 80049c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80049cc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d0:	4b58      	ldr	r3, [pc, #352]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d8:	ee07 3a90 	vmov	s15, r3
 80049dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e0:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80049e8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a00:	e043      	b.n	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	ee07 3a90 	vmov	s15, r3
 8004a08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004a10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a14:	4b47      	ldr	r3, [pc, #284]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	ee07 3a90 	vmov	s15, r3
 8004a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a24:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a28:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a44:	e021      	b.n	8004a8a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a50:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004b44 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004a54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a58:	4b36      	ldr	r3, [pc, #216]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a60:	ee07 3a90 	vmov	s15, r3
 8004a64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a68:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004b3c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004a70:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a74:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a7c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a84:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004a88:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004a8a:	4b2a      	ldr	r3, [pc, #168]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	0a5b      	lsrs	r3, r3, #9
 8004a90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a94:	ee07 3a90 	vmov	s15, r3
 8004a98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ab0:	ee17 2a90 	vmov	r2, s15
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004ab8:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004abc:	0c1b      	lsrs	r3, r3, #16
 8004abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ace:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ad2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ade:	ee17 2a90 	vmov	r2, s15
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	; (8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	0e1b      	lsrs	r3, r3, #24
 8004aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004af0:	ee07 3a90 	vmov	s15, r3
 8004af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b0c:	ee17 2a90 	vmov	r2, s15
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b14:	e008      	b.n	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	3724      	adds	r7, #36	; 0x24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	58024400 	.word	0x58024400
 8004b38:	03d09000 	.word	0x03d09000
 8004b3c:	46000000 	.word	0x46000000
 8004b40:	4c742400 	.word	0x4c742400
 8004b44:	4a742400 	.word	0x4a742400
 8004b48:	4af42400 	.word	0x4af42400

08004b4c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b56:	2300      	movs	r3, #0
 8004b58:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b5a:	4b53      	ldr	r3, [pc, #332]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b03      	cmp	r3, #3
 8004b64:	d101      	bne.n	8004b6a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e099      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b6a:	4b4f      	ldr	r3, [pc, #316]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a4e      	ldr	r2, [pc, #312]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b70:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b76:	f7fc fe17 	bl	80017a8 <HAL_GetTick>
 8004b7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b7e:	f7fc fe13 	bl	80017a8 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e086      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b90:	4b45      	ldr	r3, [pc, #276]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d1f0      	bne.n	8004b7e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004b9c:	4b42      	ldr	r3, [pc, #264]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	031b      	lsls	r3, r3, #12
 8004baa:	493f      	ldr	r1, [pc, #252]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	4313      	orrs	r3, r2
 8004bae:	628b      	str	r3, [r1, #40]	; 0x28
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	025b      	lsls	r3, r3, #9
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	431a      	orrs	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	041b      	lsls	r3, r3, #16
 8004bce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bd2:	431a      	orrs	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004be0:	4931      	ldr	r1, [pc, #196]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	4313      	orrs	r3, r2
 8004be4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004be6:	4b30      	ldr	r3, [pc, #192]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	492d      	ldr	r1, [pc, #180]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfc:	f023 0220 	bic.w	r2, r3, #32
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	699b      	ldr	r3, [r3, #24]
 8004c04:	4928      	ldr	r1, [pc, #160]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c06:	4313      	orrs	r3, r2
 8004c08:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c0a:	4b27      	ldr	r3, [pc, #156]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0e:	4a26      	ldr	r2, [pc, #152]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c10:	f023 0310 	bic.w	r3, r3, #16
 8004c14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c16:	4b24      	ldr	r3, [pc, #144]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c1a:	4b24      	ldr	r3, [pc, #144]	; (8004cac <RCCEx_PLL2_Config+0x160>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	69d2      	ldr	r2, [r2, #28]
 8004c22:	00d2      	lsls	r2, r2, #3
 8004c24:	4920      	ldr	r1, [pc, #128]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c2a:	4b1f      	ldr	r3, [pc, #124]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2e:	4a1e      	ldr	r2, [pc, #120]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c30:	f043 0310 	orr.w	r3, r3, #16
 8004c34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d106      	bne.n	8004c4a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4a19      	ldr	r2, [pc, #100]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c48:	e00f      	b.n	8004c6a <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d106      	bne.n	8004c5e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c50:	4b15      	ldr	r3, [pc, #84]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c5c:	e005      	b.n	8004c6a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c5e:	4b12      	ldr	r3, [pc, #72]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	4a11      	ldr	r2, [pc, #68]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c76:	f7fc fd97 	bl	80017a8 <HAL_GetTick>
 8004c7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c7c:	e008      	b.n	8004c90 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004c7e:	f7fc fd93 	bl	80017a8 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e006      	b.n	8004c9e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c90:	4b05      	ldr	r3, [pc, #20]	; (8004ca8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0f0      	beq.n	8004c7e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	58024400 	.word	0x58024400
 8004cac:	ffff0007 	.word	0xffff0007

08004cb0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cbe:	4b53      	ldr	r3, [pc, #332]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d101      	bne.n	8004cce <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e099      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cce:	4b4f      	ldr	r3, [pc, #316]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a4e      	ldr	r2, [pc, #312]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc fd65 	bl	80017a8 <HAL_GetTick>
 8004cde:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ce0:	e008      	b.n	8004cf4 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004ce2:	f7fc fd61 	bl	80017a8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d901      	bls.n	8004cf4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e086      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf4:	4b45      	ldr	r3, [pc, #276]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1f0      	bne.n	8004ce2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d00:	4b42      	ldr	r3, [pc, #264]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d04:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	051b      	lsls	r3, r3, #20
 8004d0e:	493f      	ldr	r1, [pc, #252]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	628b      	str	r3, [r1, #40]	; 0x28
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	3b01      	subs	r3, #1
 8004d1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	3b01      	subs	r3, #1
 8004d24:	025b      	lsls	r3, r3, #9
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	041b      	lsls	r3, r3, #16
 8004d32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d36:	431a      	orrs	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	691b      	ldr	r3, [r3, #16]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	061b      	lsls	r3, r3, #24
 8004d40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d44:	4931      	ldr	r1, [pc, #196]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d4a:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d4e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	492d      	ldr	r1, [pc, #180]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d5c:	4b2b      	ldr	r3, [pc, #172]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d60:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	4928      	ldr	r1, [pc, #160]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d6e:	4b27      	ldr	r3, [pc, #156]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d7a:	4b24      	ldr	r3, [pc, #144]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d7e:	4b24      	ldr	r3, [pc, #144]	; (8004e10 <RCCEx_PLL3_Config+0x160>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	69d2      	ldr	r2, [r2, #28]
 8004d86:	00d2      	lsls	r2, r2, #3
 8004d88:	4920      	ldr	r1, [pc, #128]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004d8e:	4b1f      	ldr	r3, [pc, #124]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d92:	4a1e      	ldr	r2, [pc, #120]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d106      	bne.n	8004dae <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004da0:	4b1a      	ldr	r3, [pc, #104]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da4:	4a19      	ldr	r2, [pc, #100]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004da6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004daa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dac:	e00f      	b.n	8004dce <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b01      	cmp	r3, #1
 8004db2:	d106      	bne.n	8004dc2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004db4:	4b15      	ldr	r3, [pc, #84]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004db8:	4a14      	ldr	r2, [pc, #80]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dc0:	e005      	b.n	8004dce <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dc2:	4b12      	ldr	r3, [pc, #72]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dc6:	4a11      	ldr	r2, [pc, #68]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dc8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dcc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dce:	4b0f      	ldr	r3, [pc, #60]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a0e      	ldr	r2, [pc, #56]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dda:	f7fc fce5 	bl	80017a8 <HAL_GetTick>
 8004dde:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004de2:	f7fc fce1 	bl	80017a8 <HAL_GetTick>
 8004de6:	4602      	mov	r2, r0
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e006      	b.n	8004e02 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df4:	4b05      	ldr	r3, [pc, #20]	; (8004e0c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0f0      	beq.n	8004de2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	58024400 	.word	0x58024400
 8004e10:	ffff0007 	.word	0xffff0007

08004e14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d101      	bne.n	8004e26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e01d      	b.n	8004e62 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7fc f956 	bl	80010ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3304      	adds	r3, #4
 8004e50:	4619      	mov	r1, r3
 8004e52:	4610      	mov	r0, r2
 8004e54:	f000 f922 	bl	800509c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3708      	adds	r7, #8
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e105      	b.n	8005092 <HAL_TIM_PWM_ConfigChannel+0x226>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2201      	movs	r2, #1
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b14      	cmp	r3, #20
 8004e9a:	f200 80f0 	bhi.w	800507e <HAL_TIM_PWM_ConfigChannel+0x212>
 8004e9e:	a201      	add	r2, pc, #4	; (adr r2, 8004ea4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ea4:	08004ef9 	.word	0x08004ef9
 8004ea8:	0800507f 	.word	0x0800507f
 8004eac:	0800507f 	.word	0x0800507f
 8004eb0:	0800507f 	.word	0x0800507f
 8004eb4:	08004f39 	.word	0x08004f39
 8004eb8:	0800507f 	.word	0x0800507f
 8004ebc:	0800507f 	.word	0x0800507f
 8004ec0:	0800507f 	.word	0x0800507f
 8004ec4:	08004f7b 	.word	0x08004f7b
 8004ec8:	0800507f 	.word	0x0800507f
 8004ecc:	0800507f 	.word	0x0800507f
 8004ed0:	0800507f 	.word	0x0800507f
 8004ed4:	08004fbb 	.word	0x08004fbb
 8004ed8:	0800507f 	.word	0x0800507f
 8004edc:	0800507f 	.word	0x0800507f
 8004ee0:	0800507f 	.word	0x0800507f
 8004ee4:	08004ffd 	.word	0x08004ffd
 8004ee8:	0800507f 	.word	0x0800507f
 8004eec:	0800507f 	.word	0x0800507f
 8004ef0:	0800507f 	.word	0x0800507f
 8004ef4:	0800503d 	.word	0x0800503d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f966 	bl	80051d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699a      	ldr	r2, [r3, #24]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f042 0208 	orr.w	r2, r2, #8
 8004f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699a      	ldr	r2, [r3, #24]
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f022 0204 	bic.w	r2, r2, #4
 8004f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6999      	ldr	r1, [r3, #24]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	691a      	ldr	r2, [r3, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	619a      	str	r2, [r3, #24]
      break;
 8004f36:	e0a3      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	68b9      	ldr	r1, [r7, #8]
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f9d6 	bl	80052f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699a      	ldr	r2, [r3, #24]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	699a      	ldr	r2, [r3, #24]
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	6999      	ldr	r1, [r3, #24]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	021a      	lsls	r2, r3, #8
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	619a      	str	r2, [r3, #24]
      break;
 8004f78:	e082      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68b9      	ldr	r1, [r7, #8]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 fa3f 	bl	8005404 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	69da      	ldr	r2, [r3, #28]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f042 0208 	orr.w	r2, r2, #8
 8004f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69da      	ldr	r2, [r3, #28]
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f022 0204 	bic.w	r2, r2, #4
 8004fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69d9      	ldr	r1, [r3, #28]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	691a      	ldr	r2, [r3, #16]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	61da      	str	r2, [r3, #28]
      break;
 8004fb8:	e062      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68b9      	ldr	r1, [r7, #8]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f000 faa5 	bl	8005510 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69da      	ldr	r2, [r3, #28]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69d9      	ldr	r1, [r3, #28]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	021a      	lsls	r2, r3, #8
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
      break;
 8004ffa:	e041      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68b9      	ldr	r1, [r7, #8]
 8005002:	4618      	mov	r0, r3
 8005004:	f000 faec 	bl	80055e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f042 0208 	orr.w	r2, r2, #8
 8005016:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0204 	bic.w	r2, r2, #4
 8005026:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	691a      	ldr	r2, [r3, #16]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800503a:	e021      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	4618      	mov	r0, r3
 8005044:	f000 fb2e 	bl	80056a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005056:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005066:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	021a      	lsls	r2, r3, #8
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	430a      	orrs	r2, r1
 800507a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800507c:	e000      	b.n	8005080 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800507e:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop

0800509c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a40      	ldr	r2, [pc, #256]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050ba:	d00f      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a3d      	ldr	r2, [pc, #244]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a3c      	ldr	r2, [pc, #240]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a3b      	ldr	r2, [pc, #236]	; (80051bc <TIM_Base_SetConfig+0x120>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_Base_SetConfig+0x40>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a3a      	ldr	r2, [pc, #232]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d108      	bne.n	80050ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d01f      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fc:	d01b      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a2c      	ldr	r2, [pc, #176]	; (80051b4 <TIM_Base_SetConfig+0x118>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d017      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a2b      	ldr	r2, [pc, #172]	; (80051b8 <TIM_Base_SetConfig+0x11c>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d013      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <TIM_Base_SetConfig+0x120>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a29      	ldr	r2, [pc, #164]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a28      	ldr	r2, [pc, #160]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a27      	ldr	r2, [pc, #156]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_Base_SetConfig+0x9a>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a26      	ldr	r2, [pc, #152]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d108      	bne.n	8005148 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800513c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a10      	ldr	r2, [pc, #64]	; (80051b0 <TIM_Base_SetConfig+0x114>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d00f      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a12      	ldr	r2, [pc, #72]	; (80051c0 <TIM_Base_SetConfig+0x124>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00b      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a11      	ldr	r2, [pc, #68]	; (80051c4 <TIM_Base_SetConfig+0x128>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d007      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a10      	ldr	r2, [pc, #64]	; (80051c8 <TIM_Base_SetConfig+0x12c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_Base_SetConfig+0xf8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a0f      	ldr	r2, [pc, #60]	; (80051cc <TIM_Base_SetConfig+0x130>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d103      	bne.n	800519c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	691a      	ldr	r2, [r3, #16]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	615a      	str	r2, [r3, #20]
}
 80051a2:	bf00      	nop
 80051a4:	3714      	adds	r7, #20
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40000400 	.word	0x40000400
 80051b8:	40000800 	.word	0x40000800
 80051bc:	40000c00 	.word	0x40000c00
 80051c0:	40010400 	.word	0x40010400
 80051c4:	40014000 	.word	0x40014000
 80051c8:	40014400 	.word	0x40014400
 80051cc:	40014800 	.word	0x40014800

080051d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	f023 0201 	bic.w	r2, r3, #1
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <TIM_OC1_SetConfig+0x108>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f023 0303 	bic.w	r3, r3, #3
 8005206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f023 0302 	bic.w	r3, r3, #2
 8005218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2d      	ldr	r2, [pc, #180]	; (80052dc <TIM_OC1_SetConfig+0x10c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00f      	beq.n	800524c <TIM_OC1_SetConfig+0x7c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a2c      	ldr	r2, [pc, #176]	; (80052e0 <TIM_OC1_SetConfig+0x110>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC1_SetConfig+0x7c>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a2b      	ldr	r2, [pc, #172]	; (80052e4 <TIM_OC1_SetConfig+0x114>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC1_SetConfig+0x7c>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <TIM_OC1_SetConfig+0x118>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC1_SetConfig+0x7c>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a29      	ldr	r2, [pc, #164]	; (80052ec <TIM_OC1_SetConfig+0x11c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d10c      	bne.n	8005266 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0308 	bic.w	r3, r3, #8
 8005252:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <TIM_OC1_SetConfig+0x10c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00f      	beq.n	800528e <TIM_OC1_SetConfig+0xbe>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1b      	ldr	r2, [pc, #108]	; (80052e0 <TIM_OC1_SetConfig+0x110>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_OC1_SetConfig+0xbe>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a1a      	ldr	r2, [pc, #104]	; (80052e4 <TIM_OC1_SetConfig+0x114>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d007      	beq.n	800528e <TIM_OC1_SetConfig+0xbe>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <TIM_OC1_SetConfig+0x118>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_OC1_SetConfig+0xbe>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <TIM_OC1_SetConfig+0x11c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d111      	bne.n	80052b2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005294:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800529c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685a      	ldr	r2, [r3, #4]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	621a      	str	r2, [r3, #32]
}
 80052cc:	bf00      	nop
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr
 80052d8:	fffeff8f 	.word	0xfffeff8f
 80052dc:	40010000 	.word	0x40010000
 80052e0:	40010400 	.word	0x40010400
 80052e4:	40014000 	.word	0x40014000
 80052e8:	40014400 	.word	0x40014400
 80052ec:	40014800 	.word	0x40014800

080052f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0210 	bic.w	r2, r3, #16
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4b34      	ldr	r3, [pc, #208]	; (80053ec <TIM_OC2_SetConfig+0xfc>)
 800531c:	4013      	ands	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005326:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	021b      	lsls	r3, r3, #8
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f023 0320 	bic.w	r3, r3, #32
 800533a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	011b      	lsls	r3, r3, #4
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a29      	ldr	r2, [pc, #164]	; (80053f0 <TIM_OC2_SetConfig+0x100>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d003      	beq.n	8005358 <TIM_OC2_SetConfig+0x68>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <TIM_OC2_SetConfig+0x104>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d10d      	bne.n	8005374 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800535e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	4313      	orrs	r3, r2
 800536a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005372:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <TIM_OC2_SetConfig+0x100>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_OC2_SetConfig+0xac>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a1d      	ldr	r2, [pc, #116]	; (80053f4 <TIM_OC2_SetConfig+0x104>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_OC2_SetConfig+0xac>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <TIM_OC2_SetConfig+0x108>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_OC2_SetConfig+0xac>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a1b      	ldr	r2, [pc, #108]	; (80053fc <TIM_OC2_SetConfig+0x10c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_OC2_SetConfig+0xac>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1a      	ldr	r2, [pc, #104]	; (8005400 <TIM_OC2_SetConfig+0x110>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d113      	bne.n	80053c4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	695b      	ldr	r3, [r3, #20]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	699b      	ldr	r3, [r3, #24]
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	693a      	ldr	r2, [r7, #16]
 80053c0:	4313      	orrs	r3, r2
 80053c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	621a      	str	r2, [r3, #32]
}
 80053de:	bf00      	nop
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	feff8fff 	.word	0xfeff8fff
 80053f0:	40010000 	.word	0x40010000
 80053f4:	40010400 	.word	0x40010400
 80053f8:	40014000 	.word	0x40014000
 80053fc:	40014400 	.word	0x40014400
 8005400:	40014800 	.word	0x40014800

08005404 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005404:	b480      	push	{r7}
 8005406:	b087      	sub	sp, #28
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800544c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	021b      	lsls	r3, r3, #8
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <TIM_OC3_SetConfig+0xf8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d003      	beq.n	800546a <TIM_OC3_SetConfig+0x66>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a26      	ldr	r2, [pc, #152]	; (8005500 <TIM_OC3_SetConfig+0xfc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d10d      	bne.n	8005486 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800546a:	697b      	ldr	r3, [r7, #20]
 800546c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005470:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	021b      	lsls	r3, r3, #8
 8005478:	697a      	ldr	r2, [r7, #20]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005484:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <TIM_OC3_SetConfig+0xf8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00f      	beq.n	80054ae <TIM_OC3_SetConfig+0xaa>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <TIM_OC3_SetConfig+0xfc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d00b      	beq.n	80054ae <TIM_OC3_SetConfig+0xaa>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <TIM_OC3_SetConfig+0x100>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d007      	beq.n	80054ae <TIM_OC3_SetConfig+0xaa>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a19      	ldr	r2, [pc, #100]	; (8005508 <TIM_OC3_SetConfig+0x104>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_OC3_SetConfig+0xaa>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a18      	ldr	r2, [pc, #96]	; (800550c <TIM_OC3_SetConfig+0x108>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d113      	bne.n	80054d6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80054b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	4313      	orrs	r3, r2
 80054c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	621a      	str	r2, [r3, #32]
}
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800553e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005546:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	021b      	lsls	r3, r3, #8
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4313      	orrs	r3, r2
 8005552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800555a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	031b      	lsls	r3, r3, #12
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a18      	ldr	r2, [pc, #96]	; (80055cc <TIM_OC4_SetConfig+0xbc>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d00f      	beq.n	8005590 <TIM_OC4_SetConfig+0x80>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a17      	ldr	r2, [pc, #92]	; (80055d0 <TIM_OC4_SetConfig+0xc0>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d00b      	beq.n	8005590 <TIM_OC4_SetConfig+0x80>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a16      	ldr	r2, [pc, #88]	; (80055d4 <TIM_OC4_SetConfig+0xc4>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d007      	beq.n	8005590 <TIM_OC4_SetConfig+0x80>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a15      	ldr	r2, [pc, #84]	; (80055d8 <TIM_OC4_SetConfig+0xc8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d003      	beq.n	8005590 <TIM_OC4_SetConfig+0x80>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a14      	ldr	r2, [pc, #80]	; (80055dc <TIM_OC4_SetConfig+0xcc>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d109      	bne.n	80055a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	019b      	lsls	r3, r3, #6
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	621a      	str	r2, [r3, #32]
}
 80055be:	bf00      	nop
 80055c0:	371c      	adds	r7, #28
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop
 80055cc:	40010000 	.word	0x40010000
 80055d0:	40010400 	.word	0x40010400
 80055d4:	40014000 	.word	0x40014000
 80055d8:	40014400 	.word	0x40014400
 80055dc:	40014800 	.word	0x40014800

080055e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b087      	sub	sp, #28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800560e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4313      	orrs	r3, r2
 8005618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005620:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	041b      	lsls	r3, r3, #16
 8005628:	693a      	ldr	r2, [r7, #16]
 800562a:	4313      	orrs	r3, r2
 800562c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a17      	ldr	r2, [pc, #92]	; (8005690 <TIM_OC5_SetConfig+0xb0>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00f      	beq.n	8005656 <TIM_OC5_SetConfig+0x76>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a16      	ldr	r2, [pc, #88]	; (8005694 <TIM_OC5_SetConfig+0xb4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d00b      	beq.n	8005656 <TIM_OC5_SetConfig+0x76>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a15      	ldr	r2, [pc, #84]	; (8005698 <TIM_OC5_SetConfig+0xb8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d007      	beq.n	8005656 <TIM_OC5_SetConfig+0x76>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a14      	ldr	r2, [pc, #80]	; (800569c <TIM_OC5_SetConfig+0xbc>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d003      	beq.n	8005656 <TIM_OC5_SetConfig+0x76>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <TIM_OC5_SetConfig+0xc0>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d109      	bne.n	800566a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800565c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	697a      	ldr	r2, [r7, #20]
 8005666:	4313      	orrs	r3, r2
 8005668:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	697a      	ldr	r2, [r7, #20]
 800566e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	621a      	str	r2, [r3, #32]
}
 8005684:	bf00      	nop
 8005686:	371c      	adds	r7, #28
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr
 8005690:	40010000 	.word	0x40010000
 8005694:	40010400 	.word	0x40010400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800

080056a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	021b      	lsls	r3, r3, #8
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	051b      	lsls	r3, r3, #20
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	4a18      	ldr	r2, [pc, #96]	; (8005758 <TIM_OC6_SetConfig+0xb4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00f      	beq.n	800571c <TIM_OC6_SetConfig+0x78>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a17      	ldr	r2, [pc, #92]	; (800575c <TIM_OC6_SetConfig+0xb8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d00b      	beq.n	800571c <TIM_OC6_SetConfig+0x78>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a16      	ldr	r2, [pc, #88]	; (8005760 <TIM_OC6_SetConfig+0xbc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d007      	beq.n	800571c <TIM_OC6_SetConfig+0x78>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a15      	ldr	r2, [pc, #84]	; (8005764 <TIM_OC6_SetConfig+0xc0>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d003      	beq.n	800571c <TIM_OC6_SetConfig+0x78>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a14      	ldr	r2, [pc, #80]	; (8005768 <TIM_OC6_SetConfig+0xc4>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005722:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	029b      	lsls	r3, r3, #10
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr
 8005756:	bf00      	nop
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800

0800576c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005780:	2302      	movs	r3, #2
 8005782:	e068      	b.n	8005856 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	689b      	ldr	r3, [r3, #8]
 80057a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a2e      	ldr	r2, [pc, #184]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d004      	beq.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a2d      	ldr	r2, [pc, #180]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d108      	bne.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80057be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d01d      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d018      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1b      	ldr	r2, [pc, #108]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d013      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a1a      	ldr	r2, [pc, #104]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d00e      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a18      	ldr	r2, [pc, #96]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d009      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a13      	ldr	r2, [pc, #76]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d004      	beq.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a14      	ldr	r2, [pc, #80]	; (8005878 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d10c      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005830:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	68ba      	ldr	r2, [r7, #8]
 8005838:	4313      	orrs	r3, r2
 800583a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	40010000 	.word	0x40010000
 8005868:	40010400 	.word	0x40010400
 800586c:	40000400 	.word	0x40000400
 8005870:	40000800 	.word	0x40000800
 8005874:	40000c00 	.word	0x40000c00
 8005878:	40001800 	.word	0x40001800

0800587c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005894:	2302      	movs	r3, #2
 8005896:	e065      	b.n	8005964 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	4313      	orrs	r3, r2
 8005900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	041b      	lsls	r3, r3, #16
 800590e:	4313      	orrs	r3, r2
 8005910:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a16      	ldr	r2, [pc, #88]	; (8005970 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d004      	beq.n	8005926 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a14      	ldr	r2, [pc, #80]	; (8005974 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d115      	bne.n	8005952 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005930:	051b      	lsls	r3, r3, #20
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6a1b      	ldr	r3, [r3, #32]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3714      	adds	r7, #20
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr
 8005970:	40010000 	.word	0x40010000
 8005974:	40010400 	.word	0x40010400

08005978 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e042      	b.n	8005a10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005990:	2b00      	cmp	r3, #0
 8005992:	d106      	bne.n	80059a2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7fb fcdd 	bl	800135c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2224      	movs	r2, #36	; 0x24
 80059a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f022 0201 	bic.w	r2, r2, #1
 80059b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f82c 	bl	8005a18 <UART_SetConfig>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e022      	b.n	8005a10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f002 f99e 	bl	8007d14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689a      	ldr	r2, [r3, #8]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681a      	ldr	r2, [r3, #0]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f042 0201 	orr.w	r2, r2, #1
 8005a06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f002 fa25 	bl	8007e58 <UART_CheckIdleState>
 8005a0e:	4603      	mov	r3, r0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a18:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005a1c:	b090      	sub	sp, #64	; 0x40
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8005a22:	2300      	movs	r3, #0
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	69db      	ldr	r3, [r3, #28]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	681a      	ldr	r2, [r3, #0]
 8005a58:	4bc1      	ldr	r3, [pc, #772]	; (8005d60 <UART_SetConfig+0x348>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	6812      	ldr	r2, [r2, #0]
 8005a60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a62:	430b      	orrs	r3, r1
 8005a64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	699b      	ldr	r3, [r3, #24]
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4ab7      	ldr	r2, [pc, #732]	; (8005d64 <UART_SetConfig+0x34c>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d004      	beq.n	8005a96 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a1b      	ldr	r3, [r3, #32]
 8005a90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a92:	4313      	orrs	r3, r2
 8005a94:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	4bb2      	ldr	r3, [pc, #712]	; (8005d68 <UART_SetConfig+0x350>)
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab0:	f023 010f 	bic.w	r1, r3, #15
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4aa9      	ldr	r2, [pc, #676]	; (8005d6c <UART_SetConfig+0x354>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d177      	bne.n	8005bba <UART_SetConfig+0x1a2>
 8005aca:	4ba9      	ldr	r3, [pc, #676]	; (8005d70 <UART_SetConfig+0x358>)
 8005acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ace:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ad2:	2b28      	cmp	r3, #40	; 0x28
 8005ad4:	d86c      	bhi.n	8005bb0 <UART_SetConfig+0x198>
 8005ad6:	a201      	add	r2, pc, #4	; (adr r2, 8005adc <UART_SetConfig+0xc4>)
 8005ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005bb1 	.word	0x08005bb1
 8005ae4:	08005bb1 	.word	0x08005bb1
 8005ae8:	08005bb1 	.word	0x08005bb1
 8005aec:	08005bb1 	.word	0x08005bb1
 8005af0:	08005bb1 	.word	0x08005bb1
 8005af4:	08005bb1 	.word	0x08005bb1
 8005af8:	08005bb1 	.word	0x08005bb1
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005bb1 	.word	0x08005bb1
 8005b04:	08005bb1 	.word	0x08005bb1
 8005b08:	08005bb1 	.word	0x08005bb1
 8005b0c:	08005bb1 	.word	0x08005bb1
 8005b10:	08005bb1 	.word	0x08005bb1
 8005b14:	08005bb1 	.word	0x08005bb1
 8005b18:	08005bb1 	.word	0x08005bb1
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005bb1 	.word	0x08005bb1
 8005b24:	08005bb1 	.word	0x08005bb1
 8005b28:	08005bb1 	.word	0x08005bb1
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005bb1 	.word	0x08005bb1
 8005b34:	08005bb1 	.word	0x08005bb1
 8005b38:	08005bb1 	.word	0x08005bb1
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005bb1 	.word	0x08005bb1
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005bb1 	.word	0x08005bb1
 8005b54:	08005bb1 	.word	0x08005bb1
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005bb1 	.word	0x08005bb1
 8005b68:	08005bb1 	.word	0x08005bb1
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b86:	e233      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b8e:	e22f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b96:	e22b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005b9e:	e227      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ba6:	e223      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ba8:	2340      	movs	r3, #64	; 0x40
 8005baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bae:	e21f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bb6:	bf00      	nop
 8005bb8:	e21a      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a6d      	ldr	r2, [pc, #436]	; (8005d74 <UART_SetConfig+0x35c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d132      	bne.n	8005c2a <UART_SetConfig+0x212>
 8005bc4:	4b6a      	ldr	r3, [pc, #424]	; (8005d70 <UART_SetConfig+0x358>)
 8005bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc8:	f003 0307 	and.w	r3, r3, #7
 8005bcc:	2b05      	cmp	r3, #5
 8005bce:	d827      	bhi.n	8005c20 <UART_SetConfig+0x208>
 8005bd0:	a201      	add	r2, pc, #4	; (adr r2, 8005bd8 <UART_SetConfig+0x1c0>)
 8005bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd6:	bf00      	nop
 8005bd8:	08005bf1 	.word	0x08005bf1
 8005bdc:	08005bf9 	.word	0x08005bf9
 8005be0:	08005c01 	.word	0x08005c01
 8005be4:	08005c09 	.word	0x08005c09
 8005be8:	08005c11 	.word	0x08005c11
 8005bec:	08005c19 	.word	0x08005c19
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bf6:	e1fb      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005bf8:	2304      	movs	r3, #4
 8005bfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005bfe:	e1f7      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c00:	2308      	movs	r3, #8
 8005c02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c06:	e1f3      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c08:	2310      	movs	r3, #16
 8005c0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c0e:	e1ef      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c10:	2320      	movs	r3, #32
 8005c12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c16:	e1eb      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c18:	2340      	movs	r3, #64	; 0x40
 8005c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c1e:	e1e7      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c26:	bf00      	nop
 8005c28:	e1e2      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a52      	ldr	r2, [pc, #328]	; (8005d78 <UART_SetConfig+0x360>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d132      	bne.n	8005c9a <UART_SetConfig+0x282>
 8005c34:	4b4e      	ldr	r3, [pc, #312]	; (8005d70 <UART_SetConfig+0x358>)
 8005c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c38:	f003 0307 	and.w	r3, r3, #7
 8005c3c:	2b05      	cmp	r3, #5
 8005c3e:	d827      	bhi.n	8005c90 <UART_SetConfig+0x278>
 8005c40:	a201      	add	r2, pc, #4	; (adr r2, 8005c48 <UART_SetConfig+0x230>)
 8005c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c46:	bf00      	nop
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c69 	.word	0x08005c69
 8005c50:	08005c71 	.word	0x08005c71
 8005c54:	08005c79 	.word	0x08005c79
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c89 	.word	0x08005c89
 8005c60:	2300      	movs	r3, #0
 8005c62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c66:	e1c3      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c6e:	e1bf      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c70:	2308      	movs	r3, #8
 8005c72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c76:	e1bb      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c78:	2310      	movs	r3, #16
 8005c7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c7e:	e1b7      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c86:	e1b3      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c88:	2340      	movs	r3, #64	; 0x40
 8005c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c8e:	e1af      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c90:	2380      	movs	r3, #128	; 0x80
 8005c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005c96:	bf00      	nop
 8005c98:	e1aa      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a37      	ldr	r2, [pc, #220]	; (8005d7c <UART_SetConfig+0x364>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d132      	bne.n	8005d0a <UART_SetConfig+0x2f2>
 8005ca4:	4b32      	ldr	r3, [pc, #200]	; (8005d70 <UART_SetConfig+0x358>)
 8005ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ca8:	f003 0307 	and.w	r3, r3, #7
 8005cac:	2b05      	cmp	r3, #5
 8005cae:	d827      	bhi.n	8005d00 <UART_SetConfig+0x2e8>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <UART_SetConfig+0x2a0>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005cd1 	.word	0x08005cd1
 8005cbc:	08005cd9 	.word	0x08005cd9
 8005cc0:	08005ce1 	.word	0x08005ce1
 8005cc4:	08005ce9 	.word	0x08005ce9
 8005cc8:	08005cf1 	.word	0x08005cf1
 8005ccc:	08005cf9 	.word	0x08005cf9
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005cd6:	e18b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005cd8:	2304      	movs	r3, #4
 8005cda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005cde:	e187      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ce0:	2308      	movs	r3, #8
 8005ce2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ce6:	e183      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ce8:	2310      	movs	r3, #16
 8005cea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005cee:	e17f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005cf0:	2320      	movs	r3, #32
 8005cf2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005cf6:	e17b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005cf8:	2340      	movs	r3, #64	; 0x40
 8005cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005cfe:	e177      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d00:	2380      	movs	r3, #128	; 0x80
 8005d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d06:	bf00      	nop
 8005d08:	e172      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <UART_SetConfig+0x368>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d144      	bne.n	8005d9e <UART_SetConfig+0x386>
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <UART_SetConfig+0x358>)
 8005d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	2b05      	cmp	r3, #5
 8005d1e:	d839      	bhi.n	8005d94 <UART_SetConfig+0x37c>
 8005d20:	a201      	add	r2, pc, #4	; (adr r2, 8005d28 <UART_SetConfig+0x310>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d41 	.word	0x08005d41
 8005d2c:	08005d49 	.word	0x08005d49
 8005d30:	08005d51 	.word	0x08005d51
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d85 	.word	0x08005d85
 8005d3c:	08005d8d 	.word	0x08005d8d
 8005d40:	2300      	movs	r3, #0
 8005d42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d46:	e153      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d48:	2304      	movs	r3, #4
 8005d4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d4e:	e14f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d50:	2308      	movs	r3, #8
 8005d52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d56:	e14b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d58:	2310      	movs	r3, #16
 8005d5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d5e:	e147      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d60:	cfff69f3 	.word	0xcfff69f3
 8005d64:	58000c00 	.word	0x58000c00
 8005d68:	11fff4ff 	.word	0x11fff4ff
 8005d6c:	40011000 	.word	0x40011000
 8005d70:	58024400 	.word	0x58024400
 8005d74:	40004400 	.word	0x40004400
 8005d78:	40004800 	.word	0x40004800
 8005d7c:	40004c00 	.word	0x40004c00
 8005d80:	40005000 	.word	0x40005000
 8005d84:	2320      	movs	r3, #32
 8005d86:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d8a:	e131      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d8c:	2340      	movs	r3, #64	; 0x40
 8005d8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d92:	e12d      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d94:	2380      	movs	r3, #128	; 0x80
 8005d96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005d9a:	bf00      	nop
 8005d9c:	e128      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4ac3      	ldr	r2, [pc, #780]	; (80060b0 <UART_SetConfig+0x698>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d178      	bne.n	8005e9a <UART_SetConfig+0x482>
 8005da8:	4bc2      	ldr	r3, [pc, #776]	; (80060b4 <UART_SetConfig+0x69c>)
 8005daa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005db0:	2b28      	cmp	r3, #40	; 0x28
 8005db2:	d86d      	bhi.n	8005e90 <UART_SetConfig+0x478>
 8005db4:	a201      	add	r2, pc, #4	; (adr r2, 8005dbc <UART_SetConfig+0x3a4>)
 8005db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dba:	bf00      	nop
 8005dbc:	08005e61 	.word	0x08005e61
 8005dc0:	08005e91 	.word	0x08005e91
 8005dc4:	08005e91 	.word	0x08005e91
 8005dc8:	08005e91 	.word	0x08005e91
 8005dcc:	08005e91 	.word	0x08005e91
 8005dd0:	08005e91 	.word	0x08005e91
 8005dd4:	08005e91 	.word	0x08005e91
 8005dd8:	08005e91 	.word	0x08005e91
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e91 	.word	0x08005e91
 8005de4:	08005e91 	.word	0x08005e91
 8005de8:	08005e91 	.word	0x08005e91
 8005dec:	08005e91 	.word	0x08005e91
 8005df0:	08005e91 	.word	0x08005e91
 8005df4:	08005e91 	.word	0x08005e91
 8005df8:	08005e91 	.word	0x08005e91
 8005dfc:	08005e71 	.word	0x08005e71
 8005e00:	08005e91 	.word	0x08005e91
 8005e04:	08005e91 	.word	0x08005e91
 8005e08:	08005e91 	.word	0x08005e91
 8005e0c:	08005e91 	.word	0x08005e91
 8005e10:	08005e91 	.word	0x08005e91
 8005e14:	08005e91 	.word	0x08005e91
 8005e18:	08005e91 	.word	0x08005e91
 8005e1c:	08005e79 	.word	0x08005e79
 8005e20:	08005e91 	.word	0x08005e91
 8005e24:	08005e91 	.word	0x08005e91
 8005e28:	08005e91 	.word	0x08005e91
 8005e2c:	08005e91 	.word	0x08005e91
 8005e30:	08005e91 	.word	0x08005e91
 8005e34:	08005e91 	.word	0x08005e91
 8005e38:	08005e91 	.word	0x08005e91
 8005e3c:	08005e81 	.word	0x08005e81
 8005e40:	08005e91 	.word	0x08005e91
 8005e44:	08005e91 	.word	0x08005e91
 8005e48:	08005e91 	.word	0x08005e91
 8005e4c:	08005e91 	.word	0x08005e91
 8005e50:	08005e91 	.word	0x08005e91
 8005e54:	08005e91 	.word	0x08005e91
 8005e58:	08005e91 	.word	0x08005e91
 8005e5c:	08005e89 	.word	0x08005e89
 8005e60:	2301      	movs	r3, #1
 8005e62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e66:	e0c3      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e68:	2304      	movs	r3, #4
 8005e6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e6e:	e0bf      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e70:	2308      	movs	r3, #8
 8005e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e76:	e0bb      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e78:	2310      	movs	r3, #16
 8005e7a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e7e:	e0b7      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e80:	2320      	movs	r3, #32
 8005e82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e86:	e0b3      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e88:	2340      	movs	r3, #64	; 0x40
 8005e8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e8e:	e0af      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e90:	2380      	movs	r3, #128	; 0x80
 8005e92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005e96:	bf00      	nop
 8005e98:	e0aa      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a86      	ldr	r2, [pc, #536]	; (80060b8 <UART_SetConfig+0x6a0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d132      	bne.n	8005f0a <UART_SetConfig+0x4f2>
 8005ea4:	4b83      	ldr	r3, [pc, #524]	; (80060b4 <UART_SetConfig+0x69c>)
 8005ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea8:	f003 0307 	and.w	r3, r3, #7
 8005eac:	2b05      	cmp	r3, #5
 8005eae:	d827      	bhi.n	8005f00 <UART_SetConfig+0x4e8>
 8005eb0:	a201      	add	r2, pc, #4	; (adr r2, 8005eb8 <UART_SetConfig+0x4a0>)
 8005eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb6:	bf00      	nop
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ed6:	e08b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ede:	e087      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ee6:	e083      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005eee:	e07f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005ef6:	e07b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005ef8:	2340      	movs	r3, #64	; 0x40
 8005efa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005efe:	e077      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f00:	2380      	movs	r3, #128	; 0x80
 8005f02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f06:	bf00      	nop
 8005f08:	e072      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a6b      	ldr	r2, [pc, #428]	; (80060bc <UART_SetConfig+0x6a4>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d132      	bne.n	8005f7a <UART_SetConfig+0x562>
 8005f14:	4b67      	ldr	r3, [pc, #412]	; (80060b4 <UART_SetConfig+0x69c>)
 8005f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f18:	f003 0307 	and.w	r3, r3, #7
 8005f1c:	2b05      	cmp	r3, #5
 8005f1e:	d827      	bhi.n	8005f70 <UART_SetConfig+0x558>
 8005f20:	a201      	add	r2, pc, #4	; (adr r2, 8005f28 <UART_SetConfig+0x510>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005f41 	.word	0x08005f41
 8005f2c:	08005f49 	.word	0x08005f49
 8005f30:	08005f51 	.word	0x08005f51
 8005f34:	08005f59 	.word	0x08005f59
 8005f38:	08005f61 	.word	0x08005f61
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	2300      	movs	r3, #0
 8005f42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f46:	e053      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f4e:	e04f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f56:	e04b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f5e:	e047      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f60:	2320      	movs	r3, #32
 8005f62:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f66:	e043      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f68:	2340      	movs	r3, #64	; 0x40
 8005f6a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f6e:	e03f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f70:	2380      	movs	r3, #128	; 0x80
 8005f72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005f76:	bf00      	nop
 8005f78:	e03a      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	4a50      	ldr	r2, [pc, #320]	; (80060c0 <UART_SetConfig+0x6a8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d132      	bne.n	8005fea <UART_SetConfig+0x5d2>
 8005f84:	4b4b      	ldr	r3, [pc, #300]	; (80060b4 <UART_SetConfig+0x69c>)
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	2b05      	cmp	r3, #5
 8005f8e:	d827      	bhi.n	8005fe0 <UART_SetConfig+0x5c8>
 8005f90:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x580>)
 8005f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f96:	bf00      	nop
 8005f98:	08005fb1 	.word	0x08005fb1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fb6:	e01b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fbe:	e017      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fc6:	e013      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fce:	e00f      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fd6:	e00b      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fd8:	2340      	movs	r3, #64	; 0x40
 8005fda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fde:	e007      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <UART_SetConfig+0x5d8>
 8005fea:	2380      	movs	r3, #128	; 0x80
 8005fec:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a32      	ldr	r2, [pc, #200]	; (80060c0 <UART_SetConfig+0x6a8>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	f040 86f7 	bne.w	8006dea <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006000:	2b08      	cmp	r3, #8
 8006002:	f000 80c0 	beq.w	8006186 <UART_SetConfig+0x76e>
 8006006:	2b08      	cmp	r3, #8
 8006008:	dc04      	bgt.n	8006014 <UART_SetConfig+0x5fc>
 800600a:	2b02      	cmp	r3, #2
 800600c:	d00c      	beq.n	8006028 <UART_SetConfig+0x610>
 800600e:	2b04      	cmp	r3, #4
 8006010:	d065      	beq.n	80060de <UART_SetConfig+0x6c6>
 8006012:	e27a      	b.n	800650a <UART_SetConfig+0xaf2>
 8006014:	2b20      	cmp	r3, #32
 8006016:	f000 81b0 	beq.w	800637a <UART_SetConfig+0x962>
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	f000 821e 	beq.w	800645c <UART_SetConfig+0xa44>
 8006020:	2b10      	cmp	r3, #16
 8006022:	f000 8104 	beq.w	800622e <UART_SetConfig+0x816>
 8006026:	e270      	b.n	800650a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006028:	f7fe fae2 	bl	80045f0 <HAL_RCCEx_GetD3PCLK1Freq>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006032:	2b00      	cmp	r3, #0
 8006034:	d04e      	beq.n	80060d4 <UART_SetConfig+0x6bc>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603a:	2b01      	cmp	r3, #1
 800603c:	d048      	beq.n	80060d0 <UART_SetConfig+0x6b8>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006042:	2b02      	cmp	r3, #2
 8006044:	d042      	beq.n	80060cc <UART_SetConfig+0x6b4>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604a:	2b03      	cmp	r3, #3
 800604c:	d03c      	beq.n	80060c8 <UART_SetConfig+0x6b0>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006052:	2b04      	cmp	r3, #4
 8006054:	d036      	beq.n	80060c4 <UART_SetConfig+0x6ac>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800605a:	2b05      	cmp	r3, #5
 800605c:	d026      	beq.n	80060ac <UART_SetConfig+0x694>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b06      	cmp	r3, #6
 8006064:	d020      	beq.n	80060a8 <UART_SetConfig+0x690>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	2b07      	cmp	r3, #7
 800606c:	d01a      	beq.n	80060a4 <UART_SetConfig+0x68c>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006072:	2b08      	cmp	r3, #8
 8006074:	d014      	beq.n	80060a0 <UART_SetConfig+0x688>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607a:	2b09      	cmp	r3, #9
 800607c:	d00e      	beq.n	800609c <UART_SetConfig+0x684>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006082:	2b0a      	cmp	r3, #10
 8006084:	d008      	beq.n	8006098 <UART_SetConfig+0x680>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608a:	2b0b      	cmp	r3, #11
 800608c:	d102      	bne.n	8006094 <UART_SetConfig+0x67c>
 800608e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006092:	e020      	b.n	80060d6 <UART_SetConfig+0x6be>
 8006094:	2301      	movs	r3, #1
 8006096:	e01e      	b.n	80060d6 <UART_SetConfig+0x6be>
 8006098:	2380      	movs	r3, #128	; 0x80
 800609a:	e01c      	b.n	80060d6 <UART_SetConfig+0x6be>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	e01a      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060a0:	2320      	movs	r3, #32
 80060a2:	e018      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060a4:	2310      	movs	r3, #16
 80060a6:	e016      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060a8:	230c      	movs	r3, #12
 80060aa:	e014      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060ac:	230a      	movs	r3, #10
 80060ae:	e012      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060b0:	40011400 	.word	0x40011400
 80060b4:	58024400 	.word	0x58024400
 80060b8:	40007800 	.word	0x40007800
 80060bc:	40007c00 	.word	0x40007c00
 80060c0:	58000c00 	.word	0x58000c00
 80060c4:	2308      	movs	r3, #8
 80060c6:	e006      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060c8:	2306      	movs	r3, #6
 80060ca:	e004      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060cc:	2304      	movs	r3, #4
 80060ce:	e002      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e000      	b.n	80060d6 <UART_SetConfig+0x6be>
 80060d4:	2301      	movs	r3, #1
 80060d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80060da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060dc:	e219      	b.n	8006512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060de:	f107 0318 	add.w	r3, r7, #24
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7fe fa9a 	bl	800461c <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d044      	beq.n	800617c <UART_SetConfig+0x764>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d03e      	beq.n	8006178 <UART_SetConfig+0x760>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	2b02      	cmp	r3, #2
 8006100:	d038      	beq.n	8006174 <UART_SetConfig+0x75c>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006106:	2b03      	cmp	r3, #3
 8006108:	d032      	beq.n	8006170 <UART_SetConfig+0x758>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b04      	cmp	r3, #4
 8006110:	d02c      	beq.n	800616c <UART_SetConfig+0x754>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	2b05      	cmp	r3, #5
 8006118:	d026      	beq.n	8006168 <UART_SetConfig+0x750>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611e:	2b06      	cmp	r3, #6
 8006120:	d020      	beq.n	8006164 <UART_SetConfig+0x74c>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006126:	2b07      	cmp	r3, #7
 8006128:	d01a      	beq.n	8006160 <UART_SetConfig+0x748>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	2b08      	cmp	r3, #8
 8006130:	d014      	beq.n	800615c <UART_SetConfig+0x744>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	2b09      	cmp	r3, #9
 8006138:	d00e      	beq.n	8006158 <UART_SetConfig+0x740>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	2b0a      	cmp	r3, #10
 8006140:	d008      	beq.n	8006154 <UART_SetConfig+0x73c>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	2b0b      	cmp	r3, #11
 8006148:	d102      	bne.n	8006150 <UART_SetConfig+0x738>
 800614a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800614e:	e016      	b.n	800617e <UART_SetConfig+0x766>
 8006150:	2301      	movs	r3, #1
 8006152:	e014      	b.n	800617e <UART_SetConfig+0x766>
 8006154:	2380      	movs	r3, #128	; 0x80
 8006156:	e012      	b.n	800617e <UART_SetConfig+0x766>
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	e010      	b.n	800617e <UART_SetConfig+0x766>
 800615c:	2320      	movs	r3, #32
 800615e:	e00e      	b.n	800617e <UART_SetConfig+0x766>
 8006160:	2310      	movs	r3, #16
 8006162:	e00c      	b.n	800617e <UART_SetConfig+0x766>
 8006164:	230c      	movs	r3, #12
 8006166:	e00a      	b.n	800617e <UART_SetConfig+0x766>
 8006168:	230a      	movs	r3, #10
 800616a:	e008      	b.n	800617e <UART_SetConfig+0x766>
 800616c:	2308      	movs	r3, #8
 800616e:	e006      	b.n	800617e <UART_SetConfig+0x766>
 8006170:	2306      	movs	r3, #6
 8006172:	e004      	b.n	800617e <UART_SetConfig+0x766>
 8006174:	2304      	movs	r3, #4
 8006176:	e002      	b.n	800617e <UART_SetConfig+0x766>
 8006178:	2302      	movs	r3, #2
 800617a:	e000      	b.n	800617e <UART_SetConfig+0x766>
 800617c:	2301      	movs	r3, #1
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006184:	e1c5      	b.n	8006512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006186:	f107 030c 	add.w	r3, r7, #12
 800618a:	4618      	mov	r0, r3
 800618c:	f7fe fb92 	bl	80048b4 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8006190:	693a      	ldr	r2, [r7, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	2b00      	cmp	r3, #0
 8006198:	d044      	beq.n	8006224 <UART_SetConfig+0x80c>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d03e      	beq.n	8006220 <UART_SetConfig+0x808>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d038      	beq.n	800621c <UART_SetConfig+0x804>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d032      	beq.n	8006218 <UART_SetConfig+0x800>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	2b04      	cmp	r3, #4
 80061b8:	d02c      	beq.n	8006214 <UART_SetConfig+0x7fc>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	2b05      	cmp	r3, #5
 80061c0:	d026      	beq.n	8006210 <UART_SetConfig+0x7f8>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c6:	2b06      	cmp	r3, #6
 80061c8:	d020      	beq.n	800620c <UART_SetConfig+0x7f4>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	2b07      	cmp	r3, #7
 80061d0:	d01a      	beq.n	8006208 <UART_SetConfig+0x7f0>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d014      	beq.n	8006204 <UART_SetConfig+0x7ec>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061de:	2b09      	cmp	r3, #9
 80061e0:	d00e      	beq.n	8006200 <UART_SetConfig+0x7e8>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e6:	2b0a      	cmp	r3, #10
 80061e8:	d008      	beq.n	80061fc <UART_SetConfig+0x7e4>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	2b0b      	cmp	r3, #11
 80061f0:	d102      	bne.n	80061f8 <UART_SetConfig+0x7e0>
 80061f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061f6:	e016      	b.n	8006226 <UART_SetConfig+0x80e>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e014      	b.n	8006226 <UART_SetConfig+0x80e>
 80061fc:	2380      	movs	r3, #128	; 0x80
 80061fe:	e012      	b.n	8006226 <UART_SetConfig+0x80e>
 8006200:	2340      	movs	r3, #64	; 0x40
 8006202:	e010      	b.n	8006226 <UART_SetConfig+0x80e>
 8006204:	2320      	movs	r3, #32
 8006206:	e00e      	b.n	8006226 <UART_SetConfig+0x80e>
 8006208:	2310      	movs	r3, #16
 800620a:	e00c      	b.n	8006226 <UART_SetConfig+0x80e>
 800620c:	230c      	movs	r3, #12
 800620e:	e00a      	b.n	8006226 <UART_SetConfig+0x80e>
 8006210:	230a      	movs	r3, #10
 8006212:	e008      	b.n	8006226 <UART_SetConfig+0x80e>
 8006214:	2308      	movs	r3, #8
 8006216:	e006      	b.n	8006226 <UART_SetConfig+0x80e>
 8006218:	2306      	movs	r3, #6
 800621a:	e004      	b.n	8006226 <UART_SetConfig+0x80e>
 800621c:	2304      	movs	r3, #4
 800621e:	e002      	b.n	8006226 <UART_SetConfig+0x80e>
 8006220:	2302      	movs	r3, #2
 8006222:	e000      	b.n	8006226 <UART_SetConfig+0x80e>
 8006224:	2301      	movs	r3, #1
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800622c:	e171      	b.n	8006512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800622e:	4b7a      	ldr	r3, [pc, #488]	; (8006418 <UART_SetConfig+0xa00>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 0320 	and.w	r3, r3, #32
 8006236:	2b00      	cmp	r3, #0
 8006238:	d054      	beq.n	80062e4 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800623a:	4b77      	ldr	r3, [pc, #476]	; (8006418 <UART_SetConfig+0xa00>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	08db      	lsrs	r3, r3, #3
 8006240:	f003 0303 	and.w	r3, r3, #3
 8006244:	4a75      	ldr	r2, [pc, #468]	; (800641c <UART_SetConfig+0xa04>)
 8006246:	40da      	lsrs	r2, r3
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624c:	2b00      	cmp	r3, #0
 800624e:	d044      	beq.n	80062da <UART_SetConfig+0x8c2>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006254:	2b01      	cmp	r3, #1
 8006256:	d03e      	beq.n	80062d6 <UART_SetConfig+0x8be>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800625c:	2b02      	cmp	r3, #2
 800625e:	d038      	beq.n	80062d2 <UART_SetConfig+0x8ba>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006264:	2b03      	cmp	r3, #3
 8006266:	d032      	beq.n	80062ce <UART_SetConfig+0x8b6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800626c:	2b04      	cmp	r3, #4
 800626e:	d02c      	beq.n	80062ca <UART_SetConfig+0x8b2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	2b05      	cmp	r3, #5
 8006276:	d026      	beq.n	80062c6 <UART_SetConfig+0x8ae>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	2b06      	cmp	r3, #6
 800627e:	d020      	beq.n	80062c2 <UART_SetConfig+0x8aa>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	2b07      	cmp	r3, #7
 8006286:	d01a      	beq.n	80062be <UART_SetConfig+0x8a6>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628c:	2b08      	cmp	r3, #8
 800628e:	d014      	beq.n	80062ba <UART_SetConfig+0x8a2>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006294:	2b09      	cmp	r3, #9
 8006296:	d00e      	beq.n	80062b6 <UART_SetConfig+0x89e>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629c:	2b0a      	cmp	r3, #10
 800629e:	d008      	beq.n	80062b2 <UART_SetConfig+0x89a>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a4:	2b0b      	cmp	r3, #11
 80062a6:	d102      	bne.n	80062ae <UART_SetConfig+0x896>
 80062a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062ac:	e016      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062ae:	2301      	movs	r3, #1
 80062b0:	e014      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062b2:	2380      	movs	r3, #128	; 0x80
 80062b4:	e012      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062b6:	2340      	movs	r3, #64	; 0x40
 80062b8:	e010      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062ba:	2320      	movs	r3, #32
 80062bc:	e00e      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062be:	2310      	movs	r3, #16
 80062c0:	e00c      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062c2:	230c      	movs	r3, #12
 80062c4:	e00a      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062c6:	230a      	movs	r3, #10
 80062c8:	e008      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062ca:	2308      	movs	r3, #8
 80062cc:	e006      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062ce:	2306      	movs	r3, #6
 80062d0:	e004      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062d2:	2304      	movs	r3, #4
 80062d4:	e002      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e000      	b.n	80062dc <UART_SetConfig+0x8c4>
 80062da:	2301      	movs	r3, #1
 80062dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 80062e2:	e116      	b.n	8006512 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d043      	beq.n	8006374 <UART_SetConfig+0x95c>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d03d      	beq.n	8006370 <UART_SetConfig+0x958>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d037      	beq.n	800636c <UART_SetConfig+0x954>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006300:	2b03      	cmp	r3, #3
 8006302:	d031      	beq.n	8006368 <UART_SetConfig+0x950>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006308:	2b04      	cmp	r3, #4
 800630a:	d02b      	beq.n	8006364 <UART_SetConfig+0x94c>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006310:	2b05      	cmp	r3, #5
 8006312:	d025      	beq.n	8006360 <UART_SetConfig+0x948>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	2b06      	cmp	r3, #6
 800631a:	d01f      	beq.n	800635c <UART_SetConfig+0x944>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	2b07      	cmp	r3, #7
 8006322:	d019      	beq.n	8006358 <UART_SetConfig+0x940>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	2b08      	cmp	r3, #8
 800632a:	d013      	beq.n	8006354 <UART_SetConfig+0x93c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006330:	2b09      	cmp	r3, #9
 8006332:	d00d      	beq.n	8006350 <UART_SetConfig+0x938>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	2b0a      	cmp	r3, #10
 800633a:	d007      	beq.n	800634c <UART_SetConfig+0x934>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	2b0b      	cmp	r3, #11
 8006342:	d101      	bne.n	8006348 <UART_SetConfig+0x930>
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <UART_SetConfig+0xa08>)
 8006346:	e016      	b.n	8006376 <UART_SetConfig+0x95e>
 8006348:	4b34      	ldr	r3, [pc, #208]	; (800641c <UART_SetConfig+0xa04>)
 800634a:	e014      	b.n	8006376 <UART_SetConfig+0x95e>
 800634c:	4b35      	ldr	r3, [pc, #212]	; (8006424 <UART_SetConfig+0xa0c>)
 800634e:	e012      	b.n	8006376 <UART_SetConfig+0x95e>
 8006350:	4b35      	ldr	r3, [pc, #212]	; (8006428 <UART_SetConfig+0xa10>)
 8006352:	e010      	b.n	8006376 <UART_SetConfig+0x95e>
 8006354:	4b35      	ldr	r3, [pc, #212]	; (800642c <UART_SetConfig+0xa14>)
 8006356:	e00e      	b.n	8006376 <UART_SetConfig+0x95e>
 8006358:	4b35      	ldr	r3, [pc, #212]	; (8006430 <UART_SetConfig+0xa18>)
 800635a:	e00c      	b.n	8006376 <UART_SetConfig+0x95e>
 800635c:	4b35      	ldr	r3, [pc, #212]	; (8006434 <UART_SetConfig+0xa1c>)
 800635e:	e00a      	b.n	8006376 <UART_SetConfig+0x95e>
 8006360:	4b35      	ldr	r3, [pc, #212]	; (8006438 <UART_SetConfig+0xa20>)
 8006362:	e008      	b.n	8006376 <UART_SetConfig+0x95e>
 8006364:	4b35      	ldr	r3, [pc, #212]	; (800643c <UART_SetConfig+0xa24>)
 8006366:	e006      	b.n	8006376 <UART_SetConfig+0x95e>
 8006368:	4b35      	ldr	r3, [pc, #212]	; (8006440 <UART_SetConfig+0xa28>)
 800636a:	e004      	b.n	8006376 <UART_SetConfig+0x95e>
 800636c:	4b35      	ldr	r3, [pc, #212]	; (8006444 <UART_SetConfig+0xa2c>)
 800636e:	e002      	b.n	8006376 <UART_SetConfig+0x95e>
 8006370:	4b35      	ldr	r3, [pc, #212]	; (8006448 <UART_SetConfig+0xa30>)
 8006372:	e000      	b.n	8006376 <UART_SetConfig+0x95e>
 8006374:	4b29      	ldr	r3, [pc, #164]	; (800641c <UART_SetConfig+0xa04>)
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006378:	e0cb      	b.n	8006512 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637e:	2b00      	cmp	r3, #0
 8006380:	d046      	beq.n	8006410 <UART_SetConfig+0x9f8>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006386:	2b01      	cmp	r3, #1
 8006388:	d040      	beq.n	800640c <UART_SetConfig+0x9f4>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	2b02      	cmp	r3, #2
 8006390:	d03a      	beq.n	8006408 <UART_SetConfig+0x9f0>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006396:	2b03      	cmp	r3, #3
 8006398:	d034      	beq.n	8006404 <UART_SetConfig+0x9ec>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d02e      	beq.n	8006400 <UART_SetConfig+0x9e8>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063a6:	2b05      	cmp	r3, #5
 80063a8:	d028      	beq.n	80063fc <UART_SetConfig+0x9e4>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ae:	2b06      	cmp	r3, #6
 80063b0:	d022      	beq.n	80063f8 <UART_SetConfig+0x9e0>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	2b07      	cmp	r3, #7
 80063b8:	d01c      	beq.n	80063f4 <UART_SetConfig+0x9dc>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	2b08      	cmp	r3, #8
 80063c0:	d016      	beq.n	80063f0 <UART_SetConfig+0x9d8>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c6:	2b09      	cmp	r3, #9
 80063c8:	d00f      	beq.n	80063ea <UART_SetConfig+0x9d2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063ce:	2b0a      	cmp	r3, #10
 80063d0:	d008      	beq.n	80063e4 <UART_SetConfig+0x9cc>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d6:	2b0b      	cmp	r3, #11
 80063d8:	d102      	bne.n	80063e0 <UART_SetConfig+0x9c8>
 80063da:	f643 5309 	movw	r3, #15625	; 0x3d09
 80063de:	e018      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063e0:	4b13      	ldr	r3, [pc, #76]	; (8006430 <UART_SetConfig+0xa18>)
 80063e2:	e016      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063e4:	f647 2312 	movw	r3, #31250	; 0x7a12
 80063e8:	e013      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063ea:	f24f 4324 	movw	r3, #62500	; 0xf424
 80063ee:	e010      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063f0:	4b16      	ldr	r3, [pc, #88]	; (800644c <UART_SetConfig+0xa34>)
 80063f2:	e00e      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <UART_SetConfig+0xa08>)
 80063f6:	e00c      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063f8:	4b15      	ldr	r3, [pc, #84]	; (8006450 <UART_SetConfig+0xa38>)
 80063fa:	e00a      	b.n	8006412 <UART_SetConfig+0x9fa>
 80063fc:	4b15      	ldr	r3, [pc, #84]	; (8006454 <UART_SetConfig+0xa3c>)
 80063fe:	e008      	b.n	8006412 <UART_SetConfig+0x9fa>
 8006400:	4b08      	ldr	r3, [pc, #32]	; (8006424 <UART_SetConfig+0xa0c>)
 8006402:	e006      	b.n	8006412 <UART_SetConfig+0x9fa>
 8006404:	4b14      	ldr	r3, [pc, #80]	; (8006458 <UART_SetConfig+0xa40>)
 8006406:	e004      	b.n	8006412 <UART_SetConfig+0x9fa>
 8006408:	4b07      	ldr	r3, [pc, #28]	; (8006428 <UART_SetConfig+0xa10>)
 800640a:	e002      	b.n	8006412 <UART_SetConfig+0x9fa>
 800640c:	4b07      	ldr	r3, [pc, #28]	; (800642c <UART_SetConfig+0xa14>)
 800640e:	e000      	b.n	8006412 <UART_SetConfig+0x9fa>
 8006410:	4b07      	ldr	r3, [pc, #28]	; (8006430 <UART_SetConfig+0xa18>)
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006414:	e07d      	b.n	8006512 <UART_SetConfig+0xafa>
 8006416:	bf00      	nop
 8006418:	58024400 	.word	0x58024400
 800641c:	03d09000 	.word	0x03d09000
 8006420:	0003d090 	.word	0x0003d090
 8006424:	0007a120 	.word	0x0007a120
 8006428:	000f4240 	.word	0x000f4240
 800642c:	001e8480 	.word	0x001e8480
 8006430:	003d0900 	.word	0x003d0900
 8006434:	00516155 	.word	0x00516155
 8006438:	0061a800 	.word	0x0061a800
 800643c:	007a1200 	.word	0x007a1200
 8006440:	00a2c2aa 	.word	0x00a2c2aa
 8006444:	00f42400 	.word	0x00f42400
 8006448:	01e84800 	.word	0x01e84800
 800644c:	0001e848 	.word	0x0001e848
 8006450:	00051615 	.word	0x00051615
 8006454:	00061a80 	.word	0x00061a80
 8006458:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2b00      	cmp	r3, #0
 8006462:	d04e      	beq.n	8006502 <UART_SetConfig+0xaea>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	2b01      	cmp	r3, #1
 800646a:	d047      	beq.n	80064fc <UART_SetConfig+0xae4>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006470:	2b02      	cmp	r3, #2
 8006472:	d040      	beq.n	80064f6 <UART_SetConfig+0xade>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006478:	2b03      	cmp	r3, #3
 800647a:	d039      	beq.n	80064f0 <UART_SetConfig+0xad8>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006480:	2b04      	cmp	r3, #4
 8006482:	d032      	beq.n	80064ea <UART_SetConfig+0xad2>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	2b05      	cmp	r3, #5
 800648a:	d02b      	beq.n	80064e4 <UART_SetConfig+0xacc>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006490:	2b06      	cmp	r3, #6
 8006492:	d024      	beq.n	80064de <UART_SetConfig+0xac6>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006498:	2b07      	cmp	r3, #7
 800649a:	d01d      	beq.n	80064d8 <UART_SetConfig+0xac0>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	2b08      	cmp	r3, #8
 80064a2:	d016      	beq.n	80064d2 <UART_SetConfig+0xaba>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d00f      	beq.n	80064cc <UART_SetConfig+0xab4>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b0:	2b0a      	cmp	r3, #10
 80064b2:	d008      	beq.n	80064c6 <UART_SetConfig+0xaae>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b8:	2b0b      	cmp	r3, #11
 80064ba:	d101      	bne.n	80064c0 <UART_SetConfig+0xaa8>
 80064bc:	2380      	movs	r3, #128	; 0x80
 80064be:	e022      	b.n	8006506 <UART_SetConfig+0xaee>
 80064c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c4:	e01f      	b.n	8006506 <UART_SetConfig+0xaee>
 80064c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064ca:	e01c      	b.n	8006506 <UART_SetConfig+0xaee>
 80064cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064d0:	e019      	b.n	8006506 <UART_SetConfig+0xaee>
 80064d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064d6:	e016      	b.n	8006506 <UART_SetConfig+0xaee>
 80064d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064dc:	e013      	b.n	8006506 <UART_SetConfig+0xaee>
 80064de:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80064e2:	e010      	b.n	8006506 <UART_SetConfig+0xaee>
 80064e4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80064e8:	e00d      	b.n	8006506 <UART_SetConfig+0xaee>
 80064ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064ee:	e00a      	b.n	8006506 <UART_SetConfig+0xaee>
 80064f0:	f241 5355 	movw	r3, #5461	; 0x1555
 80064f4:	e007      	b.n	8006506 <UART_SetConfig+0xaee>
 80064f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80064fa:	e004      	b.n	8006506 <UART_SetConfig+0xaee>
 80064fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006500:	e001      	b.n	8006506 <UART_SetConfig+0xaee>
 8006502:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006508:	e003      	b.n	8006512 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8006510:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8006512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006514:	2b00      	cmp	r3, #0
 8006516:	f001 83e8 	beq.w	8007cea <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	4413      	add	r3, r2
 8006524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006526:	429a      	cmp	r2, r3
 8006528:	d305      	bcc.n	8006536 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	685b      	ldr	r3, [r3, #4]
 800652e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006530:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006532:	429a      	cmp	r2, r3
 8006534:	d904      	bls.n	8006540 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800653c:	f001 bbd5 	b.w	8007cea <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8006540:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006544:	2b08      	cmp	r3, #8
 8006546:	f000 8154 	beq.w	80067f2 <UART_SetConfig+0xdda>
 800654a:	2b08      	cmp	r3, #8
 800654c:	dc06      	bgt.n	800655c <UART_SetConfig+0xb44>
 800654e:	2b02      	cmp	r3, #2
 8006550:	d00f      	beq.n	8006572 <UART_SetConfig+0xb5a>
 8006552:	2b04      	cmp	r3, #4
 8006554:	f000 80ac 	beq.w	80066b0 <UART_SetConfig+0xc98>
 8006558:	f000 bc30 	b.w	8006dbc <UART_SetConfig+0x13a4>
 800655c:	2b20      	cmp	r3, #32
 800655e:	f000 832d 	beq.w	8006bbc <UART_SetConfig+0x11a4>
 8006562:	2b40      	cmp	r3, #64	; 0x40
 8006564:	f000 83a5 	beq.w	8006cb2 <UART_SetConfig+0x129a>
 8006568:	2b10      	cmp	r3, #16
 800656a:	f000 81e3 	beq.w	8006934 <UART_SetConfig+0xf1c>
 800656e:	f000 bc25 	b.w	8006dbc <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006572:	f7fe f83d 	bl	80045f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8006576:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657a:	4618      	mov	r0, r3
 800657c:	f04f 0100 	mov.w	r1, #0
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006584:	2b00      	cmp	r3, #0
 8006586:	d067      	beq.n	8006658 <UART_SetConfig+0xc40>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800658c:	2b01      	cmp	r3, #1
 800658e:	d05e      	beq.n	800664e <UART_SetConfig+0xc36>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006594:	2b02      	cmp	r3, #2
 8006596:	d055      	beq.n	8006644 <UART_SetConfig+0xc2c>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800659c:	2b03      	cmp	r3, #3
 800659e:	d04c      	beq.n	800663a <UART_SetConfig+0xc22>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	2b04      	cmp	r3, #4
 80065a6:	d043      	beq.n	8006630 <UART_SetConfig+0xc18>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	2b05      	cmp	r3, #5
 80065ae:	d03a      	beq.n	8006626 <UART_SetConfig+0xc0e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	2b06      	cmp	r3, #6
 80065b6:	d031      	beq.n	800661c <UART_SetConfig+0xc04>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2b07      	cmp	r3, #7
 80065be:	d028      	beq.n	8006612 <UART_SetConfig+0xbfa>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	2b08      	cmp	r3, #8
 80065c6:	d01f      	beq.n	8006608 <UART_SetConfig+0xbf0>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	d016      	beq.n	80065fe <UART_SetConfig+0xbe6>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d4:	2b0a      	cmp	r3, #10
 80065d6:	d00d      	beq.n	80065f4 <UART_SetConfig+0xbdc>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	2b0b      	cmp	r3, #11
 80065de:	d104      	bne.n	80065ea <UART_SetConfig+0xbd2>
 80065e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80065e4:	f04f 0400 	mov.w	r4, #0
 80065e8:	e03a      	b.n	8006660 <UART_SetConfig+0xc48>
 80065ea:	f04f 0301 	mov.w	r3, #1
 80065ee:	f04f 0400 	mov.w	r4, #0
 80065f2:	e035      	b.n	8006660 <UART_SetConfig+0xc48>
 80065f4:	f04f 0380 	mov.w	r3, #128	; 0x80
 80065f8:	f04f 0400 	mov.w	r4, #0
 80065fc:	e030      	b.n	8006660 <UART_SetConfig+0xc48>
 80065fe:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006602:	f04f 0400 	mov.w	r4, #0
 8006606:	e02b      	b.n	8006660 <UART_SetConfig+0xc48>
 8006608:	f04f 0320 	mov.w	r3, #32
 800660c:	f04f 0400 	mov.w	r4, #0
 8006610:	e026      	b.n	8006660 <UART_SetConfig+0xc48>
 8006612:	f04f 0310 	mov.w	r3, #16
 8006616:	f04f 0400 	mov.w	r4, #0
 800661a:	e021      	b.n	8006660 <UART_SetConfig+0xc48>
 800661c:	f04f 030c 	mov.w	r3, #12
 8006620:	f04f 0400 	mov.w	r4, #0
 8006624:	e01c      	b.n	8006660 <UART_SetConfig+0xc48>
 8006626:	f04f 030a 	mov.w	r3, #10
 800662a:	f04f 0400 	mov.w	r4, #0
 800662e:	e017      	b.n	8006660 <UART_SetConfig+0xc48>
 8006630:	f04f 0308 	mov.w	r3, #8
 8006634:	f04f 0400 	mov.w	r4, #0
 8006638:	e012      	b.n	8006660 <UART_SetConfig+0xc48>
 800663a:	f04f 0306 	mov.w	r3, #6
 800663e:	f04f 0400 	mov.w	r4, #0
 8006642:	e00d      	b.n	8006660 <UART_SetConfig+0xc48>
 8006644:	f04f 0304 	mov.w	r3, #4
 8006648:	f04f 0400 	mov.w	r4, #0
 800664c:	e008      	b.n	8006660 <UART_SetConfig+0xc48>
 800664e:	f04f 0302 	mov.w	r3, #2
 8006652:	f04f 0400 	mov.w	r4, #0
 8006656:	e003      	b.n	8006660 <UART_SetConfig+0xc48>
 8006658:	f04f 0301 	mov.w	r3, #1
 800665c:	f04f 0400 	mov.w	r4, #0
 8006660:	461a      	mov	r2, r3
 8006662:	4623      	mov	r3, r4
 8006664:	f7f9 fe38 	bl	80002d8 <__aeabi_uldivmod>
 8006668:	4603      	mov	r3, r0
 800666a:	460c      	mov	r4, r1
 800666c:	4619      	mov	r1, r3
 800666e:	4622      	mov	r2, r4
 8006670:	f04f 0300 	mov.w	r3, #0
 8006674:	f04f 0400 	mov.w	r4, #0
 8006678:	0214      	lsls	r4, r2, #8
 800667a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800667e:	020b      	lsls	r3, r1, #8
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	6852      	ldr	r2, [r2, #4]
 8006684:	0852      	lsrs	r2, r2, #1
 8006686:	4611      	mov	r1, r2
 8006688:	f04f 0200 	mov.w	r2, #0
 800668c:	eb13 0b01 	adds.w	fp, r3, r1
 8006690:	eb44 0c02 	adc.w	ip, r4, r2
 8006694:	4658      	mov	r0, fp
 8006696:	4661      	mov	r1, ip
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f04f 0400 	mov.w	r4, #0
 80066a0:	461a      	mov	r2, r3
 80066a2:	4623      	mov	r3, r4
 80066a4:	f7f9 fe18 	bl	80002d8 <__aeabi_uldivmod>
 80066a8:	4603      	mov	r3, r0
 80066aa:	460c      	mov	r4, r1
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80066ae:	e389      	b.n	8006dc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b0:	f107 0318 	add.w	r3, r7, #24
 80066b4:	4618      	mov	r0, r3
 80066b6:	f7fd ffb1 	bl	800461c <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	4618      	mov	r0, r3
 80066be:	f04f 0100 	mov.w	r1, #0
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d067      	beq.n	800679a <UART_SetConfig+0xd82>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ce:	2b01      	cmp	r3, #1
 80066d0:	d05e      	beq.n	8006790 <UART_SetConfig+0xd78>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d055      	beq.n	8006786 <UART_SetConfig+0xd6e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066de:	2b03      	cmp	r3, #3
 80066e0:	d04c      	beq.n	800677c <UART_SetConfig+0xd64>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	d043      	beq.n	8006772 <UART_SetConfig+0xd5a>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ee:	2b05      	cmp	r3, #5
 80066f0:	d03a      	beq.n	8006768 <UART_SetConfig+0xd50>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	2b06      	cmp	r3, #6
 80066f8:	d031      	beq.n	800675e <UART_SetConfig+0xd46>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fe:	2b07      	cmp	r3, #7
 8006700:	d028      	beq.n	8006754 <UART_SetConfig+0xd3c>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	2b08      	cmp	r3, #8
 8006708:	d01f      	beq.n	800674a <UART_SetConfig+0xd32>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	2b09      	cmp	r3, #9
 8006710:	d016      	beq.n	8006740 <UART_SetConfig+0xd28>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006716:	2b0a      	cmp	r3, #10
 8006718:	d00d      	beq.n	8006736 <UART_SetConfig+0xd1e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671e:	2b0b      	cmp	r3, #11
 8006720:	d104      	bne.n	800672c <UART_SetConfig+0xd14>
 8006722:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006726:	f04f 0400 	mov.w	r4, #0
 800672a:	e03a      	b.n	80067a2 <UART_SetConfig+0xd8a>
 800672c:	f04f 0301 	mov.w	r3, #1
 8006730:	f04f 0400 	mov.w	r4, #0
 8006734:	e035      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006736:	f04f 0380 	mov.w	r3, #128	; 0x80
 800673a:	f04f 0400 	mov.w	r4, #0
 800673e:	e030      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006740:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006744:	f04f 0400 	mov.w	r4, #0
 8006748:	e02b      	b.n	80067a2 <UART_SetConfig+0xd8a>
 800674a:	f04f 0320 	mov.w	r3, #32
 800674e:	f04f 0400 	mov.w	r4, #0
 8006752:	e026      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006754:	f04f 0310 	mov.w	r3, #16
 8006758:	f04f 0400 	mov.w	r4, #0
 800675c:	e021      	b.n	80067a2 <UART_SetConfig+0xd8a>
 800675e:	f04f 030c 	mov.w	r3, #12
 8006762:	f04f 0400 	mov.w	r4, #0
 8006766:	e01c      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006768:	f04f 030a 	mov.w	r3, #10
 800676c:	f04f 0400 	mov.w	r4, #0
 8006770:	e017      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006772:	f04f 0308 	mov.w	r3, #8
 8006776:	f04f 0400 	mov.w	r4, #0
 800677a:	e012      	b.n	80067a2 <UART_SetConfig+0xd8a>
 800677c:	f04f 0306 	mov.w	r3, #6
 8006780:	f04f 0400 	mov.w	r4, #0
 8006784:	e00d      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006786:	f04f 0304 	mov.w	r3, #4
 800678a:	f04f 0400 	mov.w	r4, #0
 800678e:	e008      	b.n	80067a2 <UART_SetConfig+0xd8a>
 8006790:	f04f 0302 	mov.w	r3, #2
 8006794:	f04f 0400 	mov.w	r4, #0
 8006798:	e003      	b.n	80067a2 <UART_SetConfig+0xd8a>
 800679a:	f04f 0301 	mov.w	r3, #1
 800679e:	f04f 0400 	mov.w	r4, #0
 80067a2:	461a      	mov	r2, r3
 80067a4:	4623      	mov	r3, r4
 80067a6:	f7f9 fd97 	bl	80002d8 <__aeabi_uldivmod>
 80067aa:	4603      	mov	r3, r0
 80067ac:	460c      	mov	r4, r1
 80067ae:	4619      	mov	r1, r3
 80067b0:	4622      	mov	r2, r4
 80067b2:	f04f 0300 	mov.w	r3, #0
 80067b6:	f04f 0400 	mov.w	r4, #0
 80067ba:	0214      	lsls	r4, r2, #8
 80067bc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80067c0:	020b      	lsls	r3, r1, #8
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	6852      	ldr	r2, [r2, #4]
 80067c6:	0852      	lsrs	r2, r2, #1
 80067c8:	4611      	mov	r1, r2
 80067ca:	f04f 0200 	mov.w	r2, #0
 80067ce:	eb13 0b01 	adds.w	fp, r3, r1
 80067d2:	eb44 0c02 	adc.w	ip, r4, r2
 80067d6:	4658      	mov	r0, fp
 80067d8:	4661      	mov	r1, ip
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	461a      	mov	r2, r3
 80067e4:	4623      	mov	r3, r4
 80067e6:	f7f9 fd77 	bl	80002d8 <__aeabi_uldivmod>
 80067ea:	4603      	mov	r3, r0
 80067ec:	460c      	mov	r4, r1
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80067f0:	e2e8      	b.n	8006dc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80067f2:	f107 030c 	add.w	r3, r7, #12
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7fe f85c 	bl	80048b4 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	4618      	mov	r0, r3
 8006800:	f04f 0100 	mov.w	r1, #0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006808:	2b00      	cmp	r3, #0
 800680a:	d067      	beq.n	80068dc <UART_SetConfig+0xec4>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	2b01      	cmp	r3, #1
 8006812:	d05e      	beq.n	80068d2 <UART_SetConfig+0xeba>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	2b02      	cmp	r3, #2
 800681a:	d055      	beq.n	80068c8 <UART_SetConfig+0xeb0>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	2b03      	cmp	r3, #3
 8006822:	d04c      	beq.n	80068be <UART_SetConfig+0xea6>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006828:	2b04      	cmp	r3, #4
 800682a:	d043      	beq.n	80068b4 <UART_SetConfig+0xe9c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	2b05      	cmp	r3, #5
 8006832:	d03a      	beq.n	80068aa <UART_SetConfig+0xe92>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006838:	2b06      	cmp	r3, #6
 800683a:	d031      	beq.n	80068a0 <UART_SetConfig+0xe88>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	2b07      	cmp	r3, #7
 8006842:	d028      	beq.n	8006896 <UART_SetConfig+0xe7e>
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006848:	2b08      	cmp	r3, #8
 800684a:	d01f      	beq.n	800688c <UART_SetConfig+0xe74>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	2b09      	cmp	r3, #9
 8006852:	d016      	beq.n	8006882 <UART_SetConfig+0xe6a>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b0a      	cmp	r3, #10
 800685a:	d00d      	beq.n	8006878 <UART_SetConfig+0xe60>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	2b0b      	cmp	r3, #11
 8006862:	d104      	bne.n	800686e <UART_SetConfig+0xe56>
 8006864:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006868:	f04f 0400 	mov.w	r4, #0
 800686c:	e03a      	b.n	80068e4 <UART_SetConfig+0xecc>
 800686e:	f04f 0301 	mov.w	r3, #1
 8006872:	f04f 0400 	mov.w	r4, #0
 8006876:	e035      	b.n	80068e4 <UART_SetConfig+0xecc>
 8006878:	f04f 0380 	mov.w	r3, #128	; 0x80
 800687c:	f04f 0400 	mov.w	r4, #0
 8006880:	e030      	b.n	80068e4 <UART_SetConfig+0xecc>
 8006882:	f04f 0340 	mov.w	r3, #64	; 0x40
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	e02b      	b.n	80068e4 <UART_SetConfig+0xecc>
 800688c:	f04f 0320 	mov.w	r3, #32
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	e026      	b.n	80068e4 <UART_SetConfig+0xecc>
 8006896:	f04f 0310 	mov.w	r3, #16
 800689a:	f04f 0400 	mov.w	r4, #0
 800689e:	e021      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068a0:	f04f 030c 	mov.w	r3, #12
 80068a4:	f04f 0400 	mov.w	r4, #0
 80068a8:	e01c      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068aa:	f04f 030a 	mov.w	r3, #10
 80068ae:	f04f 0400 	mov.w	r4, #0
 80068b2:	e017      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068b4:	f04f 0308 	mov.w	r3, #8
 80068b8:	f04f 0400 	mov.w	r4, #0
 80068bc:	e012      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068be:	f04f 0306 	mov.w	r3, #6
 80068c2:	f04f 0400 	mov.w	r4, #0
 80068c6:	e00d      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068c8:	f04f 0304 	mov.w	r3, #4
 80068cc:	f04f 0400 	mov.w	r4, #0
 80068d0:	e008      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068d2:	f04f 0302 	mov.w	r3, #2
 80068d6:	f04f 0400 	mov.w	r4, #0
 80068da:	e003      	b.n	80068e4 <UART_SetConfig+0xecc>
 80068dc:	f04f 0301 	mov.w	r3, #1
 80068e0:	f04f 0400 	mov.w	r4, #0
 80068e4:	461a      	mov	r2, r3
 80068e6:	4623      	mov	r3, r4
 80068e8:	f7f9 fcf6 	bl	80002d8 <__aeabi_uldivmod>
 80068ec:	4603      	mov	r3, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	4619      	mov	r1, r3
 80068f2:	4622      	mov	r2, r4
 80068f4:	f04f 0300 	mov.w	r3, #0
 80068f8:	f04f 0400 	mov.w	r4, #0
 80068fc:	0214      	lsls	r4, r2, #8
 80068fe:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006902:	020b      	lsls	r3, r1, #8
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	6852      	ldr	r2, [r2, #4]
 8006908:	0852      	lsrs	r2, r2, #1
 800690a:	4611      	mov	r1, r2
 800690c:	f04f 0200 	mov.w	r2, #0
 8006910:	eb13 0b01 	adds.w	fp, r3, r1
 8006914:	eb44 0c02 	adc.w	ip, r4, r2
 8006918:	4658      	mov	r0, fp
 800691a:	4661      	mov	r1, ip
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f04f 0400 	mov.w	r4, #0
 8006924:	461a      	mov	r2, r3
 8006926:	4623      	mov	r3, r4
 8006928:	f7f9 fcd6 	bl	80002d8 <__aeabi_uldivmod>
 800692c:	4603      	mov	r3, r0
 800692e:	460c      	mov	r4, r1
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006932:	e247      	b.n	8006dc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006934:	4b96      	ldr	r3, [pc, #600]	; (8006b90 <UART_SetConfig+0x1178>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0320 	and.w	r3, r3, #32
 800693c:	2b00      	cmp	r3, #0
 800693e:	f000 80a3 	beq.w	8006a88 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006942:	4b93      	ldr	r3, [pc, #588]	; (8006b90 <UART_SetConfig+0x1178>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	08db      	lsrs	r3, r3, #3
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	4a91      	ldr	r2, [pc, #580]	; (8006b94 <UART_SetConfig+0x117c>)
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4618      	mov	r0, r3
 8006954:	f04f 0100 	mov.w	r1, #0
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695c:	2b00      	cmp	r3, #0
 800695e:	d067      	beq.n	8006a30 <UART_SetConfig+0x1018>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	2b01      	cmp	r3, #1
 8006966:	d05e      	beq.n	8006a26 <UART_SetConfig+0x100e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696c:	2b02      	cmp	r3, #2
 800696e:	d055      	beq.n	8006a1c <UART_SetConfig+0x1004>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006974:	2b03      	cmp	r3, #3
 8006976:	d04c      	beq.n	8006a12 <UART_SetConfig+0xffa>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697c:	2b04      	cmp	r3, #4
 800697e:	d043      	beq.n	8006a08 <UART_SetConfig+0xff0>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006984:	2b05      	cmp	r3, #5
 8006986:	d03a      	beq.n	80069fe <UART_SetConfig+0xfe6>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698c:	2b06      	cmp	r3, #6
 800698e:	d031      	beq.n	80069f4 <UART_SetConfig+0xfdc>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006994:	2b07      	cmp	r3, #7
 8006996:	d028      	beq.n	80069ea <UART_SetConfig+0xfd2>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699c:	2b08      	cmp	r3, #8
 800699e:	d01f      	beq.n	80069e0 <UART_SetConfig+0xfc8>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a4:	2b09      	cmp	r3, #9
 80069a6:	d016      	beq.n	80069d6 <UART_SetConfig+0xfbe>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ac:	2b0a      	cmp	r3, #10
 80069ae:	d00d      	beq.n	80069cc <UART_SetConfig+0xfb4>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b4:	2b0b      	cmp	r3, #11
 80069b6:	d104      	bne.n	80069c2 <UART_SetConfig+0xfaa>
 80069b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069bc:	f04f 0400 	mov.w	r4, #0
 80069c0:	e03a      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069c2:	f04f 0301 	mov.w	r3, #1
 80069c6:	f04f 0400 	mov.w	r4, #0
 80069ca:	e035      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069cc:	f04f 0380 	mov.w	r3, #128	; 0x80
 80069d0:	f04f 0400 	mov.w	r4, #0
 80069d4:	e030      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069d6:	f04f 0340 	mov.w	r3, #64	; 0x40
 80069da:	f04f 0400 	mov.w	r4, #0
 80069de:	e02b      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069e0:	f04f 0320 	mov.w	r3, #32
 80069e4:	f04f 0400 	mov.w	r4, #0
 80069e8:	e026      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069ea:	f04f 0310 	mov.w	r3, #16
 80069ee:	f04f 0400 	mov.w	r4, #0
 80069f2:	e021      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069f4:	f04f 030c 	mov.w	r3, #12
 80069f8:	f04f 0400 	mov.w	r4, #0
 80069fc:	e01c      	b.n	8006a38 <UART_SetConfig+0x1020>
 80069fe:	f04f 030a 	mov.w	r3, #10
 8006a02:	f04f 0400 	mov.w	r4, #0
 8006a06:	e017      	b.n	8006a38 <UART_SetConfig+0x1020>
 8006a08:	f04f 0308 	mov.w	r3, #8
 8006a0c:	f04f 0400 	mov.w	r4, #0
 8006a10:	e012      	b.n	8006a38 <UART_SetConfig+0x1020>
 8006a12:	f04f 0306 	mov.w	r3, #6
 8006a16:	f04f 0400 	mov.w	r4, #0
 8006a1a:	e00d      	b.n	8006a38 <UART_SetConfig+0x1020>
 8006a1c:	f04f 0304 	mov.w	r3, #4
 8006a20:	f04f 0400 	mov.w	r4, #0
 8006a24:	e008      	b.n	8006a38 <UART_SetConfig+0x1020>
 8006a26:	f04f 0302 	mov.w	r3, #2
 8006a2a:	f04f 0400 	mov.w	r4, #0
 8006a2e:	e003      	b.n	8006a38 <UART_SetConfig+0x1020>
 8006a30:	f04f 0301 	mov.w	r3, #1
 8006a34:	f04f 0400 	mov.w	r4, #0
 8006a38:	461a      	mov	r2, r3
 8006a3a:	4623      	mov	r3, r4
 8006a3c:	f7f9 fc4c 	bl	80002d8 <__aeabi_uldivmod>
 8006a40:	4603      	mov	r3, r0
 8006a42:	460c      	mov	r4, r1
 8006a44:	4619      	mov	r1, r3
 8006a46:	4622      	mov	r2, r4
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	f04f 0400 	mov.w	r4, #0
 8006a50:	0214      	lsls	r4, r2, #8
 8006a52:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006a56:	020b      	lsls	r3, r1, #8
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	6852      	ldr	r2, [r2, #4]
 8006a5c:	0852      	lsrs	r2, r2, #1
 8006a5e:	4611      	mov	r1, r2
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	eb13 0b01 	adds.w	fp, r3, r1
 8006a68:	eb44 0c02 	adc.w	ip, r4, r2
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	4661      	mov	r1, ip
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f04f 0400 	mov.w	r4, #0
 8006a78:	461a      	mov	r2, r3
 8006a7a:	4623      	mov	r3, r4
 8006a7c:	f7f9 fc2c 	bl	80002d8 <__aeabi_uldivmod>
 8006a80:	4603      	mov	r3, r0
 8006a82:	460c      	mov	r4, r1
 8006a84:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 8006a86:	e19d      	b.n	8006dc4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d05b      	beq.n	8006b48 <UART_SetConfig+0x1130>
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d053      	beq.n	8006b40 <UART_SetConfig+0x1128>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	2b02      	cmp	r3, #2
 8006a9e:	d04b      	beq.n	8006b38 <UART_SetConfig+0x1120>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aa4:	2b03      	cmp	r3, #3
 8006aa6:	d043      	beq.n	8006b30 <UART_SetConfig+0x1118>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d03b      	beq.n	8006b28 <UART_SetConfig+0x1110>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab4:	2b05      	cmp	r3, #5
 8006ab6:	d033      	beq.n	8006b20 <UART_SetConfig+0x1108>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abc:	2b06      	cmp	r3, #6
 8006abe:	d02b      	beq.n	8006b18 <UART_SetConfig+0x1100>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac4:	2b07      	cmp	r3, #7
 8006ac6:	d023      	beq.n	8006b10 <UART_SetConfig+0x10f8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006acc:	2b08      	cmp	r3, #8
 8006ace:	d01b      	beq.n	8006b08 <UART_SetConfig+0x10f0>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ad4:	2b09      	cmp	r3, #9
 8006ad6:	d013      	beq.n	8006b00 <UART_SetConfig+0x10e8>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006adc:	2b0a      	cmp	r3, #10
 8006ade:	d00b      	beq.n	8006af8 <UART_SetConfig+0x10e0>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ae4:	2b0b      	cmp	r3, #11
 8006ae6:	d103      	bne.n	8006af0 <UART_SetConfig+0x10d8>
 8006ae8:	4b2a      	ldr	r3, [pc, #168]	; (8006b94 <UART_SetConfig+0x117c>)
 8006aea:	f04f 0400 	mov.w	r4, #0
 8006aee:	e02e      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006af0:	4b29      	ldr	r3, [pc, #164]	; (8006b98 <UART_SetConfig+0x1180>)
 8006af2:	f04f 0403 	mov.w	r4, #3
 8006af6:	e02a      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006af8:	4b28      	ldr	r3, [pc, #160]	; (8006b9c <UART_SetConfig+0x1184>)
 8006afa:	f04f 0400 	mov.w	r4, #0
 8006afe:	e026      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b00:	4b27      	ldr	r3, [pc, #156]	; (8006ba0 <UART_SetConfig+0x1188>)
 8006b02:	f04f 0400 	mov.w	r4, #0
 8006b06:	e022      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b08:	4b26      	ldr	r3, [pc, #152]	; (8006ba4 <UART_SetConfig+0x118c>)
 8006b0a:	f04f 0400 	mov.w	r4, #0
 8006b0e:	e01e      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b10:	4b25      	ldr	r3, [pc, #148]	; (8006ba8 <UART_SetConfig+0x1190>)
 8006b12:	f04f 0400 	mov.w	r4, #0
 8006b16:	e01a      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b18:	a419      	add	r4, pc, #100	; (adr r4, 8006b80 <UART_SetConfig+0x1168>)
 8006b1a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b1e:	e016      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b20:	4b22      	ldr	r3, [pc, #136]	; (8006bac <UART_SetConfig+0x1194>)
 8006b22:	f04f 0400 	mov.w	r4, #0
 8006b26:	e012      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b28:	4b21      	ldr	r3, [pc, #132]	; (8006bb0 <UART_SetConfig+0x1198>)
 8006b2a:	f04f 0400 	mov.w	r4, #0
 8006b2e:	e00e      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b30:	a415      	add	r4, pc, #84	; (adr r4, 8006b88 <UART_SetConfig+0x1170>)
 8006b32:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006b36:	e00a      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b38:	4b1e      	ldr	r3, [pc, #120]	; (8006bb4 <UART_SetConfig+0x119c>)
 8006b3a:	f04f 0400 	mov.w	r4, #0
 8006b3e:	e006      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b40:	4b1d      	ldr	r3, [pc, #116]	; (8006bb8 <UART_SetConfig+0x11a0>)
 8006b42:	f04f 0401 	mov.w	r4, #1
 8006b46:	e002      	b.n	8006b4e <UART_SetConfig+0x1136>
 8006b48:	4b13      	ldr	r3, [pc, #76]	; (8006b98 <UART_SetConfig+0x1180>)
 8006b4a:	f04f 0403 	mov.w	r4, #3
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6852      	ldr	r2, [r2, #4]
 8006b52:	0852      	lsrs	r2, r2, #1
 8006b54:	4611      	mov	r1, r2
 8006b56:	f04f 0200 	mov.w	r2, #0
 8006b5a:	eb13 0b01 	adds.w	fp, r3, r1
 8006b5e:	eb44 0c02 	adc.w	ip, r4, r2
 8006b62:	4658      	mov	r0, fp
 8006b64:	4661      	mov	r1, ip
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	f04f 0400 	mov.w	r4, #0
 8006b6e:	461a      	mov	r2, r3
 8006b70:	4623      	mov	r3, r4
 8006b72:	f7f9 fbb1 	bl	80002d8 <__aeabi_uldivmod>
 8006b76:	4603      	mov	r3, r0
 8006b78:	460c      	mov	r4, r1
 8006b7a:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006b7c:	e122      	b.n	8006dc4 <UART_SetConfig+0x13ac>
 8006b7e:	bf00      	nop
 8006b80:	51615500 	.word	0x51615500
 8006b84:	00000000 	.word	0x00000000
 8006b88:	a2c2aa00 	.word	0xa2c2aa00
 8006b8c:	00000000 	.word	0x00000000
 8006b90:	58024400 	.word	0x58024400
 8006b94:	03d09000 	.word	0x03d09000
 8006b98:	d0900000 	.word	0xd0900000
 8006b9c:	07a12000 	.word	0x07a12000
 8006ba0:	0f424000 	.word	0x0f424000
 8006ba4:	1e848000 	.word	0x1e848000
 8006ba8:	3d090000 	.word	0x3d090000
 8006bac:	61a80000 	.word	0x61a80000
 8006bb0:	7a120000 	.word	0x7a120000
 8006bb4:	f4240000 	.word	0xf4240000
 8006bb8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05b      	beq.n	8006c7c <UART_SetConfig+0x1264>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d053      	beq.n	8006c74 <UART_SetConfig+0x125c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d04b      	beq.n	8006c6c <UART_SetConfig+0x1254>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd8:	2b03      	cmp	r3, #3
 8006bda:	d043      	beq.n	8006c64 <UART_SetConfig+0x124c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d03b      	beq.n	8006c5c <UART_SetConfig+0x1244>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d033      	beq.n	8006c54 <UART_SetConfig+0x123c>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b06      	cmp	r3, #6
 8006bf2:	d02b      	beq.n	8006c4c <UART_SetConfig+0x1234>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf8:	2b07      	cmp	r3, #7
 8006bfa:	d023      	beq.n	8006c44 <UART_SetConfig+0x122c>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	2b08      	cmp	r3, #8
 8006c02:	d01b      	beq.n	8006c3c <UART_SetConfig+0x1224>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	d013      	beq.n	8006c34 <UART_SetConfig+0x121c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c10:	2b0a      	cmp	r3, #10
 8006c12:	d00b      	beq.n	8006c2c <UART_SetConfig+0x1214>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c18:	2b0b      	cmp	r3, #11
 8006c1a:	d103      	bne.n	8006c24 <UART_SetConfig+0x120c>
 8006c1c:	4bc0      	ldr	r3, [pc, #768]	; (8006f20 <UART_SetConfig+0x1508>)
 8006c1e:	f04f 0400 	mov.w	r4, #0
 8006c22:	e02e      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c24:	4bbf      	ldr	r3, [pc, #764]	; (8006f24 <UART_SetConfig+0x150c>)
 8006c26:	f04f 0400 	mov.w	r4, #0
 8006c2a:	e02a      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c2c:	4bbe      	ldr	r3, [pc, #760]	; (8006f28 <UART_SetConfig+0x1510>)
 8006c2e:	f04f 0400 	mov.w	r4, #0
 8006c32:	e026      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c34:	4bbd      	ldr	r3, [pc, #756]	; (8006f2c <UART_SetConfig+0x1514>)
 8006c36:	f04f 0400 	mov.w	r4, #0
 8006c3a:	e022      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c3c:	4bbc      	ldr	r3, [pc, #752]	; (8006f30 <UART_SetConfig+0x1518>)
 8006c3e:	f04f 0400 	mov.w	r4, #0
 8006c42:	e01e      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c44:	4bbb      	ldr	r3, [pc, #748]	; (8006f34 <UART_SetConfig+0x151c>)
 8006c46:	f04f 0400 	mov.w	r4, #0
 8006c4a:	e01a      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c4c:	a4b0      	add	r4, pc, #704	; (adr r4, 8006f10 <UART_SetConfig+0x14f8>)
 8006c4e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006c52:	e016      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c54:	4bb8      	ldr	r3, [pc, #736]	; (8006f38 <UART_SetConfig+0x1520>)
 8006c56:	f04f 0400 	mov.w	r4, #0
 8006c5a:	e012      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c5c:	4bb7      	ldr	r3, [pc, #732]	; (8006f3c <UART_SetConfig+0x1524>)
 8006c5e:	f04f 0400 	mov.w	r4, #0
 8006c62:	e00e      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c64:	a4ac      	add	r4, pc, #688	; (adr r4, 8006f18 <UART_SetConfig+0x1500>)
 8006c66:	e9d4 3400 	ldrd	r3, r4, [r4]
 8006c6a:	e00a      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c6c:	4bb4      	ldr	r3, [pc, #720]	; (8006f40 <UART_SetConfig+0x1528>)
 8006c6e:	f04f 0400 	mov.w	r4, #0
 8006c72:	e006      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c74:	4bb3      	ldr	r3, [pc, #716]	; (8006f44 <UART_SetConfig+0x152c>)
 8006c76:	f04f 0400 	mov.w	r4, #0
 8006c7a:	e002      	b.n	8006c82 <UART_SetConfig+0x126a>
 8006c7c:	4ba9      	ldr	r3, [pc, #676]	; (8006f24 <UART_SetConfig+0x150c>)
 8006c7e:	f04f 0400 	mov.w	r4, #0
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	6852      	ldr	r2, [r2, #4]
 8006c86:	0852      	lsrs	r2, r2, #1
 8006c88:	4611      	mov	r1, r2
 8006c8a:	f04f 0200 	mov.w	r2, #0
 8006c8e:	eb13 0b01 	adds.w	fp, r3, r1
 8006c92:	eb44 0c02 	adc.w	ip, r4, r2
 8006c96:	4658      	mov	r0, fp
 8006c98:	4661      	mov	r1, ip
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f04f 0400 	mov.w	r4, #0
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	4623      	mov	r3, r4
 8006ca6:	f7f9 fb17 	bl	80002d8 <__aeabi_uldivmod>
 8006caa:	4603      	mov	r3, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006cb0:	e088      	b.n	8006dc4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d064      	beq.n	8006d84 <UART_SetConfig+0x136c>
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d05b      	beq.n	8006d7a <UART_SetConfig+0x1362>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d052      	beq.n	8006d70 <UART_SetConfig+0x1358>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cce:	2b03      	cmp	r3, #3
 8006cd0:	d04a      	beq.n	8006d68 <UART_SetConfig+0x1350>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d041      	beq.n	8006d5e <UART_SetConfig+0x1346>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d039      	beq.n	8006d56 <UART_SetConfig+0x133e>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b06      	cmp	r3, #6
 8006ce8:	d031      	beq.n	8006d4e <UART_SetConfig+0x1336>
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cee:	2b07      	cmp	r3, #7
 8006cf0:	d028      	beq.n	8006d44 <UART_SetConfig+0x132c>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d01f      	beq.n	8006d3a <UART_SetConfig+0x1322>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b09      	cmp	r3, #9
 8006d00:	d016      	beq.n	8006d30 <UART_SetConfig+0x1318>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d06:	2b0a      	cmp	r3, #10
 8006d08:	d00d      	beq.n	8006d26 <UART_SetConfig+0x130e>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0e:	2b0b      	cmp	r3, #11
 8006d10:	d104      	bne.n	8006d1c <UART_SetConfig+0x1304>
 8006d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d16:	f04f 0400 	mov.w	r4, #0
 8006d1a:	e037      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d1c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d20:	f04f 0400 	mov.w	r4, #0
 8006d24:	e032      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006d2a:	f04f 0400 	mov.w	r4, #0
 8006d2e:	e02d      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006d34:	f04f 0400 	mov.w	r4, #0
 8006d38:	e028      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006d3e:	f04f 0400 	mov.w	r4, #0
 8006d42:	e023      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d44:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006d48:	f04f 0400 	mov.w	r4, #0
 8006d4c:	e01e      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d4e:	4b7e      	ldr	r3, [pc, #504]	; (8006f48 <UART_SetConfig+0x1530>)
 8006d50:	f04f 0400 	mov.w	r4, #0
 8006d54:	e01a      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d56:	4b7d      	ldr	r3, [pc, #500]	; (8006f4c <UART_SetConfig+0x1534>)
 8006d58:	f04f 0400 	mov.w	r4, #0
 8006d5c:	e016      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d5e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d62:	f04f 0400 	mov.w	r4, #0
 8006d66:	e011      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d68:	4b79      	ldr	r3, [pc, #484]	; (8006f50 <UART_SetConfig+0x1538>)
 8006d6a:	f04f 0400 	mov.w	r4, #0
 8006d6e:	e00d      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d70:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006d74:	f04f 0400 	mov.w	r4, #0
 8006d78:	e008      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006d7e:	f04f 0400 	mov.w	r4, #0
 8006d82:	e003      	b.n	8006d8c <UART_SetConfig+0x1374>
 8006d84:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006d88:	f04f 0400 	mov.w	r4, #0
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	6852      	ldr	r2, [r2, #4]
 8006d90:	0852      	lsrs	r2, r2, #1
 8006d92:	4611      	mov	r1, r2
 8006d94:	f04f 0200 	mov.w	r2, #0
 8006d98:	eb13 0b01 	adds.w	fp, r3, r1
 8006d9c:	eb44 0c02 	adc.w	ip, r4, r2
 8006da0:	4658      	mov	r0, fp
 8006da2:	4661      	mov	r1, ip
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	f04f 0400 	mov.w	r4, #0
 8006dac:	461a      	mov	r2, r3
 8006dae:	4623      	mov	r3, r4
 8006db0:	f7f9 fa92 	bl	80002d8 <__aeabi_uldivmod>
 8006db4:	4603      	mov	r3, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8006dba:	e003      	b.n	8006dc4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8006dc2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dca:	d309      	bcc.n	8006de0 <UART_SetConfig+0x13c8>
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dd2:	d205      	bcs.n	8006de0 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dda:	60da      	str	r2, [r3, #12]
 8006ddc:	f000 bf85 	b.w	8007cea <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006de6:	f000 bf80 	b.w	8007cea <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	69db      	ldr	r3, [r3, #28]
 8006dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006df2:	f040 83da 	bne.w	80075aa <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8006df6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8006dfa:	2b40      	cmp	r3, #64	; 0x40
 8006dfc:	f200 83b3 	bhi.w	8007566 <UART_SetConfig+0x1b4e>
 8006e00:	a201      	add	r2, pc, #4	; (adr r2, 8006e08 <UART_SetConfig+0x13f0>)
 8006e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e06:	bf00      	nop
 8006e08:	08006f55 	.word	0x08006f55
 8006e0c:	0800700d 	.word	0x0800700d
 8006e10:	08007567 	.word	0x08007567
 8006e14:	08007567 	.word	0x08007567
 8006e18:	080070c5 	.word	0x080070c5
 8006e1c:	08007567 	.word	0x08007567
 8006e20:	08007567 	.word	0x08007567
 8006e24:	08007567 	.word	0x08007567
 8006e28:	08007181 	.word	0x08007181
 8006e2c:	08007567 	.word	0x08007567
 8006e30:	08007567 	.word	0x08007567
 8006e34:	08007567 	.word	0x08007567
 8006e38:	08007567 	.word	0x08007567
 8006e3c:	08007567 	.word	0x08007567
 8006e40:	08007567 	.word	0x08007567
 8006e44:	08007567 	.word	0x08007567
 8006e48:	0800723d 	.word	0x0800723d
 8006e4c:	08007567 	.word	0x08007567
 8006e50:	08007567 	.word	0x08007567
 8006e54:	08007567 	.word	0x08007567
 8006e58:	08007567 	.word	0x08007567
 8006e5c:	08007567 	.word	0x08007567
 8006e60:	08007567 	.word	0x08007567
 8006e64:	08007567 	.word	0x08007567
 8006e68:	08007567 	.word	0x08007567
 8006e6c:	08007567 	.word	0x08007567
 8006e70:	08007567 	.word	0x08007567
 8006e74:	08007567 	.word	0x08007567
 8006e78:	08007567 	.word	0x08007567
 8006e7c:	08007567 	.word	0x08007567
 8006e80:	08007567 	.word	0x08007567
 8006e84:	08007567 	.word	0x08007567
 8006e88:	080073af 	.word	0x080073af
 8006e8c:	08007567 	.word	0x08007567
 8006e90:	08007567 	.word	0x08007567
 8006e94:	08007567 	.word	0x08007567
 8006e98:	08007567 	.word	0x08007567
 8006e9c:	08007567 	.word	0x08007567
 8006ea0:	08007567 	.word	0x08007567
 8006ea4:	08007567 	.word	0x08007567
 8006ea8:	08007567 	.word	0x08007567
 8006eac:	08007567 	.word	0x08007567
 8006eb0:	08007567 	.word	0x08007567
 8006eb4:	08007567 	.word	0x08007567
 8006eb8:	08007567 	.word	0x08007567
 8006ebc:	08007567 	.word	0x08007567
 8006ec0:	08007567 	.word	0x08007567
 8006ec4:	08007567 	.word	0x08007567
 8006ec8:	08007567 	.word	0x08007567
 8006ecc:	08007567 	.word	0x08007567
 8006ed0:	08007567 	.word	0x08007567
 8006ed4:	08007567 	.word	0x08007567
 8006ed8:	08007567 	.word	0x08007567
 8006edc:	08007567 	.word	0x08007567
 8006ee0:	08007567 	.word	0x08007567
 8006ee4:	08007567 	.word	0x08007567
 8006ee8:	08007567 	.word	0x08007567
 8006eec:	08007567 	.word	0x08007567
 8006ef0:	08007567 	.word	0x08007567
 8006ef4:	08007567 	.word	0x08007567
 8006ef8:	08007567 	.word	0x08007567
 8006efc:	08007567 	.word	0x08007567
 8006f00:	08007567 	.word	0x08007567
 8006f04:	08007567 	.word	0x08007567
 8006f08:	080074a5 	.word	0x080074a5
 8006f0c:	f3af 8000 	nop.w
 8006f10:	05161500 	.word	0x05161500
 8006f14:	00000000 	.word	0x00000000
 8006f18:	0a2c2a00 	.word	0x0a2c2a00
 8006f1c:	00000000 	.word	0x00000000
 8006f20:	003d0900 	.word	0x003d0900
 8006f24:	3d090000 	.word	0x3d090000
 8006f28:	007a1200 	.word	0x007a1200
 8006f2c:	00f42400 	.word	0x00f42400
 8006f30:	01e84800 	.word	0x01e84800
 8006f34:	03d09000 	.word	0x03d09000
 8006f38:	061a8000 	.word	0x061a8000
 8006f3c:	07a12000 	.word	0x07a12000
 8006f40:	0f424000 	.word	0x0f424000
 8006f44:	1e848000 	.word	0x1e848000
 8006f48:	000aaa00 	.word	0x000aaa00
 8006f4c:	000ccc00 	.word	0x000ccc00
 8006f50:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f54:	f7fc fc42 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 8006f58:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d044      	beq.n	8006fec <UART_SetConfig+0x15d4>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d03e      	beq.n	8006fe8 <UART_SetConfig+0x15d0>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d038      	beq.n	8006fe4 <UART_SetConfig+0x15cc>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	d032      	beq.n	8006fe0 <UART_SetConfig+0x15c8>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	2b04      	cmp	r3, #4
 8006f80:	d02c      	beq.n	8006fdc <UART_SetConfig+0x15c4>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	2b05      	cmp	r3, #5
 8006f88:	d026      	beq.n	8006fd8 <UART_SetConfig+0x15c0>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	2b06      	cmp	r3, #6
 8006f90:	d020      	beq.n	8006fd4 <UART_SetConfig+0x15bc>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f96:	2b07      	cmp	r3, #7
 8006f98:	d01a      	beq.n	8006fd0 <UART_SetConfig+0x15b8>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f9e:	2b08      	cmp	r3, #8
 8006fa0:	d014      	beq.n	8006fcc <UART_SetConfig+0x15b4>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa6:	2b09      	cmp	r3, #9
 8006fa8:	d00e      	beq.n	8006fc8 <UART_SetConfig+0x15b0>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	2b0a      	cmp	r3, #10
 8006fb0:	d008      	beq.n	8006fc4 <UART_SetConfig+0x15ac>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	2b0b      	cmp	r3, #11
 8006fb8:	d102      	bne.n	8006fc0 <UART_SetConfig+0x15a8>
 8006fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fbe:	e016      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fc0:	2301      	movs	r3, #1
 8006fc2:	e014      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fc4:	2380      	movs	r3, #128	; 0x80
 8006fc6:	e012      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fc8:	2340      	movs	r3, #64	; 0x40
 8006fca:	e010      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fcc:	2320      	movs	r3, #32
 8006fce:	e00e      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	e00c      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	e00a      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fd8:	230a      	movs	r3, #10
 8006fda:	e008      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fdc:	2308      	movs	r3, #8
 8006fde:	e006      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fe0:	2306      	movs	r3, #6
 8006fe2:	e004      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fe4:	2304      	movs	r3, #4
 8006fe6:	e002      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e000      	b.n	8006fee <UART_SetConfig+0x15d6>
 8006fec:	2301      	movs	r3, #1
 8006fee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ff4:	005a      	lsls	r2, r3, #1
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	441a      	add	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	fbb2 f3f3 	udiv	r3, r2, r3
 8007006:	b29b      	uxth	r3, r3
 8007008:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800700a:	e2b0      	b.n	800756e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800700c:	f7fc fbfc 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 8007010:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007016:	2b00      	cmp	r3, #0
 8007018:	d044      	beq.n	80070a4 <UART_SetConfig+0x168c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800701e:	2b01      	cmp	r3, #1
 8007020:	d03e      	beq.n	80070a0 <UART_SetConfig+0x1688>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	2b02      	cmp	r3, #2
 8007028:	d038      	beq.n	800709c <UART_SetConfig+0x1684>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2b03      	cmp	r3, #3
 8007030:	d032      	beq.n	8007098 <UART_SetConfig+0x1680>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	2b04      	cmp	r3, #4
 8007038:	d02c      	beq.n	8007094 <UART_SetConfig+0x167c>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	2b05      	cmp	r3, #5
 8007040:	d026      	beq.n	8007090 <UART_SetConfig+0x1678>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	2b06      	cmp	r3, #6
 8007048:	d020      	beq.n	800708c <UART_SetConfig+0x1674>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2b07      	cmp	r3, #7
 8007050:	d01a      	beq.n	8007088 <UART_SetConfig+0x1670>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007056:	2b08      	cmp	r3, #8
 8007058:	d014      	beq.n	8007084 <UART_SetConfig+0x166c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705e:	2b09      	cmp	r3, #9
 8007060:	d00e      	beq.n	8007080 <UART_SetConfig+0x1668>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007066:	2b0a      	cmp	r3, #10
 8007068:	d008      	beq.n	800707c <UART_SetConfig+0x1664>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	2b0b      	cmp	r3, #11
 8007070:	d102      	bne.n	8007078 <UART_SetConfig+0x1660>
 8007072:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007076:	e016      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007078:	2301      	movs	r3, #1
 800707a:	e014      	b.n	80070a6 <UART_SetConfig+0x168e>
 800707c:	2380      	movs	r3, #128	; 0x80
 800707e:	e012      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007080:	2340      	movs	r3, #64	; 0x40
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007084:	2320      	movs	r3, #32
 8007086:	e00e      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007088:	2310      	movs	r3, #16
 800708a:	e00c      	b.n	80070a6 <UART_SetConfig+0x168e>
 800708c:	230c      	movs	r3, #12
 800708e:	e00a      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007090:	230a      	movs	r3, #10
 8007092:	e008      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007094:	2308      	movs	r3, #8
 8007096:	e006      	b.n	80070a6 <UART_SetConfig+0x168e>
 8007098:	2306      	movs	r3, #6
 800709a:	e004      	b.n	80070a6 <UART_SetConfig+0x168e>
 800709c:	2304      	movs	r3, #4
 800709e:	e002      	b.n	80070a6 <UART_SetConfig+0x168e>
 80070a0:	2302      	movs	r3, #2
 80070a2:	e000      	b.n	80070a6 <UART_SetConfig+0x168e>
 80070a4:	2301      	movs	r3, #1
 80070a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	005a      	lsls	r2, r3, #1
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	085b      	lsrs	r3, r3, #1
 80070b4:	441a      	add	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80070be:	b29b      	uxth	r3, r3
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80070c2:	e254      	b.n	800756e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070c4:	f107 0318 	add.w	r3, r7, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fd faa7 	bl	800461c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070ce:	69fa      	ldr	r2, [r7, #28]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d044      	beq.n	8007162 <UART_SetConfig+0x174a>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d03e      	beq.n	800715e <UART_SetConfig+0x1746>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	2b02      	cmp	r3, #2
 80070e6:	d038      	beq.n	800715a <UART_SetConfig+0x1742>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	d032      	beq.n	8007156 <UART_SetConfig+0x173e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f4:	2b04      	cmp	r3, #4
 80070f6:	d02c      	beq.n	8007152 <UART_SetConfig+0x173a>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fc:	2b05      	cmp	r3, #5
 80070fe:	d026      	beq.n	800714e <UART_SetConfig+0x1736>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007104:	2b06      	cmp	r3, #6
 8007106:	d020      	beq.n	800714a <UART_SetConfig+0x1732>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800710c:	2b07      	cmp	r3, #7
 800710e:	d01a      	beq.n	8007146 <UART_SetConfig+0x172e>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	2b08      	cmp	r3, #8
 8007116:	d014      	beq.n	8007142 <UART_SetConfig+0x172a>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	2b09      	cmp	r3, #9
 800711e:	d00e      	beq.n	800713e <UART_SetConfig+0x1726>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	2b0a      	cmp	r3, #10
 8007126:	d008      	beq.n	800713a <UART_SetConfig+0x1722>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712c:	2b0b      	cmp	r3, #11
 800712e:	d102      	bne.n	8007136 <UART_SetConfig+0x171e>
 8007130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007134:	e016      	b.n	8007164 <UART_SetConfig+0x174c>
 8007136:	2301      	movs	r3, #1
 8007138:	e014      	b.n	8007164 <UART_SetConfig+0x174c>
 800713a:	2380      	movs	r3, #128	; 0x80
 800713c:	e012      	b.n	8007164 <UART_SetConfig+0x174c>
 800713e:	2340      	movs	r3, #64	; 0x40
 8007140:	e010      	b.n	8007164 <UART_SetConfig+0x174c>
 8007142:	2320      	movs	r3, #32
 8007144:	e00e      	b.n	8007164 <UART_SetConfig+0x174c>
 8007146:	2310      	movs	r3, #16
 8007148:	e00c      	b.n	8007164 <UART_SetConfig+0x174c>
 800714a:	230c      	movs	r3, #12
 800714c:	e00a      	b.n	8007164 <UART_SetConfig+0x174c>
 800714e:	230a      	movs	r3, #10
 8007150:	e008      	b.n	8007164 <UART_SetConfig+0x174c>
 8007152:	2308      	movs	r3, #8
 8007154:	e006      	b.n	8007164 <UART_SetConfig+0x174c>
 8007156:	2306      	movs	r3, #6
 8007158:	e004      	b.n	8007164 <UART_SetConfig+0x174c>
 800715a:	2304      	movs	r3, #4
 800715c:	e002      	b.n	8007164 <UART_SetConfig+0x174c>
 800715e:	2302      	movs	r3, #2
 8007160:	e000      	b.n	8007164 <UART_SetConfig+0x174c>
 8007162:	2301      	movs	r3, #1
 8007164:	fbb2 f3f3 	udiv	r3, r2, r3
 8007168:	005a      	lsls	r2, r3, #1
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	085b      	lsrs	r3, r3, #1
 8007170:	441a      	add	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	fbb2 f3f3 	udiv	r3, r2, r3
 800717a:	b29b      	uxth	r3, r3
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800717e:	e1f6      	b.n	800756e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4618      	mov	r0, r3
 8007186:	f7fd fb95 	bl	80048b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d044      	beq.n	800721e <UART_SetConfig+0x1806>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007198:	2b01      	cmp	r3, #1
 800719a:	d03e      	beq.n	800721a <UART_SetConfig+0x1802>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d038      	beq.n	8007216 <UART_SetConfig+0x17fe>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d032      	beq.n	8007212 <UART_SetConfig+0x17fa>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b0:	2b04      	cmp	r3, #4
 80071b2:	d02c      	beq.n	800720e <UART_SetConfig+0x17f6>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	2b05      	cmp	r3, #5
 80071ba:	d026      	beq.n	800720a <UART_SetConfig+0x17f2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c0:	2b06      	cmp	r3, #6
 80071c2:	d020      	beq.n	8007206 <UART_SetConfig+0x17ee>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2b07      	cmp	r3, #7
 80071ca:	d01a      	beq.n	8007202 <UART_SetConfig+0x17ea>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d014      	beq.n	80071fe <UART_SetConfig+0x17e6>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071d8:	2b09      	cmp	r3, #9
 80071da:	d00e      	beq.n	80071fa <UART_SetConfig+0x17e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e0:	2b0a      	cmp	r3, #10
 80071e2:	d008      	beq.n	80071f6 <UART_SetConfig+0x17de>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e8:	2b0b      	cmp	r3, #11
 80071ea:	d102      	bne.n	80071f2 <UART_SetConfig+0x17da>
 80071ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80071f0:	e016      	b.n	8007220 <UART_SetConfig+0x1808>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e014      	b.n	8007220 <UART_SetConfig+0x1808>
 80071f6:	2380      	movs	r3, #128	; 0x80
 80071f8:	e012      	b.n	8007220 <UART_SetConfig+0x1808>
 80071fa:	2340      	movs	r3, #64	; 0x40
 80071fc:	e010      	b.n	8007220 <UART_SetConfig+0x1808>
 80071fe:	2320      	movs	r3, #32
 8007200:	e00e      	b.n	8007220 <UART_SetConfig+0x1808>
 8007202:	2310      	movs	r3, #16
 8007204:	e00c      	b.n	8007220 <UART_SetConfig+0x1808>
 8007206:	230c      	movs	r3, #12
 8007208:	e00a      	b.n	8007220 <UART_SetConfig+0x1808>
 800720a:	230a      	movs	r3, #10
 800720c:	e008      	b.n	8007220 <UART_SetConfig+0x1808>
 800720e:	2308      	movs	r3, #8
 8007210:	e006      	b.n	8007220 <UART_SetConfig+0x1808>
 8007212:	2306      	movs	r3, #6
 8007214:	e004      	b.n	8007220 <UART_SetConfig+0x1808>
 8007216:	2304      	movs	r3, #4
 8007218:	e002      	b.n	8007220 <UART_SetConfig+0x1808>
 800721a:	2302      	movs	r3, #2
 800721c:	e000      	b.n	8007220 <UART_SetConfig+0x1808>
 800721e:	2301      	movs	r3, #1
 8007220:	fbb2 f3f3 	udiv	r3, r2, r3
 8007224:	005a      	lsls	r2, r3, #1
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	085b      	lsrs	r3, r3, #1
 800722c:	441a      	add	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	fbb2 f3f3 	udiv	r3, r2, r3
 8007236:	b29b      	uxth	r3, r3
 8007238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800723a:	e198      	b.n	800756e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800723c:	4b87      	ldr	r3, [pc, #540]	; (800745c <UART_SetConfig+0x1a44>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f003 0320 	and.w	r3, r3, #32
 8007244:	2b00      	cmp	r3, #0
 8007246:	d05e      	beq.n	8007306 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007248:	4b84      	ldr	r3, [pc, #528]	; (800745c <UART_SetConfig+0x1a44>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	08db      	lsrs	r3, r3, #3
 800724e:	f003 0303 	and.w	r3, r3, #3
 8007252:	4a83      	ldr	r2, [pc, #524]	; (8007460 <UART_SetConfig+0x1a48>)
 8007254:	40da      	lsrs	r2, r3
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725a:	2b00      	cmp	r3, #0
 800725c:	d044      	beq.n	80072e8 <UART_SetConfig+0x18d0>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	2b01      	cmp	r3, #1
 8007264:	d03e      	beq.n	80072e4 <UART_SetConfig+0x18cc>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	2b02      	cmp	r3, #2
 800726c:	d038      	beq.n	80072e0 <UART_SetConfig+0x18c8>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007272:	2b03      	cmp	r3, #3
 8007274:	d032      	beq.n	80072dc <UART_SetConfig+0x18c4>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	2b04      	cmp	r3, #4
 800727c:	d02c      	beq.n	80072d8 <UART_SetConfig+0x18c0>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007282:	2b05      	cmp	r3, #5
 8007284:	d026      	beq.n	80072d4 <UART_SetConfig+0x18bc>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800728a:	2b06      	cmp	r3, #6
 800728c:	d020      	beq.n	80072d0 <UART_SetConfig+0x18b8>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007292:	2b07      	cmp	r3, #7
 8007294:	d01a      	beq.n	80072cc <UART_SetConfig+0x18b4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729a:	2b08      	cmp	r3, #8
 800729c:	d014      	beq.n	80072c8 <UART_SetConfig+0x18b0>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d00e      	beq.n	80072c4 <UART_SetConfig+0x18ac>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072aa:	2b0a      	cmp	r3, #10
 80072ac:	d008      	beq.n	80072c0 <UART_SetConfig+0x18a8>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b2:	2b0b      	cmp	r3, #11
 80072b4:	d102      	bne.n	80072bc <UART_SetConfig+0x18a4>
 80072b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80072ba:	e016      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072bc:	2301      	movs	r3, #1
 80072be:	e014      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072c0:	2380      	movs	r3, #128	; 0x80
 80072c2:	e012      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072c4:	2340      	movs	r3, #64	; 0x40
 80072c6:	e010      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072c8:	2320      	movs	r3, #32
 80072ca:	e00e      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072cc:	2310      	movs	r3, #16
 80072ce:	e00c      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072d0:	230c      	movs	r3, #12
 80072d2:	e00a      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072d4:	230a      	movs	r3, #10
 80072d6:	e008      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072d8:	2308      	movs	r3, #8
 80072da:	e006      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072dc:	2306      	movs	r3, #6
 80072de:	e004      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072e0:	2304      	movs	r3, #4
 80072e2:	e002      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072e4:	2302      	movs	r3, #2
 80072e6:	e000      	b.n	80072ea <UART_SetConfig+0x18d2>
 80072e8:	2301      	movs	r3, #1
 80072ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ee:	005a      	lsls	r2, r3, #1
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	441a      	add	r2, r3
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007300:	b29b      	uxth	r3, r3
 8007302:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007304:	e133      	b.n	800756e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	2b00      	cmp	r3, #0
 800730c:	d043      	beq.n	8007396 <UART_SetConfig+0x197e>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007312:	2b01      	cmp	r3, #1
 8007314:	d03d      	beq.n	8007392 <UART_SetConfig+0x197a>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731a:	2b02      	cmp	r3, #2
 800731c:	d037      	beq.n	800738e <UART_SetConfig+0x1976>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	2b03      	cmp	r3, #3
 8007324:	d031      	beq.n	800738a <UART_SetConfig+0x1972>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732a:	2b04      	cmp	r3, #4
 800732c:	d02b      	beq.n	8007386 <UART_SetConfig+0x196e>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007332:	2b05      	cmp	r3, #5
 8007334:	d025      	beq.n	8007382 <UART_SetConfig+0x196a>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800733a:	2b06      	cmp	r3, #6
 800733c:	d01f      	beq.n	800737e <UART_SetConfig+0x1966>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007342:	2b07      	cmp	r3, #7
 8007344:	d019      	beq.n	800737a <UART_SetConfig+0x1962>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734a:	2b08      	cmp	r3, #8
 800734c:	d013      	beq.n	8007376 <UART_SetConfig+0x195e>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007352:	2b09      	cmp	r3, #9
 8007354:	d00d      	beq.n	8007372 <UART_SetConfig+0x195a>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800735a:	2b0a      	cmp	r3, #10
 800735c:	d007      	beq.n	800736e <UART_SetConfig+0x1956>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007362:	2b0b      	cmp	r3, #11
 8007364:	d101      	bne.n	800736a <UART_SetConfig+0x1952>
 8007366:	4b3f      	ldr	r3, [pc, #252]	; (8007464 <UART_SetConfig+0x1a4c>)
 8007368:	e016      	b.n	8007398 <UART_SetConfig+0x1980>
 800736a:	4b3f      	ldr	r3, [pc, #252]	; (8007468 <UART_SetConfig+0x1a50>)
 800736c:	e014      	b.n	8007398 <UART_SetConfig+0x1980>
 800736e:	4b3f      	ldr	r3, [pc, #252]	; (800746c <UART_SetConfig+0x1a54>)
 8007370:	e012      	b.n	8007398 <UART_SetConfig+0x1980>
 8007372:	4b3f      	ldr	r3, [pc, #252]	; (8007470 <UART_SetConfig+0x1a58>)
 8007374:	e010      	b.n	8007398 <UART_SetConfig+0x1980>
 8007376:	4b3f      	ldr	r3, [pc, #252]	; (8007474 <UART_SetConfig+0x1a5c>)
 8007378:	e00e      	b.n	8007398 <UART_SetConfig+0x1980>
 800737a:	4b3f      	ldr	r3, [pc, #252]	; (8007478 <UART_SetConfig+0x1a60>)
 800737c:	e00c      	b.n	8007398 <UART_SetConfig+0x1980>
 800737e:	4b3f      	ldr	r3, [pc, #252]	; (800747c <UART_SetConfig+0x1a64>)
 8007380:	e00a      	b.n	8007398 <UART_SetConfig+0x1980>
 8007382:	4b3f      	ldr	r3, [pc, #252]	; (8007480 <UART_SetConfig+0x1a68>)
 8007384:	e008      	b.n	8007398 <UART_SetConfig+0x1980>
 8007386:	4b3f      	ldr	r3, [pc, #252]	; (8007484 <UART_SetConfig+0x1a6c>)
 8007388:	e006      	b.n	8007398 <UART_SetConfig+0x1980>
 800738a:	4b3f      	ldr	r3, [pc, #252]	; (8007488 <UART_SetConfig+0x1a70>)
 800738c:	e004      	b.n	8007398 <UART_SetConfig+0x1980>
 800738e:	4b3f      	ldr	r3, [pc, #252]	; (800748c <UART_SetConfig+0x1a74>)
 8007390:	e002      	b.n	8007398 <UART_SetConfig+0x1980>
 8007392:	4b33      	ldr	r3, [pc, #204]	; (8007460 <UART_SetConfig+0x1a48>)
 8007394:	e000      	b.n	8007398 <UART_SetConfig+0x1980>
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <UART_SetConfig+0x1a50>)
 8007398:	687a      	ldr	r2, [r7, #4]
 800739a:	6852      	ldr	r2, [r2, #4]
 800739c:	0852      	lsrs	r2, r2, #1
 800739e:	441a      	add	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80073a8:	b29b      	uxth	r3, r3
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ac:	e0df      	b.n	800756e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d045      	beq.n	8007442 <UART_SetConfig+0x1a2a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d03f      	beq.n	800743e <UART_SetConfig+0x1a26>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c2:	2b02      	cmp	r3, #2
 80073c4:	d039      	beq.n	800743a <UART_SetConfig+0x1a22>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ca:	2b03      	cmp	r3, #3
 80073cc:	d033      	beq.n	8007436 <UART_SetConfig+0x1a1e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d02d      	beq.n	8007432 <UART_SetConfig+0x1a1a>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	2b05      	cmp	r3, #5
 80073dc:	d027      	beq.n	800742e <UART_SetConfig+0x1a16>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073e2:	2b06      	cmp	r3, #6
 80073e4:	d021      	beq.n	800742a <UART_SetConfig+0x1a12>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ea:	2b07      	cmp	r3, #7
 80073ec:	d01b      	beq.n	8007426 <UART_SetConfig+0x1a0e>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f2:	2b08      	cmp	r3, #8
 80073f4:	d015      	beq.n	8007422 <UART_SetConfig+0x1a0a>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	2b09      	cmp	r3, #9
 80073fc:	d00f      	beq.n	800741e <UART_SetConfig+0x1a06>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	2b0a      	cmp	r3, #10
 8007404:	d008      	beq.n	8007418 <UART_SetConfig+0x1a00>
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740a:	2b0b      	cmp	r3, #11
 800740c:	d102      	bne.n	8007414 <UART_SetConfig+0x19fc>
 800740e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007412:	e017      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007414:	4b18      	ldr	r3, [pc, #96]	; (8007478 <UART_SetConfig+0x1a60>)
 8007416:	e015      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007418:	f24f 4324 	movw	r3, #62500	; 0xf424
 800741c:	e012      	b.n	8007444 <UART_SetConfig+0x1a2c>
 800741e:	4b1c      	ldr	r3, [pc, #112]	; (8007490 <UART_SetConfig+0x1a78>)
 8007420:	e010      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007422:	4b1c      	ldr	r3, [pc, #112]	; (8007494 <UART_SetConfig+0x1a7c>)
 8007424:	e00e      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007426:	4b0f      	ldr	r3, [pc, #60]	; (8007464 <UART_SetConfig+0x1a4c>)
 8007428:	e00c      	b.n	8007444 <UART_SetConfig+0x1a2c>
 800742a:	4b1b      	ldr	r3, [pc, #108]	; (8007498 <UART_SetConfig+0x1a80>)
 800742c:	e00a      	b.n	8007444 <UART_SetConfig+0x1a2c>
 800742e:	4b1b      	ldr	r3, [pc, #108]	; (800749c <UART_SetConfig+0x1a84>)
 8007430:	e008      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007432:	4b0e      	ldr	r3, [pc, #56]	; (800746c <UART_SetConfig+0x1a54>)
 8007434:	e006      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007436:	4b1a      	ldr	r3, [pc, #104]	; (80074a0 <UART_SetConfig+0x1a88>)
 8007438:	e004      	b.n	8007444 <UART_SetConfig+0x1a2c>
 800743a:	4b0d      	ldr	r3, [pc, #52]	; (8007470 <UART_SetConfig+0x1a58>)
 800743c:	e002      	b.n	8007444 <UART_SetConfig+0x1a2c>
 800743e:	4b0d      	ldr	r3, [pc, #52]	; (8007474 <UART_SetConfig+0x1a5c>)
 8007440:	e000      	b.n	8007444 <UART_SetConfig+0x1a2c>
 8007442:	4b0d      	ldr	r3, [pc, #52]	; (8007478 <UART_SetConfig+0x1a60>)
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	6852      	ldr	r2, [r2, #4]
 8007448:	0852      	lsrs	r2, r2, #1
 800744a:	441a      	add	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	fbb2 f3f3 	udiv	r3, r2, r3
 8007454:	b29b      	uxth	r3, r3
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007458:	e089      	b.n	800756e <UART_SetConfig+0x1b56>
 800745a:	bf00      	nop
 800745c:	58024400 	.word	0x58024400
 8007460:	03d09000 	.word	0x03d09000
 8007464:	0007a120 	.word	0x0007a120
 8007468:	07a12000 	.word	0x07a12000
 800746c:	000f4240 	.word	0x000f4240
 8007470:	001e8480 	.word	0x001e8480
 8007474:	003d0900 	.word	0x003d0900
 8007478:	007a1200 	.word	0x007a1200
 800747c:	00a2c2aa 	.word	0x00a2c2aa
 8007480:	00c35000 	.word	0x00c35000
 8007484:	00f42400 	.word	0x00f42400
 8007488:	01458554 	.word	0x01458554
 800748c:	01e84800 	.word	0x01e84800
 8007490:	0001e848 	.word	0x0001e848
 8007494:	0003d090 	.word	0x0003d090
 8007498:	000a2c2a 	.word	0x000a2c2a
 800749c:	000c3500 	.word	0x000c3500
 80074a0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d04f      	beq.n	800754c <UART_SetConfig+0x1b34>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d048      	beq.n	8007546 <UART_SetConfig+0x1b2e>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d041      	beq.n	8007540 <UART_SetConfig+0x1b28>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	2b03      	cmp	r3, #3
 80074c2:	d03a      	beq.n	800753a <UART_SetConfig+0x1b22>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	2b04      	cmp	r3, #4
 80074ca:	d033      	beq.n	8007534 <UART_SetConfig+0x1b1c>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d0:	2b05      	cmp	r3, #5
 80074d2:	d02c      	beq.n	800752e <UART_SetConfig+0x1b16>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074d8:	2b06      	cmp	r3, #6
 80074da:	d025      	beq.n	8007528 <UART_SetConfig+0x1b10>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e0:	2b07      	cmp	r3, #7
 80074e2:	d01e      	beq.n	8007522 <UART_SetConfig+0x1b0a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d017      	beq.n	800751c <UART_SetConfig+0x1b04>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f0:	2b09      	cmp	r3, #9
 80074f2:	d010      	beq.n	8007516 <UART_SetConfig+0x1afe>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074f8:	2b0a      	cmp	r3, #10
 80074fa:	d009      	beq.n	8007510 <UART_SetConfig+0x1af8>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007500:	2b0b      	cmp	r3, #11
 8007502:	d102      	bne.n	800750a <UART_SetConfig+0x1af2>
 8007504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007508:	e022      	b.n	8007550 <UART_SetConfig+0x1b38>
 800750a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800750e:	e01f      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007514:	e01c      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007516:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800751a:	e019      	b.n	8007550 <UART_SetConfig+0x1b38>
 800751c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007520:	e016      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007526:	e013      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007528:	f241 5354 	movw	r3, #5460	; 0x1554
 800752c:	e010      	b.n	8007550 <UART_SetConfig+0x1b38>
 800752e:	f641 1398 	movw	r3, #6552	; 0x1998
 8007532:	e00d      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007538:	e00a      	b.n	8007550 <UART_SetConfig+0x1b38>
 800753a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800753e:	e007      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007540:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007544:	e004      	b.n	8007550 <UART_SetConfig+0x1b38>
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	e001      	b.n	8007550 <UART_SetConfig+0x1b38>
 800754c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6852      	ldr	r2, [r2, #4]
 8007554:	0852      	lsrs	r2, r2, #1
 8007556:	441a      	add	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007560:	b29b      	uxth	r3, r3
 8007562:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007564:	e003      	b.n	800756e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 800756c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800756e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007570:	2b0f      	cmp	r3, #15
 8007572:	d916      	bls.n	80075a2 <UART_SetConfig+0x1b8a>
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800757a:	d212      	bcs.n	80075a2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800757c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757e:	b29b      	uxth	r3, r3
 8007580:	f023 030f 	bic.w	r3, r3, #15
 8007584:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007586:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007588:	085b      	lsrs	r3, r3, #1
 800758a:	b29b      	uxth	r3, r3
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	b29a      	uxth	r2, r3
 8007592:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007594:	4313      	orrs	r3, r2
 8007596:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800759e:	60da      	str	r2, [r3, #12]
 80075a0:	e3a3      	b.n	8007cea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80075a8:	e39f      	b.n	8007cea <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80075aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80075ae:	2b40      	cmp	r3, #64	; 0x40
 80075b0:	f200 8388 	bhi.w	8007cc4 <UART_SetConfig+0x22ac>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <UART_SetConfig+0x1ba4>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080076c1 	.word	0x080076c1
 80075c0:	08007777 	.word	0x08007777
 80075c4:	08007cc5 	.word	0x08007cc5
 80075c8:	08007cc5 	.word	0x08007cc5
 80075cc:	0800782d 	.word	0x0800782d
 80075d0:	08007cc5 	.word	0x08007cc5
 80075d4:	08007cc5 	.word	0x08007cc5
 80075d8:	08007cc5 	.word	0x08007cc5
 80075dc:	080078e7 	.word	0x080078e7
 80075e0:	08007cc5 	.word	0x08007cc5
 80075e4:	08007cc5 	.word	0x08007cc5
 80075e8:	08007cc5 	.word	0x08007cc5
 80075ec:	08007cc5 	.word	0x08007cc5
 80075f0:	08007cc5 	.word	0x08007cc5
 80075f4:	08007cc5 	.word	0x08007cc5
 80075f8:	08007cc5 	.word	0x08007cc5
 80075fc:	080079a1 	.word	0x080079a1
 8007600:	08007cc5 	.word	0x08007cc5
 8007604:	08007cc5 	.word	0x08007cc5
 8007608:	08007cc5 	.word	0x08007cc5
 800760c:	08007cc5 	.word	0x08007cc5
 8007610:	08007cc5 	.word	0x08007cc5
 8007614:	08007cc5 	.word	0x08007cc5
 8007618:	08007cc5 	.word	0x08007cc5
 800761c:	08007cc5 	.word	0x08007cc5
 8007620:	08007cc5 	.word	0x08007cc5
 8007624:	08007cc5 	.word	0x08007cc5
 8007628:	08007cc5 	.word	0x08007cc5
 800762c:	08007cc5 	.word	0x08007cc5
 8007630:	08007cc5 	.word	0x08007cc5
 8007634:	08007cc5 	.word	0x08007cc5
 8007638:	08007cc5 	.word	0x08007cc5
 800763c:	08007b11 	.word	0x08007b11
 8007640:	08007cc5 	.word	0x08007cc5
 8007644:	08007cc5 	.word	0x08007cc5
 8007648:	08007cc5 	.word	0x08007cc5
 800764c:	08007cc5 	.word	0x08007cc5
 8007650:	08007cc5 	.word	0x08007cc5
 8007654:	08007cc5 	.word	0x08007cc5
 8007658:	08007cc5 	.word	0x08007cc5
 800765c:	08007cc5 	.word	0x08007cc5
 8007660:	08007cc5 	.word	0x08007cc5
 8007664:	08007cc5 	.word	0x08007cc5
 8007668:	08007cc5 	.word	0x08007cc5
 800766c:	08007cc5 	.word	0x08007cc5
 8007670:	08007cc5 	.word	0x08007cc5
 8007674:	08007cc5 	.word	0x08007cc5
 8007678:	08007cc5 	.word	0x08007cc5
 800767c:	08007cc5 	.word	0x08007cc5
 8007680:	08007cc5 	.word	0x08007cc5
 8007684:	08007cc5 	.word	0x08007cc5
 8007688:	08007cc5 	.word	0x08007cc5
 800768c:	08007cc5 	.word	0x08007cc5
 8007690:	08007cc5 	.word	0x08007cc5
 8007694:	08007cc5 	.word	0x08007cc5
 8007698:	08007cc5 	.word	0x08007cc5
 800769c:	08007cc5 	.word	0x08007cc5
 80076a0:	08007cc5 	.word	0x08007cc5
 80076a4:	08007cc5 	.word	0x08007cc5
 80076a8:	08007cc5 	.word	0x08007cc5
 80076ac:	08007cc5 	.word	0x08007cc5
 80076b0:	08007cc5 	.word	0x08007cc5
 80076b4:	08007cc5 	.word	0x08007cc5
 80076b8:	08007cc5 	.word	0x08007cc5
 80076bc:	08007c05 	.word	0x08007c05
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076c0:	f7fc f88c 	bl	80037dc <HAL_RCC_GetPCLK1Freq>
 80076c4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d044      	beq.n	8007758 <UART_SetConfig+0x1d40>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	d03e      	beq.n	8007754 <UART_SetConfig+0x1d3c>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d038      	beq.n	8007750 <UART_SetConfig+0x1d38>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076e2:	2b03      	cmp	r3, #3
 80076e4:	d032      	beq.n	800774c <UART_SetConfig+0x1d34>
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ea:	2b04      	cmp	r3, #4
 80076ec:	d02c      	beq.n	8007748 <UART_SetConfig+0x1d30>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f2:	2b05      	cmp	r3, #5
 80076f4:	d026      	beq.n	8007744 <UART_SetConfig+0x1d2c>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b06      	cmp	r3, #6
 80076fc:	d020      	beq.n	8007740 <UART_SetConfig+0x1d28>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007702:	2b07      	cmp	r3, #7
 8007704:	d01a      	beq.n	800773c <UART_SetConfig+0x1d24>
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770a:	2b08      	cmp	r3, #8
 800770c:	d014      	beq.n	8007738 <UART_SetConfig+0x1d20>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007712:	2b09      	cmp	r3, #9
 8007714:	d00e      	beq.n	8007734 <UART_SetConfig+0x1d1c>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771a:	2b0a      	cmp	r3, #10
 800771c:	d008      	beq.n	8007730 <UART_SetConfig+0x1d18>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007722:	2b0b      	cmp	r3, #11
 8007724:	d102      	bne.n	800772c <UART_SetConfig+0x1d14>
 8007726:	f44f 7380 	mov.w	r3, #256	; 0x100
 800772a:	e016      	b.n	800775a <UART_SetConfig+0x1d42>
 800772c:	2301      	movs	r3, #1
 800772e:	e014      	b.n	800775a <UART_SetConfig+0x1d42>
 8007730:	2380      	movs	r3, #128	; 0x80
 8007732:	e012      	b.n	800775a <UART_SetConfig+0x1d42>
 8007734:	2340      	movs	r3, #64	; 0x40
 8007736:	e010      	b.n	800775a <UART_SetConfig+0x1d42>
 8007738:	2320      	movs	r3, #32
 800773a:	e00e      	b.n	800775a <UART_SetConfig+0x1d42>
 800773c:	2310      	movs	r3, #16
 800773e:	e00c      	b.n	800775a <UART_SetConfig+0x1d42>
 8007740:	230c      	movs	r3, #12
 8007742:	e00a      	b.n	800775a <UART_SetConfig+0x1d42>
 8007744:	230a      	movs	r3, #10
 8007746:	e008      	b.n	800775a <UART_SetConfig+0x1d42>
 8007748:	2308      	movs	r3, #8
 800774a:	e006      	b.n	800775a <UART_SetConfig+0x1d42>
 800774c:	2306      	movs	r3, #6
 800774e:	e004      	b.n	800775a <UART_SetConfig+0x1d42>
 8007750:	2304      	movs	r3, #4
 8007752:	e002      	b.n	800775a <UART_SetConfig+0x1d42>
 8007754:	2302      	movs	r3, #2
 8007756:	e000      	b.n	800775a <UART_SetConfig+0x1d42>
 8007758:	2301      	movs	r3, #1
 800775a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800775c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	085b      	lsrs	r3, r3, #1
 8007766:	441a      	add	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007770:	b29b      	uxth	r3, r3
 8007772:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007774:	e2aa      	b.n	8007ccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007776:	f7fc f847 	bl	8003808 <HAL_RCC_GetPCLK2Freq>
 800777a:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007780:	2b00      	cmp	r3, #0
 8007782:	d044      	beq.n	800780e <UART_SetConfig+0x1df6>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007788:	2b01      	cmp	r3, #1
 800778a:	d03e      	beq.n	800780a <UART_SetConfig+0x1df2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007790:	2b02      	cmp	r3, #2
 8007792:	d038      	beq.n	8007806 <UART_SetConfig+0x1dee>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	2b03      	cmp	r3, #3
 800779a:	d032      	beq.n	8007802 <UART_SetConfig+0x1dea>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a0:	2b04      	cmp	r3, #4
 80077a2:	d02c      	beq.n	80077fe <UART_SetConfig+0x1de6>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a8:	2b05      	cmp	r3, #5
 80077aa:	d026      	beq.n	80077fa <UART_SetConfig+0x1de2>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	2b06      	cmp	r3, #6
 80077b2:	d020      	beq.n	80077f6 <UART_SetConfig+0x1dde>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b8:	2b07      	cmp	r3, #7
 80077ba:	d01a      	beq.n	80077f2 <UART_SetConfig+0x1dda>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d014      	beq.n	80077ee <UART_SetConfig+0x1dd6>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	2b09      	cmp	r3, #9
 80077ca:	d00e      	beq.n	80077ea <UART_SetConfig+0x1dd2>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	2b0a      	cmp	r3, #10
 80077d2:	d008      	beq.n	80077e6 <UART_SetConfig+0x1dce>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	2b0b      	cmp	r3, #11
 80077da:	d102      	bne.n	80077e2 <UART_SetConfig+0x1dca>
 80077dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80077e0:	e016      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077e2:	2301      	movs	r3, #1
 80077e4:	e014      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077e6:	2380      	movs	r3, #128	; 0x80
 80077e8:	e012      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077ea:	2340      	movs	r3, #64	; 0x40
 80077ec:	e010      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077ee:	2320      	movs	r3, #32
 80077f0:	e00e      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077f2:	2310      	movs	r3, #16
 80077f4:	e00c      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077f6:	230c      	movs	r3, #12
 80077f8:	e00a      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077fa:	230a      	movs	r3, #10
 80077fc:	e008      	b.n	8007810 <UART_SetConfig+0x1df8>
 80077fe:	2308      	movs	r3, #8
 8007800:	e006      	b.n	8007810 <UART_SetConfig+0x1df8>
 8007802:	2306      	movs	r3, #6
 8007804:	e004      	b.n	8007810 <UART_SetConfig+0x1df8>
 8007806:	2304      	movs	r3, #4
 8007808:	e002      	b.n	8007810 <UART_SetConfig+0x1df8>
 800780a:	2302      	movs	r3, #2
 800780c:	e000      	b.n	8007810 <UART_SetConfig+0x1df8>
 800780e:	2301      	movs	r3, #1
 8007810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007812:	fbb2 f2f3 	udiv	r2, r2, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	085b      	lsrs	r3, r3, #1
 800781c:	441a      	add	r2, r3
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	fbb2 f3f3 	udiv	r3, r2, r3
 8007826:	b29b      	uxth	r3, r3
 8007828:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800782a:	e24f      	b.n	8007ccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800782c:	f107 0318 	add.w	r3, r7, #24
 8007830:	4618      	mov	r0, r3
 8007832:	f7fc fef3 	bl	800461c <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800783c:	2b00      	cmp	r3, #0
 800783e:	d044      	beq.n	80078ca <UART_SetConfig+0x1eb2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007844:	2b01      	cmp	r3, #1
 8007846:	d03e      	beq.n	80078c6 <UART_SetConfig+0x1eae>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	2b02      	cmp	r3, #2
 800784e:	d038      	beq.n	80078c2 <UART_SetConfig+0x1eaa>
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007854:	2b03      	cmp	r3, #3
 8007856:	d032      	beq.n	80078be <UART_SetConfig+0x1ea6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	2b04      	cmp	r3, #4
 800785e:	d02c      	beq.n	80078ba <UART_SetConfig+0x1ea2>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	2b05      	cmp	r3, #5
 8007866:	d026      	beq.n	80078b6 <UART_SetConfig+0x1e9e>
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	2b06      	cmp	r3, #6
 800786e:	d020      	beq.n	80078b2 <UART_SetConfig+0x1e9a>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007874:	2b07      	cmp	r3, #7
 8007876:	d01a      	beq.n	80078ae <UART_SetConfig+0x1e96>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787c:	2b08      	cmp	r3, #8
 800787e:	d014      	beq.n	80078aa <UART_SetConfig+0x1e92>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007884:	2b09      	cmp	r3, #9
 8007886:	d00e      	beq.n	80078a6 <UART_SetConfig+0x1e8e>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	2b0a      	cmp	r3, #10
 800788e:	d008      	beq.n	80078a2 <UART_SetConfig+0x1e8a>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007894:	2b0b      	cmp	r3, #11
 8007896:	d102      	bne.n	800789e <UART_SetConfig+0x1e86>
 8007898:	f44f 7380 	mov.w	r3, #256	; 0x100
 800789c:	e016      	b.n	80078cc <UART_SetConfig+0x1eb4>
 800789e:	2301      	movs	r3, #1
 80078a0:	e014      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078a2:	2380      	movs	r3, #128	; 0x80
 80078a4:	e012      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078a6:	2340      	movs	r3, #64	; 0x40
 80078a8:	e010      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078aa:	2320      	movs	r3, #32
 80078ac:	e00e      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078ae:	2310      	movs	r3, #16
 80078b0:	e00c      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078b2:	230c      	movs	r3, #12
 80078b4:	e00a      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078b6:	230a      	movs	r3, #10
 80078b8:	e008      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078ba:	2308      	movs	r3, #8
 80078bc:	e006      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078be:	2306      	movs	r3, #6
 80078c0:	e004      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078c2:	2304      	movs	r3, #4
 80078c4:	e002      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078c6:	2302      	movs	r3, #2
 80078c8:	e000      	b.n	80078cc <UART_SetConfig+0x1eb4>
 80078ca:	2301      	movs	r3, #1
 80078cc:	fbb2 f2f3 	udiv	r2, r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	085b      	lsrs	r3, r3, #1
 80078d6:	441a      	add	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078e4:	e1f2      	b.n	8007ccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078e6:	f107 030c 	add.w	r3, r7, #12
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fc ffe2 	bl	80048b4 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078f0:	693a      	ldr	r2, [r7, #16]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d044      	beq.n	8007984 <UART_SetConfig+0x1f6c>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d03e      	beq.n	8007980 <UART_SetConfig+0x1f68>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007906:	2b02      	cmp	r3, #2
 8007908:	d038      	beq.n	800797c <UART_SetConfig+0x1f64>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	2b03      	cmp	r3, #3
 8007910:	d032      	beq.n	8007978 <UART_SetConfig+0x1f60>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007916:	2b04      	cmp	r3, #4
 8007918:	d02c      	beq.n	8007974 <UART_SetConfig+0x1f5c>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791e:	2b05      	cmp	r3, #5
 8007920:	d026      	beq.n	8007970 <UART_SetConfig+0x1f58>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007926:	2b06      	cmp	r3, #6
 8007928:	d020      	beq.n	800796c <UART_SetConfig+0x1f54>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792e:	2b07      	cmp	r3, #7
 8007930:	d01a      	beq.n	8007968 <UART_SetConfig+0x1f50>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	2b08      	cmp	r3, #8
 8007938:	d014      	beq.n	8007964 <UART_SetConfig+0x1f4c>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793e:	2b09      	cmp	r3, #9
 8007940:	d00e      	beq.n	8007960 <UART_SetConfig+0x1f48>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007946:	2b0a      	cmp	r3, #10
 8007948:	d008      	beq.n	800795c <UART_SetConfig+0x1f44>
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800794e:	2b0b      	cmp	r3, #11
 8007950:	d102      	bne.n	8007958 <UART_SetConfig+0x1f40>
 8007952:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007956:	e016      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007958:	2301      	movs	r3, #1
 800795a:	e014      	b.n	8007986 <UART_SetConfig+0x1f6e>
 800795c:	2380      	movs	r3, #128	; 0x80
 800795e:	e012      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	e010      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007964:	2320      	movs	r3, #32
 8007966:	e00e      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007968:	2310      	movs	r3, #16
 800796a:	e00c      	b.n	8007986 <UART_SetConfig+0x1f6e>
 800796c:	230c      	movs	r3, #12
 800796e:	e00a      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007970:	230a      	movs	r3, #10
 8007972:	e008      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007974:	2308      	movs	r3, #8
 8007976:	e006      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007978:	2306      	movs	r3, #6
 800797a:	e004      	b.n	8007986 <UART_SetConfig+0x1f6e>
 800797c:	2304      	movs	r3, #4
 800797e:	e002      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007980:	2302      	movs	r3, #2
 8007982:	e000      	b.n	8007986 <UART_SetConfig+0x1f6e>
 8007984:	2301      	movs	r3, #1
 8007986:	fbb2 f2f3 	udiv	r2, r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	441a      	add	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	fbb2 f3f3 	udiv	r3, r2, r3
 800799a:	b29b      	uxth	r3, r3
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800799e:	e195      	b.n	8007ccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80079a0:	4b87      	ldr	r3, [pc, #540]	; (8007bc0 <UART_SetConfig+0x21a8>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0320 	and.w	r3, r3, #32
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d05d      	beq.n	8007a68 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80079ac:	4b84      	ldr	r3, [pc, #528]	; (8007bc0 <UART_SetConfig+0x21a8>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	08db      	lsrs	r3, r3, #3
 80079b2:	f003 0303 	and.w	r3, r3, #3
 80079b6:	4a83      	ldr	r2, [pc, #524]	; (8007bc4 <UART_SetConfig+0x21ac>)
 80079b8:	40da      	lsrs	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d044      	beq.n	8007a4c <UART_SetConfig+0x2034>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d03e      	beq.n	8007a48 <UART_SetConfig+0x2030>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ce:	2b02      	cmp	r3, #2
 80079d0:	d038      	beq.n	8007a44 <UART_SetConfig+0x202c>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	2b03      	cmp	r3, #3
 80079d8:	d032      	beq.n	8007a40 <UART_SetConfig+0x2028>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	2b04      	cmp	r3, #4
 80079e0:	d02c      	beq.n	8007a3c <UART_SetConfig+0x2024>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d026      	beq.n	8007a38 <UART_SetConfig+0x2020>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ee:	2b06      	cmp	r3, #6
 80079f0:	d020      	beq.n	8007a34 <UART_SetConfig+0x201c>
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079f6:	2b07      	cmp	r3, #7
 80079f8:	d01a      	beq.n	8007a30 <UART_SetConfig+0x2018>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fe:	2b08      	cmp	r3, #8
 8007a00:	d014      	beq.n	8007a2c <UART_SetConfig+0x2014>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a06:	2b09      	cmp	r3, #9
 8007a08:	d00e      	beq.n	8007a28 <UART_SetConfig+0x2010>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	2b0a      	cmp	r3, #10
 8007a10:	d008      	beq.n	8007a24 <UART_SetConfig+0x200c>
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a16:	2b0b      	cmp	r3, #11
 8007a18:	d102      	bne.n	8007a20 <UART_SetConfig+0x2008>
 8007a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a1e:	e016      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a20:	2301      	movs	r3, #1
 8007a22:	e014      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a24:	2380      	movs	r3, #128	; 0x80
 8007a26:	e012      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a28:	2340      	movs	r3, #64	; 0x40
 8007a2a:	e010      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a2c:	2320      	movs	r3, #32
 8007a2e:	e00e      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a30:	2310      	movs	r3, #16
 8007a32:	e00c      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a34:	230c      	movs	r3, #12
 8007a36:	e00a      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a38:	230a      	movs	r3, #10
 8007a3a:	e008      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	e006      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a40:	2306      	movs	r3, #6
 8007a42:	e004      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a44:	2304      	movs	r3, #4
 8007a46:	e002      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e000      	b.n	8007a4e <UART_SetConfig+0x2036>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	685b      	ldr	r3, [r3, #4]
 8007a56:	085b      	lsrs	r3, r3, #1
 8007a58:	441a      	add	r2, r3
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a62:	b29b      	uxth	r3, r3
 8007a64:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8007a66:	e131      	b.n	8007ccc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d043      	beq.n	8007af8 <UART_SetConfig+0x20e0>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d03d      	beq.n	8007af4 <UART_SetConfig+0x20dc>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d037      	beq.n	8007af0 <UART_SetConfig+0x20d8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a84:	2b03      	cmp	r3, #3
 8007a86:	d031      	beq.n	8007aec <UART_SetConfig+0x20d4>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a8c:	2b04      	cmp	r3, #4
 8007a8e:	d02b      	beq.n	8007ae8 <UART_SetConfig+0x20d0>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a94:	2b05      	cmp	r3, #5
 8007a96:	d025      	beq.n	8007ae4 <UART_SetConfig+0x20cc>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a9c:	2b06      	cmp	r3, #6
 8007a9e:	d01f      	beq.n	8007ae0 <UART_SetConfig+0x20c8>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa4:	2b07      	cmp	r3, #7
 8007aa6:	d019      	beq.n	8007adc <UART_SetConfig+0x20c4>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aac:	2b08      	cmp	r3, #8
 8007aae:	d013      	beq.n	8007ad8 <UART_SetConfig+0x20c0>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d00d      	beq.n	8007ad4 <UART_SetConfig+0x20bc>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abc:	2b0a      	cmp	r3, #10
 8007abe:	d007      	beq.n	8007ad0 <UART_SetConfig+0x20b8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac4:	2b0b      	cmp	r3, #11
 8007ac6:	d101      	bne.n	8007acc <UART_SetConfig+0x20b4>
 8007ac8:	4b3f      	ldr	r3, [pc, #252]	; (8007bc8 <UART_SetConfig+0x21b0>)
 8007aca:	e016      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007acc:	4b3d      	ldr	r3, [pc, #244]	; (8007bc4 <UART_SetConfig+0x21ac>)
 8007ace:	e014      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ad0:	4b3e      	ldr	r3, [pc, #248]	; (8007bcc <UART_SetConfig+0x21b4>)
 8007ad2:	e012      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ad4:	4b3e      	ldr	r3, [pc, #248]	; (8007bd0 <UART_SetConfig+0x21b8>)
 8007ad6:	e010      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ad8:	4b3e      	ldr	r3, [pc, #248]	; (8007bd4 <UART_SetConfig+0x21bc>)
 8007ada:	e00e      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007adc:	4b3e      	ldr	r3, [pc, #248]	; (8007bd8 <UART_SetConfig+0x21c0>)
 8007ade:	e00c      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ae0:	4b3e      	ldr	r3, [pc, #248]	; (8007bdc <UART_SetConfig+0x21c4>)
 8007ae2:	e00a      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ae4:	4b3e      	ldr	r3, [pc, #248]	; (8007be0 <UART_SetConfig+0x21c8>)
 8007ae6:	e008      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007ae8:	4b3e      	ldr	r3, [pc, #248]	; (8007be4 <UART_SetConfig+0x21cc>)
 8007aea:	e006      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007aec:	4b3e      	ldr	r3, [pc, #248]	; (8007be8 <UART_SetConfig+0x21d0>)
 8007aee:	e004      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007af0:	4b3e      	ldr	r3, [pc, #248]	; (8007bec <UART_SetConfig+0x21d4>)
 8007af2:	e002      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007af4:	4b3e      	ldr	r3, [pc, #248]	; (8007bf0 <UART_SetConfig+0x21d8>)
 8007af6:	e000      	b.n	8007afa <UART_SetConfig+0x20e2>
 8007af8:	4b32      	ldr	r3, [pc, #200]	; (8007bc4 <UART_SetConfig+0x21ac>)
 8007afa:	687a      	ldr	r2, [r7, #4]
 8007afc:	6852      	ldr	r2, [r2, #4]
 8007afe:	0852      	lsrs	r2, r2, #1
 8007b00:	441a      	add	r2, r3
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b0e:	e0dd      	b.n	8007ccc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d046      	beq.n	8007ba6 <UART_SetConfig+0x218e>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d040      	beq.n	8007ba2 <UART_SetConfig+0x218a>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d03a      	beq.n	8007b9e <UART_SetConfig+0x2186>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b2c:	2b03      	cmp	r3, #3
 8007b2e:	d034      	beq.n	8007b9a <UART_SetConfig+0x2182>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	d02e      	beq.n	8007b96 <UART_SetConfig+0x217e>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3c:	2b05      	cmp	r3, #5
 8007b3e:	d028      	beq.n	8007b92 <UART_SetConfig+0x217a>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b06      	cmp	r3, #6
 8007b46:	d022      	beq.n	8007b8e <UART_SetConfig+0x2176>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b07      	cmp	r3, #7
 8007b4e:	d01c      	beq.n	8007b8a <UART_SetConfig+0x2172>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b54:	2b08      	cmp	r3, #8
 8007b56:	d016      	beq.n	8007b86 <UART_SetConfig+0x216e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b5c:	2b09      	cmp	r3, #9
 8007b5e:	d00f      	beq.n	8007b80 <UART_SetConfig+0x2168>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b64:	2b0a      	cmp	r3, #10
 8007b66:	d008      	beq.n	8007b7a <UART_SetConfig+0x2162>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b6c:	2b0b      	cmp	r3, #11
 8007b6e:	d102      	bne.n	8007b76 <UART_SetConfig+0x215e>
 8007b70:	f643 5309 	movw	r3, #15625	; 0x3d09
 8007b74:	e018      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b76:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <UART_SetConfig+0x21c0>)
 8007b78:	e016      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b7a:	f647 2312 	movw	r3, #31250	; 0x7a12
 8007b7e:	e013      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b80:	f24f 4324 	movw	r3, #62500	; 0xf424
 8007b84:	e010      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b86:	4b1b      	ldr	r3, [pc, #108]	; (8007bf4 <UART_SetConfig+0x21dc>)
 8007b88:	e00e      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <UART_SetConfig+0x21b0>)
 8007b8c:	e00c      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b8e:	4b1a      	ldr	r3, [pc, #104]	; (8007bf8 <UART_SetConfig+0x21e0>)
 8007b90:	e00a      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b92:	4b1a      	ldr	r3, [pc, #104]	; (8007bfc <UART_SetConfig+0x21e4>)
 8007b94:	e008      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b96:	4b0d      	ldr	r3, [pc, #52]	; (8007bcc <UART_SetConfig+0x21b4>)
 8007b98:	e006      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b9a:	4b19      	ldr	r3, [pc, #100]	; (8007c00 <UART_SetConfig+0x21e8>)
 8007b9c:	e004      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007b9e:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <UART_SetConfig+0x21b8>)
 8007ba0:	e002      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007ba2:	4b0c      	ldr	r3, [pc, #48]	; (8007bd4 <UART_SetConfig+0x21bc>)
 8007ba4:	e000      	b.n	8007ba8 <UART_SetConfig+0x2190>
 8007ba6:	4b0c      	ldr	r3, [pc, #48]	; (8007bd8 <UART_SetConfig+0x21c0>)
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	6852      	ldr	r2, [r2, #4]
 8007bac:	0852      	lsrs	r2, r2, #1
 8007bae:	441a      	add	r2, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bbc:	e086      	b.n	8007ccc <UART_SetConfig+0x22b4>
 8007bbe:	bf00      	nop
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	03d09000 	.word	0x03d09000
 8007bc8:	0003d090 	.word	0x0003d090
 8007bcc:	0007a120 	.word	0x0007a120
 8007bd0:	000f4240 	.word	0x000f4240
 8007bd4:	001e8480 	.word	0x001e8480
 8007bd8:	003d0900 	.word	0x003d0900
 8007bdc:	00516155 	.word	0x00516155
 8007be0:	0061a800 	.word	0x0061a800
 8007be4:	007a1200 	.word	0x007a1200
 8007be8:	00a2c2aa 	.word	0x00a2c2aa
 8007bec:	00f42400 	.word	0x00f42400
 8007bf0:	01e84800 	.word	0x01e84800
 8007bf4:	0001e848 	.word	0x0001e848
 8007bf8:	00051615 	.word	0x00051615
 8007bfc:	00061a80 	.word	0x00061a80
 8007c00:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d04e      	beq.n	8007caa <UART_SetConfig+0x2292>
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d047      	beq.n	8007ca4 <UART_SetConfig+0x228c>
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b02      	cmp	r3, #2
 8007c1a:	d040      	beq.n	8007c9e <UART_SetConfig+0x2286>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c20:	2b03      	cmp	r3, #3
 8007c22:	d039      	beq.n	8007c98 <UART_SetConfig+0x2280>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2b04      	cmp	r3, #4
 8007c2a:	d032      	beq.n	8007c92 <UART_SetConfig+0x227a>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c30:	2b05      	cmp	r3, #5
 8007c32:	d02b      	beq.n	8007c8c <UART_SetConfig+0x2274>
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	2b06      	cmp	r3, #6
 8007c3a:	d024      	beq.n	8007c86 <UART_SetConfig+0x226e>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c40:	2b07      	cmp	r3, #7
 8007c42:	d01d      	beq.n	8007c80 <UART_SetConfig+0x2268>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c48:	2b08      	cmp	r3, #8
 8007c4a:	d016      	beq.n	8007c7a <UART_SetConfig+0x2262>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c50:	2b09      	cmp	r3, #9
 8007c52:	d00f      	beq.n	8007c74 <UART_SetConfig+0x225c>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c58:	2b0a      	cmp	r3, #10
 8007c5a:	d008      	beq.n	8007c6e <UART_SetConfig+0x2256>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c60:	2b0b      	cmp	r3, #11
 8007c62:	d101      	bne.n	8007c68 <UART_SetConfig+0x2250>
 8007c64:	2380      	movs	r3, #128	; 0x80
 8007c66:	e022      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6c:	e01f      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007c72:	e01c      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c78:	e019      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c7e:	e016      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c80:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007c84:	e013      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c86:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8007c8a:	e010      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c8c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8007c90:	e00d      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007c96:	e00a      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c98:	f241 5355 	movw	r3, #5461	; 0x1555
 8007c9c:	e007      	b.n	8007cae <UART_SetConfig+0x2296>
 8007c9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007ca2:	e004      	b.n	8007cae <UART_SetConfig+0x2296>
 8007ca4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007ca8:	e001      	b.n	8007cae <UART_SetConfig+0x2296>
 8007caa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6852      	ldr	r2, [r2, #4]
 8007cb2:	0852      	lsrs	r2, r2, #1
 8007cb4:	441a      	add	r2, r3
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cbe:	b29b      	uxth	r3, r3
 8007cc0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007cc2:	e003      	b.n	8007ccc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8007cca:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cce:	2b0f      	cmp	r3, #15
 8007cd0:	d908      	bls.n	8007ce4 <UART_SetConfig+0x22cc>
 8007cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cd8:	d204      	bcs.n	8007ce4 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ce0:	60da      	str	r2, [r3, #12]
 8007ce2:	e002      	b.n	8007cea <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2201      	movs	r2, #1
 8007cee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8007d06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	3740      	adds	r7, #64	; 0x40
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d20:	f003 0301 	and.w	r3, r3, #1
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00a      	beq.n	8007d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	430a      	orrs	r2, r1
 8007d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d42:	f003 0302 	and.w	r3, r3, #2
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	430a      	orrs	r2, r1
 8007d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d64:	f003 0304 	and.w	r3, r3, #4
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00a      	beq.n	8007d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d86:	f003 0308 	and.w	r3, r3, #8
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00a      	beq.n	8007da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	430a      	orrs	r2, r1
 8007dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d00a      	beq.n	8007de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01a      	beq.n	8007e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	430a      	orrs	r2, r1
 8007e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e12:	d10a      	bne.n	8007e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	685b      	ldr	r3, [r3, #4]
 8007e1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	430a      	orrs	r2, r1
 8007e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	430a      	orrs	r2, r1
 8007e4a:	605a      	str	r2, [r3, #4]
  }
}
 8007e4c:	bf00      	nop
 8007e4e:	370c      	adds	r7, #12
 8007e50:	46bd      	mov	sp, r7
 8007e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e56:	4770      	bx	lr

08007e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b086      	sub	sp, #24
 8007e5c:	af02      	add	r7, sp, #8
 8007e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007e68:	f7f9 fc9e 	bl	80017a8 <HAL_GetTick>
 8007e6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b08      	cmp	r3, #8
 8007e7a:	d10e      	bne.n	8007e9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2200      	movs	r2, #0
 8007e86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f82c 	bl	8007ee8 <UART_WaitOnFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e022      	b.n	8007ee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d10e      	bne.n	8007ec6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ea8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007eac:	9300      	str	r3, [sp, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 f816 	bl	8007ee8 <UART_WaitOnFlagUntilTimeout>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e00c      	b.n	8007ee0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2220      	movs	r2, #32
 8007ed2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	603b      	str	r3, [r7, #0]
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ef8:	e062      	b.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007efa:	69bb      	ldr	r3, [r7, #24]
 8007efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f00:	d05e      	beq.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f02:	f7f9 fc51 	bl	80017a8 <HAL_GetTick>
 8007f06:	4602      	mov	r2, r0
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	1ad3      	subs	r3, r2, r3
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	429a      	cmp	r2, r3
 8007f10:	d302      	bcc.n	8007f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007f12:	69bb      	ldr	r3, [r7, #24]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d11d      	bne.n	8007f54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f022 0201 	bic.w	r2, r2, #1
 8007f36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2220      	movs	r2, #32
 8007f3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	2220      	movs	r2, #32
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007f50:	2303      	movs	r3, #3
 8007f52:	e045      	b.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0304 	and.w	r3, r3, #4
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d02e      	beq.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	69db      	ldr	r3, [r3, #28]
 8007f68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f70:	d126      	bne.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f7a:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	681a      	ldr	r2, [r3, #0]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007f8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f022 0201 	bic.w	r2, r2, #1
 8007f9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	2220      	movs	r2, #32
 8007fa0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e00f      	b.n	8007fe0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	69da      	ldr	r2, [r3, #28]
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	4013      	ands	r3, r2
 8007fca:	68ba      	ldr	r2, [r7, #8]
 8007fcc:	429a      	cmp	r2, r3
 8007fce:	bf0c      	ite	eq
 8007fd0:	2301      	moveq	r3, #1
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d08d      	beq.n	8007efa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b085      	sub	sp, #20
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8007ff6:	2b01      	cmp	r3, #1
 8007ff8:	d101      	bne.n	8007ffe <HAL_UARTEx_DisableFifoMode+0x16>
 8007ffa:	2302      	movs	r3, #2
 8007ffc:	e027      	b.n	800804e <HAL_UARTEx_DisableFifoMode+0x66>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2201      	movs	r2, #1
 8008002:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2224      	movs	r2, #36	; 0x24
 800800a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681a      	ldr	r2, [r3, #0]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f022 0201 	bic.w	r2, r2, #1
 8008024:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800802c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2220      	movs	r2, #32
 8008040:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800804c:	2300      	movs	r3, #0
}
 800804e:	4618      	mov	r0, r3
 8008050:	3714      	adds	r7, #20
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800806e:	2302      	movs	r3, #2
 8008070:	e02d      	b.n	80080ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2224      	movs	r2, #36	; 0x24
 800807e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f022 0201 	bic.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	689b      	ldr	r3, [r3, #8]
 80080a0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	683a      	ldr	r2, [r7, #0]
 80080aa:	430a      	orrs	r2, r1
 80080ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 f850 	bl	8008154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2220      	movs	r2, #32
 80080c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b084      	sub	sp, #16
 80080da:	af00      	add	r7, sp, #0
 80080dc:	6078      	str	r0, [r7, #4]
 80080de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e02d      	b.n	800814a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2224      	movs	r2, #36	; 0x24
 80080fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681a      	ldr	r2, [r3, #0]
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f022 0201 	bic.w	r2, r2, #1
 8008114:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689b      	ldr	r3, [r3, #8]
 800811c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	683a      	ldr	r2, [r7, #0]
 8008126:	430a      	orrs	r2, r1
 8008128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 f812 	bl	8008154 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2220      	movs	r2, #32
 800813c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008148:	2300      	movs	r3, #0
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008154:	b480      	push	{r7}
 8008156:	b089      	sub	sp, #36	; 0x24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800815c:	4a2f      	ldr	r2, [pc, #188]	; (800821c <UARTEx_SetNbDataToProcess+0xc8>)
 800815e:	f107 0314 	add.w	r3, r7, #20
 8008162:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008166:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800816a:	4a2d      	ldr	r2, [pc, #180]	; (8008220 <UARTEx_SetNbDataToProcess+0xcc>)
 800816c:	f107 030c 	add.w	r3, r7, #12
 8008170:	e892 0003 	ldmia.w	r2, {r0, r1}
 8008174:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800817c:	2b00      	cmp	r3, #0
 800817e:	d108      	bne.n	8008192 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008190:	e03d      	b.n	800820e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008192:	2308      	movs	r3, #8
 8008194:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008196:	2308      	movs	r3, #8
 8008198:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	0e5b      	lsrs	r3, r3, #25
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0307 	and.w	r3, r3, #7
 80081a8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	0f5b      	lsrs	r3, r3, #29
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0307 	and.w	r3, r3, #7
 80081b8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80081ba:	7fbb      	ldrb	r3, [r7, #30]
 80081bc:	7f3a      	ldrb	r2, [r7, #28]
 80081be:	f107 0120 	add.w	r1, r7, #32
 80081c2:	440a      	add	r2, r1
 80081c4:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80081c8:	fb02 f303 	mul.w	r3, r2, r3
 80081cc:	7f3a      	ldrb	r2, [r7, #28]
 80081ce:	f107 0120 	add.w	r1, r7, #32
 80081d2:	440a      	add	r2, r1
 80081d4:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80081d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80081dc:	b29a      	uxth	r2, r3
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80081e4:	7ffb      	ldrb	r3, [r7, #31]
 80081e6:	7f7a      	ldrb	r2, [r7, #29]
 80081e8:	f107 0120 	add.w	r1, r7, #32
 80081ec:	440a      	add	r2, r1
 80081ee:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80081f2:	fb02 f303 	mul.w	r3, r2, r3
 80081f6:	7f7a      	ldrb	r2, [r7, #29]
 80081f8:	f107 0120 	add.w	r1, r7, #32
 80081fc:	440a      	add	r2, r1
 80081fe:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008202:	fb93 f3f2 	sdiv	r3, r3, r2
 8008206:	b29a      	uxth	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800820e:	bf00      	nop
 8008210:	3724      	adds	r7, #36	; 0x24
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	080087e8 	.word	0x080087e8
 8008220:	080087f0 	.word	0x080087f0

08008224 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008224:	b084      	sub	sp, #16
 8008226:	b580      	push	{r7, lr}
 8008228:	b084      	sub	sp, #16
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
 800822e:	f107 001c 	add.w	r0, r7, #28
 8008232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	2b01      	cmp	r3, #1
 800823a:	d120      	bne.n	800827e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	68da      	ldr	r2, [r3, #12]
 800824c:	4b25      	ldr	r3, [pc, #148]	; (80082e4 <USB_CoreInit+0xc0>)
 800824e:	4013      	ands	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008262:	2b01      	cmp	r3, #1
 8008264:	d105      	bne.n	8008272 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 fa4c 	bl	8008710 <USB_CoreReset>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
 800827c:	e01a      	b.n	80082b4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 fa40 	bl	8008710 <USB_CoreReset>
 8008290:	4603      	mov	r3, r0
 8008292:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008296:	2b00      	cmp	r3, #0
 8008298:	d106      	bne.n	80082a8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800829e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	639a      	str	r2, [r3, #56]	; 0x38
 80082a6:	e005      	b.n	80082b4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	d10b      	bne.n	80082d2 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	f043 0206 	orr.w	r2, r3, #6
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	f043 0220 	orr.w	r2, r3, #32
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082de:	b004      	add	sp, #16
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	ffbdffbf 	.word	0xffbdffbf

080082e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f023 0201 	bic.w	r2, r3, #1
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800830a:	b580      	push	{r7, lr}
 800830c:	b082      	sub	sp, #8
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	460b      	mov	r3, r1
 8008314:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008322:	78fb      	ldrb	r3, [r7, #3]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d106      	bne.n	8008336 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	60da      	str	r2, [r3, #12]
 8008334:	e00b      	b.n	800834e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008336:	78fb      	ldrb	r3, [r7, #3]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d106      	bne.n	800834a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	68db      	ldr	r3, [r3, #12]
 8008340:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	60da      	str	r2, [r3, #12]
 8008348:	e001      	b.n	800834e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	e003      	b.n	8008356 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800834e:	2032      	movs	r0, #50	; 0x32
 8008350:	f7f9 fa36 	bl	80017c0 <HAL_Delay>

  return HAL_OK;
 8008354:	2300      	movs	r3, #0
}
 8008356:	4618      	mov	r0, r3
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008360:	b084      	sub	sp, #16
 8008362:	b580      	push	{r7, lr}
 8008364:	b086      	sub	sp, #24
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800836e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800837a:	2300      	movs	r3, #0
 800837c:	613b      	str	r3, [r7, #16]
 800837e:	e009      	b.n	8008394 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008380:	687a      	ldr	r2, [r7, #4]
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3340      	adds	r3, #64	; 0x40
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	2200      	movs	r2, #0
 800838c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	3301      	adds	r3, #1
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2b0e      	cmp	r3, #14
 8008398:	d9f2      	bls.n	8008380 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800839a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11c      	bne.n	80083da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	68fa      	ldr	r2, [r7, #12]
 80083aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083ae:	f043 0302 	orr.w	r3, r3, #2
 80083b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	601a      	str	r2, [r3, #0]
 80083d8:	e005      	b.n	80083e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083ec:	461a      	mov	r2, r3
 80083ee:	2300      	movs	r3, #0
 80083f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083f8:	4619      	mov	r1, r3
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008400:	461a      	mov	r2, r3
 8008402:	680b      	ldr	r3, [r1, #0]
 8008404:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008408:	2b01      	cmp	r3, #1
 800840a:	d10c      	bne.n	8008426 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d104      	bne.n	800841c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008412:	2100      	movs	r1, #0
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f949 	bl	80086ac <USB_SetDevSpeed>
 800841a:	e008      	b.n	800842e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800841c:	2101      	movs	r1, #1
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f944 	bl	80086ac <USB_SetDevSpeed>
 8008424:	e003      	b.n	800842e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008426:	2103      	movs	r1, #3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f93f 	bl	80086ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800842e:	2110      	movs	r1, #16
 8008430:	6878      	ldr	r0, [r7, #4]
 8008432:	f000 f8f3 	bl	800861c <USB_FlushTxFifo>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d001      	beq.n	8008440 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f911 	bl	8008668 <USB_FlushRxFifo>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008456:	461a      	mov	r2, r3
 8008458:	2300      	movs	r3, #0
 800845a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	461a      	mov	r2, r3
 8008464:	2300      	movs	r3, #0
 8008466:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008474:	2300      	movs	r3, #0
 8008476:	613b      	str	r3, [r7, #16]
 8008478:	e043      	b.n	8008502 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800848c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008490:	d118      	bne.n	80084c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d10a      	bne.n	80084ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	015a      	lsls	r2, r3, #5
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	4413      	add	r3, r2
 80084a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a4:	461a      	mov	r2, r3
 80084a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084aa:	6013      	str	r3, [r2, #0]
 80084ac:	e013      	b.n	80084d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	015a      	lsls	r2, r3, #5
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	4413      	add	r3, r2
 80084b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ba:	461a      	mov	r2, r3
 80084bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	e008      	b.n	80084d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	015a      	lsls	r2, r3, #5
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084d0:	461a      	mov	r2, r3
 80084d2:	2300      	movs	r3, #0
 80084d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	015a      	lsls	r2, r3, #5
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	4413      	add	r3, r2
 80084de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e2:	461a      	mov	r2, r3
 80084e4:	2300      	movs	r3, #0
 80084e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	015a      	lsls	r2, r3, #5
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	4413      	add	r3, r2
 80084f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f4:	461a      	mov	r2, r3
 80084f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	3301      	adds	r3, #1
 8008500:	613b      	str	r3, [r7, #16]
 8008502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	429a      	cmp	r2, r3
 8008508:	d3b7      	bcc.n	800847a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800850a:	2300      	movs	r3, #0
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	e043      	b.n	8008598 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	015a      	lsls	r2, r3, #5
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	4413      	add	r3, r2
 8008518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008522:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008526:	d118      	bne.n	800855a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d10a      	bne.n	8008544 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	015a      	lsls	r2, r3, #5
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	4413      	add	r3, r2
 8008536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800853a:	461a      	mov	r2, r3
 800853c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008540:	6013      	str	r3, [r2, #0]
 8008542:	e013      	b.n	800856c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	015a      	lsls	r2, r3, #5
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	4413      	add	r3, r2
 800854c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008550:	461a      	mov	r2, r3
 8008552:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	e008      	b.n	800856c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008566:	461a      	mov	r2, r3
 8008568:	2300      	movs	r3, #0
 800856a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008578:	461a      	mov	r2, r3
 800857a:	2300      	movs	r3, #0
 800857c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800857e:	693b      	ldr	r3, [r7, #16]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858a:	461a      	mov	r2, r3
 800858c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008590:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	3301      	adds	r3, #1
 8008596:	613b      	str	r3, [r7, #16]
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	429a      	cmp	r2, r3
 800859e:	d3b7      	bcc.n	8008510 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	68fa      	ldr	r2, [r7, #12]
 80085aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d105      	bne.n	80085d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f043 0210 	orr.w	r2, r3, #16
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	699a      	ldr	r2, [r3, #24]
 80085d8:	4b0e      	ldr	r3, [pc, #56]	; (8008614 <USB_DevInit+0x2b4>)
 80085da:	4313      	orrs	r3, r2
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f043 0208 	orr.w	r2, r3, #8
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80085f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d105      	bne.n	8008604 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	699a      	ldr	r2, [r3, #24]
 80085fc:	4b06      	ldr	r3, [pc, #24]	; (8008618 <USB_DevInit+0x2b8>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008604:	7dfb      	ldrb	r3, [r7, #23]
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008610:	b004      	add	sp, #16
 8008612:	4770      	bx	lr
 8008614:	803c3800 	.word	0x803c3800
 8008618:	40000004 	.word	0x40000004

0800861c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	019b      	lsls	r3, r3, #6
 800862e:	f043 0220 	orr.w	r2, r3, #32
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	3301      	adds	r3, #1
 800863a:	60fb      	str	r3, [r7, #12]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4a09      	ldr	r2, [pc, #36]	; (8008664 <USB_FlushTxFifo+0x48>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d901      	bls.n	8008648 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	691b      	ldr	r3, [r3, #16]
 800864c:	f003 0320 	and.w	r3, r3, #32
 8008650:	2b20      	cmp	r3, #32
 8008652:	d0f0      	beq.n	8008636 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	00030d40 	.word	0x00030d40

08008668 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008668:	b480      	push	{r7}
 800866a:	b085      	sub	sp, #20
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008670:	2300      	movs	r3, #0
 8008672:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2210      	movs	r2, #16
 8008678:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	4a09      	ldr	r2, [pc, #36]	; (80086a8 <USB_FlushRxFifo+0x40>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d901      	bls.n	800868c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008688:	2303      	movs	r3, #3
 800868a:	e006      	b.n	800869a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	691b      	ldr	r3, [r3, #16]
 8008690:	f003 0310 	and.w	r3, r3, #16
 8008694:	2b10      	cmp	r3, #16
 8008696:	d0f0      	beq.n	800867a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008698:	2300      	movs	r3, #0
}
 800869a:	4618      	mov	r0, r3
 800869c:	3714      	adds	r7, #20
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	00030d40 	.word	0x00030d40

080086ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	78fb      	ldrb	r3, [r7, #3]
 80086c6:	68f9      	ldr	r1, [r7, #12]
 80086c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086cc:	4313      	orrs	r3, r2
 80086ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086d0:	2300      	movs	r3, #0
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3714      	adds	r7, #20
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr

080086de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b084      	sub	sp, #16
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	68fa      	ldr	r2, [r7, #12]
 80086f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80086f8:	f043 0302 	orr.w	r3, r3, #2
 80086fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80086fe:	2003      	movs	r0, #3
 8008700:	f7f9 f85e 	bl	80017c0 <HAL_Delay>

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	3301      	adds	r3, #1
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	4a13      	ldr	r2, [pc, #76]	; (8008774 <USB_CoreReset+0x64>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d901      	bls.n	800872e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800872a:	2303      	movs	r3, #3
 800872c:	e01b      	b.n	8008766 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	2b00      	cmp	r3, #0
 8008734:	daf2      	bge.n	800871c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008736:	2300      	movs	r3, #0
 8008738:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	f043 0201 	orr.w	r2, r3, #1
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3301      	adds	r3, #1
 800874a:	60fb      	str	r3, [r7, #12]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	4a09      	ldr	r2, [pc, #36]	; (8008774 <USB_CoreReset+0x64>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d901      	bls.n	8008758 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e006      	b.n	8008766 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	f003 0301 	and.w	r3, r3, #1
 8008760:	2b01      	cmp	r3, #1
 8008762:	d0f0      	beq.n	8008746 <USB_CoreReset+0x36>

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr
 8008772:	bf00      	nop
 8008774:	00030d40 	.word	0x00030d40

08008778 <__libc_init_array>:
 8008778:	b570      	push	{r4, r5, r6, lr}
 800877a:	4e0d      	ldr	r6, [pc, #52]	; (80087b0 <__libc_init_array+0x38>)
 800877c:	4c0d      	ldr	r4, [pc, #52]	; (80087b4 <__libc_init_array+0x3c>)
 800877e:	1ba4      	subs	r4, r4, r6
 8008780:	10a4      	asrs	r4, r4, #2
 8008782:	2500      	movs	r5, #0
 8008784:	42a5      	cmp	r5, r4
 8008786:	d109      	bne.n	800879c <__libc_init_array+0x24>
 8008788:	4e0b      	ldr	r6, [pc, #44]	; (80087b8 <__libc_init_array+0x40>)
 800878a:	4c0c      	ldr	r4, [pc, #48]	; (80087bc <__libc_init_array+0x44>)
 800878c:	f000 f820 	bl	80087d0 <_init>
 8008790:	1ba4      	subs	r4, r4, r6
 8008792:	10a4      	asrs	r4, r4, #2
 8008794:	2500      	movs	r5, #0
 8008796:	42a5      	cmp	r5, r4
 8008798:	d105      	bne.n	80087a6 <__libc_init_array+0x2e>
 800879a:	bd70      	pop	{r4, r5, r6, pc}
 800879c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087a0:	4798      	blx	r3
 80087a2:	3501      	adds	r5, #1
 80087a4:	e7ee      	b.n	8008784 <__libc_init_array+0xc>
 80087a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80087aa:	4798      	blx	r3
 80087ac:	3501      	adds	r5, #1
 80087ae:	e7f2      	b.n	8008796 <__libc_init_array+0x1e>
 80087b0:	08008810 	.word	0x08008810
 80087b4:	08008810 	.word	0x08008810
 80087b8:	08008810 	.word	0x08008810
 80087bc:	08008814 	.word	0x08008814

080087c0 <memset>:
 80087c0:	4402      	add	r2, r0
 80087c2:	4603      	mov	r3, r0
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d100      	bne.n	80087ca <memset+0xa>
 80087c8:	4770      	bx	lr
 80087ca:	f803 1b01 	strb.w	r1, [r3], #1
 80087ce:	e7f9      	b.n	80087c4 <memset+0x4>

080087d0 <_init>:
 80087d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d2:	bf00      	nop
 80087d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087d6:	bc08      	pop	{r3}
 80087d8:	469e      	mov	lr, r3
 80087da:	4770      	bx	lr

080087dc <_fini>:
 80087dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087de:	bf00      	nop
 80087e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087e2:	bc08      	pop	{r3}
 80087e4:	469e      	mov	lr, r3
 80087e6:	4770      	bx	lr
