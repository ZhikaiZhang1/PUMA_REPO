
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f21c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0801f4b8  0801f4b8  0002f4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f880  0801f880  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801f880  0801f880  0002f880  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f888  0801f888  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f888  0801f888  0002f888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f88c  0801f88c  0002f88c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  24000000  0801f890  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  240001f0  0801fa80  000301f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  24001f68  0801fa80  00031f68  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002eda0  00000000  00000000  0003021e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004fac  00000000  00000000  0005efbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  00063f70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  000657f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003b2dd  00000000  00000000  00066e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a68c  00000000  00000000  000a213d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001653b4  00000000  00000000  000bc7c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00221b7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a18  00000000  00000000  00221bf8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f0 	.word	0x240001f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801f49c 	.word	0x0801f49c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f4 	.word	0x240001f4
 80002d4:	0801f49c 	.word	0x0801f49c

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* port;
		uint16_t  pin_num;
    }PINS;*/
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	f000 80cd 	beq.w	8000794 <HAL_GPIO_EXTI_Callback+0x1ac>
 80005fa:	2b04      	cmp	r3, #4
 80005fc:	dc04      	bgt.n	8000608 <HAL_GPIO_EXTI_Callback+0x20>
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d00c      	beq.n	800061c <HAL_GPIO_EXTI_Callback+0x34>
 8000602:	2b02      	cmp	r3, #2
 8000604:	d068      	beq.n	80006d8 <HAL_GPIO_EXTI_Callback+0xf0>
			  motor_steps[5]--;
			  delta_pos[5]--;
		  }
		break;
	default:
		break;
 8000606:	e24f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
	switch (GPIO_Pin){
 8000608:	2b10      	cmp	r3, #16
 800060a:	f000 818d 	beq.w	8000928 <HAL_GPIO_EXTI_Callback+0x340>
 800060e:	2b80      	cmp	r3, #128	; 0x80
 8000610:	f000 81ea 	beq.w	80009e8 <HAL_GPIO_EXTI_Callback+0x400>
 8000614:	2b08      	cmp	r3, #8
 8000616:	f000 8129 	beq.w	800086c <HAL_GPIO_EXTI_Callback+0x284>
		break;
 800061a:	e245      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 800061c:	4b8c      	ldr	r3, [pc, #560]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800061e:	681a      	ldr	r2, [r3, #0]
 8000620:	4b8b      	ldr	r3, [pc, #556]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	4619      	mov	r1, r3
 8000626:	4610      	mov	r0, r2
 8000628:	f012 ff82 	bl	8013530 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	461a      	mov	r2, r3
 8000630:	4b88      	ldr	r3, [pc, #544]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000632:	601a      	str	r2, [r3, #0]
		  if((val_encoderA[0] == LOW) && Lstate[0]==HIGH)
 8000634:	4b88      	ldr	r3, [pc, #544]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d12b      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800063c:	4b85      	ldr	r3, [pc, #532]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d127      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
			val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 8000644:	4b82      	ldr	r3, [pc, #520]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000646:	689a      	ldr	r2, [r3, #8]
 8000648:	4b81      	ldr	r3, [pc, #516]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800064a:	899b      	ldrh	r3, [r3, #12]
 800064c:	4619      	mov	r1, r3
 800064e:	4610      	mov	r0, r2
 8000650:	f012 ff6e 	bl	8013530 <HAL_GPIO_ReadPin>
 8000654:	4603      	mov	r3, r0
 8000656:	461a      	mov	r2, r3
 8000658:	4b80      	ldr	r3, [pc, #512]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065a:	601a      	str	r2, [r3, #0]
		    if(val_encoderB[0] == LOW && direction[0])
 800065c:	4b7f      	ldr	r3, [pc, #508]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d108      	bne.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
 8000664:	4b7e      	ldr	r3, [pc, #504]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2b00      	cmp	r3, #0
 800066c:	d003      	beq.n	8000676 <HAL_GPIO_EXTI_Callback+0x8e>
		      direction[0] = false; //Reverse
 800066e:	4b7c      	ldr	r3, [pc, #496]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]
 8000674:	e00e      	b.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    else if(val_encoderB[0] == HIGH && !direction[0])
 8000676:	4b79      	ldr	r3, [pc, #484]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b01      	cmp	r3, #1
 800067c:	d10a      	bne.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
 800067e:	4b78      	ldr	r3, [pc, #480]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	f083 0301 	eor.w	r3, r3, #1
 8000688:	b2db      	uxtb	r3, r3
 800068a:	2b00      	cmp	r3, #0
 800068c:	d002      	beq.n	8000694 <HAL_GPIO_EXTI_Callback+0xac>
		    	direction[0] = true;  //Forward
 800068e:	4b74      	ldr	r3, [pc, #464]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
		  val_encoderA[0] = Lstate[0];
 8000694:	4b6f      	ldr	r3, [pc, #444]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a6f      	ldr	r2, [pc, #444]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 800069a:	6013      	str	r3, [r2, #0]
		  if(!direction[0]){
 800069c:	4b70      	ldr	r3, [pc, #448]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	b2db      	uxtb	r3, r3
 80006a2:	f083 0301 	eor.w	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00a      	beq.n	80006c2 <HAL_GPIO_EXTI_Callback+0xda>
			  motor_steps[0]++;
 80006ac:	4b6d      	ldr	r3, [pc, #436]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	3301      	adds	r3, #1
 80006b2:	4a6c      	ldr	r2, [pc, #432]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006b4:	6013      	str	r3, [r2, #0]
			  delta_pos[0]++;
 80006b6:	4b6c      	ldr	r3, [pc, #432]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	4a6a      	ldr	r2, [pc, #424]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006be:	6013      	str	r3, [r2, #0]
		break;
 80006c0:	e1f2      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[0]--;
 80006c2:	4b68      	ldr	r3, [pc, #416]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	3b01      	subs	r3, #1
 80006c8:	4a66      	ldr	r2, [pc, #408]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 80006ca:	6013      	str	r3, [r2, #0]
			  delta_pos[0]--;
 80006cc:	4b66      	ldr	r3, [pc, #408]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	3b01      	subs	r3, #1
 80006d2:	4a65      	ldr	r2, [pc, #404]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 80006d4:	6013      	str	r3, [r2, #0]
		break;
 80006d6:	e1e7      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 80006d8:	4b5d      	ldr	r3, [pc, #372]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006da:	691a      	ldr	r2, [r3, #16]
 80006dc:	4b5c      	ldr	r3, [pc, #368]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80006de:	8a9b      	ldrh	r3, [r3, #20]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4610      	mov	r0, r2
 80006e4:	f012 ff24 	bl	8013530 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006ee:	605a      	str	r2, [r3, #4]
		  if((val_encoderA[1] == LOW) && Lstate[1]==HIGH)
 80006f0:	4b59      	ldr	r3, [pc, #356]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d12b      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 80006f8:	4b56      	ldr	r3, [pc, #344]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d127      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
			val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 8000700:	4b53      	ldr	r3, [pc, #332]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	4b52      	ldr	r3, [pc, #328]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000706:	8b9b      	ldrh	r3, [r3, #28]
 8000708:	4619      	mov	r1, r3
 800070a:	4610      	mov	r0, r2
 800070c:	f012 ff10 	bl	8013530 <HAL_GPIO_ReadPin>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b51      	ldr	r3, [pc, #324]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000716:	605a      	str	r2, [r3, #4]
		    if(val_encoderB[1] == LOW && direction[1])
 8000718:	4b50      	ldr	r3, [pc, #320]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b00      	cmp	r3, #0
 800071e:	d108      	bne.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
 8000720:	4b4f      	ldr	r3, [pc, #316]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000722:	785b      	ldrb	r3, [r3, #1]
 8000724:	b2db      	uxtb	r3, r3
 8000726:	2b00      	cmp	r3, #0
 8000728:	d003      	beq.n	8000732 <HAL_GPIO_EXTI_Callback+0x14a>
		      direction[1] = false; //Reverse
 800072a:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800072c:	2200      	movs	r2, #0
 800072e:	705a      	strb	r2, [r3, #1]
 8000730:	e00e      	b.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    else if(val_encoderB[1] == HIGH && !direction[1])
 8000732:	4b4a      	ldr	r3, [pc, #296]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	2b01      	cmp	r3, #1
 8000738:	d10a      	bne.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
 800073a:	4b49      	ldr	r3, [pc, #292]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800073c:	785b      	ldrb	r3, [r3, #1]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <HAL_GPIO_EXTI_Callback+0x168>
		    	direction[1] = true;  //Forward
 800074a:	4b45      	ldr	r3, [pc, #276]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800074c:	2201      	movs	r2, #1
 800074e:	705a      	strb	r2, [r3, #1]
		  val_encoderA[1] = Lstate[1];
 8000750:	4b40      	ldr	r3, [pc, #256]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a40      	ldr	r2, [pc, #256]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000756:	6053      	str	r3, [r2, #4]
		  if(!direction[1]){
 8000758:	4b41      	ldr	r3, [pc, #260]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 800075a:	785b      	ldrb	r3, [r3, #1]
 800075c:	b2db      	uxtb	r3, r3
 800075e:	f083 0301 	eor.w	r3, r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	d00a      	beq.n	800077e <HAL_GPIO_EXTI_Callback+0x196>
			  motor_steps[1]++;
 8000768:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	3301      	adds	r3, #1
 800076e:	4a3d      	ldr	r2, [pc, #244]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000770:	6053      	str	r3, [r2, #4]
			  delta_pos[1]++;
 8000772:	4b3d      	ldr	r3, [pc, #244]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	3301      	adds	r3, #1
 8000778:	4a3b      	ldr	r2, [pc, #236]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800077a:	6053      	str	r3, [r2, #4]
		break;
 800077c:	e194      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[1]--;
 800077e:	4b39      	ldr	r3, [pc, #228]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000780:	685b      	ldr	r3, [r3, #4]
 8000782:	3b01      	subs	r3, #1
 8000784:	4a37      	ldr	r2, [pc, #220]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000786:	6053      	str	r3, [r2, #4]
			  delta_pos[1]--;
 8000788:	4b37      	ldr	r3, [pc, #220]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	3b01      	subs	r3, #1
 800078e:	4a36      	ldr	r2, [pc, #216]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000790:	6053      	str	r3, [r2, #4]
		break;
 8000792:	e189      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 8000794:	4b2e      	ldr	r3, [pc, #184]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 8000796:	6a1a      	ldr	r2, [r3, #32]
 8000798:	4b2d      	ldr	r3, [pc, #180]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 800079a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4610      	mov	r0, r2
 80007a0:	f012 fec6 	bl	8013530 <HAL_GPIO_ReadPin>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007aa:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d12b      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 80007b6:	689b      	ldr	r3, [r3, #8]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d127      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 80007bc:	4b24      	ldr	r3, [pc, #144]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007c0:	4b23      	ldr	r3, [pc, #140]	; (8000850 <HAL_GPIO_EXTI_Callback+0x268>)
 80007c2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80007c4:	4619      	mov	r1, r3
 80007c6:	4610      	mov	r0, r2
 80007c8:	f012 feb2 	bl	8013530 <HAL_GPIO_ReadPin>
 80007cc:	4603      	mov	r3, r0
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d2:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 80007d4:	4b21      	ldr	r3, [pc, #132]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007d6:	689b      	ldr	r3, [r3, #8]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d108      	bne.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d003      	beq.n	80007ee <HAL_GPIO_EXTI_Callback+0x206>
		      direction[2] = false; //Reverse
 80007e6:	4b1e      	ldr	r3, [pc, #120]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	709a      	strb	r2, [r3, #2]
 80007ec:	e00e      	b.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 80007ee:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_GPIO_EXTI_Callback+0x274>)
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d10a      	bne.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
 80007f6:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 80007f8:	789b      	ldrb	r3, [r3, #2]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	f083 0301 	eor.w	r3, r3, #1
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d002      	beq.n	800080c <HAL_GPIO_EXTI_Callback+0x224>
		    	direction[2] = true;  //Forward
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000808:	2201      	movs	r2, #1
 800080a:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <HAL_GPIO_EXTI_Callback+0x26c>)
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	4a11      	ldr	r2, [pc, #68]	; (8000858 <HAL_GPIO_EXTI_Callback+0x270>)
 8000812:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_GPIO_EXTI_Callback+0x278>)
 8000816:	789b      	ldrb	r3, [r3, #2]
 8000818:	b2db      	uxtb	r3, r3
 800081a:	f083 0301 	eor.w	r3, r3, #1
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b00      	cmp	r3, #0
 8000822:	d00a      	beq.n	800083a <HAL_GPIO_EXTI_Callback+0x252>
			  motor_steps[2]++;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000826:	689b      	ldr	r3, [r3, #8]
 8000828:	3301      	adds	r3, #1
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800082c:	6093      	str	r3, [r2, #8]
			  delta_pos[2]++;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000830:	689b      	ldr	r3, [r3, #8]
 8000832:	3301      	adds	r3, #1
 8000834:	4a0c      	ldr	r2, [pc, #48]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000836:	6093      	str	r3, [r2, #8]
		break;
 8000838:	e136      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[2]--;
 800083a:	4b0a      	ldr	r3, [pc, #40]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	3b01      	subs	r3, #1
 8000840:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_GPIO_EXTI_Callback+0x27c>)
 8000842:	6093      	str	r3, [r2, #8]
			  delta_pos[2]--;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 8000846:	689b      	ldr	r3, [r3, #8]
 8000848:	3b01      	subs	r3, #1
 800084a:	4a07      	ldr	r2, [pc, #28]	; (8000868 <HAL_GPIO_EXTI_Callback+0x280>)
 800084c:	6093      	str	r3, [r2, #8]
		break;
 800084e:	e12b      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
 8000850:	240003cc 	.word	0x240003cc
 8000854:	240003b4 	.word	0x240003b4
 8000858:	2400039c 	.word	0x2400039c
 800085c:	240004ac 	.word	0x240004ac
 8000860:	24000000 	.word	0x24000000
 8000864:	2400020c 	.word	0x2400020c
 8000868:	24000258 	.word	0x24000258
		 Lstate[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 800086c:	4b90      	ldr	r3, [pc, #576]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800086e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000870:	4b8f      	ldr	r3, [pc, #572]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000872:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000874:	4619      	mov	r1, r3
 8000876:	4610      	mov	r0, r2
 8000878:	f012 fe5a 	bl	8013530 <HAL_GPIO_ReadPin>
 800087c:	4603      	mov	r3, r0
 800087e:	461a      	mov	r2, r3
 8000880:	4b8c      	ldr	r3, [pc, #560]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000882:	60da      	str	r2, [r3, #12]
		  if((val_encoderA[3] == LOW) && Lstate[3]==HIGH)
 8000884:	4b8c      	ldr	r3, [pc, #560]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d12b      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 800088c:	4b89      	ldr	r3, [pc, #548]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d127      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
			val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 8000894:	4b86      	ldr	r3, [pc, #536]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000896:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000898:	4b85      	ldr	r3, [pc, #532]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800089a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800089c:	4619      	mov	r1, r3
 800089e:	4610      	mov	r0, r2
 80008a0:	f012 fe46 	bl	8013530 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	461a      	mov	r2, r3
 80008a8:	4b84      	ldr	r3, [pc, #528]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008aa:	60da      	str	r2, [r3, #12]
		    if(val_encoderB[3] == LOW && direction[3])
 80008ac:	4b83      	ldr	r3, [pc, #524]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d108      	bne.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
 80008b4:	4b82      	ldr	r3, [pc, #520]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008b6:	78db      	ldrb	r3, [r3, #3]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_EXTI_Callback+0x2de>
		      direction[3] = false; //Reverse
 80008be:	4b80      	ldr	r3, [pc, #512]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	70da      	strb	r2, [r3, #3]
 80008c4:	e00e      	b.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    else if(val_encoderB[3] == HIGH && !direction[3])
 80008c6:	4b7d      	ldr	r3, [pc, #500]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 80008c8:	68db      	ldr	r3, [r3, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d10a      	bne.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
 80008ce:	4b7c      	ldr	r3, [pc, #496]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008d0:	78db      	ldrb	r3, [r3, #3]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f083 0301 	eor.w	r3, r3, #1
 80008d8:	b2db      	uxtb	r3, r3
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d002      	beq.n	80008e4 <HAL_GPIO_EXTI_Callback+0x2fc>
		    	direction[3] = true;  //Forward
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	70da      	strb	r2, [r3, #3]
		  val_encoderA[3] = Lstate[3];
 80008e4:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	4a73      	ldr	r2, [pc, #460]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80008ea:	60d3      	str	r3, [r2, #12]
		  if(!direction[3]){
 80008ec:	4b74      	ldr	r3, [pc, #464]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80008ee:	78db      	ldrb	r3, [r3, #3]
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	f083 0301 	eor.w	r3, r3, #1
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00a      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x32a>
			  motor_steps[3]++;
 80008fc:	4b71      	ldr	r3, [pc, #452]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	4a70      	ldr	r2, [pc, #448]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000904:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]++;
 8000906:	4b70      	ldr	r3, [pc, #448]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000908:	68db      	ldr	r3, [r3, #12]
 800090a:	3301      	adds	r3, #1
 800090c:	4a6e      	ldr	r2, [pc, #440]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800090e:	60d3      	str	r3, [r2, #12]
		break;
 8000910:	e0ca      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[3]--;
 8000912:	4b6c      	ldr	r3, [pc, #432]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000914:	68db      	ldr	r3, [r3, #12]
 8000916:	3b01      	subs	r3, #1
 8000918:	4a6a      	ldr	r2, [pc, #424]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 800091a:	60d3      	str	r3, [r2, #12]
			  delta_pos[3]--;
 800091c:	4b6a      	ldr	r3, [pc, #424]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 800091e:	68db      	ldr	r3, [r3, #12]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a69      	ldr	r2, [pc, #420]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000924:	60d3      	str	r3, [r2, #12]
		break;
 8000926:	e0bf      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[9].pin_num);
 8000928:	4b61      	ldr	r3, [pc, #388]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092c:	4b60      	ldr	r3, [pc, #384]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 800092e:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000932:	4619      	mov	r1, r3
 8000934:	4610      	mov	r0, r2
 8000936:	f012 fdfb 	bl	8013530 <HAL_GPIO_ReadPin>
 800093a:	4603      	mov	r3, r0
 800093c:	461a      	mov	r2, r3
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000940:	611a      	str	r2, [r3, #16]
		  if((val_encoderA[4] == LOW) && Lstate[4]==HIGH)
 8000942:	4b5d      	ldr	r3, [pc, #372]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000944:	691b      	ldr	r3, [r3, #16]
 8000946:	2b00      	cmp	r3, #0
 8000948:	d12c      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800094a:	4b5a      	ldr	r3, [pc, #360]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 800094c:	691b      	ldr	r3, [r3, #16]
 800094e:	2b01      	cmp	r3, #1
 8000950:	d128      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
			val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000952:	4b57      	ldr	r3, [pc, #348]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000954:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000956:	4b56      	ldr	r3, [pc, #344]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000958:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800095c:	4619      	mov	r1, r3
 800095e:	4610      	mov	r0, r2
 8000960:	f012 fde6 	bl	8013530 <HAL_GPIO_ReadPin>
 8000964:	4603      	mov	r3, r0
 8000966:	461a      	mov	r2, r3
 8000968:	4b54      	ldr	r3, [pc, #336]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096a:	611a      	str	r2, [r3, #16]
		    if(val_encoderB[4] == LOW && direction[4])
 800096c:	4b53      	ldr	r3, [pc, #332]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 800096e:	691b      	ldr	r3, [r3, #16]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d108      	bne.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
 8000974:	4b52      	ldr	r3, [pc, #328]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b00      	cmp	r3, #0
 800097c:	d003      	beq.n	8000986 <HAL_GPIO_EXTI_Callback+0x39e>
		      direction[4] = false; //Reverse
 800097e:	4b50      	ldr	r3, [pc, #320]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000980:	2200      	movs	r2, #0
 8000982:	711a      	strb	r2, [r3, #4]
 8000984:	e00e      	b.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    else if(val_encoderB[4] == HIGH && !direction[4])
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000988:	691b      	ldr	r3, [r3, #16]
 800098a:	2b01      	cmp	r3, #1
 800098c:	d10a      	bne.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
 800098e:	4b4c      	ldr	r3, [pc, #304]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000990:	791b      	ldrb	r3, [r3, #4]
 8000992:	b2db      	uxtb	r3, r3
 8000994:	f083 0301 	eor.w	r3, r3, #1
 8000998:	b2db      	uxtb	r3, r3
 800099a:	2b00      	cmp	r3, #0
 800099c:	d002      	beq.n	80009a4 <HAL_GPIO_EXTI_Callback+0x3bc>
		    	direction[4] = true;  //Forward
 800099e:	4b48      	ldr	r3, [pc, #288]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	711a      	strb	r2, [r3, #4]
		  val_encoderA[4] = Lstate[4];
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 80009a6:	691b      	ldr	r3, [r3, #16]
 80009a8:	4a43      	ldr	r2, [pc, #268]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 80009aa:	6113      	str	r3, [r2, #16]
		  if(!direction[4]){
 80009ac:	4b44      	ldr	r3, [pc, #272]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	b2db      	uxtb	r3, r3
 80009b2:	f083 0301 	eor.w	r3, r3, #1
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d00a      	beq.n	80009d2 <HAL_GPIO_EXTI_Callback+0x3ea>
			  motor_steps[4]++;
 80009bc:	4b41      	ldr	r3, [pc, #260]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009be:	691b      	ldr	r3, [r3, #16]
 80009c0:	3301      	adds	r3, #1
 80009c2:	4a40      	ldr	r2, [pc, #256]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009c4:	6113      	str	r3, [r2, #16]
			  delta_pos[4]++;
 80009c6:	4b40      	ldr	r3, [pc, #256]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009c8:	691b      	ldr	r3, [r3, #16]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a3e      	ldr	r2, [pc, #248]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009ce:	6113      	str	r3, [r2, #16]
		break;
 80009d0:	e06a      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
			  motor_steps[4]--;
 80009d2:	4b3c      	ldr	r3, [pc, #240]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009d4:	691b      	ldr	r3, [r3, #16]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	4a3a      	ldr	r2, [pc, #232]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 80009da:	6113      	str	r3, [r2, #16]
			  delta_pos[4]--;
 80009dc:	4b3a      	ldr	r3, [pc, #232]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	3b01      	subs	r3, #1
 80009e2:	4a39      	ldr	r2, [pc, #228]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 80009e4:	6113      	str	r3, [r2, #16]
		break;
 80009e6:	e05f      	b.n	8000aa8 <HAL_GPIO_EXTI_Callback+0x4c0>
		 Lstate[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 80009e8:	4b31      	ldr	r3, [pc, #196]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ec:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 80009ee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80009f2:	4619      	mov	r1, r3
 80009f4:	4610      	mov	r0, r2
 80009f6:	f012 fd9b 	bl	8013530 <HAL_GPIO_ReadPin>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	4b2d      	ldr	r3, [pc, #180]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a00:	615a      	str	r2, [r3, #20]
		  if((val_encoderA[5] == LOW) && Lstate[5]==HIGH)
 8000a02:	4b2d      	ldr	r3, [pc, #180]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a04:	695b      	ldr	r3, [r3, #20]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d12c      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a0a:	4b2a      	ldr	r3, [pc, #168]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a0c:	695b      	ldr	r3, [r3, #20]
 8000a0e:	2b01      	cmp	r3, #1
 8000a10:	d128      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
			val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a14:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <HAL_GPIO_EXTI_Callback+0x4c8>)
 8000a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4610      	mov	r0, r2
 8000a20:	f012 fd86 	bl	8013530 <HAL_GPIO_ReadPin>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b24      	ldr	r3, [pc, #144]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2a:	615a      	str	r2, [r3, #20]
		    if(val_encoderB[5] == LOW && direction[5])
 8000a2c:	4b23      	ldr	r3, [pc, #140]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d108      	bne.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a36:	795b      	ldrb	r3, [r3, #5]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d003      	beq.n	8000a46 <HAL_GPIO_EXTI_Callback+0x45e>
		      direction[5] = false; //Reverse
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	715a      	strb	r2, [r3, #5]
 8000a44:	e00e      	b.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    else if(val_encoderB[5] == HIGH && !direction[5])
 8000a46:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <HAL_GPIO_EXTI_Callback+0x4d4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	2b01      	cmp	r3, #1
 8000a4c:	d10a      	bne.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	f083 0301 	eor.w	r3, r3, #1
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d002      	beq.n	8000a64 <HAL_GPIO_EXTI_Callback+0x47c>
		    	direction[5] = true;  //Forward
 8000a5e:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a60:	2201      	movs	r2, #1
 8000a62:	715a      	strb	r2, [r3, #5]
		  val_encoderA[5] = Lstate[5];
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <HAL_GPIO_EXTI_Callback+0x4cc>)
 8000a66:	695b      	ldr	r3, [r3, #20]
 8000a68:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_GPIO_EXTI_Callback+0x4d0>)
 8000a6a:	6153      	str	r3, [r2, #20]
		  if(!direction[5]){
 8000a6c:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <HAL_GPIO_EXTI_Callback+0x4d8>)
 8000a6e:	795b      	ldrb	r3, [r3, #5]
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	f083 0301 	eor.w	r3, r3, #1
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d00a      	beq.n	8000a92 <HAL_GPIO_EXTI_Callback+0x4aa>
			  motor_steps[5]++;
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a84:	6153      	str	r3, [r2, #20]
			  delta_pos[5]++;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a88:	695b      	ldr	r3, [r3, #20]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a8e:	6153      	str	r3, [r2, #20]
		break;
 8000a90:	e009      	b.n	8000aa6 <HAL_GPIO_EXTI_Callback+0x4be>
			  motor_steps[5]--;
 8000a92:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a0a      	ldr	r2, [pc, #40]	; (8000ac4 <HAL_GPIO_EXTI_Callback+0x4dc>)
 8000a9a:	6153      	str	r3, [r2, #20]
			  delta_pos[5]--;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a09      	ldr	r2, [pc, #36]	; (8000ac8 <HAL_GPIO_EXTI_Callback+0x4e0>)
 8000aa4:	6153      	str	r3, [r2, #20]
		break;
 8000aa6:	bf00      	nop
	}
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	240003cc 	.word	0x240003cc
 8000ab4:	240003b4 	.word	0x240003b4
 8000ab8:	2400039c 	.word	0x2400039c
 8000abc:	240004ac 	.word	0x240004ac
 8000ac0:	24000000 	.word	0x24000000
 8000ac4:	2400020c 	.word	0x2400020c
 8000ac8:	24000258 	.word	0x24000258

08000acc <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08c      	sub	sp, #48	; 0x30
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
 8000ae8:	615a      	str	r2, [r3, #20]
 8000aea:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	2200      	movs	r2, #0
 8000b02:	4619      	mov	r1, r3
 8000b04:	4819      	ldr	r0, [pc, #100]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b06:	f016 fbc9 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000b10:	f001 fa08 	bl	8001f24 <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b18:	f107 0314 	add.w	r3, r7, #20
 8000b1c:	220c      	movs	r2, #12
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4812      	ldr	r0, [pc, #72]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b22:	f016 fbbb 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000b2c:	f001 f9fa 	bl	8001f24 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2204      	movs	r2, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	480b      	ldr	r0, [pc, #44]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b3e:	f016 fbad 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000b48:	f001 f9ec 	bl	8001f24 <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4807      	ldr	r0, [pc, #28]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b50:	f016 fa2c 	bl	8016fac <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000b54:	2104      	movs	r1, #4
 8000b56:	4805      	ldr	r0, [pc, #20]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b58:	f016 fa28 	bl	8016fac <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000b5c:	210c      	movs	r1, #12
 8000b5e:	4803      	ldr	r0, [pc, #12]	; (8000b6c <PWM3_change_duty_cycle+0xa0>)
 8000b60:	f016 fa24 	bl	8016fac <HAL_TIM_PWM_Start>
}
 8000b64:	bf00      	nop
 8000b66:	3730      	adds	r7, #48	; 0x30
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2400046c 	.word	0x2400046c

08000b70 <PWM1_change_duty_cycle>:
void PWM1_change_duty_cycle (int valuePE11, int valuePE13){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b08a      	sub	sp, #40	; 0x28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
 8000b82:	605a      	str	r2, [r3, #4]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	60da      	str	r2, [r3, #12]
 8000b88:	611a      	str	r2, [r3, #16]
 8000b8a:	615a      	str	r2, [r3, #20]
 8000b8c:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b8e:	2360      	movs	r3, #96	; 0x60
 8000b90:	60fb      	str	r3, [r7, #12]
	  sConfigOC.Pulse = valuePE11;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	613b      	str	r3, [r7, #16]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000baa:	f107 030c 	add.w	r3, r7, #12
 8000bae:	2204      	movs	r2, #4
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bb4:	f016 fb72 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <PWM1_change_duty_cycle+0x52>
	  {
	    Error_Handler();
 8000bbe:	f001 f9b1 	bl	8001f24 <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePE13;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	613b      	str	r3, [r7, #16]
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	2208      	movs	r2, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	480a      	ldr	r0, [pc, #40]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bd0:	f016 fb64 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <PWM1_change_duty_cycle+0x6e>
	  {
	    Error_Handler();
 8000bda:	f001 f9a3 	bl	8001f24 <Error_Handler>
	  }
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bde:	2104      	movs	r1, #4
 8000be0:	4805      	ldr	r0, [pc, #20]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000be2:	f016 f9e3 	bl	8016fac <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000be6:	2108      	movs	r1, #8
 8000be8:	4803      	ldr	r0, [pc, #12]	; (8000bf8 <PWM1_change_duty_cycle+0x88>)
 8000bea:	f016 f9df 	bl	8016fac <HAL_TIM_PWM_Start>
}
 8000bee:	bf00      	nop
 8000bf0:	3728      	adds	r7, #40	; 0x28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	24000550 	.word	0x24000550

08000bfc <PWM2_change_duty_cycle>:

//pin PA5
void PWM2_change_duty_cycle (int valuePA5){
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	f107 030c 	add.w	r3, r7, #12
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c18:	2360      	movs	r3, #96	; 0x60
 8000c1a:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = valuePA5;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	613b      	str	r3, [r7, #16]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	617b      	str	r3, [r7, #20]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4807      	ldr	r0, [pc, #28]	; (8000c50 <PWM2_change_duty_cycle+0x54>)
 8000c32:	f016 fb33 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <PWM2_change_duty_cycle+0x44>
	{
	  Error_Handler();
 8000c3c:	f001 f972 	bl	8001f24 <Error_Handler>
    }
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000c40:	2100      	movs	r1, #0
 8000c42:	4803      	ldr	r0, [pc, #12]	; (8000c50 <PWM2_change_duty_cycle+0x54>)
 8000c44:	f016 f9b2 	bl	8016fac <HAL_TIM_PWM_Start>
}
 8000c48:	bf00      	nop
 8000c4a:	3728      	adds	r7, #40	; 0x28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	24000590 	.word	0x24000590
 8000c54:	00000000 	.word	0x00000000

08000c58 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	int j;
	if (htim == &htim7){
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a71      	ldr	r2, [pc, #452]	; (8000e28 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	f040 80c2 	bne.w	8000dee <HAL_TIM_PeriodElapsedCallback+0x196>
		for (j = 0; j < NUM_JOINTS; j++){
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
 8000c6e:	e0b7      	b.n	8000de0 <HAL_TIM_PeriodElapsedCallback+0x188>

			if (j <3){
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	dc38      	bgt.n	8000ce8 <HAL_TIM_PeriodElapsedCallback+0x90>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_1*2.0;
 8000c76:	4a6d      	ldr	r2, [pc, #436]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7e:	ee07 3a90 	vmov	s15, r3
 8000c82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000c86:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c8a:	ed9f 6b5d 	vldr	d6, [pc, #372]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000c8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000c92:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000c96:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000c9a:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000c9e:	4a64      	ldr	r2, [pc, #400]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	00db      	lsls	r3, r3, #3
 8000ca4:	4413      	add	r3, r2
 8000ca6:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01*2.0;
 8000caa:	4a62      	ldr	r2, [pc, #392]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cb2:	ee07 3a90 	vmov	s15, r3
 8000cb6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cba:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cbe:	ed9f 6b50 	vldr	d6, [pc, #320]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000cc2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000cc6:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000e08 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000cca:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000cce:	ed9f 5b50 	vldr	d5, [pc, #320]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000cd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000cd6:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000cda:	4a57      	ldr	r2, [pc, #348]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	00db      	lsls	r3, r3, #3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	ed83 7b00 	vstr	d7, [r3]
 8000ce6:	e073      	b.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else if (j < 5){
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	dc38      	bgt.n	8000d60 <HAL_TIM_PeriodElapsedCallback+0x108>
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_2*2.0;
 8000cee:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf6:	ee07 3a90 	vmov	s15, r3
 8000cfa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000cfe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d02:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d06:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d0a:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8000e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000d0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d12:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d16:	4a46      	ldr	r2, [pc, #280]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	00db      	lsls	r3, r3, #3
 8000d1c:	4413      	add	r3, r2
 8000d1e:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01*2.0;
 8000d22:	4a44      	ldr	r2, [pc, #272]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d2a:	ee07 3a90 	vmov	s15, r3
 8000d2e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d32:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d36:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d3a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000d3e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 8000e18 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000d42:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000d46:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000d4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d4e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d52:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	00db      	lsls	r3, r3, #3
 8000d58:	4413      	add	r3, r2
 8000d5a:	ed83 7b00 	vstr	d7, [r3]
 8000d5e:	e037      	b.n	8000dd0 <HAL_TIM_PeriodElapsedCallback+0x178>
			}
			else{
				current_angle[j] = (double)motor_steps[j] *2.0*3.1415926/REV_COUNT_3*2.0;
 8000d60:	4a32      	ldr	r2, [pc, #200]	; (8000e2c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d68:	ee07 3a90 	vmov	s15, r3
 8000d6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000d70:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d74:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000d78:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000d7c:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000d80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000d84:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000d88:	4a29      	ldr	r2, [pc, #164]	; (8000e30 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	00db      	lsls	r3, r3, #3
 8000d8e:	4413      	add	r3, r2
 8000d90:	ed83 7b00 	vstr	d7, [r3]
				joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01*2.0;
 8000d94:	4a27      	ldr	r2, [pc, #156]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000da4:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000da8:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8000e00 <HAL_TIM_PeriodElapsedCallback+0x1a8>
 8000dac:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000db0:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8000e20 <HAL_TIM_PeriodElapsedCallback+0x1c8>
 8000db4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000db8:	ed9f 5b15 	vldr	d5, [pc, #84]	; 8000e10 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 8000dbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000dc0:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4413      	add	r3, r2
 8000dcc:	ed83 7b00 	vstr	d7, [r3]
			}
			delta_pos[j] = 0;
 8000dd0:	4a18      	ldr	r2, [pc, #96]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < NUM_JOINTS; j++){
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	2b05      	cmp	r3, #5
 8000de4:	f77f af44 	ble.w	8000c70 <HAL_TIM_PeriodElapsedCallback+0x18>
		}

		need_control = true;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
	}
}
 8000dee:	bf00      	nop
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	f3af 8000 	nop.w
 8000e00:	4d12d84a 	.word	0x4d12d84a
 8000e04:	400921fb 	.word	0x400921fb
 8000e08:	00000000 	.word	0x00000000
 8000e0c:	40d0e000 	.word	0x40d0e000
 8000e10:	47ae147b 	.word	0x47ae147b
 8000e14:	3f847ae1 	.word	0x3f847ae1
 8000e18:	00000000 	.word	0x00000000
 8000e1c:	40b67c00 	.word	0x40b67c00
 8000e20:	00000000 	.word	0x00000000
 8000e24:	405cc000 	.word	0x405cc000
 8000e28:	24000630 	.word	0x24000630
 8000e2c:	2400020c 	.word	0x2400020c
 8000e30:	24000270 	.word	0x24000270
 8000e34:	24000258 	.word	0x24000258
 8000e38:	24000228 	.word	0x24000228
 8000e3c:	24000006 	.word	0x24000006

08000e40 <Joint_controller>:


void Joint_controller(bool homing, creal_T* G_q_vector){
 8000e40:	b590      	push	{r4, r7, lr}
 8000e42:	b097      	sub	sp, #92	; 0x5c
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
	int k;
	int PWM_val [6] = {0};
 8000e4c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
 8000e5c:	615a      	str	r2, [r3, #20]
	double G_q_r [6] = {0};
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	2230      	movs	r2, #48	; 0x30
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f01d fa52 	bl	801e310 <memset>
	G_q(G_CONSTANT, current_angle[2], current_angle[3], current_angle[4], current_angle[5], G_q_vector);
 8000e6c:	4b78      	ldr	r3, [pc, #480]	; (8001050 <Joint_controller+0x210>)
 8000e6e:	ed93 7b04 	vldr	d7, [r3, #16]
 8000e72:	4b77      	ldr	r3, [pc, #476]	; (8001050 <Joint_controller+0x210>)
 8000e74:	ed93 6b06 	vldr	d6, [r3, #24]
 8000e78:	4b75      	ldr	r3, [pc, #468]	; (8001050 <Joint_controller+0x210>)
 8000e7a:	ed93 5b08 	vldr	d5, [r3, #32]
 8000e7e:	4b74      	ldr	r3, [pc, #464]	; (8001050 <Joint_controller+0x210>)
 8000e80:	ed93 4b0a 	vldr	d4, [r3, #40]	; 0x28
 8000e84:	6838      	ldr	r0, [r7, #0]
 8000e86:	eeb0 3b45 	vmov.f64	d3, d5
 8000e8a:	eeb0 2b46 	vmov.f64	d2, d6
 8000e8e:	eeb0 1b47 	vmov.f64	d1, d7
 8000e92:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8001040 <Joint_controller+0x200>
 8000e96:	f001 fb97 	bl	80025c8 <G_q>
	for (k = 0; k < NUM_JOINTS; k++){
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	657b      	str	r3, [r7, #84]	; 0x54
 8000e9e:	e0b6      	b.n	800100e <Joint_controller+0x1ce>
		G_q_r[k] = (double)G_q_vector[k].re;
 8000ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ea2:	011b      	lsls	r3, r3, #4
 8000ea4:	683a      	ldr	r2, [r7, #0]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000eac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000eae:	00d2      	lsls	r2, r2, #3
 8000eb0:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000eb4:	440a      	add	r2, r1
 8000eb6:	3a50      	subs	r2, #80	; 0x50
 8000eb8:	e9c2 3400 	strd	r3, r4, [r2]
		backemf[k] = joint_speed[k] * V_CONSTANT[k];
 8000ebc:	4a65      	ldr	r2, [pc, #404]	; (8001054 <Joint_controller+0x214>)
 8000ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	4413      	add	r3, r2
 8000ec4:	ed93 6b00 	vldr	d6, [r3]
 8000ec8:	4a63      	ldr	r2, [pc, #396]	; (8001058 <Joint_controller+0x218>)
 8000eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ecc:	00db      	lsls	r3, r3, #3
 8000ece:	4413      	add	r3, r2
 8000ed0:	ed93 7b00 	vldr	d7, [r3]
 8000ed4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8000ed8:	4a60      	ldr	r2, [pc, #384]	; (800105c <Joint_controller+0x21c>)
 8000eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000edc:	00db      	lsls	r3, r3, #3
 8000ede:	4413      	add	r3, r2
 8000ee0:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] *= 1024;
 8000ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ee6:	00db      	lsls	r3, r3, #3
 8000ee8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000eec:	4413      	add	r3, r2
 8000eee:	3b50      	subs	r3, #80	; 0x50
 8000ef0:	ed93 7b00 	vldr	d7, [r3]
 8000ef4:	ed9f 6b54 	vldr	d6, [pc, #336]	; 8001048 <Joint_controller+0x208>
 8000ef8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000efe:	00db      	lsls	r3, r3, #3
 8000f00:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f04:	4413      	add	r3, r2
 8000f06:	3b50      	subs	r3, #80	; 0x50
 8000f08:	ed83 7b00 	vstr	d7, [r3]
		G_q_r[k] /= (12.0 - backemf[k])/RESISTANCE[k]*T_CONSTANT[k];
 8000f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f14:	4413      	add	r3, r2
 8000f16:	3b50      	subs	r3, #80	; 0x50
 8000f18:	ed93 5b00 	vldr	d5, [r3]
 8000f1c:	4a4f      	ldr	r2, [pc, #316]	; (800105c <Joint_controller+0x21c>)
 8000f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	4413      	add	r3, r2
 8000f24:	ed93 7b00 	vldr	d7, [r3]
 8000f28:	eeb2 6b08 	vmov.f64	d6, #40	; 0x41400000  12.0
 8000f2c:	ee36 4b47 	vsub.f64	d4, d6, d7
 8000f30:	4a4b      	ldr	r2, [pc, #300]	; (8001060 <Joint_controller+0x220>)
 8000f32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f34:	00db      	lsls	r3, r3, #3
 8000f36:	4413      	add	r3, r2
 8000f38:	ed93 7b00 	vldr	d7, [r3]
 8000f3c:	ee84 6b07 	vdiv.f64	d6, d4, d7
 8000f40:	4a48      	ldr	r2, [pc, #288]	; (8001064 <Joint_controller+0x224>)
 8000f42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f44:	00db      	lsls	r3, r3, #3
 8000f46:	4413      	add	r3, r2
 8000f48:	ed93 7b00 	vldr	d7, [r3]
 8000f4c:	ee26 6b07 	vmul.f64	d6, d6, d7
 8000f50:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b50      	subs	r3, #80	; 0x50
 8000f60:	ed83 7b00 	vstr	d7, [r3]
		PWM_val[k] = G_q_r[k] + K_P[k] * (desired_pos[k] - current_angle[k]) - K_V[k] * joint_speed[k];
 8000f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000f6c:	4413      	add	r3, r2
 8000f6e:	3b50      	subs	r3, #80	; 0x50
 8000f70:	ed93 6b00 	vldr	d6, [r3]
 8000f74:	4a3c      	ldr	r2, [pc, #240]	; (8001068 <Joint_controller+0x228>)
 8000f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f7c:	ee07 3a90 	vmov	s15, r3
 8000f80:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000f84:	4a39      	ldr	r2, [pc, #228]	; (800106c <Joint_controller+0x22c>)
 8000f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f88:	00db      	lsls	r3, r3, #3
 8000f8a:	4413      	add	r3, r2
 8000f8c:	ed93 4b00 	vldr	d4, [r3]
 8000f90:	4a2f      	ldr	r2, [pc, #188]	; (8001050 <Joint_controller+0x210>)
 8000f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4413      	add	r3, r2
 8000f98:	ed93 7b00 	vldr	d7, [r3]
 8000f9c:	ee34 7b47 	vsub.f64	d7, d4, d7
 8000fa0:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fa4:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000fa8:	4a31      	ldr	r2, [pc, #196]	; (8001070 <Joint_controller+0x230>)
 8000faa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fb0:	ee07 3a90 	vmov	s15, r3
 8000fb4:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8000fb8:	4a26      	ldr	r2, [pc, #152]	; (8001054 <Joint_controller+0x214>)
 8000fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4413      	add	r3, r2
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8000fc8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000fcc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000fd0:	ee17 2a90 	vmov	r2, s15
 8000fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000fdc:	440b      	add	r3, r1
 8000fde:	f843 2c1c 	str.w	r2, [r3, #-28]
		if (PWM_val[k] > 1024){
 8000fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000fe4:	009b      	lsls	r3, r3, #2
 8000fe6:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000fea:	4413      	add	r3, r2
 8000fec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000ff0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ff4:	dd08      	ble.n	8001008 <Joint_controller+0x1c8>
			PWM_val[k] = 1024;
 8000ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000ffe:	4413      	add	r3, r2
 8001000:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001004:	f843 2c1c 	str.w	r2, [r3, #-28]
	for (k = 0; k < NUM_JOINTS; k++){
 8001008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800100a:	3301      	adds	r3, #1
 800100c:	657b      	str	r3, [r7, #84]	; 0x54
 800100e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001010:	2b05      	cmp	r3, #5
 8001012:	f77f af45 	ble.w	8000ea0 <Joint_controller+0x60>
		}
	}
	PWM1_change_duty_cycle(PWM_val[0], PWM_val[1]);
 8001016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001018:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff fda7 	bl	8000b70 <PWM1_change_duty_cycle>
	PWM2_change_duty_cycle(PWM_val[2]);
 8001022:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff fde9 	bl	8000bfc <PWM2_change_duty_cycle>
	PWM3_change_duty_cycle(PWM_val[3], PWM_val[4], PWM_val[5]);
 800102a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800102c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800102e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff fd4b 	bl	8000acc <PWM3_change_duty_cycle>
}
 8001036:	bf00      	nop
 8001038:	375c      	adds	r7, #92	; 0x5c
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	51eb851f 	.word	0x51eb851f
 8001044:	c0239eb8 	.word	0xc0239eb8
 8001048:	00000000 	.word	0x00000000
 800104c:	40900000 	.word	0x40900000
 8001050:	24000270 	.word	0x24000270
 8001054:	24000228 	.word	0x24000228
 8001058:	0801f578 	.word	0x0801f578
 800105c:	240002a0 	.word	0x240002a0
 8001060:	0801f5d8 	.word	0x0801f5d8
 8001064:	0801f5a8 	.word	0x0801f5a8
 8001068:	0801f544 	.word	0x0801f544
 800106c:	240002d0 	.word	0x240002d0
 8001070:	0801f55c 	.word	0x0801f55c

08001074 <set_up_encoder_pins>:

void set_up_encoder_pins(void){
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PC7)y, PE3(PE4)y, PD4(PD3)y, PD7(PE2)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <set_up_encoder_pins+0xa8>)
 800107a:	4a29      	ldr	r2, [pc, #164]	; (8001120 <set_up_encoder_pins+0xac>)
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	4b27      	ldr	r3, [pc, #156]	; (800111c <set_up_encoder_pins+0xa8>)
 8001080:	2201      	movs	r2, #1
 8001082:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 8001084:	4b25      	ldr	r3, [pc, #148]	; (800111c <set_up_encoder_pins+0xa8>)
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <set_up_encoder_pins+0xb0>)
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	4b24      	ldr	r3, [pc, #144]	; (800111c <set_up_encoder_pins+0xa8>)
 800108c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001090:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 8001092:	4b22      	ldr	r3, [pc, #136]	; (800111c <set_up_encoder_pins+0xa8>)
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <set_up_encoder_pins+0xac>)
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <set_up_encoder_pins+0xa8>)
 800109a:	2202      	movs	r2, #2
 800109c:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 800109e:	4b1f      	ldr	r3, [pc, #124]	; (800111c <set_up_encoder_pins+0xa8>)
 80010a0:	4a21      	ldr	r2, [pc, #132]	; (8001128 <set_up_encoder_pins+0xb4>)
 80010a2:	619a      	str	r2, [r3, #24]
 80010a4:	4b1d      	ldr	r3, [pc, #116]	; (800111c <set_up_encoder_pins+0xa8>)
 80010a6:	2220      	movs	r2, #32
 80010a8:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 80010aa:	4b1c      	ldr	r3, [pc, #112]	; (800111c <set_up_encoder_pins+0xa8>)
 80010ac:	4a1f      	ldr	r2, [pc, #124]	; (800112c <set_up_encoder_pins+0xb8>)
 80010ae:	621a      	str	r2, [r3, #32]
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <set_up_encoder_pins+0xa8>)
 80010b2:	2204      	movs	r2, #4
 80010b4:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 80010b6:	4b19      	ldr	r3, [pc, #100]	; (800111c <set_up_encoder_pins+0xa8>)
 80010b8:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <set_up_encoder_pins+0xb0>)
 80010ba:	629a      	str	r2, [r3, #40]	; 0x28
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <set_up_encoder_pins+0xa8>)
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <set_up_encoder_pins+0xa8>)
 80010c4:	4a1a      	ldr	r2, [pc, #104]	; (8001130 <set_up_encoder_pins+0xbc>)
 80010c6:	631a      	str	r2, [r3, #48]	; 0x30
 80010c8:	4b14      	ldr	r3, [pc, #80]	; (800111c <set_up_encoder_pins+0xa8>)
 80010ca:	2208      	movs	r2, #8
 80010cc:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOE; encoders[7].pin_num = GPIO_PIN_4;
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <set_up_encoder_pins+0xa8>)
 80010d0:	4a17      	ldr	r2, [pc, #92]	; (8001130 <set_up_encoder_pins+0xbc>)
 80010d2:	639a      	str	r2, [r3, #56]	; 0x38
 80010d4:	4b11      	ldr	r3, [pc, #68]	; (800111c <set_up_encoder_pins+0xa8>)
 80010d6:	2210      	movs	r2, #16
 80010d8:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <set_up_encoder_pins+0xa8>)
 80010dc:	4a12      	ldr	r2, [pc, #72]	; (8001128 <set_up_encoder_pins+0xb4>)
 80010de:	641a      	str	r2, [r3, #64]	; 0x40
 80010e0:	4b0e      	ldr	r3, [pc, #56]	; (800111c <set_up_encoder_pins+0xa8>)
 80010e2:	2210      	movs	r2, #16
 80010e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOD; encoders[9].pin_num = GPIO_PIN_3;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	; (800111c <set_up_encoder_pins+0xa8>)
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <set_up_encoder_pins+0xb4>)
 80010ec:	649a      	str	r2, [r3, #72]	; 0x48
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <set_up_encoder_pins+0xa8>)
 80010f0:	2208      	movs	r2, #8
 80010f2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <set_up_encoder_pins+0xa8>)
 80010f8:	4a0b      	ldr	r2, [pc, #44]	; (8001128 <set_up_encoder_pins+0xb4>)
 80010fa:	651a      	str	r2, [r3, #80]	; 0x50
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <set_up_encoder_pins+0xa8>)
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOE; encoders[11].pin_num = GPIO_PIN_2;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <set_up_encoder_pins+0xa8>)
 8001106:	4a0a      	ldr	r2, [pc, #40]	; (8001130 <set_up_encoder_pins+0xbc>)
 8001108:	659a      	str	r2, [r3, #88]	; 0x58
 800110a:	4b04      	ldr	r3, [pc, #16]	; (800111c <set_up_encoder_pins+0xa8>)
 800110c:	2204      	movs	r2, #4
 800110e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8001112:	bf00      	nop
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr
 800111c:	240003cc 	.word	0x240003cc
 8001120:	58020000 	.word	0x58020000
 8001124:	58020800 	.word	0x58020800
 8001128:	58020c00 	.word	0x58020c00
 800112c:	58020400 	.word	0x58020400
 8001130:	58021000 	.word	0x58021000

08001134 <set_up_driver_pins>:
void set_up_driver_pins(void){
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
	//PE0, PF11, PG8, PG5, PF15, PD10, PG4, PE10, PE12, PD11, PD12, PD13
	Driver[0].port = GPIOE; Driver[0].pin_num = GPIO_PIN_0;
 8001138:	4b2c      	ldr	r3, [pc, #176]	; (80011ec <set_up_driver_pins+0xb8>)
 800113a:	4a2d      	ldr	r2, [pc, #180]	; (80011f0 <set_up_driver_pins+0xbc>)
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <set_up_driver_pins+0xb8>)
 8001140:	2201      	movs	r2, #1
 8001142:	809a      	strh	r2, [r3, #4]
	Driver[1].port = GPIOF; Driver[1].pin_num = GPIO_PIN_11;
 8001144:	4b29      	ldr	r3, [pc, #164]	; (80011ec <set_up_driver_pins+0xb8>)
 8001146:	4a2b      	ldr	r2, [pc, #172]	; (80011f4 <set_up_driver_pins+0xc0>)
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	4b28      	ldr	r3, [pc, #160]	; (80011ec <set_up_driver_pins+0xb8>)
 800114c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001150:	819a      	strh	r2, [r3, #12]
	Driver[2].port = GPIOG; Driver[2].pin_num = GPIO_PIN_8;
 8001152:	4b26      	ldr	r3, [pc, #152]	; (80011ec <set_up_driver_pins+0xb8>)
 8001154:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <set_up_driver_pins+0xc4>)
 8001156:	611a      	str	r2, [r3, #16]
 8001158:	4b24      	ldr	r3, [pc, #144]	; (80011ec <set_up_driver_pins+0xb8>)
 800115a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800115e:	829a      	strh	r2, [r3, #20]
	Driver[3].port = GPIOG; Driver[3].pin_num = GPIO_PIN_5;
 8001160:	4b22      	ldr	r3, [pc, #136]	; (80011ec <set_up_driver_pins+0xb8>)
 8001162:	4a25      	ldr	r2, [pc, #148]	; (80011f8 <set_up_driver_pins+0xc4>)
 8001164:	619a      	str	r2, [r3, #24]
 8001166:	4b21      	ldr	r3, [pc, #132]	; (80011ec <set_up_driver_pins+0xb8>)
 8001168:	2220      	movs	r2, #32
 800116a:	839a      	strh	r2, [r3, #28]
	Driver[4].port = GPIOF; Driver[4].pin_num = GPIO_PIN_15;
 800116c:	4b1f      	ldr	r3, [pc, #124]	; (80011ec <set_up_driver_pins+0xb8>)
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <set_up_driver_pins+0xc0>)
 8001170:	621a      	str	r2, [r3, #32]
 8001172:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <set_up_driver_pins+0xb8>)
 8001174:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001178:	849a      	strh	r2, [r3, #36]	; 0x24
	Driver[5].port = GPIOD; Driver[5].pin_num = GPIO_PIN_10;
 800117a:	4b1c      	ldr	r3, [pc, #112]	; (80011ec <set_up_driver_pins+0xb8>)
 800117c:	4a1f      	ldr	r2, [pc, #124]	; (80011fc <set_up_driver_pins+0xc8>)
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <set_up_driver_pins+0xb8>)
 8001182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001186:	859a      	strh	r2, [r3, #44]	; 0x2c
	Driver[6].port = GPIOG; Driver[6].pin_num = GPIO_PIN_4;
 8001188:	4b18      	ldr	r3, [pc, #96]	; (80011ec <set_up_driver_pins+0xb8>)
 800118a:	4a1b      	ldr	r2, [pc, #108]	; (80011f8 <set_up_driver_pins+0xc4>)
 800118c:	631a      	str	r2, [r3, #48]	; 0x30
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <set_up_driver_pins+0xb8>)
 8001190:	2210      	movs	r2, #16
 8001192:	869a      	strh	r2, [r3, #52]	; 0x34
	Driver[7].port = GPIOE; Driver[7].pin_num = GPIO_PIN_10;
 8001194:	4b15      	ldr	r3, [pc, #84]	; (80011ec <set_up_driver_pins+0xb8>)
 8001196:	4a16      	ldr	r2, [pc, #88]	; (80011f0 <set_up_driver_pins+0xbc>)
 8001198:	639a      	str	r2, [r3, #56]	; 0x38
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <set_up_driver_pins+0xb8>)
 800119c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011a0:	879a      	strh	r2, [r3, #60]	; 0x3c
	Driver[8].port = GPIOE; Driver[8].pin_num = GPIO_PIN_12;
 80011a2:	4b12      	ldr	r3, [pc, #72]	; (80011ec <set_up_driver_pins+0xb8>)
 80011a4:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <set_up_driver_pins+0xbc>)
 80011a6:	641a      	str	r2, [r3, #64]	; 0x40
 80011a8:	4b10      	ldr	r3, [pc, #64]	; (80011ec <set_up_driver_pins+0xb8>)
 80011aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	Driver[9].port = GPIOD; Driver[9].pin_num = GPIO_PIN_11;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <set_up_driver_pins+0xb8>)
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <set_up_driver_pins+0xc8>)
 80011b6:	649a      	str	r2, [r3, #72]	; 0x48
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <set_up_driver_pins+0xb8>)
 80011ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011be:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	Driver[10].port = GPIOD; Driver[10].pin_num = GPIO_PIN_12;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <set_up_driver_pins+0xb8>)
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <set_up_driver_pins+0xc8>)
 80011c6:	651a      	str	r2, [r3, #80]	; 0x50
 80011c8:	4b08      	ldr	r3, [pc, #32]	; (80011ec <set_up_driver_pins+0xb8>)
 80011ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	Driver[11].port = GPIOD; Driver[11].pin_num = GPIO_PIN_13;
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <set_up_driver_pins+0xb8>)
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <set_up_driver_pins+0xc8>)
 80011d6:	659a      	str	r2, [r3, #88]	; 0x58
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <set_up_driver_pins+0xb8>)
 80011da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80011e2:	bf00      	nop
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	240005d0 	.word	0x240005d0
 80011f0:	58021000 	.word	0x58021000
 80011f4:	58021400 	.word	0x58021400
 80011f8:	58021800 	.word	0x58021800
 80011fc:	58020c00 	.word	0x58020c00

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b590      	push	{r4, r7, lr}
 8001202:	b0b3      	sub	sp, #204	; 0xcc
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 8001206:	4b73      	ldr	r3, [pc, #460]	; (80013d4 <main+0x1d4>)
 8001208:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	char* EOL = "]\n\r";
 800120c:	4b72      	ldr	r3, [pc, #456]	; (80013d8 <main+0x1d8>)
 800120e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	char* EOJ = ", ";
 8001212:	4b72      	ldr	r3, [pc, #456]	; (80013dc <main+0x1dc>)
 8001214:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	char* timer_tester = "timed\n\r";
 8001218:	4b71      	ldr	r3, [pc, #452]	; (80013e0 <main+0x1e0>)
 800121a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t  stop;
	uint32_t  delta;
	creal_T G_q_vector[6];

	//setting up pins
	set_up_encoder_pins();
 800121e:	f7ff ff29 	bl	8001074 <set_up_encoder_pins>
	set_up_driver_pins();
 8001222:	f7ff ff87 	bl	8001134 <set_up_driver_pins>

    for(i = 0; i < NUM_JOINTS; i++){
 8001226:	2300      	movs	r3, #0
 8001228:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800122c:	e024      	b.n	8001278 <main+0x78>
    	val_encoderA [i] = HIGH;
 800122e:	4a6d      	ldr	r2, [pc, #436]	; (80013e4 <main+0x1e4>)
 8001230:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001234:	2101      	movs	r1, #1
 8001236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 800123a:	4a6b      	ldr	r2, [pc, #428]	; (80013e8 <main+0x1e8>)
 800123c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001240:	2101      	movs	r1, #1
 8001242:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 8001246:	4a69      	ldr	r2, [pc, #420]	; (80013ec <main+0x1ec>)
 8001248:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800124c:	4413      	add	r3, r2
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
    	desired_pos[i] = test_pos[i];
 8001252:	4a67      	ldr	r2, [pc, #412]	; (80013f0 <main+0x1f0>)
 8001254:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001258:	00db      	lsls	r3, r3, #3
 800125a:	4413      	add	r3, r2
 800125c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001260:	4964      	ldr	r1, [pc, #400]	; (80013f4 <main+0x1f4>)
 8001262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8001266:	00d2      	lsls	r2, r2, #3
 8001268:	440a      	add	r2, r1
 800126a:	e9c2 3400 	strd	r3, r4, [r2]
    for(i = 0; i < NUM_JOINTS; i++){
 800126e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001272:	3301      	adds	r3, #1
 8001274:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001278:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800127c:	2b05      	cmp	r3, #5
 800127e:	ddd6      	ble.n	800122e <main+0x2e>
    }

    //for CPU cycle counts
    if (ARM_CM_DWT_CTRL != 0) {        // See if DWT is available
 8001280:	4b5d      	ldr	r3, [pc, #372]	; (80013f8 <main+0x1f8>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00e      	beq.n	80012a6 <main+0xa6>

        ARM_CM_DEMCR      |= 1 << 24;  // Set bit 24
 8001288:	4b5c      	ldr	r3, [pc, #368]	; (80013fc <main+0x1fc>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a5b      	ldr	r2, [pc, #364]	; (80013fc <main+0x1fc>)
 800128e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001292:	6013      	str	r3, [r2, #0]

        ARM_CM_DWT_CYCCNT  = 0;
 8001294:	4b5a      	ldr	r3, [pc, #360]	; (8001400 <main+0x200>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        ARM_CM_DWT_CTRL   |= 1 << 0;   // Set bit 0
 800129a:	4b57      	ldr	r3, [pc, #348]	; (80013f8 <main+0x1f8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a56      	ldr	r2, [pc, #344]	; (80013f8 <main+0x1f8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012a6:	f011 fb7f 	bl	80129a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012aa:	f000 f8b3 	bl	8001414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ae:	f000 fc0b 	bl	8001ac8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012b2:	f000 fbbd 	bl	8001a30 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 80012b6:	f000 f96b 	bl	8001590 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012ba:	f000 fa05 	bl	80016c8 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012be:	f000 fa5d 	bl	800177c <MX_TIM3_Init>
  MX_TIM5_Init();
 80012c2:	f000 facd 	bl	8001860 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 80012c6:	f000 fb67 	bl	8001998 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 80012ca:	f01c fa9f 	bl	801d80c <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80012ce:	f000 fb23 	bl	8001918 <MX_TIM7_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80012d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012d6:	484b      	ldr	r0, [pc, #300]	; (8001404 <main+0x204>)
 80012d8:	f012 f92a 	bl	8013530 <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d05a      	beq.n	8001398 <main+0x198>
		  itoa(motor_steps[0], one_motor, 10);
 80012e2:	4b49      	ldr	r3, [pc, #292]	; (8001408 <main+0x208>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80012ea:	220a      	movs	r2, #10
 80012ec:	4618      	mov	r0, r3
 80012ee:	f01c fffd 	bl	801e2ec <itoa>
		  strcpy(print_string, one_motor);
 80012f2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80012f6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80012fa:	4611      	mov	r1, r2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f01d f8d6 	bl	801e4ae <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 8001302:	2301      	movs	r3, #1
 8001304:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001308:	e01e      	b.n	8001348 <main+0x148>
			  itoa(motor_steps[i], one_motor, 10);
 800130a:	4a3f      	ldr	r2, [pc, #252]	; (8001408 <main+0x208>)
 800130c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001318:	220a      	movs	r2, #10
 800131a:	4618      	mov	r0, r3
 800131c:	f01c ffe6 	bl	801e2ec <itoa>
			  strcat(print_string, EOJ);
 8001320:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001324:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8001328:	4618      	mov	r0, r3
 800132a:	f01d f8b1 	bl	801e490 <strcat>
			  strcat(print_string, one_motor);
 800132e:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8001332:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f01d f8a9 	bl	801e490 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 800133e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001342:	3301      	adds	r3, #1
 8001344:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8001348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800134c:	2b05      	cmp	r3, #5
 800134e:	dddc      	ble.n	800130a <main+0x10a>
		  }
		  strcat(print_string, EOL);
 8001350:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001354:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8001358:	4618      	mov	r0, r3
 800135a:	f01d f899 	bl	801e490 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 800135e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8001362:	f7fe ffb9 	bl	80002d8 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	4827      	ldr	r0, [pc, #156]	; (800140c <main+0x20c>)
 800136e:	f01c fb45 	bl	801d9fc <CDC_Transmit_FS>
		  HAL_Delay(2);
 8001372:	2002      	movs	r0, #2
 8001374:	f011 fbaa 	bl	8012acc <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8001378:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800137c:	4618      	mov	r0, r3
 800137e:	f7fe ffab 	bl	80002d8 <strlen>
 8001382:	4603      	mov	r3, r0
 8001384:	b29a      	uxth	r2, r3
 8001386:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f01c fb35 	bl	801d9fc <CDC_Transmit_FS>
		  HAL_Delay(2);
 8001392:	2002      	movs	r0, #2
 8001394:	f011 fb9a 	bl	8012acc <HAL_Delay>
	  }
	  if (need_control){
 8001398:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <main+0x210>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d097      	beq.n	80012d2 <main+0xd2>
		  start = ARM_CM_DWT_CYCCNT;
 80013a2:	4b17      	ldr	r3, [pc, #92]	; (8001400 <main+0x200>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		  Joint_controller(false, G_q_vector);
 80013aa:	463b      	mov	r3, r7
 80013ac:	4619      	mov	r1, r3
 80013ae:	2000      	movs	r0, #0
 80013b0:	f7ff fd46 	bl	8000e40 <Joint_controller>
		  stop  = ARM_CM_DWT_CYCCNT;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <main+0x200>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		  delta = stop - start;
 80013bc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80013c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		  need_control = false;
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <main+0x210>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	701a      	strb	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 80013d0:	e77f      	b.n	80012d2 <main+0xd2>
 80013d2:	bf00      	nop
 80013d4:	0801f4b8 	.word	0x0801f4b8
 80013d8:	0801f4cc 	.word	0x0801f4cc
 80013dc:	0801f4d0 	.word	0x0801f4d0
 80013e0:	0801f4d4 	.word	0x0801f4d4
 80013e4:	2400039c 	.word	0x2400039c
 80013e8:	240004ac 	.word	0x240004ac
 80013ec:	24000000 	.word	0x24000000
 80013f0:	0801f608 	.word	0x0801f608
 80013f4:	240002d0 	.word	0x240002d0
 80013f8:	e0001000 	.word	0xe0001000
 80013fc:	e000edfc 	.word	0xe000edfc
 8001400:	e0001004 	.word	0xe0001004
 8001404:	58020800 	.word	0x58020800
 8001408:	2400020c 	.word	0x2400020c
 800140c:	0801f4dc 	.word	0x0801f4dc
 8001410:	24000006 	.word	0x24000006

08001414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b0cc      	sub	sp, #304	; 0x130
 8001418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800141e:	224c      	movs	r2, #76	; 0x4c
 8001420:	2100      	movs	r1, #0
 8001422:	4618      	mov	r0, r3
 8001424:	f01c ff74 	bl	801e310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001428:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800142c:	2220      	movs	r2, #32
 800142e:	2100      	movs	r1, #0
 8001430:	4618      	mov	r0, r3
 8001432:	f01c ff6d 	bl	801e310 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001436:	f107 0308 	add.w	r3, r7, #8
 800143a:	4618      	mov	r0, r3
 800143c:	23bc      	movs	r3, #188	; 0xbc
 800143e:	461a      	mov	r2, r3
 8001440:	2100      	movs	r1, #0
 8001442:	f01c ff65 	bl	801e310 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001446:	2002      	movs	r0, #2
 8001448:	f013 fa98 	bl	801497c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	4b4c      	ldr	r3, [pc, #304]	; (8001584 <SystemClock_Config+0x170>)
 8001454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001456:	4a4b      	ldr	r2, [pc, #300]	; (8001584 <SystemClock_Config+0x170>)
 8001458:	f023 0301 	bic.w	r3, r3, #1
 800145c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800145e:	4b49      	ldr	r3, [pc, #292]	; (8001584 <SystemClock_Config+0x170>)
 8001460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	1d3b      	adds	r3, r7, #4
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <SystemClock_Config+0x174>)
 800146c:	699b      	ldr	r3, [r3, #24]
 800146e:	4a46      	ldr	r2, [pc, #280]	; (8001588 <SystemClock_Config+0x174>)
 8001470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001474:	6193      	str	r3, [r2, #24]
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <SystemClock_Config+0x174>)
 8001478:	699b      	ldr	r3, [r3, #24]
 800147a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001486:	bf00      	nop
 8001488:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <SystemClock_Config+0x174>)
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001494:	d1f8      	bne.n	8001488 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001496:	2301      	movs	r3, #1
 8001498:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800149c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80014a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014a4:	2302      	movs	r3, #2
 80014a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014aa:	2302      	movs	r3, #2
 80014ac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014b0:	2301      	movs	r3, #1
 80014b2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 80014b6:	2336      	movs	r3, #54	; 0x36
 80014b8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014bc:	2302      	movs	r3, #2
 80014be:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80014c2:	2309      	movs	r3, #9
 80014c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014c8:	2302      	movs	r3, #2
 80014ca:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80014ce:	230c      	movs	r3, #12
 80014d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014e4:	4618      	mov	r0, r3
 80014e6:	f013 fa93 	bl	8014a10 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 80014f0:	f000 fd18 	bl	8001f24 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	233f      	movs	r3, #63	; 0x3f
 80014f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2303      	movs	r3, #3
 80014fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001500:	2300      	movs	r3, #0
 8001502:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800150c:	2340      	movs	r3, #64	; 0x40
 800150e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001512:	2340      	movs	r3, #64	; 0x40
 8001514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001518:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800151c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001526:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800152a:	2103      	movs	r1, #3
 800152c:	4618      	mov	r0, r3
 800152e:	f013 fe47 	bl	80151c0 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0x128>
  {
    Error_Handler();
 8001538:	f000 fcf4 	bl	8001f24 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 800153c:	f107 0308 	add.w	r3, r7, #8
 8001540:	4a12      	ldr	r2, [pc, #72]	; (800158c <SystemClock_Config+0x178>)
 8001542:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001544:	f107 0308 	add.w	r3, r7, #8
 8001548:	2200      	movs	r2, #0
 800154a:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800154c:	f107 0308 	add.w	r3, r7, #8
 8001550:	2200      	movs	r2, #0
 8001552:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800155c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001560:	f107 0308 	add.w	r3, r7, #8
 8001564:	4618      	mov	r0, r3
 8001566:	f014 f9af 	bl	80158c8 <HAL_RCCEx_PeriphCLKConfig>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <SystemClock_Config+0x160>
  {
    Error_Handler();
 8001570:	f000 fcd8 	bl	8001f24 <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001574:	f013 fa3c 	bl	80149f0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001578:	bf00      	nop
 800157a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	58000400 	.word	0x58000400
 8001588:	58024800 	.word	0x58024800
 800158c:	00040003 	.word	0x00040003

08001590 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b096      	sub	sp, #88	; 0x58
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001596:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]
 80015a0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]
 80015b2:	615a      	str	r2, [r3, #20]
 80015b4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	222c      	movs	r2, #44	; 0x2c
 80015ba:	2100      	movs	r1, #0
 80015bc:	4618      	mov	r0, r3
 80015be:	f01c fea7 	bl	801e310 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015c2:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015c4:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <MX_TIM1_Init+0x134>)
 80015c6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 80015c8:	4b3d      	ldr	r3, [pc, #244]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015ca:	f240 4237 	movw	r2, #1079	; 0x437
 80015ce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b3b      	ldr	r3, [pc, #236]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015d8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80015dc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ea:	4b35      	ldr	r3, [pc, #212]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80015f0:	4833      	ldr	r0, [pc, #204]	; (80016c0 <MX_TIM1_Init+0x130>)
 80015f2:	f015 fcaf 	bl	8016f54 <HAL_TIM_PWM_Init>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 80015fc:	f000 fc92 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001600:	2300      	movs	r3, #0
 8001602:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001604:	2300      	movs	r3, #0
 8001606:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800160c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001610:	4619      	mov	r1, r3
 8001612:	482b      	ldr	r0, [pc, #172]	; (80016c0 <MX_TIM1_Init+0x130>)
 8001614:	f016 fb10 	bl	8017c38 <HAL_TIMEx_MasterConfigSynchronization>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800161e:	f000 fc81 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001622:	2360      	movs	r3, #96	; 0x60
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800162a:	2300      	movs	r3, #0
 800162c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800162e:	2300      	movs	r3, #0
 8001630:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001636:	2300      	movs	r3, #0
 8001638:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800163a:	2300      	movs	r3, #0
 800163c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800163e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001642:	2204      	movs	r2, #4
 8001644:	4619      	mov	r1, r3
 8001646:	481e      	ldr	r0, [pc, #120]	; (80016c0 <MX_TIM1_Init+0x130>)
 8001648:	f015 fe28 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001652:	f000 fc67 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001656:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800165a:	2208      	movs	r2, #8
 800165c:	4619      	mov	r1, r3
 800165e:	4818      	ldr	r0, [pc, #96]	; (80016c0 <MX_TIM1_Init+0x130>)
 8001660:	f015 fe1c 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 800166a:	f000 fc5b 	bl	8001f24 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001682:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001686:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800168c:	2300      	movs	r3, #0
 800168e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800169e:	1d3b      	adds	r3, r7, #4
 80016a0:	4619      	mov	r1, r3
 80016a2:	4807      	ldr	r0, [pc, #28]	; (80016c0 <MX_TIM1_Init+0x130>)
 80016a4:	f016 fb50 	bl	8017d48 <HAL_TIMEx_ConfigBreakDeadTime>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 80016ae:	f000 fc39 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80016b2:	4803      	ldr	r0, [pc, #12]	; (80016c0 <MX_TIM1_Init+0x130>)
 80016b4:	f000 fce6 	bl	8002084 <HAL_TIM_MspPostInit>

}
 80016b8:	bf00      	nop
 80016ba:	3758      	adds	r7, #88	; 0x58
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	24000550 	.word	0x24000550
 80016c4:	40010000 	.word	0x40010000

080016c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	; 0x28
 80016cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	463b      	mov	r3, r7
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016ec:	4b22      	ldr	r3, [pc, #136]	; (8001778 <MX_TIM2_Init+0xb0>)
 80016ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 80016f4:	4b20      	ldr	r3, [pc, #128]	; (8001778 <MX_TIM2_Init+0xb0>)
 80016f6:	f240 4237 	movw	r2, #1079	; 0x437
 80016fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b1e      	ldr	r3, [pc, #120]	; (8001778 <MX_TIM2_Init+0xb0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_TIM2_Init+0xb0>)
 8001704:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001708:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800170a:	4b1b      	ldr	r3, [pc, #108]	; (8001778 <MX_TIM2_Init+0xb0>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001710:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_TIM2_Init+0xb0>)
 8001712:	2200      	movs	r2, #0
 8001714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001716:	4818      	ldr	r0, [pc, #96]	; (8001778 <MX_TIM2_Init+0xb0>)
 8001718:	f015 fc1c 	bl	8016f54 <HAL_TIM_PWM_Init>
 800171c:	4603      	mov	r3, r0
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 8001722:	f000 fbff 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <MX_TIM2_Init+0xb0>)
 8001736:	f016 fa7f 	bl	8017c38 <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001740:	f000 fbf0 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001744:	2360      	movs	r3, #96	; 0x60
 8001746:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001754:	463b      	mov	r3, r7
 8001756:	2200      	movs	r2, #0
 8001758:	4619      	mov	r1, r3
 800175a:	4807      	ldr	r0, [pc, #28]	; (8001778 <MX_TIM2_Init+0xb0>)
 800175c:	f015 fd9e 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 8001766:	f000 fbdd 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800176a:	4803      	ldr	r0, [pc, #12]	; (8001778 <MX_TIM2_Init+0xb0>)
 800176c:	f000 fc8a 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001770:	bf00      	nop
 8001772:	3728      	adds	r7, #40	; 0x28
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	24000590 	.word	0x24000590

0800177c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800178e:	463b      	mov	r3, r7
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80017a0:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017a2:	4a2e      	ldr	r2, [pc, #184]	; (800185c <MX_TIM3_Init+0xe0>)
 80017a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80017a6:	4b2c      	ldr	r3, [pc, #176]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017a8:	f240 4237 	movw	r2, #1079	; 0x437
 80017ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017b6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80017ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017bc:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017be:	2200      	movs	r2, #0
 80017c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c2:	4b25      	ldr	r3, [pc, #148]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017c8:	4823      	ldr	r0, [pc, #140]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017ca:	f015 fbc3 	bl	8016f54 <HAL_TIM_PWM_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 80017d4:	f000 fba6 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	481c      	ldr	r0, [pc, #112]	; (8001858 <MX_TIM3_Init+0xdc>)
 80017e8:	f016 fa26 	bl	8017c38 <HAL_TIMEx_MasterConfigSynchronization>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80017f2:	f000 fb97 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017f6:	2360      	movs	r3, #96	; 0x60
 80017f8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017fe:	2300      	movs	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	4812      	ldr	r0, [pc, #72]	; (8001858 <MX_TIM3_Init+0xdc>)
 800180e:	f015 fd45 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001818:	f000 fb84 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800181c:	463b      	mov	r3, r7
 800181e:	2204      	movs	r2, #4
 8001820:	4619      	mov	r1, r3
 8001822:	480d      	ldr	r0, [pc, #52]	; (8001858 <MX_TIM3_Init+0xdc>)
 8001824:	f015 fd3a 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800182e:	f000 fb79 	bl	8001f24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001832:	463b      	mov	r3, r7
 8001834:	220c      	movs	r2, #12
 8001836:	4619      	mov	r1, r3
 8001838:	4807      	ldr	r0, [pc, #28]	; (8001858 <MX_TIM3_Init+0xdc>)
 800183a:	f015 fd2f 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8001844:	f000 fb6e 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001848:	4803      	ldr	r0, [pc, #12]	; (8001858 <MX_TIM3_Init+0xdc>)
 800184a:	f000 fc1b 	bl	8002084 <HAL_TIM_MspPostInit>

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2400046c 	.word	0x2400046c
 800185c:	40000400 	.word	0x40000400

08001860 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08a      	sub	sp, #40	; 0x28
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001872:	463b      	mov	r3, r7
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
 8001878:	605a      	str	r2, [r3, #4]
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	611a      	str	r2, [r3, #16]
 8001880:	615a      	str	r2, [r3, #20]
 8001882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001884:	4b22      	ldr	r3, [pc, #136]	; (8001910 <MX_TIM5_Init+0xb0>)
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <MX_TIM5_Init+0xb4>)
 8001888:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 800188a:	4b21      	ldr	r3, [pc, #132]	; (8001910 <MX_TIM5_Init+0xb0>)
 800188c:	f240 4237 	movw	r2, #1079	; 0x437
 8001890:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001892:	4b1f      	ldr	r3, [pc, #124]	; (8001910 <MX_TIM5_Init+0xb0>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 8001898:	4b1d      	ldr	r3, [pc, #116]	; (8001910 <MX_TIM5_Init+0xb0>)
 800189a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800189e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018a0:	4b1b      	ldr	r3, [pc, #108]	; (8001910 <MX_TIM5_Init+0xb0>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b1a      	ldr	r3, [pc, #104]	; (8001910 <MX_TIM5_Init+0xb0>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80018ac:	4818      	ldr	r0, [pc, #96]	; (8001910 <MX_TIM5_Init+0xb0>)
 80018ae:	f015 fb51 	bl	8016f54 <HAL_TIM_PWM_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 80018b8:	f000 fb34 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <MX_TIM5_Init+0xb0>)
 80018cc:	f016 f9b4 	bl	8017c38 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 80018d6:	f000 fb25 	bl	8001f24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018da:	2360      	movs	r3, #96	; 0x60
 80018dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018ea:	463b      	mov	r3, r7
 80018ec:	220c      	movs	r2, #12
 80018ee:	4619      	mov	r1, r3
 80018f0:	4807      	ldr	r0, [pc, #28]	; (8001910 <MX_TIM5_Init+0xb0>)
 80018f2:	f015 fcd3 	bl	801729c <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 80018fc:	f000 fb12 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001900:	4803      	ldr	r0, [pc, #12]	; (8001910 <MX_TIM5_Init+0xb0>)
 8001902:	f000 fbbf 	bl	8002084 <HAL_TIM_MspPostInit>

}
 8001906:	bf00      	nop
 8001908:	3728      	adds	r7, #40	; 0x28
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	2400042c 	.word	0x2400042c
 8001914:	40000c00 	.word	0x40000c00

08001918 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800191e:	1d3b      	adds	r3, r7, #4
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001928:	4b19      	ldr	r3, [pc, #100]	; (8001990 <MX_TIM7_Init+0x78>)
 800192a:	4a1a      	ldr	r2, [pc, #104]	; (8001994 <MX_TIM7_Init+0x7c>)
 800192c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <MX_TIM7_Init+0x78>)
 8001930:	f240 4237 	movw	r2, #1079	; 0x437
 8001934:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001936:	4b16      	ldr	r3, [pc, #88]	; (8001990 <MX_TIM7_Init+0x78>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800193c:	4b14      	ldr	r3, [pc, #80]	; (8001990 <MX_TIM7_Init+0x78>)
 800193e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001942:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <MX_TIM7_Init+0x78>)
 8001946:	2280      	movs	r2, #128	; 0x80
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800194a:	4811      	ldr	r0, [pc, #68]	; (8001990 <MX_TIM7_Init+0x78>)
 800194c:	f015 faac 	bl	8016ea8 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001956:	f000 fae5 	bl	8001f24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001962:	1d3b      	adds	r3, r7, #4
 8001964:	4619      	mov	r1, r3
 8001966:	480a      	ldr	r0, [pc, #40]	; (8001990 <MX_TIM7_Init+0x78>)
 8001968:	f016 f966 	bl	8017c38 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8001972:	f000 fad7 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  /*##-2- Start the TIM Base generation in interrupt mode ####################*/
  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK)
 8001976:	4806      	ldr	r0, [pc, #24]	; (8001990 <MX_TIM7_Init+0x78>)
 8001978:	f015 fac2 	bl	8016f00 <HAL_TIM_Base_Start_IT>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM7_Init+0x6e>
  {
    /* Starting Error */
    Error_Handler();
 8001982:	f000 facf 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE END TIM7_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000630 	.word	0x24000630
 8001994:	40001400 	.word	0x40001400

08001998 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800199c:	4b22      	ldr	r3, [pc, #136]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 800199e:	4a23      	ldr	r2, [pc, #140]	; (8001a2c <MX_USART1_UART_Init+0x94>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019a4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80019a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b1d      	ldr	r3, [pc, #116]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b1a      	ldr	r3, [pc, #104]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80019e0:	4811      	ldr	r0, [pc, #68]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019e2:	f016 fa4d 	bl	8017e80 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80019ec:	f000 fa9a 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019f0:	2100      	movs	r1, #0
 80019f2:	480d      	ldr	r0, [pc, #52]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 80019f4:	f018 ffbb 	bl	801a96e <HAL_UARTEx_SetTxFifoThreshold>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80019fe:	f000 fa91 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a02:	2100      	movs	r1, #0
 8001a04:	4808      	ldr	r0, [pc, #32]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 8001a06:	f018 fff0 	bl	801a9ea <HAL_UARTEx_SetRxFifoThreshold>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a10:	f000 fa88 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a14:	4804      	ldr	r0, [pc, #16]	; (8001a28 <MX_USART1_UART_Init+0x90>)
 8001a16:	f018 ff71 	bl	801a8fc <HAL_UARTEx_DisableFifoMode>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a20:	f000 fa80 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a24:	bf00      	nop
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	240004c4 	.word	0x240004c4
 8001a2c:	40011000 	.word	0x40011000

08001a30 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a34:	4b22      	ldr	r3, [pc, #136]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a36:	4a23      	ldr	r2, [pc, #140]	; (8001ac4 <MX_USART3_UART_Init+0x94>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001a3a:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a40:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b1f      	ldr	r3, [pc, #124]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b19      	ldr	r3, [pc, #100]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b17      	ldr	r3, [pc, #92]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a66:	4b16      	ldr	r3, [pc, #88]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a6c:	4b14      	ldr	r3, [pc, #80]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001a78:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a7a:	f016 fa01 	bl	8017e80 <HAL_UART_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001a84:	f000 fa4e 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a88:	2100      	movs	r1, #0
 8001a8a:	480d      	ldr	r0, [pc, #52]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a8c:	f018 ff6f 	bl	801a96e <HAL_UARTEx_SetTxFifoThreshold>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001a96:	f000 fa45 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a9a:	2100      	movs	r1, #0
 8001a9c:	4808      	ldr	r0, [pc, #32]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001a9e:	f018 ffa4 	bl	801a9ea <HAL_UARTEx_SetRxFifoThreshold>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001aa8:	f000 fa3c 	bl	8001f24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <MX_USART3_UART_Init+0x90>)
 8001aae:	f018 ff25 	bl	801a8fc <HAL_UARTEx_DisableFifoMode>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001ab8:	f000 fa34 	bl	8001f24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	24000310 	.word	0x24000310
 8001ac4:	40004800 	.word	0x40004800

08001ac8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
 8001adc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ade:	4bbf      	ldr	r3, [pc, #764]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001ae0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae4:	4abd      	ldr	r2, [pc, #756]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001ae6:	f043 0310 	orr.w	r3, r3, #16
 8001aea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aee:	4bbb      	ldr	r3, [pc, #748]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001af0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	623b      	str	r3, [r7, #32]
 8001afa:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afc:	4bb7      	ldr	r3, [pc, #732]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b02:	4ab6      	ldr	r2, [pc, #728]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b0c:	4bb3      	ldr	r3, [pc, #716]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	61fb      	str	r3, [r7, #28]
 8001b18:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b1a:	4bb0      	ldr	r3, [pc, #704]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b20:	4aae      	ldr	r2, [pc, #696]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b22:	f043 0320 	orr.w	r3, r3, #32
 8001b26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b2a:	4bac      	ldr	r3, [pc, #688]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b30:	f003 0320 	and.w	r3, r3, #32
 8001b34:	61bb      	str	r3, [r7, #24]
 8001b36:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b38:	4ba8      	ldr	r3, [pc, #672]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b3e:	4aa7      	ldr	r2, [pc, #668]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b48:	4ba4      	ldr	r3, [pc, #656]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b56:	4ba1      	ldr	r3, [pc, #644]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b5c:	4a9f      	ldr	r2, [pc, #636]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b5e:	f043 0301 	orr.w	r3, r3, #1
 8001b62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b66:	4b9d      	ldr	r3, [pc, #628]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	613b      	str	r3, [r7, #16]
 8001b72:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b99      	ldr	r3, [pc, #612]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b7a:	4a98      	ldr	r2, [pc, #608]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b7c:	f043 0302 	orr.w	r3, r3, #2
 8001b80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b84:	4b95      	ldr	r3, [pc, #596]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b92:	4b92      	ldr	r3, [pc, #584]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b98:	4a90      	ldr	r2, [pc, #576]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001b9a:	f043 0308 	orr.w	r3, r3, #8
 8001b9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ba2:	4b8e      	ldr	r3, [pc, #568]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb0:	4b8a      	ldr	r3, [pc, #552]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	4a89      	ldr	r2, [pc, #548]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc0:	4b86      	ldr	r3, [pc, #536]	; (8001ddc <MX_GPIO_Init+0x314>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001bd4:	4882      	ldr	r0, [pc, #520]	; (8001de0 <MX_GPIO_Init+0x318>)
 8001bd6:	f011 fcc3 	bl	8013560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0, GPIO_PIN_RESET);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f241 4101 	movw	r1, #5121	; 0x1401
 8001be0:	4880      	ldr	r0, [pc, #512]	; (8001de4 <MX_GPIO_Init+0x31c>)
 8001be2:	f011 fcbd 	bl	8013560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001bec:	487e      	ldr	r0, [pc, #504]	; (8001de8 <MX_GPIO_Init+0x320>)
 8001bee:	f011 fcb7 	bl	8013560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	f44f 5170 	mov.w	r1, #15360	; 0x3c00
 8001bf8:	487c      	ldr	r0, [pc, #496]	; (8001dec <MX_GPIO_Init+0x324>)
 8001bfa:	f011 fcb1 	bl	8013560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_5|USB_PowerSwitchOn_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	f44f 71b8 	mov.w	r1, #368	; 0x170
 8001c04:	487a      	ldr	r0, [pc, #488]	; (8001df0 <MX_GPIO_Init+0x328>)
 8001c06:	f011 fcab 	bl	8013560 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 8001c0a:	2314      	movs	r3, #20
 8001c0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4871      	ldr	r0, [pc, #452]	; (8001de4 <MX_GPIO_Init+0x31c>)
 8001c1e:	f011 fad7 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c22:	2308      	movs	r3, #8
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c26:	4b73      	ldr	r3, [pc, #460]	; (8001df4 <MX_GPIO_Init+0x32c>)
 8001c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c32:	4619      	mov	r1, r3
 8001c34:	486b      	ldr	r0, [pc, #428]	; (8001de4 <MX_GPIO_Init+0x31c>)
 8001c36:	f011 facb 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c40:	2300      	movs	r3, #0
 8001c42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c44:	2302      	movs	r3, #2
 8001c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	486a      	ldr	r0, [pc, #424]	; (8001df8 <MX_GPIO_Init+0x330>)
 8001c50:	f011 fabe 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c64:	4619      	mov	r1, r3
 8001c66:	485e      	ldr	r0, [pc, #376]	; (8001de0 <MX_GPIO_Init+0x318>)
 8001c68:	f011 fab2 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7|GPIO_PIN_10;
 8001c6c:	f240 4382 	movw	r3, #1154	; 0x482
 8001c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c72:	2300      	movs	r3, #0
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c76:	2301      	movs	r3, #1
 8001c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c7e:	4619      	mov	r1, r3
 8001c80:	485d      	ldr	r0, [pc, #372]	; (8001df8 <MX_GPIO_Init+0x330>)
 8001c82:	f011 faa5 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c86:	2303      	movs	r3, #3
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001c8a:	4b5a      	ldr	r3, [pc, #360]	; (8001df4 <MX_GPIO_Init+0x32c>)
 8001c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c96:	4619      	mov	r1, r3
 8001c98:	4858      	ldr	r0, [pc, #352]	; (8001dfc <MX_GPIO_Init+0x334>)
 8001c9a:	f011 fa99 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001caa:	2300      	movs	r3, #0
 8001cac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cae:	230b      	movs	r3, #11
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 8001cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4850      	ldr	r0, [pc, #320]	; (8001dfc <MX_GPIO_Init+0x334>)
 8001cba:	f011 fa89 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001cbe:	2330      	movs	r3, #48	; 0x30
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cce:	230b      	movs	r3, #11
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4847      	ldr	r0, [pc, #284]	; (8001df8 <MX_GPIO_Init+0x330>)
 8001cda:	f011 fa79 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001cde:	2304      	movs	r3, #4
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001ce2:	4b44      	ldr	r3, [pc, #272]	; (8001df4 <MX_GPIO_Init+0x32c>)
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cee:	4619      	mov	r1, r3
 8001cf0:	483d      	ldr	r0, [pc, #244]	; (8001de8 <MX_GPIO_Init+0x320>)
 8001cf2:	f011 fa6d 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001cf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d00:	2302      	movs	r3, #2
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4834      	ldr	r0, [pc, #208]	; (8001de0 <MX_GPIO_Init+0x318>)
 8001d10:	f011 fa5e 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001d14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2300      	movs	r3, #0
 8001d24:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	482c      	ldr	r0, [pc, #176]	; (8001de0 <MX_GPIO_Init+0x318>)
 8001d2e:	f011 fa4f 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE10 PE12 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_0;
 8001d32:	f241 4301 	movw	r3, #5121	; 0x1401
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d40:	2300      	movs	r3, #0
 8001d42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4826      	ldr	r0, [pc, #152]	; (8001de4 <MX_GPIO_Init+0x31c>)
 8001d4c:	f011 fa40 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d56:	2302      	movs	r3, #2
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001d62:	230b      	movs	r3, #11
 8001d64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001d66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	481e      	ldr	r0, [pc, #120]	; (8001de8 <MX_GPIO_Init+0x320>)
 8001d6e:	f011 fa2f 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001d72:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4817      	ldr	r0, [pc, #92]	; (8001de8 <MX_GPIO_Init+0x320>)
 8001d8c:	f011 fa20 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD10 PD11 PD12 PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001d90:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8001d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d96:	2301      	movs	r3, #1
 8001d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001da2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da6:	4619      	mov	r1, r3
 8001da8:	4810      	ldr	r0, [pc, #64]	; (8001dec <MX_GPIO_Init+0x324>)
 8001daa:	f011 fa11 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG5 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8001dae:	f44f 7398 	mov.w	r3, #304	; 0x130
 8001db2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001db8:	2302      	movs	r3, #2
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	480a      	ldr	r0, [pc, #40]	; (8001df0 <MX_GPIO_Init+0x328>)
 8001dc8:	f011 fa02 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001dcc:	2340      	movs	r3, #64	; 0x40
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dd8:	e012      	b.n	8001e00 <MX_GPIO_Init+0x338>
 8001dda:	bf00      	nop
 8001ddc:	58024400 	.word	0x58024400
 8001de0:	58021400 	.word	0x58021400
 8001de4:	58021000 	.word	0x58021000
 8001de8:	58020400 	.word	0x58020400
 8001dec:	58020c00 	.word	0x58020c00
 8001df0:	58021800 	.word	0x58021800
 8001df4:	11310000 	.word	0x11310000
 8001df8:	58020800 	.word	0x58020800
 8001dfc:	58020000 	.word	0x58020000
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4842      	ldr	r0, [pc, #264]	; (8001f14 <MX_GPIO_Init+0x44c>)
 8001e0c:	f011 f9e0 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e14:	2300      	movs	r3, #0
 8001e16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	483c      	ldr	r0, [pc, #240]	; (8001f14 <MX_GPIO_Init+0x44c>)
 8001e24:	f011 f9d4 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e28:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e32:	2300      	movs	r3, #0
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	4836      	ldr	r0, [pc, #216]	; (8001f18 <MX_GPIO_Init+0x450>)
 8001e3e:	f011 f9c7 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e42:	2308      	movs	r3, #8
 8001e44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e46:	2300      	movs	r3, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e52:	4619      	mov	r1, r3
 8001e54:	4831      	ldr	r0, [pc, #196]	; (8001f1c <MX_GPIO_Init+0x454>)
 8001e56:	f011 f9bb 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8001e5a:	23d0      	movs	r3, #208	; 0xd0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001e5e:	4b30      	ldr	r3, [pc, #192]	; (8001f20 <MX_GPIO_Init+0x458>)
 8001e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	482b      	ldr	r0, [pc, #172]	; (8001f1c <MX_GPIO_Init+0x454>)
 8001e6e:	f011 f9af 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e72:	2320      	movs	r3, #32
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e82:	4619      	mov	r1, r3
 8001e84:	4825      	ldr	r0, [pc, #148]	; (8001f1c <MX_GPIO_Init+0x454>)
 8001e86:	f011 f9a3 	bl	80131d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001e8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001e8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e90:	2302      	movs	r3, #2
 8001e92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001e9c:	230b      	movs	r3, #11
 8001e9e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	481b      	ldr	r0, [pc, #108]	; (8001f14 <MX_GPIO_Init+0x44c>)
 8001ea8:	f011 f992 	bl	80131d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001eac:	2200      	movs	r2, #0
 8001eae:	2100      	movs	r1, #0
 8001eb0:	2006      	movs	r0, #6
 8001eb2:	f010 ff14 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001eb6:	2006      	movs	r0, #6
 8001eb8:	f010 ff2b 	bl	8012d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	2100      	movs	r1, #0
 8001ec0:	2007      	movs	r0, #7
 8001ec2:	f010 ff0c 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001ec6:	2007      	movs	r0, #7
 8001ec8:	f010 ff23 	bl	8012d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2100      	movs	r1, #0
 8001ed0:	2008      	movs	r0, #8
 8001ed2:	f010 ff04 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001ed6:	2008      	movs	r0, #8
 8001ed8:	f010 ff1b 	bl	8012d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001edc:	2200      	movs	r2, #0
 8001ede:	2100      	movs	r1, #0
 8001ee0:	2009      	movs	r0, #9
 8001ee2:	f010 fefc 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001ee6:	2009      	movs	r0, #9
 8001ee8:	f010 ff13 	bl	8012d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001eec:	2200      	movs	r2, #0
 8001eee:	2100      	movs	r1, #0
 8001ef0:	200a      	movs	r0, #10
 8001ef2:	f010 fef4 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001ef6:	200a      	movs	r0, #10
 8001ef8:	f010 ff0b 	bl	8012d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2017      	movs	r0, #23
 8001f02:	f010 feec 	bl	8012cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f06:	2017      	movs	r0, #23
 8001f08:	f010 ff03 	bl	8012d12 <HAL_NVIC_EnableIRQ>

}
 8001f0c:	bf00      	nop
 8001f0e:	3738      	adds	r7, #56	; 0x38
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	58021800 	.word	0x58021800
 8001f18:	58020800 	.word	0x58020800
 8001f1c:	58020c00 	.word	0x58020c00
 8001f20:	11310000 	.word	0x11310000

08001f24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	; (8001f64 <HAL_MspInit+0x30>)
 8001f3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f40:	4a08      	ldr	r2, [pc, #32]	; (8001f64 <HAL_MspInit+0x30>)
 8001f42:	f043 0302 	orr.w	r3, r3, #2
 8001f46:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f4a:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_MspInit+0x30>)
 8001f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f50:	f003 0302 	and.w	r3, r3, #2
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	58024400 	.word	0x58024400

08001f68 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b087      	sub	sp, #28
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a2b      	ldr	r2, [pc, #172]	; (8002024 <HAL_TIM_PWM_MspInit+0xbc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d10f      	bne.n	8001f9a <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f7a:	4b2b      	ldr	r3, [pc, #172]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f80:	4a29      	ldr	r2, [pc, #164]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001f8a:	4b27      	ldr	r3, [pc, #156]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	617b      	str	r3, [r7, #20]
 8001f96:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f98:	e03d      	b.n	8002016 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fa2:	d10f      	bne.n	8001fc4 <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001fa4:	4b20      	ldr	r3, [pc, #128]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001faa:	4a1f      	ldr	r2, [pc, #124]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fb4:	4b1c      	ldr	r3, [pc, #112]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fb6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fba:	f003 0301 	and.w	r3, r3, #1
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
}
 8001fc2:	e028      	b.n	8002016 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_TIM_PWM_MspInit+0xc4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d10f      	bne.n	8001fee <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fce:	4b16      	ldr	r3, [pc, #88]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fd4:	4a14      	ldr	r2, [pc, #80]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fd6:	f043 0302 	orr.w	r3, r3, #2
 8001fda:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001fde:	4b12      	ldr	r3, [pc, #72]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001fe0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	e013      	b.n	8002016 <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a0f      	ldr	r2, [pc, #60]	; (8002030 <HAL_TIM_PWM_MspInit+0xc8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d10e      	bne.n	8002016 <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ff8:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8001ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001ffe:	4a0a      	ldr	r2, [pc, #40]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 8002000:	f043 0308 	orr.w	r3, r3, #8
 8002004:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002008:	4b07      	ldr	r3, [pc, #28]	; (8002028 <HAL_TIM_PWM_MspInit+0xc0>)
 800200a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800200e:	f003 0308 	and.w	r3, r3, #8
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
}
 8002016:	bf00      	nop
 8002018:	371c      	adds	r7, #28
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	40010000 	.word	0x40010000
 8002028:	58024400 	.word	0x58024400
 800202c:	40000400 	.word	0x40000400
 8002030:	40000c00 	.word	0x40000c00

08002034 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_TIM_Base_MspInit+0x48>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d116      	bne.n	8002074 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002046:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_TIM_Base_MspInit+0x4c>)
 8002048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800204c:	4a0c      	ldr	r2, [pc, #48]	; (8002080 <HAL_TIM_Base_MspInit+0x4c>)
 800204e:	f043 0320 	orr.w	r3, r3, #32
 8002052:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002056:	4b0a      	ldr	r3, [pc, #40]	; (8002080 <HAL_TIM_Base_MspInit+0x4c>)
 8002058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800205c:	f003 0320 	and.w	r3, r3, #32
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2037      	movs	r0, #55	; 0x37
 800206a:	f010 fe38 	bl	8012cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800206e:	2037      	movs	r0, #55	; 0x37
 8002070:	f010 fe4f 	bl	8012d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40001400 	.word	0x40001400
 8002080:	58024400 	.word	0x58024400

08002084 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	605a      	str	r2, [r3, #4]
 8002096:	609a      	str	r2, [r3, #8]
 8002098:	60da      	str	r2, [r3, #12]
 800209a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a5a      	ldr	r2, [pc, #360]	; (800220c <HAL_TIM_MspPostInit+0x188>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d120      	bne.n	80020e8 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80020a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ac:	4a58      	ldr	r2, [pc, #352]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80020ae:	f043 0310 	orr.w	r3, r3, #16
 80020b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020b6:	4b56      	ldr	r3, [pc, #344]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80020b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80020c4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80020c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ca:	2302      	movs	r3, #2
 80020cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d2:	2300      	movs	r3, #0
 80020d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	484c      	ldr	r0, [pc, #304]	; (8002214 <HAL_TIM_MspPostInit+0x190>)
 80020e2:	f011 f875 	bl	80131d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80020e6:	e08c      	b.n	8002202 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020f0:	d11f      	bne.n	8002132 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	4b47      	ldr	r3, [pc, #284]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80020f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020f8:	4a45      	ldr	r2, [pc, #276]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80020fa:	f043 0301 	orr.w	r3, r3, #1
 80020fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002102:	4b43      	ldr	r3, [pc, #268]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 8002104:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002108:	f003 0301 	and.w	r3, r3, #1
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002110:	2320      	movs	r3, #32
 8002112:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 031c 	add.w	r3, r7, #28
 8002128:	4619      	mov	r1, r3
 800212a:	483b      	ldr	r0, [pc, #236]	; (8002218 <HAL_TIM_MspPostInit+0x194>)
 800212c:	f011 f850 	bl	80131d0 <HAL_GPIO_Init>
}
 8002130:	e067      	b.n	8002202 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a39      	ldr	r2, [pc, #228]	; (800221c <HAL_TIM_MspPostInit+0x198>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d13e      	bne.n	80021ba <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	4b34      	ldr	r3, [pc, #208]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 800213e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002142:	4a33      	ldr	r2, [pc, #204]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800214c:	4b30      	ldr	r3, [pc, #192]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 800214e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b2d      	ldr	r3, [pc, #180]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 800215c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002160:	4a2b      	ldr	r2, [pc, #172]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 8002162:	f043 0302 	orr.w	r3, r3, #2
 8002166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800216a:	4b29      	ldr	r3, [pc, #164]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002178:	23c0      	movs	r3, #192	; 0xc0
 800217a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217c:	2302      	movs	r3, #2
 800217e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002180:	2300      	movs	r3, #0
 8002182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002184:	2300      	movs	r3, #0
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002188:	2302      	movs	r3, #2
 800218a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4821      	ldr	r0, [pc, #132]	; (8002218 <HAL_TIM_MspPostInit+0x194>)
 8002194:	f011 f81c 	bl	80131d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002198:	2302      	movs	r3, #2
 800219a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80021a8:	2302      	movs	r3, #2
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	481b      	ldr	r0, [pc, #108]	; (8002220 <HAL_TIM_MspPostInit+0x19c>)
 80021b4:	f011 f80c 	bl	80131d0 <HAL_GPIO_Init>
}
 80021b8:	e023      	b.n	8002202 <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a19      	ldr	r2, [pc, #100]	; (8002224 <HAL_TIM_MspPostInit+0x1a0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d11e      	bne.n	8002202 <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80021c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021ca:	4a11      	ldr	r2, [pc, #68]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d4:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <HAL_TIM_MspPostInit+0x18c>)
 80021d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021e2:	2308      	movs	r3, #8
 80021e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80021f2:	2302      	movs	r3, #2
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_TIM_MspPostInit+0x194>)
 80021fe:	f010 ffe7 	bl	80131d0 <HAL_GPIO_Init>
}
 8002202:	bf00      	nop
 8002204:	3730      	adds	r7, #48	; 0x30
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	40010000 	.word	0x40010000
 8002210:	58024400 	.word	0x58024400
 8002214:	58021000 	.word	0x58021000
 8002218:	58020000 	.word	0x58020000
 800221c:	40000400 	.word	0x40000400
 8002220:	58020400 	.word	0x58020400
 8002224:	40000c00 	.word	0x40000c00

08002228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08c      	sub	sp, #48	; 0x30
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a41      	ldr	r2, [pc, #260]	; (800234c <HAL_UART_MspInit+0x124>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d13f      	bne.n	80022ca <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800224a:	4b41      	ldr	r3, [pc, #260]	; (8002350 <HAL_UART_MspInit+0x128>)
 800224c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_UART_MspInit+0x128>)
 8002252:	f043 0310 	orr.w	r3, r3, #16
 8002256:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_UART_MspInit+0x128>)
 800225c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002260:	f003 0310 	and.w	r3, r3, #16
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002268:	4b39      	ldr	r3, [pc, #228]	; (8002350 <HAL_UART_MspInit+0x128>)
 800226a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226e:	4a38      	ldr	r2, [pc, #224]	; (8002350 <HAL_UART_MspInit+0x128>)
 8002270:	f043 0302 	orr.w	r3, r3, #2
 8002274:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002278:	4b35      	ldr	r3, [pc, #212]	; (8002350 <HAL_UART_MspInit+0x128>)
 800227a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227e:	f003 0302 	and.w	r3, r3, #2
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002286:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800228a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228c:	2302      	movs	r3, #2
 800228e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002298:	2304      	movs	r3, #4
 800229a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229c:	f107 031c 	add.w	r3, r7, #28
 80022a0:	4619      	mov	r1, r3
 80022a2:	482c      	ldr	r0, [pc, #176]	; (8002354 <HAL_UART_MspInit+0x12c>)
 80022a4:	f010 ff94 	bl	80131d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022a8:	2340      	movs	r3, #64	; 0x40
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022b4:	2300      	movs	r3, #0
 80022b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022b8:	2307      	movs	r3, #7
 80022ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4824      	ldr	r0, [pc, #144]	; (8002354 <HAL_UART_MspInit+0x12c>)
 80022c4:	f010 ff84 	bl	80131d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80022c8:	e03b      	b.n	8002342 <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a22      	ldr	r2, [pc, #136]	; (8002358 <HAL_UART_MspInit+0x130>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d136      	bne.n	8002342 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022d4:	4b1e      	ldr	r3, [pc, #120]	; (8002350 <HAL_UART_MspInit+0x128>)
 80022d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022da:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_UART_MspInit+0x128>)
 80022dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80022e4:	4b1a      	ldr	r3, [pc, #104]	; (8002350 <HAL_UART_MspInit+0x128>)
 80022e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80022ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f2:	4b17      	ldr	r3, [pc, #92]	; (8002350 <HAL_UART_MspInit+0x128>)
 80022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022f8:	4a15      	ldr	r2, [pc, #84]	; (8002350 <HAL_UART_MspInit+0x128>)
 80022fa:	f043 0308 	orr.w	r3, r3, #8
 80022fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002302:	4b13      	ldr	r3, [pc, #76]	; (8002350 <HAL_UART_MspInit+0x128>)
 8002304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	60fb      	str	r3, [r7, #12]
 800230e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002310:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002322:	2307      	movs	r3, #7
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	480b      	ldr	r0, [pc, #44]	; (800235c <HAL_UART_MspInit+0x134>)
 800232e:	f010 ff4f 	bl	80131d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002332:	2200      	movs	r2, #0
 8002334:	2100      	movs	r1, #0
 8002336:	2027      	movs	r0, #39	; 0x27
 8002338:	f010 fcd1 	bl	8012cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800233c:	2027      	movs	r0, #39	; 0x27
 800233e:	f010 fce8 	bl	8012d12 <HAL_NVIC_EnableIRQ>
}
 8002342:	bf00      	nop
 8002344:	3730      	adds	r7, #48	; 0x30
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40011000 	.word	0x40011000
 8002350:	58024400 	.word	0x58024400
 8002354:	58020400 	.word	0x58020400
 8002358:	40004800 	.word	0x40004800
 800235c:	58020c00 	.word	0x58020c00

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <HardFault_Handler+0x4>

08002374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <MemManage_Handler+0x4>

0800237a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <UsageFault_Handler+0x4>

08002386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f010 fb6a 	bl	8012a8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80023c0:	2001      	movs	r0, #1
 80023c2:	f011 f8e6 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023c6:	bf00      	nop
 80023c8:	bd80      	pop	{r7, pc}

080023ca <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023ce:	2002      	movs	r0, #2
 80023d0:	f011 f8df 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023d4:	bf00      	nop
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80023dc:	2004      	movs	r0, #4
 80023de:	f011 f8d8 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80023e2:	bf00      	nop
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80023ea:	2008      	movs	r0, #8
 80023ec:	f011 f8d1 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80023f0:	bf00      	nop
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 80023f8:	2010      	movs	r0, #16
 80023fa:	f011 f8ca 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}

08002402 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002406:	2040      	movs	r0, #64	; 0x40
 8002408:	f011 f8c3 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800240c:	2080      	movs	r0, #128	; 0x80
 800240e:	f011 f8c0 	bl	8013592 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002412:	bf00      	nop
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <USART3_IRQHandler+0x10>)
 800241e:	f015 fd7f 	bl	8017f20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	24000310 	.word	0x24000310

0800242c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM7_IRQHandler+0x10>)
 8002432:	f014 fe13 	bl	801705c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	24000630 	.word	0x24000630

08002440 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <OTG_FS_IRQHandler+0x10>)
 8002446:	f011 fa15 	bl	8013874 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	24001b5c 	.word	0x24001b5c

08002454 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <_sbrk+0x50>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d102      	bne.n	800246a <_sbrk+0x16>
		heap_end = &end;
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <_sbrk+0x50>)
 8002466:	4a10      	ldr	r2, [pc, #64]	; (80024a8 <_sbrk+0x54>)
 8002468:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <_sbrk+0x50>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <_sbrk+0x50>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4413      	add	r3, r2
 8002478:	466a      	mov	r2, sp
 800247a:	4293      	cmp	r3, r2
 800247c:	d907      	bls.n	800248e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800247e:	f01b fef3 	bl	801e268 <__errno>
 8002482:	4602      	mov	r2, r0
 8002484:	230c      	movs	r3, #12
 8002486:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002488:	f04f 33ff 	mov.w	r3, #4294967295
 800248c:	e006      	b.n	800249c <_sbrk+0x48>
	}

	heap_end += incr;
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <_sbrk+0x50>)
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4413      	add	r3, r2
 8002496:	4a03      	ldr	r2, [pc, #12]	; (80024a4 <_sbrk+0x50>)
 8002498:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800249a:	68fb      	ldr	r3, [r7, #12]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	24000300 	.word	0x24000300
 80024a8:	24001f68 	.word	0x24001f68

080024ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024b0:	4b29      	ldr	r3, [pc, #164]	; (8002558 <SystemInit+0xac>)
 80024b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b6:	4a28      	ldr	r2, [pc, #160]	; (8002558 <SystemInit+0xac>)
 80024b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80024c0:	4b26      	ldr	r3, [pc, #152]	; (800255c <SystemInit+0xb0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a25      	ldr	r2, [pc, #148]	; (800255c <SystemInit+0xb0>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80024cc:	4b23      	ldr	r3, [pc, #140]	; (800255c <SystemInit+0xb0>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80024d2:	4b22      	ldr	r3, [pc, #136]	; (800255c <SystemInit+0xb0>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	4921      	ldr	r1, [pc, #132]	; (800255c <SystemInit+0xb0>)
 80024d8:	4b21      	ldr	r3, [pc, #132]	; (8002560 <SystemInit+0xb4>)
 80024da:	4013      	ands	r3, r2
 80024dc:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80024de:	4b1f      	ldr	r3, [pc, #124]	; (800255c <SystemInit+0xb0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	; (800255c <SystemInit+0xb0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	; (800255c <SystemInit+0xb0>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <SystemInit+0xb0>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <SystemInit+0xb0>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80024fc:	4b17      	ldr	r3, [pc, #92]	; (800255c <SystemInit+0xb0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <SystemInit+0xb0>)
 8002504:	2200      	movs	r2, #0
 8002506:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8002508:	4b14      	ldr	r3, [pc, #80]	; (800255c <SystemInit+0xb0>)
 800250a:	2200      	movs	r2, #0
 800250c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800250e:	4b13      	ldr	r3, [pc, #76]	; (800255c <SystemInit+0xb0>)
 8002510:	2200      	movs	r2, #0
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8002514:	4b11      	ldr	r3, [pc, #68]	; (800255c <SystemInit+0xb0>)
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <SystemInit+0xb0>)
 800251c:	2200      	movs	r2, #0
 800251e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002520:	4b0e      	ldr	r3, [pc, #56]	; (800255c <SystemInit+0xb0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0d      	ldr	r2, [pc, #52]	; (800255c <SystemInit+0xb0>)
 8002526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800252a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800252c:	4b0b      	ldr	r3, [pc, #44]	; (800255c <SystemInit+0xb0>)
 800252e:	2200      	movs	r2, #0
 8002530:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002532:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <SystemInit+0xb8>)
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <SystemInit+0xbc>)
 8002538:	4013      	ands	r3, r2
 800253a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800253e:	d202      	bcs.n	8002546 <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002540:	4b0a      	ldr	r3, [pc, #40]	; (800256c <SystemInit+0xc0>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002546:	4b04      	ldr	r3, [pc, #16]	; (8002558 <SystemInit+0xac>)
 8002548:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800254c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800254e:	bf00      	nop
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	58024400 	.word	0x58024400
 8002560:	eaf6ed7f 	.word	0xeaf6ed7f
 8002564:	5c001000 	.word	0x5c001000
 8002568:	ffff0000 	.word	0xffff0000
 800256c:	51008108 	.word	0x51008108

08002570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002570:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025a8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002574:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002576:	e003      	b.n	8002580 <LoopCopyDataInit>

08002578 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800257a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800257c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800257e:	3104      	adds	r1, #4

08002580 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002580:	480b      	ldr	r0, [pc, #44]	; (80025b0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002582:	4b0c      	ldr	r3, [pc, #48]	; (80025b4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002584:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002586:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002588:	d3f6      	bcc.n	8002578 <CopyDataInit>
  ldr  r2, =_sbss
 800258a:	4a0b      	ldr	r2, [pc, #44]	; (80025b8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800258c:	e002      	b.n	8002594 <LoopFillZerobss>

0800258e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800258e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002590:	f842 3b04 	str.w	r3, [r2], #4

08002594 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002594:	4b09      	ldr	r3, [pc, #36]	; (80025bc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002596:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002598:	d3f9      	bcc.n	800258e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800259a:	f7ff ff87 	bl	80024ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800259e:	f01b fe69 	bl	801e274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025a2:	f7fe fe2d 	bl	8001200 <main>
  bx  lr    
 80025a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025a8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80025ac:	0801f890 	.word	0x0801f890
  ldr  r0, =_sdata
 80025b0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80025b4:	240001f0 	.word	0x240001f0
  ldr  r2, =_sbss
 80025b8:	240001f0 	.word	0x240001f0
  ldr  r3, = _ebss
 80025bc:	24001f68 	.word	0x24001f68

080025c0 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025c0:	e7fe      	b.n	80025c0 <ADC3_IRQHandler>
 80025c2:	0000      	movs	r0, r0
 80025c4:	0000      	movs	r0, r0
	...

080025c8 <G_q>:
 *                creal_T b_G_q[6]
 * Return Type  : void
 */
void G_q(double g, double theta2, double theta3, double theta4, double theta5,
         creal_T b_G_q[6])
{
 80025c8:	b590      	push	{r4, r7, lr}
 80025ca:	f5ad 5d9e 	sub.w	sp, sp, #5056	; 0x13c0
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4bc1      	ldr	r3, [pc, #772]	; (80028d8 <G_q+0x310>)
 80025d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025d8:	443a      	add	r2, r7
 80025da:	4413      	add	r3, r2
 80025dc:	ed83 0b00 	vstr	d0, [r3]
 80025e0:	4bbe      	ldr	r3, [pc, #760]	; (80028dc <G_q+0x314>)
 80025e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025e6:	443a      	add	r2, r7
 80025e8:	4413      	add	r3, r2
 80025ea:	ed83 1b00 	vstr	d1, [r3]
 80025ee:	4bbc      	ldr	r3, [pc, #752]	; (80028e0 <G_q+0x318>)
 80025f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80025f4:	443a      	add	r2, r7
 80025f6:	4413      	add	r3, r2
 80025f8:	ed83 2b00 	vstr	d2, [r3]
 80025fc:	f107 0310 	add.w	r3, r7, #16
 8002600:	ed83 3b00 	vstr	d3, [r3]
 8002604:	4bb7      	ldr	r3, [pc, #732]	; (80028e4 <G_q+0x31c>)
 8002606:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800260a:	443a      	add	r2, r7
 800260c:	4413      	add	r3, r2
 800260e:	ed83 4b00 	vstr	d4, [r3]
 8002612:	4bb5      	ldr	r3, [pc, #724]	; (80028e8 <G_q+0x320>)
 8002614:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002618:	443a      	add	r2, r7
 800261a:	4413      	add	r3, r2
 800261c:	6018      	str	r0, [r3, #0]
  double t74_re;
  double t74_im;
  double t76_re;
  double t58_im;
  double t60_re;
  if (isInitialized_G_q == false) {
 800261e:	4bb3      	ldr	r3, [pc, #716]	; (80028ec <G_q+0x324>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <G_q+0x62>
    G_q_initialize();
 8002626:	f010 f8cf 	bl	80127c8 <G_q_initialize>
  }

  /*     This function was generated by the Symbolic Math Toolbox version 8.2. */
  /*     24-May-2020 14:27:08 */
  t299.re = theta2 * 0.0;
 800262a:	4bac      	ldr	r3, [pc, #688]	; (80028dc <G_q+0x314>)
 800262c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002630:	443a      	add	r2, r7
 8002632:	4413      	add	r3, r2
 8002634:	ed93 7b00 	vldr	d7, [r3]
 8002638:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 80028d0 <G_q+0x308>
 800263c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002640:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002644:	ed83 7b00 	vstr	d7, [r3]
  t299.im = theta2;
 8002648:	f507 5292 	add.w	r2, r7, #4672	; 0x1240
 800264c:	4ba3      	ldr	r3, [pc, #652]	; (80028dc <G_q+0x314>)
 800264e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002652:	4439      	add	r1, r7
 8002654:	440b      	add	r3, r1
 8002656:	e9d3 3400 	ldrd	r3, r4, [r3]
 800265a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t298.re = -t299.re;
 800265e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002662:	ed93 7b00 	vldr	d7, [r3]
 8002666:	eeb1 7b47 	vneg.f64	d7, d7
 800266a:	f241 2330 	movw	r3, #4656	; 0x1230
 800266e:	443b      	add	r3, r7
 8002670:	ed83 7b00 	vstr	d7, [r3]
  t298.im = -theta2;
 8002674:	4b99      	ldr	r3, [pc, #612]	; (80028dc <G_q+0x314>)
 8002676:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800267a:	443a      	add	r2, r7
 800267c:	4413      	add	r3, r2
 800267e:	ed93 7b00 	vldr	d7, [r3]
 8002682:	eeb1 7b47 	vneg.f64	d7, d7
 8002686:	f241 2330 	movw	r3, #4656	; 0x1230
 800268a:	443b      	add	r3, r7
 800268c:	ed83 7b02 	vstr	d7, [r3, #8]
  t293.re = t299.re;
 8002690:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002694:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002698:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 800269c:	e9c2 3400 	strd	r3, r4, [r2]
  t293.im = theta2;
 80026a0:	f507 5291 	add.w	r2, r7, #4640	; 0x1220
 80026a4:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <G_q+0x314>)
 80026a6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80026aa:	4439      	add	r1, r7
 80026ac:	440b      	add	r3, r1
 80026ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026b2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t292.re = -t299.re;
 80026b6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026ba:	ed93 7b00 	vldr	d7, [r3]
 80026be:	eeb1 7b47 	vneg.f64	d7, d7
 80026c2:	f241 2310 	movw	r3, #4624	; 0x1210
 80026c6:	443b      	add	r3, r7
 80026c8:	ed83 7b00 	vstr	d7, [r3]
  t292.im = -theta2;
 80026cc:	4b83      	ldr	r3, [pc, #524]	; (80028dc <G_q+0x314>)
 80026ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80026d2:	443a      	add	r2, r7
 80026d4:	4413      	add	r3, r2
 80026d6:	ed93 7b00 	vldr	d7, [r3]
 80026da:	eeb1 7b47 	vneg.f64	d7, d7
 80026de:	f241 2310 	movw	r3, #4624	; 0x1210
 80026e2:	443b      	add	r3, r7
 80026e4:	ed83 7b02 	vstr	d7, [r3, #8]
  t291.re = t299.re;
 80026e8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80026ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80026f0:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026f4:	e9c2 3400 	strd	r3, r4, [r2]
  t291.im = theta2;
 80026f8:	f507 5290 	add.w	r2, r7, #4608	; 0x1200
 80026fc:	4b77      	ldr	r3, [pc, #476]	; (80028dc <G_q+0x314>)
 80026fe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002702:	4439      	add	r1, r7
 8002704:	440b      	add	r3, r1
 8002706:	e9d3 3400 	ldrd	r3, r4, [r3]
 800270a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t290.re = -t299.re;
 800270e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002712:	ed93 7b00 	vldr	d7, [r3]
 8002716:	eeb1 7b47 	vneg.f64	d7, d7
 800271a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800271e:	443b      	add	r3, r7
 8002720:	ed83 7b00 	vstr	d7, [r3]
  t290.im = -theta2;
 8002724:	4b6d      	ldr	r3, [pc, #436]	; (80028dc <G_q+0x314>)
 8002726:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800272a:	443a      	add	r2, r7
 800272c:	4413      	add	r3, r2
 800272e:	ed93 7b00 	vldr	d7, [r3]
 8002732:	eeb1 7b47 	vneg.f64	d7, d7
 8002736:	f241 13f0 	movw	r3, #4592	; 0x11f0
 800273a:	443b      	add	r3, r7
 800273c:	ed83 7b02 	vstr	d7, [r3, #8]
  t287.re = t299.re;
 8002740:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002744:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002748:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 800274c:	e9c2 3400 	strd	r3, r4, [r2]
  t287.im = theta2;
 8002750:	f507 528f 	add.w	r2, r7, #4576	; 0x11e0
 8002754:	4b61      	ldr	r3, [pc, #388]	; (80028dc <G_q+0x314>)
 8002756:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800275a:	4439      	add	r1, r7
 800275c:	440b      	add	r3, r1
 800275e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002762:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t286.re = -t299.re;
 8002766:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800276a:	ed93 7b00 	vldr	d7, [r3]
 800276e:	eeb1 7b47 	vneg.f64	d7, d7
 8002772:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8002776:	443b      	add	r3, r7
 8002778:	ed83 7b00 	vstr	d7, [r3]
  t286.im = -theta2;
 800277c:	4b57      	ldr	r3, [pc, #348]	; (80028dc <G_q+0x314>)
 800277e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002782:	443a      	add	r2, r7
 8002784:	4413      	add	r3, r2
 8002786:	ed93 7b00 	vldr	d7, [r3]
 800278a:	eeb1 7b47 	vneg.f64	d7, d7
 800278e:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8002792:	443b      	add	r3, r7
 8002794:	ed83 7b02 	vstr	d7, [r3, #8]
  t281.re = t299.re;
 8002798:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800279c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027a0:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80027a4:	e9c2 3400 	strd	r3, r4, [r2]
  t281.im = theta2;
 80027a8:	f507 528e 	add.w	r2, r7, #4544	; 0x11c0
 80027ac:	4b4b      	ldr	r3, [pc, #300]	; (80028dc <G_q+0x314>)
 80027ae:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80027b2:	4439      	add	r1, r7
 80027b4:	440b      	add	r3, r1
 80027b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027ba:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t280.re = -t299.re;
 80027be:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027c2:	ed93 7b00 	vldr	d7, [r3]
 80027c6:	eeb1 7b47 	vneg.f64	d7, d7
 80027ca:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80027ce:	443b      	add	r3, r7
 80027d0:	ed83 7b00 	vstr	d7, [r3]
  t280.im = -theta2;
 80027d4:	4b41      	ldr	r3, [pc, #260]	; (80028dc <G_q+0x314>)
 80027d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80027da:	443a      	add	r2, r7
 80027dc:	4413      	add	r3, r2
 80027de:	ed93 7b00 	vldr	d7, [r3]
 80027e2:	eeb1 7b47 	vneg.f64	d7, d7
 80027e6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80027ea:	443b      	add	r3, r7
 80027ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t277.re = t299.re;
 80027f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80027f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80027f8:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 80027fc:	e9c2 3400 	strd	r3, r4, [r2]
  t277.im = theta2;
 8002800:	f507 528d 	add.w	r2, r7, #4512	; 0x11a0
 8002804:	4b35      	ldr	r3, [pc, #212]	; (80028dc <G_q+0x314>)
 8002806:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800280a:	4439      	add	r1, r7
 800280c:	440b      	add	r3, r1
 800280e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002812:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t276.re = -t299.re;
 8002816:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800281a:	ed93 7b00 	vldr	d7, [r3]
 800281e:	eeb1 7b47 	vneg.f64	d7, d7
 8002822:	f241 1390 	movw	r3, #4496	; 0x1190
 8002826:	443b      	add	r3, r7
 8002828:	ed83 7b00 	vstr	d7, [r3]
  t276.im = -theta2;
 800282c:	4b2b      	ldr	r3, [pc, #172]	; (80028dc <G_q+0x314>)
 800282e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002832:	443a      	add	r2, r7
 8002834:	4413      	add	r3, r2
 8002836:	ed93 7b00 	vldr	d7, [r3]
 800283a:	eeb1 7b47 	vneg.f64	d7, d7
 800283e:	f241 1390 	movw	r3, #4496	; 0x1190
 8002842:	443b      	add	r3, r7
 8002844:	ed83 7b02 	vstr	d7, [r3, #8]
  t273.re = t299.re;
 8002848:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800284c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002850:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 8002854:	e9c2 3400 	strd	r3, r4, [r2]
  t273.im = theta2;
 8002858:	f507 528c 	add.w	r2, r7, #4480	; 0x1180
 800285c:	4b1f      	ldr	r3, [pc, #124]	; (80028dc <G_q+0x314>)
 800285e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002862:	4439      	add	r1, r7
 8002864:	440b      	add	r3, r1
 8002866:	e9d3 3400 	ldrd	r3, r4, [r3]
 800286a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t272.re = -t299.re;
 800286e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002872:	ed93 7b00 	vldr	d7, [r3]
 8002876:	eeb1 7b47 	vneg.f64	d7, d7
 800287a:	f241 1370 	movw	r3, #4464	; 0x1170
 800287e:	443b      	add	r3, r7
 8002880:	ed83 7b00 	vstr	d7, [r3]
  t272.im = -theta2;
 8002884:	4b15      	ldr	r3, [pc, #84]	; (80028dc <G_q+0x314>)
 8002886:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800288a:	443a      	add	r2, r7
 800288c:	4413      	add	r3, r2
 800288e:	ed93 7b00 	vldr	d7, [r3]
 8002892:	eeb1 7b47 	vneg.f64	d7, d7
 8002896:	f241 1370 	movw	r3, #4464	; 0x1170
 800289a:	443b      	add	r3, r7
 800289c:	ed83 7b02 	vstr	d7, [r3, #8]
  t269.re = t299.re;
 80028a0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028a8:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80028ac:	e9c2 3400 	strd	r3, r4, [r2]
  t269.im = theta2;
 80028b0:	f507 528b 	add.w	r2, r7, #4448	; 0x1160
 80028b4:	4b09      	ldr	r3, [pc, #36]	; (80028dc <G_q+0x314>)
 80028b6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80028ba:	4439      	add	r1, r7
 80028bc:	440b      	add	r3, r1
 80028be:	e9d3 3400 	ldrd	r3, r4, [r3]
 80028c2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t268.re = -t299.re;
 80028c6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80028ca:	ed93 7b00 	vldr	d7, [r3]
 80028ce:	e00f      	b.n	80028f0 <G_q+0x328>
	...
 80028d8:	ffffec58 	.word	0xffffec58
 80028dc:	ffffec50 	.word	0xffffec50
 80028e0:	ffffec48 	.word	0xffffec48
 80028e4:	ffffec38 	.word	0xffffec38
 80028e8:	ffffec34 	.word	0xffffec34
 80028ec:	24000304 	.word	0x24000304
 80028f0:	eeb1 7b47 	vneg.f64	d7, d7
 80028f4:	f241 1350 	movw	r3, #4432	; 0x1150
 80028f8:	443b      	add	r3, r7
 80028fa:	ed83 7b00 	vstr	d7, [r3]
  t268.im = -theta2;
 80028fe:	4bc0      	ldr	r3, [pc, #768]	; (8002c00 <G_q+0x638>)
 8002900:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002904:	443a      	add	r2, r7
 8002906:	4413      	add	r3, r2
 8002908:	ed93 7b00 	vldr	d7, [r3]
 800290c:	eeb1 7b47 	vneg.f64	d7, d7
 8002910:	f241 1350 	movw	r3, #4432	; 0x1150
 8002914:	443b      	add	r3, r7
 8002916:	ed83 7b02 	vstr	d7, [r3, #8]
  t263.re = t299.re;
 800291a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800291e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002922:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 8002926:	e9c2 3400 	strd	r3, r4, [r2]
  t263.im = theta2;
 800292a:	f507 528a 	add.w	r2, r7, #4416	; 0x1140
 800292e:	4bb4      	ldr	r3, [pc, #720]	; (8002c00 <G_q+0x638>)
 8002930:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002934:	4439      	add	r1, r7
 8002936:	440b      	add	r3, r1
 8002938:	e9d3 3400 	ldrd	r3, r4, [r3]
 800293c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t262.re = -t299.re;
 8002940:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002944:	ed93 7b00 	vldr	d7, [r3]
 8002948:	eeb1 7b47 	vneg.f64	d7, d7
 800294c:	f241 1330 	movw	r3, #4400	; 0x1130
 8002950:	443b      	add	r3, r7
 8002952:	ed83 7b00 	vstr	d7, [r3]
  t262.im = -theta2;
 8002956:	4baa      	ldr	r3, [pc, #680]	; (8002c00 <G_q+0x638>)
 8002958:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800295c:	443a      	add	r2, r7
 800295e:	4413      	add	r3, r2
 8002960:	ed93 7b00 	vldr	d7, [r3]
 8002964:	eeb1 7b47 	vneg.f64	d7, d7
 8002968:	f241 1330 	movw	r3, #4400	; 0x1130
 800296c:	443b      	add	r3, r7
 800296e:	ed83 7b02 	vstr	d7, [r3, #8]
  t259.re = t299.re;
 8002972:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002976:	e9d3 3400 	ldrd	r3, r4, [r3]
 800297a:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 800297e:	e9c2 3400 	strd	r3, r4, [r2]
  t259.im = theta2;
 8002982:	f507 5289 	add.w	r2, r7, #4384	; 0x1120
 8002986:	4b9e      	ldr	r3, [pc, #632]	; (8002c00 <G_q+0x638>)
 8002988:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800298c:	4439      	add	r1, r7
 800298e:	440b      	add	r3, r1
 8002990:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002994:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t258.re = -t299.re;
 8002998:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800299c:	ed93 7b00 	vldr	d7, [r3]
 80029a0:	eeb1 7b47 	vneg.f64	d7, d7
 80029a4:	f241 1310 	movw	r3, #4368	; 0x1110
 80029a8:	443b      	add	r3, r7
 80029aa:	ed83 7b00 	vstr	d7, [r3]
  t258.im = -theta2;
 80029ae:	4b94      	ldr	r3, [pc, #592]	; (8002c00 <G_q+0x638>)
 80029b0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80029b4:	443a      	add	r2, r7
 80029b6:	4413      	add	r3, r2
 80029b8:	ed93 7b00 	vldr	d7, [r3]
 80029bc:	eeb1 7b47 	vneg.f64	d7, d7
 80029c0:	f241 1310 	movw	r3, #4368	; 0x1110
 80029c4:	443b      	add	r3, r7
 80029c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t251.re = t299.re;
 80029ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029d2:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80029d6:	e9c2 3400 	strd	r3, r4, [r2]
  t251.im = theta2;
 80029da:	f507 5288 	add.w	r2, r7, #4352	; 0x1100
 80029de:	4b88      	ldr	r3, [pc, #544]	; (8002c00 <G_q+0x638>)
 80029e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80029e4:	4439      	add	r1, r7
 80029e6:	440b      	add	r3, r1
 80029e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80029ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t250.re = -t299.re;
 80029f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80029f4:	ed93 7b00 	vldr	d7, [r3]
 80029f8:	eeb1 7b47 	vneg.f64	d7, d7
 80029fc:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002a00:	443b      	add	r3, r7
 8002a02:	ed83 7b00 	vstr	d7, [r3]
  t250.im = -theta2;
 8002a06:	4b7e      	ldr	r3, [pc, #504]	; (8002c00 <G_q+0x638>)
 8002a08:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a0c:	443a      	add	r2, r7
 8002a0e:	4413      	add	r3, r2
 8002a10:	ed93 7b00 	vldr	d7, [r3]
 8002a14:	eeb1 7b47 	vneg.f64	d7, d7
 8002a18:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8002a1c:	443b      	add	r3, r7
 8002a1e:	ed83 7b02 	vstr	d7, [r3, #8]
  t249.re = t299.re;
 8002a22:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a2a:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002a2e:	e9c2 3400 	strd	r3, r4, [r2]
  t249.im = theta2;
 8002a32:	f507 5287 	add.w	r2, r7, #4320	; 0x10e0
 8002a36:	4b72      	ldr	r3, [pc, #456]	; (8002c00 <G_q+0x638>)
 8002a38:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a3c:	4439      	add	r1, r7
 8002a3e:	440b      	add	r3, r1
 8002a40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a44:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t248.re = -t299.re;
 8002a48:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a4c:	ed93 7b00 	vldr	d7, [r3]
 8002a50:	eeb1 7b47 	vneg.f64	d7, d7
 8002a54:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8002a58:	443b      	add	r3, r7
 8002a5a:	ed83 7b00 	vstr	d7, [r3]
  t248.im = -theta2;
 8002a5e:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <G_q+0x638>)
 8002a60:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002a64:	443a      	add	r2, r7
 8002a66:	4413      	add	r3, r2
 8002a68:	ed93 7b00 	vldr	d7, [r3]
 8002a6c:	eeb1 7b47 	vneg.f64	d7, d7
 8002a70:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8002a74:	443b      	add	r3, r7
 8002a76:	ed83 7b02 	vstr	d7, [r3, #8]
  t245.re = t299.re;
 8002a7a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002a7e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a82:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002a86:	e9c2 3400 	strd	r3, r4, [r2]
  t245.im = theta2;
 8002a8a:	f507 5286 	add.w	r2, r7, #4288	; 0x10c0
 8002a8e:	4b5c      	ldr	r3, [pc, #368]	; (8002c00 <G_q+0x638>)
 8002a90:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002a94:	4439      	add	r1, r7
 8002a96:	440b      	add	r3, r1
 8002a98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a9c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t244.re = -t299.re;
 8002aa0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002aa4:	ed93 7b00 	vldr	d7, [r3]
 8002aa8:	eeb1 7b47 	vneg.f64	d7, d7
 8002aac:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002ab0:	443b      	add	r3, r7
 8002ab2:	ed83 7b00 	vstr	d7, [r3]
  t244.im = -theta2;
 8002ab6:	4b52      	ldr	r3, [pc, #328]	; (8002c00 <G_q+0x638>)
 8002ab8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002abc:	443a      	add	r2, r7
 8002abe:	4413      	add	r3, r2
 8002ac0:	ed93 7b00 	vldr	d7, [r3]
 8002ac4:	eeb1 7b47 	vneg.f64	d7, d7
 8002ac8:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8002acc:	443b      	add	r3, r7
 8002ace:	ed83 7b02 	vstr	d7, [r3, #8]
  t239.re = t299.re;
 8002ad2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ad6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ada:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002ade:	e9c2 3400 	strd	r3, r4, [r2]
  t239.im = theta2;
 8002ae2:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8002ae6:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <G_q+0x638>)
 8002ae8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002aec:	4439      	add	r1, r7
 8002aee:	440b      	add	r3, r1
 8002af0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002af4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t238.re = -t299.re;
 8002af8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002afc:	ed93 7b00 	vldr	d7, [r3]
 8002b00:	eeb1 7b47 	vneg.f64	d7, d7
 8002b04:	f241 0390 	movw	r3, #4240	; 0x1090
 8002b08:	443b      	add	r3, r7
 8002b0a:	ed83 7b00 	vstr	d7, [r3]
  t238.im = -theta2;
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	; (8002c00 <G_q+0x638>)
 8002b10:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b14:	443a      	add	r2, r7
 8002b16:	4413      	add	r3, r2
 8002b18:	ed93 7b00 	vldr	d7, [r3]
 8002b1c:	eeb1 7b47 	vneg.f64	d7, d7
 8002b20:	f241 0390 	movw	r3, #4240	; 0x1090
 8002b24:	443b      	add	r3, r7
 8002b26:	ed83 7b02 	vstr	d7, [r3, #8]
  t237.re = t299.re;
 8002b2a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b32:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b36:	e9c2 3400 	strd	r3, r4, [r2]
  t237.im = theta2;
 8002b3a:	f507 5284 	add.w	r2, r7, #4224	; 0x1080
 8002b3e:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <G_q+0x638>)
 8002b40:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b44:	4439      	add	r1, r7
 8002b46:	440b      	add	r3, r1
 8002b48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b4c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t236.re = -t299.re;
 8002b50:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b54:	ed93 7b00 	vldr	d7, [r3]
 8002b58:	eeb1 7b47 	vneg.f64	d7, d7
 8002b5c:	f241 0370 	movw	r3, #4208	; 0x1070
 8002b60:	443b      	add	r3, r7
 8002b62:	ed83 7b00 	vstr	d7, [r3]
  t236.im = -theta2;
 8002b66:	4b26      	ldr	r3, [pc, #152]	; (8002c00 <G_q+0x638>)
 8002b68:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002b6c:	443a      	add	r2, r7
 8002b6e:	4413      	add	r3, r2
 8002b70:	ed93 7b00 	vldr	d7, [r3]
 8002b74:	eeb1 7b47 	vneg.f64	d7, d7
 8002b78:	f241 0370 	movw	r3, #4208	; 0x1070
 8002b7c:	443b      	add	r3, r7
 8002b7e:	ed83 7b02 	vstr	d7, [r3, #8]
  t233.re = t299.re;
 8002b82:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002b86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002b8a:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002b8e:	e9c2 3400 	strd	r3, r4, [r2]
  t233.im = theta2;
 8002b92:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <G_q+0x638>)
 8002b98:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002b9c:	4439      	add	r1, r7
 8002b9e:	440b      	add	r3, r1
 8002ba0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ba4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t232.re = -t299.re;
 8002ba8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bac:	ed93 7b00 	vldr	d7, [r3]
 8002bb0:	eeb1 7b47 	vneg.f64	d7, d7
 8002bb4:	f241 0350 	movw	r3, #4176	; 0x1050
 8002bb8:	443b      	add	r3, r7
 8002bba:	ed83 7b00 	vstr	d7, [r3]
  t232.im = -theta2;
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <G_q+0x638>)
 8002bc0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002bc4:	443a      	add	r2, r7
 8002bc6:	4413      	add	r3, r2
 8002bc8:	ed93 7b00 	vldr	d7, [r3]
 8002bcc:	eeb1 7b47 	vneg.f64	d7, d7
 8002bd0:	f241 0350 	movw	r3, #4176	; 0x1050
 8002bd4:	443b      	add	r3, r7
 8002bd6:	ed83 7b02 	vstr	d7, [r3, #8]
  t227.re = t299.re;
 8002bda:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002bde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002be2:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002be6:	e9c2 3400 	strd	r3, r4, [r2]
  t227.im = theta2;
 8002bea:	f507 5282 	add.w	r2, r7, #4160	; 0x1040
 8002bee:	4b04      	ldr	r3, [pc, #16]	; (8002c00 <G_q+0x638>)
 8002bf0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002bf4:	4439      	add	r1, r7
 8002bf6:	440b      	add	r3, r1
 8002bf8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002bfc:	e002      	b.n	8002c04 <G_q+0x63c>
 8002bfe:	bf00      	nop
 8002c00:	ffffec50 	.word	0xffffec50
 8002c04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t226.re = -t299.re;
 8002c08:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c0c:	ed93 7b00 	vldr	d7, [r3]
 8002c10:	eeb1 7b47 	vneg.f64	d7, d7
 8002c14:	f241 0330 	movw	r3, #4144	; 0x1030
 8002c18:	443b      	add	r3, r7
 8002c1a:	ed83 7b00 	vstr	d7, [r3]
  t226.im = -theta2;
 8002c1e:	4bc4      	ldr	r3, [pc, #784]	; (8002f30 <G_q+0x968>)
 8002c20:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c24:	443a      	add	r2, r7
 8002c26:	4413      	add	r3, r2
 8002c28:	ed93 7b00 	vldr	d7, [r3]
 8002c2c:	eeb1 7b47 	vneg.f64	d7, d7
 8002c30:	f241 0330 	movw	r3, #4144	; 0x1030
 8002c34:	443b      	add	r3, r7
 8002c36:	ed83 7b02 	vstr	d7, [r3, #8]
  t223.re = t299.re;
 8002c3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c42:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c46:	e9c2 3400 	strd	r3, r4, [r2]
  t223.im = theta2;
 8002c4a:	f507 5281 	add.w	r2, r7, #4128	; 0x1020
 8002c4e:	4bb8      	ldr	r3, [pc, #736]	; (8002f30 <G_q+0x968>)
 8002c50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002c54:	4439      	add	r1, r7
 8002c56:	440b      	add	r3, r1
 8002c58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t222.re = -t299.re;
 8002c60:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c64:	ed93 7b00 	vldr	d7, [r3]
 8002c68:	eeb1 7b47 	vneg.f64	d7, d7
 8002c6c:	f241 0310 	movw	r3, #4112	; 0x1010
 8002c70:	443b      	add	r3, r7
 8002c72:	ed83 7b00 	vstr	d7, [r3]
  t222.im = -theta2;
 8002c76:	4bae      	ldr	r3, [pc, #696]	; (8002f30 <G_q+0x968>)
 8002c78:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002c7c:	443a      	add	r2, r7
 8002c7e:	4413      	add	r3, r2
 8002c80:	ed93 7b00 	vldr	d7, [r3]
 8002c84:	eeb1 7b47 	vneg.f64	d7, d7
 8002c88:	f241 0310 	movw	r3, #4112	; 0x1010
 8002c8c:	443b      	add	r3, r7
 8002c8e:	ed83 7b02 	vstr	d7, [r3, #8]
  t217.re = t299.re;
 8002c92:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002c96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002c9a:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002c9e:	e9c2 3400 	strd	r3, r4, [r2]
  t217.im = theta2;
 8002ca2:	f507 5280 	add.w	r2, r7, #4096	; 0x1000
 8002ca6:	4ba2      	ldr	r3, [pc, #648]	; (8002f30 <G_q+0x968>)
 8002ca8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002cac:	4439      	add	r1, r7
 8002cae:	440b      	add	r3, r1
 8002cb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cb4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t216.re = -t299.re;
 8002cb8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002cbc:	ed93 7b00 	vldr	d7, [r3]
 8002cc0:	eeb1 7b47 	vneg.f64	d7, d7
 8002cc4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002cc8:	ed83 7b00 	vstr	d7, [r3]
  t216.im = -theta2;
 8002ccc:	4b98      	ldr	r3, [pc, #608]	; (8002f30 <G_q+0x968>)
 8002cce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002cd2:	443a      	add	r2, r7
 8002cd4:	4413      	add	r3, r2
 8002cd6:	ed93 7b00 	vldr	d7, [r3]
 8002cda:	eeb1 7b47 	vneg.f64	d7, d7
 8002cde:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 8002ce2:	ed83 7b02 	vstr	d7, [r3, #8]
  t213.re = t299.re;
 8002ce6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002cea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002cee:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002cf2:	e9c2 3400 	strd	r3, r4, [r2]
  t213.im = theta2;
 8002cf6:	f507 627e 	add.w	r2, r7, #4064	; 0xfe0
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	; (8002f30 <G_q+0x968>)
 8002cfc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d00:	4439      	add	r1, r7
 8002d02:	440b      	add	r3, r1
 8002d04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d08:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t212.re = -t299.re;
 8002d0c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d10:	ed93 7b00 	vldr	d7, [r3]
 8002d14:	eeb1 7b47 	vneg.f64	d7, d7
 8002d18:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002d1c:	ed83 7b00 	vstr	d7, [r3]
  t212.im = -theta2;
 8002d20:	4b83      	ldr	r3, [pc, #524]	; (8002f30 <G_q+0x968>)
 8002d22:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d26:	443a      	add	r2, r7
 8002d28:	4413      	add	r3, r2
 8002d2a:	ed93 7b00 	vldr	d7, [r3]
 8002d2e:	eeb1 7b47 	vneg.f64	d7, d7
 8002d32:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8002d36:	ed83 7b02 	vstr	d7, [r3, #8]
  t205.re = t299.re;
 8002d3a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d42:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002d46:	e9c2 3400 	strd	r3, r4, [r2]
  t205.im = theta2;
 8002d4a:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8002d4e:	4b78      	ldr	r3, [pc, #480]	; (8002f30 <G_q+0x968>)
 8002d50:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002d54:	4439      	add	r1, r7
 8002d56:	440b      	add	r3, r1
 8002d58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d5c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t204.re = -t299.re;
 8002d60:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d64:	ed93 7b00 	vldr	d7, [r3]
 8002d68:	eeb1 7b47 	vneg.f64	d7, d7
 8002d6c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002d70:	ed83 7b00 	vstr	d7, [r3]
  t204.im = -theta2;
 8002d74:	4b6e      	ldr	r3, [pc, #440]	; (8002f30 <G_q+0x968>)
 8002d76:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002d7a:	443a      	add	r2, r7
 8002d7c:	4413      	add	r3, r2
 8002d7e:	ed93 7b00 	vldr	d7, [r3]
 8002d82:	eeb1 7b47 	vneg.f64	d7, d7
 8002d86:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8002d8a:	ed83 7b02 	vstr	d7, [r3, #8]
  t203.re = t299.re;
 8002d8e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002d92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d96:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002d9a:	e9c2 3400 	strd	r3, r4, [r2]
  t203.im = theta2;
 8002d9e:	f507 627a 	add.w	r2, r7, #4000	; 0xfa0
 8002da2:	4b63      	ldr	r3, [pc, #396]	; (8002f30 <G_q+0x968>)
 8002da4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002da8:	4439      	add	r1, r7
 8002daa:	440b      	add	r3, r1
 8002dac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002db0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t202.re = -t299.re;
 8002db4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002db8:	ed93 7b00 	vldr	d7, [r3]
 8002dbc:	eeb1 7b47 	vneg.f64	d7, d7
 8002dc0:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002dc4:	ed83 7b00 	vstr	d7, [r3]
  t202.im = -theta2;
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <G_q+0x968>)
 8002dca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002dce:	443a      	add	r2, r7
 8002dd0:	4413      	add	r3, r2
 8002dd2:	ed93 7b00 	vldr	d7, [r3]
 8002dd6:	eeb1 7b47 	vneg.f64	d7, d7
 8002dda:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8002dde:	ed83 7b02 	vstr	d7, [r3, #8]
  t199.re = t299.re;
 8002de2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002de6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002dea:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002dee:	e9c2 3400 	strd	r3, r4, [r2]
  t199.im = theta2;
 8002df2:	f507 6278 	add.w	r2, r7, #3968	; 0xf80
 8002df6:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <G_q+0x968>)
 8002df8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002dfc:	4439      	add	r1, r7
 8002dfe:	440b      	add	r3, r1
 8002e00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t198.re = -t299.re;
 8002e08:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e0c:	ed93 7b00 	vldr	d7, [r3]
 8002e10:	eeb1 7b47 	vneg.f64	d7, d7
 8002e14:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002e18:	ed83 7b00 	vstr	d7, [r3]
  t198.im = -theta2;
 8002e1c:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <G_q+0x968>)
 8002e1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e22:	443a      	add	r2, r7
 8002e24:	4413      	add	r3, r2
 8002e26:	ed93 7b00 	vldr	d7, [r3]
 8002e2a:	eeb1 7b47 	vneg.f64	d7, d7
 8002e2e:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8002e32:	ed83 7b02 	vstr	d7, [r3, #8]
  t193.re = t299.re;
 8002e36:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e3e:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002e42:	e9c2 3400 	strd	r3, r4, [r2]
  t193.im = theta2;
 8002e46:	f507 6276 	add.w	r2, r7, #3936	; 0xf60
 8002e4a:	4b39      	ldr	r3, [pc, #228]	; (8002f30 <G_q+0x968>)
 8002e4c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002e50:	4439      	add	r1, r7
 8002e52:	440b      	add	r3, r1
 8002e54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e58:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t192.re = -t299.re;
 8002e5c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e60:	ed93 7b00 	vldr	d7, [r3]
 8002e64:	eeb1 7b47 	vneg.f64	d7, d7
 8002e68:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002e6c:	ed83 7b00 	vstr	d7, [r3]
  t192.im = -theta2;
 8002e70:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <G_q+0x968>)
 8002e72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002e76:	443a      	add	r2, r7
 8002e78:	4413      	add	r3, r2
 8002e7a:	ed93 7b00 	vldr	d7, [r3]
 8002e7e:	eeb1 7b47 	vneg.f64	d7, d7
 8002e82:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 8002e86:	ed83 7b02 	vstr	d7, [r3, #8]
  t189.re = t299.re;
 8002e8a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002e8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e92:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002e96:	e9c2 3400 	strd	r3, r4, [r2]
  t189.im = theta2;
 8002e9a:	f507 6274 	add.w	r2, r7, #3904	; 0xf40
 8002e9e:	4b24      	ldr	r3, [pc, #144]	; (8002f30 <G_q+0x968>)
 8002ea0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ea4:	4439      	add	r1, r7
 8002ea6:	440b      	add	r3, r1
 8002ea8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002eac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t188.re = -t299.re;
 8002eb0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002eb4:	ed93 7b00 	vldr	d7, [r3]
 8002eb8:	eeb1 7b47 	vneg.f64	d7, d7
 8002ebc:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002ec0:	ed83 7b00 	vstr	d7, [r3]
  t188.im = -theta2;
 8002ec4:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <G_q+0x968>)
 8002ec6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002eca:	443a      	add	r2, r7
 8002ecc:	4413      	add	r3, r2
 8002ece:	ed93 7b00 	vldr	d7, [r3]
 8002ed2:	eeb1 7b47 	vneg.f64	d7, d7
 8002ed6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 8002eda:	ed83 7b02 	vstr	d7, [r3, #8]
  t181.re = t299.re;
 8002ede:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002ee2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002ee6:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002eea:	e9c2 3400 	strd	r3, r4, [r2]
  t181.im = theta2;
 8002eee:	f507 6272 	add.w	r2, r7, #3872	; 0xf20
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <G_q+0x968>)
 8002ef4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ef8:	4439      	add	r1, r7
 8002efa:	440b      	add	r3, r1
 8002efc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f00:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t180.re = -t299.re;
 8002f04:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f08:	ed93 7b00 	vldr	d7, [r3]
 8002f0c:	eeb1 7b47 	vneg.f64	d7, d7
 8002f10:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002f14:	ed83 7b00 	vstr	d7, [r3]
  t180.im = -theta2;
 8002f18:	4b05      	ldr	r3, [pc, #20]	; (8002f30 <G_q+0x968>)
 8002f1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f1e:	443a      	add	r2, r7
 8002f20:	4413      	add	r3, r2
 8002f22:	ed93 7b00 	vldr	d7, [r3]
 8002f26:	eeb1 7b47 	vneg.f64	d7, d7
 8002f2a:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 8002f2e:	e001      	b.n	8002f34 <G_q+0x96c>
 8002f30:	ffffec50 	.word	0xffffec50
 8002f34:	ed83 7b02 	vstr	d7, [r3, #8]
  t179.re = t299.re;
 8002f38:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f40:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002f44:	e9c2 3400 	strd	r3, r4, [r2]
  t179.im = theta2;
 8002f48:	f507 6270 	add.w	r2, r7, #3840	; 0xf00
 8002f4c:	4bc3      	ldr	r3, [pc, #780]	; (800325c <G_q+0xc94>)
 8002f4e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002f52:	4439      	add	r1, r7
 8002f54:	440b      	add	r3, r1
 8002f56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f5a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t178.re = -t299.re;
 8002f5e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f62:	ed93 7b00 	vldr	d7, [r3]
 8002f66:	eeb1 7b47 	vneg.f64	d7, d7
 8002f6a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002f6e:	ed83 7b00 	vstr	d7, [r3]
  t178.im = -theta2;
 8002f72:	4bba      	ldr	r3, [pc, #744]	; (800325c <G_q+0xc94>)
 8002f74:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002f78:	443a      	add	r2, r7
 8002f7a:	4413      	add	r3, r2
 8002f7c:	ed93 7b00 	vldr	d7, [r3]
 8002f80:	eeb1 7b47 	vneg.f64	d7, d7
 8002f84:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8002f88:	ed83 7b02 	vstr	d7, [r3, #8]
  t175.re = t299.re;
 8002f8c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002f90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002f94:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002f98:	e9c2 3400 	strd	r3, r4, [r2]
  t175.im = theta2;
 8002f9c:	f507 626e 	add.w	r2, r7, #3808	; 0xee0
 8002fa0:	4bae      	ldr	r3, [pc, #696]	; (800325c <G_q+0xc94>)
 8002fa2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002fa6:	4439      	add	r1, r7
 8002fa8:	440b      	add	r3, r1
 8002faa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fae:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t174.re = -t299.re;
 8002fb2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fb6:	ed93 7b00 	vldr	d7, [r3]
 8002fba:	eeb1 7b47 	vneg.f64	d7, d7
 8002fbe:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002fc2:	ed83 7b00 	vstr	d7, [r3]
  t174.im = -theta2;
 8002fc6:	4ba5      	ldr	r3, [pc, #660]	; (800325c <G_q+0xc94>)
 8002fc8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8002fcc:	443a      	add	r2, r7
 8002fce:	4413      	add	r3, r2
 8002fd0:	ed93 7b00 	vldr	d7, [r3]
 8002fd4:	eeb1 7b47 	vneg.f64	d7, d7
 8002fd8:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8002fdc:	ed83 7b02 	vstr	d7, [r3, #8]
  t171.re = t299.re;
 8002fe0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8002fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002fe8:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002fec:	e9c2 3400 	strd	r3, r4, [r2]
  t171.im = theta2;
 8002ff0:	f507 626c 	add.w	r2, r7, #3776	; 0xec0
 8002ff4:	4b99      	ldr	r3, [pc, #612]	; (800325c <G_q+0xc94>)
 8002ff6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8002ffa:	4439      	add	r1, r7
 8002ffc:	440b      	add	r3, r1
 8002ffe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003002:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t170.re = -t299.re;
 8003006:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800300a:	ed93 7b00 	vldr	d7, [r3]
 800300e:	eeb1 7b47 	vneg.f64	d7, d7
 8003012:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003016:	ed83 7b00 	vstr	d7, [r3]
  t170.im = -theta2;
 800301a:	4b90      	ldr	r3, [pc, #576]	; (800325c <G_q+0xc94>)
 800301c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003020:	443a      	add	r2, r7
 8003022:	4413      	add	r3, r2
 8003024:	ed93 7b00 	vldr	d7, [r3]
 8003028:	eeb1 7b47 	vneg.f64	d7, d7
 800302c:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8003030:	ed83 7b02 	vstr	d7, [r3, #8]
  t167.re = t299.re;
 8003034:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003038:	e9d3 3400 	ldrd	r3, r4, [r3]
 800303c:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8003040:	e9c2 3400 	strd	r3, r4, [r2]
  t167.im = theta2;
 8003044:	f507 626a 	add.w	r2, r7, #3744	; 0xea0
 8003048:	4b84      	ldr	r3, [pc, #528]	; (800325c <G_q+0xc94>)
 800304a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800304e:	4439      	add	r1, r7
 8003050:	440b      	add	r3, r1
 8003052:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003056:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t166.re = -t299.re;
 800305a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800305e:	ed93 7b00 	vldr	d7, [r3]
 8003062:	eeb1 7b47 	vneg.f64	d7, d7
 8003066:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800306a:	ed83 7b00 	vstr	d7, [r3]
  t166.im = -theta2;
 800306e:	4b7b      	ldr	r3, [pc, #492]	; (800325c <G_q+0xc94>)
 8003070:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003074:	443a      	add	r2, r7
 8003076:	4413      	add	r3, r2
 8003078:	ed93 7b00 	vldr	d7, [r3]
 800307c:	eeb1 7b47 	vneg.f64	d7, d7
 8003080:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8003084:	ed83 7b02 	vstr	d7, [r3, #8]
  t161.re = t299.re;
 8003088:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800308c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003090:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 8003094:	e9c2 3400 	strd	r3, r4, [r2]
  t161.im = theta2;
 8003098:	f507 6268 	add.w	r2, r7, #3712	; 0xe80
 800309c:	4b6f      	ldr	r3, [pc, #444]	; (800325c <G_q+0xc94>)
 800309e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80030a2:	4439      	add	r1, r7
 80030a4:	440b      	add	r3, r1
 80030a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t160.re = -t299.re;
 80030ae:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030b2:	ed93 7b00 	vldr	d7, [r3]
 80030b6:	eeb1 7b47 	vneg.f64	d7, d7
 80030ba:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80030be:	ed83 7b00 	vstr	d7, [r3]
  t160.im = -theta2;
 80030c2:	4b66      	ldr	r3, [pc, #408]	; (800325c <G_q+0xc94>)
 80030c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80030c8:	443a      	add	r2, r7
 80030ca:	4413      	add	r3, r2
 80030cc:	ed93 7b00 	vldr	d7, [r3]
 80030d0:	eeb1 7b47 	vneg.f64	d7, d7
 80030d4:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 80030d8:	ed83 7b02 	vstr	d7, [r3, #8]
  t157.re = t299.re;
 80030dc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80030e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030e4:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 80030e8:	e9c2 3400 	strd	r3, r4, [r2]
  t157.im = theta2;
 80030ec:	f507 6266 	add.w	r2, r7, #3680	; 0xe60
 80030f0:	4b5a      	ldr	r3, [pc, #360]	; (800325c <G_q+0xc94>)
 80030f2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80030f6:	4439      	add	r1, r7
 80030f8:	440b      	add	r3, r1
 80030fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80030fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t156.re = -t299.re;
 8003102:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003106:	ed93 7b00 	vldr	d7, [r3]
 800310a:	eeb1 7b47 	vneg.f64	d7, d7
 800310e:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8003112:	ed83 7b00 	vstr	d7, [r3]
  t156.im = -theta2;
 8003116:	4b51      	ldr	r3, [pc, #324]	; (800325c <G_q+0xc94>)
 8003118:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800311c:	443a      	add	r2, r7
 800311e:	4413      	add	r3, r2
 8003120:	ed93 7b00 	vldr	d7, [r3]
 8003124:	eeb1 7b47 	vneg.f64	d7, d7
 8003128:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800312c:	ed83 7b02 	vstr	d7, [r3, #8]
  t149.re = t299.re;
 8003130:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003134:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003138:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 800313c:	e9c2 3400 	strd	r3, r4, [r2]
  t149.im = theta2;
 8003140:	f507 6264 	add.w	r2, r7, #3648	; 0xe40
 8003144:	4b45      	ldr	r3, [pc, #276]	; (800325c <G_q+0xc94>)
 8003146:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800314a:	4439      	add	r1, r7
 800314c:	440b      	add	r3, r1
 800314e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003152:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t148.re = -t299.re;
 8003156:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800315a:	ed93 7b00 	vldr	d7, [r3]
 800315e:	eeb1 7b47 	vneg.f64	d7, d7
 8003162:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8003166:	ed83 7b00 	vstr	d7, [r3]
  t148.im = -theta2;
 800316a:	4b3c      	ldr	r3, [pc, #240]	; (800325c <G_q+0xc94>)
 800316c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003170:	443a      	add	r2, r7
 8003172:	4413      	add	r3, r2
 8003174:	ed93 7b00 	vldr	d7, [r3]
 8003178:	eeb1 7b47 	vneg.f64	d7, d7
 800317c:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8003180:	ed83 7b02 	vstr	d7, [r3, #8]
  t147.re = t299.re;
 8003184:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003188:	e9d3 3400 	ldrd	r3, r4, [r3]
 800318c:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8003190:	e9c2 3400 	strd	r3, r4, [r2]
  t147.im = theta2;
 8003194:	f507 6262 	add.w	r2, r7, #3616	; 0xe20
 8003198:	4b30      	ldr	r3, [pc, #192]	; (800325c <G_q+0xc94>)
 800319a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800319e:	4439      	add	r1, r7
 80031a0:	440b      	add	r3, r1
 80031a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t146.re = -t299.re;
 80031aa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031ae:	ed93 7b00 	vldr	d7, [r3]
 80031b2:	eeb1 7b47 	vneg.f64	d7, d7
 80031b6:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80031ba:	ed83 7b00 	vstr	d7, [r3]
  t146.im = -theta2;
 80031be:	4b27      	ldr	r3, [pc, #156]	; (800325c <G_q+0xc94>)
 80031c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80031c4:	443a      	add	r2, r7
 80031c6:	4413      	add	r3, r2
 80031c8:	ed93 7b00 	vldr	d7, [r3]
 80031cc:	eeb1 7b47 	vneg.f64	d7, d7
 80031d0:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 80031d4:	ed83 7b02 	vstr	d7, [r3, #8]
  t143.re = t299.re;
 80031d8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80031dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031e0:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 80031e4:	e9c2 3400 	strd	r3, r4, [r2]
  t143.im = theta2;
 80031e8:	f507 6260 	add.w	r2, r7, #3584	; 0xe00
 80031ec:	4b1b      	ldr	r3, [pc, #108]	; (800325c <G_q+0xc94>)
 80031ee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80031f2:	4439      	add	r1, r7
 80031f4:	440b      	add	r3, r1
 80031f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80031fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t142.re = -t299.re;
 80031fe:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003202:	ed93 7b00 	vldr	d7, [r3]
 8003206:	eeb1 7b47 	vneg.f64	d7, d7
 800320a:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800320e:	ed83 7b00 	vstr	d7, [r3]
  t142.im = -theta2;
 8003212:	4b12      	ldr	r3, [pc, #72]	; (800325c <G_q+0xc94>)
 8003214:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003218:	443a      	add	r2, r7
 800321a:	4413      	add	r3, r2
 800321c:	ed93 7b00 	vldr	d7, [r3]
 8003220:	eeb1 7b47 	vneg.f64	d7, d7
 8003224:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8003228:	ed83 7b02 	vstr	d7, [r3, #8]
  t139.re = t299.re;
 800322c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003230:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003234:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003238:	e9c2 3400 	strd	r3, r4, [r2]
  t139.im = theta2;
 800323c:	f507 625e 	add.w	r2, r7, #3552	; 0xde0
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <G_q+0xc94>)
 8003242:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003246:	4439      	add	r1, r7
 8003248:	440b      	add	r3, r1
 800324a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800324e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t138.re = -t299.re;
 8003252:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003256:	ed93 7b00 	vldr	d7, [r3]
 800325a:	e001      	b.n	8003260 <G_q+0xc98>
 800325c:	ffffec50 	.word	0xffffec50
 8003260:	eeb1 7b47 	vneg.f64	d7, d7
 8003264:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8003268:	ed83 7b00 	vstr	d7, [r3]
  t138.im = -theta2;
 800326c:	4bc4      	ldr	r3, [pc, #784]	; (8003580 <G_q+0xfb8>)
 800326e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003272:	443a      	add	r2, r7
 8003274:	4413      	add	r3, r2
 8003276:	ed93 7b00 	vldr	d7, [r3]
 800327a:	eeb1 7b47 	vneg.f64	d7, d7
 800327e:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8003282:	ed83 7b02 	vstr	d7, [r3, #8]
  t133.re = t299.re;
 8003286:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800328a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800328e:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 8003292:	e9c2 3400 	strd	r3, r4, [r2]
  t133.im = theta2;
 8003296:	f507 625c 	add.w	r2, r7, #3520	; 0xdc0
 800329a:	4bb9      	ldr	r3, [pc, #740]	; (8003580 <G_q+0xfb8>)
 800329c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80032a0:	4439      	add	r1, r7
 80032a2:	440b      	add	r3, r1
 80032a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t132.re = -t299.re;
 80032ac:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032b0:	ed93 7b00 	vldr	d7, [r3]
 80032b4:	eeb1 7b47 	vneg.f64	d7, d7
 80032b8:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80032bc:	ed83 7b00 	vstr	d7, [r3]
  t132.im = -theta2;
 80032c0:	4baf      	ldr	r3, [pc, #700]	; (8003580 <G_q+0xfb8>)
 80032c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80032c6:	443a      	add	r2, r7
 80032c8:	4413      	add	r3, r2
 80032ca:	ed93 7b00 	vldr	d7, [r3]
 80032ce:	eeb1 7b47 	vneg.f64	d7, d7
 80032d2:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 80032d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t127.re = t299.re;
 80032da:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80032de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032e2:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 80032e6:	e9c2 3400 	strd	r3, r4, [r2]
  t127.im = theta2;
 80032ea:	f507 625a 	add.w	r2, r7, #3488	; 0xda0
 80032ee:	4ba4      	ldr	r3, [pc, #656]	; (8003580 <G_q+0xfb8>)
 80032f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80032f4:	4439      	add	r1, r7
 80032f6:	440b      	add	r3, r1
 80032f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80032fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t126.re = -t299.re;
 8003300:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003304:	ed93 7b00 	vldr	d7, [r3]
 8003308:	eeb1 7b47 	vneg.f64	d7, d7
 800330c:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8003310:	ed83 7b00 	vstr	d7, [r3]
  t126.im = -theta2;
 8003314:	4b9a      	ldr	r3, [pc, #616]	; (8003580 <G_q+0xfb8>)
 8003316:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800331a:	443a      	add	r2, r7
 800331c:	4413      	add	r3, r2
 800331e:	ed93 7b00 	vldr	d7, [r3]
 8003322:	eeb1 7b47 	vneg.f64	d7, d7
 8003326:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800332a:	ed83 7b02 	vstr	d7, [r3, #8]
  t119.re = t299.re;
 800332e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003332:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003336:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 800333a:	e9c2 3400 	strd	r3, r4, [r2]
  t119.im = theta2;
 800333e:	f507 6258 	add.w	r2, r7, #3456	; 0xd80
 8003342:	4b8f      	ldr	r3, [pc, #572]	; (8003580 <G_q+0xfb8>)
 8003344:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003348:	4439      	add	r1, r7
 800334a:	440b      	add	r3, r1
 800334c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003350:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t118.re = -t299.re;
 8003354:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003358:	ed93 7b00 	vldr	d7, [r3]
 800335c:	eeb1 7b47 	vneg.f64	d7, d7
 8003360:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8003364:	ed83 7b00 	vstr	d7, [r3]
  t118.im = -theta2;
 8003368:	4b85      	ldr	r3, [pc, #532]	; (8003580 <G_q+0xfb8>)
 800336a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800336e:	443a      	add	r2, r7
 8003370:	4413      	add	r3, r2
 8003372:	ed93 7b00 	vldr	d7, [r3]
 8003376:	eeb1 7b47 	vneg.f64	d7, d7
 800337a:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800337e:	ed83 7b02 	vstr	d7, [r3, #8]
  t117.re = t299.re;
 8003382:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003386:	e9d3 3400 	ldrd	r3, r4, [r3]
 800338a:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 800338e:	e9c2 3400 	strd	r3, r4, [r2]
  t117.im = theta2;
 8003392:	f507 6256 	add.w	r2, r7, #3424	; 0xd60
 8003396:	4b7a      	ldr	r3, [pc, #488]	; (8003580 <G_q+0xfb8>)
 8003398:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800339c:	4439      	add	r1, r7
 800339e:	440b      	add	r3, r1
 80033a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t116.re = -t299.re;
 80033a8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033ac:	ed93 7b00 	vldr	d7, [r3]
 80033b0:	eeb1 7b47 	vneg.f64	d7, d7
 80033b4:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80033b8:	ed83 7b00 	vstr	d7, [r3]
  t116.im = -theta2;
 80033bc:	4b70      	ldr	r3, [pc, #448]	; (8003580 <G_q+0xfb8>)
 80033be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80033c2:	443a      	add	r2, r7
 80033c4:	4413      	add	r3, r2
 80033c6:	ed93 7b00 	vldr	d7, [r3]
 80033ca:	eeb1 7b47 	vneg.f64	d7, d7
 80033ce:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 80033d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t111.re = t299.re;
 80033d6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80033da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033de:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 80033e2:	e9c2 3400 	strd	r3, r4, [r2]
  t111.im = theta2;
 80033e6:	f507 6254 	add.w	r2, r7, #3392	; 0xd40
 80033ea:	4b65      	ldr	r3, [pc, #404]	; (8003580 <G_q+0xfb8>)
 80033ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80033f0:	4439      	add	r1, r7
 80033f2:	440b      	add	r3, r1
 80033f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80033f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t110.re = -t299.re;
 80033fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003400:	ed93 7b00 	vldr	d7, [r3]
 8003404:	eeb1 7b47 	vneg.f64	d7, d7
 8003408:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800340c:	ed83 7b00 	vstr	d7, [r3]
  t110.im = -theta2;
 8003410:	4b5b      	ldr	r3, [pc, #364]	; (8003580 <G_q+0xfb8>)
 8003412:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003416:	443a      	add	r2, r7
 8003418:	4413      	add	r3, r2
 800341a:	ed93 7b00 	vldr	d7, [r3]
 800341e:	eeb1 7b47 	vneg.f64	d7, d7
 8003422:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8003426:	ed83 7b02 	vstr	d7, [r3, #8]
  t105.re = t299.re;
 800342a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800342e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003432:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 8003436:	e9c2 3400 	strd	r3, r4, [r2]
  t105.im = theta2;
 800343a:	f507 6252 	add.w	r2, r7, #3360	; 0xd20
 800343e:	4b50      	ldr	r3, [pc, #320]	; (8003580 <G_q+0xfb8>)
 8003440:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003444:	4439      	add	r1, r7
 8003446:	440b      	add	r3, r1
 8003448:	e9d3 3400 	ldrd	r3, r4, [r3]
 800344c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t104.re = -t299.re;
 8003450:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003454:	ed93 7b00 	vldr	d7, [r3]
 8003458:	eeb1 7b47 	vneg.f64	d7, d7
 800345c:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8003460:	ed83 7b00 	vstr	d7, [r3]
  t104.im = -theta2;
 8003464:	4b46      	ldr	r3, [pc, #280]	; (8003580 <G_q+0xfb8>)
 8003466:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800346a:	443a      	add	r2, r7
 800346c:	4413      	add	r3, r2
 800346e:	ed93 7b00 	vldr	d7, [r3]
 8003472:	eeb1 7b47 	vneg.f64	d7, d7
 8003476:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800347a:	ed83 7b02 	vstr	d7, [r3, #8]
  t97.re = t299.re;
 800347e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003482:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003486:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 800348a:	e9c2 3400 	strd	r3, r4, [r2]
  t97.im = theta2;
 800348e:	f507 6250 	add.w	r2, r7, #3328	; 0xd00
 8003492:	4b3b      	ldr	r3, [pc, #236]	; (8003580 <G_q+0xfb8>)
 8003494:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003498:	4439      	add	r1, r7
 800349a:	440b      	add	r3, r1
 800349c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t96.re = -t299.re;
 80034a4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034a8:	ed93 7b00 	vldr	d7, [r3]
 80034ac:	eeb1 7b47 	vneg.f64	d7, d7
 80034b0:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80034b4:	ed83 7b00 	vstr	d7, [r3]
  t96.im = -theta2;
 80034b8:	4b31      	ldr	r3, [pc, #196]	; (8003580 <G_q+0xfb8>)
 80034ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80034be:	443a      	add	r2, r7
 80034c0:	4413      	add	r3, r2
 80034c2:	ed93 7b00 	vldr	d7, [r3]
 80034c6:	eeb1 7b47 	vneg.f64	d7, d7
 80034ca:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 80034ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t95.re = t299.re;
 80034d2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034da:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80034de:	e9c2 3400 	strd	r3, r4, [r2]
  t95.im = theta2;
 80034e2:	f507 624e 	add.w	r2, r7, #3296	; 0xce0
 80034e6:	4b26      	ldr	r3, [pc, #152]	; (8003580 <G_q+0xfb8>)
 80034e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80034ec:	4439      	add	r1, r7
 80034ee:	440b      	add	r3, r1
 80034f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80034f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t94.re = -t299.re;
 80034f8:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80034fc:	ed93 7b00 	vldr	d7, [r3]
 8003500:	eeb1 7b47 	vneg.f64	d7, d7
 8003504:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003508:	ed83 7b00 	vstr	d7, [r3]
  t94.im = -theta2;
 800350c:	4b1c      	ldr	r3, [pc, #112]	; (8003580 <G_q+0xfb8>)
 800350e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003512:	443a      	add	r2, r7
 8003514:	4413      	add	r3, r2
 8003516:	ed93 7b00 	vldr	d7, [r3]
 800351a:	eeb1 7b47 	vneg.f64	d7, d7
 800351e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8003522:	ed83 7b02 	vstr	d7, [r3, #8]
  t83.re = t299.re;
 8003526:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800352a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800352e:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 8003532:	e9c2 3400 	strd	r3, r4, [r2]
  t83.im = theta2;
 8003536:	f507 624c 	add.w	r2, r7, #3264	; 0xcc0
 800353a:	4b11      	ldr	r3, [pc, #68]	; (8003580 <G_q+0xfb8>)
 800353c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003540:	4439      	add	r1, r7
 8003542:	440b      	add	r3, r1
 8003544:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003548:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t82.re = -t299.re;
 800354c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003550:	ed93 7b00 	vldr	d7, [r3]
 8003554:	eeb1 7b47 	vneg.f64	d7, d7
 8003558:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800355c:	ed83 7b00 	vstr	d7, [r3]
  t82.im = -theta2;
 8003560:	4b07      	ldr	r3, [pc, #28]	; (8003580 <G_q+0xfb8>)
 8003562:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003566:	443a      	add	r2, r7
 8003568:	4413      	add	r3, r2
 800356a:	ed93 7b00 	vldr	d7, [r3]
 800356e:	eeb1 7b47 	vneg.f64	d7, d7
 8003572:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8003576:	ed83 7b02 	vstr	d7, [r3, #8]
  t79.re = t299.re;
 800357a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800357e:	e001      	b.n	8003584 <G_q+0xfbc>
 8003580:	ffffec50 	.word	0xffffec50
 8003584:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003588:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 800358c:	e9c2 3400 	strd	r3, r4, [r2]
  t79.im = theta2;
 8003590:	f507 624a 	add.w	r2, r7, #3232	; 0xca0
 8003594:	4bc3      	ldr	r3, [pc, #780]	; (80038a4 <G_q+0x12dc>)
 8003596:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800359a:	4439      	add	r1, r7
 800359c:	440b      	add	r3, r1
 800359e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t78.re = -t299.re;
 80035a6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035aa:	ed93 7b00 	vldr	d7, [r3]
 80035ae:	eeb1 7b47 	vneg.f64	d7, d7
 80035b2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80035b6:	ed83 7b00 	vstr	d7, [r3]
  t78.im = -theta2;
 80035ba:	4bba      	ldr	r3, [pc, #744]	; (80038a4 <G_q+0x12dc>)
 80035bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80035c0:	443a      	add	r2, r7
 80035c2:	4413      	add	r3, r2
 80035c4:	ed93 7b00 	vldr	d7, [r3]
 80035c8:	eeb1 7b47 	vneg.f64	d7, d7
 80035cc:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80035d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t77.re = t299.re;
 80035d4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035dc:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 80035e0:	e9c2 3400 	strd	r3, r4, [r2]
  t77.im = theta2;
 80035e4:	f507 6248 	add.w	r2, r7, #3200	; 0xc80
 80035e8:	4bae      	ldr	r3, [pc, #696]	; (80038a4 <G_q+0x12dc>)
 80035ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80035ee:	4439      	add	r1, r7
 80035f0:	440b      	add	r3, r1
 80035f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80035f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t76.re = -t299.re;
 80035fa:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80035fe:	ed93 7b00 	vldr	d7, [r3]
 8003602:	eeb1 7b47 	vneg.f64	d7, d7
 8003606:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 800360a:	ed83 7b00 	vstr	d7, [r3]
  t76.im = -theta2;
 800360e:	4ba5      	ldr	r3, [pc, #660]	; (80038a4 <G_q+0x12dc>)
 8003610:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003614:	443a      	add	r2, r7
 8003616:	4413      	add	r3, r2
 8003618:	ed93 7b00 	vldr	d7, [r3]
 800361c:	eeb1 7b47 	vneg.f64	d7, d7
 8003620:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8003624:	ed83 7b02 	vstr	d7, [r3, #8]
  t71.re = t299.re;
 8003628:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800362c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003630:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 8003634:	e9c2 3400 	strd	r3, r4, [r2]
  t71.im = theta2;
 8003638:	f507 6246 	add.w	r2, r7, #3168	; 0xc60
 800363c:	4b99      	ldr	r3, [pc, #612]	; (80038a4 <G_q+0x12dc>)
 800363e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003642:	4439      	add	r1, r7
 8003644:	440b      	add	r3, r1
 8003646:	e9d3 3400 	ldrd	r3, r4, [r3]
 800364a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t70.re = -t299.re;
 800364e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003652:	ed93 7b00 	vldr	d7, [r3]
 8003656:	eeb1 7b47 	vneg.f64	d7, d7
 800365a:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 800365e:	ed83 7b00 	vstr	d7, [r3]
  t70.im = -theta2;
 8003662:	4b90      	ldr	r3, [pc, #576]	; (80038a4 <G_q+0x12dc>)
 8003664:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003668:	443a      	add	r2, r7
 800366a:	4413      	add	r3, r2
 800366c:	ed93 7b00 	vldr	d7, [r3]
 8003670:	eeb1 7b47 	vneg.f64	d7, d7
 8003674:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8003678:	ed83 7b02 	vstr	d7, [r3, #8]
  t67.re = t299.re;
 800367c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003680:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003684:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8003688:	e9c2 3400 	strd	r3, r4, [r2]
  t67.im = theta2;
 800368c:	f507 6244 	add.w	r2, r7, #3136	; 0xc40
 8003690:	4b84      	ldr	r3, [pc, #528]	; (80038a4 <G_q+0x12dc>)
 8003692:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003696:	4439      	add	r1, r7
 8003698:	440b      	add	r3, r1
 800369a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800369e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t66.re = -t299.re;
 80036a2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036a6:	ed93 7b00 	vldr	d7, [r3]
 80036aa:	eeb1 7b47 	vneg.f64	d7, d7
 80036ae:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80036b2:	ed83 7b00 	vstr	d7, [r3]
  t66.im = -theta2;
 80036b6:	4b7b      	ldr	r3, [pc, #492]	; (80038a4 <G_q+0x12dc>)
 80036b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80036bc:	443a      	add	r2, r7
 80036be:	4413      	add	r3, r2
 80036c0:	ed93 7b00 	vldr	d7, [r3]
 80036c4:	eeb1 7b47 	vneg.f64	d7, d7
 80036c8:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 80036cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t63.re = t299.re;
 80036d0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036d8:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 80036dc:	e9c2 3400 	strd	r3, r4, [r2]
  t63.im = theta2;
 80036e0:	f507 6242 	add.w	r2, r7, #3104	; 0xc20
 80036e4:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <G_q+0x12dc>)
 80036e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80036ea:	4439      	add	r1, r7
 80036ec:	440b      	add	r3, r1
 80036ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80036f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t62.re = -t299.re;
 80036f6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80036fa:	ed93 7b00 	vldr	d7, [r3]
 80036fe:	eeb1 7b47 	vneg.f64	d7, d7
 8003702:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003706:	ed83 7b00 	vstr	d7, [r3]
  t62.im = -theta2;
 800370a:	4b66      	ldr	r3, [pc, #408]	; (80038a4 <G_q+0x12dc>)
 800370c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003710:	443a      	add	r2, r7
 8003712:	4413      	add	r3, r2
 8003714:	ed93 7b00 	vldr	d7, [r3]
 8003718:	eeb1 7b47 	vneg.f64	d7, d7
 800371c:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8003720:	ed83 7b02 	vstr	d7, [r3, #8]
  t61.re = t299.re;
 8003724:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003728:	e9d3 3400 	ldrd	r3, r4, [r3]
 800372c:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003730:	e9c2 3400 	strd	r3, r4, [r2]
  t61.im = theta2;
 8003734:	f507 6240 	add.w	r2, r7, #3072	; 0xc00
 8003738:	4b5a      	ldr	r3, [pc, #360]	; (80038a4 <G_q+0x12dc>)
 800373a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800373e:	4439      	add	r1, r7
 8003740:	440b      	add	r3, r1
 8003742:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003746:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t60.re = -t299.re;
 800374a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800374e:	ed93 7b00 	vldr	d7, [r3]
 8003752:	eeb1 7b47 	vneg.f64	d7, d7
 8003756:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 800375a:	ed83 7b00 	vstr	d7, [r3]
  t60.im = -theta2;
 800375e:	4b51      	ldr	r3, [pc, #324]	; (80038a4 <G_q+0x12dc>)
 8003760:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003764:	443a      	add	r2, r7
 8003766:	4413      	add	r3, r2
 8003768:	ed93 7b00 	vldr	d7, [r3]
 800376c:	eeb1 7b47 	vneg.f64	d7, d7
 8003770:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8003774:	ed83 7b02 	vstr	d7, [r3, #8]
  t57.re = t299.re;
 8003778:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800377c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003780:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 8003784:	e9c2 3400 	strd	r3, r4, [r2]
  t57.im = theta2;
 8003788:	f507 623e 	add.w	r2, r7, #3040	; 0xbe0
 800378c:	4b45      	ldr	r3, [pc, #276]	; (80038a4 <G_q+0x12dc>)
 800378e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003792:	4439      	add	r1, r7
 8003794:	440b      	add	r3, r1
 8003796:	e9d3 3400 	ldrd	r3, r4, [r3]
 800379a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t56.re = -t299.re;
 800379e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037a2:	ed93 7b00 	vldr	d7, [r3]
 80037a6:	eeb1 7b47 	vneg.f64	d7, d7
 80037aa:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80037ae:	ed83 7b00 	vstr	d7, [r3]
  t56.im = -theta2;
 80037b2:	4b3c      	ldr	r3, [pc, #240]	; (80038a4 <G_q+0x12dc>)
 80037b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80037b8:	443a      	add	r2, r7
 80037ba:	4413      	add	r3, r2
 80037bc:	ed93 7b00 	vldr	d7, [r3]
 80037c0:	eeb1 7b47 	vneg.f64	d7, d7
 80037c4:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80037c8:	ed83 7b02 	vstr	d7, [r3, #8]
  t50.re = t299.re;
 80037cc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037d4:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 80037d8:	e9c2 3400 	strd	r3, r4, [r2]
  t50.im = theta2;
 80037dc:	f507 623c 	add.w	r2, r7, #3008	; 0xbc0
 80037e0:	4b30      	ldr	r3, [pc, #192]	; (80038a4 <G_q+0x12dc>)
 80037e2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80037e6:	4439      	add	r1, r7
 80037e8:	440b      	add	r3, r1
 80037ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80037ee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t49.re = -t299.re;
 80037f2:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80037f6:	ed93 7b00 	vldr	d7, [r3]
 80037fa:	eeb1 7b47 	vneg.f64	d7, d7
 80037fe:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8003802:	ed83 7b00 	vstr	d7, [r3]
  t49.im = -theta2;
 8003806:	4b27      	ldr	r3, [pc, #156]	; (80038a4 <G_q+0x12dc>)
 8003808:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800380c:	443a      	add	r2, r7
 800380e:	4413      	add	r3, r2
 8003810:	ed93 7b00 	vldr	d7, [r3]
 8003814:	eeb1 7b47 	vneg.f64	d7, d7
 8003818:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800381c:	ed83 7b02 	vstr	d7, [r3, #8]
  t46.re = t299.re;
 8003820:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003824:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003828:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 800382c:	e9c2 3400 	strd	r3, r4, [r2]
  t46.im = theta2;
 8003830:	f507 623a 	add.w	r2, r7, #2976	; 0xba0
 8003834:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <G_q+0x12dc>)
 8003836:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800383a:	4439      	add	r1, r7
 800383c:	440b      	add	r3, r1
 800383e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003842:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t45.re = -t299.re;
 8003846:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800384a:	ed93 7b00 	vldr	d7, [r3]
 800384e:	eeb1 7b47 	vneg.f64	d7, d7
 8003852:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8003856:	ed83 7b00 	vstr	d7, [r3]
  t45.im = -theta2;
 800385a:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <G_q+0x12dc>)
 800385c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003860:	443a      	add	r2, r7
 8003862:	4413      	add	r3, r2
 8003864:	ed93 7b00 	vldr	d7, [r3]
 8003868:	eeb1 7b47 	vneg.f64	d7, d7
 800386c:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8003870:	ed83 7b02 	vstr	d7, [r3, #8]
  t44.re = t299.re;
 8003874:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003878:	e9d3 3400 	ldrd	r3, r4, [r3]
 800387c:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 8003880:	e9c2 3400 	strd	r3, r4, [r2]
  t44.im = theta2;
 8003884:	f507 6238 	add.w	r2, r7, #2944	; 0xb80
 8003888:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <G_q+0x12dc>)
 800388a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800388e:	4439      	add	r1, r7
 8003890:	440b      	add	r3, r1
 8003892:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003896:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t43.re = -t299.re;
 800389a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800389e:	ed93 7b00 	vldr	d7, [r3]
 80038a2:	e001      	b.n	80038a8 <G_q+0x12e0>
 80038a4:	ffffec50 	.word	0xffffec50
 80038a8:	eeb1 7b47 	vneg.f64	d7, d7
 80038ac:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80038b0:	ed83 7b00 	vstr	d7, [r3]
  t43.im = -theta2;
 80038b4:	4bc6      	ldr	r3, [pc, #792]	; (8003bd0 <G_q+0x1608>)
 80038b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80038ba:	443a      	add	r2, r7
 80038bc:	4413      	add	r3, r2
 80038be:	ed93 7b00 	vldr	d7, [r3]
 80038c2:	eeb1 7b47 	vneg.f64	d7, d7
 80038c6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80038ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t40.re = t299.re;
 80038ce:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038d6:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 80038da:	e9c2 3400 	strd	r3, r4, [r2]
  t40.im = theta2;
 80038de:	f507 6236 	add.w	r2, r7, #2912	; 0xb60
 80038e2:	4bbb      	ldr	r3, [pc, #748]	; (8003bd0 <G_q+0x1608>)
 80038e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80038e8:	4439      	add	r1, r7
 80038ea:	440b      	add	r3, r1
 80038ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80038f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t39.re = -t299.re;
 80038f4:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80038f8:	ed93 7b00 	vldr	d7, [r3]
 80038fc:	eeb1 7b47 	vneg.f64	d7, d7
 8003900:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8003904:	ed83 7b00 	vstr	d7, [r3]
  t39.im = -theta2;
 8003908:	4bb1      	ldr	r3, [pc, #708]	; (8003bd0 <G_q+0x1608>)
 800390a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800390e:	443a      	add	r2, r7
 8003910:	4413      	add	r3, r2
 8003912:	ed93 7b00 	vldr	d7, [r3]
 8003916:	eeb1 7b47 	vneg.f64	d7, d7
 800391a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800391e:	ed83 7b02 	vstr	d7, [r3, #8]
  t34.re = t299.re;
 8003922:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003926:	e9d3 3400 	ldrd	r3, r4, [r3]
 800392a:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 800392e:	e9c2 3400 	strd	r3, r4, [r2]
  t34.im = theta2;
 8003932:	f507 6234 	add.w	r2, r7, #2880	; 0xb40
 8003936:	4ba6      	ldr	r3, [pc, #664]	; (8003bd0 <G_q+0x1608>)
 8003938:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800393c:	4439      	add	r1, r7
 800393e:	440b      	add	r3, r1
 8003940:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003944:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t33.re = -t299.re;
 8003948:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800394c:	ed93 7b00 	vldr	d7, [r3]
 8003950:	eeb1 7b47 	vneg.f64	d7, d7
 8003954:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003958:	ed83 7b00 	vstr	d7, [r3]
  t33.im = -theta2;
 800395c:	4b9c      	ldr	r3, [pc, #624]	; (8003bd0 <G_q+0x1608>)
 800395e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003962:	443a      	add	r2, r7
 8003964:	4413      	add	r3, r2
 8003966:	ed93 7b00 	vldr	d7, [r3]
 800396a:	eeb1 7b47 	vneg.f64	d7, d7
 800396e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8003972:	ed83 7b02 	vstr	d7, [r3, #8]
  t30.re = t299.re;
 8003976:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800397a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800397e:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 8003982:	e9c2 3400 	strd	r3, r4, [r2]
  t30.im = theta2;
 8003986:	f507 6232 	add.w	r2, r7, #2848	; 0xb20
 800398a:	4b91      	ldr	r3, [pc, #580]	; (8003bd0 <G_q+0x1608>)
 800398c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003990:	4439      	add	r1, r7
 8003992:	440b      	add	r3, r1
 8003994:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003998:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t29.re = -t299.re;
 800399c:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039a0:	ed93 7b00 	vldr	d7, [r3]
 80039a4:	eeb1 7b47 	vneg.f64	d7, d7
 80039a8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80039ac:	ed83 7b00 	vstr	d7, [r3]
  t29.im = -theta2;
 80039b0:	4b87      	ldr	r3, [pc, #540]	; (8003bd0 <G_q+0x1608>)
 80039b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80039b6:	443a      	add	r2, r7
 80039b8:	4413      	add	r3, r2
 80039ba:	ed93 7b00 	vldr	d7, [r3]
 80039be:	eeb1 7b47 	vneg.f64	d7, d7
 80039c2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80039c6:	ed83 7b02 	vstr	d7, [r3, #8]
  t26.re = t299.re;
 80039ca:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039ce:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039d2:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80039d6:	e9c2 3400 	strd	r3, r4, [r2]
  t26.im = theta2;
 80039da:	f507 6230 	add.w	r2, r7, #2816	; 0xb00
 80039de:	4b7c      	ldr	r3, [pc, #496]	; (8003bd0 <G_q+0x1608>)
 80039e0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80039e4:	4439      	add	r1, r7
 80039e6:	440b      	add	r3, r1
 80039e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80039ec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t25.re = -t299.re;
 80039f0:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80039f4:	ed93 7b00 	vldr	d7, [r3]
 80039f8:	eeb1 7b47 	vneg.f64	d7, d7
 80039fc:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003a00:	ed83 7b00 	vstr	d7, [r3]
  t25.im = -theta2;
 8003a04:	4b72      	ldr	r3, [pc, #456]	; (8003bd0 <G_q+0x1608>)
 8003a06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a0a:	443a      	add	r2, r7
 8003a0c:	4413      	add	r3, r2
 8003a0e:	ed93 7b00 	vldr	d7, [r3]
 8003a12:	eeb1 7b47 	vneg.f64	d7, d7
 8003a16:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003a1a:	ed83 7b02 	vstr	d7, [r3, #8]
  t24.re = t299.re;
 8003a1e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a26:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003a2a:	e9c2 3400 	strd	r3, r4, [r2]
  t24.im = theta2;
 8003a2e:	f507 622e 	add.w	r2, r7, #2784	; 0xae0
 8003a32:	4b67      	ldr	r3, [pc, #412]	; (8003bd0 <G_q+0x1608>)
 8003a34:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a38:	4439      	add	r1, r7
 8003a3a:	440b      	add	r3, r1
 8003a3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a40:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t23.re = -t299.re;
 8003a44:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a48:	ed93 7b00 	vldr	d7, [r3]
 8003a4c:	eeb1 7b47 	vneg.f64	d7, d7
 8003a50:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003a54:	ed83 7b00 	vstr	d7, [r3]
  t23.im = -theta2;
 8003a58:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <G_q+0x1608>)
 8003a5a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003a5e:	443a      	add	r2, r7
 8003a60:	4413      	add	r3, r2
 8003a62:	ed93 7b00 	vldr	d7, [r3]
 8003a66:	eeb1 7b47 	vneg.f64	d7, d7
 8003a6a:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003a6e:	ed83 7b02 	vstr	d7, [r3, #8]
  t15.re = t299.re;
 8003a72:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a7a:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003a7e:	e9c2 3400 	strd	r3, r4, [r2]
  t15.im = theta2;
 8003a82:	f507 622c 	add.w	r2, r7, #2752	; 0xac0
 8003a86:	4b52      	ldr	r3, [pc, #328]	; (8003bd0 <G_q+0x1608>)
 8003a88:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003a8c:	4439      	add	r1, r7
 8003a8e:	440b      	add	r3, r1
 8003a90:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003a94:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t14.re = -t299.re;
 8003a98:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003a9c:	ed93 7b00 	vldr	d7, [r3]
 8003aa0:	eeb1 7b47 	vneg.f64	d7, d7
 8003aa4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003aa8:	ed83 7b00 	vstr	d7, [r3]
  t14.im = -theta2;
 8003aac:	4b48      	ldr	r3, [pc, #288]	; (8003bd0 <G_q+0x1608>)
 8003aae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ab2:	443a      	add	r2, r7
 8003ab4:	4413      	add	r3, r2
 8003ab6:	ed93 7b00 	vldr	d7, [r3]
 8003aba:	eeb1 7b47 	vneg.f64	d7, d7
 8003abe:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003ac2:	ed83 7b02 	vstr	d7, [r3, #8]
  t11.re = t299.re;
 8003ac6:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003aca:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ace:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003ad2:	e9c2 3400 	strd	r3, r4, [r2]
  t11.im = theta2;
 8003ad6:	f507 622a 	add.w	r2, r7, #2720	; 0xaa0
 8003ada:	4b3d      	ldr	r3, [pc, #244]	; (8003bd0 <G_q+0x1608>)
 8003adc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ae0:	4439      	add	r1, r7
 8003ae2:	440b      	add	r3, r1
 8003ae4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ae8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t10.re = -t299.re;
 8003aec:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003af0:	ed93 7b00 	vldr	d7, [r3]
 8003af4:	eeb1 7b47 	vneg.f64	d7, d7
 8003af8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003afc:	ed83 7b00 	vstr	d7, [r3]
  t10.im = -theta2;
 8003b00:	4b33      	ldr	r3, [pc, #204]	; (8003bd0 <G_q+0x1608>)
 8003b02:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b06:	443a      	add	r2, r7
 8003b08:	4413      	add	r3, r2
 8003b0a:	ed93 7b00 	vldr	d7, [r3]
 8003b0e:	eeb1 7b47 	vneg.f64	d7, d7
 8003b12:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003b16:	ed83 7b02 	vstr	d7, [r3, #8]
  t6.re = t299.re;
 8003b1a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b1e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b22:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003b26:	e9c2 3400 	strd	r3, r4, [r2]
  t6.im = theta2;
 8003b2a:	f507 6228 	add.w	r2, r7, #2688	; 0xa80
 8003b2e:	4b28      	ldr	r3, [pc, #160]	; (8003bd0 <G_q+0x1608>)
 8003b30:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b34:	4439      	add	r1, r7
 8003b36:	440b      	add	r3, r1
 8003b38:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t5.re = -t299.re;
 8003b40:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b44:	ed93 7b00 	vldr	d7, [r3]
 8003b48:	eeb1 7b47 	vneg.f64	d7, d7
 8003b4c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003b50:	ed83 7b00 	vstr	d7, [r3]
  t5.im = -theta2;
 8003b54:	4b1e      	ldr	r3, [pc, #120]	; (8003bd0 <G_q+0x1608>)
 8003b56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003b5a:	443a      	add	r2, r7
 8003b5c:	4413      	add	r3, r2
 8003b5e:	ed93 7b00 	vldr	d7, [r3]
 8003b62:	eeb1 7b47 	vneg.f64	d7, d7
 8003b66:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003b6a:	ed83 7b02 	vstr	d7, [r3, #8]
  t4.re = t299.re;
 8003b6e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b72:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b76:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8003b7a:	e9c2 3400 	strd	r3, r4, [r2]
  t4.im = theta2;
 8003b7e:	f507 6226 	add.w	r2, r7, #2656	; 0xa60
 8003b82:	4b13      	ldr	r3, [pc, #76]	; (8003bd0 <G_q+0x1608>)
 8003b84:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003b88:	4439      	add	r1, r7
 8003b8a:	440b      	add	r3, r1
 8003b8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003b90:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t3.re = -t299.re;
 8003b94:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8003b98:	ed93 7b00 	vldr	d7, [r3]
 8003b9c:	eeb1 7b47 	vneg.f64	d7, d7
 8003ba0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003ba4:	ed83 7b00 	vstr	d7, [r3]
  t3.im = -theta2;
 8003ba8:	4b09      	ldr	r3, [pc, #36]	; (8003bd0 <G_q+0x1608>)
 8003baa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bae:	443a      	add	r2, r7
 8003bb0:	4413      	add	r3, r2
 8003bb2:	ed93 7b00 	vldr	d7, [r3]
 8003bb6:	eeb1 7b47 	vneg.f64	d7, d7
 8003bba:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003bbe:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t3);
 8003bc2:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f00e fe0a 	bl	80127e0 <b_exp>
 8003bcc:	e002      	b.n	8003bd4 <G_q+0x160c>
 8003bce:	bf00      	nop
 8003bd0:	ffffec50 	.word	0xffffec50
  t297.re = theta3 * 0.0;
 8003bd4:	4bc6      	ldr	r3, [pc, #792]	; (8003ef0 <G_q+0x1928>)
 8003bd6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003bda:	443a      	add	r2, r7
 8003bdc:	4413      	add	r3, r2
 8003bde:	ed93 7b00 	vldr	d7, [r3]
 8003be2:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8003ee8 <G_q+0x1920>
 8003be6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8003bea:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003bee:	ed83 7b00 	vstr	d7, [r3]
  t297.im = theta3;
 8003bf2:	f507 6224 	add.w	r2, r7, #2624	; 0xa40
 8003bf6:	4bbe      	ldr	r3, [pc, #760]	; (8003ef0 <G_q+0x1928>)
 8003bf8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003bfc:	4439      	add	r1, r7
 8003bfe:	440b      	add	r3, r1
 8003c00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c04:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t296.re = -t297.re;
 8003c08:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c0c:	ed93 7b00 	vldr	d7, [r3]
 8003c10:	eeb1 7b47 	vneg.f64	d7, d7
 8003c14:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003c18:	ed83 7b00 	vstr	d7, [r3]
  t296.im = -theta3;
 8003c1c:	4bb4      	ldr	r3, [pc, #720]	; (8003ef0 <G_q+0x1928>)
 8003c1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c22:	443a      	add	r2, r7
 8003c24:	4413      	add	r3, r2
 8003c26:	ed93 7b00 	vldr	d7, [r3]
 8003c2a:	eeb1 7b47 	vneg.f64	d7, d7
 8003c2e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8003c32:	ed83 7b02 	vstr	d7, [r3, #8]
  t295.re = t297.re;
 8003c36:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c3e:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8003c42:	e9c2 3400 	strd	r3, r4, [r2]
  t295.im = theta3;
 8003c46:	f507 6222 	add.w	r2, r7, #2592	; 0xa20
 8003c4a:	4ba9      	ldr	r3, [pc, #676]	; (8003ef0 <G_q+0x1928>)
 8003c4c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003c50:	4439      	add	r1, r7
 8003c52:	440b      	add	r3, r1
 8003c54:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c58:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t294.re = -t297.re;
 8003c5c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c60:	ed93 7b00 	vldr	d7, [r3]
 8003c64:	eeb1 7b47 	vneg.f64	d7, d7
 8003c68:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003c6c:	ed83 7b00 	vstr	d7, [r3]
  t294.im = -theta3;
 8003c70:	4b9f      	ldr	r3, [pc, #636]	; (8003ef0 <G_q+0x1928>)
 8003c72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003c76:	443a      	add	r2, r7
 8003c78:	4413      	add	r3, r2
 8003c7a:	ed93 7b00 	vldr	d7, [r3]
 8003c7e:	eeb1 7b47 	vneg.f64	d7, d7
 8003c82:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8003c86:	ed83 7b02 	vstr	d7, [r3, #8]
  t289.re = t297.re;
 8003c8a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003c92:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003c96:	e9c2 3400 	strd	r3, r4, [r2]
  t289.im = theta3;
 8003c9a:	f507 6220 	add.w	r2, r7, #2560	; 0xa00
 8003c9e:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <G_q+0x1928>)
 8003ca0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ca4:	4439      	add	r1, r7
 8003ca6:	440b      	add	r3, r1
 8003ca8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003cac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t288.re = -t297.re;
 8003cb0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003cb4:	ed93 7b00 	vldr	d7, [r3]
 8003cb8:	eeb1 7b47 	vneg.f64	d7, d7
 8003cbc:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003cc0:	ed83 7b00 	vstr	d7, [r3]
  t288.im = -theta3;
 8003cc4:	4b8a      	ldr	r3, [pc, #552]	; (8003ef0 <G_q+0x1928>)
 8003cc6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003cca:	443a      	add	r2, r7
 8003ccc:	4413      	add	r3, r2
 8003cce:	ed93 7b00 	vldr	d7, [r3]
 8003cd2:	eeb1 7b47 	vneg.f64	d7, d7
 8003cd6:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8003cda:	ed83 7b02 	vstr	d7, [r3, #8]
  t283.re = t297.re;
 8003cde:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003ce2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ce6:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003cea:	e9c2 3400 	strd	r3, r4, [r2]
  t283.im = theta3;
 8003cee:	f507 621e 	add.w	r2, r7, #2528	; 0x9e0
 8003cf2:	4b7f      	ldr	r3, [pc, #508]	; (8003ef0 <G_q+0x1928>)
 8003cf4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003cf8:	4439      	add	r1, r7
 8003cfa:	440b      	add	r3, r1
 8003cfc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d00:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t282.re = -t297.re;
 8003d04:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d08:	ed93 7b00 	vldr	d7, [r3]
 8003d0c:	eeb1 7b47 	vneg.f64	d7, d7
 8003d10:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003d14:	ed83 7b00 	vstr	d7, [r3]
  t282.im = -theta3;
 8003d18:	4b75      	ldr	r3, [pc, #468]	; (8003ef0 <G_q+0x1928>)
 8003d1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d1e:	443a      	add	r2, r7
 8003d20:	4413      	add	r3, r2
 8003d22:	ed93 7b00 	vldr	d7, [r3]
 8003d26:	eeb1 7b47 	vneg.f64	d7, d7
 8003d2a:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8003d2e:	ed83 7b02 	vstr	d7, [r3, #8]
  t275.re = t297.re;
 8003d32:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d3a:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003d3e:	e9c2 3400 	strd	r3, r4, [r2]
  t275.im = theta3;
 8003d42:	f507 621c 	add.w	r2, r7, #2496	; 0x9c0
 8003d46:	4b6a      	ldr	r3, [pc, #424]	; (8003ef0 <G_q+0x1928>)
 8003d48:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003d4c:	4439      	add	r1, r7
 8003d4e:	440b      	add	r3, r1
 8003d50:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d54:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t274.re = -t297.re;
 8003d58:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d5c:	ed93 7b00 	vldr	d7, [r3]
 8003d60:	eeb1 7b47 	vneg.f64	d7, d7
 8003d64:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003d68:	ed83 7b00 	vstr	d7, [r3]
  t274.im = -theta3;
 8003d6c:	4b60      	ldr	r3, [pc, #384]	; (8003ef0 <G_q+0x1928>)
 8003d6e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003d72:	443a      	add	r2, r7
 8003d74:	4413      	add	r3, r2
 8003d76:	ed93 7b00 	vldr	d7, [r3]
 8003d7a:	eeb1 7b47 	vneg.f64	d7, d7
 8003d7e:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8003d82:	ed83 7b02 	vstr	d7, [r3, #8]
  t271.re = t297.re;
 8003d86:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003d8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003d8e:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003d92:	e9c2 3400 	strd	r3, r4, [r2]
  t271.im = theta3;
 8003d96:	f507 621a 	add.w	r2, r7, #2464	; 0x9a0
 8003d9a:	4b55      	ldr	r3, [pc, #340]	; (8003ef0 <G_q+0x1928>)
 8003d9c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003da0:	4439      	add	r1, r7
 8003da2:	440b      	add	r3, r1
 8003da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003da8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t270.re = -t297.re;
 8003dac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003db0:	ed93 7b00 	vldr	d7, [r3]
 8003db4:	eeb1 7b47 	vneg.f64	d7, d7
 8003db8:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003dbc:	ed83 7b00 	vstr	d7, [r3]
  t270.im = -theta3;
 8003dc0:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <G_q+0x1928>)
 8003dc2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003dc6:	443a      	add	r2, r7
 8003dc8:	4413      	add	r3, r2
 8003dca:	ed93 7b00 	vldr	d7, [r3]
 8003dce:	eeb1 7b47 	vneg.f64	d7, d7
 8003dd2:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8003dd6:	ed83 7b02 	vstr	d7, [r3, #8]
  t261.re = t297.re;
 8003dda:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003de2:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003de6:	e9c2 3400 	strd	r3, r4, [r2]
  t261.im = theta3;
 8003dea:	f507 6218 	add.w	r2, r7, #2432	; 0x980
 8003dee:	4b40      	ldr	r3, [pc, #256]	; (8003ef0 <G_q+0x1928>)
 8003df0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003df4:	4439      	add	r1, r7
 8003df6:	440b      	add	r3, r1
 8003df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003dfc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t260.re = -t297.re;
 8003e00:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e04:	ed93 7b00 	vldr	d7, [r3]
 8003e08:	eeb1 7b47 	vneg.f64	d7, d7
 8003e0c:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003e10:	ed83 7b00 	vstr	d7, [r3]
  t260.im = -theta3;
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <G_q+0x1928>)
 8003e16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e1a:	443a      	add	r2, r7
 8003e1c:	4413      	add	r3, r2
 8003e1e:	ed93 7b00 	vldr	d7, [r3]
 8003e22:	eeb1 7b47 	vneg.f64	d7, d7
 8003e26:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8003e2a:	ed83 7b02 	vstr	d7, [r3, #8]
  t257.re = t297.re;
 8003e2e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e32:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e36:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003e3a:	e9c2 3400 	strd	r3, r4, [r2]
  t257.im = theta3;
 8003e3e:	f507 6216 	add.w	r2, r7, #2400	; 0x960
 8003e42:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <G_q+0x1928>)
 8003e44:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e48:	4439      	add	r1, r7
 8003e4a:	440b      	add	r3, r1
 8003e4c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e50:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t256.re = -t297.re;
 8003e54:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e58:	ed93 7b00 	vldr	d7, [r3]
 8003e5c:	eeb1 7b47 	vneg.f64	d7, d7
 8003e60:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003e64:	ed83 7b00 	vstr	d7, [r3]
  t256.im = -theta3;
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <G_q+0x1928>)
 8003e6a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003e6e:	443a      	add	r2, r7
 8003e70:	4413      	add	r3, r2
 8003e72:	ed93 7b00 	vldr	d7, [r3]
 8003e76:	eeb1 7b47 	vneg.f64	d7, d7
 8003e7a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8003e7e:	ed83 7b02 	vstr	d7, [r3, #8]
  t253.re = t297.re;
 8003e82:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003e86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003e8a:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003e8e:	e9c2 3400 	strd	r3, r4, [r2]
  t253.im = theta3;
 8003e92:	f507 6214 	add.w	r2, r7, #2368	; 0x940
 8003e96:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <G_q+0x1928>)
 8003e98:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003e9c:	4439      	add	r1, r7
 8003e9e:	440b      	add	r3, r1
 8003ea0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ea4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t252.re = -t297.re;
 8003ea8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003eac:	ed93 7b00 	vldr	d7, [r3]
 8003eb0:	eeb1 7b47 	vneg.f64	d7, d7
 8003eb4:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003eb8:	ed83 7b00 	vstr	d7, [r3]
  t252.im = -theta3;
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <G_q+0x1928>)
 8003ebe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003ec2:	443a      	add	r2, r7
 8003ec4:	4413      	add	r3, r2
 8003ec6:	ed93 7b00 	vldr	d7, [r3]
 8003eca:	eeb1 7b47 	vneg.f64	d7, d7
 8003ece:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8003ed2:	ed83 7b02 	vstr	d7, [r3, #8]
  t247.re = t297.re;
 8003ed6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003eda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003ede:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003ee2:	e007      	b.n	8003ef4 <G_q+0x192c>
 8003ee4:	f3af 8000 	nop.w
	...
 8003ef0:	ffffec48 	.word	0xffffec48
 8003ef4:	e9c2 3400 	strd	r3, r4, [r2]
  t247.im = theta3;
 8003ef8:	f507 6212 	add.w	r2, r7, #2336	; 0x920
 8003efc:	4bc3      	ldr	r3, [pc, #780]	; (800420c <G_q+0x1c44>)
 8003efe:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f02:	4439      	add	r1, r7
 8003f04:	440b      	add	r3, r1
 8003f06:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f0a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t246.re = -t297.re;
 8003f0e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f12:	ed93 7b00 	vldr	d7, [r3]
 8003f16:	eeb1 7b47 	vneg.f64	d7, d7
 8003f1a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003f1e:	ed83 7b00 	vstr	d7, [r3]
  t246.im = -theta3;
 8003f22:	4bba      	ldr	r3, [pc, #744]	; (800420c <G_q+0x1c44>)
 8003f24:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f28:	443a      	add	r2, r7
 8003f2a:	4413      	add	r3, r2
 8003f2c:	ed93 7b00 	vldr	d7, [r3]
 8003f30:	eeb1 7b47 	vneg.f64	d7, d7
 8003f34:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8003f38:	ed83 7b02 	vstr	d7, [r3, #8]
  t241.re = t297.re;
 8003f3c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f44:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003f48:	e9c2 3400 	strd	r3, r4, [r2]
  t241.im = theta3;
 8003f4c:	f507 6210 	add.w	r2, r7, #2304	; 0x900
 8003f50:	4bae      	ldr	r3, [pc, #696]	; (800420c <G_q+0x1c44>)
 8003f52:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003f56:	4439      	add	r1, r7
 8003f58:	440b      	add	r3, r1
 8003f5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f5e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t240.re = -t297.re;
 8003f62:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f66:	ed93 7b00 	vldr	d7, [r3]
 8003f6a:	eeb1 7b47 	vneg.f64	d7, d7
 8003f6e:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003f72:	ed83 7b00 	vstr	d7, [r3]
  t240.im = -theta3;
 8003f76:	4ba5      	ldr	r3, [pc, #660]	; (800420c <G_q+0x1c44>)
 8003f78:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003f7c:	443a      	add	r2, r7
 8003f7e:	4413      	add	r3, r2
 8003f80:	ed93 7b00 	vldr	d7, [r3]
 8003f84:	eeb1 7b47 	vneg.f64	d7, d7
 8003f88:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8003f8c:	ed83 7b02 	vstr	d7, [r3, #8]
  t235.re = t297.re;
 8003f90:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003f94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003f98:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003f9c:	e9c2 3400 	strd	r3, r4, [r2]
  t235.im = theta3;
 8003fa0:	f507 620e 	add.w	r2, r7, #2272	; 0x8e0
 8003fa4:	4b99      	ldr	r3, [pc, #612]	; (800420c <G_q+0x1c44>)
 8003fa6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003faa:	4439      	add	r1, r7
 8003fac:	440b      	add	r3, r1
 8003fae:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fb2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t234.re = -t297.re;
 8003fb6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fba:	ed93 7b00 	vldr	d7, [r3]
 8003fbe:	eeb1 7b47 	vneg.f64	d7, d7
 8003fc2:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003fc6:	ed83 7b00 	vstr	d7, [r3]
  t234.im = -theta3;
 8003fca:	4b90      	ldr	r3, [pc, #576]	; (800420c <G_q+0x1c44>)
 8003fcc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8003fd0:	443a      	add	r2, r7
 8003fd2:	4413      	add	r3, r2
 8003fd4:	ed93 7b00 	vldr	d7, [r3]
 8003fd8:	eeb1 7b47 	vneg.f64	d7, d7
 8003fdc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8003fe0:	ed83 7b02 	vstr	d7, [r3, #8]
  t225.re = t297.re;
 8003fe4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8003fe8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8003fec:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003ff0:	e9c2 3400 	strd	r3, r4, [r2]
  t225.im = theta3;
 8003ff4:	f507 620c 	add.w	r2, r7, #2240	; 0x8c0
 8003ff8:	4b84      	ldr	r3, [pc, #528]	; (800420c <G_q+0x1c44>)
 8003ffa:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8003ffe:	4439      	add	r1, r7
 8004000:	440b      	add	r3, r1
 8004002:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004006:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t224.re = -t297.re;
 800400a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800400e:	ed93 7b00 	vldr	d7, [r3]
 8004012:	eeb1 7b47 	vneg.f64	d7, d7
 8004016:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800401a:	ed83 7b00 	vstr	d7, [r3]
  t224.im = -theta3;
 800401e:	4b7b      	ldr	r3, [pc, #492]	; (800420c <G_q+0x1c44>)
 8004020:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004024:	443a      	add	r2, r7
 8004026:	4413      	add	r3, r2
 8004028:	ed93 7b00 	vldr	d7, [r3]
 800402c:	eeb1 7b47 	vneg.f64	d7, d7
 8004030:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 8004034:	ed83 7b02 	vstr	d7, [r3, #8]
  t221.re = t297.re;
 8004038:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800403c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004040:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 8004044:	e9c2 3400 	strd	r3, r4, [r2]
  t221.im = theta3;
 8004048:	f507 620a 	add.w	r2, r7, #2208	; 0x8a0
 800404c:	4b6f      	ldr	r3, [pc, #444]	; (800420c <G_q+0x1c44>)
 800404e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004052:	4439      	add	r1, r7
 8004054:	440b      	add	r3, r1
 8004056:	e9d3 3400 	ldrd	r3, r4, [r3]
 800405a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t220.re = -t297.re;
 800405e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004062:	ed93 7b00 	vldr	d7, [r3]
 8004066:	eeb1 7b47 	vneg.f64	d7, d7
 800406a:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800406e:	ed83 7b00 	vstr	d7, [r3]
  t220.im = -theta3;
 8004072:	4b66      	ldr	r3, [pc, #408]	; (800420c <G_q+0x1c44>)
 8004074:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004078:	443a      	add	r2, r7
 800407a:	4413      	add	r3, r2
 800407c:	ed93 7b00 	vldr	d7, [r3]
 8004080:	eeb1 7b47 	vneg.f64	d7, d7
 8004084:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8004088:	ed83 7b02 	vstr	d7, [r3, #8]
  t215.re = t297.re;
 800408c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004090:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004094:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 8004098:	e9c2 3400 	strd	r3, r4, [r2]
  t215.im = theta3;
 800409c:	f507 6208 	add.w	r2, r7, #2176	; 0x880
 80040a0:	4b5a      	ldr	r3, [pc, #360]	; (800420c <G_q+0x1c44>)
 80040a2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040a6:	4439      	add	r1, r7
 80040a8:	440b      	add	r3, r1
 80040aa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040ae:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t214.re = -t297.re;
 80040b2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040b6:	ed93 7b00 	vldr	d7, [r3]
 80040ba:	eeb1 7b47 	vneg.f64	d7, d7
 80040be:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80040c2:	ed83 7b00 	vstr	d7, [r3]
  t214.im = -theta3;
 80040c6:	4b51      	ldr	r3, [pc, #324]	; (800420c <G_q+0x1c44>)
 80040c8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80040cc:	443a      	add	r2, r7
 80040ce:	4413      	add	r3, r2
 80040d0:	ed93 7b00 	vldr	d7, [r3]
 80040d4:	eeb1 7b47 	vneg.f64	d7, d7
 80040d8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80040dc:	ed83 7b02 	vstr	d7, [r3, #8]
  t211.re = t297.re;
 80040e0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80040e4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80040e8:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80040ec:	e9c2 3400 	strd	r3, r4, [r2]
  t211.im = theta3;
 80040f0:	f507 6206 	add.w	r2, r7, #2144	; 0x860
 80040f4:	4b45      	ldr	r3, [pc, #276]	; (800420c <G_q+0x1c44>)
 80040f6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80040fa:	4439      	add	r1, r7
 80040fc:	440b      	add	r3, r1
 80040fe:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004102:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t210.re = -t297.re;
 8004106:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800410a:	ed93 7b00 	vldr	d7, [r3]
 800410e:	eeb1 7b47 	vneg.f64	d7, d7
 8004112:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8004116:	ed83 7b00 	vstr	d7, [r3]
  t210.im = -theta3;
 800411a:	4b3c      	ldr	r3, [pc, #240]	; (800420c <G_q+0x1c44>)
 800411c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004120:	443a      	add	r2, r7
 8004122:	4413      	add	r3, r2
 8004124:	ed93 7b00 	vldr	d7, [r3]
 8004128:	eeb1 7b47 	vneg.f64	d7, d7
 800412c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 8004130:	ed83 7b02 	vstr	d7, [r3, #8]
  t207.re = t297.re;
 8004134:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004138:	e9d3 3400 	ldrd	r3, r4, [r3]
 800413c:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8004140:	e9c2 3400 	strd	r3, r4, [r2]
  t207.im = theta3;
 8004144:	f507 6204 	add.w	r2, r7, #2112	; 0x840
 8004148:	4b30      	ldr	r3, [pc, #192]	; (800420c <G_q+0x1c44>)
 800414a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800414e:	4439      	add	r1, r7
 8004150:	440b      	add	r3, r1
 8004152:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004156:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t206.re = -t297.re;
 800415a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800415e:	ed93 7b00 	vldr	d7, [r3]
 8004162:	eeb1 7b47 	vneg.f64	d7, d7
 8004166:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800416a:	ed83 7b00 	vstr	d7, [r3]
  t206.im = -theta3;
 800416e:	4b27      	ldr	r3, [pc, #156]	; (800420c <G_q+0x1c44>)
 8004170:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004174:	443a      	add	r2, r7
 8004176:	4413      	add	r3, r2
 8004178:	ed93 7b00 	vldr	d7, [r3]
 800417c:	eeb1 7b47 	vneg.f64	d7, d7
 8004180:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 8004184:	ed83 7b02 	vstr	d7, [r3, #8]
  t201.re = t297.re;
 8004188:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800418c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004190:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8004194:	e9c2 3400 	strd	r3, r4, [r2]
  t201.im = theta3;
 8004198:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 800419c:	4b1b      	ldr	r3, [pc, #108]	; (800420c <G_q+0x1c44>)
 800419e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041a2:	4439      	add	r1, r7
 80041a4:	440b      	add	r3, r1
 80041a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041aa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t200.re = -t297.re;
 80041ae:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041b2:	ed93 7b00 	vldr	d7, [r3]
 80041b6:	eeb1 7b47 	vneg.f64	d7, d7
 80041ba:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80041be:	ed83 7b00 	vstr	d7, [r3]
  t200.im = -theta3;
 80041c2:	4b12      	ldr	r3, [pc, #72]	; (800420c <G_q+0x1c44>)
 80041c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80041c8:	443a      	add	r2, r7
 80041ca:	4413      	add	r3, r2
 80041cc:	ed93 7b00 	vldr	d7, [r3]
 80041d0:	eeb1 7b47 	vneg.f64	d7, d7
 80041d4:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 80041d8:	ed83 7b02 	vstr	d7, [r3, #8]
  t191.re = t297.re;
 80041dc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80041e0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041e4:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80041e8:	e9c2 3400 	strd	r3, r4, [r2]
  t191.im = theta3;
 80041ec:	f507 6200 	add.w	r2, r7, #2048	; 0x800
 80041f0:	4b06      	ldr	r3, [pc, #24]	; (800420c <G_q+0x1c44>)
 80041f2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80041f6:	4439      	add	r1, r7
 80041f8:	440b      	add	r3, r1
 80041fa:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041fe:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t190.re = -t297.re;
 8004202:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004206:	ed93 7b00 	vldr	d7, [r3]
 800420a:	e001      	b.n	8004210 <G_q+0x1c48>
 800420c:	ffffec48 	.word	0xffffec48
 8004210:	eeb1 7b47 	vneg.f64	d7, d7
 8004214:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8004218:	ed83 7b00 	vstr	d7, [r3]
  t190.im = -theta3;
 800421c:	4bc4      	ldr	r3, [pc, #784]	; (8004530 <G_q+0x1f68>)
 800421e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004222:	443a      	add	r2, r7
 8004224:	4413      	add	r3, r2
 8004226:	ed93 7b00 	vldr	d7, [r3]
 800422a:	eeb1 7b47 	vneg.f64	d7, d7
 800422e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 8004232:	ed83 7b02 	vstr	d7, [r3, #8]
  t187.re = t297.re;
 8004236:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800423a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800423e:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 8004242:	e9c2 3400 	strd	r3, r4, [r2]
  t187.im = theta3;
 8004246:	f507 62fc 	add.w	r2, r7, #2016	; 0x7e0
 800424a:	4bb9      	ldr	r3, [pc, #740]	; (8004530 <G_q+0x1f68>)
 800424c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004250:	4439      	add	r1, r7
 8004252:	440b      	add	r3, r1
 8004254:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004258:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t186.re = -t297.re;
 800425c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004260:	ed93 7b00 	vldr	d7, [r3]
 8004264:	eeb1 7b47 	vneg.f64	d7, d7
 8004268:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800426c:	ed83 7b00 	vstr	d7, [r3]
  t186.im = -theta3;
 8004270:	4baf      	ldr	r3, [pc, #700]	; (8004530 <G_q+0x1f68>)
 8004272:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004276:	443a      	add	r2, r7
 8004278:	4413      	add	r3, r2
 800427a:	ed93 7b00 	vldr	d7, [r3]
 800427e:	eeb1 7b47 	vneg.f64	d7, d7
 8004282:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8004286:	ed83 7b02 	vstr	d7, [r3, #8]
  t183.re = t297.re;
 800428a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800428e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004292:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 8004296:	e9c2 3400 	strd	r3, r4, [r2]
  t183.im = theta3;
 800429a:	f507 62f8 	add.w	r2, r7, #1984	; 0x7c0
 800429e:	4ba4      	ldr	r3, [pc, #656]	; (8004530 <G_q+0x1f68>)
 80042a0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042a4:	4439      	add	r1, r7
 80042a6:	440b      	add	r3, r1
 80042a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t182.re = -t297.re;
 80042b0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042b4:	ed93 7b00 	vldr	d7, [r3]
 80042b8:	eeb1 7b47 	vneg.f64	d7, d7
 80042bc:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80042c0:	ed83 7b00 	vstr	d7, [r3]
  t182.im = -theta3;
 80042c4:	4b9a      	ldr	r3, [pc, #616]	; (8004530 <G_q+0x1f68>)
 80042c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80042ca:	443a      	add	r2, r7
 80042cc:	4413      	add	r3, r2
 80042ce:	ed93 7b00 	vldr	d7, [r3]
 80042d2:	eeb1 7b47 	vneg.f64	d7, d7
 80042d6:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 80042da:	ed83 7b02 	vstr	d7, [r3, #8]
  t177.re = t297.re;
 80042de:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80042e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80042e6:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80042ea:	e9c2 3400 	strd	r3, r4, [r2]
  t177.im = theta3;
 80042ee:	f507 62f4 	add.w	r2, r7, #1952	; 0x7a0
 80042f2:	4b8f      	ldr	r3, [pc, #572]	; (8004530 <G_q+0x1f68>)
 80042f4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80042f8:	4439      	add	r1, r7
 80042fa:	440b      	add	r3, r1
 80042fc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004300:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t176.re = -t297.re;
 8004304:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004308:	ed93 7b00 	vldr	d7, [r3]
 800430c:	eeb1 7b47 	vneg.f64	d7, d7
 8004310:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8004314:	ed83 7b00 	vstr	d7, [r3]
  t176.im = -theta3;
 8004318:	4b85      	ldr	r3, [pc, #532]	; (8004530 <G_q+0x1f68>)
 800431a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800431e:	443a      	add	r2, r7
 8004320:	4413      	add	r3, r2
 8004322:	ed93 7b00 	vldr	d7, [r3]
 8004326:	eeb1 7b47 	vneg.f64	d7, d7
 800432a:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800432e:	ed83 7b02 	vstr	d7, [r3, #8]
  t169.re = t297.re;
 8004332:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004336:	e9d3 3400 	ldrd	r3, r4, [r3]
 800433a:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 800433e:	e9c2 3400 	strd	r3, r4, [r2]
  t169.im = theta3;
 8004342:	f507 62f0 	add.w	r2, r7, #1920	; 0x780
 8004346:	4b7a      	ldr	r3, [pc, #488]	; (8004530 <G_q+0x1f68>)
 8004348:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800434c:	4439      	add	r1, r7
 800434e:	440b      	add	r3, r1
 8004350:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004354:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t168.re = -t297.re;
 8004358:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800435c:	ed93 7b00 	vldr	d7, [r3]
 8004360:	eeb1 7b47 	vneg.f64	d7, d7
 8004364:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8004368:	ed83 7b00 	vstr	d7, [r3]
  t168.im = -theta3;
 800436c:	4b70      	ldr	r3, [pc, #448]	; (8004530 <G_q+0x1f68>)
 800436e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004372:	443a      	add	r2, r7
 8004374:	4413      	add	r3, r2
 8004376:	ed93 7b00 	vldr	d7, [r3]
 800437a:	eeb1 7b47 	vneg.f64	d7, d7
 800437e:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8004382:	ed83 7b02 	vstr	d7, [r3, #8]
  t165.re = t297.re;
 8004386:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800438a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800438e:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 8004392:	e9c2 3400 	strd	r3, r4, [r2]
  t165.im = theta3;
 8004396:	f507 62ec 	add.w	r2, r7, #1888	; 0x760
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <G_q+0x1f68>)
 800439c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043a0:	4439      	add	r1, r7
 80043a2:	440b      	add	r3, r1
 80043a4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t164.re = -t297.re;
 80043ac:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043b0:	ed93 7b00 	vldr	d7, [r3]
 80043b4:	eeb1 7b47 	vneg.f64	d7, d7
 80043b8:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80043bc:	ed83 7b00 	vstr	d7, [r3]
  t164.im = -theta3;
 80043c0:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <G_q+0x1f68>)
 80043c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80043c6:	443a      	add	r2, r7
 80043c8:	4413      	add	r3, r2
 80043ca:	ed93 7b00 	vldr	d7, [r3]
 80043ce:	eeb1 7b47 	vneg.f64	d7, d7
 80043d2:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 80043d6:	ed83 7b02 	vstr	d7, [r3, #8]
  t163.re = t297.re;
 80043da:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80043de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043e2:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80043e6:	e9c2 3400 	strd	r3, r4, [r2]
  t163.im = theta3;
 80043ea:	f507 62e8 	add.w	r2, r7, #1856	; 0x740
 80043ee:	4b50      	ldr	r3, [pc, #320]	; (8004530 <G_q+0x1f68>)
 80043f0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80043f4:	4439      	add	r1, r7
 80043f6:	440b      	add	r3, r1
 80043f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80043fc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t162.re = -t297.re;
 8004400:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004404:	ed93 7b00 	vldr	d7, [r3]
 8004408:	eeb1 7b47 	vneg.f64	d7, d7
 800440c:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8004410:	ed83 7b00 	vstr	d7, [r3]
  t162.im = -theta3;
 8004414:	4b46      	ldr	r3, [pc, #280]	; (8004530 <G_q+0x1f68>)
 8004416:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800441a:	443a      	add	r2, r7
 800441c:	4413      	add	r3, r2
 800441e:	ed93 7b00 	vldr	d7, [r3]
 8004422:	eeb1 7b47 	vneg.f64	d7, d7
 8004426:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800442a:	ed83 7b02 	vstr	d7, [r3, #8]
  t155.re = t297.re;
 800442e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004436:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 800443a:	e9c2 3400 	strd	r3, r4, [r2]
  t155.im = theta3;
 800443e:	f507 62e4 	add.w	r2, r7, #1824	; 0x720
 8004442:	4b3b      	ldr	r3, [pc, #236]	; (8004530 <G_q+0x1f68>)
 8004444:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004448:	4439      	add	r1, r7
 800444a:	440b      	add	r3, r1
 800444c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004450:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t154.re = -t297.re;
 8004454:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004458:	ed93 7b00 	vldr	d7, [r3]
 800445c:	eeb1 7b47 	vneg.f64	d7, d7
 8004460:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8004464:	ed83 7b00 	vstr	d7, [r3]
  t154.im = -theta3;
 8004468:	4b31      	ldr	r3, [pc, #196]	; (8004530 <G_q+0x1f68>)
 800446a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800446e:	443a      	add	r2, r7
 8004470:	4413      	add	r3, r2
 8004472:	ed93 7b00 	vldr	d7, [r3]
 8004476:	eeb1 7b47 	vneg.f64	d7, d7
 800447a:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800447e:	ed83 7b02 	vstr	d7, [r3, #8]
  t151.re = t297.re;
 8004482:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004486:	e9d3 3400 	ldrd	r3, r4, [r3]
 800448a:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 800448e:	e9c2 3400 	strd	r3, r4, [r2]
  t151.im = theta3;
 8004492:	f507 62e0 	add.w	r2, r7, #1792	; 0x700
 8004496:	4b26      	ldr	r3, [pc, #152]	; (8004530 <G_q+0x1f68>)
 8004498:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800449c:	4439      	add	r1, r7
 800449e:	440b      	add	r3, r1
 80044a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044a4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t150.re = -t297.re;
 80044a8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044ac:	ed93 7b00 	vldr	d7, [r3]
 80044b0:	eeb1 7b47 	vneg.f64	d7, d7
 80044b4:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80044b8:	ed83 7b00 	vstr	d7, [r3]
  t150.im = -theta3;
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <G_q+0x1f68>)
 80044be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80044c2:	443a      	add	r2, r7
 80044c4:	4413      	add	r3, r2
 80044c6:	ed93 7b00 	vldr	d7, [r3]
 80044ca:	eeb1 7b47 	vneg.f64	d7, d7
 80044ce:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 80044d2:	ed83 7b02 	vstr	d7, [r3, #8]
  t145.re = t297.re;
 80044d6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80044da:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044de:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 80044e2:	e9c2 3400 	strd	r3, r4, [r2]
  t145.im = theta3;
 80044e6:	f507 62dc 	add.w	r2, r7, #1760	; 0x6e0
 80044ea:	4b11      	ldr	r3, [pc, #68]	; (8004530 <G_q+0x1f68>)
 80044ec:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80044f0:	4439      	add	r1, r7
 80044f2:	440b      	add	r3, r1
 80044f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80044f8:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t144.re = -t297.re;
 80044fc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004500:	ed93 7b00 	vldr	d7, [r3]
 8004504:	eeb1 7b47 	vneg.f64	d7, d7
 8004508:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800450c:	ed83 7b00 	vstr	d7, [r3]
  t144.im = -theta3;
 8004510:	4b07      	ldr	r3, [pc, #28]	; (8004530 <G_q+0x1f68>)
 8004512:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004516:	443a      	add	r2, r7
 8004518:	4413      	add	r3, r2
 800451a:	ed93 7b00 	vldr	d7, [r3]
 800451e:	eeb1 7b47 	vneg.f64	d7, d7
 8004522:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8004526:	ed83 7b02 	vstr	d7, [r3, #8]
  t141.re = t297.re;
 800452a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800452e:	e001      	b.n	8004534 <G_q+0x1f6c>
 8004530:	ffffec48 	.word	0xffffec48
 8004534:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004538:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 800453c:	e9c2 3400 	strd	r3, r4, [r2]
  t141.im = theta3;
 8004540:	f507 62d8 	add.w	r2, r7, #1728	; 0x6c0
 8004544:	4bc3      	ldr	r3, [pc, #780]	; (8004854 <G_q+0x228c>)
 8004546:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800454a:	4439      	add	r1, r7
 800454c:	440b      	add	r3, r1
 800454e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004552:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t140.re = -t297.re;
 8004556:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800455a:	ed93 7b00 	vldr	d7, [r3]
 800455e:	eeb1 7b47 	vneg.f64	d7, d7
 8004562:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8004566:	ed83 7b00 	vstr	d7, [r3]
  t140.im = -theta3;
 800456a:	4bba      	ldr	r3, [pc, #744]	; (8004854 <G_q+0x228c>)
 800456c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004570:	443a      	add	r2, r7
 8004572:	4413      	add	r3, r2
 8004574:	ed93 7b00 	vldr	d7, [r3]
 8004578:	eeb1 7b47 	vneg.f64	d7, d7
 800457c:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8004580:	ed83 7b02 	vstr	d7, [r3, #8]
  t137.re = t297.re;
 8004584:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004588:	e9d3 3400 	ldrd	r3, r4, [r3]
 800458c:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8004590:	e9c2 3400 	strd	r3, r4, [r2]
  t137.im = theta3;
 8004594:	f507 62d4 	add.w	r2, r7, #1696	; 0x6a0
 8004598:	4bae      	ldr	r3, [pc, #696]	; (8004854 <G_q+0x228c>)
 800459a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800459e:	4439      	add	r1, r7
 80045a0:	440b      	add	r3, r1
 80045a2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t136.re = -t297.re;
 80045aa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045ae:	ed93 7b00 	vldr	d7, [r3]
 80045b2:	eeb1 7b47 	vneg.f64	d7, d7
 80045b6:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80045ba:	ed83 7b00 	vstr	d7, [r3]
  t136.im = -theta3;
 80045be:	4ba5      	ldr	r3, [pc, #660]	; (8004854 <G_q+0x228c>)
 80045c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80045c4:	443a      	add	r2, r7
 80045c6:	4413      	add	r3, r2
 80045c8:	ed93 7b00 	vldr	d7, [r3]
 80045cc:	eeb1 7b47 	vneg.f64	d7, d7
 80045d0:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 80045d4:	ed83 7b02 	vstr	d7, [r3, #8]
  t131.re = t297.re;
 80045d8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80045dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045e0:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 80045e4:	e9c2 3400 	strd	r3, r4, [r2]
  t131.im = theta3;
 80045e8:	f507 62d0 	add.w	r2, r7, #1664	; 0x680
 80045ec:	4b99      	ldr	r3, [pc, #612]	; (8004854 <G_q+0x228c>)
 80045ee:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80045f2:	4439      	add	r1, r7
 80045f4:	440b      	add	r3, r1
 80045f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80045fa:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t130.re = -t297.re;
 80045fe:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004602:	ed93 7b00 	vldr	d7, [r3]
 8004606:	eeb1 7b47 	vneg.f64	d7, d7
 800460a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800460e:	ed83 7b00 	vstr	d7, [r3]
  t130.im = -theta3;
 8004612:	4b90      	ldr	r3, [pc, #576]	; (8004854 <G_q+0x228c>)
 8004614:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004618:	443a      	add	r2, r7
 800461a:	4413      	add	r3, r2
 800461c:	ed93 7b00 	vldr	d7, [r3]
 8004620:	eeb1 7b47 	vneg.f64	d7, d7
 8004624:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8004628:	ed83 7b02 	vstr	d7, [r3, #8]
  t129.re = t297.re;
 800462c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004630:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004634:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004638:	e9c2 3400 	strd	r3, r4, [r2]
  t129.im = theta3;
 800463c:	f507 62cc 	add.w	r2, r7, #1632	; 0x660
 8004640:	4b84      	ldr	r3, [pc, #528]	; (8004854 <G_q+0x228c>)
 8004642:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004646:	4439      	add	r1, r7
 8004648:	440b      	add	r3, r1
 800464a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800464e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t128.re = -t297.re;
 8004652:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004656:	ed93 7b00 	vldr	d7, [r3]
 800465a:	eeb1 7b47 	vneg.f64	d7, d7
 800465e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8004662:	ed83 7b00 	vstr	d7, [r3]
  t128.im = -theta3;
 8004666:	4b7b      	ldr	r3, [pc, #492]	; (8004854 <G_q+0x228c>)
 8004668:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800466c:	443a      	add	r2, r7
 800466e:	4413      	add	r3, r2
 8004670:	ed93 7b00 	vldr	d7, [r3]
 8004674:	eeb1 7b47 	vneg.f64	d7, d7
 8004678:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800467c:	ed83 7b02 	vstr	d7, [r3, #8]
  t121.re = t297.re;
 8004680:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004684:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004688:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 800468c:	e9c2 3400 	strd	r3, r4, [r2]
  t121.im = theta3;
 8004690:	f507 62c8 	add.w	r2, r7, #1600	; 0x640
 8004694:	4b6f      	ldr	r3, [pc, #444]	; (8004854 <G_q+0x228c>)
 8004696:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800469a:	4439      	add	r1, r7
 800469c:	440b      	add	r3, r1
 800469e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046a2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t120.re = -t297.re;
 80046a6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046aa:	ed93 7b00 	vldr	d7, [r3]
 80046ae:	eeb1 7b47 	vneg.f64	d7, d7
 80046b2:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80046b6:	ed83 7b00 	vstr	d7, [r3]
  t120.im = -theta3;
 80046ba:	4b66      	ldr	r3, [pc, #408]	; (8004854 <G_q+0x228c>)
 80046bc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80046c0:	443a      	add	r2, r7
 80046c2:	4413      	add	r3, r2
 80046c4:	ed93 7b00 	vldr	d7, [r3]
 80046c8:	eeb1 7b47 	vneg.f64	d7, d7
 80046cc:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 80046d0:	ed83 7b02 	vstr	d7, [r3, #8]
  t115.re = t297.re;
 80046d4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046d8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046dc:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80046e0:	e9c2 3400 	strd	r3, r4, [r2]
  t115.im = theta3;
 80046e4:	f507 62c4 	add.w	r2, r7, #1568	; 0x620
 80046e8:	4b5a      	ldr	r3, [pc, #360]	; (8004854 <G_q+0x228c>)
 80046ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80046ee:	4439      	add	r1, r7
 80046f0:	440b      	add	r3, r1
 80046f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046f6:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t114.re = -t297.re;
 80046fa:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80046fe:	ed93 7b00 	vldr	d7, [r3]
 8004702:	eeb1 7b47 	vneg.f64	d7, d7
 8004706:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800470a:	ed83 7b00 	vstr	d7, [r3]
  t114.im = -theta3;
 800470e:	4b51      	ldr	r3, [pc, #324]	; (8004854 <G_q+0x228c>)
 8004710:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004714:	443a      	add	r2, r7
 8004716:	4413      	add	r3, r2
 8004718:	ed93 7b00 	vldr	d7, [r3]
 800471c:	eeb1 7b47 	vneg.f64	d7, d7
 8004720:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8004724:	ed83 7b02 	vstr	d7, [r3, #8]
  t109.re = t297.re;
 8004728:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800472c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004730:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 8004734:	e9c2 3400 	strd	r3, r4, [r2]
  t109.im = theta3;
 8004738:	f507 62c0 	add.w	r2, r7, #1536	; 0x600
 800473c:	4b45      	ldr	r3, [pc, #276]	; (8004854 <G_q+0x228c>)
 800473e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004742:	4439      	add	r1, r7
 8004744:	440b      	add	r3, r1
 8004746:	e9d3 3400 	ldrd	r3, r4, [r3]
 800474a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t108.re = -t297.re;
 800474e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004752:	ed93 7b00 	vldr	d7, [r3]
 8004756:	eeb1 7b47 	vneg.f64	d7, d7
 800475a:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800475e:	ed83 7b00 	vstr	d7, [r3]
  t108.im = -theta3;
 8004762:	4b3c      	ldr	r3, [pc, #240]	; (8004854 <G_q+0x228c>)
 8004764:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004768:	443a      	add	r2, r7
 800476a:	4413      	add	r3, r2
 800476c:	ed93 7b00 	vldr	d7, [r3]
 8004770:	eeb1 7b47 	vneg.f64	d7, d7
 8004774:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8004778:	ed83 7b02 	vstr	d7, [r3, #8]
  t107.re = t297.re;
 800477c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004780:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004784:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8004788:	e9c2 3400 	strd	r3, r4, [r2]
  t107.im = theta3;
 800478c:	f507 62bc 	add.w	r2, r7, #1504	; 0x5e0
 8004790:	4b30      	ldr	r3, [pc, #192]	; (8004854 <G_q+0x228c>)
 8004792:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004796:	4439      	add	r1, r7
 8004798:	440b      	add	r3, r1
 800479a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800479e:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t106.re = -t297.re;
 80047a2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047a6:	ed93 7b00 	vldr	d7, [r3]
 80047aa:	eeb1 7b47 	vneg.f64	d7, d7
 80047ae:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80047b2:	ed83 7b00 	vstr	d7, [r3]
  t106.im = -theta3;
 80047b6:	4b27      	ldr	r3, [pc, #156]	; (8004854 <G_q+0x228c>)
 80047b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80047bc:	443a      	add	r2, r7
 80047be:	4413      	add	r3, r2
 80047c0:	ed93 7b00 	vldr	d7, [r3]
 80047c4:	eeb1 7b47 	vneg.f64	d7, d7
 80047c8:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 80047cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t99.re = t297.re;
 80047d0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047d4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047d8:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80047dc:	e9c2 3400 	strd	r3, r4, [r2]
  t99.im = theta3;
 80047e0:	f507 62b8 	add.w	r2, r7, #1472	; 0x5c0
 80047e4:	4b1b      	ldr	r3, [pc, #108]	; (8004854 <G_q+0x228c>)
 80047e6:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80047ea:	4439      	add	r1, r7
 80047ec:	440b      	add	r3, r1
 80047ee:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t98.re = -t297.re;
 80047f6:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80047fa:	ed93 7b00 	vldr	d7, [r3]
 80047fe:	eeb1 7b47 	vneg.f64	d7, d7
 8004802:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004806:	ed83 7b00 	vstr	d7, [r3]
  t98.im = -theta3;
 800480a:	4b12      	ldr	r3, [pc, #72]	; (8004854 <G_q+0x228c>)
 800480c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004810:	443a      	add	r2, r7
 8004812:	4413      	add	r3, r2
 8004814:	ed93 7b00 	vldr	d7, [r3]
 8004818:	eeb1 7b47 	vneg.f64	d7, d7
 800481c:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8004820:	ed83 7b02 	vstr	d7, [r3, #8]
  t93.re = t297.re;
 8004824:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004828:	e9d3 3400 	ldrd	r3, r4, [r3]
 800482c:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004830:	e9c2 3400 	strd	r3, r4, [r2]
  t93.im = theta3;
 8004834:	f507 62b4 	add.w	r2, r7, #1440	; 0x5a0
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <G_q+0x228c>)
 800483a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800483e:	4439      	add	r1, r7
 8004840:	440b      	add	r3, r1
 8004842:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004846:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t92.re = -t297.re;
 800484a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800484e:	ed93 7b00 	vldr	d7, [r3]
 8004852:	e001      	b.n	8004858 <G_q+0x2290>
 8004854:	ffffec48 	.word	0xffffec48
 8004858:	eeb1 7b47 	vneg.f64	d7, d7
 800485c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8004860:	ed83 7b00 	vstr	d7, [r3]
  t92.im = -theta3;
 8004864:	4bc4      	ldr	r3, [pc, #784]	; (8004b78 <G_q+0x25b0>)
 8004866:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800486a:	443a      	add	r2, r7
 800486c:	4413      	add	r3, r2
 800486e:	ed93 7b00 	vldr	d7, [r3]
 8004872:	eeb1 7b47 	vneg.f64	d7, d7
 8004876:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800487a:	ed83 7b02 	vstr	d7, [r3, #8]
  t85.re = t297.re;
 800487e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004882:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004886:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 800488a:	e9c2 3400 	strd	r3, r4, [r2]
  t85.im = theta3;
 800488e:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8004892:	4bb9      	ldr	r3, [pc, #740]	; (8004b78 <G_q+0x25b0>)
 8004894:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004898:	4439      	add	r1, r7
 800489a:	440b      	add	r3, r1
 800489c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048a0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t84.re = -t297.re;
 80048a4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048a8:	ed93 7b00 	vldr	d7, [r3]
 80048ac:	eeb1 7b47 	vneg.f64	d7, d7
 80048b0:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80048b4:	ed83 7b00 	vstr	d7, [r3]
  t84.im = -theta3;
 80048b8:	4baf      	ldr	r3, [pc, #700]	; (8004b78 <G_q+0x25b0>)
 80048ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80048be:	443a      	add	r2, r7
 80048c0:	4413      	add	r3, r2
 80048c2:	ed93 7b00 	vldr	d7, [r3]
 80048c6:	eeb1 7b47 	vneg.f64	d7, d7
 80048ca:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80048ce:	ed83 7b02 	vstr	d7, [r3, #8]
  t81.re = t297.re;
 80048d2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048d6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048da:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80048de:	e9c2 3400 	strd	r3, r4, [r2]
  t81.im = theta3;
 80048e2:	f507 62ac 	add.w	r2, r7, #1376	; 0x560
 80048e6:	4ba4      	ldr	r3, [pc, #656]	; (8004b78 <G_q+0x25b0>)
 80048e8:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80048ec:	4439      	add	r1, r7
 80048ee:	440b      	add	r3, r1
 80048f0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80048f4:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t80.re = -t297.re;
 80048f8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80048fc:	ed93 7b00 	vldr	d7, [r3]
 8004900:	eeb1 7b47 	vneg.f64	d7, d7
 8004904:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004908:	ed83 7b00 	vstr	d7, [r3]
  t80.im = -theta3;
 800490c:	4b9a      	ldr	r3, [pc, #616]	; (8004b78 <G_q+0x25b0>)
 800490e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004912:	443a      	add	r2, r7
 8004914:	4413      	add	r3, r2
 8004916:	ed93 7b00 	vldr	d7, [r3]
 800491a:	eeb1 7b47 	vneg.f64	d7, d7
 800491e:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8004922:	ed83 7b02 	vstr	d7, [r3, #8]
  t75.re = t297.re;
 8004926:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800492a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800492e:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 8004932:	e9c2 3400 	strd	r3, r4, [r2]
  t75.im = theta3;
 8004936:	f507 62a8 	add.w	r2, r7, #1344	; 0x540
 800493a:	4b8f      	ldr	r3, [pc, #572]	; (8004b78 <G_q+0x25b0>)
 800493c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004940:	4439      	add	r1, r7
 8004942:	440b      	add	r3, r1
 8004944:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004948:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t74.re = -t297.re;
 800494c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004950:	ed93 7b00 	vldr	d7, [r3]
 8004954:	eeb1 7b47 	vneg.f64	d7, d7
 8004958:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 800495c:	ed83 7b00 	vstr	d7, [r3]
  t74.im = -theta3;
 8004960:	4b85      	ldr	r3, [pc, #532]	; (8004b78 <G_q+0x25b0>)
 8004962:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004966:	443a      	add	r2, r7
 8004968:	4413      	add	r3, r2
 800496a:	ed93 7b00 	vldr	d7, [r3]
 800496e:	eeb1 7b47 	vneg.f64	d7, d7
 8004972:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8004976:	ed83 7b02 	vstr	d7, [r3, #8]
  t73.re = t297.re;
 800497a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800497e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004982:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 8004986:	e9c2 3400 	strd	r3, r4, [r2]
  t73.im = theta3;
 800498a:	f507 62a4 	add.w	r2, r7, #1312	; 0x520
 800498e:	4b7a      	ldr	r3, [pc, #488]	; (8004b78 <G_q+0x25b0>)
 8004990:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004994:	4439      	add	r1, r7
 8004996:	440b      	add	r3, r1
 8004998:	e9d3 3400 	ldrd	r3, r4, [r3]
 800499c:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t72.re = -t297.re;
 80049a0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049a4:	ed93 7b00 	vldr	d7, [r3]
 80049a8:	eeb1 7b47 	vneg.f64	d7, d7
 80049ac:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80049b0:	ed83 7b00 	vstr	d7, [r3]
  t72.im = -theta3;
 80049b4:	4b70      	ldr	r3, [pc, #448]	; (8004b78 <G_q+0x25b0>)
 80049b6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80049ba:	443a      	add	r2, r7
 80049bc:	4413      	add	r3, r2
 80049be:	ed93 7b00 	vldr	d7, [r3]
 80049c2:	eeb1 7b47 	vneg.f64	d7, d7
 80049c6:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80049ca:	ed83 7b02 	vstr	d7, [r3, #8]
  t69.re = t297.re;
 80049ce:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049d6:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80049da:	e9c2 3400 	strd	r3, r4, [r2]
  t69.im = theta3;
 80049de:	f507 62a0 	add.w	r2, r7, #1280	; 0x500
 80049e2:	4b65      	ldr	r3, [pc, #404]	; (8004b78 <G_q+0x25b0>)
 80049e4:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80049e8:	4439      	add	r1, r7
 80049ea:	440b      	add	r3, r1
 80049ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 80049f0:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t68.re = -t297.re;
 80049f4:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80049f8:	ed93 7b00 	vldr	d7, [r3]
 80049fc:	eeb1 7b47 	vneg.f64	d7, d7
 8004a00:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004a04:	ed83 7b00 	vstr	d7, [r3]
  t68.im = -theta3;
 8004a08:	4b5b      	ldr	r3, [pc, #364]	; (8004b78 <G_q+0x25b0>)
 8004a0a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a0e:	443a      	add	r2, r7
 8004a10:	4413      	add	r3, r2
 8004a12:	ed93 7b00 	vldr	d7, [r3]
 8004a16:	eeb1 7b47 	vneg.f64	d7, d7
 8004a1a:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8004a1e:	ed83 7b02 	vstr	d7, [r3, #8]
  t65.re = t297.re;
 8004a22:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a2a:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004a2e:	e9c2 3400 	strd	r3, r4, [r2]
  t65.im = theta3;
 8004a32:	f507 629c 	add.w	r2, r7, #1248	; 0x4e0
 8004a36:	4b50      	ldr	r3, [pc, #320]	; (8004b78 <G_q+0x25b0>)
 8004a38:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a3c:	4439      	add	r1, r7
 8004a3e:	440b      	add	r3, r1
 8004a40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a44:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t64.re = -t297.re;
 8004a48:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a4c:	ed93 7b00 	vldr	d7, [r3]
 8004a50:	eeb1 7b47 	vneg.f64	d7, d7
 8004a54:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8004a58:	ed83 7b00 	vstr	d7, [r3]
  t64.im = -theta3;
 8004a5c:	4b46      	ldr	r3, [pc, #280]	; (8004b78 <G_q+0x25b0>)
 8004a5e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004a62:	443a      	add	r2, r7
 8004a64:	4413      	add	r3, r2
 8004a66:	ed93 7b00 	vldr	d7, [r3]
 8004a6a:	eeb1 7b47 	vneg.f64	d7, d7
 8004a6e:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8004a72:	ed83 7b02 	vstr	d7, [r3, #8]
  t52.re = t297.re;
 8004a76:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004a7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a7e:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8004a82:	e9c2 3400 	strd	r3, r4, [r2]
  t52.im = theta3;
 8004a86:	f507 6298 	add.w	r2, r7, #1216	; 0x4c0
 8004a8a:	4b3b      	ldr	r3, [pc, #236]	; (8004b78 <G_q+0x25b0>)
 8004a8c:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004a90:	4439      	add	r1, r7
 8004a92:	440b      	add	r3, r1
 8004a94:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004a98:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t51.re = -t297.re;
 8004a9c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004aa0:	ed93 7b00 	vldr	d7, [r3]
 8004aa4:	eeb1 7b47 	vneg.f64	d7, d7
 8004aa8:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004aac:	ed83 7b00 	vstr	d7, [r3]
  t51.im = -theta3;
 8004ab0:	4b31      	ldr	r3, [pc, #196]	; (8004b78 <G_q+0x25b0>)
 8004ab2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ab6:	443a      	add	r2, r7
 8004ab8:	4413      	add	r3, r2
 8004aba:	ed93 7b00 	vldr	d7, [r3]
 8004abe:	eeb1 7b47 	vneg.f64	d7, d7
 8004ac2:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8004ac6:	ed83 7b02 	vstr	d7, [r3, #8]
  t48.re = t297.re;
 8004aca:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ace:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004ad2:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004ad6:	e9c2 3400 	strd	r3, r4, [r2]
  t48.im = theta3;
 8004ada:	f507 6294 	add.w	r2, r7, #1184	; 0x4a0
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <G_q+0x25b0>)
 8004ae0:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004ae4:	4439      	add	r1, r7
 8004ae6:	440b      	add	r3, r1
 8004ae8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004aec:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t47.re = -t297.re;
 8004af0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004af4:	ed93 7b00 	vldr	d7, [r3]
 8004af8:	eeb1 7b47 	vneg.f64	d7, d7
 8004afc:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004b00:	ed83 7b00 	vstr	d7, [r3]
  t47.im = -theta3;
 8004b04:	4b1c      	ldr	r3, [pc, #112]	; (8004b78 <G_q+0x25b0>)
 8004b06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b0a:	443a      	add	r2, r7
 8004b0c:	4413      	add	r3, r2
 8004b0e:	ed93 7b00 	vldr	d7, [r3]
 8004b12:	eeb1 7b47 	vneg.f64	d7, d7
 8004b16:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8004b1a:	ed83 7b02 	vstr	d7, [r3, #8]
  t38.re = t297.re;
 8004b1e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b22:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b26:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004b2a:	e9c2 3400 	strd	r3, r4, [r2]
  t38.im = theta3;
 8004b2e:	f507 6290 	add.w	r2, r7, #1152	; 0x480
 8004b32:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <G_q+0x25b0>)
 8004b34:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b38:	4439      	add	r1, r7
 8004b3a:	440b      	add	r3, r1
 8004b3c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b40:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t37.re = -t297.re;
 8004b44:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b48:	ed93 7b00 	vldr	d7, [r3]
 8004b4c:	eeb1 7b47 	vneg.f64	d7, d7
 8004b50:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004b54:	ed83 7b00 	vstr	d7, [r3]
  t37.im = -theta3;
 8004b58:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <G_q+0x25b0>)
 8004b5a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004b5e:	443a      	add	r2, r7
 8004b60:	4413      	add	r3, r2
 8004b62:	ed93 7b00 	vldr	d7, [r3]
 8004b66:	eeb1 7b47 	vneg.f64	d7, d7
 8004b6a:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8004b6e:	ed83 7b02 	vstr	d7, [r3, #8]
  t36.re = t297.re;
 8004b72:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004b76:	e001      	b.n	8004b7c <G_q+0x25b4>
 8004b78:	ffffec48 	.word	0xffffec48
 8004b7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b80:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004b84:	e9c2 3400 	strd	r3, r4, [r2]
  t36.im = theta3;
 8004b88:	f507 628c 	add.w	r2, r7, #1120	; 0x460
 8004b8c:	4bc4      	ldr	r3, [pc, #784]	; (8004ea0 <G_q+0x28d8>)
 8004b8e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004b92:	4439      	add	r1, r7
 8004b94:	440b      	add	r3, r1
 8004b96:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004b9a:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t35.re = -t297.re;
 8004b9e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ba2:	ed93 7b00 	vldr	d7, [r3]
 8004ba6:	eeb1 7b47 	vneg.f64	d7, d7
 8004baa:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004bae:	ed83 7b00 	vstr	d7, [r3]
  t35.im = -theta3;
 8004bb2:	4bbb      	ldr	r3, [pc, #748]	; (8004ea0 <G_q+0x28d8>)
 8004bb4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004bb8:	443a      	add	r2, r7
 8004bba:	4413      	add	r3, r2
 8004bbc:	ed93 7b00 	vldr	d7, [r3]
 8004bc0:	eeb1 7b47 	vneg.f64	d7, d7
 8004bc4:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004bc8:	ed83 7b02 	vstr	d7, [r3, #8]
  t32.re = t297.re;
 8004bcc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004bd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bd4:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004bd8:	e9c2 3400 	strd	r3, r4, [r2]
  t32.im = theta3;
 8004bdc:	f507 6288 	add.w	r2, r7, #1088	; 0x440
 8004be0:	4baf      	ldr	r3, [pc, #700]	; (8004ea0 <G_q+0x28d8>)
 8004be2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004be6:	4439      	add	r1, r7
 8004be8:	440b      	add	r3, r1
 8004bea:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004bee:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t31.re = -t297.re;
 8004bf2:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004bf6:	ed93 7b00 	vldr	d7, [r3]
 8004bfa:	eeb1 7b47 	vneg.f64	d7, d7
 8004bfe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004c02:	ed83 7b00 	vstr	d7, [r3]
  t31.im = -theta3;
 8004c06:	4ba6      	ldr	r3, [pc, #664]	; (8004ea0 <G_q+0x28d8>)
 8004c08:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c0c:	443a      	add	r2, r7
 8004c0e:	4413      	add	r3, r2
 8004c10:	ed93 7b00 	vldr	d7, [r3]
 8004c14:	eeb1 7b47 	vneg.f64	d7, d7
 8004c18:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8004c1c:	ed83 7b02 	vstr	d7, [r3, #8]
  t28.re = t297.re;
 8004c20:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c28:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004c2c:	e9c2 3400 	strd	r3, r4, [r2]
  t28.im = theta3;
 8004c30:	f507 6284 	add.w	r2, r7, #1056	; 0x420
 8004c34:	4b9a      	ldr	r3, [pc, #616]	; (8004ea0 <G_q+0x28d8>)
 8004c36:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004c3a:	4439      	add	r1, r7
 8004c3c:	440b      	add	r3, r1
 8004c3e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c42:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t27.re = -t297.re;
 8004c46:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c4a:	ed93 7b00 	vldr	d7, [r3]
 8004c4e:	eeb1 7b47 	vneg.f64	d7, d7
 8004c52:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004c56:	ed83 7b00 	vstr	d7, [r3]
  t27.im = -theta3;
 8004c5a:	4b91      	ldr	r3, [pc, #580]	; (8004ea0 <G_q+0x28d8>)
 8004c5c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004c60:	443a      	add	r2, r7
 8004c62:	4413      	add	r3, r2
 8004c64:	ed93 7b00 	vldr	d7, [r3]
 8004c68:	eeb1 7b47 	vneg.f64	d7, d7
 8004c6c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8004c70:	ed83 7b02 	vstr	d7, [r3, #8]
  t17.re = t297.re;
 8004c74:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c7c:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8004c80:	e9c2 3400 	strd	r3, r4, [r2]
  t17.im = theta3;
 8004c84:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 8004c88:	4b85      	ldr	r3, [pc, #532]	; (8004ea0 <G_q+0x28d8>)
 8004c8a:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004c8e:	4439      	add	r1, r7
 8004c90:	440b      	add	r3, r1
 8004c92:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004c96:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t16.re = -t297.re;
 8004c9a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004c9e:	ed93 7b00 	vldr	d7, [r3]
 8004ca2:	eeb1 7b47 	vneg.f64	d7, d7
 8004ca6:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004caa:	ed83 7b00 	vstr	d7, [r3]
  t16.im = -theta3;
 8004cae:	4b7c      	ldr	r3, [pc, #496]	; (8004ea0 <G_q+0x28d8>)
 8004cb0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004cb4:	443a      	add	r2, r7
 8004cb6:	4413      	add	r3, r2
 8004cb8:	ed93 7b00 	vldr	d7, [r3]
 8004cbc:	eeb1 7b47 	vneg.f64	d7, d7
 8004cc0:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8004cc4:	ed83 7b02 	vstr	d7, [r3, #8]
  t13.re = t297.re;
 8004cc8:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004ccc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cd0:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004cd4:	e9c2 3400 	strd	r3, r4, [r2]
  t13.im = theta3;
 8004cd8:	f507 7278 	add.w	r2, r7, #992	; 0x3e0
 8004cdc:	4b70      	ldr	r3, [pc, #448]	; (8004ea0 <G_q+0x28d8>)
 8004cde:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004ce2:	4439      	add	r1, r7
 8004ce4:	440b      	add	r3, r1
 8004ce6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004cea:	e9c2 3402 	strd	r3, r4, [r2, #8]
  t12.re = -t297.re;
 8004cee:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004cf2:	ed93 7b00 	vldr	d7, [r3]
 8004cf6:	eeb1 7b47 	vneg.f64	d7, d7
 8004cfa:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004cfe:	ed83 7b00 	vstr	d7, [r3]
  t12.im = -theta3;
 8004d02:	4b67      	ldr	r3, [pc, #412]	; (8004ea0 <G_q+0x28d8>)
 8004d04:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d08:	443a      	add	r2, r7
 8004d0a:	4413      	add	r3, r2
 8004d0c:	ed93 7b00 	vldr	d7, [r3]
 8004d10:	eeb1 7b47 	vneg.f64	d7, d7
 8004d14:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8004d18:	ed83 7b02 	vstr	d7, [r3, #8]
  t9.re = t297.re;
 8004d1c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d20:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004d24:	4b5f      	ldr	r3, [pc, #380]	; (8004ea4 <G_q+0x28dc>)
 8004d26:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004d2a:	4438      	add	r0, r7
 8004d2c:	4403      	add	r3, r0
 8004d2e:	e9c3 1200 	strd	r1, r2, [r3]
  t9.im = theta3;
 8004d32:	4b5c      	ldr	r3, [pc, #368]	; (8004ea4 <G_q+0x28dc>)
 8004d34:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d38:	443a      	add	r2, r7
 8004d3a:	4413      	add	r3, r2
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <G_q+0x28d8>)
 8004d3e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8004d42:	4439      	add	r1, r7
 8004d44:	440a      	add	r2, r1
 8004d46:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004d4a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t8.re = -t297.re;
 8004d4e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8004d52:	ed93 7b00 	vldr	d7, [r3]
 8004d56:	eeb1 7b47 	vneg.f64	d7, d7
 8004d5a:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004d5e:	ed83 7b00 	vstr	d7, [r3]
  t8.im = -theta3;
 8004d62:	4b4f      	ldr	r3, [pc, #316]	; (8004ea0 <G_q+0x28d8>)
 8004d64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d68:	443a      	add	r2, r7
 8004d6a:	4413      	add	r3, r2
 8004d6c:	ed93 7b00 	vldr	d7, [r3]
 8004d70:	eeb1 7b47 	vneg.f64	d7, d7
 8004d74:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004d78:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t8);
 8004d7c:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8004d80:	4618      	mov	r0, r3
 8004d82:	f00d fd2d 	bl	80127e0 <b_exp>
  t285.re = theta4 * 0.0;
 8004d86:	f107 0310 	add.w	r3, r7, #16
 8004d8a:	ed93 7b00 	vldr	d7, [r3]
 8004d8e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004e98 <G_q+0x28d0>
 8004d92:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004d96:	4b44      	ldr	r3, [pc, #272]	; (8004ea8 <G_q+0x28e0>)
 8004d98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004d9c:	443a      	add	r2, r7
 8004d9e:	4413      	add	r3, r2
 8004da0:	ed83 7b00 	vstr	d7, [r3]
  t285.im = theta4;
 8004da4:	4b40      	ldr	r3, [pc, #256]	; (8004ea8 <G_q+0x28e0>)
 8004da6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004daa:	443a      	add	r2, r7
 8004dac:	4413      	add	r3, r2
 8004dae:	f107 0210 	add.w	r2, r7, #16
 8004db2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004db6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t284.re = -t285.re;
 8004dba:	4b3b      	ldr	r3, [pc, #236]	; (8004ea8 <G_q+0x28e0>)
 8004dbc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dc0:	443a      	add	r2, r7
 8004dc2:	4413      	add	r3, r2
 8004dc4:	ed93 7b00 	vldr	d7, [r3]
 8004dc8:	eeb1 7b47 	vneg.f64	d7, d7
 8004dcc:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004dd0:	ed83 7b00 	vstr	d7, [r3]
  t284.im = -theta4;
 8004dd4:	f107 0310 	add.w	r3, r7, #16
 8004dd8:	ed93 7b00 	vldr	d7, [r3]
 8004ddc:	eeb1 7b47 	vneg.f64	d7, d7
 8004de0:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8004de4:	ed83 7b02 	vstr	d7, [r3, #8]
  t279.re = t285.re;
 8004de8:	4b2f      	ldr	r3, [pc, #188]	; (8004ea8 <G_q+0x28e0>)
 8004dea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004dee:	443a      	add	r2, r7
 8004df0:	4413      	add	r3, r2
 8004df2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004df6:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <G_q+0x28e4>)
 8004df8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004dfc:	4438      	add	r0, r7
 8004dfe:	4403      	add	r3, r0
 8004e00:	e9c3 1200 	strd	r1, r2, [r3]
  t279.im = theta4;
 8004e04:	4b29      	ldr	r3, [pc, #164]	; (8004eac <G_q+0x28e4>)
 8004e06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e0a:	443a      	add	r2, r7
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f107 0210 	add.w	r2, r7, #16
 8004e12:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e16:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t278.re = -t285.re;
 8004e1a:	4b23      	ldr	r3, [pc, #140]	; (8004ea8 <G_q+0x28e0>)
 8004e1c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e20:	443a      	add	r2, r7
 8004e22:	4413      	add	r3, r2
 8004e24:	ed93 7b00 	vldr	d7, [r3]
 8004e28:	eeb1 7b47 	vneg.f64	d7, d7
 8004e2c:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e30:	ed83 7b00 	vstr	d7, [r3]
  t278.im = -theta4;
 8004e34:	f107 0310 	add.w	r3, r7, #16
 8004e38:	ed93 7b00 	vldr	d7, [r3]
 8004e3c:	eeb1 7b47 	vneg.f64	d7, d7
 8004e40:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8004e44:	ed83 7b02 	vstr	d7, [r3, #8]
  t255.re = t285.re;
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <G_q+0x28e0>)
 8004e4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e4e:	443a      	add	r2, r7
 8004e50:	4413      	add	r3, r2
 8004e52:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004e56:	4b16      	ldr	r3, [pc, #88]	; (8004eb0 <G_q+0x28e8>)
 8004e58:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004e5c:	4438      	add	r0, r7
 8004e5e:	4403      	add	r3, r0
 8004e60:	e9c3 1200 	strd	r1, r2, [r3]
  t255.im = theta4;
 8004e64:	4b12      	ldr	r3, [pc, #72]	; (8004eb0 <G_q+0x28e8>)
 8004e66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e6a:	443a      	add	r2, r7
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f107 0210 	add.w	r2, r7, #16
 8004e72:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004e76:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t254.re = -t285.re;
 8004e7a:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <G_q+0x28e0>)
 8004e7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004e80:	443a      	add	r2, r7
 8004e82:	4413      	add	r3, r2
 8004e84:	ed93 7b00 	vldr	d7, [r3]
 8004e88:	eeb1 7b47 	vneg.f64	d7, d7
 8004e8c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004e90:	ed83 7b00 	vstr	d7, [r3]
 8004e94:	e00e      	b.n	8004eb4 <G_q+0x28ec>
 8004e96:	bf00      	nop
	...
 8004ea0:	ffffec48 	.word	0xffffec48
 8004ea4:	ffffeff0 	.word	0xffffeff0
 8004ea8:	ffffefd0 	.word	0xffffefd0
 8004eac:	ffffefb0 	.word	0xffffefb0
 8004eb0:	ffffef90 	.word	0xffffef90
  t254.im = -theta4;
 8004eb4:	f107 0310 	add.w	r3, r7, #16
 8004eb8:	ed93 7b00 	vldr	d7, [r3]
 8004ebc:	eeb1 7b47 	vneg.f64	d7, d7
 8004ec0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8004ec4:	ed83 7b02 	vstr	d7, [r3, #8]
  t243.re = t285.re;
 8004ec8:	4bbd      	ldr	r3, [pc, #756]	; (80051c0 <G_q+0x2bf8>)
 8004eca:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004ece:	443a      	add	r2, r7
 8004ed0:	4413      	add	r3, r2
 8004ed2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004ed6:	4bbb      	ldr	r3, [pc, #748]	; (80051c4 <G_q+0x2bfc>)
 8004ed8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004edc:	4438      	add	r0, r7
 8004ede:	4403      	add	r3, r0
 8004ee0:	e9c3 1200 	strd	r1, r2, [r3]
  t243.im = theta4;
 8004ee4:	4bb7      	ldr	r3, [pc, #732]	; (80051c4 <G_q+0x2bfc>)
 8004ee6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004eea:	443a      	add	r2, r7
 8004eec:	4413      	add	r3, r2
 8004eee:	f107 0210 	add.w	r2, r7, #16
 8004ef2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004ef6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t242.re = -t285.re;
 8004efa:	4bb1      	ldr	r3, [pc, #708]	; (80051c0 <G_q+0x2bf8>)
 8004efc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f00:	443a      	add	r2, r7
 8004f02:	4413      	add	r3, r2
 8004f04:	ed93 7b00 	vldr	d7, [r3]
 8004f08:	eeb1 7b47 	vneg.f64	d7, d7
 8004f0c:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004f10:	ed83 7b00 	vstr	d7, [r3]
  t242.im = -theta4;
 8004f14:	f107 0310 	add.w	r3, r7, #16
 8004f18:	ed93 7b00 	vldr	d7, [r3]
 8004f1c:	eeb1 7b47 	vneg.f64	d7, d7
 8004f20:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8004f24:	ed83 7b02 	vstr	d7, [r3, #8]
  t231.re = t285.re;
 8004f28:	4ba5      	ldr	r3, [pc, #660]	; (80051c0 <G_q+0x2bf8>)
 8004f2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f2e:	443a      	add	r2, r7
 8004f30:	4413      	add	r3, r2
 8004f32:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004f36:	4ba4      	ldr	r3, [pc, #656]	; (80051c8 <G_q+0x2c00>)
 8004f38:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004f3c:	4438      	add	r0, r7
 8004f3e:	4403      	add	r3, r0
 8004f40:	e9c3 1200 	strd	r1, r2, [r3]
  t231.im = theta4;
 8004f44:	4ba0      	ldr	r3, [pc, #640]	; (80051c8 <G_q+0x2c00>)
 8004f46:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f4a:	443a      	add	r2, r7
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f107 0210 	add.w	r2, r7, #16
 8004f52:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004f56:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t230.re = -t285.re;
 8004f5a:	4b99      	ldr	r3, [pc, #612]	; (80051c0 <G_q+0x2bf8>)
 8004f5c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f60:	443a      	add	r2, r7
 8004f62:	4413      	add	r3, r2
 8004f64:	ed93 7b00 	vldr	d7, [r3]
 8004f68:	eeb1 7b47 	vneg.f64	d7, d7
 8004f6c:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004f70:	ed83 7b00 	vstr	d7, [r3]
  t230.im = -theta4;
 8004f74:	f107 0310 	add.w	r3, r7, #16
 8004f78:	ed93 7b00 	vldr	d7, [r3]
 8004f7c:	eeb1 7b47 	vneg.f64	d7, d7
 8004f80:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8004f84:	ed83 7b02 	vstr	d7, [r3, #8]
  t229.re = t285.re;
 8004f88:	4b8d      	ldr	r3, [pc, #564]	; (80051c0 <G_q+0x2bf8>)
 8004f8a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004f8e:	443a      	add	r2, r7
 8004f90:	4413      	add	r3, r2
 8004f92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004f96:	4b8d      	ldr	r3, [pc, #564]	; (80051cc <G_q+0x2c04>)
 8004f98:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004f9c:	4438      	add	r0, r7
 8004f9e:	4403      	add	r3, r0
 8004fa0:	e9c3 1200 	strd	r1, r2, [r3]
  t229.im = theta4;
 8004fa4:	4b89      	ldr	r3, [pc, #548]	; (80051cc <G_q+0x2c04>)
 8004fa6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004faa:	443a      	add	r2, r7
 8004fac:	4413      	add	r3, r2
 8004fae:	f107 0210 	add.w	r2, r7, #16
 8004fb2:	e9d2 1200 	ldrd	r1, r2, [r2]
 8004fb6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t228.re = -t285.re;
 8004fba:	4b81      	ldr	r3, [pc, #516]	; (80051c0 <G_q+0x2bf8>)
 8004fbc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fc0:	443a      	add	r2, r7
 8004fc2:	4413      	add	r3, r2
 8004fc4:	ed93 7b00 	vldr	d7, [r3]
 8004fc8:	eeb1 7b47 	vneg.f64	d7, d7
 8004fcc:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004fd0:	ed83 7b00 	vstr	d7, [r3]
  t228.im = -theta4;
 8004fd4:	f107 0310 	add.w	r3, r7, #16
 8004fd8:	ed93 7b00 	vldr	d7, [r3]
 8004fdc:	eeb1 7b47 	vneg.f64	d7, d7
 8004fe0:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8004fe4:	ed83 7b02 	vstr	d7, [r3, #8]
  t209.re = t285.re;
 8004fe8:	4b75      	ldr	r3, [pc, #468]	; (80051c0 <G_q+0x2bf8>)
 8004fea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8004fee:	443a      	add	r2, r7
 8004ff0:	4413      	add	r3, r2
 8004ff2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <G_q+0x2c08>)
 8004ff8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8004ffc:	4438      	add	r0, r7
 8004ffe:	4403      	add	r3, r0
 8005000:	e9c3 1200 	strd	r1, r2, [r3]
  t209.im = theta4;
 8005004:	4b72      	ldr	r3, [pc, #456]	; (80051d0 <G_q+0x2c08>)
 8005006:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800500a:	443a      	add	r2, r7
 800500c:	4413      	add	r3, r2
 800500e:	f107 0210 	add.w	r2, r7, #16
 8005012:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005016:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t208.re = -t285.re;
 800501a:	4b69      	ldr	r3, [pc, #420]	; (80051c0 <G_q+0x2bf8>)
 800501c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005020:	443a      	add	r2, r7
 8005022:	4413      	add	r3, r2
 8005024:	ed93 7b00 	vldr	d7, [r3]
 8005028:	eeb1 7b47 	vneg.f64	d7, d7
 800502c:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005030:	ed83 7b00 	vstr	d7, [r3]
  t208.im = -theta4;
 8005034:	f107 0310 	add.w	r3, r7, #16
 8005038:	ed93 7b00 	vldr	d7, [r3]
 800503c:	eeb1 7b47 	vneg.f64	d7, d7
 8005040:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 8005044:	ed83 7b02 	vstr	d7, [r3, #8]
  t197.re = t285.re;
 8005048:	4b5d      	ldr	r3, [pc, #372]	; (80051c0 <G_q+0x2bf8>)
 800504a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800504e:	443a      	add	r2, r7
 8005050:	4413      	add	r3, r2
 8005052:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005056:	4b5f      	ldr	r3, [pc, #380]	; (80051d4 <G_q+0x2c0c>)
 8005058:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800505c:	4438      	add	r0, r7
 800505e:	4403      	add	r3, r0
 8005060:	e9c3 1200 	strd	r1, r2, [r3]
  t197.im = theta4;
 8005064:	4b5b      	ldr	r3, [pc, #364]	; (80051d4 <G_q+0x2c0c>)
 8005066:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800506a:	443a      	add	r2, r7
 800506c:	4413      	add	r3, r2
 800506e:	f107 0210 	add.w	r2, r7, #16
 8005072:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005076:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t196.re = -t285.re;
 800507a:	4b51      	ldr	r3, [pc, #324]	; (80051c0 <G_q+0x2bf8>)
 800507c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005080:	443a      	add	r2, r7
 8005082:	4413      	add	r3, r2
 8005084:	ed93 7b00 	vldr	d7, [r3]
 8005088:	eeb1 7b47 	vneg.f64	d7, d7
 800508c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8005090:	ed83 7b00 	vstr	d7, [r3]
  t196.im = -theta4;
 8005094:	f107 0310 	add.w	r3, r7, #16
 8005098:	ed93 7b00 	vldr	d7, [r3]
 800509c:	eeb1 7b47 	vneg.f64	d7, d7
 80050a0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80050a4:	ed83 7b02 	vstr	d7, [r3, #8]
  t185.re = t285.re;
 80050a8:	4b45      	ldr	r3, [pc, #276]	; (80051c0 <G_q+0x2bf8>)
 80050aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050ae:	443a      	add	r2, r7
 80050b0:	4413      	add	r3, r2
 80050b2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80050b6:	4b48      	ldr	r3, [pc, #288]	; (80051d8 <G_q+0x2c10>)
 80050b8:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80050bc:	4438      	add	r0, r7
 80050be:	4403      	add	r3, r0
 80050c0:	e9c3 1200 	strd	r1, r2, [r3]
  t185.im = theta4;
 80050c4:	4b44      	ldr	r3, [pc, #272]	; (80051d8 <G_q+0x2c10>)
 80050c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050ca:	443a      	add	r2, r7
 80050cc:	4413      	add	r3, r2
 80050ce:	f107 0210 	add.w	r2, r7, #16
 80050d2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80050d6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t184.re = -t285.re;
 80050da:	4b39      	ldr	r3, [pc, #228]	; (80051c0 <G_q+0x2bf8>)
 80050dc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80050e0:	443a      	add	r2, r7
 80050e2:	4413      	add	r3, r2
 80050e4:	ed93 7b00 	vldr	d7, [r3]
 80050e8:	eeb1 7b47 	vneg.f64	d7, d7
 80050ec:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80050f0:	ed83 7b00 	vstr	d7, [r3]
  t184.im = -theta4;
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	ed93 7b00 	vldr	d7, [r3]
 80050fc:	eeb1 7b47 	vneg.f64	d7, d7
 8005100:	f507 7324 	add.w	r3, r7, #656	; 0x290
 8005104:	ed83 7b02 	vstr	d7, [r3, #8]
  t173.re = t285.re;
 8005108:	4b2d      	ldr	r3, [pc, #180]	; (80051c0 <G_q+0x2bf8>)
 800510a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800510e:	443a      	add	r2, r7
 8005110:	4413      	add	r3, r2
 8005112:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005116:	4b31      	ldr	r3, [pc, #196]	; (80051dc <G_q+0x2c14>)
 8005118:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800511c:	4438      	add	r0, r7
 800511e:	4403      	add	r3, r0
 8005120:	e9c3 1200 	strd	r1, r2, [r3]
  t173.im = theta4;
 8005124:	4b2d      	ldr	r3, [pc, #180]	; (80051dc <G_q+0x2c14>)
 8005126:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800512a:	443a      	add	r2, r7
 800512c:	4413      	add	r3, r2
 800512e:	f107 0210 	add.w	r2, r7, #16
 8005132:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005136:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t172.re = -t285.re;
 800513a:	4b21      	ldr	r3, [pc, #132]	; (80051c0 <G_q+0x2bf8>)
 800513c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005140:	443a      	add	r2, r7
 8005142:	4413      	add	r3, r2
 8005144:	ed93 7b00 	vldr	d7, [r3]
 8005148:	eeb1 7b47 	vneg.f64	d7, d7
 800514c:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005150:	ed83 7b00 	vstr	d7, [r3]
  t172.im = -theta4;
 8005154:	f107 0310 	add.w	r3, r7, #16
 8005158:	ed93 7b00 	vldr	d7, [r3]
 800515c:	eeb1 7b47 	vneg.f64	d7, d7
 8005160:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005164:	ed83 7b02 	vstr	d7, [r3, #8]
  t159.re = t285.re;
 8005168:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <G_q+0x2bf8>)
 800516a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800516e:	443a      	add	r2, r7
 8005170:	4413      	add	r3, r2
 8005172:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005176:	4b1a      	ldr	r3, [pc, #104]	; (80051e0 <G_q+0x2c18>)
 8005178:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800517c:	4438      	add	r0, r7
 800517e:	4403      	add	r3, r0
 8005180:	e9c3 1200 	strd	r1, r2, [r3]
  t159.im = theta4;
 8005184:	4b16      	ldr	r3, [pc, #88]	; (80051e0 <G_q+0x2c18>)
 8005186:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800518a:	443a      	add	r2, r7
 800518c:	4413      	add	r3, r2
 800518e:	f107 0210 	add.w	r2, r7, #16
 8005192:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005196:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t158.re = -t285.re;
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <G_q+0x2bf8>)
 800519c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051a0:	443a      	add	r2, r7
 80051a2:	4413      	add	r3, r2
 80051a4:	ed93 7b00 	vldr	d7, [r3]
 80051a8:	eeb1 7b47 	vneg.f64	d7, d7
 80051ac:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051b0:	ed83 7b00 	vstr	d7, [r3]
  t158.im = -theta4;
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	ed93 7b00 	vldr	d7, [r3]
 80051bc:	e012      	b.n	80051e4 <G_q+0x2c1c>
 80051be:	bf00      	nop
 80051c0:	ffffefd0 	.word	0xffffefd0
 80051c4:	ffffef70 	.word	0xffffef70
 80051c8:	ffffef50 	.word	0xffffef50
 80051cc:	ffffef30 	.word	0xffffef30
 80051d0:	ffffef10 	.word	0xffffef10
 80051d4:	ffffeef0 	.word	0xffffeef0
 80051d8:	ffffeed0 	.word	0xffffeed0
 80051dc:	ffffeeb0 	.word	0xffffeeb0
 80051e0:	ffffee90 	.word	0xffffee90
 80051e4:	eeb1 7b47 	vneg.f64	d7, d7
 80051e8:	f507 7314 	add.w	r3, r7, #592	; 0x250
 80051ec:	ed83 7b02 	vstr	d7, [r3, #8]
  t153.re = t285.re;
 80051f0:	4bbd      	ldr	r3, [pc, #756]	; (80054e8 <G_q+0x2f20>)
 80051f2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80051f6:	443a      	add	r2, r7
 80051f8:	4413      	add	r3, r2
 80051fa:	e9d3 1200 	ldrd	r1, r2, [r3]
 80051fe:	4bbb      	ldr	r3, [pc, #748]	; (80054ec <G_q+0x2f24>)
 8005200:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005204:	4438      	add	r0, r7
 8005206:	4403      	add	r3, r0
 8005208:	e9c3 1200 	strd	r1, r2, [r3]
  t153.im = theta4;
 800520c:	4bb7      	ldr	r3, [pc, #732]	; (80054ec <G_q+0x2f24>)
 800520e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005212:	443a      	add	r2, r7
 8005214:	4413      	add	r3, r2
 8005216:	f107 0210 	add.w	r2, r7, #16
 800521a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800521e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t152.re = -t285.re;
 8005222:	4bb1      	ldr	r3, [pc, #708]	; (80054e8 <G_q+0x2f20>)
 8005224:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005228:	443a      	add	r2, r7
 800522a:	4413      	add	r3, r2
 800522c:	ed93 7b00 	vldr	d7, [r3]
 8005230:	eeb1 7b47 	vneg.f64	d7, d7
 8005234:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005238:	ed83 7b00 	vstr	d7, [r3]
  t152.im = -theta4;
 800523c:	f107 0310 	add.w	r3, r7, #16
 8005240:	ed93 7b00 	vldr	d7, [r3]
 8005244:	eeb1 7b47 	vneg.f64	d7, d7
 8005248:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800524c:	ed83 7b02 	vstr	d7, [r3, #8]
  t135.re = t285.re;
 8005250:	4ba5      	ldr	r3, [pc, #660]	; (80054e8 <G_q+0x2f20>)
 8005252:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005256:	443a      	add	r2, r7
 8005258:	4413      	add	r3, r2
 800525a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800525e:	4ba4      	ldr	r3, [pc, #656]	; (80054f0 <G_q+0x2f28>)
 8005260:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005264:	4438      	add	r0, r7
 8005266:	4403      	add	r3, r0
 8005268:	e9c3 1200 	strd	r1, r2, [r3]
  t135.im = theta4;
 800526c:	4ba0      	ldr	r3, [pc, #640]	; (80054f0 <G_q+0x2f28>)
 800526e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005272:	443a      	add	r2, r7
 8005274:	4413      	add	r3, r2
 8005276:	f107 0210 	add.w	r2, r7, #16
 800527a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800527e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t134.re = -t285.re;
 8005282:	4b99      	ldr	r3, [pc, #612]	; (80054e8 <G_q+0x2f20>)
 8005284:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005288:	443a      	add	r2, r7
 800528a:	4413      	add	r3, r2
 800528c:	ed93 7b00 	vldr	d7, [r3]
 8005290:	eeb1 7b47 	vneg.f64	d7, d7
 8005294:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005298:	ed83 7b00 	vstr	d7, [r3]
  t134.im = -theta4;
 800529c:	f107 0310 	add.w	r3, r7, #16
 80052a0:	ed93 7b00 	vldr	d7, [r3]
 80052a4:	eeb1 7b47 	vneg.f64	d7, d7
 80052a8:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80052ac:	ed83 7b02 	vstr	d7, [r3, #8]
  t123.re = t285.re;
 80052b0:	4b8d      	ldr	r3, [pc, #564]	; (80054e8 <G_q+0x2f20>)
 80052b2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052b6:	443a      	add	r2, r7
 80052b8:	4413      	add	r3, r2
 80052ba:	e9d3 1200 	ldrd	r1, r2, [r3]
 80052be:	4b8d      	ldr	r3, [pc, #564]	; (80054f4 <G_q+0x2f2c>)
 80052c0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80052c4:	4438      	add	r0, r7
 80052c6:	4403      	add	r3, r0
 80052c8:	e9c3 1200 	strd	r1, r2, [r3]
  t123.im = theta4;
 80052cc:	4b89      	ldr	r3, [pc, #548]	; (80054f4 <G_q+0x2f2c>)
 80052ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052d2:	443a      	add	r2, r7
 80052d4:	4413      	add	r3, r2
 80052d6:	f107 0210 	add.w	r2, r7, #16
 80052da:	e9d2 1200 	ldrd	r1, r2, [r2]
 80052de:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t122.re = -t285.re;
 80052e2:	4b81      	ldr	r3, [pc, #516]	; (80054e8 <G_q+0x2f20>)
 80052e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80052e8:	443a      	add	r2, r7
 80052ea:	4413      	add	r3, r2
 80052ec:	ed93 7b00 	vldr	d7, [r3]
 80052f0:	eeb1 7b47 	vneg.f64	d7, d7
 80052f4:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 80052f8:	ed83 7b00 	vstr	d7, [r3]
  t122.im = -theta4;
 80052fc:	f107 0310 	add.w	r3, r7, #16
 8005300:	ed93 7b00 	vldr	d7, [r3]
 8005304:	eeb1 7b47 	vneg.f64	d7, d7
 8005308:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800530c:	ed83 7b02 	vstr	d7, [r3, #8]
  t103.re = t285.re;
 8005310:	4b75      	ldr	r3, [pc, #468]	; (80054e8 <G_q+0x2f20>)
 8005312:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005316:	443a      	add	r2, r7
 8005318:	4413      	add	r3, r2
 800531a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800531e:	4b76      	ldr	r3, [pc, #472]	; (80054f8 <G_q+0x2f30>)
 8005320:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005324:	4438      	add	r0, r7
 8005326:	4403      	add	r3, r0
 8005328:	e9c3 1200 	strd	r1, r2, [r3]
  t103.im = theta4;
 800532c:	4b72      	ldr	r3, [pc, #456]	; (80054f8 <G_q+0x2f30>)
 800532e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005332:	443a      	add	r2, r7
 8005334:	4413      	add	r3, r2
 8005336:	f107 0210 	add.w	r2, r7, #16
 800533a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800533e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t102.re = -t285.re;
 8005342:	4b69      	ldr	r3, [pc, #420]	; (80054e8 <G_q+0x2f20>)
 8005344:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005348:	443a      	add	r2, r7
 800534a:	4413      	add	r3, r2
 800534c:	ed93 7b00 	vldr	d7, [r3]
 8005350:	eeb1 7b47 	vneg.f64	d7, d7
 8005354:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005358:	ed83 7b00 	vstr	d7, [r3]
  t102.im = -theta4;
 800535c:	f107 0310 	add.w	r3, r7, #16
 8005360:	ed93 7b00 	vldr	d7, [r3]
 8005364:	eeb1 7b47 	vneg.f64	d7, d7
 8005368:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800536c:	ed83 7b02 	vstr	d7, [r3, #8]
  t101.re = t285.re;
 8005370:	4b5d      	ldr	r3, [pc, #372]	; (80054e8 <G_q+0x2f20>)
 8005372:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005376:	443a      	add	r2, r7
 8005378:	4413      	add	r3, r2
 800537a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800537e:	4b5f      	ldr	r3, [pc, #380]	; (80054fc <G_q+0x2f34>)
 8005380:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005384:	4438      	add	r0, r7
 8005386:	4403      	add	r3, r0
 8005388:	e9c3 1200 	strd	r1, r2, [r3]
  t101.im = theta4;
 800538c:	4b5b      	ldr	r3, [pc, #364]	; (80054fc <G_q+0x2f34>)
 800538e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005392:	443a      	add	r2, r7
 8005394:	4413      	add	r3, r2
 8005396:	f107 0210 	add.w	r2, r7, #16
 800539a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800539e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t100.re = -t285.re;
 80053a2:	4b51      	ldr	r3, [pc, #324]	; (80054e8 <G_q+0x2f20>)
 80053a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053a8:	443a      	add	r2, r7
 80053aa:	4413      	add	r3, r2
 80053ac:	ed93 7b00 	vldr	d7, [r3]
 80053b0:	eeb1 7b47 	vneg.f64	d7, d7
 80053b4:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80053b8:	ed83 7b00 	vstr	d7, [r3]
  t100.im = -theta4;
 80053bc:	f107 0310 	add.w	r3, r7, #16
 80053c0:	ed93 7b00 	vldr	d7, [r3]
 80053c4:	eeb1 7b47 	vneg.f64	d7, d7
 80053c8:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80053cc:	ed83 7b02 	vstr	d7, [r3, #8]
  t87.re = t285.re;
 80053d0:	4b45      	ldr	r3, [pc, #276]	; (80054e8 <G_q+0x2f20>)
 80053d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053d6:	443a      	add	r2, r7
 80053d8:	4413      	add	r3, r2
 80053da:	e9d3 1200 	ldrd	r1, r2, [r3]
 80053de:	4b48      	ldr	r3, [pc, #288]	; (8005500 <G_q+0x2f38>)
 80053e0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80053e4:	4438      	add	r0, r7
 80053e6:	4403      	add	r3, r0
 80053e8:	e9c3 1200 	strd	r1, r2, [r3]
  t87.im = theta4;
 80053ec:	4b44      	ldr	r3, [pc, #272]	; (8005500 <G_q+0x2f38>)
 80053ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80053f2:	443a      	add	r2, r7
 80053f4:	4413      	add	r3, r2
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	e9d2 1200 	ldrd	r1, r2, [r2]
 80053fe:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t86.re = -t285.re;
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <G_q+0x2f20>)
 8005404:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005408:	443a      	add	r2, r7
 800540a:	4413      	add	r3, r2
 800540c:	ed93 7b00 	vldr	d7, [r3]
 8005410:	eeb1 7b47 	vneg.f64	d7, d7
 8005414:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005418:	ed83 7b00 	vstr	d7, [r3]
  t86.im = -theta4;
 800541c:	f107 0310 	add.w	r3, r7, #16
 8005420:	ed93 7b00 	vldr	d7, [r3]
 8005424:	eeb1 7b47 	vneg.f64	d7, d7
 8005428:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 800542c:	ed83 7b02 	vstr	d7, [r3, #8]
  t59.re = t285.re;
 8005430:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <G_q+0x2f20>)
 8005432:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005436:	443a      	add	r2, r7
 8005438:	4413      	add	r3, r2
 800543a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800543e:	4b31      	ldr	r3, [pc, #196]	; (8005504 <G_q+0x2f3c>)
 8005440:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005444:	4438      	add	r0, r7
 8005446:	4403      	add	r3, r0
 8005448:	e9c3 1200 	strd	r1, r2, [r3]
  t59.im = theta4;
 800544c:	4b2d      	ldr	r3, [pc, #180]	; (8005504 <G_q+0x2f3c>)
 800544e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005452:	443a      	add	r2, r7
 8005454:	4413      	add	r3, r2
 8005456:	f107 0210 	add.w	r2, r7, #16
 800545a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800545e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t58.re = -t285.re;
 8005462:	4b21      	ldr	r3, [pc, #132]	; (80054e8 <G_q+0x2f20>)
 8005464:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005468:	443a      	add	r2, r7
 800546a:	4413      	add	r3, r2
 800546c:	ed93 7b00 	vldr	d7, [r3]
 8005470:	eeb1 7b47 	vneg.f64	d7, d7
 8005474:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005478:	ed83 7b00 	vstr	d7, [r3]
  t58.im = -theta4;
 800547c:	f107 0310 	add.w	r3, r7, #16
 8005480:	ed93 7b00 	vldr	d7, [r3]
 8005484:	eeb1 7b47 	vneg.f64	d7, d7
 8005488:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800548c:	ed83 7b02 	vstr	d7, [r3, #8]
  t42.re = t285.re;
 8005490:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <G_q+0x2f20>)
 8005492:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005496:	443a      	add	r2, r7
 8005498:	4413      	add	r3, r2
 800549a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800549e:	4b1a      	ldr	r3, [pc, #104]	; (8005508 <G_q+0x2f40>)
 80054a0:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80054a4:	4438      	add	r0, r7
 80054a6:	4403      	add	r3, r0
 80054a8:	e9c3 1200 	strd	r1, r2, [r3]
  t42.im = theta4;
 80054ac:	4b16      	ldr	r3, [pc, #88]	; (8005508 <G_q+0x2f40>)
 80054ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054b2:	443a      	add	r2, r7
 80054b4:	4413      	add	r3, r2
 80054b6:	f107 0210 	add.w	r2, r7, #16
 80054ba:	e9d2 1200 	ldrd	r1, r2, [r2]
 80054be:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t41.re = -t285.re;
 80054c2:	4b09      	ldr	r3, [pc, #36]	; (80054e8 <G_q+0x2f20>)
 80054c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80054c8:	443a      	add	r2, r7
 80054ca:	4413      	add	r3, r2
 80054cc:	ed93 7b00 	vldr	d7, [r3]
 80054d0:	eeb1 7b47 	vneg.f64	d7, d7
 80054d4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 80054d8:	ed83 7b00 	vstr	d7, [r3]
  t41.im = -theta4;
 80054dc:	f107 0310 	add.w	r3, r7, #16
 80054e0:	ed93 7b00 	vldr	d7, [r3]
 80054e4:	e012      	b.n	800550c <G_q+0x2f44>
 80054e6:	bf00      	nop
 80054e8:	ffffefd0 	.word	0xffffefd0
 80054ec:	ffffee70 	.word	0xffffee70
 80054f0:	ffffee50 	.word	0xffffee50
 80054f4:	ffffee30 	.word	0xffffee30
 80054f8:	ffffee10 	.word	0xffffee10
 80054fc:	ffffedf0 	.word	0xffffedf0
 8005500:	ffffedd0 	.word	0xffffedd0
 8005504:	ffffedb0 	.word	0xffffedb0
 8005508:	ffffed90 	.word	0xffffed90
 800550c:	eeb1 7b47 	vneg.f64	d7, d7
 8005510:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005514:	ed83 7b02 	vstr	d7, [r3, #8]
  t22.re = t285.re;
 8005518:	4bbd      	ldr	r3, [pc, #756]	; (8005810 <G_q+0x3248>)
 800551a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800551e:	443a      	add	r2, r7
 8005520:	4413      	add	r3, r2
 8005522:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005526:	4bbb      	ldr	r3, [pc, #748]	; (8005814 <G_q+0x324c>)
 8005528:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800552c:	4438      	add	r0, r7
 800552e:	4403      	add	r3, r0
 8005530:	e9c3 1200 	strd	r1, r2, [r3]
  t22.im = theta4;
 8005534:	4bb7      	ldr	r3, [pc, #732]	; (8005814 <G_q+0x324c>)
 8005536:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800553a:	443a      	add	r2, r7
 800553c:	4413      	add	r3, r2
 800553e:	f107 0210 	add.w	r2, r7, #16
 8005542:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005546:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t21.re = -t285.re;
 800554a:	4bb1      	ldr	r3, [pc, #708]	; (8005810 <G_q+0x3248>)
 800554c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005550:	443a      	add	r2, r7
 8005552:	4413      	add	r3, r2
 8005554:	ed93 7b00 	vldr	d7, [r3]
 8005558:	eeb1 7b47 	vneg.f64	d7, d7
 800555c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005560:	ed83 7b00 	vstr	d7, [r3]
  t21.im = -theta4;
 8005564:	f107 0310 	add.w	r3, r7, #16
 8005568:	ed93 7b00 	vldr	d7, [r3]
 800556c:	eeb1 7b47 	vneg.f64	d7, d7
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	ed83 7b02 	vstr	d7, [r3, #8]
  t20.re = t285.re;
 8005578:	4ba5      	ldr	r3, [pc, #660]	; (8005810 <G_q+0x3248>)
 800557a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800557e:	443a      	add	r2, r7
 8005580:	4413      	add	r3, r2
 8005582:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005586:	4ba4      	ldr	r3, [pc, #656]	; (8005818 <G_q+0x3250>)
 8005588:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800558c:	4438      	add	r0, r7
 800558e:	4403      	add	r3, r0
 8005590:	e9c3 1200 	strd	r1, r2, [r3]
  t20.im = theta4;
 8005594:	4ba0      	ldr	r3, [pc, #640]	; (8005818 <G_q+0x3250>)
 8005596:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800559a:	443a      	add	r2, r7
 800559c:	4413      	add	r3, r2
 800559e:	f107 0210 	add.w	r2, r7, #16
 80055a2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80055a6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t19.re = -t285.re;
 80055aa:	4b99      	ldr	r3, [pc, #612]	; (8005810 <G_q+0x3248>)
 80055ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055b0:	443a      	add	r2, r7
 80055b2:	4413      	add	r3, r2
 80055b4:	ed93 7b00 	vldr	d7, [r3]
 80055b8:	eeb1 7b47 	vneg.f64	d7, d7
 80055bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055c0:	ed83 7b00 	vstr	d7, [r3]
  t19.im = -theta4;
 80055c4:	f107 0310 	add.w	r3, r7, #16
 80055c8:	ed93 7b00 	vldr	d7, [r3]
 80055cc:	eeb1 7b47 	vneg.f64	d7, d7
 80055d0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055d4:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t19);
 80055d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80055dc:	4618      	mov	r0, r3
 80055de:	f00d f8ff 	bl	80127e0 <b_exp>
  t267.re = theta5 * 0.0;
 80055e2:	4b8e      	ldr	r3, [pc, #568]	; (800581c <G_q+0x3254>)
 80055e4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055e8:	443a      	add	r2, r7
 80055ea:	4413      	add	r3, r2
 80055ec:	ed93 7b00 	vldr	d7, [r3]
 80055f0:	ed9f 6b85 	vldr	d6, [pc, #532]	; 8005808 <G_q+0x3240>
 80055f4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80055f8:	4b89      	ldr	r3, [pc, #548]	; (8005820 <G_q+0x3258>)
 80055fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80055fe:	443a      	add	r2, r7
 8005600:	4413      	add	r3, r2
 8005602:	ed83 7b00 	vstr	d7, [r3]
  t267.im = theta5;
 8005606:	4b86      	ldr	r3, [pc, #536]	; (8005820 <G_q+0x3258>)
 8005608:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800560c:	443a      	add	r2, r7
 800560e:	4413      	add	r3, r2
 8005610:	4a82      	ldr	r2, [pc, #520]	; (800581c <G_q+0x3254>)
 8005612:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005616:	4439      	add	r1, r7
 8005618:	440a      	add	r2, r1
 800561a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800561e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t266.re = -t267.re;
 8005622:	4b7f      	ldr	r3, [pc, #508]	; (8005820 <G_q+0x3258>)
 8005624:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005628:	443a      	add	r2, r7
 800562a:	4413      	add	r3, r2
 800562c:	ed93 7b00 	vldr	d7, [r3]
 8005630:	eeb1 7b47 	vneg.f64	d7, d7
 8005634:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005638:	ed83 7b00 	vstr	d7, [r3]
  t266.im = -theta5;
 800563c:	4b77      	ldr	r3, [pc, #476]	; (800581c <G_q+0x3254>)
 800563e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005642:	443a      	add	r2, r7
 8005644:	4413      	add	r3, r2
 8005646:	ed93 7b00 	vldr	d7, [r3]
 800564a:	eeb1 7b47 	vneg.f64	d7, d7
 800564e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005652:	ed83 7b02 	vstr	d7, [r3, #8]
  t265.re = t267.re;
 8005656:	4b72      	ldr	r3, [pc, #456]	; (8005820 <G_q+0x3258>)
 8005658:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800565c:	443a      	add	r2, r7
 800565e:	4413      	add	r3, r2
 8005660:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005664:	4b6f      	ldr	r3, [pc, #444]	; (8005824 <G_q+0x325c>)
 8005666:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800566a:	4438      	add	r0, r7
 800566c:	4403      	add	r3, r0
 800566e:	e9c3 1200 	strd	r1, r2, [r3]
  t265.im = theta5;
 8005672:	4b6c      	ldr	r3, [pc, #432]	; (8005824 <G_q+0x325c>)
 8005674:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005678:	443a      	add	r2, r7
 800567a:	4413      	add	r3, r2
 800567c:	4a67      	ldr	r2, [pc, #412]	; (800581c <G_q+0x3254>)
 800567e:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005682:	4439      	add	r1, r7
 8005684:	440a      	add	r2, r1
 8005686:	e9d2 1200 	ldrd	r1, r2, [r2]
 800568a:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t264.re = -t267.re;
 800568e:	4b64      	ldr	r3, [pc, #400]	; (8005820 <G_q+0x3258>)
 8005690:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005694:	443a      	add	r2, r7
 8005696:	4413      	add	r3, r2
 8005698:	ed93 7b00 	vldr	d7, [r3]
 800569c:	eeb1 7b47 	vneg.f64	d7, d7
 80056a0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056a4:	ed83 7b00 	vstr	d7, [r3]
  t264.im = -theta5;
 80056a8:	4b5c      	ldr	r3, [pc, #368]	; (800581c <G_q+0x3254>)
 80056aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056ae:	443a      	add	r2, r7
 80056b0:	4413      	add	r3, r2
 80056b2:	ed93 7b00 	vldr	d7, [r3]
 80056b6:	eeb1 7b47 	vneg.f64	d7, d7
 80056ba:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80056be:	ed83 7b02 	vstr	d7, [r3, #8]
  t219.re = t267.re;
 80056c2:	4b57      	ldr	r3, [pc, #348]	; (8005820 <G_q+0x3258>)
 80056c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056c8:	443a      	add	r2, r7
 80056ca:	4413      	add	r3, r2
 80056cc:	e9d3 1200 	ldrd	r1, r2, [r3]
 80056d0:	4b55      	ldr	r3, [pc, #340]	; (8005828 <G_q+0x3260>)
 80056d2:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80056d6:	4438      	add	r0, r7
 80056d8:	4403      	add	r3, r0
 80056da:	e9c3 1200 	strd	r1, r2, [r3]
  t219.im = theta5;
 80056de:	4b52      	ldr	r3, [pc, #328]	; (8005828 <G_q+0x3260>)
 80056e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80056e4:	443a      	add	r2, r7
 80056e6:	4413      	add	r3, r2
 80056e8:	4a4c      	ldr	r2, [pc, #304]	; (800581c <G_q+0x3254>)
 80056ea:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80056ee:	4439      	add	r1, r7
 80056f0:	440a      	add	r2, r1
 80056f2:	e9d2 1200 	ldrd	r1, r2, [r2]
 80056f6:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t218.re = -t267.re;
 80056fa:	4b49      	ldr	r3, [pc, #292]	; (8005820 <G_q+0x3258>)
 80056fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005700:	443a      	add	r2, r7
 8005702:	4413      	add	r3, r2
 8005704:	ed93 7b00 	vldr	d7, [r3]
 8005708:	eeb1 7b47 	vneg.f64	d7, d7
 800570c:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005710:	ed83 7b00 	vstr	d7, [r3]
  t218.im = -theta5;
 8005714:	4b41      	ldr	r3, [pc, #260]	; (800581c <G_q+0x3254>)
 8005716:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800571a:	443a      	add	r2, r7
 800571c:	4413      	add	r3, r2
 800571e:	ed93 7b00 	vldr	d7, [r3]
 8005722:	eeb1 7b47 	vneg.f64	d7, d7
 8005726:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800572a:	ed83 7b02 	vstr	d7, [r3, #8]
  t195.re = t267.re;
 800572e:	4b3c      	ldr	r3, [pc, #240]	; (8005820 <G_q+0x3258>)
 8005730:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005734:	443a      	add	r2, r7
 8005736:	4413      	add	r3, r2
 8005738:	e9d3 1200 	ldrd	r1, r2, [r3]
 800573c:	4b3b      	ldr	r3, [pc, #236]	; (800582c <G_q+0x3264>)
 800573e:	f241 30d0 	movw	r0, #5072	; 0x13d0
 8005742:	4438      	add	r0, r7
 8005744:	4403      	add	r3, r0
 8005746:	e9c3 1200 	strd	r1, r2, [r3]
  t195.im = theta5;
 800574a:	4b38      	ldr	r3, [pc, #224]	; (800582c <G_q+0x3264>)
 800574c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005750:	443a      	add	r2, r7
 8005752:	4413      	add	r3, r2
 8005754:	4a31      	ldr	r2, [pc, #196]	; (800581c <G_q+0x3254>)
 8005756:	f241 31d0 	movw	r1, #5072	; 0x13d0
 800575a:	4439      	add	r1, r7
 800575c:	440a      	add	r2, r1
 800575e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8005762:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t194.re = -t267.re;
 8005766:	4b2e      	ldr	r3, [pc, #184]	; (8005820 <G_q+0x3258>)
 8005768:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800576c:	443a      	add	r2, r7
 800576e:	4413      	add	r3, r2
 8005770:	ed93 7b00 	vldr	d7, [r3]
 8005774:	eeb1 7b47 	vneg.f64	d7, d7
 8005778:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800577c:	ed83 7b00 	vstr	d7, [r3]
  t194.im = -theta5;
 8005780:	4b26      	ldr	r3, [pc, #152]	; (800581c <G_q+0x3254>)
 8005782:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005786:	443a      	add	r2, r7
 8005788:	4413      	add	r3, r2
 800578a:	ed93 7b00 	vldr	d7, [r3]
 800578e:	eeb1 7b47 	vneg.f64	d7, d7
 8005792:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005796:	ed83 7b02 	vstr	d7, [r3, #8]
  t125.re = t267.re;
 800579a:	4b21      	ldr	r3, [pc, #132]	; (8005820 <G_q+0x3258>)
 800579c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057a0:	443a      	add	r2, r7
 80057a2:	4413      	add	r3, r2
 80057a4:	e9d3 1200 	ldrd	r1, r2, [r3]
 80057a8:	4b21      	ldr	r3, [pc, #132]	; (8005830 <G_q+0x3268>)
 80057aa:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80057ae:	4438      	add	r0, r7
 80057b0:	4403      	add	r3, r0
 80057b2:	e9c3 1200 	strd	r1, r2, [r3]
  t125.im = theta5;
 80057b6:	4b1e      	ldr	r3, [pc, #120]	; (8005830 <G_q+0x3268>)
 80057b8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057bc:	443a      	add	r2, r7
 80057be:	4413      	add	r3, r2
 80057c0:	4a16      	ldr	r2, [pc, #88]	; (800581c <G_q+0x3254>)
 80057c2:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80057c6:	4439      	add	r1, r7
 80057c8:	440a      	add	r2, r1
 80057ca:	e9d2 1200 	ldrd	r1, r2, [r2]
 80057ce:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t124.re = -t267.re;
 80057d2:	4b13      	ldr	r3, [pc, #76]	; (8005820 <G_q+0x3258>)
 80057d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057d8:	443a      	add	r2, r7
 80057da:	4413      	add	r3, r2
 80057dc:	ed93 7b00 	vldr	d7, [r3]
 80057e0:	eeb1 7b47 	vneg.f64	d7, d7
 80057e4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80057e8:	ed83 7b00 	vstr	d7, [r3]
  t124.im = -theta5;
 80057ec:	4b0b      	ldr	r3, [pc, #44]	; (800581c <G_q+0x3254>)
 80057ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80057f2:	443a      	add	r2, r7
 80057f4:	4413      	add	r3, r2
 80057f6:	ed93 7b00 	vldr	d7, [r3]
 80057fa:	eeb1 7b47 	vneg.f64	d7, d7
 80057fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005802:	e017      	b.n	8005834 <G_q+0x326c>
 8005804:	f3af 8000 	nop.w
	...
 8005810:	ffffefd0 	.word	0xffffefd0
 8005814:	ffffed70 	.word	0xffffed70
 8005818:	ffffed50 	.word	0xffffed50
 800581c:	ffffec38 	.word	0xffffec38
 8005820:	ffffed30 	.word	0xffffed30
 8005824:	ffffed10 	.word	0xffffed10
 8005828:	ffffecf0 	.word	0xffffecf0
 800582c:	ffffecd0 	.word	0xffffecd0
 8005830:	ffffecb0 	.word	0xffffecb0
 8005834:	ed83 7b02 	vstr	d7, [r3, #8]
  t113.re = t267.re;
 8005838:	4be2      	ldr	r3, [pc, #904]	; (8005bc4 <G_q+0x35fc>)
 800583a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800583e:	443a      	add	r2, r7
 8005840:	4413      	add	r3, r2
 8005842:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005846:	4be0      	ldr	r3, [pc, #896]	; (8005bc8 <G_q+0x3600>)
 8005848:	f241 30d0 	movw	r0, #5072	; 0x13d0
 800584c:	4438      	add	r0, r7
 800584e:	4403      	add	r3, r0
 8005850:	e9c3 1200 	strd	r1, r2, [r3]
  t113.im = theta5;
 8005854:	4bdc      	ldr	r3, [pc, #880]	; (8005bc8 <G_q+0x3600>)
 8005856:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800585a:	443a      	add	r2, r7
 800585c:	4413      	add	r3, r2
 800585e:	4adb      	ldr	r2, [pc, #876]	; (8005bcc <G_q+0x3604>)
 8005860:	f241 31d0 	movw	r1, #5072	; 0x13d0
 8005864:	4439      	add	r1, r7
 8005866:	440a      	add	r2, r1
 8005868:	e9d2 1200 	ldrd	r1, r2, [r2]
 800586c:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t112.re = -t267.re;
 8005870:	4bd4      	ldr	r3, [pc, #848]	; (8005bc4 <G_q+0x35fc>)
 8005872:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005876:	443a      	add	r2, r7
 8005878:	4413      	add	r3, r2
 800587a:	ed93 7b00 	vldr	d7, [r3]
 800587e:	eeb1 7b47 	vneg.f64	d7, d7
 8005882:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005886:	ed83 7b00 	vstr	d7, [r3]
  t112.im = -theta5;
 800588a:	4bd0      	ldr	r3, [pc, #832]	; (8005bcc <G_q+0x3604>)
 800588c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005890:	443a      	add	r2, r7
 8005892:	4413      	add	r3, r2
 8005894:	ed93 7b00 	vldr	d7, [r3]
 8005898:	eeb1 7b47 	vneg.f64	d7, d7
 800589c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80058a0:	ed83 7b02 	vstr	d7, [r3, #8]
  t55.re = t267.re;
 80058a4:	4bc7      	ldr	r3, [pc, #796]	; (8005bc4 <G_q+0x35fc>)
 80058a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058aa:	443a      	add	r2, r7
 80058ac:	4413      	add	r3, r2
 80058ae:	e9d3 1200 	ldrd	r1, r2, [r3]
 80058b2:	4bc7      	ldr	r3, [pc, #796]	; (8005bd0 <G_q+0x3608>)
 80058b4:	f241 30d0 	movw	r0, #5072	; 0x13d0
 80058b8:	4438      	add	r0, r7
 80058ba:	4403      	add	r3, r0
 80058bc:	e9c3 1200 	strd	r1, r2, [r3]
  t55.im = theta5;
 80058c0:	4bc3      	ldr	r3, [pc, #780]	; (8005bd0 <G_q+0x3608>)
 80058c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058c6:	443a      	add	r2, r7
 80058c8:	4413      	add	r3, r2
 80058ca:	4ac0      	ldr	r2, [pc, #768]	; (8005bcc <G_q+0x3604>)
 80058cc:	f241 31d0 	movw	r1, #5072	; 0x13d0
 80058d0:	4439      	add	r1, r7
 80058d2:	440a      	add	r2, r1
 80058d4:	e9d2 1200 	ldrd	r1, r2, [r2]
 80058d8:	e9c3 1202 	strd	r1, r2, [r3, #8]
  t54.re = -t267.re;
 80058dc:	4bb9      	ldr	r3, [pc, #740]	; (8005bc4 <G_q+0x35fc>)
 80058de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058e2:	443a      	add	r2, r7
 80058e4:	4413      	add	r3, r2
 80058e6:	ed93 7b00 	vldr	d7, [r3]
 80058ea:	eeb1 7b47 	vneg.f64	d7, d7
 80058ee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058f2:	ed83 7b00 	vstr	d7, [r3]
  t54.im = -theta5;
 80058f6:	4bb5      	ldr	r3, [pc, #724]	; (8005bcc <G_q+0x3604>)
 80058f8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80058fc:	443a      	add	r2, r7
 80058fe:	4413      	add	r3, r2
 8005900:	ed93 7b00 	vldr	d7, [r3]
 8005904:	eeb1 7b47 	vneg.f64	d7, d7
 8005908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800590c:	ed83 7b02 	vstr	d7, [r3, #8]
  b_exp(&t54);
 8005910:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005914:	4618      	mov	r0, r3
 8005916:	f00c ff63 	bl	80127e0 <b_exp>
  b_exp(&t87);
 800591a:	4bae      	ldr	r3, [pc, #696]	; (8005bd4 <G_q+0x360c>)
 800591c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005920:	443a      	add	r2, r7
 8005922:	4413      	add	r3, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f00c ff5b 	bl	80127e0 <b_exp>
  b_exp(&t83);
 800592a:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 800592e:	4618      	mov	r0, r3
 8005930:	f00c ff56 	bl	80127e0 <b_exp>
  b_exp(&t85);
 8005934:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8005938:	4618      	mov	r0, r3
 800593a:	f00c ff51 	bl	80127e0 <b_exp>
  b_exp(&t55);
 800593e:	4ba4      	ldr	r3, [pc, #656]	; (8005bd0 <G_q+0x3608>)
 8005940:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005944:	443a      	add	r2, r7
 8005946:	4413      	add	r3, r2
 8005948:	4618      	mov	r0, r3
 800594a:	f00c ff49 	bl	80127e0 <b_exp>
  b_exp(&t33);
 800594e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8005952:	4618      	mov	r0, r3
 8005954:	f00c ff44 	bl	80127e0 <b_exp>
  b_exp(&t34);
 8005958:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800595c:	4618      	mov	r0, r3
 800595e:	f00c ff3f 	bl	80127e0 <b_exp>
  b_exp(&t35);
 8005962:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8005966:	4618      	mov	r0, r3
 8005968:	f00c ff3a 	bl	80127e0 <b_exp>
  b_exp(&t36);
 800596c:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8005970:	4618      	mov	r0, r3
 8005972:	f00c ff35 	bl	80127e0 <b_exp>
  b_exp(&t37);
 8005976:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 800597a:	4618      	mov	r0, r3
 800597c:	f00c ff30 	bl	80127e0 <b_exp>
  b_exp(&t38);
 8005980:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8005984:	4618      	mov	r0, r3
 8005986:	f00c ff2b 	bl	80127e0 <b_exp>
  b_exp(&t39);
 800598a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 800598e:	4618      	mov	r0, r3
 8005990:	f00c ff26 	bl	80127e0 <b_exp>
  b_exp(&t40);
 8005994:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8005998:	4618      	mov	r0, r3
 800599a:	f00c ff21 	bl	80127e0 <b_exp>
  b_exp(&t10);
 800599e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80059a2:	4618      	mov	r0, r3
 80059a4:	f00c ff1c 	bl	80127e0 <b_exp>
  b_exp(&t11);
 80059a8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80059ac:	4618      	mov	r0, r3
 80059ae:	f00c ff17 	bl	80127e0 <b_exp>
  b_exp(&t12);
 80059b2:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f00c ff12 	bl	80127e0 <b_exp>
  b_exp(&t13);
 80059bc:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f00c ff0d 	bl	80127e0 <b_exp>
  b_exp(&t14);
 80059c6:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80059ca:	4618      	mov	r0, r3
 80059cc:	f00c ff08 	bl	80127e0 <b_exp>
  b_exp(&t15);
 80059d0:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 80059d4:	4618      	mov	r0, r3
 80059d6:	f00c ff03 	bl	80127e0 <b_exp>
  b_exp(&t16);
 80059da:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 80059de:	4618      	mov	r0, r3
 80059e0:	f00c fefe 	bl	80127e0 <b_exp>
  b_exp(&t17);
 80059e4:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80059e8:	4618      	mov	r0, r3
 80059ea:	f00c fef9 	bl	80127e0 <b_exp>
  b_exp(&t20);
 80059ee:	4b7a      	ldr	r3, [pc, #488]	; (8005bd8 <G_q+0x3610>)
 80059f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80059f4:	443a      	add	r2, r7
 80059f6:	4413      	add	r3, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f00c fef1 	bl	80127e0 <b_exp>
  b_exp(&t21);
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	4618      	mov	r0, r3
 8005a04:	f00c feec 	bl	80127e0 <b_exp>
  b_exp(&t22);
 8005a08:	4b74      	ldr	r3, [pc, #464]	; (8005bdc <G_q+0x3614>)
 8005a0a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a0e:	443a      	add	r2, r7
 8005a10:	4413      	add	r3, r2
 8005a12:	4618      	mov	r0, r3
 8005a14:	f00c fee4 	bl	80127e0 <b_exp>
  b_exp(&t23);
 8005a18:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f00c fedf 	bl	80127e0 <b_exp>
  b_exp(&t24);
 8005a22:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8005a26:	4618      	mov	r0, r3
 8005a28:	f00c feda 	bl	80127e0 <b_exp>
  b_exp(&t27);
 8005a2c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8005a30:	4618      	mov	r0, r3
 8005a32:	f00c fed5 	bl	80127e0 <b_exp>
  b_exp(&t28);
 8005a36:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f00c fed0 	bl	80127e0 <b_exp>
  b_exp(&t25);
 8005a40:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8005a44:	4618      	mov	r0, r3
 8005a46:	f00c fecb 	bl	80127e0 <b_exp>
  b_exp(&t26);
 8005a4a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f00c fec6 	bl	80127e0 <b_exp>
  b_exp(&t31);
 8005a54:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f00c fec1 	bl	80127e0 <b_exp>
  b_exp(&t32);
 8005a5e:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8005a62:	4618      	mov	r0, r3
 8005a64:	f00c febc 	bl	80127e0 <b_exp>
  b_exp(&t29);
 8005a68:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f00c feb7 	bl	80127e0 <b_exp>
  b_exp(&t30);
 8005a72:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8005a76:	4618      	mov	r0, r3
 8005a78:	f00c feb2 	bl	80127e0 <b_exp>
  b_exp(&t9);
 8005a7c:	4b58      	ldr	r3, [pc, #352]	; (8005be0 <G_q+0x3618>)
 8005a7e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005a82:	443a      	add	r2, r7
 8005a84:	4413      	add	r3, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f00c feaa 	bl	80127e0 <b_exp>
  b_exp(&t5);
 8005a8c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8005a90:	4618      	mov	r0, r3
 8005a92:	f00c fea5 	bl	80127e0 <b_exp>
  b_exp(&t6);
 8005a96:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f00c fea0 	bl	80127e0 <b_exp>
  b_exp(&t4);
 8005aa0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f00c fe9b 	bl	80127e0 <b_exp>
  b_exp(&t41);
 8005aaa:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f00c fe96 	bl	80127e0 <b_exp>
  b_exp(&t42);
 8005ab4:	4b4b      	ldr	r3, [pc, #300]	; (8005be4 <G_q+0x361c>)
 8005ab6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005aba:	443a      	add	r2, r7
 8005abc:	4413      	add	r3, r2
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f00c fe8e 	bl	80127e0 <b_exp>
  b_exp(&t43);
 8005ac4:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f00c fe89 	bl	80127e0 <b_exp>
  b_exp(&t44);
 8005ace:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f00c fe84 	bl	80127e0 <b_exp>
  b_exp(&t47);
 8005ad8:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8005adc:	4618      	mov	r0, r3
 8005ade:	f00c fe7f 	bl	80127e0 <b_exp>
  b_exp(&t48);
 8005ae2:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f00c fe7a 	bl	80127e0 <b_exp>
  b_exp(&t45);
 8005aec:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8005af0:	4618      	mov	r0, r3
 8005af2:	f00c fe75 	bl	80127e0 <b_exp>
  b_exp(&t46);
 8005af6:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f00c fe70 	bl	80127e0 <b_exp>
  b_exp(&t51);
 8005b00:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8005b04:	4618      	mov	r0, r3
 8005b06:	f00c fe6b 	bl	80127e0 <b_exp>
  b_exp(&t52);
 8005b0a:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f00c fe66 	bl	80127e0 <b_exp>
  b_exp(&t49);
 8005b14:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f00c fe61 	bl	80127e0 <b_exp>
  b_exp(&t50);
 8005b1e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8005b22:	4618      	mov	r0, r3
 8005b24:	f00c fe5c 	bl	80127e0 <b_exp>
  b_exp(&t56);
 8005b28:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f00c fe57 	bl	80127e0 <b_exp>
  b_exp(&t57);
 8005b32:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8005b36:	4618      	mov	r0, r3
 8005b38:	f00c fe52 	bl	80127e0 <b_exp>
  b_exp(&t70);
 8005b3c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8005b40:	4618      	mov	r0, r3
 8005b42:	f00c fe4d 	bl	80127e0 <b_exp>
  b_exp(&t71);
 8005b46:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f00c fe48 	bl	80127e0 <b_exp>
  b_exp(&t72);
 8005b50:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8005b54:	4618      	mov	r0, r3
 8005b56:	f00c fe43 	bl	80127e0 <b_exp>
  b_exp(&t73);
 8005b5a:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f00c fe3e 	bl	80127e0 <b_exp>
  b_exp(&t74);
 8005b64:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f00c fe39 	bl	80127e0 <b_exp>
  b_exp(&t75);
 8005b6e:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8005b72:	4618      	mov	r0, r3
 8005b74:	f00c fe34 	bl	80127e0 <b_exp>
  b_exp(&t76);
 8005b78:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f00c fe2f 	bl	80127e0 <b_exp>
  b_exp(&t77);
 8005b82:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8005b86:	4618      	mov	r0, r3
 8005b88:	f00c fe2a 	bl	80127e0 <b_exp>
  b_exp(&t58);
 8005b8c:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8005b90:	4618      	mov	r0, r3
 8005b92:	f00c fe25 	bl	80127e0 <b_exp>
  b_exp(&t59);
 8005b96:	4b14      	ldr	r3, [pc, #80]	; (8005be8 <G_q+0x3620>)
 8005b98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005b9c:	443a      	add	r2, r7
 8005b9e:	4413      	add	r3, r2
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f00c fe1d 	bl	80127e0 <b_exp>
  b_exp(&t60);
 8005ba6:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f00c fe18 	bl	80127e0 <b_exp>
  b_exp(&t61);
 8005bb0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f00c fe13 	bl	80127e0 <b_exp>
  b_exp(&t64);
 8005bba:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	e014      	b.n	8005bec <G_q+0x3624>
 8005bc2:	bf00      	nop
 8005bc4:	ffffed30 	.word	0xffffed30
 8005bc8:	ffffec90 	.word	0xffffec90
 8005bcc:	ffffec38 	.word	0xffffec38
 8005bd0:	ffffec70 	.word	0xffffec70
 8005bd4:	ffffedd0 	.word	0xffffedd0
 8005bd8:	ffffed50 	.word	0xffffed50
 8005bdc:	ffffed70 	.word	0xffffed70
 8005be0:	ffffeff0 	.word	0xffffeff0
 8005be4:	ffffed90 	.word	0xffffed90
 8005be8:	ffffedb0 	.word	0xffffedb0
 8005bec:	f00c fdf8 	bl	80127e0 <b_exp>
  b_exp(&t65);
 8005bf0:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f00c fdf3 	bl	80127e0 <b_exp>
  b_exp(&t62);
 8005bfa:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f00c fdee 	bl	80127e0 <b_exp>
  b_exp(&t63);
 8005c04:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f00c fde9 	bl	80127e0 <b_exp>
  b_exp(&t68);
 8005c0e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8005c12:	4618      	mov	r0, r3
 8005c14:	f00c fde4 	bl	80127e0 <b_exp>
  b_exp(&t69);
 8005c18:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f00c fddf 	bl	80127e0 <b_exp>
  b_exp(&t66);
 8005c22:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8005c26:	4618      	mov	r0, r3
 8005c28:	f00c fdda 	bl	80127e0 <b_exp>
  b_exp(&t67);
 8005c2c:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8005c30:	4618      	mov	r0, r3
 8005c32:	f00c fdd5 	bl	80127e0 <b_exp>
  b_exp(&t78);
 8005c36:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f00c fdd0 	bl	80127e0 <b_exp>
  b_exp(&t79);
 8005c40:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f00c fdcb 	bl	80127e0 <b_exp>
  b_exp(&t80);
 8005c4a:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f00c fdc6 	bl	80127e0 <b_exp>
  b_exp(&t81);
 8005c54:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f00c fdc1 	bl	80127e0 <b_exp>
  b_exp(&t82);
 8005c5e:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f00c fdbc 	bl	80127e0 <b_exp>
  b_exp(&t84);
 8005c68:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f00c fdb7 	bl	80127e0 <b_exp>
  b_exp(&t86);
 8005c72:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00c fdb2 	bl	80127e0 <b_exp>
  b_exp(&t154);
 8005c7c:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8005c80:	4618      	mov	r0, r3
 8005c82:	f00c fdad 	bl	80127e0 <b_exp>
  b_exp(&t155);
 8005c86:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f00c fda8 	bl	80127e0 <b_exp>
  b_exp(&t156);
 8005c90:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 8005c94:	4618      	mov	r0, r3
 8005c96:	f00c fda3 	bl	80127e0 <b_exp>
  b_exp(&t157);
 8005c9a:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f00c fd9e 	bl	80127e0 <b_exp>
  b_exp(&t112);
 8005ca4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8005ca8:	4618      	mov	r0, r3
 8005caa:	f00c fd99 	bl	80127e0 <b_exp>
  b_exp(&t113);
 8005cae:	4bf3      	ldr	r3, [pc, #972]	; (800607c <G_q+0x3ab4>)
 8005cb0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005cb4:	443a      	add	r2, r7
 8005cb6:	4413      	add	r3, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f00c fd91 	bl	80127e0 <b_exp>
  b_exp(&t98);
 8005cbe:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f00c fd8c 	bl	80127e0 <b_exp>
  b_exp(&t99);
 8005cc8:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f00c fd87 	bl	80127e0 <b_exp>
  b_exp(&t96);
 8005cd2:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f00c fd82 	bl	80127e0 <b_exp>
  b_exp(&t97);
 8005cdc:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f00c fd7d 	bl	80127e0 <b_exp>
  b_exp(&t92);
 8005ce6:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8005cea:	4618      	mov	r0, r3
 8005cec:	f00c fd78 	bl	80127e0 <b_exp>
  b_exp(&t93);
 8005cf0:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f00c fd73 	bl	80127e0 <b_exp>
  b_exp(&t94);
 8005cfa:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f00c fd6e 	bl	80127e0 <b_exp>
  b_exp(&t95);
 8005d04:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f00c fd69 	bl	80127e0 <b_exp>
  b_exp(&t100);
 8005d0e:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8005d12:	4618      	mov	r0, r3
 8005d14:	f00c fd64 	bl	80127e0 <b_exp>
  b_exp(&t101);
 8005d18:	4bd9      	ldr	r3, [pc, #868]	; (8006080 <G_q+0x3ab8>)
 8005d1a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d1e:	443a      	add	r2, r7
 8005d20:	4413      	add	r3, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f00c fd5c 	bl	80127e0 <b_exp>
  b_exp(&t104);
 8005d28:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00c fd57 	bl	80127e0 <b_exp>
  b_exp(&t105);
 8005d32:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 8005d36:	4618      	mov	r0, r3
 8005d38:	f00c fd52 	bl	80127e0 <b_exp>
  b_exp(&t106);
 8005d3c:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 8005d40:	4618      	mov	r0, r3
 8005d42:	f00c fd4d 	bl	80127e0 <b_exp>
  b_exp(&t107);
 8005d46:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f00c fd48 	bl	80127e0 <b_exp>
  b_exp(&t108);
 8005d50:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 8005d54:	4618      	mov	r0, r3
 8005d56:	f00c fd43 	bl	80127e0 <b_exp>
  b_exp(&t109);
 8005d5a:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f00c fd3e 	bl	80127e0 <b_exp>
  b_exp(&t110);
 8005d64:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f00c fd39 	bl	80127e0 <b_exp>
  b_exp(&t111);
 8005d6e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 8005d72:	4618      	mov	r0, r3
 8005d74:	f00c fd34 	bl	80127e0 <b_exp>
  b_exp(&t102);
 8005d78:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f00c fd2f 	bl	80127e0 <b_exp>
  b_exp(&t103);
 8005d82:	4bc0      	ldr	r3, [pc, #768]	; (8006084 <G_q+0x3abc>)
 8005d84:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005d88:	443a      	add	r2, r7
 8005d8a:	4413      	add	r3, r2
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f00c fd27 	bl	80127e0 <b_exp>
  b_exp(&t124);
 8005d92:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005d96:	4618      	mov	r0, r3
 8005d98:	f00c fd22 	bl	80127e0 <b_exp>
  b_exp(&t125);
 8005d9c:	4bba      	ldr	r3, [pc, #744]	; (8006088 <G_q+0x3ac0>)
 8005d9e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005da2:	443a      	add	r2, r7
 8005da4:	4413      	add	r3, r2
 8005da6:	4618      	mov	r0, r3
 8005da8:	f00c fd1a 	bl	80127e0 <b_exp>
  b_exp(&t136);
 8005dac:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 8005db0:	4618      	mov	r0, r3
 8005db2:	f00c fd15 	bl	80127e0 <b_exp>
  b_exp(&t137);
 8005db6:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f00c fd10 	bl	80127e0 <b_exp>
  b_exp(&t138);
 8005dc0:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00c fd0b 	bl	80127e0 <b_exp>
  b_exp(&t139);
 8005dca:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f00c fd06 	bl	80127e0 <b_exp>
  b_exp(&t152);
 8005dd4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f00c fd01 	bl	80127e0 <b_exp>
  b_exp(&t153);
 8005dde:	4bab      	ldr	r3, [pc, #684]	; (800608c <G_q+0x3ac4>)
 8005de0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005de4:	443a      	add	r2, r7
 8005de6:	4413      	add	r3, r2
 8005de8:	4618      	mov	r0, r3
 8005dea:	f00c fcf9 	bl	80127e0 <b_exp>
  b_exp(&t150);
 8005dee:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 8005df2:	4618      	mov	r0, r3
 8005df4:	f00c fcf4 	bl	80127e0 <b_exp>
  b_exp(&t151);
 8005df8:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f00c fcef 	bl	80127e0 <b_exp>
  b_exp(&t148);
 8005e02:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 8005e06:	4618      	mov	r0, r3
 8005e08:	f00c fcea 	bl	80127e0 <b_exp>
  b_exp(&t149);
 8005e0c:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 8005e10:	4618      	mov	r0, r3
 8005e12:	f00c fce5 	bl	80127e0 <b_exp>
  b_exp(&t144);
 8005e16:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f00c fce0 	bl	80127e0 <b_exp>
  b_exp(&t145);
 8005e20:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 8005e24:	4618      	mov	r0, r3
 8005e26:	f00c fcdb 	bl	80127e0 <b_exp>
  b_exp(&t146);
 8005e2a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f00c fcd6 	bl	80127e0 <b_exp>
  b_exp(&t147);
 8005e34:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f00c fcd1 	bl	80127e0 <b_exp>
  b_exp(&t134);
 8005e3e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8005e42:	4618      	mov	r0, r3
 8005e44:	f00c fccc 	bl	80127e0 <b_exp>
  b_exp(&t135);
 8005e48:	4b91      	ldr	r3, [pc, #580]	; (8006090 <G_q+0x3ac8>)
 8005e4a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005e4e:	443a      	add	r2, r7
 8005e50:	4413      	add	r3, r2
 8005e52:	4618      	mov	r0, r3
 8005e54:	f00c fcc4 	bl	80127e0 <b_exp>
  b_exp(&t126);
 8005e58:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f00c fcbf 	bl	80127e0 <b_exp>
  b_exp(&t127);
 8005e62:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 8005e66:	4618      	mov	r0, r3
 8005e68:	f00c fcba 	bl	80127e0 <b_exp>
  b_exp(&t128);
 8005e6c:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 8005e70:	4618      	mov	r0, r3
 8005e72:	f00c fcb5 	bl	80127e0 <b_exp>
  b_exp(&t129);
 8005e76:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f00c fcb0 	bl	80127e0 <b_exp>
  b_exp(&t130);
 8005e80:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 8005e84:	4618      	mov	r0, r3
 8005e86:	f00c fcab 	bl	80127e0 <b_exp>
  b_exp(&t131);
 8005e8a:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f00c fca6 	bl	80127e0 <b_exp>
  b_exp(&t132);
 8005e94:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f00c fca1 	bl	80127e0 <b_exp>
  b_exp(&t133);
 8005e9e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f00c fc9c 	bl	80127e0 <b_exp>
  b_exp(&t140);
 8005ea8:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 8005eac:	4618      	mov	r0, r3
 8005eae:	f00c fc97 	bl	80127e0 <b_exp>
  b_exp(&t141);
 8005eb2:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f00c fc92 	bl	80127e0 <b_exp>
  b_exp(&t142);
 8005ebc:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f00c fc8d 	bl	80127e0 <b_exp>
  b_exp(&t143);
 8005ec6:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f00c fc88 	bl	80127e0 <b_exp>
  b_exp(&t168);
 8005ed0:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f00c fc83 	bl	80127e0 <b_exp>
  b_exp(&t169);
 8005eda:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f00c fc7e 	bl	80127e0 <b_exp>
  b_exp(&t170);
 8005ee4:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f00c fc79 	bl	80127e0 <b_exp>
  b_exp(&t171);
 8005eee:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f00c fc74 	bl	80127e0 <b_exp>
  b_exp(&t120);
 8005ef8:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 8005efc:	4618      	mov	r0, r3
 8005efe:	f00c fc6f 	bl	80127e0 <b_exp>
  b_exp(&t121);
 8005f02:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 8005f06:	4618      	mov	r0, r3
 8005f08:	f00c fc6a 	bl	80127e0 <b_exp>
  b_exp(&t118);
 8005f0c:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 8005f10:	4618      	mov	r0, r3
 8005f12:	f00c fc65 	bl	80127e0 <b_exp>
  b_exp(&t119);
 8005f16:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f00c fc60 	bl	80127e0 <b_exp>
  b_exp(&t114);
 8005f20:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 8005f24:	4618      	mov	r0, r3
 8005f26:	f00c fc5b 	bl	80127e0 <b_exp>
  b_exp(&t115);
 8005f2a:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f00c fc56 	bl	80127e0 <b_exp>
  b_exp(&t116);
 8005f34:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f00c fc51 	bl	80127e0 <b_exp>
  b_exp(&t117);
 8005f3e:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 8005f42:	4618      	mov	r0, r3
 8005f44:	f00c fc4c 	bl	80127e0 <b_exp>
  b_exp(&t122);
 8005f48:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f00c fc47 	bl	80127e0 <b_exp>
  b_exp(&t123);
 8005f52:	4b50      	ldr	r3, [pc, #320]	; (8006094 <G_q+0x3acc>)
 8005f54:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005f58:	443a      	add	r2, r7
 8005f5a:	4413      	add	r3, r2
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f00c fc3f 	bl	80127e0 <b_exp>
  b_exp(&t160);
 8005f62:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 8005f66:	4618      	mov	r0, r3
 8005f68:	f00c fc3a 	bl	80127e0 <b_exp>
  b_exp(&t161);
 8005f6c:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 8005f70:	4618      	mov	r0, r3
 8005f72:	f00c fc35 	bl	80127e0 <b_exp>
  b_exp(&t162);
 8005f76:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f00c fc30 	bl	80127e0 <b_exp>
  b_exp(&t163);
 8005f80:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 8005f84:	4618      	mov	r0, r3
 8005f86:	f00c fc2b 	bl	80127e0 <b_exp>
  b_exp(&t164);
 8005f8a:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f00c fc26 	bl	80127e0 <b_exp>
  b_exp(&t165);
 8005f94:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f00c fc21 	bl	80127e0 <b_exp>
  b_exp(&t166);
 8005f9e:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f00c fc1c 	bl	80127e0 <b_exp>
  b_exp(&t167);
 8005fa8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 8005fac:	4618      	mov	r0, r3
 8005fae:	f00c fc17 	bl	80127e0 <b_exp>
  b_exp(&t158);
 8005fb2:	f507 7314 	add.w	r3, r7, #592	; 0x250
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f00c fc12 	bl	80127e0 <b_exp>
  b_exp(&t159);
 8005fbc:	4b36      	ldr	r3, [pc, #216]	; (8006098 <G_q+0x3ad0>)
 8005fbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005fc2:	443a      	add	r2, r7
 8005fc4:	4413      	add	r3, r2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f00c fc0a 	bl	80127e0 <b_exp>
  b_exp(&t194);
 8005fcc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f00c fc05 	bl	80127e0 <b_exp>
  b_exp(&t195);
 8005fd6:	4b31      	ldr	r3, [pc, #196]	; (800609c <G_q+0x3ad4>)
 8005fd8:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005fdc:	443a      	add	r2, r7
 8005fde:	4413      	add	r3, r2
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f00c fbfd 	bl	80127e0 <b_exp>
  b_exp(&t172);
 8005fe6:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8005fea:	4618      	mov	r0, r3
 8005fec:	f00c fbf8 	bl	80127e0 <b_exp>
  b_exp(&t173);
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	; (80060a0 <G_q+0x3ad8>)
 8005ff2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8005ff6:	443a      	add	r2, r7
 8005ff8:	4413      	add	r3, r2
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f00c fbf0 	bl	80127e0 <b_exp>
  b_exp(&t174);
 8006000:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 8006004:	4618      	mov	r0, r3
 8006006:	f00c fbeb 	bl	80127e0 <b_exp>
  b_exp(&t175);
 800600a:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800600e:	4618      	mov	r0, r3
 8006010:	f00c fbe6 	bl	80127e0 <b_exp>
  b_exp(&t182);
 8006014:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 8006018:	4618      	mov	r0, r3
 800601a:	f00c fbe1 	bl	80127e0 <b_exp>
  b_exp(&t183);
 800601e:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 8006022:	4618      	mov	r0, r3
 8006024:	f00c fbdc 	bl	80127e0 <b_exp>
  b_exp(&t180);
 8006028:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800602c:	4618      	mov	r0, r3
 800602e:	f00c fbd7 	bl	80127e0 <b_exp>
  b_exp(&t181);
 8006032:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 8006036:	4618      	mov	r0, r3
 8006038:	f00c fbd2 	bl	80127e0 <b_exp>
  b_exp(&t176);
 800603c:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 8006040:	4618      	mov	r0, r3
 8006042:	f00c fbcd 	bl	80127e0 <b_exp>
  b_exp(&t177);
 8006046:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800604a:	4618      	mov	r0, r3
 800604c:	f00c fbc8 	bl	80127e0 <b_exp>
  b_exp(&t178);
 8006050:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 8006054:	4618      	mov	r0, r3
 8006056:	f00c fbc3 	bl	80127e0 <b_exp>
  b_exp(&t179);
 800605a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800605e:	4618      	mov	r0, r3
 8006060:	f00c fbbe 	bl	80127e0 <b_exp>
  b_exp(&t186);
 8006064:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 8006068:	4618      	mov	r0, r3
 800606a:	f00c fbb9 	bl	80127e0 <b_exp>
  b_exp(&t187);
 800606e:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 8006072:	4618      	mov	r0, r3
 8006074:	f00c fbb4 	bl	80127e0 <b_exp>
 8006078:	e014      	b.n	80060a4 <G_q+0x3adc>
 800607a:	bf00      	nop
 800607c:	ffffec90 	.word	0xffffec90
 8006080:	ffffedf0 	.word	0xffffedf0
 8006084:	ffffee10 	.word	0xffffee10
 8006088:	ffffecb0 	.word	0xffffecb0
 800608c:	ffffee70 	.word	0xffffee70
 8006090:	ffffee50 	.word	0xffffee50
 8006094:	ffffee30 	.word	0xffffee30
 8006098:	ffffee90 	.word	0xffffee90
 800609c:	ffffecd0 	.word	0xffffecd0
 80060a0:	ffffeeb0 	.word	0xffffeeb0
  b_exp(&t188);
 80060a4:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 80060a8:	4618      	mov	r0, r3
 80060aa:	f00c fb99 	bl	80127e0 <b_exp>
  b_exp(&t189);
 80060ae:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 80060b2:	4618      	mov	r0, r3
 80060b4:	f00c fb94 	bl	80127e0 <b_exp>
  b_exp(&t190);
 80060b8:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 80060bc:	4618      	mov	r0, r3
 80060be:	f00c fb8f 	bl	80127e0 <b_exp>
  b_exp(&t191);
 80060c2:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 80060c6:	4618      	mov	r0, r3
 80060c8:	f00c fb8a 	bl	80127e0 <b_exp>
  b_exp(&t192);
 80060cc:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 80060d0:	4618      	mov	r0, r3
 80060d2:	f00c fb85 	bl	80127e0 <b_exp>
  b_exp(&t193);
 80060d6:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 80060da:	4618      	mov	r0, r3
 80060dc:	f00c fb80 	bl	80127e0 <b_exp>
  b_exp(&t184);
 80060e0:	f507 7324 	add.w	r3, r7, #656	; 0x290
 80060e4:	4618      	mov	r0, r3
 80060e6:	f00c fb7b 	bl	80127e0 <b_exp>
  b_exp(&t185);
 80060ea:	4bec      	ldr	r3, [pc, #944]	; (800649c <G_q+0x3ed4>)
 80060ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80060f0:	443a      	add	r2, r7
 80060f2:	4413      	add	r3, r2
 80060f4:	4618      	mov	r0, r3
 80060f6:	f00c fb73 	bl	80127e0 <b_exp>
  b_exp(&t196);
 80060fa:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80060fe:	4618      	mov	r0, r3
 8006100:	f00c fb6e 	bl	80127e0 <b_exp>
  b_exp(&t197);
 8006104:	4be6      	ldr	r3, [pc, #920]	; (80064a0 <G_q+0x3ed8>)
 8006106:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800610a:	443a      	add	r2, r7
 800610c:	4413      	add	r3, r2
 800610e:	4618      	mov	r0, r3
 8006110:	f00c fb66 	bl	80127e0 <b_exp>
  b_exp(&t198);
 8006114:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 8006118:	4618      	mov	r0, r3
 800611a:	f00c fb61 	bl	80127e0 <b_exp>
  b_exp(&t199);
 800611e:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 8006122:	4618      	mov	r0, r3
 8006124:	f00c fb5c 	bl	80127e0 <b_exp>
  b_exp(&t206);
 8006128:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800612c:	4618      	mov	r0, r3
 800612e:	f00c fb57 	bl	80127e0 <b_exp>
  b_exp(&t207);
 8006132:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 8006136:	4618      	mov	r0, r3
 8006138:	f00c fb52 	bl	80127e0 <b_exp>
  b_exp(&t204);
 800613c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 8006140:	4618      	mov	r0, r3
 8006142:	f00c fb4d 	bl	80127e0 <b_exp>
  b_exp(&t205);
 8006146:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800614a:	4618      	mov	r0, r3
 800614c:	f00c fb48 	bl	80127e0 <b_exp>
  b_exp(&t200);
 8006150:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 8006154:	4618      	mov	r0, r3
 8006156:	f00c fb43 	bl	80127e0 <b_exp>
  b_exp(&t201);
 800615a:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800615e:	4618      	mov	r0, r3
 8006160:	f00c fb3e 	bl	80127e0 <b_exp>
  b_exp(&t202);
 8006164:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 8006168:	4618      	mov	r0, r3
 800616a:	f00c fb39 	bl	80127e0 <b_exp>
  b_exp(&t203);
 800616e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 8006172:	4618      	mov	r0, r3
 8006174:	f00c fb34 	bl	80127e0 <b_exp>
  b_exp(&t210);
 8006178:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800617c:	4618      	mov	r0, r3
 800617e:	f00c fb2f 	bl	80127e0 <b_exp>
  b_exp(&t211);
 8006182:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 8006186:	4618      	mov	r0, r3
 8006188:	f00c fb2a 	bl	80127e0 <b_exp>
  b_exp(&t212);
 800618c:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 8006190:	4618      	mov	r0, r3
 8006192:	f00c fb25 	bl	80127e0 <b_exp>
  b_exp(&t213);
 8006196:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800619a:	4618      	mov	r0, r3
 800619c:	f00c fb20 	bl	80127e0 <b_exp>
  b_exp(&t214);
 80061a0:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 80061a4:	4618      	mov	r0, r3
 80061a6:	f00c fb1b 	bl	80127e0 <b_exp>
  b_exp(&t215);
 80061aa:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 80061ae:	4618      	mov	r0, r3
 80061b0:	f00c fb16 	bl	80127e0 <b_exp>
  b_exp(&t216);
 80061b4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 80061b8:	4618      	mov	r0, r3
 80061ba:	f00c fb11 	bl	80127e0 <b_exp>
  b_exp(&t217);
 80061be:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80061c2:	4618      	mov	r0, r3
 80061c4:	f00c fb0c 	bl	80127e0 <b_exp>
  b_exp(&t208);
 80061c8:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f00c fb07 	bl	80127e0 <b_exp>
  b_exp(&t209);
 80061d2:	4bb4      	ldr	r3, [pc, #720]	; (80064a4 <G_q+0x3edc>)
 80061d4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80061d8:	443a      	add	r2, r7
 80061da:	4413      	add	r3, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f00c faff 	bl	80127e0 <b_exp>
  b_exp(&t230);
 80061e2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 80061e6:	4618      	mov	r0, r3
 80061e8:	f00c fafa 	bl	80127e0 <b_exp>
  b_exp(&t231);
 80061ec:	4bae      	ldr	r3, [pc, #696]	; (80064a8 <G_q+0x3ee0>)
 80061ee:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80061f2:	443a      	add	r2, r7
 80061f4:	4413      	add	r3, r2
 80061f6:	4618      	mov	r0, r3
 80061f8:	f00c faf2 	bl	80127e0 <b_exp>
  b_exp(&t232);
 80061fc:	f241 0350 	movw	r3, #4176	; 0x1050
 8006200:	443b      	add	r3, r7
 8006202:	4618      	mov	r0, r3
 8006204:	f00c faec 	bl	80127e0 <b_exp>
  b_exp(&t233);
 8006208:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800620c:	4618      	mov	r0, r3
 800620e:	f00c fae7 	bl	80127e0 <b_exp>
  b_exp(&t240);
 8006212:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 8006216:	4618      	mov	r0, r3
 8006218:	f00c fae2 	bl	80127e0 <b_exp>
  b_exp(&t241);
 800621c:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 8006220:	4618      	mov	r0, r3
 8006222:	f00c fadd 	bl	80127e0 <b_exp>
  b_exp(&t238);
 8006226:	f241 0390 	movw	r3, #4240	; 0x1090
 800622a:	443b      	add	r3, r7
 800622c:	4618      	mov	r0, r3
 800622e:	f00c fad7 	bl	80127e0 <b_exp>
  b_exp(&t239);
 8006232:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 8006236:	4618      	mov	r0, r3
 8006238:	f00c fad2 	bl	80127e0 <b_exp>
  b_exp(&t234);
 800623c:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 8006240:	4618      	mov	r0, r3
 8006242:	f00c facd 	bl	80127e0 <b_exp>
  b_exp(&t235);
 8006246:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800624a:	4618      	mov	r0, r3
 800624c:	f00c fac8 	bl	80127e0 <b_exp>
  b_exp(&t236);
 8006250:	f241 0370 	movw	r3, #4208	; 0x1070
 8006254:	443b      	add	r3, r7
 8006256:	4618      	mov	r0, r3
 8006258:	f00c fac2 	bl	80127e0 <b_exp>
  b_exp(&t237);
 800625c:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 8006260:	4618      	mov	r0, r3
 8006262:	f00c fabd 	bl	80127e0 <b_exp>
  b_exp(&t228);
 8006266:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800626a:	4618      	mov	r0, r3
 800626c:	f00c fab8 	bl	80127e0 <b_exp>
  b_exp(&t229);
 8006270:	4b8e      	ldr	r3, [pc, #568]	; (80064ac <G_q+0x3ee4>)
 8006272:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006276:	443a      	add	r2, r7
 8006278:	4413      	add	r3, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f00c fab0 	bl	80127e0 <b_exp>
  b_exp(&t220);
 8006280:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 8006284:	4618      	mov	r0, r3
 8006286:	f00c faab 	bl	80127e0 <b_exp>
  b_exp(&t221);
 800628a:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800628e:	4618      	mov	r0, r3
 8006290:	f00c faa6 	bl	80127e0 <b_exp>
  b_exp(&t222);
 8006294:	f241 0310 	movw	r3, #4112	; 0x1010
 8006298:	443b      	add	r3, r7
 800629a:	4618      	mov	r0, r3
 800629c:	f00c faa0 	bl	80127e0 <b_exp>
  b_exp(&t223);
 80062a0:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 80062a4:	4618      	mov	r0, r3
 80062a6:	f00c fa9b 	bl	80127e0 <b_exp>
  b_exp(&t224);
 80062aa:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 80062ae:	4618      	mov	r0, r3
 80062b0:	f00c fa96 	bl	80127e0 <b_exp>
  b_exp(&t225);
 80062b4:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f00c fa91 	bl	80127e0 <b_exp>
  b_exp(&t226);
 80062be:	f241 0330 	movw	r3, #4144	; 0x1030
 80062c2:	443b      	add	r3, r7
 80062c4:	4618      	mov	r0, r3
 80062c6:	f00c fa8b 	bl	80127e0 <b_exp>
  b_exp(&t227);
 80062ca:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 80062ce:	4618      	mov	r0, r3
 80062d0:	f00c fa86 	bl	80127e0 <b_exp>
  b_exp(&t218);
 80062d4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80062d8:	4618      	mov	r0, r3
 80062da:	f00c fa81 	bl	80127e0 <b_exp>
  b_exp(&t219);
 80062de:	4b74      	ldr	r3, [pc, #464]	; (80064b0 <G_q+0x3ee8>)
 80062e0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80062e4:	443a      	add	r2, r7
 80062e6:	4413      	add	r3, r2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f00c fa79 	bl	80127e0 <b_exp>
  b_exp(&t264);
 80062ee:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80062f2:	4618      	mov	r0, r3
 80062f4:	f00c fa74 	bl	80127e0 <b_exp>
  b_exp(&t265);
 80062f8:	4b6e      	ldr	r3, [pc, #440]	; (80064b4 <G_q+0x3eec>)
 80062fa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80062fe:	443a      	add	r2, r7
 8006300:	4413      	add	r3, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f00c fa6c 	bl	80127e0 <b_exp>
  b_exp(&t242);
 8006308:	f507 734c 	add.w	r3, r7, #816	; 0x330
 800630c:	4618      	mov	r0, r3
 800630e:	f00c fa67 	bl	80127e0 <b_exp>
  b_exp(&t243);
 8006312:	4b69      	ldr	r3, [pc, #420]	; (80064b8 <G_q+0x3ef0>)
 8006314:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006318:	443a      	add	r2, r7
 800631a:	4413      	add	r3, r2
 800631c:	4618      	mov	r0, r3
 800631e:	f00c fa5f 	bl	80127e0 <b_exp>
  b_exp(&t244);
 8006322:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8006326:	443b      	add	r3, r7
 8006328:	4618      	mov	r0, r3
 800632a:	f00c fa59 	bl	80127e0 <b_exp>
  b_exp(&t245);
 800632e:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8006332:	4618      	mov	r0, r3
 8006334:	f00c fa54 	bl	80127e0 <b_exp>
  b_exp(&t252);
 8006338:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 800633c:	4618      	mov	r0, r3
 800633e:	f00c fa4f 	bl	80127e0 <b_exp>
  b_exp(&t253);
 8006342:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8006346:	4618      	mov	r0, r3
 8006348:	f00c fa4a 	bl	80127e0 <b_exp>
  b_exp(&t250);
 800634c:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8006350:	443b      	add	r3, r7
 8006352:	4618      	mov	r0, r3
 8006354:	f00c fa44 	bl	80127e0 <b_exp>
  b_exp(&t251);
 8006358:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 800635c:	4618      	mov	r0, r3
 800635e:	f00c fa3f 	bl	80127e0 <b_exp>
  b_exp(&t246);
 8006362:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8006366:	4618      	mov	r0, r3
 8006368:	f00c fa3a 	bl	80127e0 <b_exp>
  b_exp(&t247);
 800636c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8006370:	4618      	mov	r0, r3
 8006372:	f00c fa35 	bl	80127e0 <b_exp>
  b_exp(&t248);
 8006376:	f241 03d0 	movw	r3, #4304	; 0x10d0
 800637a:	443b      	add	r3, r7
 800637c:	4618      	mov	r0, r3
 800637e:	f00c fa2f 	bl	80127e0 <b_exp>
  b_exp(&t249);
 8006382:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 8006386:	4618      	mov	r0, r3
 8006388:	f00c fa2a 	bl	80127e0 <b_exp>
  b_exp(&t256);
 800638c:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8006390:	4618      	mov	r0, r3
 8006392:	f00c fa25 	bl	80127e0 <b_exp>
  b_exp(&t257);
 8006396:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 800639a:	4618      	mov	r0, r3
 800639c:	f00c fa20 	bl	80127e0 <b_exp>
  b_exp(&t258);
 80063a0:	f241 1310 	movw	r3, #4368	; 0x1110
 80063a4:	443b      	add	r3, r7
 80063a6:	4618      	mov	r0, r3
 80063a8:	f00c fa1a 	bl	80127e0 <b_exp>
  b_exp(&t259);
 80063ac:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 80063b0:	4618      	mov	r0, r3
 80063b2:	f00c fa15 	bl	80127e0 <b_exp>
  b_exp(&t260);
 80063b6:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 80063ba:	4618      	mov	r0, r3
 80063bc:	f00c fa10 	bl	80127e0 <b_exp>
  b_exp(&t261);
 80063c0:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 80063c4:	4618      	mov	r0, r3
 80063c6:	f00c fa0b 	bl	80127e0 <b_exp>
  b_exp(&t262);
 80063ca:	f241 1330 	movw	r3, #4400	; 0x1130
 80063ce:	443b      	add	r3, r7
 80063d0:	4618      	mov	r0, r3
 80063d2:	f00c fa05 	bl	80127e0 <b_exp>
  b_exp(&t263);
 80063d6:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 80063da:	4618      	mov	r0, r3
 80063dc:	f00c fa00 	bl	80127e0 <b_exp>
  b_exp(&t254);
 80063e0:	f507 7354 	add.w	r3, r7, #848	; 0x350
 80063e4:	4618      	mov	r0, r3
 80063e6:	f00c f9fb 	bl	80127e0 <b_exp>
  b_exp(&t255);
 80063ea:	4b34      	ldr	r3, [pc, #208]	; (80064bc <G_q+0x3ef4>)
 80063ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80063f0:	443a      	add	r2, r7
 80063f2:	4413      	add	r3, r2
 80063f4:	4618      	mov	r0, r3
 80063f6:	f00c f9f3 	bl	80127e0 <b_exp>
  b_exp(&t266);
 80063fa:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80063fe:	4618      	mov	r0, r3
 8006400:	f00c f9ee 	bl	80127e0 <b_exp>
  b_exp(&t267);
 8006404:	4b2e      	ldr	r3, [pc, #184]	; (80064c0 <G_q+0x3ef8>)
 8006406:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800640a:	443a      	add	r2, r7
 800640c:	4413      	add	r3, r2
 800640e:	4618      	mov	r0, r3
 8006410:	f00c f9e6 	bl	80127e0 <b_exp>
  b_exp(&t268);
 8006414:	f241 1350 	movw	r3, #4432	; 0x1150
 8006418:	443b      	add	r3, r7
 800641a:	4618      	mov	r0, r3
 800641c:	f00c f9e0 	bl	80127e0 <b_exp>
  b_exp(&t269);
 8006420:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8006424:	4618      	mov	r0, r3
 8006426:	f00c f9db 	bl	80127e0 <b_exp>
  b_exp(&t280);
 800642a:	f241 13b0 	movw	r3, #4528	; 0x11b0
 800642e:	443b      	add	r3, r7
 8006430:	4618      	mov	r0, r3
 8006432:	f00c f9d5 	bl	80127e0 <b_exp>
  b_exp(&t281);
 8006436:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 800643a:	4618      	mov	r0, r3
 800643c:	f00c f9d0 	bl	80127e0 <b_exp>
  b_exp(&t282);
 8006440:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8006444:	4618      	mov	r0, r3
 8006446:	f00c f9cb 	bl	80127e0 <b_exp>
  b_exp(&t283);
 800644a:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 800644e:	4618      	mov	r0, r3
 8006450:	f00c f9c6 	bl	80127e0 <b_exp>
  b_exp(&t284);
 8006454:	f507 7364 	add.w	r3, r7, #912	; 0x390
 8006458:	4618      	mov	r0, r3
 800645a:	f00c f9c1 	bl	80127e0 <b_exp>
  b_exp(&t285);
 800645e:	4b19      	ldr	r3, [pc, #100]	; (80064c4 <G_q+0x3efc>)
 8006460:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006464:	443a      	add	r2, r7
 8006466:	4413      	add	r3, r2
 8006468:	4618      	mov	r0, r3
 800646a:	f00c f9b9 	bl	80127e0 <b_exp>
  b_exp(&t286);
 800646e:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8006472:	443b      	add	r3, r7
 8006474:	4618      	mov	r0, r3
 8006476:	f00c f9b3 	bl	80127e0 <b_exp>
  b_exp(&t287);
 800647a:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 800647e:	4618      	mov	r0, r3
 8006480:	f00c f9ae 	bl	80127e0 <b_exp>
  b_exp(&t294);
 8006484:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8006488:	4618      	mov	r0, r3
 800648a:	f00c f9a9 	bl	80127e0 <b_exp>
  b_exp(&t295);
 800648e:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8006492:	4618      	mov	r0, r3
 8006494:	f00c f9a4 	bl	80127e0 <b_exp>
 8006498:	e016      	b.n	80064c8 <G_q+0x3f00>
 800649a:	bf00      	nop
 800649c:	ffffeed0 	.word	0xffffeed0
 80064a0:	ffffeef0 	.word	0xffffeef0
 80064a4:	ffffef10 	.word	0xffffef10
 80064a8:	ffffef50 	.word	0xffffef50
 80064ac:	ffffef30 	.word	0xffffef30
 80064b0:	ffffecf0 	.word	0xffffecf0
 80064b4:	ffffed10 	.word	0xffffed10
 80064b8:	ffffef70 	.word	0xffffef70
 80064bc:	ffffef90 	.word	0xffffef90
 80064c0:	ffffed30 	.word	0xffffed30
 80064c4:	ffffefd0 	.word	0xffffefd0
  b_exp(&t292);
 80064c8:	f241 2310 	movw	r3, #4624	; 0x1210
 80064cc:	443b      	add	r3, r7
 80064ce:	4618      	mov	r0, r3
 80064d0:	f00c f986 	bl	80127e0 <b_exp>
  b_exp(&t293);
 80064d4:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80064d8:	4618      	mov	r0, r3
 80064da:	f00c f981 	bl	80127e0 <b_exp>
  b_exp(&t288);
 80064de:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80064e2:	4618      	mov	r0, r3
 80064e4:	f00c f97c 	bl	80127e0 <b_exp>
  b_exp(&t289);
 80064e8:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80064ec:	4618      	mov	r0, r3
 80064ee:	f00c f977 	bl	80127e0 <b_exp>
  b_exp(&t290);
 80064f2:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80064f6:	443b      	add	r3, r7
 80064f8:	4618      	mov	r0, r3
 80064fa:	f00c f971 	bl	80127e0 <b_exp>
  b_exp(&t291);
 80064fe:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 8006502:	4618      	mov	r0, r3
 8006504:	f00c f96c 	bl	80127e0 <b_exp>
  b_exp(&t278);
 8006508:	f507 735c 	add.w	r3, r7, #880	; 0x370
 800650c:	4618      	mov	r0, r3
 800650e:	f00c f967 	bl	80127e0 <b_exp>
  b_exp(&t279);
 8006512:	4bd5      	ldr	r3, [pc, #852]	; (8006868 <G_q+0x42a0>)
 8006514:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006518:	443a      	add	r2, r7
 800651a:	4413      	add	r3, r2
 800651c:	4618      	mov	r0, r3
 800651e:	f00c f95f 	bl	80127e0 <b_exp>
  b_exp(&t270);
 8006522:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8006526:	4618      	mov	r0, r3
 8006528:	f00c f95a 	bl	80127e0 <b_exp>
  b_exp(&t271);
 800652c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8006530:	4618      	mov	r0, r3
 8006532:	f00c f955 	bl	80127e0 <b_exp>
  b_exp(&t272);
 8006536:	f241 1370 	movw	r3, #4464	; 0x1170
 800653a:	443b      	add	r3, r7
 800653c:	4618      	mov	r0, r3
 800653e:	f00c f94f 	bl	80127e0 <b_exp>
  b_exp(&t273);
 8006542:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8006546:	4618      	mov	r0, r3
 8006548:	f00c f94a 	bl	80127e0 <b_exp>
  b_exp(&t274);
 800654c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8006550:	4618      	mov	r0, r3
 8006552:	f00c f945 	bl	80127e0 <b_exp>
  b_exp(&t275);
 8006556:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 800655a:	4618      	mov	r0, r3
 800655c:	f00c f940 	bl	80127e0 <b_exp>
  b_exp(&t276);
 8006560:	f241 1390 	movw	r3, #4496	; 0x1190
 8006564:	443b      	add	r3, r7
 8006566:	4618      	mov	r0, r3
 8006568:	f00c f93a 	bl	80127e0 <b_exp>
  b_exp(&t277);
 800656c:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8006570:	4618      	mov	r0, r3
 8006572:	f00c f935 	bl	80127e0 <b_exp>
  b_exp(&t296);
 8006576:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 800657a:	4618      	mov	r0, r3
 800657c:	f00c f930 	bl	80127e0 <b_exp>
  b_exp(&t297);
 8006580:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8006584:	4618      	mov	r0, r3
 8006586:	f00c f92b 	bl	80127e0 <b_exp>
  b_exp(&t298);
 800658a:	f241 2330 	movw	r3, #4656	; 0x1230
 800658e:	443b      	add	r3, r7
 8006590:	4618      	mov	r0, r3
 8006592:	f00c f925 	bl	80127e0 <b_exp>
  b_exp(&t299);
 8006596:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 800659a:	4618      	mov	r0, r3
 800659c:	f00c f920 	bl	80127e0 <b_exp>
  b_G_q[0].re = 0.0;
 80065a0:	4bb2      	ldr	r3, [pc, #712]	; (800686c <G_q+0x42a4>)
 80065a2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80065a6:	443a      	add	r2, r7
 80065a8:	4413      	add	r3, r2
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	f04f 0300 	mov.w	r3, #0
 80065b0:	f04f 0400 	mov.w	r4, #0
 80065b4:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[0].im = 0.0;
 80065b8:	4bac      	ldr	r3, [pc, #688]	; (800686c <G_q+0x42a4>)
 80065ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80065be:	443a      	add	r2, r7
 80065c0:	4413      	add	r3, r2
 80065c2:	681a      	ldr	r2, [r3, #0]
 80065c4:	f04f 0300 	mov.w	r3, #0
 80065c8:	f04f 0400 	mov.w	r4, #0
 80065cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
  if (t33.im == 0.0) {
 80065d0:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80065d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80065d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80065dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065e0:	d115      	bne.n	800660e <G_q+0x4046>
    t33_re = t33.re / 2.0;
 80065e2:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80065e6:	ed93 6b00 	vldr	d6, [r3]
 80065ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80065ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065f2:	f241 33c8 	movw	r3, #5064	; 0x13c8
 80065f6:	443b      	add	r3, r7
 80065f8:	ed83 7b00 	vstr	d7, [r3]
    t33_im = 0.0;
 80065fc:	f04f 0300 	mov.w	r3, #0
 8006600:	f04f 0400 	mov.w	r4, #0
 8006604:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8006608:	e9c2 3400 	strd	r3, r4, [r2]
 800660c:	e037      	b.n	800667e <G_q+0x40b6>
  } else if (t33.re == 0.0) {
 800660e:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006612:	ed93 7b00 	vldr	d7, [r3]
 8006616:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800661a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800661e:	d115      	bne.n	800664c <G_q+0x4084>
    t33_re = 0.0;
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	f04f 0400 	mov.w	r4, #0
 8006628:	f241 32c8 	movw	r2, #5064	; 0x13c8
 800662c:	443a      	add	r2, r7
 800662e:	e9c2 3400 	strd	r3, r4, [r2]
    t33_im = t33.im / 2.0;
 8006632:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006636:	ed93 6b02 	vldr	d6, [r3, #8]
 800663a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800663e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006642:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006646:	ed83 7b00 	vstr	d7, [r3]
 800664a:	e018      	b.n	800667e <G_q+0x40b6>
  } else {
    t33_re = t33.re / 2.0;
 800664c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8006650:	ed93 6b00 	vldr	d6, [r3]
 8006654:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006658:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800665c:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006660:	443b      	add	r3, r7
 8006662:	ed83 7b00 	vstr	d7, [r3]
    t33_im = t33.im / 2.0;
 8006666:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800666a:	ed93 6b02 	vldr	d6, [r3, #8]
 800666e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006672:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006676:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800667a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t34.im == 0.0) {
 800667e:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006682:	ed93 7b02 	vldr	d7, [r3, #8]
 8006686:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800668a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800668e:	d116      	bne.n	80066be <G_q+0x40f6>
    t34_re = t34.re / 2.0;
 8006690:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006694:	ed93 6b00 	vldr	d6, [r3]
 8006698:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800669c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066a0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80066a4:	443b      	add	r3, r7
 80066a6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80066aa:	f04f 0300 	mov.w	r3, #0
 80066ae:	f04f 0400 	mov.w	r4, #0
 80066b2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80066b6:	443a      	add	r2, r7
 80066b8:	e9c2 3400 	strd	r3, r4, [r2]
 80066bc:	e039      	b.n	8006732 <G_q+0x416a>
  } else if (t34.re == 0.0) {
 80066be:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80066c2:	ed93 7b00 	vldr	d7, [r3]
 80066c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ce:	d116      	bne.n	80066fe <G_q+0x4136>
    t34_re = 0.0;
 80066d0:	f04f 0300 	mov.w	r3, #0
 80066d4:	f04f 0400 	mov.w	r4, #0
 80066d8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80066dc:	443a      	add	r2, r7
 80066de:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t34.im / 2.0;
 80066e2:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80066e6:	ed93 6b02 	vldr	d6, [r3, #8]
 80066ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80066ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80066f2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80066f6:	443b      	add	r3, r7
 80066f8:	ed83 7b00 	vstr	d7, [r3]
 80066fc:	e019      	b.n	8006732 <G_q+0x416a>
  } else {
    t34_re = t34.re / 2.0;
 80066fe:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8006702:	ed93 6b00 	vldr	d6, [r3]
 8006706:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800670a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800670e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006712:	443b      	add	r3, r7
 8006714:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t34.im / 2.0;
 8006718:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800671c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006720:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006724:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006728:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800672c:	443b      	add	r3, r7
 800672e:	ed83 7b00 	vstr	d7, [r3]
  }

  t33_re += t34_re;
 8006732:	f241 33c8 	movw	r3, #5064	; 0x13c8
 8006736:	443b      	add	r3, r7
 8006738:	ed93 6b00 	vldr	d6, [r3]
 800673c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006740:	443b      	add	r3, r7
 8006742:	ed93 7b00 	vldr	d7, [r3]
 8006746:	ee36 7b07 	vadd.f64	d7, d6, d7
 800674a:	f241 33c8 	movw	r3, #5064	; 0x13c8
 800674e:	443b      	add	r3, r7
 8006750:	ed83 7b00 	vstr	d7, [r3]
  t33_im += t34_im;
 8006754:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 8006758:	ed93 6b00 	vldr	d6, [r3]
 800675c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006760:	443b      	add	r3, r7
 8006762:	ed93 7b00 	vldr	d7, [r3]
 8006766:	ee36 7b07 	vadd.f64	d7, d6, d7
 800676a:	f507 539e 	add.w	r3, r7, #5056	; 0x13c0
 800676e:	ed83 7b00 	vstr	d7, [r3]
  t35_re = (t35.re * 0.0 - t35.im * 0.5) - (t36.re * 0.0 - t36.im * 0.5);
 8006772:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006776:	ed93 7b00 	vldr	d7, [r3]
 800677a:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8006860 <G_q+0x4298>
 800677e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006782:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8006786:	ed93 7b02 	vldr	d7, [r3, #8]
 800678a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800678e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006792:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006796:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800679a:	ed93 7b00 	vldr	d7, [r3]
 800679e:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8006860 <G_q+0x4298>
 80067a2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80067a6:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80067aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80067ae:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80067b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80067b6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80067ba:	f241 2398 	movw	r3, #4760	; 0x1298
 80067be:	443b      	add	r3, r7
 80067c0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80067c4:	ed83 7b00 	vstr	d7, [r3]
  t35_im = (t35.re * 0.5 + t35.im * 0.0) - (t36.re * 0.5 + t36.im * 0.0);
 80067c8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80067cc:	ed93 7b00 	vldr	d7, [r3]
 80067d0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80067d4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80067d8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80067dc:	ed93 7b02 	vldr	d7, [r3, #8]
 80067e0:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 8006860 <G_q+0x4298>
 80067e4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80067e8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80067ec:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 80067f0:	ed93 7b00 	vldr	d7, [r3]
 80067f4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80067f8:	ee27 5b05 	vmul.f64	d5, d7, d5
 80067fc:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 8006800:	ed93 7b02 	vldr	d7, [r3, #8]
 8006804:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8006860 <G_q+0x4298>
 8006808:	ee27 7b04 	vmul.f64	d7, d7, d4
 800680c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006810:	f241 2390 	movw	r3, #4752	; 0x1290
 8006814:	443b      	add	r3, r7
 8006816:	ee36 7b47 	vsub.f64	d7, d6, d7
 800681a:	ed83 7b00 	vstr	d7, [r3]
  if (t37.im == 0.0) {
 800681e:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006822:	ed93 7b02 	vldr	d7, [r3, #8]
 8006826:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800682a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800682e:	d11f      	bne.n	8006870 <G_q+0x42a8>
    t37_re = t37.re / 2.0;
 8006830:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006834:	ed93 6b00 	vldr	d6, [r3]
 8006838:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800683c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006840:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006844:	443b      	add	r3, r7
 8006846:	ed83 7b00 	vstr	d7, [r3]
    t37_im = 0.0;
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	f04f 0400 	mov.w	r4, #0
 8006852:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8006856:	e9c2 3400 	strd	r3, r4, [r2]
 800685a:	e041      	b.n	80068e0 <G_q+0x4318>
 800685c:	f3af 8000 	nop.w
	...
 8006868:	ffffefb0 	.word	0xffffefb0
 800686c:	ffffec34 	.word	0xffffec34
  } else if (t37.re == 0.0) {
 8006870:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006874:	ed93 7b00 	vldr	d7, [r3]
 8006878:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800687c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006880:	d115      	bne.n	80068ae <G_q+0x42e6>
    t37_re = 0.0;
 8006882:	f04f 0300 	mov.w	r3, #0
 8006886:	f04f 0400 	mov.w	r4, #0
 800688a:	f241 32a8 	movw	r2, #5032	; 0x13a8
 800688e:	443a      	add	r2, r7
 8006890:	e9c2 3400 	strd	r3, r4, [r2]
    t37_im = t37.im / 2.0;
 8006894:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8006898:	ed93 6b02 	vldr	d6, [r3, #8]
 800689c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068a4:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80068a8:	ed83 7b00 	vstr	d7, [r3]
 80068ac:	e018      	b.n	80068e0 <G_q+0x4318>
  } else {
    t37_re = t37.re / 2.0;
 80068ae:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068b2:	ed93 6b00 	vldr	d6, [r3]
 80068b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068be:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80068c2:	443b      	add	r3, r7
 80068c4:	ed83 7b00 	vstr	d7, [r3]
    t37_im = t37.im / 2.0;
 80068c8:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 80068cc:	ed93 6b02 	vldr	d6, [r3, #8]
 80068d0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068d4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80068d8:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80068dc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t38.im == 0.0) {
 80068e0:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80068e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80068e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80068ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f0:	d116      	bne.n	8006920 <G_q+0x4358>
    t34_re = t38.re / 2.0;
 80068f2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80068f6:	ed93 6b00 	vldr	d6, [r3]
 80068fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80068fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006902:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006906:	443b      	add	r3, r7
 8006908:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800690c:	f04f 0300 	mov.w	r3, #0
 8006910:	f04f 0400 	mov.w	r4, #0
 8006914:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006918:	443a      	add	r2, r7
 800691a:	e9c2 3400 	strd	r3, r4, [r2]
 800691e:	e039      	b.n	8006994 <G_q+0x43cc>
  } else if (t38.re == 0.0) {
 8006920:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006924:	ed93 7b00 	vldr	d7, [r3]
 8006928:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	d116      	bne.n	8006960 <G_q+0x4398>
    t34_re = 0.0;
 8006932:	f04f 0300 	mov.w	r3, #0
 8006936:	f04f 0400 	mov.w	r4, #0
 800693a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800693e:	443a      	add	r2, r7
 8006940:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t38.im / 2.0;
 8006944:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006948:	ed93 6b02 	vldr	d6, [r3, #8]
 800694c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006950:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006954:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006958:	443b      	add	r3, r7
 800695a:	ed83 7b00 	vstr	d7, [r3]
 800695e:	e019      	b.n	8006994 <G_q+0x43cc>
  } else {
    t34_re = t38.re / 2.0;
 8006960:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 8006964:	ed93 6b00 	vldr	d6, [r3]
 8006968:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800696c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006970:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006974:	443b      	add	r3, r7
 8006976:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t38.im / 2.0;
 800697a:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 800697e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006982:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006986:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800698a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800698e:	443b      	add	r3, r7
 8006990:	ed83 7b00 	vstr	d7, [r3]
  }

  t37_re += t34_re;
 8006994:	f241 33a8 	movw	r3, #5032	; 0x13a8
 8006998:	443b      	add	r3, r7
 800699a:	ed93 6b00 	vldr	d6, [r3]
 800699e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80069a2:	443b      	add	r3, r7
 80069a4:	ed93 7b00 	vldr	d7, [r3]
 80069a8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069ac:	f241 33a8 	movw	r3, #5032	; 0x13a8
 80069b0:	443b      	add	r3, r7
 80069b2:	ed83 7b00 	vstr	d7, [r3]
  t37_im += t34_im;
 80069b6:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80069ba:	ed93 6b00 	vldr	d6, [r3]
 80069be:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80069c2:	443b      	add	r3, r7
 80069c4:	ed93 7b00 	vldr	d7, [r3]
 80069c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80069cc:	f507 539d 	add.w	r3, r7, #5024	; 0x13a0
 80069d0:	ed83 7b00 	vstr	d7, [r3]
  t39_re = (t39.re * 0.0 - t39.im * 0.5) - (t40.re * 0.0 - t40.im * 0.5);
 80069d4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80069d8:	ed93 7b00 	vldr	d7, [r3]
 80069dc:	ed9f 6bce 	vldr	d6, [pc, #824]	; 8006d18 <G_q+0x4750>
 80069e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80069e4:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80069e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80069ec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80069f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80069f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80069f8:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80069fc:	ed93 7b00 	vldr	d7, [r3]
 8006a00:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 8006d18 <G_q+0x4750>
 8006a04:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006a08:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006a0c:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006a14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a18:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006a1c:	f241 2388 	movw	r3, #4744	; 0x1288
 8006a20:	443b      	add	r3, r7
 8006a22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006a26:	ed83 7b00 	vstr	d7, [r3]
  t39_im = (t39.re * 0.5 + t39.im * 0.0) - (t40.re * 0.5 + t40.im * 0.0);
 8006a2a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006a2e:	ed93 7b00 	vldr	d7, [r3]
 8006a32:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006a36:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a3a:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8006a3e:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a42:	ed9f 5bb5 	vldr	d5, [pc, #724]	; 8006d18 <G_q+0x4750>
 8006a46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006a4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006a4e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006a52:	ed93 7b00 	vldr	d7, [r3]
 8006a56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006a5a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006a5e:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8006a62:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a66:	ed9f 4bac 	vldr	d4, [pc, #688]	; 8006d18 <G_q+0x4750>
 8006a6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006a72:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8006a76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006a7a:	ed83 7b00 	vstr	d7, [r3]
  if (t10.im == 0.0) {
 8006a7e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006a82:	ed93 7b02 	vldr	d7, [r3, #8]
 8006a86:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a8e:	d116      	bne.n	8006abe <G_q+0x44f6>
    t10_re = t10.re / 2.0;
 8006a90:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006a94:	ed93 6b00 	vldr	d6, [r3]
 8006a98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006a9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006aa0:	f241 3398 	movw	r3, #5016	; 0x1398
 8006aa4:	443b      	add	r3, r7
 8006aa6:	ed83 7b00 	vstr	d7, [r3]
    t10_im = 0.0;
 8006aaa:	f04f 0300 	mov.w	r3, #0
 8006aae:	f04f 0400 	mov.w	r4, #0
 8006ab2:	f241 3290 	movw	r2, #5008	; 0x1390
 8006ab6:	443a      	add	r2, r7
 8006ab8:	e9c2 3400 	strd	r3, r4, [r2]
 8006abc:	e039      	b.n	8006b32 <G_q+0x456a>
  } else if (t10.re == 0.0) {
 8006abe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006ac2:	ed93 7b00 	vldr	d7, [r3]
 8006ac6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ace:	d116      	bne.n	8006afe <G_q+0x4536>
    t10_re = 0.0;
 8006ad0:	f04f 0300 	mov.w	r3, #0
 8006ad4:	f04f 0400 	mov.w	r4, #0
 8006ad8:	f241 3298 	movw	r2, #5016	; 0x1398
 8006adc:	443a      	add	r2, r7
 8006ade:	e9c2 3400 	strd	r3, r4, [r2]
    t10_im = t10.im / 2.0;
 8006ae2:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006ae6:	ed93 6b02 	vldr	d6, [r3, #8]
 8006aea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006aee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006af2:	f241 3390 	movw	r3, #5008	; 0x1390
 8006af6:	443b      	add	r3, r7
 8006af8:	ed83 7b00 	vstr	d7, [r3]
 8006afc:	e019      	b.n	8006b32 <G_q+0x456a>
  } else {
    t10_re = t10.re / 2.0;
 8006afe:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006b02:	ed93 6b00 	vldr	d6, [r3]
 8006b06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b0e:	f241 3398 	movw	r3, #5016	; 0x1398
 8006b12:	443b      	add	r3, r7
 8006b14:	ed83 7b00 	vstr	d7, [r3]
    t10_im = t10.im / 2.0;
 8006b18:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8006b1c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b28:	f241 3390 	movw	r3, #5008	; 0x1390
 8006b2c:	443b      	add	r3, r7
 8006b2e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t11.im == 0.0) {
 8006b32:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006b36:	ed93 7b02 	vldr	d7, [r3, #8]
 8006b3a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b42:	d116      	bne.n	8006b72 <G_q+0x45aa>
    t34_re = t11.re / 2.0;
 8006b44:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006b48:	ed93 6b00 	vldr	d6, [r3]
 8006b4c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006b50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006b54:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006b58:	443b      	add	r3, r7
 8006b5a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8006b5e:	f04f 0300 	mov.w	r3, #0
 8006b62:	f04f 0400 	mov.w	r4, #0
 8006b66:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8006b6a:	443a      	add	r2, r7
 8006b6c:	e9c2 3400 	strd	r3, r4, [r2]
 8006b70:	e039      	b.n	8006be6 <G_q+0x461e>
  } else if (t11.re == 0.0) {
 8006b72:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006b76:	ed93 7b00 	vldr	d7, [r3]
 8006b7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006b7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b82:	d116      	bne.n	8006bb2 <G_q+0x45ea>
    t34_re = 0.0;
 8006b84:	f04f 0300 	mov.w	r3, #0
 8006b88:	f04f 0400 	mov.w	r4, #0
 8006b8c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8006b90:	443a      	add	r2, r7
 8006b92:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t11.im / 2.0;
 8006b96:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006b9a:	ed93 6b02 	vldr	d6, [r3, #8]
 8006b9e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006ba2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006ba6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006baa:	443b      	add	r3, r7
 8006bac:	ed83 7b00 	vstr	d7, [r3]
 8006bb0:	e019      	b.n	8006be6 <G_q+0x461e>
  } else {
    t34_re = t11.re / 2.0;
 8006bb2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006bb6:	ed93 6b00 	vldr	d6, [r3]
 8006bba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006bbe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006bc2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006bc6:	443b      	add	r3, r7
 8006bc8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t11.im / 2.0;
 8006bcc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8006bd0:	ed93 6b02 	vldr	d6, [r3, #8]
 8006bd4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006bd8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006bdc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006be0:	443b      	add	r3, r7
 8006be2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t12.im == 0.0) {
 8006be6:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006bea:	ed93 7b02 	vldr	d7, [r3, #8]
 8006bee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bf6:	d115      	bne.n	8006c24 <G_q+0x465c>
    t12_re = t12.re / 2.0;
 8006bf8:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006bfc:	ed93 6b00 	vldr	d6, [r3]
 8006c00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c08:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c0c:	443b      	add	r3, r7
 8006c0e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8006c12:	f04f 0300 	mov.w	r3, #0
 8006c16:	f04f 0400 	mov.w	r4, #0
 8006c1a:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8006c1e:	e9c2 3400 	strd	r3, r4, [r2]
 8006c22:	e037      	b.n	8006c94 <G_q+0x46cc>
  } else if (t12.re == 0.0) {
 8006c24:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006c28:	ed93 7b00 	vldr	d7, [r3]
 8006c2c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c34:	d115      	bne.n	8006c62 <G_q+0x469a>
    t12_re = 0.0;
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	f04f 0400 	mov.w	r4, #0
 8006c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c42:	443a      	add	r2, r7
 8006c44:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t12.im / 2.0;
 8006c48:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006c4c:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c58:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006c5c:	ed83 7b00 	vstr	d7, [r3]
 8006c60:	e018      	b.n	8006c94 <G_q+0x46cc>
  } else {
    t12_re = t12.re / 2.0;
 8006c62:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006c66:	ed93 6b00 	vldr	d6, [r3]
 8006c6a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c6e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c72:	f241 3388 	movw	r3, #5000	; 0x1388
 8006c76:	443b      	add	r3, r7
 8006c78:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t12.im / 2.0;
 8006c7c:	f507 7374 	add.w	r3, r7, #976	; 0x3d0
 8006c80:	ed93 6b02 	vldr	d6, [r3, #8]
 8006c84:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006c88:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006c8c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006c90:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t13.im == 0.0) {
 8006c94:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006c98:	ed93 7b02 	vldr	d7, [r3, #8]
 8006c9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca4:	d116      	bne.n	8006cd4 <G_q+0x470c>
    t13_re = t13.re / 2.0;
 8006ca6:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006caa:	ed93 6b00 	vldr	d6, [r3]
 8006cae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006cb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cb6:	f241 3378 	movw	r3, #4984	; 0x1378
 8006cba:	443b      	add	r3, r7
 8006cbc:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8006cc0:	f04f 0300 	mov.w	r3, #0
 8006cc4:	f04f 0400 	mov.w	r4, #0
 8006cc8:	f241 3270 	movw	r2, #4976	; 0x1370
 8006ccc:	443a      	add	r2, r7
 8006cce:	e9c2 3400 	strd	r3, r4, [r2]
 8006cd2:	e03f      	b.n	8006d54 <G_q+0x478c>
  } else if (t13.re == 0.0) {
 8006cd4:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006cd8:	ed93 7b00 	vldr	d7, [r3]
 8006cdc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ce0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ce4:	d11c      	bne.n	8006d20 <G_q+0x4758>
    t13_re = 0.0;
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	f04f 0400 	mov.w	r4, #0
 8006cee:	f241 3278 	movw	r2, #4984	; 0x1378
 8006cf2:	443a      	add	r2, r7
 8006cf4:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t13.im / 2.0;
 8006cf8:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006cfc:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d08:	f241 3370 	movw	r3, #4976	; 0x1370
 8006d0c:	443b      	add	r3, r7
 8006d0e:	ed83 7b00 	vstr	d7, [r3]
 8006d12:	e01f      	b.n	8006d54 <G_q+0x478c>
 8006d14:	f3af 8000 	nop.w
	...
  } else {
    t13_re = t13.re / 2.0;
 8006d20:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006d24:	ed93 6b00 	vldr	d6, [r3]
 8006d28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d30:	f241 3378 	movw	r3, #4984	; 0x1378
 8006d34:	443b      	add	r3, r7
 8006d36:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t13.im / 2.0;
 8006d3a:	f507 7378 	add.w	r3, r7, #992	; 0x3e0
 8006d3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8006d42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006d46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d4a:	f241 3370 	movw	r3, #4976	; 0x1370
 8006d4e:	443b      	add	r3, r7
 8006d50:	ed83 7b00 	vstr	d7, [r3]
  }

  t10_re += t34_re;
 8006d54:	f241 3398 	movw	r3, #5016	; 0x1398
 8006d58:	443b      	add	r3, r7
 8006d5a:	ed93 6b00 	vldr	d6, [r3]
 8006d5e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006d62:	443b      	add	r3, r7
 8006d64:	ed93 7b00 	vldr	d7, [r3]
 8006d68:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d6c:	f241 3398 	movw	r3, #5016	; 0x1398
 8006d70:	443b      	add	r3, r7
 8006d72:	ed83 7b00 	vstr	d7, [r3]
  t10_im += t34_im;
 8006d76:	f241 3390 	movw	r3, #5008	; 0x1390
 8006d7a:	443b      	add	r3, r7
 8006d7c:	ed93 6b00 	vldr	d6, [r3]
 8006d80:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006d84:	443b      	add	r3, r7
 8006d86:	ed93 7b00 	vldr	d7, [r3]
 8006d8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006d8e:	f241 3390 	movw	r3, #5008	; 0x1390
 8006d92:	443b      	add	r3, r7
 8006d94:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t13_re;
 8006d98:	f241 3388 	movw	r3, #5000	; 0x1388
 8006d9c:	443b      	add	r3, r7
 8006d9e:	ed93 6b00 	vldr	d6, [r3]
 8006da2:	f241 3378 	movw	r3, #4984	; 0x1378
 8006da6:	443b      	add	r3, r7
 8006da8:	ed93 7b00 	vldr	d7, [r3]
 8006dac:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006db0:	f241 3388 	movw	r3, #5000	; 0x1388
 8006db4:	443b      	add	r3, r7
 8006db6:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 8006dba:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006dbe:	ed93 6b00 	vldr	d6, [r3]
 8006dc2:	f241 3370 	movw	r3, #4976	; 0x1370
 8006dc6:	443b      	add	r3, r7
 8006dc8:	ed93 7b00 	vldr	d7, [r3]
 8006dcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006dd0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8006dd4:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t14.re * 0.0 - t14.im * 0.5) - (t15.re * 0.0 - t15.im * 0.5);
 8006dd8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006ddc:	ed93 7b00 	vldr	d7, [r3]
 8006de0:	ed1f 6b33 	vldr	d6, [pc, #-204]	; 8006d18 <G_q+0x4750>
 8006de4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006de8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006dec:	ed93 7b02 	vldr	d7, [r3, #8]
 8006df0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006df4:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006df8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006dfc:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006e00:	ed93 7b00 	vldr	d7, [r3]
 8006e04:	ed1f 5b3c 	vldr	d5, [pc, #-240]	; 8006d18 <G_q+0x4750>
 8006e08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006e0c:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006e10:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e14:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006e18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006e20:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e24:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8006e28:	443b      	add	r3, r7
 8006e2a:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t14.re * 0.5 + t14.im * 0.0) - (t15.re * 0.5 + t15.im * 0.0);
 8006e2e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006e32:	ed93 7b00 	vldr	d7, [r3]
 8006e36:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006e3a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e3e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8006e42:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e46:	ed1f 5b4c 	vldr	d5, [pc, #-304]	; 8006d18 <G_q+0x4750>
 8006e4a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006e4e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006e52:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006e56:	ed93 7b00 	vldr	d7, [r3]
 8006e5a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006e5e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006e62:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8006e66:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e6a:	ed1f 4b55 	vldr	d4, [pc, #-340]	; 8006d18 <G_q+0x4750>
 8006e6e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006e72:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006e76:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006e7a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8006e7e:	443b      	add	r3, r7
 8006e80:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16.re * 0.0 - t16.im * 0.5) - (t17.re * 0.0 - t17.im * 0.5);
 8006e84:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e88:	ed93 7b00 	vldr	d7, [r3]
 8006e8c:	ed1f 6b5e 	vldr	d6, [pc, #-376]	; 8006d18 <G_q+0x4750>
 8006e90:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e94:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006e98:	ed93 7b02 	vldr	d7, [r3, #8]
 8006e9c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006ea0:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006ea4:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006ea8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006eac:	ed93 7b00 	vldr	d7, [r3]
 8006eb0:	ed1f 5b67 	vldr	d5, [pc, #-412]	; 8006d18 <G_q+0x4750>
 8006eb4:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006eb8:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006ebc:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ec0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8006ec4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006ec8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8006ecc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006ed0:	f241 3368 	movw	r3, #4968	; 0x1368
 8006ed4:	443b      	add	r3, r7
 8006ed6:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16.re * 0.5 + t16.im * 0.0) - (t17.re * 0.5 + t17.im * 0.0);
 8006eda:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006ede:	ed93 7b00 	vldr	d7, [r3]
 8006ee2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006ee6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006eea:	f507 737c 	add.w	r3, r7, #1008	; 0x3f0
 8006eee:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ef2:	ed1f 5b77 	vldr	d5, [pc, #-476]	; 8006d18 <G_q+0x4750>
 8006ef6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8006efa:	ee36 6b07 	vadd.f64	d6, d6, d7
 8006efe:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006f02:	ed93 7b00 	vldr	d7, [r3]
 8006f06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8006f0a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8006f0e:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8006f12:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f16:	ed1f 4b80 	vldr	d4, [pc, #-512]	; 8006d18 <G_q+0x4750>
 8006f1a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006f1e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8006f22:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006f26:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8006f2a:	ed83 7b00 	vstr	d7, [r3]
  if (t19.im == 0.0) {
 8006f2e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f32:	ed93 7b02 	vldr	d7, [r3, #8]
 8006f36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3e:	d116      	bne.n	8006f6e <G_q+0x49a6>
    t19_re = t19.re / 2.0;
 8006f40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f44:	ed93 6b00 	vldr	d6, [r3]
 8006f48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f50:	f241 3358 	movw	r3, #4952	; 0x1358
 8006f54:	443b      	add	r3, r7
 8006f56:	ed83 7b00 	vstr	d7, [r3]
    t19_im = 0.0;
 8006f5a:	f04f 0300 	mov.w	r3, #0
 8006f5e:	f04f 0400 	mov.w	r4, #0
 8006f62:	f241 3250 	movw	r2, #4944	; 0x1350
 8006f66:	443a      	add	r2, r7
 8006f68:	e9c2 3400 	strd	r3, r4, [r2]
 8006f6c:	e039      	b.n	8006fe2 <G_q+0x4a1a>
  } else if (t19.re == 0.0) {
 8006f6e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f72:	ed93 7b00 	vldr	d7, [r3]
 8006f76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f7e:	d116      	bne.n	8006fae <G_q+0x49e6>
    t19_re = 0.0;
 8006f80:	f04f 0300 	mov.w	r3, #0
 8006f84:	f04f 0400 	mov.w	r4, #0
 8006f88:	f241 3258 	movw	r2, #4952	; 0x1358
 8006f8c:	443a      	add	r2, r7
 8006f8e:	e9c2 3400 	strd	r3, r4, [r2]
    t19_im = t19.im / 2.0;
 8006f92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f96:	ed93 6b02 	vldr	d6, [r3, #8]
 8006f9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006f9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fa2:	f241 3350 	movw	r3, #4944	; 0x1350
 8006fa6:	443b      	add	r3, r7
 8006fa8:	ed83 7b00 	vstr	d7, [r3]
 8006fac:	e019      	b.n	8006fe2 <G_q+0x4a1a>
  } else {
    t19_re = t19.re / 2.0;
 8006fae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fb2:	ed93 6b00 	vldr	d6, [r3]
 8006fb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fbe:	f241 3358 	movw	r3, #4952	; 0x1358
 8006fc2:	443b      	add	r3, r7
 8006fc4:	ed83 7b00 	vstr	d7, [r3]
    t19_im = t19.im / 2.0;
 8006fc8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fcc:	ed93 6b02 	vldr	d6, [r3, #8]
 8006fd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8006fd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006fd8:	f241 3350 	movw	r3, #4944	; 0x1350
 8006fdc:	443b      	add	r3, r7
 8006fde:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t20.im == 0.0) {
 8006fe2:	4bcb      	ldr	r3, [pc, #812]	; (8007310 <G_q+0x4d48>)
 8006fe4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8006fe8:	443a      	add	r2, r7
 8006fea:	4413      	add	r3, r2
 8006fec:	ed93 7b02 	vldr	d7, [r3, #8]
 8006ff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	d118      	bne.n	800702c <G_q+0x4a64>
    t20_re = t20.re / 2.0;
 8006ffa:	4bc5      	ldr	r3, [pc, #788]	; (8007310 <G_q+0x4d48>)
 8006ffc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007000:	443a      	add	r2, r7
 8007002:	4413      	add	r3, r2
 8007004:	ed93 6b00 	vldr	d6, [r3]
 8007008:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800700c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007010:	f241 3348 	movw	r3, #4936	; 0x1348
 8007014:	443b      	add	r3, r7
 8007016:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	f04f 0400 	mov.w	r4, #0
 8007022:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007026:	e9c2 3400 	strd	r3, r4, [r2]
 800702a:	e043      	b.n	80070b4 <G_q+0x4aec>
  } else if (t20.re == 0.0) {
 800702c:	4bb8      	ldr	r3, [pc, #736]	; (8007310 <G_q+0x4d48>)
 800702e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007032:	443a      	add	r2, r7
 8007034:	4413      	add	r3, r2
 8007036:	ed93 7b00 	vldr	d7, [r3]
 800703a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800703e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007042:	d118      	bne.n	8007076 <G_q+0x4aae>
    t20_re = 0.0;
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	f04f 0400 	mov.w	r4, #0
 800704c:	f241 3248 	movw	r2, #4936	; 0x1348
 8007050:	443a      	add	r2, r7
 8007052:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t20.im / 2.0;
 8007056:	4bae      	ldr	r3, [pc, #696]	; (8007310 <G_q+0x4d48>)
 8007058:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800705c:	443a      	add	r2, r7
 800705e:	4413      	add	r3, r2
 8007060:	ed93 6b02 	vldr	d6, [r3, #8]
 8007064:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800706c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007070:	ed83 7b00 	vstr	d7, [r3]
 8007074:	e01e      	b.n	80070b4 <G_q+0x4aec>
  } else {
    t20_re = t20.re / 2.0;
 8007076:	4ba6      	ldr	r3, [pc, #664]	; (8007310 <G_q+0x4d48>)
 8007078:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800707c:	443a      	add	r2, r7
 800707e:	4413      	add	r3, r2
 8007080:	ed93 6b00 	vldr	d6, [r3]
 8007084:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007088:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800708c:	f241 3348 	movw	r3, #4936	; 0x1348
 8007090:	443b      	add	r3, r7
 8007092:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t20.im / 2.0;
 8007096:	4b9e      	ldr	r3, [pc, #632]	; (8007310 <G_q+0x4d48>)
 8007098:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800709c:	443a      	add	r2, r7
 800709e:	4413      	add	r3, r2
 80070a0:	ed93 6b02 	vldr	d6, [r3, #8]
 80070a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80070a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80070ac:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80070b0:	ed83 7b00 	vstr	d7, [r3]
  }

  b_t10_re = (t10_re * t12_re - t10_im * t12_im) + (t34_re * t16_re - t34_im *
 80070b4:	f241 3398 	movw	r3, #5016	; 0x1398
 80070b8:	443b      	add	r3, r7
 80070ba:	ed93 6b00 	vldr	d6, [r3]
 80070be:	f241 3388 	movw	r3, #5000	; 0x1388
 80070c2:	443b      	add	r3, r7
 80070c4:	ed93 7b00 	vldr	d7, [r3]
 80070c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80070cc:	f241 3390 	movw	r3, #5008	; 0x1390
 80070d0:	443b      	add	r3, r7
 80070d2:	ed93 5b00 	vldr	d5, [r3]
 80070d6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80070da:	ed93 7b00 	vldr	d7, [r3]
 80070de:	ee25 7b07 	vmul.f64	d7, d5, d7
 80070e2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80070e6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80070ea:	443b      	add	r3, r7
 80070ec:	ed93 5b00 	vldr	d5, [r3]
 80070f0:	f241 3368 	movw	r3, #4968	; 0x1368
 80070f4:	443b      	add	r3, r7
 80070f6:	ed93 7b00 	vldr	d7, [r3]
 80070fa:	ee25 5b07 	vmul.f64	d5, d5, d7
 80070fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007102:	443b      	add	r3, r7
 8007104:	ed93 4b00 	vldr	d4, [r3]
 8007108:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800710c:	ed93 7b00 	vldr	d7, [r3]
 8007110:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007114:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007118:	ee36 7b07 	vadd.f64	d7, d6, d7
 800711c:	f241 3338 	movw	r3, #4920	; 0x1338
 8007120:	443b      	add	r3, r7
 8007122:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t10_im = (t10_re * t12_im + t10_im * t12_re) + (t34_re * t16_im + t34_im *
 8007126:	f241 3398 	movw	r3, #5016	; 0x1398
 800712a:	443b      	add	r3, r7
 800712c:	ed93 6b00 	vldr	d6, [r3]
 8007130:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007134:	ed93 7b00 	vldr	d7, [r3]
 8007138:	ee26 6b07 	vmul.f64	d6, d6, d7
 800713c:	f241 3390 	movw	r3, #5008	; 0x1390
 8007140:	443b      	add	r3, r7
 8007142:	ed93 5b00 	vldr	d5, [r3]
 8007146:	f241 3388 	movw	r3, #5000	; 0x1388
 800714a:	443b      	add	r3, r7
 800714c:	ed93 7b00 	vldr	d7, [r3]
 8007150:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007154:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007158:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800715c:	443b      	add	r3, r7
 800715e:	ed93 5b00 	vldr	d5, [r3]
 8007162:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007166:	ed93 7b00 	vldr	d7, [r3]
 800716a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800716e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007172:	443b      	add	r3, r7
 8007174:	ed93 4b00 	vldr	d4, [r3]
 8007178:	f241 3368 	movw	r3, #4968	; 0x1368
 800717c:	443b      	add	r3, r7
 800717e:	ed93 7b00 	vldr	d7, [r3]
 8007182:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007186:	ee35 7b07 	vadd.f64	d7, d5, d7
 800718a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800718e:	f241 3390 	movw	r3, #5008	; 0x1390
 8007192:	443b      	add	r3, r7
 8007194:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t19_re += t20_re;
 8007198:	f241 3358 	movw	r3, #4952	; 0x1358
 800719c:	443b      	add	r3, r7
 800719e:	ed93 6b00 	vldr	d6, [r3]
 80071a2:	f241 3348 	movw	r3, #4936	; 0x1348
 80071a6:	443b      	add	r3, r7
 80071a8:	ed93 7b00 	vldr	d7, [r3]
 80071ac:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071b0:	f241 3358 	movw	r3, #4952	; 0x1358
 80071b4:	443b      	add	r3, r7
 80071b6:	ed83 7b00 	vstr	d7, [r3]
  t19_im += t20_im;
 80071ba:	f241 3350 	movw	r3, #4944	; 0x1350
 80071be:	443b      	add	r3, r7
 80071c0:	ed93 6b00 	vldr	d6, [r3]
 80071c4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80071c8:	ed93 7b00 	vldr	d7, [r3]
 80071cc:	ee36 7b07 	vadd.f64	d7, d6, d7
 80071d0:	f241 3350 	movw	r3, #4944	; 0x1350
 80071d4:	443b      	add	r3, r7
 80071d6:	ed83 7b00 	vstr	d7, [r3]
  if (t25.im == 0.0) {
 80071da:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80071de:	ed93 7b02 	vldr	d7, [r3, #8]
 80071e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80071e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ea:	d116      	bne.n	800721a <G_q+0x4c52>
    t13_re = t25.re / 2.0;
 80071ec:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 80071f0:	ed93 6b00 	vldr	d6, [r3]
 80071f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80071f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80071fc:	f241 3378 	movw	r3, #4984	; 0x1378
 8007200:	443b      	add	r3, r7
 8007202:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8007206:	f04f 0300 	mov.w	r3, #0
 800720a:	f04f 0400 	mov.w	r4, #0
 800720e:	f241 3270 	movw	r2, #4976	; 0x1370
 8007212:	443a      	add	r2, r7
 8007214:	e9c2 3400 	strd	r3, r4, [r2]
 8007218:	e039      	b.n	800728e <G_q+0x4cc6>
  } else if (t25.re == 0.0) {
 800721a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800721e:	ed93 7b00 	vldr	d7, [r3]
 8007222:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800722a:	d116      	bne.n	800725a <G_q+0x4c92>
    t13_re = 0.0;
 800722c:	f04f 0300 	mov.w	r3, #0
 8007230:	f04f 0400 	mov.w	r4, #0
 8007234:	f241 3278 	movw	r2, #4984	; 0x1378
 8007238:	443a      	add	r2, r7
 800723a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t25.im / 2.0;
 800723e:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007242:	ed93 6b02 	vldr	d6, [r3, #8]
 8007246:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800724a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800724e:	f241 3370 	movw	r3, #4976	; 0x1370
 8007252:	443b      	add	r3, r7
 8007254:	ed83 7b00 	vstr	d7, [r3]
 8007258:	e019      	b.n	800728e <G_q+0x4cc6>
  } else {
    t13_re = t25.re / 2.0;
 800725a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 800725e:	ed93 6b00 	vldr	d6, [r3]
 8007262:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007266:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800726a:	f241 3378 	movw	r3, #4984	; 0x1378
 800726e:	443b      	add	r3, r7
 8007270:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t25.im / 2.0;
 8007274:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8007278:	ed93 6b02 	vldr	d6, [r3, #8]
 800727c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007280:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007284:	f241 3370 	movw	r3, #4976	; 0x1370
 8007288:	443b      	add	r3, r7
 800728a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t26.im == 0.0) {
 800728e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007292:	ed93 7b02 	vldr	d7, [r3, #8]
 8007296:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800729a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800729e:	d116      	bne.n	80072ce <G_q+0x4d06>
    t34_re = t26.re / 2.0;
 80072a0:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80072a4:	ed93 6b00 	vldr	d6, [r3]
 80072a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80072ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80072b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80072b4:	443b      	add	r3, r7
 80072b6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 80072ba:	f04f 0300 	mov.w	r3, #0
 80072be:	f04f 0400 	mov.w	r4, #0
 80072c2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80072c6:	443a      	add	r2, r7
 80072c8:	e9c2 3400 	strd	r3, r4, [r2]
 80072cc:	e03c      	b.n	8007348 <G_q+0x4d80>
  } else if (t26.re == 0.0) {
 80072ce:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80072d2:	ed93 7b00 	vldr	d7, [r3]
 80072d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80072da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072de:	d119      	bne.n	8007314 <G_q+0x4d4c>
    t34_re = 0.0;
 80072e0:	f04f 0300 	mov.w	r3, #0
 80072e4:	f04f 0400 	mov.w	r4, #0
 80072e8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80072ec:	443a      	add	r2, r7
 80072ee:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t26.im / 2.0;
 80072f2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80072f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80072fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80072fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007302:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007306:	443b      	add	r3, r7
 8007308:	ed83 7b00 	vstr	d7, [r3]
 800730c:	e01c      	b.n	8007348 <G_q+0x4d80>
 800730e:	bf00      	nop
 8007310:	ffffed50 	.word	0xffffed50
  } else {
    t34_re = t26.re / 2.0;
 8007314:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007318:	ed93 6b00 	vldr	d6, [r3]
 800731c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007320:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007324:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007328:	443b      	add	r3, r7
 800732a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t26.im / 2.0;
 800732e:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8007332:	ed93 6b02 	vldr	d6, [r3, #8]
 8007336:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800733a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800733e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007342:	443b      	add	r3, r7
 8007344:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 8007348:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800734c:	ed93 7b00 	vldr	d7, [r3]
 8007350:	ed9f 6bf1 	vldr	d6, [pc, #964]	; 8007718 <G_q+0x5150>
 8007354:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007358:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800735c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007360:	ed9f 5bef 	vldr	d5, [pc, #956]	; 8007720 <G_q+0x5158>
 8007364:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007368:	ee36 6b47 	vsub.f64	d6, d6, d7
 800736c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007370:	ed93 7b00 	vldr	d7, [r3]
 8007374:	ed9f 5be8 	vldr	d5, [pc, #928]	; 8007718 <G_q+0x5150>
 8007378:	ee27 5b05 	vmul.f64	d5, d7, d5
    t28.im * 3.061616997868383E-17);
 800737c:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 8007380:	ed93 7b02 	vldr	d7, [r3, #8]
 8007384:	ed9f 4be6 	vldr	d4, [pc, #920]	; 8007720 <G_q+0x5158>
 8007388:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t27.re * 0.0 - t27.im * 3.061616997868383E-17) - (t28.re * 0.0 -
 800738c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007390:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007394:	f241 3368 	movw	r3, #4968	; 0x1368
 8007398:	443b      	add	r3, r7
 800739a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 800739e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80073a2:	ed93 7b00 	vldr	d7, [r3]
 80073a6:	ed9f 6bde 	vldr	d6, [pc, #888]	; 8007720 <G_q+0x5158>
 80073aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80073ae:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80073b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80073b6:	ed9f 5bd8 	vldr	d5, [pc, #864]	; 8007718 <G_q+0x5150>
 80073ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80073be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80073c2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80073c6:	ed93 7b00 	vldr	d7, [r3]
 80073ca:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 8007720 <G_q+0x5158>
 80073ce:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t28.im * 0.0);
 80073d2:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80073d6:	ed93 7b02 	vldr	d7, [r3, #8]
 80073da:	ed9f 4bcf 	vldr	d4, [pc, #828]	; 8007718 <G_q+0x5150>
 80073de:	ee27 7b04 	vmul.f64	d7, d7, d4
 80073e2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t27.re * 3.061616997868383E-17 + t27.im * 0.0) - (t28.re *
 80073e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80073ea:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80073ee:	ed83 7b00 	vstr	d7, [r3]
  t13_re += t34_re;
 80073f2:	f241 3378 	movw	r3, #4984	; 0x1378
 80073f6:	443b      	add	r3, r7
 80073f8:	ed93 6b00 	vldr	d6, [r3]
 80073fc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007400:	443b      	add	r3, r7
 8007402:	ed93 7b00 	vldr	d7, [r3]
 8007406:	ee36 7b07 	vadd.f64	d7, d6, d7
 800740a:	f241 3378 	movw	r3, #4984	; 0x1378
 800740e:	443b      	add	r3, r7
 8007410:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8007414:	f241 3370 	movw	r3, #4976	; 0x1370
 8007418:	443b      	add	r3, r7
 800741a:	ed93 6b00 	vldr	d6, [r3]
 800741e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007422:	443b      	add	r3, r7
 8007424:	ed93 7b00 	vldr	d7, [r3]
 8007428:	ee36 7b07 	vadd.f64	d7, d6, d7
 800742c:	f241 3370 	movw	r3, #4976	; 0x1370
 8007430:	443b      	add	r3, r7
 8007432:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t31.re * 3.061616997868383E-17 + t32.re * 3.061616997868383E-17;
 8007436:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800743a:	ed93 7b00 	vldr	d7, [r3]
 800743e:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 8007720 <G_q+0x5158>
 8007442:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007446:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 800744a:	ed93 7b00 	vldr	d7, [r3]
 800744e:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 8007720 <G_q+0x5158>
 8007452:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007456:	ee36 7b07 	vadd.f64	d7, d6, d7
 800745a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800745e:	443b      	add	r3, r7
 8007460:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t31.im * 3.061616997868383E-17 + t32.im * 3.061616997868383E-17;
 8007464:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8007468:	ed93 7b02 	vldr	d7, [r3, #8]
 800746c:	ed9f 6bac 	vldr	d6, [pc, #688]	; 8007720 <G_q+0x5158>
 8007470:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007474:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8007478:	ed93 7b02 	vldr	d7, [r3, #8]
 800747c:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8007720 <G_q+0x5158>
 8007480:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007484:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007488:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800748c:	443b      	add	r3, r7
 800748e:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t29.re * 0.0 - t29.im * 0.5) - (t30.re * 0.0 - t30.im * 0.5);
 8007492:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8007496:	ed93 7b00 	vldr	d7, [r3]
 800749a:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 8007718 <G_q+0x5150>
 800749e:	ee27 6b06 	vmul.f64	d6, d7, d6
 80074a2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80074a6:	ed93 7b02 	vldr	d7, [r3, #8]
 80074aa:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80074ae:	ee27 7b05 	vmul.f64	d7, d7, d5
 80074b2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80074b6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80074ba:	ed93 7b00 	vldr	d7, [r3]
 80074be:	ed9f 5b96 	vldr	d5, [pc, #600]	; 8007718 <G_q+0x5150>
 80074c2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80074c6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 80074ca:	ed93 7b02 	vldr	d7, [r3, #8]
 80074ce:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80074d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80074d6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80074da:	ee36 7b47 	vsub.f64	d7, d6, d7
 80074de:	f241 3388 	movw	r3, #5000	; 0x1388
 80074e2:	443b      	add	r3, r7
 80074e4:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t29.re * 0.5 + t29.im * 0.0) - (t30.re * 0.5 + t30.im * 0.0);
 80074e8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80074ec:	ed93 7b00 	vldr	d7, [r3]
 80074f0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80074f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80074f8:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80074fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8007500:	ed9f 5b85 	vldr	d5, [pc, #532]	; 8007718 <G_q+0x5150>
 8007504:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007508:	ee36 6b07 	vadd.f64	d6, d6, d7
 800750c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007510:	ed93 7b00 	vldr	d7, [r3]
 8007514:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007518:	ee27 5b05 	vmul.f64	d5, d7, d5
 800751c:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8007520:	ed93 7b02 	vldr	d7, [r3, #8]
 8007524:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 8007718 <G_q+0x5150>
 8007528:	ee27 7b04 	vmul.f64	d7, d7, d4
 800752c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007530:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007534:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007538:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t21.re * 0.0 - t21.im * 0.5) - (t22.re * 0.0 - t22.im * 0.5);
 800753c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007540:	ed93 7b00 	vldr	d7, [r3]
 8007544:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8007718 <G_q+0x5150>
 8007548:	ee27 6b06 	vmul.f64	d6, d7, d6
 800754c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8007550:	ed93 7b02 	vldr	d7, [r3, #8]
 8007554:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007558:	ee27 7b05 	vmul.f64	d7, d7, d5
 800755c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007560:	4b73      	ldr	r3, [pc, #460]	; (8007730 <G_q+0x5168>)
 8007562:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007566:	443a      	add	r2, r7
 8007568:	4413      	add	r3, r2
 800756a:	ed93 7b00 	vldr	d7, [r3]
 800756e:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007718 <G_q+0x5150>
 8007572:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007576:	4b6e      	ldr	r3, [pc, #440]	; (8007730 <G_q+0x5168>)
 8007578:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800757c:	443a      	add	r2, r7
 800757e:	4413      	add	r3, r2
 8007580:	ed93 7b02 	vldr	d7, [r3, #8]
 8007584:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007588:	ee27 7b04 	vmul.f64	d7, d7, d4
 800758c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007590:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007594:	f241 3348 	movw	r3, #4936	; 0x1348
 8007598:	443b      	add	r3, r7
 800759a:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t21.re * 0.5 + t21.im * 0.0) - (t22.re * 0.5 + t22.im * 0.0);
 800759e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075a2:	ed93 7b00 	vldr	d7, [r3]
 80075a6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80075aa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80075ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80075b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80075b6:	ed9f 5b58 	vldr	d5, [pc, #352]	; 8007718 <G_q+0x5150>
 80075ba:	ee27 7b05 	vmul.f64	d7, d7, d5
 80075be:	ee36 6b07 	vadd.f64	d6, d6, d7
 80075c2:	4b5b      	ldr	r3, [pc, #364]	; (8007730 <G_q+0x5168>)
 80075c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80075c8:	443a      	add	r2, r7
 80075ca:	4413      	add	r3, r2
 80075cc:	ed93 7b00 	vldr	d7, [r3]
 80075d0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80075d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80075d8:	4b55      	ldr	r3, [pc, #340]	; (8007730 <G_q+0x5168>)
 80075da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80075de:	443a      	add	r2, r7
 80075e0:	4413      	add	r3, r2
 80075e2:	ed93 7b02 	vldr	d7, [r3, #8]
 80075e6:	ed9f 4b4c 	vldr	d4, [pc, #304]	; 8007718 <G_q+0x5150>
 80075ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80075ee:	ee35 7b07 	vadd.f64	d7, d5, d7
 80075f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80075f6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80075fa:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 80075fe:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007602:	ed93 7b00 	vldr	d7, [r3]
 8007606:	ed9f 6b44 	vldr	d6, [pc, #272]	; 8007718 <G_q+0x5150>
 800760a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800760e:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8007612:	ed93 7b02 	vldr	d7, [r3, #8]
 8007616:	ed9f 5b44 	vldr	d5, [pc, #272]	; 8007728 <G_q+0x5160>
 800761a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800761e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007622:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007626:	ed93 7b00 	vldr	d7, [r3]
 800762a:	ed9f 5b3b 	vldr	d5, [pc, #236]	; 8007718 <G_q+0x5150>
 800762e:	ee27 5b05 	vmul.f64	d5, d7, d5
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 8007632:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8007636:	ed93 7b02 	vldr	d7, [r3, #8]
 800763a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8007728 <G_q+0x5160>
 800763e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 8007642:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007646:	ee36 6b47 	vsub.f64	d6, d6, d7
              t24.im * 6.123233995736766E-17)) - (t16_re * t13_re - t16_im *
 800764a:	f241 3368 	movw	r3, #4968	; 0x1368
 800764e:	443b      	add	r3, r7
 8007650:	ed93 5b00 	vldr	d5, [r3]
 8007654:	f241 3378 	movw	r3, #4984	; 0x1378
 8007658:	443b      	add	r3, r7
 800765a:	ed93 7b00 	vldr	d7, [r3]
 800765e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007662:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007666:	ed93 4b00 	vldr	d4, [r3]
 800766a:	f241 3370 	movw	r3, #4976	; 0x1370
 800766e:	443b      	add	r3, r7
 8007670:	ed93 7b00 	vldr	d7, [r3]
 8007674:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007678:	ee35 7b47 	vsub.f64	d7, d5, d7
 800767c:	ee36 6b47 	vsub.f64	d6, d6, d7
             t13_im)) + (t34_re * t12_re - t34_im * t12_im);
 8007680:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007684:	443b      	add	r3, r7
 8007686:	ed93 5b00 	vldr	d5, [r3]
 800768a:	f241 3388 	movw	r3, #5000	; 0x1388
 800768e:	443b      	add	r3, r7
 8007690:	ed93 7b00 	vldr	d7, [r3]
 8007694:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007698:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800769c:	443b      	add	r3, r7
 800769e:	ed93 4b00 	vldr	d4, [r3]
 80076a2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80076a6:	ed93 7b00 	vldr	d7, [r3]
 80076aa:	ee24 7b07 	vmul.f64	d7, d4, d7
 80076ae:	ee35 7b47 	vsub.f64	d7, d5, d7
  t23_re = (((t23.re * 0.0 - t23.im * 6.123233995736766E-17) - (t24.re * 0.0 -
 80076b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80076b6:	f241 3330 	movw	r3, #4912	; 0x1330
 80076ba:	443b      	add	r3, r7
 80076bc:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 80076c0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80076c4:	ed93 7b00 	vldr	d7, [r3]
 80076c8:	ed9f 6b17 	vldr	d6, [pc, #92]	; 8007728 <G_q+0x5160>
 80076cc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80076d0:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 80076d4:	ed93 7b02 	vldr	d7, [r3, #8]
 80076d8:	ed9f 5b0f 	vldr	d5, [pc, #60]	; 8007718 <G_q+0x5150>
 80076dc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80076e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 80076e4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80076e8:	ed93 7b00 	vldr	d7, [r3]
 80076ec:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8007728 <G_q+0x5160>
 80076f0:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 80076f4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 80076f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80076fc:	ed9f 4b06 	vldr	d4, [pc, #24]	; 8007718 <G_q+0x5150>
 8007700:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007704:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007708:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800770c:	f241 3368 	movw	r3, #4968	; 0x1368
 8007710:	e010      	b.n	8007734 <G_q+0x516c>
 8007712:	bf00      	nop
 8007714:	f3af 8000 	nop.w
	...
 8007720:	33145c07 	.word	0x33145c07
 8007724:	3c81a626 	.word	0x3c81a626
 8007728:	33145c07 	.word	0x33145c07
 800772c:	3c91a626 	.word	0x3c91a626
 8007730:	ffffed70 	.word	0xffffed70
 8007734:	443b      	add	r3, r7
 8007736:	ed93 5b00 	vldr	d5, [r3]
 800773a:	f241 3370 	movw	r3, #4976	; 0x1370
 800773e:	443b      	add	r3, r7
 8007740:	ed93 7b00 	vldr	d7, [r3]
 8007744:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8007748:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800774c:	ed93 4b00 	vldr	d4, [r3]
 8007750:	f241 3378 	movw	r3, #4984	; 0x1378
 8007754:	443b      	add	r3, r7
 8007756:	ed93 7b00 	vldr	d7, [r3]
 800775a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t24.im * 0.0)) - (t16_re * t13_im + t16_im
 800775e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007762:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t13_re)) + (t34_re * t12_im + t34_im * t12_re);
 8007766:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800776a:	443b      	add	r3, r7
 800776c:	ed93 5b00 	vldr	d5, [r3]
 8007770:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007774:	ed93 7b00 	vldr	d7, [r3]
 8007778:	ee25 5b07 	vmul.f64	d5, d5, d7
 800777c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007780:	443b      	add	r3, r7
 8007782:	ed93 4b00 	vldr	d4, [r3]
 8007786:	f241 3388 	movw	r3, #5000	; 0x1388
 800778a:	443b      	add	r3, r7
 800778c:	ed93 7b00 	vldr	d7, [r3]
 8007790:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007794:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((t23.re * 6.123233995736766E-17 + t23.im * 0.0) - (t24.re *
 8007798:	ee36 7b07 	vadd.f64	d7, d6, d7
 800779c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80077a0:	443b      	add	r3, r7
 80077a2:	ed83 7b00 	vstr	d7, [r3]
  t54_re = (t54.re * 0.0 - t54.im * 0.5) - (t55.re * 0.0 - t55.im * 0.5);
 80077a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077aa:	ed93 7b00 	vldr	d7, [r3]
 80077ae:	ed9f 6be4 	vldr	d6, [pc, #912]	; 8007b40 <G_q+0x5578>
 80077b2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80077b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80077ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80077be:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80077c2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80077c6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80077ca:	4bdf      	ldr	r3, [pc, #892]	; (8007b48 <G_q+0x5580>)
 80077cc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80077d0:	443a      	add	r2, r7
 80077d2:	4413      	add	r3, r2
 80077d4:	ed93 7b00 	vldr	d7, [r3]
 80077d8:	ed9f 5bd9 	vldr	d5, [pc, #868]	; 8007b40 <G_q+0x5578>
 80077dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 80077e0:	4bd9      	ldr	r3, [pc, #868]	; (8007b48 <G_q+0x5580>)
 80077e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80077e6:	443a      	add	r2, r7
 80077e8:	4413      	add	r3, r2
 80077ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80077ee:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80077f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80077f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80077fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 80077fe:	f241 3328 	movw	r3, #4904	; 0x1328
 8007802:	443b      	add	r3, r7
 8007804:	ed83 7b00 	vstr	d7, [r3]
  t54_im = (t54.re * 0.5 + t54.im * 0.0) - (t55.re * 0.5 + t55.im * 0.0);
 8007808:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800780c:	ed93 7b00 	vldr	d7, [r3]
 8007810:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007814:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007818:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800781c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007820:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 8007b40 <G_q+0x5578>
 8007824:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007828:	ee36 6b07 	vadd.f64	d6, d6, d7
 800782c:	4bc6      	ldr	r3, [pc, #792]	; (8007b48 <G_q+0x5580>)
 800782e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007832:	443a      	add	r2, r7
 8007834:	4413      	add	r3, r2
 8007836:	ed93 7b00 	vldr	d7, [r3]
 800783a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800783e:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007842:	4bc1      	ldr	r3, [pc, #772]	; (8007b48 <G_q+0x5580>)
 8007844:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007848:	443a      	add	r2, r7
 800784a:	4413      	add	r3, r2
 800784c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007850:	ed9f 4bbb 	vldr	d4, [pc, #748]	; 8007b40 <G_q+0x5578>
 8007854:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007858:	ee35 7b07 	vadd.f64	d7, d5, d7
 800785c:	f241 2378 	movw	r3, #4728	; 0x1278
 8007860:	443b      	add	r3, r7
 8007862:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007866:	ed83 7b00 	vstr	d7, [r3]
  t10_re = (b_t10_re * t19_re - t10_im * t19_im) + (t20_re * t23_re - t20_im *
 800786a:	f241 3338 	movw	r3, #4920	; 0x1338
 800786e:	443b      	add	r3, r7
 8007870:	ed93 6b00 	vldr	d6, [r3]
 8007874:	f241 3358 	movw	r3, #4952	; 0x1358
 8007878:	443b      	add	r3, r7
 800787a:	ed93 7b00 	vldr	d7, [r3]
 800787e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007882:	f241 3390 	movw	r3, #5008	; 0x1390
 8007886:	443b      	add	r3, r7
 8007888:	ed93 5b00 	vldr	d5, [r3]
 800788c:	f241 3350 	movw	r3, #4944	; 0x1350
 8007890:	443b      	add	r3, r7
 8007892:	ed93 7b00 	vldr	d7, [r3]
 8007896:	ee25 7b07 	vmul.f64	d7, d5, d7
 800789a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800789e:	f241 3348 	movw	r3, #4936	; 0x1348
 80078a2:	443b      	add	r3, r7
 80078a4:	ed93 5b00 	vldr	d5, [r3]
 80078a8:	f241 3330 	movw	r3, #4912	; 0x1330
 80078ac:	443b      	add	r3, r7
 80078ae:	ed93 7b00 	vldr	d7, [r3]
 80078b2:	ee25 5b07 	vmul.f64	d5, d5, d7
 80078b6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80078ba:	ed93 4b00 	vldr	d4, [r3]
 80078be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80078c2:	443b      	add	r3, r7
 80078c4:	ed93 7b00 	vldr	d7, [r3]
 80078c8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80078cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80078d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80078d4:	f241 3398 	movw	r3, #5016	; 0x1398
 80078d8:	443b      	add	r3, r7
 80078da:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t10_im = (b_t10_re * t19_im + t10_im * t19_re) + (t20_re * t34_re + t20_im *
 80078de:	f241 3338 	movw	r3, #4920	; 0x1338
 80078e2:	443b      	add	r3, r7
 80078e4:	ed93 6b00 	vldr	d6, [r3]
 80078e8:	f241 3350 	movw	r3, #4944	; 0x1350
 80078ec:	443b      	add	r3, r7
 80078ee:	ed93 7b00 	vldr	d7, [r3]
 80078f2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80078f6:	f241 3390 	movw	r3, #5008	; 0x1390
 80078fa:	443b      	add	r3, r7
 80078fc:	ed93 5b00 	vldr	d5, [r3]
 8007900:	f241 3358 	movw	r3, #4952	; 0x1358
 8007904:	443b      	add	r3, r7
 8007906:	ed93 7b00 	vldr	d7, [r3]
 800790a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800790e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007912:	f241 3348 	movw	r3, #4936	; 0x1348
 8007916:	443b      	add	r3, r7
 8007918:	ed93 5b00 	vldr	d5, [r3]
 800791c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007920:	443b      	add	r3, r7
 8007922:	ed93 7b00 	vldr	d7, [r3]
 8007926:	ee25 5b07 	vmul.f64	d5, d5, d7
 800792a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800792e:	ed93 4b00 	vldr	d4, [r3]
 8007932:	f241 3330 	movw	r3, #4912	; 0x1330
 8007936:	443b      	add	r3, r7
 8007938:	ed93 7b00 	vldr	d7, [r3]
 800793c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007940:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007944:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007948:	f241 3390 	movw	r3, #5008	; 0x1390
 800794c:	443b      	add	r3, r7
 800794e:	ed83 7b00 	vstr	d7, [r3]
    t23_re);
  t13_re = (t8.re * 0.0 - t8.im * 0.5) - (t9.re * 0.0 - t9.im * 0.5);
 8007952:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007956:	ed93 7b00 	vldr	d7, [r3]
 800795a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8007b40 <G_q+0x5578>
 800795e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007962:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007966:	ed93 7b02 	vldr	d7, [r3, #8]
 800796a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800796e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007972:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007976:	4b75      	ldr	r3, [pc, #468]	; (8007b4c <G_q+0x5584>)
 8007978:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800797c:	443a      	add	r2, r7
 800797e:	4413      	add	r3, r2
 8007980:	ed93 7b00 	vldr	d7, [r3]
 8007984:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 8007b40 <G_q+0x5578>
 8007988:	ee27 5b05 	vmul.f64	d5, d7, d5
 800798c:	4b6f      	ldr	r3, [pc, #444]	; (8007b4c <G_q+0x5584>)
 800798e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007992:	443a      	add	r2, r7
 8007994:	4413      	add	r3, r2
 8007996:	ed93 7b02 	vldr	d7, [r3, #8]
 800799a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800799e:	ee27 7b04 	vmul.f64	d7, d7, d4
 80079a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80079aa:	f241 3378 	movw	r3, #4984	; 0x1378
 80079ae:	443b      	add	r3, r7
 80079b0:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t8.re * 0.5 + t8.im * 0.0) - (t9.re * 0.5 + t9.im * 0.0);
 80079b4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80079b8:	ed93 7b00 	vldr	d7, [r3]
 80079bc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80079c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80079c4:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 80079c8:	ed93 7b02 	vldr	d7, [r3, #8]
 80079cc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8007b40 <G_q+0x5578>
 80079d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80079d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80079d8:	4b5c      	ldr	r3, [pc, #368]	; (8007b4c <G_q+0x5584>)
 80079da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80079de:	443a      	add	r2, r7
 80079e0:	4413      	add	r3, r2
 80079e2:	ed93 7b00 	vldr	d7, [r3]
 80079e6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80079ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 80079ee:	4b57      	ldr	r3, [pc, #348]	; (8007b4c <G_q+0x5584>)
 80079f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80079f4:	443a      	add	r2, r7
 80079f6:	4413      	add	r3, r2
 80079f8:	ed93 7b02 	vldr	d7, [r3, #8]
 80079fc:	ed9f 4b50 	vldr	d4, [pc, #320]	; 8007b40 <G_q+0x5578>
 8007a00:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a04:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007a08:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a0c:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007a10:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t5.re * 0.0 - t5.im * 0.5) - (t6.re * 0.0 - t6.im * 0.5);
 8007a14:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007a18:	ed93 7b00 	vldr	d7, [r3]
 8007a1c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8007b40 <G_q+0x5578>
 8007a20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007a24:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007a28:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a2c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007a34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a38:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007a3c:	ed93 7b00 	vldr	d7, [r3]
 8007a40:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 8007b40 <G_q+0x5578>
 8007a44:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007a48:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007a4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a50:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8007a54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007a5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007a60:	f241 3370 	movw	r3, #4976	; 0x1370
 8007a64:	443b      	add	r3, r7
 8007a66:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t5.re * 0.5 + t5.im * 0.0) - (t6.re * 0.5 + t6.im * 0.0);
 8007a6a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007a6e:	ed93 7b00 	vldr	d7, [r3]
 8007a72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007a76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007a7a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8007a7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007a82:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 8007b40 <G_q+0x5578>
 8007a86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007a8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007a8e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007a92:	ed93 7b00 	vldr	d7, [r3]
 8007a96:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007a9a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007a9e:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8007aa2:	ed93 7b02 	vldr	d7, [r3, #8]
 8007aa6:	ed9f 4b26 	vldr	d4, [pc, #152]	; 8007b40 <G_q+0x5578>
 8007aaa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007aae:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007ab2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ab6:	f241 3368 	movw	r3, #4968	; 0x1368
 8007aba:	443b      	add	r3, r7
 8007abc:	ed83 7b00 	vstr	d7, [r3]
  if (t8.im == 0.0) {
 8007ac0:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007ac4:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ac8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007acc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ad0:	d115      	bne.n	8007afe <G_q+0x5536>
    t16_im = t8.re / 2.0;
 8007ad2:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007ad6:	ed93 6b00 	vldr	d6, [r3]
 8007ada:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ae2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007ae6:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 8007aea:	f04f 0300 	mov.w	r3, #0
 8007aee:	f04f 0400 	mov.w	r4, #0
 8007af2:	f241 3248 	movw	r2, #4936	; 0x1348
 8007af6:	443a      	add	r2, r7
 8007af8:	e9c2 3400 	strd	r3, r4, [r2]
 8007afc:	e041      	b.n	8007b82 <G_q+0x55ba>
  } else if (t8.re == 0.0) {
 8007afe:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007b02:	ed93 7b00 	vldr	d7, [r3]
 8007b06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b0e:	d11f      	bne.n	8007b50 <G_q+0x5588>
    t16_im = 0.0;
 8007b10:	f04f 0300 	mov.w	r3, #0
 8007b14:	f04f 0400 	mov.w	r4, #0
 8007b18:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8007b1c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t8.im / 2.0;
 8007b20:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007b24:	ed93 6b02 	vldr	d6, [r3, #8]
 8007b28:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b30:	f241 3348 	movw	r3, #4936	; 0x1348
 8007b34:	443b      	add	r3, r7
 8007b36:	ed83 7b00 	vstr	d7, [r3]
 8007b3a:	e022      	b.n	8007b82 <G_q+0x55ba>
 8007b3c:	f3af 8000 	nop.w
	...
 8007b48:	ffffec70 	.word	0xffffec70
 8007b4c:	ffffeff0 	.word	0xffffeff0
  } else {
    t16_im = t8.re / 2.0;
 8007b50:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007b54:	ed93 6b00 	vldr	d6, [r3]
 8007b58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b60:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007b64:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t8.im / 2.0;
 8007b68:	f507 736c 	add.w	r3, r7, #944	; 0x3b0
 8007b6c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007b70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007b74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007b78:	f241 3348 	movw	r3, #4936	; 0x1348
 8007b7c:	443b      	add	r3, r7
 8007b7e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t85.im == 0.0) {
 8007b82:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007b86:	ed93 7b02 	vldr	d7, [r3, #8]
 8007b8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b92:	d115      	bne.n	8007bc0 <G_q+0x55f8>
    t12_im = t85.re / 2.0;
 8007b94:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007b98:	ed93 6b00 	vldr	d6, [r3]
 8007b9c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ba0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ba4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007ba8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	f04f 0400 	mov.w	r4, #0
 8007bb4:	f241 3218 	movw	r2, #4888	; 0x1318
 8007bb8:	443a      	add	r2, r7
 8007bba:	e9c2 3400 	strd	r3, r4, [r2]
 8007bbe:	e037      	b.n	8007c30 <G_q+0x5668>
  } else if (t85.re == 0.0) {
 8007bc0:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007bc4:	ed93 7b00 	vldr	d7, [r3]
 8007bc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bd0:	d115      	bne.n	8007bfe <G_q+0x5636>
    t12_im = 0.0;
 8007bd2:	f04f 0300 	mov.w	r3, #0
 8007bd6:	f04f 0400 	mov.w	r4, #0
 8007bda:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8007bde:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t85.im / 2.0;
 8007be2:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007be6:	ed93 6b02 	vldr	d6, [r3, #8]
 8007bea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007bee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007bf2:	f241 3318 	movw	r3, #4888	; 0x1318
 8007bf6:	443b      	add	r3, r7
 8007bf8:	ed83 7b00 	vstr	d7, [r3]
 8007bfc:	e018      	b.n	8007c30 <G_q+0x5668>
  } else {
    t12_im = t85.re / 2.0;
 8007bfe:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007c02:	ed93 6b00 	vldr	d6, [r3]
 8007c06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007c0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007c0e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007c12:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t85.im / 2.0;
 8007c16:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8007c1a:	ed93 6b02 	vldr	d6, [r3, #8]
 8007c1e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007c22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007c26:	f241 3318 	movw	r3, #4888	; 0x1318
 8007c2a:	443b      	add	r3, r7
 8007c2c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t3.im == 0.0) {
 8007c30:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007c34:	ed93 7b02 	vldr	d7, [r3, #8]
 8007c38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c40:	d115      	bne.n	8007c6e <G_q+0x56a6>
    t20_im = t3.re / 2.0;
 8007c42:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007c46:	ed93 6b00 	vldr	d6, [r3]
 8007c4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007c4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007c52:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007c56:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 8007c5a:	f04f 0300 	mov.w	r3, #0
 8007c5e:	f04f 0400 	mov.w	r4, #0
 8007c62:	f241 3210 	movw	r2, #4880	; 0x1310
 8007c66:	443a      	add	r2, r7
 8007c68:	e9c2 3400 	strd	r3, r4, [r2]
 8007c6c:	e037      	b.n	8007cde <G_q+0x5716>
  } else if (t3.re == 0.0) {
 8007c6e:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007c72:	ed93 7b00 	vldr	d7, [r3]
 8007c76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c7e:	d115      	bne.n	8007cac <G_q+0x56e4>
    t20_im = 0.0;
 8007c80:	f04f 0300 	mov.w	r3, #0
 8007c84:	f04f 0400 	mov.w	r4, #0
 8007c88:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8007c8c:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t3.im / 2.0;
 8007c90:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007c94:	ed93 6b02 	vldr	d6, [r3, #8]
 8007c98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007c9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ca0:	f241 3310 	movw	r3, #4880	; 0x1310
 8007ca4:	443b      	add	r3, r7
 8007ca6:	ed83 7b00 	vstr	d7, [r3]
 8007caa:	e018      	b.n	8007cde <G_q+0x5716>
  } else {
    t20_im = t3.re / 2.0;
 8007cac:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007cb0:	ed93 6b00 	vldr	d6, [r3]
 8007cb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007cb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007cbc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007cc0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t3.im / 2.0;
 8007cc4:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8007cc8:	ed93 6b02 	vldr	d6, [r3, #8]
 8007ccc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007cd0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007cd4:	f241 3310 	movw	r3, #4880	; 0x1310
 8007cd8:	443b      	add	r3, r7
 8007cda:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t4.im == 0.0) {
 8007cde:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007ce2:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ce6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007cee:	d116      	bne.n	8007d1e <G_q+0x5756>
    t34_re = t4.re / 2.0;
 8007cf0:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007cf4:	ed93 6b00 	vldr	d6, [r3]
 8007cf8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007cfc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d00:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007d04:	443b      	add	r3, r7
 8007d06:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	f04f 0400 	mov.w	r4, #0
 8007d12:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8007d16:	443a      	add	r2, r7
 8007d18:	e9c2 3400 	strd	r3, r4, [r2]
 8007d1c:	e039      	b.n	8007d92 <G_q+0x57ca>
  } else if (t4.re == 0.0) {
 8007d1e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007d22:	ed93 7b00 	vldr	d7, [r3]
 8007d26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2e:	d116      	bne.n	8007d5e <G_q+0x5796>
    t34_re = 0.0;
 8007d30:	f04f 0300 	mov.w	r3, #0
 8007d34:	f04f 0400 	mov.w	r4, #0
 8007d38:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8007d3c:	443a      	add	r2, r7
 8007d3e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t4.im / 2.0;
 8007d42:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007d46:	ed93 6b02 	vldr	d6, [r3, #8]
 8007d4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007d4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d52:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007d56:	443b      	add	r3, r7
 8007d58:	ed83 7b00 	vstr	d7, [r3]
 8007d5c:	e019      	b.n	8007d92 <G_q+0x57ca>
  } else {
    t34_re = t4.re / 2.0;
 8007d5e:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007d62:	ed93 6b00 	vldr	d6, [r3]
 8007d66:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007d6a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d6e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007d72:	443b      	add	r3, r7
 8007d74:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t4.im / 2.0;
 8007d78:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 8007d7c:	ed93 6b02 	vldr	d6, [r3, #8]
 8007d80:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007d84:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d88:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007d8c:	443b      	add	r3, r7
 8007d8e:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im += t12_im;
 8007d92:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007d96:	ed93 6b00 	vldr	d6, [r3]
 8007d9a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8007d9e:	ed93 7b00 	vldr	d7, [r3]
 8007da2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007da6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007daa:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t85_im;
 8007dae:	f241 3348 	movw	r3, #4936	; 0x1348
 8007db2:	443b      	add	r3, r7
 8007db4:	ed93 6b00 	vldr	d6, [r3]
 8007db8:	f241 3318 	movw	r3, #4888	; 0x1318
 8007dbc:	443b      	add	r3, r7
 8007dbe:	ed93 7b00 	vldr	d7, [r3]
 8007dc2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007dc6:	f241 3348 	movw	r3, #4936	; 0x1348
 8007dca:	443b      	add	r3, r7
 8007dcc:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_re;
 8007dd0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007dd4:	ed93 6b00 	vldr	d6, [r3]
 8007dd8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8007ddc:	443b      	add	r3, r7
 8007dde:	ed93 7b00 	vldr	d7, [r3]
 8007de2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007de6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007dea:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 8007dee:	f241 3310 	movw	r3, #4880	; 0x1310
 8007df2:	443b      	add	r3, r7
 8007df4:	ed93 6b00 	vldr	d6, [r3]
 8007df8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8007dfc:	443b      	add	r3, r7
 8007dfe:	ed93 7b00 	vldr	d7, [r3]
 8007e02:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007e06:	f241 3310 	movw	r3, #4880	; 0x1310
 8007e0a:	443b      	add	r3, r7
 8007e0c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = t87.re * 0.0;
 8007e10:	4bc5      	ldr	r3, [pc, #788]	; (8008128 <G_q+0x5b60>)
 8007e12:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e16:	443a      	add	r2, r7
 8007e18:	4413      	add	r3, r2
 8007e1a:	ed93 7b00 	vldr	d7, [r3]
 8007e1e:	f241 2370 	movw	r3, #4720	; 0x1270
 8007e22:	443b      	add	r3, r7
 8007e24:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 8008120 <G_q+0x5b58>
 8007e28:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e2c:	ed83 7b00 	vstr	d7, [r3]
  t19_re = (t19.re * 0.0 - t19.im * 0.5) - (t19_re_tmp - t87.im * 0.5);
 8007e30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e34:	ed93 7b00 	vldr	d7, [r3]
 8007e38:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8008120 <G_q+0x5b58>
 8007e3c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007e40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007e44:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e48:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007e4c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007e50:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007e54:	4bb4      	ldr	r3, [pc, #720]	; (8008128 <G_q+0x5b60>)
 8007e56:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e5a:	443a      	add	r2, r7
 8007e5c:	4413      	add	r3, r2
 8007e5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e62:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007e66:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007e6a:	f241 2370 	movw	r3, #4720	; 0x1270
 8007e6e:	443b      	add	r3, r7
 8007e70:	ed93 5b00 	vldr	d5, [r3]
 8007e74:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007e78:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007e7c:	f241 3358 	movw	r3, #4952	; 0x1358
 8007e80:	443b      	add	r3, r7
 8007e82:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = t87.im * 0.0;
 8007e86:	4ba8      	ldr	r3, [pc, #672]	; (8008128 <G_q+0x5b60>)
 8007e88:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007e8c:	443a      	add	r2, r7
 8007e8e:	4413      	add	r3, r2
 8007e90:	ed93 7b02 	vldr	d7, [r3, #8]
 8007e94:	f241 2368 	movw	r3, #4712	; 0x1268
 8007e98:	443b      	add	r3, r7
 8007e9a:	ed9f 6ba1 	vldr	d6, [pc, #644]	; 8008120 <G_q+0x5b58>
 8007e9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ea2:	ed83 7b00 	vstr	d7, [r3]
  t19_im = (t19.re * 0.5 + t19.im * 0.0) - (t87.re * 0.5 + t19_im_tmp);
 8007ea6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eaa:	ed93 7b00 	vldr	d7, [r3]
 8007eae:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8007eb2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007eba:	ed93 7b02 	vldr	d7, [r3, #8]
 8007ebe:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8008120 <G_q+0x5b58>
 8007ec2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007ec6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007eca:	4b97      	ldr	r3, [pc, #604]	; (8008128 <G_q+0x5b60>)
 8007ecc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8007ed0:	443a      	add	r2, r7
 8007ed2:	4413      	add	r3, r2
 8007ed4:	ed93 7b00 	vldr	d7, [r3]
 8007ed8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007edc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8007ee0:	f241 2368 	movw	r3, #4712	; 0x1268
 8007ee4:	443b      	add	r3, r7
 8007ee6:	ed93 7b00 	vldr	d7, [r3]
 8007eea:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007eee:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007ef2:	f241 3350 	movw	r3, #4944	; 0x1350
 8007ef6:	443b      	add	r3, r7
 8007ef8:	ed83 7b00 	vstr	d7, [r3]
  t8_re = (t13_re * t13_im - t8_im * t16_re) + (t16_im * t20_im - t20_re * t3_im);
 8007efc:	f241 3378 	movw	r3, #4984	; 0x1378
 8007f00:	443b      	add	r3, r7
 8007f02:	ed93 6b00 	vldr	d6, [r3]
 8007f06:	f241 3370 	movw	r3, #4976	; 0x1370
 8007f0a:	443b      	add	r3, r7
 8007f0c:	ed93 7b00 	vldr	d7, [r3]
 8007f10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f14:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007f18:	ed93 5b00 	vldr	d5, [r3]
 8007f1c:	f241 3368 	movw	r3, #4968	; 0x1368
 8007f20:	443b      	add	r3, r7
 8007f22:	ed93 7b00 	vldr	d7, [r3]
 8007f26:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f2a:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007f2e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007f32:	ed93 5b00 	vldr	d5, [r3]
 8007f36:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007f3a:	ed93 7b00 	vldr	d7, [r3]
 8007f3e:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007f42:	f241 3348 	movw	r3, #4936	; 0x1348
 8007f46:	443b      	add	r3, r7
 8007f48:	ed93 4b00 	vldr	d4, [r3]
 8007f4c:	f241 3310 	movw	r3, #4880	; 0x1310
 8007f50:	443b      	add	r3, r7
 8007f52:	ed93 7b00 	vldr	d7, [r3]
 8007f56:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007f5a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007f5e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8007f62:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007f66:	ed83 7b00 	vstr	d7, [r3]
  t8_im = (t13_re * t16_re + t8_im * t13_im) + (t16_im * t3_im + t20_re * t20_im);
 8007f6a:	f241 3378 	movw	r3, #4984	; 0x1378
 8007f6e:	443b      	add	r3, r7
 8007f70:	ed93 6b00 	vldr	d6, [r3]
 8007f74:	f241 3368 	movw	r3, #4968	; 0x1368
 8007f78:	443b      	add	r3, r7
 8007f7a:	ed93 7b00 	vldr	d7, [r3]
 8007f7e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007f82:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007f86:	ed93 5b00 	vldr	d5, [r3]
 8007f8a:	f241 3370 	movw	r3, #4976	; 0x1370
 8007f8e:	443b      	add	r3, r7
 8007f90:	ed93 7b00 	vldr	d7, [r3]
 8007f94:	ee25 7b07 	vmul.f64	d7, d5, d7
 8007f98:	ee36 6b07 	vadd.f64	d6, d6, d7
 8007f9c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8007fa0:	ed93 5b00 	vldr	d5, [r3]
 8007fa4:	f241 3310 	movw	r3, #4880	; 0x1310
 8007fa8:	443b      	add	r3, r7
 8007faa:	ed93 7b00 	vldr	d7, [r3]
 8007fae:	ee25 5b07 	vmul.f64	d5, d5, d7
 8007fb2:	f241 3348 	movw	r3, #4936	; 0x1348
 8007fb6:	443b      	add	r3, r7
 8007fb8:	ed93 4b00 	vldr	d4, [r3]
 8007fbc:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8007fc0:	ed93 7b00 	vldr	d7, [r3]
 8007fc4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8007fc8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8007fcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8007fd0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8007fd4:	ed83 7b00 	vstr	d7, [r3]
  if (t41.im == 0.0) {
 8007fd8:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007fdc:	ed93 7b02 	vldr	d7, [r3, #8]
 8007fe0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fe8:	d115      	bne.n	8008016 <G_q+0x5a4e>
    t41_re = t41.re / 2.0;
 8007fea:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8007fee:	ed93 6b00 	vldr	d6, [r3]
 8007ff2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8007ff6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007ffa:	f241 3308 	movw	r3, #4872	; 0x1308
 8007ffe:	443b      	add	r3, r7
 8008000:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	f04f 0400 	mov.w	r4, #0
 800800c:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8008010:	e9c2 3400 	strd	r3, r4, [r2]
 8008014:	e037      	b.n	8008086 <G_q+0x5abe>
  } else if (t41.re == 0.0) {
 8008016:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800801a:	ed93 7b00 	vldr	d7, [r3]
 800801e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008026:	d115      	bne.n	8008054 <G_q+0x5a8c>
    t41_re = 0.0;
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	f04f 0400 	mov.w	r4, #0
 8008030:	f241 3208 	movw	r2, #4872	; 0x1308
 8008034:	443a      	add	r2, r7
 8008036:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t41.im / 2.0;
 800803a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 800803e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008042:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008046:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800804a:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800804e:	ed83 7b00 	vstr	d7, [r3]
 8008052:	e018      	b.n	8008086 <G_q+0x5abe>
  } else {
    t41_re = t41.re / 2.0;
 8008054:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008058:	ed93 6b00 	vldr	d6, [r3]
 800805c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008060:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008064:	f241 3308 	movw	r3, #4872	; 0x1308
 8008068:	443b      	add	r3, r7
 800806a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t41.im / 2.0;
 800806e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008072:	ed93 6b02 	vldr	d6, [r3, #8]
 8008076:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800807a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800807e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008082:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t42.im == 0.0) {
 8008086:	4b29      	ldr	r3, [pc, #164]	; (800812c <G_q+0x5b64>)
 8008088:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800808c:	443a      	add	r2, r7
 800808e:	4413      	add	r3, r2
 8008090:	ed93 7b02 	vldr	d7, [r3, #8]
 8008094:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	d118      	bne.n	80080d0 <G_q+0x5b08>
    t16_re = t42.re / 2.0;
 800809e:	4b23      	ldr	r3, [pc, #140]	; (800812c <G_q+0x5b64>)
 80080a0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80080a4:	443a      	add	r2, r7
 80080a6:	4413      	add	r3, r2
 80080a8:	ed93 6b00 	vldr	d6, [r3]
 80080ac:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80080b0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80080b4:	f241 3368 	movw	r3, #4968	; 0x1368
 80080b8:	443b      	add	r3, r7
 80080ba:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	f04f 0400 	mov.w	r4, #0
 80080c6:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 80080ca:	e9c2 3400 	strd	r3, r4, [r2]
 80080ce:	e04e      	b.n	800816e <G_q+0x5ba6>
  } else if (t42.re == 0.0) {
 80080d0:	4b16      	ldr	r3, [pc, #88]	; (800812c <G_q+0x5b64>)
 80080d2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80080d6:	443a      	add	r2, r7
 80080d8:	4413      	add	r3, r2
 80080da:	ed93 7b00 	vldr	d7, [r3]
 80080de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	d123      	bne.n	8008130 <G_q+0x5b68>
    t16_re = 0.0;
 80080e8:	f04f 0300 	mov.w	r3, #0
 80080ec:	f04f 0400 	mov.w	r4, #0
 80080f0:	f241 3268 	movw	r2, #4968	; 0x1368
 80080f4:	443a      	add	r2, r7
 80080f6:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t42.im / 2.0;
 80080fa:	4b0c      	ldr	r3, [pc, #48]	; (800812c <G_q+0x5b64>)
 80080fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008100:	443a      	add	r2, r7
 8008102:	4413      	add	r3, r2
 8008104:	ed93 6b02 	vldr	d6, [r3, #8]
 8008108:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800810c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008110:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008114:	ed83 7b00 	vstr	d7, [r3]
 8008118:	e029      	b.n	800816e <G_q+0x5ba6>
 800811a:	bf00      	nop
 800811c:	f3af 8000 	nop.w
	...
 8008128:	ffffedd0 	.word	0xffffedd0
 800812c:	ffffed90 	.word	0xffffed90
  } else {
    t16_re = t42.re / 2.0;
 8008130:	4b5a      	ldr	r3, [pc, #360]	; (800829c <G_q+0x5cd4>)
 8008132:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008136:	443a      	add	r2, r7
 8008138:	4413      	add	r3, r2
 800813a:	ed93 6b00 	vldr	d6, [r3]
 800813e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008142:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008146:	f241 3368 	movw	r3, #4968	; 0x1368
 800814a:	443b      	add	r3, r7
 800814c:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t42.im / 2.0;
 8008150:	4b52      	ldr	r3, [pc, #328]	; (800829c <G_q+0x5cd4>)
 8008152:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008156:	443a      	add	r2, r7
 8008158:	4413      	add	r3, r2
 800815a:	ed93 6b02 	vldr	d6, [r3, #8]
 800815e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008162:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008166:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800816a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t45.im == 0.0) {
 800816e:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008172:	ed93 7b02 	vldr	d7, [r3, #8]
 8008176:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800817a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817e:	d115      	bne.n	80081ac <G_q+0x5be4>
    t20_re = t45.re / 2.0;
 8008180:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008184:	ed93 6b00 	vldr	d6, [r3]
 8008188:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800818c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008190:	f241 3348 	movw	r3, #4936	; 0x1348
 8008194:	443b      	add	r3, r7
 8008196:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800819a:	f04f 0300 	mov.w	r3, #0
 800819e:	f04f 0400 	mov.w	r4, #0
 80081a2:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 80081a6:	e9c2 3400 	strd	r3, r4, [r2]
 80081aa:	e037      	b.n	800821c <G_q+0x5c54>
  } else if (t45.re == 0.0) {
 80081ac:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80081b0:	ed93 7b00 	vldr	d7, [r3]
 80081b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80081b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081bc:	d115      	bne.n	80081ea <G_q+0x5c22>
    t20_re = 0.0;
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	f04f 0400 	mov.w	r4, #0
 80081c6:	f241 3248 	movw	r2, #4936	; 0x1348
 80081ca:	443a      	add	r2, r7
 80081cc:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t45.im / 2.0;
 80081d0:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80081d4:	ed93 6b02 	vldr	d6, [r3, #8]
 80081d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80081dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80081e0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80081e4:	ed83 7b00 	vstr	d7, [r3]
 80081e8:	e018      	b.n	800821c <G_q+0x5c54>
  } else {
    t20_re = t45.re / 2.0;
 80081ea:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 80081ee:	ed93 6b00 	vldr	d6, [r3]
 80081f2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80081f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80081fa:	f241 3348 	movw	r3, #4936	; 0x1348
 80081fe:	443b      	add	r3, r7
 8008200:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t45.im / 2.0;
 8008204:	f507 6339 	add.w	r3, r7, #2960	; 0xb90
 8008208:	ed93 6b02 	vldr	d6, [r3, #8]
 800820c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008210:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008214:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008218:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t46.im == 0.0) {
 800821c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008220:	ed93 7b02 	vldr	d7, [r3, #8]
 8008224:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800822c:	d116      	bne.n	800825c <G_q+0x5c94>
    t34_re = t46.re / 2.0;
 800822e:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008232:	ed93 6b00 	vldr	d6, [r3]
 8008236:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800823a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800823e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008242:	443b      	add	r3, r7
 8008244:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008248:	f04f 0300 	mov.w	r3, #0
 800824c:	f04f 0400 	mov.w	r4, #0
 8008250:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008254:	443a      	add	r2, r7
 8008256:	e9c2 3400 	strd	r3, r4, [r2]
 800825a:	e03b      	b.n	80082d4 <G_q+0x5d0c>
  } else if (t46.re == 0.0) {
 800825c:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008260:	ed93 7b00 	vldr	d7, [r3]
 8008264:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800826c:	d118      	bne.n	80082a0 <G_q+0x5cd8>
    t34_re = 0.0;
 800826e:	f04f 0300 	mov.w	r3, #0
 8008272:	f04f 0400 	mov.w	r4, #0
 8008276:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800827a:	443a      	add	r2, r7
 800827c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t46.im / 2.0;
 8008280:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 8008284:	ed93 6b02 	vldr	d6, [r3, #8]
 8008288:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800828c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008290:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008294:	443b      	add	r3, r7
 8008296:	ed83 7b00 	vstr	d7, [r3]
 800829a:	e01b      	b.n	80082d4 <G_q+0x5d0c>
 800829c:	ffffed90 	.word	0xffffed90
  } else {
    t34_re = t46.re / 2.0;
 80082a0:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80082a4:	ed93 6b00 	vldr	d6, [r3]
 80082a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80082ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80082b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80082b4:	443b      	add	r3, r7
 80082b6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t46.im / 2.0;
 80082ba:	f507 633a 	add.w	r3, r7, #2976	; 0xba0
 80082be:	ed93 6b02 	vldr	d6, [r3, #8]
 80082c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80082c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80082ca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80082ce:	443b      	add	r3, r7
 80082d0:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 80082d4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80082d8:	ed93 7b00 	vldr	d7, [r3]
 80082dc:	ed9f 6bf0 	vldr	d6, [pc, #960]	; 80086a0 <G_q+0x60d8>
 80082e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80082e4:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 80082e8:	ed93 7b02 	vldr	d7, [r3, #8]
 80082ec:	ed9f 5bee 	vldr	d5, [pc, #952]	; 80086a8 <G_q+0x60e0>
 80082f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80082f4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80082f8:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 80082fc:	ed93 7b00 	vldr	d7, [r3]
 8008300:	ed9f 5be7 	vldr	d5, [pc, #924]	; 80086a0 <G_q+0x60d8>
 8008304:	ee27 5b05 	vmul.f64	d5, d7, d5
    t48.im * 3.061616997868383E-17);
 8008308:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800830c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008310:	ed9f 4be5 	vldr	d4, [pc, #916]	; 80086a8 <G_q+0x60e0>
 8008314:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t47.re * 0.0 - t47.im * 3.061616997868383E-17) - (t48.re * 0.0 -
 8008318:	ee35 7b47 	vsub.f64	d7, d5, d7
 800831c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008320:	f241 3388 	movw	r3, #5000	; 0x1388
 8008324:	443b      	add	r3, r7
 8008326:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 800832a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800832e:	ed93 7b00 	vldr	d7, [r3]
 8008332:	ed9f 6bdd 	vldr	d6, [pc, #884]	; 80086a8 <G_q+0x60e0>
 8008336:	ee27 6b06 	vmul.f64	d6, d7, d6
 800833a:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 800833e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008342:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80086a0 <G_q+0x60d8>
 8008346:	ee27 7b05 	vmul.f64	d7, d7, d5
 800834a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800834e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008352:	ed93 7b00 	vldr	d7, [r3]
 8008356:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 80086a8 <G_q+0x60e0>
 800835a:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t48.im * 0.0);
 800835e:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 8008362:	ed93 7b02 	vldr	d7, [r3, #8]
 8008366:	ed9f 4bce 	vldr	d4, [pc, #824]	; 80086a0 <G_q+0x60d8>
 800836a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800836e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t47.re * 3.061616997868383E-17 + t47.im * 0.0) - (t48.re *
 8008372:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008376:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800837a:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_re;
 800837e:	f241 3348 	movw	r3, #4936	; 0x1348
 8008382:	443b      	add	r3, r7
 8008384:	ed93 6b00 	vldr	d6, [r3]
 8008388:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800838c:	443b      	add	r3, r7
 800838e:	ed93 7b00 	vldr	d7, [r3]
 8008392:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008396:	f241 3348 	movw	r3, #4936	; 0x1348
 800839a:	443b      	add	r3, r7
 800839c:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 80083a0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80083a4:	ed93 6b00 	vldr	d6, [r3]
 80083a8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80083ac:	443b      	add	r3, r7
 80083ae:	ed93 7b00 	vldr	d7, [r3]
 80083b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083b6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80083ba:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t51.re * 3.061616997868383E-17 + t52.re * 3.061616997868383E-17;
 80083be:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80083c2:	ed93 7b00 	vldr	d7, [r3]
 80083c6:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 80086a8 <G_q+0x60e0>
 80083ca:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083ce:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80083d2:	ed93 7b00 	vldr	d7, [r3]
 80083d6:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 80086a8 <G_q+0x60e0>
 80083da:	ee27 7b05 	vmul.f64	d7, d7, d5
 80083de:	ee36 7b07 	vadd.f64	d7, d6, d7
 80083e2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80083e6:	443b      	add	r3, r7
 80083e8:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t51.im * 3.061616997868383E-17 + t52.im * 3.061616997868383E-17;
 80083ec:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80083f0:	ed93 7b02 	vldr	d7, [r3, #8]
 80083f4:	ed9f 6bac 	vldr	d6, [pc, #688]	; 80086a8 <G_q+0x60e0>
 80083f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80083fc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 8008400:	ed93 7b02 	vldr	d7, [r3, #8]
 8008404:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 80086a8 <G_q+0x60e0>
 8008408:	ee27 7b05 	vmul.f64	d7, d7, d5
 800840c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008410:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008414:	443b      	add	r3, r7
 8008416:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t49.re * 0.0 - t49.im * 0.5) - (t50.re * 0.0 - t50.im * 0.5);
 800841a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800841e:	ed93 7b00 	vldr	d7, [r3]
 8008422:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 80086a0 <G_q+0x60d8>
 8008426:	ee27 6b06 	vmul.f64	d6, d7, d6
 800842a:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 800842e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008432:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008436:	ee27 7b05 	vmul.f64	d7, d7, d5
 800843a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800843e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008442:	ed93 7b00 	vldr	d7, [r3]
 8008446:	ed9f 5b96 	vldr	d5, [pc, #600]	; 80086a0 <G_q+0x60d8>
 800844a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800844e:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008452:	ed93 7b02 	vldr	d7, [r3, #8]
 8008456:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800845a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800845e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008462:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008466:	f241 3378 	movw	r3, #4984	; 0x1378
 800846a:	443b      	add	r3, r7
 800846c:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t49.re * 0.5 + t49.im * 0.0) - (t50.re * 0.5 + t50.im * 0.0);
 8008470:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008474:	ed93 7b00 	vldr	d7, [r3]
 8008478:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800847c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008480:	f507 633b 	add.w	r3, r7, #2992	; 0xbb0
 8008484:	ed93 7b02 	vldr	d7, [r3, #8]
 8008488:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80086a0 <G_q+0x60d8>
 800848c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008490:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008494:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 8008498:	ed93 7b00 	vldr	d7, [r3]
 800849c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80084a0:	ee27 5b05 	vmul.f64	d5, d7, d5
 80084a4:	f507 633c 	add.w	r3, r7, #3008	; 0xbc0
 80084a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80084ac:	ed9f 4b7c 	vldr	d4, [pc, #496]	; 80086a0 <G_q+0x60d8>
 80084b0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80084b4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80084b8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80084bc:	f241 3370 	movw	r3, #4976	; 0x1370
 80084c0:	443b      	add	r3, r7
 80084c2:	ed83 7b00 	vstr	d7, [r3]
  t41_re += t16_re;
 80084c6:	f241 3308 	movw	r3, #4872	; 0x1308
 80084ca:	443b      	add	r3, r7
 80084cc:	ed93 6b00 	vldr	d6, [r3]
 80084d0:	f241 3368 	movw	r3, #4968	; 0x1368
 80084d4:	443b      	add	r3, r7
 80084d6:	ed93 7b00 	vldr	d7, [r3]
 80084da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80084de:	f241 3308 	movw	r3, #4872	; 0x1308
 80084e2:	443b      	add	r3, r7
 80084e4:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t16_im;
 80084e8:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 80084ec:	ed93 6b00 	vldr	d6, [r3]
 80084f0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80084f4:	ed93 7b00 	vldr	d7, [r3]
 80084f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80084fc:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8008500:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008504:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008508:	ed93 7b00 	vldr	d7, [r3]
 800850c:	ed9f 6b64 	vldr	d6, [pc, #400]	; 80086a0 <G_q+0x60d8>
 8008510:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008514:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8008518:	ed93 7b02 	vldr	d7, [r3, #8]
 800851c:	ed9f 5b64 	vldr	d5, [pc, #400]	; 80086b0 <G_q+0x60e8>
 8008520:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008524:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008528:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800852c:	ed93 7b00 	vldr	d7, [r3]
 8008530:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 80086a0 <G_q+0x60d8>
 8008534:	ee27 5b05 	vmul.f64	d5, d7, d5
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008538:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 800853c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008540:	ed9f 4b5b 	vldr	d4, [pc, #364]	; 80086b0 <G_q+0x60e8>
 8008544:	ee27 7b04 	vmul.f64	d7, d7, d4
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 8008548:	ee35 7b47 	vsub.f64	d7, d5, d7
 800854c:	ee36 6b47 	vsub.f64	d6, d6, d7
              t44.im * 6.123233995736766E-17)) - (t12_re * t20_re - t12_im *
 8008550:	f241 3388 	movw	r3, #5000	; 0x1388
 8008554:	443b      	add	r3, r7
 8008556:	ed93 5b00 	vldr	d5, [r3]
 800855a:	f241 3348 	movw	r3, #4936	; 0x1348
 800855e:	443b      	add	r3, r7
 8008560:	ed93 7b00 	vldr	d7, [r3]
 8008564:	ee25 5b07 	vmul.f64	d5, d5, d7
 8008568:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800856c:	ed93 4b00 	vldr	d4, [r3]
 8008570:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008574:	ed93 7b00 	vldr	d7, [r3]
 8008578:	ee24 7b07 	vmul.f64	d7, d4, d7
 800857c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008580:	ee36 6b47 	vsub.f64	d6, d6, d7
             t20_im)) + (t34_re * t13_re - t34_im * t13_im);
 8008584:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008588:	443b      	add	r3, r7
 800858a:	ed93 5b00 	vldr	d5, [r3]
 800858e:	f241 3378 	movw	r3, #4984	; 0x1378
 8008592:	443b      	add	r3, r7
 8008594:	ed93 7b00 	vldr	d7, [r3]
 8008598:	ee25 5b07 	vmul.f64	d5, d5, d7
 800859c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80085a0:	443b      	add	r3, r7
 80085a2:	ed93 4b00 	vldr	d4, [r3]
 80085a6:	f241 3370 	movw	r3, #4976	; 0x1370
 80085aa:	443b      	add	r3, r7
 80085ac:	ed93 7b00 	vldr	d7, [r3]
 80085b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80085b4:	ee35 7b47 	vsub.f64	d7, d5, d7
  t43_re = (((t43.re * 0.0 - t43.im * 6.123233995736766E-17) - (t44.re * 0.0 -
 80085b8:	f241 2358 	movw	r3, #4696	; 0x1258
 80085bc:	443b      	add	r3, r7
 80085be:	ee36 7b07 	vadd.f64	d7, d6, d7
 80085c2:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 80085c6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80085ca:	ed93 7b00 	vldr	d7, [r3]
 80085ce:	ed9f 6b38 	vldr	d6, [pc, #224]	; 80086b0 <G_q+0x60e8>
 80085d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80085d6:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 80085da:	ed93 7b02 	vldr	d7, [r3, #8]
 80085de:	ed9f 5b30 	vldr	d5, [pc, #192]	; 80086a0 <G_q+0x60d8>
 80085e2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80085e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80085ea:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80085ee:	ed93 7b00 	vldr	d7, [r3]
 80085f2:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 80086b0 <G_q+0x60e8>
 80085f6:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 80085fa:	f507 6338 	add.w	r3, r7, #2944	; 0xb80
 80085fe:	ed93 7b02 	vldr	d7, [r3, #8]
 8008602:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80086a0 <G_q+0x60d8>
 8008606:	ee27 7b04 	vmul.f64	d7, d7, d4
 800860a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800860e:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 8008612:	f241 3388 	movw	r3, #5000	; 0x1388
 8008616:	443b      	add	r3, r7
 8008618:	ed93 5b00 	vldr	d5, [r3]
 800861c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008620:	ed93 7b00 	vldr	d7, [r3]
 8008624:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008628:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800862c:	ed93 4b00 	vldr	d4, [r3]
 8008630:	f241 3348 	movw	r3, #4936	; 0x1348
 8008634:	443b      	add	r3, r7
 8008636:	ed93 7b00 	vldr	d7, [r3]
 800863a:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t44.im * 0.0)) - (t12_re * t20_im + t12_im
 800863e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008642:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t20_re)) + (t34_re * t13_im + t34_im * t13_re);
 8008646:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800864a:	443b      	add	r3, r7
 800864c:	ed93 5b00 	vldr	d5, [r3]
 8008650:	f241 3370 	movw	r3, #4976	; 0x1370
 8008654:	443b      	add	r3, r7
 8008656:	ed93 7b00 	vldr	d7, [r3]
 800865a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800865e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008662:	443b      	add	r3, r7
 8008664:	ed93 4b00 	vldr	d4, [r3]
 8008668:	f241 3378 	movw	r3, #4984	; 0x1378
 800866c:	443b      	add	r3, r7
 800866e:	ed93 7b00 	vldr	d7, [r3]
 8008672:	ee24 7b07 	vmul.f64	d7, d4, d7
 8008676:	ee35 7b07 	vadd.f64	d7, d5, d7
  t43_im = (((t43.re * 6.123233995736766E-17 + t43.im * 0.0) - (t44.re *
 800867a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800867e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8008682:	443b      	add	r3, r7
 8008684:	ed83 7b00 	vstr	d7, [r3]
  if (t54.im == 0.0) {
 8008688:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800868c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008690:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008698:	d125      	bne.n	80086e6 <G_q+0x611e>
 800869a:	e00d      	b.n	80086b8 <G_q+0x60f0>
 800869c:	f3af 8000 	nop.w
	...
 80086a8:	33145c07 	.word	0x33145c07
 80086ac:	3c81a626 	.word	0x3c81a626
 80086b0:	33145c07 	.word	0x33145c07
 80086b4:	3c91a626 	.word	0x3c91a626
    b_t54_re = t54.re / 2.0;
 80086b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086bc:	ed93 6b00 	vldr	d6, [r3]
 80086c0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80086c4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80086c8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80086cc:	443b      	add	r3, r7
 80086ce:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 80086d2:	f04f 0300 	mov.w	r3, #0
 80086d6:	f04f 0400 	mov.w	r4, #0
 80086da:	f241 22e8 	movw	r2, #4840	; 0x12e8
 80086de:	443a      	add	r2, r7
 80086e0:	e9c2 3400 	strd	r3, r4, [r2]
 80086e4:	e039      	b.n	800875a <G_q+0x6192>
  } else if (t54.re == 0.0) {
 80086e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80086ea:	ed93 7b00 	vldr	d7, [r3]
 80086ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80086f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f6:	d116      	bne.n	8008726 <G_q+0x615e>
    b_t54_re = 0.0;
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	f04f 0400 	mov.w	r4, #0
 8008700:	f241 22f0 	movw	r2, #4848	; 0x12f0
 8008704:	443a      	add	r2, r7
 8008706:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t54.im / 2.0;
 800870a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800870e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008712:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008716:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800871a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800871e:	443b      	add	r3, r7
 8008720:	ed83 7b00 	vstr	d7, [r3]
 8008724:	e019      	b.n	800875a <G_q+0x6192>
  } else {
    b_t54_re = t54.re / 2.0;
 8008726:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800872a:	ed93 6b00 	vldr	d6, [r3]
 800872e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008732:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008736:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800873a:	443b      	add	r3, r7
 800873c:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t54.im / 2.0;
 8008740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008744:	ed93 6b02 	vldr	d6, [r3, #8]
 8008748:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800874c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008750:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8008754:	443b      	add	r3, r7
 8008756:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t55.im == 0.0) {
 800875a:	4bdd      	ldr	r3, [pc, #884]	; (8008ad0 <G_q+0x6508>)
 800875c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008760:	443a      	add	r2, r7
 8008762:	4413      	add	r3, r2
 8008764:	ed93 7b02 	vldr	d7, [r3, #8]
 8008768:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008770:	d118      	bne.n	80087a4 <G_q+0x61dc>
    t55_re = t55.re / 2.0;
 8008772:	4bd7      	ldr	r3, [pc, #860]	; (8008ad0 <G_q+0x6508>)
 8008774:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008778:	443a      	add	r2, r7
 800877a:	4413      	add	r3, r2
 800877c:	ed93 6b00 	vldr	d6, [r3]
 8008780:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008784:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008788:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800878c:	ed83 7b00 	vstr	d7, [r3]
    t55_im = 0.0;
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	f04f 0400 	mov.w	r4, #0
 8008798:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800879c:	443a      	add	r2, r7
 800879e:	e9c2 3400 	strd	r3, r4, [r2]
 80087a2:	e043      	b.n	800882c <G_q+0x6264>
  } else if (t55.re == 0.0) {
 80087a4:	4bca      	ldr	r3, [pc, #808]	; (8008ad0 <G_q+0x6508>)
 80087a6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80087aa:	443a      	add	r2, r7
 80087ac:	4413      	add	r3, r2
 80087ae:	ed93 7b00 	vldr	d7, [r3]
 80087b2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80087b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087ba:	d118      	bne.n	80087ee <G_q+0x6226>
    t55_re = 0.0;
 80087bc:	f04f 0300 	mov.w	r3, #0
 80087c0:	f04f 0400 	mov.w	r4, #0
 80087c4:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80087c8:	e9c2 3400 	strd	r3, r4, [r2]
    t55_im = t55.im / 2.0;
 80087cc:	4bc0      	ldr	r3, [pc, #768]	; (8008ad0 <G_q+0x6508>)
 80087ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80087d2:	443a      	add	r2, r7
 80087d4:	4413      	add	r3, r2
 80087d6:	ed93 6b02 	vldr	d6, [r3, #8]
 80087da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80087de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80087e2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80087e6:	443b      	add	r3, r7
 80087e8:	ed83 7b00 	vstr	d7, [r3]
 80087ec:	e01e      	b.n	800882c <G_q+0x6264>
  } else {
    t55_re = t55.re / 2.0;
 80087ee:	4bb8      	ldr	r3, [pc, #736]	; (8008ad0 <G_q+0x6508>)
 80087f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80087f4:	443a      	add	r2, r7
 80087f6:	4413      	add	r3, r2
 80087f8:	ed93 6b00 	vldr	d6, [r3]
 80087fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008804:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8008808:	ed83 7b00 	vstr	d7, [r3]
    t55_im = t55.im / 2.0;
 800880c:	4bb0      	ldr	r3, [pc, #704]	; (8008ad0 <G_q+0x6508>)
 800880e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8008812:	443a      	add	r2, r7
 8008814:	4413      	add	r3, r2
 8008816:	ed93 6b02 	vldr	d6, [r3, #8]
 800881a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800881e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008822:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8008826:	443b      	add	r3, r7
 8008828:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t70.im == 0.0) {
 800882c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008830:	ed93 7b02 	vldr	d7, [r3, #8]
 8008834:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883c:	d116      	bne.n	800886c <G_q+0x62a4>
    t70_re = t70.re / 2.0;
 800883e:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008842:	ed93 6b00 	vldr	d6, [r3]
 8008846:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800884a:	443b      	add	r3, r7
 800884c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008850:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008854:	ed83 7b00 	vstr	d7, [r3]
    t70_im = 0.0;
 8008858:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800885c:	443a      	add	r2, r7
 800885e:	f04f 0300 	mov.w	r3, #0
 8008862:	f04f 0400 	mov.w	r4, #0
 8008866:	e9c2 3400 	strd	r3, r4, [r2]
 800886a:	e039      	b.n	80088e0 <G_q+0x6318>
  } else if (t70.re == 0.0) {
 800886c:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008870:	ed93 7b00 	vldr	d7, [r3]
 8008874:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800887c:	d116      	bne.n	80088ac <G_q+0x62e4>
    t70_re = 0.0;
 800887e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8008882:	443a      	add	r2, r7
 8008884:	f04f 0300 	mov.w	r3, #0
 8008888:	f04f 0400 	mov.w	r4, #0
 800888c:	e9c2 3400 	strd	r3, r4, [r2]
    t70_im = t70.im / 2.0;
 8008890:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 8008894:	ed93 6b02 	vldr	d6, [r3, #8]
 8008898:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800889c:	443b      	add	r3, r7
 800889e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088a6:	ed83 7b00 	vstr	d7, [r3]
 80088aa:	e019      	b.n	80088e0 <G_q+0x6318>
  } else {
    t70_re = t70.re / 2.0;
 80088ac:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80088b0:	ed93 6b00 	vldr	d6, [r3]
 80088b4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80088b8:	443b      	add	r3, r7
 80088ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088c2:	ed83 7b00 	vstr	d7, [r3]
    t70_im = t70.im / 2.0;
 80088c6:	f507 6345 	add.w	r3, r7, #3152	; 0xc50
 80088ca:	ed93 6b02 	vldr	d6, [r3, #8]
 80088ce:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80088d2:	443b      	add	r3, r7
 80088d4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80088dc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t71.im == 0.0) {
 80088e0:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80088e4:	ed93 7b02 	vldr	d7, [r3, #8]
 80088e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80088ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088f0:	d116      	bne.n	8008920 <G_q+0x6358>
    t34_re = t71.re / 2.0;
 80088f2:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 80088f6:	ed93 6b00 	vldr	d6, [r3]
 80088fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80088fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008902:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008906:	443b      	add	r3, r7
 8008908:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	f04f 0400 	mov.w	r4, #0
 8008914:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008918:	443a      	add	r2, r7
 800891a:	e9c2 3400 	strd	r3, r4, [r2]
 800891e:	e039      	b.n	8008994 <G_q+0x63cc>
  } else if (t71.re == 0.0) {
 8008920:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008924:	ed93 7b00 	vldr	d7, [r3]
 8008928:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800892c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008930:	d116      	bne.n	8008960 <G_q+0x6398>
    t34_re = 0.0;
 8008932:	f04f 0300 	mov.w	r3, #0
 8008936:	f04f 0400 	mov.w	r4, #0
 800893a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800893e:	443a      	add	r2, r7
 8008940:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t71.im / 2.0;
 8008944:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008948:	ed93 6b02 	vldr	d6, [r3, #8]
 800894c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008950:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008954:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008958:	443b      	add	r3, r7
 800895a:	ed83 7b00 	vstr	d7, [r3]
 800895e:	e019      	b.n	8008994 <G_q+0x63cc>
  } else {
    t34_re = t71.re / 2.0;
 8008960:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 8008964:	ed93 6b00 	vldr	d6, [r3]
 8008968:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800896c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008970:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008974:	443b      	add	r3, r7
 8008976:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t71.im / 2.0;
 800897a:	f507 6346 	add.w	r3, r7, #3168	; 0xc60
 800897e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008982:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008986:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800898a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800898e:	443b      	add	r3, r7
 8008990:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_re += t34_re;
 8008994:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8008998:	443b      	add	r3, r7
 800899a:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800899e:	443a      	add	r2, r7
 80089a0:	ed92 6b00 	vldr	d6, [r2]
 80089a4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80089a8:	443a      	add	r2, r7
 80089aa:	ed92 7b00 	vldr	d7, [r2]
 80089ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 80089b2:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t34_im;
 80089b6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80089ba:	443b      	add	r3, r7
 80089bc:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80089c0:	443a      	add	r2, r7
 80089c2:	ed92 6b00 	vldr	d6, [r2]
 80089c6:	f241 32b0 	movw	r2, #5040	; 0x13b0
 80089ca:	443a      	add	r2, r7
 80089cc:	ed92 7b00 	vldr	d7, [r2]
 80089d0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80089d4:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t72.re * 0.0 - t72.im * 0.5) - (t73.re * 0.0 - t73.im * 0.5);
 80089d8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80089dc:	ed93 7b00 	vldr	d7, [r3]
 80089e0:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8008ac8 <G_q+0x6500>
 80089e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80089e8:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80089ec:	ed93 7b02 	vldr	d7, [r3, #8]
 80089f0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80089f4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80089f8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80089fc:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008a00:	ed93 7b00 	vldr	d7, [r3]
 8008a04:	ed9f 5b30 	vldr	d5, [pc, #192]	; 8008ac8 <G_q+0x6500>
 8008a08:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008a0c:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008a10:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a14:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008a18:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008a20:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8008a24:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008a28:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t72.re * 0.5 + t72.im * 0.0) - (t73.re * 0.5 + t73.im * 0.0);
 8008a2c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008a30:	ed93 7b00 	vldr	d7, [r3]
 8008a34:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008a38:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008a3c:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8008a40:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a44:	ed9f 5b20 	vldr	d5, [pc, #128]	; 8008ac8 <G_q+0x6500>
 8008a48:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008a4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008a50:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008a54:	ed93 7b00 	vldr	d7, [r3]
 8008a58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008a5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008a60:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8008a64:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a68:	ed9f 4b17 	vldr	d4, [pc, #92]	; 8008ac8 <G_q+0x6500>
 8008a6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008a70:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008a74:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008a78:	f241 3338 	movw	r3, #4920	; 0x1338
 8008a7c:	443b      	add	r3, r7
 8008a7e:	ed83 7b00 	vstr	d7, [r3]
  if (t74.im == 0.0) {
 8008a82:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008a86:	ed93 7b02 	vldr	d7, [r3, #8]
 8008a8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a92:	d11f      	bne.n	8008ad4 <G_q+0x650c>
    t74_re = t74.re / 2.0;
 8008a94:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008a98:	ed93 6b00 	vldr	d6, [r3]
 8008a9c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008aa0:	443b      	add	r3, r7
 8008aa2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008aa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008aaa:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 8008aae:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008ab2:	443a      	add	r2, r7
 8008ab4:	f04f 0300 	mov.w	r3, #0
 8008ab8:	f04f 0400 	mov.w	r4, #0
 8008abc:	e9c2 3400 	strd	r3, r4, [r2]
 8008ac0:	e042      	b.n	8008b48 <G_q+0x6580>
 8008ac2:	bf00      	nop
 8008ac4:	f3af 8000 	nop.w
	...
 8008ad0:	ffffec70 	.word	0xffffec70
  } else if (t74.re == 0.0) {
 8008ad4:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008ad8:	ed93 7b00 	vldr	d7, [r3]
 8008adc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ae4:	d116      	bne.n	8008b14 <G_q+0x654c>
    t74_re = 0.0;
 8008ae6:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008aea:	443a      	add	r2, r7
 8008aec:	f04f 0300 	mov.w	r3, #0
 8008af0:	f04f 0400 	mov.w	r4, #0
 8008af4:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t74.im / 2.0;
 8008af8:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008afc:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b00:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008b04:	443b      	add	r3, r7
 8008b06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b0e:	ed83 7b00 	vstr	d7, [r3]
 8008b12:	e019      	b.n	8008b48 <G_q+0x6580>
  } else {
    t74_re = t74.re / 2.0;
 8008b14:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008b18:	ed93 6b00 	vldr	d6, [r3]
 8008b1c:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008b20:	443b      	add	r3, r7
 8008b22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b2a:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t74.im / 2.0;
 8008b2e:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8008b32:	ed93 6b02 	vldr	d6, [r3, #8]
 8008b36:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008b3a:	443b      	add	r3, r7
 8008b3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b44:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t75.im == 0.0) {
 8008b48:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008b4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008b50:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b58:	d116      	bne.n	8008b88 <G_q+0x65c0>
    t34_re = t75.re / 2.0;
 8008b5a:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008b5e:	ed93 6b00 	vldr	d6, [r3]
 8008b62:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008b66:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008b6a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008b6e:	443b      	add	r3, r7
 8008b70:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008b74:	f04f 0300 	mov.w	r3, #0
 8008b78:	f04f 0400 	mov.w	r4, #0
 8008b7c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008b80:	443a      	add	r2, r7
 8008b82:	e9c2 3400 	strd	r3, r4, [r2]
 8008b86:	e039      	b.n	8008bfc <G_q+0x6634>
  } else if (t75.re == 0.0) {
 8008b88:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008b8c:	ed93 7b00 	vldr	d7, [r3]
 8008b90:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b98:	d116      	bne.n	8008bc8 <G_q+0x6600>
    t34_re = 0.0;
 8008b9a:	f04f 0300 	mov.w	r3, #0
 8008b9e:	f04f 0400 	mov.w	r4, #0
 8008ba2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008ba6:	443a      	add	r2, r7
 8008ba8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t75.im / 2.0;
 8008bac:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008bb0:	ed93 6b02 	vldr	d6, [r3, #8]
 8008bb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bbc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008bc0:	443b      	add	r3, r7
 8008bc2:	ed83 7b00 	vstr	d7, [r3]
 8008bc6:	e019      	b.n	8008bfc <G_q+0x6634>
  } else {
    t34_re = t75.re / 2.0;
 8008bc8:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008bcc:	ed93 6b00 	vldr	d6, [r3]
 8008bd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bd8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008bdc:	443b      	add	r3, r7
 8008bde:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t75.im / 2.0;
 8008be2:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8008be6:	ed93 6b02 	vldr	d6, [r3, #8]
 8008bea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008bee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008bf2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008bf6:	443b      	add	r3, r7
 8008bf8:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re += t34_re;
 8008bfc:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8008c00:	443b      	add	r3, r7
 8008c02:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8008c06:	443a      	add	r2, r7
 8008c08:	ed92 6b00 	vldr	d6, [r2]
 8008c0c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008c10:	443a      	add	r2, r7
 8008c12:	ed92 7b00 	vldr	d7, [r2]
 8008c16:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008c1a:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 8008c1e:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8008c22:	443b      	add	r3, r7
 8008c24:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8008c28:	443a      	add	r2, r7
 8008c2a:	ed92 6b00 	vldr	d6, [r2]
 8008c2e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008c32:	443a      	add	r2, r7
 8008c34:	ed92 7b00 	vldr	d7, [r2]
 8008c38:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008c3c:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t76.re * 0.0 - t76.im * 0.5) - (t77.re * 0.0 - t77.im * 0.5);
 8008c40:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008c44:	ed93 7b00 	vldr	d7, [r3]
 8008c48:	ed9f 6b75 	vldr	d6, [pc, #468]	; 8008e20 <G_q+0x6858>
 8008c4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008c50:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008c54:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008c5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008c60:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008c64:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008c68:	ed93 7b00 	vldr	d7, [r3]
 8008c6c:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8008e20 <G_q+0x6858>
 8008c70:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008c74:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008c78:	ed93 7b02 	vldr	d7, [r3, #8]
 8008c7c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008c80:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008c84:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008c88:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8008c8c:	443b      	add	r3, r7
 8008c8e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008c92:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t76.re * 0.5 + t76.im * 0.0) - (t77.re * 0.5 + t77.im * 0.0);
 8008c96:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008c9a:	ed93 7b00 	vldr	d7, [r3]
 8008c9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8008ca2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008ca6:	f507 6347 	add.w	r3, r7, #3184	; 0xc70
 8008caa:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cae:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 8008e20 <G_q+0x6858>
 8008cb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008cb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008cba:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008cbe:	ed93 7b00 	vldr	d7, [r3]
 8008cc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008cc6:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008cca:	f507 6348 	add.w	r3, r7, #3200	; 0xc80
 8008cce:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cd2:	ed9f 4b53 	vldr	d4, [pc, #332]	; 8008e20 <G_q+0x6858>
 8008cd6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008cda:	ee35 7b07 	vadd.f64	d7, d5, d7
 8008cde:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ce2:	f241 3310 	movw	r3, #4880	; 0x1310
 8008ce6:	443b      	add	r3, r7
 8008ce8:	ed83 7b00 	vstr	d7, [r3]
  if (t62.im == 0.0) {
 8008cec:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008cf0:	ed93 7b02 	vldr	d7, [r3, #8]
 8008cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cfc:	d115      	bne.n	8008d2a <G_q+0x6762>
    t16_re = t62.re / 2.0;
 8008cfe:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008d02:	ed93 6b00 	vldr	d6, [r3]
 8008d06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d0e:	f241 3368 	movw	r3, #4968	; 0x1368
 8008d12:	443b      	add	r3, r7
 8008d14:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8008d18:	f04f 0300 	mov.w	r3, #0
 8008d1c:	f04f 0400 	mov.w	r4, #0
 8008d20:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8008d24:	e9c2 3400 	strd	r3, r4, [r2]
 8008d28:	e037      	b.n	8008d9a <G_q+0x67d2>
  } else if (t62.re == 0.0) {
 8008d2a:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008d2e:	ed93 7b00 	vldr	d7, [r3]
 8008d32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	d115      	bne.n	8008d68 <G_q+0x67a0>
    t16_re = 0.0;
 8008d3c:	f04f 0300 	mov.w	r3, #0
 8008d40:	f04f 0400 	mov.w	r4, #0
 8008d44:	f241 3268 	movw	r2, #4968	; 0x1368
 8008d48:	443a      	add	r2, r7
 8008d4a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t62.im / 2.0;
 8008d4e:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008d52:	ed93 6b02 	vldr	d6, [r3, #8]
 8008d56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d5e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008d62:	ed83 7b00 	vstr	d7, [r3]
 8008d66:	e018      	b.n	8008d9a <G_q+0x67d2>
  } else {
    t16_re = t62.re / 2.0;
 8008d68:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008d6c:	ed93 6b00 	vldr	d6, [r3]
 8008d70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d78:	f241 3368 	movw	r3, #4968	; 0x1368
 8008d7c:	443b      	add	r3, r7
 8008d7e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t62.im / 2.0;
 8008d82:	f507 6341 	add.w	r3, r7, #3088	; 0xc10
 8008d86:	ed93 6b02 	vldr	d6, [r3, #8]
 8008d8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008d8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008d92:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008d96:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t63.im == 0.0) {
 8008d9a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008d9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8008da2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008daa:	d116      	bne.n	8008dda <G_q+0x6812>
    t34_re = t63.re / 2.0;
 8008dac:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008db0:	ed93 6b00 	vldr	d6, [r3]
 8008db4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008db8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008dbc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008dc0:	443b      	add	r3, r7
 8008dc2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8008dd2:	443a      	add	r2, r7
 8008dd4:	e9c2 3400 	strd	r3, r4, [r2]
 8008dd8:	e044      	b.n	8008e64 <G_q+0x689c>
  } else if (t63.re == 0.0) {
 8008dda:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008dde:	ed93 7b00 	vldr	d7, [r3]
 8008de2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dea:	d121      	bne.n	8008e30 <G_q+0x6868>
    t34_re = 0.0;
 8008dec:	f04f 0300 	mov.w	r3, #0
 8008df0:	f04f 0400 	mov.w	r4, #0
 8008df4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8008df8:	443a      	add	r2, r7
 8008dfa:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t63.im / 2.0;
 8008dfe:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008e02:	ed93 6b02 	vldr	d6, [r3, #8]
 8008e06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008e0e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008e12:	443b      	add	r3, r7
 8008e14:	ed83 7b00 	vstr	d7, [r3]
 8008e18:	e024      	b.n	8008e64 <G_q+0x689c>
 8008e1a:	bf00      	nop
 8008e1c:	f3af 8000 	nop.w
	...
 8008e28:	33145c07 	.word	0x33145c07
 8008e2c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t63.re / 2.0;
 8008e30:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008e34:	ed93 6b00 	vldr	d6, [r3]
 8008e38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008e3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008e40:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008e44:	443b      	add	r3, r7
 8008e46:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t63.im / 2.0;
 8008e4a:	f507 6342 	add.w	r3, r7, #3104	; 0xc20
 8008e4e:	ed93 6b02 	vldr	d6, [r3, #8]
 8008e52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8008e56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8008e5a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008e5e:	443b      	add	r3, r7
 8008e60:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008e64:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008e68:	ed93 7b00 	vldr	d7, [r3]
 8008e6c:	ed1f 6b14 	vldr	d6, [pc, #-80]	; 8008e20 <G_q+0x6858>
 8008e70:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008e74:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008e78:	ed93 7b02 	vldr	d7, [r3, #8]
 8008e7c:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8008e28 <G_q+0x6860>
 8008e80:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008e84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008e88:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008e8c:	ed93 7b00 	vldr	d7, [r3]
 8008e90:	ed1f 5b1d 	vldr	d5, [pc, #-116]	; 8008e20 <G_q+0x6858>
 8008e94:	ee27 5b05 	vmul.f64	d5, d7, d5
    t65.im * 3.061616997868383E-17);
 8008e98:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008e9c:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ea0:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 8008e28 <G_q+0x6860>
 8008ea4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t64.re * 0.0 - t64.im * 3.061616997868383E-17) - (t65.re * 0.0 -
 8008ea8:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008eac:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008eb0:	f241 3348 	movw	r3, #4936	; 0x1348
 8008eb4:	443b      	add	r3, r7
 8008eb6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008eba:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008ebe:	ed93 7b00 	vldr	d7, [r3]
 8008ec2:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 8008e28 <G_q+0x6860>
 8008ec6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008eca:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8008ece:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ed2:	ed1f 5b2d 	vldr	d5, [pc, #-180]	; 8008e20 <G_q+0x6858>
 8008ed6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008eda:	ee36 6b07 	vadd.f64	d6, d6, d7
 8008ede:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008ee2:	ed93 7b00 	vldr	d7, [r3]
 8008ee6:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 8008e28 <G_q+0x6860>
 8008eea:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t65.im * 0.0);
 8008eee:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8008ef2:	ed93 7b02 	vldr	d7, [r3, #8]
 8008ef6:	ed1f 4b36 	vldr	d4, [pc, #-216]	; 8008e20 <G_q+0x6858>
 8008efa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008efe:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t64.re * 3.061616997868383E-17 + t64.im * 0.0) - (t65.re *
 8008f02:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008f06:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8008f0a:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_re;
 8008f0e:	f241 3368 	movw	r3, #4968	; 0x1368
 8008f12:	443b      	add	r3, r7
 8008f14:	ed93 6b00 	vldr	d6, [r3]
 8008f18:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008f1c:	443b      	add	r3, r7
 8008f1e:	ed93 7b00 	vldr	d7, [r3]
 8008f22:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f26:	f241 3368 	movw	r3, #4968	; 0x1368
 8008f2a:	443b      	add	r3, r7
 8008f2c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8008f30:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008f34:	ed93 6b00 	vldr	d6, [r3]
 8008f38:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008f3c:	443b      	add	r3, r7
 8008f3e:	ed93 7b00 	vldr	d7, [r3]
 8008f42:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f46:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8008f4a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = t68.re * 3.061616997868383E-17 + t69.re * 3.061616997868383E-17;
 8008f4e:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008f52:	ed93 7b00 	vldr	d7, [r3]
 8008f56:	ed1f 6b4c 	vldr	d6, [pc, #-304]	; 8008e28 <G_q+0x6860>
 8008f5a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008f5e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008f62:	ed93 7b00 	vldr	d7, [r3]
 8008f66:	ed1f 5b50 	vldr	d5, [pc, #-320]	; 8008e28 <G_q+0x6860>
 8008f6a:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008f6e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008f72:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8008f76:	443b      	add	r3, r7
 8008f78:	ed83 7b00 	vstr	d7, [r3]
  t34_im = t68.im * 3.061616997868383E-17 + t69.im * 3.061616997868383E-17;
 8008f7c:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8008f80:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f84:	ed1f 6b58 	vldr	d6, [pc, #-352]	; 8008e28 <G_q+0x6860>
 8008f88:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008f8c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8008f90:	ed93 7b02 	vldr	d7, [r3, #8]
 8008f94:	ed1f 5b5c 	vldr	d5, [pc, #-368]	; 8008e28 <G_q+0x6860>
 8008f98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008f9c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8008fa0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8008fa4:	443b      	add	r3, r7
 8008fa6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t66.re * 0.0 - t66.im * 0.5) - (t67.re * 0.0 - t67.im * 0.5);
 8008faa:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008fae:	ed93 7b00 	vldr	d7, [r3]
 8008fb2:	ed1f 6b65 	vldr	d6, [pc, #-404]	; 8008e20 <G_q+0x6858>
 8008fb6:	ee27 6b06 	vmul.f64	d6, d7, d6
 8008fba:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8008fbe:	ed93 7b02 	vldr	d7, [r3, #8]
 8008fc2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008fc6:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008fca:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008fce:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008fd2:	ed93 7b00 	vldr	d7, [r3]
 8008fd6:	ed1f 5b6e 	vldr	d5, [pc, #-440]	; 8008e20 <G_q+0x6858>
 8008fda:	ee27 5b05 	vmul.f64	d5, d7, d5
 8008fde:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8008fe2:	ed93 7b02 	vldr	d7, [r3, #8]
 8008fe6:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8008fea:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008fee:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008ff2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8008ff6:	f241 3378 	movw	r3, #4984	; 0x1378
 8008ffa:	443b      	add	r3, r7
 8008ffc:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t66.re * 0.5 + t66.im * 0.0) - (t67.re * 0.5 + t67.im * 0.0);
 8009000:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009004:	ed93 7b00 	vldr	d7, [r3]
 8009008:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800900c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009010:	f507 6343 	add.w	r3, r7, #3120	; 0xc30
 8009014:	ed93 7b02 	vldr	d7, [r3, #8]
 8009018:	ed1f 5b7f 	vldr	d5, [pc, #-508]	; 8008e20 <G_q+0x6858>
 800901c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009020:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009024:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8009028:	ed93 7b00 	vldr	d7, [r3]
 800902c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009030:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009034:	f507 6344 	add.w	r3, r7, #3136	; 0xc40
 8009038:	ed93 7b02 	vldr	d7, [r3, #8]
 800903c:	ed1f 4b88 	vldr	d4, [pc, #-544]	; 8008e20 <G_q+0x6858>
 8009040:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009044:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009048:	ee36 7b47 	vsub.f64	d7, d6, d7
 800904c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009050:	443b      	add	r3, r7
 8009052:	ed83 7b00 	vstr	d7, [r3]
  t23_re = t58.re * 3.061616997868383E-17 + t59.re * 3.061616997868383E-17;
 8009056:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800905a:	ed93 7b00 	vldr	d7, [r3]
 800905e:	ed1f 6b8e 	vldr	d6, [pc, #-568]	; 8008e28 <G_q+0x6860>
 8009062:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009066:	4bca      	ldr	r3, [pc, #808]	; (8009390 <G_q+0x6dc8>)
 8009068:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800906c:	443a      	add	r2, r7
 800906e:	4413      	add	r3, r2
 8009070:	ed93 7b00 	vldr	d7, [r3]
 8009074:	ed9f 5bc0 	vldr	d5, [pc, #768]	; 8009378 <G_q+0x6db0>
 8009078:	ee27 7b05 	vmul.f64	d7, d7, d5
 800907c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009080:	f241 3330 	movw	r3, #4912	; 0x1330
 8009084:	443b      	add	r3, r7
 8009086:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t58.im * 3.061616997868383E-17 + t59.im * 3.061616997868383E-17;
 800908a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800908e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009092:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8009378 <G_q+0x6db0>
 8009096:	ee27 6b06 	vmul.f64	d6, d7, d6
 800909a:	4bbd      	ldr	r3, [pc, #756]	; (8009390 <G_q+0x6dc8>)
 800909c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80090a0:	443a      	add	r2, r7
 80090a2:	4413      	add	r3, r2
 80090a4:	ed93 7b02 	vldr	d7, [r3, #8]
 80090a8:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8009378 <G_q+0x6db0>
 80090ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 80090b0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80090b4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80090b8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 80090bc:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80090c0:	ed93 7b00 	vldr	d7, [r3]
 80090c4:	ed9f 6bae 	vldr	d6, [pc, #696]	; 8009380 <G_q+0x6db8>
 80090c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80090cc:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 80090d0:	ed93 7b02 	vldr	d7, [r3, #8]
 80090d4:	ed9f 5bac 	vldr	d5, [pc, #688]	; 8009388 <G_q+0x6dc0>
 80090d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80090dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80090e0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80090e4:	ed93 7b00 	vldr	d7, [r3]
 80090e8:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8009380 <G_q+0x6db8>
 80090ec:	ee27 5b05 	vmul.f64	d5, d7, d5
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 80090f0:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80090f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80090f8:	ed9f 4ba3 	vldr	d4, [pc, #652]	; 8009388 <G_q+0x6dc0>
 80090fc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8009100:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009104:	ee36 6b47 	vsub.f64	d6, d6, d7
              t61.im * 6.123233995736766E-17)) - (t20_re * t16_re - t20_im *
 8009108:	f241 3348 	movw	r3, #4936	; 0x1348
 800910c:	443b      	add	r3, r7
 800910e:	ed93 5b00 	vldr	d5, [r3]
 8009112:	f241 3368 	movw	r3, #4968	; 0x1368
 8009116:	443b      	add	r3, r7
 8009118:	ed93 7b00 	vldr	d7, [r3]
 800911c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009120:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009124:	ed93 4b00 	vldr	d4, [r3]
 8009128:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800912c:	ed93 7b00 	vldr	d7, [r3]
 8009130:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009134:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009138:	ee36 6b47 	vsub.f64	d6, d6, d7
             t16_im)) + (t34_re * t13_re - t34_im * t13_im);
 800913c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009140:	443b      	add	r3, r7
 8009142:	ed93 5b00 	vldr	d5, [r3]
 8009146:	f241 3378 	movw	r3, #4984	; 0x1378
 800914a:	443b      	add	r3, r7
 800914c:	ed93 7b00 	vldr	d7, [r3]
 8009150:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009154:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009158:	443b      	add	r3, r7
 800915a:	ed93 4b00 	vldr	d4, [r3]
 800915e:	f241 3370 	movw	r3, #4976	; 0x1370
 8009162:	443b      	add	r3, r7
 8009164:	ed93 7b00 	vldr	d7, [r3]
 8009168:	ee24 7b07 	vmul.f64	d7, d4, d7
 800916c:	ee35 7b47 	vsub.f64	d7, d5, d7
  t60_re = (((t60.re * 0.0 - t60.im * 6.123233995736766E-17) - (t61.re * 0.0 -
 8009170:	f241 2350 	movw	r3, #4688	; 0x1250
 8009174:	443b      	add	r3, r7
 8009176:	ee36 7b07 	vadd.f64	d7, d6, d7
 800917a:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 800917e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8009182:	ed93 7b00 	vldr	d7, [r3]
 8009186:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8009388 <G_q+0x6dc0>
 800918a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800918e:	f507 633f 	add.w	r3, r7, #3056	; 0xbf0
 8009192:	ed93 7b02 	vldr	d7, [r3, #8]
 8009196:	ed9f 5b7a 	vldr	d5, [pc, #488]	; 8009380 <G_q+0x6db8>
 800919a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800919e:	ee36 6b07 	vadd.f64	d6, d6, d7
 80091a2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80091a6:	ed93 7b00 	vldr	d7, [r3]
 80091aa:	ed9f 5b77 	vldr	d5, [pc, #476]	; 8009388 <G_q+0x6dc0>
 80091ae:	ee27 5b05 	vmul.f64	d5, d7, d5
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80091b2:	f507 6340 	add.w	r3, r7, #3072	; 0xc00
 80091b6:	ed93 7b02 	vldr	d7, [r3, #8]
 80091ba:	ed9f 4b71 	vldr	d4, [pc, #452]	; 8009380 <G_q+0x6db8>
 80091be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80091c2:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 80091c6:	ee36 6b47 	vsub.f64	d6, d6, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80091ca:	f241 3348 	movw	r3, #4936	; 0x1348
 80091ce:	443b      	add	r3, r7
 80091d0:	ed93 5b00 	vldr	d5, [r3]
 80091d4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80091d8:	ed93 7b00 	vldr	d7, [r3]
 80091dc:	ee25 5b07 	vmul.f64	d5, d5, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 80091e0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80091e4:	ed93 4b00 	vldr	d4, [r3]
 80091e8:	f241 3368 	movw	r3, #4968	; 0x1368
 80091ec:	443b      	add	r3, r7
 80091ee:	ed93 7b00 	vldr	d7, [r3]
 80091f2:	ee24 7b07 	vmul.f64	d7, d4, d7
              6.123233995736766E-17 + t61.im * 0.0)) - (t20_re * t16_im + t20_im
 80091f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80091fa:	ee36 6b47 	vsub.f64	d6, d6, d7
             * t16_re)) + (t34_re * t13_im + t34_im * t13_re);
 80091fe:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009202:	443b      	add	r3, r7
 8009204:	ed93 5b00 	vldr	d5, [r3]
 8009208:	f241 3370 	movw	r3, #4976	; 0x1370
 800920c:	443b      	add	r3, r7
 800920e:	ed93 7b00 	vldr	d7, [r3]
 8009212:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009216:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800921a:	443b      	add	r3, r7
 800921c:	ed93 4b00 	vldr	d4, [r3]
 8009220:	f241 3378 	movw	r3, #4984	; 0x1378
 8009224:	443b      	add	r3, r7
 8009226:	ed93 7b00 	vldr	d7, [r3]
 800922a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800922e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (((t60.re * 6.123233995736766E-17 + t60.im * 0.0) - (t61.re *
 8009232:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009236:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800923a:	ed83 7b00 	vstr	d7, [r3]
  if (t78.im == 0.0) {
 800923e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009242:	ed93 7b02 	vldr	d7, [r3, #8]
 8009246:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800924e:	d116      	bne.n	800927e <G_q+0x6cb6>
    t16_re = t78.re / 2.0;
 8009250:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009254:	ed93 6b00 	vldr	d6, [r3]
 8009258:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800925c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009260:	f241 3368 	movw	r3, #4968	; 0x1368
 8009264:	443b      	add	r3, r7
 8009266:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800926a:	f04f 0300 	mov.w	r3, #0
 800926e:	f04f 0400 	mov.w	r4, #0
 8009272:	f241 3288 	movw	r2, #5000	; 0x1388
 8009276:	443a      	add	r2, r7
 8009278:	e9c2 3400 	strd	r3, r4, [r2]
 800927c:	e039      	b.n	80092f2 <G_q+0x6d2a>
  } else if (t78.re == 0.0) {
 800927e:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 8009282:	ed93 7b00 	vldr	d7, [r3]
 8009286:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928e:	d116      	bne.n	80092be <G_q+0x6cf6>
    t16_re = 0.0;
 8009290:	f04f 0300 	mov.w	r3, #0
 8009294:	f04f 0400 	mov.w	r4, #0
 8009298:	f241 3268 	movw	r2, #4968	; 0x1368
 800929c:	443a      	add	r2, r7
 800929e:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t78.im / 2.0;
 80092a2:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80092a6:	ed93 6b02 	vldr	d6, [r3, #8]
 80092aa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092ae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092b2:	f241 3388 	movw	r3, #5000	; 0x1388
 80092b6:	443b      	add	r3, r7
 80092b8:	ed83 7b00 	vstr	d7, [r3]
 80092bc:	e019      	b.n	80092f2 <G_q+0x6d2a>
  } else {
    t16_re = t78.re / 2.0;
 80092be:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80092c2:	ed93 6b00 	vldr	d6, [r3]
 80092c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092ce:	f241 3368 	movw	r3, #4968	; 0x1368
 80092d2:	443b      	add	r3, r7
 80092d4:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t78.im / 2.0;
 80092d8:	f507 6349 	add.w	r3, r7, #3216	; 0xc90
 80092dc:	ed93 6b02 	vldr	d6, [r3, #8]
 80092e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80092e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80092e8:	f241 3388 	movw	r3, #5000	; 0x1388
 80092ec:	443b      	add	r3, r7
 80092ee:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t79.im == 0.0) {
 80092f2:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80092f6:	ed93 7b02 	vldr	d7, [r3, #8]
 80092fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009302:	d116      	bne.n	8009332 <G_q+0x6d6a>
    t34_re = t79.re / 2.0;
 8009304:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009308:	ed93 6b00 	vldr	d6, [r3]
 800930c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009310:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009314:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009318:	443b      	add	r3, r7
 800931a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	f04f 0400 	mov.w	r4, #0
 8009326:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800932a:	443a      	add	r2, r7
 800932c:	e9c2 3400 	strd	r3, r4, [r2]
 8009330:	e04a      	b.n	80093c8 <G_q+0x6e00>
  } else if (t79.re == 0.0) {
 8009332:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009336:	ed93 7b00 	vldr	d7, [r3]
 800933a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800933e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009342:	d127      	bne.n	8009394 <G_q+0x6dcc>
    t34_re = 0.0;
 8009344:	f04f 0300 	mov.w	r3, #0
 8009348:	f04f 0400 	mov.w	r4, #0
 800934c:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8009350:	443a      	add	r2, r7
 8009352:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t79.im / 2.0;
 8009356:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 800935a:	ed93 6b02 	vldr	d6, [r3, #8]
 800935e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009362:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009366:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800936a:	443b      	add	r3, r7
 800936c:	ed83 7b00 	vstr	d7, [r3]
 8009370:	e02a      	b.n	80093c8 <G_q+0x6e00>
 8009372:	bf00      	nop
 8009374:	f3af 8000 	nop.w
 8009378:	33145c07 	.word	0x33145c07
 800937c:	3c81a626 	.word	0x3c81a626
	...
 8009388:	33145c07 	.word	0x33145c07
 800938c:	3c91a626 	.word	0x3c91a626
 8009390:	ffffedb0 	.word	0xffffedb0
  } else {
    t34_re = t79.re / 2.0;
 8009394:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 8009398:	ed93 6b00 	vldr	d6, [r3]
 800939c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80093a0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80093a4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80093a8:	443b      	add	r3, r7
 80093aa:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t79.im / 2.0;
 80093ae:	f507 634a 	add.w	r3, r7, #3232	; 0xca0
 80093b2:	ed93 6b02 	vldr	d6, [r3, #8]
 80093b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80093ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80093be:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80093c2:	443b      	add	r3, r7
 80093c4:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t80.im == 0.0) {
 80093c8:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80093cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80093d0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80093d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d8:	d115      	bne.n	8009406 <G_q+0x6e3e>
    t16_im = t80.re / 2.0;
 80093da:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 80093de:	ed93 6b00 	vldr	d6, [r3]
 80093e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80093e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80093ea:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80093ee:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 80093f2:	f04f 0300 	mov.w	r3, #0
 80093f6:	f04f 0400 	mov.w	r4, #0
 80093fa:	f241 3248 	movw	r2, #4936	; 0x1348
 80093fe:	443a      	add	r2, r7
 8009400:	e9c2 3400 	strd	r3, r4, [r2]
 8009404:	e037      	b.n	8009476 <G_q+0x6eae>
  } else if (t80.re == 0.0) {
 8009406:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800940a:	ed93 7b00 	vldr	d7, [r3]
 800940e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009416:	d115      	bne.n	8009444 <G_q+0x6e7c>
    t16_im = 0.0;
 8009418:	f04f 0300 	mov.w	r3, #0
 800941c:	f04f 0400 	mov.w	r4, #0
 8009420:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8009424:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t80.im / 2.0;
 8009428:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 800942c:	ed93 6b02 	vldr	d6, [r3, #8]
 8009430:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009434:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009438:	f241 3348 	movw	r3, #4936	; 0x1348
 800943c:	443b      	add	r3, r7
 800943e:	ed83 7b00 	vstr	d7, [r3]
 8009442:	e018      	b.n	8009476 <G_q+0x6eae>
  } else {
    t16_im = t80.re / 2.0;
 8009444:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009448:	ed93 6b00 	vldr	d6, [r3]
 800944c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009450:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009454:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009458:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t80.im / 2.0;
 800945c:	f507 63aa 	add.w	r3, r7, #1360	; 0x550
 8009460:	ed93 6b02 	vldr	d6, [r3, #8]
 8009464:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009468:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800946c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009470:	443b      	add	r3, r7
 8009472:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t81.im == 0.0) {
 8009476:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800947a:	ed93 7b02 	vldr	d7, [r3, #8]
 800947e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009482:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009486:	d116      	bne.n	80094b6 <G_q+0x6eee>
    t13_re = t81.re / 2.0;
 8009488:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 800948c:	ed93 6b00 	vldr	d6, [r3]
 8009490:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009494:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009498:	f241 3378 	movw	r3, #4984	; 0x1378
 800949c:	443b      	add	r3, r7
 800949e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 80094a2:	f04f 0300 	mov.w	r3, #0
 80094a6:	f04f 0400 	mov.w	r4, #0
 80094aa:	f241 3270 	movw	r2, #4976	; 0x1370
 80094ae:	443a      	add	r2, r7
 80094b0:	e9c2 3400 	strd	r3, r4, [r2]
 80094b4:	e039      	b.n	800952a <G_q+0x6f62>
  } else if (t81.re == 0.0) {
 80094b6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80094ba:	ed93 7b00 	vldr	d7, [r3]
 80094be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80094c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094c6:	d116      	bne.n	80094f6 <G_q+0x6f2e>
    t13_re = 0.0;
 80094c8:	f04f 0300 	mov.w	r3, #0
 80094cc:	f04f 0400 	mov.w	r4, #0
 80094d0:	f241 3278 	movw	r2, #4984	; 0x1378
 80094d4:	443a      	add	r2, r7
 80094d6:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t81.im / 2.0;
 80094da:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80094de:	ed93 6b02 	vldr	d6, [r3, #8]
 80094e2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80094e6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80094ea:	f241 3370 	movw	r3, #4976	; 0x1370
 80094ee:	443b      	add	r3, r7
 80094f0:	ed83 7b00 	vstr	d7, [r3]
 80094f4:	e019      	b.n	800952a <G_q+0x6f62>
  } else {
    t13_re = t81.re / 2.0;
 80094f6:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 80094fa:	ed93 6b00 	vldr	d6, [r3]
 80094fe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009502:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009506:	f241 3378 	movw	r3, #4984	; 0x1378
 800950a:	443b      	add	r3, r7
 800950c:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t81.im / 2.0;
 8009510:	f507 63ac 	add.w	r3, r7, #1376	; 0x560
 8009514:	ed93 6b02 	vldr	d6, [r3, #8]
 8009518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800951c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009520:	f241 3370 	movw	r3, #4976	; 0x1370
 8009524:	443b      	add	r3, r7
 8009526:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 800952a:	f241 3368 	movw	r3, #4968	; 0x1368
 800952e:	443b      	add	r3, r7
 8009530:	ed93 6b00 	vldr	d6, [r3]
 8009534:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009538:	443b      	add	r3, r7
 800953a:	ed93 7b00 	vldr	d7, [r3]
 800953e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009542:	f241 3368 	movw	r3, #4968	; 0x1368
 8009546:	443b      	add	r3, r7
 8009548:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800954c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009550:	443b      	add	r3, r7
 8009552:	ed93 6b00 	vldr	d6, [r3]
 8009556:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800955a:	443b      	add	r3, r7
 800955c:	ed93 7b00 	vldr	d7, [r3]
 8009560:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009564:	f241 3388 	movw	r3, #5000	; 0x1388
 8009568:	443b      	add	r3, r7
 800956a:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t13_re;
 800956e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009572:	ed93 6b00 	vldr	d6, [r3]
 8009576:	f241 3378 	movw	r3, #4984	; 0x1378
 800957a:	443b      	add	r3, r7
 800957c:	ed93 7b00 	vldr	d7, [r3]
 8009580:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009584:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009588:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t13_im;
 800958c:	f241 3348 	movw	r3, #4936	; 0x1348
 8009590:	443b      	add	r3, r7
 8009592:	ed93 6b00 	vldr	d6, [r3]
 8009596:	f241 3370 	movw	r3, #4976	; 0x1370
 800959a:	443b      	add	r3, r7
 800959c:	ed93 7b00 	vldr	d7, [r3]
 80095a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80095a4:	f241 3348 	movw	r3, #4936	; 0x1348
 80095a8:	443b      	add	r3, r7
 80095aa:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t83.re * 0.0 - t83.im * 0.5) - (t82.re * 0.0 - t82.im * 0.5);
 80095ae:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80095b2:	ed93 7b00 	vldr	d7, [r3]
 80095b6:	ed9f 6bec 	vldr	d6, [pc, #944]	; 8009968 <G_q+0x73a0>
 80095ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80095be:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 80095c2:	ed93 7b02 	vldr	d7, [r3, #8]
 80095c6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80095ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80095ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80095d2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80095d6:	ed93 7b00 	vldr	d7, [r3]
 80095da:	ed9f 5be3 	vldr	d5, [pc, #908]	; 8009968 <G_q+0x73a0>
 80095de:	ee27 5b05 	vmul.f64	d5, d7, d5
 80095e2:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 80095e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80095ea:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80095ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80095f2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80095f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80095fa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80095fe:	443b      	add	r3, r7
 8009600:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t83.re * 0.5 + t83.im * 0.0) - (t82.re * 0.5 + t82.im * 0.0);
 8009604:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009608:	ed93 7b00 	vldr	d7, [r3]
 800960c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8009610:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009614:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009618:	ed93 7b02 	vldr	d7, [r3, #8]
 800961c:	ed9f 5bd2 	vldr	d5, [pc, #840]	; 8009968 <G_q+0x73a0>
 8009620:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009624:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009628:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800962c:	ed93 7b00 	vldr	d7, [r3]
 8009630:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009634:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009638:	f507 634b 	add.w	r3, r7, #3248	; 0xcb0
 800963c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009640:	ed9f 4bc9 	vldr	d4, [pc, #804]	; 8009968 <G_q+0x73a0>
 8009644:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009648:	ee35 7b07 	vadd.f64	d7, d5, d7
 800964c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009650:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009654:	443b      	add	r3, r7
 8009656:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t85.re * 0.0 - t85.im * 0.5) - (t84.re * 0.0 - t84.im * 0.5);
 800965a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800965e:	ed93 7b00 	vldr	d7, [r3]
 8009662:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8009968 <G_q+0x73a0>
 8009666:	ee27 6b06 	vmul.f64	d6, d7, d6
 800966a:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 800966e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009672:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009676:	ee27 7b05 	vmul.f64	d7, d7, d5
 800967a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800967e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009682:	ed93 7b00 	vldr	d7, [r3]
 8009686:	ed9f 5bb8 	vldr	d5, [pc, #736]	; 8009968 <G_q+0x73a0>
 800968a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800968e:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 8009692:	ed93 7b02 	vldr	d7, [r3, #8]
 8009696:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800969a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800969e:	ee35 7b47 	vsub.f64	d7, d5, d7
 80096a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096a6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80096aa:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t85.re * 0.5 + t85.im * 0.0) - (t84.re * 0.5 + t84.im * 0.0);
 80096ae:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80096b2:	ed93 7b00 	vldr	d7, [r3]
 80096b6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80096ba:	ee27 6b06 	vmul.f64	d6, d7, d6
 80096be:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 80096c2:	ed93 7b02 	vldr	d7, [r3, #8]
 80096c6:	ed9f 5ba8 	vldr	d5, [pc, #672]	; 8009968 <G_q+0x73a0>
 80096ca:	ee27 7b05 	vmul.f64	d7, d7, d5
 80096ce:	ee36 6b07 	vadd.f64	d6, d6, d7
 80096d2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80096d6:	ed93 7b00 	vldr	d7, [r3]
 80096da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80096de:	ee27 5b05 	vmul.f64	d5, d7, d5
 80096e2:	f507 63ae 	add.w	r3, r7, #1392	; 0x570
 80096e6:	ed93 7b02 	vldr	d7, [r3, #8]
 80096ea:	ed9f 4b9f 	vldr	d4, [pc, #636]	; 8009968 <G_q+0x73a0>
 80096ee:	ee27 7b04 	vmul.f64	d7, d7, d4
 80096f2:	ee35 7b07 	vadd.f64	d7, d5, d7
 80096f6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80096fa:	f241 3318 	movw	r3, #4888	; 0x1318
 80096fe:	443b      	add	r3, r7
 8009700:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t16_re * t16_im - t12_re * t20_re) + (t34_re * t12_im - t34_im *
 8009704:	f241 3368 	movw	r3, #4968	; 0x1368
 8009708:	443b      	add	r3, r7
 800970a:	ed93 6b00 	vldr	d6, [r3]
 800970e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8009712:	ed93 7b00 	vldr	d7, [r3]
 8009716:	ee26 6b07 	vmul.f64	d6, d6, d7
 800971a:	f241 3388 	movw	r3, #5000	; 0x1388
 800971e:	443b      	add	r3, r7
 8009720:	ed93 5b00 	vldr	d5, [r3]
 8009724:	f241 3348 	movw	r3, #4936	; 0x1348
 8009728:	443b      	add	r3, r7
 800972a:	ed93 7b00 	vldr	d7, [r3]
 800972e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8009732:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009736:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800973a:	443b      	add	r3, r7
 800973c:	ed93 5b00 	vldr	d5, [r3]
 8009740:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8009744:	ed93 7b00 	vldr	d7, [r3]
 8009748:	ee25 5b07 	vmul.f64	d5, d5, d7
 800974c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009750:	443b      	add	r3, r7
 8009752:	ed93 4b00 	vldr	d4, [r3]
 8009756:	f241 3318 	movw	r3, #4888	; 0x1318
 800975a:	443b      	add	r3, r7
 800975c:	ed93 7b00 	vldr	d7, [r3]
 8009760:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009764:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009768:	ee36 7b07 	vadd.f64	d7, d6, d7
 800976c:	f241 3370 	movw	r3, #4976	; 0x1370
 8009770:	443b      	add	r3, r7
 8009772:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t12_re = (t16_re * t20_re + t12_re * t16_im) + (t34_re * t85_im + t34_im *
 8009776:	f241 3368 	movw	r3, #4968	; 0x1368
 800977a:	443b      	add	r3, r7
 800977c:	ed93 6b00 	vldr	d6, [r3]
 8009780:	f241 3348 	movw	r3, #4936	; 0x1348
 8009784:	443b      	add	r3, r7
 8009786:	ed93 7b00 	vldr	d7, [r3]
 800978a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800978e:	f241 3388 	movw	r3, #5000	; 0x1388
 8009792:	443b      	add	r3, r7
 8009794:	ed93 5b00 	vldr	d5, [r3]
 8009798:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800979c:	ed93 7b00 	vldr	d7, [r3]
 80097a0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80097a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80097a8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80097ac:	443b      	add	r3, r7
 80097ae:	ed93 5b00 	vldr	d5, [r3]
 80097b2:	f241 3318 	movw	r3, #4888	; 0x1318
 80097b6:	443b      	add	r3, r7
 80097b8:	ed93 7b00 	vldr	d7, [r3]
 80097bc:	ee25 5b07 	vmul.f64	d5, d5, d7
 80097c0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80097c4:	443b      	add	r3, r7
 80097c6:	ed93 4b00 	vldr	d4, [r3]
 80097ca:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80097ce:	ed93 7b00 	vldr	d7, [r3]
 80097d2:	ee24 7b07 	vmul.f64	d7, d4, d7
 80097d6:	ee35 7b07 	vadd.f64	d7, d5, d7
 80097da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80097de:	f241 3388 	movw	r3, #5000	; 0x1388
 80097e2:	443b      	add	r3, r7
 80097e4:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 80097e8:	4b65      	ldr	r3, [pc, #404]	; (8009980 <G_q+0x73b8>)
 80097ea:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80097ee:	443a      	add	r2, r7
 80097f0:	4413      	add	r3, r2
 80097f2:	ed93 7b02 	vldr	d7, [r3, #8]
 80097f6:	ed9f 6b5e 	vldr	d6, [pc, #376]	; 8009970 <G_q+0x73a8>
 80097fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80097fe:	f241 2370 	movw	r3, #4720	; 0x1270
 8009802:	443b      	add	r3, r7
 8009804:	ed93 6b00 	vldr	d6, [r3]
 8009808:	ee36 6b47 	vsub.f64	d6, d6, d7
 800980c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009810:	ed93 7b00 	vldr	d7, [r3]
 8009814:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8009968 <G_q+0x73a0>
 8009818:	ee27 5b05 	vmul.f64	d5, d7, d5
    t86.im * 3.061616997868383E-17);
 800981c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009820:	ed93 7b02 	vldr	d7, [r3, #8]
 8009824:	ed9f 4b52 	vldr	d4, [pc, #328]	; 8009970 <G_q+0x73a8>
 8009828:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t19_re_tmp - t87.im * 3.061616997868383E-17) - (t86.re * 0.0 -
 800982c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009830:	ee36 7b47 	vsub.f64	d7, d6, d7
 8009834:	f241 3378 	movw	r3, #4984	; 0x1378
 8009838:	443b      	add	r3, r7
 800983a:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 800983e:	4b50      	ldr	r3, [pc, #320]	; (8009980 <G_q+0x73b8>)
 8009840:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009844:	443a      	add	r2, r7
 8009846:	4413      	add	r3, r2
 8009848:	ed93 7b00 	vldr	d7, [r3]
 800984c:	ed9f 6b48 	vldr	d6, [pc, #288]	; 8009970 <G_q+0x73a8>
 8009850:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009854:	f241 2368 	movw	r3, #4712	; 0x1268
 8009858:	443b      	add	r3, r7
 800985a:	ed93 7b00 	vldr	d7, [r3]
 800985e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009862:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009866:	ed93 7b00 	vldr	d7, [r3]
 800986a:	ed9f 5b41 	vldr	d5, [pc, #260]	; 8009970 <G_q+0x73a8>
 800986e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t86.im * 0.0);
 8009872:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8009876:	ed93 7b02 	vldr	d7, [r3, #8]
 800987a:	ed9f 4b3b 	vldr	d4, [pc, #236]	; 8009968 <G_q+0x73a0>
 800987e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009882:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (t87.re * 3.061616997868383E-17 + t19_im_tmp) - (t86.re *
 8009886:	ee36 7b47 	vsub.f64	d7, d6, d7
 800988a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800988e:	443b      	add	r3, r7
 8009890:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t55_re;
 8009894:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009898:	443b      	add	r3, r7
 800989a:	ed93 6b00 	vldr	d6, [r3]
 800989e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80098a2:	ed93 7b00 	vldr	d7, [r3]
 80098a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098aa:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80098ae:	443b      	add	r3, r7
 80098b0:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t55_im;
 80098b4:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80098b8:	443b      	add	r3, r7
 80098ba:	ed93 6b00 	vldr	d6, [r3]
 80098be:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80098c2:	443b      	add	r3, r7
 80098c4:	ed93 7b00 	vldr	d7, [r3]
 80098c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80098cc:	f241 23e8 	movw	r3, #4840	; 0x12e8
 80098d0:	443b      	add	r3, r7
 80098d2:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 80098d6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80098da:	ed93 7b00 	vldr	d7, [r3]
 80098de:	ed9f 6b22 	vldr	d6, [pc, #136]	; 8009968 <G_q+0x73a0>
 80098e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80098e6:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 80098ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80098ee:	ed9f 5b22 	vldr	d5, [pc, #136]	; 8009978 <G_q+0x73b0>
 80098f2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80098f6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80098fa:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 80098fe:	ed93 7b00 	vldr	d7, [r3]
 8009902:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8009968 <G_q+0x73a0>
 8009906:	ee27 5b05 	vmul.f64	d5, d7, d5
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 800990a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 800990e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009912:	ed9f 4b19 	vldr	d4, [pc, #100]	; 8009978 <G_q+0x73b0>
 8009916:	ee27 7b04 	vmul.f64	d7, d7, d4
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 800991a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800991e:	ee36 6b47 	vsub.f64	d6, d6, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 8009922:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8009926:	443a      	add	r2, r7
 8009928:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800992c:	ed92 5b00 	vldr	d5, [r2]
 8009930:	ed93 7b00 	vldr	d7, [r3]
 8009934:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009938:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800993c:	443b      	add	r3, r7
 800993e:	ed93 4b00 	vldr	d4, [r3]
 8009942:	f241 3338 	movw	r3, #4920	; 0x1338
 8009946:	443b      	add	r3, r7
 8009948:	ed93 7b00 	vldr	d7, [r3]
 800994c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009950:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009954:	ee36 6b07 	vadd.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 8009958:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800995c:	443a      	add	r2, r7
 800995e:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8009962:	443b      	add	r3, r7
 8009964:	e00e      	b.n	8009984 <G_q+0x73bc>
 8009966:	bf00      	nop
	...
 8009970:	33145c07 	.word	0x33145c07
 8009974:	3c81a626 	.word	0x3c81a626
 8009978:	858a5d48 	.word	0x858a5d48
 800997c:	393377ce 	.word	0x393377ce
 8009980:	ffffedd0 	.word	0xffffedd0
 8009984:	ed92 5b00 	vldr	d5, [r2]
 8009988:	ed93 7b00 	vldr	d7, [r3]
 800998c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009990:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8009994:	443b      	add	r3, r7
 8009996:	ed93 4b00 	vldr	d4, [r3]
 800999a:	f241 3310 	movw	r3, #4880	; 0x1310
 800999e:	443b      	add	r3, r7
 80099a0:	ed93 7b00 	vldr	d7, [r3]
 80099a4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80099a8:	ee35 7b47 	vsub.f64	d7, d5, d7
    t57.im * 3.749399456654644E-33)) + (t70_re * t72_re - t70_im * b_t10_re)) -
 80099ac:	ee36 6b47 	vsub.f64	d6, d6, d7
             (t74_re * t76_re - t74_im * t3_im)) + (t23_re * t60_re - t58_im *
 80099b0:	f241 2350 	movw	r3, #4688	; 0x1250
 80099b4:	443b      	add	r3, r7
 80099b6:	f241 3230 	movw	r2, #4912	; 0x1330
 80099ba:	443a      	add	r2, r7
 80099bc:	ed92 5b00 	vldr	d5, [r2]
 80099c0:	ed93 7b00 	vldr	d7, [r3]
 80099c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80099c8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80099cc:	ed93 4b00 	vldr	d4, [r3]
 80099d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80099d4:	ed93 7b00 	vldr	d7, [r3]
 80099d8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80099dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80099e0:	ee36 6b07 	vadd.f64	d6, d6, d7
             t20_im)) + (t13_im * t13_re - t12_re * t34_re);
 80099e4:	f241 3370 	movw	r3, #4976	; 0x1370
 80099e8:	443b      	add	r3, r7
 80099ea:	ed93 5b00 	vldr	d5, [r3]
 80099ee:	f241 3378 	movw	r3, #4984	; 0x1378
 80099f2:	443b      	add	r3, r7
 80099f4:	ed93 7b00 	vldr	d7, [r3]
 80099f8:	ee25 5b07 	vmul.f64	d5, d5, d7
 80099fc:	f241 3388 	movw	r3, #5000	; 0x1388
 8009a00:	443b      	add	r3, r7
 8009a02:	ed93 4b00 	vldr	d4, [r3]
 8009a06:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009a0a:	443b      	add	r3, r7
 8009a0c:	ed93 7b00 	vldr	d7, [r3]
 8009a10:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009a14:	ee35 7b47 	vsub.f64	d7, d5, d7
  t34_im = (((((t56.re * 0.0 - t56.im * 3.749399456654644E-33) - (t57.re * 0.0 -
 8009a18:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009a1c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009a20:	443b      	add	r3, r7
 8009a22:	ed83 7b00 	vstr	d7, [r3]
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009a26:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009a2a:	ed93 7b00 	vldr	d7, [r3]
 8009a2e:	ed9f 6be8 	vldr	d6, [pc, #928]	; 8009dd0 <G_q+0x7808>
 8009a32:	ee27 6b06 	vmul.f64	d6, d7, d6
 8009a36:	f507 633d 	add.w	r3, r7, #3024	; 0xbd0
 8009a3a:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a3e:	ed9f 5be6 	vldr	d5, [pc, #920]	; 8009dd8 <G_q+0x7810>
 8009a42:	ee27 7b05 	vmul.f64	d7, d7, d5
 8009a46:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009a4a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009a4e:	ed93 7b00 	vldr	d7, [r3]
 8009a52:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 8009dd0 <G_q+0x7808>
 8009a56:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8009a5a:	f507 633e 	add.w	r3, r7, #3040	; 0xbe0
 8009a5e:	ed93 7b02 	vldr	d7, [r3, #8]
 8009a62:	ed9f 4bdd 	vldr	d4, [pc, #884]	; 8009dd8 <G_q+0x7810>
 8009a66:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009a6a:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009a6e:	ee36 6b47 	vsub.f64	d6, d6, d7
    3.749399456654644E-33 + t57.im * 0.0)) + (t70_re * b_t10_re + t70_im *
 8009a72:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8009a76:	443b      	add	r3, r7
 8009a78:	ed93 5b00 	vldr	d5, [r3]
 8009a7c:	f241 3338 	movw	r3, #4920	; 0x1338
 8009a80:	443b      	add	r3, r7
 8009a82:	ed93 7b00 	vldr	d7, [r3]
 8009a86:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009a8a:	f241 22c8 	movw	r2, #4808	; 0x12c8
 8009a8e:	443a      	add	r2, r7
 8009a90:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8009a94:	ed92 4b00 	vldr	d4, [r2]
 8009a98:	ed93 7b00 	vldr	d7, [r3]
 8009a9c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009aa0:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009aa4:	ee36 6b07 	vadd.f64	d6, d6, d7
    t72_re)) - (t74_re * t3_im + t74_im * t76_re)) + (t23_re * t20_im + t58_im *
 8009aa8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8009aac:	443b      	add	r3, r7
 8009aae:	ed93 5b00 	vldr	d5, [r3]
 8009ab2:	f241 3310 	movw	r3, #4880	; 0x1310
 8009ab6:	443b      	add	r3, r7
 8009ab8:	ed93 7b00 	vldr	d7, [r3]
 8009abc:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009ac0:	f241 22b0 	movw	r2, #4784	; 0x12b0
 8009ac4:	443a      	add	r2, r7
 8009ac6:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8009aca:	443b      	add	r3, r7
 8009acc:	ed92 4b00 	vldr	d4, [r2]
 8009ad0:	ed93 7b00 	vldr	d7, [r3]
 8009ad4:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009ad8:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009adc:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009ae0:	f241 3330 	movw	r3, #4912	; 0x1330
 8009ae4:	443b      	add	r3, r7
 8009ae6:	ed93 5b00 	vldr	d5, [r3]
 8009aea:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8009aee:	ed93 7b00 	vldr	d7, [r3]
 8009af2:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009af6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8009afa:	f241 2350 	movw	r3, #4688	; 0x1250
 8009afe:	443b      	add	r3, r7
 8009b00:	ed92 4b00 	vldr	d4, [r2]
 8009b04:	ed93 7b00 	vldr	d7, [r3]
 8009b08:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009b0c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8009b10:	ee36 6b07 	vadd.f64	d6, d6, d7
             t60_re)) + (t13_im * t34_re + t12_re * t13_re);
 8009b14:	f241 3370 	movw	r3, #4976	; 0x1370
 8009b18:	443b      	add	r3, r7
 8009b1a:	ed93 5b00 	vldr	d5, [r3]
 8009b1e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b22:	443b      	add	r3, r7
 8009b24:	ed93 7b00 	vldr	d7, [r3]
 8009b28:	ee25 5b07 	vmul.f64	d5, d5, d7
 8009b2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8009b30:	443b      	add	r3, r7
 8009b32:	ed93 4b00 	vldr	d4, [r3]
 8009b36:	f241 3378 	movw	r3, #4984	; 0x1378
 8009b3a:	443b      	add	r3, r7
 8009b3c:	ed93 7b00 	vldr	d7, [r3]
 8009b40:	ee24 7b07 	vmul.f64	d7, d4, d7
 8009b44:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = (((((t56.re * 3.749399456654644E-33 + t56.im * 0.0) - (t57.re *
 8009b48:	ee36 7b07 	vadd.f64	d7, d6, d7
 8009b4c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009b50:	443b      	add	r3, r7
 8009b52:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009b56:	4bae      	ldr	r3, [pc, #696]	; (8009e10 <G_q+0x7848>)
 8009b58:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009b5c:	443a      	add	r2, r7
 8009b5e:	4413      	add	r3, r2
 8009b60:	ed93 7b00 	vldr	d7, [r3]
 8009b64:	eeb1 6b47 	vneg.f64	d6, d7
 8009b68:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009b6c:	ed93 7b00 	vldr	d7, [r3]
 8009b70:	ed9f 5b9b 	vldr	d5, [pc, #620]	; 8009de0 <G_q+0x7818>
 8009b74:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009b78:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009b7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8009b80:	ed9f 4b99 	vldr	d4, [pc, #612]	; 8009de8 <G_q+0x7820>
 8009b84:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b88:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009b8c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009b90:	ed93 7b00 	vldr	d7, [r3]
 8009b94:	ed9f 4b92 	vldr	d4, [pc, #584]	; 8009de0 <G_q+0x7818>
 8009b98:	ee27 4b04 	vmul.f64	d4, d7, d4
 8009b9c:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009ba0:	ed93 7b02 	vldr	d7, [r3, #8]
 8009ba4:	ed9f 3b90 	vldr	d3, [pc, #576]	; 8009de8 <G_q+0x7820>
 8009ba8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009bac:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009bb0:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009bb4:	f241 2398 	movw	r3, #4760	; 0x1298
 8009bb8:	443b      	add	r3, r7
 8009bba:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009bbe:	443a      	add	r2, r7
 8009bc0:	ed92 4b00 	vldr	d4, [r2]
 8009bc4:	ed93 7b00 	vldr	d7, [r3]
 8009bc8:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009bcc:	f241 2390 	movw	r3, #4752	; 0x1290
 8009bd0:	443b      	add	r3, r7
 8009bd2:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009bd6:	ed92 3b00 	vldr	d3, [r2]
 8009bda:	ed93 7b00 	vldr	d7, [r3]
 8009bde:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009be2:	ee34 7b47 	vsub.f64	d7, d4, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009be6:	ed9f 4b82 	vldr	d4, [pc, #520]	; 8009df0 <G_q+0x7828>
 8009bea:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * 0.1335 - t83.im * -4.7990846441586913E-18)) + (t33_re * t35_re -
 8009bee:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009bf2:	f241 2388 	movw	r3, #4744	; 0x1288
 8009bf6:	443b      	add	r3, r7
 8009bf8:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009bfc:	443a      	add	r2, r7
 8009bfe:	ed92 4b00 	vldr	d4, [r2]
 8009c02:	ed93 7b00 	vldr	d7, [r3]
 8009c06:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c0a:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009c0e:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009c12:	ed92 3b00 	vldr	d3, [r2]
 8009c16:	ed93 7b00 	vldr	d7, [r3]
 8009c1a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c1e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009c22:	ed9f 4b73 	vldr	d4, [pc, #460]	; 8009df0 <G_q+0x7828>
 8009c26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c2a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009c2e:	f241 3328 	movw	r3, #4904	; 0x1328
 8009c32:	443b      	add	r3, r7
 8009c34:	ed93 4b00 	vldr	d4, [r3]
 8009c38:	f241 3398 	movw	r3, #5016	; 0x1398
 8009c3c:	443b      	add	r3, r7
 8009c3e:	ed93 7b00 	vldr	d7, [r3]
 8009c42:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c46:	f241 2378 	movw	r3, #4728	; 0x1278
 8009c4a:	443b      	add	r3, r7
 8009c4c:	ed93 3b00 	vldr	d3, [r3]
 8009c50:	f241 3390 	movw	r3, #5008	; 0x1390
 8009c54:	443b      	add	r3, r7
 8009c56:	ed93 7b00 	vldr	d7, [r3]
 8009c5a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c5e:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009c62:	ed9f 4b65 	vldr	d4, [pc, #404]	; 8009df8 <G_q+0x7830>
 8009c66:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_im) * 0.1376) - (t37_re * t39_re - t37_im * t39_im) * 0.1376) -
 8009c6a:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009c6e:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009c72:	f241 3258 	movw	r2, #4952	; 0x1358
 8009c76:	443a      	add	r2, r7
 8009c78:	ed92 4b00 	vldr	d4, [r2]
 8009c7c:	ed93 7b00 	vldr	d7, [r3]
 8009c80:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009c84:	f241 3350 	movw	r3, #4944	; 0x1350
 8009c88:	443b      	add	r3, r7
 8009c8a:	ed93 3b00 	vldr	d3, [r3]
 8009c8e:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009c92:	ed93 7b00 	vldr	d7, [r3]
 8009c96:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009c9a:	ee34 7b47 	vsub.f64	d7, d4, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8009c9e:	ed9f 4b58 	vldr	d4, [pc, #352]	; 8009e00 <G_q+0x7838>
 8009ca2:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_re - t54_im * t10_im) * 0.0215) + (t19_re * t8_re - t19_im *
 8009ca6:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_im) * 1.3164953090834051E-18) - (t41_re * t43_re - t41_im * t43_im) *
 8009caa:	f241 2358 	movw	r3, #4696	; 0x1258
 8009cae:	443b      	add	r3, r7
 8009cb0:	f241 3208 	movw	r2, #4872	; 0x1308
 8009cb4:	443a      	add	r2, r7
 8009cb6:	ed92 4b00 	vldr	d4, [r2]
 8009cba:	ed93 7b00 	vldr	d7, [r3]
 8009cbe:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009cc2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8009cc6:	ed93 3b00 	vldr	d3, [r3]
 8009cca:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009cce:	443b      	add	r3, r7
 8009cd0:	ed93 7b00 	vldr	d7, [r3]
 8009cd4:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009cd8:	ee34 7b47 	vsub.f64	d7, d4, d7
 8009cdc:	ed9f 4b48 	vldr	d4, [pc, #288]	; 8009e00 <G_q+0x7838>
 8009ce0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009ce4:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009ce8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009cec:	443b      	add	r3, r7
 8009cee:	ed93 4b00 	vldr	d4, [r3]
 8009cf2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009cf6:	443b      	add	r3, r7
 8009cf8:	ed93 7b00 	vldr	d7, [r3]
 8009cfc:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009d00:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009d04:	443b      	add	r3, r7
 8009d06:	ed93 3b00 	vldr	d3, [r3]
 8009d0a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009d0e:	443b      	add	r3, r7
 8009d10:	ed93 7b00 	vldr	d7, [r3]
 8009d14:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009d18:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_re) * 0.0215);
 8009d1c:	ed9f 4b36 	vldr	d4, [pc, #216]	; 8009df8 <G_q+0x7830>
 8009d20:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_im - b_t54_im *
 8009d24:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].re = -g * ((((((((t3.re * 0.1335 - t3.im * 4.7990846441586913E-18) +
 8009d28:	4b3a      	ldr	r3, [pc, #232]	; (8009e14 <G_q+0x784c>)
 8009d2a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009d2e:	443a      	add	r2, r7
 8009d30:	4413      	add	r3, r2
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	3310      	adds	r3, #16
 8009d36:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009d3a:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009d3e:	4b34      	ldr	r3, [pc, #208]	; (8009e10 <G_q+0x7848>)
 8009d40:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009d44:	443a      	add	r2, r7
 8009d46:	4413      	add	r3, r2
 8009d48:	ed93 7b00 	vldr	d7, [r3]
 8009d4c:	eeb1 6b47 	vneg.f64	d6, d7
 8009d50:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009d54:	ed93 7b00 	vldr	d7, [r3]
 8009d58:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8009de8 <G_q+0x7820>
 8009d5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8009d60:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 8009d64:	ed93 7b02 	vldr	d7, [r3, #8]
 8009d68:	ed9f 4b1d 	vldr	d4, [pc, #116]	; 8009de0 <G_q+0x7818>
 8009d6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d70:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009d74:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009d78:	ed93 7b00 	vldr	d7, [r3]
 8009d7c:	ed9f 4b22 	vldr	d4, [pc, #136]	; 8009e08 <G_q+0x7840>
 8009d80:	ee27 4b04 	vmul.f64	d4, d7, d4
 8009d84:	f507 634c 	add.w	r3, r7, #3264	; 0xcc0
 8009d88:	ed93 7b02 	vldr	d7, [r3, #8]
 8009d8c:	ed9f 3b14 	vldr	d3, [pc, #80]	; 8009de0 <G_q+0x7818>
 8009d90:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d94:	ee34 7b07 	vadd.f64	d7, d4, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009d98:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009d9c:	f241 2390 	movw	r3, #4752	; 0x1290
 8009da0:	443b      	add	r3, r7
 8009da2:	f241 32c8 	movw	r2, #5064	; 0x13c8
 8009da6:	443a      	add	r2, r7
 8009da8:	ed92 4b00 	vldr	d4, [r2]
 8009dac:	ed93 7b00 	vldr	d7, [r3]
 8009db0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009db4:	f241 2398 	movw	r3, #4760	; 0x1298
 8009db8:	443b      	add	r3, r7
 8009dba:	f507 529e 	add.w	r2, r7, #5056	; 0x13c0
 8009dbe:	ed92 3b00 	vldr	d3, [r2]
 8009dc2:	ed93 7b00 	vldr	d7, [r3]
 8009dc6:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009dca:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009dce:	e023      	b.n	8009e18 <G_q+0x7850>
 8009dd0:	858a5d48 	.word	0x858a5d48
 8009dd4:	393377ce 	.word	0x393377ce
	...
 8009de0:	2b020c4a 	.word	0x2b020c4a
 8009de4:	3fc11687 	.word	0x3fc11687
 8009de8:	558ec760 	.word	0x558ec760
 8009dec:	3c5621c2 	.word	0x3c5621c2
 8009df0:	75f6fd22 	.word	0x75f6fd22
 8009df4:	3fc19ce0 	.word	0x3fc19ce0
 8009df8:	9374bc6a 	.word	0x9374bc6a
 8009dfc:	3f960418 	.word	0x3f960418
 8009e00:	2ba953a1 	.word	0x2ba953a1
 8009e04:	3c3848f9 	.word	0x3c3848f9
 8009e08:	558ec760 	.word	0x558ec760
 8009e0c:	bc5621c2 	.word	0xbc5621c2
 8009e10:	ffffec58 	.word	0xffffec58
 8009e14:	ffffec34 	.word	0xffffec34
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009e18:	ed9f 4ba1 	vldr	d4, [pc, #644]	; 800a0a0 <G_q+0x7ad8>
 8009e1c:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t83.re * -4.7990846441586913E-18 + t83.im * 0.1335)) + (t33_re * t35_im +
 8009e20:	ee35 5b07 	vadd.f64	d5, d5, d7
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009e24:	f507 5394 	add.w	r3, r7, #4736	; 0x1280
 8009e28:	f241 32a8 	movw	r2, #5032	; 0x13a8
 8009e2c:	443a      	add	r2, r7
 8009e2e:	ed92 4b00 	vldr	d4, [r2]
 8009e32:	ed93 7b00 	vldr	d7, [r3]
 8009e36:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009e3a:	f241 2388 	movw	r3, #4744	; 0x1288
 8009e3e:	443b      	add	r3, r7
 8009e40:	f507 529d 	add.w	r2, r7, #5024	; 0x13a0
 8009e44:	ed92 3b00 	vldr	d3, [r2]
 8009e48:	ed93 7b00 	vldr	d7, [r3]
 8009e4c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009e50:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009e54:	ed9f 4b92 	vldr	d4, [pc, #584]	; 800a0a0 <G_q+0x7ad8>
 8009e58:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e5c:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009e60:	f241 3328 	movw	r3, #4904	; 0x1328
 8009e64:	443b      	add	r3, r7
 8009e66:	ed93 4b00 	vldr	d4, [r3]
 8009e6a:	f241 3390 	movw	r3, #5008	; 0x1390
 8009e6e:	443b      	add	r3, r7
 8009e70:	ed93 7b00 	vldr	d7, [r3]
 8009e74:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009e78:	f241 2378 	movw	r3, #4728	; 0x1278
 8009e7c:	443b      	add	r3, r7
 8009e7e:	ed93 3b00 	vldr	d3, [r3]
 8009e82:	f241 3398 	movw	r3, #5016	; 0x1398
 8009e86:	443b      	add	r3, r7
 8009e88:	ed93 7b00 	vldr	d7, [r3]
 8009e8c:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009e90:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009e94:	ed9f 4b84 	vldr	d4, [pc, #528]	; 800a0a8 <G_q+0x7ae0>
 8009e98:	ee27 7b04 	vmul.f64	d7, d7, d4
    t33_im * t35_re) * 0.1376) - (t37_re * t39_im + t37_im * t39_re) * 0.1376) -
 8009e9c:	ee35 5b47 	vsub.f64	d5, d5, d7
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009ea0:	f241 3358 	movw	r3, #4952	; 0x1358
 8009ea4:	443b      	add	r3, r7
 8009ea6:	ed93 4b00 	vldr	d4, [r3]
 8009eaa:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009eae:	ed93 7b00 	vldr	d7, [r3]
 8009eb2:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009eb6:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 8009eba:	f241 3250 	movw	r2, #4944	; 0x1350
 8009ebe:	443a      	add	r2, r7
 8009ec0:	ed92 3b00 	vldr	d3, [r2]
 8009ec4:	ed93 7b00 	vldr	d7, [r3]
 8009ec8:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009ecc:	ee34 7b07 	vadd.f64	d7, d4, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009ed0:	ed9f 4b77 	vldr	d4, [pc, #476]	; 800a0b0 <G_q+0x7ae8>
 8009ed4:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t54_re * t10_im + t54_im * t10_re) * 0.0215) + (t19_re * t8_im + t19_im *
 8009ed8:	ee35 5b07 	vadd.f64	d5, d5, d7
    t8_re) * 1.3164953090834051E-18) - (t41_re * t43_im + t41_im * t43_re) *
 8009edc:	f241 3308 	movw	r3, #4872	; 0x1308
 8009ee0:	443b      	add	r3, r7
 8009ee2:	ed93 4b00 	vldr	d4, [r3]
 8009ee6:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8009eea:	443b      	add	r3, r7
 8009eec:	ed93 7b00 	vldr	d7, [r3]
 8009ef0:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009ef4:	f241 2358 	movw	r3, #4696	; 0x1258
 8009ef8:	443b      	add	r3, r7
 8009efa:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 8009efe:	ed92 3b00 	vldr	d3, [r2]
 8009f02:	ed93 7b00 	vldr	d7, [r3]
 8009f06:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009f0a:	ee34 7b07 	vadd.f64	d7, d4, d7
 8009f0e:	ed9f 4b68 	vldr	d4, [pc, #416]	; 800a0b0 <G_q+0x7ae8>
 8009f12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009f16:	ee35 5b47 	vsub.f64	d5, d5, d7
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009f1a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 8009f1e:	443b      	add	r3, r7
 8009f20:	ed93 4b00 	vldr	d4, [r3]
 8009f24:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8009f28:	443b      	add	r3, r7
 8009f2a:	ed93 7b00 	vldr	d7, [r3]
 8009f2e:	ee24 4b07 	vmul.f64	d4, d4, d7
 8009f32:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8009f36:	443b      	add	r3, r7
 8009f38:	ed93 3b00 	vldr	d3, [r3]
 8009f3c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8009f40:	443b      	add	r3, r7
 8009f42:	ed93 7b00 	vldr	d7, [r3]
 8009f46:	ee23 7b07 	vmul.f64	d7, d3, d7
 8009f4a:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_im) * 0.0215);
 8009f4e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a0a8 <G_q+0x7ae0>
 8009f52:	ee27 7b04 	vmul.f64	d7, d7, d4
                       1.3164953090834051E-18) + (b_t54_re * t34_re + b_t54_im *
 8009f56:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[1].im = -g * ((((((((t3.re * 4.7990846441586913E-18 + t3.im * 0.1335) +
 8009f5a:	4b57      	ldr	r3, [pc, #348]	; (800a0b8 <G_q+0x7af0>)
 8009f5c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8009f60:	443a      	add	r2, r7
 8009f62:	4413      	add	r3, r2
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	3310      	adds	r3, #16
 8009f68:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009f6c:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t154.im == 0.0) {
 8009f70:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009f74:	ed93 7b02 	vldr	d7, [r3, #8]
 8009f78:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f80:	d115      	bne.n	8009fae <G_q+0x79e6>
    t8_im = t154.re / 2.0;
 8009f82:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009f86:	ed93 6b00 	vldr	d6, [r3]
 8009f8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009f8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009f92:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 8009f96:	ed83 7b00 	vstr	d7, [r3]
    t54_re = 0.0;
 8009f9a:	f04f 0300 	mov.w	r3, #0
 8009f9e:	f04f 0400 	mov.w	r4, #0
 8009fa2:	f241 3228 	movw	r2, #4904	; 0x1328
 8009fa6:	443a      	add	r2, r7
 8009fa8:	e9c2 3400 	strd	r3, r4, [r2]
 8009fac:	e037      	b.n	800a01e <G_q+0x7a56>
  } else if (t154.re == 0.0) {
 8009fae:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009fb2:	ed93 7b00 	vldr	d7, [r3]
 8009fb6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbe:	d115      	bne.n	8009fec <G_q+0x7a24>
    t8_im = 0.0;
 8009fc0:	f04f 0300 	mov.w	r3, #0
 8009fc4:	f04f 0400 	mov.w	r4, #0
 8009fc8:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 8009fcc:	e9c2 3400 	strd	r3, r4, [r2]
    t54_re = t154.im / 2.0;
 8009fd0:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009fd4:	ed93 6b02 	vldr	d6, [r3, #8]
 8009fd8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009fdc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009fe0:	f241 3328 	movw	r3, #4904	; 0x1328
 8009fe4:	443b      	add	r3, r7
 8009fe6:	ed83 7b00 	vstr	d7, [r3]
 8009fea:	e018      	b.n	800a01e <G_q+0x7a56>
  } else {
    t8_im = t154.re / 2.0;
 8009fec:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 8009ff0:	ed93 6b00 	vldr	d6, [r3]
 8009ff4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8009ff8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8009ffc:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a000:	ed83 7b00 	vstr	d7, [r3]
    t54_re = t154.im / 2.0;
 800a004:	f507 63e2 	add.w	r3, r7, #1808	; 0x710
 800a008:	ed93 6b02 	vldr	d6, [r3, #8]
 800a00c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a010:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a014:	f241 3328 	movw	r3, #4904	; 0x1328
 800a018:	443b      	add	r3, r7
 800a01a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t155.im == 0.0) {
 800a01e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a022:	ed93 7b02 	vldr	d7, [r3, #8]
 800a026:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a02a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a02e:	d116      	bne.n	800a05e <G_q+0x7a96>
    t34_re = t155.re / 2.0;
 800a030:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a034:	ed93 6b00 	vldr	d6, [r3]
 800a038:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a03c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a040:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a044:	443b      	add	r3, r7
 800a046:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a04a:	f04f 0300 	mov.w	r3, #0
 800a04e:	f04f 0400 	mov.w	r4, #0
 800a052:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a056:	443a      	add	r2, r7
 800a058:	e9c2 3400 	strd	r3, r4, [r2]
 800a05c:	e048      	b.n	800a0f0 <G_q+0x7b28>
  } else if (t155.re == 0.0) {
 800a05e:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a062:	ed93 7b00 	vldr	d7, [r3]
 800a066:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a06e:	d125      	bne.n	800a0bc <G_q+0x7af4>
    t34_re = 0.0;
 800a070:	f04f 0300 	mov.w	r3, #0
 800a074:	f04f 0400 	mov.w	r4, #0
 800a078:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a07c:	443a      	add	r2, r7
 800a07e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t155.im / 2.0;
 800a082:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a086:	ed93 6b02 	vldr	d6, [r3, #8]
 800a08a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a08e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a092:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a096:	443b      	add	r3, r7
 800a098:	ed83 7b00 	vstr	d7, [r3]
 800a09c:	e028      	b.n	800a0f0 <G_q+0x7b28>
 800a09e:	bf00      	nop
 800a0a0:	75f6fd22 	.word	0x75f6fd22
 800a0a4:	3fc19ce0 	.word	0x3fc19ce0
 800a0a8:	9374bc6a 	.word	0x9374bc6a
 800a0ac:	3f960418 	.word	0x3f960418
 800a0b0:	2ba953a1 	.word	0x2ba953a1
 800a0b4:	3c3848f9 	.word	0x3c3848f9
 800a0b8:	ffffec34 	.word	0xffffec34
  } else {
    t34_re = t155.re / 2.0;
 800a0bc:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a0c0:	ed93 6b00 	vldr	d6, [r3]
 800a0c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0cc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a0d0:	443b      	add	r3, r7
 800a0d2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t155.im / 2.0;
 800a0d6:	f507 63e4 	add.w	r3, r7, #1824	; 0x720
 800a0da:	ed93 6b02 	vldr	d6, [r3, #8]
 800a0de:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a0e2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a0e6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a0ea:	443b      	add	r3, r7
 800a0ec:	ed83 7b00 	vstr	d7, [r3]
  }

  t8_im += t34_re;
 800a0f0:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a0f4:	ed93 6b00 	vldr	d6, [r3]
 800a0f8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a0fc:	443b      	add	r3, r7
 800a0fe:	ed93 7b00 	vldr	d7, [r3]
 800a102:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a106:	f507 5399 	add.w	r3, r7, #4896	; 0x1320
 800a10a:	ed83 7b00 	vstr	d7, [r3]
  t54_re += t34_im;
 800a10e:	f241 3328 	movw	r3, #4904	; 0x1328
 800a112:	443b      	add	r3, r7
 800a114:	ed93 6b00 	vldr	d6, [r3]
 800a118:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a11c:	443b      	add	r3, r7
 800a11e:	ed93 7b00 	vldr	d7, [r3]
 800a122:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a126:	f241 3328 	movw	r3, #4904	; 0x1328
 800a12a:	443b      	add	r3, r7
 800a12c:	ed83 7b00 	vstr	d7, [r3]
  t19_re_tmp = (t156.re * 0.0 - t156.im * 0.5) - (t157.re * 0.0 - t157.im * 0.5);
 800a130:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a134:	ed93 7b00 	vldr	d7, [r3]
 800a138:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 800a420 <G_q+0x7e58>
 800a13c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a140:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a144:	ed93 7b02 	vldr	d7, [r3, #8]
 800a148:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a14c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a150:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a154:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a158:	ed93 7b00 	vldr	d7, [r3]
 800a15c:	ed9f 5bb0 	vldr	d5, [pc, #704]	; 800a420 <G_q+0x7e58>
 800a160:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a164:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a168:	ed93 7b02 	vldr	d7, [r3, #8]
 800a16c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a170:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a174:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a178:	f241 2370 	movw	r3, #4720	; 0x1270
 800a17c:	443b      	add	r3, r7
 800a17e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a182:	ed83 7b00 	vstr	d7, [r3]
  t19_im_tmp = (t156.re * 0.5 + t156.im * 0.0) - (t157.re * 0.5 + t157.im * 0.0);
 800a186:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a18a:	ed93 7b00 	vldr	d7, [r3]
 800a18e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a192:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a196:	f507 6365 	add.w	r3, r7, #3664	; 0xe50
 800a19a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a19e:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800a420 <G_q+0x7e58>
 800a1a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a1a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a1aa:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a1ae:	ed93 7b00 	vldr	d7, [r3]
 800a1b2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a1b6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a1ba:	f507 6366 	add.w	r3, r7, #3680	; 0xe60
 800a1be:	ed93 7b02 	vldr	d7, [r3, #8]
 800a1c2:	ed9f 4b97 	vldr	d4, [pc, #604]	; 800a420 <G_q+0x7e58>
 800a1c6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a1ca:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a1ce:	f241 2368 	movw	r3, #4712	; 0x1268
 800a1d2:	443b      	add	r3, r7
 800a1d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a1d8:	ed83 7b00 	vstr	d7, [r3]
  t41_im = t98.re * 3.061616997868383E-17 + t99.re * 3.061616997868383E-17;
 800a1dc:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a1e0:	ed93 7b00 	vldr	d7, [r3]
 800a1e4:	ed9f 6b8a 	vldr	d6, [pc, #552]	; 800a410 <G_q+0x7e48>
 800a1e8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a1ec:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a1f0:	ed93 7b00 	vldr	d7, [r3]
 800a1f4:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800a410 <G_q+0x7e48>
 800a1f8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a1fc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a200:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a204:	ed83 7b00 	vstr	d7, [r3]
  t8_re = t98.im * 3.061616997868383E-17 + t99.im * 3.061616997868383E-17;
 800a208:	f507 63b6 	add.w	r3, r7, #1456	; 0x5b0
 800a20c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a210:	ed9f 6b7f 	vldr	d6, [pc, #508]	; 800a410 <G_q+0x7e48>
 800a214:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a218:	f507 63b8 	add.w	r3, r7, #1472	; 0x5c0
 800a21c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a220:	ed9f 5b7b 	vldr	d5, [pc, #492]	; 800a410 <G_q+0x7e48>
 800a224:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a228:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a22c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a230:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t96.re * 0.0 - t96.im * 0.5) - (t97.re * 0.0 - t97.im * 0.5);
 800a234:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a238:	ed93 7b00 	vldr	d7, [r3]
 800a23c:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800a420 <G_q+0x7e58>
 800a240:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a244:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a248:	ed93 7b02 	vldr	d7, [r3, #8]
 800a24c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a250:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a254:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a258:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a25c:	ed93 7b00 	vldr	d7, [r3]
 800a260:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800a420 <G_q+0x7e58>
 800a264:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a268:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a26c:	ed93 7b02 	vldr	d7, [r3, #8]
 800a270:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a274:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a278:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a27c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a280:	f241 3378 	movw	r3, #4984	; 0x1378
 800a284:	443b      	add	r3, r7
 800a286:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t96.re * 0.5 + t96.im * 0.0) - (t97.re * 0.5 + t97.im * 0.0);
 800a28a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a28e:	ed93 7b00 	vldr	d7, [r3]
 800a292:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a296:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a29a:	f507 634f 	add.w	r3, r7, #3312	; 0xcf0
 800a29e:	ed93 7b02 	vldr	d7, [r3, #8]
 800a2a2:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 800a420 <G_q+0x7e58>
 800a2a6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a2aa:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a2ae:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a2b2:	ed93 7b00 	vldr	d7, [r3]
 800a2b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a2ba:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a2be:	f507 6350 	add.w	r3, r7, #3328	; 0xd00
 800a2c2:	ed93 7b02 	vldr	d7, [r3, #8]
 800a2c6:	ed9f 4b56 	vldr	d4, [pc, #344]	; 800a420 <G_q+0x7e58>
 800a2ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a2ce:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a2d2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a2d6:	f241 3370 	movw	r3, #4976	; 0x1370
 800a2da:	443b      	add	r3, r7
 800a2dc:	ed83 7b00 	vstr	d7, [r3]
  if (t94.im == 0.0) {
 800a2e0:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a2e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a2e8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a2ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f0:	d115      	bne.n	800a31e <G_q+0x7d56>
    t16_re = t94.re / 2.0;
 800a2f2:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a2f6:	ed93 6b00 	vldr	d6, [r3]
 800a2fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a2fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a302:	f241 3368 	movw	r3, #4968	; 0x1368
 800a306:	443b      	add	r3, r7
 800a308:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800a30c:	f04f 0300 	mov.w	r3, #0
 800a310:	f04f 0400 	mov.w	r4, #0
 800a314:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800a318:	e9c2 3400 	strd	r3, r4, [r2]
 800a31c:	e037      	b.n	800a38e <G_q+0x7dc6>
  } else if (t94.re == 0.0) {
 800a31e:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a322:	ed93 7b00 	vldr	d7, [r3]
 800a326:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a32a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a32e:	d115      	bne.n	800a35c <G_q+0x7d94>
    t16_re = 0.0;
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	f04f 0400 	mov.w	r4, #0
 800a338:	f241 3268 	movw	r2, #4968	; 0x1368
 800a33c:	443a      	add	r2, r7
 800a33e:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t94.im / 2.0;
 800a342:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a346:	ed93 6b02 	vldr	d6, [r3, #8]
 800a34a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a34e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a352:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a356:	ed83 7b00 	vstr	d7, [r3]
 800a35a:	e018      	b.n	800a38e <G_q+0x7dc6>
  } else {
    t16_re = t94.re / 2.0;
 800a35c:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a360:	ed93 6b00 	vldr	d6, [r3]
 800a364:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a368:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a36c:	f241 3368 	movw	r3, #4968	; 0x1368
 800a370:	443b      	add	r3, r7
 800a372:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t94.im / 2.0;
 800a376:	f507 634d 	add.w	r3, r7, #3280	; 0xcd0
 800a37a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a37e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a382:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a386:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a38a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t95.im == 0.0) {
 800a38e:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a392:	ed93 7b02 	vldr	d7, [r3, #8]
 800a396:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a39e:	d116      	bne.n	800a3ce <G_q+0x7e06>
    t34_re = t95.re / 2.0;
 800a3a0:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a3a4:	ed93 6b00 	vldr	d6, [r3]
 800a3a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a3b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a3b4:	443b      	add	r3, r7
 800a3b6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a3ba:	f04f 0300 	mov.w	r3, #0
 800a3be:	f04f 0400 	mov.w	r4, #0
 800a3c2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a3c6:	443a      	add	r2, r7
 800a3c8:	e9c2 3400 	strd	r3, r4, [r2]
 800a3cc:	e046      	b.n	800a45c <G_q+0x7e94>
  } else if (t95.re == 0.0) {
 800a3ce:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a3d2:	ed93 7b00 	vldr	d7, [r3]
 800a3d6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a3da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3de:	d123      	bne.n	800a428 <G_q+0x7e60>
    t34_re = 0.0;
 800a3e0:	f04f 0300 	mov.w	r3, #0
 800a3e4:	f04f 0400 	mov.w	r4, #0
 800a3e8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a3ec:	443a      	add	r2, r7
 800a3ee:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t95.im / 2.0;
 800a3f2:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a3f6:	ed93 6b02 	vldr	d6, [r3, #8]
 800a3fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a3fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a402:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a406:	443b      	add	r3, r7
 800a408:	ed83 7b00 	vstr	d7, [r3]
 800a40c:	e026      	b.n	800a45c <G_q+0x7e94>
 800a40e:	bf00      	nop
 800a410:	33145c07 	.word	0x33145c07
 800a414:	3c81a626 	.word	0x3c81a626
 800a418:	858a5d48 	.word	0x858a5d48
 800a41c:	394377ce 	.word	0x394377ce
	...
  } else {
    t34_re = t95.re / 2.0;
 800a428:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a42c:	ed93 6b00 	vldr	d6, [r3]
 800a430:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a434:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a438:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a43c:	443b      	add	r3, r7
 800a43e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t95.im / 2.0;
 800a442:	f507 634e 	add.w	r3, r7, #3296	; 0xce0
 800a446:	ed93 6b02 	vldr	d6, [r3, #8]
 800a44a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a44e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a452:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a456:	443b      	add	r3, r7
 800a458:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a45c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a460:	ed93 7b00 	vldr	d7, [r3]
 800a464:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 800a420 <G_q+0x7e58>
 800a468:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a46c:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a470:	ed93 7b02 	vldr	d7, [r3, #8]
 800a474:	ed1f 5b1a 	vldr	d5, [pc, #-104]	; 800a410 <G_q+0x7e48>
 800a478:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a47c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a480:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a484:	ed93 7b00 	vldr	d7, [r3]
 800a488:	ed1f 5b1b 	vldr	d5, [pc, #-108]	; 800a420 <G_q+0x7e58>
 800a48c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t93.im * 3.061616997868383E-17);
 800a490:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a494:	ed93 7b02 	vldr	d7, [r3, #8]
 800a498:	ed1f 4b23 	vldr	d4, [pc, #-140]	; 800a410 <G_q+0x7e48>
 800a49c:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_re = (t92.re * 0.0 - t92.im * 3.061616997868383E-17) - (t93.re * 0.0 -
 800a4a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a4a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a4a8:	f241 3348 	movw	r3, #4936	; 0x1348
 800a4ac:	443b      	add	r3, r7
 800a4ae:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a4b2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a4b6:	ed93 7b00 	vldr	d7, [r3]
 800a4ba:	ed1f 6b2b 	vldr	d6, [pc, #-172]	; 800a410 <G_q+0x7e48>
 800a4be:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a4c2:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 800a4c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4ca:	ed1f 5b2b 	vldr	d5, [pc, #-172]	; 800a420 <G_q+0x7e58>
 800a4ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a4d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a4d6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a4da:	ed93 7b00 	vldr	d7, [r3]
 800a4de:	ed1f 5b34 	vldr	d5, [pc, #-208]	; 800a410 <G_q+0x7e48>
 800a4e2:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t93.im * 0.0);
 800a4e6:	f507 63b4 	add.w	r3, r7, #1440	; 0x5a0
 800a4ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800a4ee:	ed1f 4b34 	vldr	d4, [pc, #-208]	; 800a420 <G_q+0x7e58>
 800a4f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a4f6:	ee35 7b07 	vadd.f64	d7, d5, d7
  t20_im = (t92.re * 3.061616997868383E-17 + t92.im * 0.0) - (t93.re *
 800a4fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a4fe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a502:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800a506:	f241 3368 	movw	r3, #4968	; 0x1368
 800a50a:	443b      	add	r3, r7
 800a50c:	ed93 6b00 	vldr	d6, [r3]
 800a510:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a514:	443b      	add	r3, r7
 800a516:	ed93 7b00 	vldr	d7, [r3]
 800a51a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a51e:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800a418 <G_q+0x7e50>
 800a522:	ee37 7b06 	vadd.f64	d7, d7, d6
 800a526:	f241 3368 	movw	r3, #4968	; 0x1368
 800a52a:	443b      	add	r3, r7
 800a52c:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800a530:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a534:	ed93 6b00 	vldr	d6, [r3]
 800a538:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a53c:	443b      	add	r3, r7
 800a53e:	ed93 7b00 	vldr	d7, [r3]
 800a542:	ee36 7b07 	vadd.f64	d7, d6, d7
 800a546:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a54a:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t41_im * t13_re - t8_re * t13_im) - (t20_re * t16_re - t20_im *
 800a54e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a552:	ed93 6b00 	vldr	d6, [r3]
 800a556:	f241 3378 	movw	r3, #4984	; 0x1378
 800a55a:	443b      	add	r3, r7
 800a55c:	ed93 7b00 	vldr	d7, [r3]
 800a560:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a564:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a568:	ed93 5b00 	vldr	d5, [r3]
 800a56c:	f241 3370 	movw	r3, #4976	; 0x1370
 800a570:	443b      	add	r3, r7
 800a572:	ed93 7b00 	vldr	d7, [r3]
 800a576:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a57a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a57e:	f241 3348 	movw	r3, #4936	; 0x1348
 800a582:	443b      	add	r3, r7
 800a584:	ed93 5b00 	vldr	d5, [r3]
 800a588:	f241 3368 	movw	r3, #4968	; 0x1368
 800a58c:	443b      	add	r3, r7
 800a58e:	ed93 7b00 	vldr	d7, [r3]
 800a592:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a596:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a59a:	ed93 4b00 	vldr	d4, [r3]
 800a59e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a5a2:	ed93 7b00 	vldr	d7, [r3]
 800a5a6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a5aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a5ae:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800a5b2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a5b6:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t8_re = (t41_im * t13_im + t8_re * t13_re) - (t20_re * t16_im + t20_im *
 800a5ba:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800a5be:	ed93 6b00 	vldr	d6, [r3]
 800a5c2:	f241 3370 	movw	r3, #4976	; 0x1370
 800a5c6:	443b      	add	r3, r7
 800a5c8:	ed93 7b00 	vldr	d7, [r3]
 800a5cc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800a5d0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a5d4:	ed93 5b00 	vldr	d5, [r3]
 800a5d8:	f241 3378 	movw	r3, #4984	; 0x1378
 800a5dc:	443b      	add	r3, r7
 800a5de:	ed93 7b00 	vldr	d7, [r3]
 800a5e2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800a5e6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a5ea:	f241 3348 	movw	r3, #4936	; 0x1348
 800a5ee:	443b      	add	r3, r7
 800a5f0:	ed93 5b00 	vldr	d5, [r3]
 800a5f4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800a5f8:	ed93 7b00 	vldr	d7, [r3]
 800a5fc:	ee25 5b07 	vmul.f64	d5, d5, d7
 800a600:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a604:	ed93 4b00 	vldr	d4, [r3]
 800a608:	f241 3368 	movw	r3, #4968	; 0x1368
 800a60c:	443b      	add	r3, r7
 800a60e:	ed93 7b00 	vldr	d7, [r3]
 800a612:	ee24 7b07 	vmul.f64	d7, d4, d7
 800a616:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a61a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800a61e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a622:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t58_im = (t100.re * 0.0 - t100.im * 0.5) - (t101.re * 0.0 - t101.im * 0.5);
 800a626:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a62a:	ed93 7b00 	vldr	d7, [r3]
 800a62e:	ed1f 6b84 	vldr	d6, [pc, #-528]	; 800a420 <G_q+0x7e58>
 800a632:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a636:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a63a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a63e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a642:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a646:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a64a:	4be7      	ldr	r3, [pc, #924]	; (800a9e8 <G_q+0x8420>)
 800a64c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a650:	443a      	add	r2, r7
 800a652:	4413      	add	r3, r2
 800a654:	ed93 7b00 	vldr	d7, [r3]
 800a658:	ed9f 5be1 	vldr	d5, [pc, #900]	; 800a9e0 <G_q+0x8418>
 800a65c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a660:	4be1      	ldr	r3, [pc, #900]	; (800a9e8 <G_q+0x8420>)
 800a662:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a666:	443a      	add	r2, r7
 800a668:	4413      	add	r3, r2
 800a66a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a66e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a672:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a676:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a67a:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800a67e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a682:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t100.re * 0.5 + t100.im * 0.0) - (t101.re * 0.5 + t101.im * 0.0);
 800a686:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a68a:	ed93 7b00 	vldr	d7, [r3]
 800a68e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a692:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a696:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800a69a:	ed93 7b02 	vldr	d7, [r3, #8]
 800a69e:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800a9e0 <G_q+0x8418>
 800a6a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a6a6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a6aa:	4bcf      	ldr	r3, [pc, #828]	; (800a9e8 <G_q+0x8420>)
 800a6ac:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a6b0:	443a      	add	r2, r7
 800a6b2:	4413      	add	r3, r2
 800a6b4:	ed93 7b00 	vldr	d7, [r3]
 800a6b8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a6bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a6c0:	4bc9      	ldr	r3, [pc, #804]	; (800a9e8 <G_q+0x8420>)
 800a6c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800a6c6:	443a      	add	r2, r7
 800a6c8:	4413      	add	r3, r2
 800a6ca:	ed93 7b02 	vldr	d7, [r3, #8]
 800a6ce:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800a9e0 <G_q+0x8418>
 800a6d2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a6d6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a6da:	f241 2350 	movw	r3, #4688	; 0x1250
 800a6de:	443b      	add	r3, r7
 800a6e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a6e4:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t104.re * 0.0 - t104.im * 0.5) - (t105.re * 0.0 - t105.im * 0.5);
 800a6e8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a6ec:	ed93 7b00 	vldr	d7, [r3]
 800a6f0:	ed9f 6bbb 	vldr	d6, [pc, #748]	; 800a9e0 <G_q+0x8418>
 800a6f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a6f8:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a6fc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a700:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a704:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a708:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a70c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a710:	ed93 7b00 	vldr	d7, [r3]
 800a714:	ed9f 5bb2 	vldr	d5, [pc, #712]	; 800a9e0 <G_q+0x8418>
 800a718:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a71c:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a720:	ed93 7b02 	vldr	d7, [r3, #8]
 800a724:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a728:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a72c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a730:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a734:	f241 3370 	movw	r3, #4976	; 0x1370
 800a738:	443b      	add	r3, r7
 800a73a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t104.re * 0.5 + t104.im * 0.0) - (t105.re * 0.5 + t105.im * 0.0);
 800a73e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a742:	ed93 7b00 	vldr	d7, [r3]
 800a746:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a74a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a74e:	f507 6351 	add.w	r3, r7, #3344	; 0xd10
 800a752:	ed93 7b02 	vldr	d7, [r3, #8]
 800a756:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800a9e0 <G_q+0x8418>
 800a75a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a75e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a762:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a766:	ed93 7b00 	vldr	d7, [r3]
 800a76a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a76e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a772:	f507 6352 	add.w	r3, r7, #3360	; 0xd20
 800a776:	ed93 7b02 	vldr	d7, [r3, #8]
 800a77a:	ed9f 4b99 	vldr	d4, [pc, #612]	; 800a9e0 <G_q+0x8418>
 800a77e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a782:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a786:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800a78a:	443b      	add	r3, r7
 800a78c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a790:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t106.re * 0.0 - t106.im * 0.5) - (t107.re * 0.0 - t107.im * 0.5);
 800a794:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a798:	ed93 7b00 	vldr	d7, [r3]
 800a79c:	ed9f 6b90 	vldr	d6, [pc, #576]	; 800a9e0 <G_q+0x8418>
 800a7a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a7a4:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a7a8:	ed93 7b02 	vldr	d7, [r3, #8]
 800a7ac:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a7b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a7b4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800a7b8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a7bc:	ed93 7b00 	vldr	d7, [r3]
 800a7c0:	ed9f 5b87 	vldr	d5, [pc, #540]	; 800a9e0 <G_q+0x8418>
 800a7c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a7c8:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a7cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800a7d0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800a7d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a7d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800a7dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a7e0:	f241 3348 	movw	r3, #4936	; 0x1348
 800a7e4:	443b      	add	r3, r7
 800a7e6:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t106.re * 0.5 + t106.im * 0.0) - (t107.re * 0.5 + t107.im * 0.0);
 800a7ea:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a7ee:	ed93 7b00 	vldr	d7, [r3]
 800a7f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a7f6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800a7fa:	f507 63ba 	add.w	r3, r7, #1488	; 0x5d0
 800a7fe:	ed93 7b02 	vldr	d7, [r3, #8]
 800a802:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800a9e0 <G_q+0x8418>
 800a806:	ee27 7b05 	vmul.f64	d7, d7, d5
 800a80a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800a80e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a812:	ed93 7b00 	vldr	d7, [r3]
 800a816:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a81a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800a81e:	f507 63bc 	add.w	r3, r7, #1504	; 0x5e0
 800a822:	ed93 7b02 	vldr	d7, [r3, #8]
 800a826:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800a9e0 <G_q+0x8418>
 800a82a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800a82e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800a832:	ee36 7b47 	vsub.f64	d7, d6, d7
 800a836:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800a83a:	ed83 7b00 	vstr	d7, [r3]
  if (t108.im == 0.0) {
 800a83e:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a842:	ed93 7b02 	vldr	d7, [r3, #8]
 800a846:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a84a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a84e:	d115      	bne.n	800a87c <G_q+0x82b4>
    t12_re = t108.re / 2.0;
 800a850:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a854:	ed93 6b00 	vldr	d6, [r3]
 800a858:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a85c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a860:	f241 3388 	movw	r3, #5000	; 0x1388
 800a864:	443b      	add	r3, r7
 800a866:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800a86a:	f04f 0300 	mov.w	r3, #0
 800a86e:	f04f 0400 	mov.w	r4, #0
 800a872:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800a876:	e9c2 3400 	strd	r3, r4, [r2]
 800a87a:	e037      	b.n	800a8ec <G_q+0x8324>
  } else if (t108.re == 0.0) {
 800a87c:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a880:	ed93 7b00 	vldr	d7, [r3]
 800a884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a88c:	d115      	bne.n	800a8ba <G_q+0x82f2>
    t12_re = 0.0;
 800a88e:	f04f 0300 	mov.w	r3, #0
 800a892:	f04f 0400 	mov.w	r4, #0
 800a896:	f241 3288 	movw	r2, #5000	; 0x1388
 800a89a:	443a      	add	r2, r7
 800a89c:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t108.im / 2.0;
 800a8a0:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a8a4:	ed93 6b02 	vldr	d6, [r3, #8]
 800a8a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a8ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a8b0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a8b4:	ed83 7b00 	vstr	d7, [r3]
 800a8b8:	e018      	b.n	800a8ec <G_q+0x8324>
  } else {
    t12_re = t108.re / 2.0;
 800a8ba:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a8be:	ed93 6b00 	vldr	d6, [r3]
 800a8c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a8c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a8ca:	f241 3388 	movw	r3, #5000	; 0x1388
 800a8ce:	443b      	add	r3, r7
 800a8d0:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t108.im / 2.0;
 800a8d4:	f507 63be 	add.w	r3, r7, #1520	; 0x5f0
 800a8d8:	ed93 6b02 	vldr	d6, [r3, #8]
 800a8dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a8e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a8e4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800a8e8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t109.im == 0.0) {
 800a8ec:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a8f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800a8f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8fc:	d116      	bne.n	800a92c <G_q+0x8364>
    t34_re = t109.re / 2.0;
 800a8fe:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a902:	ed93 6b00 	vldr	d6, [r3]
 800a906:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a90a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a90e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a912:	443b      	add	r3, r7
 800a914:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800a918:	f04f 0300 	mov.w	r3, #0
 800a91c:	f04f 0400 	mov.w	r4, #0
 800a920:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800a924:	443a      	add	r2, r7
 800a926:	e9c2 3400 	strd	r3, r4, [r2]
 800a92a:	e039      	b.n	800a9a0 <G_q+0x83d8>
  } else if (t109.re == 0.0) {
 800a92c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a930:	ed93 7b00 	vldr	d7, [r3]
 800a934:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93c:	d116      	bne.n	800a96c <G_q+0x83a4>
    t34_re = 0.0;
 800a93e:	f04f 0300 	mov.w	r3, #0
 800a942:	f04f 0400 	mov.w	r4, #0
 800a946:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800a94a:	443a      	add	r2, r7
 800a94c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t109.im / 2.0;
 800a950:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a954:	ed93 6b02 	vldr	d6, [r3, #8]
 800a958:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a95c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a960:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a964:	443b      	add	r3, r7
 800a966:	ed83 7b00 	vstr	d7, [r3]
 800a96a:	e019      	b.n	800a9a0 <G_q+0x83d8>
  } else {
    t34_re = t109.re / 2.0;
 800a96c:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a970:	ed93 6b00 	vldr	d6, [r3]
 800a974:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a978:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a97c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800a980:	443b      	add	r3, r7
 800a982:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t109.im / 2.0;
 800a986:	f507 63c0 	add.w	r3, r7, #1536	; 0x600
 800a98a:	ed93 6b02 	vldr	d6, [r3, #8]
 800a98e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a992:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a996:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800a99a:	443b      	add	r3, r7
 800a99c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t110.im == 0.0) {
 800a9a0:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a9a4:	ed93 7b02 	vldr	d7, [r3, #8]
 800a9a8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9b0:	d11c      	bne.n	800a9ec <G_q+0x8424>
    b_t10_re = t110.re / 2.0;
 800a9b2:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a9b6:	ed93 6b00 	vldr	d6, [r3]
 800a9ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800a9be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a9c2:	f241 3338 	movw	r3, #4920	; 0x1338
 800a9c6:	443b      	add	r3, r7
 800a9c8:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 800a9cc:	f04f 0300 	mov.w	r3, #0
 800a9d0:	f04f 0400 	mov.w	r4, #0
 800a9d4:	f241 3218 	movw	r2, #4888	; 0x1318
 800a9d8:	443a      	add	r2, r7
 800a9da:	e9c2 3400 	strd	r3, r4, [r2]
 800a9de:	e03f      	b.n	800aa60 <G_q+0x8498>
	...
 800a9e8:	ffffedf0 	.word	0xffffedf0
  } else if (t110.re == 0.0) {
 800a9ec:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800a9f0:	ed93 7b00 	vldr	d7, [r3]
 800a9f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800a9f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9fc:	d116      	bne.n	800aa2c <G_q+0x8464>
    b_t10_re = 0.0;
 800a9fe:	f04f 0300 	mov.w	r3, #0
 800aa02:	f04f 0400 	mov.w	r4, #0
 800aa06:	f241 3238 	movw	r2, #4920	; 0x1338
 800aa0a:	443a      	add	r2, r7
 800aa0c:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t110.im / 2.0;
 800aa10:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800aa14:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa18:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa1c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa20:	f241 3318 	movw	r3, #4888	; 0x1318
 800aa24:	443b      	add	r3, r7
 800aa26:	ed83 7b00 	vstr	d7, [r3]
 800aa2a:	e019      	b.n	800aa60 <G_q+0x8498>
  } else {
    b_t10_re = t110.re / 2.0;
 800aa2c:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800aa30:	ed93 6b00 	vldr	d6, [r3]
 800aa34:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa38:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa3c:	f241 3338 	movw	r3, #4920	; 0x1338
 800aa40:	443b      	add	r3, r7
 800aa42:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t110.im / 2.0;
 800aa46:	f507 6353 	add.w	r3, r7, #3376	; 0xd30
 800aa4a:	ed93 6b02 	vldr	d6, [r3, #8]
 800aa4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa56:	f241 3318 	movw	r3, #4888	; 0x1318
 800aa5a:	443b      	add	r3, r7
 800aa5c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t111.im == 0.0) {
 800aa60:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aa64:	ed93 7b02 	vldr	d7, [r3, #8]
 800aa68:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aa6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa70:	d115      	bne.n	800aa9e <G_q+0x84d6>
    t16_re = t111.re / 2.0;
 800aa72:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aa76:	ed93 6b00 	vldr	d6, [r3]
 800aa7a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aa7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aa82:	f241 3368 	movw	r3, #4968	; 0x1368
 800aa86:	443b      	add	r3, r7
 800aa88:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800aa8c:	f04f 0300 	mov.w	r3, #0
 800aa90:	f04f 0400 	mov.w	r4, #0
 800aa94:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800aa98:	e9c2 3400 	strd	r3, r4, [r2]
 800aa9c:	e037      	b.n	800ab0e <G_q+0x8546>
  } else if (t111.re == 0.0) {
 800aa9e:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aaa2:	ed93 7b00 	vldr	d7, [r3]
 800aaa6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aaaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aaae:	d115      	bne.n	800aadc <G_q+0x8514>
    t16_re = 0.0;
 800aab0:	f04f 0300 	mov.w	r3, #0
 800aab4:	f04f 0400 	mov.w	r4, #0
 800aab8:	f241 3268 	movw	r2, #4968	; 0x1368
 800aabc:	443a      	add	r2, r7
 800aabe:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t111.im / 2.0;
 800aac2:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aac6:	ed93 6b02 	vldr	d6, [r3, #8]
 800aaca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aad2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800aad6:	ed83 7b00 	vstr	d7, [r3]
 800aada:	e018      	b.n	800ab0e <G_q+0x8546>
  } else {
    t16_re = t111.re / 2.0;
 800aadc:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aae0:	ed93 6b00 	vldr	d6, [r3]
 800aae4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800aae8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800aaec:	f241 3368 	movw	r3, #4968	; 0x1368
 800aaf0:	443b      	add	r3, r7
 800aaf2:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t111.im / 2.0;
 800aaf6:	f507 6354 	add.w	r3, r7, #3392	; 0xd40
 800aafa:	ed93 6b02 	vldr	d6, [r3, #8]
 800aafe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ab02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ab06:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ab0a:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800ab0e:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab12:	443b      	add	r3, r7
 800ab14:	ed93 6b00 	vldr	d6, [r3]
 800ab18:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ab1c:	443b      	add	r3, r7
 800ab1e:	ed93 7b00 	vldr	d7, [r3]
 800ab22:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab26:	f241 3388 	movw	r3, #5000	; 0x1388
 800ab2a:	443b      	add	r3, r7
 800ab2c:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800ab30:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ab34:	ed93 6b00 	vldr	d6, [r3]
 800ab38:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ab3c:	443b      	add	r3, r7
 800ab3e:	ed93 7b00 	vldr	d7, [r3]
 800ab42:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab46:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ab4a:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (b_t10_re + t16_re) + 7.498798913309288E-33;
 800ab4e:	f241 3338 	movw	r3, #4920	; 0x1338
 800ab52:	443b      	add	r3, r7
 800ab54:	ed93 6b00 	vldr	d6, [r3]
 800ab58:	f241 3368 	movw	r3, #4968	; 0x1368
 800ab5c:	443b      	add	r3, r7
 800ab5e:	ed93 7b00 	vldr	d7, [r3]
 800ab62:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab66:	ed9f 6b60 	vldr	d6, [pc, #384]	; 800ace8 <G_q+0x8720>
 800ab6a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800ab6e:	f241 3338 	movw	r3, #4920	; 0x1338
 800ab72:	443b      	add	r3, r7
 800ab74:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t16_im;
 800ab78:	f241 3318 	movw	r3, #4888	; 0x1318
 800ab7c:	443b      	add	r3, r7
 800ab7e:	ed93 6b00 	vldr	d6, [r3]
 800ab82:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ab86:	ed93 7b00 	vldr	d7, [r3]
 800ab8a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ab8e:	f241 3318 	movw	r3, #4888	; 0x1318
 800ab92:	443b      	add	r3, r7
 800ab94:	ed83 7b00 	vstr	d7, [r3]
  if (t102.im == 0.0) {
 800ab98:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ab9c:	ed93 7b02 	vldr	d7, [r3, #8]
 800aba0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba8:	d116      	bne.n	800abd8 <G_q+0x8610>
    t23_re = t102.re / 2.0;
 800abaa:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800abae:	ed93 6b00 	vldr	d6, [r3]
 800abb2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800abb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800abba:	f241 3330 	movw	r3, #4912	; 0x1330
 800abbe:	443b      	add	r3, r7
 800abc0:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800abc4:	f04f 0300 	mov.w	r3, #0
 800abc8:	f04f 0400 	mov.w	r4, #0
 800abcc:	f241 3210 	movw	r2, #4880	; 0x1310
 800abd0:	443a      	add	r2, r7
 800abd2:	e9c2 3400 	strd	r3, r4, [r2]
 800abd6:	e039      	b.n	800ac4c <G_q+0x8684>
  } else if (t102.re == 0.0) {
 800abd8:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800abdc:	ed93 7b00 	vldr	d7, [r3]
 800abe0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800abe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe8:	d116      	bne.n	800ac18 <G_q+0x8650>
    t23_re = 0.0;
 800abea:	f04f 0300 	mov.w	r3, #0
 800abee:	f04f 0400 	mov.w	r4, #0
 800abf2:	f241 3230 	movw	r2, #4912	; 0x1330
 800abf6:	443a      	add	r2, r7
 800abf8:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t102.im / 2.0;
 800abfc:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ac00:	ed93 6b02 	vldr	d6, [r3, #8]
 800ac04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac0c:	f241 3310 	movw	r3, #4880	; 0x1310
 800ac10:	443b      	add	r3, r7
 800ac12:	ed83 7b00 	vstr	d7, [r3]
 800ac16:	e019      	b.n	800ac4c <G_q+0x8684>
  } else {
    t23_re = t102.re / 2.0;
 800ac18:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ac1c:	ed93 6b00 	vldr	d6, [r3]
 800ac20:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac28:	f241 3330 	movw	r3, #4912	; 0x1330
 800ac2c:	443b      	add	r3, r7
 800ac2e:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t102.im / 2.0;
 800ac32:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 800ac36:	ed93 6b02 	vldr	d6, [r3, #8]
 800ac3a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac42:	f241 3310 	movw	r3, #4880	; 0x1310
 800ac46:	443b      	add	r3, r7
 800ac48:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t103.im == 0.0) {
 800ac4c:	4b28      	ldr	r3, [pc, #160]	; (800acf0 <G_q+0x8728>)
 800ac4e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ac52:	443a      	add	r2, r7
 800ac54:	4413      	add	r3, r2
 800ac56:	ed93 7b02 	vldr	d7, [r3, #8]
 800ac5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ac5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac62:	d119      	bne.n	800ac98 <G_q+0x86d0>
    t34_re = t103.re / 2.0;
 800ac64:	4b22      	ldr	r3, [pc, #136]	; (800acf0 <G_q+0x8728>)
 800ac66:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ac6a:	443a      	add	r2, r7
 800ac6c:	4413      	add	r3, r2
 800ac6e:	ed93 6b00 	vldr	d6, [r3]
 800ac72:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ac76:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ac7a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ac7e:	443b      	add	r3, r7
 800ac80:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ac84:	f04f 0300 	mov.w	r3, #0
 800ac88:	f04f 0400 	mov.w	r4, #0
 800ac8c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ac90:	443a      	add	r2, r7
 800ac92:	e9c2 3400 	strd	r3, r4, [r2]
 800ac96:	e04d      	b.n	800ad34 <G_q+0x876c>
  } else if (t103.re == 0.0) {
 800ac98:	4b15      	ldr	r3, [pc, #84]	; (800acf0 <G_q+0x8728>)
 800ac9a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ac9e:	443a      	add	r2, r7
 800aca0:	4413      	add	r3, r2
 800aca2:	ed93 7b00 	vldr	d7, [r3]
 800aca6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800acaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acae:	d121      	bne.n	800acf4 <G_q+0x872c>
    t34_re = 0.0;
 800acb0:	f04f 0300 	mov.w	r3, #0
 800acb4:	f04f 0400 	mov.w	r4, #0
 800acb8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800acbc:	443a      	add	r2, r7
 800acbe:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t103.im / 2.0;
 800acc2:	4b0b      	ldr	r3, [pc, #44]	; (800acf0 <G_q+0x8728>)
 800acc4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800acc8:	443a      	add	r2, r7
 800acca:	4413      	add	r3, r2
 800accc:	ed93 6b02 	vldr	d6, [r3, #8]
 800acd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800acd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800acd8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800acdc:	443b      	add	r3, r7
 800acde:	ed83 7b00 	vstr	d7, [r3]
 800ace2:	e027      	b.n	800ad34 <G_q+0x876c>
 800ace4:	f3af 8000 	nop.w
 800ace8:	858a5d48 	.word	0x858a5d48
 800acec:	394377ce 	.word	0x394377ce
 800acf0:	ffffee10 	.word	0xffffee10
  } else {
    t34_re = t103.re / 2.0;
 800acf4:	4bd4      	ldr	r3, [pc, #848]	; (800b048 <G_q+0x8a80>)
 800acf6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800acfa:	443a      	add	r2, r7
 800acfc:	4413      	add	r3, r2
 800acfe:	ed93 6b00 	vldr	d6, [r3]
 800ad02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad0a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ad0e:	443b      	add	r3, r7
 800ad10:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t103.im / 2.0;
 800ad14:	4bcc      	ldr	r3, [pc, #816]	; (800b048 <G_q+0x8a80>)
 800ad16:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ad1a:	443a      	add	r2, r7
 800ad1c:	4413      	add	r3, r2
 800ad1e:	ed93 6b02 	vldr	d6, [r3, #8]
 800ad22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ad26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ad2a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ad2e:	443b      	add	r3, r7
 800ad30:	ed83 7b00 	vstr	d7, [r3]
  }

  t13_re = (t13_im * t20_re - t76_re * t20_im) + (t12_re * b_t10_re - t12_im *
 800ad34:	f241 3370 	movw	r3, #4976	; 0x1370
 800ad38:	443b      	add	r3, r7
 800ad3a:	ed93 6b00 	vldr	d6, [r3]
 800ad3e:	f241 3348 	movw	r3, #4936	; 0x1348
 800ad42:	443b      	add	r3, r7
 800ad44:	ed93 7b00 	vldr	d7, [r3]
 800ad48:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ad4c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ad50:	443b      	add	r3, r7
 800ad52:	ed93 5b00 	vldr	d5, [r3]
 800ad56:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ad5a:	ed93 7b00 	vldr	d7, [r3]
 800ad5e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ad62:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ad66:	f241 3388 	movw	r3, #5000	; 0x1388
 800ad6a:	443b      	add	r3, r7
 800ad6c:	ed93 5b00 	vldr	d5, [r3]
 800ad70:	f241 3338 	movw	r3, #4920	; 0x1338
 800ad74:	443b      	add	r3, r7
 800ad76:	ed93 7b00 	vldr	d7, [r3]
 800ad7a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ad7e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ad82:	ed93 4b00 	vldr	d4, [r3]
 800ad86:	f241 3318 	movw	r3, #4888	; 0x1318
 800ad8a:	443b      	add	r3, r7
 800ad8c:	ed93 7b00 	vldr	d7, [r3]
 800ad90:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ad94:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ad98:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ad9c:	f241 3378 	movw	r3, #4984	; 0x1378
 800ada0:	443b      	add	r3, r7
 800ada2:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t76_re = (t13_im * t20_im + t76_re * t20_re) + (t12_re * t85_im + t12_im *
 800ada6:	f241 3370 	movw	r3, #4976	; 0x1370
 800adaa:	443b      	add	r3, r7
 800adac:	ed93 6b00 	vldr	d6, [r3]
 800adb0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800adb4:	ed93 7b00 	vldr	d7, [r3]
 800adb8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800adbc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800adc0:	443b      	add	r3, r7
 800adc2:	ed93 5b00 	vldr	d5, [r3]
 800adc6:	f241 3348 	movw	r3, #4936	; 0x1348
 800adca:	443b      	add	r3, r7
 800adcc:	ed93 7b00 	vldr	d7, [r3]
 800add0:	ee25 7b07 	vmul.f64	d7, d5, d7
 800add4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800add8:	f241 3388 	movw	r3, #5000	; 0x1388
 800addc:	443b      	add	r3, r7
 800adde:	ed93 5b00 	vldr	d5, [r3]
 800ade2:	f241 3318 	movw	r3, #4888	; 0x1318
 800ade6:	443b      	add	r3, r7
 800ade8:	ed93 7b00 	vldr	d7, [r3]
 800adec:	ee25 5b07 	vmul.f64	d5, d5, d7
 800adf0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800adf4:	ed93 4b00 	vldr	d4, [r3]
 800adf8:	f241 3338 	movw	r3, #4920	; 0x1338
 800adfc:	443b      	add	r3, r7
 800adfe:	ed93 7b00 	vldr	d7, [r3]
 800ae02:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ae06:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ae0a:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ae0e:	443b      	add	r3, r7
 800ae10:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae14:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t23_re += t34_re;
 800ae18:	f241 3330 	movw	r3, #4912	; 0x1330
 800ae1c:	443b      	add	r3, r7
 800ae1e:	ed93 6b00 	vldr	d6, [r3]
 800ae22:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ae26:	443b      	add	r3, r7
 800ae28:	ed93 7b00 	vldr	d7, [r3]
 800ae2c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae30:	f241 3330 	movw	r3, #4912	; 0x1330
 800ae34:	443b      	add	r3, r7
 800ae36:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800ae3a:	f241 3310 	movw	r3, #4880	; 0x1310
 800ae3e:	443b      	add	r3, r7
 800ae40:	ed93 6b00 	vldr	d6, [r3]
 800ae44:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ae48:	443b      	add	r3, r7
 800ae4a:	ed93 7b00 	vldr	d7, [r3]
 800ae4e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ae52:	f241 3310 	movw	r3, #4880	; 0x1310
 800ae56:	443b      	add	r3, r7
 800ae58:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t112.re * 0.0 - t112.im * 0.5) - (t113.re * 0.0 - t113.im * 0.5);
 800ae5c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae60:	ed93 7b00 	vldr	d7, [r3]
 800ae64:	ed9f 6b76 	vldr	d6, [pc, #472]	; 800b040 <G_q+0x8a78>
 800ae68:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ae6c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ae70:	ed93 7b02 	vldr	d7, [r3, #8]
 800ae74:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ae78:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ae7c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ae80:	4b72      	ldr	r3, [pc, #456]	; (800b04c <G_q+0x8a84>)
 800ae82:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae86:	443a      	add	r2, r7
 800ae88:	4413      	add	r3, r2
 800ae8a:	ed93 7b00 	vldr	d7, [r3]
 800ae8e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b040 <G_q+0x8a78>
 800ae92:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ae96:	4b6d      	ldr	r3, [pc, #436]	; (800b04c <G_q+0x8a84>)
 800ae98:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ae9c:	443a      	add	r2, r7
 800ae9e:	4413      	add	r3, r2
 800aea0:	ed93 7b02 	vldr	d7, [r3, #8]
 800aea4:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800aea8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aeac:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aeb0:	f241 2358 	movw	r3, #4696	; 0x1258
 800aeb4:	443b      	add	r3, r7
 800aeb6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800aeba:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t112.re * 0.5 + t112.im * 0.0) - (t113.re * 0.5 + t113.im * 0.0);
 800aebe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aec2:	ed93 7b00 	vldr	d7, [r3]
 800aec6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800aeca:	ee27 6b06 	vmul.f64	d6, d7, d6
 800aece:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800aed2:	ed93 7b02 	vldr	d7, [r3, #8]
 800aed6:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800b040 <G_q+0x8a78>
 800aeda:	ee27 7b05 	vmul.f64	d7, d7, d5
 800aede:	ee36 6b07 	vadd.f64	d6, d6, d7
 800aee2:	4b5a      	ldr	r3, [pc, #360]	; (800b04c <G_q+0x8a84>)
 800aee4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aee8:	443a      	add	r2, r7
 800aeea:	4413      	add	r3, r2
 800aeec:	ed93 7b00 	vldr	d7, [r3]
 800aef0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800aef4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800aef8:	4b54      	ldr	r3, [pc, #336]	; (800b04c <G_q+0x8a84>)
 800aefa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800aefe:	443a      	add	r2, r7
 800af00:	4413      	add	r3, r2
 800af02:	ed93 7b02 	vldr	d7, [r3, #8]
 800af06:	ed9f 4b4e 	vldr	d4, [pc, #312]	; 800b040 <G_q+0x8a78>
 800af0a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800af0e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800af12:	ee36 7b47 	vsub.f64	d7, d6, d7
 800af16:	f241 3308 	movw	r3, #4872	; 0x1308
 800af1a:	443b      	add	r3, r7
 800af1c:	ed83 7b00 	vstr	d7, [r3]
  t41_im = (t72_re * t58_im - t8_re * t60_re) + (t13_re * t23_re - t76_re *
 800af20:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800af24:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800af28:	ed92 6b00 	vldr	d6, [r2]
 800af2c:	ed93 7b00 	vldr	d7, [r3]
 800af30:	ee26 6b07 	vmul.f64	d6, d6, d7
 800af34:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800af38:	f241 2350 	movw	r3, #4688	; 0x1250
 800af3c:	443b      	add	r3, r7
 800af3e:	ed92 5b00 	vldr	d5, [r2]
 800af42:	ed93 7b00 	vldr	d7, [r3]
 800af46:	ee25 7b07 	vmul.f64	d7, d5, d7
 800af4a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800af4e:	f241 3378 	movw	r3, #4984	; 0x1378
 800af52:	443b      	add	r3, r7
 800af54:	ed93 5b00 	vldr	d5, [r3]
 800af58:	f241 3330 	movw	r3, #4912	; 0x1330
 800af5c:	443b      	add	r3, r7
 800af5e:	ed93 7b00 	vldr	d7, [r3]
 800af62:	ee25 5b07 	vmul.f64	d5, d5, d7
 800af66:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800af6a:	443b      	add	r3, r7
 800af6c:	ed93 4b00 	vldr	d4, [r3]
 800af70:	f241 3310 	movw	r3, #4880	; 0x1310
 800af74:	443b      	add	r3, r7
 800af76:	ed93 7b00 	vldr	d7, [r3]
 800af7a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800af7e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800af82:	ee36 7b07 	vadd.f64	d7, d6, d7
 800af86:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800af8a:	ed83 7b00 	vstr	d7, [r3]
    t3_im);
  t8_re = (t72_re * t60_re + t8_re * t58_im) + (t13_re * t3_im + t76_re * t23_re);
 800af8e:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800af92:	f241 2350 	movw	r3, #4688	; 0x1250
 800af96:	443b      	add	r3, r7
 800af98:	ed92 6b00 	vldr	d6, [r2]
 800af9c:	ed93 7b00 	vldr	d7, [r3]
 800afa0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800afa4:	f507 5293 	add.w	r2, r7, #4704	; 0x1260
 800afa8:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800afac:	ed92 5b00 	vldr	d5, [r2]
 800afb0:	ed93 7b00 	vldr	d7, [r3]
 800afb4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800afb8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800afbc:	f241 3378 	movw	r3, #4984	; 0x1378
 800afc0:	443b      	add	r3, r7
 800afc2:	ed93 5b00 	vldr	d5, [r3]
 800afc6:	f241 3310 	movw	r3, #4880	; 0x1310
 800afca:	443b      	add	r3, r7
 800afcc:	ed93 7b00 	vldr	d7, [r3]
 800afd0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800afd4:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800afd8:	443b      	add	r3, r7
 800afda:	ed93 4b00 	vldr	d4, [r3]
 800afde:	f241 3330 	movw	r3, #4912	; 0x1330
 800afe2:	443b      	add	r3, r7
 800afe4:	ed93 7b00 	vldr	d7, [r3]
 800afe8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800afec:	ee35 7b07 	vadd.f64	d7, d5, d7
 800aff0:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800aff4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800aff8:	ed83 7b00 	vstr	d7, [r3]
  if (t124.im == 0.0) {
 800affc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b000:	ed93 7b02 	vldr	d7, [r3, #8]
 800b004:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b008:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b00c:	d120      	bne.n	800b050 <G_q+0x8a88>
    t43_im = t124.re / 2.0;
 800b00e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b012:	ed93 6b00 	vldr	d6, [r3]
 800b016:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b01a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b01e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b022:	443b      	add	r3, r7
 800b024:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = 0.0;
 800b028:	f04f 0300 	mov.w	r3, #0
 800b02c:	f04f 0400 	mov.w	r4, #0
 800b030:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800b034:	443a      	add	r2, r7
 800b036:	e9c2 3400 	strd	r3, r4, [r2]
 800b03a:	e043      	b.n	800b0c4 <G_q+0x8afc>
 800b03c:	f3af 8000 	nop.w
	...
 800b048:	ffffee10 	.word	0xffffee10
 800b04c:	ffffec90 	.word	0xffffec90
  } else if (t124.re == 0.0) {
 800b050:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b054:	ed93 7b00 	vldr	d7, [r3]
 800b058:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b05c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b060:	d116      	bne.n	800b090 <G_q+0x8ac8>
    t43_im = 0.0;
 800b062:	f04f 0300 	mov.w	r3, #0
 800b066:	f04f 0400 	mov.w	r4, #0
 800b06a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 800b06e:	443a      	add	r2, r7
 800b070:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_re = t124.im / 2.0;
 800b074:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b078:	ed93 6b02 	vldr	d6, [r3, #8]
 800b07c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b080:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b084:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b088:	443b      	add	r3, r7
 800b08a:	ed83 7b00 	vstr	d7, [r3]
 800b08e:	e019      	b.n	800b0c4 <G_q+0x8afc>
  } else {
    t43_im = t124.re / 2.0;
 800b090:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b094:	ed93 6b00 	vldr	d6, [r3]
 800b098:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b09c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0a0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800b0a4:	443b      	add	r3, r7
 800b0a6:	ed83 7b00 	vstr	d7, [r3]
    b_t54_re = t124.im / 2.0;
 800b0aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b0ae:	ed93 6b02 	vldr	d6, [r3, #8]
 800b0b2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b0b6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0ba:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800b0be:	443b      	add	r3, r7
 800b0c0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t125.im == 0.0) {
 800b0c4:	4b82      	ldr	r3, [pc, #520]	; (800b2d0 <G_q+0x8d08>)
 800b0c6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b0ca:	443a      	add	r2, r7
 800b0cc:	4413      	add	r3, r2
 800b0ce:	ed93 7b02 	vldr	d7, [r3, #8]
 800b0d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0da:	d119      	bne.n	800b110 <G_q+0x8b48>
    t55_im = t125.re / 2.0;
 800b0dc:	4b7c      	ldr	r3, [pc, #496]	; (800b2d0 <G_q+0x8d08>)
 800b0de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b0e2:	443a      	add	r2, r7
 800b0e4:	4413      	add	r3, r2
 800b0e6:	ed93 6b00 	vldr	d6, [r3]
 800b0ea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b0ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b0f2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b0f6:	443b      	add	r3, r7
 800b0f8:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800b0fc:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800b100:	443a      	add	r2, r7
 800b102:	f04f 0300 	mov.w	r3, #0
 800b106:	f04f 0400 	mov.w	r4, #0
 800b10a:	e9c2 3400 	strd	r3, r4, [r2]
 800b10e:	e045      	b.n	800b19c <G_q+0x8bd4>
  } else if (t125.re == 0.0) {
 800b110:	4b6f      	ldr	r3, [pc, #444]	; (800b2d0 <G_q+0x8d08>)
 800b112:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b116:	443a      	add	r2, r7
 800b118:	4413      	add	r3, r2
 800b11a:	ed93 7b00 	vldr	d7, [r3]
 800b11e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b126:	d119      	bne.n	800b15c <G_q+0x8b94>
    t55_im = 0.0;
 800b128:	f04f 0300 	mov.w	r3, #0
 800b12c:	f04f 0400 	mov.w	r4, #0
 800b130:	f241 22d8 	movw	r2, #4824	; 0x12d8
 800b134:	443a      	add	r2, r7
 800b136:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t125.im / 2.0;
 800b13a:	4b65      	ldr	r3, [pc, #404]	; (800b2d0 <G_q+0x8d08>)
 800b13c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b140:	443a      	add	r2, r7
 800b142:	4413      	add	r3, r2
 800b144:	ed93 6b02 	vldr	d6, [r3, #8]
 800b148:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800b14c:	443b      	add	r3, r7
 800b14e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b152:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b156:	ed83 7b00 	vstr	d7, [r3]
 800b15a:	e01f      	b.n	800b19c <G_q+0x8bd4>
  } else {
    t55_im = t125.re / 2.0;
 800b15c:	4b5c      	ldr	r3, [pc, #368]	; (800b2d0 <G_q+0x8d08>)
 800b15e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b162:	443a      	add	r2, r7
 800b164:	4413      	add	r3, r2
 800b166:	ed93 6b00 	vldr	d6, [r3]
 800b16a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b16e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b172:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800b176:	443b      	add	r3, r7
 800b178:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t125.im / 2.0;
 800b17c:	4b54      	ldr	r3, [pc, #336]	; (800b2d0 <G_q+0x8d08>)
 800b17e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b182:	443a      	add	r2, r7
 800b184:	4413      	add	r3, r2
 800b186:	ed93 6b02 	vldr	d6, [r3, #8]
 800b18a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800b18e:	443b      	add	r3, r7
 800b190:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b194:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b198:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t136.im == 0.0) {
 800b19c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b1a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b1a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ac:	d116      	bne.n	800b1dc <G_q+0x8c14>
    t70_im = t136.re / 2.0;
 800b1ae:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b1b2:	ed93 6b00 	vldr	d6, [r3]
 800b1b6:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b1ba:	443b      	add	r3, r7
 800b1bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b1c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b1c4:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = 0.0;
 800b1c8:	f04f 0300 	mov.w	r3, #0
 800b1cc:	f04f 0400 	mov.w	r4, #0
 800b1d0:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800b1d4:	443a      	add	r2, r7
 800b1d6:	e9c2 3400 	strd	r3, r4, [r2]
 800b1da:	e039      	b.n	800b250 <G_q+0x8c88>
  } else if (t136.re == 0.0) {
 800b1dc:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b1e0:	ed93 7b00 	vldr	d7, [r3]
 800b1e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b1e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1ec:	d116      	bne.n	800b21c <G_q+0x8c54>
    t70_im = 0.0;
 800b1ee:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b1f2:	443a      	add	r2, r7
 800b1f4:	f04f 0300 	mov.w	r3, #0
 800b1f8:	f04f 0400 	mov.w	r4, #0
 800b1fc:	e9c2 3400 	strd	r3, r4, [r2]
    b_t54_im = t136.im / 2.0;
 800b200:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b204:	ed93 6b02 	vldr	d6, [r3, #8]
 800b208:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b20c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b210:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b214:	443b      	add	r3, r7
 800b216:	ed83 7b00 	vstr	d7, [r3]
 800b21a:	e019      	b.n	800b250 <G_q+0x8c88>
  } else {
    t70_im = t136.re / 2.0;
 800b21c:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b220:	ed93 6b00 	vldr	d6, [r3]
 800b224:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b228:	443b      	add	r3, r7
 800b22a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b22e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b232:	ed83 7b00 	vstr	d7, [r3]
    b_t54_im = t136.im / 2.0;
 800b236:	f507 63d2 	add.w	r3, r7, #1680	; 0x690
 800b23a:	ed93 6b02 	vldr	d6, [r3, #8]
 800b23e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b242:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b246:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b24a:	443b      	add	r3, r7
 800b24c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t137.im == 0.0) {
 800b250:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b254:	ed93 7b02 	vldr	d7, [r3, #8]
 800b258:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b25c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b260:	d116      	bne.n	800b290 <G_q+0x8cc8>
    t34_re = t137.re / 2.0;
 800b262:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b266:	ed93 6b00 	vldr	d6, [r3]
 800b26a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b26e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b272:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b276:	443b      	add	r3, r7
 800b278:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b27c:	f04f 0300 	mov.w	r3, #0
 800b280:	f04f 0400 	mov.w	r4, #0
 800b284:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b288:	443a      	add	r2, r7
 800b28a:	e9c2 3400 	strd	r3, r4, [r2]
 800b28e:	e03b      	b.n	800b308 <G_q+0x8d40>
  } else if (t137.re == 0.0) {
 800b290:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b294:	ed93 7b00 	vldr	d7, [r3]
 800b298:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b29c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2a0:	d118      	bne.n	800b2d4 <G_q+0x8d0c>
    t34_re = 0.0;
 800b2a2:	f04f 0300 	mov.w	r3, #0
 800b2a6:	f04f 0400 	mov.w	r4, #0
 800b2aa:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b2ae:	443a      	add	r2, r7
 800b2b0:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t137.im / 2.0;
 800b2b4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b2b8:	ed93 6b02 	vldr	d6, [r3, #8]
 800b2bc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2c0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2c4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b2c8:	443b      	add	r3, r7
 800b2ca:	ed83 7b00 	vstr	d7, [r3]
 800b2ce:	e01b      	b.n	800b308 <G_q+0x8d40>
 800b2d0:	ffffecb0 	.word	0xffffecb0
  } else {
    t34_re = t137.re / 2.0;
 800b2d4:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b2d8:	ed93 6b00 	vldr	d6, [r3]
 800b2dc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2e4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b2e8:	443b      	add	r3, r7
 800b2ea:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t137.im / 2.0;
 800b2ee:	f507 63d4 	add.w	r3, r7, #1696	; 0x6a0
 800b2f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800b2f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b2fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b2fe:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b302:	443b      	add	r3, r7
 800b304:	ed83 7b00 	vstr	d7, [r3]
  }

  t70_im += t34_re;
 800b308:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800b30c:	443b      	add	r3, r7
 800b30e:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800b312:	443a      	add	r2, r7
 800b314:	ed92 6b00 	vldr	d6, [r2]
 800b318:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b31c:	443a      	add	r2, r7
 800b31e:	ed92 7b00 	vldr	d7, [r2]
 800b322:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b326:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im += t34_im;
 800b32a:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b32e:	443b      	add	r3, r7
 800b330:	ed93 6b00 	vldr	d6, [r3]
 800b334:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b338:	443b      	add	r3, r7
 800b33a:	ed93 7b00 	vldr	d7, [r3]
 800b33e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b342:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800b346:	443b      	add	r3, r7
 800b348:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t138.re * 0.0 - t138.im * 0.5) - (t139.re * 0.0 - t139.im * 0.5);
 800b34c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b350:	ed93 7b00 	vldr	d7, [r3]
 800b354:	ed9f 6bb6 	vldr	d6, [pc, #728]	; 800b630 <G_q+0x9068>
 800b358:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b35c:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b360:	ed93 7b02 	vldr	d7, [r3, #8]
 800b364:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b368:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b36c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b370:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b374:	ed93 7b00 	vldr	d7, [r3]
 800b378:	ed9f 5bad 	vldr	d5, [pc, #692]	; 800b630 <G_q+0x9068>
 800b37c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b380:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b384:	ed93 7b02 	vldr	d7, [r3, #8]
 800b388:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b38c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b390:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b394:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800b398:	443b      	add	r3, r7
 800b39a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b39e:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t138.re * 0.5 + t138.im * 0.0) - (t139.re * 0.5 + t139.im * 0.0);
 800b3a2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b3a6:	ed93 7b00 	vldr	d7, [r3]
 800b3aa:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b3ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b3b2:	f507 635d 	add.w	r3, r7, #3536	; 0xdd0
 800b3b6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b3ba:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800b630 <G_q+0x9068>
 800b3be:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b3c2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b3c6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b3ca:	ed93 7b00 	vldr	d7, [r3]
 800b3ce:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b3d2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b3d6:	f507 635e 	add.w	r3, r7, #3552	; 0xde0
 800b3da:	ed93 7b02 	vldr	d7, [r3, #8]
 800b3de:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800b630 <G_q+0x9068>
 800b3e2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b3e6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b3ea:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800b3ee:	443b      	add	r3, r7
 800b3f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b3f4:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t150.re * 3.061616997868383E-17 + t151.re * 3.061616997868383E-17;
 800b3f8:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b3fc:	ed93 7b00 	vldr	d7, [r3]
 800b400:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800b640 <G_q+0x9078>
 800b404:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b408:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b40c:	ed93 7b00 	vldr	d7, [r3]
 800b410:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800b640 <G_q+0x9078>
 800b414:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b418:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b41c:	f241 3378 	movw	r3, #4984	; 0x1378
 800b420:	443b      	add	r3, r7
 800b422:	ed83 7b00 	vstr	d7, [r3]
  t55_re = t150.im * 3.061616997868383E-17 + t151.im * 3.061616997868383E-17;
 800b426:	f507 63de 	add.w	r3, r7, #1776	; 0x6f0
 800b42a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b42e:	ed9f 6b84 	vldr	d6, [pc, #528]	; 800b640 <G_q+0x9078>
 800b432:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b436:	f507 63e0 	add.w	r3, r7, #1792	; 0x700
 800b43a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b43e:	ed9f 5b80 	vldr	d5, [pc, #512]	; 800b640 <G_q+0x9078>
 800b442:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b446:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b44a:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b44e:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t148.re * 0.0 - t148.im * 0.5) - (t149.re * 0.0 - t149.im * 0.5);
 800b452:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b456:	ed93 7b00 	vldr	d7, [r3]
 800b45a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800b630 <G_q+0x9068>
 800b45e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b462:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b466:	ed93 7b02 	vldr	d7, [r3, #8]
 800b46a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b46e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b472:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b476:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b47a:	ed93 7b00 	vldr	d7, [r3]
 800b47e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800b630 <G_q+0x9068>
 800b482:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b486:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b48a:	ed93 7b02 	vldr	d7, [r3, #8]
 800b48e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b492:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b496:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b49a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b49e:	f241 3370 	movw	r3, #4976	; 0x1370
 800b4a2:	443b      	add	r3, r7
 800b4a4:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t148.re * 0.5 + t148.im * 0.0) - (t149.re * 0.5 + t149.im * 0.0);
 800b4a8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b4ac:	ed93 7b00 	vldr	d7, [r3]
 800b4b0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b4b4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b4b8:	f507 6363 	add.w	r3, r7, #3632	; 0xe30
 800b4bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b4c0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800b630 <G_q+0x9068>
 800b4c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b4cc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b4d0:	ed93 7b00 	vldr	d7, [r3]
 800b4d4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b4d8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b4dc:	f507 6364 	add.w	r3, r7, #3648	; 0xe40
 800b4e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b4e4:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800b630 <G_q+0x9068>
 800b4e8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b4ec:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b4f0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b4f4:	f241 3368 	movw	r3, #4968	; 0x1368
 800b4f8:	443b      	add	r3, r7
 800b4fa:	ed83 7b00 	vstr	d7, [r3]
  if (t146.im == 0.0) {
 800b4fe:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b502:	ed93 7b02 	vldr	d7, [r3, #8]
 800b506:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b50e:	d115      	bne.n	800b53c <G_q+0x8f74>
    t16_im = t146.re / 2.0;
 800b510:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b514:	ed93 6b00 	vldr	d6, [r3]
 800b518:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b51c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b520:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b524:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800b528:	f04f 0300 	mov.w	r3, #0
 800b52c:	f04f 0400 	mov.w	r4, #0
 800b530:	f241 3248 	movw	r2, #4936	; 0x1348
 800b534:	443a      	add	r2, r7
 800b536:	e9c2 3400 	strd	r3, r4, [r2]
 800b53a:	e037      	b.n	800b5ac <G_q+0x8fe4>
  } else if (t146.re == 0.0) {
 800b53c:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b540:	ed93 7b00 	vldr	d7, [r3]
 800b544:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b54c:	d115      	bne.n	800b57a <G_q+0x8fb2>
    t16_im = 0.0;
 800b54e:	f04f 0300 	mov.w	r3, #0
 800b552:	f04f 0400 	mov.w	r4, #0
 800b556:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800b55a:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t146.im / 2.0;
 800b55e:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b562:	ed93 6b02 	vldr	d6, [r3, #8]
 800b566:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b56a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b56e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b572:	443b      	add	r3, r7
 800b574:	ed83 7b00 	vstr	d7, [r3]
 800b578:	e018      	b.n	800b5ac <G_q+0x8fe4>
  } else {
    t16_im = t146.re / 2.0;
 800b57a:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b57e:	ed93 6b00 	vldr	d6, [r3]
 800b582:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b586:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b58a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b58e:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t146.im / 2.0;
 800b592:	f507 6361 	add.w	r3, r7, #3600	; 0xe10
 800b596:	ed93 6b02 	vldr	d6, [r3, #8]
 800b59a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b59e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b5a2:	f241 3348 	movw	r3, #4936	; 0x1348
 800b5a6:	443b      	add	r3, r7
 800b5a8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t147.im == 0.0) {
 800b5ac:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b5b0:	ed93 7b02 	vldr	d7, [r3, #8]
 800b5b4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5bc:	d116      	bne.n	800b5ec <G_q+0x9024>
    t34_re = t147.re / 2.0;
 800b5be:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b5c2:	ed93 6b00 	vldr	d6, [r3]
 800b5c6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b5ca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b5ce:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b5d2:	443b      	add	r3, r7
 800b5d4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800b5d8:	f04f 0300 	mov.w	r3, #0
 800b5dc:	f04f 0400 	mov.w	r4, #0
 800b5e0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800b5e4:	443a      	add	r2, r7
 800b5e6:	e9c2 3400 	strd	r3, r4, [r2]
 800b5ea:	e047      	b.n	800b67c <G_q+0x90b4>
  } else if (t147.re == 0.0) {
 800b5ec:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b5f0:	ed93 7b00 	vldr	d7, [r3]
 800b5f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fc:	d124      	bne.n	800b648 <G_q+0x9080>
    t34_re = 0.0;
 800b5fe:	f04f 0300 	mov.w	r3, #0
 800b602:	f04f 0400 	mov.w	r4, #0
 800b606:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800b60a:	443a      	add	r2, r7
 800b60c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t147.im / 2.0;
 800b610:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b614:	ed93 6b02 	vldr	d6, [r3, #8]
 800b618:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b61c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b620:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b624:	443b      	add	r3, r7
 800b626:	ed83 7b00 	vstr	d7, [r3]
 800b62a:	e027      	b.n	800b67c <G_q+0x90b4>
 800b62c:	f3af 8000 	nop.w
	...
 800b638:	858a5d48 	.word	0x858a5d48
 800b63c:	394377ce 	.word	0x394377ce
 800b640:	33145c07 	.word	0x33145c07
 800b644:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t147.re / 2.0;
 800b648:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b64c:	ed93 6b00 	vldr	d6, [r3]
 800b650:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b654:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b658:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b65c:	443b      	add	r3, r7
 800b65e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t147.im / 2.0;
 800b662:	f507 6362 	add.w	r3, r7, #3616	; 0xe20
 800b666:	ed93 6b02 	vldr	d6, [r3, #8]
 800b66a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800b66e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800b672:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b676:	443b      	add	r3, r7
 800b678:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b67c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b680:	ed93 7b00 	vldr	d7, [r3]
 800b684:	ed1f 6b16 	vldr	d6, [pc, #-88]	; 800b630 <G_q+0x9068>
 800b688:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b68c:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b690:	ed93 7b02 	vldr	d7, [r3, #8]
 800b694:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 800b640 <G_q+0x9078>
 800b698:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b69c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b6a0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b6a4:	ed93 7b00 	vldr	d7, [r3]
 800b6a8:	ed1f 5b1f 	vldr	d5, [pc, #-124]	; 800b630 <G_q+0x9068>
 800b6ac:	ee27 5b05 	vmul.f64	d5, d7, d5
    t145.im * 3.061616997868383E-17);
 800b6b0:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b6b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b6b8:	ed1f 4b1f 	vldr	d4, [pc, #-124]	; 800b640 <G_q+0x9078>
 800b6bc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t144.re * 0.0 - t144.im * 3.061616997868383E-17) - (t145.re * 0.0 -
 800b6c0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b6c4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b6c8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b6cc:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b6d0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b6d4:	ed93 7b00 	vldr	d7, [r3]
 800b6d8:	ed1f 6b27 	vldr	d6, [pc, #-156]	; 800b640 <G_q+0x9078>
 800b6dc:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b6e0:	f507 63da 	add.w	r3, r7, #1744	; 0x6d0
 800b6e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800b6e8:	ed1f 5b2f 	vldr	d5, [pc, #-188]	; 800b630 <G_q+0x9068>
 800b6ec:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b6f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b6f4:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b6f8:	ed93 7b00 	vldr	d7, [r3]
 800b6fc:	ed1f 5b30 	vldr	d5, [pc, #-192]	; 800b640 <G_q+0x9078>
 800b700:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t145.im * 0.0);
 800b704:	f507 63dc 	add.w	r3, r7, #1760	; 0x6e0
 800b708:	ed93 7b02 	vldr	d7, [r3, #8]
 800b70c:	ed1f 4b38 	vldr	d4, [pc, #-224]	; 800b630 <G_q+0x9068>
 800b710:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b714:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t144.re * 3.061616997868383E-17 + t144.im * 0.0) - (t145.re *
 800b718:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b71c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b720:	443b      	add	r3, r7
 800b722:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800b726:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b72a:	ed93 6b00 	vldr	d6, [r3]
 800b72e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800b732:	443b      	add	r3, r7
 800b734:	ed93 7b00 	vldr	d7, [r3]
 800b738:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b73c:	ed1f 6b42 	vldr	d6, [pc, #-264]	; 800b638 <G_q+0x9070>
 800b740:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b744:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b748:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800b74c:	f241 3348 	movw	r3, #4936	; 0x1348
 800b750:	443b      	add	r3, r7
 800b752:	ed93 6b00 	vldr	d6, [r3]
 800b756:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800b75a:	443b      	add	r3, r7
 800b75c:	ed93 7b00 	vldr	d7, [r3]
 800b760:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b764:	f241 3348 	movw	r3, #4936	; 0x1348
 800b768:	443b      	add	r3, r7
 800b76a:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t152.re * 3.061616997868383E-17 + t153.re * 3.061616997868383E-17;
 800b76e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b772:	ed93 7b00 	vldr	d7, [r3]
 800b776:	ed1f 6b4e 	vldr	d6, [pc, #-312]	; 800b640 <G_q+0x9078>
 800b77a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b77e:	4be2      	ldr	r3, [pc, #904]	; (800bb08 <G_q+0x9540>)
 800b780:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b784:	443a      	add	r2, r7
 800b786:	4413      	add	r3, r2
 800b788:	ed93 7b00 	vldr	d7, [r3]
 800b78c:	ed9f 5bda 	vldr	d5, [pc, #872]	; 800baf8 <G_q+0x9530>
 800b790:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b794:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800b798:	443b      	add	r3, r7
 800b79a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b79e:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t152.im * 3.061616997868383E-17 + t153.im * 3.061616997868383E-17;
 800b7a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800b7a6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7aa:	ed9f 6bd3 	vldr	d6, [pc, #844]	; 800baf8 <G_q+0x9530>
 800b7ae:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b7b2:	4bd5      	ldr	r3, [pc, #852]	; (800bb08 <G_q+0x9540>)
 800b7b4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800b7b8:	443a      	add	r2, r7
 800b7ba:	4413      	add	r3, r2
 800b7bc:	ed93 7b02 	vldr	d7, [r3, #8]
 800b7c0:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800baf8 <G_q+0x9530>
 800b7c4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b7c8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800b7cc:	f241 3310 	movw	r3, #4880	; 0x1310
 800b7d0:	443b      	add	r3, r7
 800b7d2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (t13_re * t13_im - t55_re * t16_re) - (t20_im * t16_im - t12_re *
 800b7d6:	f241 3378 	movw	r3, #4984	; 0x1378
 800b7da:	443b      	add	r3, r7
 800b7dc:	ed93 6b00 	vldr	d6, [r3]
 800b7e0:	f241 3370 	movw	r3, #4976	; 0x1370
 800b7e4:	443b      	add	r3, r7
 800b7e6:	ed93 7b00 	vldr	d7, [r3]
 800b7ea:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b7ee:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b7f2:	ed93 5b00 	vldr	d5, [r3]
 800b7f6:	f241 3368 	movw	r3, #4968	; 0x1368
 800b7fa:	443b      	add	r3, r7
 800b7fc:	ed93 7b00 	vldr	d7, [r3]
 800b800:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b804:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b808:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b80c:	ed93 5b00 	vldr	d5, [r3]
 800b810:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b814:	ed93 7b00 	vldr	d7, [r3]
 800b818:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b81c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b820:	443b      	add	r3, r7
 800b822:	ed93 4b00 	vldr	d4, [r3]
 800b826:	f241 3348 	movw	r3, #4936	; 0x1348
 800b82a:	443b      	add	r3, r7
 800b82c:	ed93 7b00 	vldr	d7, [r3]
 800b830:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b834:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b838:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800b83c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b840:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t55_re = (t13_re * t16_re + t55_re * t13_im) - (t20_im * t20_re + t12_re *
 800b844:	f241 3378 	movw	r3, #4984	; 0x1378
 800b848:	443b      	add	r3, r7
 800b84a:	ed93 6b00 	vldr	d6, [r3]
 800b84e:	f241 3368 	movw	r3, #4968	; 0x1368
 800b852:	443b      	add	r3, r7
 800b854:	ed93 7b00 	vldr	d7, [r3]
 800b858:	ee26 6b07 	vmul.f64	d6, d6, d7
 800b85c:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b860:	ed93 5b00 	vldr	d5, [r3]
 800b864:	f241 3370 	movw	r3, #4976	; 0x1370
 800b868:	443b      	add	r3, r7
 800b86a:	ed93 7b00 	vldr	d7, [r3]
 800b86e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800b872:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b876:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800b87a:	ed93 5b00 	vldr	d5, [r3]
 800b87e:	f241 3348 	movw	r3, #4936	; 0x1348
 800b882:	443b      	add	r3, r7
 800b884:	ed93 7b00 	vldr	d7, [r3]
 800b888:	ee25 5b07 	vmul.f64	d5, d5, d7
 800b88c:	f241 3388 	movw	r3, #5000	; 0x1388
 800b890:	443b      	add	r3, r7
 800b892:	ed93 4b00 	vldr	d4, [r3]
 800b896:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b89a:	ed93 7b00 	vldr	d7, [r3]
 800b89e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b8a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b8a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8aa:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800b8ae:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t16_re = (t126.re * 0.0 - t126.im * 0.5) - (t127.re * 0.0 - t127.im * 0.5);
 800b8b2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b8b6:	ed93 7b00 	vldr	d7, [r3]
 800b8ba:	ed9f 6b91 	vldr	d6, [pc, #580]	; 800bb00 <G_q+0x9538>
 800b8be:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b8c2:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b8c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8ca:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b8ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b8d2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b8d6:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b8da:	ed93 7b00 	vldr	d7, [r3]
 800b8de:	ed9f 5b88 	vldr	d5, [pc, #544]	; 800bb00 <G_q+0x9538>
 800b8e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b8e6:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b8ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800b8ee:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b8f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b8f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b8fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b8fe:	f241 3368 	movw	r3, #4968	; 0x1368
 800b902:	443b      	add	r3, r7
 800b904:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t126.re * 0.5 + t126.im * 0.0) - (t127.re * 0.5 + t127.im * 0.0);
 800b908:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b90c:	ed93 7b00 	vldr	d7, [r3]
 800b910:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b914:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b918:	f507 6359 	add.w	r3, r7, #3472	; 0xd90
 800b91c:	ed93 7b02 	vldr	d7, [r3, #8]
 800b920:	ed9f 5b77 	vldr	d5, [pc, #476]	; 800bb00 <G_q+0x9538>
 800b924:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b928:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b92c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b930:	ed93 7b00 	vldr	d7, [r3]
 800b934:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b938:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b93c:	f507 635a 	add.w	r3, r7, #3488	; 0xda0
 800b940:	ed93 7b02 	vldr	d7, [r3, #8]
 800b944:	ed9f 4b6e 	vldr	d4, [pc, #440]	; 800bb00 <G_q+0x9538>
 800b948:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b94c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b950:	f241 2350 	movw	r3, #4688	; 0x1250
 800b954:	443b      	add	r3, r7
 800b956:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b95a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t128.re * 0.0 - t128.im * 0.5) - (t129.re * 0.0 - t129.im * 0.5);
 800b95e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b962:	ed93 7b00 	vldr	d7, [r3]
 800b966:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800bb00 <G_q+0x9538>
 800b96a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b96e:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b972:	ed93 7b02 	vldr	d7, [r3, #8]
 800b976:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b97a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b97e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800b982:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b986:	ed93 7b00 	vldr	d7, [r3]
 800b98a:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800bb00 <G_q+0x9538>
 800b98e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b992:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b996:	ed93 7b02 	vldr	d7, [r3, #8]
 800b99a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800b99e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b9a2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800b9a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b9aa:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800b9ae:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t128.re * 0.5 + t128.im * 0.0) - (t129.re * 0.5 + t129.im * 0.0);
 800b9b2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b9b6:	ed93 7b00 	vldr	d7, [r3]
 800b9ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b9be:	ee27 6b06 	vmul.f64	d6, d7, d6
 800b9c2:	f507 63ca 	add.w	r3, r7, #1616	; 0x650
 800b9c6:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9ca:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 800bb00 <G_q+0x9538>
 800b9ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b9d2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800b9d6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b9da:	ed93 7b00 	vldr	d7, [r3]
 800b9de:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800b9e2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800b9e6:	f507 63cc 	add.w	r3, r7, #1632	; 0x660
 800b9ea:	ed93 7b02 	vldr	d7, [r3, #8]
 800b9ee:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800bb00 <G_q+0x9538>
 800b9f2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800b9f6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800b9fa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b9fe:	f241 3348 	movw	r3, #4936	; 0x1348
 800ba02:	443b      	add	r3, r7
 800ba04:	ed83 7b00 	vstr	d7, [r3]
  if (t130.im == 0.0) {
 800ba08:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800ba0c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ba10:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba18:	d115      	bne.n	800ba46 <G_q+0x947e>
    t20_im = t130.re / 2.0;
 800ba1a:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800ba1e:	ed93 6b00 	vldr	d6, [r3]
 800ba22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba2a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ba2e:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800ba32:	f04f 0300 	mov.w	r3, #0
 800ba36:	f04f 0400 	mov.w	r4, #0
 800ba3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba3e:	443a      	add	r2, r7
 800ba40:	e9c2 3400 	strd	r3, r4, [r2]
 800ba44:	e037      	b.n	800bab6 <G_q+0x94ee>
  } else if (t130.re == 0.0) {
 800ba46:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800ba4a:	ed93 7b00 	vldr	d7, [r3]
 800ba4e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ba52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba56:	d115      	bne.n	800ba84 <G_q+0x94bc>
    t20_im = 0.0;
 800ba58:	f04f 0300 	mov.w	r3, #0
 800ba5c:	f04f 0400 	mov.w	r4, #0
 800ba60:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800ba64:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t130.im / 2.0;
 800ba68:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800ba6c:	ed93 6b02 	vldr	d6, [r3, #8]
 800ba70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba78:	f241 3388 	movw	r3, #5000	; 0x1388
 800ba7c:	443b      	add	r3, r7
 800ba7e:	ed83 7b00 	vstr	d7, [r3]
 800ba82:	e018      	b.n	800bab6 <G_q+0x94ee>
  } else {
    t20_im = t130.re / 2.0;
 800ba84:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800ba88:	ed93 6b00 	vldr	d6, [r3]
 800ba8c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ba90:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ba94:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ba98:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t130.im / 2.0;
 800ba9c:	f507 63ce 	add.w	r3, r7, #1648	; 0x670
 800baa0:	ed93 6b02 	vldr	d6, [r3, #8]
 800baa4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800baa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800baac:	f241 3388 	movw	r3, #5000	; 0x1388
 800bab0:	443b      	add	r3, r7
 800bab2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t131.im == 0.0) {
 800bab6:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800baba:	ed93 7b02 	vldr	d7, [r3, #8]
 800babe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac6:	d121      	bne.n	800bb0c <G_q+0x9544>
    t34_re = t131.re / 2.0;
 800bac8:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bacc:	ed93 6b00 	vldr	d6, [r3]
 800bad0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bad4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bad8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800badc:	443b      	add	r3, r7
 800bade:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bae2:	f04f 0300 	mov.w	r3, #0
 800bae6:	f04f 0400 	mov.w	r4, #0
 800baea:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800baee:	443a      	add	r2, r7
 800baf0:	e9c2 3400 	strd	r3, r4, [r2]
 800baf4:	e044      	b.n	800bb80 <G_q+0x95b8>
 800baf6:	bf00      	nop
 800baf8:	33145c07 	.word	0x33145c07
 800bafc:	3c81a626 	.word	0x3c81a626
	...
 800bb08:	ffffee70 	.word	0xffffee70
  } else if (t131.re == 0.0) {
 800bb0c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bb10:	ed93 7b00 	vldr	d7, [r3]
 800bb14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb1c:	d116      	bne.n	800bb4c <G_q+0x9584>
    t34_re = 0.0;
 800bb1e:	f04f 0300 	mov.w	r3, #0
 800bb22:	f04f 0400 	mov.w	r4, #0
 800bb26:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800bb2a:	443a      	add	r2, r7
 800bb2c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t131.im / 2.0;
 800bb30:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bb34:	ed93 6b02 	vldr	d6, [r3, #8]
 800bb38:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb3c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb40:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bb44:	443b      	add	r3, r7
 800bb46:	ed83 7b00 	vstr	d7, [r3]
 800bb4a:	e019      	b.n	800bb80 <G_q+0x95b8>
  } else {
    t34_re = t131.re / 2.0;
 800bb4c:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bb50:	ed93 6b00 	vldr	d6, [r3]
 800bb54:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb58:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb5c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bb60:	443b      	add	r3, r7
 800bb62:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t131.im / 2.0;
 800bb66:	f507 63d0 	add.w	r3, r7, #1664	; 0x680
 800bb6a:	ed93 6b02 	vldr	d6, [r3, #8]
 800bb6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bb76:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bb7a:	443b      	add	r3, r7
 800bb7c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t132.im == 0.0) {
 800bb80:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bb84:	ed93 7b02 	vldr	d7, [r3, #8]
 800bb88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bb8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb90:	d115      	bne.n	800bbbe <G_q+0x95f6>
    t12_im = t132.re / 2.0;
 800bb92:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bb96:	ed93 6b00 	vldr	d6, [r3]
 800bb9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bb9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bba2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bba6:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800bbaa:	f04f 0300 	mov.w	r3, #0
 800bbae:	f04f 0400 	mov.w	r4, #0
 800bbb2:	f241 3238 	movw	r2, #4920	; 0x1338
 800bbb6:	443a      	add	r2, r7
 800bbb8:	e9c2 3400 	strd	r3, r4, [r2]
 800bbbc:	e037      	b.n	800bc2e <G_q+0x9666>
  } else if (t132.re == 0.0) {
 800bbbe:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bbc2:	ed93 7b00 	vldr	d7, [r3]
 800bbc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bbca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbce:	d115      	bne.n	800bbfc <G_q+0x9634>
    t12_im = 0.0;
 800bbd0:	f04f 0300 	mov.w	r3, #0
 800bbd4:	f04f 0400 	mov.w	r4, #0
 800bbd8:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800bbdc:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t132.im / 2.0;
 800bbe0:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bbe4:	ed93 6b02 	vldr	d6, [r3, #8]
 800bbe8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bbec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bbf0:	f241 3338 	movw	r3, #4920	; 0x1338
 800bbf4:	443b      	add	r3, r7
 800bbf6:	ed83 7b00 	vstr	d7, [r3]
 800bbfa:	e018      	b.n	800bc2e <G_q+0x9666>
  } else {
    t12_im = t132.re / 2.0;
 800bbfc:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bc00:	ed93 6b00 	vldr	d6, [r3]
 800bc04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bc08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bc0c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bc10:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t132.im / 2.0;
 800bc14:	f507 635b 	add.w	r3, r7, #3504	; 0xdb0
 800bc18:	ed93 6b02 	vldr	d6, [r3, #8]
 800bc1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bc20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bc24:	f241 3338 	movw	r3, #4920	; 0x1338
 800bc28:	443b      	add	r3, r7
 800bc2a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t133.im == 0.0) {
 800bc2e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bc32:	ed93 7b02 	vldr	d7, [r3, #8]
 800bc36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	d116      	bne.n	800bc6e <G_q+0x96a6>
    t13_re = t133.re / 2.0;
 800bc40:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bc44:	ed93 6b00 	vldr	d6, [r3]
 800bc48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bc4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bc50:	f241 3378 	movw	r3, #4984	; 0x1378
 800bc54:	443b      	add	r3, r7
 800bc56:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800bc5a:	f04f 0300 	mov.w	r3, #0
 800bc5e:	f04f 0400 	mov.w	r4, #0
 800bc62:	f241 3270 	movw	r2, #4976	; 0x1370
 800bc66:	443a      	add	r2, r7
 800bc68:	e9c2 3400 	strd	r3, r4, [r2]
 800bc6c:	e039      	b.n	800bce2 <G_q+0x971a>
  } else if (t133.re == 0.0) {
 800bc6e:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bc72:	ed93 7b00 	vldr	d7, [r3]
 800bc76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc7e:	d116      	bne.n	800bcae <G_q+0x96e6>
    t13_re = 0.0;
 800bc80:	f04f 0300 	mov.w	r3, #0
 800bc84:	f04f 0400 	mov.w	r4, #0
 800bc88:	f241 3278 	movw	r2, #4984	; 0x1378
 800bc8c:	443a      	add	r2, r7
 800bc8e:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t133.im / 2.0;
 800bc92:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bc96:	ed93 6b02 	vldr	d6, [r3, #8]
 800bc9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bc9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bca2:	f241 3370 	movw	r3, #4976	; 0x1370
 800bca6:	443b      	add	r3, r7
 800bca8:	ed83 7b00 	vstr	d7, [r3]
 800bcac:	e019      	b.n	800bce2 <G_q+0x971a>
  } else {
    t13_re = t133.re / 2.0;
 800bcae:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bcb2:	ed93 6b00 	vldr	d6, [r3]
 800bcb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bcba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcbe:	f241 3378 	movw	r3, #4984	; 0x1378
 800bcc2:	443b      	add	r3, r7
 800bcc4:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t133.im / 2.0;
 800bcc8:	f507 635c 	add.w	r3, r7, #3520	; 0xdc0
 800bccc:	ed93 6b02 	vldr	d6, [r3, #8]
 800bcd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bcd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bcd8:	f241 3370 	movw	r3, #4976	; 0x1370
 800bcdc:	443b      	add	r3, r7
 800bcde:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800bce2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bce6:	ed93 6b00 	vldr	d6, [r3]
 800bcea:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bcee:	443b      	add	r3, r7
 800bcf0:	ed93 7b00 	vldr	d7, [r3]
 800bcf4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bcf8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bcfc:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800bd00:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd04:	443b      	add	r3, r7
 800bd06:	ed93 6b00 	vldr	d6, [r3]
 800bd0a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800bd0e:	443b      	add	r3, r7
 800bd10:	ed93 7b00 	vldr	d7, [r3]
 800bd14:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bd18:	f241 3388 	movw	r3, #5000	; 0x1388
 800bd1c:	443b      	add	r3, r7
 800bd1e:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800bd22:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bd26:	ed93 6b00 	vldr	d6, [r3]
 800bd2a:	f241 3378 	movw	r3, #4984	; 0x1378
 800bd2e:	443b      	add	r3, r7
 800bd30:	ed93 7b00 	vldr	d7, [r3]
 800bd34:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bd38:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 800c040 <G_q+0x9a78>
 800bd3c:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bd40:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bd44:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800bd48:	f241 3338 	movw	r3, #4920	; 0x1338
 800bd4c:	443b      	add	r3, r7
 800bd4e:	ed93 6b00 	vldr	d6, [r3]
 800bd52:	f241 3370 	movw	r3, #4976	; 0x1370
 800bd56:	443b      	add	r3, r7
 800bd58:	ed93 7b00 	vldr	d7, [r3]
 800bd5c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bd60:	f241 3338 	movw	r3, #4920	; 0x1338
 800bd64:	443b      	add	r3, r7
 800bd66:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800bd6a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bd6e:	ed93 7b00 	vldr	d7, [r3]
 800bd72:	ed9f 6bb5 	vldr	d6, [pc, #724]	; 800c048 <G_q+0x9a80>
 800bd76:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bd7a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bd7e:	ed93 7b02 	vldr	d7, [r3, #8]
 800bd82:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800c050 <G_q+0x9a88>
 800bd86:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bd8a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800bd8e:	4bb2      	ldr	r3, [pc, #712]	; (800c058 <G_q+0x9a90>)
 800bd90:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bd94:	443a      	add	r2, r7
 800bd96:	4413      	add	r3, r2
 800bd98:	ed93 7b00 	vldr	d7, [r3]
 800bd9c:	ed9f 5baa 	vldr	d5, [pc, #680]	; 800c048 <G_q+0x9a80>
 800bda0:	ee27 5b05 	vmul.f64	d5, d7, d5
    t135.im * 3.061616997868383E-17);
 800bda4:	4bac      	ldr	r3, [pc, #688]	; (800c058 <G_q+0x9a90>)
 800bda6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bdaa:	443a      	add	r2, r7
 800bdac:	4413      	add	r3, r2
 800bdae:	ed93 7b02 	vldr	d7, [r3, #8]
 800bdb2:	ed9f 4ba7 	vldr	d4, [pc, #668]	; 800c050 <G_q+0x9a88>
 800bdb6:	ee27 7b04 	vmul.f64	d7, d7, d4
  t85_im = (t134.re * 0.0 - t134.im * 3.061616997868383E-17) - (t135.re * 0.0 -
 800bdba:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bdbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bdc2:	f241 3318 	movw	r3, #4888	; 0x1318
 800bdc6:	443b      	add	r3, r7
 800bdc8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800bdcc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bdd0:	ed93 7b00 	vldr	d7, [r3]
 800bdd4:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800c050 <G_q+0x9a88>
 800bdd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800bddc:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800bde0:	ed93 7b02 	vldr	d7, [r3, #8]
 800bde4:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800c048 <G_q+0x9a80>
 800bde8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800bdec:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bdf0:	4b99      	ldr	r3, [pc, #612]	; (800c058 <G_q+0x9a90>)
 800bdf2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800bdf6:	443a      	add	r2, r7
 800bdf8:	4413      	add	r3, r2
 800bdfa:	ed93 7b00 	vldr	d7, [r3]
 800bdfe:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800c050 <G_q+0x9a88>
 800be02:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t135.im * 0.0);
 800be06:	4b94      	ldr	r3, [pc, #592]	; (800c058 <G_q+0x9a90>)
 800be08:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800be0c:	443a      	add	r2, r7
 800be0e:	4413      	add	r3, r2
 800be10:	ed93 7b02 	vldr	d7, [r3, #8]
 800be14:	ed9f 4b8c 	vldr	d4, [pc, #560]	; 800c048 <G_q+0x9a80>
 800be18:	ee27 7b04 	vmul.f64	d7, d7, d4
 800be1c:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = (t134.re * 3.061616997868383E-17 + t134.im * 0.0) - (t135.re *
 800be20:	ee36 7b47 	vsub.f64	d7, d6, d7
 800be24:	f241 3330 	movw	r3, #4912	; 0x1330
 800be28:	443b      	add	r3, r7
 800be2a:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t16_re * t16_im - t60_re * t20_re) + (t20_im * t12_im - t12_re *
 800be2e:	f241 3368 	movw	r3, #4968	; 0x1368
 800be32:	443b      	add	r3, r7
 800be34:	ed93 6b00 	vldr	d6, [r3]
 800be38:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800be3c:	ed93 7b00 	vldr	d7, [r3]
 800be40:	ee26 6b07 	vmul.f64	d6, d6, d7
 800be44:	f241 2350 	movw	r3, #4688	; 0x1250
 800be48:	443b      	add	r3, r7
 800be4a:	ed93 5b00 	vldr	d5, [r3]
 800be4e:	f241 3348 	movw	r3, #4936	; 0x1348
 800be52:	443b      	add	r3, r7
 800be54:	ed93 7b00 	vldr	d7, [r3]
 800be58:	ee25 7b07 	vmul.f64	d7, d5, d7
 800be5c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800be60:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800be64:	ed93 5b00 	vldr	d5, [r3]
 800be68:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800be6c:	ed93 7b00 	vldr	d7, [r3]
 800be70:	ee25 5b07 	vmul.f64	d5, d5, d7
 800be74:	f241 3388 	movw	r3, #5000	; 0x1388
 800be78:	443b      	add	r3, r7
 800be7a:	ed93 4b00 	vldr	d4, [r3]
 800be7e:	f241 3338 	movw	r3, #4920	; 0x1338
 800be82:	443b      	add	r3, r7
 800be84:	ed93 7b00 	vldr	d7, [r3]
 800be88:	ee24 7b07 	vmul.f64	d7, d4, d7
 800be8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800be90:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800be94:	ee36 7b07 	vadd.f64	d7, d6, d7
 800be98:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t60_re = (t16_re * t20_re + t60_re * t16_im) + (t20_im * b_t10_re + t12_re *
 800be9c:	f241 3368 	movw	r3, #4968	; 0x1368
 800bea0:	443b      	add	r3, r7
 800bea2:	ed93 6b00 	vldr	d6, [r3]
 800bea6:	f241 3348 	movw	r3, #4936	; 0x1348
 800beaa:	443b      	add	r3, r7
 800beac:	ed93 7b00 	vldr	d7, [r3]
 800beb0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800beb4:	f241 2350 	movw	r3, #4688	; 0x1250
 800beb8:	443b      	add	r3, r7
 800beba:	ed93 5b00 	vldr	d5, [r3]
 800bebe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800bec2:	ed93 7b00 	vldr	d7, [r3]
 800bec6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800beca:	ee36 6b07 	vadd.f64	d6, d6, d7
 800bece:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800bed2:	ed93 5b00 	vldr	d5, [r3]
 800bed6:	f241 3338 	movw	r3, #4920	; 0x1338
 800beda:	443b      	add	r3, r7
 800bedc:	ed93 7b00 	vldr	d7, [r3]
 800bee0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800bee4:	f241 3388 	movw	r3, #5000	; 0x1388
 800bee8:	443b      	add	r3, r7
 800beea:	ed93 4b00 	vldr	d4, [r3]
 800beee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800bef2:	ed93 7b00 	vldr	d7, [r3]
 800bef6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800befa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800befe:	f241 2350 	movw	r3, #4688	; 0x1250
 800bf02:	443b      	add	r3, r7
 800bf04:	ee36 7b07 	vadd.f64	d7, d6, d7
 800bf08:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  if (t142.im == 0.0) {
 800bf0c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bf10:	ed93 7b02 	vldr	d7, [r3, #8]
 800bf14:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	d116      	bne.n	800bf4c <G_q+0x9984>
    t13_re = t142.re / 2.0;
 800bf1e:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bf22:	ed93 6b00 	vldr	d6, [r3]
 800bf26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf2e:	f241 3378 	movw	r3, #4984	; 0x1378
 800bf32:	443b      	add	r3, r7
 800bf34:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800bf38:	f04f 0300 	mov.w	r3, #0
 800bf3c:	f04f 0400 	mov.w	r4, #0
 800bf40:	f241 3270 	movw	r2, #4976	; 0x1370
 800bf44:	443a      	add	r2, r7
 800bf46:	e9c2 3400 	strd	r3, r4, [r2]
 800bf4a:	e039      	b.n	800bfc0 <G_q+0x99f8>
  } else if (t142.re == 0.0) {
 800bf4c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bf50:	ed93 7b00 	vldr	d7, [r3]
 800bf54:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bf58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf5c:	d116      	bne.n	800bf8c <G_q+0x99c4>
    t13_re = 0.0;
 800bf5e:	f04f 0300 	mov.w	r3, #0
 800bf62:	f04f 0400 	mov.w	r4, #0
 800bf66:	f241 3278 	movw	r2, #4984	; 0x1378
 800bf6a:	443a      	add	r2, r7
 800bf6c:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t142.im / 2.0;
 800bf70:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bf74:	ed93 6b02 	vldr	d6, [r3, #8]
 800bf78:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf7c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf80:	f241 3370 	movw	r3, #4976	; 0x1370
 800bf84:	443b      	add	r3, r7
 800bf86:	ed83 7b00 	vstr	d7, [r3]
 800bf8a:	e019      	b.n	800bfc0 <G_q+0x99f8>
  } else {
    t13_re = t142.re / 2.0;
 800bf8c:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bf90:	ed93 6b00 	vldr	d6, [r3]
 800bf94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bf98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bf9c:	f241 3378 	movw	r3, #4984	; 0x1378
 800bfa0:	443b      	add	r3, r7
 800bfa2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t142.im / 2.0;
 800bfa6:	f507 635f 	add.w	r3, r7, #3568	; 0xdf0
 800bfaa:	ed93 6b02 	vldr	d6, [r3, #8]
 800bfae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bfb2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bfb6:	f241 3370 	movw	r3, #4976	; 0x1370
 800bfba:	443b      	add	r3, r7
 800bfbc:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t143.im == 0.0) {
 800bfc0:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bfc4:	ed93 7b02 	vldr	d7, [r3, #8]
 800bfc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bfcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfd0:	d116      	bne.n	800c000 <G_q+0x9a38>
    t34_re = t143.re / 2.0;
 800bfd2:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800bfd6:	ed93 6b00 	vldr	d6, [r3]
 800bfda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800bfde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800bfe2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800bfe6:	443b      	add	r3, r7
 800bfe8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800bfec:	f04f 0300 	mov.w	r3, #0
 800bff0:	f04f 0400 	mov.w	r4, #0
 800bff4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800bff8:	443a      	add	r2, r7
 800bffa:	e9c2 3400 	strd	r3, r4, [r2]
 800bffe:	e047      	b.n	800c090 <G_q+0x9ac8>
  } else if (t143.re == 0.0) {
 800c000:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c004:	ed93 7b00 	vldr	d7, [r3]
 800c008:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c010:	d124      	bne.n	800c05c <G_q+0x9a94>
    t34_re = 0.0;
 800c012:	f04f 0300 	mov.w	r3, #0
 800c016:	f04f 0400 	mov.w	r4, #0
 800c01a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c01e:	443a      	add	r2, r7
 800c020:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t143.im / 2.0;
 800c024:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c028:	ed93 6b02 	vldr	d6, [r3, #8]
 800c02c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c030:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c034:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c038:	443b      	add	r3, r7
 800c03a:	ed83 7b00 	vstr	d7, [r3]
 800c03e:	e027      	b.n	800c090 <G_q+0x9ac8>
 800c040:	858a5d48 	.word	0x858a5d48
 800c044:	394377ce 	.word	0x394377ce
	...
 800c050:	33145c07 	.word	0x33145c07
 800c054:	3c81a626 	.word	0x3c81a626
 800c058:	ffffee50 	.word	0xffffee50
  } else {
    t34_re = t143.re / 2.0;
 800c05c:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c060:	ed93 6b00 	vldr	d6, [r3]
 800c064:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c068:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c06c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c070:	443b      	add	r3, r7
 800c072:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t143.im / 2.0;
 800c076:	f507 6360 	add.w	r3, r7, #3584	; 0xe00
 800c07a:	ed93 6b02 	vldr	d6, [r3, #8]
 800c07e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c082:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c086:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c08a:	443b      	add	r3, r7
 800c08c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t140.re * 0.0 - t140.im * 0.5) - (t141.re * 0.0 - t141.im * 0.5);
 800c090:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c094:	ed93 7b00 	vldr	d7, [r3]
 800c098:	ed9f 6bdf 	vldr	d6, [pc, #892]	; 800c418 <G_q+0x9e50>
 800c09c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c0a0:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c0a4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0a8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c0ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c0b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c0b4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c0b8:	ed93 7b00 	vldr	d7, [r3]
 800c0bc:	ed9f 5bd6 	vldr	d5, [pc, #856]	; 800c418 <G_q+0x9e50>
 800c0c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c0c4:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c0c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0cc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c0d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c0d4:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c0d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c0dc:	f241 3368 	movw	r3, #4968	; 0x1368
 800c0e0:	443b      	add	r3, r7
 800c0e2:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t140.re * 0.5 + t140.im * 0.0) - (t141.re * 0.5 + t141.im * 0.0);
 800c0e6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c0ea:	ed93 7b00 	vldr	d7, [r3]
 800c0ee:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c0f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c0f6:	f507 63d6 	add.w	r3, r7, #1712	; 0x6b0
 800c0fa:	ed93 7b02 	vldr	d7, [r3, #8]
 800c0fe:	ed9f 5bc6 	vldr	d5, [pc, #792]	; 800c418 <G_q+0x9e50>
 800c102:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c106:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c10a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c10e:	ed93 7b00 	vldr	d7, [r3]
 800c112:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c116:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c11a:	f507 63d8 	add.w	r3, r7, #1728	; 0x6c0
 800c11e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c122:	ed9f 4bbd 	vldr	d4, [pc, #756]	; 800c418 <G_q+0x9e50>
 800c126:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c12a:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c12e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c132:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c136:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800c13a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c13e:	443b      	add	r3, r7
 800c140:	ed93 6b00 	vldr	d6, [r3]
 800c144:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c148:	443b      	add	r3, r7
 800c14a:	ed93 7b00 	vldr	d7, [r3]
 800c14e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c152:	ed9f 6bad 	vldr	d6, [pc, #692]	; 800c408 <G_q+0x9e40>
 800c156:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c15a:	f241 3378 	movw	r3, #4984	; 0x1378
 800c15e:	443b      	add	r3, r7
 800c160:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800c164:	f241 3370 	movw	r3, #4976	; 0x1370
 800c168:	443b      	add	r3, r7
 800c16a:	ed93 6b00 	vldr	d6, [r3]
 800c16e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c172:	443b      	add	r3, r7
 800c174:	ed93 7b00 	vldr	d7, [r3]
 800c178:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c17c:	f241 3370 	movw	r3, #4976	; 0x1370
 800c180:	443b      	add	r3, r7
 800c182:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t55_im;
 800c186:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800c18a:	443b      	add	r3, r7
 800c18c:	ed93 6b00 	vldr	d6, [r3]
 800c190:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800c194:	443b      	add	r3, r7
 800c196:	ed93 7b00 	vldr	d7, [r3]
 800c19a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c19e:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800c1a2:	443b      	add	r3, r7
 800c1a4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re += t70_re;
 800c1a8:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800c1ac:	443b      	add	r3, r7
 800c1ae:	f241 22f0 	movw	r2, #4848	; 0x12f0
 800c1b2:	443a      	add	r2, r7
 800c1b4:	ed92 6b00 	vldr	d6, [r2]
 800c1b8:	ed93 7b00 	vldr	d7, [r3]
 800c1bc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c1c0:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800c1c4:	443b      	add	r3, r7
 800c1c6:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c1ca:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c1ce:	443a      	add	r2, r7
 800c1d0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c1d4:	443b      	add	r3, r7
 800c1d6:	ed92 6b00 	vldr	d6, [r2]
 800c1da:	ed93 7b00 	vldr	d7, [r3]
 800c1de:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c1e2:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c1e6:	443b      	add	r3, r7
 800c1e8:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c1ec:	443a      	add	r2, r7
 800c1ee:	ed92 5b00 	vldr	d5, [r2]
 800c1f2:	ed93 7b00 	vldr	d7, [r3]
 800c1f6:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c1fa:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c1fe:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800c202:	443a      	add	r2, r7
 800c204:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c208:	ed92 5b00 	vldr	d5, [r2]
 800c20c:	ed93 7b00 	vldr	d7, [r3]
 800c210:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c214:	f241 3310 	movw	r3, #4880	; 0x1310
 800c218:	443b      	add	r3, r7
 800c21a:	ed93 4b00 	vldr	d4, [r3]
 800c21e:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c222:	ed93 7b00 	vldr	d7, [r3]
 800c226:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c22a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c22e:	ee36 6b47 	vsub.f64	d6, d6, d7
              t55_re)) + (t85_im * t58_im - t23_re * t60_re)) - (t16_re * t13_re
 800c232:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c236:	f241 3218 	movw	r2, #4888	; 0x1318
 800c23a:	443a      	add	r2, r7
 800c23c:	ed92 5b00 	vldr	d5, [r2]
 800c240:	ed93 7b00 	vldr	d7, [r3]
 800c244:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c248:	f241 2350 	movw	r3, #4688	; 0x1250
 800c24c:	443b      	add	r3, r7
 800c24e:	f241 3230 	movw	r2, #4912	; 0x1330
 800c252:	443a      	add	r2, r7
 800c254:	ed92 4b00 	vldr	d4, [r2]
 800c258:	ed93 7b00 	vldr	d7, [r3]
 800c25c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c260:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c264:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c268:	f241 3368 	movw	r3, #4968	; 0x1368
 800c26c:	443b      	add	r3, r7
 800c26e:	ed93 5b00 	vldr	d5, [r3]
 800c272:	f241 3378 	movw	r3, #4984	; 0x1378
 800c276:	443b      	add	r3, r7
 800c278:	ed93 7b00 	vldr	d7, [r3]
 800c27c:	ee25 5b07 	vmul.f64	d5, d5, d7
    - t16_im * t13_im);
 800c280:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c284:	ed93 4b00 	vldr	d4, [r3]
 800c288:	f241 3370 	movw	r3, #4976	; 0x1370
 800c28c:	443b      	add	r3, r7
 800c28e:	ed93 7b00 	vldr	d7, [r3]
 800c292:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c296:	ee35 7b47 	vsub.f64	d7, d5, d7
  t55_im = (((t70_im * t74_re - b_t54_im * t74_im) - (t76_re * t72_re - t3_im *
 800c29a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c29e:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800c2a2:	443b      	add	r3, r7
 800c2a4:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c2a8:	f241 22c8 	movw	r2, #4808	; 0x12c8
 800c2ac:	443a      	add	r2, r7
 800c2ae:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c2b2:	443b      	add	r3, r7
 800c2b4:	ed92 6b00 	vldr	d6, [r2]
 800c2b8:	ed93 7b00 	vldr	d7, [r3]
 800c2bc:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c2c0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c2c4:	443b      	add	r3, r7
 800c2c6:	f241 22e8 	movw	r2, #4840	; 0x12e8
 800c2ca:	443a      	add	r2, r7
 800c2cc:	ed92 5b00 	vldr	d5, [r2]
 800c2d0:	ed93 7b00 	vldr	d7, [r3]
 800c2d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800c2d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c2dc:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c2e0:	443b      	add	r3, r7
 800c2e2:	ed93 5b00 	vldr	d5, [r3]
 800c2e6:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800c2ea:	ed93 7b00 	vldr	d7, [r3]
 800c2ee:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c2f2:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c2f6:	f241 3210 	movw	r2, #4880	; 0x1310
 800c2fa:	443a      	add	r2, r7
 800c2fc:	ed92 4b00 	vldr	d4, [r2]
 800c300:	ed93 7b00 	vldr	d7, [r3]
 800c304:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c308:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c30c:	ee36 6b47 	vsub.f64	d6, d6, d7
    t72_re)) + (t85_im * t60_re + t23_re * t58_im)) - (t16_re * t13_im + t16_im *
 800c310:	f241 2350 	movw	r3, #4688	; 0x1250
 800c314:	443b      	add	r3, r7
 800c316:	f241 3218 	movw	r2, #4888	; 0x1318
 800c31a:	443a      	add	r2, r7
 800c31c:	ed92 5b00 	vldr	d5, [r2]
 800c320:	ed93 7b00 	vldr	d7, [r3]
 800c324:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c328:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c32c:	f241 3230 	movw	r2, #4912	; 0x1330
 800c330:	443a      	add	r2, r7
 800c332:	ed92 4b00 	vldr	d4, [r2]
 800c336:	ed93 7b00 	vldr	d7, [r3]
 800c33a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c33e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c342:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c346:	f241 3368 	movw	r3, #4968	; 0x1368
 800c34a:	443b      	add	r3, r7
 800c34c:	ed93 5b00 	vldr	d5, [r3]
 800c350:	f241 3370 	movw	r3, #4976	; 0x1370
 800c354:	443b      	add	r3, r7
 800c356:	ed93 7b00 	vldr	d7, [r3]
 800c35a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800c35e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c362:	ed93 4b00 	vldr	d4, [r3]
 800c366:	f241 3378 	movw	r3, #4984	; 0x1378
 800c36a:	443b      	add	r3, r7
 800c36c:	ed93 7b00 	vldr	d7, [r3]
 800c370:	ee24 7b07 	vmul.f64	d7, d4, d7
 800c374:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t54_im = (((t70_im * t74_im + b_t54_im * t74_re) - (t76_re * t55_re + t3_im *
 800c378:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c37c:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800c380:	443b      	add	r3, r7
 800c382:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t170.im == 0.0) {
 800c386:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c38a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c38e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c396:	d115      	bne.n	800c3c4 <G_q+0x9dfc>
    t3_im = t170.re / 2.0;
 800c398:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c39c:	ed93 6b00 	vldr	d6, [r3]
 800c3a0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c3a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c3a8:	f241 3310 	movw	r3, #4880	; 0x1310
 800c3ac:	443b      	add	r3, r7
 800c3ae:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 800c3b2:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c3b6:	f04f 0300 	mov.w	r3, #0
 800c3ba:	f04f 0400 	mov.w	r4, #0
 800c3be:	e9c2 3400 	strd	r3, r4, [r2]
 800c3c2:	e046      	b.n	800c452 <G_q+0x9e8a>
  } else if (t170.re == 0.0) {
 800c3c4:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c3c8:	ed93 7b00 	vldr	d7, [r3]
 800c3cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d4:	d124      	bne.n	800c420 <G_q+0x9e58>
    t3_im = 0.0;
 800c3d6:	f04f 0300 	mov.w	r3, #0
 800c3da:	f04f 0400 	mov.w	r4, #0
 800c3de:	f241 3210 	movw	r2, #4880	; 0x1310
 800c3e2:	443a      	add	r2, r7
 800c3e4:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t170.im / 2.0;
 800c3e8:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c3ec:	ed93 6b02 	vldr	d6, [r3, #8]
 800c3f0:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c3f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c3f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c3fc:	ed83 7b00 	vstr	d7, [r3]
 800c400:	e027      	b.n	800c452 <G_q+0x9e8a>
 800c402:	bf00      	nop
 800c404:	f3af 8000 	nop.w
 800c408:	858a5d48 	.word	0x858a5d48
 800c40c:	394377ce 	.word	0x394377ce
 800c410:	33145c07 	.word	0x33145c07
 800c414:	3c81a626 	.word	0x3c81a626
	...
  } else {
    t3_im = t170.re / 2.0;
 800c420:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c424:	ed93 6b00 	vldr	d6, [r3]
 800c428:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c42c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c430:	f241 3310 	movw	r3, #4880	; 0x1310
 800c434:	443b      	add	r3, r7
 800c436:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t170.im / 2.0;
 800c43a:	f507 636b 	add.w	r3, r7, #3760	; 0xeb0
 800c43e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c442:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c446:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c44a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c44e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t171.im == 0.0) {
 800c452:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c456:	ed93 7b02 	vldr	d7, [r3, #8]
 800c45a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c45e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c462:	d116      	bne.n	800c492 <G_q+0x9eca>
    t34_re = t171.re / 2.0;
 800c464:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c468:	ed93 6b00 	vldr	d6, [r3]
 800c46c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c470:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c474:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c478:	443b      	add	r3, r7
 800c47a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c47e:	f04f 0300 	mov.w	r3, #0
 800c482:	f04f 0400 	mov.w	r4, #0
 800c486:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c48a:	443a      	add	r2, r7
 800c48c:	e9c2 3400 	strd	r3, r4, [r2]
 800c490:	e039      	b.n	800c506 <G_q+0x9f3e>
  } else if (t171.re == 0.0) {
 800c492:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c496:	ed93 7b00 	vldr	d7, [r3]
 800c49a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c49e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a2:	d116      	bne.n	800c4d2 <G_q+0x9f0a>
    t34_re = 0.0;
 800c4a4:	f04f 0300 	mov.w	r3, #0
 800c4a8:	f04f 0400 	mov.w	r4, #0
 800c4ac:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c4b0:	443a      	add	r2, r7
 800c4b2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t171.im / 2.0;
 800c4b6:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c4ba:	ed93 6b02 	vldr	d6, [r3, #8]
 800c4be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4c6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c4ca:	443b      	add	r3, r7
 800c4cc:	ed83 7b00 	vstr	d7, [r3]
 800c4d0:	e019      	b.n	800c506 <G_q+0x9f3e>
  } else {
    t34_re = t171.re / 2.0;
 800c4d2:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c4d6:	ed93 6b00 	vldr	d6, [r3]
 800c4da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4e2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c4e6:	443b      	add	r3, r7
 800c4e8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t171.im / 2.0;
 800c4ec:	f507 636c 	add.w	r3, r7, #3776	; 0xec0
 800c4f0:	ed93 6b02 	vldr	d6, [r3, #8]
 800c4f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c4f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c4fc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c500:	443b      	add	r3, r7
 800c502:	ed83 7b00 	vstr	d7, [r3]
  }

  t74_re = (t168.re * 0.0 - t168.im * 0.5) - (t169.re * 0.0 - t169.im * 0.5);
 800c506:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c50a:	ed93 7b00 	vldr	d7, [r3]
 800c50e:	ed1f 6b3e 	vldr	d6, [pc, #-248]	; 800c418 <G_q+0x9e50>
 800c512:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c516:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c51a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c51e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c522:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c526:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c52a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c52e:	ed93 7b00 	vldr	d7, [r3]
 800c532:	ed1f 5b47 	vldr	d5, [pc, #-284]	; 800c418 <G_q+0x9e50>
 800c536:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c53a:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c53e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c542:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c546:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c54a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c54e:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800c552:	443b      	add	r3, r7
 800c554:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c558:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t168.re * 0.5 + t168.im * 0.0) - (t169.re * 0.5 + t169.im * 0.0);
 800c55c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c560:	ed93 7b00 	vldr	d7, [r3]
 800c564:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c568:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c56c:	f507 63ee 	add.w	r3, r7, #1904	; 0x770
 800c570:	ed93 7b02 	vldr	d7, [r3, #8]
 800c574:	ed1f 5b58 	vldr	d5, [pc, #-352]	; 800c418 <G_q+0x9e50>
 800c578:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c57c:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c580:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c584:	ed93 7b00 	vldr	d7, [r3]
 800c588:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c58c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c590:	f507 63f0 	add.w	r3, r7, #1920	; 0x780
 800c594:	ed93 7b02 	vldr	d7, [r3, #8]
 800c598:	ed1f 4b61 	vldr	d4, [pc, #-388]	; 800c418 <G_q+0x9e50>
 800c59c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c5a0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c5a4:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800c5a8:	443b      	add	r3, r7
 800c5aa:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c5ae:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t3_im + t34_re) + 7.498798913309288E-33;
 800c5b2:	f241 3310 	movw	r3, #4880	; 0x1310
 800c5b6:	443b      	add	r3, r7
 800c5b8:	ed93 6b00 	vldr	d6, [r3]
 800c5bc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c5c0:	443b      	add	r3, r7
 800c5c2:	ed93 7b00 	vldr	d7, [r3]
 800c5c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c5ca:	ed1f 6b71 	vldr	d6, [pc, #-452]	; 800c408 <G_q+0x9e40>
 800c5ce:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c5d2:	f241 3310 	movw	r3, #4880	; 0x1310
 800c5d6:	443b      	add	r3, r7
 800c5d8:	ed83 7b00 	vstr	d7, [r3]
  t72_re += t34_im;
 800c5dc:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800c5e0:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 800c5e4:	ed92 6b00 	vldr	d6, [r2]
 800c5e8:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c5ec:	443a      	add	r2, r7
 800c5ee:	ed92 7b00 	vldr	d7, [r2]
 800c5f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c5f6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = t120.re * 3.061616997868383E-17 + t121.re * 3.061616997868383E-17;
 800c5fa:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c5fe:	ed93 7b00 	vldr	d7, [r3]
 800c602:	ed1f 6b7d 	vldr	d6, [pc, #-500]	; 800c410 <G_q+0x9e48>
 800c606:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c60a:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c60e:	ed93 7b00 	vldr	d7, [r3]
 800c612:	ed1f 5b81 	vldr	d5, [pc, #-516]	; 800c410 <G_q+0x9e48>
 800c616:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c61a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c61e:	f241 3378 	movw	r3, #4984	; 0x1378
 800c622:	443b      	add	r3, r7
 800c624:	ed83 7b00 	vstr	d7, [r3]
  t76_re = t120.im * 3.061616997868383E-17 + t121.im * 3.061616997868383E-17;
 800c628:	f507 63c6 	add.w	r3, r7, #1584	; 0x630
 800c62c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c630:	ed1f 6b89 	vldr	d6, [pc, #-548]	; 800c410 <G_q+0x9e48>
 800c634:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c638:	f507 63c8 	add.w	r3, r7, #1600	; 0x640
 800c63c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c640:	ed1f 5b8d 	vldr	d5, [pc, #-564]	; 800c410 <G_q+0x9e48>
 800c644:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c648:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800c64c:	443b      	add	r3, r7
 800c64e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c652:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t118.re * 0.0 - t118.im * 0.5) - (t119.re * 0.0 - t119.im * 0.5);
 800c656:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c65a:	ed93 7b00 	vldr	d7, [r3]
 800c65e:	ed1f 6b92 	vldr	d6, [pc, #-584]	; 800c418 <G_q+0x9e50>
 800c662:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c666:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c66a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c66e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c672:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c676:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c67a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c67e:	ed93 7b00 	vldr	d7, [r3]
 800c682:	ed1f 5b9b 	vldr	d5, [pc, #-620]	; 800c418 <G_q+0x9e50>
 800c686:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c68a:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c68e:	ed93 7b02 	vldr	d7, [r3, #8]
 800c692:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800c696:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c69a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c69e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c6a2:	f241 3370 	movw	r3, #4976	; 0x1370
 800c6a6:	443b      	add	r3, r7
 800c6a8:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t118.re * 0.5 + t118.im * 0.0) - (t119.re * 0.5 + t119.im * 0.0);
 800c6ac:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c6b0:	ed93 7b00 	vldr	d7, [r3]
 800c6b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800c6b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c6bc:	f507 6357 	add.w	r3, r7, #3440	; 0xd70
 800c6c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6c4:	ed1f 5bac 	vldr	d5, [pc, #-688]	; 800c418 <G_q+0x9e50>
 800c6c8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c6cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c6d0:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c6d4:	ed93 7b00 	vldr	d7, [r3]
 800c6d8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c6dc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800c6e0:	f507 6358 	add.w	r3, r7, #3456	; 0xd80
 800c6e4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c6e8:	ed1f 4bb5 	vldr	d4, [pc, #-724]	; 800c418 <G_q+0x9e50>
 800c6ec:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c6f0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800c6f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c6f8:	f241 3368 	movw	r3, #4968	; 0x1368
 800c6fc:	443b      	add	r3, r7
 800c6fe:	ed83 7b00 	vstr	d7, [r3]
  if (t116.im == 0.0) {
 800c702:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c706:	ed93 7b02 	vldr	d7, [r3, #8]
 800c70a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c70e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c712:	d115      	bne.n	800c740 <G_q+0xa178>
    t16_im = t116.re / 2.0;
 800c714:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c718:	ed93 6b00 	vldr	d6, [r3]
 800c71c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c720:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c724:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c728:	ed83 7b00 	vstr	d7, [r3]
    t20_re = 0.0;
 800c72c:	f04f 0300 	mov.w	r3, #0
 800c730:	f04f 0400 	mov.w	r4, #0
 800c734:	f241 3248 	movw	r2, #4936	; 0x1348
 800c738:	443a      	add	r2, r7
 800c73a:	e9c2 3400 	strd	r3, r4, [r2]
 800c73e:	e037      	b.n	800c7b0 <G_q+0xa1e8>
  } else if (t116.re == 0.0) {
 800c740:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c744:	ed93 7b00 	vldr	d7, [r3]
 800c748:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c74c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c750:	d115      	bne.n	800c77e <G_q+0xa1b6>
    t16_im = 0.0;
 800c752:	f04f 0300 	mov.w	r3, #0
 800c756:	f04f 0400 	mov.w	r4, #0
 800c75a:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800c75e:	e9c2 3400 	strd	r3, r4, [r2]
    t20_re = t116.im / 2.0;
 800c762:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c766:	ed93 6b02 	vldr	d6, [r3, #8]
 800c76a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c76e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c772:	f241 3348 	movw	r3, #4936	; 0x1348
 800c776:	443b      	add	r3, r7
 800c778:	ed83 7b00 	vstr	d7, [r3]
 800c77c:	e018      	b.n	800c7b0 <G_q+0xa1e8>
  } else {
    t16_im = t116.re / 2.0;
 800c77e:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c782:	ed93 6b00 	vldr	d6, [r3]
 800c786:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c78a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c78e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c792:	ed83 7b00 	vstr	d7, [r3]
    t20_re = t116.im / 2.0;
 800c796:	f507 6355 	add.w	r3, r7, #3408	; 0xd50
 800c79a:	ed93 6b02 	vldr	d6, [r3, #8]
 800c79e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c7a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7a6:	f241 3348 	movw	r3, #4936	; 0x1348
 800c7aa:	443b      	add	r3, r7
 800c7ac:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t117.im == 0.0) {
 800c7b0:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c7b4:	ed93 7b02 	vldr	d7, [r3, #8]
 800c7b8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7c0:	d116      	bne.n	800c7f0 <G_q+0xa228>
    t34_re = t117.re / 2.0;
 800c7c2:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c7c6:	ed93 6b00 	vldr	d6, [r3]
 800c7ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c7ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c7d2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c7d6:	443b      	add	r3, r7
 800c7d8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800c7dc:	f04f 0300 	mov.w	r3, #0
 800c7e0:	f04f 0400 	mov.w	r4, #0
 800c7e4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800c7e8:	443a      	add	r2, r7
 800c7ea:	e9c2 3400 	strd	r3, r4, [r2]
 800c7ee:	e039      	b.n	800c864 <G_q+0xa29c>
  } else if (t117.re == 0.0) {
 800c7f0:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c7f4:	ed93 7b00 	vldr	d7, [r3]
 800c7f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c7fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c800:	d116      	bne.n	800c830 <G_q+0xa268>
    t34_re = 0.0;
 800c802:	f04f 0300 	mov.w	r3, #0
 800c806:	f04f 0400 	mov.w	r4, #0
 800c80a:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800c80e:	443a      	add	r2, r7
 800c810:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t117.im / 2.0;
 800c814:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c818:	ed93 6b02 	vldr	d6, [r3, #8]
 800c81c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c820:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c824:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c828:	443b      	add	r3, r7
 800c82a:	ed83 7b00 	vstr	d7, [r3]
 800c82e:	e019      	b.n	800c864 <G_q+0xa29c>
  } else {
    t34_re = t117.re / 2.0;
 800c830:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c834:	ed93 6b00 	vldr	d6, [r3]
 800c838:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c83c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c840:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c844:	443b      	add	r3, r7
 800c846:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t117.im / 2.0;
 800c84a:	f507 6356 	add.w	r3, r7, #3424	; 0xd60
 800c84e:	ed93 6b02 	vldr	d6, [r3, #8]
 800c852:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c856:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c85a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c85e:	443b      	add	r3, r7
 800c860:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c864:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c868:	ed93 7b00 	vldr	d7, [r3]
 800c86c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800caa0 <G_q+0xa4d8>
 800c870:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c874:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c878:	ed93 7b02 	vldr	d7, [r3, #8]
 800c87c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 800caa8 <G_q+0xa4e0>
 800c880:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c884:	ee36 6b47 	vsub.f64	d6, d6, d7
 800c888:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c88c:	ed93 7b00 	vldr	d7, [r3]
 800c890:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800caa0 <G_q+0xa4d8>
 800c894:	ee27 5b05 	vmul.f64	d5, d7, d5
    t115.im * 3.061616997868383E-17);
 800c898:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c89c:	ed93 7b02 	vldr	d7, [r3, #8]
 800c8a0:	ed9f 4b81 	vldr	d4, [pc, #516]	; 800caa8 <G_q+0xa4e0>
 800c8a4:	ee27 7b04 	vmul.f64	d7, d7, d4
  t20_im = (t114.re * 0.0 - t114.im * 3.061616997868383E-17) - (t115.re * 0.0 -
 800c8a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c8ac:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c8b0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800c8b4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c8b8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c8bc:	ed93 7b00 	vldr	d7, [r3]
 800c8c0:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800caa8 <G_q+0xa4e0>
 800c8c4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800c8c8:	f507 63c2 	add.w	r3, r7, #1552	; 0x610
 800c8cc:	ed93 7b02 	vldr	d7, [r3, #8]
 800c8d0:	ed9f 5b73 	vldr	d5, [pc, #460]	; 800caa0 <G_q+0xa4d8>
 800c8d4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800c8d8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800c8dc:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c8e0:	ed93 7b00 	vldr	d7, [r3]
 800c8e4:	ed9f 5b70 	vldr	d5, [pc, #448]	; 800caa8 <G_q+0xa4e0>
 800c8e8:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t115.im * 0.0);
 800c8ec:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800c8f0:	ed93 7b02 	vldr	d7, [r3, #8]
 800c8f4:	ed9f 4b6a 	vldr	d4, [pc, #424]	; 800caa0 <G_q+0xa4d8>
 800c8f8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c8fc:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_re = (t114.re * 3.061616997868383E-17 + t114.im * 0.0) - (t115.re *
 800c900:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c904:	f241 3388 	movw	r3, #5000	; 0x1388
 800c908:	443b      	add	r3, r7
 800c90a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t16_im + t34_re) + 7.498798913309288E-33;
 800c90e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c912:	ed93 6b00 	vldr	d6, [r3]
 800c916:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800c91a:	443b      	add	r3, r7
 800c91c:	ed93 7b00 	vldr	d7, [r3]
 800c920:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c924:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800cab0 <G_q+0xa4e8>
 800c928:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c92c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800c930:	ed83 7b00 	vstr	d7, [r3]
  t20_re += t34_im;
 800c934:	f241 3348 	movw	r3, #4936	; 0x1348
 800c938:	443b      	add	r3, r7
 800c93a:	ed93 6b00 	vldr	d6, [r3]
 800c93e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800c942:	443b      	add	r3, r7
 800c944:	ed93 7b00 	vldr	d7, [r3]
 800c948:	ee36 7b07 	vadd.f64	d7, d6, d7
 800c94c:	f241 3348 	movw	r3, #4936	; 0x1348
 800c950:	443b      	add	r3, r7
 800c952:	ed83 7b00 	vstr	d7, [r3]
  if (t122.im == 0.0) {
 800c956:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c95a:	ed93 7b02 	vldr	d7, [r3, #8]
 800c95e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c966:	d115      	bne.n	800c994 <G_q+0xa3cc>
    t23_re = t122.re / 2.0;
 800c968:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c96c:	ed93 6b00 	vldr	d6, [r3]
 800c970:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c974:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c978:	f241 3330 	movw	r3, #4912	; 0x1330
 800c97c:	443b      	add	r3, r7
 800c97e:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800c982:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800c986:	f04f 0300 	mov.w	r3, #0
 800c98a:	f04f 0400 	mov.w	r4, #0
 800c98e:	e9c2 3400 	strd	r3, r4, [r2]
 800c992:	e037      	b.n	800ca04 <G_q+0xa43c>
  } else if (t122.re == 0.0) {
 800c994:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c998:	ed93 7b00 	vldr	d7, [r3]
 800c99c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c9a4:	d115      	bne.n	800c9d2 <G_q+0xa40a>
    t23_re = 0.0;
 800c9a6:	f04f 0300 	mov.w	r3, #0
 800c9aa:	f04f 0400 	mov.w	r4, #0
 800c9ae:	f241 3230 	movw	r2, #4912	; 0x1330
 800c9b2:	443a      	add	r2, r7
 800c9b4:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t122.im / 2.0;
 800c9b8:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c9bc:	ed93 6b02 	vldr	d6, [r3, #8]
 800c9c0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c9c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c9c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c9cc:	ed83 7b00 	vstr	d7, [r3]
 800c9d0:	e018      	b.n	800ca04 <G_q+0xa43c>
  } else {
    t23_re = t122.re / 2.0;
 800c9d2:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c9d6:	ed93 6b00 	vldr	d6, [r3]
 800c9da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c9de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800c9e2:	f241 3330 	movw	r3, #4912	; 0x1330
 800c9e6:	443b      	add	r3, r7
 800c9e8:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t122.im / 2.0;
 800c9ec:	f507 73f8 	add.w	r3, r7, #496	; 0x1f0
 800c9f0:	ed93 6b02 	vldr	d6, [r3, #8]
 800c9f4:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800c9f8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800c9fc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca00:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t123.im == 0.0) {
 800ca04:	4b2c      	ldr	r3, [pc, #176]	; (800cab8 <G_q+0xa4f0>)
 800ca06:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ca0a:	443a      	add	r2, r7
 800ca0c:	4413      	add	r3, r2
 800ca0e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ca12:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1a:	d119      	bne.n	800ca50 <G_q+0xa488>
    t34_re = t123.re / 2.0;
 800ca1c:	4b26      	ldr	r3, [pc, #152]	; (800cab8 <G_q+0xa4f0>)
 800ca1e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ca22:	443a      	add	r2, r7
 800ca24:	4413      	add	r3, r2
 800ca26:	ed93 6b00 	vldr	d6, [r3]
 800ca2a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ca2e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca32:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ca36:	443b      	add	r3, r7
 800ca38:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ca3c:	f04f 0300 	mov.w	r3, #0
 800ca40:	f04f 0400 	mov.w	r4, #0
 800ca44:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ca48:	443a      	add	r2, r7
 800ca4a:	e9c2 3400 	strd	r3, r4, [r2]
 800ca4e:	e055      	b.n	800cafc <G_q+0xa534>
  } else if (t123.re == 0.0) {
 800ca50:	4b19      	ldr	r3, [pc, #100]	; (800cab8 <G_q+0xa4f0>)
 800ca52:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ca56:	443a      	add	r2, r7
 800ca58:	4413      	add	r3, r2
 800ca5a:	ed93 7b00 	vldr	d7, [r3]
 800ca5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ca62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca66:	d129      	bne.n	800cabc <G_q+0xa4f4>
    t34_re = 0.0;
 800ca68:	f04f 0300 	mov.w	r3, #0
 800ca6c:	f04f 0400 	mov.w	r4, #0
 800ca70:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ca74:	443a      	add	r2, r7
 800ca76:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t123.im / 2.0;
 800ca7a:	4b0f      	ldr	r3, [pc, #60]	; (800cab8 <G_q+0xa4f0>)
 800ca7c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800ca80:	443a      	add	r2, r7
 800ca82:	4413      	add	r3, r2
 800ca84:	ed93 6b02 	vldr	d6, [r3, #8]
 800ca88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ca8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ca90:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ca94:	443b      	add	r3, r7
 800ca96:	ed83 7b00 	vstr	d7, [r3]
 800ca9a:	e02f      	b.n	800cafc <G_q+0xa534>
 800ca9c:	f3af 8000 	nop.w
	...
 800caa8:	33145c07 	.word	0x33145c07
 800caac:	3c81a626 	.word	0x3c81a626
 800cab0:	858a5d48 	.word	0x858a5d48
 800cab4:	394377ce 	.word	0x394377ce
 800cab8:	ffffee30 	.word	0xffffee30
  } else {
    t34_re = t123.re / 2.0;
 800cabc:	4bd0      	ldr	r3, [pc, #832]	; (800ce00 <G_q+0xa838>)
 800cabe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cac2:	443a      	add	r2, r7
 800cac4:	4413      	add	r3, r2
 800cac6:	ed93 6b00 	vldr	d6, [r3]
 800caca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cace:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cad2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cad6:	443b      	add	r3, r7
 800cad8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t123.im / 2.0;
 800cadc:	4bc8      	ldr	r3, [pc, #800]	; (800ce00 <G_q+0xa838>)
 800cade:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800cae2:	443a      	add	r2, r7
 800cae4:	4413      	add	r3, r2
 800cae6:	ed93 6b02 	vldr	d6, [r3, #8]
 800caea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800caee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800caf2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800caf6:	443b      	add	r3, r7
 800caf8:	ed83 7b00 	vstr	d7, [r3]
  }

  t60_re = (t13_re * t13_im - t76_re * t16_re) - (t20_im * t16_im - t12_re *
 800cafc:	f241 3378 	movw	r3, #4984	; 0x1378
 800cb00:	443b      	add	r3, r7
 800cb02:	ed93 6b00 	vldr	d6, [r3]
 800cb06:	f241 3370 	movw	r3, #4976	; 0x1370
 800cb0a:	443b      	add	r3, r7
 800cb0c:	ed93 7b00 	vldr	d7, [r3]
 800cb10:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb14:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cb18:	443b      	add	r3, r7
 800cb1a:	ed93 5b00 	vldr	d5, [r3]
 800cb1e:	f241 3368 	movw	r3, #4968	; 0x1368
 800cb22:	443b      	add	r3, r7
 800cb24:	ed93 7b00 	vldr	d7, [r3]
 800cb28:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cb2c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cb30:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cb34:	ed93 5b00 	vldr	d5, [r3]
 800cb38:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cb3c:	ed93 7b00 	vldr	d7, [r3]
 800cb40:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cb44:	f241 3388 	movw	r3, #5000	; 0x1388
 800cb48:	443b      	add	r3, r7
 800cb4a:	ed93 4b00 	vldr	d4, [r3]
 800cb4e:	f241 3348 	movw	r3, #4936	; 0x1348
 800cb52:	443b      	add	r3, r7
 800cb54:	ed93 7b00 	vldr	d7, [r3]
 800cb58:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cb5c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cb60:	f241 2350 	movw	r3, #4688	; 0x1250
 800cb64:	443b      	add	r3, r7
 800cb66:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cb6a:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  t76_re = (t13_re * t16_re + t76_re * t13_im) - (t20_im * t20_re + t12_re *
 800cb6e:	f241 3378 	movw	r3, #4984	; 0x1378
 800cb72:	443b      	add	r3, r7
 800cb74:	ed93 6b00 	vldr	d6, [r3]
 800cb78:	f241 3368 	movw	r3, #4968	; 0x1368
 800cb7c:	443b      	add	r3, r7
 800cb7e:	ed93 7b00 	vldr	d7, [r3]
 800cb82:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cb86:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cb8a:	443b      	add	r3, r7
 800cb8c:	ed93 5b00 	vldr	d5, [r3]
 800cb90:	f241 3370 	movw	r3, #4976	; 0x1370
 800cb94:	443b      	add	r3, r7
 800cb96:	ed93 7b00 	vldr	d7, [r3]
 800cb9a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800cb9e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cba2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cba6:	ed93 5b00 	vldr	d5, [r3]
 800cbaa:	f241 3348 	movw	r3, #4936	; 0x1348
 800cbae:	443b      	add	r3, r7
 800cbb0:	ed93 7b00 	vldr	d7, [r3]
 800cbb4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800cbb8:	f241 3388 	movw	r3, #5000	; 0x1388
 800cbbc:	443b      	add	r3, r7
 800cbbe:	ed93 4b00 	vldr	d4, [r3]
 800cbc2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cbc6:	ed93 7b00 	vldr	d7, [r3]
 800cbca:	ee24 7b07 	vmul.f64	d7, d4, d7
 800cbce:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cbd2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800cbd6:	443b      	add	r3, r7
 800cbd8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cbdc:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re += t34_re;
 800cbe0:	f241 3330 	movw	r3, #4912	; 0x1330
 800cbe4:	443b      	add	r3, r7
 800cbe6:	ed93 6b00 	vldr	d6, [r3]
 800cbea:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800cbee:	443b      	add	r3, r7
 800cbf0:	ed93 7b00 	vldr	d7, [r3]
 800cbf4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cbf8:	f241 3330 	movw	r3, #4912	; 0x1330
 800cbfc:	443b      	add	r3, r7
 800cbfe:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800cc02:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800cc06:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800cc0a:	ed92 6b00 	vldr	d6, [r2]
 800cc0e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800cc12:	443a      	add	r2, r7
 800cc14:	ed92 7b00 	vldr	d7, [r2]
 800cc18:	ee36 7b07 	vadd.f64	d7, d6, d7
 800cc1c:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t160.re * 0.0 - t160.im * 0.5) - (t161.re * 0.0 - t161.im * 0.5);
 800cc20:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cc24:	ed93 7b00 	vldr	d7, [r3]
 800cc28:	ed9f 6b73 	vldr	d6, [pc, #460]	; 800cdf8 <G_q+0xa830>
 800cc2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cc30:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cc34:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc38:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cc3c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cc40:	ee36 6b47 	vsub.f64	d6, d6, d7
 800cc44:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800cc48:	ed93 7b00 	vldr	d7, [r3]
 800cc4c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 800cdf8 <G_q+0xa830>
 800cc50:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cc54:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800cc58:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc5c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cc60:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc64:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cc68:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cc6c:	f241 3368 	movw	r3, #4968	; 0x1368
 800cc70:	443b      	add	r3, r7
 800cc72:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t160.re * 0.5 + t160.im * 0.0) - (t161.re * 0.5 + t161.im * 0.0);
 800cc76:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cc7a:	ed93 7b00 	vldr	d7, [r3]
 800cc7e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cc82:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cc86:	f507 6367 	add.w	r3, r7, #3696	; 0xe70
 800cc8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800cc8e:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800cdf8 <G_q+0xa830>
 800cc92:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cc96:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cc9a:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800cc9e:	ed93 7b00 	vldr	d7, [r3]
 800cca2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cca6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ccaa:	f507 6368 	add.w	r3, r7, #3712	; 0xe80
 800ccae:	ed93 7b02 	vldr	d7, [r3, #8]
 800ccb2:	ed9f 4b51 	vldr	d4, [pc, #324]	; 800cdf8 <G_q+0xa830>
 800ccb6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ccba:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ccbe:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ccc2:	f241 3318 	movw	r3, #4888	; 0x1318
 800ccc6:	443b      	add	r3, r7
 800ccc8:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t162.re * 0.0 - t162.im * 0.5) - (t163.re * 0.0 - t163.im * 0.5);
 800cccc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800ccd0:	ed93 7b00 	vldr	d7, [r3]
 800ccd4:	ed9f 6b48 	vldr	d6, [pc, #288]	; 800cdf8 <G_q+0xa830>
 800ccd8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ccdc:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cce0:	ed93 7b02 	vldr	d7, [r3, #8]
 800cce4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cce8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ccec:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ccf0:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800ccf4:	ed93 7b00 	vldr	d7, [r3]
 800ccf8:	ed9f 5b3f 	vldr	d5, [pc, #252]	; 800cdf8 <G_q+0xa830>
 800ccfc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cd00:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cd04:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd08:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800cd0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd10:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cd14:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cd18:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800cd1c:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t162.re * 0.5 + t162.im * 0.0) - (t163.re * 0.5 + t163.im * 0.0);
 800cd20:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cd24:	ed93 7b00 	vldr	d7, [r3]
 800cd28:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800cd2c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800cd30:	f507 63e6 	add.w	r3, r7, #1840	; 0x730
 800cd34:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd38:	ed9f 5b2f 	vldr	d5, [pc, #188]	; 800cdf8 <G_q+0xa830>
 800cd3c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800cd40:	ee36 6b07 	vadd.f64	d6, d6, d7
 800cd44:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cd48:	ed93 7b00 	vldr	d7, [r3]
 800cd4c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800cd50:	ee27 5b05 	vmul.f64	d5, d7, d5
 800cd54:	f507 63e8 	add.w	r3, r7, #1856	; 0x740
 800cd58:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd5c:	ed9f 4b26 	vldr	d4, [pc, #152]	; 800cdf8 <G_q+0xa830>
 800cd60:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cd64:	ee35 7b07 	vadd.f64	d7, d5, d7
 800cd68:	ee36 7b47 	vsub.f64	d7, d6, d7
 800cd6c:	f241 3348 	movw	r3, #4936	; 0x1348
 800cd70:	443b      	add	r3, r7
 800cd72:	ed83 7b00 	vstr	d7, [r3]
  if (t164.im == 0.0) {
 800cd76:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cd7a:	ed93 7b02 	vldr	d7, [r3, #8]
 800cd7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cd82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd86:	d115      	bne.n	800cdb4 <G_q+0xa7ec>
    t20_im = t164.re / 2.0;
 800cd88:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cd8c:	ed93 6b00 	vldr	d6, [r3]
 800cd90:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cd94:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cd98:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800cd9c:	ed83 7b00 	vstr	d7, [r3]
    t12_re = 0.0;
 800cda0:	f04f 0300 	mov.w	r3, #0
 800cda4:	f04f 0400 	mov.w	r4, #0
 800cda8:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdac:	443a      	add	r2, r7
 800cdae:	e9c2 3400 	strd	r3, r4, [r2]
 800cdb2:	e040      	b.n	800ce36 <G_q+0xa86e>
  } else if (t164.re == 0.0) {
 800cdb4:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cdb8:	ed93 7b00 	vldr	d7, [r3]
 800cdbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdc4:	d11e      	bne.n	800ce04 <G_q+0xa83c>
    t20_im = 0.0;
 800cdc6:	f04f 0300 	mov.w	r3, #0
 800cdca:	f04f 0400 	mov.w	r4, #0
 800cdce:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800cdd2:	e9c2 3400 	strd	r3, r4, [r2]
    t12_re = t164.im / 2.0;
 800cdd6:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800cdda:	ed93 6b02 	vldr	d6, [r3, #8]
 800cdde:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cde2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cde6:	f241 3388 	movw	r3, #5000	; 0x1388
 800cdea:	443b      	add	r3, r7
 800cdec:	ed83 7b00 	vstr	d7, [r3]
 800cdf0:	e021      	b.n	800ce36 <G_q+0xa86e>
 800cdf2:	bf00      	nop
 800cdf4:	f3af 8000 	nop.w
	...
 800ce00:	ffffee30 	.word	0xffffee30
  } else {
    t20_im = t164.re / 2.0;
 800ce04:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800ce08:	ed93 6b00 	vldr	d6, [r3]
 800ce0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800ce18:	ed83 7b00 	vstr	d7, [r3]
    t12_re = t164.im / 2.0;
 800ce1c:	f507 63ea 	add.w	r3, r7, #1872	; 0x750
 800ce20:	ed93 6b02 	vldr	d6, [r3, #8]
 800ce24:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce28:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce2c:	f241 3388 	movw	r3, #5000	; 0x1388
 800ce30:	443b      	add	r3, r7
 800ce32:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t165.im == 0.0) {
 800ce36:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ce3a:	ed93 7b02 	vldr	d7, [r3, #8]
 800ce3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce46:	d116      	bne.n	800ce76 <G_q+0xa8ae>
    t34_re = t165.re / 2.0;
 800ce48:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ce4c:	ed93 6b00 	vldr	d6, [r3]
 800ce50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ce54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ce58:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ce5c:	443b      	add	r3, r7
 800ce5e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ce62:	f04f 0300 	mov.w	r3, #0
 800ce66:	f04f 0400 	mov.w	r4, #0
 800ce6a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ce6e:	443a      	add	r2, r7
 800ce70:	e9c2 3400 	strd	r3, r4, [r2]
 800ce74:	e039      	b.n	800ceea <G_q+0xa922>
  } else if (t165.re == 0.0) {
 800ce76:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ce7a:	ed93 7b00 	vldr	d7, [r3]
 800ce7e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ce82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce86:	d116      	bne.n	800ceb6 <G_q+0xa8ee>
    t34_re = 0.0;
 800ce88:	f04f 0300 	mov.w	r3, #0
 800ce8c:	f04f 0400 	mov.w	r4, #0
 800ce90:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ce94:	443a      	add	r2, r7
 800ce96:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t165.im / 2.0;
 800ce9a:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ce9e:	ed93 6b02 	vldr	d6, [r3, #8]
 800cea2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cea6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ceaa:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ceae:	443b      	add	r3, r7
 800ceb0:	ed83 7b00 	vstr	d7, [r3]
 800ceb4:	e019      	b.n	800ceea <G_q+0xa922>
  } else {
    t34_re = t165.re / 2.0;
 800ceb6:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ceba:	ed93 6b00 	vldr	d6, [r3]
 800cebe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cec2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cec6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ceca:	443b      	add	r3, r7
 800cecc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t165.im / 2.0;
 800ced0:	f507 63ec 	add.w	r3, r7, #1888	; 0x760
 800ced4:	ed93 6b02 	vldr	d6, [r3, #8]
 800ced8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cedc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cee0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800cee4:	443b      	add	r3, r7
 800cee6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t166.im == 0.0) {
 800ceea:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800ceee:	ed93 7b02 	vldr	d7, [r3, #8]
 800cef2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cef6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cefa:	d115      	bne.n	800cf28 <G_q+0xa960>
    t12_im = t166.re / 2.0;
 800cefc:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cf00:	ed93 6b00 	vldr	d6, [r3]
 800cf04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf0c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cf10:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = 0.0;
 800cf14:	f04f 0300 	mov.w	r3, #0
 800cf18:	f04f 0400 	mov.w	r4, #0
 800cf1c:	f241 3238 	movw	r2, #4920	; 0x1338
 800cf20:	443a      	add	r2, r7
 800cf22:	e9c2 3400 	strd	r3, r4, [r2]
 800cf26:	e037      	b.n	800cf98 <G_q+0xa9d0>
  } else if (t166.re == 0.0) {
 800cf28:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cf2c:	ed93 7b00 	vldr	d7, [r3]
 800cf30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cf34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cf38:	d115      	bne.n	800cf66 <G_q+0xa99e>
    t12_im = 0.0;
 800cf3a:	f04f 0300 	mov.w	r3, #0
 800cf3e:	f04f 0400 	mov.w	r4, #0
 800cf42:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800cf46:	e9c2 3400 	strd	r3, r4, [r2]
    b_t10_re = t166.im / 2.0;
 800cf4a:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cf4e:	ed93 6b02 	vldr	d6, [r3, #8]
 800cf52:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf56:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf5a:	f241 3338 	movw	r3, #4920	; 0x1338
 800cf5e:	443b      	add	r3, r7
 800cf60:	ed83 7b00 	vstr	d7, [r3]
 800cf64:	e018      	b.n	800cf98 <G_q+0xa9d0>
  } else {
    t12_im = t166.re / 2.0;
 800cf66:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cf6a:	ed93 6b00 	vldr	d6, [r3]
 800cf6e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf72:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf76:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800cf7a:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re = t166.im / 2.0;
 800cf7e:	f507 6369 	add.w	r3, r7, #3728	; 0xe90
 800cf82:	ed93 6b02 	vldr	d6, [r3, #8]
 800cf86:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cf8a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cf8e:	f241 3338 	movw	r3, #4920	; 0x1338
 800cf92:	443b      	add	r3, r7
 800cf94:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t167.im == 0.0) {
 800cf98:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cf9c:	ed93 7b02 	vldr	d7, [r3, #8]
 800cfa0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfa8:	d116      	bne.n	800cfd8 <G_q+0xaa10>
    t13_re = t167.re / 2.0;
 800cfaa:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cfae:	ed93 6b00 	vldr	d6, [r3]
 800cfb2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800cfb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800cfba:	f241 3378 	movw	r3, #4984	; 0x1378
 800cfbe:	443b      	add	r3, r7
 800cfc0:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800cfc4:	f04f 0300 	mov.w	r3, #0
 800cfc8:	f04f 0400 	mov.w	r4, #0
 800cfcc:	f241 3270 	movw	r2, #4976	; 0x1370
 800cfd0:	443a      	add	r2, r7
 800cfd2:	e9c2 3400 	strd	r3, r4, [r2]
 800cfd6:	e039      	b.n	800d04c <G_q+0xaa84>
  } else if (t167.re == 0.0) {
 800cfd8:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800cfdc:	ed93 7b00 	vldr	d7, [r3]
 800cfe0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800cfe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cfe8:	d116      	bne.n	800d018 <G_q+0xaa50>
    t13_re = 0.0;
 800cfea:	f04f 0300 	mov.w	r3, #0
 800cfee:	f04f 0400 	mov.w	r4, #0
 800cff2:	f241 3278 	movw	r2, #4984	; 0x1378
 800cff6:	443a      	add	r2, r7
 800cff8:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t167.im / 2.0;
 800cffc:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d000:	ed93 6b02 	vldr	d6, [r3, #8]
 800d004:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d008:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d00c:	f241 3370 	movw	r3, #4976	; 0x1370
 800d010:	443b      	add	r3, r7
 800d012:	ed83 7b00 	vstr	d7, [r3]
 800d016:	e019      	b.n	800d04c <G_q+0xaa84>
  } else {
    t13_re = t167.re / 2.0;
 800d018:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d01c:	ed93 6b00 	vldr	d6, [r3]
 800d020:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d024:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d028:	f241 3378 	movw	r3, #4984	; 0x1378
 800d02c:	443b      	add	r3, r7
 800d02e:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t167.im / 2.0;
 800d032:	f507 636a 	add.w	r3, r7, #3744	; 0xea0
 800d036:	ed93 6b02 	vldr	d6, [r3, #8]
 800d03a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d03e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d042:	f241 3370 	movw	r3, #4976	; 0x1370
 800d046:	443b      	add	r3, r7
 800d048:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 800d04c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d050:	ed93 6b00 	vldr	d6, [r3]
 800d054:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d058:	443b      	add	r3, r7
 800d05a:	ed93 7b00 	vldr	d7, [r3]
 800d05e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d062:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d066:	ed83 7b00 	vstr	d7, [r3]
  t12_re += t34_im;
 800d06a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d06e:	443b      	add	r3, r7
 800d070:	ed93 6b00 	vldr	d6, [r3]
 800d074:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d078:	443b      	add	r3, r7
 800d07a:	ed93 7b00 	vldr	d7, [r3]
 800d07e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d082:	f241 3388 	movw	r3, #5000	; 0x1388
 800d086:	443b      	add	r3, r7
 800d088:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_im + t13_re) + 7.498798913309288E-33;
 800d08c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d090:	ed93 6b00 	vldr	d6, [r3]
 800d094:	f241 3378 	movw	r3, #4984	; 0x1378
 800d098:	443b      	add	r3, r7
 800d09a:	ed93 7b00 	vldr	d7, [r3]
 800d09e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d0a2:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800d430 <G_q+0xae68>
 800d0a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 800d0aa:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d0ae:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re += t13_im;
 800d0b2:	f241 3338 	movw	r3, #4920	; 0x1338
 800d0b6:	443b      	add	r3, r7
 800d0b8:	ed93 6b00 	vldr	d6, [r3]
 800d0bc:	f241 3370 	movw	r3, #4976	; 0x1370
 800d0c0:	443b      	add	r3, r7
 800d0c2:	ed93 7b00 	vldr	d7, [r3]
 800d0c6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d0ca:	f241 3338 	movw	r3, #4920	; 0x1338
 800d0ce:	443b      	add	r3, r7
 800d0d0:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t16_re * t16_im - t85_im * t20_re) + (t20_im * t12_im - t12_re *
 800d0d4:	f241 3368 	movw	r3, #4968	; 0x1368
 800d0d8:	443b      	add	r3, r7
 800d0da:	ed93 6b00 	vldr	d6, [r3]
 800d0de:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d0e2:	ed93 7b00 	vldr	d7, [r3]
 800d0e6:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d0ea:	f241 3318 	movw	r3, #4888	; 0x1318
 800d0ee:	443b      	add	r3, r7
 800d0f0:	ed93 5b00 	vldr	d5, [r3]
 800d0f4:	f241 3348 	movw	r3, #4936	; 0x1348
 800d0f8:	443b      	add	r3, r7
 800d0fa:	ed93 7b00 	vldr	d7, [r3]
 800d0fe:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d102:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d106:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d10a:	ed93 5b00 	vldr	d5, [r3]
 800d10e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d112:	ed93 7b00 	vldr	d7, [r3]
 800d116:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d11a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d11e:	443b      	add	r3, r7
 800d120:	ed93 4b00 	vldr	d4, [r3]
 800d124:	f241 3338 	movw	r3, #4920	; 0x1338
 800d128:	443b      	add	r3, r7
 800d12a:	ed93 7b00 	vldr	d7, [r3]
 800d12e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d132:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d136:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d13a:	f241 3378 	movw	r3, #4984	; 0x1378
 800d13e:	443b      	add	r3, r7
 800d140:	ed83 7b00 	vstr	d7, [r3]
    b_t10_re);
  t85_im = (t16_re * t20_re + t85_im * t16_im) + (t20_im * b_t10_re + t12_re *
 800d144:	f241 3368 	movw	r3, #4968	; 0x1368
 800d148:	443b      	add	r3, r7
 800d14a:	ed93 6b00 	vldr	d6, [r3]
 800d14e:	f241 3348 	movw	r3, #4936	; 0x1348
 800d152:	443b      	add	r3, r7
 800d154:	ed93 7b00 	vldr	d7, [r3]
 800d158:	ee26 6b07 	vmul.f64	d6, d6, d7
 800d15c:	f241 3318 	movw	r3, #4888	; 0x1318
 800d160:	443b      	add	r3, r7
 800d162:	ed93 5b00 	vldr	d5, [r3]
 800d166:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d16a:	ed93 7b00 	vldr	d7, [r3]
 800d16e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800d172:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d176:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d17a:	ed93 5b00 	vldr	d5, [r3]
 800d17e:	f241 3338 	movw	r3, #4920	; 0x1338
 800d182:	443b      	add	r3, r7
 800d184:	ed93 7b00 	vldr	d7, [r3]
 800d188:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d18c:	f241 3388 	movw	r3, #5000	; 0x1388
 800d190:	443b      	add	r3, r7
 800d192:	ed93 4b00 	vldr	d4, [r3]
 800d196:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d19a:	ed93 7b00 	vldr	d7, [r3]
 800d19e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d1a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d1a6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800d1aa:	f241 3318 	movw	r3, #4888	; 0x1318
 800d1ae:	443b      	add	r3, r7
 800d1b0:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t34_re = (t158.re * 0.0 - t158.im * 0.5) - (t159.re * 0.0 - t159.im * 0.5);
 800d1b4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d1b8:	ed93 7b00 	vldr	d7, [r3]
 800d1bc:	ed9f 6b9e 	vldr	d6, [pc, #632]	; 800d438 <G_q+0xae70>
 800d1c0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d1c4:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d1c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d1cc:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d1d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d1d4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d1d8:	4b9f      	ldr	r3, [pc, #636]	; (800d458 <G_q+0xae90>)
 800d1da:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d1de:	443a      	add	r2, r7
 800d1e0:	4413      	add	r3, r2
 800d1e2:	ed93 7b00 	vldr	d7, [r3]
 800d1e6:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800d438 <G_q+0xae70>
 800d1ea:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d1ee:	4b9a      	ldr	r3, [pc, #616]	; (800d458 <G_q+0xae90>)
 800d1f0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d1f4:	443a      	add	r2, r7
 800d1f6:	4413      	add	r3, r2
 800d1f8:	ed93 7b02 	vldr	d7, [r3, #8]
 800d1fc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d200:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d204:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d208:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d20c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d210:	443b      	add	r3, r7
 800d212:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t158.re * 0.5 + t158.im * 0.0) - (t159.re * 0.5 + t159.im * 0.0);
 800d216:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d21a:	ed93 7b00 	vldr	d7, [r3]
 800d21e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d222:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d226:	f507 7314 	add.w	r3, r7, #592	; 0x250
 800d22a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d22e:	ed9f 5b82 	vldr	d5, [pc, #520]	; 800d438 <G_q+0xae70>
 800d232:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d236:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d23a:	4b87      	ldr	r3, [pc, #540]	; (800d458 <G_q+0xae90>)
 800d23c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d240:	443a      	add	r2, r7
 800d242:	4413      	add	r3, r2
 800d244:	ed93 7b00 	vldr	d7, [r3]
 800d248:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d24c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d250:	4b81      	ldr	r3, [pc, #516]	; (800d458 <G_q+0xae90>)
 800d252:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d256:	443a      	add	r2, r7
 800d258:	4413      	add	r3, r2
 800d25a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d25e:	ed9f 4b76 	vldr	d4, [pc, #472]	; 800d438 <G_q+0xae70>
 800d262:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d266:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d26a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d26e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d272:	443b      	add	r3, r7
 800d274:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d278:	4b78      	ldr	r3, [pc, #480]	; (800d45c <G_q+0xae94>)
 800d27a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d27e:	443a      	add	r2, r7
 800d280:	4413      	add	r3, r2
 800d282:	ed93 7b00 	vldr	d7, [r3]
 800d286:	eeb1 6b47 	vneg.f64	d6, d7
 800d28a:	f241 2370 	movw	r3, #4720	; 0x1270
 800d28e:	443b      	add	r3, r7
 800d290:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d294:	ed92 5b00 	vldr	d5, [r2]
 800d298:	ed93 7b00 	vldr	d7, [r3]
 800d29c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d2a0:	f241 2368 	movw	r3, #4712	; 0x1268
 800d2a4:	443b      	add	r3, r7
 800d2a6:	f241 3228 	movw	r2, #4904	; 0x1328
 800d2aa:	443a      	add	r2, r7
 800d2ac:	ed92 4b00 	vldr	d4, [r2]
 800d2b0:	ed93 7b00 	vldr	d7, [r3]
 800d2b4:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d2b8:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d2bc:	ed9f 5b60 	vldr	d5, [pc, #384]	; 800d440 <G_q+0xae78>
 800d2c0:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d2c4:	f241 2358 	movw	r3, #4696	; 0x1258
 800d2c8:	443b      	add	r3, r7
 800d2ca:	ed93 4b00 	vldr	d4, [r3]
 800d2ce:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d2d2:	ed93 7b00 	vldr	d7, [r3]
 800d2d6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d2da:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d2de:	f241 3208 	movw	r2, #4872	; 0x1308
 800d2e2:	443a      	add	r2, r7
 800d2e4:	ed92 3b00 	vldr	d3, [r2]
 800d2e8:	ed93 7b00 	vldr	d7, [r3]
 800d2ec:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d2f0:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d2f4:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800d448 <G_q+0xae80>
 800d2f8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d2fc:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d300:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d304:	443b      	add	r3, r7
 800d306:	ed93 4b00 	vldr	d4, [r3]
 800d30a:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d30e:	443b      	add	r3, r7
 800d310:	ed93 7b00 	vldr	d7, [r3]
 800d314:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d318:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d31c:	443b      	add	r3, r7
 800d31e:	ed93 3b00 	vldr	d3, [r3]
 800d322:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d326:	443b      	add	r3, r7
 800d328:	ed93 7b00 	vldr	d7, [r3]
 800d32c:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d330:	ee34 7b47 	vsub.f64	d7, d4, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d334:	ed9f 4b44 	vldr	d4, [pc, #272]	; 800d448 <G_q+0xae80>
 800d338:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t41_im - t41_re * t8_re) * 0.0215) + (t43_im * t55_im - b_t54_re *
 800d33c:	ee35 5b07 	vadd.f64	d5, d5, d7
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d340:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800d344:	443b      	add	r3, r7
 800d346:	ed93 4b00 	vldr	d4, [r3]
 800d34a:	f241 3310 	movw	r3, #4880	; 0x1310
 800d34e:	443b      	add	r3, r7
 800d350:	ed93 7b00 	vldr	d7, [r3]
 800d354:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d358:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800d35c:	443a      	add	r2, r7
 800d35e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d362:	ed92 3b00 	vldr	d3, [r2]
 800d366:	ed93 7b00 	vldr	d7, [r3]
 800d36a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d36e:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d372:	ed9f 4b33 	vldr	d4, [pc, #204]	; 800d440 <G_q+0xae78>
 800d376:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d37a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d37e:	f241 2350 	movw	r3, #4688	; 0x1250
 800d382:	443b      	add	r3, r7
 800d384:	ed93 4b00 	vldr	d4, [r3]
 800d388:	f241 3330 	movw	r3, #4912	; 0x1330
 800d38c:	443b      	add	r3, r7
 800d38e:	ed93 7b00 	vldr	d7, [r3]
 800d392:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d396:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800d39a:	443a      	add	r2, r7
 800d39c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d3a0:	ed92 3b00 	vldr	d3, [r2]
 800d3a4:	ed93 7b00 	vldr	d7, [r3]
 800d3a8:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d3ac:	ee34 7b47 	vsub.f64	d7, d4, d7
 800d3b0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800d450 <G_q+0xae88>
 800d3b4:	ee27 7b04 	vmul.f64	d7, d7, d4
    b_t54_im) * 0.0215) - (t74_re * t3_im - t74_im * t72_re) * 0.1376) + (t60_re
 800d3b8:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d3bc:	f241 3378 	movw	r3, #4984	; 0x1378
 800d3c0:	443b      	add	r3, r7
 800d3c2:	ed93 4b00 	vldr	d4, [r3]
 800d3c6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d3ca:	443b      	add	r3, r7
 800d3cc:	ed93 7b00 	vldr	d7, [r3]
 800d3d0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d3d4:	f241 3318 	movw	r3, #4888	; 0x1318
 800d3d8:	443b      	add	r3, r7
 800d3da:	ed93 3b00 	vldr	d3, [r3]
 800d3de:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d3e2:	443b      	add	r3, r7
 800d3e4:	ed93 7b00 	vldr	d7, [r3]
 800d3e8:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d3ec:	ee34 7b47 	vsub.f64	d7, d4, d7
    t85_im * t34_im) * 1.3164953090834051E-18);
 800d3f0:	ed9f 4b17 	vldr	d4, [pc, #92]	; 800d450 <G_q+0xae88>
 800d3f4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t23_re - t76_re * t58_im) * 1.3164953090834051E-18) - (t13_re * t34_re -
 800d3f8:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].re = -g * ((((((t8_im * t19_re_tmp - t54_re * t19_im_tmp) * 0.1376 +
 800d3fc:	4b18      	ldr	r3, [pc, #96]	; (800d460 <G_q+0xae98>)
 800d3fe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d402:	443a      	add	r2, r7
 800d404:	4413      	add	r3, r2
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	3320      	adds	r3, #32
 800d40a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d40e:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d412:	4b12      	ldr	r3, [pc, #72]	; (800d45c <G_q+0xae94>)
 800d414:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d418:	443a      	add	r2, r7
 800d41a:	4413      	add	r3, r2
 800d41c:	ed93 7b00 	vldr	d7, [r3]
 800d420:	eeb1 6b47 	vneg.f64	d6, d7
 800d424:	f241 2368 	movw	r3, #4712	; 0x1268
 800d428:	443b      	add	r3, r7
 800d42a:	f507 5299 	add.w	r2, r7, #4896	; 0x1320
 800d42e:	e019      	b.n	800d464 <G_q+0xae9c>
 800d430:	858a5d48 	.word	0x858a5d48
 800d434:	394377ce 	.word	0x394377ce
	...
 800d440:	75f6fd22 	.word	0x75f6fd22
 800d444:	3fc19ce0 	.word	0x3fc19ce0
 800d448:	9374bc6a 	.word	0x9374bc6a
 800d44c:	3f960418 	.word	0x3f960418
 800d450:	2ba953a1 	.word	0x2ba953a1
 800d454:	3c3848f9 	.word	0x3c3848f9
 800d458:	ffffee90 	.word	0xffffee90
 800d45c:	ffffec58 	.word	0xffffec58
 800d460:	ffffec34 	.word	0xffffec34
 800d464:	ed92 5b00 	vldr	d5, [r2]
 800d468:	ed93 7b00 	vldr	d7, [r3]
 800d46c:	ee25 5b07 	vmul.f64	d5, d5, d7
 800d470:	f241 2370 	movw	r3, #4720	; 0x1270
 800d474:	443b      	add	r3, r7
 800d476:	f241 3228 	movw	r2, #4904	; 0x1328
 800d47a:	443a      	add	r2, r7
 800d47c:	ed92 4b00 	vldr	d4, [r2]
 800d480:	ed93 7b00 	vldr	d7, [r3]
 800d484:	ee24 7b07 	vmul.f64	d7, d4, d7
 800d488:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d48c:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 800d728 <G_q+0xb160>
 800d490:	ee27 5b05 	vmul.f64	d5, d7, d5
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d494:	f241 2258 	movw	r2, #4696	; 0x1258
 800d498:	443a      	add	r2, r7
 800d49a:	f507 5393 	add.w	r3, r7, #4704	; 0x1260
 800d49e:	ed92 4b00 	vldr	d4, [r2]
 800d4a2:	ed93 7b00 	vldr	d7, [r3]
 800d4a6:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d4aa:	f241 3308 	movw	r3, #4872	; 0x1308
 800d4ae:	443b      	add	r3, r7
 800d4b0:	ed93 3b00 	vldr	d3, [r3]
 800d4b4:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d4b8:	ed93 7b00 	vldr	d7, [r3]
 800d4bc:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d4c0:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d4c4:	ed9f 4b9a 	vldr	d4, [pc, #616]	; 800d730 <G_q+0xb168>
 800d4c8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d4cc:	ee35 5b07 	vadd.f64	d5, d5, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d4d0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800d4d4:	443b      	add	r3, r7
 800d4d6:	ed93 4b00 	vldr	d4, [r3]
 800d4da:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800d4de:	443b      	add	r3, r7
 800d4e0:	ed93 7b00 	vldr	d7, [r3]
 800d4e4:	ee24 4b07 	vmul.f64	d4, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d4e8:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800d4ec:	443b      	add	r3, r7
 800d4ee:	ed93 3b00 	vldr	d3, [r3]
 800d4f2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800d4f6:	443b      	add	r3, r7
 800d4f8:	ed93 7b00 	vldr	d7, [r3]
 800d4fc:	ee23 7b07 	vmul.f64	d7, d3, d7
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d500:	ee34 7b07 	vadd.f64	d7, d4, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d504:	ed9f 4b8a 	vldr	d4, [pc, #552]	; 800d730 <G_q+0xb168>
 800d508:	ee27 7b04 	vmul.f64	d7, d7, d4
    (t43_re * t8_re + t41_re * t41_im) * 0.0215) + (t43_im * b_t54_im + b_t54_re
 800d50c:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d510:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800d514:	443a      	add	r2, r7
 800d516:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800d51a:	ed92 4b00 	vldr	d4, [r2]
 800d51e:	ed93 7b00 	vldr	d7, [r3]
 800d522:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d526:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800d52a:	443b      	add	r3, r7
 800d52c:	ed93 3b00 	vldr	d3, [r3]
 800d530:	f241 3310 	movw	r3, #4880	; 0x1310
 800d534:	443b      	add	r3, r7
 800d536:	ed93 7b00 	vldr	d7, [r3]
 800d53a:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d53e:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d542:	ed9f 4b79 	vldr	d4, [pc, #484]	; 800d728 <G_q+0xb160>
 800d546:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d54a:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d54e:	f241 2250 	movw	r2, #4688	; 0x1250
 800d552:	443a      	add	r2, r7
 800d554:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800d558:	ed92 4b00 	vldr	d4, [r2]
 800d55c:	ed93 7b00 	vldr	d7, [r3]
 800d560:	ee24 4b07 	vmul.f64	d4, d4, d7
 800d564:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800d568:	443b      	add	r3, r7
 800d56a:	ed93 3b00 	vldr	d3, [r3]
 800d56e:	f241 3330 	movw	r3, #4912	; 0x1330
 800d572:	443b      	add	r3, r7
 800d574:	ed93 7b00 	vldr	d7, [r3]
 800d578:	ee23 7b07 	vmul.f64	d7, d3, d7
 800d57c:	ee34 7b07 	vadd.f64	d7, d4, d7
 800d580:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 800d738 <G_q+0xb170>
 800d584:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im) * 0.0215) - (t74_re * t72_re + t74_im * t3_im) * 0.1376) + (t60_re
 800d588:	ee35 5b07 	vadd.f64	d5, d5, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d58c:	f241 3378 	movw	r3, #4984	; 0x1378
 800d590:	443b      	add	r3, r7
 800d592:	ed93 4b00 	vldr	d4, [r3]
 800d596:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d59a:	443b      	add	r3, r7
 800d59c:	ed93 7b00 	vldr	d7, [r3]
 800d5a0:	ee24 4b07 	vmul.f64	d4, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d5a4:	f241 3318 	movw	r3, #4888	; 0x1318
 800d5a8:	443b      	add	r3, r7
 800d5aa:	ed93 3b00 	vldr	d3, [r3]
 800d5ae:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d5b2:	443b      	add	r3, r7
 800d5b4:	ed93 7b00 	vldr	d7, [r3]
 800d5b8:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d5bc:	ee34 7b07 	vadd.f64	d7, d4, d7
    t85_im * t34_re) * 1.3164953090834051E-18);
 800d5c0:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 800d738 <G_q+0xb170>
 800d5c4:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t58_im + t76_re * t23_re) * 1.3164953090834051E-18) - (t13_re * t34_im +
 800d5c8:	ee35 7b47 	vsub.f64	d7, d5, d7
  b_G_q[2].im = -g * ((((((t8_im * t19_im_tmp + t54_re * t19_re_tmp) * 0.1376 +
 800d5cc:	4b5c      	ldr	r3, [pc, #368]	; (800d740 <G_q+0xb178>)
 800d5ce:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d5d2:	443a      	add	r2, r7
 800d5d4:	4413      	add	r3, r2
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	3320      	adds	r3, #32
 800d5da:	ee26 7b07 	vmul.f64	d7, d6, d7
 800d5de:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t172.im == 0.0) {
 800d5e2:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d5e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800d5ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5f2:	d115      	bne.n	800d620 <G_q+0xb058>
    t85_im = t172.re / 2.0;
 800d5f4:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d5f8:	ed93 6b00 	vldr	d6, [r3]
 800d5fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d600:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d604:	f241 3318 	movw	r3, #4888	; 0x1318
 800d608:	443b      	add	r3, r7
 800d60a:	ed83 7b00 	vstr	d7, [r3]
    t41_im = 0.0;
 800d60e:	f04f 0300 	mov.w	r3, #0
 800d612:	f04f 0400 	mov.w	r4, #0
 800d616:	f507 5298 	add.w	r2, r7, #4864	; 0x1300
 800d61a:	e9c2 3400 	strd	r3, r4, [r2]
 800d61e:	e037      	b.n	800d690 <G_q+0xb0c8>
  } else if (t172.re == 0.0) {
 800d620:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d624:	ed93 7b00 	vldr	d7, [r3]
 800d628:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d62c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d630:	d115      	bne.n	800d65e <G_q+0xb096>
    t85_im = 0.0;
 800d632:	f04f 0300 	mov.w	r3, #0
 800d636:	f04f 0400 	mov.w	r4, #0
 800d63a:	f241 3218 	movw	r2, #4888	; 0x1318
 800d63e:	443a      	add	r2, r7
 800d640:	e9c2 3400 	strd	r3, r4, [r2]
    t41_im = t172.im / 2.0;
 800d644:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d648:	ed93 6b02 	vldr	d6, [r3, #8]
 800d64c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d650:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d654:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d658:	ed83 7b00 	vstr	d7, [r3]
 800d65c:	e018      	b.n	800d690 <G_q+0xb0c8>
  } else {
    t85_im = t172.re / 2.0;
 800d65e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d662:	ed93 6b00 	vldr	d6, [r3]
 800d666:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d66a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d66e:	f241 3318 	movw	r3, #4888	; 0x1318
 800d672:	443b      	add	r3, r7
 800d674:	ed83 7b00 	vstr	d7, [r3]
    t41_im = t172.im / 2.0;
 800d678:	f507 731c 	add.w	r3, r7, #624	; 0x270
 800d67c:	ed93 6b02 	vldr	d6, [r3, #8]
 800d680:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d684:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d688:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800d68c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t173.im == 0.0) {
 800d690:	4b2c      	ldr	r3, [pc, #176]	; (800d744 <G_q+0xb17c>)
 800d692:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d696:	443a      	add	r2, r7
 800d698:	4413      	add	r3, r2
 800d69a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d69e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6a6:	d119      	bne.n	800d6dc <G_q+0xb114>
    t34_re = t173.re / 2.0;
 800d6a8:	4b26      	ldr	r3, [pc, #152]	; (800d744 <G_q+0xb17c>)
 800d6aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d6ae:	443a      	add	r2, r7
 800d6b0:	4413      	add	r3, r2
 800d6b2:	ed93 6b00 	vldr	d6, [r3]
 800d6b6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d6ba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d6be:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d6c2:	443b      	add	r3, r7
 800d6c4:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800d6c8:	f04f 0300 	mov.w	r3, #0
 800d6cc:	f04f 0400 	mov.w	r4, #0
 800d6d0:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800d6d4:	443a      	add	r2, r7
 800d6d6:	e9c2 3400 	strd	r3, r4, [r2]
 800d6da:	e055      	b.n	800d788 <G_q+0xb1c0>
  } else if (t173.re == 0.0) {
 800d6dc:	4b19      	ldr	r3, [pc, #100]	; (800d744 <G_q+0xb17c>)
 800d6de:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d6e2:	443a      	add	r2, r7
 800d6e4:	4413      	add	r3, r2
 800d6e6:	ed93 7b00 	vldr	d7, [r3]
 800d6ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d6ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d6f2:	d129      	bne.n	800d748 <G_q+0xb180>
    t34_re = 0.0;
 800d6f4:	f04f 0300 	mov.w	r3, #0
 800d6f8:	f04f 0400 	mov.w	r4, #0
 800d6fc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800d700:	443a      	add	r2, r7
 800d702:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t173.im / 2.0;
 800d706:	4b0f      	ldr	r3, [pc, #60]	; (800d744 <G_q+0xb17c>)
 800d708:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d70c:	443a      	add	r2, r7
 800d70e:	4413      	add	r3, r2
 800d710:	ed93 6b02 	vldr	d6, [r3, #8]
 800d714:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d718:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d71c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d720:	443b      	add	r3, r7
 800d722:	ed83 7b00 	vstr	d7, [r3]
 800d726:	e02f      	b.n	800d788 <G_q+0xb1c0>
 800d728:	75f6fd22 	.word	0x75f6fd22
 800d72c:	3fc19ce0 	.word	0x3fc19ce0
 800d730:	9374bc6a 	.word	0x9374bc6a
 800d734:	3f960418 	.word	0x3f960418
 800d738:	2ba953a1 	.word	0x2ba953a1
 800d73c:	3c3848f9 	.word	0x3c3848f9
 800d740:	ffffec34 	.word	0xffffec34
 800d744:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t34_re = t173.re / 2.0;
 800d748:	4bb5      	ldr	r3, [pc, #724]	; (800da20 <G_q+0xb458>)
 800d74a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d74e:	443a      	add	r2, r7
 800d750:	4413      	add	r3, r2
 800d752:	ed93 6b00 	vldr	d6, [r3]
 800d756:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d75a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d75e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800d762:	443b      	add	r3, r7
 800d764:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t173.im / 2.0;
 800d768:	4bad      	ldr	r3, [pc, #692]	; (800da20 <G_q+0xb458>)
 800d76a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800d76e:	443a      	add	r2, r7
 800d770:	4413      	add	r3, r2
 800d772:	ed93 6b02 	vldr	d6, [r3, #8]
 800d776:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d77a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d77e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800d782:	443b      	add	r3, r7
 800d784:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d788:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d78c:	ed93 7b00 	vldr	d7, [r3]
 800d790:	ed9f 6b9f 	vldr	d6, [pc, #636]	; 800da10 <G_q+0xb448>
 800d794:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d798:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d79c:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7a0:	ed9f 5b9d 	vldr	d5, [pc, #628]	; 800da18 <G_q+0xb450>
 800d7a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d7a8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d7ac:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d7b0:	ed93 7b00 	vldr	d7, [r3]
 800d7b4:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800da10 <G_q+0xb448>
 800d7b8:	ee27 5b05 	vmul.f64	d5, d7, d5
    t183.im * 3.061616997868383E-17);
 800d7bc:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d7c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7c4:	ed9f 4b94 	vldr	d4, [pc, #592]	; 800da18 <G_q+0xb450>
 800d7c8:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t182.re * 0.0 - t182.im * 3.061616997868383E-17) - (t183.re * 0.0 -
 800d7cc:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d7d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d7d4:	f241 3368 	movw	r3, #4968	; 0x1368
 800d7d8:	443b      	add	r3, r7
 800d7da:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d7de:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d7e2:	ed93 7b00 	vldr	d7, [r3]
 800d7e6:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 800da18 <G_q+0xb450>
 800d7ea:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d7ee:	f507 63f6 	add.w	r3, r7, #1968	; 0x7b0
 800d7f2:	ed93 7b02 	vldr	d7, [r3, #8]
 800d7f6:	ed9f 5b86 	vldr	d5, [pc, #536]	; 800da10 <G_q+0xb448>
 800d7fa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d7fe:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d802:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d806:	ed93 7b00 	vldr	d7, [r3]
 800d80a:	ed9f 5b83 	vldr	d5, [pc, #524]	; 800da18 <G_q+0xb450>
 800d80e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t183.im * 0.0);
 800d812:	f507 63f8 	add.w	r3, r7, #1984	; 0x7c0
 800d816:	ed93 7b02 	vldr	d7, [r3, #8]
 800d81a:	ed9f 4b7d 	vldr	d4, [pc, #500]	; 800da10 <G_q+0xb448>
 800d81e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d822:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t182.re * 3.061616997868383E-17 + t182.im * 0.0) - (t183.re *
 800d826:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d82a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800d82e:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t180.re * 0.0 - t180.im * 0.5) - (t181.re * 0.0 - t181.im * 0.5);
 800d832:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d836:	ed93 7b00 	vldr	d7, [r3]
 800d83a:	ed9f 6b75 	vldr	d6, [pc, #468]	; 800da10 <G_q+0xb448>
 800d83e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d842:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d846:	ed93 7b02 	vldr	d7, [r3, #8]
 800d84a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d84e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d852:	ee36 6b47 	vsub.f64	d6, d6, d7
 800d856:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d85a:	ed93 7b00 	vldr	d7, [r3]
 800d85e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800da10 <G_q+0xb448>
 800d862:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d866:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d86a:	ed93 7b02 	vldr	d7, [r3, #8]
 800d86e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800d872:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d876:	ee35 7b47 	vsub.f64	d7, d5, d7
 800d87a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d87e:	f241 3348 	movw	r3, #4936	; 0x1348
 800d882:	443b      	add	r3, r7
 800d884:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t180.re * 0.5 + t180.im * 0.0) - (t181.re * 0.5 + t181.im * 0.0);
 800d888:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d88c:	ed93 7b00 	vldr	d7, [r3]
 800d890:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800d894:	ee27 6b06 	vmul.f64	d6, d7, d6
 800d898:	f507 6371 	add.w	r3, r7, #3856	; 0xf10
 800d89c:	ed93 7b02 	vldr	d7, [r3, #8]
 800d8a0:	ed9f 5b5b 	vldr	d5, [pc, #364]	; 800da10 <G_q+0xb448>
 800d8a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 800d8a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d8ac:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d8b0:	ed93 7b00 	vldr	d7, [r3]
 800d8b4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800d8b8:	ee27 5b05 	vmul.f64	d5, d7, d5
 800d8bc:	f507 6372 	add.w	r3, r7, #3872	; 0xf20
 800d8c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d8c4:	ed9f 4b52 	vldr	d4, [pc, #328]	; 800da10 <G_q+0xb448>
 800d8c8:	ee27 7b04 	vmul.f64	d7, d7, d4
 800d8cc:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d8d0:	ee36 7b47 	vsub.f64	d7, d6, d7
 800d8d4:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800d8d8:	ed83 7b00 	vstr	d7, [r3]
  if (t178.im == 0.0) {
 800d8dc:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d8e0:	ed93 7b02 	vldr	d7, [r3, #8]
 800d8e4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d8ec:	d115      	bne.n	800d91a <G_q+0xb352>
    t12_re = t178.re / 2.0;
 800d8ee:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d8f2:	ed93 6b00 	vldr	d6, [r3]
 800d8f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d8fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d8fe:	f241 3388 	movw	r3, #5000	; 0x1388
 800d902:	443b      	add	r3, r7
 800d904:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800d908:	f04f 0300 	mov.w	r3, #0
 800d90c:	f04f 0400 	mov.w	r4, #0
 800d910:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800d914:	e9c2 3400 	strd	r3, r4, [r2]
 800d918:	e037      	b.n	800d98a <G_q+0xb3c2>
  } else if (t178.re == 0.0) {
 800d91a:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d91e:	ed93 7b00 	vldr	d7, [r3]
 800d922:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d92a:	d115      	bne.n	800d958 <G_q+0xb390>
    t12_re = 0.0;
 800d92c:	f04f 0300 	mov.w	r3, #0
 800d930:	f04f 0400 	mov.w	r4, #0
 800d934:	f241 3288 	movw	r2, #5000	; 0x1388
 800d938:	443a      	add	r2, r7
 800d93a:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t178.im / 2.0;
 800d93e:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d942:	ed93 6b02 	vldr	d6, [r3, #8]
 800d946:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d94a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d94e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d952:	ed83 7b00 	vstr	d7, [r3]
 800d956:	e018      	b.n	800d98a <G_q+0xb3c2>
  } else {
    t12_re = t178.re / 2.0;
 800d958:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d95c:	ed93 6b00 	vldr	d6, [r3]
 800d960:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d964:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d968:	f241 3388 	movw	r3, #5000	; 0x1388
 800d96c:	443b      	add	r3, r7
 800d96e:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t178.im / 2.0;
 800d972:	f507 636f 	add.w	r3, r7, #3824	; 0xef0
 800d976:	ed93 6b02 	vldr	d6, [r3, #8]
 800d97a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d97e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d982:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800d986:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t179.im == 0.0) {
 800d98a:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d98e:	ed93 7b02 	vldr	d7, [r3, #8]
 800d992:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99a:	d116      	bne.n	800d9ca <G_q+0xb402>
    t13_re = t179.re / 2.0;
 800d99c:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d9a0:	ed93 6b00 	vldr	d6, [r3]
 800d9a4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d9a8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d9ac:	f241 3378 	movw	r3, #4984	; 0x1378
 800d9b0:	443b      	add	r3, r7
 800d9b2:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800d9b6:	f04f 0300 	mov.w	r3, #0
 800d9ba:	f04f 0400 	mov.w	r4, #0
 800d9be:	f241 3270 	movw	r2, #4976	; 0x1370
 800d9c2:	443a      	add	r2, r7
 800d9c4:	e9c2 3400 	strd	r3, r4, [r2]
 800d9c8:	e046      	b.n	800da58 <G_q+0xb490>
  } else if (t179.re == 0.0) {
 800d9ca:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d9ce:	ed93 7b00 	vldr	d7, [r3]
 800d9d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d9da:	d123      	bne.n	800da24 <G_q+0xb45c>
    t13_re = 0.0;
 800d9dc:	f04f 0300 	mov.w	r3, #0
 800d9e0:	f04f 0400 	mov.w	r4, #0
 800d9e4:	f241 3278 	movw	r2, #4984	; 0x1378
 800d9e8:	443a      	add	r2, r7
 800d9ea:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t179.im / 2.0;
 800d9ee:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800d9f2:	ed93 6b02 	vldr	d6, [r3, #8]
 800d9f6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800d9fa:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800d9fe:	f241 3370 	movw	r3, #4976	; 0x1370
 800da02:	443b      	add	r3, r7
 800da04:	ed83 7b00 	vstr	d7, [r3]
 800da08:	e026      	b.n	800da58 <G_q+0xb490>
 800da0a:	bf00      	nop
 800da0c:	f3af 8000 	nop.w
	...
 800da18:	33145c07 	.word	0x33145c07
 800da1c:	3c81a626 	.word	0x3c81a626
 800da20:	ffffeeb0 	.word	0xffffeeb0
  } else {
    t13_re = t179.re / 2.0;
 800da24:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800da28:	ed93 6b00 	vldr	d6, [r3]
 800da2c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da30:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da34:	f241 3378 	movw	r3, #4984	; 0x1378
 800da38:	443b      	add	r3, r7
 800da3a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t179.im / 2.0;
 800da3e:	f507 6370 	add.w	r3, r7, #3840	; 0xf00
 800da42:	ed93 6b02 	vldr	d6, [r3, #8]
 800da46:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800da4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800da4e:	f241 3370 	movw	r3, #4976	; 0x1370
 800da52:	443b      	add	r3, r7
 800da54:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t176.re * 3.061616997868383E-17 + t177.re * 3.061616997868383E-17;
 800da58:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800da5c:	ed93 7b00 	vldr	d7, [r3]
 800da60:	ed9f 6bd1 	vldr	d6, [pc, #836]	; 800dda8 <G_q+0xb7e0>
 800da64:	ee27 6b06 	vmul.f64	d6, d7, d6
 800da68:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800da6c:	ed93 7b00 	vldr	d7, [r3]
 800da70:	ed9f 5bcd 	vldr	d5, [pc, #820]	; 800dda8 <G_q+0xb7e0>
 800da74:	ee27 7b05 	vmul.f64	d7, d7, d5
 800da78:	ee36 7b07 	vadd.f64	d7, d6, d7
 800da7c:	f241 3330 	movw	r3, #4912	; 0x1330
 800da80:	443b      	add	r3, r7
 800da82:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t176.im * 3.061616997868383E-17 + t177.im * 3.061616997868383E-17;
 800da86:	f507 63f2 	add.w	r3, r7, #1936	; 0x790
 800da8a:	ed93 7b02 	vldr	d7, [r3, #8]
 800da8e:	ed9f 6bc6 	vldr	d6, [pc, #792]	; 800dda8 <G_q+0xb7e0>
 800da92:	ee27 6b06 	vmul.f64	d6, d7, d6
 800da96:	f507 63f4 	add.w	r3, r7, #1952	; 0x7a0
 800da9a:	ed93 7b02 	vldr	d7, [r3, #8]
 800da9e:	ed9f 5bc2 	vldr	d5, [pc, #776]	; 800dda8 <G_q+0xb7e0>
 800daa2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800daa6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800daaa:	f241 3310 	movw	r3, #4880	; 0x1310
 800daae:	443b      	add	r3, r7
 800dab0:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t13_re) + 7.498798913309288E-33;
 800dab4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dab8:	443b      	add	r3, r7
 800daba:	ed93 6b00 	vldr	d6, [r3]
 800dabe:	f241 3378 	movw	r3, #4984	; 0x1378
 800dac2:	443b      	add	r3, r7
 800dac4:	ed93 7b00 	vldr	d7, [r3]
 800dac8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dacc:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800ddc0 <G_q+0xb7f8>
 800dad0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800dad4:	f241 3388 	movw	r3, #5000	; 0x1388
 800dad8:	443b      	add	r3, r7
 800dada:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t13_im;
 800dade:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dae2:	ed93 6b00 	vldr	d6, [r3]
 800dae6:	f241 3370 	movw	r3, #4976	; 0x1370
 800daea:	443b      	add	r3, r7
 800daec:	ed93 7b00 	vldr	d7, [r3]
 800daf0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800daf4:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800daf8:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_re;
 800dafc:	f241 3318 	movw	r3, #4888	; 0x1318
 800db00:	443b      	add	r3, r7
 800db02:	ed93 6b00 	vldr	d6, [r3]
 800db06:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800db0a:	443b      	add	r3, r7
 800db0c:	ed93 7b00 	vldr	d7, [r3]
 800db10:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db14:	f241 3318 	movw	r3, #4888	; 0x1318
 800db18:	443b      	add	r3, r7
 800db1a:	ed83 7b00 	vstr	d7, [r3]
  t41_im += t34_im;
 800db1e:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800db22:	ed93 6b00 	vldr	d6, [r3]
 800db26:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800db2a:	443b      	add	r3, r7
 800db2c:	ed93 7b00 	vldr	d7, [r3]
 800db30:	ee36 7b07 	vadd.f64	d7, d6, d7
 800db34:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800db38:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800db3c:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800db40:	ed93 7b00 	vldr	d7, [r3]
 800db44:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 800ddb0 <G_q+0xb7e8>
 800db48:	ee27 6b06 	vmul.f64	d6, d7, d6
 800db4c:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800db50:	ed93 7b00 	vldr	d7, [r3]
 800db54:	ed9f 5b96 	vldr	d5, [pc, #600]	; 800ddb0 <G_q+0xb7e8>
 800db58:	ee27 7b05 	vmul.f64	d7, d7, d5
 800db5c:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800db60:	f241 3368 	movw	r3, #4968	; 0x1368
 800db64:	443b      	add	r3, r7
 800db66:	ed93 5b00 	vldr	d5, [r3]
 800db6a:	f241 3348 	movw	r3, #4936	; 0x1348
 800db6e:	443b      	add	r3, r7
 800db70:	ed93 7b00 	vldr	d7, [r3]
 800db74:	ee25 5b07 	vmul.f64	d5, d5, d7
 800db78:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800db7c:	ed93 4b00 	vldr	d4, [r3]
 800db80:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800db84:	ed93 7b00 	vldr	d7, [r3]
 800db88:	ee24 7b07 	vmul.f64	d7, d4, d7
 800db8c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800db90:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800db94:	f241 3330 	movw	r3, #4912	; 0x1330
 800db98:	443b      	add	r3, r7
 800db9a:	ed93 5b00 	vldr	d5, [r3]
 800db9e:	f241 3388 	movw	r3, #5000	; 0x1388
 800dba2:	443b      	add	r3, r7
 800dba4:	ed93 7b00 	vldr	d7, [r3]
 800dba8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dbac:	f241 3310 	movw	r3, #4880	; 0x1310
 800dbb0:	443b      	add	r3, r7
 800dbb2:	ed93 4b00 	vldr	d4, [r3]
 800dbb6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dbba:	ed93 7b00 	vldr	d7, [r3]
 800dbbe:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dbc2:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800dbc6:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t10_re = (((t174.re * 6.123233995736766E-17 + t175.re *
 800dbca:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800ddb0 <G_q+0xb7e8>
 800dbce:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dbd2:	f241 3338 	movw	r3, #4920	; 0x1338
 800dbd6:	443b      	add	r3, r7
 800dbd8:	ed83 7b00 	vstr	d7, [r3]
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800dbdc:	f507 636d 	add.w	r3, r7, #3792	; 0xed0
 800dbe0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbe4:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800ddb0 <G_q+0xb7e8>
 800dbe8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dbec:	f507 636e 	add.w	r3, r7, #3808	; 0xee0
 800dbf0:	ed93 7b02 	vldr	d7, [r3, #8]
 800dbf4:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800ddb0 <G_q+0xb7e8>
 800dbf8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800dbfc:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800dc00:	f241 3368 	movw	r3, #4968	; 0x1368
 800dc04:	443b      	add	r3, r7
 800dc06:	ed93 5b00 	vldr	d5, [r3]
 800dc0a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800dc0e:	ed93 7b00 	vldr	d7, [r3]
 800dc12:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dc16:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800dc1a:	ed93 4b00 	vldr	d4, [r3]
 800dc1e:	f241 3348 	movw	r3, #4936	; 0x1348
 800dc22:	443b      	add	r3, r7
 800dc24:	ed93 7b00 	vldr	d7, [r3]
 800dc28:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dc2c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dc30:	ee36 6b07 	vadd.f64	d6, d6, d7
 800dc34:	f241 3330 	movw	r3, #4912	; 0x1330
 800dc38:	443b      	add	r3, r7
 800dc3a:	ed93 5b00 	vldr	d5, [r3]
 800dc3e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800dc42:	ed93 7b00 	vldr	d7, [r3]
 800dc46:	ee25 5b07 	vmul.f64	d5, d5, d7
 800dc4a:	f241 3310 	movw	r3, #4880	; 0x1310
 800dc4e:	443b      	add	r3, r7
 800dc50:	ed93 4b00 	vldr	d4, [r3]
 800dc54:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc58:	443b      	add	r3, r7
 800dc5a:	ed93 7b00 	vldr	d7, [r3]
 800dc5e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800dc62:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t174.im * 6.123233995736766E-17 + t175.im * 6.123233995736766E-17)
 800dc66:	ee36 7b07 	vadd.f64	d7, d6, d7
 800dc6a:	f241 3330 	movw	r3, #4912	; 0x1330
 800dc6e:	443b      	add	r3, r7
 800dc70:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t186.im == 0.0) {
 800dc74:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dc78:	ed93 7b02 	vldr	d7, [r3, #8]
 800dc7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc84:	d116      	bne.n	800dcb4 <G_q+0xb6ec>
    t12_re = t186.re / 2.0;
 800dc86:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dc8a:	ed93 6b00 	vldr	d6, [r3]
 800dc8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dc92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dc96:	f241 3388 	movw	r3, #5000	; 0x1388
 800dc9a:	443b      	add	r3, r7
 800dc9c:	ed83 7b00 	vstr	d7, [r3]
    t3_im = 0.0;
 800dca0:	f04f 0300 	mov.w	r3, #0
 800dca4:	f04f 0400 	mov.w	r4, #0
 800dca8:	f241 3210 	movw	r2, #4880	; 0x1310
 800dcac:	443a      	add	r2, r7
 800dcae:	e9c2 3400 	strd	r3, r4, [r2]
 800dcb2:	e039      	b.n	800dd28 <G_q+0xb760>
  } else if (t186.re == 0.0) {
 800dcb4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dcb8:	ed93 7b00 	vldr	d7, [r3]
 800dcbc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dcc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dcc4:	d116      	bne.n	800dcf4 <G_q+0xb72c>
    t12_re = 0.0;
 800dcc6:	f04f 0300 	mov.w	r3, #0
 800dcca:	f04f 0400 	mov.w	r4, #0
 800dcce:	f241 3288 	movw	r2, #5000	; 0x1388
 800dcd2:	443a      	add	r2, r7
 800dcd4:	e9c2 3400 	strd	r3, r4, [r2]
    t3_im = t186.im / 2.0;
 800dcd8:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dcdc:	ed93 6b02 	vldr	d6, [r3, #8]
 800dce0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dce4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dce8:	f241 3310 	movw	r3, #4880	; 0x1310
 800dcec:	443b      	add	r3, r7
 800dcee:	ed83 7b00 	vstr	d7, [r3]
 800dcf2:	e019      	b.n	800dd28 <G_q+0xb760>
  } else {
    t12_re = t186.re / 2.0;
 800dcf4:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dcf8:	ed93 6b00 	vldr	d6, [r3]
 800dcfc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd00:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd04:	f241 3388 	movw	r3, #5000	; 0x1388
 800dd08:	443b      	add	r3, r7
 800dd0a:	ed83 7b00 	vstr	d7, [r3]
    t3_im = t186.im / 2.0;
 800dd0e:	f507 63fa 	add.w	r3, r7, #2000	; 0x7d0
 800dd12:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd1e:	f241 3310 	movw	r3, #4880	; 0x1310
 800dd22:	443b      	add	r3, r7
 800dd24:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t187.im == 0.0) {
 800dd28:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dd2c:	ed93 7b02 	vldr	d7, [r3, #8]
 800dd30:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd38:	d116      	bne.n	800dd68 <G_q+0xb7a0>
    t34_re = t187.re / 2.0;
 800dd3a:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dd3e:	ed93 6b00 	vldr	d6, [r3]
 800dd42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd4a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dd4e:	443b      	add	r3, r7
 800dd50:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800dd54:	f04f 0300 	mov.w	r3, #0
 800dd58:	f04f 0400 	mov.w	r4, #0
 800dd5c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dd60:	443a      	add	r2, r7
 800dd62:	e9c2 3400 	strd	r3, r4, [r2]
 800dd66:	e049      	b.n	800ddfc <G_q+0xb834>
  } else if (t187.re == 0.0) {
 800dd68:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dd6c:	ed93 7b00 	vldr	d7, [r3]
 800dd70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dd74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dd78:	d126      	bne.n	800ddc8 <G_q+0xb800>
    t34_re = 0.0;
 800dd7a:	f04f 0300 	mov.w	r3, #0
 800dd7e:	f04f 0400 	mov.w	r4, #0
 800dd82:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dd86:	443a      	add	r2, r7
 800dd88:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t187.im / 2.0;
 800dd8c:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dd90:	ed93 6b02 	vldr	d6, [r3, #8]
 800dd94:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dd98:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dd9c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800dda0:	443b      	add	r3, r7
 800dda2:	ed83 7b00 	vstr	d7, [r3]
 800dda6:	e029      	b.n	800ddfc <G_q+0xb834>
 800dda8:	33145c07 	.word	0x33145c07
 800ddac:	3c81a626 	.word	0x3c81a626
 800ddb0:	33145c07 	.word	0x33145c07
 800ddb4:	3c91a626 	.word	0x3c91a626
	...
 800ddc0:	858a5d48 	.word	0x858a5d48
 800ddc4:	394377ce 	.word	0x394377ce
  } else {
    t34_re = t187.re / 2.0;
 800ddc8:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800ddcc:	ed93 6b00 	vldr	d6, [r3]
 800ddd0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddd4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddd8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dddc:	443b      	add	r3, r7
 800ddde:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t187.im / 2.0;
 800dde2:	f507 63fc 	add.w	r3, r7, #2016	; 0x7e0
 800dde6:	ed93 6b02 	vldr	d6, [r3, #8]
 800ddea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ddee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ddf2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ddf6:	443b      	add	r3, r7
 800ddf8:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800ddfc:	f241 3388 	movw	r3, #5000	; 0x1388
 800de00:	443b      	add	r3, r7
 800de02:	ed93 6b00 	vldr	d6, [r3]
 800de06:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800de0a:	443b      	add	r3, r7
 800de0c:	ed93 7b00 	vldr	d7, [r3]
 800de10:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de14:	f241 3388 	movw	r3, #5000	; 0x1388
 800de18:	443b      	add	r3, r7
 800de1a:	ed83 7b00 	vstr	d7, [r3]
  t3_im += t34_im;
 800de1e:	f241 3310 	movw	r3, #4880	; 0x1310
 800de22:	443b      	add	r3, r7
 800de24:	ed93 6b00 	vldr	d6, [r3]
 800de28:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800de2c:	443b      	add	r3, r7
 800de2e:	ed93 7b00 	vldr	d7, [r3]
 800de32:	ee36 7b07 	vadd.f64	d7, d6, d7
 800de36:	f241 3310 	movw	r3, #4880	; 0x1310
 800de3a:	443b      	add	r3, r7
 800de3c:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t188.re * 0.0 - t188.im * 0.5) - (t189.re * 0.0 - t189.im * 0.5);
 800de40:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800de44:	ed93 7b00 	vldr	d7, [r3]
 800de48:	ed1f 6b25 	vldr	d6, [pc, #-148]	; 800ddb8 <G_q+0xb7f0>
 800de4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800de50:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800de54:	ed93 7b02 	vldr	d7, [r3, #8]
 800de58:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800de5c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800de60:	ee36 6b47 	vsub.f64	d6, d6, d7
 800de64:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800de68:	ed93 7b00 	vldr	d7, [r3]
 800de6c:	ed1f 5b2e 	vldr	d5, [pc, #-184]	; 800ddb8 <G_q+0xb7f0>
 800de70:	ee27 5b05 	vmul.f64	d5, d7, d5
 800de74:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800de78:	ed93 7b02 	vldr	d7, [r3, #8]
 800de7c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800de80:	ee27 7b04 	vmul.f64	d7, d7, d4
 800de84:	ee35 7b47 	vsub.f64	d7, d5, d7
 800de88:	ee36 7b47 	vsub.f64	d7, d6, d7
 800de8c:	f241 3378 	movw	r3, #4984	; 0x1378
 800de90:	443b      	add	r3, r7
 800de92:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t188.re * 0.5 + t188.im * 0.0) - (t189.re * 0.5 + t189.im * 0.0);
 800de96:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800de9a:	ed93 7b00 	vldr	d7, [r3]
 800de9e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800dea2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800dea6:	f507 6373 	add.w	r3, r7, #3888	; 0xf30
 800deaa:	ed93 7b02 	vldr	d7, [r3, #8]
 800deae:	ed1f 5b3e 	vldr	d5, [pc, #-248]	; 800ddb8 <G_q+0xb7f0>
 800deb2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800deb6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800deba:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800debe:	ed93 7b00 	vldr	d7, [r3]
 800dec2:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800dec6:	ee27 5b05 	vmul.f64	d5, d7, d5
 800deca:	f507 6374 	add.w	r3, r7, #3904	; 0xf40
 800dece:	ed93 7b02 	vldr	d7, [r3, #8]
 800ded2:	ed1f 4b47 	vldr	d4, [pc, #-284]	; 800ddb8 <G_q+0xb7f0>
 800ded6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800deda:	ee35 7b07 	vadd.f64	d7, d5, d7
 800dede:	ee36 7b47 	vsub.f64	d7, d6, d7
 800dee2:	f241 3370 	movw	r3, #4976	; 0x1370
 800dee6:	443b      	add	r3, r7
 800dee8:	ed83 7b00 	vstr	d7, [r3]
  if (t192.im == 0.0) {
 800deec:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800def0:	ed93 7b02 	vldr	d7, [r3, #8]
 800def4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800def8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800defc:	d115      	bne.n	800df2a <G_q+0xb962>
    t16_re = t192.re / 2.0;
 800defe:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800df02:	ed93 6b00 	vldr	d6, [r3]
 800df06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df0e:	f241 3368 	movw	r3, #4968	; 0x1368
 800df12:	443b      	add	r3, r7
 800df14:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800df18:	f04f 0300 	mov.w	r3, #0
 800df1c:	f04f 0400 	mov.w	r4, #0
 800df20:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800df24:	e9c2 3400 	strd	r3, r4, [r2]
 800df28:	e037      	b.n	800df9a <G_q+0xb9d2>
  } else if (t192.re == 0.0) {
 800df2a:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800df2e:	ed93 7b00 	vldr	d7, [r3]
 800df32:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800df36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3a:	d115      	bne.n	800df68 <G_q+0xb9a0>
    t16_re = 0.0;
 800df3c:	f04f 0300 	mov.w	r3, #0
 800df40:	f04f 0400 	mov.w	r4, #0
 800df44:	f241 3268 	movw	r2, #4968	; 0x1368
 800df48:	443a      	add	r2, r7
 800df4a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t192.im / 2.0;
 800df4e:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800df52:	ed93 6b02 	vldr	d6, [r3, #8]
 800df56:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df5a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df5e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df62:	ed83 7b00 	vstr	d7, [r3]
 800df66:	e018      	b.n	800df9a <G_q+0xb9d2>
  } else {
    t16_re = t192.re / 2.0;
 800df68:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800df6c:	ed93 6b00 	vldr	d6, [r3]
 800df70:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df78:	f241 3368 	movw	r3, #4968	; 0x1368
 800df7c:	443b      	add	r3, r7
 800df7e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t192.im / 2.0;
 800df82:	f507 6375 	add.w	r3, r7, #3920	; 0xf50
 800df86:	ed93 6b02 	vldr	d6, [r3, #8]
 800df8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800df8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800df92:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800df96:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t193.im == 0.0) {
 800df9a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800df9e:	ed93 7b02 	vldr	d7, [r3, #8]
 800dfa2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfaa:	d116      	bne.n	800dfda <G_q+0xba12>
    t34_re = t193.re / 2.0;
 800dfac:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dfb0:	ed93 6b00 	vldr	d6, [r3]
 800dfb4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800dfb8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800dfbc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800dfc0:	443b      	add	r3, r7
 800dfc2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800dfc6:	f04f 0300 	mov.w	r3, #0
 800dfca:	f04f 0400 	mov.w	r4, #0
 800dfce:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800dfd2:	443a      	add	r2, r7
 800dfd4:	e9c2 3400 	strd	r3, r4, [r2]
 800dfd8:	e039      	b.n	800e04e <G_q+0xba86>
  } else if (t193.re == 0.0) {
 800dfda:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800dfde:	ed93 7b00 	vldr	d7, [r3]
 800dfe2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800dfe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfea:	d116      	bne.n	800e01a <G_q+0xba52>
    t34_re = 0.0;
 800dfec:	f04f 0300 	mov.w	r3, #0
 800dff0:	f04f 0400 	mov.w	r4, #0
 800dff4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800dff8:	443a      	add	r2, r7
 800dffa:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t193.im / 2.0;
 800dffe:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e002:	ed93 6b02 	vldr	d6, [r3, #8]
 800e006:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e00a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e00e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e012:	443b      	add	r3, r7
 800e014:	ed83 7b00 	vstr	d7, [r3]
 800e018:	e019      	b.n	800e04e <G_q+0xba86>
  } else {
    t34_re = t193.re / 2.0;
 800e01a:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e01e:	ed93 6b00 	vldr	d6, [r3]
 800e022:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e02a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e02e:	443b      	add	r3, r7
 800e030:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t193.im / 2.0;
 800e034:	f507 6376 	add.w	r3, r7, #3936	; 0xf60
 800e038:	ed93 6b02 	vldr	d6, [r3, #8]
 800e03c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e040:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e044:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e048:	443b      	add	r3, r7
 800e04a:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t190.re * 0.0 - t190.im * 0.5) - (t191.re * 0.0 - t191.im * 0.5);
 800e04e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e052:	ed93 7b00 	vldr	d7, [r3]
 800e056:	ed1f 6ba8 	vldr	d6, [pc, #-672]	; 800ddb8 <G_q+0xb7f0>
 800e05a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e05e:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e062:	ed93 7b02 	vldr	d7, [r3, #8]
 800e066:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e06a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e06e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e072:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e076:	ed93 7b00 	vldr	d7, [r3]
 800e07a:	ed1f 5bb1 	vldr	d5, [pc, #-708]	; 800ddb8 <G_q+0xb7f0>
 800e07e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e082:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e086:	ed93 7b02 	vldr	d7, [r3, #8]
 800e08a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e08e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e092:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e096:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e09a:	f241 3348 	movw	r3, #4936	; 0x1348
 800e09e:	443b      	add	r3, r7
 800e0a0:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t190.re * 0.5 + t190.im * 0.0) - (t191.re * 0.5 + t191.im * 0.0);
 800e0a4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e0a8:	ed93 7b00 	vldr	d7, [r3]
 800e0ac:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e0b0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e0b4:	f507 63fe 	add.w	r3, r7, #2032	; 0x7f0
 800e0b8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0bc:	ed1f 5bc2 	vldr	d5, [pc, #-776]	; 800ddb8 <G_q+0xb7f0>
 800e0c0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e0c4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e0c8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e0cc:	ed93 7b00 	vldr	d7, [r3]
 800e0d0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e0d4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e0d8:	f507 6300 	add.w	r3, r7, #2048	; 0x800
 800e0dc:	ed93 7b02 	vldr	d7, [r3, #8]
 800e0e0:	ed1f 4bcb 	vldr	d4, [pc, #-812]	; 800ddb8 <G_q+0xb7f0>
 800e0e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e0e8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e0ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e0f0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e0f4:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800e0f8:	f241 3368 	movw	r3, #4968	; 0x1368
 800e0fc:	443b      	add	r3, r7
 800e0fe:	ed93 6b00 	vldr	d6, [r3]
 800e102:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e106:	443b      	add	r3, r7
 800e108:	ed93 7b00 	vldr	d7, [r3]
 800e10c:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e110:	ed1f 6bd5 	vldr	d6, [pc, #-852]	; 800ddc0 <G_q+0xb7f8>
 800e114:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e118:	f241 3368 	movw	r3, #4968	; 0x1368
 800e11c:	443b      	add	r3, r7
 800e11e:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800e122:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e126:	ed93 6b00 	vldr	d6, [r3]
 800e12a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e12e:	443b      	add	r3, r7
 800e130:	ed93 7b00 	vldr	d7, [r3]
 800e134:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e138:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e13c:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t12_re * t13_re - t3_im * t13_im) - (t20_re * t16_re - t20_im *
 800e140:	f241 3388 	movw	r3, #5000	; 0x1388
 800e144:	443b      	add	r3, r7
 800e146:	ed93 6b00 	vldr	d6, [r3]
 800e14a:	f241 3378 	movw	r3, #4984	; 0x1378
 800e14e:	443b      	add	r3, r7
 800e150:	ed93 7b00 	vldr	d7, [r3]
 800e154:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e158:	f241 3310 	movw	r3, #4880	; 0x1310
 800e15c:	443b      	add	r3, r7
 800e15e:	ed93 5b00 	vldr	d5, [r3]
 800e162:	f241 3370 	movw	r3, #4976	; 0x1370
 800e166:	443b      	add	r3, r7
 800e168:	ed93 7b00 	vldr	d7, [r3]
 800e16c:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e170:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e174:	f241 3348 	movw	r3, #4936	; 0x1348
 800e178:	443b      	add	r3, r7
 800e17a:	ed93 5b00 	vldr	d5, [r3]
 800e17e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e182:	443b      	add	r3, r7
 800e184:	ed93 7b00 	vldr	d7, [r3]
 800e188:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e18c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e190:	ed93 4b00 	vldr	d4, [r3]
 800e194:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e198:	ed93 7b00 	vldr	d7, [r3]
 800e19c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e1a0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e1a4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e1a8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e1ac:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t3_im = (t12_re * t13_im + t3_im * t13_re) - (t20_re * t16_im + t20_im *
 800e1b0:	f241 3388 	movw	r3, #5000	; 0x1388
 800e1b4:	443b      	add	r3, r7
 800e1b6:	ed93 6b00 	vldr	d6, [r3]
 800e1ba:	f241 3370 	movw	r3, #4976	; 0x1370
 800e1be:	443b      	add	r3, r7
 800e1c0:	ed93 7b00 	vldr	d7, [r3]
 800e1c4:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e1c8:	f241 3310 	movw	r3, #4880	; 0x1310
 800e1cc:	443b      	add	r3, r7
 800e1ce:	ed93 5b00 	vldr	d5, [r3]
 800e1d2:	f241 3378 	movw	r3, #4984	; 0x1378
 800e1d6:	443b      	add	r3, r7
 800e1d8:	ed93 7b00 	vldr	d7, [r3]
 800e1dc:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e1e0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e1e4:	f241 3348 	movw	r3, #4936	; 0x1348
 800e1e8:	443b      	add	r3, r7
 800e1ea:	ed93 5b00 	vldr	d5, [r3]
 800e1ee:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e1f2:	ed93 7b00 	vldr	d7, [r3]
 800e1f6:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e1fa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e1fe:	ed93 4b00 	vldr	d4, [r3]
 800e202:	f241 3368 	movw	r3, #4968	; 0x1368
 800e206:	443b      	add	r3, r7
 800e208:	ed93 7b00 	vldr	d7, [r3]
 800e20c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e210:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e214:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e218:	f241 3310 	movw	r3, #4880	; 0x1310
 800e21c:	443b      	add	r3, r7
 800e21e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t34_re = (t184.re * 0.0 - t184.im * 0.5) - (t185.re * 0.0 - t185.im * 0.5);
 800e222:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e226:	ed93 7b00 	vldr	d7, [r3]
 800e22a:	ed9f 6bed 	vldr	d6, [pc, #948]	; 800e5e0 <G_q+0xc018>
 800e22e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e232:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e236:	ed93 7b02 	vldr	d7, [r3, #8]
 800e23a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e23e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e242:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e246:	4bea      	ldr	r3, [pc, #936]	; (800e5f0 <G_q+0xc028>)
 800e248:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e24c:	443a      	add	r2, r7
 800e24e:	4413      	add	r3, r2
 800e250:	ed93 7b00 	vldr	d7, [r3]
 800e254:	ed9f 5be2 	vldr	d5, [pc, #904]	; 800e5e0 <G_q+0xc018>
 800e258:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e25c:	4be4      	ldr	r3, [pc, #912]	; (800e5f0 <G_q+0xc028>)
 800e25e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e262:	443a      	add	r2, r7
 800e264:	4413      	add	r3, r2
 800e266:	ed93 7b02 	vldr	d7, [r3, #8]
 800e26a:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e26e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e272:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e276:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e27a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e27e:	443b      	add	r3, r7
 800e280:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t184.re * 0.5 + t184.im * 0.0) - (t185.re * 0.5 + t185.im * 0.0);
 800e284:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e288:	ed93 7b00 	vldr	d7, [r3]
 800e28c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e290:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e294:	f507 7324 	add.w	r3, r7, #656	; 0x290
 800e298:	ed93 7b02 	vldr	d7, [r3, #8]
 800e29c:	ed9f 5bd0 	vldr	d5, [pc, #832]	; 800e5e0 <G_q+0xc018>
 800e2a0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2a4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e2a8:	4bd1      	ldr	r3, [pc, #836]	; (800e5f0 <G_q+0xc028>)
 800e2aa:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e2ae:	443a      	add	r2, r7
 800e2b0:	4413      	add	r3, r2
 800e2b2:	ed93 7b00 	vldr	d7, [r3]
 800e2b6:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e2ba:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e2be:	4bcc      	ldr	r3, [pc, #816]	; (800e5f0 <G_q+0xc028>)
 800e2c0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e2c4:	443a      	add	r2, r7
 800e2c6:	4413      	add	r3, r2
 800e2c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2cc:	ed9f 4bc4 	vldr	d4, [pc, #784]	; 800e5e0 <G_q+0xc018>
 800e2d0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e2d4:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e2d8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e2dc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e2e0:	443b      	add	r3, r7
 800e2e2:	ed83 7b00 	vstr	d7, [r3]
  b_t54_im = (t194.re * 0.0 - t194.im * 0.5) - (t195.re * 0.0 - t195.im * 0.5);
 800e2e6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e2ea:	ed93 7b00 	vldr	d7, [r3]
 800e2ee:	ed9f 6bbc 	vldr	d6, [pc, #752]	; 800e5e0 <G_q+0xc018>
 800e2f2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e2f6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e2fa:	ed93 7b02 	vldr	d7, [r3, #8]
 800e2fe:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e302:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e306:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e30a:	4bba      	ldr	r3, [pc, #744]	; (800e5f4 <G_q+0xc02c>)
 800e30c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e310:	443a      	add	r2, r7
 800e312:	4413      	add	r3, r2
 800e314:	ed93 7b00 	vldr	d7, [r3]
 800e318:	ed9f 5bb1 	vldr	d5, [pc, #708]	; 800e5e0 <G_q+0xc018>
 800e31c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e320:	4bb4      	ldr	r3, [pc, #720]	; (800e5f4 <G_q+0xc02c>)
 800e322:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e326:	443a      	add	r2, r7
 800e328:	4413      	add	r3, r2
 800e32a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e32e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e332:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e336:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e33a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e33e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 800e342:	443b      	add	r3, r7
 800e344:	ed83 7b00 	vstr	d7, [r3]
  t43_re = (t194.re * 0.5 + t194.im * 0.0) - (t195.re * 0.5 + t195.im * 0.0);
 800e348:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e34c:	ed93 7b00 	vldr	d7, [r3]
 800e350:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e354:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e358:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800e35c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e360:	ed9f 5b9f 	vldr	d5, [pc, #636]	; 800e5e0 <G_q+0xc018>
 800e364:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e368:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e36c:	4ba1      	ldr	r3, [pc, #644]	; (800e5f4 <G_q+0xc02c>)
 800e36e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e372:	443a      	add	r2, r7
 800e374:	4413      	add	r3, r2
 800e376:	ed93 7b00 	vldr	d7, [r3]
 800e37a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e37e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e382:	4b9c      	ldr	r3, [pc, #624]	; (800e5f4 <G_q+0xc02c>)
 800e384:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e388:	443a      	add	r2, r7
 800e38a:	4413      	add	r3, r2
 800e38c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e390:	ed9f 4b93 	vldr	d4, [pc, #588]	; 800e5e0 <G_q+0xc018>
 800e394:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e398:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e39c:	f241 2358 	movw	r3, #4696	; 0x1258
 800e3a0:	443b      	add	r3, r7
 800e3a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e3a6:	ed83 7b00 	vstr	d7, [r3]
  t41_re = (t85_im * b_t10_re - t41_im * t23_re) + (t12_im * t34_re - t3_im *
 800e3aa:	f241 3318 	movw	r3, #4888	; 0x1318
 800e3ae:	443b      	add	r3, r7
 800e3b0:	ed93 6b00 	vldr	d6, [r3]
 800e3b4:	f241 3338 	movw	r3, #4920	; 0x1338
 800e3b8:	443b      	add	r3, r7
 800e3ba:	ed93 7b00 	vldr	d7, [r3]
 800e3be:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e3c2:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e3c6:	ed93 5b00 	vldr	d5, [r3]
 800e3ca:	f241 3330 	movw	r3, #4912	; 0x1330
 800e3ce:	443b      	add	r3, r7
 800e3d0:	ed93 7b00 	vldr	d7, [r3]
 800e3d4:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e3d8:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e3dc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e3e0:	ed93 5b00 	vldr	d5, [r3]
 800e3e4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e3e8:	443b      	add	r3, r7
 800e3ea:	ed93 7b00 	vldr	d7, [r3]
 800e3ee:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e3f2:	f241 3310 	movw	r3, #4880	; 0x1310
 800e3f6:	443b      	add	r3, r7
 800e3f8:	ed93 4b00 	vldr	d4, [r3]
 800e3fc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e400:	443b      	add	r3, r7
 800e402:	ed93 7b00 	vldr	d7, [r3]
 800e406:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e40a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e40e:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e412:	f241 3308 	movw	r3, #4872	; 0x1308
 800e416:	443b      	add	r3, r7
 800e418:	ed83 7b00 	vstr	d7, [r3]
    t34_im);
  t41_im = (t85_im * t23_re + t41_im * b_t10_re) + (t12_im * t34_im + t3_im *
 800e41c:	f241 3318 	movw	r3, #4888	; 0x1318
 800e420:	443b      	add	r3, r7
 800e422:	ed93 6b00 	vldr	d6, [r3]
 800e426:	f241 3330 	movw	r3, #4912	; 0x1330
 800e42a:	443b      	add	r3, r7
 800e42c:	ed93 7b00 	vldr	d7, [r3]
 800e430:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e434:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e438:	ed93 5b00 	vldr	d5, [r3]
 800e43c:	f241 3338 	movw	r3, #4920	; 0x1338
 800e440:	443b      	add	r3, r7
 800e442:	ed93 7b00 	vldr	d7, [r3]
 800e446:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e44a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e44e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e452:	ed93 5b00 	vldr	d5, [r3]
 800e456:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e45a:	443b      	add	r3, r7
 800e45c:	ed93 7b00 	vldr	d7, [r3]
 800e460:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e464:	f241 3310 	movw	r3, #4880	; 0x1310
 800e468:	443b      	add	r3, r7
 800e46a:	ed93 4b00 	vldr	d4, [r3]
 800e46e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e472:	443b      	add	r3, r7
 800e474:	ed93 7b00 	vldr	d7, [r3]
 800e478:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e47c:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e480:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e484:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 800e488:	ed83 7b00 	vstr	d7, [r3]
    t34_re);
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e48c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e490:	ed93 7b00 	vldr	d7, [r3]
 800e494:	ed9f 6b52 	vldr	d6, [pc, #328]	; 800e5e0 <G_q+0xc018>
 800e498:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e49c:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e4a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4a4:	ed9f 5b50 	vldr	d5, [pc, #320]	; 800e5e8 <G_q+0xc020>
 800e4a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e4ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e4b0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e4b4:	ed93 7b00 	vldr	d7, [r3]
 800e4b8:	ed9f 5b49 	vldr	d5, [pc, #292]	; 800e5e0 <G_q+0xc018>
 800e4bc:	ee27 5b05 	vmul.f64	d5, d7, d5
    t207.im * 3.061616997868383E-17);
 800e4c0:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e4c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4c8:	ed9f 4b47 	vldr	d4, [pc, #284]	; 800e5e8 <G_q+0xc020>
 800e4cc:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t206.re * 0.0 - t206.im * 3.061616997868383E-17) - (t207.re * 0.0 -
 800e4d0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e4d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e4d8:	f241 3368 	movw	r3, #4968	; 0x1368
 800e4dc:	443b      	add	r3, r7
 800e4de:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e4e2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e4e6:	ed93 7b00 	vldr	d7, [r3]
 800e4ea:	ed9f 6b3f 	vldr	d6, [pc, #252]	; 800e5e8 <G_q+0xc020>
 800e4ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e4f2:	f507 6303 	add.w	r3, r7, #2096	; 0x830
 800e4f6:	ed93 7b02 	vldr	d7, [r3, #8]
 800e4fa:	ed9f 5b39 	vldr	d5, [pc, #228]	; 800e5e0 <G_q+0xc018>
 800e4fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e502:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e506:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e50a:	ed93 7b00 	vldr	d7, [r3]
 800e50e:	ed9f 5b36 	vldr	d5, [pc, #216]	; 800e5e8 <G_q+0xc020>
 800e512:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t207.im * 0.0);
 800e516:	f507 6304 	add.w	r3, r7, #2112	; 0x840
 800e51a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e51e:	ed9f 4b30 	vldr	d4, [pc, #192]	; 800e5e0 <G_q+0xc018>
 800e522:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e526:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t206.re * 3.061616997868383E-17 + t206.im * 0.0) - (t207.re *
 800e52a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e52e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e532:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t204.re * 0.0 - t204.im * 0.5) - (t205.re * 0.0 - t205.im * 0.5);
 800e536:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e53a:	ed93 7b00 	vldr	d7, [r3]
 800e53e:	ed9f 6b28 	vldr	d6, [pc, #160]	; 800e5e0 <G_q+0xc018>
 800e542:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e546:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e54a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e54e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e552:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e556:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e55a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e55e:	ed93 7b00 	vldr	d7, [r3]
 800e562:	ed9f 5b1f 	vldr	d5, [pc, #124]	; 800e5e0 <G_q+0xc018>
 800e566:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e56a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e56e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e572:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e576:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e57a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e57e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e582:	f241 3348 	movw	r3, #4936	; 0x1348
 800e586:	443b      	add	r3, r7
 800e588:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t204.re * 0.5 + t204.im * 0.0) - (t205.re * 0.5 + t205.im * 0.0);
 800e58c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e590:	ed93 7b00 	vldr	d7, [r3]
 800e594:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e598:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e59c:	f507 637b 	add.w	r3, r7, #4016	; 0xfb0
 800e5a0:	ed93 7b02 	vldr	d7, [r3, #8]
 800e5a4:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 800e5e0 <G_q+0xc018>
 800e5a8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e5ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e5b0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e5b4:	ed93 7b00 	vldr	d7, [r3]
 800e5b8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e5bc:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e5c0:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 800e5c4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e5c8:	ed9f 4b05 	vldr	d4, [pc, #20]	; 800e5e0 <G_q+0xc018>
 800e5cc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e5d0:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e5d4:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e5d8:	e00e      	b.n	800e5f8 <G_q+0xc030>
 800e5da:	bf00      	nop
 800e5dc:	f3af 8000 	nop.w
	...
 800e5e8:	33145c07 	.word	0x33145c07
 800e5ec:	3c81a626 	.word	0x3c81a626
 800e5f0:	ffffeed0 	.word	0xffffeed0
 800e5f4:	ffffecd0 	.word	0xffffecd0
 800e5f8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e5fc:	ed83 7b00 	vstr	d7, [r3]
  if (t202.im == 0.0) {
 800e600:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e604:	ed93 7b02 	vldr	d7, [r3, #8]
 800e608:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e610:	d115      	bne.n	800e63e <G_q+0xc076>
    t12_re = t202.re / 2.0;
 800e612:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e616:	ed93 6b00 	vldr	d6, [r3]
 800e61a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e61e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e622:	f241 3388 	movw	r3, #5000	; 0x1388
 800e626:	443b      	add	r3, r7
 800e628:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 800e62c:	f04f 0300 	mov.w	r3, #0
 800e630:	f04f 0400 	mov.w	r4, #0
 800e634:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800e638:	e9c2 3400 	strd	r3, r4, [r2]
 800e63c:	e037      	b.n	800e6ae <G_q+0xc0e6>
  } else if (t202.re == 0.0) {
 800e63e:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e642:	ed93 7b00 	vldr	d7, [r3]
 800e646:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e64e:	d115      	bne.n	800e67c <G_q+0xc0b4>
    t12_re = 0.0;
 800e650:	f04f 0300 	mov.w	r3, #0
 800e654:	f04f 0400 	mov.w	r4, #0
 800e658:	f241 3288 	movw	r2, #5000	; 0x1388
 800e65c:	443a      	add	r2, r7
 800e65e:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t202.im / 2.0;
 800e662:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e666:	ed93 6b02 	vldr	d6, [r3, #8]
 800e66a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e66e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e672:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e676:	ed83 7b00 	vstr	d7, [r3]
 800e67a:	e018      	b.n	800e6ae <G_q+0xc0e6>
  } else {
    t12_re = t202.re / 2.0;
 800e67c:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e680:	ed93 6b00 	vldr	d6, [r3]
 800e684:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e688:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e68c:	f241 3388 	movw	r3, #5000	; 0x1388
 800e690:	443b      	add	r3, r7
 800e692:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t202.im / 2.0;
 800e696:	f507 6379 	add.w	r3, r7, #3984	; 0xf90
 800e69a:	ed93 6b02 	vldr	d6, [r3, #8]
 800e69e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e6a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e6a6:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e6aa:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t203.im == 0.0) {
 800e6ae:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e6b2:	ed93 7b02 	vldr	d7, [r3, #8]
 800e6b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6be:	d116      	bne.n	800e6ee <G_q+0xc126>
    t34_re = t203.re / 2.0;
 800e6c0:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e6c4:	ed93 6b00 	vldr	d6, [r3]
 800e6c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e6cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e6d0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e6d4:	443b      	add	r3, r7
 800e6d6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800e6da:	f04f 0300 	mov.w	r3, #0
 800e6de:	f04f 0400 	mov.w	r4, #0
 800e6e2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800e6e6:	443a      	add	r2, r7
 800e6e8:	e9c2 3400 	strd	r3, r4, [r2]
 800e6ec:	e039      	b.n	800e762 <G_q+0xc19a>
  } else if (t203.re == 0.0) {
 800e6ee:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e6f2:	ed93 7b00 	vldr	d7, [r3]
 800e6f6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e6fe:	d116      	bne.n	800e72e <G_q+0xc166>
    t34_re = 0.0;
 800e700:	f04f 0300 	mov.w	r3, #0
 800e704:	f04f 0400 	mov.w	r4, #0
 800e708:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800e70c:	443a      	add	r2, r7
 800e70e:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t203.im / 2.0;
 800e712:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e716:	ed93 6b02 	vldr	d6, [r3, #8]
 800e71a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e71e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e722:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e726:	443b      	add	r3, r7
 800e728:	ed83 7b00 	vstr	d7, [r3]
 800e72c:	e019      	b.n	800e762 <G_q+0xc19a>
  } else {
    t34_re = t203.re / 2.0;
 800e72e:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e732:	ed93 6b00 	vldr	d6, [r3]
 800e736:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e73a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e73e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e742:	443b      	add	r3, r7
 800e744:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t203.im / 2.0;
 800e748:	f507 637a 	add.w	r3, r7, #4000	; 0xfa0
 800e74c:	ed93 6b02 	vldr	d6, [r3, #8]
 800e750:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800e754:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800e758:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e75c:	443b      	add	r3, r7
 800e75e:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t200.re * 3.061616997868383E-17 + t201.re * 3.061616997868383E-17;
 800e762:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e766:	ed93 7b00 	vldr	d7, [r3]
 800e76a:	ed9f 6be3 	vldr	d6, [pc, #908]	; 800eaf8 <G_q+0xc530>
 800e76e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e772:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e776:	ed93 7b00 	vldr	d7, [r3]
 800e77a:	ed9f 5bdf 	vldr	d5, [pc, #892]	; 800eaf8 <G_q+0xc530>
 800e77e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e782:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e786:	f241 3330 	movw	r3, #4912	; 0x1330
 800e78a:	443b      	add	r3, r7
 800e78c:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t200.im * 3.061616997868383E-17 + t201.im * 3.061616997868383E-17;
 800e790:	f507 6301 	add.w	r3, r7, #2064	; 0x810
 800e794:	ed93 7b02 	vldr	d7, [r3, #8]
 800e798:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 800eaf8 <G_q+0xc530>
 800e79c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e7a0:	f507 6302 	add.w	r3, r7, #2080	; 0x820
 800e7a4:	ed93 7b02 	vldr	d7, [r3, #8]
 800e7a8:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 800eaf8 <G_q+0xc530>
 800e7ac:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e7b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e7b4:	f241 3310 	movw	r3, #4880	; 0x1310
 800e7b8:	443b      	add	r3, r7
 800e7ba:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 800e7be:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7c2:	443b      	add	r3, r7
 800e7c4:	ed93 6b00 	vldr	d6, [r3]
 800e7c8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800e7cc:	443b      	add	r3, r7
 800e7ce:	ed93 7b00 	vldr	d7, [r3]
 800e7d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e7d6:	ed9f 6bca 	vldr	d6, [pc, #808]	; 800eb00 <G_q+0xc538>
 800e7da:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e7de:	f241 3388 	movw	r3, #5000	; 0x1388
 800e7e2:	443b      	add	r3, r7
 800e7e4:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 800e7e8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e7ec:	ed93 6b00 	vldr	d6, [r3]
 800e7f0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800e7f4:	443b      	add	r3, r7
 800e7f6:	ed93 7b00 	vldr	d7, [r3]
 800e7fa:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e7fe:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e802:	ed83 7b00 	vstr	d7, [r3]
  t70_im = (t196.re * 0.0 - t196.im * 0.5) - (t197.re * 0.0 - t197.im * 0.5);
 800e806:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e80a:	ed93 7b00 	vldr	d7, [r3]
 800e80e:	ed9f 6bbe 	vldr	d6, [pc, #760]	; 800eb08 <G_q+0xc540>
 800e812:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e816:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e81a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e81e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e822:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e826:	ee36 6b47 	vsub.f64	d6, d6, d7
 800e82a:	4bbb      	ldr	r3, [pc, #748]	; (800eb18 <G_q+0xc550>)
 800e82c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e830:	443a      	add	r2, r7
 800e832:	4413      	add	r3, r2
 800e834:	ed93 7b00 	vldr	d7, [r3]
 800e838:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 800eb08 <G_q+0xc540>
 800e83c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e840:	4bb5      	ldr	r3, [pc, #724]	; (800eb18 <G_q+0xc550>)
 800e842:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e846:	443a      	add	r2, r7
 800e848:	4413      	add	r3, r2
 800e84a:	ed93 7b02 	vldr	d7, [r3, #8]
 800e84e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800e852:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e856:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e85a:	f241 23c8 	movw	r3, #4808	; 0x12c8
 800e85e:	443b      	add	r3, r7
 800e860:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e864:	ed83 7b00 	vstr	d7, [r3]
  t43_im = (t196.re * 0.5 + t196.im * 0.0) - (t197.re * 0.5 + t197.im * 0.0);
 800e868:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e86c:	ed93 7b00 	vldr	d7, [r3]
 800e870:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800e874:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e878:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800e87c:	ed93 7b02 	vldr	d7, [r3, #8]
 800e880:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 800eb08 <G_q+0xc540>
 800e884:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e888:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e88c:	4ba2      	ldr	r3, [pc, #648]	; (800eb18 <G_q+0xc550>)
 800e88e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e892:	443a      	add	r2, r7
 800e894:	4413      	add	r3, r2
 800e896:	ed93 7b00 	vldr	d7, [r3]
 800e89a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800e89e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800e8a2:	4b9d      	ldr	r3, [pc, #628]	; (800eb18 <G_q+0xc550>)
 800e8a4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800e8a8:	443a      	add	r2, r7
 800e8aa:	4413      	add	r3, r2
 800e8ac:	ed93 7b02 	vldr	d7, [r3, #8]
 800e8b0:	ed9f 4b95 	vldr	d4, [pc, #596]	; 800eb08 <G_q+0xc540>
 800e8b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800e8b8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e8bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800e8c0:	f241 23f8 	movw	r3, #4856	; 0x12f8
 800e8c4:	443b      	add	r3, r7
 800e8c6:	ed83 7b00 	vstr	d7, [r3]
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e8ca:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e8ce:	ed93 7b00 	vldr	d7, [r3]
 800e8d2:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800eb10 <G_q+0xc548>
 800e8d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e8da:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e8de:	ed93 7b00 	vldr	d7, [r3]
 800e8e2:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800eb10 <G_q+0xc548>
 800e8e6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e8ea:	ee36 6b07 	vadd.f64	d6, d6, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e8ee:	f241 3368 	movw	r3, #4968	; 0x1368
 800e8f2:	443b      	add	r3, r7
 800e8f4:	ed93 5b00 	vldr	d5, [r3]
 800e8f8:	f241 3348 	movw	r3, #4936	; 0x1348
 800e8fc:	443b      	add	r3, r7
 800e8fe:	ed93 7b00 	vldr	d7, [r3]
 800e902:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e906:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e90a:	ed93 4b00 	vldr	d4, [r3]
 800e90e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e912:	ed93 7b00 	vldr	d7, [r3]
 800e916:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e91a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800e91e:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t23_re * t12_re - t3_im * t12_im)) - 6.123233995736766E-17;
 800e922:	f241 3330 	movw	r3, #4912	; 0x1330
 800e926:	443b      	add	r3, r7
 800e928:	ed93 5b00 	vldr	d5, [r3]
 800e92c:	f241 3388 	movw	r3, #5000	; 0x1388
 800e930:	443b      	add	r3, r7
 800e932:	ed93 7b00 	vldr	d7, [r3]
 800e936:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e93a:	f241 3310 	movw	r3, #4880	; 0x1310
 800e93e:	443b      	add	r3, r7
 800e940:	ed93 4b00 	vldr	d4, [r3]
 800e944:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e948:	ed93 7b00 	vldr	d7, [r3]
 800e94c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e950:	ee35 7b47 	vsub.f64	d7, d5, d7
                6.123233995736766E-17) + (t16_re * t20_re - t16_im * t20_im)) +
 800e954:	ee36 7b07 	vadd.f64	d7, d6, d7
  b_t54_re = (((t198.re * 6.123233995736766E-17 + t199.re *
 800e958:	ed9f 6b6d 	vldr	d6, [pc, #436]	; 800eb10 <G_q+0xc548>
 800e95c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e960:	f241 23f0 	movw	r3, #4848	; 0x12f0
 800e964:	443b      	add	r3, r7
 800e966:	ed83 7b00 	vstr	d7, [r3]
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e96a:	f507 6377 	add.w	r3, r7, #3952	; 0xf70
 800e96e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e972:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800eb10 <G_q+0xc548>
 800e976:	ee27 6b06 	vmul.f64	d6, d7, d6
 800e97a:	f507 6378 	add.w	r3, r7, #3968	; 0xf80
 800e97e:	ed93 7b02 	vldr	d7, [r3, #8]
 800e982:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800eb10 <G_q+0xc548>
 800e986:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e98a:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 800e98e:	f241 3368 	movw	r3, #4968	; 0x1368
 800e992:	443b      	add	r3, r7
 800e994:	ed93 5b00 	vldr	d5, [r3]
 800e998:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800e99c:	ed93 7b00 	vldr	d7, [r3]
 800e9a0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e9a4:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800e9a8:	ed93 4b00 	vldr	d4, [r3]
 800e9ac:	f241 3348 	movw	r3, #4936	; 0x1348
 800e9b0:	443b      	add	r3, r7
 800e9b2:	ed93 7b00 	vldr	d7, [r3]
 800e9b6:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e9ba:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e9be:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e9c2:	f241 3330 	movw	r3, #4912	; 0x1330
 800e9c6:	443b      	add	r3, r7
 800e9c8:	ed93 5b00 	vldr	d5, [r3]
 800e9cc:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800e9d0:	ed93 7b00 	vldr	d7, [r3]
 800e9d4:	ee25 5b07 	vmul.f64	d5, d5, d7
 800e9d8:	f241 3310 	movw	r3, #4880	; 0x1310
 800e9dc:	443b      	add	r3, r7
 800e9de:	ed93 4b00 	vldr	d4, [r3]
 800e9e2:	f241 3388 	movw	r3, #5000	; 0x1388
 800e9e6:	443b      	add	r3, r7
 800e9e8:	ed93 7b00 	vldr	d7, [r3]
 800e9ec:	ee24 7b07 	vmul.f64	d7, d4, d7
 800e9f0:	ee35 7b07 	vadd.f64	d7, d5, d7
  t55_im = ((t198.im * 6.123233995736766E-17 + t199.im * 6.123233995736766E-17)
 800e9f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800e9f8:	f241 23d8 	movw	r3, #4824	; 0x12d8
 800e9fc:	443b      	add	r3, r7
 800e9fe:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t210.im == 0.0) {
 800ea02:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ea06:	ed93 7b02 	vldr	d7, [r3, #8]
 800ea0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea12:	d116      	bne.n	800ea42 <G_q+0xc47a>
    t20_re = t210.re / 2.0;
 800ea14:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ea18:	ed93 6b00 	vldr	d6, [r3]
 800ea1c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea20:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea24:	f241 3348 	movw	r3, #4936	; 0x1348
 800ea28:	443b      	add	r3, r7
 800ea2a:	ed83 7b00 	vstr	d7, [r3]
    t70_re = 0.0;
 800ea2e:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ea32:	443a      	add	r2, r7
 800ea34:	f04f 0300 	mov.w	r3, #0
 800ea38:	f04f 0400 	mov.w	r4, #0
 800ea3c:	e9c2 3400 	strd	r3, r4, [r2]
 800ea40:	e039      	b.n	800eab6 <G_q+0xc4ee>
  } else if (t210.re == 0.0) {
 800ea42:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ea46:	ed93 7b00 	vldr	d7, [r3]
 800ea4a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ea4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea52:	d116      	bne.n	800ea82 <G_q+0xc4ba>
    t20_re = 0.0;
 800ea54:	f04f 0300 	mov.w	r3, #0
 800ea58:	f04f 0400 	mov.w	r4, #0
 800ea5c:	f241 3248 	movw	r2, #4936	; 0x1348
 800ea60:	443a      	add	r2, r7
 800ea62:	e9c2 3400 	strd	r3, r4, [r2]
    t70_re = t210.im / 2.0;
 800ea66:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ea6a:	ed93 6b02 	vldr	d6, [r3, #8]
 800ea6e:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ea72:	443b      	add	r3, r7
 800ea74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea7c:	ed83 7b00 	vstr	d7, [r3]
 800ea80:	e019      	b.n	800eab6 <G_q+0xc4ee>
  } else {
    t20_re = t210.re / 2.0;
 800ea82:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800ea86:	ed93 6b00 	vldr	d6, [r3]
 800ea8a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ea8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ea92:	f241 3348 	movw	r3, #4936	; 0x1348
 800ea96:	443b      	add	r3, r7
 800ea98:	ed83 7b00 	vstr	d7, [r3]
    t70_re = t210.im / 2.0;
 800ea9c:	f507 6305 	add.w	r3, r7, #2128	; 0x850
 800eaa0:	ed93 6b02 	vldr	d6, [r3, #8]
 800eaa4:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800eaa8:	443b      	add	r3, r7
 800eaaa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eaae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eab2:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t211.im == 0.0) {
 800eab6:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eaba:	ed93 7b02 	vldr	d7, [r3, #8]
 800eabe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eac6:	d129      	bne.n	800eb1c <G_q+0xc554>
    t34_re = t211.re / 2.0;
 800eac8:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eacc:	ed93 6b00 	vldr	d6, [r3]
 800ead0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ead4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ead8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eadc:	443b      	add	r3, r7
 800eade:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800eae2:	f04f 0300 	mov.w	r3, #0
 800eae6:	f04f 0400 	mov.w	r4, #0
 800eaea:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800eaee:	443a      	add	r2, r7
 800eaf0:	e9c2 3400 	strd	r3, r4, [r2]
 800eaf4:	e04c      	b.n	800eb90 <G_q+0xc5c8>
 800eaf6:	bf00      	nop
 800eaf8:	33145c07 	.word	0x33145c07
 800eafc:	3c81a626 	.word	0x3c81a626
 800eb00:	858a5d48 	.word	0x858a5d48
 800eb04:	394377ce 	.word	0x394377ce
	...
 800eb10:	33145c07 	.word	0x33145c07
 800eb14:	3c91a626 	.word	0x3c91a626
 800eb18:	ffffeef0 	.word	0xffffeef0
  } else if (t211.re == 0.0) {
 800eb1c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eb20:	ed93 7b00 	vldr	d7, [r3]
 800eb24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eb28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb2c:	d116      	bne.n	800eb5c <G_q+0xc594>
    t34_re = 0.0;
 800eb2e:	f04f 0300 	mov.w	r3, #0
 800eb32:	f04f 0400 	mov.w	r4, #0
 800eb36:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800eb3a:	443a      	add	r2, r7
 800eb3c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t211.im / 2.0;
 800eb40:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eb44:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb50:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb54:	443b      	add	r3, r7
 800eb56:	ed83 7b00 	vstr	d7, [r3]
 800eb5a:	e019      	b.n	800eb90 <G_q+0xc5c8>
  } else {
    t34_re = t211.re / 2.0;
 800eb5c:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eb60:	ed93 6b00 	vldr	d6, [r3]
 800eb64:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb68:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb6c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb70:	443b      	add	r3, r7
 800eb72:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t211.im / 2.0;
 800eb76:	f507 6306 	add.w	r3, r7, #2144	; 0x860
 800eb7a:	ed93 6b02 	vldr	d6, [r3, #8]
 800eb7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eb82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eb86:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eb8a:	443b      	add	r3, r7
 800eb8c:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re += t34_re;
 800eb90:	f241 3348 	movw	r3, #4936	; 0x1348
 800eb94:	443b      	add	r3, r7
 800eb96:	ed93 6b00 	vldr	d6, [r3]
 800eb9a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eb9e:	443b      	add	r3, r7
 800eba0:	ed93 7b00 	vldr	d7, [r3]
 800eba4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eba8:	f241 3348 	movw	r3, #4936	; 0x1348
 800ebac:	443b      	add	r3, r7
 800ebae:	ed83 7b00 	vstr	d7, [r3]
  t70_re += t34_im;
 800ebb2:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800ebb6:	443b      	add	r3, r7
 800ebb8:	f241 22d0 	movw	r2, #4816	; 0x12d0
 800ebbc:	443a      	add	r2, r7
 800ebbe:	ed92 6b00 	vldr	d6, [r2]
 800ebc2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ebc6:	443a      	add	r2, r7
 800ebc8:	ed92 7b00 	vldr	d7, [r2]
 800ebcc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800ebd0:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t212.re * 0.0 - t212.im * 0.5) - (t213.re * 0.0 - t213.im * 0.5);
 800ebd4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ebd8:	ed93 7b00 	vldr	d7, [r3]
 800ebdc:	ed9f 6be0 	vldr	d6, [pc, #896]	; 800ef60 <G_q+0xc998>
 800ebe0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ebe4:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ebe8:	ed93 7b02 	vldr	d7, [r3, #8]
 800ebec:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ebf0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ebf4:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ebf8:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ebfc:	ed93 7b00 	vldr	d7, [r3]
 800ec00:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 800ef60 <G_q+0xc998>
 800ec04:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec08:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ec0c:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec10:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ec14:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec18:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ec1c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec20:	f241 3330 	movw	r3, #4912	; 0x1330
 800ec24:	443b      	add	r3, r7
 800ec26:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t212.re * 0.5 + t212.im * 0.0) - (t213.re * 0.5 + t213.im * 0.0);
 800ec2a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ec2e:	ed93 7b00 	vldr	d7, [r3]
 800ec32:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ec36:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ec3a:	f507 637d 	add.w	r3, r7, #4048	; 0xfd0
 800ec3e:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec42:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 800ef60 <G_q+0xc998>
 800ec46:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ec4a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ec4e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ec52:	ed93 7b00 	vldr	d7, [r3]
 800ec56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ec5a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ec5e:	f507 637e 	add.w	r3, r7, #4064	; 0xfe0
 800ec62:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec66:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 800ef60 <G_q+0xc998>
 800ec6a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ec6e:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ec72:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ec76:	f241 3310 	movw	r3, #4880	; 0x1310
 800ec7a:	443b      	add	r3, r7
 800ec7c:	ed83 7b00 	vstr	d7, [r3]
  if (t216.im == 0.0) {
 800ec80:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ec84:	ed93 7b02 	vldr	d7, [r3, #8]
 800ec88:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ec8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ec90:	d116      	bne.n	800ecc0 <G_q+0xc6f8>
    t13_re = t216.re / 2.0;
 800ec92:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ec96:	ed93 6b00 	vldr	d6, [r3]
 800ec9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ec9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eca2:	f241 3378 	movw	r3, #4984	; 0x1378
 800eca6:	443b      	add	r3, r7
 800eca8:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800ecac:	f04f 0300 	mov.w	r3, #0
 800ecb0:	f04f 0400 	mov.w	r4, #0
 800ecb4:	f241 3270 	movw	r2, #4976	; 0x1370
 800ecb8:	443a      	add	r2, r7
 800ecba:	e9c2 3400 	strd	r3, r4, [r2]
 800ecbe:	e039      	b.n	800ed34 <G_q+0xc76c>
  } else if (t216.re == 0.0) {
 800ecc0:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ecc4:	ed93 7b00 	vldr	d7, [r3]
 800ecc8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ecd0:	d116      	bne.n	800ed00 <G_q+0xc738>
    t13_re = 0.0;
 800ecd2:	f04f 0300 	mov.w	r3, #0
 800ecd6:	f04f 0400 	mov.w	r4, #0
 800ecda:	f241 3278 	movw	r2, #4984	; 0x1378
 800ecde:	443a      	add	r2, r7
 800ece0:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t216.im / 2.0;
 800ece4:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ece8:	ed93 6b02 	vldr	d6, [r3, #8]
 800ecec:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ecf0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ecf4:	f241 3370 	movw	r3, #4976	; 0x1370
 800ecf8:	443b      	add	r3, r7
 800ecfa:	ed83 7b00 	vstr	d7, [r3]
 800ecfe:	e019      	b.n	800ed34 <G_q+0xc76c>
  } else {
    t13_re = t216.re / 2.0;
 800ed00:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ed04:	ed93 6b00 	vldr	d6, [r3]
 800ed08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed0c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed10:	f241 3378 	movw	r3, #4984	; 0x1378
 800ed14:	443b      	add	r3, r7
 800ed16:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t216.im / 2.0;
 800ed1a:	f507 637f 	add.w	r3, r7, #4080	; 0xff0
 800ed1e:	ed93 6b02 	vldr	d6, [r3, #8]
 800ed22:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed26:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed2a:	f241 3370 	movw	r3, #4976	; 0x1370
 800ed2e:	443b      	add	r3, r7
 800ed30:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t217.im == 0.0) {
 800ed34:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ed38:	ed93 7b02 	vldr	d7, [r3, #8]
 800ed3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed44:	d116      	bne.n	800ed74 <G_q+0xc7ac>
    t34_re = t217.re / 2.0;
 800ed46:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ed4a:	ed93 6b00 	vldr	d6, [r3]
 800ed4e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ed52:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ed56:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800ed5a:	443b      	add	r3, r7
 800ed5c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800ed60:	f04f 0300 	mov.w	r3, #0
 800ed64:	f04f 0400 	mov.w	r4, #0
 800ed68:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800ed6c:	443a      	add	r2, r7
 800ed6e:	e9c2 3400 	strd	r3, r4, [r2]
 800ed72:	e039      	b.n	800ede8 <G_q+0xc820>
  } else if (t217.re == 0.0) {
 800ed74:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ed78:	ed93 7b00 	vldr	d7, [r3]
 800ed7c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ed80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed84:	d116      	bne.n	800edb4 <G_q+0xc7ec>
    t34_re = 0.0;
 800ed86:	f04f 0300 	mov.w	r3, #0
 800ed8a:	f04f 0400 	mov.w	r4, #0
 800ed8e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800ed92:	443a      	add	r2, r7
 800ed94:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t217.im / 2.0;
 800ed98:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800ed9c:	ed93 6b02 	vldr	d6, [r3, #8]
 800eda0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800eda4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800eda8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800edac:	443b      	add	r3, r7
 800edae:	ed83 7b00 	vstr	d7, [r3]
 800edb2:	e019      	b.n	800ede8 <G_q+0xc820>
  } else {
    t34_re = t217.re / 2.0;
 800edb4:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800edb8:	ed93 6b00 	vldr	d6, [r3]
 800edbc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edc4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800edc8:	443b      	add	r3, r7
 800edca:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t217.im / 2.0;
 800edce:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 800edd2:	ed93 6b02 	vldr	d6, [r3, #8]
 800edd6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800edda:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800edde:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800ede2:	443b      	add	r3, r7
 800ede4:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t214.re * 0.0 - t214.im * 0.5) - (t215.re * 0.0 - t215.im * 0.5);
 800ede8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800edec:	ed93 7b00 	vldr	d7, [r3]
 800edf0:	ed9f 6b5b 	vldr	d6, [pc, #364]	; 800ef60 <G_q+0xc998>
 800edf4:	ee27 6b06 	vmul.f64	d6, d7, d6
 800edf8:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800edfc:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ee04:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee08:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ee0c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ee10:	ed93 7b00 	vldr	d7, [r3]
 800ee14:	ed9f 5b52 	vldr	d5, [pc, #328]	; 800ef60 <G_q+0xc998>
 800ee18:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ee1c:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ee20:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee24:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800ee28:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ee30:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ee34:	f241 3368 	movw	r3, #4968	; 0x1368
 800ee38:	443b      	add	r3, r7
 800ee3a:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t214.re * 0.5 + t214.im * 0.0) - (t215.re * 0.5 + t215.im * 0.0);
 800ee3e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ee42:	ed93 7b00 	vldr	d7, [r3]
 800ee46:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800ee4a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ee4e:	f507 6307 	add.w	r3, r7, #2160	; 0x870
 800ee52:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee56:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800ef60 <G_q+0xc998>
 800ee5a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800ee5e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ee62:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ee66:	ed93 7b00 	vldr	d7, [r3]
 800ee6a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ee6e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800ee72:	f507 6308 	add.w	r3, r7, #2176	; 0x880
 800ee76:	ed93 7b02 	vldr	d7, [r3, #8]
 800ee7a:	ed9f 4b39 	vldr	d4, [pc, #228]	; 800ef60 <G_q+0xc998>
 800ee7e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ee82:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ee86:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ee8a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800ee8e:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 800ee92:	f241 3378 	movw	r3, #4984	; 0x1378
 800ee96:	443b      	add	r3, r7
 800ee98:	ed93 6b00 	vldr	d6, [r3]
 800ee9c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800eea0:	443b      	add	r3, r7
 800eea2:	ed93 7b00 	vldr	d7, [r3]
 800eea6:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eeaa:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 800ef68 <G_q+0xc9a0>
 800eeae:	ee37 7b06 	vadd.f64	d7, d7, d6
 800eeb2:	f241 3378 	movw	r3, #4984	; 0x1378
 800eeb6:	443b      	add	r3, r7
 800eeb8:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 800eebc:	f241 3370 	movw	r3, #4976	; 0x1370
 800eec0:	443b      	add	r3, r7
 800eec2:	ed93 6b00 	vldr	d6, [r3]
 800eec6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800eeca:	443b      	add	r3, r7
 800eecc:	ed93 7b00 	vldr	d7, [r3]
 800eed0:	ee36 7b07 	vadd.f64	d7, d6, d7
 800eed4:	f241 3370 	movw	r3, #4976	; 0x1370
 800eed8:	443b      	add	r3, r7
 800eeda:	ed83 7b00 	vstr	d7, [r3]
  if (t208.im == 0.0) {
 800eede:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800eee2:	ed93 7b02 	vldr	d7, [r3, #8]
 800eee6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800eeea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeee:	d116      	bne.n	800ef1e <G_q+0xc956>
    t74_re = t208.re / 2.0;
 800eef0:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800eef4:	ed93 6b00 	vldr	d6, [r3]
 800eef8:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800eefc:	443b      	add	r3, r7
 800eefe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef06:	ed83 7b00 	vstr	d7, [r3]
    t74_im = 0.0;
 800ef0a:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800ef0e:	443a      	add	r2, r7
 800ef10:	f04f 0300 	mov.w	r3, #0
 800ef14:	f04f 0400 	mov.w	r4, #0
 800ef18:	e9c2 3400 	strd	r3, r4, [r2]
 800ef1c:	e042      	b.n	800efa4 <G_q+0xc9dc>
  } else if (t208.re == 0.0) {
 800ef1e:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ef22:	ed93 7b00 	vldr	d7, [r3]
 800ef26:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2e:	d11f      	bne.n	800ef70 <G_q+0xc9a8>
    t74_re = 0.0;
 800ef30:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800ef34:	443a      	add	r2, r7
 800ef36:	f04f 0300 	mov.w	r3, #0
 800ef3a:	f04f 0400 	mov.w	r4, #0
 800ef3e:	e9c2 3400 	strd	r3, r4, [r2]
    t74_im = t208.im / 2.0;
 800ef42:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ef46:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef4a:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ef4e:	443b      	add	r3, r7
 800ef50:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef54:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef58:	ed83 7b00 	vstr	d7, [r3]
 800ef5c:	e022      	b.n	800efa4 <G_q+0xc9dc>
 800ef5e:	bf00      	nop
	...
 800ef68:	858a5d48 	.word	0x858a5d48
 800ef6c:	394377ce 	.word	0x394377ce
  } else {
    t74_re = t208.re / 2.0;
 800ef70:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ef74:	ed93 6b00 	vldr	d6, [r3]
 800ef78:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800ef7c:	443b      	add	r3, r7
 800ef7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ef86:	ed83 7b00 	vstr	d7, [r3]
    t74_im = t208.im / 2.0;
 800ef8a:	f507 7334 	add.w	r3, r7, #720	; 0x2d0
 800ef8e:	ed93 6b02 	vldr	d6, [r3, #8]
 800ef92:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800ef96:	443b      	add	r3, r7
 800ef98:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ef9c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800efa0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t209.im == 0.0) {
 800efa4:	4b25      	ldr	r3, [pc, #148]	; (800f03c <G_q+0xca74>)
 800efa6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800efaa:	443a      	add	r2, r7
 800efac:	4413      	add	r3, r2
 800efae:	ed93 7b02 	vldr	d7, [r3, #8]
 800efb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800efb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efba:	d119      	bne.n	800eff0 <G_q+0xca28>
    t34_re = t209.re / 2.0;
 800efbc:	4b1f      	ldr	r3, [pc, #124]	; (800f03c <G_q+0xca74>)
 800efbe:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800efc2:	443a      	add	r2, r7
 800efc4:	4413      	add	r3, r2
 800efc6:	ed93 6b00 	vldr	d6, [r3]
 800efca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800efce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800efd2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800efd6:	443b      	add	r3, r7
 800efd8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800efdc:	f04f 0300 	mov.w	r3, #0
 800efe0:	f04f 0400 	mov.w	r4, #0
 800efe4:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800efe8:	443a      	add	r2, r7
 800efea:	e9c2 3400 	strd	r3, r4, [r2]
 800efee:	e047      	b.n	800f080 <G_q+0xcab8>
  } else if (t209.re == 0.0) {
 800eff0:	4b12      	ldr	r3, [pc, #72]	; (800f03c <G_q+0xca74>)
 800eff2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800eff6:	443a      	add	r2, r7
 800eff8:	4413      	add	r3, r2
 800effa:	ed93 7b00 	vldr	d7, [r3]
 800effe:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f006:	d11b      	bne.n	800f040 <G_q+0xca78>
    t34_re = 0.0;
 800f008:	f04f 0300 	mov.w	r3, #0
 800f00c:	f04f 0400 	mov.w	r4, #0
 800f010:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f014:	443a      	add	r2, r7
 800f016:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t209.im / 2.0;
 800f01a:	4b08      	ldr	r3, [pc, #32]	; (800f03c <G_q+0xca74>)
 800f01c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f020:	443a      	add	r2, r7
 800f022:	4413      	add	r3, r2
 800f024:	ed93 6b02 	vldr	d6, [r3, #8]
 800f028:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f02c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f030:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f034:	443b      	add	r3, r7
 800f036:	ed83 7b00 	vstr	d7, [r3]
 800f03a:	e021      	b.n	800f080 <G_q+0xcab8>
 800f03c:	ffffef10 	.word	0xffffef10
  } else {
    t34_re = t209.re / 2.0;
 800f040:	4bd7      	ldr	r3, [pc, #860]	; (800f3a0 <G_q+0xcdd8>)
 800f042:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f046:	443a      	add	r2, r7
 800f048:	4413      	add	r3, r2
 800f04a:	ed93 6b00 	vldr	d6, [r3]
 800f04e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f052:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f056:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f05a:	443b      	add	r3, r7
 800f05c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t209.im / 2.0;
 800f060:	4bcf      	ldr	r3, [pc, #828]	; (800f3a0 <G_q+0xcdd8>)
 800f062:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f066:	443a      	add	r2, r7
 800f068:	4413      	add	r3, r2
 800f06a:	ed93 6b02 	vldr	d6, [r3, #8]
 800f06e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f072:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f076:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f07a:	443b      	add	r3, r7
 800f07c:	ed83 7b00 	vstr	d7, [r3]
  }

  t55_re = (t20_re * t23_re - t70_re * t3_im) - (t16_re * t13_re - t16_im *
 800f080:	f241 3348 	movw	r3, #4936	; 0x1348
 800f084:	443b      	add	r3, r7
 800f086:	ed93 6b00 	vldr	d6, [r3]
 800f08a:	f241 3330 	movw	r3, #4912	; 0x1330
 800f08e:	443b      	add	r3, r7
 800f090:	ed93 7b00 	vldr	d7, [r3]
 800f094:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f098:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f09c:	443b      	add	r3, r7
 800f09e:	ed93 5b00 	vldr	d5, [r3]
 800f0a2:	f241 3310 	movw	r3, #4880	; 0x1310
 800f0a6:	443b      	add	r3, r7
 800f0a8:	ed93 7b00 	vldr	d7, [r3]
 800f0ac:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f0b0:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f0b4:	f241 3368 	movw	r3, #4968	; 0x1368
 800f0b8:	443b      	add	r3, r7
 800f0ba:	ed93 5b00 	vldr	d5, [r3]
 800f0be:	f241 3378 	movw	r3, #4984	; 0x1378
 800f0c2:	443b      	add	r3, r7
 800f0c4:	ed93 7b00 	vldr	d7, [r3]
 800f0c8:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f0cc:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f0d0:	ed93 4b00 	vldr	d4, [r3]
 800f0d4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f0d8:	443b      	add	r3, r7
 800f0da:	ed93 7b00 	vldr	d7, [r3]
 800f0de:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f0e2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f0e6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f0ea:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 800f0ee:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t70_re = (t20_re * t3_im + t70_re * t23_re) - (t16_re * t13_im + t16_im *
 800f0f2:	f241 3348 	movw	r3, #4936	; 0x1348
 800f0f6:	443b      	add	r3, r7
 800f0f8:	ed93 6b00 	vldr	d6, [r3]
 800f0fc:	f241 3310 	movw	r3, #4880	; 0x1310
 800f100:	443b      	add	r3, r7
 800f102:	ed93 7b00 	vldr	d7, [r3]
 800f106:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f10a:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f10e:	443b      	add	r3, r7
 800f110:	ed93 5b00 	vldr	d5, [r3]
 800f114:	f241 3330 	movw	r3, #4912	; 0x1330
 800f118:	443b      	add	r3, r7
 800f11a:	ed93 7b00 	vldr	d7, [r3]
 800f11e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800f122:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f126:	f241 3368 	movw	r3, #4968	; 0x1368
 800f12a:	443b      	add	r3, r7
 800f12c:	ed93 5b00 	vldr	d5, [r3]
 800f130:	f241 3370 	movw	r3, #4976	; 0x1370
 800f134:	443b      	add	r3, r7
 800f136:	ed93 7b00 	vldr	d7, [r3]
 800f13a:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f13e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f142:	ed93 4b00 	vldr	d4, [r3]
 800f146:	f241 3378 	movw	r3, #4984	; 0x1378
 800f14a:	443b      	add	r3, r7
 800f14c:	ed93 7b00 	vldr	d7, [r3]
 800f150:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f154:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f158:	f241 23d0 	movw	r3, #4816	; 0x12d0
 800f15c:	443b      	add	r3, r7
 800f15e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f162:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  t74_re += t34_re;
 800f166:	f241 23b8 	movw	r3, #4792	; 0x12b8
 800f16a:	443b      	add	r3, r7
 800f16c:	f241 22b8 	movw	r2, #4792	; 0x12b8
 800f170:	443a      	add	r2, r7
 800f172:	ed92 6b00 	vldr	d6, [r2]
 800f176:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f17a:	443a      	add	r2, r7
 800f17c:	ed92 7b00 	vldr	d7, [r2]
 800f180:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f184:	ed83 7b00 	vstr	d7, [r3]
  t74_im += t34_im;
 800f188:	f241 23b0 	movw	r3, #4784	; 0x12b0
 800f18c:	443b      	add	r3, r7
 800f18e:	f241 22b0 	movw	r2, #4784	; 0x12b0
 800f192:	443a      	add	r2, r7
 800f194:	ed92 6b00 	vldr	d6, [r2]
 800f198:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f19c:	443a      	add	r2, r7
 800f19e:	ed92 7b00 	vldr	d7, [r2]
 800f1a2:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f1a6:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f1aa:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f1ae:	ed93 7b00 	vldr	d7, [r3]
 800f1b2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800f390 <G_q+0xcdc8>
 800f1b6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f1ba:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f1be:	ed93 7b02 	vldr	d7, [r3, #8]
 800f1c2:	ed9f 5b75 	vldr	d5, [pc, #468]	; 800f398 <G_q+0xcdd0>
 800f1c6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f1ca:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f1ce:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f1d2:	ed93 7b00 	vldr	d7, [r3]
 800f1d6:	ed9f 5b6e 	vldr	d5, [pc, #440]	; 800f390 <G_q+0xcdc8>
 800f1da:	ee27 5b05 	vmul.f64	d5, d7, d5
    t241.im * 3.061616997868383E-17);
 800f1de:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f1e2:	ed93 7b02 	vldr	d7, [r3, #8]
 800f1e6:	ed9f 4b6c 	vldr	d4, [pc, #432]	; 800f398 <G_q+0xcdd0>
 800f1ea:	ee27 7b04 	vmul.f64	d7, d7, d4
  t13_re = (t240.re * 0.0 - t240.im * 3.061616997868383E-17) - (t241.re * 0.0 -
 800f1ee:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f1f2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f1f6:	f241 3378 	movw	r3, #4984	; 0x1378
 800f1fa:	443b      	add	r3, r7
 800f1fc:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f200:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f204:	ed93 7b00 	vldr	d7, [r3]
 800f208:	ed9f 6b63 	vldr	d6, [pc, #396]	; 800f398 <G_q+0xcdd0>
 800f20c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f210:	f507 630f 	add.w	r3, r7, #2288	; 0x8f0
 800f214:	ed93 7b02 	vldr	d7, [r3, #8]
 800f218:	ed9f 5b5d 	vldr	d5, [pc, #372]	; 800f390 <G_q+0xcdc8>
 800f21c:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f220:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f224:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f228:	ed93 7b00 	vldr	d7, [r3]
 800f22c:	ed9f 5b5a 	vldr	d5, [pc, #360]	; 800f398 <G_q+0xcdd0>
 800f230:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t241.im * 0.0);
 800f234:	f507 6310 	add.w	r3, r7, #2304	; 0x900
 800f238:	ed93 7b02 	vldr	d7, [r3, #8]
 800f23c:	ed9f 4b54 	vldr	d4, [pc, #336]	; 800f390 <G_q+0xcdc8>
 800f240:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f244:	ee35 7b07 	vadd.f64	d7, d5, d7
  t13_im = (t240.re * 3.061616997868383E-17 + t240.im * 0.0) - (t241.re *
 800f248:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f24c:	f241 3370 	movw	r3, #4976	; 0x1370
 800f250:	443b      	add	r3, r7
 800f252:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t238.re * 0.0 - t238.im * 0.5) - (t239.re * 0.0 - t239.im * 0.5);
 800f256:	f241 0390 	movw	r3, #4240	; 0x1090
 800f25a:	443b      	add	r3, r7
 800f25c:	ed93 7b00 	vldr	d7, [r3]
 800f260:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 800f390 <G_q+0xcdc8>
 800f264:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f268:	f241 0390 	movw	r3, #4240	; 0x1090
 800f26c:	443b      	add	r3, r7
 800f26e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f272:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f276:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f27a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f27e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f282:	ed93 7b00 	vldr	d7, [r3]
 800f286:	ed9f 5b42 	vldr	d5, [pc, #264]	; 800f390 <G_q+0xcdc8>
 800f28a:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f28e:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f292:	ed93 7b02 	vldr	d7, [r3, #8]
 800f296:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f29a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f29e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f2a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f2a6:	f241 3368 	movw	r3, #4968	; 0x1368
 800f2aa:	443b      	add	r3, r7
 800f2ac:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t238.re * 0.5 + t238.im * 0.0) - (t239.re * 0.5 + t239.im * 0.0);
 800f2b0:	f241 0390 	movw	r3, #4240	; 0x1090
 800f2b4:	443b      	add	r3, r7
 800f2b6:	ed93 7b00 	vldr	d7, [r3]
 800f2ba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f2be:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f2c2:	f241 0390 	movw	r3, #4240	; 0x1090
 800f2c6:	443b      	add	r3, r7
 800f2c8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2cc:	ed9f 5b30 	vldr	d5, [pc, #192]	; 800f390 <G_q+0xcdc8>
 800f2d0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f2d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f2d8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f2dc:	ed93 7b00 	vldr	d7, [r3]
 800f2e0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f2e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f2e8:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800f2ec:	ed93 7b02 	vldr	d7, [r3, #8]
 800f2f0:	ed9f 4b27 	vldr	d4, [pc, #156]	; 800f390 <G_q+0xcdc8>
 800f2f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f2f8:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f2fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f300:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f304:	ed83 7b00 	vstr	d7, [r3]
  if (t236.im == 0.0) {
 800f308:	f241 0370 	movw	r3, #4208	; 0x1070
 800f30c:	443b      	add	r3, r7
 800f30e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f31a:	d116      	bne.n	800f34a <G_q+0xcd82>
    t20_re = t236.re / 2.0;
 800f31c:	f241 0370 	movw	r3, #4208	; 0x1070
 800f320:	443b      	add	r3, r7
 800f322:	ed93 6b00 	vldr	d6, [r3]
 800f326:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f32a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f32e:	f241 3348 	movw	r3, #4936	; 0x1348
 800f332:	443b      	add	r3, r7
 800f334:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 800f338:	f04f 0300 	mov.w	r3, #0
 800f33c:	f04f 0400 	mov.w	r4, #0
 800f340:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 800f344:	e9c2 3400 	strd	r3, r4, [r2]
 800f348:	e047      	b.n	800f3da <G_q+0xce12>
  } else if (t236.re == 0.0) {
 800f34a:	f241 0370 	movw	r3, #4208	; 0x1070
 800f34e:	443b      	add	r3, r7
 800f350:	ed93 7b00 	vldr	d7, [r3]
 800f354:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f358:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f35c:	d122      	bne.n	800f3a4 <G_q+0xcddc>
    t20_re = 0.0;
 800f35e:	f04f 0300 	mov.w	r3, #0
 800f362:	f04f 0400 	mov.w	r4, #0
 800f366:	f241 3248 	movw	r2, #4936	; 0x1348
 800f36a:	443a      	add	r2, r7
 800f36c:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t236.im / 2.0;
 800f370:	f241 0370 	movw	r3, #4208	; 0x1070
 800f374:	443b      	add	r3, r7
 800f376:	ed93 6b02 	vldr	d6, [r3, #8]
 800f37a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f37e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f382:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f386:	ed83 7b00 	vstr	d7, [r3]
 800f38a:	e026      	b.n	800f3da <G_q+0xce12>
 800f38c:	f3af 8000 	nop.w
	...
 800f398:	33145c07 	.word	0x33145c07
 800f39c:	3c81a626 	.word	0x3c81a626
 800f3a0:	ffffef10 	.word	0xffffef10
  } else {
    t20_re = t236.re / 2.0;
 800f3a4:	f241 0370 	movw	r3, #4208	; 0x1070
 800f3a8:	443b      	add	r3, r7
 800f3aa:	ed93 6b00 	vldr	d6, [r3]
 800f3ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f3b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f3b6:	f241 3348 	movw	r3, #4936	; 0x1348
 800f3ba:	443b      	add	r3, r7
 800f3bc:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t236.im / 2.0;
 800f3c0:	f241 0370 	movw	r3, #4208	; 0x1070
 800f3c4:	443b      	add	r3, r7
 800f3c6:	ed93 6b02 	vldr	d6, [r3, #8]
 800f3ca:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f3ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f3d2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f3d6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t237.im == 0.0) {
 800f3da:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f3de:	ed93 7b02 	vldr	d7, [r3, #8]
 800f3e2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f3e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ea:	d116      	bne.n	800f41a <G_q+0xce52>
    t34_re = t237.re / 2.0;
 800f3ec:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f3f0:	ed93 6b00 	vldr	d6, [r3]
 800f3f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f3f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f3fc:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f400:	443b      	add	r3, r7
 800f402:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f406:	f04f 0300 	mov.w	r3, #0
 800f40a:	f04f 0400 	mov.w	r4, #0
 800f40e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f412:	443a      	add	r2, r7
 800f414:	e9c2 3400 	strd	r3, r4, [r2]
 800f418:	e039      	b.n	800f48e <G_q+0xcec6>
  } else if (t237.re == 0.0) {
 800f41a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f41e:	ed93 7b00 	vldr	d7, [r3]
 800f422:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f42a:	d116      	bne.n	800f45a <G_q+0xce92>
    t34_re = 0.0;
 800f42c:	f04f 0300 	mov.w	r3, #0
 800f430:	f04f 0400 	mov.w	r4, #0
 800f434:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f438:	443a      	add	r2, r7
 800f43a:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t237.im / 2.0;
 800f43e:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f442:	ed93 6b02 	vldr	d6, [r3, #8]
 800f446:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f44a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f44e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f452:	443b      	add	r3, r7
 800f454:	ed83 7b00 	vstr	d7, [r3]
 800f458:	e019      	b.n	800f48e <G_q+0xcec6>
  } else {
    t34_re = t237.re / 2.0;
 800f45a:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f45e:	ed93 6b00 	vldr	d6, [r3]
 800f462:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f466:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f46a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f46e:	443b      	add	r3, r7
 800f470:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t237.im / 2.0;
 800f474:	f507 5384 	add.w	r3, r7, #4224	; 0x1080
 800f478:	ed93 6b02 	vldr	d6, [r3, #8]
 800f47c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f480:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f484:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f488:	443b      	add	r3, r7
 800f48a:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t234.re * 3.061616997868383E-17 + t235.re * 3.061616997868383E-17;
 800f48e:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f492:	ed93 7b00 	vldr	d7, [r3]
 800f496:	ed9f 6be4 	vldr	d6, [pc, #912]	; 800f828 <G_q+0xd260>
 800f49a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f49e:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f4a2:	ed93 7b00 	vldr	d7, [r3]
 800f4a6:	ed9f 5be0 	vldr	d5, [pc, #896]	; 800f828 <G_q+0xd260>
 800f4aa:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f4ae:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f4b2:	f241 3330 	movw	r3, #4912	; 0x1330
 800f4b6:	443b      	add	r3, r7
 800f4b8:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t234.im * 3.061616997868383E-17 + t235.im * 3.061616997868383E-17;
 800f4bc:	f507 630d 	add.w	r3, r7, #2256	; 0x8d0
 800f4c0:	ed93 7b02 	vldr	d7, [r3, #8]
 800f4c4:	ed9f 6bd8 	vldr	d6, [pc, #864]	; 800f828 <G_q+0xd260>
 800f4c8:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f4cc:	f507 630e 	add.w	r3, r7, #2272	; 0x8e0
 800f4d0:	ed93 7b02 	vldr	d7, [r3, #8]
 800f4d4:	ed9f 5bd4 	vldr	d5, [pc, #848]	; 800f828 <G_q+0xd260>
 800f4d8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f4dc:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f4e0:	f241 3310 	movw	r3, #4880	; 0x1310
 800f4e4:	443b      	add	r3, r7
 800f4e6:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t34_re) + 7.498798913309288E-33;
 800f4ea:	f241 3348 	movw	r3, #4936	; 0x1348
 800f4ee:	443b      	add	r3, r7
 800f4f0:	ed93 6b00 	vldr	d6, [r3]
 800f4f4:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f4f8:	443b      	add	r3, r7
 800f4fa:	ed93 7b00 	vldr	d7, [r3]
 800f4fe:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f502:	ed9f 6bcb 	vldr	d6, [pc, #812]	; 800f830 <G_q+0xd268>
 800f506:	ee37 7b06 	vadd.f64	d7, d7, d6
 800f50a:	f241 3348 	movw	r3, #4936	; 0x1348
 800f50e:	443b      	add	r3, r7
 800f510:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t34_im;
 800f514:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f518:	ed93 6b00 	vldr	d6, [r3]
 800f51c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f520:	443b      	add	r3, r7
 800f522:	ed93 7b00 	vldr	d7, [r3]
 800f526:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f52a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f52e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f532:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f536:	ed93 7b00 	vldr	d7, [r3]
 800f53a:	ed9f 6bbf 	vldr	d6, [pc, #764]	; 800f838 <G_q+0xd270>
 800f53e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f542:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f546:	ed93 7b02 	vldr	d7, [r3, #8]
 800f54a:	ed9f 5bb7 	vldr	d5, [pc, #732]	; 800f828 <G_q+0xd260>
 800f54e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f552:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f556:	4bbc      	ldr	r3, [pc, #752]	; (800f848 <G_q+0xd280>)
 800f558:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f55c:	443a      	add	r2, r7
 800f55e:	4413      	add	r3, r2
 800f560:	ed93 7b00 	vldr	d7, [r3]
 800f564:	ed9f 5bb4 	vldr	d5, [pc, #720]	; 800f838 <G_q+0xd270>
 800f568:	ee27 5b05 	vmul.f64	d5, d7, d5
    t231.im * 3.061616997868383E-17);
 800f56c:	4bb6      	ldr	r3, [pc, #728]	; (800f848 <G_q+0xd280>)
 800f56e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f572:	443a      	add	r2, r7
 800f574:	4413      	add	r3, r2
 800f576:	ed93 7b02 	vldr	d7, [r3, #8]
 800f57a:	ed9f 4bab 	vldr	d4, [pc, #684]	; 800f828 <G_q+0xd260>
 800f57e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t60_re = (t230.re * 0.0 - t230.im * 3.061616997868383E-17) - (t231.re * 0.0 -
 800f582:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f586:	f241 2350 	movw	r3, #4688	; 0x1250
 800f58a:	443b      	add	r3, r7
 800f58c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f590:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f594:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f598:	ed93 7b00 	vldr	d7, [r3]
 800f59c:	ed9f 6ba2 	vldr	d6, [pc, #648]	; 800f828 <G_q+0xd260>
 800f5a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f5a4:	f507 7344 	add.w	r3, r7, #784	; 0x310
 800f5a8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f5ac:	ed9f 5ba2 	vldr	d5, [pc, #648]	; 800f838 <G_q+0xd270>
 800f5b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f5b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f5b8:	4ba3      	ldr	r3, [pc, #652]	; (800f848 <G_q+0xd280>)
 800f5ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f5be:	443a      	add	r2, r7
 800f5c0:	4413      	add	r3, r2
 800f5c2:	ed93 7b00 	vldr	d7, [r3]
 800f5c6:	ed9f 5b98 	vldr	d5, [pc, #608]	; 800f828 <G_q+0xd260>
 800f5ca:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t231.im * 0.0);
 800f5ce:	4b9e      	ldr	r3, [pc, #632]	; (800f848 <G_q+0xd280>)
 800f5d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800f5d4:	443a      	add	r2, r7
 800f5d6:	4413      	add	r3, r2
 800f5d8:	ed93 7b02 	vldr	d7, [r3, #8]
 800f5dc:	ed9f 4b96 	vldr	d4, [pc, #600]	; 800f838 <G_q+0xd270>
 800f5e0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f5e4:	ee35 7b07 	vadd.f64	d7, d5, d7
  t76_re = (t230.re * 3.061616997868383E-17 + t230.im * 0.0) - (t231.re *
 800f5e8:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800f5ec:	443b      	add	r3, r7
 800f5ee:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f5f2:	ed83 7b00 	vstr	d7, [r3]
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f5f6:	f241 0350 	movw	r3, #4176	; 0x1050
 800f5fa:	443b      	add	r3, r7
 800f5fc:	ed93 7b00 	vldr	d7, [r3]
 800f600:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 800f840 <G_q+0xd278>
 800f604:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f608:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f60c:	ed93 7b00 	vldr	d7, [r3]
 800f610:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 800f840 <G_q+0xd278>
 800f614:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f618:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t13_re * t16_re - t13_im * t16_im)) + (t23_re * t20_re - t3_im *
 800f61c:	f241 3378 	movw	r3, #4984	; 0x1378
 800f620:	443b      	add	r3, r7
 800f622:	ed93 5b00 	vldr	d5, [r3]
 800f626:	f241 3368 	movw	r3, #4968	; 0x1368
 800f62a:	443b      	add	r3, r7
 800f62c:	ed93 7b00 	vldr	d7, [r3]
 800f630:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f634:	f241 3370 	movw	r3, #4976	; 0x1370
 800f638:	443b      	add	r3, r7
 800f63a:	ed93 4b00 	vldr	d4, [r3]
 800f63e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f642:	ed93 7b00 	vldr	d7, [r3]
 800f646:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f64a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f64e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f652:	f241 3330 	movw	r3, #4912	; 0x1330
 800f656:	443b      	add	r3, r7
 800f658:	ed93 5b00 	vldr	d5, [r3]
 800f65c:	f241 3348 	movw	r3, #4936	; 0x1348
 800f660:	443b      	add	r3, r7
 800f662:	ed93 7b00 	vldr	d7, [r3]
 800f666:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f66a:	f241 3310 	movw	r3, #4880	; 0x1310
 800f66e:	443b      	add	r3, r7
 800f670:	ed93 4b00 	vldr	d4, [r3]
 800f674:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f678:	ed93 7b00 	vldr	d7, [r3]
 800f67c:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f680:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f684:	ee36 7b07 	vadd.f64	d7, d6, d7
  t72_re = (((t232.re * 6.123233995736766E-17 + t233.re * 6.123233995736766E-17)
 800f688:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800f68c:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f840 <G_q+0xd278>
 800f690:	ee37 7b46 	vsub.f64	d7, d7, d6
 800f694:	ed83 7b00 	vstr	d7, [r3]
             t20_im)) - 6.123233995736766E-17;
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f698:	f241 0350 	movw	r3, #4176	; 0x1050
 800f69c:	443b      	add	r3, r7
 800f69e:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6a2:	ed9f 6b67 	vldr	d6, [pc, #412]	; 800f840 <G_q+0xd278>
 800f6a6:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f6aa:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800f6ae:	ed93 7b02 	vldr	d7, [r3, #8]
 800f6b2:	ed9f 5b63 	vldr	d5, [pc, #396]	; 800f840 <G_q+0xd278>
 800f6b6:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f6ba:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t13_re * t16_im + t13_im * t16_re)) + (t23_re * t20_im + t3_im *
 800f6be:	f241 3378 	movw	r3, #4984	; 0x1378
 800f6c2:	443b      	add	r3, r7
 800f6c4:	ed93 5b00 	vldr	d5, [r3]
 800f6c8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800f6cc:	ed93 7b00 	vldr	d7, [r3]
 800f6d0:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f6d4:	f241 3370 	movw	r3, #4976	; 0x1370
 800f6d8:	443b      	add	r3, r7
 800f6da:	ed93 4b00 	vldr	d4, [r3]
 800f6de:	f241 3368 	movw	r3, #4968	; 0x1368
 800f6e2:	443b      	add	r3, r7
 800f6e4:	ed93 7b00 	vldr	d7, [r3]
 800f6e8:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f6ec:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f6f0:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f6f4:	f241 3330 	movw	r3, #4912	; 0x1330
 800f6f8:	443b      	add	r3, r7
 800f6fa:	ed93 5b00 	vldr	d5, [r3]
 800f6fe:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800f702:	ed93 7b00 	vldr	d7, [r3]
 800f706:	ee25 5b07 	vmul.f64	d5, d5, d7
 800f70a:	f241 3310 	movw	r3, #4880	; 0x1310
 800f70e:	443b      	add	r3, r7
 800f710:	ed93 4b00 	vldr	d4, [r3]
 800f714:	f241 3348 	movw	r3, #4936	; 0x1348
 800f718:	443b      	add	r3, r7
 800f71a:	ed93 7b00 	vldr	d7, [r3]
 800f71e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800f722:	ee35 7b07 	vadd.f64	d7, d5, d7
  t23_re = ((t232.im * 6.123233995736766E-17 + t233.im * 6.123233995736766E-17)
 800f726:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f72a:	f241 3330 	movw	r3, #4912	; 0x1330
 800f72e:	443b      	add	r3, r7
 800f730:	ed83 7b00 	vstr	d7, [r3]
    t20_re);
  if (t220.im == 0.0) {
 800f734:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f738:	ed93 7b02 	vldr	d7, [r3, #8]
 800f73c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f744:	d115      	bne.n	800f772 <G_q+0xd1aa>
    t12_re = t220.re / 2.0;
 800f746:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f74a:	ed93 6b00 	vldr	d6, [r3]
 800f74e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f752:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f756:	f241 3388 	movw	r3, #5000	; 0x1388
 800f75a:	443b      	add	r3, r7
 800f75c:	ed83 7b00 	vstr	d7, [r3]
    t58_im = 0.0;
 800f760:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f764:	f04f 0300 	mov.w	r3, #0
 800f768:	f04f 0400 	mov.w	r4, #0
 800f76c:	e9c2 3400 	strd	r3, r4, [r2]
 800f770:	e037      	b.n	800f7e2 <G_q+0xd21a>
  } else if (t220.re == 0.0) {
 800f772:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f776:	ed93 7b00 	vldr	d7, [r3]
 800f77a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f77e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f782:	d115      	bne.n	800f7b0 <G_q+0xd1e8>
    t12_re = 0.0;
 800f784:	f04f 0300 	mov.w	r3, #0
 800f788:	f04f 0400 	mov.w	r4, #0
 800f78c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f790:	443a      	add	r2, r7
 800f792:	e9c2 3400 	strd	r3, r4, [r2]
    t58_im = t220.im / 2.0;
 800f796:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f79a:	ed93 6b02 	vldr	d6, [r3, #8]
 800f79e:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f7a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7aa:	ed83 7b00 	vstr	d7, [r3]
 800f7ae:	e018      	b.n	800f7e2 <G_q+0xd21a>
  } else {
    t12_re = t220.re / 2.0;
 800f7b0:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f7b4:	ed93 6b00 	vldr	d6, [r3]
 800f7b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7c0:	f241 3388 	movw	r3, #5000	; 0x1388
 800f7c4:	443b      	add	r3, r7
 800f7c6:	ed83 7b00 	vstr	d7, [r3]
    t58_im = t220.im / 2.0;
 800f7ca:	f507 6309 	add.w	r3, r7, #2192	; 0x890
 800f7ce:	ed93 6b02 	vldr	d6, [r3, #8]
 800f7d2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f7d6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f7da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f7de:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t221.im == 0.0) {
 800f7e2:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7e6:	ed93 7b02 	vldr	d7, [r3, #8]
 800f7ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f7ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7f2:	d12b      	bne.n	800f84c <G_q+0xd284>
    t34_re = t221.re / 2.0;
 800f7f4:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f7f8:	ed93 6b00 	vldr	d6, [r3]
 800f7fc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f800:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f804:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f808:	443b      	add	r3, r7
 800f80a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800f80e:	f04f 0300 	mov.w	r3, #0
 800f812:	f04f 0400 	mov.w	r4, #0
 800f816:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f81a:	443a      	add	r2, r7
 800f81c:	e9c2 3400 	strd	r3, r4, [r2]
 800f820:	e04e      	b.n	800f8c0 <G_q+0xd2f8>
 800f822:	bf00      	nop
 800f824:	f3af 8000 	nop.w
 800f828:	33145c07 	.word	0x33145c07
 800f82c:	3c81a626 	.word	0x3c81a626
 800f830:	858a5d48 	.word	0x858a5d48
 800f834:	394377ce 	.word	0x394377ce
	...
 800f840:	33145c07 	.word	0x33145c07
 800f844:	3c91a626 	.word	0x3c91a626
 800f848:	ffffef50 	.word	0xffffef50
  } else if (t221.re == 0.0) {
 800f84c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f850:	ed93 7b00 	vldr	d7, [r3]
 800f854:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f858:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f85c:	d116      	bne.n	800f88c <G_q+0xd2c4>
    t34_re = 0.0;
 800f85e:	f04f 0300 	mov.w	r3, #0
 800f862:	f04f 0400 	mov.w	r4, #0
 800f866:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800f86a:	443a      	add	r2, r7
 800f86c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t221.im / 2.0;
 800f870:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f874:	ed93 6b02 	vldr	d6, [r3, #8]
 800f878:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f87c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f880:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f884:	443b      	add	r3, r7
 800f886:	ed83 7b00 	vstr	d7, [r3]
 800f88a:	e019      	b.n	800f8c0 <G_q+0xd2f8>
  } else {
    t34_re = t221.re / 2.0;
 800f88c:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f890:	ed93 6b00 	vldr	d6, [r3]
 800f894:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f898:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f89c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f8a0:	443b      	add	r3, r7
 800f8a2:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t221.im / 2.0;
 800f8a6:	f507 630a 	add.w	r3, r7, #2208	; 0x8a0
 800f8aa:	ed93 6b02 	vldr	d6, [r3, #8]
 800f8ae:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f8b2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f8b6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800f8ba:	443b      	add	r3, r7
 800f8bc:	ed83 7b00 	vstr	d7, [r3]
  }

  t12_re += t34_re;
 800f8c0:	f241 3388 	movw	r3, #5000	; 0x1388
 800f8c4:	443b      	add	r3, r7
 800f8c6:	ed93 6b00 	vldr	d6, [r3]
 800f8ca:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800f8ce:	443b      	add	r3, r7
 800f8d0:	ed93 7b00 	vldr	d7, [r3]
 800f8d4:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f8d8:	f241 3388 	movw	r3, #5000	; 0x1388
 800f8dc:	443b      	add	r3, r7
 800f8de:	ed83 7b00 	vstr	d7, [r3]
  t58_im += t34_im;
 800f8e2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800f8e6:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 800f8ea:	ed92 6b00 	vldr	d6, [r2]
 800f8ee:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800f8f2:	443a      	add	r2, r7
 800f8f4:	ed92 7b00 	vldr	d7, [r2]
 800f8f8:	ee36 7b07 	vadd.f64	d7, d6, d7
 800f8fc:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t222.re * 0.0 - t222.im * 0.5) - (t223.re * 0.0 - t223.im * 0.5);
 800f900:	f241 0310 	movw	r3, #4112	; 0x1010
 800f904:	443b      	add	r3, r7
 800f906:	ed93 7b00 	vldr	d7, [r3]
 800f90a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 800faf0 <G_q+0xd528>
 800f90e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f912:	f241 0310 	movw	r3, #4112	; 0x1010
 800f916:	443b      	add	r3, r7
 800f918:	ed93 7b02 	vldr	d7, [r3, #8]
 800f91c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f920:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f924:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f928:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f92c:	ed93 7b00 	vldr	d7, [r3]
 800f930:	ed9f 5b6f 	vldr	d5, [pc, #444]	; 800faf0 <G_q+0xd528>
 800f934:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f938:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f93c:	ed93 7b02 	vldr	d7, [r3, #8]
 800f940:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800f944:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f948:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f94c:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f950:	f241 3378 	movw	r3, #4984	; 0x1378
 800f954:	443b      	add	r3, r7
 800f956:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t222.re * 0.5 + t222.im * 0.0) - (t223.re * 0.5 + t223.im * 0.0);
 800f95a:	f241 0310 	movw	r3, #4112	; 0x1010
 800f95e:	443b      	add	r3, r7
 800f960:	ed93 7b00 	vldr	d7, [r3]
 800f964:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800f968:	ee27 6b06 	vmul.f64	d6, d7, d6
 800f96c:	f241 0310 	movw	r3, #4112	; 0x1010
 800f970:	443b      	add	r3, r7
 800f972:	ed93 7b02 	vldr	d7, [r3, #8]
 800f976:	ed9f 5b5e 	vldr	d5, [pc, #376]	; 800faf0 <G_q+0xd528>
 800f97a:	ee27 7b05 	vmul.f64	d7, d7, d5
 800f97e:	ee36 6b07 	vadd.f64	d6, d6, d7
 800f982:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f986:	ed93 7b00 	vldr	d7, [r3]
 800f98a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f98e:	ee27 5b05 	vmul.f64	d5, d7, d5
 800f992:	f507 5381 	add.w	r3, r7, #4128	; 0x1020
 800f996:	ed93 7b02 	vldr	d7, [r3, #8]
 800f99a:	ed9f 4b55 	vldr	d4, [pc, #340]	; 800faf0 <G_q+0xd528>
 800f99e:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f9a2:	ee35 7b07 	vadd.f64	d7, d5, d7
 800f9a6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f9aa:	f241 3370 	movw	r3, #4976	; 0x1370
 800f9ae:	443b      	add	r3, r7
 800f9b0:	ed83 7b00 	vstr	d7, [r3]
  if (t226.im == 0.0) {
 800f9b4:	f241 0330 	movw	r3, #4144	; 0x1030
 800f9b8:	443b      	add	r3, r7
 800f9ba:	ed93 7b02 	vldr	d7, [r3, #8]
 800f9be:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f9c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f9c6:	d116      	bne.n	800f9f6 <G_q+0xd42e>
    t16_re = t226.re / 2.0;
 800f9c8:	f241 0330 	movw	r3, #4144	; 0x1030
 800f9cc:	443b      	add	r3, r7
 800f9ce:	ed93 6b00 	vldr	d6, [r3]
 800f9d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800f9d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800f9da:	f241 3368 	movw	r3, #4968	; 0x1368
 800f9de:	443b      	add	r3, r7
 800f9e0:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 800f9e4:	f04f 0300 	mov.w	r3, #0
 800f9e8:	f04f 0400 	mov.w	r4, #0
 800f9ec:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 800f9f0:	e9c2 3400 	strd	r3, r4, [r2]
 800f9f4:	e03b      	b.n	800fa6e <G_q+0xd4a6>
  } else if (t226.re == 0.0) {
 800f9f6:	f241 0330 	movw	r3, #4144	; 0x1030
 800f9fa:	443b      	add	r3, r7
 800f9fc:	ed93 7b00 	vldr	d7, [r3]
 800fa00:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa08:	d116      	bne.n	800fa38 <G_q+0xd470>
    t16_re = 0.0;
 800fa0a:	f04f 0300 	mov.w	r3, #0
 800fa0e:	f04f 0400 	mov.w	r4, #0
 800fa12:	f241 3268 	movw	r2, #4968	; 0x1368
 800fa16:	443a      	add	r2, r7
 800fa18:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t226.im / 2.0;
 800fa1c:	f241 0330 	movw	r3, #4144	; 0x1030
 800fa20:	443b      	add	r3, r7
 800fa22:	ed93 6b02 	vldr	d6, [r3, #8]
 800fa26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa2e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa32:	ed83 7b00 	vstr	d7, [r3]
 800fa36:	e01a      	b.n	800fa6e <G_q+0xd4a6>
  } else {
    t16_re = t226.re / 2.0;
 800fa38:	f241 0330 	movw	r3, #4144	; 0x1030
 800fa3c:	443b      	add	r3, r7
 800fa3e:	ed93 6b00 	vldr	d6, [r3]
 800fa42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa4a:	f241 3368 	movw	r3, #4968	; 0x1368
 800fa4e:	443b      	add	r3, r7
 800fa50:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t226.im / 2.0;
 800fa54:	f241 0330 	movw	r3, #4144	; 0x1030
 800fa58:	443b      	add	r3, r7
 800fa5a:	ed93 6b02 	vldr	d6, [r3, #8]
 800fa5e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa66:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fa6a:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t227.im == 0.0) {
 800fa6e:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fa72:	ed93 7b02 	vldr	d7, [r3, #8]
 800fa76:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fa7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa7e:	d116      	bne.n	800faae <G_q+0xd4e6>
    t34_re = t227.re / 2.0;
 800fa80:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fa84:	ed93 6b00 	vldr	d6, [r3]
 800fa88:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fa8c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fa90:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fa94:	443b      	add	r3, r7
 800fa96:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fa9a:	f04f 0300 	mov.w	r3, #0
 800fa9e:	f04f 0400 	mov.w	r4, #0
 800faa2:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800faa6:	443a      	add	r2, r7
 800faa8:	e9c2 3400 	strd	r3, r4, [r2]
 800faac:	e03e      	b.n	800fb2c <G_q+0xd564>
  } else if (t227.re == 0.0) {
 800faae:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fab2:	ed93 7b00 	vldr	d7, [r3]
 800fab6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800faba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fabe:	d11b      	bne.n	800faf8 <G_q+0xd530>
    t34_re = 0.0;
 800fac0:	f04f 0300 	mov.w	r3, #0
 800fac4:	f04f 0400 	mov.w	r4, #0
 800fac8:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800facc:	443a      	add	r2, r7
 800face:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t227.im / 2.0;
 800fad2:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fad6:	ed93 6b02 	vldr	d6, [r3, #8]
 800fada:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fade:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fae2:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fae6:	443b      	add	r3, r7
 800fae8:	ed83 7b00 	vstr	d7, [r3]
 800faec:	e01e      	b.n	800fb2c <G_q+0xd564>
 800faee:	bf00      	nop
	...
  } else {
    t34_re = t227.re / 2.0;
 800faf8:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fafc:	ed93 6b00 	vldr	d6, [r3]
 800fb00:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb04:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb08:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fb0c:	443b      	add	r3, r7
 800fb0e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t227.im / 2.0;
 800fb12:	f507 5382 	add.w	r3, r7, #4160	; 0x1040
 800fb16:	ed93 6b02 	vldr	d6, [r3, #8]
 800fb1a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fb1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fb22:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fb26:	443b      	add	r3, r7
 800fb28:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t224.re * 0.0 - t224.im * 0.5) - (t225.re * 0.0 - t225.im * 0.5);
 800fb2c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800fb30:	ed93 7b00 	vldr	d7, [r3]
 800fb34:	ed9f 6bde 	vldr	d6, [pc, #888]	; 800feb0 <G_q+0xd8e8>
 800fb38:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fb3c:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800fb40:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb44:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fb48:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fb4c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fb50:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fb54:	ed93 7b00 	vldr	d7, [r3]
 800fb58:	ed9f 5bd5 	vldr	d5, [pc, #852]	; 800feb0 <G_q+0xd8e8>
 800fb5c:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fb60:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fb64:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb68:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800fb6c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fb70:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fb74:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fb78:	f241 3348 	movw	r3, #4936	; 0x1348
 800fb7c:	443b      	add	r3, r7
 800fb7e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t224.re * 0.5 + t224.im * 0.0) - (t225.re * 0.5 + t225.im * 0.0);
 800fb82:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800fb86:	ed93 7b00 	vldr	d7, [r3]
 800fb8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800fb8e:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fb92:	f507 630b 	add.w	r3, r7, #2224	; 0x8b0
 800fb96:	ed93 7b02 	vldr	d7, [r3, #8]
 800fb9a:	ed9f 5bc5 	vldr	d5, [pc, #788]	; 800feb0 <G_q+0xd8e8>
 800fb9e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fba2:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fba6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fbaa:	ed93 7b00 	vldr	d7, [r3]
 800fbae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800fbb2:	ee27 5b05 	vmul.f64	d5, d7, d5
 800fbb6:	f507 630c 	add.w	r3, r7, #2240	; 0x8c0
 800fbba:	ed93 7b02 	vldr	d7, [r3, #8]
 800fbbe:	ed9f 4bbc 	vldr	d4, [pc, #752]	; 800feb0 <G_q+0xd8e8>
 800fbc2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800fbc6:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fbca:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fbce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fbd2:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 800fbd6:	f241 3368 	movw	r3, #4968	; 0x1368
 800fbda:	443b      	add	r3, r7
 800fbdc:	ed93 6b00 	vldr	d6, [r3]
 800fbe0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fbe4:	443b      	add	r3, r7
 800fbe6:	ed93 7b00 	vldr	d7, [r3]
 800fbea:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fbee:	ed9f 6bb2 	vldr	d6, [pc, #712]	; 800feb8 <G_q+0xd8f0>
 800fbf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 800fbf6:	f241 3368 	movw	r3, #4968	; 0x1368
 800fbfa:	443b      	add	r3, r7
 800fbfc:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 800fc00:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fc04:	ed93 6b00 	vldr	d6, [r3]
 800fc08:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fc0c:	443b      	add	r3, r7
 800fc0e:	ed93 7b00 	vldr	d7, [r3]
 800fc12:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fc16:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fc1a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = t228.re * 3.061616997868383E-17 + t229.re * 3.061616997868383E-17;
 800fc1e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800fc22:	ed93 7b00 	vldr	d7, [r3]
 800fc26:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 800fec0 <G_q+0xd8f8>
 800fc2a:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fc2e:	4ba6      	ldr	r3, [pc, #664]	; (800fec8 <G_q+0xd900>)
 800fc30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc34:	443a      	add	r2, r7
 800fc36:	4413      	add	r3, r2
 800fc38:	ed93 7b00 	vldr	d7, [r3]
 800fc3c:	ed9f 5ba0 	vldr	d5, [pc, #640]	; 800fec0 <G_q+0xd8f8>
 800fc40:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fc44:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fc48:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800fc4c:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = t228.im * 3.061616997868383E-17 + t229.im * 3.061616997868383E-17;
 800fc50:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 800fc54:	ed93 7b02 	vldr	d7, [r3, #8]
 800fc58:	ed9f 6b99 	vldr	d6, [pc, #612]	; 800fec0 <G_q+0xd8f8>
 800fc5c:	ee27 6b06 	vmul.f64	d6, d7, d6
 800fc60:	4b99      	ldr	r3, [pc, #612]	; (800fec8 <G_q+0xd900>)
 800fc62:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fc66:	443a      	add	r2, r7
 800fc68:	4413      	add	r3, r2
 800fc6a:	ed93 7b02 	vldr	d7, [r3, #8]
 800fc6e:	ed9f 5b94 	vldr	d5, [pc, #592]	; 800fec0 <G_q+0xd8f8>
 800fc72:	ee27 7b05 	vmul.f64	d7, d7, d5
 800fc76:	ee36 7b07 	vadd.f64	d7, d6, d7
 800fc7a:	f241 3338 	movw	r3, #4920	; 0x1338
 800fc7e:	443b      	add	r3, r7
 800fc80:	ed83 7b00 	vstr	d7, [r3]
  t85_im = (t12_re * t13_re - t58_im * t13_im) - (t20_re * t16_re - t20_im *
 800fc84:	f241 3388 	movw	r3, #5000	; 0x1388
 800fc88:	443b      	add	r3, r7
 800fc8a:	ed93 6b00 	vldr	d6, [r3]
 800fc8e:	f241 3378 	movw	r3, #4984	; 0x1378
 800fc92:	443b      	add	r3, r7
 800fc94:	ed93 7b00 	vldr	d7, [r3]
 800fc98:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fc9c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fca0:	ed93 5b00 	vldr	d5, [r3]
 800fca4:	f241 3370 	movw	r3, #4976	; 0x1370
 800fca8:	443b      	add	r3, r7
 800fcaa:	ed93 7b00 	vldr	d7, [r3]
 800fcae:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fcb2:	ee36 6b47 	vsub.f64	d6, d6, d7
 800fcb6:	f241 3348 	movw	r3, #4936	; 0x1348
 800fcba:	443b      	add	r3, r7
 800fcbc:	ed93 5b00 	vldr	d5, [r3]
 800fcc0:	f241 3368 	movw	r3, #4968	; 0x1368
 800fcc4:	443b      	add	r3, r7
 800fcc6:	ed93 7b00 	vldr	d7, [r3]
 800fcca:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fcce:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fcd2:	ed93 4b00 	vldr	d4, [r3]
 800fcd6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fcda:	ed93 7b00 	vldr	d7, [r3]
 800fcde:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fce2:	ee35 7b47 	vsub.f64	d7, d5, d7
 800fce6:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fcea:	f241 3318 	movw	r3, #4888	; 0x1318
 800fcee:	443b      	add	r3, r7
 800fcf0:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t58_im = (t12_re * t13_im + t58_im * t13_re) - (t20_re * t16_im + t20_im *
 800fcf4:	f241 3388 	movw	r3, #5000	; 0x1388
 800fcf8:	443b      	add	r3, r7
 800fcfa:	ed93 6b00 	vldr	d6, [r3]
 800fcfe:	f241 3370 	movw	r3, #4976	; 0x1370
 800fd02:	443b      	add	r3, r7
 800fd04:	ed93 7b00 	vldr	d7, [r3]
 800fd08:	ee26 6b07 	vmul.f64	d6, d6, d7
 800fd0c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fd10:	ed93 5b00 	vldr	d5, [r3]
 800fd14:	f241 3378 	movw	r3, #4984	; 0x1378
 800fd18:	443b      	add	r3, r7
 800fd1a:	ed93 7b00 	vldr	d7, [r3]
 800fd1e:	ee25 7b07 	vmul.f64	d7, d5, d7
 800fd22:	ee36 6b07 	vadd.f64	d6, d6, d7
 800fd26:	f241 3348 	movw	r3, #4936	; 0x1348
 800fd2a:	443b      	add	r3, r7
 800fd2c:	ed93 5b00 	vldr	d5, [r3]
 800fd30:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 800fd34:	ed93 7b00 	vldr	d7, [r3]
 800fd38:	ee25 5b07 	vmul.f64	d5, d5, d7
 800fd3c:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 800fd40:	ed93 4b00 	vldr	d4, [r3]
 800fd44:	f241 3368 	movw	r3, #4968	; 0x1368
 800fd48:	443b      	add	r3, r7
 800fd4a:	ed93 7b00 	vldr	d7, [r3]
 800fd4e:	ee24 7b07 	vmul.f64	d7, d4, d7
 800fd52:	ee35 7b07 	vadd.f64	d7, d5, d7
 800fd56:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800fd5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 800fd5e:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t218.im == 0.0) {
 800fd62:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fd66:	ed93 7b02 	vldr	d7, [r3, #8]
 800fd6a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fd6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd72:	d116      	bne.n	800fda2 <G_q+0xd7da>
    t34_re = t218.re / 2.0;
 800fd74:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fd78:	ed93 6b00 	vldr	d6, [r3]
 800fd7c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fd80:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fd84:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fd88:	443b      	add	r3, r7
 800fd8a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 800fd8e:	f04f 0300 	mov.w	r3, #0
 800fd92:	f04f 0400 	mov.w	r4, #0
 800fd96:	f241 32b0 	movw	r2, #5040	; 0x13b0
 800fd9a:	443a      	add	r2, r7
 800fd9c:	e9c2 3400 	strd	r3, r4, [r2]
 800fda0:	e039      	b.n	800fe16 <G_q+0xd84e>
  } else if (t218.re == 0.0) {
 800fda2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fda6:	ed93 7b00 	vldr	d7, [r3]
 800fdaa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fdae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdb2:	d116      	bne.n	800fde2 <G_q+0xd81a>
    t34_re = 0.0;
 800fdb4:	f04f 0300 	mov.w	r3, #0
 800fdb8:	f04f 0400 	mov.w	r4, #0
 800fdbc:	f241 32b8 	movw	r2, #5048	; 0x13b8
 800fdc0:	443a      	add	r2, r7
 800fdc2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t218.im / 2.0;
 800fdc6:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fdca:	ed93 6b02 	vldr	d6, [r3, #8]
 800fdce:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fdd2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fdd6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fdda:	443b      	add	r3, r7
 800fddc:	ed83 7b00 	vstr	d7, [r3]
 800fde0:	e019      	b.n	800fe16 <G_q+0xd84e>
  } else {
    t34_re = t218.re / 2.0;
 800fde2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fde6:	ed93 6b00 	vldr	d6, [r3]
 800fdea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fdee:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fdf2:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fdf6:	443b      	add	r3, r7
 800fdf8:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t218.im / 2.0;
 800fdfc:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800fe00:	ed93 6b02 	vldr	d6, [r3, #8]
 800fe04:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe08:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe0c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 800fe10:	443b      	add	r3, r7
 800fe12:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t219.im == 0.0) {
 800fe16:	4b2d      	ldr	r3, [pc, #180]	; (800fecc <G_q+0xd904>)
 800fe18:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe1c:	443a      	add	r2, r7
 800fe1e:	4413      	add	r3, r2
 800fe20:	ed93 7b02 	vldr	d7, [r3, #8]
 800fe24:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe2c:	d119      	bne.n	800fe62 <G_q+0xd89a>
    t13_re = t219.re / 2.0;
 800fe2e:	4b27      	ldr	r3, [pc, #156]	; (800fecc <G_q+0xd904>)
 800fe30:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe34:	443a      	add	r2, r7
 800fe36:	4413      	add	r3, r2
 800fe38:	ed93 6b00 	vldr	d6, [r3]
 800fe3c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe40:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fe44:	f241 3378 	movw	r3, #4984	; 0x1378
 800fe48:	443b      	add	r3, r7
 800fe4a:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 800fe4e:	f04f 0300 	mov.w	r3, #0
 800fe52:	f04f 0400 	mov.w	r4, #0
 800fe56:	f241 3270 	movw	r2, #4976	; 0x1370
 800fe5a:	443a      	add	r2, r7
 800fe5c:	e9c2 3400 	strd	r3, r4, [r2]
 800fe60:	e056      	b.n	800ff10 <G_q+0xd948>
  } else if (t219.re == 0.0) {
 800fe62:	4b1a      	ldr	r3, [pc, #104]	; (800fecc <G_q+0xd904>)
 800fe64:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe68:	443a      	add	r2, r7
 800fe6a:	4413      	add	r3, r2
 800fe6c:	ed93 7b00 	vldr	d7, [r3]
 800fe70:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800fe74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe78:	d12a      	bne.n	800fed0 <G_q+0xd908>
    t13_re = 0.0;
 800fe7a:	f04f 0300 	mov.w	r3, #0
 800fe7e:	f04f 0400 	mov.w	r4, #0
 800fe82:	f241 3278 	movw	r2, #4984	; 0x1378
 800fe86:	443a      	add	r2, r7
 800fe88:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t219.im / 2.0;
 800fe8c:	4b0f      	ldr	r3, [pc, #60]	; (800fecc <G_q+0xd904>)
 800fe8e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fe92:	443a      	add	r2, r7
 800fe94:	4413      	add	r3, r2
 800fe96:	ed93 6b02 	vldr	d6, [r3, #8]
 800fe9a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fe9e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fea2:	f241 3370 	movw	r3, #4976	; 0x1370
 800fea6:	443b      	add	r3, r7
 800fea8:	ed83 7b00 	vstr	d7, [r3]
 800feac:	e030      	b.n	800ff10 <G_q+0xd948>
 800feae:	bf00      	nop
	...
 800feb8:	858a5d48 	.word	0x858a5d48
 800febc:	394377ce 	.word	0x394377ce
 800fec0:	33145c07 	.word	0x33145c07
 800fec4:	3c81a626 	.word	0x3c81a626
 800fec8:	ffffef30 	.word	0xffffef30
 800fecc:	ffffecf0 	.word	0xffffecf0
  } else {
    t13_re = t219.re / 2.0;
 800fed0:	4be1      	ldr	r3, [pc, #900]	; (8010258 <G_q+0xdc90>)
 800fed2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fed6:	443a      	add	r2, r7
 800fed8:	4413      	add	r3, r2
 800feda:	ed93 6b00 	vldr	d6, [r3]
 800fede:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800fee2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800fee6:	f241 3378 	movw	r3, #4984	; 0x1378
 800feea:	443b      	add	r3, r7
 800feec:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t219.im / 2.0;
 800fef0:	4bd9      	ldr	r3, [pc, #868]	; (8010258 <G_q+0xdc90>)
 800fef2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 800fef6:	443a      	add	r2, r7
 800fef8:	4413      	add	r3, r2
 800fefa:	ed93 6b02 	vldr	d6, [r3, #8]
 800fefe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 800ff02:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800ff06:	f241 3370 	movw	r3, #4976	; 0x1370
 800ff0a:	443b      	add	r3, r7
 800ff0c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t60_re * t72_re - t76_re * t23_re) - (t12_im * t85_im - b_t10_re *
 800ff10:	f241 2250 	movw	r2, #4688	; 0x1250
 800ff14:	443a      	add	r2, r7
 800ff16:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800ff1a:	ed92 6b00 	vldr	d6, [r2]
 800ff1e:	ed93 7b00 	vldr	d7, [r3]
 800ff22:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff26:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ff2a:	443b      	add	r3, r7
 800ff2c:	ed93 5b00 	vldr	d5, [r3]
 800ff30:	f241 3330 	movw	r3, #4912	; 0x1330
 800ff34:	443b      	add	r3, r7
 800ff36:	ed93 7b00 	vldr	d7, [r3]
 800ff3a:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ff3e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff42:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 800ff46:	ed93 5b00 	vldr	d5, [r3]
 800ff4a:	f241 3318 	movw	r3, #4888	; 0x1318
 800ff4e:	443b      	add	r3, r7
 800ff50:	ed93 7b00 	vldr	d7, [r3]
 800ff54:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ff58:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ff5c:	f241 3238 	movw	r2, #4920	; 0x1338
 800ff60:	443a      	add	r2, r7
 800ff62:	ed92 4b00 	vldr	d4, [r2]
 800ff66:	ed93 7b00 	vldr	d7, [r3]
 800ff6a:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ff6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ff72:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ff76:	f241 3368 	movw	r3, #4968	; 0x1368
 800ff7a:	443b      	add	r3, r7
 800ff7c:	ed83 7b00 	vstr	d7, [r3]
    t58_im);
  t76_re = (t60_re * t23_re + t76_re * t72_re) - (t12_im * t58_im + b_t10_re *
 800ff80:	f241 2350 	movw	r3, #4688	; 0x1250
 800ff84:	443b      	add	r3, r7
 800ff86:	ed93 6b00 	vldr	d6, [r3]
 800ff8a:	f241 3330 	movw	r3, #4912	; 0x1330
 800ff8e:	443b      	add	r3, r7
 800ff90:	ed93 7b00 	vldr	d7, [r3]
 800ff94:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ff98:	f241 22a8 	movw	r2, #4776	; 0x12a8
 800ff9c:	443a      	add	r2, r7
 800ff9e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 800ffa2:	ed92 5b00 	vldr	d5, [r2]
 800ffa6:	ed93 7b00 	vldr	d7, [r3]
 800ffaa:	ee25 7b07 	vmul.f64	d7, d5, d7
 800ffae:	ee36 6b07 	vadd.f64	d6, d6, d7
 800ffb2:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 800ffb6:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 800ffba:	ed92 5b00 	vldr	d5, [r2]
 800ffbe:	ed93 7b00 	vldr	d7, [r3]
 800ffc2:	ee25 5b07 	vmul.f64	d5, d5, d7
 800ffc6:	f241 3338 	movw	r3, #4920	; 0x1338
 800ffca:	443b      	add	r3, r7
 800ffcc:	ed93 4b00 	vldr	d4, [r3]
 800ffd0:	f241 3318 	movw	r3, #4888	; 0x1318
 800ffd4:	443b      	add	r3, r7
 800ffd6:	ed93 7b00 	vldr	d7, [r3]
 800ffda:	ee24 7b07 	vmul.f64	d7, d4, d7
 800ffde:	ee35 7b07 	vadd.f64	d7, d5, d7
 800ffe2:	f241 23a8 	movw	r3, #4776	; 0x12a8
 800ffe6:	443b      	add	r3, r7
 800ffe8:	ee36 7b47 	vsub.f64	d7, d6, d7
 800ffec:	ed83 7b00 	vstr	d7, [r3]
    t85_im);
  t34_re += t13_re;
 800fff0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 800fff4:	443b      	add	r3, r7
 800fff6:	ed93 6b00 	vldr	d6, [r3]
 800fffa:	f241 3378 	movw	r3, #4984	; 0x1378
 800fffe:	443b      	add	r3, r7
 8010000:	ed93 7b00 	vldr	d7, [r3]
 8010004:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010008:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801000c:	443b      	add	r3, r7
 801000e:	ed83 7b00 	vstr	d7, [r3]
  t34_im += t13_im;
 8010012:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010016:	443b      	add	r3, r7
 8010018:	ed93 6b00 	vldr	d6, [r3]
 801001c:	f241 3370 	movw	r3, #4976	; 0x1370
 8010020:	443b      	add	r3, r7
 8010022:	ed93 7b00 	vldr	d7, [r3]
 8010026:	ee36 7b07 	vadd.f64	d7, d6, d7
 801002a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801002e:	443b      	add	r3, r7
 8010030:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 8010034:	4b89      	ldr	r3, [pc, #548]	; (801025c <G_q+0xdc94>)
 8010036:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801003a:	443a      	add	r2, r7
 801003c:	4413      	add	r3, r2
 801003e:	ed93 7b00 	vldr	d7, [r3]
 8010042:	eeb1 6b47 	vneg.f64	d6, d7
 8010046:	f241 23e8 	movw	r3, #4840	; 0x12e8
 801004a:	443b      	add	r3, r7
 801004c:	ed93 5b00 	vldr	d5, [r3]
 8010050:	f241 3308 	movw	r3, #4872	; 0x1308
 8010054:	443b      	add	r3, r7
 8010056:	ed93 7b00 	vldr	d7, [r3]
 801005a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801005e:	f241 2358 	movw	r3, #4696	; 0x1258
 8010062:	443b      	add	r3, r7
 8010064:	ed93 4b00 	vldr	d4, [r3]
 8010068:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 801006c:	ed93 7b00 	vldr	d7, [r3]
 8010070:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010074:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010078:	ed9f 5b73 	vldr	d5, [pc, #460]	; 8010248 <G_q+0xdc80>
 801007c:	ee27 5b05 	vmul.f64	d5, d7, d5
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 8010080:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010084:	443b      	add	r3, r7
 8010086:	ed93 4b00 	vldr	d4, [r3]
 801008a:	f241 23f0 	movw	r3, #4848	; 0x12f0
 801008e:	443b      	add	r3, r7
 8010090:	ed93 7b00 	vldr	d7, [r3]
 8010094:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010098:	f241 23f8 	movw	r3, #4856	; 0x12f8
 801009c:	443b      	add	r3, r7
 801009e:	ed93 3b00 	vldr	d3, [r3]
 80100a2:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80100a6:	443b      	add	r3, r7
 80100a8:	ed93 7b00 	vldr	d7, [r3]
 80100ac:	ee23 7b07 	vmul.f64	d7, d3, d7
 80100b0:	ee34 7b47 	vsub.f64	d7, d4, d7
 80100b4:	ed9f 4b66 	vldr	d4, [pc, #408]	; 8010250 <G_q+0xdc88>
 80100b8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 80100bc:	ee35 5b47 	vsub.f64	d5, d5, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80100c0:	f241 23b8 	movw	r3, #4792	; 0x12b8
 80100c4:	443b      	add	r3, r7
 80100c6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80100ca:	ed92 4b00 	vldr	d4, [r2]
 80100ce:	ed93 7b00 	vldr	d7, [r3]
 80100d2:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80100d6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80100da:	443a      	add	r2, r7
 80100dc:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80100e0:	443b      	add	r3, r7
 80100e2:	ed92 3b00 	vldr	d3, [r2]
 80100e6:	ed93 7b00 	vldr	d7, [r3]
 80100ea:	ee23 7b07 	vmul.f64	d7, d3, d7
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80100ee:	ee34 7b47 	vsub.f64	d7, d4, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80100f2:	ed9f 4b57 	vldr	d4, [pc, #348]	; 8010250 <G_q+0xdc88>
 80100f6:	ee27 7b04 	vmul.f64	d7, d7, d4
    * b_t54_re - t43_im * t55_im) * 1.3164953090834051E-18) + (t55_re * t74_re -
 80100fa:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 80100fe:	f241 3368 	movw	r3, #4968	; 0x1368
 8010102:	443b      	add	r3, r7
 8010104:	ed93 4b00 	vldr	d4, [r3]
 8010108:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801010c:	443b      	add	r3, r7
 801010e:	ed93 7b00 	vldr	d7, [r3]
 8010112:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010116:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801011a:	443b      	add	r3, r7
 801011c:	ed93 3b00 	vldr	d3, [r3]
 8010120:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010124:	443b      	add	r3, r7
 8010126:	ed93 7b00 	vldr	d7, [r3]
 801012a:	ee23 7b07 	vmul.f64	d7, d3, d7
 801012e:	ee34 7b47 	vsub.f64	d7, d4, d7
    t34_im) * 0.0215);
 8010132:	ed9f 4b45 	vldr	d4, [pc, #276]	; 8010248 <G_q+0xdc80>
 8010136:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_im) * 1.3164953090834051E-18) + (t16_re * t34_re - t76_re *
 801013a:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].re = -g * ((((b_t54_im * t41_re - t43_re * t41_im) * 0.0215 - (t70_im
 801013e:	4b48      	ldr	r3, [pc, #288]	; (8010260 <G_q+0xdc98>)
 8010140:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010144:	443a      	add	r2, r7
 8010146:	4413      	add	r3, r2
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	3330      	adds	r3, #48	; 0x30
 801014c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010150:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 8010154:	4b41      	ldr	r3, [pc, #260]	; (801025c <G_q+0xdc94>)
 8010156:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801015a:	443a      	add	r2, r7
 801015c:	4413      	add	r3, r2
 801015e:	ed93 7b00 	vldr	d7, [r3]
 8010162:	eeb1 6b47 	vneg.f64	d6, d7
 8010166:	f241 23e8 	movw	r3, #4840	; 0x12e8
 801016a:	443b      	add	r3, r7
 801016c:	ed93 5b00 	vldr	d5, [r3]
 8010170:	f507 5398 	add.w	r3, r7, #4864	; 0x1300
 8010174:	ed93 7b00 	vldr	d7, [r3]
 8010178:	ee25 5b07 	vmul.f64	d5, d5, d7
 801017c:	f241 2358 	movw	r3, #4696	; 0x1258
 8010180:	443b      	add	r3, r7
 8010182:	ed93 4b00 	vldr	d4, [r3]
 8010186:	f241 3308 	movw	r3, #4872	; 0x1308
 801018a:	443b      	add	r3, r7
 801018c:	ed93 7b00 	vldr	d7, [r3]
 8010190:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010194:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010198:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8010248 <G_q+0xdc80>
 801019c:	ee27 5b05 	vmul.f64	d5, d7, d5
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 80101a0:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80101a4:	443b      	add	r3, r7
 80101a6:	ed93 4b00 	vldr	d4, [r3]
 80101aa:	f241 23d8 	movw	r3, #4824	; 0x12d8
 80101ae:	443b      	add	r3, r7
 80101b0:	ed93 7b00 	vldr	d7, [r3]
 80101b4:	ee24 4b07 	vmul.f64	d4, d4, d7
 80101b8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80101bc:	443b      	add	r3, r7
 80101be:	ed93 3b00 	vldr	d3, [r3]
 80101c2:	f241 23f0 	movw	r3, #4848	; 0x12f0
 80101c6:	443b      	add	r3, r7
 80101c8:	ed93 7b00 	vldr	d7, [r3]
 80101cc:	ee23 7b07 	vmul.f64	d7, d3, d7
 80101d0:	ee34 7b07 	vadd.f64	d7, d4, d7
 80101d4:	ed9f 4b1e 	vldr	d4, [pc, #120]	; 8010250 <G_q+0xdc88>
 80101d8:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 80101dc:	ee35 5b47 	vsub.f64	d5, d5, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 80101e0:	f241 23b0 	movw	r3, #4784	; 0x12b0
 80101e4:	443b      	add	r3, r7
 80101e6:	f507 5297 	add.w	r2, r7, #4832	; 0x12e0
 80101ea:	ed92 4b00 	vldr	d4, [r2]
 80101ee:	ed93 7b00 	vldr	d7, [r3]
 80101f2:	ee24 4b07 	vmul.f64	d4, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 80101f6:	f241 22d0 	movw	r2, #4816	; 0x12d0
 80101fa:	443a      	add	r2, r7
 80101fc:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8010200:	443b      	add	r3, r7
 8010202:	ed92 3b00 	vldr	d3, [r2]
 8010206:	ed93 7b00 	vldr	d7, [r3]
 801020a:	ee23 7b07 	vmul.f64	d7, d3, d7
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 801020e:	ee34 7b07 	vadd.f64	d7, d4, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 8010212:	ed9f 4b0f 	vldr	d4, [pc, #60]	; 8010250 <G_q+0xdc88>
 8010216:	ee27 7b04 	vmul.f64	d7, d7, d4
    * t55_im + t43_im * b_t54_re) * 1.3164953090834051E-18) + (t55_re * t74_im +
 801021a:	ee35 5b07 	vadd.f64	d5, d5, d7
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801021e:	f241 3368 	movw	r3, #4968	; 0x1368
 8010222:	443b      	add	r3, r7
 8010224:	ed93 4b00 	vldr	d4, [r3]
 8010228:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801022c:	443b      	add	r3, r7
 801022e:	ed93 7b00 	vldr	d7, [r3]
 8010232:	ee24 4b07 	vmul.f64	d4, d4, d7
 8010236:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801023a:	443b      	add	r3, r7
 801023c:	ed93 3b00 	vldr	d3, [r3]
 8010240:	e010      	b.n	8010264 <G_q+0xdc9c>
 8010242:	bf00      	nop
 8010244:	f3af 8000 	nop.w
 8010248:	9374bc6a 	.word	0x9374bc6a
 801024c:	3f960418 	.word	0x3f960418
 8010250:	2ba953a1 	.word	0x2ba953a1
 8010254:	3c3848f9 	.word	0x3c3848f9
 8010258:	ffffecf0 	.word	0xffffecf0
 801025c:	ffffec58 	.word	0xffffec58
 8010260:	ffffec34 	.word	0xffffec34
 8010264:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010268:	443b      	add	r3, r7
 801026a:	ed93 7b00 	vldr	d7, [r3]
 801026e:	ee23 7b07 	vmul.f64	d7, d3, d7
 8010272:	ee34 7b07 	vadd.f64	d7, d4, d7
    t34_re) * 0.0215);
 8010276:	ed9f 4bd2 	vldr	d4, [pc, #840]	; 80105c0 <G_q+0xdff8>
 801027a:	ee27 7b04 	vmul.f64	d7, d7, d4
    t70_re * t74_re) * 1.3164953090834051E-18) + (t16_re * t34_im + t76_re *
 801027e:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_G_q[3].im = -g * ((((b_t54_im * t41_im + t43_re * t41_re) * 0.0215 - (t70_im
 8010282:	4bd5      	ldr	r3, [pc, #852]	; (80105d8 <G_q+0xe010>)
 8010284:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010288:	443a      	add	r2, r7
 801028a:	4413      	add	r3, r2
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	3330      	adds	r3, #48	; 0x30
 8010290:	ee26 7b07 	vmul.f64	d7, d6, d7
 8010294:	ed83 7b02 	vstr	d7, [r3, #8]
  if (t264.im == 0.0) {
 8010298:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801029c:	ed93 7b02 	vldr	d7, [r3, #8]
 80102a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a8:	d116      	bne.n	80102d8 <G_q+0xdd10>
    t70_im = t264.re / 2.0;
 80102aa:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80102ae:	ed93 6b00 	vldr	d6, [r3]
 80102b2:	f241 23c8 	movw	r3, #4808	; 0x12c8
 80102b6:	443b      	add	r3, r7
 80102b8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80102bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80102c0:	ed83 7b00 	vstr	d7, [r3]
    t43_im = 0.0;
 80102c4:	f04f 0300 	mov.w	r3, #0
 80102c8:	f04f 0400 	mov.w	r4, #0
 80102cc:	f241 22f8 	movw	r2, #4856	; 0x12f8
 80102d0:	443a      	add	r2, r7
 80102d2:	e9c2 3400 	strd	r3, r4, [r2]
 80102d6:	e039      	b.n	801034c <G_q+0xdd84>
  } else if (t264.re == 0.0) {
 80102d8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80102dc:	ed93 7b00 	vldr	d7, [r3]
 80102e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80102e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e8:	d116      	bne.n	8010318 <G_q+0xdd50>
    t70_im = 0.0;
 80102ea:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80102ee:	443a      	add	r2, r7
 80102f0:	f04f 0300 	mov.w	r3, #0
 80102f4:	f04f 0400 	mov.w	r4, #0
 80102f8:	e9c2 3400 	strd	r3, r4, [r2]
    t43_im = t264.im / 2.0;
 80102fc:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010300:	ed93 6b02 	vldr	d6, [r3, #8]
 8010304:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010308:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801030c:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010310:	443b      	add	r3, r7
 8010312:	ed83 7b00 	vstr	d7, [r3]
 8010316:	e019      	b.n	801034c <G_q+0xdd84>
  } else {
    t70_im = t264.re / 2.0;
 8010318:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 801031c:	ed93 6b00 	vldr	d6, [r3]
 8010320:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8010324:	443b      	add	r3, r7
 8010326:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801032a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801032e:	ed83 7b00 	vstr	d7, [r3]
    t43_im = t264.im / 2.0;
 8010332:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8010336:	ed93 6b02 	vldr	d6, [r3, #8]
 801033a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801033e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010342:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8010346:	443b      	add	r3, r7
 8010348:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t265.im == 0.0) {
 801034c:	4ba3      	ldr	r3, [pc, #652]	; (80105dc <G_q+0xe014>)
 801034e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010352:	443a      	add	r2, r7
 8010354:	4413      	add	r3, r2
 8010356:	ed93 7b02 	vldr	d7, [r3, #8]
 801035a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801035e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010362:	d118      	bne.n	8010396 <G_q+0xddce>
    t76_re = t265.re / 2.0;
 8010364:	4b9d      	ldr	r3, [pc, #628]	; (80105dc <G_q+0xe014>)
 8010366:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801036a:	443a      	add	r2, r7
 801036c:	4413      	add	r3, r2
 801036e:	ed93 6b00 	vldr	d6, [r3]
 8010372:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8010376:	443b      	add	r3, r7
 8010378:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801037c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010380:	ed83 7b00 	vstr	d7, [r3]
    t72_re = 0.0;
 8010384:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8010388:	f04f 0300 	mov.w	r3, #0
 801038c:	f04f 0400 	mov.w	r4, #0
 8010390:	e9c2 3400 	strd	r3, r4, [r2]
 8010394:	e043      	b.n	801041e <G_q+0xde56>
  } else if (t265.re == 0.0) {
 8010396:	4b91      	ldr	r3, [pc, #580]	; (80105dc <G_q+0xe014>)
 8010398:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801039c:	443a      	add	r2, r7
 801039e:	4413      	add	r3, r2
 80103a0:	ed93 7b00 	vldr	d7, [r3]
 80103a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80103a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103ac:	d118      	bne.n	80103e0 <G_q+0xde18>
    t76_re = 0.0;
 80103ae:	f241 22a8 	movw	r2, #4776	; 0x12a8
 80103b2:	443a      	add	r2, r7
 80103b4:	f04f 0300 	mov.w	r3, #0
 80103b8:	f04f 0400 	mov.w	r4, #0
 80103bc:	e9c2 3400 	strd	r3, r4, [r2]
    t72_re = t265.im / 2.0;
 80103c0:	4b86      	ldr	r3, [pc, #536]	; (80105dc <G_q+0xe014>)
 80103c2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80103c6:	443a      	add	r2, r7
 80103c8:	4413      	add	r3, r2
 80103ca:	ed93 6b02 	vldr	d6, [r3, #8]
 80103ce:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80103d2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80103d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103da:	ed83 7b00 	vstr	d7, [r3]
 80103de:	e01e      	b.n	801041e <G_q+0xde56>
  } else {
    t76_re = t265.re / 2.0;
 80103e0:	4b7e      	ldr	r3, [pc, #504]	; (80105dc <G_q+0xe014>)
 80103e2:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80103e6:	443a      	add	r2, r7
 80103e8:	4413      	add	r3, r2
 80103ea:	ed93 6b00 	vldr	d6, [r3]
 80103ee:	f241 23a8 	movw	r3, #4776	; 0x12a8
 80103f2:	443b      	add	r3, r7
 80103f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80103f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80103fc:	ed83 7b00 	vstr	d7, [r3]
    t72_re = t265.im / 2.0;
 8010400:	4b76      	ldr	r3, [pc, #472]	; (80105dc <G_q+0xe014>)
 8010402:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010406:	443a      	add	r2, r7
 8010408:	4413      	add	r3, r2
 801040a:	ed93 6b02 	vldr	d6, [r3, #8]
 801040e:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8010412:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010416:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801041a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 801041e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010422:	ed93 7b00 	vldr	d7, [r3]
 8010426:	ed9f 6b68 	vldr	d6, [pc, #416]	; 80105c8 <G_q+0xe000>
 801042a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801042e:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010432:	ed93 7b02 	vldr	d7, [r3, #8]
 8010436:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80105d0 <G_q+0xe008>
 801043a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801043e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010442:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010446:	ed93 7b00 	vldr	d7, [r3]
 801044a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 80105c8 <G_q+0xe000>
 801044e:	ee27 5b05 	vmul.f64	d5, d7, d5
    t253.im * 3.061616997868383E-17);
 8010452:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 8010456:	ed93 7b02 	vldr	d7, [r3, #8]
 801045a:	ed9f 4b5d 	vldr	d4, [pc, #372]	; 80105d0 <G_q+0xe008>
 801045e:	ee27 7b04 	vmul.f64	d7, d7, d4
  t16_re = (t252.re * 0.0 - t252.im * 3.061616997868383E-17) - (t253.re * 0.0 -
 8010462:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010466:	ee36 7b47 	vsub.f64	d7, d6, d7
 801046a:	f241 3368 	movw	r3, #4968	; 0x1368
 801046e:	443b      	add	r3, r7
 8010470:	ed83 7b00 	vstr	d7, [r3]
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 8010474:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010478:	ed93 7b00 	vldr	d7, [r3]
 801047c:	ed9f 6b54 	vldr	d6, [pc, #336]	; 80105d0 <G_q+0xe008>
 8010480:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010484:	f507 6313 	add.w	r3, r7, #2352	; 0x930
 8010488:	ed93 7b02 	vldr	d7, [r3, #8]
 801048c:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 80105c8 <G_q+0xe000>
 8010490:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010494:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010498:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 801049c:	ed93 7b00 	vldr	d7, [r3]
 80104a0:	ed9f 5b4b 	vldr	d5, [pc, #300]	; 80105d0 <G_q+0xe008>
 80104a4:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t253.im * 0.0);
 80104a8:	f507 6314 	add.w	r3, r7, #2368	; 0x940
 80104ac:	ed93 7b02 	vldr	d7, [r3, #8]
 80104b0:	ed9f 4b45 	vldr	d4, [pc, #276]	; 80105c8 <G_q+0xe000>
 80104b4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80104b8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t16_im = (t252.re * 3.061616997868383E-17 + t252.im * 0.0) - (t253.re *
 80104bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80104c0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80104c4:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t250.re * 0.0 - t250.im * 0.5) - (t251.re * 0.0 - t251.im * 0.5);
 80104c8:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80104cc:	443b      	add	r3, r7
 80104ce:	ed93 7b00 	vldr	d7, [r3]
 80104d2:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 80105c8 <G_q+0xe000>
 80104d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 80104da:	f241 03f0 	movw	r3, #4336	; 0x10f0
 80104de:	443b      	add	r3, r7
 80104e0:	ed93 7b02 	vldr	d7, [r3, #8]
 80104e4:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80104e8:	ee27 7b05 	vmul.f64	d7, d7, d5
 80104ec:	ee36 6b47 	vsub.f64	d6, d6, d7
 80104f0:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 80104f4:	ed93 7b00 	vldr	d7, [r3]
 80104f8:	ed9f 5b33 	vldr	d5, [pc, #204]	; 80105c8 <G_q+0xe000>
 80104fc:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010500:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 8010504:	ed93 7b02 	vldr	d7, [r3, #8]
 8010508:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801050c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010510:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010514:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010518:	f241 3348 	movw	r3, #4936	; 0x1348
 801051c:	443b      	add	r3, r7
 801051e:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t250.re * 0.5 + t250.im * 0.0) - (t251.re * 0.5 + t251.im * 0.0);
 8010522:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010526:	443b      	add	r3, r7
 8010528:	ed93 7b00 	vldr	d7, [r3]
 801052c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010530:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010534:	f241 03f0 	movw	r3, #4336	; 0x10f0
 8010538:	443b      	add	r3, r7
 801053a:	ed93 7b02 	vldr	d7, [r3, #8]
 801053e:	ed9f 5b22 	vldr	d5, [pc, #136]	; 80105c8 <G_q+0xe000>
 8010542:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010546:	ee36 6b07 	vadd.f64	d6, d6, d7
 801054a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801054e:	ed93 7b00 	vldr	d7, [r3]
 8010552:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010556:	ee27 5b05 	vmul.f64	d5, d7, d5
 801055a:	f507 5388 	add.w	r3, r7, #4352	; 0x1100
 801055e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010562:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80105c8 <G_q+0xe000>
 8010566:	ee27 7b04 	vmul.f64	d7, d7, d4
 801056a:	ee35 7b07 	vadd.f64	d7, d5, d7
 801056e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010572:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010576:	ed83 7b00 	vstr	d7, [r3]
  if (t248.im == 0.0) {
 801057a:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801057e:	443b      	add	r3, r7
 8010580:	ed93 7b02 	vldr	d7, [r3, #8]
 8010584:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801058c:	d128      	bne.n	80105e0 <G_q+0xe018>
    t12_re = t248.re / 2.0;
 801058e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010592:	443b      	add	r3, r7
 8010594:	ed93 6b00 	vldr	d6, [r3]
 8010598:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801059c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80105a0:	f241 3388 	movw	r3, #5000	; 0x1388
 80105a4:	443b      	add	r3, r7
 80105a6:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 80105aa:	f04f 0300 	mov.w	r3, #0
 80105ae:	f04f 0400 	mov.w	r4, #0
 80105b2:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 80105b6:	e9c2 3400 	strd	r3, r4, [r2]
 80105ba:	e04d      	b.n	8010658 <G_q+0xe090>
 80105bc:	f3af 8000 	nop.w
 80105c0:	9374bc6a 	.word	0x9374bc6a
 80105c4:	3f960418 	.word	0x3f960418
	...
 80105d0:	33145c07 	.word	0x33145c07
 80105d4:	3c81a626 	.word	0x3c81a626
 80105d8:	ffffec34 	.word	0xffffec34
 80105dc:	ffffed10 	.word	0xffffed10
  } else if (t248.re == 0.0) {
 80105e0:	f241 03d0 	movw	r3, #4304	; 0x10d0
 80105e4:	443b      	add	r3, r7
 80105e6:	ed93 7b00 	vldr	d7, [r3]
 80105ea:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80105ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105f2:	d116      	bne.n	8010622 <G_q+0xe05a>
    t12_re = 0.0;
 80105f4:	f04f 0300 	mov.w	r3, #0
 80105f8:	f04f 0400 	mov.w	r4, #0
 80105fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010600:	443a      	add	r2, r7
 8010602:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t248.im / 2.0;
 8010606:	f241 03d0 	movw	r3, #4304	; 0x10d0
 801060a:	443b      	add	r3, r7
 801060c:	ed93 6b02 	vldr	d6, [r3, #8]
 8010610:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010614:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010618:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801061c:	ed83 7b00 	vstr	d7, [r3]
 8010620:	e01a      	b.n	8010658 <G_q+0xe090>
  } else {
    t12_re = t248.re / 2.0;
 8010622:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010626:	443b      	add	r3, r7
 8010628:	ed93 6b00 	vldr	d6, [r3]
 801062c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010630:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010634:	f241 3388 	movw	r3, #5000	; 0x1388
 8010638:	443b      	add	r3, r7
 801063a:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t248.im / 2.0;
 801063e:	f241 03d0 	movw	r3, #4304	; 0x10d0
 8010642:	443b      	add	r3, r7
 8010644:	ed93 6b02 	vldr	d6, [r3, #8]
 8010648:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801064c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010650:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010654:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t249.im == 0.0) {
 8010658:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801065c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010660:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010668:	d116      	bne.n	8010698 <G_q+0xe0d0>
    t34_re = t249.re / 2.0;
 801066a:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801066e:	ed93 6b00 	vldr	d6, [r3]
 8010672:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801067a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801067e:	443b      	add	r3, r7
 8010680:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010684:	f04f 0300 	mov.w	r3, #0
 8010688:	f04f 0400 	mov.w	r4, #0
 801068c:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010690:	443a      	add	r2, r7
 8010692:	e9c2 3400 	strd	r3, r4, [r2]
 8010696:	e039      	b.n	801070c <G_q+0xe144>
  } else if (t249.re == 0.0) {
 8010698:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 801069c:	ed93 7b00 	vldr	d7, [r3]
 80106a0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80106a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106a8:	d116      	bne.n	80106d8 <G_q+0xe110>
    t34_re = 0.0;
 80106aa:	f04f 0300 	mov.w	r3, #0
 80106ae:	f04f 0400 	mov.w	r4, #0
 80106b2:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80106b6:	443a      	add	r2, r7
 80106b8:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t249.im / 2.0;
 80106bc:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80106c0:	ed93 6b02 	vldr	d6, [r3, #8]
 80106c4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80106c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80106cc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80106d0:	443b      	add	r3, r7
 80106d2:	ed83 7b00 	vstr	d7, [r3]
 80106d6:	e019      	b.n	801070c <G_q+0xe144>
  } else {
    t34_re = t249.re / 2.0;
 80106d8:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80106dc:	ed93 6b00 	vldr	d6, [r3]
 80106e0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80106e4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80106e8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80106ec:	443b      	add	r3, r7
 80106ee:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t249.im / 2.0;
 80106f2:	f507 5387 	add.w	r3, r7, #4320	; 0x10e0
 80106f6:	ed93 6b02 	vldr	d6, [r3, #8]
 80106fa:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80106fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010702:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010706:	443b      	add	r3, r7
 8010708:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = t246.re * 3.061616997868383E-17 + t247.re * 3.061616997868383E-17;
 801070c:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 8010710:	ed93 7b00 	vldr	d7, [r3]
 8010714:	ed9f 6be2 	vldr	d6, [pc, #904]	; 8010aa0 <G_q+0xe4d8>
 8010718:	ee27 6b06 	vmul.f64	d6, d7, d6
 801071c:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 8010720:	ed93 7b00 	vldr	d7, [r3]
 8010724:	ed9f 5bde 	vldr	d5, [pc, #888]	; 8010aa0 <G_q+0xe4d8>
 8010728:	ee27 7b05 	vmul.f64	d7, d7, d5
 801072c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010730:	f241 3330 	movw	r3, #4912	; 0x1330
 8010734:	443b      	add	r3, r7
 8010736:	ed83 7b00 	vstr	d7, [r3]
  t3_im = t246.im * 3.061616997868383E-17 + t247.im * 3.061616997868383E-17;
 801073a:	f507 6311 	add.w	r3, r7, #2320	; 0x910
 801073e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010742:	ed9f 6bd7 	vldr	d6, [pc, #860]	; 8010aa0 <G_q+0xe4d8>
 8010746:	ee27 6b06 	vmul.f64	d6, d7, d6
 801074a:	f507 6312 	add.w	r3, r7, #2336	; 0x920
 801074e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010752:	ed9f 5bd3 	vldr	d5, [pc, #844]	; 8010aa0 <G_q+0xe4d8>
 8010756:	ee27 7b05 	vmul.f64	d7, d7, d5
 801075a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801075e:	f241 3310 	movw	r3, #4880	; 0x1310
 8010762:	443b      	add	r3, r7
 8010764:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t12_re + t34_re) + 7.498798913309288E-33;
 8010768:	f241 3388 	movw	r3, #5000	; 0x1388
 801076c:	443b      	add	r3, r7
 801076e:	ed93 6b00 	vldr	d6, [r3]
 8010772:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010776:	443b      	add	r3, r7
 8010778:	ed93 7b00 	vldr	d7, [r3]
 801077c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010780:	ed9f 6bc9 	vldr	d6, [pc, #804]	; 8010aa8 <G_q+0xe4e0>
 8010784:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010788:	f241 3388 	movw	r3, #5000	; 0x1388
 801078c:	443b      	add	r3, r7
 801078e:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 8010792:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010796:	ed93 6b00 	vldr	d6, [r3]
 801079a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801079e:	443b      	add	r3, r7
 80107a0:	ed93 7b00 	vldr	d7, [r3]
 80107a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80107a8:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80107ac:	ed83 7b00 	vstr	d7, [r3]
  t58_im = (t242.re * 0.0 - t242.im * 0.5) - (t243.re * 0.0 - t243.im * 0.5);
 80107b0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80107b4:	ed93 7b00 	vldr	d7, [r3]
 80107b8:	ed9f 6bbd 	vldr	d6, [pc, #756]	; 8010ab0 <G_q+0xe4e8>
 80107bc:	ee27 6b06 	vmul.f64	d6, d7, d6
 80107c0:	f507 734c 	add.w	r3, r7, #816	; 0x330
 80107c4:	ed93 7b02 	vldr	d7, [r3, #8]
 80107c8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80107cc:	ee27 7b05 	vmul.f64	d7, d7, d5
 80107d0:	ee36 6b47 	vsub.f64	d6, d6, d7
 80107d4:	4bba      	ldr	r3, [pc, #744]	; (8010ac0 <G_q+0xe4f8>)
 80107d6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107da:	443a      	add	r2, r7
 80107dc:	4413      	add	r3, r2
 80107de:	ed93 7b00 	vldr	d7, [r3]
 80107e2:	ed9f 5bb3 	vldr	d5, [pc, #716]	; 8010ab0 <G_q+0xe4e8>
 80107e6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80107ea:	4bb5      	ldr	r3, [pc, #724]	; (8010ac0 <G_q+0xe4f8>)
 80107ec:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80107f0:	443a      	add	r2, r7
 80107f2:	4413      	add	r3, r2
 80107f4:	ed93 7b02 	vldr	d7, [r3, #8]
 80107f8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80107fc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010800:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010804:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8010808:	ee36 7b47 	vsub.f64	d7, d6, d7
 801080c:	ed83 7b00 	vstr	d7, [r3]
  t70_re = (t242.re * 0.5 + t242.im * 0.0) - (t243.re * 0.5 + t243.im * 0.0);
 8010810:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010814:	ed93 7b00 	vldr	d7, [r3]
 8010818:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801081c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010820:	f507 734c 	add.w	r3, r7, #816	; 0x330
 8010824:	ed93 7b02 	vldr	d7, [r3, #8]
 8010828:	ed9f 5ba1 	vldr	d5, [pc, #644]	; 8010ab0 <G_q+0xe4e8>
 801082c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010830:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010834:	4ba2      	ldr	r3, [pc, #648]	; (8010ac0 <G_q+0xe4f8>)
 8010836:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801083a:	443a      	add	r2, r7
 801083c:	4413      	add	r3, r2
 801083e:	ed93 7b00 	vldr	d7, [r3]
 8010842:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010846:	ee27 5b05 	vmul.f64	d5, d7, d5
 801084a:	4b9d      	ldr	r3, [pc, #628]	; (8010ac0 <G_q+0xe4f8>)
 801084c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010850:	443a      	add	r2, r7
 8010852:	4413      	add	r3, r2
 8010854:	ed93 7b02 	vldr	d7, [r3, #8]
 8010858:	ed9f 4b95 	vldr	d4, [pc, #596]	; 8010ab0 <G_q+0xe4e8>
 801085c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010860:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010864:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8010868:	443b      	add	r3, r7
 801086a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801086e:	ed83 7b00 	vstr	d7, [r3]
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 8010872:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010876:	443b      	add	r3, r7
 8010878:	ed93 7b00 	vldr	d7, [r3]
 801087c:	ed9f 6b8e 	vldr	d6, [pc, #568]	; 8010ab8 <G_q+0xe4f0>
 8010880:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010884:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 8010888:	ed93 7b00 	vldr	d7, [r3]
 801088c:	ed9f 5b8a 	vldr	d5, [pc, #552]	; 8010ab8 <G_q+0xe4f0>
 8010890:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010894:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t16_re * t20_re - t16_im * t20_im)) + (t23_re * t12_re - t3_im *
 8010898:	f241 3368 	movw	r3, #4968	; 0x1368
 801089c:	443b      	add	r3, r7
 801089e:	ed93 5b00 	vldr	d5, [r3]
 80108a2:	f241 3348 	movw	r3, #4936	; 0x1348
 80108a6:	443b      	add	r3, r7
 80108a8:	ed93 7b00 	vldr	d7, [r3]
 80108ac:	ee25 5b07 	vmul.f64	d5, d5, d7
 80108b0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80108b4:	ed93 4b00 	vldr	d4, [r3]
 80108b8:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80108bc:	ed93 7b00 	vldr	d7, [r3]
 80108c0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80108c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80108c8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80108cc:	f241 3330 	movw	r3, #4912	; 0x1330
 80108d0:	443b      	add	r3, r7
 80108d2:	ed93 5b00 	vldr	d5, [r3]
 80108d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80108da:	443b      	add	r3, r7
 80108dc:	ed93 7b00 	vldr	d7, [r3]
 80108e0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80108e4:	f241 3310 	movw	r3, #4880	; 0x1310
 80108e8:	443b      	add	r3, r7
 80108ea:	ed93 4b00 	vldr	d4, [r3]
 80108ee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80108f2:	ed93 7b00 	vldr	d7, [r3]
 80108f6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80108fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80108fe:	ee36 7b07 	vadd.f64	d7, d6, d7
  t60_re = (((t244.re * 6.123233995736766E-17 + t245.re * 6.123233995736766E-17)
 8010902:	f241 2350 	movw	r3, #4688	; 0x1250
 8010906:	443b      	add	r3, r7
 8010908:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 8010ab8 <G_q+0xe4f0>
 801090c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010910:	ed83 7b00 	vstr	d7, [r3]
             t12_im)) - 6.123233995736766E-17;
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 8010914:	f241 03b0 	movw	r3, #4272	; 0x10b0
 8010918:	443b      	add	r3, r7
 801091a:	ed93 7b02 	vldr	d7, [r3, #8]
 801091e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8010ab8 <G_q+0xe4f0>
 8010922:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010926:	f507 5386 	add.w	r3, r7, #4288	; 0x10c0
 801092a:	ed93 7b02 	vldr	d7, [r3, #8]
 801092e:	ed9f 5b62 	vldr	d5, [pc, #392]	; 8010ab8 <G_q+0xe4f0>
 8010932:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010936:	ee36 6b07 	vadd.f64	d6, d6, d7
              + (t16_re * t20_im + t16_im * t20_re)) + (t23_re * t12_im + t3_im *
 801093a:	f241 3368 	movw	r3, #4968	; 0x1368
 801093e:	443b      	add	r3, r7
 8010940:	ed93 5b00 	vldr	d5, [r3]
 8010944:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010948:	ed93 7b00 	vldr	d7, [r3]
 801094c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010950:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010954:	ed93 4b00 	vldr	d4, [r3]
 8010958:	f241 3348 	movw	r3, #4936	; 0x1348
 801095c:	443b      	add	r3, r7
 801095e:	ed93 7b00 	vldr	d7, [r3]
 8010962:	ee24 7b07 	vmul.f64	d7, d4, d7
 8010966:	ee35 7b07 	vadd.f64	d7, d5, d7
 801096a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801096e:	f241 3330 	movw	r3, #4912	; 0x1330
 8010972:	443b      	add	r3, r7
 8010974:	ed93 5b00 	vldr	d5, [r3]
 8010978:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801097c:	ed93 7b00 	vldr	d7, [r3]
 8010980:	ee25 5b07 	vmul.f64	d5, d5, d7
 8010984:	f241 3310 	movw	r3, #4880	; 0x1310
 8010988:	443b      	add	r3, r7
 801098a:	ed93 4b00 	vldr	d4, [r3]
 801098e:	f241 3388 	movw	r3, #5000	; 0x1388
 8010992:	443b      	add	r3, r7
 8010994:	ed93 7b00 	vldr	d7, [r3]
 8010998:	ee24 7b07 	vmul.f64	d7, d4, d7
 801099c:	ee35 7b07 	vadd.f64	d7, d5, d7
  b_t10_re = ((t244.im * 6.123233995736766E-17 + t245.im * 6.123233995736766E-17)
 80109a0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80109a4:	f241 3338 	movw	r3, #4920	; 0x1338
 80109a8:	443b      	add	r3, r7
 80109aa:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  if (t256.im == 0.0) {
 80109ae:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80109b2:	ed93 7b02 	vldr	d7, [r3, #8]
 80109b6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109be:	d115      	bne.n	80109ec <G_q+0xe424>
    t20_im = t256.re / 2.0;
 80109c0:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80109c4:	ed93 6b00 	vldr	d6, [r3]
 80109c8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80109cc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80109d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80109d4:	ed83 7b00 	vstr	d7, [r3]
    t85_im = 0.0;
 80109d8:	f04f 0300 	mov.w	r3, #0
 80109dc:	f04f 0400 	mov.w	r4, #0
 80109e0:	f241 3218 	movw	r2, #4888	; 0x1318
 80109e4:	443a      	add	r2, r7
 80109e6:	e9c2 3400 	strd	r3, r4, [r2]
 80109ea:	e037      	b.n	8010a5c <G_q+0xe494>
  } else if (t256.re == 0.0) {
 80109ec:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 80109f0:	ed93 7b00 	vldr	d7, [r3]
 80109f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80109f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80109fc:	d115      	bne.n	8010a2a <G_q+0xe462>
    t20_im = 0.0;
 80109fe:	f04f 0300 	mov.w	r3, #0
 8010a02:	f04f 0400 	mov.w	r4, #0
 8010a06:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 8010a0a:	e9c2 3400 	strd	r3, r4, [r2]
    t85_im = t256.im / 2.0;
 8010a0e:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010a12:	ed93 6b02 	vldr	d6, [r3, #8]
 8010a16:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a1e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010a22:	443b      	add	r3, r7
 8010a24:	ed83 7b00 	vstr	d7, [r3]
 8010a28:	e018      	b.n	8010a5c <G_q+0xe494>
  } else {
    t20_im = t256.re / 2.0;
 8010a2a:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010a2e:	ed93 6b00 	vldr	d6, [r3]
 8010a32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a3a:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010a3e:	ed83 7b00 	vstr	d7, [r3]
    t85_im = t256.im / 2.0;
 8010a42:	f507 6315 	add.w	r3, r7, #2384	; 0x950
 8010a46:	ed93 6b02 	vldr	d6, [r3, #8]
 8010a4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a52:	f241 3318 	movw	r3, #4888	; 0x1318
 8010a56:	443b      	add	r3, r7
 8010a58:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t257.im == 0.0) {
 8010a5c:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010a60:	ed93 7b02 	vldr	d7, [r3, #8]
 8010a64:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010a68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a6c:	d12a      	bne.n	8010ac4 <G_q+0xe4fc>
    t34_re = t257.re / 2.0;
 8010a6e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010a72:	ed93 6b00 	vldr	d6, [r3]
 8010a76:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010a7a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010a7e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010a82:	443b      	add	r3, r7
 8010a84:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010a88:	f04f 0300 	mov.w	r3, #0
 8010a8c:	f04f 0400 	mov.w	r4, #0
 8010a90:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010a94:	443a      	add	r2, r7
 8010a96:	e9c2 3400 	strd	r3, r4, [r2]
 8010a9a:	e04d      	b.n	8010b38 <G_q+0xe570>
 8010a9c:	f3af 8000 	nop.w
 8010aa0:	33145c07 	.word	0x33145c07
 8010aa4:	3c81a626 	.word	0x3c81a626
 8010aa8:	858a5d48 	.word	0x858a5d48
 8010aac:	394377ce 	.word	0x394377ce
	...
 8010ab8:	33145c07 	.word	0x33145c07
 8010abc:	3c91a626 	.word	0x3c91a626
 8010ac0:	ffffef70 	.word	0xffffef70
  } else if (t257.re == 0.0) {
 8010ac4:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010ac8:	ed93 7b00 	vldr	d7, [r3]
 8010acc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ad4:	d116      	bne.n	8010b04 <G_q+0xe53c>
    t34_re = 0.0;
 8010ad6:	f04f 0300 	mov.w	r3, #0
 8010ada:	f04f 0400 	mov.w	r4, #0
 8010ade:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010ae2:	443a      	add	r2, r7
 8010ae4:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t257.im / 2.0;
 8010ae8:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010aec:	ed93 6b02 	vldr	d6, [r3, #8]
 8010af0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010af4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010af8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010afc:	443b      	add	r3, r7
 8010afe:	ed83 7b00 	vstr	d7, [r3]
 8010b02:	e019      	b.n	8010b38 <G_q+0xe570>
  } else {
    t34_re = t257.re / 2.0;
 8010b04:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010b08:	ed93 6b00 	vldr	d6, [r3]
 8010b0c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010b10:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b14:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010b18:	443b      	add	r3, r7
 8010b1a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t257.im / 2.0;
 8010b1e:	f507 6316 	add.w	r3, r7, #2400	; 0x960
 8010b22:	ed93 6b02 	vldr	d6, [r3, #8]
 8010b26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010b2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010b2e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010b32:	443b      	add	r3, r7
 8010b34:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_im += t34_re;
 8010b38:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010b3c:	ed93 6b00 	vldr	d6, [r3]
 8010b40:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010b44:	443b      	add	r3, r7
 8010b46:	ed93 7b00 	vldr	d7, [r3]
 8010b4a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b4e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8010b52:	ed83 7b00 	vstr	d7, [r3]
  t85_im += t34_im;
 8010b56:	f241 3318 	movw	r3, #4888	; 0x1318
 8010b5a:	443b      	add	r3, r7
 8010b5c:	ed93 6b00 	vldr	d6, [r3]
 8010b60:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010b64:	443b      	add	r3, r7
 8010b66:	ed93 7b00 	vldr	d7, [r3]
 8010b6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010b6e:	f241 3318 	movw	r3, #4888	; 0x1318
 8010b72:	443b      	add	r3, r7
 8010b74:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t258.re * 0.0 - t258.im * 0.5) - (t259.re * 0.0 - t259.im * 0.5);
 8010b78:	f241 1310 	movw	r3, #4368	; 0x1110
 8010b7c:	443b      	add	r3, r7
 8010b7e:	ed93 7b00 	vldr	d7, [r3]
 8010b82:	ed9f 6bd5 	vldr	d6, [pc, #852]	; 8010ed8 <G_q+0xe910>
 8010b86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010b8a:	f241 1310 	movw	r3, #4368	; 0x1110
 8010b8e:	443b      	add	r3, r7
 8010b90:	ed93 7b02 	vldr	d7, [r3, #8]
 8010b94:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010b98:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010b9c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010ba0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010ba4:	ed93 7b00 	vldr	d7, [r3]
 8010ba8:	ed9f 5bcb 	vldr	d5, [pc, #812]	; 8010ed8 <G_q+0xe910>
 8010bac:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010bb0:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010bb4:	ed93 7b02 	vldr	d7, [r3, #8]
 8010bb8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010bbc:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010bc0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010bc4:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010bc8:	f241 3310 	movw	r3, #4880	; 0x1310
 8010bcc:	443b      	add	r3, r7
 8010bce:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t258.re * 0.5 + t258.im * 0.0) - (t259.re * 0.5 + t259.im * 0.0);
 8010bd2:	f241 1310 	movw	r3, #4368	; 0x1110
 8010bd6:	443b      	add	r3, r7
 8010bd8:	ed93 7b00 	vldr	d7, [r3]
 8010bdc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010be0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010be4:	f241 1310 	movw	r3, #4368	; 0x1110
 8010be8:	443b      	add	r3, r7
 8010bea:	ed93 7b02 	vldr	d7, [r3, #8]
 8010bee:	ed9f 5bba 	vldr	d5, [pc, #744]	; 8010ed8 <G_q+0xe910>
 8010bf2:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010bf6:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010bfa:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010bfe:	ed93 7b00 	vldr	d7, [r3]
 8010c02:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010c06:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010c0a:	f507 5389 	add.w	r3, r7, #4384	; 0x1120
 8010c0e:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c12:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8010ed8 <G_q+0xe910>
 8010c16:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010c1a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010c1e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010c22:	f241 3378 	movw	r3, #4984	; 0x1378
 8010c26:	443b      	add	r3, r7
 8010c28:	ed83 7b00 	vstr	d7, [r3]
  if (t262.im == 0.0) {
 8010c2c:	f241 1330 	movw	r3, #4400	; 0x1130
 8010c30:	443b      	add	r3, r7
 8010c32:	ed93 7b02 	vldr	d7, [r3, #8]
 8010c36:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c3e:	d117      	bne.n	8010c70 <G_q+0xe6a8>
    t13_im = t262.re / 2.0;
 8010c40:	f241 1330 	movw	r3, #4400	; 0x1130
 8010c44:	443b      	add	r3, r7
 8010c46:	ed93 6b00 	vldr	d6, [r3]
 8010c4a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010c4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010c52:	f241 3370 	movw	r3, #4976	; 0x1370
 8010c56:	443b      	add	r3, r7
 8010c58:	ed83 7b00 	vstr	d7, [r3]
    t16_re = 0.0;
 8010c5c:	f04f 0300 	mov.w	r3, #0
 8010c60:	f04f 0400 	mov.w	r4, #0
 8010c64:	f241 3268 	movw	r2, #4968	; 0x1368
 8010c68:	443a      	add	r2, r7
 8010c6a:	e9c2 3400 	strd	r3, r4, [r2]
 8010c6e:	e03d      	b.n	8010cec <G_q+0xe724>
  } else if (t262.re == 0.0) {
 8010c70:	f241 1330 	movw	r3, #4400	; 0x1130
 8010c74:	443b      	add	r3, r7
 8010c76:	ed93 7b00 	vldr	d7, [r3]
 8010c7a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010c7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c82:	d117      	bne.n	8010cb4 <G_q+0xe6ec>
    t13_im = 0.0;
 8010c84:	f04f 0300 	mov.w	r3, #0
 8010c88:	f04f 0400 	mov.w	r4, #0
 8010c8c:	f241 3270 	movw	r2, #4976	; 0x1370
 8010c90:	443a      	add	r2, r7
 8010c92:	e9c2 3400 	strd	r3, r4, [r2]
    t16_re = t262.im / 2.0;
 8010c96:	f241 1330 	movw	r3, #4400	; 0x1130
 8010c9a:	443b      	add	r3, r7
 8010c9c:	ed93 6b02 	vldr	d6, [r3, #8]
 8010ca0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010ca4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ca8:	f241 3368 	movw	r3, #4968	; 0x1368
 8010cac:	443b      	add	r3, r7
 8010cae:	ed83 7b00 	vstr	d7, [r3]
 8010cb2:	e01b      	b.n	8010cec <G_q+0xe724>
  } else {
    t13_im = t262.re / 2.0;
 8010cb4:	f241 1330 	movw	r3, #4400	; 0x1130
 8010cb8:	443b      	add	r3, r7
 8010cba:	ed93 6b00 	vldr	d6, [r3]
 8010cbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010cc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010cc6:	f241 3370 	movw	r3, #4976	; 0x1370
 8010cca:	443b      	add	r3, r7
 8010ccc:	ed83 7b00 	vstr	d7, [r3]
    t16_re = t262.im / 2.0;
 8010cd0:	f241 1330 	movw	r3, #4400	; 0x1130
 8010cd4:	443b      	add	r3, r7
 8010cd6:	ed93 6b02 	vldr	d6, [r3, #8]
 8010cda:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010cde:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010ce2:	f241 3368 	movw	r3, #4968	; 0x1368
 8010ce6:	443b      	add	r3, r7
 8010ce8:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t263.im == 0.0) {
 8010cec:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010cf0:	ed93 7b02 	vldr	d7, [r3, #8]
 8010cf4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cfc:	d116      	bne.n	8010d2c <G_q+0xe764>
    t34_re = t263.re / 2.0;
 8010cfe:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010d02:	ed93 6b00 	vldr	d6, [r3]
 8010d06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d0e:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010d12:	443b      	add	r3, r7
 8010d14:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010d18:	f04f 0300 	mov.w	r3, #0
 8010d1c:	f04f 0400 	mov.w	r4, #0
 8010d20:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010d24:	443a      	add	r2, r7
 8010d26:	e9c2 3400 	strd	r3, r4, [r2]
 8010d2a:	e039      	b.n	8010da0 <G_q+0xe7d8>
  } else if (t263.re == 0.0) {
 8010d2c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010d30:	ed93 7b00 	vldr	d7, [r3]
 8010d34:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010d38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d3c:	d116      	bne.n	8010d6c <G_q+0xe7a4>
    t34_re = 0.0;
 8010d3e:	f04f 0300 	mov.w	r3, #0
 8010d42:	f04f 0400 	mov.w	r4, #0
 8010d46:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010d4a:	443a      	add	r2, r7
 8010d4c:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t263.im / 2.0;
 8010d50:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010d54:	ed93 6b02 	vldr	d6, [r3, #8]
 8010d58:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d5c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d60:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010d64:	443b      	add	r3, r7
 8010d66:	ed83 7b00 	vstr	d7, [r3]
 8010d6a:	e019      	b.n	8010da0 <G_q+0xe7d8>
  } else {
    t34_re = t263.re / 2.0;
 8010d6c:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010d70:	ed93 6b00 	vldr	d6, [r3]
 8010d74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d7c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010d80:	443b      	add	r3, r7
 8010d82:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t263.im / 2.0;
 8010d86:	f507 538a 	add.w	r3, r7, #4416	; 0x1140
 8010d8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8010d8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010d92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010d96:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010d9a:	443b      	add	r3, r7
 8010d9c:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_im = (t260.re * 0.0 - t260.im * 0.5) - (t261.re * 0.0 - t261.im * 0.5);
 8010da0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010da4:	ed93 7b00 	vldr	d7, [r3]
 8010da8:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8010ed8 <G_q+0xe910>
 8010dac:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010db0:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010db4:	ed93 7b02 	vldr	d7, [r3, #8]
 8010db8:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010dbc:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010dc0:	ee36 6b47 	vsub.f64	d6, d6, d7
 8010dc4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010dc8:	ed93 7b00 	vldr	d7, [r3]
 8010dcc:	ed9f 5b42 	vldr	d5, [pc, #264]	; 8010ed8 <G_q+0xe910>
 8010dd0:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010dd4:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010dd8:	ed93 7b02 	vldr	d7, [r3, #8]
 8010ddc:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8010de0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010de4:	ee35 7b47 	vsub.f64	d7, d5, d7
 8010de8:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010dec:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8010df0:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t260.re * 0.5 + t260.im * 0.0) - (t261.re * 0.5 + t261.im * 0.0);
 8010df4:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010df8:	ed93 7b00 	vldr	d7, [r3]
 8010dfc:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8010e00:	ee27 6b06 	vmul.f64	d6, d7, d6
 8010e04:	f507 6317 	add.w	r3, r7, #2416	; 0x970
 8010e08:	ed93 7b02 	vldr	d7, [r3, #8]
 8010e0c:	ed9f 5b32 	vldr	d5, [pc, #200]	; 8010ed8 <G_q+0xe910>
 8010e10:	ee27 7b05 	vmul.f64	d7, d7, d5
 8010e14:	ee36 6b07 	vadd.f64	d6, d6, d7
 8010e18:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010e1c:	ed93 7b00 	vldr	d7, [r3]
 8010e20:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8010e24:	ee27 5b05 	vmul.f64	d5, d7, d5
 8010e28:	f507 6318 	add.w	r3, r7, #2432	; 0x980
 8010e2c:	ed93 7b02 	vldr	d7, [r3, #8]
 8010e30:	ed9f 4b29 	vldr	d4, [pc, #164]	; 8010ed8 <G_q+0xe910>
 8010e34:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010e38:	ee35 7b07 	vadd.f64	d7, d5, d7
 8010e3c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8010e40:	f241 3348 	movw	r3, #4936	; 0x1348
 8010e44:	443b      	add	r3, r7
 8010e46:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t13_im + t34_re) + 7.498798913309288E-33;
 8010e4a:	f241 3370 	movw	r3, #4976	; 0x1370
 8010e4e:	443b      	add	r3, r7
 8010e50:	ed93 6b00 	vldr	d6, [r3]
 8010e54:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010e58:	443b      	add	r3, r7
 8010e5a:	ed93 7b00 	vldr	d7, [r3]
 8010e5e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010e62:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8010ee0 <G_q+0xe918>
 8010e66:	ee37 7b06 	vadd.f64	d7, d7, d6
 8010e6a:	f241 3370 	movw	r3, #4976	; 0x1370
 8010e6e:	443b      	add	r3, r7
 8010e70:	ed83 7b00 	vstr	d7, [r3]
  t16_re += t34_im;
 8010e74:	f241 3368 	movw	r3, #4968	; 0x1368
 8010e78:	443b      	add	r3, r7
 8010e7a:	ed93 6b00 	vldr	d6, [r3]
 8010e7e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010e82:	443b      	add	r3, r7
 8010e84:	ed93 7b00 	vldr	d7, [r3]
 8010e88:	ee36 7b07 	vadd.f64	d7, d6, d7
 8010e8c:	f241 3368 	movw	r3, #4968	; 0x1368
 8010e90:	443b      	add	r3, r7
 8010e92:	ed83 7b00 	vstr	d7, [r3]
  if (t254.im == 0.0) {
 8010e96:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010e9a:	ed93 7b02 	vldr	d7, [r3, #8]
 8010e9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ea2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ea6:	d11f      	bne.n	8010ee8 <G_q+0xe920>
    t12_re = t254.re / 2.0;
 8010ea8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010eac:	ed93 6b00 	vldr	d6, [r3]
 8010eb0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010eb4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010eb8:	f241 3388 	movw	r3, #5000	; 0x1388
 8010ebc:	443b      	add	r3, r7
 8010ebe:	ed83 7b00 	vstr	d7, [r3]
    t12_im = 0.0;
 8010ec2:	f04f 0300 	mov.w	r3, #0
 8010ec6:	f04f 0400 	mov.w	r4, #0
 8010eca:	f507 529c 	add.w	r2, r7, #4992	; 0x1380
 8010ece:	e9c2 3400 	strd	r3, r4, [r2]
 8010ed2:	e041      	b.n	8010f58 <G_q+0xe990>
 8010ed4:	f3af 8000 	nop.w
	...
 8010ee0:	858a5d48 	.word	0x858a5d48
 8010ee4:	394377ce 	.word	0x394377ce
  } else if (t254.re == 0.0) {
 8010ee8:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010eec:	ed93 7b00 	vldr	d7, [r3]
 8010ef0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ef8:	d115      	bne.n	8010f26 <G_q+0xe95e>
    t12_re = 0.0;
 8010efa:	f04f 0300 	mov.w	r3, #0
 8010efe:	f04f 0400 	mov.w	r4, #0
 8010f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8010f06:	443a      	add	r2, r7
 8010f08:	e9c2 3400 	strd	r3, r4, [r2]
    t12_im = t254.im / 2.0;
 8010f0c:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010f10:	ed93 6b02 	vldr	d6, [r3, #8]
 8010f14:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f18:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f1c:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010f20:	ed83 7b00 	vstr	d7, [r3]
 8010f24:	e018      	b.n	8010f58 <G_q+0xe990>
  } else {
    t12_re = t254.re / 2.0;
 8010f26:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010f2a:	ed93 6b00 	vldr	d6, [r3]
 8010f2e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f32:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f36:	f241 3388 	movw	r3, #5000	; 0x1388
 8010f3a:	443b      	add	r3, r7
 8010f3c:	ed83 7b00 	vstr	d7, [r3]
    t12_im = t254.im / 2.0;
 8010f40:	f507 7354 	add.w	r3, r7, #848	; 0x350
 8010f44:	ed93 6b02 	vldr	d6, [r3, #8]
 8010f48:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f50:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8010f54:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t255.im == 0.0) {
 8010f58:	4b25      	ldr	r3, [pc, #148]	; (8010ff0 <G_q+0xea28>)
 8010f5a:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010f5e:	443a      	add	r2, r7
 8010f60:	4413      	add	r3, r2
 8010f62:	ed93 7b02 	vldr	d7, [r3, #8]
 8010f66:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f6e:	d119      	bne.n	8010fa4 <G_q+0xe9dc>
    t34_re = t255.re / 2.0;
 8010f70:	4b1f      	ldr	r3, [pc, #124]	; (8010ff0 <G_q+0xea28>)
 8010f72:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010f76:	443a      	add	r2, r7
 8010f78:	4413      	add	r3, r2
 8010f7a:	ed93 6b00 	vldr	d6, [r3]
 8010f7e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010f82:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010f86:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8010f8a:	443b      	add	r3, r7
 8010f8c:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8010f90:	f04f 0300 	mov.w	r3, #0
 8010f94:	f04f 0400 	mov.w	r4, #0
 8010f98:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8010f9c:	443a      	add	r2, r7
 8010f9e:	e9c2 3400 	strd	r3, r4, [r2]
 8010fa2:	e047      	b.n	8011034 <G_q+0xea6c>
  } else if (t255.re == 0.0) {
 8010fa4:	4b12      	ldr	r3, [pc, #72]	; (8010ff0 <G_q+0xea28>)
 8010fa6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010faa:	443a      	add	r2, r7
 8010fac:	4413      	add	r3, r2
 8010fae:	ed93 7b00 	vldr	d7, [r3]
 8010fb2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fba:	d11b      	bne.n	8010ff4 <G_q+0xea2c>
    t34_re = 0.0;
 8010fbc:	f04f 0300 	mov.w	r3, #0
 8010fc0:	f04f 0400 	mov.w	r4, #0
 8010fc4:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8010fc8:	443a      	add	r2, r7
 8010fca:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t255.im / 2.0;
 8010fce:	4b08      	ldr	r3, [pc, #32]	; (8010ff0 <G_q+0xea28>)
 8010fd0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010fd4:	443a      	add	r2, r7
 8010fd6:	4413      	add	r3, r2
 8010fd8:	ed93 6b02 	vldr	d6, [r3, #8]
 8010fdc:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8010fe0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8010fe4:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8010fe8:	443b      	add	r3, r7
 8010fea:	ed83 7b00 	vstr	d7, [r3]
 8010fee:	e021      	b.n	8011034 <G_q+0xea6c>
 8010ff0:	ffffef90 	.word	0xffffef90
  } else {
    t34_re = t255.re / 2.0;
 8010ff4:	4be4      	ldr	r3, [pc, #912]	; (8011388 <G_q+0xedc0>)
 8010ff6:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8010ffa:	443a      	add	r2, r7
 8010ffc:	4413      	add	r3, r2
 8010ffe:	ed93 6b00 	vldr	d6, [r3]
 8011002:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011006:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801100a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801100e:	443b      	add	r3, r7
 8011010:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t255.im / 2.0;
 8011014:	4bdc      	ldr	r3, [pc, #880]	; (8011388 <G_q+0xedc0>)
 8011016:	f241 32d0 	movw	r2, #5072	; 0x13d0
 801101a:	443a      	add	r2, r7
 801101c:	4413      	add	r3, r2
 801101e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011022:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011026:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801102a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801102e:	443b      	add	r3, r7
 8011030:	ed83 7b00 	vstr	d7, [r3]
  }

  t23_re = (t20_im * t3_im - t85_im * t13_re) - (t16_im * t13_im - t20_re *
 8011034:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011038:	ed93 6b00 	vldr	d6, [r3]
 801103c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011040:	443b      	add	r3, r7
 8011042:	ed93 7b00 	vldr	d7, [r3]
 8011046:	ee26 6b07 	vmul.f64	d6, d6, d7
 801104a:	f241 3318 	movw	r3, #4888	; 0x1318
 801104e:	443b      	add	r3, r7
 8011050:	ed93 5b00 	vldr	d5, [r3]
 8011054:	f241 3378 	movw	r3, #4984	; 0x1378
 8011058:	443b      	add	r3, r7
 801105a:	ed93 7b00 	vldr	d7, [r3]
 801105e:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011062:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011066:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801106a:	ed93 5b00 	vldr	d5, [r3]
 801106e:	f241 3370 	movw	r3, #4976	; 0x1370
 8011072:	443b      	add	r3, r7
 8011074:	ed93 7b00 	vldr	d7, [r3]
 8011078:	ee25 5b07 	vmul.f64	d5, d5, d7
 801107c:	f241 3348 	movw	r3, #4936	; 0x1348
 8011080:	443b      	add	r3, r7
 8011082:	ed93 4b00 	vldr	d4, [r3]
 8011086:	f241 3368 	movw	r3, #4968	; 0x1368
 801108a:	443b      	add	r3, r7
 801108c:	ed93 7b00 	vldr	d7, [r3]
 8011090:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011094:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011098:	ee36 7b47 	vsub.f64	d7, d6, d7
 801109c:	f241 3330 	movw	r3, #4912	; 0x1330
 80110a0:	443b      	add	r3, r7
 80110a2:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  t85_im = (t20_im * t13_re + t85_im * t3_im) - (t16_im * t16_re + t20_re *
 80110a6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80110aa:	ed93 6b00 	vldr	d6, [r3]
 80110ae:	f241 3378 	movw	r3, #4984	; 0x1378
 80110b2:	443b      	add	r3, r7
 80110b4:	ed93 7b00 	vldr	d7, [r3]
 80110b8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80110bc:	f241 3318 	movw	r3, #4888	; 0x1318
 80110c0:	443b      	add	r3, r7
 80110c2:	ed93 5b00 	vldr	d5, [r3]
 80110c6:	f241 3310 	movw	r3, #4880	; 0x1310
 80110ca:	443b      	add	r3, r7
 80110cc:	ed93 7b00 	vldr	d7, [r3]
 80110d0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80110d4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80110d8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80110dc:	ed93 5b00 	vldr	d5, [r3]
 80110e0:	f241 3368 	movw	r3, #4968	; 0x1368
 80110e4:	443b      	add	r3, r7
 80110e6:	ed93 7b00 	vldr	d7, [r3]
 80110ea:	ee25 5b07 	vmul.f64	d5, d5, d7
 80110ee:	f241 3348 	movw	r3, #4936	; 0x1348
 80110f2:	443b      	add	r3, r7
 80110f4:	ed93 4b00 	vldr	d4, [r3]
 80110f8:	f241 3370 	movw	r3, #4976	; 0x1370
 80110fc:	443b      	add	r3, r7
 80110fe:	ed93 7b00 	vldr	d7, [r3]
 8011102:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011106:	ee35 7b07 	vadd.f64	d7, d5, d7
 801110a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801110e:	f241 3318 	movw	r3, #4888	; 0x1318
 8011112:	443b      	add	r3, r7
 8011114:	ed83 7b00 	vstr	d7, [r3]
    t13_im);
  t12_re += t34_re;
 8011118:	f241 3388 	movw	r3, #5000	; 0x1388
 801111c:	443b      	add	r3, r7
 801111e:	ed93 6b00 	vldr	d6, [r3]
 8011122:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011126:	443b      	add	r3, r7
 8011128:	ed93 7b00 	vldr	d7, [r3]
 801112c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011130:	f241 3388 	movw	r3, #5000	; 0x1388
 8011134:	443b      	add	r3, r7
 8011136:	ed83 7b00 	vstr	d7, [r3]
  t12_im += t34_im;
 801113a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801113e:	ed93 6b00 	vldr	d6, [r3]
 8011142:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011146:	443b      	add	r3, r7
 8011148:	ed93 7b00 	vldr	d7, [r3]
 801114c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011150:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011154:	ed83 7b00 	vstr	d7, [r3]
  t70_im += t76_re;
 8011158:	f241 23c8 	movw	r3, #4808	; 0x12c8
 801115c:	443b      	add	r3, r7
 801115e:	f241 21c8 	movw	r1, #4808	; 0x12c8
 8011162:	4439      	add	r1, r7
 8011164:	f241 22a8 	movw	r2, #4776	; 0x12a8
 8011168:	443a      	add	r2, r7
 801116a:	ed91 6b00 	vldr	d6, [r1]
 801116e:	ed92 7b00 	vldr	d7, [r2]
 8011172:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011176:	ed83 7b00 	vstr	d7, [r3]
  t43_im += t72_re;
 801117a:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 801117e:	f241 22f8 	movw	r2, #4856	; 0x12f8
 8011182:	443a      	add	r2, r7
 8011184:	ed92 6b00 	vldr	d6, [r2]
 8011188:	ed93 7b00 	vldr	d7, [r3]
 801118c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011190:	f241 23f8 	movw	r3, #4856	; 0x12f8
 8011194:	443b      	add	r3, r7
 8011196:	ed83 7b00 	vstr	d7, [r3]
  t55_im = (t58_im * t60_re - t70_re * b_t10_re) - (t23_re * t12_re - t85_im *
 801119a:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 801119e:	f241 2350 	movw	r3, #4688	; 0x1250
 80111a2:	443b      	add	r3, r7
 80111a4:	ed92 6b00 	vldr	d6, [r2]
 80111a8:	ed93 7b00 	vldr	d7, [r3]
 80111ac:	ee26 6b07 	vmul.f64	d6, d6, d7
 80111b0:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80111b4:	443b      	add	r3, r7
 80111b6:	ed93 5b00 	vldr	d5, [r3]
 80111ba:	f241 3338 	movw	r3, #4920	; 0x1338
 80111be:	443b      	add	r3, r7
 80111c0:	ed93 7b00 	vldr	d7, [r3]
 80111c4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80111c8:	ee36 6b47 	vsub.f64	d6, d6, d7
 80111cc:	f241 3330 	movw	r3, #4912	; 0x1330
 80111d0:	443b      	add	r3, r7
 80111d2:	ed93 5b00 	vldr	d5, [r3]
 80111d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80111da:	443b      	add	r3, r7
 80111dc:	ed93 7b00 	vldr	d7, [r3]
 80111e0:	ee25 5b07 	vmul.f64	d5, d5, d7
 80111e4:	f241 3318 	movw	r3, #4888	; 0x1318
 80111e8:	443b      	add	r3, r7
 80111ea:	ed93 4b00 	vldr	d4, [r3]
 80111ee:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80111f2:	ed93 7b00 	vldr	d7, [r3]
 80111f6:	ee24 7b07 	vmul.f64	d7, d4, d7
 80111fa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80111fe:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011202:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8011206:	443b      	add	r3, r7
 8011208:	ed83 7b00 	vstr	d7, [r3]
    t12_im);
  t70_re = (t58_im * b_t10_re + t70_re * t60_re) - (t23_re * t12_im + t85_im *
 801120c:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8011210:	ed93 6b00 	vldr	d6, [r3]
 8011214:	f241 3338 	movw	r3, #4920	; 0x1338
 8011218:	443b      	add	r3, r7
 801121a:	ed93 7b00 	vldr	d7, [r3]
 801121e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011222:	f241 22d0 	movw	r2, #4816	; 0x12d0
 8011226:	443a      	add	r2, r7
 8011228:	f241 2350 	movw	r3, #4688	; 0x1250
 801122c:	443b      	add	r3, r7
 801122e:	ed92 5b00 	vldr	d5, [r2]
 8011232:	ed93 7b00 	vldr	d7, [r3]
 8011236:	ee25 7b07 	vmul.f64	d7, d5, d7
 801123a:	ee36 6b07 	vadd.f64	d6, d6, d7
 801123e:	f241 3330 	movw	r3, #4912	; 0x1330
 8011242:	443b      	add	r3, r7
 8011244:	ed93 5b00 	vldr	d5, [r3]
 8011248:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801124c:	ed93 7b00 	vldr	d7, [r3]
 8011250:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011254:	f241 3318 	movw	r3, #4888	; 0x1318
 8011258:	443b      	add	r3, r7
 801125a:	ed93 4b00 	vldr	d4, [r3]
 801125e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011262:	443b      	add	r3, r7
 8011264:	ed93 7b00 	vldr	d7, [r3]
 8011268:	ee24 7b07 	vmul.f64	d7, d4, d7
 801126c:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011270:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8011274:	443b      	add	r3, r7
 8011276:	ee36 7b47 	vsub.f64	d7, d6, d7
 801127a:	ed83 7b00 	vstr	d7, [r3]
    t12_re);
  t72_re = (t280.re * 0.0 - t280.im * 0.5) - (t281.re * 0.0 - t281.im * 0.5);
 801127e:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011282:	443b      	add	r3, r7
 8011284:	ed93 7b00 	vldr	d7, [r3]
 8011288:	ed9f 6b3d 	vldr	d6, [pc, #244]	; 8011380 <G_q+0xedb8>
 801128c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011290:	f241 13b0 	movw	r3, #4528	; 0x11b0
 8011294:	443b      	add	r3, r7
 8011296:	ed93 7b02 	vldr	d7, [r3, #8]
 801129a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801129e:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112a2:	ee36 6b47 	vsub.f64	d6, d6, d7
 80112a6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80112aa:	ed93 7b00 	vldr	d7, [r3]
 80112ae:	ed9f 5b34 	vldr	d5, [pc, #208]	; 8011380 <G_q+0xedb8>
 80112b2:	ee27 5b05 	vmul.f64	d5, d7, d5
 80112b6:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 80112ba:	ed93 7b02 	vldr	d7, [r3, #8]
 80112be:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80112c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80112c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80112ca:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 80112ce:	ee36 7b47 	vsub.f64	d7, d6, d7
 80112d2:	ed83 7b00 	vstr	d7, [r3]
  t74_re = (t280.re * 0.5 + t280.im * 0.0) - (t281.re * 0.5 + t281.im * 0.0);
 80112d6:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80112da:	443b      	add	r3, r7
 80112dc:	ed93 7b00 	vldr	d7, [r3]
 80112e0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80112e4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80112e8:	f241 13b0 	movw	r3, #4528	; 0x11b0
 80112ec:	443b      	add	r3, r7
 80112ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80112f2:	ed9f 5b23 	vldr	d5, [pc, #140]	; 8011380 <G_q+0xedb8>
 80112f6:	ee27 7b05 	vmul.f64	d7, d7, d5
 80112fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80112fe:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011302:	ed93 7b00 	vldr	d7, [r3]
 8011306:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801130a:	ee27 5b05 	vmul.f64	d5, d7, d5
 801130e:	f507 538e 	add.w	r3, r7, #4544	; 0x11c0
 8011312:	ed93 7b02 	vldr	d7, [r3, #8]
 8011316:	ed9f 4b1a 	vldr	d4, [pc, #104]	; 8011380 <G_q+0xedb8>
 801131a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801131e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011322:	f241 23b8 	movw	r3, #4792	; 0x12b8
 8011326:	443b      	add	r3, r7
 8011328:	ee36 7b47 	vsub.f64	d7, d6, d7
 801132c:	ed83 7b00 	vstr	d7, [r3]
  t74_im = (t282.re * 0.0 - t282.im * 0.5) - (t283.re * 0.0 - t283.im * 0.5);
 8011330:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011334:	ed93 7b00 	vldr	d7, [r3]
 8011338:	ed9f 6b11 	vldr	d6, [pc, #68]	; 8011380 <G_q+0xedb8>
 801133c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011340:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011344:	ed93 7b02 	vldr	d7, [r3, #8]
 8011348:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801134c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011350:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011354:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011358:	ed93 7b00 	vldr	d7, [r3]
 801135c:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8011380 <G_q+0xedb8>
 8011360:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011364:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8011368:	ed93 7b02 	vldr	d7, [r3, #8]
 801136c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011370:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011374:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011378:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801137c:	443b      	add	r3, r7
 801137e:	e005      	b.n	801138c <G_q+0xedc4>
	...
 8011388:	ffffef90 	.word	0xffffef90
 801138c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011390:	ed83 7b00 	vstr	d7, [r3]
  t55_re = (t282.re * 0.5 + t282.im * 0.0) - (t283.re * 0.5 + t283.im * 0.0);
 8011394:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8011398:	ed93 7b00 	vldr	d7, [r3]
 801139c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80113a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80113a4:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80113a8:	ed93 7b02 	vldr	d7, [r3, #8]
 80113ac:	ed9f 5bb6 	vldr	d5, [pc, #728]	; 8011688 <G_q+0xf0c0>
 80113b0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80113b4:	ee36 6b07 	vadd.f64	d6, d6, d7
 80113b8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80113bc:	ed93 7b00 	vldr	d7, [r3]
 80113c0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80113c4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80113c8:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 80113cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80113d0:	ed9f 4bad 	vldr	d4, [pc, #692]	; 8011688 <G_q+0xf0c0>
 80113d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80113d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80113dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80113e0:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 80113e4:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 80113e8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80113ec:	ed93 7b00 	vldr	d7, [r3]
 80113f0:	ed9f 6ba5 	vldr	d6, [pc, #660]	; 8011688 <G_q+0xf0c0>
 80113f4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80113f8:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 80113fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8011400:	ed9f 5ba5 	vldr	d5, [pc, #660]	; 8011698 <G_q+0xf0d0>
 8011404:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011408:	ee36 6b47 	vsub.f64	d6, d6, d7
 801140c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011410:	ed93 7b00 	vldr	d7, [r3]
 8011414:	ed9f 5b9c 	vldr	d5, [pc, #624]	; 8011688 <G_q+0xf0c0>
 8011418:	ee27 5b05 	vmul.f64	d5, d7, d5
    t295.im * 3.061616997868383E-17);
 801141c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011420:	ed93 7b02 	vldr	d7, [r3, #8]
 8011424:	ed9f 4b9c 	vldr	d4, [pc, #624]	; 8011698 <G_q+0xf0d0>
 8011428:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t294.re * 0.0 - t294.im * 3.061616997868383E-17) - (t295.re * 0.0 -
 801142c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011430:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011434:	f241 3388 	movw	r3, #5000	; 0x1388
 8011438:	443b      	add	r3, r7
 801143a:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 801143e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011442:	ed93 7b00 	vldr	d7, [r3]
 8011446:	ed9f 6b94 	vldr	d6, [pc, #592]	; 8011698 <G_q+0xf0d0>
 801144a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801144e:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8011452:	ed93 7b02 	vldr	d7, [r3, #8]
 8011456:	ed9f 5b8c 	vldr	d5, [pc, #560]	; 8011688 <G_q+0xf0c0>
 801145a:	ee27 7b05 	vmul.f64	d7, d7, d5
 801145e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011462:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011466:	ed93 7b00 	vldr	d7, [r3]
 801146a:	ed9f 5b8b 	vldr	d5, [pc, #556]	; 8011698 <G_q+0xf0d0>
 801146e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t295.im * 0.0);
 8011472:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8011476:	ed93 7b02 	vldr	d7, [r3, #8]
 801147a:	ed9f 4b83 	vldr	d4, [pc, #524]	; 8011688 <G_q+0xf0c0>
 801147e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011482:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t294.re * 3.061616997868383E-17 + t294.im * 0.0) - (t295.re *
 8011486:	ee36 7b47 	vsub.f64	d7, d6, d7
 801148a:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 801148e:	ed83 7b00 	vstr	d7, [r3]
  t23_re = (t292.re * 0.0 - t292.im * 0.5) - (t293.re * 0.0 - t293.im * 0.5);
 8011492:	f241 2310 	movw	r3, #4624	; 0x1210
 8011496:	443b      	add	r3, r7
 8011498:	ed93 7b00 	vldr	d7, [r3]
 801149c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011688 <G_q+0xf0c0>
 80114a0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80114a4:	f241 2310 	movw	r3, #4624	; 0x1210
 80114a8:	443b      	add	r3, r7
 80114aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80114ae:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80114b2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80114b6:	ee36 6b47 	vsub.f64	d6, d6, d7
 80114ba:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80114be:	ed93 7b00 	vldr	d7, [r3]
 80114c2:	ed9f 5b71 	vldr	d5, [pc, #452]	; 8011688 <G_q+0xf0c0>
 80114c6:	ee27 5b05 	vmul.f64	d5, d7, d5
 80114ca:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 80114ce:	ed93 7b02 	vldr	d7, [r3, #8]
 80114d2:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80114d6:	ee27 7b04 	vmul.f64	d7, d7, d4
 80114da:	ee35 7b47 	vsub.f64	d7, d5, d7
 80114de:	ee36 7b47 	vsub.f64	d7, d6, d7
 80114e2:	f241 3330 	movw	r3, #4912	; 0x1330
 80114e6:	443b      	add	r3, r7
 80114e8:	ed83 7b00 	vstr	d7, [r3]
  t3_im = (t292.re * 0.5 + t292.im * 0.0) - (t293.re * 0.5 + t293.im * 0.0);
 80114ec:	f241 2310 	movw	r3, #4624	; 0x1210
 80114f0:	443b      	add	r3, r7
 80114f2:	ed93 7b00 	vldr	d7, [r3]
 80114f6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80114fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80114fe:	f241 2310 	movw	r3, #4624	; 0x1210
 8011502:	443b      	add	r3, r7
 8011504:	ed93 7b02 	vldr	d7, [r3, #8]
 8011508:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8011688 <G_q+0xf0c0>
 801150c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011510:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011514:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011518:	ed93 7b00 	vldr	d7, [r3]
 801151c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011520:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011524:	f507 5391 	add.w	r3, r7, #4640	; 0x1220
 8011528:	ed93 7b02 	vldr	d7, [r3, #8]
 801152c:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8011688 <G_q+0xf0c0>
 8011530:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011534:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011538:	ee36 7b47 	vsub.f64	d7, d6, d7
 801153c:	f241 3310 	movw	r3, #4880	; 0x1310
 8011540:	443b      	add	r3, r7
 8011542:	ed83 7b00 	vstr	d7, [r3]
  if (t290.im == 0.0) {
 8011546:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801154a:	443b      	add	r3, r7
 801154c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011550:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011558:	d117      	bne.n	801158a <G_q+0xefc2>
    t13_re = t290.re / 2.0;
 801155a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801155e:	443b      	add	r3, r7
 8011560:	ed93 6b00 	vldr	d6, [r3]
 8011564:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011568:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801156c:	f241 3378 	movw	r3, #4984	; 0x1378
 8011570:	443b      	add	r3, r7
 8011572:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8011576:	f04f 0300 	mov.w	r3, #0
 801157a:	f04f 0400 	mov.w	r4, #0
 801157e:	f241 3270 	movw	r2, #4976	; 0x1370
 8011582:	443a      	add	r2, r7
 8011584:	e9c2 3400 	strd	r3, r4, [r2]
 8011588:	e03d      	b.n	8011606 <G_q+0xf03e>
  } else if (t290.re == 0.0) {
 801158a:	f241 13f0 	movw	r3, #4592	; 0x11f0
 801158e:	443b      	add	r3, r7
 8011590:	ed93 7b00 	vldr	d7, [r3]
 8011594:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801159c:	d117      	bne.n	80115ce <G_q+0xf006>
    t13_re = 0.0;
 801159e:	f04f 0300 	mov.w	r3, #0
 80115a2:	f04f 0400 	mov.w	r4, #0
 80115a6:	f241 3278 	movw	r2, #4984	; 0x1378
 80115aa:	443a      	add	r2, r7
 80115ac:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t290.im / 2.0;
 80115b0:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80115b4:	443b      	add	r3, r7
 80115b6:	ed93 6b02 	vldr	d6, [r3, #8]
 80115ba:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80115be:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80115c2:	f241 3370 	movw	r3, #4976	; 0x1370
 80115c6:	443b      	add	r3, r7
 80115c8:	ed83 7b00 	vstr	d7, [r3]
 80115cc:	e01b      	b.n	8011606 <G_q+0xf03e>
  } else {
    t13_re = t290.re / 2.0;
 80115ce:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80115d2:	443b      	add	r3, r7
 80115d4:	ed93 6b00 	vldr	d6, [r3]
 80115d8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80115dc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80115e0:	f241 3378 	movw	r3, #4984	; 0x1378
 80115e4:	443b      	add	r3, r7
 80115e6:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t290.im / 2.0;
 80115ea:	f241 13f0 	movw	r3, #4592	; 0x11f0
 80115ee:	443b      	add	r3, r7
 80115f0:	ed93 6b02 	vldr	d6, [r3, #8]
 80115f4:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80115f8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80115fc:	f241 3370 	movw	r3, #4976	; 0x1370
 8011600:	443b      	add	r3, r7
 8011602:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t291.im == 0.0) {
 8011606:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801160a:	ed93 7b02 	vldr	d7, [r3, #8]
 801160e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011616:	d116      	bne.n	8011646 <G_q+0xf07e>
    t34_re = t291.re / 2.0;
 8011618:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801161c:	ed93 6b00 	vldr	d6, [r3]
 8011620:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011624:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011628:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801162c:	443b      	add	r3, r7
 801162e:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011632:	f04f 0300 	mov.w	r3, #0
 8011636:	f04f 0400 	mov.w	r4, #0
 801163a:	f241 32b0 	movw	r2, #5040	; 0x13b0
 801163e:	443a      	add	r2, r7
 8011640:	e9c2 3400 	strd	r3, r4, [r2]
 8011644:	e046      	b.n	80116d4 <G_q+0xf10c>
  } else if (t291.re == 0.0) {
 8011646:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801164a:	ed93 7b00 	vldr	d7, [r3]
 801164e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011656:	d123      	bne.n	80116a0 <G_q+0xf0d8>
    t34_re = 0.0;
 8011658:	f04f 0300 	mov.w	r3, #0
 801165c:	f04f 0400 	mov.w	r4, #0
 8011660:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011664:	443a      	add	r2, r7
 8011666:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t291.im / 2.0;
 801166a:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 801166e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011672:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011676:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801167a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801167e:	443b      	add	r3, r7
 8011680:	ed83 7b00 	vstr	d7, [r3]
 8011684:	e026      	b.n	80116d4 <G_q+0xf10c>
 8011686:	bf00      	nop
	...
 8011690:	858a5d48 	.word	0x858a5d48
 8011694:	394377ce 	.word	0x394377ce
 8011698:	33145c07 	.word	0x33145c07
 801169c:	3c81a626 	.word	0x3c81a626
  } else {
    t34_re = t291.re / 2.0;
 80116a0:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80116a4:	ed93 6b00 	vldr	d6, [r3]
 80116a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80116ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80116b0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80116b4:	443b      	add	r3, r7
 80116b6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t291.im / 2.0;
 80116ba:	f507 5390 	add.w	r3, r7, #4608	; 0x1200
 80116be:	ed93 6b02 	vldr	d6, [r3, #8]
 80116c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80116c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80116ca:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80116ce:	443b      	add	r3, r7
 80116d0:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re = t288.re * 3.061616997868383E-17 + t289.re * 3.061616997868383E-17;
 80116d4:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80116d8:	ed93 7b00 	vldr	d7, [r3]
 80116dc:	ed1f 6b12 	vldr	d6, [pc, #-72]	; 8011698 <G_q+0xf0d0>
 80116e0:	ee27 6b06 	vmul.f64	d6, d7, d6
 80116e4:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 80116e8:	ed93 7b00 	vldr	d7, [r3]
 80116ec:	ed1f 5b16 	vldr	d5, [pc, #-88]	; 8011698 <G_q+0xf0d0>
 80116f0:	ee27 7b05 	vmul.f64	d7, d7, d5
 80116f4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80116f8:	f241 3368 	movw	r3, #4968	; 0x1368
 80116fc:	443b      	add	r3, r7
 80116fe:	ed83 7b00 	vstr	d7, [r3]
  t16_im = t288.im * 3.061616997868383E-17 + t289.im * 3.061616997868383E-17;
 8011702:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 8011706:	ed93 7b02 	vldr	d7, [r3, #8]
 801170a:	ed1f 6b1d 	vldr	d6, [pc, #-116]	; 8011698 <G_q+0xf0d0>
 801170e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011712:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8011716:	ed93 7b02 	vldr	d7, [r3, #8]
 801171a:	ed1f 5b21 	vldr	d5, [pc, #-132]	; 8011698 <G_q+0xf0d0>
 801171e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011722:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011726:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 801172a:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t13_re + t34_re) + 7.498798913309288E-33;
 801172e:	f241 3378 	movw	r3, #4984	; 0x1378
 8011732:	443b      	add	r3, r7
 8011734:	ed93 6b00 	vldr	d6, [r3]
 8011738:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801173c:	443b      	add	r3, r7
 801173e:	ed93 7b00 	vldr	d7, [r3]
 8011742:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011746:	ed1f 6b2e 	vldr	d6, [pc, #-184]	; 8011690 <G_q+0xf0c8>
 801174a:	ee37 7b06 	vadd.f64	d7, d7, d6
 801174e:	f241 3378 	movw	r3, #4984	; 0x1378
 8011752:	443b      	add	r3, r7
 8011754:	ed83 7b00 	vstr	d7, [r3]
  t13_im += t34_im;
 8011758:	f241 3370 	movw	r3, #4976	; 0x1370
 801175c:	443b      	add	r3, r7
 801175e:	ed93 6b00 	vldr	d6, [r3]
 8011762:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011766:	443b      	add	r3, r7
 8011768:	ed93 7b00 	vldr	d7, [r3]
 801176c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011770:	f241 3370 	movw	r3, #4976	; 0x1370
 8011774:	443b      	add	r3, r7
 8011776:	ed83 7b00 	vstr	d7, [r3]
  t58_im = t284.re * 3.061616997868383E-17 + t285.re * 3.061616997868383E-17;
 801177a:	f507 7364 	add.w	r3, r7, #912	; 0x390
 801177e:	ed93 7b00 	vldr	d7, [r3]
 8011782:	ed1f 6b3b 	vldr	d6, [pc, #-236]	; 8011698 <G_q+0xf0d0>
 8011786:	ee27 6b06 	vmul.f64	d6, d7, d6
 801178a:	4bb7      	ldr	r3, [pc, #732]	; (8011a68 <G_q+0xf4a0>)
 801178c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011790:	443a      	add	r2, r7
 8011792:	4413      	add	r3, r2
 8011794:	ed93 7b00 	vldr	d7, [r3]
 8011798:	ed9f 5baf 	vldr	d5, [pc, #700]	; 8011a58 <G_q+0xf490>
 801179c:	ee27 7b05 	vmul.f64	d7, d7, d5
 80117a0:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 80117a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80117a8:	ed83 7b00 	vstr	d7, [r3]
  t60_re = t284.im * 3.061616997868383E-17 + t285.im * 3.061616997868383E-17;
 80117ac:	f507 7364 	add.w	r3, r7, #912	; 0x390
 80117b0:	ed93 7b02 	vldr	d7, [r3, #8]
 80117b4:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 8011a58 <G_q+0xf490>
 80117b8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80117bc:	4baa      	ldr	r3, [pc, #680]	; (8011a68 <G_q+0xf4a0>)
 80117be:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80117c2:	443a      	add	r2, r7
 80117c4:	4413      	add	r3, r2
 80117c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80117ca:	ed9f 5ba3 	vldr	d5, [pc, #652]	; 8011a58 <G_q+0xf490>
 80117ce:	ee27 7b05 	vmul.f64	d7, d7, d5
 80117d2:	f241 2350 	movw	r3, #4688	; 0x1250
 80117d6:	443b      	add	r3, r7
 80117d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80117dc:	ed83 7b00 	vstr	d7, [r3]
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 80117e0:	f241 13d0 	movw	r3, #4560	; 0x11d0
 80117e4:	443b      	add	r3, r7
 80117e6:	ed93 7b00 	vldr	d7, [r3]
 80117ea:	ed9f 6b9d 	vldr	d6, [pc, #628]	; 8011a60 <G_q+0xf498>
 80117ee:	ee27 6b06 	vmul.f64	d6, d7, d6
 80117f2:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 80117f6:	ed93 7b00 	vldr	d7, [r3]
 80117fa:	ed9f 5b99 	vldr	d5, [pc, #612]	; 8011a60 <G_q+0xf498>
 80117fe:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011802:	ee36 6b07 	vadd.f64	d6, d6, d7
             + (t12_re * t23_re - t12_im * t3_im)) + (t16_re * t13_re - t16_im *
 8011806:	f241 3388 	movw	r3, #5000	; 0x1388
 801180a:	443b      	add	r3, r7
 801180c:	ed93 5b00 	vldr	d5, [r3]
 8011810:	f241 3330 	movw	r3, #4912	; 0x1330
 8011814:	443b      	add	r3, r7
 8011816:	ed93 7b00 	vldr	d7, [r3]
 801181a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801181e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011822:	ed93 4b00 	vldr	d4, [r3]
 8011826:	f241 3310 	movw	r3, #4880	; 0x1310
 801182a:	443b      	add	r3, r7
 801182c:	ed93 7b00 	vldr	d7, [r3]
 8011830:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011834:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011838:	ee36 6b07 	vadd.f64	d6, d6, d7
 801183c:	f241 3368 	movw	r3, #4968	; 0x1368
 8011840:	443b      	add	r3, r7
 8011842:	ed93 5b00 	vldr	d5, [r3]
 8011846:	f241 3378 	movw	r3, #4984	; 0x1378
 801184a:	443b      	add	r3, r7
 801184c:	ed93 7b00 	vldr	d7, [r3]
 8011850:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011854:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011858:	ed93 4b00 	vldr	d4, [r3]
 801185c:	f241 3370 	movw	r3, #4976	; 0x1370
 8011860:	443b      	add	r3, r7
 8011862:	ed93 7b00 	vldr	d7, [r3]
 8011866:	ee24 7b07 	vmul.f64	d7, d4, d7
 801186a:	ee35 7b47 	vsub.f64	d7, d5, d7
 801186e:	ee36 7b07 	vadd.f64	d7, d6, d7
  t76_re = (((t286.re * 6.123233995736766E-17 + t287.re * 6.123233995736766E-17)
 8011872:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8011876:	443b      	add	r3, r7
 8011878:	ed9f 6b79 	vldr	d6, [pc, #484]	; 8011a60 <G_q+0xf498>
 801187c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8011880:	ed83 7b00 	vstr	d7, [r3]
             t13_im)) - 6.123233995736766E-17;
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 8011884:	f241 13d0 	movw	r3, #4560	; 0x11d0
 8011888:	443b      	add	r3, r7
 801188a:	ed93 7b02 	vldr	d7, [r3, #8]
 801188e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 8011a60 <G_q+0xf498>
 8011892:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011896:	f507 538f 	add.w	r3, r7, #4576	; 0x11e0
 801189a:	ed93 7b02 	vldr	d7, [r3, #8]
 801189e:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8011a60 <G_q+0xf498>
 80118a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 80118a6:	ee36 6b07 	vadd.f64	d6, d6, d7
            + (t12_re * t3_im + t12_im * t23_re)) + (t16_re * t13_im + t16_im *
 80118aa:	f241 3388 	movw	r3, #5000	; 0x1388
 80118ae:	443b      	add	r3, r7
 80118b0:	ed93 5b00 	vldr	d5, [r3]
 80118b4:	f241 3310 	movw	r3, #4880	; 0x1310
 80118b8:	443b      	add	r3, r7
 80118ba:	ed93 7b00 	vldr	d7, [r3]
 80118be:	ee25 5b07 	vmul.f64	d5, d5, d7
 80118c2:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80118c6:	ed93 4b00 	vldr	d4, [r3]
 80118ca:	f241 3330 	movw	r3, #4912	; 0x1330
 80118ce:	443b      	add	r3, r7
 80118d0:	ed93 7b00 	vldr	d7, [r3]
 80118d4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80118d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80118dc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80118e0:	f241 3368 	movw	r3, #4968	; 0x1368
 80118e4:	443b      	add	r3, r7
 80118e6:	ed93 5b00 	vldr	d5, [r3]
 80118ea:	f241 3370 	movw	r3, #4976	; 0x1370
 80118ee:	443b      	add	r3, r7
 80118f0:	ed93 7b00 	vldr	d7, [r3]
 80118f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80118f8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80118fc:	ed93 4b00 	vldr	d4, [r3]
 8011900:	f241 3378 	movw	r3, #4984	; 0x1378
 8011904:	443b      	add	r3, r7
 8011906:	ed93 7b00 	vldr	d7, [r3]
 801190a:	ee24 7b07 	vmul.f64	d7, d4, d7
 801190e:	ee35 7b07 	vadd.f64	d7, d5, d7
  t85_im = ((t286.im * 6.123233995736766E-17 + t287.im * 6.123233995736766E-17)
 8011912:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011916:	f241 3318 	movw	r3, #4888	; 0x1318
 801191a:	443b      	add	r3, r7
 801191c:	ed83 7b00 	vstr	d7, [r3]
    t13_re);
  if (t270.im == 0.0) {
 8011920:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011924:	ed93 7b02 	vldr	d7, [r3, #8]
 8011928:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011930:	d116      	bne.n	8011960 <G_q+0xf398>
    t3_im = t270.re / 2.0;
 8011932:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011936:	ed93 6b00 	vldr	d6, [r3]
 801193a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801193e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011942:	f241 3310 	movw	r3, #4880	; 0x1310
 8011946:	443b      	add	r3, r7
 8011948:	ed83 7b00 	vstr	d7, [r3]
    t23_re = 0.0;
 801194c:	f04f 0300 	mov.w	r3, #0
 8011950:	f04f 0400 	mov.w	r4, #0
 8011954:	f241 3230 	movw	r2, #4912	; 0x1330
 8011958:	443a      	add	r2, r7
 801195a:	e9c2 3400 	strd	r3, r4, [r2]
 801195e:	e039      	b.n	80119d4 <G_q+0xf40c>
  } else if (t270.re == 0.0) {
 8011960:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011964:	ed93 7b00 	vldr	d7, [r3]
 8011968:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801196c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011970:	d116      	bne.n	80119a0 <G_q+0xf3d8>
    t3_im = 0.0;
 8011972:	f04f 0300 	mov.w	r3, #0
 8011976:	f04f 0400 	mov.w	r4, #0
 801197a:	f241 3210 	movw	r2, #4880	; 0x1310
 801197e:	443a      	add	r2, r7
 8011980:	e9c2 3400 	strd	r3, r4, [r2]
    t23_re = t270.im / 2.0;
 8011984:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 8011988:	ed93 6b02 	vldr	d6, [r3, #8]
 801198c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011990:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011994:	f241 3330 	movw	r3, #4912	; 0x1330
 8011998:	443b      	add	r3, r7
 801199a:	ed83 7b00 	vstr	d7, [r3]
 801199e:	e019      	b.n	80119d4 <G_q+0xf40c>
  } else {
    t3_im = t270.re / 2.0;
 80119a0:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80119a4:	ed93 6b00 	vldr	d6, [r3]
 80119a8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119ac:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119b0:	f241 3310 	movw	r3, #4880	; 0x1310
 80119b4:	443b      	add	r3, r7
 80119b6:	ed83 7b00 	vstr	d7, [r3]
    t23_re = t270.im / 2.0;
 80119ba:	f507 6319 	add.w	r3, r7, #2448	; 0x990
 80119be:	ed93 6b02 	vldr	d6, [r3, #8]
 80119c2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119c6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119ca:	f241 3330 	movw	r3, #4912	; 0x1330
 80119ce:	443b      	add	r3, r7
 80119d0:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t271.im == 0.0) {
 80119d4:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80119d8:	ed93 7b02 	vldr	d7, [r3, #8]
 80119dc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80119e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80119e4:	d116      	bne.n	8011a14 <G_q+0xf44c>
    t34_re = t271.re / 2.0;
 80119e6:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80119ea:	ed93 6b00 	vldr	d6, [r3]
 80119ee:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80119f2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80119f6:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80119fa:	443b      	add	r3, r7
 80119fc:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011a00:	f04f 0300 	mov.w	r3, #0
 8011a04:	f04f 0400 	mov.w	r4, #0
 8011a08:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011a0c:	443a      	add	r2, r7
 8011a0e:	e9c2 3400 	strd	r3, r4, [r2]
 8011a12:	e045      	b.n	8011aa0 <G_q+0xf4d8>
  } else if (t271.re == 0.0) {
 8011a14:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011a18:	ed93 7b00 	vldr	d7, [r3]
 8011a1c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a24:	d122      	bne.n	8011a6c <G_q+0xf4a4>
    t34_re = 0.0;
 8011a26:	f04f 0300 	mov.w	r3, #0
 8011a2a:	f04f 0400 	mov.w	r4, #0
 8011a2e:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011a32:	443a      	add	r2, r7
 8011a34:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t271.im / 2.0;
 8011a38:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011a3c:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a40:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a44:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a48:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011a4c:	443b      	add	r3, r7
 8011a4e:	ed83 7b00 	vstr	d7, [r3]
 8011a52:	e025      	b.n	8011aa0 <G_q+0xf4d8>
 8011a54:	f3af 8000 	nop.w
 8011a58:	33145c07 	.word	0x33145c07
 8011a5c:	3c81a626 	.word	0x3c81a626
 8011a60:	33145c07 	.word	0x33145c07
 8011a64:	3c91a626 	.word	0x3c91a626
 8011a68:	ffffefd0 	.word	0xffffefd0
  } else {
    t34_re = t271.re / 2.0;
 8011a6c:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011a70:	ed93 6b00 	vldr	d6, [r3]
 8011a74:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a78:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a7c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011a80:	443b      	add	r3, r7
 8011a82:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t271.im / 2.0;
 8011a86:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 8011a8a:	ed93 6b02 	vldr	d6, [r3, #8]
 8011a8e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011a92:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011a96:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011a9a:	443b      	add	r3, r7
 8011a9c:	ed83 7b00 	vstr	d7, [r3]
  }

  t3_im += t34_re;
 8011aa0:	f241 3310 	movw	r3, #4880	; 0x1310
 8011aa4:	443b      	add	r3, r7
 8011aa6:	ed93 6b00 	vldr	d6, [r3]
 8011aaa:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011aae:	443b      	add	r3, r7
 8011ab0:	ed93 7b00 	vldr	d7, [r3]
 8011ab4:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011ab8:	f241 3310 	movw	r3, #4880	; 0x1310
 8011abc:	443b      	add	r3, r7
 8011abe:	ed83 7b00 	vstr	d7, [r3]
  t23_re += t34_im;
 8011ac2:	f241 3330 	movw	r3, #4912	; 0x1330
 8011ac6:	443b      	add	r3, r7
 8011ac8:	ed93 6b00 	vldr	d6, [r3]
 8011acc:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011ad0:	443b      	add	r3, r7
 8011ad2:	ed93 7b00 	vldr	d7, [r3]
 8011ad6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011ada:	f241 3330 	movw	r3, #4912	; 0x1330
 8011ade:	443b      	add	r3, r7
 8011ae0:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t272.re * 0.0 - t272.im * 0.5) - (t273.re * 0.0 - t273.im * 0.5);
 8011ae4:	f241 1370 	movw	r3, #4464	; 0x1170
 8011ae8:	443b      	add	r3, r7
 8011aea:	ed93 7b00 	vldr	d7, [r3]
 8011aee:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 8011cd8 <G_q+0xf710>
 8011af2:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011af6:	f241 1370 	movw	r3, #4464	; 0x1170
 8011afa:	443b      	add	r3, r7
 8011afc:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b00:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011b04:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b08:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011b0c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011b10:	ed93 7b00 	vldr	d7, [r3]
 8011b14:	ed9f 5b70 	vldr	d5, [pc, #448]	; 8011cd8 <G_q+0xf710>
 8011b18:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011b1c:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011b20:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b24:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011b28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011b2c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011b30:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b34:	f241 3378 	movw	r3, #4984	; 0x1378
 8011b38:	443b      	add	r3, r7
 8011b3a:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (t272.re * 0.5 + t272.im * 0.0) - (t273.re * 0.5 + t273.im * 0.0);
 8011b3e:	f241 1370 	movw	r3, #4464	; 0x1170
 8011b42:	443b      	add	r3, r7
 8011b44:	ed93 7b00 	vldr	d7, [r3]
 8011b48:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011b4c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011b50:	f241 1370 	movw	r3, #4464	; 0x1170
 8011b54:	443b      	add	r3, r7
 8011b56:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b5a:	ed9f 5b5f 	vldr	d5, [pc, #380]	; 8011cd8 <G_q+0xf710>
 8011b5e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011b62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011b66:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011b6a:	ed93 7b00 	vldr	d7, [r3]
 8011b6e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011b72:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011b76:	f507 538c 	add.w	r3, r7, #4480	; 0x1180
 8011b7a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011b7e:	ed9f 4b56 	vldr	d4, [pc, #344]	; 8011cd8 <G_q+0xf710>
 8011b82:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011b86:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011b8a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011b8e:	f241 3370 	movw	r3, #4976	; 0x1370
 8011b92:	443b      	add	r3, r7
 8011b94:	ed83 7b00 	vstr	d7, [r3]
  if (t276.im == 0.0) {
 8011b98:	f241 1390 	movw	r3, #4496	; 0x1190
 8011b9c:	443b      	add	r3, r7
 8011b9e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011ba2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011baa:	d116      	bne.n	8011bda <G_q+0xf612>
    t16_re = t276.re / 2.0;
 8011bac:	f241 1390 	movw	r3, #4496	; 0x1190
 8011bb0:	443b      	add	r3, r7
 8011bb2:	ed93 6b00 	vldr	d6, [r3]
 8011bb6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011bba:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011bbe:	f241 3368 	movw	r3, #4968	; 0x1368
 8011bc2:	443b      	add	r3, r7
 8011bc4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011bc8:	f04f 0300 	mov.w	r3, #0
 8011bcc:	f04f 0400 	mov.w	r4, #0
 8011bd0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011bd4:	e9c2 3400 	strd	r3, r4, [r2]
 8011bd8:	e03b      	b.n	8011c52 <G_q+0xf68a>
  } else if (t276.re == 0.0) {
 8011bda:	f241 1390 	movw	r3, #4496	; 0x1190
 8011bde:	443b      	add	r3, r7
 8011be0:	ed93 7b00 	vldr	d7, [r3]
 8011be4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bec:	d116      	bne.n	8011c1c <G_q+0xf654>
    t16_re = 0.0;
 8011bee:	f04f 0300 	mov.w	r3, #0
 8011bf2:	f04f 0400 	mov.w	r4, #0
 8011bf6:	f241 3268 	movw	r2, #4968	; 0x1368
 8011bfa:	443a      	add	r2, r7
 8011bfc:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t276.im / 2.0;
 8011c00:	f241 1390 	movw	r3, #4496	; 0x1190
 8011c04:	443b      	add	r3, r7
 8011c06:	ed93 6b02 	vldr	d6, [r3, #8]
 8011c0a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011c0e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011c12:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c16:	ed83 7b00 	vstr	d7, [r3]
 8011c1a:	e01a      	b.n	8011c52 <G_q+0xf68a>
  } else {
    t16_re = t276.re / 2.0;
 8011c1c:	f241 1390 	movw	r3, #4496	; 0x1190
 8011c20:	443b      	add	r3, r7
 8011c22:	ed93 6b00 	vldr	d6, [r3]
 8011c26:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011c2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011c2e:	f241 3368 	movw	r3, #4968	; 0x1368
 8011c32:	443b      	add	r3, r7
 8011c34:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t276.im / 2.0;
 8011c38:	f241 1390 	movw	r3, #4496	; 0x1190
 8011c3c:	443b      	add	r3, r7
 8011c3e:	ed93 6b02 	vldr	d6, [r3, #8]
 8011c42:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011c46:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011c4a:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011c4e:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t277.im == 0.0) {
 8011c52:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011c56:	ed93 7b02 	vldr	d7, [r3, #8]
 8011c5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c62:	d116      	bne.n	8011c92 <G_q+0xf6ca>
    t34_re = t277.re / 2.0;
 8011c64:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011c68:	ed93 6b00 	vldr	d6, [r3]
 8011c6c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011c70:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011c74:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011c78:	443b      	add	r3, r7
 8011c7a:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8011c7e:	f04f 0300 	mov.w	r3, #0
 8011c82:	f04f 0400 	mov.w	r4, #0
 8011c86:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8011c8a:	443a      	add	r2, r7
 8011c8c:	e9c2 3400 	strd	r3, r4, [r2]
 8011c90:	e040      	b.n	8011d14 <G_q+0xf74c>
  } else if (t277.re == 0.0) {
 8011c92:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011c96:	ed93 7b00 	vldr	d7, [r3]
 8011c9a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ca2:	d11d      	bne.n	8011ce0 <G_q+0xf718>
    t34_re = 0.0;
 8011ca4:	f04f 0300 	mov.w	r3, #0
 8011ca8:	f04f 0400 	mov.w	r4, #0
 8011cac:	f241 32b8 	movw	r2, #5048	; 0x13b8
 8011cb0:	443a      	add	r2, r7
 8011cb2:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t277.im / 2.0;
 8011cb6:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011cba:	ed93 6b02 	vldr	d6, [r3, #8]
 8011cbe:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011cc2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011cc6:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011cca:	443b      	add	r3, r7
 8011ccc:	ed83 7b00 	vstr	d7, [r3]
 8011cd0:	e020      	b.n	8011d14 <G_q+0xf74c>
 8011cd2:	bf00      	nop
 8011cd4:	f3af 8000 	nop.w
	...
  } else {
    t34_re = t277.re / 2.0;
 8011ce0:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011ce4:	ed93 6b00 	vldr	d6, [r3]
 8011ce8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011cec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011cf0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011cf4:	443b      	add	r3, r7
 8011cf6:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t277.im / 2.0;
 8011cfa:	f507 538d 	add.w	r3, r7, #4512	; 0x11a0
 8011cfe:	ed93 6b02 	vldr	d6, [r3, #8]
 8011d02:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011d06:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011d0a:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011d0e:	443b      	add	r3, r7
 8011d10:	ed83 7b00 	vstr	d7, [r3]
  }

  t20_re = (t274.re * 0.0 - t274.im * 0.5) - (t275.re * 0.0 - t275.im * 0.5);
 8011d14:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011d18:	ed93 7b00 	vldr	d7, [r3]
 8011d1c:	ed9f 6be0 	vldr	d6, [pc, #896]	; 80120a0 <G_q+0xfad8>
 8011d20:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011d24:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011d28:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d2c:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011d30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011d34:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011d38:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011d3c:	ed93 7b00 	vldr	d7, [r3]
 8011d40:	ed9f 5bd7 	vldr	d5, [pc, #860]	; 80120a0 <G_q+0xfad8>
 8011d44:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011d48:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011d4c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d50:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8011d54:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011d58:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011d5c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011d60:	f241 3348 	movw	r3, #4936	; 0x1348
 8011d64:	443b      	add	r3, r7
 8011d66:	ed83 7b00 	vstr	d7, [r3]
  t20_im = (t274.re * 0.5 + t274.im * 0.0) - (t275.re * 0.5 + t275.im * 0.0);
 8011d6a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011d6e:	ed93 7b00 	vldr	d7, [r3]
 8011d72:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8011d76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011d7a:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8011d7e:	ed93 7b02 	vldr	d7, [r3, #8]
 8011d82:	ed9f 5bc7 	vldr	d5, [pc, #796]	; 80120a0 <G_q+0xfad8>
 8011d86:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011d8a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011d8e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011d92:	ed93 7b00 	vldr	d7, [r3]
 8011d96:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8011d9a:	ee27 5b05 	vmul.f64	d5, d7, d5
 8011d9e:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8011da2:	ed93 7b02 	vldr	d7, [r3, #8]
 8011da6:	ed9f 4bbe 	vldr	d4, [pc, #760]	; 80120a0 <G_q+0xfad8>
 8011daa:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011dae:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011db2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011db6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011dba:	ed83 7b00 	vstr	d7, [r3]
  t16_re = (t16_re + t34_re) + 7.498798913309288E-33;
 8011dbe:	f241 3368 	movw	r3, #4968	; 0x1368
 8011dc2:	443b      	add	r3, r7
 8011dc4:	ed93 6b00 	vldr	d6, [r3]
 8011dc8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8011dcc:	443b      	add	r3, r7
 8011dce:	ed93 7b00 	vldr	d7, [r3]
 8011dd2:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011dd6:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 80120a8 <G_q+0xfae0>
 8011dda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8011dde:	f241 3368 	movw	r3, #4968	; 0x1368
 8011de2:	443b      	add	r3, r7
 8011de4:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 8011de8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011dec:	ed93 6b00 	vldr	d6, [r3]
 8011df0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8011df4:	443b      	add	r3, r7
 8011df6:	ed93 7b00 	vldr	d7, [r3]
 8011dfa:	ee36 7b07 	vadd.f64	d7, d6, d7
 8011dfe:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011e02:	ed83 7b00 	vstr	d7, [r3]
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011e06:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011e0a:	ed93 7b00 	vldr	d7, [r3]
 8011e0e:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 80120a0 <G_q+0xfad8>
 8011e12:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011e16:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011e1a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011e1e:	ed9f 5ba4 	vldr	d5, [pc, #656]	; 80120b0 <G_q+0xfae8>
 8011e22:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011e26:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011e2a:	4ba3      	ldr	r3, [pc, #652]	; (80120b8 <G_q+0xfaf0>)
 8011e2c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011e30:	443a      	add	r2, r7
 8011e32:	4413      	add	r3, r2
 8011e34:	ed93 7b00 	vldr	d7, [r3]
 8011e38:	ed9f 5b99 	vldr	d5, [pc, #612]	; 80120a0 <G_q+0xfad8>
 8011e3c:	ee27 5b05 	vmul.f64	d5, d7, d5
    t279.im * 3.061616997868383E-17);
 8011e40:	4b9d      	ldr	r3, [pc, #628]	; (80120b8 <G_q+0xfaf0>)
 8011e42:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011e46:	443a      	add	r2, r7
 8011e48:	4413      	add	r3, r2
 8011e4a:	ed93 7b02 	vldr	d7, [r3, #8]
 8011e4e:	ed9f 4b98 	vldr	d4, [pc, #608]	; 80120b0 <G_q+0xfae8>
 8011e52:	ee27 7b04 	vmul.f64	d7, d7, d4
  t12_re = (t278.re * 0.0 - t278.im * 3.061616997868383E-17) - (t279.re * 0.0 -
 8011e56:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011e5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011e5e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011e62:	443b      	add	r3, r7
 8011e64:	ed83 7b00 	vstr	d7, [r3]
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011e68:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011e6c:	ed93 7b00 	vldr	d7, [r3]
 8011e70:	ed9f 6b8f 	vldr	d6, [pc, #572]	; 80120b0 <G_q+0xfae8>
 8011e74:	ee27 6b06 	vmul.f64	d6, d7, d6
 8011e78:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8011e7c:	ed93 7b02 	vldr	d7, [r3, #8]
 8011e80:	ed9f 5b87 	vldr	d5, [pc, #540]	; 80120a0 <G_q+0xfad8>
 8011e84:	ee27 7b05 	vmul.f64	d7, d7, d5
 8011e88:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011e8c:	4b8a      	ldr	r3, [pc, #552]	; (80120b8 <G_q+0xfaf0>)
 8011e8e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011e92:	443a      	add	r2, r7
 8011e94:	4413      	add	r3, r2
 8011e96:	ed93 7b00 	vldr	d7, [r3]
 8011e9a:	ed9f 5b85 	vldr	d5, [pc, #532]	; 80120b0 <G_q+0xfae8>
 8011e9e:	ee27 5b05 	vmul.f64	d5, d7, d5
    3.061616997868383E-17 + t279.im * 0.0);
 8011ea2:	4b85      	ldr	r3, [pc, #532]	; (80120b8 <G_q+0xfaf0>)
 8011ea4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8011ea8:	443a      	add	r2, r7
 8011eaa:	4413      	add	r3, r2
 8011eac:	ed93 7b02 	vldr	d7, [r3, #8]
 8011eb0:	ed9f 4b7b 	vldr	d4, [pc, #492]	; 80120a0 <G_q+0xfad8>
 8011eb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8011eb8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t12_im = (t278.re * 3.061616997868383E-17 + t278.im * 0.0) - (t279.re *
 8011ebc:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011ec0:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8011ec4:	ed83 7b00 	vstr	d7, [r3]
  b_t10_re = (t3_im * t13_re - t23_re * t13_im) - (t20_re * t16_re - t20_im *
 8011ec8:	f241 3310 	movw	r3, #4880	; 0x1310
 8011ecc:	443b      	add	r3, r7
 8011ece:	ed93 6b00 	vldr	d6, [r3]
 8011ed2:	f241 3378 	movw	r3, #4984	; 0x1378
 8011ed6:	443b      	add	r3, r7
 8011ed8:	ed93 7b00 	vldr	d7, [r3]
 8011edc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011ee0:	f241 3330 	movw	r3, #4912	; 0x1330
 8011ee4:	443b      	add	r3, r7
 8011ee6:	ed93 5b00 	vldr	d5, [r3]
 8011eea:	f241 3370 	movw	r3, #4976	; 0x1370
 8011eee:	443b      	add	r3, r7
 8011ef0:	ed93 7b00 	vldr	d7, [r3]
 8011ef4:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011ef8:	ee36 6b47 	vsub.f64	d6, d6, d7
 8011efc:	f241 3348 	movw	r3, #4936	; 0x1348
 8011f00:	443b      	add	r3, r7
 8011f02:	ed93 5b00 	vldr	d5, [r3]
 8011f06:	f241 3368 	movw	r3, #4968	; 0x1368
 8011f0a:	443b      	add	r3, r7
 8011f0c:	ed93 7b00 	vldr	d7, [r3]
 8011f10:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011f14:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011f18:	ed93 4b00 	vldr	d4, [r3]
 8011f1c:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011f20:	ed93 7b00 	vldr	d7, [r3]
 8011f24:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011f28:	ee35 7b47 	vsub.f64	d7, d5, d7
 8011f2c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011f30:	f241 3338 	movw	r3, #4920	; 0x1338
 8011f34:	443b      	add	r3, r7
 8011f36:	ed83 7b00 	vstr	d7, [r3]
    t16_im);
  t23_re = (t3_im * t13_im + t23_re * t13_re) - (t20_re * t16_im + t20_im *
 8011f3a:	f241 3310 	movw	r3, #4880	; 0x1310
 8011f3e:	443b      	add	r3, r7
 8011f40:	ed93 6b00 	vldr	d6, [r3]
 8011f44:	f241 3370 	movw	r3, #4976	; 0x1370
 8011f48:	443b      	add	r3, r7
 8011f4a:	ed93 7b00 	vldr	d7, [r3]
 8011f4e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8011f52:	f241 3330 	movw	r3, #4912	; 0x1330
 8011f56:	443b      	add	r3, r7
 8011f58:	ed93 5b00 	vldr	d5, [r3]
 8011f5c:	f241 3378 	movw	r3, #4984	; 0x1378
 8011f60:	443b      	add	r3, r7
 8011f62:	ed93 7b00 	vldr	d7, [r3]
 8011f66:	ee25 7b07 	vmul.f64	d7, d5, d7
 8011f6a:	ee36 6b07 	vadd.f64	d6, d6, d7
 8011f6e:	f241 3348 	movw	r3, #4936	; 0x1348
 8011f72:	443b      	add	r3, r7
 8011f74:	ed93 5b00 	vldr	d5, [r3]
 8011f78:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8011f7c:	ed93 7b00 	vldr	d7, [r3]
 8011f80:	ee25 5b07 	vmul.f64	d5, d5, d7
 8011f84:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8011f88:	ed93 4b00 	vldr	d4, [r3]
 8011f8c:	f241 3368 	movw	r3, #4968	; 0x1368
 8011f90:	443b      	add	r3, r7
 8011f92:	ed93 7b00 	vldr	d7, [r3]
 8011f96:	ee24 7b07 	vmul.f64	d7, d4, d7
 8011f9a:	ee35 7b07 	vadd.f64	d7, d5, d7
 8011f9e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8011fa2:	f241 3330 	movw	r3, #4912	; 0x1330
 8011fa6:	443b      	add	r3, r7
 8011fa8:	ed83 7b00 	vstr	d7, [r3]
    t16_re);
  if (t296.im == 0.0) {
 8011fac:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011fb0:	ed93 7b02 	vldr	d7, [r3, #8]
 8011fb4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fbc:	d115      	bne.n	8011fea <G_q+0xfa22>
    t16_re = t296.re / 2.0;
 8011fbe:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011fc2:	ed93 6b00 	vldr	d6, [r3]
 8011fc6:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8011fca:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8011fce:	f241 3368 	movw	r3, #4968	; 0x1368
 8011fd2:	443b      	add	r3, r7
 8011fd4:	ed83 7b00 	vstr	d7, [r3]
    t16_im = 0.0;
 8011fd8:	f04f 0300 	mov.w	r3, #0
 8011fdc:	f04f 0400 	mov.w	r4, #0
 8011fe0:	f507 529b 	add.w	r2, r7, #4960	; 0x1360
 8011fe4:	e9c2 3400 	strd	r3, r4, [r2]
 8011fe8:	e037      	b.n	801205a <G_q+0xfa92>
  } else if (t296.re == 0.0) {
 8011fea:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8011fee:	ed93 7b00 	vldr	d7, [r3]
 8011ff2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8011ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ffa:	d115      	bne.n	8012028 <G_q+0xfa60>
    t16_re = 0.0;
 8011ffc:	f04f 0300 	mov.w	r3, #0
 8012000:	f04f 0400 	mov.w	r4, #0
 8012004:	f241 3268 	movw	r2, #4968	; 0x1368
 8012008:	443a      	add	r2, r7
 801200a:	e9c2 3400 	strd	r3, r4, [r2]
    t16_im = t296.im / 2.0;
 801200e:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8012012:	ed93 6b02 	vldr	d6, [r3, #8]
 8012016:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801201a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801201e:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012022:	ed83 7b00 	vstr	d7, [r3]
 8012026:	e018      	b.n	801205a <G_q+0xfa92>
  } else {
    t16_re = t296.re / 2.0;
 8012028:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 801202c:	ed93 6b00 	vldr	d6, [r3]
 8012030:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012034:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012038:	f241 3368 	movw	r3, #4968	; 0x1368
 801203c:	443b      	add	r3, r7
 801203e:	ed83 7b00 	vstr	d7, [r3]
    t16_im = t296.im / 2.0;
 8012042:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 8012046:	ed93 6b02 	vldr	d6, [r3, #8]
 801204a:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801204e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012052:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 8012056:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t297.im == 0.0) {
 801205a:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801205e:	ed93 7b02 	vldr	d7, [r3, #8]
 8012062:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801206a:	d127      	bne.n	80120bc <G_q+0xfaf4>
    t34_re = t297.re / 2.0;
 801206c:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8012070:	ed93 6b00 	vldr	d6, [r3]
 8012074:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012078:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801207c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012080:	443b      	add	r3, r7
 8012082:	ed83 7b00 	vstr	d7, [r3]
    t34_im = 0.0;
 8012086:	f04f 0300 	mov.w	r3, #0
 801208a:	f04f 0400 	mov.w	r4, #0
 801208e:	f241 32b0 	movw	r2, #5040	; 0x13b0
 8012092:	443a      	add	r2, r7
 8012094:	e9c2 3400 	strd	r3, r4, [r2]
 8012098:	e04a      	b.n	8012130 <G_q+0xfb68>
 801209a:	bf00      	nop
 801209c:	f3af 8000 	nop.w
	...
 80120a8:	858a5d48 	.word	0x858a5d48
 80120ac:	394377ce 	.word	0x394377ce
 80120b0:	33145c07 	.word	0x33145c07
 80120b4:	3c81a626 	.word	0x3c81a626
 80120b8:	ffffefb0 	.word	0xffffefb0
  } else if (t297.re == 0.0) {
 80120bc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80120c0:	ed93 7b00 	vldr	d7, [r3]
 80120c4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120cc:	d116      	bne.n	80120fc <G_q+0xfb34>
    t34_re = 0.0;
 80120ce:	f04f 0300 	mov.w	r3, #0
 80120d2:	f04f 0400 	mov.w	r4, #0
 80120d6:	f241 32b8 	movw	r2, #5048	; 0x13b8
 80120da:	443a      	add	r2, r7
 80120dc:	e9c2 3400 	strd	r3, r4, [r2]
    t34_im = t297.im / 2.0;
 80120e0:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 80120e4:	ed93 6b02 	vldr	d6, [r3, #8]
 80120e8:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80120ec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80120f0:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80120f4:	443b      	add	r3, r7
 80120f6:	ed83 7b00 	vstr	d7, [r3]
 80120fa:	e019      	b.n	8012130 <G_q+0xfb68>
  } else {
    t34_re = t297.re / 2.0;
 80120fc:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8012100:	ed93 6b00 	vldr	d6, [r3]
 8012104:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012108:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801210c:	f241 33b8 	movw	r3, #5048	; 0x13b8
 8012110:	443b      	add	r3, r7
 8012112:	ed83 7b00 	vstr	d7, [r3]
    t34_im = t297.im / 2.0;
 8012116:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 801211a:	ed93 6b02 	vldr	d6, [r3, #8]
 801211e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012122:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012126:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801212a:	443b      	add	r3, r7
 801212c:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t298.im == 0.0) {
 8012130:	f241 2330 	movw	r3, #4656	; 0x1230
 8012134:	443b      	add	r3, r7
 8012136:	ed93 7b02 	vldr	d7, [r3, #8]
 801213a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801213e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012142:	d116      	bne.n	8012172 <G_q+0xfbaa>
    t20_re = t298.re / 2.0;
 8012144:	f241 2330 	movw	r3, #4656	; 0x1230
 8012148:	443b      	add	r3, r7
 801214a:	ed93 6b00 	vldr	d6, [r3]
 801214e:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012152:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012156:	f241 3348 	movw	r3, #4936	; 0x1348
 801215a:	443b      	add	r3, r7
 801215c:	ed83 7b00 	vstr	d7, [r3]
    t20_im = 0.0;
 8012160:	f04f 0300 	mov.w	r3, #0
 8012164:	f04f 0400 	mov.w	r4, #0
 8012168:	f507 529a 	add.w	r2, r7, #4928	; 0x1340
 801216c:	e9c2 3400 	strd	r3, r4, [r2]
 8012170:	e03b      	b.n	80121ea <G_q+0xfc22>
  } else if (t298.re == 0.0) {
 8012172:	f241 2330 	movw	r3, #4656	; 0x1230
 8012176:	443b      	add	r3, r7
 8012178:	ed93 7b00 	vldr	d7, [r3]
 801217c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012184:	d116      	bne.n	80121b4 <G_q+0xfbec>
    t20_re = 0.0;
 8012186:	f04f 0300 	mov.w	r3, #0
 801218a:	f04f 0400 	mov.w	r4, #0
 801218e:	f241 3248 	movw	r2, #4936	; 0x1348
 8012192:	443a      	add	r2, r7
 8012194:	e9c2 3400 	strd	r3, r4, [r2]
    t20_im = t298.im / 2.0;
 8012198:	f241 2330 	movw	r3, #4656	; 0x1230
 801219c:	443b      	add	r3, r7
 801219e:	ed93 6b02 	vldr	d6, [r3, #8]
 80121a2:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80121a6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80121aa:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80121ae:	ed83 7b00 	vstr	d7, [r3]
 80121b2:	e01a      	b.n	80121ea <G_q+0xfc22>
  } else {
    t20_re = t298.re / 2.0;
 80121b4:	f241 2330 	movw	r3, #4656	; 0x1230
 80121b8:	443b      	add	r3, r7
 80121ba:	ed93 6b00 	vldr	d6, [r3]
 80121be:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80121c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80121c6:	f241 3348 	movw	r3, #4936	; 0x1348
 80121ca:	443b      	add	r3, r7
 80121cc:	ed83 7b00 	vstr	d7, [r3]
    t20_im = t298.im / 2.0;
 80121d0:	f241 2330 	movw	r3, #4656	; 0x1230
 80121d4:	443b      	add	r3, r7
 80121d6:	ed93 6b02 	vldr	d6, [r3, #8]
 80121da:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 80121de:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80121e2:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80121e6:	ed83 7b00 	vstr	d7, [r3]
  }

  if (t299.im == 0.0) {
 80121ea:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 80121ee:	ed93 7b02 	vldr	d7, [r3, #8]
 80121f2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80121f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121fa:	d116      	bne.n	801222a <G_q+0xfc62>
    t13_re = t299.re / 2.0;
 80121fc:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012200:	ed93 6b00 	vldr	d6, [r3]
 8012204:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012208:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801220c:	f241 3378 	movw	r3, #4984	; 0x1378
 8012210:	443b      	add	r3, r7
 8012212:	ed83 7b00 	vstr	d7, [r3]
    t13_im = 0.0;
 8012216:	f04f 0300 	mov.w	r3, #0
 801221a:	f04f 0400 	mov.w	r4, #0
 801221e:	f241 3270 	movw	r2, #4976	; 0x1370
 8012222:	443a      	add	r2, r7
 8012224:	e9c2 3400 	strd	r3, r4, [r2]
 8012228:	e039      	b.n	801229e <G_q+0xfcd6>
  } else if (t299.re == 0.0) {
 801222a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801222e:	ed93 7b00 	vldr	d7, [r3]
 8012232:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801223a:	d116      	bne.n	801226a <G_q+0xfca2>
    t13_re = 0.0;
 801223c:	f04f 0300 	mov.w	r3, #0
 8012240:	f04f 0400 	mov.w	r4, #0
 8012244:	f241 3278 	movw	r2, #4984	; 0x1378
 8012248:	443a      	add	r2, r7
 801224a:	e9c2 3400 	strd	r3, r4, [r2]
    t13_im = t299.im / 2.0;
 801224e:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012252:	ed93 6b02 	vldr	d6, [r3, #8]
 8012256:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801225a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801225e:	f241 3370 	movw	r3, #4976	; 0x1370
 8012262:	443b      	add	r3, r7
 8012264:	ed83 7b00 	vstr	d7, [r3]
 8012268:	e019      	b.n	801229e <G_q+0xfcd6>
  } else {
    t13_re = t299.re / 2.0;
 801226a:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 801226e:	ed93 6b00 	vldr	d6, [r3]
 8012272:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012276:	ee86 7b05 	vdiv.f64	d7, d6, d5
 801227a:	f241 3378 	movw	r3, #4984	; 0x1378
 801227e:	443b      	add	r3, r7
 8012280:	ed83 7b00 	vstr	d7, [r3]
    t13_im = t299.im / 2.0;
 8012284:	f507 5392 	add.w	r3, r7, #4672	; 0x1240
 8012288:	ed93 6b02 	vldr	d6, [r3, #8]
 801228c:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8012290:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8012294:	f241 3370 	movw	r3, #4976	; 0x1370
 8012298:	443b      	add	r3, r7
 801229a:	ed83 7b00 	vstr	d7, [r3]
  }

  t16_re += t34_re;
 801229e:	f241 3368 	movw	r3, #4968	; 0x1368
 80122a2:	443b      	add	r3, r7
 80122a4:	ed93 6b00 	vldr	d6, [r3]
 80122a8:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80122ac:	443b      	add	r3, r7
 80122ae:	ed93 7b00 	vldr	d7, [r3]
 80122b2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80122b6:	f241 3368 	movw	r3, #4968	; 0x1368
 80122ba:	443b      	add	r3, r7
 80122bc:	ed83 7b00 	vstr	d7, [r3]
  t16_im += t34_im;
 80122c0:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80122c4:	ed93 6b00 	vldr	d6, [r3]
 80122c8:	f241 33b0 	movw	r3, #5040	; 0x13b0
 80122cc:	443b      	add	r3, r7
 80122ce:	ed93 7b00 	vldr	d7, [r3]
 80122d2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80122d6:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80122da:	ed83 7b00 	vstr	d7, [r3]
  t20_re = (t20_re + t13_re) + 7.498798913309288E-33;
 80122de:	f241 3348 	movw	r3, #4936	; 0x1348
 80122e2:	443b      	add	r3, r7
 80122e4:	ed93 6b00 	vldr	d6, [r3]
 80122e8:	f241 3378 	movw	r3, #4984	; 0x1378
 80122ec:	443b      	add	r3, r7
 80122ee:	ed93 7b00 	vldr	d7, [r3]
 80122f2:	ee36 7b07 	vadd.f64	d7, d6, d7
 80122f6:	ed9f 6be6 	vldr	d6, [pc, #920]	; 8012690 <G_q+0x100c8>
 80122fa:	ee37 7b06 	vadd.f64	d7, d7, d6
 80122fe:	f241 3348 	movw	r3, #4936	; 0x1348
 8012302:	443b      	add	r3, r7
 8012304:	ed83 7b00 	vstr	d7, [r3]
  t20_im += t13_im;
 8012308:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 801230c:	ed93 6b00 	vldr	d6, [r3]
 8012310:	f241 3370 	movw	r3, #4976	; 0x1370
 8012314:	443b      	add	r3, r7
 8012316:	ed93 7b00 	vldr	d7, [r3]
 801231a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801231e:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 8012322:	ed83 7b00 	vstr	d7, [r3]
  t34_im = (t266.re * 0.0 - t266.im * 0.5) - (t267.re * 0.0 - t267.im * 0.5);
 8012326:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801232a:	ed93 7b00 	vldr	d7, [r3]
 801232e:	ed9f 6bda 	vldr	d6, [pc, #872]	; 8012698 <G_q+0x100d0>
 8012332:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012336:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801233a:	ed93 7b02 	vldr	d7, [r3, #8]
 801233e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8012342:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012346:	ee36 6b47 	vsub.f64	d6, d6, d7
 801234a:	4bd9      	ldr	r3, [pc, #868]	; (80126b0 <G_q+0x100e8>)
 801234c:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012350:	443a      	add	r2, r7
 8012352:	4413      	add	r3, r2
 8012354:	ed93 7b00 	vldr	d7, [r3]
 8012358:	ed9f 5bcf 	vldr	d5, [pc, #828]	; 8012698 <G_q+0x100d0>
 801235c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012360:	4bd3      	ldr	r3, [pc, #844]	; (80126b0 <G_q+0x100e8>)
 8012362:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012366:	443a      	add	r2, r7
 8012368:	4413      	add	r3, r2
 801236a:	ed93 7b02 	vldr	d7, [r3, #8]
 801236e:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8012372:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012376:	ee35 7b47 	vsub.f64	d7, d5, d7
 801237a:	ee36 7b47 	vsub.f64	d7, d6, d7
 801237e:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012382:	443b      	add	r3, r7
 8012384:	ed83 7b00 	vstr	d7, [r3]
  t13_re = (t266.re * 0.5 + t266.im * 0.0) - (t267.re * 0.5 + t267.im * 0.0);
 8012388:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801238c:	ed93 7b00 	vldr	d7, [r3]
 8012390:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8012394:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012398:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 801239c:	ed93 7b02 	vldr	d7, [r3, #8]
 80123a0:	ed9f 5bbd 	vldr	d5, [pc, #756]	; 8012698 <G_q+0x100d0>
 80123a4:	ee27 7b05 	vmul.f64	d7, d7, d5
 80123a8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80123ac:	4bc0      	ldr	r3, [pc, #768]	; (80126b0 <G_q+0x100e8>)
 80123ae:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80123b2:	443a      	add	r2, r7
 80123b4:	4413      	add	r3, r2
 80123b6:	ed93 7b00 	vldr	d7, [r3]
 80123ba:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80123be:	ee27 5b05 	vmul.f64	d5, d7, d5
 80123c2:	4bbb      	ldr	r3, [pc, #748]	; (80126b0 <G_q+0x100e8>)
 80123c4:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80123c8:	443a      	add	r2, r7
 80123ca:	4413      	add	r3, r2
 80123cc:	ed93 7b02 	vldr	d7, [r3, #8]
 80123d0:	ed9f 4bb1 	vldr	d4, [pc, #708]	; 8012698 <G_q+0x100d0>
 80123d4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80123d8:	ee35 7b07 	vadd.f64	d7, d5, d7
 80123dc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80123e0:	f241 3378 	movw	r3, #4984	; 0x1378
 80123e4:	443b      	add	r3, r7
 80123e6:	ed83 7b00 	vstr	d7, [r3]
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 80123ea:	f241 1350 	movw	r3, #4432	; 0x1150
 80123ee:	443b      	add	r3, r7
 80123f0:	ed93 7b00 	vldr	d7, [r3]
 80123f4:	ed9f 6baa 	vldr	d6, [pc, #680]	; 80126a0 <G_q+0x100d8>
 80123f8:	ee27 6b06 	vmul.f64	d6, d7, d6
 80123fc:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 8012400:	ed93 7b00 	vldr	d7, [r3]
 8012404:	ed9f 5ba6 	vldr	d5, [pc, #664]	; 80126a0 <G_q+0x100d8>
 8012408:	ee27 7b05 	vmul.f64	d7, d7, d5
 801240c:	ee36 6b07 	vadd.f64	d6, d6, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012410:	f507 5296 	add.w	r2, r7, #4800	; 0x12c0
 8012414:	f241 23b0 	movw	r3, #4784	; 0x12b0
 8012418:	443b      	add	r3, r7
 801241a:	ed92 5b00 	vldr	d5, [r2]
 801241e:	ed93 7b00 	vldr	d7, [r3]
 8012422:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012426:	f241 23b8 	movw	r3, #4792	; 0x12b8
 801242a:	443b      	add	r3, r7
 801242c:	ed93 4b00 	vldr	d4, [r3]
 8012430:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012434:	ed93 7b00 	vldr	d7, [r3]
 8012438:	ee24 7b07 	vmul.f64	d7, d4, d7
 801243c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012440:	ee36 6b47 	vsub.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 8012444:	f507 5295 	add.w	r2, r7, #4768	; 0x12a0
 8012448:	f241 23a8 	movw	r3, #4776	; 0x12a8
 801244c:	443b      	add	r3, r7
 801244e:	ed92 5b00 	vldr	d5, [r2]
 8012452:	ed93 7b00 	vldr	d7, [r3]
 8012456:	ee25 5b07 	vmul.f64	d5, d5, d7
 801245a:	f241 2350 	movw	r3, #4688	; 0x1250
 801245e:	443b      	add	r3, r7
 8012460:	ed93 4b00 	vldr	d4, [r3]
 8012464:	f241 3318 	movw	r3, #4888	; 0x1318
 8012468:	443b      	add	r3, r7
 801246a:	ed93 7b00 	vldr	d7, [r3]
 801246e:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012472:	ee35 7b47 	vsub.f64	d7, d5, d7
                3.749399456654644E-33) - (t72_re * t74_im - t74_re * t55_re)) +
 8012476:	ee36 6b07 	vadd.f64	d6, d6, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 801247a:	f241 3388 	movw	r3, #5000	; 0x1388
 801247e:	443b      	add	r3, r7
 8012480:	ed93 5b00 	vldr	d5, [r3]
 8012484:	f241 3338 	movw	r3, #4920	; 0x1338
 8012488:	443b      	add	r3, r7
 801248a:	ed93 7b00 	vldr	d7, [r3]
 801248e:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 8012492:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 8012496:	ed93 4b00 	vldr	d4, [r3]
 801249a:	f241 3330 	movw	r3, #4912	; 0x1330
 801249e:	443b      	add	r3, r7
 80124a0:	ed93 7b00 	vldr	d7, [r3]
 80124a4:	ee24 7b07 	vmul.f64	d7, d4, d7
              (t58_im * t76_re - t60_re * t85_im)) + (t12_re * b_t10_re - t12_im
 80124a8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80124ac:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t23_re)) - (t16_re * t20_re - t16_im * t20_im)) -
 80124b0:	f241 3368 	movw	r3, #4968	; 0x1368
 80124b4:	443b      	add	r3, r7
 80124b6:	ed93 5b00 	vldr	d5, [r3]
 80124ba:	f241 3348 	movw	r3, #4936	; 0x1348
 80124be:	443b      	add	r3, r7
 80124c0:	ed93 7b00 	vldr	d7, [r3]
 80124c4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80124c8:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80124cc:	ed93 4b00 	vldr	d4, [r3]
 80124d0:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80124d4:	ed93 7b00 	vldr	d7, [r3]
 80124d8:	ee24 7b07 	vmul.f64	d7, d4, d7
 80124dc:	ee35 7b47 	vsub.f64	d7, d5, d7
 80124e0:	ee36 7b47 	vsub.f64	d7, d6, d7
  t13_im = (((((t268.re * 3.749399456654644E-33 + t269.re *
 80124e4:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 80126a0 <G_q+0x100d8>
 80124e8:	ee37 7b46 	vsub.f64	d7, d7, d6
 80124ec:	f241 3370 	movw	r3, #4976	; 0x1370
 80124f0:	443b      	add	r3, r7
 80124f2:	ed83 7b00 	vstr	d7, [r3]
    3.749399456654644E-33;
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 80124f6:	f241 1350 	movw	r3, #4432	; 0x1150
 80124fa:	443b      	add	r3, r7
 80124fc:	ed93 7b02 	vldr	d7, [r3, #8]
 8012500:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80126a0 <G_q+0x100d8>
 8012504:	ee27 6b06 	vmul.f64	d6, d7, d6
 8012508:	f507 538b 	add.w	r3, r7, #4448	; 0x1160
 801250c:	ed93 7b02 	vldr	d7, [r3, #8]
 8012510:	ed9f 5b63 	vldr	d5, [pc, #396]	; 80126a0 <G_q+0x100d8>
 8012514:	ee27 7b05 	vmul.f64	d7, d7, d5
 8012518:	ee36 6b07 	vadd.f64	d6, d6, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801251c:	f507 5396 	add.w	r3, r7, #4800	; 0x12c0
 8012520:	ed93 5b00 	vldr	d5, [r3]
 8012524:	f507 5397 	add.w	r3, r7, #4832	; 0x12e0
 8012528:	ed93 7b00 	vldr	d7, [r3]
 801252c:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012530:	f241 22b8 	movw	r2, #4792	; 0x12b8
 8012534:	443a      	add	r2, r7
 8012536:	f241 23b0 	movw	r3, #4784	; 0x12b0
 801253a:	443b      	add	r3, r7
 801253c:	ed92 4b00 	vldr	d4, [r2]
 8012540:	ed93 7b00 	vldr	d7, [r3]
 8012544:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012548:	ee35 7b07 	vadd.f64	d7, d5, d7
 801254c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012550:	f507 5395 	add.w	r3, r7, #4768	; 0x12a0
 8012554:	ed93 5b00 	vldr	d5, [r3]
 8012558:	f241 3318 	movw	r3, #4888	; 0x1318
 801255c:	443b      	add	r3, r7
 801255e:	ed93 7b00 	vldr	d7, [r3]
 8012562:	ee25 5b07 	vmul.f64	d5, d5, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 8012566:	f241 2250 	movw	r2, #4688	; 0x1250
 801256a:	443a      	add	r2, r7
 801256c:	f241 23a8 	movw	r3, #4776	; 0x12a8
 8012570:	443b      	add	r3, r7
 8012572:	ed92 4b00 	vldr	d4, [r2]
 8012576:	ed93 7b00 	vldr	d7, [r3]
 801257a:	ee24 7b07 	vmul.f64	d7, d4, d7
              - (t72_re * t55_re + t74_re * t74_im)) + (t58_im * t85_im + t60_re
 801257e:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012582:	ee36 6b07 	vadd.f64	d6, d6, d7
              * t76_re)) + (t12_re * t23_re + t12_im * b_t10_re)) - (t16_re *
 8012586:	f241 3388 	movw	r3, #5000	; 0x1388
 801258a:	443b      	add	r3, r7
 801258c:	ed93 5b00 	vldr	d5, [r3]
 8012590:	f241 3330 	movw	r3, #4912	; 0x1330
 8012594:	443b      	add	r3, r7
 8012596:	ed93 7b00 	vldr	d7, [r3]
 801259a:	ee25 5b07 	vmul.f64	d5, d5, d7
 801259e:	f507 539c 	add.w	r3, r7, #4992	; 0x1380
 80125a2:	ed93 4b00 	vldr	d4, [r3]
 80125a6:	f241 3338 	movw	r3, #4920	; 0x1338
 80125aa:	443b      	add	r3, r7
 80125ac:	ed93 7b00 	vldr	d7, [r3]
 80125b0:	ee24 7b07 	vmul.f64	d7, d4, d7
 80125b4:	ee35 7b07 	vadd.f64	d7, d5, d7
 80125b8:	ee36 6b07 	vadd.f64	d6, d6, d7
 80125bc:	f241 3368 	movw	r3, #4968	; 0x1368
 80125c0:	443b      	add	r3, r7
 80125c2:	ed93 5b00 	vldr	d5, [r3]
 80125c6:	f507 539a 	add.w	r3, r7, #4928	; 0x1340
 80125ca:	ed93 7b00 	vldr	d7, [r3]
 80125ce:	ee25 5b07 	vmul.f64	d5, d5, d7
    t20_im + t16_im * t20_re);
 80125d2:	f507 539b 	add.w	r3, r7, #4960	; 0x1360
 80125d6:	ed93 4b00 	vldr	d4, [r3]
 80125da:	f241 3348 	movw	r3, #4936	; 0x1348
 80125de:	443b      	add	r3, r7
 80125e0:	ed93 7b00 	vldr	d7, [r3]
 80125e4:	ee24 7b07 	vmul.f64	d7, d4, d7
 80125e8:	ee35 7b07 	vadd.f64	d7, d5, d7
  t34_re = ((((t268.im * 3.749399456654644E-33 + t269.im * 3.749399456654644E-33)
 80125ec:	ee36 7b47 	vsub.f64	d7, d6, d7
 80125f0:	f241 33b8 	movw	r3, #5048	; 0x13b8
 80125f4:	443b      	add	r3, r7
 80125f6:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 80125fa:	4b2e      	ldr	r3, [pc, #184]	; (80126b4 <G_q+0x100ec>)
 80125fc:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012600:	443a      	add	r2, r7
 8012602:	4413      	add	r3, r2
 8012604:	ed93 7b00 	vldr	d7, [r3]
 8012608:	eeb1 6b47 	vneg.f64	d6, d7
 801260c:	f241 23c8 	movw	r3, #4808	; 0x12c8
 8012610:	443b      	add	r3, r7
 8012612:	ed93 5b00 	vldr	d5, [r3]
 8012616:	f241 23d8 	movw	r3, #4824	; 0x12d8
 801261a:	443b      	add	r3, r7
 801261c:	ed93 7b00 	vldr	d7, [r3]
 8012620:	ee25 5b07 	vmul.f64	d5, d5, d7
 8012624:	f241 23d0 	movw	r3, #4816	; 0x12d0
 8012628:	443b      	add	r3, r7
 801262a:	f241 22f8 	movw	r2, #4856	; 0x12f8
 801262e:	443a      	add	r2, r7
 8012630:	ed92 4b00 	vldr	d4, [r2]
 8012634:	ed93 7b00 	vldr	d7, [r3]
 8012638:	ee24 7b07 	vmul.f64	d7, d4, d7
 801263c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012640:	ed9f 5b19 	vldr	d5, [pc, #100]	; 80126a8 <G_q+0x100e0>
 8012644:	ee27 5b05 	vmul.f64	d5, d7, d5
 8012648:	f241 33b0 	movw	r3, #5040	; 0x13b0
 801264c:	443b      	add	r3, r7
 801264e:	ed93 4b00 	vldr	d4, [r3]
 8012652:	f241 3370 	movw	r3, #4976	; 0x1370
 8012656:	443b      	add	r3, r7
 8012658:	ed93 7b00 	vldr	d7, [r3]
 801265c:	ee24 4b07 	vmul.f64	d4, d4, d7
    t13_im - t13_re * t34_re) * 0.0215);
 8012660:	f241 3378 	movw	r3, #4984	; 0x1378
 8012664:	443b      	add	r3, r7
 8012666:	ed93 3b00 	vldr	d3, [r3]
 801266a:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801266e:	443b      	add	r3, r7
 8012670:	ed93 7b00 	vldr	d7, [r3]
 8012674:	ee23 7b07 	vmul.f64	d7, d3, d7
 8012678:	ee34 7b47 	vsub.f64	d7, d4, d7
 801267c:	ed9f 4b0a 	vldr	d4, [pc, #40]	; 80126a8 <G_q+0x100e0>
 8012680:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].re = -g * ((t70_im * t55_im - t43_im * t70_re) * 0.0215 + (t34_im *
 8012684:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012688:	e016      	b.n	80126b8 <G_q+0x100f0>
 801268a:	bf00      	nop
 801268c:	f3af 8000 	nop.w
 8012690:	858a5d48 	.word	0x858a5d48
 8012694:	394377ce 	.word	0x394377ce
	...
 80126a0:	858a5d48 	.word	0x858a5d48
 80126a4:	393377ce 	.word	0x393377ce
 80126a8:	9374bc6a 	.word	0x9374bc6a
 80126ac:	3f960418 	.word	0x3f960418
 80126b0:	ffffed30 	.word	0xffffed30
 80126b4:	ffffec58 	.word	0xffffec58
 80126b8:	4b41      	ldr	r3, [pc, #260]	; (80127c0 <G_q+0x101f8>)
 80126ba:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80126be:	443a      	add	r2, r7
 80126c0:	4413      	add	r3, r2
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	3340      	adds	r3, #64	; 0x40
 80126c6:	ee26 7b07 	vmul.f64	d7, d6, d7
 80126ca:	ed83 7b00 	vstr	d7, [r3]
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 80126ce:	4b3d      	ldr	r3, [pc, #244]	; (80127c4 <G_q+0x101fc>)
 80126d0:	f241 32d0 	movw	r2, #5072	; 0x13d0
 80126d4:	443a      	add	r2, r7
 80126d6:	4413      	add	r3, r2
 80126d8:	ed93 7b00 	vldr	d7, [r3]
 80126dc:	eeb1 6b47 	vneg.f64	d6, d7
 80126e0:	f241 22c8 	movw	r2, #4808	; 0x12c8
 80126e4:	443a      	add	r2, r7
 80126e6:	f241 23d0 	movw	r3, #4816	; 0x12d0
 80126ea:	443b      	add	r3, r7
 80126ec:	ed92 5b00 	vldr	d5, [r2]
 80126f0:	ed93 7b00 	vldr	d7, [r3]
 80126f4:	ee25 5b07 	vmul.f64	d5, d5, d7
 80126f8:	f241 23f8 	movw	r3, #4856	; 0x12f8
 80126fc:	443b      	add	r3, r7
 80126fe:	ed93 4b00 	vldr	d4, [r3]
 8012702:	f241 23d8 	movw	r3, #4824	; 0x12d8
 8012706:	443b      	add	r3, r7
 8012708:	ed93 7b00 	vldr	d7, [r3]
 801270c:	ee24 7b07 	vmul.f64	d7, d4, d7
 8012710:	ee35 7b07 	vadd.f64	d7, d5, d7
 8012714:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80127b8 <G_q+0x101f0>
 8012718:	ee27 5b05 	vmul.f64	d5, d7, d5
 801271c:	f241 33b0 	movw	r3, #5040	; 0x13b0
 8012720:	443b      	add	r3, r7
 8012722:	ed93 4b00 	vldr	d4, [r3]
 8012726:	f241 33b8 	movw	r3, #5048	; 0x13b8
 801272a:	443b      	add	r3, r7
 801272c:	ed93 7b00 	vldr	d7, [r3]
 8012730:	ee24 4b07 	vmul.f64	d4, d4, d7
    t34_re + t13_re * t13_im) * 0.0215);
 8012734:	f241 3378 	movw	r3, #4984	; 0x1378
 8012738:	443b      	add	r3, r7
 801273a:	ed93 3b00 	vldr	d3, [r3]
 801273e:	f241 3370 	movw	r3, #4976	; 0x1370
 8012742:	443b      	add	r3, r7
 8012744:	ed93 7b00 	vldr	d7, [r3]
 8012748:	ee23 7b07 	vmul.f64	d7, d3, d7
 801274c:	ee34 7b07 	vadd.f64	d7, d4, d7
 8012750:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80127b8 <G_q+0x101f0>
 8012754:	ee27 7b04 	vmul.f64	d7, d7, d4
  b_G_q[4].im = -g * ((t70_im * t70_re + t43_im * t55_im) * 0.0215 + (t34_im *
 8012758:	ee35 7b07 	vadd.f64	d7, d5, d7
 801275c:	4b18      	ldr	r3, [pc, #96]	; (80127c0 <G_q+0x101f8>)
 801275e:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012762:	443a      	add	r2, r7
 8012764:	4413      	add	r3, r2
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	3340      	adds	r3, #64	; 0x40
 801276a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801276e:	ed83 7b02 	vstr	d7, [r3, #8]
  b_G_q[5].re = 0.0;
 8012772:	4b13      	ldr	r3, [pc, #76]	; (80127c0 <G_q+0x101f8>)
 8012774:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012778:	443a      	add	r2, r7
 801277a:	4413      	add	r3, r2
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8012782:	f04f 0300 	mov.w	r3, #0
 8012786:	f04f 0400 	mov.w	r4, #0
 801278a:	e9c2 3400 	strd	r3, r4, [r2]
  b_G_q[5].im = 0.0;
 801278e:	4b0c      	ldr	r3, [pc, #48]	; (80127c0 <G_q+0x101f8>)
 8012790:	f241 32d0 	movw	r2, #5072	; 0x13d0
 8012794:	443a      	add	r2, r7
 8012796:	4413      	add	r3, r2
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 801279e:	f04f 0300 	mov.w	r3, #0
 80127a2:	f04f 0400 	mov.w	r4, #0
 80127a6:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 80127aa:	bf00      	nop
 80127ac:	f507 579e 	add.w	r7, r7, #5056	; 0x13c0
 80127b0:	3714      	adds	r7, #20
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd90      	pop	{r4, r7, pc}
 80127b6:	bf00      	nop
 80127b8:	9374bc6a 	.word	0x9374bc6a
 80127bc:	3f960418 	.word	0x3f960418
 80127c0:	ffffec34 	.word	0xffffec34
 80127c4:	ffffec58 	.word	0xffffec58

080127c8 <G_q_initialize>:
/*
 * Arguments    : void
 * Return Type  : void
 */
void G_q_initialize(void)
{
 80127c8:	b580      	push	{r7, lr}
 80127ca:	af00      	add	r7, sp, #0
  rt_InitInfAndNaN();
 80127cc:	f000 f88e 	bl	80128ec <rt_InitInfAndNaN>
  isInitialized_G_q = true;
 80127d0:	4b02      	ldr	r3, [pc, #8]	; (80127dc <G_q_initialize+0x14>)
 80127d2:	2201      	movs	r2, #1
 80127d4:	701a      	strb	r2, [r3, #0]
}
 80127d6:	bf00      	nop
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	24000304 	.word	0x24000304

080127e0 <b_exp>:
/*
 * Arguments    : creal_T *x
 * Return Type  : void
 */
void b_exp(creal_T *x)
{
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b087      	sub	sp, #28
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	6078      	str	r0, [r7, #4]
  double r;
  double d;
  if (x->im == 0.0) {
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	ed93 7b02 	vldr	d7, [r3, #8]
 80127ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80127f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80127f6:	d113      	bne.n	8012820 <b_exp+0x40>
    x->re = exp(x->re);
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	ed93 7b00 	vldr	d7, [r3]
 80127fe:	eeb0 0b47 	vmov.f64	d0, d7
 8012802:	f00b ff15 	bl	801e630 <exp>
 8012806:	eeb0 7b40 	vmov.f64	d7, d0
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	ed83 7b00 	vstr	d7, [r3]
    x->im = 0.0;
 8012810:	687a      	ldr	r2, [r7, #4]
 8012812:	f04f 0300 	mov.w	r3, #0
 8012816:	f04f 0400 	mov.w	r4, #0
 801281a:	e9c2 3402 	strd	r3, r4, [r2, #8]
    r = exp(x->re / 2.0);
    d = x->im;
    x->re = r * (r * cos(x->im));
    x->im = r * (r * sin(d));
  }
}
 801281e:	e061      	b.n	80128e4 <b_exp+0x104>
  } else if (rtIsInf(x->im) && rtIsInf(x->re) && (x->re < 0.0)) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	ed93 7b02 	vldr	d7, [r3, #8]
 8012826:	eeb0 0b47 	vmov.f64	d0, d7
 801282a:	f000 f899 	bl	8012960 <rtIsInf>
 801282e:	4603      	mov	r3, r0
 8012830:	2b00      	cmp	r3, #0
 8012832:	d020      	beq.n	8012876 <b_exp+0x96>
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	ed93 7b00 	vldr	d7, [r3]
 801283a:	eeb0 0b47 	vmov.f64	d0, d7
 801283e:	f000 f88f 	bl	8012960 <rtIsInf>
 8012842:	4603      	mov	r3, r0
 8012844:	2b00      	cmp	r3, #0
 8012846:	d016      	beq.n	8012876 <b_exp+0x96>
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	ed93 7b00 	vldr	d7, [r3]
 801284e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012856:	d50e      	bpl.n	8012876 <b_exp+0x96>
    x->re = 0.0;
 8012858:	687a      	ldr	r2, [r7, #4]
 801285a:	f04f 0300 	mov.w	r3, #0
 801285e:	f04f 0400 	mov.w	r4, #0
 8012862:	e9c2 3400 	strd	r3, r4, [r2]
    x->im = 0.0;
 8012866:	687a      	ldr	r2, [r7, #4]
 8012868:	f04f 0300 	mov.w	r3, #0
 801286c:	f04f 0400 	mov.w	r4, #0
 8012870:	e9c2 3402 	strd	r3, r4, [r2, #8]
}
 8012874:	e036      	b.n	80128e4 <b_exp+0x104>
    r = exp(x->re / 2.0);
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	ed93 7b00 	vldr	d7, [r3]
 801287c:	eeb0 6b00 	vmov.f64	d6, #0	; 0x40000000  2.0
 8012880:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012884:	eeb0 0b45 	vmov.f64	d0, d5
 8012888:	f00b fed2 	bl	801e630 <exp>
 801288c:	ed87 0b04 	vstr	d0, [r7, #16]
    d = x->im;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8012896:	e9c7 3402 	strd	r3, r4, [r7, #8]
    x->re = r * (r * cos(x->im));
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	ed93 7b02 	vldr	d7, [r3, #8]
 80128a0:	eeb0 0b47 	vmov.f64	d0, d7
 80128a4:	f00b fe4c 	bl	801e540 <cos>
 80128a8:	eeb0 6b40 	vmov.f64	d6, d0
 80128ac:	ed97 7b04 	vldr	d7, [r7, #16]
 80128b0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80128b4:	ed97 7b04 	vldr	d7, [r7, #16]
 80128b8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	ed83 7b00 	vstr	d7, [r3]
    x->im = r * (r * sin(d));
 80128c2:	ed97 0b02 	vldr	d0, [r7, #8]
 80128c6:	f00b fe77 	bl	801e5b8 <sin>
 80128ca:	eeb0 6b40 	vmov.f64	d6, d0
 80128ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80128d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80128d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80128da:	ee26 7b07 	vmul.f64	d7, d6, d7
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80128e4:	bf00      	nop
 80128e6:	371c      	adds	r7, #28
 80128e8:	46bd      	mov	sp, r7
 80128ea:	bd90      	pop	{r4, r7, pc}

080128ec <rt_InitInfAndNaN>:
#pragma warning(disable: 4756 56)

#endif

void rt_InitInfAndNaN()
{
 80128ec:	b490      	push	{r4, r7}
 80128ee:	af00      	add	r7, sp, #0
  rtNaN = nan("");
 80128f0:	4a0f      	ldr	r2, [pc, #60]	; (8012930 <rt_InitInfAndNaN+0x44>)
 80128f2:	f04f 0300 	mov.w	r3, #0
 80128f6:	4c0f      	ldr	r4, [pc, #60]	; (8012934 <rt_InitInfAndNaN+0x48>)
 80128f8:	e9c2 3400 	strd	r3, r4, [r2]
  rtNaNF = nanf("");
 80128fc:	4b0e      	ldr	r3, [pc, #56]	; (8012938 <rt_InitInfAndNaN+0x4c>)
 80128fe:	4a0f      	ldr	r2, [pc, #60]	; (801293c <rt_InitInfAndNaN+0x50>)
 8012900:	601a      	str	r2, [r3, #0]
  rtInf = (real_T)INFINITY;
 8012902:	4a0f      	ldr	r2, [pc, #60]	; (8012940 <rt_InitInfAndNaN+0x54>)
 8012904:	f04f 0300 	mov.w	r3, #0
 8012908:	4c0e      	ldr	r4, [pc, #56]	; (8012944 <rt_InitInfAndNaN+0x58>)
 801290a:	e9c2 3400 	strd	r3, r4, [r2]
  rtInfF = (real32_T)INFINITY;
 801290e:	4b0e      	ldr	r3, [pc, #56]	; (8012948 <rt_InitInfAndNaN+0x5c>)
 8012910:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8012914:	601a      	str	r2, [r3, #0]
  rtMinusInf = -(real_T)INFINITY;
 8012916:	4a0d      	ldr	r2, [pc, #52]	; (801294c <rt_InitInfAndNaN+0x60>)
 8012918:	f04f 0300 	mov.w	r3, #0
 801291c:	4c0c      	ldr	r4, [pc, #48]	; (8012950 <rt_InitInfAndNaN+0x64>)
 801291e:	e9c2 3400 	strd	r3, r4, [r2]
  rtMinusInfF = -(real32_T)INFINITY;
 8012922:	4b0c      	ldr	r3, [pc, #48]	; (8012954 <rt_InitInfAndNaN+0x68>)
 8012924:	4a0c      	ldr	r2, [pc, #48]	; (8012958 <rt_InitInfAndNaN+0x6c>)
 8012926:	601a      	str	r2, [r3, #0]

#pragma warning(default: 4756 56)

#endif

}
 8012928:	bf00      	nop
 801292a:	46bd      	mov	sp, r7
 801292c:	bc90      	pop	{r4, r7}
 801292e:	4770      	bx	lr
 8012930:	24000680 	.word	0x24000680
 8012934:	7ff80000 	.word	0x7ff80000
 8012938:	24000670 	.word	0x24000670
 801293c:	7fc00000 	.word	0x7fc00000
 8012940:	24000678 	.word	0x24000678
 8012944:	7ff00000 	.word	0x7ff00000
 8012948:	24000674 	.word	0x24000674
 801294c:	24000688 	.word	0x24000688
 8012950:	fff00000 	.word	0xfff00000
 8012954:	24000690 	.word	0x24000690
 8012958:	ff800000 	.word	0xff800000
 801295c:	00000000 	.word	0x00000000

08012960 <rtIsInf>:
/* Function: rtIsInf ==================================================
 * Abstract:
 * Test if value is infinite
 */
boolean_T rtIsInf(real_T value)
{
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	ed87 0b00 	vstr	d0, [r7]
  return (isinf(value) ? 1U : 0U);
 801296a:	ed97 7b00 	vldr	d7, [r7]
 801296e:	eeb0 7bc7 	vabs.f64	d7, d7
 8012972:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80129a0 <rtIsInf+0x40>
 8012976:	eeb4 7b46 	vcmp.f64	d7, d6
 801297a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801297e:	bfd4      	ite	le
 8012980:	2301      	movle	r3, #1
 8012982:	2300      	movgt	r3, #0
 8012984:	b2db      	uxtb	r3, r3
 8012986:	f083 0301 	eor.w	r3, r3, #1
 801298a:	b2db      	uxtb	r3, r3
 801298c:	b2db      	uxtb	r3, r3
}
 801298e:	4618      	mov	r0, r3
 8012990:	370c      	adds	r7, #12
 8012992:	46bd      	mov	sp, r7
 8012994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012998:	4770      	bx	lr
 801299a:	bf00      	nop
 801299c:	f3af 8000 	nop.w
 80129a0:	ffffffff 	.word	0xffffffff
 80129a4:	7fefffff 	.word	0x7fefffff

080129a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80129ae:	2003      	movs	r0, #3
 80129b0:	f000 f98a 	bl	8012cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80129b4:	f002 fdba 	bl	801552c <HAL_RCC_GetSysClockFreq>
 80129b8:	4601      	mov	r1, r0
 80129ba:	4b15      	ldr	r3, [pc, #84]	; (8012a10 <HAL_Init+0x68>)
 80129bc:	699b      	ldr	r3, [r3, #24]
 80129be:	0a1b      	lsrs	r3, r3, #8
 80129c0:	f003 030f 	and.w	r3, r3, #15
 80129c4:	4a13      	ldr	r2, [pc, #76]	; (8012a14 <HAL_Init+0x6c>)
 80129c6:	5cd3      	ldrb	r3, [r2, r3]
 80129c8:	f003 031f 	and.w	r3, r3, #31
 80129cc:	fa21 f303 	lsr.w	r3, r1, r3
 80129d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80129d2:	4b0f      	ldr	r3, [pc, #60]	; (8012a10 <HAL_Init+0x68>)
 80129d4:	699b      	ldr	r3, [r3, #24]
 80129d6:	f003 030f 	and.w	r3, r3, #15
 80129da:	4a0e      	ldr	r2, [pc, #56]	; (8012a14 <HAL_Init+0x6c>)
 80129dc:	5cd3      	ldrb	r3, [r2, r3]
 80129de:	f003 031f 	and.w	r3, r3, #31
 80129e2:	687a      	ldr	r2, [r7, #4]
 80129e4:	fa22 f303 	lsr.w	r3, r2, r3
 80129e8:	4a0b      	ldr	r2, [pc, #44]	; (8012a18 <HAL_Init+0x70>)
 80129ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80129ec:	4a0b      	ldr	r2, [pc, #44]	; (8012a1c <HAL_Init+0x74>)
 80129ee:	687b      	ldr	r3, [r7, #4]
 80129f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80129f2:	2000      	movs	r0, #0
 80129f4:	f000 f814 	bl	8012a20 <HAL_InitTick>
 80129f8:	4603      	mov	r3, r0
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d001      	beq.n	8012a02 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80129fe:	2301      	movs	r3, #1
 8012a00:	e002      	b.n	8012a08 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8012a02:	f7ef fa97 	bl	8001f34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8012a06:	2300      	movs	r3, #0
}
 8012a08:	4618      	mov	r0, r3
 8012a0a:	3708      	adds	r7, #8
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	58024400 	.word	0x58024400
 8012a14:	0801f638 	.word	0x0801f638
 8012a18:	2400000c 	.word	0x2400000c
 8012a1c:	24000008 	.word	0x24000008

08012a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8012a28:	4b15      	ldr	r3, [pc, #84]	; (8012a80 <HAL_InitTick+0x60>)
 8012a2a:	781b      	ldrb	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d101      	bne.n	8012a34 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8012a30:	2301      	movs	r3, #1
 8012a32:	e021      	b.n	8012a78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8012a34:	4b13      	ldr	r3, [pc, #76]	; (8012a84 <HAL_InitTick+0x64>)
 8012a36:	681a      	ldr	r2, [r3, #0]
 8012a38:	4b11      	ldr	r3, [pc, #68]	; (8012a80 <HAL_InitTick+0x60>)
 8012a3a:	781b      	ldrb	r3, [r3, #0]
 8012a3c:	4619      	mov	r1, r3
 8012a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012a42:	fbb3 f3f1 	udiv	r3, r3, r1
 8012a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f000 f96f 	bl	8012d2e <HAL_SYSTICK_Config>
 8012a50:	4603      	mov	r3, r0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d001      	beq.n	8012a5a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8012a56:	2301      	movs	r3, #1
 8012a58:	e00e      	b.n	8012a78 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b0f      	cmp	r3, #15
 8012a5e:	d80a      	bhi.n	8012a76 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012a60:	2200      	movs	r2, #0
 8012a62:	6879      	ldr	r1, [r7, #4]
 8012a64:	f04f 30ff 	mov.w	r0, #4294967295
 8012a68:	f000 f939 	bl	8012cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012a6c:	4a06      	ldr	r2, [pc, #24]	; (8012a88 <HAL_InitTick+0x68>)
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8012a72:	2300      	movs	r3, #0
 8012a74:	e000      	b.n	8012a78 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8012a76:	2301      	movs	r3, #1
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3708      	adds	r7, #8
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}
 8012a80:	24000014 	.word	0x24000014
 8012a84:	24000008 	.word	0x24000008
 8012a88:	24000010 	.word	0x24000010

08012a8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012a90:	4b06      	ldr	r3, [pc, #24]	; (8012aac <HAL_IncTick+0x20>)
 8012a92:	781b      	ldrb	r3, [r3, #0]
 8012a94:	461a      	mov	r2, r3
 8012a96:	4b06      	ldr	r3, [pc, #24]	; (8012ab0 <HAL_IncTick+0x24>)
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	4413      	add	r3, r2
 8012a9c:	4a04      	ldr	r2, [pc, #16]	; (8012ab0 <HAL_IncTick+0x24>)
 8012a9e:	6013      	str	r3, [r2, #0]
}
 8012aa0:	bf00      	nop
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr
 8012aaa:	bf00      	nop
 8012aac:	24000014 	.word	0x24000014
 8012ab0:	24000694 	.word	0x24000694

08012ab4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012ab4:	b480      	push	{r7}
 8012ab6:	af00      	add	r7, sp, #0
  return uwTick;
 8012ab8:	4b03      	ldr	r3, [pc, #12]	; (8012ac8 <HAL_GetTick+0x14>)
 8012aba:	681b      	ldr	r3, [r3, #0]
}
 8012abc:	4618      	mov	r0, r3
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ac4:	4770      	bx	lr
 8012ac6:	bf00      	nop
 8012ac8:	24000694 	.word	0x24000694

08012acc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b084      	sub	sp, #16
 8012ad0:	af00      	add	r7, sp, #0
 8012ad2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8012ad4:	f7ff ffee 	bl	8012ab4 <HAL_GetTick>
 8012ad8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8012ade:	68fb      	ldr	r3, [r7, #12]
 8012ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ae4:	d005      	beq.n	8012af2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8012ae6:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <HAL_Delay+0x40>)
 8012ae8:	781b      	ldrb	r3, [r3, #0]
 8012aea:	461a      	mov	r2, r3
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	4413      	add	r3, r2
 8012af0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8012af2:	bf00      	nop
 8012af4:	f7ff ffde 	bl	8012ab4 <HAL_GetTick>
 8012af8:	4602      	mov	r2, r0
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	1ad3      	subs	r3, r2, r3
 8012afe:	68fa      	ldr	r2, [r7, #12]
 8012b00:	429a      	cmp	r2, r3
 8012b02:	d8f7      	bhi.n	8012af4 <HAL_Delay+0x28>
  {
  }
}
 8012b04:	bf00      	nop
 8012b06:	3710      	adds	r7, #16
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}
 8012b0c:	24000014 	.word	0x24000014

08012b10 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8012b10:	b480      	push	{r7}
 8012b12:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8012b14:	4b03      	ldr	r3, [pc, #12]	; (8012b24 <HAL_GetREVID+0x14>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	0c1b      	lsrs	r3, r3, #16
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b22:	4770      	bx	lr
 8012b24:	5c001000 	.word	0x5c001000

08012b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012b28:	b480      	push	{r7}
 8012b2a:	b085      	sub	sp, #20
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f003 0307 	and.w	r3, r3, #7
 8012b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012b38:	4b0b      	ldr	r3, [pc, #44]	; (8012b68 <__NVIC_SetPriorityGrouping+0x40>)
 8012b3a:	68db      	ldr	r3, [r3, #12]
 8012b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012b3e:	68ba      	ldr	r2, [r7, #8]
 8012b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8012b44:	4013      	ands	r3, r2
 8012b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8012b50:	4b06      	ldr	r3, [pc, #24]	; (8012b6c <__NVIC_SetPriorityGrouping+0x44>)
 8012b52:	4313      	orrs	r3, r2
 8012b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012b56:	4a04      	ldr	r2, [pc, #16]	; (8012b68 <__NVIC_SetPriorityGrouping+0x40>)
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	60d3      	str	r3, [r2, #12]
}
 8012b5c:	bf00      	nop
 8012b5e:	3714      	adds	r7, #20
 8012b60:	46bd      	mov	sp, r7
 8012b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b66:	4770      	bx	lr
 8012b68:	e000ed00 	.word	0xe000ed00
 8012b6c:	05fa0000 	.word	0x05fa0000

08012b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012b70:	b480      	push	{r7}
 8012b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012b74:	4b04      	ldr	r3, [pc, #16]	; (8012b88 <__NVIC_GetPriorityGrouping+0x18>)
 8012b76:	68db      	ldr	r3, [r3, #12]
 8012b78:	0a1b      	lsrs	r3, r3, #8
 8012b7a:	f003 0307 	and.w	r3, r3, #7
}
 8012b7e:	4618      	mov	r0, r3
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr
 8012b88:	e000ed00 	.word	0xe000ed00

08012b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012b8c:	b480      	push	{r7}
 8012b8e:	b083      	sub	sp, #12
 8012b90:	af00      	add	r7, sp, #0
 8012b92:	4603      	mov	r3, r0
 8012b94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	db0b      	blt.n	8012bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012b9e:	88fb      	ldrh	r3, [r7, #6]
 8012ba0:	f003 021f 	and.w	r2, r3, #31
 8012ba4:	4907      	ldr	r1, [pc, #28]	; (8012bc4 <__NVIC_EnableIRQ+0x38>)
 8012ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012baa:	095b      	lsrs	r3, r3, #5
 8012bac:	2001      	movs	r0, #1
 8012bae:	fa00 f202 	lsl.w	r2, r0, r2
 8012bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8012bb6:	bf00      	nop
 8012bb8:	370c      	adds	r7, #12
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bc0:	4770      	bx	lr
 8012bc2:	bf00      	nop
 8012bc4:	e000e100 	.word	0xe000e100

08012bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012bc8:	b480      	push	{r7}
 8012bca:	b083      	sub	sp, #12
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	4603      	mov	r3, r0
 8012bd0:	6039      	str	r1, [r7, #0]
 8012bd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	db0a      	blt.n	8012bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012bdc:	683b      	ldr	r3, [r7, #0]
 8012bde:	b2da      	uxtb	r2, r3
 8012be0:	490c      	ldr	r1, [pc, #48]	; (8012c14 <__NVIC_SetPriority+0x4c>)
 8012be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012be6:	0112      	lsls	r2, r2, #4
 8012be8:	b2d2      	uxtb	r2, r2
 8012bea:	440b      	add	r3, r1
 8012bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012bf0:	e00a      	b.n	8012c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	b2da      	uxtb	r2, r3
 8012bf6:	4908      	ldr	r1, [pc, #32]	; (8012c18 <__NVIC_SetPriority+0x50>)
 8012bf8:	88fb      	ldrh	r3, [r7, #6]
 8012bfa:	f003 030f 	and.w	r3, r3, #15
 8012bfe:	3b04      	subs	r3, #4
 8012c00:	0112      	lsls	r2, r2, #4
 8012c02:	b2d2      	uxtb	r2, r2
 8012c04:	440b      	add	r3, r1
 8012c06:	761a      	strb	r2, [r3, #24]
}
 8012c08:	bf00      	nop
 8012c0a:	370c      	adds	r7, #12
 8012c0c:	46bd      	mov	sp, r7
 8012c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c12:	4770      	bx	lr
 8012c14:	e000e100 	.word	0xe000e100
 8012c18:	e000ed00 	.word	0xe000ed00

08012c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b089      	sub	sp, #36	; 0x24
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	f003 0307 	and.w	r3, r3, #7
 8012c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	f1c3 0307 	rsb	r3, r3, #7
 8012c36:	2b04      	cmp	r3, #4
 8012c38:	bf28      	it	cs
 8012c3a:	2304      	movcs	r3, #4
 8012c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012c3e:	69fb      	ldr	r3, [r7, #28]
 8012c40:	3304      	adds	r3, #4
 8012c42:	2b06      	cmp	r3, #6
 8012c44:	d902      	bls.n	8012c4c <NVIC_EncodePriority+0x30>
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	3b03      	subs	r3, #3
 8012c4a:	e000      	b.n	8012c4e <NVIC_EncodePriority+0x32>
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012c50:	f04f 32ff 	mov.w	r2, #4294967295
 8012c54:	69bb      	ldr	r3, [r7, #24]
 8012c56:	fa02 f303 	lsl.w	r3, r2, r3
 8012c5a:	43da      	mvns	r2, r3
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	401a      	ands	r2, r3
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012c64:	f04f 31ff 	mov.w	r1, #4294967295
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8012c6e:	43d9      	mvns	r1, r3
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012c74:	4313      	orrs	r3, r2
         );
}
 8012c76:	4618      	mov	r0, r3
 8012c78:	3724      	adds	r7, #36	; 0x24
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr
	...

08012c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b082      	sub	sp, #8
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	3b01      	subs	r3, #1
 8012c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8012c94:	d301      	bcc.n	8012c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8012c96:	2301      	movs	r3, #1
 8012c98:	e00f      	b.n	8012cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012c9a:	4a0a      	ldr	r2, [pc, #40]	; (8012cc4 <SysTick_Config+0x40>)
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	3b01      	subs	r3, #1
 8012ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8012ca2:	210f      	movs	r1, #15
 8012ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca8:	f7ff ff8e 	bl	8012bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012cac:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <SysTick_Config+0x40>)
 8012cae:	2200      	movs	r2, #0
 8012cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012cb2:	4b04      	ldr	r3, [pc, #16]	; (8012cc4 <SysTick_Config+0x40>)
 8012cb4:	2207      	movs	r2, #7
 8012cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012cb8:	2300      	movs	r3, #0
}
 8012cba:	4618      	mov	r0, r3
 8012cbc:	3708      	adds	r7, #8
 8012cbe:	46bd      	mov	sp, r7
 8012cc0:	bd80      	pop	{r7, pc}
 8012cc2:	bf00      	nop
 8012cc4:	e000e010 	.word	0xe000e010

08012cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f7ff ff29 	bl	8012b28 <__NVIC_SetPriorityGrouping>
}
 8012cd6:	bf00      	nop
 8012cd8:	3708      	adds	r7, #8
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012cde:	b580      	push	{r7, lr}
 8012ce0:	b086      	sub	sp, #24
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	4603      	mov	r3, r0
 8012ce6:	60b9      	str	r1, [r7, #8]
 8012ce8:	607a      	str	r2, [r7, #4]
 8012cea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012cec:	f7ff ff40 	bl	8012b70 <__NVIC_GetPriorityGrouping>
 8012cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012cf2:	687a      	ldr	r2, [r7, #4]
 8012cf4:	68b9      	ldr	r1, [r7, #8]
 8012cf6:	6978      	ldr	r0, [r7, #20]
 8012cf8:	f7ff ff90 	bl	8012c1c <NVIC_EncodePriority>
 8012cfc:	4602      	mov	r2, r0
 8012cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012d02:	4611      	mov	r1, r2
 8012d04:	4618      	mov	r0, r3
 8012d06:	f7ff ff5f 	bl	8012bc8 <__NVIC_SetPriority>
}
 8012d0a:	bf00      	nop
 8012d0c:	3718      	adds	r7, #24
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}

08012d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012d12:	b580      	push	{r7, lr}
 8012d14:	b082      	sub	sp, #8
 8012d16:	af00      	add	r7, sp, #0
 8012d18:	4603      	mov	r3, r0
 8012d1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012d20:	4618      	mov	r0, r3
 8012d22:	f7ff ff33 	bl	8012b8c <__NVIC_EnableIRQ>
}
 8012d26:	bf00      	nop
 8012d28:	3708      	adds	r7, #8
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}

08012d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7ff ffa4 	bl	8012c84 <SysTick_Config>
 8012d3c:	4603      	mov	r3, r0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
	...

08012d48 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d101      	bne.n	8012d5a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8012d56:	2301      	movs	r3, #1
 8012d58:	e205      	b.n	8013166 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012d60:	b2db      	uxtb	r3, r3
 8012d62:	2b02      	cmp	r3, #2
 8012d64:	d004      	beq.n	8012d70 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	2280      	movs	r2, #128	; 0x80
 8012d6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8012d6c:	2301      	movs	r3, #1
 8012d6e:	e1fa      	b.n	8013166 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	4a8c      	ldr	r2, [pc, #560]	; (8012fa8 <HAL_DMA_Abort_IT+0x260>)
 8012d76:	4293      	cmp	r3, r2
 8012d78:	d04a      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	681b      	ldr	r3, [r3, #0]
 8012d7e:	4a8b      	ldr	r2, [pc, #556]	; (8012fac <HAL_DMA_Abort_IT+0x264>)
 8012d80:	4293      	cmp	r3, r2
 8012d82:	d045      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	4a89      	ldr	r2, [pc, #548]	; (8012fb0 <HAL_DMA_Abort_IT+0x268>)
 8012d8a:	4293      	cmp	r3, r2
 8012d8c:	d040      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	4a88      	ldr	r2, [pc, #544]	; (8012fb4 <HAL_DMA_Abort_IT+0x26c>)
 8012d94:	4293      	cmp	r3, r2
 8012d96:	d03b      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	4a86      	ldr	r2, [pc, #536]	; (8012fb8 <HAL_DMA_Abort_IT+0x270>)
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d036      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	681b      	ldr	r3, [r3, #0]
 8012da6:	4a85      	ldr	r2, [pc, #532]	; (8012fbc <HAL_DMA_Abort_IT+0x274>)
 8012da8:	4293      	cmp	r3, r2
 8012daa:	d031      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	4a83      	ldr	r2, [pc, #524]	; (8012fc0 <HAL_DMA_Abort_IT+0x278>)
 8012db2:	4293      	cmp	r3, r2
 8012db4:	d02c      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	4a82      	ldr	r2, [pc, #520]	; (8012fc4 <HAL_DMA_Abort_IT+0x27c>)
 8012dbc:	4293      	cmp	r3, r2
 8012dbe:	d027      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	681b      	ldr	r3, [r3, #0]
 8012dc4:	4a80      	ldr	r2, [pc, #512]	; (8012fc8 <HAL_DMA_Abort_IT+0x280>)
 8012dc6:	4293      	cmp	r3, r2
 8012dc8:	d022      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	4a7f      	ldr	r2, [pc, #508]	; (8012fcc <HAL_DMA_Abort_IT+0x284>)
 8012dd0:	4293      	cmp	r3, r2
 8012dd2:	d01d      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	681b      	ldr	r3, [r3, #0]
 8012dd8:	4a7d      	ldr	r2, [pc, #500]	; (8012fd0 <HAL_DMA_Abort_IT+0x288>)
 8012dda:	4293      	cmp	r3, r2
 8012ddc:	d018      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	681b      	ldr	r3, [r3, #0]
 8012de2:	4a7c      	ldr	r2, [pc, #496]	; (8012fd4 <HAL_DMA_Abort_IT+0x28c>)
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d013      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012de8:	687b      	ldr	r3, [r7, #4]
 8012dea:	681b      	ldr	r3, [r3, #0]
 8012dec:	4a7a      	ldr	r2, [pc, #488]	; (8012fd8 <HAL_DMA_Abort_IT+0x290>)
 8012dee:	4293      	cmp	r3, r2
 8012df0:	d00e      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	4a79      	ldr	r2, [pc, #484]	; (8012fdc <HAL_DMA_Abort_IT+0x294>)
 8012df8:	4293      	cmp	r3, r2
 8012dfa:	d009      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	4a77      	ldr	r2, [pc, #476]	; (8012fe0 <HAL_DMA_Abort_IT+0x298>)
 8012e02:	4293      	cmp	r3, r2
 8012e04:	d004      	beq.n	8012e10 <HAL_DMA_Abort_IT+0xc8>
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	4a76      	ldr	r2, [pc, #472]	; (8012fe4 <HAL_DMA_Abort_IT+0x29c>)
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	d101      	bne.n	8012e14 <HAL_DMA_Abort_IT+0xcc>
 8012e10:	2301      	movs	r3, #1
 8012e12:	e000      	b.n	8012e16 <HAL_DMA_Abort_IT+0xce>
 8012e14:	2300      	movs	r3, #0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d065      	beq.n	8012ee6 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2204      	movs	r2, #4
 8012e1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	4a60      	ldr	r2, [pc, #384]	; (8012fa8 <HAL_DMA_Abort_IT+0x260>)
 8012e28:	4293      	cmp	r3, r2
 8012e2a:	d04a      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a5e      	ldr	r2, [pc, #376]	; (8012fac <HAL_DMA_Abort_IT+0x264>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d045      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	681b      	ldr	r3, [r3, #0]
 8012e3a:	4a5d      	ldr	r2, [pc, #372]	; (8012fb0 <HAL_DMA_Abort_IT+0x268>)
 8012e3c:	4293      	cmp	r3, r2
 8012e3e:	d040      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	4a5b      	ldr	r2, [pc, #364]	; (8012fb4 <HAL_DMA_Abort_IT+0x26c>)
 8012e46:	4293      	cmp	r3, r2
 8012e48:	d03b      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	4a5a      	ldr	r2, [pc, #360]	; (8012fb8 <HAL_DMA_Abort_IT+0x270>)
 8012e50:	4293      	cmp	r3, r2
 8012e52:	d036      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	4a58      	ldr	r2, [pc, #352]	; (8012fbc <HAL_DMA_Abort_IT+0x274>)
 8012e5a:	4293      	cmp	r3, r2
 8012e5c:	d031      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	4a57      	ldr	r2, [pc, #348]	; (8012fc0 <HAL_DMA_Abort_IT+0x278>)
 8012e64:	4293      	cmp	r3, r2
 8012e66:	d02c      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	4a55      	ldr	r2, [pc, #340]	; (8012fc4 <HAL_DMA_Abort_IT+0x27c>)
 8012e6e:	4293      	cmp	r3, r2
 8012e70:	d027      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	681b      	ldr	r3, [r3, #0]
 8012e76:	4a54      	ldr	r2, [pc, #336]	; (8012fc8 <HAL_DMA_Abort_IT+0x280>)
 8012e78:	4293      	cmp	r3, r2
 8012e7a:	d022      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	681b      	ldr	r3, [r3, #0]
 8012e80:	4a52      	ldr	r2, [pc, #328]	; (8012fcc <HAL_DMA_Abort_IT+0x284>)
 8012e82:	4293      	cmp	r3, r2
 8012e84:	d01d      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	681b      	ldr	r3, [r3, #0]
 8012e8a:	4a51      	ldr	r2, [pc, #324]	; (8012fd0 <HAL_DMA_Abort_IT+0x288>)
 8012e8c:	4293      	cmp	r3, r2
 8012e8e:	d018      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	4a4f      	ldr	r2, [pc, #316]	; (8012fd4 <HAL_DMA_Abort_IT+0x28c>)
 8012e96:	4293      	cmp	r3, r2
 8012e98:	d013      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	681b      	ldr	r3, [r3, #0]
 8012e9e:	4a4e      	ldr	r2, [pc, #312]	; (8012fd8 <HAL_DMA_Abort_IT+0x290>)
 8012ea0:	4293      	cmp	r3, r2
 8012ea2:	d00e      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	4a4c      	ldr	r2, [pc, #304]	; (8012fdc <HAL_DMA_Abort_IT+0x294>)
 8012eaa:	4293      	cmp	r3, r2
 8012eac:	d009      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	4a4b      	ldr	r2, [pc, #300]	; (8012fe0 <HAL_DMA_Abort_IT+0x298>)
 8012eb4:	4293      	cmp	r3, r2
 8012eb6:	d004      	beq.n	8012ec2 <HAL_DMA_Abort_IT+0x17a>
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	681b      	ldr	r3, [r3, #0]
 8012ebc:	4a49      	ldr	r2, [pc, #292]	; (8012fe4 <HAL_DMA_Abort_IT+0x29c>)
 8012ebe:	4293      	cmp	r3, r2
 8012ec0:	d108      	bne.n	8012ed4 <HAL_DMA_Abort_IT+0x18c>
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	681b      	ldr	r3, [r3, #0]
 8012ec6:	681a      	ldr	r2, [r3, #0]
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	f022 0201 	bic.w	r2, r2, #1
 8012ed0:	601a      	str	r2, [r3, #0]
 8012ed2:	e147      	b.n	8013164 <HAL_DMA_Abort_IT+0x41c>
 8012ed4:	687b      	ldr	r3, [r7, #4]
 8012ed6:	681b      	ldr	r3, [r3, #0]
 8012ed8:	681a      	ldr	r2, [r3, #0]
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	f022 0201 	bic.w	r2, r2, #1
 8012ee2:	601a      	str	r2, [r3, #0]
 8012ee4:	e13e      	b.n	8013164 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	681a      	ldr	r2, [r3, #0]
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	f022 020e 	bic.w	r2, r2, #14
 8012ef4:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	681b      	ldr	r3, [r3, #0]
 8012efa:	4a2b      	ldr	r2, [pc, #172]	; (8012fa8 <HAL_DMA_Abort_IT+0x260>)
 8012efc:	4293      	cmp	r3, r2
 8012efe:	d04a      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f00:	687b      	ldr	r3, [r7, #4]
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	4a29      	ldr	r2, [pc, #164]	; (8012fac <HAL_DMA_Abort_IT+0x264>)
 8012f06:	4293      	cmp	r3, r2
 8012f08:	d045      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	4a28      	ldr	r2, [pc, #160]	; (8012fb0 <HAL_DMA_Abort_IT+0x268>)
 8012f10:	4293      	cmp	r3, r2
 8012f12:	d040      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f14:	687b      	ldr	r3, [r7, #4]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	4a26      	ldr	r2, [pc, #152]	; (8012fb4 <HAL_DMA_Abort_IT+0x26c>)
 8012f1a:	4293      	cmp	r3, r2
 8012f1c:	d03b      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	4a25      	ldr	r2, [pc, #148]	; (8012fb8 <HAL_DMA_Abort_IT+0x270>)
 8012f24:	4293      	cmp	r3, r2
 8012f26:	d036      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	681b      	ldr	r3, [r3, #0]
 8012f2c:	4a23      	ldr	r2, [pc, #140]	; (8012fbc <HAL_DMA_Abort_IT+0x274>)
 8012f2e:	4293      	cmp	r3, r2
 8012f30:	d031      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	4a22      	ldr	r2, [pc, #136]	; (8012fc0 <HAL_DMA_Abort_IT+0x278>)
 8012f38:	4293      	cmp	r3, r2
 8012f3a:	d02c      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	4a20      	ldr	r2, [pc, #128]	; (8012fc4 <HAL_DMA_Abort_IT+0x27c>)
 8012f42:	4293      	cmp	r3, r2
 8012f44:	d027      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	681b      	ldr	r3, [r3, #0]
 8012f4a:	4a1f      	ldr	r2, [pc, #124]	; (8012fc8 <HAL_DMA_Abort_IT+0x280>)
 8012f4c:	4293      	cmp	r3, r2
 8012f4e:	d022      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	681b      	ldr	r3, [r3, #0]
 8012f54:	4a1d      	ldr	r2, [pc, #116]	; (8012fcc <HAL_DMA_Abort_IT+0x284>)
 8012f56:	4293      	cmp	r3, r2
 8012f58:	d01d      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	681b      	ldr	r3, [r3, #0]
 8012f5e:	4a1c      	ldr	r2, [pc, #112]	; (8012fd0 <HAL_DMA_Abort_IT+0x288>)
 8012f60:	4293      	cmp	r3, r2
 8012f62:	d018      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	681b      	ldr	r3, [r3, #0]
 8012f68:	4a1a      	ldr	r2, [pc, #104]	; (8012fd4 <HAL_DMA_Abort_IT+0x28c>)
 8012f6a:	4293      	cmp	r3, r2
 8012f6c:	d013      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	4a19      	ldr	r2, [pc, #100]	; (8012fd8 <HAL_DMA_Abort_IT+0x290>)
 8012f74:	4293      	cmp	r3, r2
 8012f76:	d00e      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	4a17      	ldr	r2, [pc, #92]	; (8012fdc <HAL_DMA_Abort_IT+0x294>)
 8012f7e:	4293      	cmp	r3, r2
 8012f80:	d009      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	4a16      	ldr	r2, [pc, #88]	; (8012fe0 <HAL_DMA_Abort_IT+0x298>)
 8012f88:	4293      	cmp	r3, r2
 8012f8a:	d004      	beq.n	8012f96 <HAL_DMA_Abort_IT+0x24e>
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	4a14      	ldr	r2, [pc, #80]	; (8012fe4 <HAL_DMA_Abort_IT+0x29c>)
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d128      	bne.n	8012fe8 <HAL_DMA_Abort_IT+0x2a0>
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	681b      	ldr	r3, [r3, #0]
 8012f9a:	681a      	ldr	r2, [r3, #0]
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	f022 0201 	bic.w	r2, r2, #1
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	e027      	b.n	8012ff8 <HAL_DMA_Abort_IT+0x2b0>
 8012fa8:	40020010 	.word	0x40020010
 8012fac:	40020028 	.word	0x40020028
 8012fb0:	40020040 	.word	0x40020040
 8012fb4:	40020058 	.word	0x40020058
 8012fb8:	40020070 	.word	0x40020070
 8012fbc:	40020088 	.word	0x40020088
 8012fc0:	400200a0 	.word	0x400200a0
 8012fc4:	400200b8 	.word	0x400200b8
 8012fc8:	40020410 	.word	0x40020410
 8012fcc:	40020428 	.word	0x40020428
 8012fd0:	40020440 	.word	0x40020440
 8012fd4:	40020458 	.word	0x40020458
 8012fd8:	40020470 	.word	0x40020470
 8012fdc:	40020488 	.word	0x40020488
 8012fe0:	400204a0 	.word	0x400204a0
 8012fe4:	400204b8 	.word	0x400204b8
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	681b      	ldr	r3, [r3, #0]
 8012fec:	681a      	ldr	r2, [r3, #0]
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	681b      	ldr	r3, [r3, #0]
 8012ff2:	f022 0201 	bic.w	r2, r2, #1
 8012ff6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8012ff8:	687b      	ldr	r3, [r7, #4]
 8012ffa:	681b      	ldr	r3, [r3, #0]
 8012ffc:	4a5c      	ldr	r2, [pc, #368]	; (8013170 <HAL_DMA_Abort_IT+0x428>)
 8012ffe:	4293      	cmp	r3, r2
 8013000:	d072      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	4a5b      	ldr	r2, [pc, #364]	; (8013174 <HAL_DMA_Abort_IT+0x42c>)
 8013008:	4293      	cmp	r3, r2
 801300a:	d06d      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801300c:	687b      	ldr	r3, [r7, #4]
 801300e:	681b      	ldr	r3, [r3, #0]
 8013010:	4a59      	ldr	r2, [pc, #356]	; (8013178 <HAL_DMA_Abort_IT+0x430>)
 8013012:	4293      	cmp	r3, r2
 8013014:	d068      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013016:	687b      	ldr	r3, [r7, #4]
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	4a58      	ldr	r2, [pc, #352]	; (801317c <HAL_DMA_Abort_IT+0x434>)
 801301c:	4293      	cmp	r3, r2
 801301e:	d063      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4a56      	ldr	r2, [pc, #344]	; (8013180 <HAL_DMA_Abort_IT+0x438>)
 8013026:	4293      	cmp	r3, r2
 8013028:	d05e      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	4a55      	ldr	r2, [pc, #340]	; (8013184 <HAL_DMA_Abort_IT+0x43c>)
 8013030:	4293      	cmp	r3, r2
 8013032:	d059      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	4a53      	ldr	r2, [pc, #332]	; (8013188 <HAL_DMA_Abort_IT+0x440>)
 801303a:	4293      	cmp	r3, r2
 801303c:	d054      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	681b      	ldr	r3, [r3, #0]
 8013042:	4a52      	ldr	r2, [pc, #328]	; (801318c <HAL_DMA_Abort_IT+0x444>)
 8013044:	4293      	cmp	r3, r2
 8013046:	d04f      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	4a50      	ldr	r2, [pc, #320]	; (8013190 <HAL_DMA_Abort_IT+0x448>)
 801304e:	4293      	cmp	r3, r2
 8013050:	d04a      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	681b      	ldr	r3, [r3, #0]
 8013056:	4a4f      	ldr	r2, [pc, #316]	; (8013194 <HAL_DMA_Abort_IT+0x44c>)
 8013058:	4293      	cmp	r3, r2
 801305a:	d045      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	681b      	ldr	r3, [r3, #0]
 8013060:	4a4d      	ldr	r2, [pc, #308]	; (8013198 <HAL_DMA_Abort_IT+0x450>)
 8013062:	4293      	cmp	r3, r2
 8013064:	d040      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	681b      	ldr	r3, [r3, #0]
 801306a:	4a4c      	ldr	r2, [pc, #304]	; (801319c <HAL_DMA_Abort_IT+0x454>)
 801306c:	4293      	cmp	r3, r2
 801306e:	d03b      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	4a4a      	ldr	r2, [pc, #296]	; (80131a0 <HAL_DMA_Abort_IT+0x458>)
 8013076:	4293      	cmp	r3, r2
 8013078:	d036      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	4a49      	ldr	r2, [pc, #292]	; (80131a4 <HAL_DMA_Abort_IT+0x45c>)
 8013080:	4293      	cmp	r3, r2
 8013082:	d031      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	4a47      	ldr	r2, [pc, #284]	; (80131a8 <HAL_DMA_Abort_IT+0x460>)
 801308a:	4293      	cmp	r3, r2
 801308c:	d02c      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 801308e:	687b      	ldr	r3, [r7, #4]
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	4a46      	ldr	r2, [pc, #280]	; (80131ac <HAL_DMA_Abort_IT+0x464>)
 8013094:	4293      	cmp	r3, r2
 8013096:	d027      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	4a44      	ldr	r2, [pc, #272]	; (80131b0 <HAL_DMA_Abort_IT+0x468>)
 801309e:	4293      	cmp	r3, r2
 80130a0:	d022      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	681b      	ldr	r3, [r3, #0]
 80130a6:	4a43      	ldr	r2, [pc, #268]	; (80131b4 <HAL_DMA_Abort_IT+0x46c>)
 80130a8:	4293      	cmp	r3, r2
 80130aa:	d01d      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	681b      	ldr	r3, [r3, #0]
 80130b0:	4a41      	ldr	r2, [pc, #260]	; (80131b8 <HAL_DMA_Abort_IT+0x470>)
 80130b2:	4293      	cmp	r3, r2
 80130b4:	d018      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	681b      	ldr	r3, [r3, #0]
 80130ba:	4a40      	ldr	r2, [pc, #256]	; (80131bc <HAL_DMA_Abort_IT+0x474>)
 80130bc:	4293      	cmp	r3, r2
 80130be:	d013      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	681b      	ldr	r3, [r3, #0]
 80130c4:	4a3e      	ldr	r2, [pc, #248]	; (80131c0 <HAL_DMA_Abort_IT+0x478>)
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d00e      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	4a3d      	ldr	r2, [pc, #244]	; (80131c4 <HAL_DMA_Abort_IT+0x47c>)
 80130d0:	4293      	cmp	r3, r2
 80130d2:	d009      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	4a3b      	ldr	r2, [pc, #236]	; (80131c8 <HAL_DMA_Abort_IT+0x480>)
 80130da:	4293      	cmp	r3, r2
 80130dc:	d004      	beq.n	80130e8 <HAL_DMA_Abort_IT+0x3a0>
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	4a3a      	ldr	r2, [pc, #232]	; (80131cc <HAL_DMA_Abort_IT+0x484>)
 80130e4:	4293      	cmp	r3, r2
 80130e6:	d101      	bne.n	80130ec <HAL_DMA_Abort_IT+0x3a4>
 80130e8:	2301      	movs	r3, #1
 80130ea:	e000      	b.n	80130ee <HAL_DMA_Abort_IT+0x3a6>
 80130ec:	2300      	movs	r3, #0
 80130ee:	2b00      	cmp	r3, #0
 80130f0:	d028      	beq.n	8013144 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130f6:	681a      	ldr	r2, [r3, #0]
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80130fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013100:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8013102:	687b      	ldr	r3, [r7, #4]
 8013104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013106:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801310c:	f003 031f 	and.w	r3, r3, #31
 8013110:	2201      	movs	r2, #1
 8013112:	409a      	lsls	r2, r3
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801311c:	687a      	ldr	r2, [r7, #4]
 801311e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8013120:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013126:	2b00      	cmp	r3, #0
 8013128:	d00c      	beq.n	8013144 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8013138:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801313e:	687a      	ldr	r2, [r7, #4]
 8013140:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8013142:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	2200      	movs	r2, #0
 8013148:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2201      	movs	r2, #1
 8013150:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013158:	2b00      	cmp	r3, #0
 801315a:	d003      	beq.n	8013164 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013160:	6878      	ldr	r0, [r7, #4]
 8013162:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8013164:	2300      	movs	r3, #0
}
 8013166:	4618      	mov	r0, r3
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	40020010 	.word	0x40020010
 8013174:	40020028 	.word	0x40020028
 8013178:	40020040 	.word	0x40020040
 801317c:	40020058 	.word	0x40020058
 8013180:	40020070 	.word	0x40020070
 8013184:	40020088 	.word	0x40020088
 8013188:	400200a0 	.word	0x400200a0
 801318c:	400200b8 	.word	0x400200b8
 8013190:	40020410 	.word	0x40020410
 8013194:	40020428 	.word	0x40020428
 8013198:	40020440 	.word	0x40020440
 801319c:	40020458 	.word	0x40020458
 80131a0:	40020470 	.word	0x40020470
 80131a4:	40020488 	.word	0x40020488
 80131a8:	400204a0 	.word	0x400204a0
 80131ac:	400204b8 	.word	0x400204b8
 80131b0:	58025408 	.word	0x58025408
 80131b4:	5802541c 	.word	0x5802541c
 80131b8:	58025430 	.word	0x58025430
 80131bc:	58025444 	.word	0x58025444
 80131c0:	58025458 	.word	0x58025458
 80131c4:	5802546c 	.word	0x5802546c
 80131c8:	58025480 	.word	0x58025480
 80131cc:	58025494 	.word	0x58025494

080131d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80131d0:	b480      	push	{r7}
 80131d2:	b089      	sub	sp, #36	; 0x24
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	6078      	str	r0, [r7, #4]
 80131d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80131da:	2300      	movs	r3, #0
 80131dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80131de:	4b89      	ldr	r3, [pc, #548]	; (8013404 <HAL_GPIO_Init+0x234>)
 80131e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80131e2:	e194      	b.n	801350e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	681a      	ldr	r2, [r3, #0]
 80131e8:	2101      	movs	r1, #1
 80131ea:	69fb      	ldr	r3, [r7, #28]
 80131ec:	fa01 f303 	lsl.w	r3, r1, r3
 80131f0:	4013      	ands	r3, r2
 80131f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80131f4:	693b      	ldr	r3, [r7, #16]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	f000 8186 	beq.w	8013508 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	685b      	ldr	r3, [r3, #4]
 8013200:	2b01      	cmp	r3, #1
 8013202:	d00b      	beq.n	801321c <HAL_GPIO_Init+0x4c>
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	685b      	ldr	r3, [r3, #4]
 8013208:	2b02      	cmp	r3, #2
 801320a:	d007      	beq.n	801321c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8013210:	2b11      	cmp	r3, #17
 8013212:	d003      	beq.n	801321c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8013214:	683b      	ldr	r3, [r7, #0]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	2b12      	cmp	r3, #18
 801321a:	d130      	bne.n	801327e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	689b      	ldr	r3, [r3, #8]
 8013220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8013222:	69fb      	ldr	r3, [r7, #28]
 8013224:	005b      	lsls	r3, r3, #1
 8013226:	2203      	movs	r2, #3
 8013228:	fa02 f303 	lsl.w	r3, r2, r3
 801322c:	43db      	mvns	r3, r3
 801322e:	69ba      	ldr	r2, [r7, #24]
 8013230:	4013      	ands	r3, r2
 8013232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013234:	683b      	ldr	r3, [r7, #0]
 8013236:	68da      	ldr	r2, [r3, #12]
 8013238:	69fb      	ldr	r3, [r7, #28]
 801323a:	005b      	lsls	r3, r3, #1
 801323c:	fa02 f303 	lsl.w	r3, r2, r3
 8013240:	69ba      	ldr	r2, [r7, #24]
 8013242:	4313      	orrs	r3, r2
 8013244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	69ba      	ldr	r2, [r7, #24]
 801324a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	685b      	ldr	r3, [r3, #4]
 8013250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013252:	2201      	movs	r2, #1
 8013254:	69fb      	ldr	r3, [r7, #28]
 8013256:	fa02 f303 	lsl.w	r3, r2, r3
 801325a:	43db      	mvns	r3, r3
 801325c:	69ba      	ldr	r2, [r7, #24]
 801325e:	4013      	ands	r3, r2
 8013260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8013262:	683b      	ldr	r3, [r7, #0]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	091b      	lsrs	r3, r3, #4
 8013268:	f003 0201 	and.w	r2, r3, #1
 801326c:	69fb      	ldr	r3, [r7, #28]
 801326e:	fa02 f303 	lsl.w	r3, r2, r3
 8013272:	69ba      	ldr	r2, [r7, #24]
 8013274:	4313      	orrs	r3, r2
 8013276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	69ba      	ldr	r2, [r7, #24]
 801327c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8013284:	69fb      	ldr	r3, [r7, #28]
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	2203      	movs	r2, #3
 801328a:	fa02 f303 	lsl.w	r3, r2, r3
 801328e:	43db      	mvns	r3, r3
 8013290:	69ba      	ldr	r2, [r7, #24]
 8013292:	4013      	ands	r3, r2
 8013294:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	689a      	ldr	r2, [r3, #8]
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	005b      	lsls	r3, r3, #1
 801329e:	fa02 f303 	lsl.w	r3, r2, r3
 80132a2:	69ba      	ldr	r2, [r7, #24]
 80132a4:	4313      	orrs	r3, r2
 80132a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	69ba      	ldr	r2, [r7, #24]
 80132ac:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	685b      	ldr	r3, [r3, #4]
 80132b2:	2b02      	cmp	r3, #2
 80132b4:	d003      	beq.n	80132be <HAL_GPIO_Init+0xee>
 80132b6:	683b      	ldr	r3, [r7, #0]
 80132b8:	685b      	ldr	r3, [r3, #4]
 80132ba:	2b12      	cmp	r3, #18
 80132bc:	d123      	bne.n	8013306 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80132be:	69fb      	ldr	r3, [r7, #28]
 80132c0:	08da      	lsrs	r2, r3, #3
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	3208      	adds	r2, #8
 80132c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80132ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80132cc:	69fb      	ldr	r3, [r7, #28]
 80132ce:	f003 0307 	and.w	r3, r3, #7
 80132d2:	009b      	lsls	r3, r3, #2
 80132d4:	220f      	movs	r2, #15
 80132d6:	fa02 f303 	lsl.w	r3, r2, r3
 80132da:	43db      	mvns	r3, r3
 80132dc:	69ba      	ldr	r2, [r7, #24]
 80132de:	4013      	ands	r3, r2
 80132e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	691a      	ldr	r2, [r3, #16]
 80132e6:	69fb      	ldr	r3, [r7, #28]
 80132e8:	f003 0307 	and.w	r3, r3, #7
 80132ec:	009b      	lsls	r3, r3, #2
 80132ee:	fa02 f303 	lsl.w	r3, r2, r3
 80132f2:	69ba      	ldr	r2, [r7, #24]
 80132f4:	4313      	orrs	r3, r2
 80132f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80132f8:	69fb      	ldr	r3, [r7, #28]
 80132fa:	08da      	lsrs	r2, r3, #3
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	3208      	adds	r2, #8
 8013300:	69b9      	ldr	r1, [r7, #24]
 8013302:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801330c:	69fb      	ldr	r3, [r7, #28]
 801330e:	005b      	lsls	r3, r3, #1
 8013310:	2203      	movs	r2, #3
 8013312:	fa02 f303 	lsl.w	r3, r2, r3
 8013316:	43db      	mvns	r3, r3
 8013318:	69ba      	ldr	r2, [r7, #24]
 801331a:	4013      	ands	r3, r2
 801331c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801331e:	683b      	ldr	r3, [r7, #0]
 8013320:	685b      	ldr	r3, [r3, #4]
 8013322:	f003 0203 	and.w	r2, r3, #3
 8013326:	69fb      	ldr	r3, [r7, #28]
 8013328:	005b      	lsls	r3, r3, #1
 801332a:	fa02 f303 	lsl.w	r3, r2, r3
 801332e:	69ba      	ldr	r2, [r7, #24]
 8013330:	4313      	orrs	r3, r2
 8013332:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	69ba      	ldr	r2, [r7, #24]
 8013338:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801333a:	683b      	ldr	r3, [r7, #0]
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013342:	2b00      	cmp	r3, #0
 8013344:	f000 80e0 	beq.w	8013508 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013348:	4b2f      	ldr	r3, [pc, #188]	; (8013408 <HAL_GPIO_Init+0x238>)
 801334a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801334e:	4a2e      	ldr	r2, [pc, #184]	; (8013408 <HAL_GPIO_Init+0x238>)
 8013350:	f043 0302 	orr.w	r3, r3, #2
 8013354:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8013358:	4b2b      	ldr	r3, [pc, #172]	; (8013408 <HAL_GPIO_Init+0x238>)
 801335a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801335e:	f003 0302 	and.w	r3, r3, #2
 8013362:	60fb      	str	r3, [r7, #12]
 8013364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013366:	4a29      	ldr	r2, [pc, #164]	; (801340c <HAL_GPIO_Init+0x23c>)
 8013368:	69fb      	ldr	r3, [r7, #28]
 801336a:	089b      	lsrs	r3, r3, #2
 801336c:	3302      	adds	r3, #2
 801336e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	f003 0303 	and.w	r3, r3, #3
 801337a:	009b      	lsls	r3, r3, #2
 801337c:	220f      	movs	r2, #15
 801337e:	fa02 f303 	lsl.w	r3, r2, r3
 8013382:	43db      	mvns	r3, r3
 8013384:	69ba      	ldr	r2, [r7, #24]
 8013386:	4013      	ands	r3, r2
 8013388:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	4a20      	ldr	r2, [pc, #128]	; (8013410 <HAL_GPIO_Init+0x240>)
 801338e:	4293      	cmp	r3, r2
 8013390:	d052      	beq.n	8013438 <HAL_GPIO_Init+0x268>
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	4a1f      	ldr	r2, [pc, #124]	; (8013414 <HAL_GPIO_Init+0x244>)
 8013396:	4293      	cmp	r3, r2
 8013398:	d031      	beq.n	80133fe <HAL_GPIO_Init+0x22e>
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	4a1e      	ldr	r2, [pc, #120]	; (8013418 <HAL_GPIO_Init+0x248>)
 801339e:	4293      	cmp	r3, r2
 80133a0:	d02b      	beq.n	80133fa <HAL_GPIO_Init+0x22a>
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	4a1d      	ldr	r2, [pc, #116]	; (801341c <HAL_GPIO_Init+0x24c>)
 80133a6:	4293      	cmp	r3, r2
 80133a8:	d025      	beq.n	80133f6 <HAL_GPIO_Init+0x226>
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	4a1c      	ldr	r2, [pc, #112]	; (8013420 <HAL_GPIO_Init+0x250>)
 80133ae:	4293      	cmp	r3, r2
 80133b0:	d01f      	beq.n	80133f2 <HAL_GPIO_Init+0x222>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	4a1b      	ldr	r2, [pc, #108]	; (8013424 <HAL_GPIO_Init+0x254>)
 80133b6:	4293      	cmp	r3, r2
 80133b8:	d019      	beq.n	80133ee <HAL_GPIO_Init+0x21e>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	4a1a      	ldr	r2, [pc, #104]	; (8013428 <HAL_GPIO_Init+0x258>)
 80133be:	4293      	cmp	r3, r2
 80133c0:	d013      	beq.n	80133ea <HAL_GPIO_Init+0x21a>
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	4a19      	ldr	r2, [pc, #100]	; (801342c <HAL_GPIO_Init+0x25c>)
 80133c6:	4293      	cmp	r3, r2
 80133c8:	d00d      	beq.n	80133e6 <HAL_GPIO_Init+0x216>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	4a18      	ldr	r2, [pc, #96]	; (8013430 <HAL_GPIO_Init+0x260>)
 80133ce:	4293      	cmp	r3, r2
 80133d0:	d007      	beq.n	80133e2 <HAL_GPIO_Init+0x212>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4a17      	ldr	r2, [pc, #92]	; (8013434 <HAL_GPIO_Init+0x264>)
 80133d6:	4293      	cmp	r3, r2
 80133d8:	d101      	bne.n	80133de <HAL_GPIO_Init+0x20e>
 80133da:	2309      	movs	r3, #9
 80133dc:	e02d      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133de:	230a      	movs	r3, #10
 80133e0:	e02b      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133e2:	2308      	movs	r3, #8
 80133e4:	e029      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133e6:	2307      	movs	r3, #7
 80133e8:	e027      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133ea:	2306      	movs	r3, #6
 80133ec:	e025      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133ee:	2305      	movs	r3, #5
 80133f0:	e023      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133f2:	2304      	movs	r3, #4
 80133f4:	e021      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133f6:	2303      	movs	r3, #3
 80133f8:	e01f      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133fa:	2302      	movs	r3, #2
 80133fc:	e01d      	b.n	801343a <HAL_GPIO_Init+0x26a>
 80133fe:	2301      	movs	r3, #1
 8013400:	e01b      	b.n	801343a <HAL_GPIO_Init+0x26a>
 8013402:	bf00      	nop
 8013404:	58000080 	.word	0x58000080
 8013408:	58024400 	.word	0x58024400
 801340c:	58000400 	.word	0x58000400
 8013410:	58020000 	.word	0x58020000
 8013414:	58020400 	.word	0x58020400
 8013418:	58020800 	.word	0x58020800
 801341c:	58020c00 	.word	0x58020c00
 8013420:	58021000 	.word	0x58021000
 8013424:	58021400 	.word	0x58021400
 8013428:	58021800 	.word	0x58021800
 801342c:	58021c00 	.word	0x58021c00
 8013430:	58022000 	.word	0x58022000
 8013434:	58022400 	.word	0x58022400
 8013438:	2300      	movs	r3, #0
 801343a:	69fa      	ldr	r2, [r7, #28]
 801343c:	f002 0203 	and.w	r2, r2, #3
 8013440:	0092      	lsls	r2, r2, #2
 8013442:	4093      	lsls	r3, r2
 8013444:	69ba      	ldr	r2, [r7, #24]
 8013446:	4313      	orrs	r3, r2
 8013448:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801344a:	4938      	ldr	r1, [pc, #224]	; (801352c <HAL_GPIO_Init+0x35c>)
 801344c:	69fb      	ldr	r3, [r7, #28]
 801344e:	089b      	lsrs	r3, r3, #2
 8013450:	3302      	adds	r3, #2
 8013452:	69ba      	ldr	r2, [r7, #24]
 8013454:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801345e:	693b      	ldr	r3, [r7, #16]
 8013460:	43db      	mvns	r3, r3
 8013462:	69ba      	ldr	r2, [r7, #24]
 8013464:	4013      	ands	r3, r2
 8013466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8013468:	683b      	ldr	r3, [r7, #0]
 801346a:	685b      	ldr	r3, [r3, #4]
 801346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013470:	2b00      	cmp	r3, #0
 8013472:	d003      	beq.n	801347c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8013474:	69ba      	ldr	r2, [r7, #24]
 8013476:	693b      	ldr	r3, [r7, #16]
 8013478:	4313      	orrs	r3, r2
 801347a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801347c:	697b      	ldr	r3, [r7, #20]
 801347e:	69ba      	ldr	r2, [r7, #24]
 8013480:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	685b      	ldr	r3, [r3, #4]
 8013486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8013488:	693b      	ldr	r3, [r7, #16]
 801348a:	43db      	mvns	r3, r3
 801348c:	69ba      	ldr	r2, [r7, #24]
 801348e:	4013      	ands	r3, r2
 8013490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8013492:	683b      	ldr	r3, [r7, #0]
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801349a:	2b00      	cmp	r3, #0
 801349c:	d003      	beq.n	80134a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801349e:	69ba      	ldr	r2, [r7, #24]
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	4313      	orrs	r3, r2
 80134a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80134a6:	697b      	ldr	r3, [r7, #20]
 80134a8:	69ba      	ldr	r2, [r7, #24]
 80134aa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80134ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134b0:	681b      	ldr	r3, [r3, #0]
 80134b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80134b4:	693b      	ldr	r3, [r7, #16]
 80134b6:	43db      	mvns	r3, r3
 80134b8:	69ba      	ldr	r2, [r7, #24]
 80134ba:	4013      	ands	r3, r2
 80134bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	685b      	ldr	r3, [r3, #4]
 80134c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d003      	beq.n	80134d2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80134ca:	69ba      	ldr	r2, [r7, #24]
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	4313      	orrs	r3, r2
 80134d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80134d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80134d6:	69bb      	ldr	r3, [r7, #24]
 80134d8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80134da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80134de:	685b      	ldr	r3, [r3, #4]
 80134e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80134e2:	693b      	ldr	r3, [r7, #16]
 80134e4:	43db      	mvns	r3, r3
 80134e6:	69ba      	ldr	r2, [r7, #24]
 80134e8:	4013      	ands	r3, r2
 80134ea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	685b      	ldr	r3, [r3, #4]
 80134f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d003      	beq.n	8013500 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80134f8:	69ba      	ldr	r2, [r7, #24]
 80134fa:	693b      	ldr	r3, [r7, #16]
 80134fc:	4313      	orrs	r3, r2
 80134fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8013500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8013504:	69bb      	ldr	r3, [r7, #24]
 8013506:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	3301      	adds	r3, #1
 801350c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	681a      	ldr	r2, [r3, #0]
 8013512:	69fb      	ldr	r3, [r7, #28]
 8013514:	fa22 f303 	lsr.w	r3, r2, r3
 8013518:	2b00      	cmp	r3, #0
 801351a:	f47f ae63 	bne.w	80131e4 <HAL_GPIO_Init+0x14>
  }
}
 801351e:	bf00      	nop
 8013520:	3724      	adds	r7, #36	; 0x24
 8013522:	46bd      	mov	sp, r7
 8013524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013528:	4770      	bx	lr
 801352a:	bf00      	nop
 801352c:	58000400 	.word	0x58000400

08013530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8013530:	b480      	push	{r7}
 8013532:	b085      	sub	sp, #20
 8013534:	af00      	add	r7, sp, #0
 8013536:	6078      	str	r0, [r7, #4]
 8013538:	460b      	mov	r3, r1
 801353a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801353c:	687b      	ldr	r3, [r7, #4]
 801353e:	691a      	ldr	r2, [r3, #16]
 8013540:	887b      	ldrh	r3, [r7, #2]
 8013542:	4013      	ands	r3, r2
 8013544:	2b00      	cmp	r3, #0
 8013546:	d002      	beq.n	801354e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8013548:	2301      	movs	r3, #1
 801354a:	73fb      	strb	r3, [r7, #15]
 801354c:	e001      	b.n	8013552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801354e:	2300      	movs	r3, #0
 8013550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8013552:	7bfb      	ldrb	r3, [r7, #15]
}
 8013554:	4618      	mov	r0, r3
 8013556:	3714      	adds	r7, #20
 8013558:	46bd      	mov	sp, r7
 801355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801355e:	4770      	bx	lr

08013560 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
 8013568:	460b      	mov	r3, r1
 801356a:	807b      	strh	r3, [r7, #2]
 801356c:	4613      	mov	r3, r2
 801356e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8013570:	787b      	ldrb	r3, [r7, #1]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d003      	beq.n	801357e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8013576:	887a      	ldrh	r2, [r7, #2]
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801357c:	e003      	b.n	8013586 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801357e:	887b      	ldrh	r3, [r7, #2]
 8013580:	041a      	lsls	r2, r3, #16
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	619a      	str	r2, [r3, #24]
}
 8013586:	bf00      	nop
 8013588:	370c      	adds	r7, #12
 801358a:	46bd      	mov	sp, r7
 801358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013590:	4770      	bx	lr

08013592 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8013592:	b580      	push	{r7, lr}
 8013594:	b082      	sub	sp, #8
 8013596:	af00      	add	r7, sp, #0
 8013598:	4603      	mov	r3, r0
 801359a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 801359c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80135a0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80135a4:	88fb      	ldrh	r3, [r7, #6]
 80135a6:	4013      	ands	r3, r2
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d008      	beq.n	80135be <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80135ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80135b0:	88fb      	ldrh	r3, [r7, #6]
 80135b2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80135b6:	88fb      	ldrh	r3, [r7, #6]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7ed f815 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80135be:	bf00      	nop
 80135c0:	3708      	adds	r7, #8
 80135c2:	46bd      	mov	sp, r7
 80135c4:	bd80      	pop	{r7, pc}

080135c6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80135c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80135c8:	b08f      	sub	sp, #60	; 0x3c
 80135ca:	af0a      	add	r7, sp, #40	; 0x28
 80135cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d101      	bne.n	80135d8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80135d4:	2301      	movs	r3, #1
 80135d6:	e116      	b.n	8013806 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d106      	bne.n	80135f8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	2200      	movs	r2, #0
 80135ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f00a fb36 	bl	801dc64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	2203      	movs	r2, #3
 80135fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8013600:	68bb      	ldr	r3, [r7, #8]
 8013602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013608:	2b00      	cmp	r3, #0
 801360a:	d102      	bne.n	8013612 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	2200      	movs	r2, #0
 8013610:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4618      	mov	r0, r3
 8013618:	f007 fba3 	bl	801ad62 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	681b      	ldr	r3, [r3, #0]
 8013620:	603b      	str	r3, [r7, #0]
 8013622:	687e      	ldr	r6, [r7, #4]
 8013624:	466d      	mov	r5, sp
 8013626:	f106 0410 	add.w	r4, r6, #16
 801362a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801362e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8013632:	e894 0003 	ldmia.w	r4, {r0, r1}
 8013636:	e885 0003 	stmia.w	r5, {r0, r1}
 801363a:	1d33      	adds	r3, r6, #4
 801363c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801363e:	6838      	ldr	r0, [r7, #0]
 8013640:	f007 fa7a 	bl	801ab38 <USB_CoreInit>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d005      	beq.n	8013656 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	2202      	movs	r2, #2
 801364e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8013652:	2301      	movs	r3, #1
 8013654:	e0d7      	b.n	8013806 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	2100      	movs	r1, #0
 801365c:	4618      	mov	r0, r3
 801365e:	f007 fb91 	bl	801ad84 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013662:	2300      	movs	r3, #0
 8013664:	73fb      	strb	r3, [r7, #15]
 8013666:	e04a      	b.n	80136fe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8013668:	7bfa      	ldrb	r2, [r7, #15]
 801366a:	6879      	ldr	r1, [r7, #4]
 801366c:	4613      	mov	r3, r2
 801366e:	00db      	lsls	r3, r3, #3
 8013670:	1a9b      	subs	r3, r3, r2
 8013672:	009b      	lsls	r3, r3, #2
 8013674:	440b      	add	r3, r1
 8013676:	333d      	adds	r3, #61	; 0x3d
 8013678:	2201      	movs	r2, #1
 801367a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 801367c:	7bfa      	ldrb	r2, [r7, #15]
 801367e:	6879      	ldr	r1, [r7, #4]
 8013680:	4613      	mov	r3, r2
 8013682:	00db      	lsls	r3, r3, #3
 8013684:	1a9b      	subs	r3, r3, r2
 8013686:	009b      	lsls	r3, r3, #2
 8013688:	440b      	add	r3, r1
 801368a:	333c      	adds	r3, #60	; 0x3c
 801368c:	7bfa      	ldrb	r2, [r7, #15]
 801368e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8013690:	7bfa      	ldrb	r2, [r7, #15]
 8013692:	7bfb      	ldrb	r3, [r7, #15]
 8013694:	b298      	uxth	r0, r3
 8013696:	6879      	ldr	r1, [r7, #4]
 8013698:	4613      	mov	r3, r2
 801369a:	00db      	lsls	r3, r3, #3
 801369c:	1a9b      	subs	r3, r3, r2
 801369e:	009b      	lsls	r3, r3, #2
 80136a0:	440b      	add	r3, r1
 80136a2:	3342      	adds	r3, #66	; 0x42
 80136a4:	4602      	mov	r2, r0
 80136a6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80136a8:	7bfa      	ldrb	r2, [r7, #15]
 80136aa:	6879      	ldr	r1, [r7, #4]
 80136ac:	4613      	mov	r3, r2
 80136ae:	00db      	lsls	r3, r3, #3
 80136b0:	1a9b      	subs	r3, r3, r2
 80136b2:	009b      	lsls	r3, r3, #2
 80136b4:	440b      	add	r3, r1
 80136b6:	333f      	adds	r3, #63	; 0x3f
 80136b8:	2200      	movs	r2, #0
 80136ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80136bc:	7bfa      	ldrb	r2, [r7, #15]
 80136be:	6879      	ldr	r1, [r7, #4]
 80136c0:	4613      	mov	r3, r2
 80136c2:	00db      	lsls	r3, r3, #3
 80136c4:	1a9b      	subs	r3, r3, r2
 80136c6:	009b      	lsls	r3, r3, #2
 80136c8:	440b      	add	r3, r1
 80136ca:	3344      	adds	r3, #68	; 0x44
 80136cc:	2200      	movs	r2, #0
 80136ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80136d0:	7bfa      	ldrb	r2, [r7, #15]
 80136d2:	6879      	ldr	r1, [r7, #4]
 80136d4:	4613      	mov	r3, r2
 80136d6:	00db      	lsls	r3, r3, #3
 80136d8:	1a9b      	subs	r3, r3, r2
 80136da:	009b      	lsls	r3, r3, #2
 80136dc:	440b      	add	r3, r1
 80136de:	3348      	adds	r3, #72	; 0x48
 80136e0:	2200      	movs	r2, #0
 80136e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80136e4:	7bfa      	ldrb	r2, [r7, #15]
 80136e6:	6879      	ldr	r1, [r7, #4]
 80136e8:	4613      	mov	r3, r2
 80136ea:	00db      	lsls	r3, r3, #3
 80136ec:	1a9b      	subs	r3, r3, r2
 80136ee:	009b      	lsls	r3, r3, #2
 80136f0:	440b      	add	r3, r1
 80136f2:	3350      	adds	r3, #80	; 0x50
 80136f4:	2200      	movs	r2, #0
 80136f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80136f8:	7bfb      	ldrb	r3, [r7, #15]
 80136fa:	3301      	adds	r3, #1
 80136fc:	73fb      	strb	r3, [r7, #15]
 80136fe:	7bfa      	ldrb	r2, [r7, #15]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	685b      	ldr	r3, [r3, #4]
 8013704:	429a      	cmp	r2, r3
 8013706:	d3af      	bcc.n	8013668 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013708:	2300      	movs	r3, #0
 801370a:	73fb      	strb	r3, [r7, #15]
 801370c:	e044      	b.n	8013798 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 801370e:	7bfa      	ldrb	r2, [r7, #15]
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	4613      	mov	r3, r2
 8013714:	00db      	lsls	r3, r3, #3
 8013716:	1a9b      	subs	r3, r3, r2
 8013718:	009b      	lsls	r3, r3, #2
 801371a:	440b      	add	r3, r1
 801371c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8013720:	2200      	movs	r2, #0
 8013722:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8013724:	7bfa      	ldrb	r2, [r7, #15]
 8013726:	6879      	ldr	r1, [r7, #4]
 8013728:	4613      	mov	r3, r2
 801372a:	00db      	lsls	r3, r3, #3
 801372c:	1a9b      	subs	r3, r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	440b      	add	r3, r1
 8013732:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8013736:	7bfa      	ldrb	r2, [r7, #15]
 8013738:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 801373a:	7bfa      	ldrb	r2, [r7, #15]
 801373c:	6879      	ldr	r1, [r7, #4]
 801373e:	4613      	mov	r3, r2
 8013740:	00db      	lsls	r3, r3, #3
 8013742:	1a9b      	subs	r3, r3, r2
 8013744:	009b      	lsls	r3, r3, #2
 8013746:	440b      	add	r3, r1
 8013748:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801374c:	2200      	movs	r2, #0
 801374e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8013750:	7bfa      	ldrb	r2, [r7, #15]
 8013752:	6879      	ldr	r1, [r7, #4]
 8013754:	4613      	mov	r3, r2
 8013756:	00db      	lsls	r3, r3, #3
 8013758:	1a9b      	subs	r3, r3, r2
 801375a:	009b      	lsls	r3, r3, #2
 801375c:	440b      	add	r3, r1
 801375e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8013762:	2200      	movs	r2, #0
 8013764:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8013766:	7bfa      	ldrb	r2, [r7, #15]
 8013768:	6879      	ldr	r1, [r7, #4]
 801376a:	4613      	mov	r3, r2
 801376c:	00db      	lsls	r3, r3, #3
 801376e:	1a9b      	subs	r3, r3, r2
 8013770:	009b      	lsls	r3, r3, #2
 8013772:	440b      	add	r3, r1
 8013774:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 801377c:	7bfa      	ldrb	r2, [r7, #15]
 801377e:	6879      	ldr	r1, [r7, #4]
 8013780:	4613      	mov	r3, r2
 8013782:	00db      	lsls	r3, r3, #3
 8013784:	1a9b      	subs	r3, r3, r2
 8013786:	009b      	lsls	r3, r3, #2
 8013788:	440b      	add	r3, r1
 801378a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801378e:	2200      	movs	r2, #0
 8013790:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013792:	7bfb      	ldrb	r3, [r7, #15]
 8013794:	3301      	adds	r3, #1
 8013796:	73fb      	strb	r3, [r7, #15]
 8013798:	7bfa      	ldrb	r2, [r7, #15]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	685b      	ldr	r3, [r3, #4]
 801379e:	429a      	cmp	r2, r3
 80137a0:	d3b5      	bcc.n	801370e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	603b      	str	r3, [r7, #0]
 80137a8:	687e      	ldr	r6, [r7, #4]
 80137aa:	466d      	mov	r5, sp
 80137ac:	f106 0410 	add.w	r4, r6, #16
 80137b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80137b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80137b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80137bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80137c0:	1d33      	adds	r3, r6, #4
 80137c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80137c4:	6838      	ldr	r0, [r7, #0]
 80137c6:	f007 fb07 	bl	801add8 <USB_DevInit>
 80137ca:	4603      	mov	r3, r0
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d005      	beq.n	80137dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	2202      	movs	r2, #2
 80137d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80137d8:	2301      	movs	r3, #1
 80137da:	e014      	b.n	8013806 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2200      	movs	r2, #0
 80137e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2201      	movs	r2, #1
 80137e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137f0:	2b01      	cmp	r3, #1
 80137f2:	d102      	bne.n	80137fa <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80137f4:	6878      	ldr	r0, [r7, #4]
 80137f6:	f001 f891 	bl	801491c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	4618      	mov	r0, r3
 8013800:	f008 faee 	bl	801bde0 <USB_DevDisconnect>

  return HAL_OK;
 8013804:	2300      	movs	r3, #0
}
 8013806:	4618      	mov	r0, r3
 8013808:	3714      	adds	r7, #20
 801380a:	46bd      	mov	sp, r7
 801380c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801380e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 801380e:	b580      	push	{r7, lr}
 8013810:	b084      	sub	sp, #16
 8013812:	af00      	add	r7, sp, #0
 8013814:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8013822:	2b01      	cmp	r3, #1
 8013824:	d101      	bne.n	801382a <HAL_PCD_Start+0x1c>
 8013826:	2302      	movs	r3, #2
 8013828:	e020      	b.n	801386c <HAL_PCD_Start+0x5e>
 801382a:	687b      	ldr	r3, [r7, #4]
 801382c:	2201      	movs	r2, #1
 801382e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013836:	2b01      	cmp	r3, #1
 8013838:	d109      	bne.n	801384e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 801383e:	2b01      	cmp	r3, #1
 8013840:	d005      	beq.n	801384e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801384a:	68fb      	ldr	r3, [r7, #12]
 801384c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	4618      	mov	r0, r3
 8013854:	f008 faac 	bl	801bdb0 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	681b      	ldr	r3, [r3, #0]
 801385c:	4618      	mov	r0, r3
 801385e:	f007 fa6f 	bl	801ad40 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	2200      	movs	r2, #0
 8013866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 801386a:	2300      	movs	r3, #0
}
 801386c:	4618      	mov	r0, r3
 801386e:	3710      	adds	r7, #16
 8013870:	46bd      	mov	sp, r7
 8013872:	bd80      	pop	{r7, pc}

08013874 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8013874:	b590      	push	{r4, r7, lr}
 8013876:	b08d      	sub	sp, #52	; 0x34
 8013878:	af00      	add	r7, sp, #0
 801387a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013882:	6a3b      	ldr	r3, [r7, #32]
 8013884:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	4618      	mov	r0, r3
 801388c:	f008 fb53 	bl	801bf36 <USB_GetMode>
 8013890:	4603      	mov	r3, r0
 8013892:	2b00      	cmp	r3, #0
 8013894:	f040 83ca 	bne.w	801402c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4618      	mov	r0, r3
 801389e:	f008 fab7 	bl	801be10 <USB_ReadInterrupts>
 80138a2:	4603      	mov	r3, r0
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	f000 83c0 	beq.w	801402a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80138aa:	687b      	ldr	r3, [r7, #4]
 80138ac:	681b      	ldr	r3, [r3, #0]
 80138ae:	4618      	mov	r0, r3
 80138b0:	f008 faae 	bl	801be10 <USB_ReadInterrupts>
 80138b4:	4603      	mov	r3, r0
 80138b6:	f003 0302 	and.w	r3, r3, #2
 80138ba:	2b02      	cmp	r3, #2
 80138bc:	d107      	bne.n	80138ce <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	681b      	ldr	r3, [r3, #0]
 80138c2:	695a      	ldr	r2, [r3, #20]
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	f002 0202 	and.w	r2, r2, #2
 80138cc:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	4618      	mov	r0, r3
 80138d4:	f008 fa9c 	bl	801be10 <USB_ReadInterrupts>
 80138d8:	4603      	mov	r3, r0
 80138da:	f003 0310 	and.w	r3, r3, #16
 80138de:	2b10      	cmp	r3, #16
 80138e0:	d161      	bne.n	80139a6 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	699a      	ldr	r2, [r3, #24]
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	681b      	ldr	r3, [r3, #0]
 80138ec:	f022 0210 	bic.w	r2, r2, #16
 80138f0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80138f2:	6a3b      	ldr	r3, [r7, #32]
 80138f4:	6a1b      	ldr	r3, [r3, #32]
 80138f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80138f8:	69bb      	ldr	r3, [r7, #24]
 80138fa:	f003 020f 	and.w	r2, r3, #15
 80138fe:	4613      	mov	r3, r2
 8013900:	00db      	lsls	r3, r3, #3
 8013902:	1a9b      	subs	r3, r3, r2
 8013904:	009b      	lsls	r3, r3, #2
 8013906:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801390a:	687a      	ldr	r2, [r7, #4]
 801390c:	4413      	add	r3, r2
 801390e:	3304      	adds	r3, #4
 8013910:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8013912:	69bb      	ldr	r3, [r7, #24]
 8013914:	0c5b      	lsrs	r3, r3, #17
 8013916:	f003 030f 	and.w	r3, r3, #15
 801391a:	2b02      	cmp	r3, #2
 801391c:	d124      	bne.n	8013968 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 801391e:	69ba      	ldr	r2, [r7, #24]
 8013920:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8013924:	4013      	ands	r3, r2
 8013926:	2b00      	cmp	r3, #0
 8013928:	d035      	beq.n	8013996 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 801392e:	69bb      	ldr	r3, [r7, #24]
 8013930:	091b      	lsrs	r3, r3, #4
 8013932:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8013934:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013938:	b29b      	uxth	r3, r3
 801393a:	461a      	mov	r2, r3
 801393c:	6a38      	ldr	r0, [r7, #32]
 801393e:	f008 f914 	bl	801bb6a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013942:	697b      	ldr	r3, [r7, #20]
 8013944:	68da      	ldr	r2, [r3, #12]
 8013946:	69bb      	ldr	r3, [r7, #24]
 8013948:	091b      	lsrs	r3, r3, #4
 801394a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 801394e:	441a      	add	r2, r3
 8013950:	697b      	ldr	r3, [r7, #20]
 8013952:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	699a      	ldr	r2, [r3, #24]
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	091b      	lsrs	r3, r3, #4
 801395c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013960:	441a      	add	r2, r3
 8013962:	697b      	ldr	r3, [r7, #20]
 8013964:	619a      	str	r2, [r3, #24]
 8013966:	e016      	b.n	8013996 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8013968:	69bb      	ldr	r3, [r7, #24]
 801396a:	0c5b      	lsrs	r3, r3, #17
 801396c:	f003 030f 	and.w	r3, r3, #15
 8013970:	2b06      	cmp	r3, #6
 8013972:	d110      	bne.n	8013996 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801397a:	2208      	movs	r2, #8
 801397c:	4619      	mov	r1, r3
 801397e:	6a38      	ldr	r0, [r7, #32]
 8013980:	f008 f8f3 	bl	801bb6a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	699a      	ldr	r2, [r3, #24]
 8013988:	69bb      	ldr	r3, [r7, #24]
 801398a:	091b      	lsrs	r3, r3, #4
 801398c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8013990:	441a      	add	r2, r3
 8013992:	697b      	ldr	r3, [r7, #20]
 8013994:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	681b      	ldr	r3, [r3, #0]
 801399a:	699a      	ldr	r2, [r3, #24]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	f042 0210 	orr.w	r2, r2, #16
 80139a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	681b      	ldr	r3, [r3, #0]
 80139aa:	4618      	mov	r0, r3
 80139ac:	f008 fa30 	bl	801be10 <USB_ReadInterrupts>
 80139b0:	4603      	mov	r3, r0
 80139b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80139b6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80139ba:	d16e      	bne.n	8013a9a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80139bc:	2300      	movs	r3, #0
 80139be:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	4618      	mov	r0, r3
 80139c6:	f008 fa36 	bl	801be36 <USB_ReadDevAllOutEpInterrupt>
 80139ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80139cc:	e062      	b.n	8013a94 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80139ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139d0:	f003 0301 	and.w	r3, r3, #1
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d057      	beq.n	8013a88 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80139de:	b2d2      	uxtb	r2, r2
 80139e0:	4611      	mov	r1, r2
 80139e2:	4618      	mov	r0, r3
 80139e4:	f008 fa5b 	bl	801be9e <USB_ReadDevOutEPInterrupt>
 80139e8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80139ea:	693b      	ldr	r3, [r7, #16]
 80139ec:	f003 0301 	and.w	r3, r3, #1
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d00c      	beq.n	8013a0e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80139f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f6:	015a      	lsls	r2, r3, #5
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	4413      	add	r3, r2
 80139fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a00:	461a      	mov	r2, r3
 8013a02:	2301      	movs	r3, #1
 8013a04:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8013a06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 fddd 	bl	80145c8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8013a0e:	693b      	ldr	r3, [r7, #16]
 8013a10:	f003 0308 	and.w	r3, r3, #8
 8013a14:	2b00      	cmp	r3, #0
 8013a16:	d00c      	beq.n	8013a32 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8013a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1a:	015a      	lsls	r2, r3, #5
 8013a1c:	69fb      	ldr	r3, [r7, #28]
 8013a1e:	4413      	add	r3, r2
 8013a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a24:	461a      	mov	r2, r3
 8013a26:	2308      	movs	r3, #8
 8013a28:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8013a2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013a2c:	6878      	ldr	r0, [r7, #4]
 8013a2e:	f000 fed7 	bl	80147e0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8013a32:	693b      	ldr	r3, [r7, #16]
 8013a34:	f003 0310 	and.w	r3, r3, #16
 8013a38:	2b00      	cmp	r3, #0
 8013a3a:	d008      	beq.n	8013a4e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8013a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a3e:	015a      	lsls	r2, r3, #5
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	4413      	add	r3, r2
 8013a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a48:	461a      	mov	r2, r3
 8013a4a:	2310      	movs	r3, #16
 8013a4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	f003 0320 	and.w	r3, r3, #32
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d008      	beq.n	8013a6a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8013a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5a:	015a      	lsls	r2, r3, #5
 8013a5c:	69fb      	ldr	r3, [r7, #28]
 8013a5e:	4413      	add	r3, r2
 8013a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a64:	461a      	mov	r2, r3
 8013a66:	2320      	movs	r3, #32
 8013a68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8013a6a:	693b      	ldr	r3, [r7, #16]
 8013a6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d009      	beq.n	8013a88 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	015a      	lsls	r2, r3, #5
 8013a78:	69fb      	ldr	r3, [r7, #28]
 8013a7a:	4413      	add	r3, r2
 8013a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013a80:	461a      	mov	r2, r3
 8013a82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013a86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8013a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a8a:	3301      	adds	r3, #1
 8013a8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a90:	085b      	lsrs	r3, r3, #1
 8013a92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8013a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d199      	bne.n	80139ce <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f008 f9b6 	bl	801be10 <USB_ReadInterrupts>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013aaa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8013aae:	f040 80c0 	bne.w	8013c32 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	681b      	ldr	r3, [r3, #0]
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	f008 f9d7 	bl	801be6a <USB_ReadDevAllInEpInterrupt>
 8013abc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8013abe:	2300      	movs	r3, #0
 8013ac0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8013ac2:	e0b2      	b.n	8013c2a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8013ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac6:	f003 0301 	and.w	r3, r3, #1
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	f000 80a7 	beq.w	8013c1e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	681b      	ldr	r3, [r3, #0]
 8013ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ad6:	b2d2      	uxtb	r2, r2
 8013ad8:	4611      	mov	r1, r2
 8013ada:	4618      	mov	r0, r3
 8013adc:	f008 f9fd 	bl	801beda <USB_ReadDevInEPInterrupt>
 8013ae0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8013ae2:	693b      	ldr	r3, [r7, #16]
 8013ae4:	f003 0301 	and.w	r3, r3, #1
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d057      	beq.n	8013b9c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8013aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aee:	f003 030f 	and.w	r3, r3, #15
 8013af2:	2201      	movs	r2, #1
 8013af4:	fa02 f303 	lsl.w	r3, r2, r3
 8013af8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8013afa:	69fb      	ldr	r3, [r7, #28]
 8013afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	43db      	mvns	r3, r3
 8013b06:	69f9      	ldr	r1, [r7, #28]
 8013b08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b0c:	4013      	ands	r3, r2
 8013b0e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8013b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b12:	015a      	lsls	r2, r3, #5
 8013b14:	69fb      	ldr	r3, [r7, #28]
 8013b16:	4413      	add	r3, r2
 8013b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b1c:	461a      	mov	r2, r3
 8013b1e:	2301      	movs	r3, #1
 8013b20:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	691b      	ldr	r3, [r3, #16]
 8013b26:	2b01      	cmp	r3, #1
 8013b28:	d132      	bne.n	8013b90 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8013b2a:	6879      	ldr	r1, [r7, #4]
 8013b2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b2e:	4613      	mov	r3, r2
 8013b30:	00db      	lsls	r3, r3, #3
 8013b32:	1a9b      	subs	r3, r3, r2
 8013b34:	009b      	lsls	r3, r3, #2
 8013b36:	440b      	add	r3, r1
 8013b38:	3348      	adds	r3, #72	; 0x48
 8013b3a:	6819      	ldr	r1, [r3, #0]
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b40:	4613      	mov	r3, r2
 8013b42:	00db      	lsls	r3, r3, #3
 8013b44:	1a9b      	subs	r3, r3, r2
 8013b46:	009b      	lsls	r3, r3, #2
 8013b48:	4403      	add	r3, r0
 8013b4a:	3344      	adds	r3, #68	; 0x44
 8013b4c:	681b      	ldr	r3, [r3, #0]
 8013b4e:	4419      	add	r1, r3
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b54:	4613      	mov	r3, r2
 8013b56:	00db      	lsls	r3, r3, #3
 8013b58:	1a9b      	subs	r3, r3, r2
 8013b5a:	009b      	lsls	r3, r3, #2
 8013b5c:	4403      	add	r3, r0
 8013b5e:	3348      	adds	r3, #72	; 0x48
 8013b60:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8013b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d113      	bne.n	8013b90 <HAL_PCD_IRQHandler+0x31c>
 8013b68:	6879      	ldr	r1, [r7, #4]
 8013b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	00db      	lsls	r3, r3, #3
 8013b70:	1a9b      	subs	r3, r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	440b      	add	r3, r1
 8013b76:	3350      	adds	r3, #80	; 0x50
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d108      	bne.n	8013b90 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	6818      	ldr	r0, [r3, #0]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013b88:	461a      	mov	r2, r3
 8013b8a:	2101      	movs	r1, #1
 8013b8c:	f008 fa06 	bl	801bf9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8013b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b92:	b2db      	uxtb	r3, r3
 8013b94:	4619      	mov	r1, r3
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f00a f8e3 	bl	801dd62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8013b9c:	693b      	ldr	r3, [r7, #16]
 8013b9e:	f003 0308 	and.w	r3, r3, #8
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d008      	beq.n	8013bb8 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8013ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ba8:	015a      	lsls	r2, r3, #5
 8013baa:	69fb      	ldr	r3, [r7, #28]
 8013bac:	4413      	add	r3, r2
 8013bae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb2:	461a      	mov	r2, r3
 8013bb4:	2308      	movs	r3, #8
 8013bb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	f003 0310 	and.w	r3, r3, #16
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d008      	beq.n	8013bd4 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8013bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bc4:	015a      	lsls	r2, r3, #5
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	4413      	add	r3, r2
 8013bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bce:	461a      	mov	r2, r3
 8013bd0:	2310      	movs	r3, #16
 8013bd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d008      	beq.n	8013bf0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8013bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013be0:	015a      	lsls	r2, r3, #5
 8013be2:	69fb      	ldr	r3, [r7, #28]
 8013be4:	4413      	add	r3, r2
 8013be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bea:	461a      	mov	r2, r3
 8013bec:	2340      	movs	r3, #64	; 0x40
 8013bee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8013bf0:	693b      	ldr	r3, [r7, #16]
 8013bf2:	f003 0302 	and.w	r3, r3, #2
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d008      	beq.n	8013c0c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8013bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	69fb      	ldr	r3, [r7, #28]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c06:	461a      	mov	r2, r3
 8013c08:	2302      	movs	r3, #2
 8013c0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8013c0c:	693b      	ldr	r3, [r7, #16]
 8013c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d003      	beq.n	8013c1e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8013c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 fc48 	bl	80144ae <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8013c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c20:	3301      	adds	r3, #1
 8013c22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8013c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c26:	085b      	lsrs	r3, r3, #1
 8013c28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8013c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c2c:	2b00      	cmp	r3, #0
 8013c2e:	f47f af49 	bne.w	8013ac4 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	4618      	mov	r0, r3
 8013c38:	f008 f8ea 	bl	801be10 <USB_ReadInterrupts>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c46:	d122      	bne.n	8013c8e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013c48:	69fb      	ldr	r3, [r7, #28]
 8013c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	69fa      	ldr	r2, [r7, #28]
 8013c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c56:	f023 0301 	bic.w	r3, r3, #1
 8013c5a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8013c62:	2b01      	cmp	r3, #1
 8013c64:	d108      	bne.n	8013c78 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	2200      	movs	r2, #0
 8013c6a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8013c6e:	2100      	movs	r1, #0
 8013c70:	6878      	ldr	r0, [r7, #4]
 8013c72:	f000 fe77 	bl	8014964 <HAL_PCDEx_LPM_Callback>
 8013c76:	e002      	b.n	8013c7e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8013c78:	6878      	ldr	r0, [r7, #4]
 8013c7a:	f00a f8e9 	bl	801de50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8013c7e:	687b      	ldr	r3, [r7, #4]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	695a      	ldr	r2, [r3, #20]
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8013c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	4618      	mov	r0, r3
 8013c94:	f008 f8bc 	bl	801be10 <USB_ReadInterrupts>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013c9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013ca2:	d112      	bne.n	8013cca <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8013ca4:	69fb      	ldr	r3, [r7, #28]
 8013ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013caa:	689b      	ldr	r3, [r3, #8]
 8013cac:	f003 0301 	and.w	r3, r3, #1
 8013cb0:	2b01      	cmp	r3, #1
 8013cb2:	d102      	bne.n	8013cba <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f00a f8a5 	bl	801de04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	695a      	ldr	r2, [r3, #20]
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8013cc8:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f008 f89e 	bl	801be10 <USB_ReadInterrupts>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013cda:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8013cde:	d121      	bne.n	8013d24 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	681b      	ldr	r3, [r3, #0]
 8013ce4:	695a      	ldr	r2, [r3, #20]
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013cee:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d111      	bne.n	8013d1e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	2201      	movs	r2, #1
 8013cfe:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013d08:	089b      	lsrs	r3, r3, #2
 8013d0a:	f003 020f 	and.w	r2, r3, #15
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8013d14:	2101      	movs	r1, #1
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f000 fe24 	bl	8014964 <HAL_PCDEx_LPM_Callback>
 8013d1c:	e002      	b.n	8013d24 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8013d1e:	6878      	ldr	r0, [r7, #4]
 8013d20:	f00a f870 	bl	801de04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	681b      	ldr	r3, [r3, #0]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f008 f871 	bl	801be10 <USB_ReadInterrupts>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013d38:	f040 80c7 	bne.w	8013eca <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8013d3c:	69fb      	ldr	r3, [r7, #28]
 8013d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	69fa      	ldr	r2, [r7, #28]
 8013d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013d4a:	f023 0301 	bic.w	r3, r3, #1
 8013d4e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	2110      	movs	r1, #16
 8013d56:	4618      	mov	r0, r3
 8013d58:	f007 f99c 	bl	801b094 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013d60:	e056      	b.n	8013e10 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8013d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d64:	015a      	lsls	r2, r3, #5
 8013d66:	69fb      	ldr	r3, [r7, #28]
 8013d68:	4413      	add	r3, r2
 8013d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6e:	461a      	mov	r2, r3
 8013d70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013d74:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d78:	015a      	lsls	r2, r3, #5
 8013d7a:	69fb      	ldr	r3, [r7, #28]
 8013d7c:	4413      	add	r3, r2
 8013d7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d82:	681b      	ldr	r3, [r3, #0]
 8013d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013d86:	0151      	lsls	r1, r2, #5
 8013d88:	69fa      	ldr	r2, [r7, #28]
 8013d8a:	440a      	add	r2, r1
 8013d8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013d90:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013d94:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d98:	015a      	lsls	r2, r3, #5
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	4413      	add	r3, r2
 8013d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013da6:	0151      	lsls	r1, r2, #5
 8013da8:	69fa      	ldr	r2, [r7, #28]
 8013daa:	440a      	add	r2, r1
 8013dac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013db0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013db4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8013db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013db8:	015a      	lsls	r2, r3, #5
 8013dba:	69fb      	ldr	r3, [r7, #28]
 8013dbc:	4413      	add	r3, r2
 8013dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dc2:	461a      	mov	r2, r3
 8013dc4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013dc8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dcc:	015a      	lsls	r2, r3, #5
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	4413      	add	r3, r2
 8013dd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd6:	681b      	ldr	r3, [r3, #0]
 8013dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dda:	0151      	lsls	r1, r2, #5
 8013ddc:	69fa      	ldr	r2, [r7, #28]
 8013dde:	440a      	add	r2, r1
 8013de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013de4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013de8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dec:	015a      	lsls	r2, r3, #5
 8013dee:	69fb      	ldr	r3, [r7, #28]
 8013df0:	4413      	add	r3, r2
 8013df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013dfa:	0151      	lsls	r1, r2, #5
 8013dfc:	69fa      	ldr	r2, [r7, #28]
 8013dfe:	440a      	add	r2, r1
 8013e00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013e04:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013e08:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8013e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e0c:	3301      	adds	r3, #1
 8013e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	685b      	ldr	r3, [r3, #4]
 8013e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e16:	429a      	cmp	r2, r3
 8013e18:	d3a3      	bcc.n	8013d62 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8013e1a:	69fb      	ldr	r3, [r7, #28]
 8013e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e20:	69db      	ldr	r3, [r3, #28]
 8013e22:	69fa      	ldr	r2, [r7, #28]
 8013e24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e28:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8013e2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d016      	beq.n	8013e64 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8013e36:	69fb      	ldr	r3, [r7, #28]
 8013e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013e40:	69fa      	ldr	r2, [r7, #28]
 8013e42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e46:	f043 030b 	orr.w	r3, r3, #11
 8013e4a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8013e4e:	69fb      	ldr	r3, [r7, #28]
 8013e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e56:	69fa      	ldr	r2, [r7, #28]
 8013e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e5c:	f043 030b 	orr.w	r3, r3, #11
 8013e60:	6453      	str	r3, [r2, #68]	; 0x44
 8013e62:	e015      	b.n	8013e90 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8013e64:	69fb      	ldr	r3, [r7, #28]
 8013e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e6a:	695a      	ldr	r2, [r3, #20]
 8013e6c:	69fb      	ldr	r3, [r7, #28]
 8013e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e72:	4619      	mov	r1, r3
 8013e74:	f242 032b 	movw	r3, #8235	; 0x202b
 8013e78:	4313      	orrs	r3, r2
 8013e7a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8013e7c:	69fb      	ldr	r3, [r7, #28]
 8013e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e82:	691b      	ldr	r3, [r3, #16]
 8013e84:	69fa      	ldr	r2, [r7, #28]
 8013e86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e8a:	f043 030b 	orr.w	r3, r3, #11
 8013e8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8013e90:	69fb      	ldr	r3, [r7, #28]
 8013e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	69fa      	ldr	r2, [r7, #28]
 8013e9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8013ea2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	6818      	ldr	r0, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	691b      	ldr	r3, [r3, #16]
 8013eac:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8013eae:	687b      	ldr	r3, [r7, #4]
 8013eb0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	f008 f871 	bl	801bf9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	695a      	ldr	r2, [r3, #20]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8013ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	681b      	ldr	r3, [r3, #0]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f007 ff9e 	bl	801be10 <USB_ReadInterrupts>
 8013ed4:	4603      	mov	r3, r0
 8013ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8013ede:	d124      	bne.n	8013f2a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4618      	mov	r0, r3
 8013ee6:	f008 f835 	bl	801bf54 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4618      	mov	r0, r3
 8013ef0:	f007 f931 	bl	801b156 <USB_GetDevSpeed>
 8013ef4:	4603      	mov	r3, r0
 8013ef6:	461a      	mov	r2, r3
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	681c      	ldr	r4, [r3, #0]
 8013f00:	f001 fc86 	bl	8015810 <HAL_RCC_GetHCLKFreq>
 8013f04:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8013f0a:	b2db      	uxtb	r3, r3
 8013f0c:	461a      	mov	r2, r3
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f006 fe74 	bl	801abfc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f009 ff4c 	bl	801ddb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	681b      	ldr	r3, [r3, #0]
 8013f1e:	695a      	ldr	r2, [r3, #20]
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	681b      	ldr	r3, [r3, #0]
 8013f24:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8013f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4618      	mov	r0, r3
 8013f30:	f007 ff6e 	bl	801be10 <USB_ReadInterrupts>
 8013f34:	4603      	mov	r3, r0
 8013f36:	f003 0308 	and.w	r3, r3, #8
 8013f3a:	2b08      	cmp	r3, #8
 8013f3c:	d10a      	bne.n	8013f54 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f009 ff29 	bl	801dd96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	695a      	ldr	r2, [r3, #20]
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	681b      	ldr	r3, [r3, #0]
 8013f4e:	f002 0208 	and.w	r2, r2, #8
 8013f52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	4618      	mov	r0, r3
 8013f5a:	f007 ff59 	bl	801be10 <USB_ReadInterrupts>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013f64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8013f68:	d10f      	bne.n	8013f8a <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8013f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f70:	b2db      	uxtb	r3, r3
 8013f72:	4619      	mov	r1, r3
 8013f74:	6878      	ldr	r0, [r7, #4]
 8013f76:	f009 ff8b 	bl	801de90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	681b      	ldr	r3, [r3, #0]
 8013f7e:	695a      	ldr	r2, [r3, #20]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8013f88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4618      	mov	r0, r3
 8013f90:	f007 ff3e 	bl	801be10 <USB_ReadInterrupts>
 8013f94:	4603      	mov	r3, r0
 8013f96:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013f9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013f9e:	d10f      	bne.n	8013fc0 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8013fa0:	2300      	movs	r3, #0
 8013fa2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8013fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fa6:	b2db      	uxtb	r3, r3
 8013fa8:	4619      	mov	r1, r3
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f009 ff5e 	bl	801de6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	695a      	ldr	r2, [r3, #20]
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8013fbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	681b      	ldr	r3, [r3, #0]
 8013fc4:	4618      	mov	r0, r3
 8013fc6:	f007 ff23 	bl	801be10 <USB_ReadInterrupts>
 8013fca:	4603      	mov	r3, r0
 8013fcc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8013fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013fd4:	d10a      	bne.n	8013fec <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8013fd6:	6878      	ldr	r0, [r7, #4]
 8013fd8:	f009 ff6c 	bl	801deb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	695a      	ldr	r2, [r3, #20]
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	681b      	ldr	r3, [r3, #0]
 8013fe6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8013fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	4618      	mov	r0, r3
 8013ff2:	f007 ff0d 	bl	801be10 <USB_ReadInterrupts>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	f003 0304 	and.w	r3, r3, #4
 8013ffc:	2b04      	cmp	r3, #4
 8013ffe:	d115      	bne.n	801402c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8014000:	687b      	ldr	r3, [r7, #4]
 8014002:	681b      	ldr	r3, [r3, #0]
 8014004:	685b      	ldr	r3, [r3, #4]
 8014006:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8014008:	69bb      	ldr	r3, [r7, #24]
 801400a:	f003 0304 	and.w	r3, r3, #4
 801400e:	2b00      	cmp	r3, #0
 8014010:	d002      	beq.n	8014018 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f009 ff5c 	bl	801ded0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	681b      	ldr	r3, [r3, #0]
 801401c:	6859      	ldr	r1, [r3, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	69ba      	ldr	r2, [r7, #24]
 8014024:	430a      	orrs	r2, r1
 8014026:	605a      	str	r2, [r3, #4]
 8014028:	e000      	b.n	801402c <HAL_PCD_IRQHandler+0x7b8>
      return;
 801402a:	bf00      	nop
    }
  }
}
 801402c:	3734      	adds	r7, #52	; 0x34
 801402e:	46bd      	mov	sp, r7
 8014030:	bd90      	pop	{r4, r7, pc}

08014032 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8014032:	b580      	push	{r7, lr}
 8014034:	b082      	sub	sp, #8
 8014036:	af00      	add	r7, sp, #0
 8014038:	6078      	str	r0, [r7, #4]
 801403a:	460b      	mov	r3, r1
 801403c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014044:	2b01      	cmp	r3, #1
 8014046:	d101      	bne.n	801404c <HAL_PCD_SetAddress+0x1a>
 8014048:	2302      	movs	r3, #2
 801404a:	e013      	b.n	8014074 <HAL_PCD_SetAddress+0x42>
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	2201      	movs	r2, #1
 8014050:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	78fa      	ldrb	r2, [r7, #3]
 8014058:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	78fa      	ldrb	r2, [r7, #3]
 8014062:	4611      	mov	r1, r2
 8014064:	4618      	mov	r0, r3
 8014066:	f007 fe7d 	bl	801bd64 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	2200      	movs	r2, #0
 801406e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8014072:	2300      	movs	r3, #0
}
 8014074:	4618      	mov	r0, r3
 8014076:	3708      	adds	r7, #8
 8014078:	46bd      	mov	sp, r7
 801407a:	bd80      	pop	{r7, pc}

0801407c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 801407c:	b580      	push	{r7, lr}
 801407e:	b084      	sub	sp, #16
 8014080:	af00      	add	r7, sp, #0
 8014082:	6078      	str	r0, [r7, #4]
 8014084:	4608      	mov	r0, r1
 8014086:	4611      	mov	r1, r2
 8014088:	461a      	mov	r2, r3
 801408a:	4603      	mov	r3, r0
 801408c:	70fb      	strb	r3, [r7, #3]
 801408e:	460b      	mov	r3, r1
 8014090:	803b      	strh	r3, [r7, #0]
 8014092:	4613      	mov	r3, r2
 8014094:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8014096:	2300      	movs	r3, #0
 8014098:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 801409a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801409e:	2b00      	cmp	r3, #0
 80140a0:	da0f      	bge.n	80140c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80140a2:	78fb      	ldrb	r3, [r7, #3]
 80140a4:	f003 020f 	and.w	r2, r3, #15
 80140a8:	4613      	mov	r3, r2
 80140aa:	00db      	lsls	r3, r3, #3
 80140ac:	1a9b      	subs	r3, r3, r2
 80140ae:	009b      	lsls	r3, r3, #2
 80140b0:	3338      	adds	r3, #56	; 0x38
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	4413      	add	r3, r2
 80140b6:	3304      	adds	r3, #4
 80140b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	2201      	movs	r2, #1
 80140be:	705a      	strb	r2, [r3, #1]
 80140c0:	e00f      	b.n	80140e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80140c2:	78fb      	ldrb	r3, [r7, #3]
 80140c4:	f003 020f 	and.w	r2, r3, #15
 80140c8:	4613      	mov	r3, r2
 80140ca:	00db      	lsls	r3, r3, #3
 80140cc:	1a9b      	subs	r3, r3, r2
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80140d4:	687a      	ldr	r2, [r7, #4]
 80140d6:	4413      	add	r3, r2
 80140d8:	3304      	adds	r3, #4
 80140da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	2200      	movs	r2, #0
 80140e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80140e2:	78fb      	ldrb	r3, [r7, #3]
 80140e4:	f003 030f 	and.w	r3, r3, #15
 80140e8:	b2da      	uxtb	r2, r3
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80140ee:	883a      	ldrh	r2, [r7, #0]
 80140f0:	68fb      	ldr	r3, [r7, #12]
 80140f2:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	78ba      	ldrb	r2, [r7, #2]
 80140f8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	785b      	ldrb	r3, [r3, #1]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d004      	beq.n	801410c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	781b      	ldrb	r3, [r3, #0]
 8014106:	b29a      	uxth	r2, r3
 8014108:	68fb      	ldr	r3, [r7, #12]
 801410a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 801410c:	78bb      	ldrb	r3, [r7, #2]
 801410e:	2b02      	cmp	r3, #2
 8014110:	d102      	bne.n	8014118 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	2200      	movs	r2, #0
 8014116:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 801411e:	2b01      	cmp	r3, #1
 8014120:	d101      	bne.n	8014126 <HAL_PCD_EP_Open+0xaa>
 8014122:	2302      	movs	r3, #2
 8014124:	e00e      	b.n	8014144 <HAL_PCD_EP_Open+0xc8>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	2201      	movs	r2, #1
 801412a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	681b      	ldr	r3, [r3, #0]
 8014132:	68f9      	ldr	r1, [r7, #12]
 8014134:	4618      	mov	r0, r3
 8014136:	f007 f833 	bl	801b1a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	2200      	movs	r2, #0
 801413e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8014142:	7afb      	ldrb	r3, [r7, #11]
}
 8014144:	4618      	mov	r0, r3
 8014146:	3710      	adds	r7, #16
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b084      	sub	sp, #16
 8014150:	af00      	add	r7, sp, #0
 8014152:	6078      	str	r0, [r7, #4]
 8014154:	460b      	mov	r3, r1
 8014156:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8014158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801415c:	2b00      	cmp	r3, #0
 801415e:	da0f      	bge.n	8014180 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014160:	78fb      	ldrb	r3, [r7, #3]
 8014162:	f003 020f 	and.w	r2, r3, #15
 8014166:	4613      	mov	r3, r2
 8014168:	00db      	lsls	r3, r3, #3
 801416a:	1a9b      	subs	r3, r3, r2
 801416c:	009b      	lsls	r3, r3, #2
 801416e:	3338      	adds	r3, #56	; 0x38
 8014170:	687a      	ldr	r2, [r7, #4]
 8014172:	4413      	add	r3, r2
 8014174:	3304      	adds	r3, #4
 8014176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014178:	68fb      	ldr	r3, [r7, #12]
 801417a:	2201      	movs	r2, #1
 801417c:	705a      	strb	r2, [r3, #1]
 801417e:	e00f      	b.n	80141a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014180:	78fb      	ldrb	r3, [r7, #3]
 8014182:	f003 020f 	and.w	r2, r3, #15
 8014186:	4613      	mov	r3, r2
 8014188:	00db      	lsls	r3, r3, #3
 801418a:	1a9b      	subs	r3, r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014192:	687a      	ldr	r2, [r7, #4]
 8014194:	4413      	add	r3, r2
 8014196:	3304      	adds	r3, #4
 8014198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	2200      	movs	r2, #0
 801419e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80141a0:	78fb      	ldrb	r3, [r7, #3]
 80141a2:	f003 030f 	and.w	r3, r3, #15
 80141a6:	b2da      	uxtb	r2, r3
 80141a8:	68fb      	ldr	r3, [r7, #12]
 80141aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80141ac:	687b      	ldr	r3, [r7, #4]
 80141ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80141b2:	2b01      	cmp	r3, #1
 80141b4:	d101      	bne.n	80141ba <HAL_PCD_EP_Close+0x6e>
 80141b6:	2302      	movs	r3, #2
 80141b8:	e00e      	b.n	80141d8 <HAL_PCD_EP_Close+0x8c>
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	2201      	movs	r2, #1
 80141be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	68f9      	ldr	r1, [r7, #12]
 80141c8:	4618      	mov	r0, r3
 80141ca:	f007 f871 	bl	801b2b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	2200      	movs	r2, #0
 80141d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80141d6:	2300      	movs	r3, #0
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}

080141e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80141e0:	b580      	push	{r7, lr}
 80141e2:	b086      	sub	sp, #24
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	60f8      	str	r0, [r7, #12]
 80141e8:	607a      	str	r2, [r7, #4]
 80141ea:	603b      	str	r3, [r7, #0]
 80141ec:	460b      	mov	r3, r1
 80141ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80141f0:	7afb      	ldrb	r3, [r7, #11]
 80141f2:	f003 020f 	and.w	r2, r3, #15
 80141f6:	4613      	mov	r3, r2
 80141f8:	00db      	lsls	r3, r3, #3
 80141fa:	1a9b      	subs	r3, r3, r2
 80141fc:	009b      	lsls	r3, r3, #2
 80141fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	4413      	add	r3, r2
 8014206:	3304      	adds	r3, #4
 8014208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801420a:	697b      	ldr	r3, [r7, #20]
 801420c:	687a      	ldr	r2, [r7, #4]
 801420e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8014210:	697b      	ldr	r3, [r7, #20]
 8014212:	683a      	ldr	r2, [r7, #0]
 8014214:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	2200      	movs	r2, #0
 801421a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	2200      	movs	r2, #0
 8014220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8014222:	7afb      	ldrb	r3, [r7, #11]
 8014224:	f003 030f 	and.w	r3, r3, #15
 8014228:	b2da      	uxtb	r2, r3
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	691b      	ldr	r3, [r3, #16]
 8014232:	2b01      	cmp	r3, #1
 8014234:	d102      	bne.n	801423c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8014236:	687a      	ldr	r2, [r7, #4]
 8014238:	697b      	ldr	r3, [r7, #20]
 801423a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801423c:	7afb      	ldrb	r3, [r7, #11]
 801423e:	f003 030f 	and.w	r3, r3, #15
 8014242:	2b00      	cmp	r3, #0
 8014244:	d109      	bne.n	801425a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8014246:	68fb      	ldr	r3, [r7, #12]
 8014248:	6818      	ldr	r0, [r3, #0]
 801424a:	68fb      	ldr	r3, [r7, #12]
 801424c:	691b      	ldr	r3, [r3, #16]
 801424e:	b2db      	uxtb	r3, r3
 8014250:	461a      	mov	r2, r3
 8014252:	6979      	ldr	r1, [r7, #20]
 8014254:	f007 fafc 	bl	801b850 <USB_EP0StartXfer>
 8014258:	e008      	b.n	801426c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801425a:	68fb      	ldr	r3, [r7, #12]
 801425c:	6818      	ldr	r0, [r3, #0]
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	691b      	ldr	r3, [r3, #16]
 8014262:	b2db      	uxtb	r3, r3
 8014264:	461a      	mov	r2, r3
 8014266:	6979      	ldr	r1, [r7, #20]
 8014268:	f007 f8a6 	bl	801b3b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 801426c:	2300      	movs	r3, #0
}
 801426e:	4618      	mov	r0, r3
 8014270:	3718      	adds	r7, #24
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}

08014276 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014276:	b480      	push	{r7}
 8014278:	b083      	sub	sp, #12
 801427a:	af00      	add	r7, sp, #0
 801427c:	6078      	str	r0, [r7, #4]
 801427e:	460b      	mov	r3, r1
 8014280:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8014282:	78fb      	ldrb	r3, [r7, #3]
 8014284:	f003 020f 	and.w	r2, r3, #15
 8014288:	6879      	ldr	r1, [r7, #4]
 801428a:	4613      	mov	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	1a9b      	subs	r3, r3, r2
 8014290:	009b      	lsls	r3, r3, #2
 8014292:	440b      	add	r3, r1
 8014294:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8014298:	681b      	ldr	r3, [r3, #0]
}
 801429a:	4618      	mov	r0, r3
 801429c:	370c      	adds	r7, #12
 801429e:	46bd      	mov	sp, r7
 80142a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142a4:	4770      	bx	lr

080142a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80142a6:	b580      	push	{r7, lr}
 80142a8:	b086      	sub	sp, #24
 80142aa:	af00      	add	r7, sp, #0
 80142ac:	60f8      	str	r0, [r7, #12]
 80142ae:	607a      	str	r2, [r7, #4]
 80142b0:	603b      	str	r3, [r7, #0]
 80142b2:	460b      	mov	r3, r1
 80142b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80142b6:	7afb      	ldrb	r3, [r7, #11]
 80142b8:	f003 020f 	and.w	r2, r3, #15
 80142bc:	4613      	mov	r3, r2
 80142be:	00db      	lsls	r3, r3, #3
 80142c0:	1a9b      	subs	r3, r3, r2
 80142c2:	009b      	lsls	r3, r3, #2
 80142c4:	3338      	adds	r3, #56	; 0x38
 80142c6:	68fa      	ldr	r2, [r7, #12]
 80142c8:	4413      	add	r3, r2
 80142ca:	3304      	adds	r3, #4
 80142cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	687a      	ldr	r2, [r7, #4]
 80142d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	683a      	ldr	r2, [r7, #0]
 80142d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	2200      	movs	r2, #0
 80142de:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80142e0:	697b      	ldr	r3, [r7, #20]
 80142e2:	2201      	movs	r2, #1
 80142e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80142e6:	7afb      	ldrb	r3, [r7, #11]
 80142e8:	f003 030f 	and.w	r3, r3, #15
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80142f2:	68fb      	ldr	r3, [r7, #12]
 80142f4:	691b      	ldr	r3, [r3, #16]
 80142f6:	2b01      	cmp	r3, #1
 80142f8:	d102      	bne.n	8014300 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80142fa:	687a      	ldr	r2, [r7, #4]
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8014300:	7afb      	ldrb	r3, [r7, #11]
 8014302:	f003 030f 	and.w	r3, r3, #15
 8014306:	2b00      	cmp	r3, #0
 8014308:	d109      	bne.n	801431e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6818      	ldr	r0, [r3, #0]
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	691b      	ldr	r3, [r3, #16]
 8014312:	b2db      	uxtb	r3, r3
 8014314:	461a      	mov	r2, r3
 8014316:	6979      	ldr	r1, [r7, #20]
 8014318:	f007 fa9a 	bl	801b850 <USB_EP0StartXfer>
 801431c:	e008      	b.n	8014330 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	6818      	ldr	r0, [r3, #0]
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	691b      	ldr	r3, [r3, #16]
 8014326:	b2db      	uxtb	r3, r3
 8014328:	461a      	mov	r2, r3
 801432a:	6979      	ldr	r1, [r7, #20]
 801432c:	f007 f844 	bl	801b3b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8014330:	2300      	movs	r3, #0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3718      	adds	r7, #24
 8014336:	46bd      	mov	sp, r7
 8014338:	bd80      	pop	{r7, pc}

0801433a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
 8014342:	460b      	mov	r3, r1
 8014344:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8014346:	78fb      	ldrb	r3, [r7, #3]
 8014348:	f003 020f 	and.w	r2, r3, #15
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	429a      	cmp	r2, r3
 8014352:	d901      	bls.n	8014358 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8014354:	2301      	movs	r3, #1
 8014356:	e050      	b.n	80143fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014358:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801435c:	2b00      	cmp	r3, #0
 801435e:	da0f      	bge.n	8014380 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014360:	78fb      	ldrb	r3, [r7, #3]
 8014362:	f003 020f 	and.w	r2, r3, #15
 8014366:	4613      	mov	r3, r2
 8014368:	00db      	lsls	r3, r3, #3
 801436a:	1a9b      	subs	r3, r3, r2
 801436c:	009b      	lsls	r3, r3, #2
 801436e:	3338      	adds	r3, #56	; 0x38
 8014370:	687a      	ldr	r2, [r7, #4]
 8014372:	4413      	add	r3, r2
 8014374:	3304      	adds	r3, #4
 8014376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014378:	68fb      	ldr	r3, [r7, #12]
 801437a:	2201      	movs	r2, #1
 801437c:	705a      	strb	r2, [r3, #1]
 801437e:	e00d      	b.n	801439c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8014380:	78fa      	ldrb	r2, [r7, #3]
 8014382:	4613      	mov	r3, r2
 8014384:	00db      	lsls	r3, r3, #3
 8014386:	1a9b      	subs	r3, r3, r2
 8014388:	009b      	lsls	r3, r3, #2
 801438a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	4413      	add	r3, r2
 8014392:	3304      	adds	r3, #4
 8014394:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	2200      	movs	r2, #0
 801439a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	2201      	movs	r2, #1
 80143a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80143a2:	78fb      	ldrb	r3, [r7, #3]
 80143a4:	f003 030f 	and.w	r3, r3, #15
 80143a8:	b2da      	uxtb	r2, r3
 80143aa:	68fb      	ldr	r3, [r7, #12]
 80143ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80143b4:	2b01      	cmp	r3, #1
 80143b6:	d101      	bne.n	80143bc <HAL_PCD_EP_SetStall+0x82>
 80143b8:	2302      	movs	r3, #2
 80143ba:	e01e      	b.n	80143fa <HAL_PCD_EP_SetStall+0xc0>
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	2201      	movs	r2, #1
 80143c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	681b      	ldr	r3, [r3, #0]
 80143c8:	68f9      	ldr	r1, [r7, #12]
 80143ca:	4618      	mov	r0, r3
 80143cc:	f007 fbf6 	bl	801bbbc <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80143d0:	78fb      	ldrb	r3, [r7, #3]
 80143d2:	f003 030f 	and.w	r3, r3, #15
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d10a      	bne.n	80143f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	6818      	ldr	r0, [r3, #0]
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	691b      	ldr	r3, [r3, #16]
 80143e2:	b2d9      	uxtb	r1, r3
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80143ea:	461a      	mov	r2, r3
 80143ec:	f007 fdd6 	bl	801bf9c <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	2200      	movs	r2, #0
 80143f4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80143f8:	2300      	movs	r3, #0
}
 80143fa:	4618      	mov	r0, r3
 80143fc:	3710      	adds	r7, #16
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	460b      	mov	r3, r1
 801440c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801440e:	78fb      	ldrb	r3, [r7, #3]
 8014410:	f003 020f 	and.w	r2, r3, #15
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	685b      	ldr	r3, [r3, #4]
 8014418:	429a      	cmp	r2, r3
 801441a:	d901      	bls.n	8014420 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 801441c:	2301      	movs	r3, #1
 801441e:	e042      	b.n	80144a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8014420:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014424:	2b00      	cmp	r3, #0
 8014426:	da0f      	bge.n	8014448 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8014428:	78fb      	ldrb	r3, [r7, #3]
 801442a:	f003 020f 	and.w	r2, r3, #15
 801442e:	4613      	mov	r3, r2
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	1a9b      	subs	r3, r3, r2
 8014434:	009b      	lsls	r3, r3, #2
 8014436:	3338      	adds	r3, #56	; 0x38
 8014438:	687a      	ldr	r2, [r7, #4]
 801443a:	4413      	add	r3, r2
 801443c:	3304      	adds	r3, #4
 801443e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	2201      	movs	r2, #1
 8014444:	705a      	strb	r2, [r3, #1]
 8014446:	e00f      	b.n	8014468 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8014448:	78fb      	ldrb	r3, [r7, #3]
 801444a:	f003 020f 	and.w	r2, r3, #15
 801444e:	4613      	mov	r3, r2
 8014450:	00db      	lsls	r3, r3, #3
 8014452:	1a9b      	subs	r3, r3, r2
 8014454:	009b      	lsls	r3, r3, #2
 8014456:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	4413      	add	r3, r2
 801445e:	3304      	adds	r3, #4
 8014460:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	2200      	movs	r2, #0
 8014466:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	2200      	movs	r2, #0
 801446c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801446e:	78fb      	ldrb	r3, [r7, #3]
 8014470:	f003 030f 	and.w	r3, r3, #15
 8014474:	b2da      	uxtb	r2, r3
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8014480:	2b01      	cmp	r3, #1
 8014482:	d101      	bne.n	8014488 <HAL_PCD_EP_ClrStall+0x86>
 8014484:	2302      	movs	r3, #2
 8014486:	e00e      	b.n	80144a6 <HAL_PCD_EP_ClrStall+0xa4>
 8014488:	687b      	ldr	r3, [r7, #4]
 801448a:	2201      	movs	r2, #1
 801448c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	68f9      	ldr	r1, [r7, #12]
 8014496:	4618      	mov	r0, r3
 8014498:	f007 fbfe 	bl	801bc98 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 801449c:	687b      	ldr	r3, [r7, #4]
 801449e:	2200      	movs	r2, #0
 80144a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80144a4:	2300      	movs	r3, #0
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}

080144ae <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80144ae:	b580      	push	{r7, lr}
 80144b0:	b08a      	sub	sp, #40	; 0x28
 80144b2:	af02      	add	r7, sp, #8
 80144b4:	6078      	str	r0, [r7, #4]
 80144b6:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	681b      	ldr	r3, [r3, #0]
 80144bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80144be:	697b      	ldr	r3, [r7, #20]
 80144c0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80144c2:	683a      	ldr	r2, [r7, #0]
 80144c4:	4613      	mov	r3, r2
 80144c6:	00db      	lsls	r3, r3, #3
 80144c8:	1a9b      	subs	r3, r3, r2
 80144ca:	009b      	lsls	r3, r3, #2
 80144cc:	3338      	adds	r3, #56	; 0x38
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	4413      	add	r3, r2
 80144d2:	3304      	adds	r3, #4
 80144d4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	699a      	ldr	r2, [r3, #24]
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	695b      	ldr	r3, [r3, #20]
 80144de:	429a      	cmp	r2, r3
 80144e0:	d901      	bls.n	80144e6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80144e2:	2301      	movs	r3, #1
 80144e4:	e06c      	b.n	80145c0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	695a      	ldr	r2, [r3, #20]
 80144ea:	68fb      	ldr	r3, [r7, #12]
 80144ec:	699b      	ldr	r3, [r3, #24]
 80144ee:	1ad3      	subs	r3, r2, r3
 80144f0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80144f2:	68fb      	ldr	r3, [r7, #12]
 80144f4:	689b      	ldr	r3, [r3, #8]
 80144f6:	69fa      	ldr	r2, [r7, #28]
 80144f8:	429a      	cmp	r2, r3
 80144fa:	d902      	bls.n	8014502 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	689b      	ldr	r3, [r3, #8]
 8014500:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8014502:	69fb      	ldr	r3, [r7, #28]
 8014504:	3303      	adds	r3, #3
 8014506:	089b      	lsrs	r3, r3, #2
 8014508:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 801450a:	e02b      	b.n	8014564 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	695a      	ldr	r2, [r3, #20]
 8014510:	68fb      	ldr	r3, [r7, #12]
 8014512:	699b      	ldr	r3, [r3, #24]
 8014514:	1ad3      	subs	r3, r2, r3
 8014516:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	689b      	ldr	r3, [r3, #8]
 801451c:	69fa      	ldr	r2, [r7, #28]
 801451e:	429a      	cmp	r2, r3
 8014520:	d902      	bls.n	8014528 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	689b      	ldr	r3, [r3, #8]
 8014526:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8014528:	69fb      	ldr	r3, [r7, #28]
 801452a:	3303      	adds	r3, #3
 801452c:	089b      	lsrs	r3, r3, #2
 801452e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	68d9      	ldr	r1, [r3, #12]
 8014534:	683b      	ldr	r3, [r7, #0]
 8014536:	b2da      	uxtb	r2, r3
 8014538:	69fb      	ldr	r3, [r7, #28]
 801453a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8014540:	b2db      	uxtb	r3, r3
 8014542:	9300      	str	r3, [sp, #0]
 8014544:	4603      	mov	r3, r0
 8014546:	6978      	ldr	r0, [r7, #20]
 8014548:	f007 fada 	bl	801bb00 <USB_WritePacket>

    ep->xfer_buff  += len;
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	68da      	ldr	r2, [r3, #12]
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	441a      	add	r2, r3
 8014554:	68fb      	ldr	r3, [r7, #12]
 8014556:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	699a      	ldr	r2, [r3, #24]
 801455c:	69fb      	ldr	r3, [r7, #28]
 801455e:	441a      	add	r2, r3
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014564:	683b      	ldr	r3, [r7, #0]
 8014566:	015a      	lsls	r2, r3, #5
 8014568:	693b      	ldr	r3, [r7, #16]
 801456a:	4413      	add	r3, r2
 801456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014570:	699b      	ldr	r3, [r3, #24]
 8014572:	b29b      	uxth	r3, r3
 8014574:	69ba      	ldr	r2, [r7, #24]
 8014576:	429a      	cmp	r2, r3
 8014578:	d809      	bhi.n	801458e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 801457a:	68fb      	ldr	r3, [r7, #12]
 801457c:	699a      	ldr	r2, [r3, #24]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8014582:	429a      	cmp	r2, r3
 8014584:	d203      	bcs.n	801458e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8014586:	68fb      	ldr	r3, [r7, #12]
 8014588:	695b      	ldr	r3, [r3, #20]
 801458a:	2b00      	cmp	r3, #0
 801458c:	d1be      	bne.n	801450c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	695a      	ldr	r2, [r3, #20]
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	429a      	cmp	r2, r3
 8014598:	d811      	bhi.n	80145be <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 801459a:	683b      	ldr	r3, [r7, #0]
 801459c:	f003 030f 	and.w	r3, r3, #15
 80145a0:	2201      	movs	r2, #1
 80145a2:	fa02 f303 	lsl.w	r3, r2, r3
 80145a6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80145a8:	693b      	ldr	r3, [r7, #16]
 80145aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80145ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80145b0:	68bb      	ldr	r3, [r7, #8]
 80145b2:	43db      	mvns	r3, r3
 80145b4:	6939      	ldr	r1, [r7, #16]
 80145b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80145ba:	4013      	ands	r3, r2
 80145bc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3720      	adds	r7, #32
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b086      	sub	sp, #24
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	6078      	str	r0, [r7, #4]
 80145d0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	681b      	ldr	r3, [r3, #0]
 80145d6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	333c      	adds	r3, #60	; 0x3c
 80145e0:	3304      	adds	r3, #4
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	015a      	lsls	r2, r3, #5
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	4413      	add	r3, r2
 80145ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145f2:	689b      	ldr	r3, [r3, #8]
 80145f4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80145f6:	687b      	ldr	r3, [r7, #4]
 80145f8:	691b      	ldr	r3, [r3, #16]
 80145fa:	2b01      	cmp	r3, #1
 80145fc:	f040 80a0 	bne.w	8014740 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8014600:	68bb      	ldr	r3, [r7, #8]
 8014602:	f003 0308 	and.w	r3, r3, #8
 8014606:	2b00      	cmp	r3, #0
 8014608:	d015      	beq.n	8014636 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801460a:	68fb      	ldr	r3, [r7, #12]
 801460c:	4a72      	ldr	r2, [pc, #456]	; (80147d8 <PCD_EP_OutXfrComplete_int+0x210>)
 801460e:	4293      	cmp	r3, r2
 8014610:	f240 80dd 	bls.w	80147ce <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014614:	68bb      	ldr	r3, [r7, #8]
 8014616:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801461a:	2b00      	cmp	r3, #0
 801461c:	f000 80d7 	beq.w	80147ce <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	015a      	lsls	r2, r3, #5
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	4413      	add	r3, r2
 8014628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801462c:	461a      	mov	r2, r3
 801462e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014632:	6093      	str	r3, [r2, #8]
 8014634:	e0cb      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8014636:	68bb      	ldr	r3, [r7, #8]
 8014638:	f003 0320 	and.w	r3, r3, #32
 801463c:	2b00      	cmp	r3, #0
 801463e:	d009      	beq.n	8014654 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014640:	683b      	ldr	r3, [r7, #0]
 8014642:	015a      	lsls	r2, r3, #5
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	4413      	add	r3, r2
 8014648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801464c:	461a      	mov	r2, r3
 801464e:	2320      	movs	r3, #32
 8014650:	6093      	str	r3, [r2, #8]
 8014652:	e0bc      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8014654:	68bb      	ldr	r3, [r7, #8]
 8014656:	f003 0328 	and.w	r3, r3, #40	; 0x28
 801465a:	2b00      	cmp	r3, #0
 801465c:	f040 80b7 	bne.w	80147ce <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	4a5d      	ldr	r2, [pc, #372]	; (80147d8 <PCD_EP_OutXfrComplete_int+0x210>)
 8014664:	4293      	cmp	r3, r2
 8014666:	d90f      	bls.n	8014688 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014668:	68bb      	ldr	r3, [r7, #8]
 801466a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801466e:	2b00      	cmp	r3, #0
 8014670:	d00a      	beq.n	8014688 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014672:	683b      	ldr	r3, [r7, #0]
 8014674:	015a      	lsls	r2, r3, #5
 8014676:	693b      	ldr	r3, [r7, #16]
 8014678:	4413      	add	r3, r2
 801467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801467e:	461a      	mov	r2, r3
 8014680:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014684:	6093      	str	r3, [r2, #8]
 8014686:	e0a2      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8014688:	6879      	ldr	r1, [r7, #4]
 801468a:	683a      	ldr	r2, [r7, #0]
 801468c:	4613      	mov	r3, r2
 801468e:	00db      	lsls	r3, r3, #3
 8014690:	1a9b      	subs	r3, r3, r2
 8014692:	009b      	lsls	r3, r3, #2
 8014694:	440b      	add	r3, r1
 8014696:	f503 7301 	add.w	r3, r3, #516	; 0x204
 801469a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801469c:	683b      	ldr	r3, [r7, #0]
 801469e:	0159      	lsls	r1, r3, #5
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	440b      	add	r3, r1
 80146a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80146ae:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	683a      	ldr	r2, [r7, #0]
 80146b4:	4613      	mov	r3, r2
 80146b6:	00db      	lsls	r3, r3, #3
 80146b8:	1a9b      	subs	r3, r3, r2
 80146ba:	009b      	lsls	r3, r3, #2
 80146bc:	4403      	add	r3, r0
 80146be:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80146c2:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80146c4:	6879      	ldr	r1, [r7, #4]
 80146c6:	683a      	ldr	r2, [r7, #0]
 80146c8:	4613      	mov	r3, r2
 80146ca:	00db      	lsls	r3, r3, #3
 80146cc:	1a9b      	subs	r3, r3, r2
 80146ce:	009b      	lsls	r3, r3, #2
 80146d0:	440b      	add	r3, r1
 80146d2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80146d6:	6819      	ldr	r1, [r3, #0]
 80146d8:	6878      	ldr	r0, [r7, #4]
 80146da:	683a      	ldr	r2, [r7, #0]
 80146dc:	4613      	mov	r3, r2
 80146de:	00db      	lsls	r3, r3, #3
 80146e0:	1a9b      	subs	r3, r3, r2
 80146e2:	009b      	lsls	r3, r3, #2
 80146e4:	4403      	add	r3, r0
 80146e6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	4419      	add	r1, r3
 80146ee:	6878      	ldr	r0, [r7, #4]
 80146f0:	683a      	ldr	r2, [r7, #0]
 80146f2:	4613      	mov	r3, r2
 80146f4:	00db      	lsls	r3, r3, #3
 80146f6:	1a9b      	subs	r3, r3, r2
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	4403      	add	r3, r0
 80146fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8014700:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	2b00      	cmp	r3, #0
 8014706:	d114      	bne.n	8014732 <PCD_EP_OutXfrComplete_int+0x16a>
 8014708:	6879      	ldr	r1, [r7, #4]
 801470a:	683a      	ldr	r2, [r7, #0]
 801470c:	4613      	mov	r3, r2
 801470e:	00db      	lsls	r3, r3, #3
 8014710:	1a9b      	subs	r3, r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	440b      	add	r3, r1
 8014716:	f503 7304 	add.w	r3, r3, #528	; 0x210
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	2b00      	cmp	r3, #0
 801471e:	d108      	bne.n	8014732 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6818      	ldr	r0, [r3, #0]
 8014724:	687b      	ldr	r3, [r7, #4]
 8014726:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801472a:	461a      	mov	r2, r3
 801472c:	2101      	movs	r1, #1
 801472e:	f007 fc35 	bl	801bf9c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014732:	683b      	ldr	r3, [r7, #0]
 8014734:	b2db      	uxtb	r3, r3
 8014736:	4619      	mov	r1, r3
 8014738:	6878      	ldr	r0, [r7, #4]
 801473a:	f009 faf7 	bl	801dd2c <HAL_PCD_DataOutStageCallback>
 801473e:	e046      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	4a26      	ldr	r2, [pc, #152]	; (80147dc <PCD_EP_OutXfrComplete_int+0x214>)
 8014744:	4293      	cmp	r3, r2
 8014746:	d124      	bne.n	8014792 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8014748:	68bb      	ldr	r3, [r7, #8]
 801474a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00a      	beq.n	8014768 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014752:	683b      	ldr	r3, [r7, #0]
 8014754:	015a      	lsls	r2, r3, #5
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	4413      	add	r3, r2
 801475a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801475e:	461a      	mov	r2, r3
 8014760:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014764:	6093      	str	r3, [r2, #8]
 8014766:	e032      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	f003 0320 	and.w	r3, r3, #32
 801476e:	2b00      	cmp	r3, #0
 8014770:	d008      	beq.n	8014784 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8014772:	683b      	ldr	r3, [r7, #0]
 8014774:	015a      	lsls	r2, r3, #5
 8014776:	693b      	ldr	r3, [r7, #16]
 8014778:	4413      	add	r3, r2
 801477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801477e:	461a      	mov	r2, r3
 8014780:	2320      	movs	r3, #32
 8014782:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8014784:	683b      	ldr	r3, [r7, #0]
 8014786:	b2db      	uxtb	r3, r3
 8014788:	4619      	mov	r1, r3
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f009 face 	bl	801dd2c <HAL_PCD_DataOutStageCallback>
 8014790:	e01d      	b.n	80147ce <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8014792:	683b      	ldr	r3, [r7, #0]
 8014794:	2b00      	cmp	r3, #0
 8014796:	d114      	bne.n	80147c2 <PCD_EP_OutXfrComplete_int+0x1fa>
 8014798:	6879      	ldr	r1, [r7, #4]
 801479a:	683a      	ldr	r2, [r7, #0]
 801479c:	4613      	mov	r3, r2
 801479e:	00db      	lsls	r3, r3, #3
 80147a0:	1a9b      	subs	r3, r3, r2
 80147a2:	009b      	lsls	r3, r3, #2
 80147a4:	440b      	add	r3, r1
 80147a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	2b00      	cmp	r3, #0
 80147ae:	d108      	bne.n	80147c2 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6818      	ldr	r0, [r3, #0]
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80147ba:	461a      	mov	r2, r3
 80147bc:	2100      	movs	r1, #0
 80147be:	f007 fbed 	bl	801bf9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	b2db      	uxtb	r3, r3
 80147c6:	4619      	mov	r1, r3
 80147c8:	6878      	ldr	r0, [r7, #4]
 80147ca:	f009 faaf 	bl	801dd2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80147ce:	2300      	movs	r3, #0
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	3718      	adds	r7, #24
 80147d4:	46bd      	mov	sp, r7
 80147d6:	bd80      	pop	{r7, pc}
 80147d8:	4f54300a 	.word	0x4f54300a
 80147dc:	4f54310a 	.word	0x4f54310a

080147e0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80147e0:	b580      	push	{r7, lr}
 80147e2:	b086      	sub	sp, #24
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
 80147e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147f0:	697b      	ldr	r3, [r7, #20]
 80147f2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80147f4:	697b      	ldr	r3, [r7, #20]
 80147f6:	333c      	adds	r3, #60	; 0x3c
 80147f8:	3304      	adds	r3, #4
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	015a      	lsls	r2, r3, #5
 8014802:	693b      	ldr	r3, [r7, #16]
 8014804:	4413      	add	r3, r2
 8014806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801480e:	68fb      	ldr	r3, [r7, #12]
 8014810:	4a15      	ldr	r2, [pc, #84]	; (8014868 <PCD_EP_OutSetupPacket_int+0x88>)
 8014812:	4293      	cmp	r3, r2
 8014814:	d90e      	bls.n	8014834 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8014816:	68bb      	ldr	r3, [r7, #8]
 8014818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801481c:	2b00      	cmp	r3, #0
 801481e:	d009      	beq.n	8014834 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	015a      	lsls	r2, r3, #5
 8014824:	693b      	ldr	r3, [r7, #16]
 8014826:	4413      	add	r3, r2
 8014828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801482c:	461a      	mov	r2, r3
 801482e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8014832:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8014834:	6878      	ldr	r0, [r7, #4]
 8014836:	f009 fa67 	bl	801dd08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 801483a:	68fb      	ldr	r3, [r7, #12]
 801483c:	4a0a      	ldr	r2, [pc, #40]	; (8014868 <PCD_EP_OutSetupPacket_int+0x88>)
 801483e:	4293      	cmp	r3, r2
 8014840:	d90c      	bls.n	801485c <PCD_EP_OutSetupPacket_int+0x7c>
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	691b      	ldr	r3, [r3, #16]
 8014846:	2b01      	cmp	r3, #1
 8014848:	d108      	bne.n	801485c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	6818      	ldr	r0, [r3, #0]
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014854:	461a      	mov	r2, r3
 8014856:	2101      	movs	r1, #1
 8014858:	f007 fba0 	bl	801bf9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 801485c:	2300      	movs	r3, #0
}
 801485e:	4618      	mov	r0, r3
 8014860:	3718      	adds	r7, #24
 8014862:	46bd      	mov	sp, r7
 8014864:	bd80      	pop	{r7, pc}
 8014866:	bf00      	nop
 8014868:	4f54300a 	.word	0x4f54300a

0801486c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 801486c:	b480      	push	{r7}
 801486e:	b085      	sub	sp, #20
 8014870:	af00      	add	r7, sp, #0
 8014872:	6078      	str	r0, [r7, #4]
 8014874:	460b      	mov	r3, r1
 8014876:	70fb      	strb	r3, [r7, #3]
 8014878:	4613      	mov	r3, r2
 801487a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014882:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8014884:	78fb      	ldrb	r3, [r7, #3]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d107      	bne.n	801489a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 801488a:	883b      	ldrh	r3, [r7, #0]
 801488c:	0419      	lsls	r1, r3, #16
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	68ba      	ldr	r2, [r7, #8]
 8014894:	430a      	orrs	r2, r1
 8014896:	629a      	str	r2, [r3, #40]	; 0x28
 8014898:	e028      	b.n	80148ec <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	681b      	ldr	r3, [r3, #0]
 801489e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80148a0:	0c1b      	lsrs	r3, r3, #16
 80148a2:	68ba      	ldr	r2, [r7, #8]
 80148a4:	4413      	add	r3, r2
 80148a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80148a8:	2300      	movs	r3, #0
 80148aa:	73fb      	strb	r3, [r7, #15]
 80148ac:	e00d      	b.n	80148ca <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	681a      	ldr	r2, [r3, #0]
 80148b2:	7bfb      	ldrb	r3, [r7, #15]
 80148b4:	3340      	adds	r3, #64	; 0x40
 80148b6:	009b      	lsls	r3, r3, #2
 80148b8:	4413      	add	r3, r2
 80148ba:	685b      	ldr	r3, [r3, #4]
 80148bc:	0c1b      	lsrs	r3, r3, #16
 80148be:	68ba      	ldr	r2, [r7, #8]
 80148c0:	4413      	add	r3, r2
 80148c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80148c4:	7bfb      	ldrb	r3, [r7, #15]
 80148c6:	3301      	adds	r3, #1
 80148c8:	73fb      	strb	r3, [r7, #15]
 80148ca:	7bfa      	ldrb	r2, [r7, #15]
 80148cc:	78fb      	ldrb	r3, [r7, #3]
 80148ce:	3b01      	subs	r3, #1
 80148d0:	429a      	cmp	r2, r3
 80148d2:	d3ec      	bcc.n	80148ae <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80148d4:	883b      	ldrh	r3, [r7, #0]
 80148d6:	0418      	lsls	r0, r3, #16
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	6819      	ldr	r1, [r3, #0]
 80148dc:	78fb      	ldrb	r3, [r7, #3]
 80148de:	3b01      	subs	r3, #1
 80148e0:	68ba      	ldr	r2, [r7, #8]
 80148e2:	4302      	orrs	r2, r0
 80148e4:	3340      	adds	r3, #64	; 0x40
 80148e6:	009b      	lsls	r3, r3, #2
 80148e8:	440b      	add	r3, r1
 80148ea:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80148ec:	2300      	movs	r3, #0
}
 80148ee:	4618      	mov	r0, r3
 80148f0:	3714      	adds	r7, #20
 80148f2:	46bd      	mov	sp, r7
 80148f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148f8:	4770      	bx	lr

080148fa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80148fa:	b480      	push	{r7}
 80148fc:	b083      	sub	sp, #12
 80148fe:	af00      	add	r7, sp, #0
 8014900:	6078      	str	r0, [r7, #4]
 8014902:	460b      	mov	r3, r1
 8014904:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8014906:	687b      	ldr	r3, [r7, #4]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	887a      	ldrh	r2, [r7, #2]
 801490c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 801490e:	2300      	movs	r3, #0
}
 8014910:	4618      	mov	r0, r3
 8014912:	370c      	adds	r7, #12
 8014914:	46bd      	mov	sp, r7
 8014916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801491a:	4770      	bx	lr

0801491c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 801491c:	b480      	push	{r7}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	2201      	movs	r2, #1
 801492e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	2200      	movs	r2, #0
 8014936:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	699b      	ldr	r3, [r3, #24]
 801493e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801494a:	4b05      	ldr	r3, [pc, #20]	; (8014960 <HAL_PCDEx_ActivateLPM+0x44>)
 801494c:	4313      	orrs	r3, r2
 801494e:	68fa      	ldr	r2, [r7, #12]
 8014950:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8014952:	2300      	movs	r3, #0
}
 8014954:	4618      	mov	r0, r3
 8014956:	3714      	adds	r7, #20
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr
 8014960:	10000003 	.word	0x10000003

08014964 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8014964:	b480      	push	{r7}
 8014966:	b083      	sub	sp, #12
 8014968:	af00      	add	r7, sp, #0
 801496a:	6078      	str	r0, [r7, #4]
 801496c:	460b      	mov	r3, r1
 801496e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8014970:	bf00      	nop
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8014984:	4b19      	ldr	r3, [pc, #100]	; (80149ec <HAL_PWREx_ConfigSupply+0x70>)
 8014986:	68db      	ldr	r3, [r3, #12]
 8014988:	f003 0304 	and.w	r3, r3, #4
 801498c:	2b04      	cmp	r3, #4
 801498e:	d00a      	beq.n	80149a6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8014990:	4b16      	ldr	r3, [pc, #88]	; (80149ec <HAL_PWREx_ConfigSupply+0x70>)
 8014992:	68db      	ldr	r3, [r3, #12]
 8014994:	f003 0307 	and.w	r3, r3, #7
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	429a      	cmp	r2, r3
 801499c:	d001      	beq.n	80149a2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801499e:	2301      	movs	r3, #1
 80149a0:	e01f      	b.n	80149e2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80149a2:	2300      	movs	r3, #0
 80149a4:	e01d      	b.n	80149e2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80149a6:	4b11      	ldr	r3, [pc, #68]	; (80149ec <HAL_PWREx_ConfigSupply+0x70>)
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	f023 0207 	bic.w	r2, r3, #7
 80149ae:	490f      	ldr	r1, [pc, #60]	; (80149ec <HAL_PWREx_ConfigSupply+0x70>)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	4313      	orrs	r3, r2
 80149b4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80149b6:	f7fe f87d 	bl	8012ab4 <HAL_GetTick>
 80149ba:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80149bc:	e009      	b.n	80149d2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80149be:	f7fe f879 	bl	8012ab4 <HAL_GetTick>
 80149c2:	4602      	mov	r2, r0
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	1ad3      	subs	r3, r2, r3
 80149c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80149cc:	d901      	bls.n	80149d2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80149ce:	2301      	movs	r3, #1
 80149d0:	e007      	b.n	80149e2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80149d2:	4b06      	ldr	r3, [pc, #24]	; (80149ec <HAL_PWREx_ConfigSupply+0x70>)
 80149d4:	685b      	ldr	r3, [r3, #4]
 80149d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80149da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80149de:	d1ee      	bne.n	80149be <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80149e0:	2300      	movs	r3, #0
}
 80149e2:	4618      	mov	r0, r3
 80149e4:	3710      	adds	r7, #16
 80149e6:	46bd      	mov	sp, r7
 80149e8:	bd80      	pop	{r7, pc}
 80149ea:	bf00      	nop
 80149ec:	58024800 	.word	0x58024800

080149f0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80149f0:	b480      	push	{r7}
 80149f2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80149f4:	4b05      	ldr	r3, [pc, #20]	; (8014a0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80149f6:	68db      	ldr	r3, [r3, #12]
 80149f8:	4a04      	ldr	r2, [pc, #16]	; (8014a0c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80149fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80149fe:	60d3      	str	r3, [r2, #12]
}
 8014a00:	bf00      	nop
 8014a02:	46bd      	mov	sp, r7
 8014a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a08:	4770      	bx	lr
 8014a0a:	bf00      	nop
 8014a0c:	58024800 	.word	0x58024800

08014a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8014a10:	b580      	push	{r7, lr}
 8014a12:	b08c      	sub	sp, #48	; 0x30
 8014a14:	af00      	add	r7, sp, #0
 8014a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d101      	bne.n	8014a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8014a1e:	2301      	movs	r3, #1
 8014a20:	e3c4      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	f003 0301 	and.w	r3, r3, #1
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	f000 8087 	beq.w	8014b3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014a30:	4ba2      	ldr	r3, [pc, #648]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a32:	691b      	ldr	r3, [r3, #16]
 8014a34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014a38:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014a3a:	4ba0      	ldr	r3, [pc, #640]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8014a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a42:	2b10      	cmp	r3, #16
 8014a44:	d007      	beq.n	8014a56 <HAL_RCC_OscConfig+0x46>
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	2b18      	cmp	r3, #24
 8014a4a:	d110      	bne.n	8014a6e <HAL_RCC_OscConfig+0x5e>
 8014a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014a4e:	f003 0303 	and.w	r3, r3, #3
 8014a52:	2b02      	cmp	r3, #2
 8014a54:	d10b      	bne.n	8014a6e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014a56:	4b99      	ldr	r3, [pc, #612]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a58:	681b      	ldr	r3, [r3, #0]
 8014a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a5e:	2b00      	cmp	r3, #0
 8014a60:	d06c      	beq.n	8014b3c <HAL_RCC_OscConfig+0x12c>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d168      	bne.n	8014b3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e39e      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	685b      	ldr	r3, [r3, #4]
 8014a72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014a76:	d106      	bne.n	8014a86 <HAL_RCC_OscConfig+0x76>
 8014a78:	4b90      	ldr	r3, [pc, #576]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a7a:	681b      	ldr	r3, [r3, #0]
 8014a7c:	4a8f      	ldr	r2, [pc, #572]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014a82:	6013      	str	r3, [r2, #0]
 8014a84:	e02e      	b.n	8014ae4 <HAL_RCC_OscConfig+0xd4>
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d10c      	bne.n	8014aa8 <HAL_RCC_OscConfig+0x98>
 8014a8e:	4b8b      	ldr	r3, [pc, #556]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	4a8a      	ldr	r2, [pc, #552]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014a98:	6013      	str	r3, [r2, #0]
 8014a9a:	4b88      	ldr	r3, [pc, #544]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4a87      	ldr	r2, [pc, #540]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014aa0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014aa4:	6013      	str	r3, [r2, #0]
 8014aa6:	e01d      	b.n	8014ae4 <HAL_RCC_OscConfig+0xd4>
 8014aa8:	687b      	ldr	r3, [r7, #4]
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8014ab0:	d10c      	bne.n	8014acc <HAL_RCC_OscConfig+0xbc>
 8014ab2:	4b82      	ldr	r3, [pc, #520]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	4a81      	ldr	r2, [pc, #516]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014abc:	6013      	str	r3, [r2, #0]
 8014abe:	4b7f      	ldr	r3, [pc, #508]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ac0:	681b      	ldr	r3, [r3, #0]
 8014ac2:	4a7e      	ldr	r2, [pc, #504]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ac8:	6013      	str	r3, [r2, #0]
 8014aca:	e00b      	b.n	8014ae4 <HAL_RCC_OscConfig+0xd4>
 8014acc:	4b7b      	ldr	r3, [pc, #492]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	4a7a      	ldr	r2, [pc, #488]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014ad6:	6013      	str	r3, [r2, #0]
 8014ad8:	4b78      	ldr	r3, [pc, #480]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4a77      	ldr	r2, [pc, #476]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8014ae2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	685b      	ldr	r3, [r3, #4]
 8014ae8:	2b00      	cmp	r3, #0
 8014aea:	d013      	beq.n	8014b14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014aec:	f7fd ffe2 	bl	8012ab4 <HAL_GetTick>
 8014af0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014af2:	e008      	b.n	8014b06 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014af4:	f7fd ffde 	bl	8012ab4 <HAL_GetTick>
 8014af8:	4602      	mov	r2, r0
 8014afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014afc:	1ad3      	subs	r3, r2, r3
 8014afe:	2b64      	cmp	r3, #100	; 0x64
 8014b00:	d901      	bls.n	8014b06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8014b02:	2303      	movs	r3, #3
 8014b04:	e352      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8014b06:	4b6d      	ldr	r3, [pc, #436]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b08:	681b      	ldr	r3, [r3, #0]
 8014b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d0f0      	beq.n	8014af4 <HAL_RCC_OscConfig+0xe4>
 8014b12:	e014      	b.n	8014b3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014b14:	f7fd ffce 	bl	8012ab4 <HAL_GetTick>
 8014b18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014b1a:	e008      	b.n	8014b2e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8014b1c:	f7fd ffca 	bl	8012ab4 <HAL_GetTick>
 8014b20:	4602      	mov	r2, r0
 8014b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b24:	1ad3      	subs	r3, r2, r3
 8014b26:	2b64      	cmp	r3, #100	; 0x64
 8014b28:	d901      	bls.n	8014b2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8014b2a:	2303      	movs	r3, #3
 8014b2c:	e33e      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8014b2e:	4b63      	ldr	r3, [pc, #396]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d1f0      	bne.n	8014b1c <HAL_RCC_OscConfig+0x10c>
 8014b3a:	e000      	b.n	8014b3e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8014b3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	f003 0302 	and.w	r3, r3, #2
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f000 8092 	beq.w	8014c70 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014b4c:	4b5b      	ldr	r3, [pc, #364]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b4e:	691b      	ldr	r3, [r3, #16]
 8014b50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014b54:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014b56:	4b59      	ldr	r3, [pc, #356]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014b5a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8014b5c:	6a3b      	ldr	r3, [r7, #32]
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d007      	beq.n	8014b72 <HAL_RCC_OscConfig+0x162>
 8014b62:	6a3b      	ldr	r3, [r7, #32]
 8014b64:	2b18      	cmp	r3, #24
 8014b66:	d12d      	bne.n	8014bc4 <HAL_RCC_OscConfig+0x1b4>
 8014b68:	69fb      	ldr	r3, [r7, #28]
 8014b6a:	f003 0303 	and.w	r3, r3, #3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d128      	bne.n	8014bc4 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014b72:	4b52      	ldr	r3, [pc, #328]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	f003 0304 	and.w	r3, r3, #4
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d005      	beq.n	8014b8a <HAL_RCC_OscConfig+0x17a>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	d101      	bne.n	8014b8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8014b86:	2301      	movs	r3, #1
 8014b88:	e310      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014b8a:	f7fd ffc1 	bl	8012b10 <HAL_GetREVID>
 8014b8e:	4602      	mov	r2, r0
 8014b90:	f241 0303 	movw	r3, #4099	; 0x1003
 8014b94:	429a      	cmp	r2, r3
 8014b96:	d80a      	bhi.n	8014bae <HAL_RCC_OscConfig+0x19e>
 8014b98:	4b48      	ldr	r3, [pc, #288]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014b9a:	685b      	ldr	r3, [r3, #4]
 8014b9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	691b      	ldr	r3, [r3, #16]
 8014ba4:	031b      	lsls	r3, r3, #12
 8014ba6:	4945      	ldr	r1, [pc, #276]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ba8:	4313      	orrs	r3, r2
 8014baa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014bac:	e060      	b.n	8014c70 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014bae:	4b43      	ldr	r3, [pc, #268]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	691b      	ldr	r3, [r3, #16]
 8014bba:	061b      	lsls	r3, r3, #24
 8014bbc:	493f      	ldr	r1, [pc, #252]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014bbe:	4313      	orrs	r3, r2
 8014bc0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014bc2:	e055      	b.n	8014c70 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	68db      	ldr	r3, [r3, #12]
 8014bc8:	2b00      	cmp	r3, #0
 8014bca:	d038      	beq.n	8014c3e <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8014bcc:	4b3b      	ldr	r3, [pc, #236]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014bce:	681b      	ldr	r3, [r3, #0]
 8014bd0:	f023 0219 	bic.w	r2, r3, #25
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	68db      	ldr	r3, [r3, #12]
 8014bd8:	4938      	ldr	r1, [pc, #224]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014bda:	4313      	orrs	r3, r2
 8014bdc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014bde:	f7fd ff69 	bl	8012ab4 <HAL_GetTick>
 8014be2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014be4:	e008      	b.n	8014bf8 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014be6:	f7fd ff65 	bl	8012ab4 <HAL_GetTick>
 8014bea:	4602      	mov	r2, r0
 8014bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bee:	1ad3      	subs	r3, r2, r3
 8014bf0:	2b02      	cmp	r3, #2
 8014bf2:	d901      	bls.n	8014bf8 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8014bf4:	2303      	movs	r3, #3
 8014bf6:	e2d9      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8014bf8:	4b30      	ldr	r3, [pc, #192]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	f003 0304 	and.w	r3, r3, #4
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d0f0      	beq.n	8014be6 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014c04:	f7fd ff84 	bl	8012b10 <HAL_GetREVID>
 8014c08:	4602      	mov	r2, r0
 8014c0a:	f241 0303 	movw	r3, #4099	; 0x1003
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d80a      	bhi.n	8014c28 <HAL_RCC_OscConfig+0x218>
 8014c12:	4b2a      	ldr	r3, [pc, #168]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	691b      	ldr	r3, [r3, #16]
 8014c1e:	031b      	lsls	r3, r3, #12
 8014c20:	4926      	ldr	r1, [pc, #152]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c22:	4313      	orrs	r3, r2
 8014c24:	604b      	str	r3, [r1, #4]
 8014c26:	e023      	b.n	8014c70 <HAL_RCC_OscConfig+0x260>
 8014c28:	4b24      	ldr	r3, [pc, #144]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c2a:	685b      	ldr	r3, [r3, #4]
 8014c2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	691b      	ldr	r3, [r3, #16]
 8014c34:	061b      	lsls	r3, r3, #24
 8014c36:	4921      	ldr	r1, [pc, #132]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c38:	4313      	orrs	r3, r2
 8014c3a:	604b      	str	r3, [r1, #4]
 8014c3c:	e018      	b.n	8014c70 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014c3e:	4b1f      	ldr	r3, [pc, #124]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4a1e      	ldr	r2, [pc, #120]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c44:	f023 0301 	bic.w	r3, r3, #1
 8014c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014c4a:	f7fd ff33 	bl	8012ab4 <HAL_GetTick>
 8014c4e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014c50:	e008      	b.n	8014c64 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8014c52:	f7fd ff2f 	bl	8012ab4 <HAL_GetTick>
 8014c56:	4602      	mov	r2, r0
 8014c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c5a:	1ad3      	subs	r3, r2, r3
 8014c5c:	2b02      	cmp	r3, #2
 8014c5e:	d901      	bls.n	8014c64 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 8014c60:	2303      	movs	r3, #3
 8014c62:	e2a3      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8014c64:	4b15      	ldr	r3, [pc, #84]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f003 0304 	and.w	r3, r3, #4
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d1f0      	bne.n	8014c52 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f003 0310 	and.w	r3, r3, #16
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	f000 8091 	beq.w	8014da0 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8014c7e:	4b0f      	ldr	r3, [pc, #60]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c80:	691b      	ldr	r3, [r3, #16]
 8014c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014c86:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8014c88:	4b0c      	ldr	r3, [pc, #48]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c8c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8014c8e:	69bb      	ldr	r3, [r7, #24]
 8014c90:	2b08      	cmp	r3, #8
 8014c92:	d007      	beq.n	8014ca4 <HAL_RCC_OscConfig+0x294>
 8014c94:	69bb      	ldr	r3, [r7, #24]
 8014c96:	2b18      	cmp	r3, #24
 8014c98:	d12f      	bne.n	8014cfa <HAL_RCC_OscConfig+0x2ea>
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	f003 0303 	and.w	r3, r3, #3
 8014ca0:	2b01      	cmp	r3, #1
 8014ca2:	d12a      	bne.n	8014cfa <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014ca4:	4b05      	ldr	r3, [pc, #20]	; (8014cbc <HAL_RCC_OscConfig+0x2ac>)
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d007      	beq.n	8014cc0 <HAL_RCC_OscConfig+0x2b0>
 8014cb0:	687b      	ldr	r3, [r7, #4]
 8014cb2:	69db      	ldr	r3, [r3, #28]
 8014cb4:	2b80      	cmp	r3, #128	; 0x80
 8014cb6:	d003      	beq.n	8014cc0 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8014cb8:	2301      	movs	r3, #1
 8014cba:	e277      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
 8014cbc:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014cc0:	f7fd ff26 	bl	8012b10 <HAL_GetREVID>
 8014cc4:	4602      	mov	r2, r0
 8014cc6:	f241 0303 	movw	r3, #4099	; 0x1003
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d80a      	bhi.n	8014ce4 <HAL_RCC_OscConfig+0x2d4>
 8014cce:	4ba2      	ldr	r3, [pc, #648]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014cd0:	685b      	ldr	r3, [r3, #4]
 8014cd2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6a1b      	ldr	r3, [r3, #32]
 8014cda:	069b      	lsls	r3, r3, #26
 8014cdc:	499e      	ldr	r1, [pc, #632]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014cde:	4313      	orrs	r3, r2
 8014ce0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014ce2:	e05d      	b.n	8014da0 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014ce4:	4b9c      	ldr	r3, [pc, #624]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ce6:	68db      	ldr	r3, [r3, #12]
 8014ce8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6a1b      	ldr	r3, [r3, #32]
 8014cf0:	061b      	lsls	r3, r3, #24
 8014cf2:	4999      	ldr	r1, [pc, #612]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014cf4:	4313      	orrs	r3, r2
 8014cf6:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8014cf8:	e052      	b.n	8014da0 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	69db      	ldr	r3, [r3, #28]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d035      	beq.n	8014d6e <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8014d02:	4b95      	ldr	r3, [pc, #596]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	4a94      	ldr	r2, [pc, #592]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d0e:	f7fd fed1 	bl	8012ab4 <HAL_GetTick>
 8014d12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014d14:	e008      	b.n	8014d28 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014d16:	f7fd fecd 	bl	8012ab4 <HAL_GetTick>
 8014d1a:	4602      	mov	r2, r0
 8014d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d1e:	1ad3      	subs	r3, r2, r3
 8014d20:	2b02      	cmp	r3, #2
 8014d22:	d901      	bls.n	8014d28 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8014d24:	2303      	movs	r3, #3
 8014d26:	e241      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8014d28:	4b8b      	ldr	r3, [pc, #556]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d0f0      	beq.n	8014d16 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8014d34:	f7fd feec 	bl	8012b10 <HAL_GetREVID>
 8014d38:	4602      	mov	r2, r0
 8014d3a:	f241 0303 	movw	r3, #4099	; 0x1003
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d80a      	bhi.n	8014d58 <HAL_RCC_OscConfig+0x348>
 8014d42:	4b85      	ldr	r3, [pc, #532]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d44:	685b      	ldr	r3, [r3, #4]
 8014d46:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	6a1b      	ldr	r3, [r3, #32]
 8014d4e:	069b      	lsls	r3, r3, #26
 8014d50:	4981      	ldr	r1, [pc, #516]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d52:	4313      	orrs	r3, r2
 8014d54:	604b      	str	r3, [r1, #4]
 8014d56:	e023      	b.n	8014da0 <HAL_RCC_OscConfig+0x390>
 8014d58:	4b7f      	ldr	r3, [pc, #508]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6a1b      	ldr	r3, [r3, #32]
 8014d64:	061b      	lsls	r3, r3, #24
 8014d66:	497c      	ldr	r1, [pc, #496]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d68:	4313      	orrs	r3, r2
 8014d6a:	60cb      	str	r3, [r1, #12]
 8014d6c:	e018      	b.n	8014da0 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8014d6e:	4b7a      	ldr	r3, [pc, #488]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	4a79      	ldr	r2, [pc, #484]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014d78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014d7a:	f7fd fe9b 	bl	8012ab4 <HAL_GetTick>
 8014d7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014d80:	e008      	b.n	8014d94 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8014d82:	f7fd fe97 	bl	8012ab4 <HAL_GetTick>
 8014d86:	4602      	mov	r2, r0
 8014d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d8a:	1ad3      	subs	r3, r2, r3
 8014d8c:	2b02      	cmp	r3, #2
 8014d8e:	d901      	bls.n	8014d94 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8014d90:	2303      	movs	r3, #3
 8014d92:	e20b      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8014d94:	4b70      	ldr	r3, [pc, #448]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d1f0      	bne.n	8014d82 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	f003 0308 	and.w	r3, r3, #8
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	d036      	beq.n	8014e1a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	695b      	ldr	r3, [r3, #20]
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d019      	beq.n	8014de8 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8014db4:	4b68      	ldr	r3, [pc, #416]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014db8:	4a67      	ldr	r2, [pc, #412]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014dba:	f043 0301 	orr.w	r3, r3, #1
 8014dbe:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014dc0:	f7fd fe78 	bl	8012ab4 <HAL_GetTick>
 8014dc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014dc6:	e008      	b.n	8014dda <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014dc8:	f7fd fe74 	bl	8012ab4 <HAL_GetTick>
 8014dcc:	4602      	mov	r2, r0
 8014dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dd0:	1ad3      	subs	r3, r2, r3
 8014dd2:	2b02      	cmp	r3, #2
 8014dd4:	d901      	bls.n	8014dda <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8014dd6:	2303      	movs	r3, #3
 8014dd8:	e1e8      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8014dda:	4b5f      	ldr	r3, [pc, #380]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dde:	f003 0302 	and.w	r3, r3, #2
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d0f0      	beq.n	8014dc8 <HAL_RCC_OscConfig+0x3b8>
 8014de6:	e018      	b.n	8014e1a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014de8:	4b5b      	ldr	r3, [pc, #364]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014dec:	4a5a      	ldr	r2, [pc, #360]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014dee:	f023 0301 	bic.w	r3, r3, #1
 8014df2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014df4:	f7fd fe5e 	bl	8012ab4 <HAL_GetTick>
 8014df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014dfa:	e008      	b.n	8014e0e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8014dfc:	f7fd fe5a 	bl	8012ab4 <HAL_GetTick>
 8014e00:	4602      	mov	r2, r0
 8014e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e04:	1ad3      	subs	r3, r2, r3
 8014e06:	2b02      	cmp	r3, #2
 8014e08:	d901      	bls.n	8014e0e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8014e0a:	2303      	movs	r3, #3
 8014e0c:	e1ce      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8014e0e:	4b52      	ldr	r3, [pc, #328]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e12:	f003 0302 	and.w	r3, r3, #2
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d1f0      	bne.n	8014dfc <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	f003 0320 	and.w	r3, r3, #32
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	d036      	beq.n	8014e94 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	699b      	ldr	r3, [r3, #24]
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d019      	beq.n	8014e62 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8014e2e:	4b4a      	ldr	r3, [pc, #296]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e30:	681b      	ldr	r3, [r3, #0]
 8014e32:	4a49      	ldr	r2, [pc, #292]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8014e38:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014e3a:	f7fd fe3b 	bl	8012ab4 <HAL_GetTick>
 8014e3e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014e40:	e008      	b.n	8014e54 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014e42:	f7fd fe37 	bl	8012ab4 <HAL_GetTick>
 8014e46:	4602      	mov	r2, r0
 8014e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e4a:	1ad3      	subs	r3, r2, r3
 8014e4c:	2b02      	cmp	r3, #2
 8014e4e:	d901      	bls.n	8014e54 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8014e50:	2303      	movs	r3, #3
 8014e52:	e1ab      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8014e54:	4b40      	ldr	r3, [pc, #256]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d0f0      	beq.n	8014e42 <HAL_RCC_OscConfig+0x432>
 8014e60:	e018      	b.n	8014e94 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8014e62:	4b3d      	ldr	r3, [pc, #244]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e64:	681b      	ldr	r3, [r3, #0]
 8014e66:	4a3c      	ldr	r2, [pc, #240]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8014e6e:	f7fd fe21 	bl	8012ab4 <HAL_GetTick>
 8014e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014e74:	e008      	b.n	8014e88 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8014e76:	f7fd fe1d 	bl	8012ab4 <HAL_GetTick>
 8014e7a:	4602      	mov	r2, r0
 8014e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014e7e:	1ad3      	subs	r3, r2, r3
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d901      	bls.n	8014e88 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 8014e84:	2303      	movs	r3, #3
 8014e86:	e191      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8014e88:	4b33      	ldr	r3, [pc, #204]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d1f0      	bne.n	8014e76 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f003 0304 	and.w	r3, r3, #4
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	f000 8086 	beq.w	8014fae <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8014ea2:	4b2e      	ldr	r3, [pc, #184]	; (8014f5c <HAL_RCC_OscConfig+0x54c>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	4a2d      	ldr	r2, [pc, #180]	; (8014f5c <HAL_RCC_OscConfig+0x54c>)
 8014ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014eac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014eae:	f7fd fe01 	bl	8012ab4 <HAL_GetTick>
 8014eb2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014eb4:	e008      	b.n	8014ec8 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8014eb6:	f7fd fdfd 	bl	8012ab4 <HAL_GetTick>
 8014eba:	4602      	mov	r2, r0
 8014ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ebe:	1ad3      	subs	r3, r2, r3
 8014ec0:	2b64      	cmp	r3, #100	; 0x64
 8014ec2:	d901      	bls.n	8014ec8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8014ec4:	2303      	movs	r3, #3
 8014ec6:	e171      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014ec8:	4b24      	ldr	r3, [pc, #144]	; (8014f5c <HAL_RCC_OscConfig+0x54c>)
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d0f0      	beq.n	8014eb6 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	689b      	ldr	r3, [r3, #8]
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d106      	bne.n	8014eea <HAL_RCC_OscConfig+0x4da>
 8014edc:	4b1e      	ldr	r3, [pc, #120]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ee0:	4a1d      	ldr	r2, [pc, #116]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ee2:	f043 0301 	orr.w	r3, r3, #1
 8014ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8014ee8:	e02d      	b.n	8014f46 <HAL_RCC_OscConfig+0x536>
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	689b      	ldr	r3, [r3, #8]
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d10c      	bne.n	8014f0c <HAL_RCC_OscConfig+0x4fc>
 8014ef2:	4b19      	ldr	r3, [pc, #100]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ef6:	4a18      	ldr	r2, [pc, #96]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014ef8:	f023 0301 	bic.w	r3, r3, #1
 8014efc:	6713      	str	r3, [r2, #112]	; 0x70
 8014efe:	4b16      	ldr	r3, [pc, #88]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f02:	4a15      	ldr	r2, [pc, #84]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f04:	f023 0304 	bic.w	r3, r3, #4
 8014f08:	6713      	str	r3, [r2, #112]	; 0x70
 8014f0a:	e01c      	b.n	8014f46 <HAL_RCC_OscConfig+0x536>
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	689b      	ldr	r3, [r3, #8]
 8014f10:	2b05      	cmp	r3, #5
 8014f12:	d10c      	bne.n	8014f2e <HAL_RCC_OscConfig+0x51e>
 8014f14:	4b10      	ldr	r3, [pc, #64]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f18:	4a0f      	ldr	r2, [pc, #60]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f1a:	f043 0304 	orr.w	r3, r3, #4
 8014f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8014f20:	4b0d      	ldr	r3, [pc, #52]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f24:	4a0c      	ldr	r2, [pc, #48]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f26:	f043 0301 	orr.w	r3, r3, #1
 8014f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8014f2c:	e00b      	b.n	8014f46 <HAL_RCC_OscConfig+0x536>
 8014f2e:	4b0a      	ldr	r3, [pc, #40]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f32:	4a09      	ldr	r2, [pc, #36]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f34:	f023 0301 	bic.w	r3, r3, #1
 8014f38:	6713      	str	r3, [r2, #112]	; 0x70
 8014f3a:	4b07      	ldr	r3, [pc, #28]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f3e:	4a06      	ldr	r2, [pc, #24]	; (8014f58 <HAL_RCC_OscConfig+0x548>)
 8014f40:	f023 0304 	bic.w	r3, r3, #4
 8014f44:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	689b      	ldr	r3, [r3, #8]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d01a      	beq.n	8014f84 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014f4e:	f7fd fdb1 	bl	8012ab4 <HAL_GetTick>
 8014f52:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014f54:	e00f      	b.n	8014f76 <HAL_RCC_OscConfig+0x566>
 8014f56:	bf00      	nop
 8014f58:	58024400 	.word	0x58024400
 8014f5c:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014f60:	f7fd fda8 	bl	8012ab4 <HAL_GetTick>
 8014f64:	4602      	mov	r2, r0
 8014f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f68:	1ad3      	subs	r3, r2, r3
 8014f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8014f6e:	4293      	cmp	r3, r2
 8014f70:	d901      	bls.n	8014f76 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 8014f72:	2303      	movs	r3, #3
 8014f74:	e11a      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8014f76:	4b8f      	ldr	r3, [pc, #572]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f7a:	f003 0302 	and.w	r3, r3, #2
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d0ee      	beq.n	8014f60 <HAL_RCC_OscConfig+0x550>
 8014f82:	e014      	b.n	8014fae <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014f84:	f7fd fd96 	bl	8012ab4 <HAL_GetTick>
 8014f88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014f8a:	e00a      	b.n	8014fa2 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8014f8c:	f7fd fd92 	bl	8012ab4 <HAL_GetTick>
 8014f90:	4602      	mov	r2, r0
 8014f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f94:	1ad3      	subs	r3, r2, r3
 8014f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8014f9a:	4293      	cmp	r3, r2
 8014f9c:	d901      	bls.n	8014fa2 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8014f9e:	2303      	movs	r3, #3
 8014fa0:	e104      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8014fa2:	4b84      	ldr	r3, [pc, #528]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fa6:	f003 0302 	and.w	r3, r3, #2
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d1ee      	bne.n	8014f8c <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fb2:	2b00      	cmp	r3, #0
 8014fb4:	f000 80f9 	beq.w	80151aa <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8014fb8:	4b7e      	ldr	r3, [pc, #504]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014fba:	691b      	ldr	r3, [r3, #16]
 8014fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8014fc0:	2b18      	cmp	r3, #24
 8014fc2:	f000 80b4 	beq.w	801512e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fca:	2b02      	cmp	r3, #2
 8014fcc:	f040 8095 	bne.w	80150fa <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014fd0:	4b78      	ldr	r3, [pc, #480]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4a77      	ldr	r2, [pc, #476]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014fd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8014fda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014fdc:	f7fd fd6a 	bl	8012ab4 <HAL_GetTick>
 8014fe0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014fe2:	e008      	b.n	8014ff6 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8014fe4:	f7fd fd66 	bl	8012ab4 <HAL_GetTick>
 8014fe8:	4602      	mov	r2, r0
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	1ad3      	subs	r3, r2, r3
 8014fee:	2b02      	cmp	r3, #2
 8014ff0:	d901      	bls.n	8014ff6 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8014ff2:	2303      	movs	r3, #3
 8014ff4:	e0da      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8014ff6:	4b6f      	ldr	r3, [pc, #444]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d1f0      	bne.n	8014fe4 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8015002:	4b6c      	ldr	r3, [pc, #432]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015004:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8015006:	4b6c      	ldr	r3, [pc, #432]	; (80151b8 <HAL_RCC_OscConfig+0x7a8>)
 8015008:	4013      	ands	r3, r2
 801500a:	687a      	ldr	r2, [r7, #4]
 801500c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801500e:	687a      	ldr	r2, [r7, #4]
 8015010:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015012:	0112      	lsls	r2, r2, #4
 8015014:	430a      	orrs	r2, r1
 8015016:	4967      	ldr	r1, [pc, #412]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015018:	4313      	orrs	r3, r2
 801501a:	628b      	str	r3, [r1, #40]	; 0x28
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015020:	3b01      	subs	r3, #1
 8015022:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801502a:	3b01      	subs	r3, #1
 801502c:	025b      	lsls	r3, r3, #9
 801502e:	b29b      	uxth	r3, r3
 8015030:	431a      	orrs	r2, r3
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015036:	3b01      	subs	r3, #1
 8015038:	041b      	lsls	r3, r3, #16
 801503a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801503e:	431a      	orrs	r2, r3
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015044:	3b01      	subs	r3, #1
 8015046:	061b      	lsls	r3, r3, #24
 8015048:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801504c:	4959      	ldr	r1, [pc, #356]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 801504e:	4313      	orrs	r3, r2
 8015050:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8015052:	4b58      	ldr	r3, [pc, #352]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015056:	4a57      	ldr	r2, [pc, #348]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015058:	f023 0301 	bic.w	r3, r3, #1
 801505c:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801505e:	4b55      	ldr	r3, [pc, #340]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015062:	4b56      	ldr	r3, [pc, #344]	; (80151bc <HAL_RCC_OscConfig+0x7ac>)
 8015064:	4013      	ands	r3, r2
 8015066:	687a      	ldr	r2, [r7, #4]
 8015068:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801506a:	00d2      	lsls	r2, r2, #3
 801506c:	4951      	ldr	r1, [pc, #324]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 801506e:	4313      	orrs	r3, r2
 8015070:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8015072:	4b50      	ldr	r3, [pc, #320]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015076:	f023 020c 	bic.w	r2, r3, #12
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801507e:	494d      	ldr	r1, [pc, #308]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015080:	4313      	orrs	r3, r2
 8015082:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8015084:	4b4b      	ldr	r3, [pc, #300]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015088:	f023 0202 	bic.w	r2, r3, #2
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015090:	4948      	ldr	r1, [pc, #288]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015092:	4313      	orrs	r3, r2
 8015094:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8015096:	4b47      	ldr	r3, [pc, #284]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801509a:	4a46      	ldr	r2, [pc, #280]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 801509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80150a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80150a2:	4b44      	ldr	r3, [pc, #272]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150a6:	4a43      	ldr	r2, [pc, #268]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80150ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80150ae:	4b41      	ldr	r3, [pc, #260]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150b2:	4a40      	ldr	r2, [pc, #256]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80150b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80150ba:	4b3e      	ldr	r3, [pc, #248]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150be:	4a3d      	ldr	r2, [pc, #244]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150c0:	f043 0301 	orr.w	r3, r3, #1
 80150c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80150c6:	4b3b      	ldr	r3, [pc, #236]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	4a3a      	ldr	r2, [pc, #232]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80150d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80150d2:	f7fd fcef 	bl	8012ab4 <HAL_GetTick>
 80150d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80150d8:	e008      	b.n	80150ec <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80150da:	f7fd fceb 	bl	8012ab4 <HAL_GetTick>
 80150de:	4602      	mov	r2, r0
 80150e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150e2:	1ad3      	subs	r3, r2, r3
 80150e4:	2b02      	cmp	r3, #2
 80150e6:	d901      	bls.n	80150ec <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 80150e8:	2303      	movs	r3, #3
 80150ea:	e05f      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80150ec:	4b31      	ldr	r3, [pc, #196]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d0f0      	beq.n	80150da <HAL_RCC_OscConfig+0x6ca>
 80150f8:	e057      	b.n	80151aa <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80150fa:	4b2e      	ldr	r3, [pc, #184]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	4a2d      	ldr	r2, [pc, #180]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015100:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8015104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015106:	f7fd fcd5 	bl	8012ab4 <HAL_GetTick>
 801510a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801510c:	e008      	b.n	8015120 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801510e:	f7fd fcd1 	bl	8012ab4 <HAL_GetTick>
 8015112:	4602      	mov	r2, r0
 8015114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015116:	1ad3      	subs	r3, r2, r3
 8015118:	2b02      	cmp	r3, #2
 801511a:	d901      	bls.n	8015120 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 801511c:	2303      	movs	r3, #3
 801511e:	e045      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8015120:	4b24      	ldr	r3, [pc, #144]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015128:	2b00      	cmp	r3, #0
 801512a:	d1f0      	bne.n	801510e <HAL_RCC_OscConfig+0x6fe>
 801512c:	e03d      	b.n	80151aa <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801512e:	4b21      	ldr	r3, [pc, #132]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015132:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8015134:	4b1f      	ldr	r3, [pc, #124]	; (80151b4 <HAL_RCC_OscConfig+0x7a4>)
 8015136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015138:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801513e:	2b01      	cmp	r3, #1
 8015140:	d031      	beq.n	80151a6 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	f003 0203 	and.w	r2, r3, #3
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801514c:	429a      	cmp	r2, r3
 801514e:	d12a      	bne.n	80151a6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8015150:	693b      	ldr	r3, [r7, #16]
 8015152:	091b      	lsrs	r3, r3, #4
 8015154:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801515c:	429a      	cmp	r2, r3
 801515e:	d122      	bne.n	80151a6 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801516a:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801516c:	429a      	cmp	r2, r3
 801516e:	d11a      	bne.n	80151a6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	0a5b      	lsrs	r3, r3, #9
 8015174:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801517c:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801517e:	429a      	cmp	r2, r3
 8015180:	d111      	bne.n	80151a6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	0c1b      	lsrs	r3, r3, #16
 8015186:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801518e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8015190:	429a      	cmp	r2, r3
 8015192:	d108      	bne.n	80151a6 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	0e1b      	lsrs	r3, r3, #24
 8015198:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80151a0:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d001      	beq.n	80151aa <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 80151a6:	2301      	movs	r3, #1
 80151a8:	e000      	b.n	80151ac <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 80151aa:	2300      	movs	r3, #0
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	3730      	adds	r7, #48	; 0x30
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	58024400 	.word	0x58024400
 80151b8:	fffffc0c 	.word	0xfffffc0c
 80151bc:	ffff0007 	.word	0xffff0007

080151c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80151c0:	b580      	push	{r7, lr}
 80151c2:	b086      	sub	sp, #24
 80151c4:	af00      	add	r7, sp, #0
 80151c6:	6078      	str	r0, [r7, #4]
 80151c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d101      	bne.n	80151d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80151d0:	2301      	movs	r3, #1
 80151d2:	e19c      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80151d4:	4b8a      	ldr	r3, [pc, #552]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	f003 030f 	and.w	r3, r3, #15
 80151dc:	683a      	ldr	r2, [r7, #0]
 80151de:	429a      	cmp	r2, r3
 80151e0:	d910      	bls.n	8015204 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80151e2:	4b87      	ldr	r3, [pc, #540]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	f023 020f 	bic.w	r2, r3, #15
 80151ea:	4985      	ldr	r1, [pc, #532]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	4313      	orrs	r3, r2
 80151f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80151f2:	4b83      	ldr	r3, [pc, #524]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	f003 030f 	and.w	r3, r3, #15
 80151fa:	683a      	ldr	r2, [r7, #0]
 80151fc:	429a      	cmp	r2, r3
 80151fe:	d001      	beq.n	8015204 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8015200:	2301      	movs	r3, #1
 8015202:	e184      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	681b      	ldr	r3, [r3, #0]
 8015208:	f003 0304 	and.w	r3, r3, #4
 801520c:	2b00      	cmp	r3, #0
 801520e:	d010      	beq.n	8015232 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	691a      	ldr	r2, [r3, #16]
 8015214:	4b7b      	ldr	r3, [pc, #492]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015216:	699b      	ldr	r3, [r3, #24]
 8015218:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801521c:	429a      	cmp	r2, r3
 801521e:	d908      	bls.n	8015232 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015220:	4b78      	ldr	r3, [pc, #480]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015222:	699b      	ldr	r3, [r3, #24]
 8015224:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	691b      	ldr	r3, [r3, #16]
 801522c:	4975      	ldr	r1, [pc, #468]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801522e:	4313      	orrs	r3, r2
 8015230:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	681b      	ldr	r3, [r3, #0]
 8015236:	f003 0308 	and.w	r3, r3, #8
 801523a:	2b00      	cmp	r3, #0
 801523c:	d010      	beq.n	8015260 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	695a      	ldr	r2, [r3, #20]
 8015242:	4b70      	ldr	r3, [pc, #448]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015244:	69db      	ldr	r3, [r3, #28]
 8015246:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801524a:	429a      	cmp	r2, r3
 801524c:	d908      	bls.n	8015260 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801524e:	4b6d      	ldr	r3, [pc, #436]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015250:	69db      	ldr	r3, [r3, #28]
 8015252:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	695b      	ldr	r3, [r3, #20]
 801525a:	496a      	ldr	r1, [pc, #424]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801525c:	4313      	orrs	r3, r2
 801525e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f003 0310 	and.w	r3, r3, #16
 8015268:	2b00      	cmp	r3, #0
 801526a:	d010      	beq.n	801528e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	699a      	ldr	r2, [r3, #24]
 8015270:	4b64      	ldr	r3, [pc, #400]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015272:	69db      	ldr	r3, [r3, #28]
 8015274:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015278:	429a      	cmp	r2, r3
 801527a:	d908      	bls.n	801528e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801527c:	4b61      	ldr	r3, [pc, #388]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801527e:	69db      	ldr	r3, [r3, #28]
 8015280:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	699b      	ldr	r3, [r3, #24]
 8015288:	495e      	ldr	r1, [pc, #376]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801528a:	4313      	orrs	r3, r2
 801528c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	f003 0320 	and.w	r3, r3, #32
 8015296:	2b00      	cmp	r3, #0
 8015298:	d010      	beq.n	80152bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	69da      	ldr	r2, [r3, #28]
 801529e:	4b59      	ldr	r3, [pc, #356]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152a0:	6a1b      	ldr	r3, [r3, #32]
 80152a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d908      	bls.n	80152bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80152aa:	4b56      	ldr	r3, [pc, #344]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152ac:	6a1b      	ldr	r3, [r3, #32]
 80152ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	69db      	ldr	r3, [r3, #28]
 80152b6:	4953      	ldr	r1, [pc, #332]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152b8:	4313      	orrs	r3, r2
 80152ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	681b      	ldr	r3, [r3, #0]
 80152c0:	f003 0302 	and.w	r3, r3, #2
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d010      	beq.n	80152ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	68da      	ldr	r2, [r3, #12]
 80152cc:	4b4d      	ldr	r3, [pc, #308]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152ce:	699b      	ldr	r3, [r3, #24]
 80152d0:	f003 030f 	and.w	r3, r3, #15
 80152d4:	429a      	cmp	r2, r3
 80152d6:	d908      	bls.n	80152ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80152d8:	4b4a      	ldr	r3, [pc, #296]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152da:	699b      	ldr	r3, [r3, #24]
 80152dc:	f023 020f 	bic.w	r2, r3, #15
 80152e0:	687b      	ldr	r3, [r7, #4]
 80152e2:	68db      	ldr	r3, [r3, #12]
 80152e4:	4947      	ldr	r1, [pc, #284]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152e6:	4313      	orrs	r3, r2
 80152e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	f003 0301 	and.w	r3, r3, #1
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d055      	beq.n	80153a2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80152f6:	4b43      	ldr	r3, [pc, #268]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80152f8:	699b      	ldr	r3, [r3, #24]
 80152fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	689b      	ldr	r3, [r3, #8]
 8015302:	4940      	ldr	r1, [pc, #256]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015304:	4313      	orrs	r3, r2
 8015306:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	685b      	ldr	r3, [r3, #4]
 801530c:	2b02      	cmp	r3, #2
 801530e:	d107      	bne.n	8015320 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8015310:	4b3c      	ldr	r3, [pc, #240]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015318:	2b00      	cmp	r3, #0
 801531a:	d121      	bne.n	8015360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801531c:	2301      	movs	r3, #1
 801531e:	e0f6      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	685b      	ldr	r3, [r3, #4]
 8015324:	2b03      	cmp	r3, #3
 8015326:	d107      	bne.n	8015338 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8015328:	4b36      	ldr	r3, [pc, #216]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801532a:	681b      	ldr	r3, [r3, #0]
 801532c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015330:	2b00      	cmp	r3, #0
 8015332:	d115      	bne.n	8015360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8015334:	2301      	movs	r3, #1
 8015336:	e0ea      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	685b      	ldr	r3, [r3, #4]
 801533c:	2b01      	cmp	r3, #1
 801533e:	d107      	bne.n	8015350 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8015340:	4b30      	ldr	r3, [pc, #192]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015348:	2b00      	cmp	r3, #0
 801534a:	d109      	bne.n	8015360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801534c:	2301      	movs	r3, #1
 801534e:	e0de      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8015350:	4b2c      	ldr	r3, [pc, #176]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015352:	681b      	ldr	r3, [r3, #0]
 8015354:	f003 0304 	and.w	r3, r3, #4
 8015358:	2b00      	cmp	r3, #0
 801535a:	d101      	bne.n	8015360 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 801535c:	2301      	movs	r3, #1
 801535e:	e0d6      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8015360:	4b28      	ldr	r3, [pc, #160]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015362:	691b      	ldr	r3, [r3, #16]
 8015364:	f023 0207 	bic.w	r2, r3, #7
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	4925      	ldr	r1, [pc, #148]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 801536e:	4313      	orrs	r3, r2
 8015370:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8015372:	f7fd fb9f 	bl	8012ab4 <HAL_GetTick>
 8015376:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015378:	e00a      	b.n	8015390 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 801537a:	f7fd fb9b 	bl	8012ab4 <HAL_GetTick>
 801537e:	4602      	mov	r2, r0
 8015380:	697b      	ldr	r3, [r7, #20]
 8015382:	1ad3      	subs	r3, r2, r3
 8015384:	f241 3288 	movw	r2, #5000	; 0x1388
 8015388:	4293      	cmp	r3, r2
 801538a:	d901      	bls.n	8015390 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 801538c:	2303      	movs	r3, #3
 801538e:	e0be      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8015390:	4b1c      	ldr	r3, [pc, #112]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 8015392:	691b      	ldr	r3, [r3, #16]
 8015394:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	685b      	ldr	r3, [r3, #4]
 801539c:	00db      	lsls	r3, r3, #3
 801539e:	429a      	cmp	r2, r3
 80153a0:	d1eb      	bne.n	801537a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	f003 0302 	and.w	r3, r3, #2
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d010      	beq.n	80153d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	68da      	ldr	r2, [r3, #12]
 80153b2:	4b14      	ldr	r3, [pc, #80]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80153b4:	699b      	ldr	r3, [r3, #24]
 80153b6:	f003 030f 	and.w	r3, r3, #15
 80153ba:	429a      	cmp	r2, r3
 80153bc:	d208      	bcs.n	80153d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80153be:	4b11      	ldr	r3, [pc, #68]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80153c0:	699b      	ldr	r3, [r3, #24]
 80153c2:	f023 020f 	bic.w	r2, r3, #15
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	490e      	ldr	r1, [pc, #56]	; (8015404 <HAL_RCC_ClockConfig+0x244>)
 80153cc:	4313      	orrs	r3, r2
 80153ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80153d0:	4b0b      	ldr	r3, [pc, #44]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	f003 030f 	and.w	r3, r3, #15
 80153d8:	683a      	ldr	r2, [r7, #0]
 80153da:	429a      	cmp	r2, r3
 80153dc:	d214      	bcs.n	8015408 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80153de:	4b08      	ldr	r3, [pc, #32]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	f023 020f 	bic.w	r2, r3, #15
 80153e6:	4906      	ldr	r1, [pc, #24]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80153e8:	683b      	ldr	r3, [r7, #0]
 80153ea:	4313      	orrs	r3, r2
 80153ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80153ee:	4b04      	ldr	r3, [pc, #16]	; (8015400 <HAL_RCC_ClockConfig+0x240>)
 80153f0:	681b      	ldr	r3, [r3, #0]
 80153f2:	f003 030f 	and.w	r3, r3, #15
 80153f6:	683a      	ldr	r2, [r7, #0]
 80153f8:	429a      	cmp	r2, r3
 80153fa:	d005      	beq.n	8015408 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80153fc:	2301      	movs	r3, #1
 80153fe:	e086      	b.n	801550e <HAL_RCC_ClockConfig+0x34e>
 8015400:	52002000 	.word	0x52002000
 8015404:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	f003 0304 	and.w	r3, r3, #4
 8015410:	2b00      	cmp	r3, #0
 8015412:	d010      	beq.n	8015436 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	691a      	ldr	r2, [r3, #16]
 8015418:	4b3f      	ldr	r3, [pc, #252]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 801541a:	699b      	ldr	r3, [r3, #24]
 801541c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015420:	429a      	cmp	r2, r3
 8015422:	d208      	bcs.n	8015436 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8015424:	4b3c      	ldr	r3, [pc, #240]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015426:	699b      	ldr	r3, [r3, #24]
 8015428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	691b      	ldr	r3, [r3, #16]
 8015430:	4939      	ldr	r1, [pc, #228]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015432:	4313      	orrs	r3, r2
 8015434:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	f003 0308 	and.w	r3, r3, #8
 801543e:	2b00      	cmp	r3, #0
 8015440:	d010      	beq.n	8015464 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	695a      	ldr	r2, [r3, #20]
 8015446:	4b34      	ldr	r3, [pc, #208]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015448:	69db      	ldr	r3, [r3, #28]
 801544a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801544e:	429a      	cmp	r2, r3
 8015450:	d208      	bcs.n	8015464 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8015452:	4b31      	ldr	r3, [pc, #196]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015454:	69db      	ldr	r3, [r3, #28]
 8015456:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	695b      	ldr	r3, [r3, #20]
 801545e:	492e      	ldr	r1, [pc, #184]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015460:	4313      	orrs	r3, r2
 8015462:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	f003 0310 	and.w	r3, r3, #16
 801546c:	2b00      	cmp	r3, #0
 801546e:	d010      	beq.n	8015492 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	699a      	ldr	r2, [r3, #24]
 8015474:	4b28      	ldr	r3, [pc, #160]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015476:	69db      	ldr	r3, [r3, #28]
 8015478:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801547c:	429a      	cmp	r2, r3
 801547e:	d208      	bcs.n	8015492 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8015480:	4b25      	ldr	r3, [pc, #148]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 8015482:	69db      	ldr	r3, [r3, #28]
 8015484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	699b      	ldr	r3, [r3, #24]
 801548c:	4922      	ldr	r1, [pc, #136]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 801548e:	4313      	orrs	r3, r2
 8015490:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	f003 0320 	and.w	r3, r3, #32
 801549a:	2b00      	cmp	r3, #0
 801549c:	d010      	beq.n	80154c0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	69da      	ldr	r2, [r3, #28]
 80154a2:	4b1d      	ldr	r3, [pc, #116]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 80154a4:	6a1b      	ldr	r3, [r3, #32]
 80154a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d208      	bcs.n	80154c0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80154ae:	4b1a      	ldr	r3, [pc, #104]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 80154b0:	6a1b      	ldr	r3, [r3, #32]
 80154b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	69db      	ldr	r3, [r3, #28]
 80154ba:	4917      	ldr	r1, [pc, #92]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 80154bc:	4313      	orrs	r3, r2
 80154be:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80154c0:	f000 f834 	bl	801552c <HAL_RCC_GetSysClockFreq>
 80154c4:	4601      	mov	r1, r0
 80154c6:	4b14      	ldr	r3, [pc, #80]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 80154c8:	699b      	ldr	r3, [r3, #24]
 80154ca:	0a1b      	lsrs	r3, r3, #8
 80154cc:	f003 030f 	and.w	r3, r3, #15
 80154d0:	4a12      	ldr	r2, [pc, #72]	; (801551c <HAL_RCC_ClockConfig+0x35c>)
 80154d2:	5cd3      	ldrb	r3, [r2, r3]
 80154d4:	f003 031f 	and.w	r3, r3, #31
 80154d8:	fa21 f303 	lsr.w	r3, r1, r3
 80154dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80154de:	4b0e      	ldr	r3, [pc, #56]	; (8015518 <HAL_RCC_ClockConfig+0x358>)
 80154e0:	699b      	ldr	r3, [r3, #24]
 80154e2:	f003 030f 	and.w	r3, r3, #15
 80154e6:	4a0d      	ldr	r2, [pc, #52]	; (801551c <HAL_RCC_ClockConfig+0x35c>)
 80154e8:	5cd3      	ldrb	r3, [r2, r3]
 80154ea:	f003 031f 	and.w	r3, r3, #31
 80154ee:	693a      	ldr	r2, [r7, #16]
 80154f0:	fa22 f303 	lsr.w	r3, r2, r3
 80154f4:	4a0a      	ldr	r2, [pc, #40]	; (8015520 <HAL_RCC_ClockConfig+0x360>)
 80154f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80154f8:	4a0a      	ldr	r2, [pc, #40]	; (8015524 <HAL_RCC_ClockConfig+0x364>)
 80154fa:	693b      	ldr	r3, [r7, #16]
 80154fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80154fe:	4b0a      	ldr	r3, [pc, #40]	; (8015528 <HAL_RCC_ClockConfig+0x368>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	4618      	mov	r0, r3
 8015504:	f7fd fa8c 	bl	8012a20 <HAL_InitTick>
 8015508:	4603      	mov	r3, r0
 801550a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801550c:	7bfb      	ldrb	r3, [r7, #15]
}
 801550e:	4618      	mov	r0, r3
 8015510:	3718      	adds	r7, #24
 8015512:	46bd      	mov	sp, r7
 8015514:	bd80      	pop	{r7, pc}
 8015516:	bf00      	nop
 8015518:	58024400 	.word	0x58024400
 801551c:	0801f638 	.word	0x0801f638
 8015520:	2400000c 	.word	0x2400000c
 8015524:	24000008 	.word	0x24000008
 8015528:	24000010 	.word	0x24000010

0801552c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801552c:	b480      	push	{r7}
 801552e:	b089      	sub	sp, #36	; 0x24
 8015530:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8015532:	4baf      	ldr	r3, [pc, #700]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015534:	691b      	ldr	r3, [r3, #16]
 8015536:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801553a:	2b18      	cmp	r3, #24
 801553c:	f200 814e 	bhi.w	80157dc <HAL_RCC_GetSysClockFreq+0x2b0>
 8015540:	a201      	add	r2, pc, #4	; (adr r2, 8015548 <HAL_RCC_GetSysClockFreq+0x1c>)
 8015542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015546:	bf00      	nop
 8015548:	080155ad 	.word	0x080155ad
 801554c:	080157dd 	.word	0x080157dd
 8015550:	080157dd 	.word	0x080157dd
 8015554:	080157dd 	.word	0x080157dd
 8015558:	080157dd 	.word	0x080157dd
 801555c:	080157dd 	.word	0x080157dd
 8015560:	080157dd 	.word	0x080157dd
 8015564:	080157dd 	.word	0x080157dd
 8015568:	080155d3 	.word	0x080155d3
 801556c:	080157dd 	.word	0x080157dd
 8015570:	080157dd 	.word	0x080157dd
 8015574:	080157dd 	.word	0x080157dd
 8015578:	080157dd 	.word	0x080157dd
 801557c:	080157dd 	.word	0x080157dd
 8015580:	080157dd 	.word	0x080157dd
 8015584:	080157dd 	.word	0x080157dd
 8015588:	080155d9 	.word	0x080155d9
 801558c:	080157dd 	.word	0x080157dd
 8015590:	080157dd 	.word	0x080157dd
 8015594:	080157dd 	.word	0x080157dd
 8015598:	080157dd 	.word	0x080157dd
 801559c:	080157dd 	.word	0x080157dd
 80155a0:	080157dd 	.word	0x080157dd
 80155a4:	080157dd 	.word	0x080157dd
 80155a8:	080155df 	.word	0x080155df
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80155ac:	4b90      	ldr	r3, [pc, #576]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f003 0320 	and.w	r3, r3, #32
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d009      	beq.n	80155cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80155b8:	4b8d      	ldr	r3, [pc, #564]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	08db      	lsrs	r3, r3, #3
 80155be:	f003 0303 	and.w	r3, r3, #3
 80155c2:	4a8c      	ldr	r2, [pc, #560]	; (80157f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80155c4:	fa22 f303 	lsr.w	r3, r2, r3
 80155c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80155ca:	e10a      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80155cc:	4b89      	ldr	r3, [pc, #548]	; (80157f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80155ce:	61bb      	str	r3, [r7, #24]
    break;
 80155d0:	e107      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80155d2:	4b89      	ldr	r3, [pc, #548]	; (80157f8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80155d4:	61bb      	str	r3, [r7, #24]
    break;
 80155d6:	e104      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80155d8:	4b88      	ldr	r3, [pc, #544]	; (80157fc <HAL_RCC_GetSysClockFreq+0x2d0>)
 80155da:	61bb      	str	r3, [r7, #24]
    break;
 80155dc:	e101      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80155de:	4b84      	ldr	r3, [pc, #528]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155e2:	f003 0303 	and.w	r3, r3, #3
 80155e6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80155e8:	4b81      	ldr	r3, [pc, #516]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80155ec:	091b      	lsrs	r3, r3, #4
 80155ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80155f2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80155f4:	4b7e      	ldr	r3, [pc, #504]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80155f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80155f8:	f003 0301 	and.w	r3, r3, #1
 80155fc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80155fe:	4b7c      	ldr	r3, [pc, #496]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015602:	08db      	lsrs	r3, r3, #3
 8015604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015608:	68fa      	ldr	r2, [r7, #12]
 801560a:	fb02 f303 	mul.w	r3, r2, r3
 801560e:	ee07 3a90 	vmov	s15, r3
 8015612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015616:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 801561a:	693b      	ldr	r3, [r7, #16]
 801561c:	2b00      	cmp	r3, #0
 801561e:	f000 80da 	beq.w	80157d6 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	2b01      	cmp	r3, #1
 8015626:	d05a      	beq.n	80156de <HAL_RCC_GetSysClockFreq+0x1b2>
 8015628:	2b01      	cmp	r3, #1
 801562a:	d302      	bcc.n	8015632 <HAL_RCC_GetSysClockFreq+0x106>
 801562c:	2b02      	cmp	r3, #2
 801562e:	d078      	beq.n	8015722 <HAL_RCC_GetSysClockFreq+0x1f6>
 8015630:	e099      	b.n	8015766 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8015632:	4b6f      	ldr	r3, [pc, #444]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	f003 0320 	and.w	r3, r3, #32
 801563a:	2b00      	cmp	r3, #0
 801563c:	d02d      	beq.n	801569a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801563e:	4b6c      	ldr	r3, [pc, #432]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	08db      	lsrs	r3, r3, #3
 8015644:	f003 0303 	and.w	r3, r3, #3
 8015648:	4a6a      	ldr	r2, [pc, #424]	; (80157f4 <HAL_RCC_GetSysClockFreq+0x2c8>)
 801564a:	fa22 f303 	lsr.w	r3, r2, r3
 801564e:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	ee07 3a90 	vmov	s15, r3
 8015656:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801565a:	693b      	ldr	r3, [r7, #16]
 801565c:	ee07 3a90 	vmov	s15, r3
 8015660:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015664:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015668:	4b61      	ldr	r3, [pc, #388]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801566a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801566c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015670:	ee07 3a90 	vmov	s15, r3
 8015674:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015678:	ed97 6a02 	vldr	s12, [r7, #8]
 801567c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8015800 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015680:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801568c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015690:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015694:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8015698:	e087      	b.n	80157aa <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 801569a:	693b      	ldr	r3, [r7, #16]
 801569c:	ee07 3a90 	vmov	s15, r3
 80156a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156a4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8015804 <HAL_RCC_GetSysClockFreq+0x2d8>
 80156a8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80156ac:	4b50      	ldr	r3, [pc, #320]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80156ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156b4:	ee07 3a90 	vmov	s15, r3
 80156b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80156bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80156c0:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8015800 <HAL_RCC_GetSysClockFreq+0x2d4>
 80156c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80156c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80156cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80156d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80156d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80156d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80156dc:	e065      	b.n	80157aa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80156de:	693b      	ldr	r3, [r7, #16]
 80156e0:	ee07 3a90 	vmov	s15, r3
 80156e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80156e8:	eddf 6a47 	vldr	s13, [pc, #284]	; 8015808 <HAL_RCC_GetSysClockFreq+0x2dc>
 80156ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80156f0:	4b3f      	ldr	r3, [pc, #252]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80156f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80156f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156f8:	ee07 3a90 	vmov	s15, r3
 80156fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015700:	ed97 6a02 	vldr	s12, [r7, #8]
 8015704:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8015800 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015708:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801570c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015710:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015714:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015718:	ee67 7a27 	vmul.f32	s15, s14, s15
 801571c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015720:	e043      	b.n	80157aa <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015722:	693b      	ldr	r3, [r7, #16]
 8015724:	ee07 3a90 	vmov	s15, r3
 8015728:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801572c:	eddf 6a37 	vldr	s13, [pc, #220]	; 801580c <HAL_RCC_GetSysClockFreq+0x2e0>
 8015730:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015734:	4b2e      	ldr	r3, [pc, #184]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8015736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801573c:	ee07 3a90 	vmov	s15, r3
 8015740:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015744:	ed97 6a02 	vldr	s12, [r7, #8]
 8015748:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8015800 <HAL_RCC_GetSysClockFreq+0x2d4>
 801574c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015750:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015754:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015758:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801575c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8015760:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8015764:	e021      	b.n	80157aa <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8015766:	693b      	ldr	r3, [r7, #16]
 8015768:	ee07 3a90 	vmov	s15, r3
 801576c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015770:	eddf 6a25 	vldr	s13, [pc, #148]	; 8015808 <HAL_RCC_GetSysClockFreq+0x2dc>
 8015774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015778:	4b1d      	ldr	r3, [pc, #116]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 801577a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801577c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015780:	ee07 3a90 	vmov	s15, r3
 8015784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8015788:	ed97 6a02 	vldr	s12, [r7, #8]
 801578c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8015800 <HAL_RCC_GetSysClockFreq+0x2d4>
 8015790:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8015794:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8015798:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801579c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80157a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80157a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80157a8:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80157aa:	4b11      	ldr	r3, [pc, #68]	; (80157f0 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80157ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80157ae:	0a5b      	lsrs	r3, r3, #9
 80157b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80157b4:	3301      	adds	r3, #1
 80157b6:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80157b8:	683b      	ldr	r3, [r7, #0]
 80157ba:	ee07 3a90 	vmov	s15, r3
 80157be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80157c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80157c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80157ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80157ce:	ee17 3a90 	vmov	r3, s15
 80157d2:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80157d4:	e005      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80157d6:	2300      	movs	r3, #0
 80157d8:	61bb      	str	r3, [r7, #24]
    break;
 80157da:	e002      	b.n	80157e2 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80157dc:	4b06      	ldr	r3, [pc, #24]	; (80157f8 <HAL_RCC_GetSysClockFreq+0x2cc>)
 80157de:	61bb      	str	r3, [r7, #24]
    break;
 80157e0:	bf00      	nop
  }

  return sysclockfreq;
 80157e2:	69bb      	ldr	r3, [r7, #24]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3724      	adds	r7, #36	; 0x24
 80157e8:	46bd      	mov	sp, r7
 80157ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ee:	4770      	bx	lr
 80157f0:	58024400 	.word	0x58024400
 80157f4:	03d09000 	.word	0x03d09000
 80157f8:	003d0900 	.word	0x003d0900
 80157fc:	007a1200 	.word	0x007a1200
 8015800:	46000000 	.word	0x46000000
 8015804:	4c742400 	.word	0x4c742400
 8015808:	4a742400 	.word	0x4a742400
 801580c:	4af42400 	.word	0x4af42400

08015810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8015810:	b580      	push	{r7, lr}
 8015812:	b082      	sub	sp, #8
 8015814:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8015816:	f7ff fe89 	bl	801552c <HAL_RCC_GetSysClockFreq>
 801581a:	4601      	mov	r1, r0
 801581c:	4b10      	ldr	r3, [pc, #64]	; (8015860 <HAL_RCC_GetHCLKFreq+0x50>)
 801581e:	699b      	ldr	r3, [r3, #24]
 8015820:	0a1b      	lsrs	r3, r3, #8
 8015822:	f003 030f 	and.w	r3, r3, #15
 8015826:	4a0f      	ldr	r2, [pc, #60]	; (8015864 <HAL_RCC_GetHCLKFreq+0x54>)
 8015828:	5cd3      	ldrb	r3, [r2, r3]
 801582a:	f003 031f 	and.w	r3, r3, #31
 801582e:	fa21 f303 	lsr.w	r3, r1, r3
 8015832:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015834:	4b0a      	ldr	r3, [pc, #40]	; (8015860 <HAL_RCC_GetHCLKFreq+0x50>)
 8015836:	699b      	ldr	r3, [r3, #24]
 8015838:	f003 030f 	and.w	r3, r3, #15
 801583c:	4a09      	ldr	r2, [pc, #36]	; (8015864 <HAL_RCC_GetHCLKFreq+0x54>)
 801583e:	5cd3      	ldrb	r3, [r2, r3]
 8015840:	f003 031f 	and.w	r3, r3, #31
 8015844:	687a      	ldr	r2, [r7, #4]
 8015846:	fa22 f303 	lsr.w	r3, r2, r3
 801584a:	4a07      	ldr	r2, [pc, #28]	; (8015868 <HAL_RCC_GetHCLKFreq+0x58>)
 801584c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801584e:	4a07      	ldr	r2, [pc, #28]	; (801586c <HAL_RCC_GetHCLKFreq+0x5c>)
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8015854:	4b04      	ldr	r3, [pc, #16]	; (8015868 <HAL_RCC_GetHCLKFreq+0x58>)
 8015856:	681b      	ldr	r3, [r3, #0]
}
 8015858:	4618      	mov	r0, r3
 801585a:	3708      	adds	r7, #8
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	58024400 	.word	0x58024400
 8015864:	0801f638 	.word	0x0801f638
 8015868:	2400000c 	.word	0x2400000c
 801586c:	24000008 	.word	0x24000008

08015870 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8015870:	b580      	push	{r7, lr}
 8015872:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8015874:	f7ff ffcc 	bl	8015810 <HAL_RCC_GetHCLKFreq>
 8015878:	4601      	mov	r1, r0
 801587a:	4b06      	ldr	r3, [pc, #24]	; (8015894 <HAL_RCC_GetPCLK1Freq+0x24>)
 801587c:	69db      	ldr	r3, [r3, #28]
 801587e:	091b      	lsrs	r3, r3, #4
 8015880:	f003 0307 	and.w	r3, r3, #7
 8015884:	4a04      	ldr	r2, [pc, #16]	; (8015898 <HAL_RCC_GetPCLK1Freq+0x28>)
 8015886:	5cd3      	ldrb	r3, [r2, r3]
 8015888:	f003 031f 	and.w	r3, r3, #31
 801588c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8015890:	4618      	mov	r0, r3
 8015892:	bd80      	pop	{r7, pc}
 8015894:	58024400 	.word	0x58024400
 8015898:	0801f638 	.word	0x0801f638

0801589c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801589c:	b580      	push	{r7, lr}
 801589e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80158a0:	f7ff ffb6 	bl	8015810 <HAL_RCC_GetHCLKFreq>
 80158a4:	4601      	mov	r1, r0
 80158a6:	4b06      	ldr	r3, [pc, #24]	; (80158c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80158a8:	69db      	ldr	r3, [r3, #28]
 80158aa:	0a1b      	lsrs	r3, r3, #8
 80158ac:	f003 0307 	and.w	r3, r3, #7
 80158b0:	4a04      	ldr	r2, [pc, #16]	; (80158c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80158b2:	5cd3      	ldrb	r3, [r2, r3]
 80158b4:	f003 031f 	and.w	r3, r3, #31
 80158b8:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80158bc:	4618      	mov	r0, r3
 80158be:	bd80      	pop	{r7, pc}
 80158c0:	58024400 	.word	0x58024400
 80158c4:	0801f638 	.word	0x0801f638

080158c8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b086      	sub	sp, #24
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80158d0:	2300      	movs	r3, #0
 80158d2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80158d4:	2300      	movs	r3, #0
 80158d6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	d03d      	beq.n	8015960 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80158e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80158ec:	d013      	beq.n	8015916 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80158ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80158f2:	d802      	bhi.n	80158fa <HAL_RCCEx_PeriphCLKConfig+0x32>
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d007      	beq.n	8015908 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80158f8:	e01f      	b.n	801593a <HAL_RCCEx_PeriphCLKConfig+0x72>
 80158fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80158fe:	d013      	beq.n	8015928 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8015900:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8015904:	d01c      	beq.n	8015940 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8015906:	e018      	b.n	801593a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015908:	4baf      	ldr	r3, [pc, #700]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801590a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801590c:	4aae      	ldr	r2, [pc, #696]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801590e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015912:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015914:	e015      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	3304      	adds	r3, #4
 801591a:	2102      	movs	r1, #2
 801591c:	4618      	mov	r0, r3
 801591e:	f001 f95f 	bl	8016be0 <RCCEx_PLL2_Config>
 8015922:	4603      	mov	r3, r0
 8015924:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015926:	e00c      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8015928:	687b      	ldr	r3, [r7, #4]
 801592a:	3324      	adds	r3, #36	; 0x24
 801592c:	2102      	movs	r1, #2
 801592e:	4618      	mov	r0, r3
 8015930:	f001 fa08 	bl	8016d44 <RCCEx_PLL3_Config>
 8015934:	4603      	mov	r3, r0
 8015936:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8015938:	e003      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801593a:	2301      	movs	r3, #1
 801593c:	75fb      	strb	r3, [r7, #23]
      break;
 801593e:	e000      	b.n	8015942 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8015940:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015942:	7dfb      	ldrb	r3, [r7, #23]
 8015944:	2b00      	cmp	r3, #0
 8015946:	d109      	bne.n	801595c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8015948:	4b9f      	ldr	r3, [pc, #636]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 801594a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801594c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015954:	499c      	ldr	r1, [pc, #624]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015956:	4313      	orrs	r3, r2
 8015958:	650b      	str	r3, [r1, #80]	; 0x50
 801595a:	e001      	b.n	8015960 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801595c:	7dfb      	ldrb	r3, [r7, #23]
 801595e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015968:	2b00      	cmp	r3, #0
 801596a:	d03d      	beq.n	80159e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015970:	2b04      	cmp	r3, #4
 8015972:	d826      	bhi.n	80159c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8015974:	a201      	add	r2, pc, #4	; (adr r2, 801597c <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8015976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801597a:	bf00      	nop
 801597c:	08015991 	.word	0x08015991
 8015980:	0801599f 	.word	0x0801599f
 8015984:	080159b1 	.word	0x080159b1
 8015988:	080159c9 	.word	0x080159c9
 801598c:	080159c9 	.word	0x080159c9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015990:	4b8d      	ldr	r3, [pc, #564]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015994:	4a8c      	ldr	r2, [pc, #560]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015996:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801599a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 801599c:	e015      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	3304      	adds	r3, #4
 80159a2:	2100      	movs	r1, #0
 80159a4:	4618      	mov	r0, r3
 80159a6:	f001 f91b 	bl	8016be0 <RCCEx_PLL2_Config>
 80159aa:	4603      	mov	r3, r0
 80159ac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80159ae:	e00c      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	3324      	adds	r3, #36	; 0x24
 80159b4:	2100      	movs	r1, #0
 80159b6:	4618      	mov	r0, r3
 80159b8:	f001 f9c4 	bl	8016d44 <RCCEx_PLL3_Config>
 80159bc:	4603      	mov	r3, r0
 80159be:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80159c0:	e003      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80159c2:	2301      	movs	r3, #1
 80159c4:	75fb      	strb	r3, [r7, #23]
      break;
 80159c6:	e000      	b.n	80159ca <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80159c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80159ca:	7dfb      	ldrb	r3, [r7, #23]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d109      	bne.n	80159e4 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80159d0:	4b7d      	ldr	r3, [pc, #500]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80159d4:	f023 0207 	bic.w	r2, r3, #7
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80159dc:	497a      	ldr	r1, [pc, #488]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80159de:	4313      	orrs	r3, r2
 80159e0:	650b      	str	r3, [r1, #80]	; 0x50
 80159e2:	e001      	b.n	80159e8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80159e4:	7dfb      	ldrb	r3, [r7, #23]
 80159e6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d03e      	beq.n	8015a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80159f8:	2b80      	cmp	r3, #128	; 0x80
 80159fa:	d01c      	beq.n	8015a36 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80159fc:	2b80      	cmp	r3, #128	; 0x80
 80159fe:	d804      	bhi.n	8015a0a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d008      	beq.n	8015a16 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8015a04:	2b40      	cmp	r3, #64	; 0x40
 8015a06:	d00d      	beq.n	8015a24 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8015a08:	e01e      	b.n	8015a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8015a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8015a0c:	d01f      	beq.n	8015a4e <HAL_RCCEx_PeriphCLKConfig+0x186>
 8015a0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a12:	d01e      	beq.n	8015a52 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8015a14:	e018      	b.n	8015a48 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015a16:	4b6c      	ldr	r3, [pc, #432]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a1a:	4a6b      	ldr	r2, [pc, #428]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015a20:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015a22:	e017      	b.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	3304      	adds	r3, #4
 8015a28:	2100      	movs	r1, #0
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f001 f8d8 	bl	8016be0 <RCCEx_PLL2_Config>
 8015a30:	4603      	mov	r3, r0
 8015a32:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015a34:	e00e      	b.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	3324      	adds	r3, #36	; 0x24
 8015a3a:	2100      	movs	r1, #0
 8015a3c:	4618      	mov	r0, r3
 8015a3e:	f001 f981 	bl	8016d44 <RCCEx_PLL3_Config>
 8015a42:	4603      	mov	r3, r0
 8015a44:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8015a46:	e005      	b.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015a48:	2301      	movs	r3, #1
 8015a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8015a4c:	e002      	b.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015a4e:	bf00      	nop
 8015a50:	e000      	b.n	8015a54 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8015a52:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015a54:	7dfb      	ldrb	r3, [r7, #23]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d109      	bne.n	8015a6e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8015a5a:	4b5b      	ldr	r3, [pc, #364]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015a5e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a66:	4958      	ldr	r1, [pc, #352]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015a68:	4313      	orrs	r3, r2
 8015a6a:	650b      	str	r3, [r1, #80]	; 0x50
 8015a6c:	e001      	b.n	8015a72 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d044      	beq.n	8015b08 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a88:	d01f      	beq.n	8015aca <HAL_RCCEx_PeriphCLKConfig+0x202>
 8015a8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8015a8e:	d805      	bhi.n	8015a9c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d00a      	beq.n	8015aaa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8015a94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8015a98:	d00e      	beq.n	8015ab8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8015a9a:	e01f      	b.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x214>
 8015a9c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8015aa0:	d01f      	beq.n	8015ae2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8015aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8015aa6:	d01e      	beq.n	8015ae6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8015aa8:	e018      	b.n	8015adc <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015aaa:	4b47      	ldr	r3, [pc, #284]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015aae:	4a46      	ldr	r2, [pc, #280]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015ab4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015ab6:	e017      	b.n	8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	3304      	adds	r3, #4
 8015abc:	2100      	movs	r1, #0
 8015abe:	4618      	mov	r0, r3
 8015ac0:	f001 f88e 	bl	8016be0 <RCCEx_PLL2_Config>
 8015ac4:	4603      	mov	r3, r0
 8015ac6:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015ac8:	e00e      	b.n	8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015aca:	687b      	ldr	r3, [r7, #4]
 8015acc:	3324      	adds	r3, #36	; 0x24
 8015ace:	2100      	movs	r1, #0
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	f001 f937 	bl	8016d44 <RCCEx_PLL3_Config>
 8015ad6:	4603      	mov	r3, r0
 8015ad8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015ada:	e005      	b.n	8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015adc:	2301      	movs	r3, #1
 8015ade:	75fb      	strb	r3, [r7, #23]
      break;
 8015ae0:	e002      	b.n	8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015ae2:	bf00      	nop
 8015ae4:	e000      	b.n	8015ae8 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8015ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015ae8:	7dfb      	ldrb	r3, [r7, #23]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d10a      	bne.n	8015b04 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8015aee:	4b36      	ldr	r3, [pc, #216]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015af2:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8015afc:	4932      	ldr	r1, [pc, #200]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015afe:	4313      	orrs	r3, r2
 8015b00:	658b      	str	r3, [r1, #88]	; 0x58
 8015b02:	e001      	b.n	8015b08 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b04:	7dfb      	ldrb	r3, [r7, #23]
 8015b06:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	d044      	beq.n	8015b9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8015b14:	687b      	ldr	r3, [r7, #4]
 8015b16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015b1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015b1e:	d01f      	beq.n	8015b60 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8015b20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8015b24:	d805      	bhi.n	8015b32 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d00a      	beq.n	8015b40 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8015b2a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8015b2e:	d00e      	beq.n	8015b4e <HAL_RCCEx_PeriphCLKConfig+0x286>
 8015b30:	e01f      	b.n	8015b72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8015b32:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8015b36:	d01f      	beq.n	8015b78 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8015b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8015b3c:	d01e      	beq.n	8015b7c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8015b3e:	e018      	b.n	8015b72 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015b40:	4b21      	ldr	r3, [pc, #132]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015b44:	4a20      	ldr	r2, [pc, #128]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015b4c:	e017      	b.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	3304      	adds	r3, #4
 8015b52:	2100      	movs	r1, #0
 8015b54:	4618      	mov	r0, r3
 8015b56:	f001 f843 	bl	8016be0 <RCCEx_PLL2_Config>
 8015b5a:	4603      	mov	r3, r0
 8015b5c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8015b5e:	e00e      	b.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	3324      	adds	r3, #36	; 0x24
 8015b64:	2100      	movs	r1, #0
 8015b66:	4618      	mov	r0, r3
 8015b68:	f001 f8ec 	bl	8016d44 <RCCEx_PLL3_Config>
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8015b70:	e005      	b.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015b72:	2301      	movs	r3, #1
 8015b74:	75fb      	strb	r3, [r7, #23]
      break;
 8015b76:	e002      	b.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015b78:	bf00      	nop
 8015b7a:	e000      	b.n	8015b7e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8015b7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015b7e:	7dfb      	ldrb	r3, [r7, #23]
 8015b80:	2b00      	cmp	r3, #0
 8015b82:	d10a      	bne.n	8015b9a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8015b84:	4b10      	ldr	r3, [pc, #64]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015b88:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8015b92:	490d      	ldr	r1, [pc, #52]	; (8015bc8 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8015b94:	4313      	orrs	r3, r2
 8015b96:	658b      	str	r3, [r1, #88]	; 0x58
 8015b98:	e001      	b.n	8015b9e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015b9a:	7dfb      	ldrb	r3, [r7, #23]
 8015b9c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d035      	beq.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015bae:	2b10      	cmp	r3, #16
 8015bb0:	d00c      	beq.n	8015bcc <HAL_RCCEx_PeriphCLKConfig+0x304>
 8015bb2:	2b10      	cmp	r3, #16
 8015bb4:	d802      	bhi.n	8015bbc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	d01b      	beq.n	8015bf2 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8015bba:	e017      	b.n	8015bec <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015bbc:	2b20      	cmp	r3, #32
 8015bbe:	d00c      	beq.n	8015bda <HAL_RCCEx_PeriphCLKConfig+0x312>
 8015bc0:	2b30      	cmp	r3, #48	; 0x30
 8015bc2:	d018      	beq.n	8015bf6 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8015bc4:	e012      	b.n	8015bec <HAL_RCCEx_PeriphCLKConfig+0x324>
 8015bc6:	bf00      	nop
 8015bc8:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015bcc:	4baf      	ldr	r3, [pc, #700]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015bd0:	4aae      	ldr	r2, [pc, #696]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015bd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015bd8:	e00e      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	3304      	adds	r3, #4
 8015bde:	2102      	movs	r1, #2
 8015be0:	4618      	mov	r0, r3
 8015be2:	f000 fffd 	bl	8016be0 <RCCEx_PLL2_Config>
 8015be6:	4603      	mov	r3, r0
 8015be8:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8015bea:	e005      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015bec:	2301      	movs	r3, #1
 8015bee:	75fb      	strb	r3, [r7, #23]
      break;
 8015bf0:	e002      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015bf2:	bf00      	nop
 8015bf4:	e000      	b.n	8015bf8 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8015bf6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015bf8:	7dfb      	ldrb	r3, [r7, #23]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d109      	bne.n	8015c12 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8015bfe:	4ba3      	ldr	r3, [pc, #652]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015c02:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015c0a:	49a0      	ldr	r1, [pc, #640]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c0c:	4313      	orrs	r3, r2
 8015c0e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015c10:	e001      	b.n	8015c16 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015c12:	7dfb      	ldrb	r3, [r7, #23]
 8015c14:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	d042      	beq.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c2a:	d01f      	beq.n	8015c6c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8015c2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8015c30:	d805      	bhi.n	8015c3e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d00a      	beq.n	8015c4c <HAL_RCCEx_PeriphCLKConfig+0x384>
 8015c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015c3a:	d00e      	beq.n	8015c5a <HAL_RCCEx_PeriphCLKConfig+0x392>
 8015c3c:	e01f      	b.n	8015c7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8015c3e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8015c42:	d01f      	beq.n	8015c84 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8015c44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8015c48:	d01e      	beq.n	8015c88 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8015c4a:	e018      	b.n	8015c7e <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015c4c:	4b8f      	ldr	r3, [pc, #572]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c50:	4a8e      	ldr	r2, [pc, #568]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015c56:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015c58:	e017      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	3304      	adds	r3, #4
 8015c5e:	2100      	movs	r1, #0
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 ffbd 	bl	8016be0 <RCCEx_PLL2_Config>
 8015c66:	4603      	mov	r3, r0
 8015c68:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015c6a:	e00e      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	3324      	adds	r3, #36	; 0x24
 8015c70:	2100      	movs	r1, #0
 8015c72:	4618      	mov	r0, r3
 8015c74:	f001 f866 	bl	8016d44 <RCCEx_PLL3_Config>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8015c7c:	e005      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015c7e:	2301      	movs	r3, #1
 8015c80:	75fb      	strb	r3, [r7, #23]
      break;
 8015c82:	e002      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8015c84:	bf00      	nop
 8015c86:	e000      	b.n	8015c8a <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8015c88:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015c8a:	7dfb      	ldrb	r3, [r7, #23]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d109      	bne.n	8015ca4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8015c90:	4b7e      	ldr	r3, [pc, #504]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015c94:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015c9c:	497b      	ldr	r1, [pc, #492]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015c9e:	4313      	orrs	r3, r2
 8015ca0:	650b      	str	r3, [r1, #80]	; 0x50
 8015ca2:	e001      	b.n	8015ca8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015ca4:	7dfb      	ldrb	r3, [r7, #23]
 8015ca6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d042      	beq.n	8015d3a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015cbc:	d01b      	beq.n	8015cf6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8015cbe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8015cc2:	d805      	bhi.n	8015cd0 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d022      	beq.n	8015d0e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8015cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015ccc:	d00a      	beq.n	8015ce4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8015cce:	e01b      	b.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8015cd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8015cd4:	d01d      	beq.n	8015d12 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8015cd6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8015cda:	d01c      	beq.n	8015d16 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8015cdc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8015ce0:	d01b      	beq.n	8015d1a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8015ce2:	e011      	b.n	8015d08 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	2101      	movs	r1, #1
 8015cea:	4618      	mov	r0, r3
 8015cec:	f000 ff78 	bl	8016be0 <RCCEx_PLL2_Config>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015cf4:	e012      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015cf6:	687b      	ldr	r3, [r7, #4]
 8015cf8:	3324      	adds	r3, #36	; 0x24
 8015cfa:	2101      	movs	r1, #1
 8015cfc:	4618      	mov	r0, r3
 8015cfe:	f001 f821 	bl	8016d44 <RCCEx_PLL3_Config>
 8015d02:	4603      	mov	r3, r0
 8015d04:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8015d06:	e009      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015d08:	2301      	movs	r3, #1
 8015d0a:	75fb      	strb	r3, [r7, #23]
      break;
 8015d0c:	e006      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015d0e:	bf00      	nop
 8015d10:	e004      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015d12:	bf00      	nop
 8015d14:	e002      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015d16:	bf00      	nop
 8015d18:	e000      	b.n	8015d1c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8015d1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015d1c:	7dfb      	ldrb	r3, [r7, #23]
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d109      	bne.n	8015d36 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8015d22:	4b5a      	ldr	r3, [pc, #360]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015d26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d2e:	4957      	ldr	r1, [pc, #348]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015d30:	4313      	orrs	r3, r2
 8015d32:	650b      	str	r3, [r1, #80]	; 0x50
 8015d34:	e001      	b.n	8015d3a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015d36:	7dfb      	ldrb	r3, [r7, #23]
 8015d38:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015d42:	2b00      	cmp	r3, #0
 8015d44:	d044      	beq.n	8015dd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015d50:	d01b      	beq.n	8015d8a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8015d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015d56:	d805      	bhi.n	8015d64 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d022      	beq.n	8015da2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8015d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015d60:	d00a      	beq.n	8015d78 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8015d62:	e01b      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8015d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8015d68:	d01d      	beq.n	8015da6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8015d6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015d6e:	d01c      	beq.n	8015daa <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8015d70:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8015d74:	d01b      	beq.n	8015dae <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8015d76:	e011      	b.n	8015d9c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	3304      	adds	r3, #4
 8015d7c:	2101      	movs	r1, #1
 8015d7e:	4618      	mov	r0, r3
 8015d80:	f000 ff2e 	bl	8016be0 <RCCEx_PLL2_Config>
 8015d84:	4603      	mov	r3, r0
 8015d86:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015d88:	e012      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	3324      	adds	r3, #36	; 0x24
 8015d8e:	2101      	movs	r1, #1
 8015d90:	4618      	mov	r0, r3
 8015d92:	f000 ffd7 	bl	8016d44 <RCCEx_PLL3_Config>
 8015d96:	4603      	mov	r3, r0
 8015d98:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8015d9a:	e009      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8015d9c:	2301      	movs	r3, #1
 8015d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8015da0:	e006      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015da2:	bf00      	nop
 8015da4:	e004      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015da6:	bf00      	nop
 8015da8:	e002      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015daa:	bf00      	nop
 8015dac:	e000      	b.n	8015db0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8015dae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015db0:	7dfb      	ldrb	r3, [r7, #23]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d10a      	bne.n	8015dcc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8015db6:	4b35      	ldr	r3, [pc, #212]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dba:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8015dc4:	4931      	ldr	r1, [pc, #196]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015dc6:	4313      	orrs	r3, r2
 8015dc8:	658b      	str	r3, [r1, #88]	; 0x58
 8015dca:	e001      	b.n	8015dd0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015dcc:	7dfb      	ldrb	r3, [r7, #23]
 8015dce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	681b      	ldr	r3, [r3, #0]
 8015dd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d02d      	beq.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015de4:	d005      	beq.n	8015df2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8015de6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015dea:	d009      	beq.n	8015e00 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d013      	beq.n	8015e18 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8015df0:	e00f      	b.n	8015e12 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015df2:	4b26      	ldr	r3, [pc, #152]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015df6:	4a25      	ldr	r2, [pc, #148]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015dfe:	e00c      	b.n	8015e1a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	3304      	adds	r3, #4
 8015e04:	2101      	movs	r1, #1
 8015e06:	4618      	mov	r0, r3
 8015e08:	f000 feea 	bl	8016be0 <RCCEx_PLL2_Config>
 8015e0c:	4603      	mov	r3, r0
 8015e0e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8015e10:	e003      	b.n	8015e1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8015e12:	2301      	movs	r3, #1
 8015e14:	75fb      	strb	r3, [r7, #23]
      break;
 8015e16:	e000      	b.n	8015e1a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8015e18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e1a:	7dfb      	ldrb	r3, [r7, #23]
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d109      	bne.n	8015e34 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015e20:	4b1a      	ldr	r3, [pc, #104]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e24:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8015e28:	687b      	ldr	r3, [r7, #4]
 8015e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e2c:	4917      	ldr	r1, [pc, #92]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015e2e:	4313      	orrs	r3, r2
 8015e30:	650b      	str	r3, [r1, #80]	; 0x50
 8015e32:	e001      	b.n	8015e38 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015e34:	7dfb      	ldrb	r3, [r7, #23]
 8015e36:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d035      	beq.n	8015eb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e48:	2b03      	cmp	r3, #3
 8015e4a:	d81b      	bhi.n	8015e84 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8015e4c:	a201      	add	r2, pc, #4	; (adr r2, 8015e54 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8015e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e52:	bf00      	nop
 8015e54:	08015e91 	.word	0x08015e91
 8015e58:	08015e65 	.word	0x08015e65
 8015e5c:	08015e73 	.word	0x08015e73
 8015e60:	08015e91 	.word	0x08015e91
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8015e64:	4b09      	ldr	r3, [pc, #36]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015e68:	4a08      	ldr	r2, [pc, #32]	; (8015e8c <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8015e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8015e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015e70:	e00f      	b.n	8015e92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	3304      	adds	r3, #4
 8015e76:	2102      	movs	r1, #2
 8015e78:	4618      	mov	r0, r3
 8015e7a:	f000 feb1 	bl	8016be0 <RCCEx_PLL2_Config>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8015e82:	e006      	b.n	8015e92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8015e84:	2301      	movs	r3, #1
 8015e86:	75fb      	strb	r3, [r7, #23]
      break;
 8015e88:	e003      	b.n	8015e92 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8015e8a:	bf00      	nop
 8015e8c:	58024400 	.word	0x58024400
      break;
 8015e90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8015e92:	7dfb      	ldrb	r3, [r7, #23]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d109      	bne.n	8015eac <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8015e98:	4bba      	ldr	r3, [pc, #744]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e9c:	f023 0203 	bic.w	r2, r3, #3
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ea4:	49b7      	ldr	r1, [pc, #732]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8015eaa:	e001      	b.n	8015eb0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015eac:	7dfb      	ldrb	r3, [r7, #23]
 8015eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	681b      	ldr	r3, [r3, #0]
 8015eb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	f000 8086 	beq.w	8015fca <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8015ebe:	4bb2      	ldr	r3, [pc, #712]	; (8016188 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	4ab1      	ldr	r2, [pc, #708]	; (8016188 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015ec8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8015eca:	f7fc fdf3 	bl	8012ab4 <HAL_GetTick>
 8015ece:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015ed0:	e009      	b.n	8015ee6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8015ed2:	f7fc fdef 	bl	8012ab4 <HAL_GetTick>
 8015ed6:	4602      	mov	r2, r0
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	1ad3      	subs	r3, r2, r3
 8015edc:	2b64      	cmp	r3, #100	; 0x64
 8015ede:	d902      	bls.n	8015ee6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8015ee0:	2303      	movs	r3, #3
 8015ee2:	75fb      	strb	r3, [r7, #23]
        break;
 8015ee4:	e005      	b.n	8015ef2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8015ee6:	4ba8      	ldr	r3, [pc, #672]	; (8016188 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	d0ef      	beq.n	8015ed2 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8015ef2:	7dfb      	ldrb	r3, [r7, #23]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d166      	bne.n	8015fc6 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8015ef8:	4ba2      	ldr	r3, [pc, #648]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015f02:	4053      	eors	r3, r2
 8015f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d013      	beq.n	8015f34 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8015f0c:	4b9d      	ldr	r3, [pc, #628]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8015f14:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8015f16:	4b9b      	ldr	r3, [pc, #620]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f1a:	4a9a      	ldr	r2, [pc, #616]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015f20:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8015f22:	4b98      	ldr	r3, [pc, #608]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f26:	4a97      	ldr	r2, [pc, #604]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8015f2c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8015f2e:	4a95      	ldr	r2, [pc, #596]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f30:	68fb      	ldr	r3, [r7, #12]
 8015f32:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015f3e:	d115      	bne.n	8015f6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8015f40:	f7fc fdb8 	bl	8012ab4 <HAL_GetTick>
 8015f44:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015f46:	e00b      	b.n	8015f60 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8015f48:	f7fc fdb4 	bl	8012ab4 <HAL_GetTick>
 8015f4c:	4602      	mov	r2, r0
 8015f4e:	693b      	ldr	r3, [r7, #16]
 8015f50:	1ad3      	subs	r3, r2, r3
 8015f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8015f56:	4293      	cmp	r3, r2
 8015f58:	d902      	bls.n	8015f60 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8015f5a:	2303      	movs	r3, #3
 8015f5c:	75fb      	strb	r3, [r7, #23]
            break;
 8015f5e:	e005      	b.n	8015f6c <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8015f60:	4b88      	ldr	r3, [pc, #544]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f64:	f003 0302 	and.w	r3, r3, #2
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	d0ed      	beq.n	8015f48 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8015f6c:	7dfb      	ldrb	r3, [r7, #23]
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d126      	bne.n	8015fc0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015f78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8015f7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8015f80:	d10d      	bne.n	8015f9e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 8015f82:	4b80      	ldr	r3, [pc, #512]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f84:	691b      	ldr	r3, [r3, #16]
 8015f86:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015f90:	0919      	lsrs	r1, r3, #4
 8015f92:	4b7e      	ldr	r3, [pc, #504]	; (801618c <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8015f94:	400b      	ands	r3, r1
 8015f96:	497b      	ldr	r1, [pc, #492]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015f98:	4313      	orrs	r3, r2
 8015f9a:	610b      	str	r3, [r1, #16]
 8015f9c:	e005      	b.n	8015faa <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8015f9e:	4b79      	ldr	r3, [pc, #484]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015fa0:	691b      	ldr	r3, [r3, #16]
 8015fa2:	4a78      	ldr	r2, [pc, #480]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015fa4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015fa8:	6113      	str	r3, [r2, #16]
 8015faa:	4b76      	ldr	r3, [pc, #472]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015fac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8015fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8015fb8:	4972      	ldr	r1, [pc, #456]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8015fba:	4313      	orrs	r3, r2
 8015fbc:	670b      	str	r3, [r1, #112]	; 0x70
 8015fbe:	e004      	b.n	8015fca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8015fc0:	7dfb      	ldrb	r3, [r7, #23]
 8015fc2:	75bb      	strb	r3, [r7, #22]
 8015fc4:	e001      	b.n	8015fca <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8015fc6:	7dfb      	ldrb	r3, [r7, #23]
 8015fc8:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	f003 0301 	and.w	r3, r3, #1
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d07d      	beq.n	80160d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015fda:	2b28      	cmp	r3, #40	; 0x28
 8015fdc:	d866      	bhi.n	80160ac <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8015fde:	a201      	add	r2, pc, #4	; (adr r2, 8015fe4 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8015fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fe4:	080160b3 	.word	0x080160b3
 8015fe8:	080160ad 	.word	0x080160ad
 8015fec:	080160ad 	.word	0x080160ad
 8015ff0:	080160ad 	.word	0x080160ad
 8015ff4:	080160ad 	.word	0x080160ad
 8015ff8:	080160ad 	.word	0x080160ad
 8015ffc:	080160ad 	.word	0x080160ad
 8016000:	080160ad 	.word	0x080160ad
 8016004:	08016089 	.word	0x08016089
 8016008:	080160ad 	.word	0x080160ad
 801600c:	080160ad 	.word	0x080160ad
 8016010:	080160ad 	.word	0x080160ad
 8016014:	080160ad 	.word	0x080160ad
 8016018:	080160ad 	.word	0x080160ad
 801601c:	080160ad 	.word	0x080160ad
 8016020:	080160ad 	.word	0x080160ad
 8016024:	0801609b 	.word	0x0801609b
 8016028:	080160ad 	.word	0x080160ad
 801602c:	080160ad 	.word	0x080160ad
 8016030:	080160ad 	.word	0x080160ad
 8016034:	080160ad 	.word	0x080160ad
 8016038:	080160ad 	.word	0x080160ad
 801603c:	080160ad 	.word	0x080160ad
 8016040:	080160ad 	.word	0x080160ad
 8016044:	080160b3 	.word	0x080160b3
 8016048:	080160ad 	.word	0x080160ad
 801604c:	080160ad 	.word	0x080160ad
 8016050:	080160ad 	.word	0x080160ad
 8016054:	080160ad 	.word	0x080160ad
 8016058:	080160ad 	.word	0x080160ad
 801605c:	080160ad 	.word	0x080160ad
 8016060:	080160ad 	.word	0x080160ad
 8016064:	080160b3 	.word	0x080160b3
 8016068:	080160ad 	.word	0x080160ad
 801606c:	080160ad 	.word	0x080160ad
 8016070:	080160ad 	.word	0x080160ad
 8016074:	080160ad 	.word	0x080160ad
 8016078:	080160ad 	.word	0x080160ad
 801607c:	080160ad 	.word	0x080160ad
 8016080:	080160ad 	.word	0x080160ad
 8016084:	080160b3 	.word	0x080160b3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	3304      	adds	r3, #4
 801608c:	2101      	movs	r1, #1
 801608e:	4618      	mov	r0, r3
 8016090:	f000 fda6 	bl	8016be0 <RCCEx_PLL2_Config>
 8016094:	4603      	mov	r3, r0
 8016096:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8016098:	e00c      	b.n	80160b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	3324      	adds	r3, #36	; 0x24
 801609e:	2101      	movs	r1, #1
 80160a0:	4618      	mov	r0, r3
 80160a2:	f000 fe4f 	bl	8016d44 <RCCEx_PLL3_Config>
 80160a6:	4603      	mov	r3, r0
 80160a8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80160aa:	e003      	b.n	80160b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80160ac:	2301      	movs	r3, #1
 80160ae:	75fb      	strb	r3, [r7, #23]
      break;
 80160b0:	e000      	b.n	80160b4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80160b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80160b4:	7dfb      	ldrb	r3, [r7, #23]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d109      	bne.n	80160ce <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80160ba:	4b32      	ldr	r3, [pc, #200]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80160bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160be:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80160c6:	492f      	ldr	r1, [pc, #188]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80160c8:	4313      	orrs	r3, r2
 80160ca:	654b      	str	r3, [r1, #84]	; 0x54
 80160cc:	e001      	b.n	80160d2 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80160ce:	7dfb      	ldrb	r3, [r7, #23]
 80160d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80160d2:	687b      	ldr	r3, [r7, #4]
 80160d4:	681b      	ldr	r3, [r3, #0]
 80160d6:	f003 0302 	and.w	r3, r3, #2
 80160da:	2b00      	cmp	r3, #0
 80160dc:	d037      	beq.n	801614e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80160e2:	2b05      	cmp	r3, #5
 80160e4:	d820      	bhi.n	8016128 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80160e6:	a201      	add	r2, pc, #4	; (adr r2, 80160ec <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80160e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80160ec:	0801612f 	.word	0x0801612f
 80160f0:	08016105 	.word	0x08016105
 80160f4:	08016117 	.word	0x08016117
 80160f8:	0801612f 	.word	0x0801612f
 80160fc:	0801612f 	.word	0x0801612f
 8016100:	0801612f 	.word	0x0801612f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	3304      	adds	r3, #4
 8016108:	2101      	movs	r1, #1
 801610a:	4618      	mov	r0, r3
 801610c:	f000 fd68 	bl	8016be0 <RCCEx_PLL2_Config>
 8016110:	4603      	mov	r3, r0
 8016112:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8016114:	e00c      	b.n	8016130 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	3324      	adds	r3, #36	; 0x24
 801611a:	2101      	movs	r1, #1
 801611c:	4618      	mov	r0, r3
 801611e:	f000 fe11 	bl	8016d44 <RCCEx_PLL3_Config>
 8016122:	4603      	mov	r3, r0
 8016124:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8016126:	e003      	b.n	8016130 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016128:	2301      	movs	r3, #1
 801612a:	75fb      	strb	r3, [r7, #23]
      break;
 801612c:	e000      	b.n	8016130 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 801612e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016130:	7dfb      	ldrb	r3, [r7, #23]
 8016132:	2b00      	cmp	r3, #0
 8016134:	d109      	bne.n	801614a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8016136:	4b13      	ldr	r3, [pc, #76]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801613a:	f023 0207 	bic.w	r2, r3, #7
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016142:	4910      	ldr	r1, [pc, #64]	; (8016184 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8016144:	4313      	orrs	r3, r2
 8016146:	654b      	str	r3, [r1, #84]	; 0x54
 8016148:	e001      	b.n	801614e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801614a:	7dfb      	ldrb	r3, [r7, #23]
 801614c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801614e:	687b      	ldr	r3, [r7, #4]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	f003 0304 	and.w	r3, r3, #4
 8016156:	2b00      	cmp	r3, #0
 8016158:	d040      	beq.n	80161dc <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 801615a:	687b      	ldr	r3, [r7, #4]
 801615c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016160:	2b05      	cmp	r3, #5
 8016162:	d827      	bhi.n	80161b4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8016164:	a201      	add	r2, pc, #4	; (adr r2, 801616c <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8016166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801616a:	bf00      	nop
 801616c:	080161bb 	.word	0x080161bb
 8016170:	08016191 	.word	0x08016191
 8016174:	080161a3 	.word	0x080161a3
 8016178:	080161bb 	.word	0x080161bb
 801617c:	080161bb 	.word	0x080161bb
 8016180:	080161bb 	.word	0x080161bb
 8016184:	58024400 	.word	0x58024400
 8016188:	58024800 	.word	0x58024800
 801618c:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	3304      	adds	r3, #4
 8016194:	2101      	movs	r1, #1
 8016196:	4618      	mov	r0, r3
 8016198:	f000 fd22 	bl	8016be0 <RCCEx_PLL2_Config>
 801619c:	4603      	mov	r3, r0
 801619e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80161a0:	e00c      	b.n	80161bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	3324      	adds	r3, #36	; 0x24
 80161a6:	2101      	movs	r1, #1
 80161a8:	4618      	mov	r0, r3
 80161aa:	f000 fdcb 	bl	8016d44 <RCCEx_PLL3_Config>
 80161ae:	4603      	mov	r3, r0
 80161b0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80161b2:	e003      	b.n	80161bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80161b4:	2301      	movs	r3, #1
 80161b6:	75fb      	strb	r3, [r7, #23]
      break;
 80161b8:	e000      	b.n	80161bc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80161ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80161bc:	7dfb      	ldrb	r3, [r7, #23]
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d10a      	bne.n	80161d8 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80161c2:	4bb2      	ldr	r3, [pc, #712]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80161c6:	f023 0207 	bic.w	r2, r3, #7
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161d0:	49ae      	ldr	r1, [pc, #696]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80161d2:	4313      	orrs	r3, r2
 80161d4:	658b      	str	r3, [r1, #88]	; 0x58
 80161d6:	e001      	b.n	80161dc <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80161d8:	7dfb      	ldrb	r3, [r7, #23]
 80161da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	f003 0320 	and.w	r3, r3, #32
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d044      	beq.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80161ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161f2:	d01b      	beq.n	801622c <HAL_RCCEx_PeriphCLKConfig+0x964>
 80161f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80161f8:	d805      	bhi.n	8016206 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d022      	beq.n	8016244 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80161fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016202:	d00a      	beq.n	801621a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8016204:	e01b      	b.n	801623e <HAL_RCCEx_PeriphCLKConfig+0x976>
 8016206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801620a:	d01d      	beq.n	8016248 <HAL_RCCEx_PeriphCLKConfig+0x980>
 801620c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8016210:	d01c      	beq.n	801624c <HAL_RCCEx_PeriphCLKConfig+0x984>
 8016212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8016216:	d01b      	beq.n	8016250 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8016218:	e011      	b.n	801623e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	3304      	adds	r3, #4
 801621e:	2100      	movs	r1, #0
 8016220:	4618      	mov	r0, r3
 8016222:	f000 fcdd 	bl	8016be0 <RCCEx_PLL2_Config>
 8016226:	4603      	mov	r3, r0
 8016228:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801622a:	e012      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	3324      	adds	r3, #36	; 0x24
 8016230:	2102      	movs	r1, #2
 8016232:	4618      	mov	r0, r3
 8016234:	f000 fd86 	bl	8016d44 <RCCEx_PLL3_Config>
 8016238:	4603      	mov	r3, r0
 801623a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 801623c:	e009      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801623e:	2301      	movs	r3, #1
 8016240:	75fb      	strb	r3, [r7, #23]
      break;
 8016242:	e006      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016244:	bf00      	nop
 8016246:	e004      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016248:	bf00      	nop
 801624a:	e002      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 801624c:	bf00      	nop
 801624e:	e000      	b.n	8016252 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8016250:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016252:	7dfb      	ldrb	r3, [r7, #23]
 8016254:	2b00      	cmp	r3, #0
 8016256:	d10a      	bne.n	801626e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8016258:	4b8c      	ldr	r3, [pc, #560]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801625a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801625c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8016266:	4989      	ldr	r1, [pc, #548]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016268:	4313      	orrs	r3, r2
 801626a:	654b      	str	r3, [r1, #84]	; 0x54
 801626c:	e001      	b.n	8016272 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801626e:	7dfb      	ldrb	r3, [r7, #23]
 8016270:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	681b      	ldr	r3, [r3, #0]
 8016276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801627a:	2b00      	cmp	r3, #0
 801627c:	d044      	beq.n	8016308 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8016284:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016288:	d01b      	beq.n	80162c2 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 801628a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801628e:	d805      	bhi.n	801629c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8016290:	2b00      	cmp	r3, #0
 8016292:	d022      	beq.n	80162da <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8016294:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016298:	d00a      	beq.n	80162b0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 801629a:	e01b      	b.n	80162d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 801629c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80162a0:	d01d      	beq.n	80162de <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80162a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80162a6:	d01c      	beq.n	80162e2 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80162a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80162ac:	d01b      	beq.n	80162e6 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80162ae:	e011      	b.n	80162d4 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	3304      	adds	r3, #4
 80162b4:	2100      	movs	r1, #0
 80162b6:	4618      	mov	r0, r3
 80162b8:	f000 fc92 	bl	8016be0 <RCCEx_PLL2_Config>
 80162bc:	4603      	mov	r3, r0
 80162be:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80162c0:	e012      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80162c2:	687b      	ldr	r3, [r7, #4]
 80162c4:	3324      	adds	r3, #36	; 0x24
 80162c6:	2102      	movs	r1, #2
 80162c8:	4618      	mov	r0, r3
 80162ca:	f000 fd3b 	bl	8016d44 <RCCEx_PLL3_Config>
 80162ce:	4603      	mov	r3, r0
 80162d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80162d2:	e009      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80162d4:	2301      	movs	r3, #1
 80162d6:	75fb      	strb	r3, [r7, #23]
      break;
 80162d8:	e006      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80162da:	bf00      	nop
 80162dc:	e004      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80162de:	bf00      	nop
 80162e0:	e002      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80162e2:	bf00      	nop
 80162e4:	e000      	b.n	80162e8 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80162e6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80162e8:	7dfb      	ldrb	r3, [r7, #23]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d10a      	bne.n	8016304 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80162ee:	4b67      	ldr	r3, [pc, #412]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80162f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80162f2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80162fc:	4963      	ldr	r1, [pc, #396]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80162fe:	4313      	orrs	r3, r2
 8016300:	658b      	str	r3, [r1, #88]	; 0x58
 8016302:	e001      	b.n	8016308 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016304:	7dfb      	ldrb	r3, [r7, #23]
 8016306:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8016308:	687b      	ldr	r3, [r7, #4]
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016310:	2b00      	cmp	r3, #0
 8016312:	d044      	beq.n	801639e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801631a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801631e:	d01b      	beq.n	8016358 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8016320:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8016324:	d805      	bhi.n	8016332 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8016326:	2b00      	cmp	r3, #0
 8016328:	d022      	beq.n	8016370 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 801632a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801632e:	d00a      	beq.n	8016346 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8016330:	e01b      	b.n	801636a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8016332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016336:	d01d      	beq.n	8016374 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8016338:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801633c:	d01c      	beq.n	8016378 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 801633e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8016342:	d01b      	beq.n	801637c <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8016344:	e011      	b.n	801636a <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	3304      	adds	r3, #4
 801634a:	2100      	movs	r1, #0
 801634c:	4618      	mov	r0, r3
 801634e:	f000 fc47 	bl	8016be0 <RCCEx_PLL2_Config>
 8016352:	4603      	mov	r3, r0
 8016354:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016356:	e012      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	3324      	adds	r3, #36	; 0x24
 801635c:	2102      	movs	r1, #2
 801635e:	4618      	mov	r0, r3
 8016360:	f000 fcf0 	bl	8016d44 <RCCEx_PLL3_Config>
 8016364:	4603      	mov	r3, r0
 8016366:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8016368:	e009      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 801636a:	2301      	movs	r3, #1
 801636c:	75fb      	strb	r3, [r7, #23]
      break;
 801636e:	e006      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016370:	bf00      	nop
 8016372:	e004      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016374:	bf00      	nop
 8016376:	e002      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8016378:	bf00      	nop
 801637a:	e000      	b.n	801637e <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 801637c:	bf00      	nop
    }

    if(ret == HAL_OK)
 801637e:	7dfb      	ldrb	r3, [r7, #23]
 8016380:	2b00      	cmp	r3, #0
 8016382:	d10a      	bne.n	801639a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8016384:	4b41      	ldr	r3, [pc, #260]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016388:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8016392:	493e      	ldr	r1, [pc, #248]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016394:	4313      	orrs	r3, r2
 8016396:	658b      	str	r3, [r1, #88]	; 0x58
 8016398:	e001      	b.n	801639e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801639a:	7dfb      	ldrb	r3, [r7, #23]
 801639c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	f003 0308 	and.w	r3, r3, #8
 80163a6:	2b00      	cmp	r3, #0
 80163a8:	d01a      	beq.n	80163e0 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80163b4:	d10a      	bne.n	80163cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	3324      	adds	r3, #36	; 0x24
 80163ba:	2102      	movs	r1, #2
 80163bc:	4618      	mov	r0, r3
 80163be:	f000 fcc1 	bl	8016d44 <RCCEx_PLL3_Config>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d001      	beq.n	80163cc <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80163c8:	2301      	movs	r3, #1
 80163ca:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80163cc:	4b2f      	ldr	r3, [pc, #188]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80163ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80163da:	492c      	ldr	r1, [pc, #176]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80163dc:	4313      	orrs	r3, r2
 80163de:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	f003 0310 	and.w	r3, r3, #16
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d01a      	beq.n	8016422 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80163ec:	687b      	ldr	r3, [r7, #4]
 80163ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80163f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80163f6:	d10a      	bne.n	801640e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	3324      	adds	r3, #36	; 0x24
 80163fc:	2102      	movs	r1, #2
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 fca0 	bl	8016d44 <RCCEx_PLL3_Config>
 8016404:	4603      	mov	r3, r0
 8016406:	2b00      	cmp	r3, #0
 8016408:	d001      	beq.n	801640e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 801640a:	2301      	movs	r3, #1
 801640c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801640e:	4b1f      	ldr	r3, [pc, #124]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016412:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801641c:	491b      	ldr	r1, [pc, #108]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 801641e:	4313      	orrs	r3, r2
 8016420:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801642a:	2b00      	cmp	r3, #0
 801642c:	d032      	beq.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016438:	d00d      	beq.n	8016456 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 801643a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801643e:	d016      	beq.n	801646e <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8016440:	2b00      	cmp	r3, #0
 8016442:	d111      	bne.n	8016468 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8016444:	687b      	ldr	r3, [r7, #4]
 8016446:	3304      	adds	r3, #4
 8016448:	2100      	movs	r1, #0
 801644a:	4618      	mov	r0, r3
 801644c:	f000 fbc8 	bl	8016be0 <RCCEx_PLL2_Config>
 8016450:	4603      	mov	r3, r0
 8016452:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8016454:	e00c      	b.n	8016470 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8016456:	687b      	ldr	r3, [r7, #4]
 8016458:	3324      	adds	r3, #36	; 0x24
 801645a:	2102      	movs	r1, #2
 801645c:	4618      	mov	r0, r3
 801645e:	f000 fc71 	bl	8016d44 <RCCEx_PLL3_Config>
 8016462:	4603      	mov	r3, r0
 8016464:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8016466:	e003      	b.n	8016470 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8016468:	2301      	movs	r3, #1
 801646a:	75fb      	strb	r3, [r7, #23]
      break;
 801646c:	e000      	b.n	8016470 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 801646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016470:	7dfb      	ldrb	r3, [r7, #23]
 8016472:	2b00      	cmp	r3, #0
 8016474:	d10c      	bne.n	8016490 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8016476:	4b05      	ldr	r3, [pc, #20]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801647a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8016484:	4901      	ldr	r1, [pc, #4]	; (801648c <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8016486:	4313      	orrs	r3, r2
 8016488:	658b      	str	r3, [r1, #88]	; 0x58
 801648a:	e003      	b.n	8016494 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 801648c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8016490:	7dfb      	ldrb	r3, [r7, #23]
 8016492:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801649c:	2b00      	cmp	r3, #0
 801649e:	d02f      	beq.n	8016500 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80164aa:	d00c      	beq.n	80164c6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80164ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80164b0:	d015      	beq.n	80164de <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80164b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80164b6:	d10f      	bne.n	80164d8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80164b8:	4b71      	ldr	r3, [pc, #452]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164bc:	4a70      	ldr	r2, [pc, #448]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80164c2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80164c4:	e00c      	b.n	80164e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	3324      	adds	r3, #36	; 0x24
 80164ca:	2101      	movs	r1, #1
 80164cc:	4618      	mov	r0, r3
 80164ce:	f000 fc39 	bl	8016d44 <RCCEx_PLL3_Config>
 80164d2:	4603      	mov	r3, r0
 80164d4:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80164d6:	e003      	b.n	80164e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80164d8:	2301      	movs	r3, #1
 80164da:	75fb      	strb	r3, [r7, #23]
      break;
 80164dc:	e000      	b.n	80164e0 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 80164de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80164e0:	7dfb      	ldrb	r3, [r7, #23]
 80164e2:	2b00      	cmp	r3, #0
 80164e4:	d10a      	bne.n	80164fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80164e6:	4b66      	ldr	r3, [pc, #408]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80164ee:	687b      	ldr	r3, [r7, #4]
 80164f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164f4:	4962      	ldr	r1, [pc, #392]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80164f6:	4313      	orrs	r3, r2
 80164f8:	654b      	str	r3, [r1, #84]	; 0x54
 80164fa:	e001      	b.n	8016500 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80164fc:	7dfb      	ldrb	r3, [r7, #23]
 80164fe:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016508:	2b00      	cmp	r3, #0
 801650a:	d029      	beq.n	8016560 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 801650c:	687b      	ldr	r3, [r7, #4]
 801650e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016510:	2b00      	cmp	r3, #0
 8016512:	d003      	beq.n	801651c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8016514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016518:	d007      	beq.n	801652a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 801651a:	e00f      	b.n	801653c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801651c:	4b58      	ldr	r3, [pc, #352]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801651e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016520:	4a57      	ldr	r2, [pc, #348]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016522:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8016526:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8016528:	e00b      	b.n	8016542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	3304      	adds	r3, #4
 801652e:	2102      	movs	r1, #2
 8016530:	4618      	mov	r0, r3
 8016532:	f000 fb55 	bl	8016be0 <RCCEx_PLL2_Config>
 8016536:	4603      	mov	r3, r0
 8016538:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 801653a:	e002      	b.n	8016542 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 801653c:	2301      	movs	r3, #1
 801653e:	75fb      	strb	r3, [r7, #23]
      break;
 8016540:	bf00      	nop
    }

    if(ret == HAL_OK)
 8016542:	7dfb      	ldrb	r3, [r7, #23]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d109      	bne.n	801655c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8016548:	4b4d      	ldr	r3, [pc, #308]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801654a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801654c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016554:	494a      	ldr	r1, [pc, #296]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016556:	4313      	orrs	r3, r2
 8016558:	64cb      	str	r3, [r1, #76]	; 0x4c
 801655a:	e001      	b.n	8016560 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801655c:	7dfb      	ldrb	r3, [r7, #23]
 801655e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8016560:	687b      	ldr	r3, [r7, #4]
 8016562:	681b      	ldr	r3, [r3, #0]
 8016564:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016568:	2b00      	cmp	r3, #0
 801656a:	d00a      	beq.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	3324      	adds	r3, #36	; 0x24
 8016570:	2102      	movs	r1, #2
 8016572:	4618      	mov	r0, r3
 8016574:	f000 fbe6 	bl	8016d44 <RCCEx_PLL3_Config>
 8016578:	4603      	mov	r3, r0
 801657a:	2b00      	cmp	r3, #0
 801657c:	d001      	beq.n	8016582 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 801657e:	2301      	movs	r3, #1
 8016580:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801658a:	2b00      	cmp	r3, #0
 801658c:	d02f      	beq.n	80165ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 801658e:	687b      	ldr	r3, [r7, #4]
 8016590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016592:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016596:	d00c      	beq.n	80165b2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8016598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801659c:	d802      	bhi.n	80165a4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d011      	beq.n	80165c6 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80165a2:	e00d      	b.n	80165c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80165a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80165a8:	d00f      	beq.n	80165ca <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80165aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80165ae:	d00e      	beq.n	80165ce <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80165b0:	e006      	b.n	80165c0 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80165b2:	4b33      	ldr	r3, [pc, #204]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80165b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80165b6:	4a32      	ldr	r2, [pc, #200]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80165b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80165bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80165be:	e007      	b.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80165c0:	2301      	movs	r3, #1
 80165c2:	75fb      	strb	r3, [r7, #23]
      break;
 80165c4:	e004      	b.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80165c6:	bf00      	nop
 80165c8:	e002      	b.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80165ca:	bf00      	nop
 80165cc:	e000      	b.n	80165d0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80165ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80165d0:	7dfb      	ldrb	r3, [r7, #23]
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d109      	bne.n	80165ea <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80165d6:	4b2a      	ldr	r3, [pc, #168]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80165d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80165da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80165e2:	4927      	ldr	r1, [pc, #156]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80165e4:	4313      	orrs	r3, r2
 80165e6:	654b      	str	r3, [r1, #84]	; 0x54
 80165e8:	e001      	b.n	80165ee <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80165ea:	7dfb      	ldrb	r3, [r7, #23]
 80165ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	681b      	ldr	r3, [r3, #0]
 80165f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d008      	beq.n	801660c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80165fa:	4b21      	ldr	r3, [pc, #132]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 80165fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80165fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016606:	491e      	ldr	r1, [pc, #120]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016608:	4313      	orrs	r3, r2
 801660a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801660c:	687b      	ldr	r3, [r7, #4]
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8016614:	2b00      	cmp	r3, #0
 8016616:	d008      	beq.n	801662a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8016618:	4b19      	ldr	r3, [pc, #100]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801661a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801661c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016624:	4916      	ldr	r1, [pc, #88]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016626:	4313      	orrs	r3, r2
 8016628:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016632:	2b00      	cmp	r3, #0
 8016634:	d00d      	beq.n	8016652 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8016636:	4b12      	ldr	r3, [pc, #72]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016638:	691b      	ldr	r3, [r3, #16]
 801663a:	4a11      	ldr	r2, [pc, #68]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801663c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8016640:	6113      	str	r3, [r2, #16]
 8016642:	4b0f      	ldr	r3, [pc, #60]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016644:	691a      	ldr	r2, [r3, #16]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801664c:	490c      	ldr	r1, [pc, #48]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801664e:	4313      	orrs	r3, r2
 8016650:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	2b00      	cmp	r3, #0
 8016658:	da08      	bge.n	801666c <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801665a:	4b09      	ldr	r3, [pc, #36]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 801665c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801665e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016666:	4906      	ldr	r1, [pc, #24]	; (8016680 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8016668:	4313      	orrs	r3, r2
 801666a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 801666c:	7dbb      	ldrb	r3, [r7, #22]
 801666e:	2b00      	cmp	r3, #0
 8016670:	d101      	bne.n	8016676 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8016672:	2300      	movs	r3, #0
 8016674:	e000      	b.n	8016678 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8016676:	2301      	movs	r3, #1
}
 8016678:	4618      	mov	r0, r3
 801667a:	3718      	adds	r7, #24
 801667c:	46bd      	mov	sp, r7
 801667e:	bd80      	pop	{r7, pc}
 8016680:	58024400 	.word	0x58024400

08016684 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8016684:	b580      	push	{r7, lr}
 8016686:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8016688:	f7ff f8c2 	bl	8015810 <HAL_RCC_GetHCLKFreq>
 801668c:	4601      	mov	r1, r0
 801668e:	4b06      	ldr	r3, [pc, #24]	; (80166a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8016690:	6a1b      	ldr	r3, [r3, #32]
 8016692:	091b      	lsrs	r3, r3, #4
 8016694:	f003 0307 	and.w	r3, r3, #7
 8016698:	4a04      	ldr	r2, [pc, #16]	; (80166ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801669a:	5cd3      	ldrb	r3, [r2, r3]
 801669c:	f003 031f 	and.w	r3, r3, #31
 80166a0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80166a4:	4618      	mov	r0, r3
 80166a6:	bd80      	pop	{r7, pc}
 80166a8:	58024400 	.word	0x58024400
 80166ac:	0801f638 	.word	0x0801f638

080166b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80166b0:	b480      	push	{r7}
 80166b2:	b089      	sub	sp, #36	; 0x24
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80166b8:	4b9d      	ldr	r3, [pc, #628]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166bc:	f003 0303 	and.w	r3, r3, #3
 80166c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80166c2:	4b9b      	ldr	r3, [pc, #620]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80166c6:	0b1b      	lsrs	r3, r3, #12
 80166c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80166cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80166ce:	4b98      	ldr	r3, [pc, #608]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166d2:	091b      	lsrs	r3, r3, #4
 80166d4:	f003 0301 	and.w	r3, r3, #1
 80166d8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80166da:	4b95      	ldr	r3, [pc, #596]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80166dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80166de:	08db      	lsrs	r3, r3, #3
 80166e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80166e4:	693a      	ldr	r2, [r7, #16]
 80166e6:	fb02 f303 	mul.w	r3, r2, r3
 80166ea:	ee07 3a90 	vmov	s15, r3
 80166ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80166f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80166f6:	697b      	ldr	r3, [r7, #20]
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 810a 	beq.w	8016912 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 80166fe:	69bb      	ldr	r3, [r7, #24]
 8016700:	2b01      	cmp	r3, #1
 8016702:	d05a      	beq.n	80167ba <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8016704:	2b01      	cmp	r3, #1
 8016706:	d302      	bcc.n	801670e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8016708:	2b02      	cmp	r3, #2
 801670a:	d078      	beq.n	80167fe <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 801670c:	e099      	b.n	8016842 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801670e:	4b88      	ldr	r3, [pc, #544]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	f003 0320 	and.w	r3, r3, #32
 8016716:	2b00      	cmp	r3, #0
 8016718:	d02d      	beq.n	8016776 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 801671a:	4b85      	ldr	r3, [pc, #532]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	08db      	lsrs	r3, r3, #3
 8016720:	f003 0303 	and.w	r3, r3, #3
 8016724:	4a83      	ldr	r2, [pc, #524]	; (8016934 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8016726:	fa22 f303 	lsr.w	r3, r2, r3
 801672a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 801672c:	68bb      	ldr	r3, [r7, #8]
 801672e:	ee07 3a90 	vmov	s15, r3
 8016732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016736:	697b      	ldr	r3, [r7, #20]
 8016738:	ee07 3a90 	vmov	s15, r3
 801673c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016744:	4b7a      	ldr	r3, [pc, #488]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801674c:	ee07 3a90 	vmov	s15, r3
 8016750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016754:	ed97 6a03 	vldr	s12, [r7, #12]
 8016758:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016938 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801675c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016760:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016764:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016768:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801676c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016770:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016774:	e087      	b.n	8016886 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016776:	697b      	ldr	r3, [r7, #20]
 8016778:	ee07 3a90 	vmov	s15, r3
 801677c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016780:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801693c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8016784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016788:	4b69      	ldr	r3, [pc, #420]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 801678a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801678c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016790:	ee07 3a90 	vmov	s15, r3
 8016794:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016798:	ed97 6a03 	vldr	s12, [r7, #12]
 801679c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016938 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80167a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80167a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80167a8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80167ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80167b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167b4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80167b8:	e065      	b.n	8016886 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80167ba:	697b      	ldr	r3, [r7, #20]
 80167bc:	ee07 3a90 	vmov	s15, r3
 80167c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80167c4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80167c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80167cc:	4b58      	ldr	r3, [pc, #352]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80167ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80167d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80167d4:	ee07 3a90 	vmov	s15, r3
 80167d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80167dc:	ed97 6a03 	vldr	s12, [r7, #12]
 80167e0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016938 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80167e4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80167e8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80167ec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80167f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80167f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80167f8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80167fc:	e043      	b.n	8016886 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80167fe:	697b      	ldr	r3, [r7, #20]
 8016800:	ee07 3a90 	vmov	s15, r3
 8016804:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016808:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016944 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 801680c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016810:	4b47      	ldr	r3, [pc, #284]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016818:	ee07 3a90 	vmov	s15, r3
 801681c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016820:	ed97 6a03 	vldr	s12, [r7, #12]
 8016824:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016938 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8016828:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801682c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016834:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016838:	ee67 7a27 	vmul.f32	s15, s14, s15
 801683c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016840:	e021      	b.n	8016886 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8016842:	697b      	ldr	r3, [r7, #20]
 8016844:	ee07 3a90 	vmov	s15, r3
 8016848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801684c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016940 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8016850:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016854:	4b36      	ldr	r3, [pc, #216]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801685c:	ee07 3a90 	vmov	s15, r3
 8016860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016864:	ed97 6a03 	vldr	s12, [r7, #12]
 8016868:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016938 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 801686c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016878:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801687c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016880:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016884:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8016886:	4b2a      	ldr	r3, [pc, #168]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8016888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801688a:	0a5b      	lsrs	r3, r3, #9
 801688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016890:	ee07 3a90 	vmov	s15, r3
 8016894:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016898:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801689c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80168a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80168a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168ac:	ee17 2a90 	vmov	r2, s15
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80168b4:	4b1e      	ldr	r3, [pc, #120]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80168b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168b8:	0c1b      	lsrs	r3, r3, #16
 80168ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168be:	ee07 3a90 	vmov	s15, r3
 80168c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80168ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80168d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80168d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168da:	ee17 2a90 	vmov	r2, s15
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80168e2:	4b13      	ldr	r3, [pc, #76]	; (8016930 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80168e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80168e6:	0e1b      	lsrs	r3, r3, #24
 80168e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80168ec:	ee07 3a90 	vmov	s15, r3
 80168f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80168f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80168f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80168fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8016900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016908:	ee17 2a90 	vmov	r2, s15
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8016910:	e008      	b.n	8016924 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	2200      	movs	r2, #0
 8016916:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2200      	movs	r2, #0
 8016922:	609a      	str	r2, [r3, #8]
}
 8016924:	bf00      	nop
 8016926:	3724      	adds	r7, #36	; 0x24
 8016928:	46bd      	mov	sp, r7
 801692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692e:	4770      	bx	lr
 8016930:	58024400 	.word	0x58024400
 8016934:	03d09000 	.word	0x03d09000
 8016938:	46000000 	.word	0x46000000
 801693c:	4c742400 	.word	0x4c742400
 8016940:	4a742400 	.word	0x4a742400
 8016944:	4af42400 	.word	0x4af42400

08016948 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8016948:	b480      	push	{r7}
 801694a:	b089      	sub	sp, #36	; 0x24
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8016950:	4b9d      	ldr	r3, [pc, #628]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016954:	f003 0303 	and.w	r3, r3, #3
 8016958:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 801695a:	4b9b      	ldr	r3, [pc, #620]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 801695c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801695e:	0d1b      	lsrs	r3, r3, #20
 8016960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016964:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8016966:	4b98      	ldr	r3, [pc, #608]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801696a:	0a1b      	lsrs	r3, r3, #8
 801696c:	f003 0301 	and.w	r3, r3, #1
 8016970:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8016972:	4b95      	ldr	r3, [pc, #596]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016976:	08db      	lsrs	r3, r3, #3
 8016978:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801697c:	693a      	ldr	r2, [r7, #16]
 801697e:	fb02 f303 	mul.w	r3, r2, r3
 8016982:	ee07 3a90 	vmov	s15, r3
 8016986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801698a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801698e:	697b      	ldr	r3, [r7, #20]
 8016990:	2b00      	cmp	r3, #0
 8016992:	f000 810a 	beq.w	8016baa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	2b01      	cmp	r3, #1
 801699a:	d05a      	beq.n	8016a52 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 801699c:	2b01      	cmp	r3, #1
 801699e:	d302      	bcc.n	80169a6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80169a0:	2b02      	cmp	r3, #2
 80169a2:	d078      	beq.n	8016a96 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80169a4:	e099      	b.n	8016ada <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80169a6:	4b88      	ldr	r3, [pc, #544]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80169a8:	681b      	ldr	r3, [r3, #0]
 80169aa:	f003 0320 	and.w	r3, r3, #32
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d02d      	beq.n	8016a0e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80169b2:	4b85      	ldr	r3, [pc, #532]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	08db      	lsrs	r3, r3, #3
 80169b8:	f003 0303 	and.w	r3, r3, #3
 80169bc:	4a83      	ldr	r2, [pc, #524]	; (8016bcc <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80169be:	fa22 f303 	lsr.w	r3, r2, r3
 80169c2:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80169c4:	68bb      	ldr	r3, [r7, #8]
 80169c6:	ee07 3a90 	vmov	s15, r3
 80169ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80169ce:	697b      	ldr	r3, [r7, #20]
 80169d0:	ee07 3a90 	vmov	s15, r3
 80169d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80169d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80169dc:	4b7a      	ldr	r3, [pc, #488]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80169de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80169e4:	ee07 3a90 	vmov	s15, r3
 80169e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80169ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80169f0:	eddf 5a77 	vldr	s11, [pc, #476]	; 8016bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80169f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80169f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80169fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a08:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8016a0c:	e087      	b.n	8016b1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	ee07 3a90 	vmov	s15, r3
 8016a14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a18:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8016bd4 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8016a1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016a20:	4b69      	ldr	r3, [pc, #420]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a28:	ee07 3a90 	vmov	s15, r3
 8016a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016a30:	ed97 6a03 	vldr	s12, [r7, #12]
 8016a34:	eddf 5a66 	vldr	s11, [pc, #408]	; 8016bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016a38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016a3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016a40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016a50:	e065      	b.n	8016b1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016a52:	697b      	ldr	r3, [r7, #20]
 8016a54:	ee07 3a90 	vmov	s15, r3
 8016a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016a5c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8016bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016a60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016a64:	4b58      	ldr	r3, [pc, #352]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016a6c:	ee07 3a90 	vmov	s15, r3
 8016a70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016a74:	ed97 6a03 	vldr	s12, [r7, #12]
 8016a78:	eddf 5a55 	vldr	s11, [pc, #340]	; 8016bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016a7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016a80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016a84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016a88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016a8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016a90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016a94:	e043      	b.n	8016b1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	ee07 3a90 	vmov	s15, r3
 8016a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016aa0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8016bdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8016aa4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016aa8:	4b47      	ldr	r3, [pc, #284]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016ab0:	ee07 3a90 	vmov	s15, r3
 8016ab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016ab8:	ed97 6a03 	vldr	s12, [r7, #12]
 8016abc:	eddf 5a44 	vldr	s11, [pc, #272]	; 8016bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016ac0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016ac4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016ac8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016acc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016ad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016ad4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016ad8:	e021      	b.n	8016b1e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	ee07 3a90 	vmov	s15, r3
 8016ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016ae4:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8016bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8016ae8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016aec:	4b36      	ldr	r3, [pc, #216]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016af4:	ee07 3a90 	vmov	s15, r3
 8016af8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8016afc:	ed97 6a03 	vldr	s12, [r7, #12]
 8016b00:	eddf 5a33 	vldr	s11, [pc, #204]	; 8016bd0 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8016b04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8016b08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8016b0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016b10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8016b14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8016b18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8016b1c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8016b1e:	4b2a      	ldr	r3, [pc, #168]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b22:	0a5b      	lsrs	r3, r3, #9
 8016b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b28:	ee07 3a90 	vmov	s15, r3
 8016b2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b34:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016b38:	edd7 6a07 	vldr	s13, [r7, #28]
 8016b3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b44:	ee17 2a90 	vmov	r2, s15
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8016b4c:	4b1e      	ldr	r3, [pc, #120]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b50:	0c1b      	lsrs	r3, r3, #16
 8016b52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b56:	ee07 3a90 	vmov	s15, r3
 8016b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016b66:	edd7 6a07 	vldr	s13, [r7, #28]
 8016b6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016b6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016b72:	ee17 2a90 	vmov	r2, s15
 8016b76:	687b      	ldr	r3, [r7, #4]
 8016b78:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8016b7a:	4b13      	ldr	r3, [pc, #76]	; (8016bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8016b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016b7e:	0e1b      	lsrs	r3, r3, #24
 8016b80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016b84:	ee07 3a90 	vmov	s15, r3
 8016b88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016b8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8016b90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8016b94:	edd7 6a07 	vldr	s13, [r7, #28]
 8016b98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8016b9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8016ba0:	ee17 2a90 	vmov	r2, s15
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8016ba8:	e008      	b.n	8016bbc <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	2200      	movs	r2, #0
 8016bae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	2200      	movs	r2, #0
 8016bb4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8016bb6:	687b      	ldr	r3, [r7, #4]
 8016bb8:	2200      	movs	r2, #0
 8016bba:	609a      	str	r2, [r3, #8]
}
 8016bbc:	bf00      	nop
 8016bbe:	3724      	adds	r7, #36	; 0x24
 8016bc0:	46bd      	mov	sp, r7
 8016bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc6:	4770      	bx	lr
 8016bc8:	58024400 	.word	0x58024400
 8016bcc:	03d09000 	.word	0x03d09000
 8016bd0:	46000000 	.word	0x46000000
 8016bd4:	4c742400 	.word	0x4c742400
 8016bd8:	4a742400 	.word	0x4a742400
 8016bdc:	4af42400 	.word	0x4af42400

08016be0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8016be0:	b580      	push	{r7, lr}
 8016be2:	b084      	sub	sp, #16
 8016be4:	af00      	add	r7, sp, #0
 8016be6:	6078      	str	r0, [r7, #4]
 8016be8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016bea:	2300      	movs	r3, #0
 8016bec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016bee:	4b53      	ldr	r3, [pc, #332]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bf2:	f003 0303 	and.w	r3, r3, #3
 8016bf6:	2b03      	cmp	r3, #3
 8016bf8:	d101      	bne.n	8016bfe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8016bfa:	2301      	movs	r3, #1
 8016bfc:	e099      	b.n	8016d32 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8016bfe:	4b4f      	ldr	r3, [pc, #316]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c00:	681b      	ldr	r3, [r3, #0]
 8016c02:	4a4e      	ldr	r2, [pc, #312]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c04:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8016c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016c0a:	f7fb ff53 	bl	8012ab4 <HAL_GetTick>
 8016c0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016c10:	e008      	b.n	8016c24 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016c12:	f7fb ff4f 	bl	8012ab4 <HAL_GetTick>
 8016c16:	4602      	mov	r2, r0
 8016c18:	68bb      	ldr	r3, [r7, #8]
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	2b02      	cmp	r3, #2
 8016c1e:	d901      	bls.n	8016c24 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016c20:	2303      	movs	r3, #3
 8016c22:	e086      	b.n	8016d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8016c24:	4b45      	ldr	r3, [pc, #276]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d1f0      	bne.n	8016c12 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8016c30:	4b42      	ldr	r3, [pc, #264]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016c34:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681b      	ldr	r3, [r3, #0]
 8016c3c:	031b      	lsls	r3, r3, #12
 8016c3e:	493f      	ldr	r1, [pc, #252]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c40:	4313      	orrs	r3, r2
 8016c42:	628b      	str	r3, [r1, #40]	; 0x28
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	685b      	ldr	r3, [r3, #4]
 8016c48:	3b01      	subs	r3, #1
 8016c4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016c4e:	687b      	ldr	r3, [r7, #4]
 8016c50:	689b      	ldr	r3, [r3, #8]
 8016c52:	3b01      	subs	r3, #1
 8016c54:	025b      	lsls	r3, r3, #9
 8016c56:	b29b      	uxth	r3, r3
 8016c58:	431a      	orrs	r2, r3
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	68db      	ldr	r3, [r3, #12]
 8016c5e:	3b01      	subs	r3, #1
 8016c60:	041b      	lsls	r3, r3, #16
 8016c62:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016c66:	431a      	orrs	r2, r3
 8016c68:	687b      	ldr	r3, [r7, #4]
 8016c6a:	691b      	ldr	r3, [r3, #16]
 8016c6c:	3b01      	subs	r3, #1
 8016c6e:	061b      	lsls	r3, r3, #24
 8016c70:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016c74:	4931      	ldr	r1, [pc, #196]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c76:	4313      	orrs	r3, r2
 8016c78:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8016c7a:	4b30      	ldr	r3, [pc, #192]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8016c82:	687b      	ldr	r3, [r7, #4]
 8016c84:	695b      	ldr	r3, [r3, #20]
 8016c86:	492d      	ldr	r1, [pc, #180]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c88:	4313      	orrs	r3, r2
 8016c8a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8016c8c:	4b2b      	ldr	r3, [pc, #172]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c90:	f023 0220 	bic.w	r2, r3, #32
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	699b      	ldr	r3, [r3, #24]
 8016c98:	4928      	ldr	r1, [pc, #160]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016c9a:	4313      	orrs	r3, r2
 8016c9c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8016c9e:	4b27      	ldr	r3, [pc, #156]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ca2:	4a26      	ldr	r2, [pc, #152]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016ca4:	f023 0310 	bic.w	r3, r3, #16
 8016ca8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8016caa:	4b24      	ldr	r3, [pc, #144]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016cae:	4b24      	ldr	r3, [pc, #144]	; (8016d40 <RCCEx_PLL2_Config+0x160>)
 8016cb0:	4013      	ands	r3, r2
 8016cb2:	687a      	ldr	r2, [r7, #4]
 8016cb4:	69d2      	ldr	r2, [r2, #28]
 8016cb6:	00d2      	lsls	r2, r2, #3
 8016cb8:	4920      	ldr	r1, [pc, #128]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cba:	4313      	orrs	r3, r2
 8016cbc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8016cbe:	4b1f      	ldr	r3, [pc, #124]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cc2:	4a1e      	ldr	r2, [pc, #120]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cc4:	f043 0310 	orr.w	r3, r3, #16
 8016cc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016cca:	683b      	ldr	r3, [r7, #0]
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d106      	bne.n	8016cde <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8016cd0:	4b1a      	ldr	r3, [pc, #104]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cd4:	4a19      	ldr	r2, [pc, #100]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8016cda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016cdc:	e00f      	b.n	8016cfe <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016cde:	683b      	ldr	r3, [r7, #0]
 8016ce0:	2b01      	cmp	r3, #1
 8016ce2:	d106      	bne.n	8016cf2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8016ce4:	4b15      	ldr	r3, [pc, #84]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ce8:	4a14      	ldr	r2, [pc, #80]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016cee:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016cf0:	e005      	b.n	8016cfe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8016cf2:	4b12      	ldr	r3, [pc, #72]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016cf6:	4a11      	ldr	r2, [pc, #68]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016cf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8016cfc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8016cfe:	4b0f      	ldr	r3, [pc, #60]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	4a0e      	ldr	r2, [pc, #56]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016d04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016d08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016d0a:	f7fb fed3 	bl	8012ab4 <HAL_GetTick>
 8016d0e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016d10:	e008      	b.n	8016d24 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8016d12:	f7fb fecf 	bl	8012ab4 <HAL_GetTick>
 8016d16:	4602      	mov	r2, r0
 8016d18:	68bb      	ldr	r3, [r7, #8]
 8016d1a:	1ad3      	subs	r3, r2, r3
 8016d1c:	2b02      	cmp	r3, #2
 8016d1e:	d901      	bls.n	8016d24 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016d20:	2303      	movs	r3, #3
 8016d22:	e006      	b.n	8016d32 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8016d24:	4b05      	ldr	r3, [pc, #20]	; (8016d3c <RCCEx_PLL2_Config+0x15c>)
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d0f0      	beq.n	8016d12 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8016d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d32:	4618      	mov	r0, r3
 8016d34:	3710      	adds	r7, #16
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bd80      	pop	{r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	58024400 	.word	0x58024400
 8016d40:	ffff0007 	.word	0xffff0007

08016d44 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8016d44:	b580      	push	{r7, lr}
 8016d46:	b084      	sub	sp, #16
 8016d48:	af00      	add	r7, sp, #0
 8016d4a:	6078      	str	r0, [r7, #4]
 8016d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8016d52:	4b53      	ldr	r3, [pc, #332]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d56:	f003 0303 	and.w	r3, r3, #3
 8016d5a:	2b03      	cmp	r3, #3
 8016d5c:	d101      	bne.n	8016d62 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	e099      	b.n	8016e96 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8016d62:	4b4f      	ldr	r3, [pc, #316]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016d64:	681b      	ldr	r3, [r3, #0]
 8016d66:	4a4e      	ldr	r2, [pc, #312]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8016d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016d6e:	f7fb fea1 	bl	8012ab4 <HAL_GetTick>
 8016d72:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016d74:	e008      	b.n	8016d88 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016d76:	f7fb fe9d 	bl	8012ab4 <HAL_GetTick>
 8016d7a:	4602      	mov	r2, r0
 8016d7c:	68bb      	ldr	r3, [r7, #8]
 8016d7e:	1ad3      	subs	r3, r2, r3
 8016d80:	2b02      	cmp	r3, #2
 8016d82:	d901      	bls.n	8016d88 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8016d84:	2303      	movs	r3, #3
 8016d86:	e086      	b.n	8016e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8016d88:	4b45      	ldr	r3, [pc, #276]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	d1f0      	bne.n	8016d76 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8016d94:	4b42      	ldr	r3, [pc, #264]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d98:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	051b      	lsls	r3, r3, #20
 8016da2:	493f      	ldr	r1, [pc, #252]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016da4:	4313      	orrs	r3, r2
 8016da6:	628b      	str	r3, [r1, #40]	; 0x28
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	685b      	ldr	r3, [r3, #4]
 8016dac:	3b01      	subs	r3, #1
 8016dae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	689b      	ldr	r3, [r3, #8]
 8016db6:	3b01      	subs	r3, #1
 8016db8:	025b      	lsls	r3, r3, #9
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	431a      	orrs	r2, r3
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	3b01      	subs	r3, #1
 8016dc4:	041b      	lsls	r3, r3, #16
 8016dc6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8016dca:	431a      	orrs	r2, r3
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	691b      	ldr	r3, [r3, #16]
 8016dd0:	3b01      	subs	r3, #1
 8016dd2:	061b      	lsls	r3, r3, #24
 8016dd4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8016dd8:	4931      	ldr	r1, [pc, #196]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016dda:	4313      	orrs	r3, r2
 8016ddc:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8016dde:	4b30      	ldr	r3, [pc, #192]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016de2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	695b      	ldr	r3, [r3, #20]
 8016dea:	492d      	ldr	r1, [pc, #180]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016dec:	4313      	orrs	r3, r2
 8016dee:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8016df0:	4b2b      	ldr	r3, [pc, #172]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016df4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	699b      	ldr	r3, [r3, #24]
 8016dfc:	4928      	ldr	r1, [pc, #160]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016dfe:	4313      	orrs	r3, r2
 8016e00:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8016e02:	4b27      	ldr	r3, [pc, #156]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e06:	4a26      	ldr	r2, [pc, #152]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8016e0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8016e0e:	4b24      	ldr	r3, [pc, #144]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016e12:	4b24      	ldr	r3, [pc, #144]	; (8016ea4 <RCCEx_PLL3_Config+0x160>)
 8016e14:	4013      	ands	r3, r2
 8016e16:	687a      	ldr	r2, [r7, #4]
 8016e18:	69d2      	ldr	r2, [r2, #28]
 8016e1a:	00d2      	lsls	r2, r2, #3
 8016e1c:	4920      	ldr	r1, [pc, #128]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e1e:	4313      	orrs	r3, r2
 8016e20:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8016e22:	4b1f      	ldr	r3, [pc, #124]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e26:	4a1e      	ldr	r2, [pc, #120]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016e2c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d106      	bne.n	8016e42 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8016e34:	4b1a      	ldr	r3, [pc, #104]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e38:	4a19      	ldr	r2, [pc, #100]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016e3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016e40:	e00f      	b.n	8016e62 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8016e42:	683b      	ldr	r3, [r7, #0]
 8016e44:	2b01      	cmp	r3, #1
 8016e46:	d106      	bne.n	8016e56 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8016e48:	4b15      	ldr	r3, [pc, #84]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e4c:	4a14      	ldr	r2, [pc, #80]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e4e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016e52:	62d3      	str	r3, [r2, #44]	; 0x2c
 8016e54:	e005      	b.n	8016e62 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8016e56:	4b12      	ldr	r3, [pc, #72]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016e5a:	4a11      	ldr	r2, [pc, #68]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016e60:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8016e62:	4b0f      	ldr	r3, [pc, #60]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e64:	681b      	ldr	r3, [r3, #0]
 8016e66:	4a0e      	ldr	r2, [pc, #56]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8016e6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8016e6e:	f7fb fe21 	bl	8012ab4 <HAL_GetTick>
 8016e72:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016e74:	e008      	b.n	8016e88 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8016e76:	f7fb fe1d 	bl	8012ab4 <HAL_GetTick>
 8016e7a:	4602      	mov	r2, r0
 8016e7c:	68bb      	ldr	r3, [r7, #8]
 8016e7e:	1ad3      	subs	r3, r2, r3
 8016e80:	2b02      	cmp	r3, #2
 8016e82:	d901      	bls.n	8016e88 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8016e84:	2303      	movs	r3, #3
 8016e86:	e006      	b.n	8016e96 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8016e88:	4b05      	ldr	r3, [pc, #20]	; (8016ea0 <RCCEx_PLL3_Config+0x15c>)
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d0f0      	beq.n	8016e76 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8016e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e96:	4618      	mov	r0, r3
 8016e98:	3710      	adds	r7, #16
 8016e9a:	46bd      	mov	sp, r7
 8016e9c:	bd80      	pop	{r7, pc}
 8016e9e:	bf00      	nop
 8016ea0:	58024400 	.word	0x58024400
 8016ea4:	ffff0007 	.word	0xffff0007

08016ea8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d101      	bne.n	8016eba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8016eb6:	2301      	movs	r3, #1
 8016eb8:	e01d      	b.n	8016ef6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016eba:	687b      	ldr	r3, [r7, #4]
 8016ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	d106      	bne.n	8016ed4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016ec6:	687b      	ldr	r3, [r7, #4]
 8016ec8:	2200      	movs	r2, #0
 8016eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8016ece:	6878      	ldr	r0, [r7, #4]
 8016ed0:	f7eb f8b0 	bl	8002034 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	2202      	movs	r2, #2
 8016ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	681a      	ldr	r2, [r3, #0]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	3304      	adds	r3, #4
 8016ee4:	4619      	mov	r1, r3
 8016ee6:	4610      	mov	r0, r2
 8016ee8:	f000 fb18 	bl	801751c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	2201      	movs	r2, #1
 8016ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016ef4:	2300      	movs	r3, #0
}
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	3708      	adds	r7, #8
 8016efa:	46bd      	mov	sp, r7
 8016efc:	bd80      	pop	{r7, pc}
	...

08016f00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8016f00:	b480      	push	{r7}
 8016f02:	b085      	sub	sp, #20
 8016f04:	af00      	add	r7, sp, #0
 8016f06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	68da      	ldr	r2, [r3, #12]
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	681b      	ldr	r3, [r3, #0]
 8016f12:	f042 0201 	orr.w	r2, r2, #1
 8016f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8016f18:	687b      	ldr	r3, [r7, #4]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	689a      	ldr	r2, [r3, #8]
 8016f1e:	4b0c      	ldr	r3, [pc, #48]	; (8016f50 <HAL_TIM_Base_Start_IT+0x50>)
 8016f20:	4013      	ands	r3, r2
 8016f22:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8016f24:	68fb      	ldr	r3, [r7, #12]
 8016f26:	2b06      	cmp	r3, #6
 8016f28:	d00b      	beq.n	8016f42 <HAL_TIM_Base_Start_IT+0x42>
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f30:	d007      	beq.n	8016f42 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	681a      	ldr	r2, [r3, #0]
 8016f38:	687b      	ldr	r3, [r7, #4]
 8016f3a:	681b      	ldr	r3, [r3, #0]
 8016f3c:	f042 0201 	orr.w	r2, r2, #1
 8016f40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8016f42:	2300      	movs	r3, #0
}
 8016f44:	4618      	mov	r0, r3
 8016f46:	3714      	adds	r7, #20
 8016f48:	46bd      	mov	sp, r7
 8016f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f4e:	4770      	bx	lr
 8016f50:	00010007 	.word	0x00010007

08016f54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8016f5c:	687b      	ldr	r3, [r7, #4]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d101      	bne.n	8016f66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8016f62:	2301      	movs	r3, #1
 8016f64:	e01d      	b.n	8016fa2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8016f6c:	b2db      	uxtb	r3, r3
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d106      	bne.n	8016f80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2200      	movs	r2, #0
 8016f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8016f7a:	6878      	ldr	r0, [r7, #4]
 8016f7c:	f7ea fff4 	bl	8001f68 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8016f80:	687b      	ldr	r3, [r7, #4]
 8016f82:	2202      	movs	r2, #2
 8016f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	681a      	ldr	r2, [r3, #0]
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	3304      	adds	r3, #4
 8016f90:	4619      	mov	r1, r3
 8016f92:	4610      	mov	r0, r2
 8016f94:	f000 fac2 	bl	801751c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	2201      	movs	r2, #1
 8016f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8016fa0:	2300      	movs	r3, #0
}
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	3708      	adds	r7, #8
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}
	...

08016fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8016fac:	b580      	push	{r7, lr}
 8016fae:	b084      	sub	sp, #16
 8016fb0:	af00      	add	r7, sp, #0
 8016fb2:	6078      	str	r0, [r7, #4]
 8016fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	681b      	ldr	r3, [r3, #0]
 8016fba:	2201      	movs	r2, #1
 8016fbc:	6839      	ldr	r1, [r7, #0]
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f000 fe14 	bl	8017bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	4a1e      	ldr	r2, [pc, #120]	; (8017044 <HAL_TIM_PWM_Start+0x98>)
 8016fca:	4293      	cmp	r3, r2
 8016fcc:	d013      	beq.n	8016ff6 <HAL_TIM_PWM_Start+0x4a>
 8016fce:	687b      	ldr	r3, [r7, #4]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	4a1d      	ldr	r2, [pc, #116]	; (8017048 <HAL_TIM_PWM_Start+0x9c>)
 8016fd4:	4293      	cmp	r3, r2
 8016fd6:	d00e      	beq.n	8016ff6 <HAL_TIM_PWM_Start+0x4a>
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	4a1b      	ldr	r2, [pc, #108]	; (801704c <HAL_TIM_PWM_Start+0xa0>)
 8016fde:	4293      	cmp	r3, r2
 8016fe0:	d009      	beq.n	8016ff6 <HAL_TIM_PWM_Start+0x4a>
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	681b      	ldr	r3, [r3, #0]
 8016fe6:	4a1a      	ldr	r2, [pc, #104]	; (8017050 <HAL_TIM_PWM_Start+0xa4>)
 8016fe8:	4293      	cmp	r3, r2
 8016fea:	d004      	beq.n	8016ff6 <HAL_TIM_PWM_Start+0x4a>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	4a18      	ldr	r2, [pc, #96]	; (8017054 <HAL_TIM_PWM_Start+0xa8>)
 8016ff2:	4293      	cmp	r3, r2
 8016ff4:	d101      	bne.n	8016ffa <HAL_TIM_PWM_Start+0x4e>
 8016ff6:	2301      	movs	r3, #1
 8016ff8:	e000      	b.n	8016ffc <HAL_TIM_PWM_Start+0x50>
 8016ffa:	2300      	movs	r3, #0
 8016ffc:	2b00      	cmp	r3, #0
 8016ffe:	d007      	beq.n	8017010 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	681b      	ldr	r3, [r3, #0]
 8017004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801700e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	689a      	ldr	r2, [r3, #8]
 8017016:	4b10      	ldr	r3, [pc, #64]	; (8017058 <HAL_TIM_PWM_Start+0xac>)
 8017018:	4013      	ands	r3, r2
 801701a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	2b06      	cmp	r3, #6
 8017020:	d00b      	beq.n	801703a <HAL_TIM_PWM_Start+0x8e>
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017028:	d007      	beq.n	801703a <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 801702a:	687b      	ldr	r3, [r7, #4]
 801702c:	681b      	ldr	r3, [r3, #0]
 801702e:	681a      	ldr	r2, [r3, #0]
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	f042 0201 	orr.w	r2, r2, #1
 8017038:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801703a:	2300      	movs	r3, #0
}
 801703c:	4618      	mov	r0, r3
 801703e:	3710      	adds	r7, #16
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}
 8017044:	40010000 	.word	0x40010000
 8017048:	40010400 	.word	0x40010400
 801704c:	40014000 	.word	0x40014000
 8017050:	40014400 	.word	0x40014400
 8017054:	40014800 	.word	0x40014800
 8017058:	00010007 	.word	0x00010007

0801705c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801705c:	b580      	push	{r7, lr}
 801705e:	b082      	sub	sp, #8
 8017060:	af00      	add	r7, sp, #0
 8017062:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	691b      	ldr	r3, [r3, #16]
 801706a:	f003 0302 	and.w	r3, r3, #2
 801706e:	2b02      	cmp	r3, #2
 8017070:	d122      	bne.n	80170b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8017072:	687b      	ldr	r3, [r7, #4]
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	68db      	ldr	r3, [r3, #12]
 8017078:	f003 0302 	and.w	r3, r3, #2
 801707c:	2b02      	cmp	r3, #2
 801707e:	d11b      	bne.n	80170b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	f06f 0202 	mvn.w	r2, #2
 8017088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	2201      	movs	r2, #1
 801708e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	699b      	ldr	r3, [r3, #24]
 8017096:	f003 0303 	and.w	r3, r3, #3
 801709a:	2b00      	cmp	r3, #0
 801709c:	d003      	beq.n	80170a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801709e:	6878      	ldr	r0, [r7, #4]
 80170a0:	f000 fa1e 	bl	80174e0 <HAL_TIM_IC_CaptureCallback>
 80170a4:	e005      	b.n	80170b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80170a6:	6878      	ldr	r0, [r7, #4]
 80170a8:	f000 fa10 	bl	80174cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80170ac:	6878      	ldr	r0, [r7, #4]
 80170ae:	f000 fa21 	bl	80174f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80170b2:	687b      	ldr	r3, [r7, #4]
 80170b4:	2200      	movs	r2, #0
 80170b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	681b      	ldr	r3, [r3, #0]
 80170bc:	691b      	ldr	r3, [r3, #16]
 80170be:	f003 0304 	and.w	r3, r3, #4
 80170c2:	2b04      	cmp	r3, #4
 80170c4:	d122      	bne.n	801710c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	68db      	ldr	r3, [r3, #12]
 80170cc:	f003 0304 	and.w	r3, r3, #4
 80170d0:	2b04      	cmp	r3, #4
 80170d2:	d11b      	bne.n	801710c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f06f 0204 	mvn.w	r2, #4
 80170dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	2202      	movs	r2, #2
 80170e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80170e4:	687b      	ldr	r3, [r7, #4]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	699b      	ldr	r3, [r3, #24]
 80170ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d003      	beq.n	80170fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80170f2:	6878      	ldr	r0, [r7, #4]
 80170f4:	f000 f9f4 	bl	80174e0 <HAL_TIM_IC_CaptureCallback>
 80170f8:	e005      	b.n	8017106 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80170fa:	6878      	ldr	r0, [r7, #4]
 80170fc:	f000 f9e6 	bl	80174cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017100:	6878      	ldr	r0, [r7, #4]
 8017102:	f000 f9f7 	bl	80174f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2200      	movs	r2, #0
 801710a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	691b      	ldr	r3, [r3, #16]
 8017112:	f003 0308 	and.w	r3, r3, #8
 8017116:	2b08      	cmp	r3, #8
 8017118:	d122      	bne.n	8017160 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	68db      	ldr	r3, [r3, #12]
 8017120:	f003 0308 	and.w	r3, r3, #8
 8017124:	2b08      	cmp	r3, #8
 8017126:	d11b      	bne.n	8017160 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	f06f 0208 	mvn.w	r2, #8
 8017130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	2204      	movs	r2, #4
 8017136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	681b      	ldr	r3, [r3, #0]
 801713c:	69db      	ldr	r3, [r3, #28]
 801713e:	f003 0303 	and.w	r3, r3, #3
 8017142:	2b00      	cmp	r3, #0
 8017144:	d003      	beq.n	801714e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8017146:	6878      	ldr	r0, [r7, #4]
 8017148:	f000 f9ca 	bl	80174e0 <HAL_TIM_IC_CaptureCallback>
 801714c:	e005      	b.n	801715a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801714e:	6878      	ldr	r0, [r7, #4]
 8017150:	f000 f9bc 	bl	80174cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8017154:	6878      	ldr	r0, [r7, #4]
 8017156:	f000 f9cd 	bl	80174f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	2200      	movs	r2, #0
 801715e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	691b      	ldr	r3, [r3, #16]
 8017166:	f003 0310 	and.w	r3, r3, #16
 801716a:	2b10      	cmp	r3, #16
 801716c:	d122      	bne.n	80171b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	f003 0310 	and.w	r3, r3, #16
 8017178:	2b10      	cmp	r3, #16
 801717a:	d11b      	bne.n	80171b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	f06f 0210 	mvn.w	r2, #16
 8017184:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	2208      	movs	r2, #8
 801718a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	69db      	ldr	r3, [r3, #28]
 8017192:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8017196:	2b00      	cmp	r3, #0
 8017198:	d003      	beq.n	80171a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801719a:	6878      	ldr	r0, [r7, #4]
 801719c:	f000 f9a0 	bl	80174e0 <HAL_TIM_IC_CaptureCallback>
 80171a0:	e005      	b.n	80171ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80171a2:	6878      	ldr	r0, [r7, #4]
 80171a4:	f000 f992 	bl	80174cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80171a8:	6878      	ldr	r0, [r7, #4]
 80171aa:	f000 f9a3 	bl	80174f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	2200      	movs	r2, #0
 80171b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	691b      	ldr	r3, [r3, #16]
 80171ba:	f003 0301 	and.w	r3, r3, #1
 80171be:	2b01      	cmp	r3, #1
 80171c0:	d10e      	bne.n	80171e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	68db      	ldr	r3, [r3, #12]
 80171c8:	f003 0301 	and.w	r3, r3, #1
 80171cc:	2b01      	cmp	r3, #1
 80171ce:	d107      	bne.n	80171e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	f06f 0201 	mvn.w	r2, #1
 80171d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80171da:	6878      	ldr	r0, [r7, #4]
 80171dc:	f7e9 fd3c 	bl	8000c58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	691b      	ldr	r3, [r3, #16]
 80171e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171ea:	2b80      	cmp	r3, #128	; 0x80
 80171ec:	d10e      	bne.n	801720c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	68db      	ldr	r3, [r3, #12]
 80171f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80171f8:	2b80      	cmp	r3, #128	; 0x80
 80171fa:	d107      	bne.n	801720c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	681b      	ldr	r3, [r3, #0]
 8017200:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8017204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8017206:	6878      	ldr	r0, [r7, #4]
 8017208:	f000 fe26 	bl	8017e58 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	681b      	ldr	r3, [r3, #0]
 8017210:	691b      	ldr	r3, [r3, #16]
 8017212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017216:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801721a:	d10e      	bne.n	801723a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	68db      	ldr	r3, [r3, #12]
 8017222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017226:	2b80      	cmp	r3, #128	; 0x80
 8017228:	d107      	bne.n	801723a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8017232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8017234:	6878      	ldr	r0, [r7, #4]
 8017236:	f000 fe19 	bl	8017e6c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	681b      	ldr	r3, [r3, #0]
 801723e:	691b      	ldr	r3, [r3, #16]
 8017240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017244:	2b40      	cmp	r3, #64	; 0x40
 8017246:	d10e      	bne.n	8017266 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	68db      	ldr	r3, [r3, #12]
 801724e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017252:	2b40      	cmp	r3, #64	; 0x40
 8017254:	d107      	bne.n	8017266 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801725e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8017260:	6878      	ldr	r0, [r7, #4]
 8017262:	f000 f951 	bl	8017508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	691b      	ldr	r3, [r3, #16]
 801726c:	f003 0320 	and.w	r3, r3, #32
 8017270:	2b20      	cmp	r3, #32
 8017272:	d10e      	bne.n	8017292 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	68db      	ldr	r3, [r3, #12]
 801727a:	f003 0320 	and.w	r3, r3, #32
 801727e:	2b20      	cmp	r3, #32
 8017280:	d107      	bne.n	8017292 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681b      	ldr	r3, [r3, #0]
 8017286:	f06f 0220 	mvn.w	r2, #32
 801728a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801728c:	6878      	ldr	r0, [r7, #4]
 801728e:	f000 fdd9 	bl	8017e44 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8017292:	bf00      	nop
 8017294:	3708      	adds	r7, #8
 8017296:	46bd      	mov	sp, r7
 8017298:	bd80      	pop	{r7, pc}
	...

0801729c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b084      	sub	sp, #16
 80172a0:	af00      	add	r7, sp, #0
 80172a2:	60f8      	str	r0, [r7, #12]
 80172a4:	60b9      	str	r1, [r7, #8]
 80172a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80172ae:	2b01      	cmp	r3, #1
 80172b0:	d101      	bne.n	80172b6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80172b2:	2302      	movs	r3, #2
 80172b4:	e105      	b.n	80174c2 <HAL_TIM_PWM_ConfigChannel+0x226>
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	2201      	movs	r2, #1
 80172ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80172be:	68fb      	ldr	r3, [r7, #12]
 80172c0:	2202      	movs	r2, #2
 80172c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	2b14      	cmp	r3, #20
 80172ca:	f200 80f0 	bhi.w	80174ae <HAL_TIM_PWM_ConfigChannel+0x212>
 80172ce:	a201      	add	r2, pc, #4	; (adr r2, 80172d4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80172d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80172d4:	08017329 	.word	0x08017329
 80172d8:	080174af 	.word	0x080174af
 80172dc:	080174af 	.word	0x080174af
 80172e0:	080174af 	.word	0x080174af
 80172e4:	08017369 	.word	0x08017369
 80172e8:	080174af 	.word	0x080174af
 80172ec:	080174af 	.word	0x080174af
 80172f0:	080174af 	.word	0x080174af
 80172f4:	080173ab 	.word	0x080173ab
 80172f8:	080174af 	.word	0x080174af
 80172fc:	080174af 	.word	0x080174af
 8017300:	080174af 	.word	0x080174af
 8017304:	080173eb 	.word	0x080173eb
 8017308:	080174af 	.word	0x080174af
 801730c:	080174af 	.word	0x080174af
 8017310:	080174af 	.word	0x080174af
 8017314:	0801742d 	.word	0x0801742d
 8017318:	080174af 	.word	0x080174af
 801731c:	080174af 	.word	0x080174af
 8017320:	080174af 	.word	0x080174af
 8017324:	0801746d 	.word	0x0801746d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8017328:	68fb      	ldr	r3, [r7, #12]
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	68b9      	ldr	r1, [r7, #8]
 801732e:	4618      	mov	r0, r3
 8017330:	f000 f98e 	bl	8017650 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8017334:	68fb      	ldr	r3, [r7, #12]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	699a      	ldr	r2, [r3, #24]
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	f042 0208 	orr.w	r2, r2, #8
 8017342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	681b      	ldr	r3, [r3, #0]
 8017348:	699a      	ldr	r2, [r3, #24]
 801734a:	68fb      	ldr	r3, [r7, #12]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	f022 0204 	bic.w	r2, r2, #4
 8017352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	681b      	ldr	r3, [r3, #0]
 8017358:	6999      	ldr	r1, [r3, #24]
 801735a:	68bb      	ldr	r3, [r7, #8]
 801735c:	691a      	ldr	r2, [r3, #16]
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	430a      	orrs	r2, r1
 8017364:	619a      	str	r2, [r3, #24]
      break;
 8017366:	e0a3      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8017368:	68fb      	ldr	r3, [r7, #12]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	68b9      	ldr	r1, [r7, #8]
 801736e:	4618      	mov	r0, r3
 8017370:	f000 f9fe 	bl	8017770 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8017374:	68fb      	ldr	r3, [r7, #12]
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	699a      	ldr	r2, [r3, #24]
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017382:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8017384:	68fb      	ldr	r3, [r7, #12]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	699a      	ldr	r2, [r3, #24]
 801738a:	68fb      	ldr	r3, [r7, #12]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017392:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8017394:	68fb      	ldr	r3, [r7, #12]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	6999      	ldr	r1, [r3, #24]
 801739a:	68bb      	ldr	r3, [r7, #8]
 801739c:	691b      	ldr	r3, [r3, #16]
 801739e:	021a      	lsls	r2, r3, #8
 80173a0:	68fb      	ldr	r3, [r7, #12]
 80173a2:	681b      	ldr	r3, [r3, #0]
 80173a4:	430a      	orrs	r2, r1
 80173a6:	619a      	str	r2, [r3, #24]
      break;
 80173a8:	e082      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	68b9      	ldr	r1, [r7, #8]
 80173b0:	4618      	mov	r0, r3
 80173b2:	f000 fa67 	bl	8017884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80173b6:	68fb      	ldr	r3, [r7, #12]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	69da      	ldr	r2, [r3, #28]
 80173bc:	68fb      	ldr	r3, [r7, #12]
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	f042 0208 	orr.w	r2, r2, #8
 80173c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80173c6:	68fb      	ldr	r3, [r7, #12]
 80173c8:	681b      	ldr	r3, [r3, #0]
 80173ca:	69da      	ldr	r2, [r3, #28]
 80173cc:	68fb      	ldr	r3, [r7, #12]
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	f022 0204 	bic.w	r2, r2, #4
 80173d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80173d6:	68fb      	ldr	r3, [r7, #12]
 80173d8:	681b      	ldr	r3, [r3, #0]
 80173da:	69d9      	ldr	r1, [r3, #28]
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	691a      	ldr	r2, [r3, #16]
 80173e0:	68fb      	ldr	r3, [r7, #12]
 80173e2:	681b      	ldr	r3, [r3, #0]
 80173e4:	430a      	orrs	r2, r1
 80173e6:	61da      	str	r2, [r3, #28]
      break;
 80173e8:	e062      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80173ea:	68fb      	ldr	r3, [r7, #12]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	68b9      	ldr	r1, [r7, #8]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f000 facd 	bl	8017990 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	69da      	ldr	r2, [r3, #28]
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017404:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8017406:	68fb      	ldr	r3, [r7, #12]
 8017408:	681b      	ldr	r3, [r3, #0]
 801740a:	69da      	ldr	r2, [r3, #28]
 801740c:	68fb      	ldr	r3, [r7, #12]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017414:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8017416:	68fb      	ldr	r3, [r7, #12]
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	69d9      	ldr	r1, [r3, #28]
 801741c:	68bb      	ldr	r3, [r7, #8]
 801741e:	691b      	ldr	r3, [r3, #16]
 8017420:	021a      	lsls	r2, r3, #8
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	430a      	orrs	r2, r1
 8017428:	61da      	str	r2, [r3, #28]
      break;
 801742a:	e041      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801742c:	68fb      	ldr	r3, [r7, #12]
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	68b9      	ldr	r1, [r7, #8]
 8017432:	4618      	mov	r0, r3
 8017434:	f000 fb14 	bl	8017a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8017438:	68fb      	ldr	r3, [r7, #12]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	f042 0208 	orr.w	r2, r2, #8
 8017446:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8017448:	68fb      	ldr	r3, [r7, #12]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	681b      	ldr	r3, [r3, #0]
 8017452:	f022 0204 	bic.w	r2, r2, #4
 8017456:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8017458:	68fb      	ldr	r3, [r7, #12]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	691a      	ldr	r2, [r3, #16]
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	430a      	orrs	r2, r1
 8017468:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801746a:	e021      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801746c:	68fb      	ldr	r3, [r7, #12]
 801746e:	681b      	ldr	r3, [r3, #0]
 8017470:	68b9      	ldr	r1, [r7, #8]
 8017472:	4618      	mov	r0, r3
 8017474:	f000 fb56 	bl	8017b24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801747e:	68fb      	ldr	r3, [r7, #12]
 8017480:	681b      	ldr	r3, [r3, #0]
 8017482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8017486:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8017496:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	691b      	ldr	r3, [r3, #16]
 80174a2:	021a      	lsls	r2, r3, #8
 80174a4:	68fb      	ldr	r3, [r7, #12]
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	430a      	orrs	r2, r1
 80174aa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80174ac:	e000      	b.n	80174b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80174ae:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	2201      	movs	r2, #1
 80174b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80174b8:	68fb      	ldr	r3, [r7, #12]
 80174ba:	2200      	movs	r2, #0
 80174bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80174c0:	2300      	movs	r3, #0
}
 80174c2:	4618      	mov	r0, r3
 80174c4:	3710      	adds	r7, #16
 80174c6:	46bd      	mov	sp, r7
 80174c8:	bd80      	pop	{r7, pc}
 80174ca:	bf00      	nop

080174cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80174cc:	b480      	push	{r7}
 80174ce:	b083      	sub	sp, #12
 80174d0:	af00      	add	r7, sp, #0
 80174d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80174d4:	bf00      	nop
 80174d6:	370c      	adds	r7, #12
 80174d8:	46bd      	mov	sp, r7
 80174da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174de:	4770      	bx	lr

080174e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80174e0:	b480      	push	{r7}
 80174e2:	b083      	sub	sp, #12
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80174e8:	bf00      	nop
 80174ea:	370c      	adds	r7, #12
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80174f4:	b480      	push	{r7}
 80174f6:	b083      	sub	sp, #12
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80174fc:	bf00      	nop
 80174fe:	370c      	adds	r7, #12
 8017500:	46bd      	mov	sp, r7
 8017502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017506:	4770      	bx	lr

08017508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8017508:	b480      	push	{r7}
 801750a:	b083      	sub	sp, #12
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8017510:	bf00      	nop
 8017512:	370c      	adds	r7, #12
 8017514:	46bd      	mov	sp, r7
 8017516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801751a:	4770      	bx	lr

0801751c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 801751c:	b480      	push	{r7}
 801751e:	b085      	sub	sp, #20
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8017526:	687b      	ldr	r3, [r7, #4]
 8017528:	681b      	ldr	r3, [r3, #0]
 801752a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	4a40      	ldr	r2, [pc, #256]	; (8017630 <TIM_Base_SetConfig+0x114>)
 8017530:	4293      	cmp	r3, r2
 8017532:	d013      	beq.n	801755c <TIM_Base_SetConfig+0x40>
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801753a:	d00f      	beq.n	801755c <TIM_Base_SetConfig+0x40>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	4a3d      	ldr	r2, [pc, #244]	; (8017634 <TIM_Base_SetConfig+0x118>)
 8017540:	4293      	cmp	r3, r2
 8017542:	d00b      	beq.n	801755c <TIM_Base_SetConfig+0x40>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	4a3c      	ldr	r2, [pc, #240]	; (8017638 <TIM_Base_SetConfig+0x11c>)
 8017548:	4293      	cmp	r3, r2
 801754a:	d007      	beq.n	801755c <TIM_Base_SetConfig+0x40>
 801754c:	687b      	ldr	r3, [r7, #4]
 801754e:	4a3b      	ldr	r2, [pc, #236]	; (801763c <TIM_Base_SetConfig+0x120>)
 8017550:	4293      	cmp	r3, r2
 8017552:	d003      	beq.n	801755c <TIM_Base_SetConfig+0x40>
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	4a3a      	ldr	r2, [pc, #232]	; (8017640 <TIM_Base_SetConfig+0x124>)
 8017558:	4293      	cmp	r3, r2
 801755a:	d108      	bne.n	801756e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801755c:	68fb      	ldr	r3, [r7, #12]
 801755e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8017564:	683b      	ldr	r3, [r7, #0]
 8017566:	685b      	ldr	r3, [r3, #4]
 8017568:	68fa      	ldr	r2, [r7, #12]
 801756a:	4313      	orrs	r3, r2
 801756c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	4a2f      	ldr	r2, [pc, #188]	; (8017630 <TIM_Base_SetConfig+0x114>)
 8017572:	4293      	cmp	r3, r2
 8017574:	d01f      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 8017576:	687b      	ldr	r3, [r7, #4]
 8017578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801757c:	d01b      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 801757e:	687b      	ldr	r3, [r7, #4]
 8017580:	4a2c      	ldr	r2, [pc, #176]	; (8017634 <TIM_Base_SetConfig+0x118>)
 8017582:	4293      	cmp	r3, r2
 8017584:	d017      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	4a2b      	ldr	r2, [pc, #172]	; (8017638 <TIM_Base_SetConfig+0x11c>)
 801758a:	4293      	cmp	r3, r2
 801758c:	d013      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	4a2a      	ldr	r2, [pc, #168]	; (801763c <TIM_Base_SetConfig+0x120>)
 8017592:	4293      	cmp	r3, r2
 8017594:	d00f      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	4a29      	ldr	r2, [pc, #164]	; (8017640 <TIM_Base_SetConfig+0x124>)
 801759a:	4293      	cmp	r3, r2
 801759c:	d00b      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	4a28      	ldr	r2, [pc, #160]	; (8017644 <TIM_Base_SetConfig+0x128>)
 80175a2:	4293      	cmp	r3, r2
 80175a4:	d007      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	4a27      	ldr	r2, [pc, #156]	; (8017648 <TIM_Base_SetConfig+0x12c>)
 80175aa:	4293      	cmp	r3, r2
 80175ac:	d003      	beq.n	80175b6 <TIM_Base_SetConfig+0x9a>
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	4a26      	ldr	r2, [pc, #152]	; (801764c <TIM_Base_SetConfig+0x130>)
 80175b2:	4293      	cmp	r3, r2
 80175b4:	d108      	bne.n	80175c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80175bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	68db      	ldr	r3, [r3, #12]
 80175c2:	68fa      	ldr	r2, [r7, #12]
 80175c4:	4313      	orrs	r3, r2
 80175c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	695b      	ldr	r3, [r3, #20]
 80175d2:	4313      	orrs	r3, r2
 80175d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80175d6:	687b      	ldr	r3, [r7, #4]
 80175d8:	68fa      	ldr	r2, [r7, #12]
 80175da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80175dc:	683b      	ldr	r3, [r7, #0]
 80175de:	689a      	ldr	r2, [r3, #8]
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80175e4:	683b      	ldr	r3, [r7, #0]
 80175e6:	681a      	ldr	r2, [r3, #0]
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	4a10      	ldr	r2, [pc, #64]	; (8017630 <TIM_Base_SetConfig+0x114>)
 80175f0:	4293      	cmp	r3, r2
 80175f2:	d00f      	beq.n	8017614 <TIM_Base_SetConfig+0xf8>
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	4a12      	ldr	r2, [pc, #72]	; (8017640 <TIM_Base_SetConfig+0x124>)
 80175f8:	4293      	cmp	r3, r2
 80175fa:	d00b      	beq.n	8017614 <TIM_Base_SetConfig+0xf8>
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	4a11      	ldr	r2, [pc, #68]	; (8017644 <TIM_Base_SetConfig+0x128>)
 8017600:	4293      	cmp	r3, r2
 8017602:	d007      	beq.n	8017614 <TIM_Base_SetConfig+0xf8>
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	4a10      	ldr	r2, [pc, #64]	; (8017648 <TIM_Base_SetConfig+0x12c>)
 8017608:	4293      	cmp	r3, r2
 801760a:	d003      	beq.n	8017614 <TIM_Base_SetConfig+0xf8>
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	4a0f      	ldr	r2, [pc, #60]	; (801764c <TIM_Base_SetConfig+0x130>)
 8017610:	4293      	cmp	r3, r2
 8017612:	d103      	bne.n	801761c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8017614:	683b      	ldr	r3, [r7, #0]
 8017616:	691a      	ldr	r2, [r3, #16]
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2201      	movs	r2, #1
 8017620:	615a      	str	r2, [r3, #20]
}
 8017622:	bf00      	nop
 8017624:	3714      	adds	r7, #20
 8017626:	46bd      	mov	sp, r7
 8017628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762c:	4770      	bx	lr
 801762e:	bf00      	nop
 8017630:	40010000 	.word	0x40010000
 8017634:	40000400 	.word	0x40000400
 8017638:	40000800 	.word	0x40000800
 801763c:	40000c00 	.word	0x40000c00
 8017640:	40010400 	.word	0x40010400
 8017644:	40014000 	.word	0x40014000
 8017648:	40014400 	.word	0x40014400
 801764c:	40014800 	.word	0x40014800

08017650 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017650:	b480      	push	{r7}
 8017652:	b087      	sub	sp, #28
 8017654:	af00      	add	r7, sp, #0
 8017656:	6078      	str	r0, [r7, #4]
 8017658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	6a1b      	ldr	r3, [r3, #32]
 801765e:	f023 0201 	bic.w	r2, r3, #1
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	6a1b      	ldr	r3, [r3, #32]
 801766a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	685b      	ldr	r3, [r3, #4]
 8017670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	699b      	ldr	r3, [r3, #24]
 8017676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8017678:	68fa      	ldr	r2, [r7, #12]
 801767a:	4b37      	ldr	r3, [pc, #220]	; (8017758 <TIM_OC1_SetConfig+0x108>)
 801767c:	4013      	ands	r3, r2
 801767e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8017680:	68fb      	ldr	r3, [r7, #12]
 8017682:	f023 0303 	bic.w	r3, r3, #3
 8017686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017688:	683b      	ldr	r3, [r7, #0]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	68fa      	ldr	r2, [r7, #12]
 801768e:	4313      	orrs	r3, r2
 8017690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8017692:	697b      	ldr	r3, [r7, #20]
 8017694:	f023 0302 	bic.w	r3, r3, #2
 8017698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	689b      	ldr	r3, [r3, #8]
 801769e:	697a      	ldr	r2, [r7, #20]
 80176a0:	4313      	orrs	r3, r2
 80176a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	4a2d      	ldr	r2, [pc, #180]	; (801775c <TIM_OC1_SetConfig+0x10c>)
 80176a8:	4293      	cmp	r3, r2
 80176aa:	d00f      	beq.n	80176cc <TIM_OC1_SetConfig+0x7c>
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	4a2c      	ldr	r2, [pc, #176]	; (8017760 <TIM_OC1_SetConfig+0x110>)
 80176b0:	4293      	cmp	r3, r2
 80176b2:	d00b      	beq.n	80176cc <TIM_OC1_SetConfig+0x7c>
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	4a2b      	ldr	r2, [pc, #172]	; (8017764 <TIM_OC1_SetConfig+0x114>)
 80176b8:	4293      	cmp	r3, r2
 80176ba:	d007      	beq.n	80176cc <TIM_OC1_SetConfig+0x7c>
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	4a2a      	ldr	r2, [pc, #168]	; (8017768 <TIM_OC1_SetConfig+0x118>)
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d003      	beq.n	80176cc <TIM_OC1_SetConfig+0x7c>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	4a29      	ldr	r2, [pc, #164]	; (801776c <TIM_OC1_SetConfig+0x11c>)
 80176c8:	4293      	cmp	r3, r2
 80176ca:	d10c      	bne.n	80176e6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80176cc:	697b      	ldr	r3, [r7, #20]
 80176ce:	f023 0308 	bic.w	r3, r3, #8
 80176d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80176d4:	683b      	ldr	r3, [r7, #0]
 80176d6:	68db      	ldr	r3, [r3, #12]
 80176d8:	697a      	ldr	r2, [r7, #20]
 80176da:	4313      	orrs	r3, r2
 80176dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80176de:	697b      	ldr	r3, [r7, #20]
 80176e0:	f023 0304 	bic.w	r3, r3, #4
 80176e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	4a1c      	ldr	r2, [pc, #112]	; (801775c <TIM_OC1_SetConfig+0x10c>)
 80176ea:	4293      	cmp	r3, r2
 80176ec:	d00f      	beq.n	801770e <TIM_OC1_SetConfig+0xbe>
 80176ee:	687b      	ldr	r3, [r7, #4]
 80176f0:	4a1b      	ldr	r2, [pc, #108]	; (8017760 <TIM_OC1_SetConfig+0x110>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d00b      	beq.n	801770e <TIM_OC1_SetConfig+0xbe>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	4a1a      	ldr	r2, [pc, #104]	; (8017764 <TIM_OC1_SetConfig+0x114>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d007      	beq.n	801770e <TIM_OC1_SetConfig+0xbe>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	4a19      	ldr	r2, [pc, #100]	; (8017768 <TIM_OC1_SetConfig+0x118>)
 8017702:	4293      	cmp	r3, r2
 8017704:	d003      	beq.n	801770e <TIM_OC1_SetConfig+0xbe>
 8017706:	687b      	ldr	r3, [r7, #4]
 8017708:	4a18      	ldr	r2, [pc, #96]	; (801776c <TIM_OC1_SetConfig+0x11c>)
 801770a:	4293      	cmp	r3, r2
 801770c:	d111      	bne.n	8017732 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801770e:	693b      	ldr	r3, [r7, #16]
 8017710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801771c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801771e:	683b      	ldr	r3, [r7, #0]
 8017720:	695b      	ldr	r3, [r3, #20]
 8017722:	693a      	ldr	r2, [r7, #16]
 8017724:	4313      	orrs	r3, r2
 8017726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	699b      	ldr	r3, [r3, #24]
 801772c:	693a      	ldr	r2, [r7, #16]
 801772e:	4313      	orrs	r3, r2
 8017730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	693a      	ldr	r2, [r7, #16]
 8017736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	68fa      	ldr	r2, [r7, #12]
 801773c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	685a      	ldr	r2, [r3, #4]
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	697a      	ldr	r2, [r7, #20]
 801774a:	621a      	str	r2, [r3, #32]
}
 801774c:	bf00      	nop
 801774e:	371c      	adds	r7, #28
 8017750:	46bd      	mov	sp, r7
 8017752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017756:	4770      	bx	lr
 8017758:	fffeff8f 	.word	0xfffeff8f
 801775c:	40010000 	.word	0x40010000
 8017760:	40010400 	.word	0x40010400
 8017764:	40014000 	.word	0x40014000
 8017768:	40014400 	.word	0x40014400
 801776c:	40014800 	.word	0x40014800

08017770 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017770:	b480      	push	{r7}
 8017772:	b087      	sub	sp, #28
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
 8017778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	6a1b      	ldr	r3, [r3, #32]
 801777e:	f023 0210 	bic.w	r2, r3, #16
 8017782:	687b      	ldr	r3, [r7, #4]
 8017784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017786:	687b      	ldr	r3, [r7, #4]
 8017788:	6a1b      	ldr	r3, [r3, #32]
 801778a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	685b      	ldr	r3, [r3, #4]
 8017790:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	699b      	ldr	r3, [r3, #24]
 8017796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8017798:	68fa      	ldr	r2, [r7, #12]
 801779a:	4b34      	ldr	r3, [pc, #208]	; (801786c <TIM_OC2_SetConfig+0xfc>)
 801779c:	4013      	ands	r3, r2
 801779e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80177a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80177a8:	683b      	ldr	r3, [r7, #0]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	021b      	lsls	r3, r3, #8
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	4313      	orrs	r3, r2
 80177b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	f023 0320 	bic.w	r3, r3, #32
 80177ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80177bc:	683b      	ldr	r3, [r7, #0]
 80177be:	689b      	ldr	r3, [r3, #8]
 80177c0:	011b      	lsls	r3, r3, #4
 80177c2:	697a      	ldr	r2, [r7, #20]
 80177c4:	4313      	orrs	r3, r2
 80177c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	4a29      	ldr	r2, [pc, #164]	; (8017870 <TIM_OC2_SetConfig+0x100>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d003      	beq.n	80177d8 <TIM_OC2_SetConfig+0x68>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	4a28      	ldr	r2, [pc, #160]	; (8017874 <TIM_OC2_SetConfig+0x104>)
 80177d4:	4293      	cmp	r3, r2
 80177d6:	d10d      	bne.n	80177f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80177d8:	697b      	ldr	r3, [r7, #20]
 80177da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80177de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80177e0:	683b      	ldr	r3, [r7, #0]
 80177e2:	68db      	ldr	r3, [r3, #12]
 80177e4:	011b      	lsls	r3, r3, #4
 80177e6:	697a      	ldr	r2, [r7, #20]
 80177e8:	4313      	orrs	r3, r2
 80177ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80177ec:	697b      	ldr	r3, [r7, #20]
 80177ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80177f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	4a1e      	ldr	r2, [pc, #120]	; (8017870 <TIM_OC2_SetConfig+0x100>)
 80177f8:	4293      	cmp	r3, r2
 80177fa:	d00f      	beq.n	801781c <TIM_OC2_SetConfig+0xac>
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	4a1d      	ldr	r2, [pc, #116]	; (8017874 <TIM_OC2_SetConfig+0x104>)
 8017800:	4293      	cmp	r3, r2
 8017802:	d00b      	beq.n	801781c <TIM_OC2_SetConfig+0xac>
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	4a1c      	ldr	r2, [pc, #112]	; (8017878 <TIM_OC2_SetConfig+0x108>)
 8017808:	4293      	cmp	r3, r2
 801780a:	d007      	beq.n	801781c <TIM_OC2_SetConfig+0xac>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	4a1b      	ldr	r2, [pc, #108]	; (801787c <TIM_OC2_SetConfig+0x10c>)
 8017810:	4293      	cmp	r3, r2
 8017812:	d003      	beq.n	801781c <TIM_OC2_SetConfig+0xac>
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	4a1a      	ldr	r2, [pc, #104]	; (8017880 <TIM_OC2_SetConfig+0x110>)
 8017818:	4293      	cmp	r3, r2
 801781a:	d113      	bne.n	8017844 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801781c:	693b      	ldr	r3, [r7, #16]
 801781e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8017824:	693b      	ldr	r3, [r7, #16]
 8017826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801782a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801782c:	683b      	ldr	r3, [r7, #0]
 801782e:	695b      	ldr	r3, [r3, #20]
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	693a      	ldr	r2, [r7, #16]
 8017834:	4313      	orrs	r3, r2
 8017836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8017838:	683b      	ldr	r3, [r7, #0]
 801783a:	699b      	ldr	r3, [r3, #24]
 801783c:	009b      	lsls	r3, r3, #2
 801783e:	693a      	ldr	r2, [r7, #16]
 8017840:	4313      	orrs	r3, r2
 8017842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	693a      	ldr	r2, [r7, #16]
 8017848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	68fa      	ldr	r2, [r7, #12]
 801784e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8017850:	683b      	ldr	r3, [r7, #0]
 8017852:	685a      	ldr	r2, [r3, #4]
 8017854:	687b      	ldr	r3, [r7, #4]
 8017856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	697a      	ldr	r2, [r7, #20]
 801785c:	621a      	str	r2, [r3, #32]
}
 801785e:	bf00      	nop
 8017860:	371c      	adds	r7, #28
 8017862:	46bd      	mov	sp, r7
 8017864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017868:	4770      	bx	lr
 801786a:	bf00      	nop
 801786c:	feff8fff 	.word	0xfeff8fff
 8017870:	40010000 	.word	0x40010000
 8017874:	40010400 	.word	0x40010400
 8017878:	40014000 	.word	0x40014000
 801787c:	40014400 	.word	0x40014400
 8017880:	40014800 	.word	0x40014800

08017884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017884:	b480      	push	{r7}
 8017886:	b087      	sub	sp, #28
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	6a1b      	ldr	r3, [r3, #32]
 8017892:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6a1b      	ldr	r3, [r3, #32]
 801789e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80178a0:	687b      	ldr	r3, [r7, #4]
 80178a2:	685b      	ldr	r3, [r3, #4]
 80178a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	69db      	ldr	r3, [r3, #28]
 80178aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80178b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80178b4:	68fb      	ldr	r3, [r7, #12]
 80178b6:	f023 0303 	bic.w	r3, r3, #3
 80178ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80178bc:	683b      	ldr	r3, [r7, #0]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	68fa      	ldr	r2, [r7, #12]
 80178c2:	4313      	orrs	r3, r2
 80178c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80178cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80178ce:	683b      	ldr	r3, [r7, #0]
 80178d0:	689b      	ldr	r3, [r3, #8]
 80178d2:	021b      	lsls	r3, r3, #8
 80178d4:	697a      	ldr	r2, [r7, #20]
 80178d6:	4313      	orrs	r3, r2
 80178d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	4a27      	ldr	r2, [pc, #156]	; (801797c <TIM_OC3_SetConfig+0xf8>)
 80178de:	4293      	cmp	r3, r2
 80178e0:	d003      	beq.n	80178ea <TIM_OC3_SetConfig+0x66>
 80178e2:	687b      	ldr	r3, [r7, #4]
 80178e4:	4a26      	ldr	r2, [pc, #152]	; (8017980 <TIM_OC3_SetConfig+0xfc>)
 80178e6:	4293      	cmp	r3, r2
 80178e8:	d10d      	bne.n	8017906 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80178ea:	697b      	ldr	r3, [r7, #20]
 80178ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80178f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80178f2:	683b      	ldr	r3, [r7, #0]
 80178f4:	68db      	ldr	r3, [r3, #12]
 80178f6:	021b      	lsls	r3, r3, #8
 80178f8:	697a      	ldr	r2, [r7, #20]
 80178fa:	4313      	orrs	r3, r2
 80178fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8017904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	4a1c      	ldr	r2, [pc, #112]	; (801797c <TIM_OC3_SetConfig+0xf8>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d00f      	beq.n	801792e <TIM_OC3_SetConfig+0xaa>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	4a1b      	ldr	r2, [pc, #108]	; (8017980 <TIM_OC3_SetConfig+0xfc>)
 8017912:	4293      	cmp	r3, r2
 8017914:	d00b      	beq.n	801792e <TIM_OC3_SetConfig+0xaa>
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	4a1a      	ldr	r2, [pc, #104]	; (8017984 <TIM_OC3_SetConfig+0x100>)
 801791a:	4293      	cmp	r3, r2
 801791c:	d007      	beq.n	801792e <TIM_OC3_SetConfig+0xaa>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	4a19      	ldr	r2, [pc, #100]	; (8017988 <TIM_OC3_SetConfig+0x104>)
 8017922:	4293      	cmp	r3, r2
 8017924:	d003      	beq.n	801792e <TIM_OC3_SetConfig+0xaa>
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	4a18      	ldr	r2, [pc, #96]	; (801798c <TIM_OC3_SetConfig+0x108>)
 801792a:	4293      	cmp	r3, r2
 801792c:	d113      	bne.n	8017956 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801792e:	693b      	ldr	r3, [r7, #16]
 8017930:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801793c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801793e:	683b      	ldr	r3, [r7, #0]
 8017940:	695b      	ldr	r3, [r3, #20]
 8017942:	011b      	lsls	r3, r3, #4
 8017944:	693a      	ldr	r2, [r7, #16]
 8017946:	4313      	orrs	r3, r2
 8017948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801794a:	683b      	ldr	r3, [r7, #0]
 801794c:	699b      	ldr	r3, [r3, #24]
 801794e:	011b      	lsls	r3, r3, #4
 8017950:	693a      	ldr	r2, [r7, #16]
 8017952:	4313      	orrs	r3, r2
 8017954:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	693a      	ldr	r2, [r7, #16]
 801795a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	68fa      	ldr	r2, [r7, #12]
 8017960:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8017962:	683b      	ldr	r3, [r7, #0]
 8017964:	685a      	ldr	r2, [r3, #4]
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	697a      	ldr	r2, [r7, #20]
 801796e:	621a      	str	r2, [r3, #32]
}
 8017970:	bf00      	nop
 8017972:	371c      	adds	r7, #28
 8017974:	46bd      	mov	sp, r7
 8017976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801797a:	4770      	bx	lr
 801797c:	40010000 	.word	0x40010000
 8017980:	40010400 	.word	0x40010400
 8017984:	40014000 	.word	0x40014000
 8017988:	40014400 	.word	0x40014400
 801798c:	40014800 	.word	0x40014800

08017990 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8017990:	b480      	push	{r7}
 8017992:	b087      	sub	sp, #28
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
 8017998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	6a1b      	ldr	r3, [r3, #32]
 801799e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	6a1b      	ldr	r3, [r3, #32]
 80179aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80179ac:	687b      	ldr	r3, [r7, #4]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	69db      	ldr	r3, [r3, #28]
 80179b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80179b8:	68fb      	ldr	r3, [r7, #12]
 80179ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80179be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80179c0:	68fb      	ldr	r3, [r7, #12]
 80179c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80179c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80179c8:	683b      	ldr	r3, [r7, #0]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	021b      	lsls	r3, r3, #8
 80179ce:	68fa      	ldr	r2, [r7, #12]
 80179d0:	4313      	orrs	r3, r2
 80179d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80179d4:	693b      	ldr	r3, [r7, #16]
 80179d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80179da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80179dc:	683b      	ldr	r3, [r7, #0]
 80179de:	689b      	ldr	r3, [r3, #8]
 80179e0:	031b      	lsls	r3, r3, #12
 80179e2:	693a      	ldr	r2, [r7, #16]
 80179e4:	4313      	orrs	r3, r2
 80179e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	4a18      	ldr	r2, [pc, #96]	; (8017a4c <TIM_OC4_SetConfig+0xbc>)
 80179ec:	4293      	cmp	r3, r2
 80179ee:	d00f      	beq.n	8017a10 <TIM_OC4_SetConfig+0x80>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	4a17      	ldr	r2, [pc, #92]	; (8017a50 <TIM_OC4_SetConfig+0xc0>)
 80179f4:	4293      	cmp	r3, r2
 80179f6:	d00b      	beq.n	8017a10 <TIM_OC4_SetConfig+0x80>
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	4a16      	ldr	r2, [pc, #88]	; (8017a54 <TIM_OC4_SetConfig+0xc4>)
 80179fc:	4293      	cmp	r3, r2
 80179fe:	d007      	beq.n	8017a10 <TIM_OC4_SetConfig+0x80>
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	4a15      	ldr	r2, [pc, #84]	; (8017a58 <TIM_OC4_SetConfig+0xc8>)
 8017a04:	4293      	cmp	r3, r2
 8017a06:	d003      	beq.n	8017a10 <TIM_OC4_SetConfig+0x80>
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	4a14      	ldr	r2, [pc, #80]	; (8017a5c <TIM_OC4_SetConfig+0xcc>)
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d109      	bne.n	8017a24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8017a10:	697b      	ldr	r3, [r7, #20]
 8017a12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8017a16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8017a18:	683b      	ldr	r3, [r7, #0]
 8017a1a:	695b      	ldr	r3, [r3, #20]
 8017a1c:	019b      	lsls	r3, r3, #6
 8017a1e:	697a      	ldr	r2, [r7, #20]
 8017a20:	4313      	orrs	r3, r2
 8017a22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	697a      	ldr	r2, [r7, #20]
 8017a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	68fa      	ldr	r2, [r7, #12]
 8017a2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8017a30:	683b      	ldr	r3, [r7, #0]
 8017a32:	685a      	ldr	r2, [r3, #4]
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	693a      	ldr	r2, [r7, #16]
 8017a3c:	621a      	str	r2, [r3, #32]
}
 8017a3e:	bf00      	nop
 8017a40:	371c      	adds	r7, #28
 8017a42:	46bd      	mov	sp, r7
 8017a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a48:	4770      	bx	lr
 8017a4a:	bf00      	nop
 8017a4c:	40010000 	.word	0x40010000
 8017a50:	40010400 	.word	0x40010400
 8017a54:	40014000 	.word	0x40014000
 8017a58:	40014400 	.word	0x40014400
 8017a5c:	40014800 	.word	0x40014800

08017a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017a60:	b480      	push	{r7}
 8017a62:	b087      	sub	sp, #28
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
 8017a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6a1b      	ldr	r3, [r3, #32]
 8017a6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	6a1b      	ldr	r3, [r3, #32]
 8017a7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8017a88:	68fb      	ldr	r3, [r7, #12]
 8017a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	68fa      	ldr	r2, [r7, #12]
 8017a96:	4313      	orrs	r3, r2
 8017a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8017a9a:	693b      	ldr	r3, [r7, #16]
 8017a9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8017aa2:	683b      	ldr	r3, [r7, #0]
 8017aa4:	689b      	ldr	r3, [r3, #8]
 8017aa6:	041b      	lsls	r3, r3, #16
 8017aa8:	693a      	ldr	r2, [r7, #16]
 8017aaa:	4313      	orrs	r3, r2
 8017aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4a17      	ldr	r2, [pc, #92]	; (8017b10 <TIM_OC5_SetConfig+0xb0>)
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	d00f      	beq.n	8017ad6 <TIM_OC5_SetConfig+0x76>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	4a16      	ldr	r2, [pc, #88]	; (8017b14 <TIM_OC5_SetConfig+0xb4>)
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d00b      	beq.n	8017ad6 <TIM_OC5_SetConfig+0x76>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	4a15      	ldr	r2, [pc, #84]	; (8017b18 <TIM_OC5_SetConfig+0xb8>)
 8017ac2:	4293      	cmp	r3, r2
 8017ac4:	d007      	beq.n	8017ad6 <TIM_OC5_SetConfig+0x76>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	4a14      	ldr	r2, [pc, #80]	; (8017b1c <TIM_OC5_SetConfig+0xbc>)
 8017aca:	4293      	cmp	r3, r2
 8017acc:	d003      	beq.n	8017ad6 <TIM_OC5_SetConfig+0x76>
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	4a13      	ldr	r2, [pc, #76]	; (8017b20 <TIM_OC5_SetConfig+0xc0>)
 8017ad2:	4293      	cmp	r3, r2
 8017ad4:	d109      	bne.n	8017aea <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8017adc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8017ade:	683b      	ldr	r3, [r7, #0]
 8017ae0:	695b      	ldr	r3, [r3, #20]
 8017ae2:	021b      	lsls	r3, r3, #8
 8017ae4:	697a      	ldr	r2, [r7, #20]
 8017ae6:	4313      	orrs	r3, r2
 8017ae8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	697a      	ldr	r2, [r7, #20]
 8017aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017af0:	687b      	ldr	r3, [r7, #4]
 8017af2:	68fa      	ldr	r2, [r7, #12]
 8017af4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8017af6:	683b      	ldr	r3, [r7, #0]
 8017af8:	685a      	ldr	r2, [r3, #4]
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	693a      	ldr	r2, [r7, #16]
 8017b02:	621a      	str	r2, [r3, #32]
}
 8017b04:	bf00      	nop
 8017b06:	371c      	adds	r7, #28
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr
 8017b10:	40010000 	.word	0x40010000
 8017b14:	40010400 	.word	0x40010400
 8017b18:	40014000 	.word	0x40014000
 8017b1c:	40014400 	.word	0x40014400
 8017b20:	40014800 	.word	0x40014800

08017b24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8017b24:	b480      	push	{r7}
 8017b26:	b087      	sub	sp, #28
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
 8017b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	6a1b      	ldr	r3, [r3, #32]
 8017b32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	6a1b      	ldr	r3, [r3, #32]
 8017b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8017b40:	687b      	ldr	r3, [r7, #4]
 8017b42:	685b      	ldr	r3, [r3, #4]
 8017b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8017b4c:	68fb      	ldr	r3, [r7, #12]
 8017b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8017b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8017b54:	683b      	ldr	r3, [r7, #0]
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	021b      	lsls	r3, r3, #8
 8017b5a:	68fa      	ldr	r2, [r7, #12]
 8017b5c:	4313      	orrs	r3, r2
 8017b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8017b60:	693b      	ldr	r3, [r7, #16]
 8017b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8017b66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8017b68:	683b      	ldr	r3, [r7, #0]
 8017b6a:	689b      	ldr	r3, [r3, #8]
 8017b6c:	051b      	lsls	r3, r3, #20
 8017b6e:	693a      	ldr	r2, [r7, #16]
 8017b70:	4313      	orrs	r3, r2
 8017b72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	4a18      	ldr	r2, [pc, #96]	; (8017bd8 <TIM_OC6_SetConfig+0xb4>)
 8017b78:	4293      	cmp	r3, r2
 8017b7a:	d00f      	beq.n	8017b9c <TIM_OC6_SetConfig+0x78>
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	4a17      	ldr	r2, [pc, #92]	; (8017bdc <TIM_OC6_SetConfig+0xb8>)
 8017b80:	4293      	cmp	r3, r2
 8017b82:	d00b      	beq.n	8017b9c <TIM_OC6_SetConfig+0x78>
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	4a16      	ldr	r2, [pc, #88]	; (8017be0 <TIM_OC6_SetConfig+0xbc>)
 8017b88:	4293      	cmp	r3, r2
 8017b8a:	d007      	beq.n	8017b9c <TIM_OC6_SetConfig+0x78>
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	4a15      	ldr	r2, [pc, #84]	; (8017be4 <TIM_OC6_SetConfig+0xc0>)
 8017b90:	4293      	cmp	r3, r2
 8017b92:	d003      	beq.n	8017b9c <TIM_OC6_SetConfig+0x78>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	4a14      	ldr	r2, [pc, #80]	; (8017be8 <TIM_OC6_SetConfig+0xc4>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d109      	bne.n	8017bb0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8017b9c:	697b      	ldr	r3, [r7, #20]
 8017b9e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8017ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	695b      	ldr	r3, [r3, #20]
 8017ba8:	029b      	lsls	r3, r3, #10
 8017baa:	697a      	ldr	r2, [r7, #20]
 8017bac:	4313      	orrs	r3, r2
 8017bae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	697a      	ldr	r2, [r7, #20]
 8017bb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8017bb6:	687b      	ldr	r3, [r7, #4]
 8017bb8:	68fa      	ldr	r2, [r7, #12]
 8017bba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	685a      	ldr	r2, [r3, #4]
 8017bc0:	687b      	ldr	r3, [r7, #4]
 8017bc2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	693a      	ldr	r2, [r7, #16]
 8017bc8:	621a      	str	r2, [r3, #32]
}
 8017bca:	bf00      	nop
 8017bcc:	371c      	adds	r7, #28
 8017bce:	46bd      	mov	sp, r7
 8017bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd4:	4770      	bx	lr
 8017bd6:	bf00      	nop
 8017bd8:	40010000 	.word	0x40010000
 8017bdc:	40010400 	.word	0x40010400
 8017be0:	40014000 	.word	0x40014000
 8017be4:	40014400 	.word	0x40014400
 8017be8:	40014800 	.word	0x40014800

08017bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8017bec:	b480      	push	{r7}
 8017bee:	b087      	sub	sp, #28
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8017bf8:	68bb      	ldr	r3, [r7, #8]
 8017bfa:	f003 031f 	and.w	r3, r3, #31
 8017bfe:	2201      	movs	r2, #1
 8017c00:	fa02 f303 	lsl.w	r3, r2, r3
 8017c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	6a1a      	ldr	r2, [r3, #32]
 8017c0a:	697b      	ldr	r3, [r7, #20]
 8017c0c:	43db      	mvns	r3, r3
 8017c0e:	401a      	ands	r2, r3
 8017c10:	68fb      	ldr	r3, [r7, #12]
 8017c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	6a1a      	ldr	r2, [r3, #32]
 8017c18:	68bb      	ldr	r3, [r7, #8]
 8017c1a:	f003 031f 	and.w	r3, r3, #31
 8017c1e:	6879      	ldr	r1, [r7, #4]
 8017c20:	fa01 f303 	lsl.w	r3, r1, r3
 8017c24:	431a      	orrs	r2, r3
 8017c26:	68fb      	ldr	r3, [r7, #12]
 8017c28:	621a      	str	r2, [r3, #32]
}
 8017c2a:	bf00      	nop
 8017c2c:	371c      	adds	r7, #28
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c34:	4770      	bx	lr
	...

08017c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b085      	sub	sp, #20
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
 8017c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8017c42:	687b      	ldr	r3, [r7, #4]
 8017c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017c48:	2b01      	cmp	r3, #1
 8017c4a:	d101      	bne.n	8017c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8017c4c:	2302      	movs	r3, #2
 8017c4e:	e068      	b.n	8017d22 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	2201      	movs	r2, #1
 8017c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2202      	movs	r2, #2
 8017c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	685b      	ldr	r3, [r3, #4]
 8017c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	689b      	ldr	r3, [r3, #8]
 8017c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	4a2e      	ldr	r2, [pc, #184]	; (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017c76:	4293      	cmp	r3, r2
 8017c78:	d004      	beq.n	8017c84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	4a2d      	ldr	r2, [pc, #180]	; (8017d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017c80:	4293      	cmp	r3, r2
 8017c82:	d108      	bne.n	8017c96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8017c8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	685b      	ldr	r3, [r3, #4]
 8017c90:	68fa      	ldr	r2, [r7, #12]
 8017c92:	4313      	orrs	r3, r2
 8017c94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8017c9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8017c9e:	683b      	ldr	r3, [r7, #0]
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	68fa      	ldr	r2, [r7, #12]
 8017ca4:	4313      	orrs	r3, r2
 8017ca6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	68fa      	ldr	r2, [r7, #12]
 8017cae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	681b      	ldr	r3, [r3, #0]
 8017cb4:	4a1e      	ldr	r2, [pc, #120]	; (8017d30 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8017cb6:	4293      	cmp	r3, r2
 8017cb8:	d01d      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017cba:	687b      	ldr	r3, [r7, #4]
 8017cbc:	681b      	ldr	r3, [r3, #0]
 8017cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017cc2:	d018      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	681b      	ldr	r3, [r3, #0]
 8017cc8:	4a1b      	ldr	r2, [pc, #108]	; (8017d38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8017cca:	4293      	cmp	r3, r2
 8017ccc:	d013      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	4a1a      	ldr	r2, [pc, #104]	; (8017d3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8017cd4:	4293      	cmp	r3, r2
 8017cd6:	d00e      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	681b      	ldr	r3, [r3, #0]
 8017cdc:	4a18      	ldr	r2, [pc, #96]	; (8017d40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	d009      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017ce2:	687b      	ldr	r3, [r7, #4]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4a13      	ldr	r2, [pc, #76]	; (8017d34 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d004      	beq.n	8017cf6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	4a14      	ldr	r2, [pc, #80]	; (8017d44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8017cf2:	4293      	cmp	r3, r2
 8017cf4:	d10c      	bne.n	8017d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8017cf6:	68bb      	ldr	r3, [r7, #8]
 8017cf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8017cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8017cfe:	683b      	ldr	r3, [r7, #0]
 8017d00:	689b      	ldr	r3, [r3, #8]
 8017d02:	68ba      	ldr	r2, [r7, #8]
 8017d04:	4313      	orrs	r3, r2
 8017d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	68ba      	ldr	r2, [r7, #8]
 8017d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2201      	movs	r2, #1
 8017d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	2200      	movs	r2, #0
 8017d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017d20:	2300      	movs	r3, #0
}
 8017d22:	4618      	mov	r0, r3
 8017d24:	3714      	adds	r7, #20
 8017d26:	46bd      	mov	sp, r7
 8017d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	40010000 	.word	0x40010000
 8017d34:	40010400 	.word	0x40010400
 8017d38:	40000400 	.word	0x40000400
 8017d3c:	40000800 	.word	0x40000800
 8017d40:	40000c00 	.word	0x40000c00
 8017d44:	40001800 	.word	0x40001800

08017d48 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8017d48:	b480      	push	{r7}
 8017d4a:	b085      	sub	sp, #20
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	6078      	str	r0, [r7, #4]
 8017d50:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8017d52:	2300      	movs	r3, #0
 8017d54:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8017d5c:	2b01      	cmp	r3, #1
 8017d5e:	d101      	bne.n	8017d64 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8017d60:	2302      	movs	r3, #2
 8017d62:	e065      	b.n	8017e30 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8017d64:	687b      	ldr	r3, [r7, #4]
 8017d66:	2201      	movs	r2, #1
 8017d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8017d6c:	68fb      	ldr	r3, [r7, #12]
 8017d6e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8017d72:	683b      	ldr	r3, [r7, #0]
 8017d74:	68db      	ldr	r3, [r3, #12]
 8017d76:	4313      	orrs	r3, r2
 8017d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8017d7a:	68fb      	ldr	r3, [r7, #12]
 8017d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017d80:	683b      	ldr	r3, [r7, #0]
 8017d82:	689b      	ldr	r3, [r3, #8]
 8017d84:	4313      	orrs	r3, r2
 8017d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8017d88:	68fb      	ldr	r3, [r7, #12]
 8017d8a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8017d8e:	683b      	ldr	r3, [r7, #0]
 8017d90:	685b      	ldr	r3, [r3, #4]
 8017d92:	4313      	orrs	r3, r2
 8017d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8017d9c:	683b      	ldr	r3, [r7, #0]
 8017d9e:	681b      	ldr	r3, [r3, #0]
 8017da0:	4313      	orrs	r3, r2
 8017da2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8017daa:	683b      	ldr	r3, [r7, #0]
 8017dac:	691b      	ldr	r3, [r3, #16]
 8017dae:	4313      	orrs	r3, r2
 8017db0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8017db8:	683b      	ldr	r3, [r7, #0]
 8017dba:	695b      	ldr	r3, [r3, #20]
 8017dbc:	4313      	orrs	r3, r2
 8017dbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8017dc0:	68fb      	ldr	r3, [r7, #12]
 8017dc2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8017dc6:	683b      	ldr	r3, [r7, #0]
 8017dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017dca:	4313      	orrs	r3, r2
 8017dcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8017dce:	68fb      	ldr	r3, [r7, #12]
 8017dd0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8017dd4:	683b      	ldr	r3, [r7, #0]
 8017dd6:	699b      	ldr	r3, [r3, #24]
 8017dd8:	041b      	lsls	r3, r3, #16
 8017dda:	4313      	orrs	r3, r2
 8017ddc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	4a16      	ldr	r2, [pc, #88]	; (8017e3c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8017de4:	4293      	cmp	r3, r2
 8017de6:	d004      	beq.n	8017df2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8017de8:	687b      	ldr	r3, [r7, #4]
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	4a14      	ldr	r2, [pc, #80]	; (8017e40 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8017dee:	4293      	cmp	r3, r2
 8017df0:	d115      	bne.n	8017e1e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8017df2:	68fb      	ldr	r3, [r7, #12]
 8017df4:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8017df8:	683b      	ldr	r3, [r7, #0]
 8017dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dfc:	051b      	lsls	r3, r3, #20
 8017dfe:	4313      	orrs	r3, r2
 8017e00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8017e08:	683b      	ldr	r3, [r7, #0]
 8017e0a:	69db      	ldr	r3, [r3, #28]
 8017e0c:	4313      	orrs	r3, r2
 8017e0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8017e10:	68fb      	ldr	r3, [r7, #12]
 8017e12:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8017e16:	683b      	ldr	r3, [r7, #0]
 8017e18:	6a1b      	ldr	r3, [r3, #32]
 8017e1a:	4313      	orrs	r3, r2
 8017e1c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	681b      	ldr	r3, [r3, #0]
 8017e22:	68fa      	ldr	r2, [r7, #12]
 8017e24:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	2200      	movs	r2, #0
 8017e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8017e2e:	2300      	movs	r3, #0
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3714      	adds	r7, #20
 8017e34:	46bd      	mov	sp, r7
 8017e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3a:	4770      	bx	lr
 8017e3c:	40010000 	.word	0x40010000
 8017e40:	40010400 	.word	0x40010400

08017e44 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8017e44:	b480      	push	{r7}
 8017e46:	b083      	sub	sp, #12
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8017e4c:	bf00      	nop
 8017e4e:	370c      	adds	r7, #12
 8017e50:	46bd      	mov	sp, r7
 8017e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e56:	4770      	bx	lr

08017e58 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8017e58:	b480      	push	{r7}
 8017e5a:	b083      	sub	sp, #12
 8017e5c:	af00      	add	r7, sp, #0
 8017e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8017e60:	bf00      	nop
 8017e62:	370c      	adds	r7, #12
 8017e64:	46bd      	mov	sp, r7
 8017e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6a:	4770      	bx	lr

08017e6c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8017e6c:	b480      	push	{r7}
 8017e6e:	b083      	sub	sp, #12
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8017e74:	bf00      	nop
 8017e76:	370c      	adds	r7, #12
 8017e78:	46bd      	mov	sp, r7
 8017e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e7e:	4770      	bx	lr

08017e80 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8017e80:	b580      	push	{r7, lr}
 8017e82:	b082      	sub	sp, #8
 8017e84:	af00      	add	r7, sp, #0
 8017e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d101      	bne.n	8017e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8017e8e:	2301      	movs	r3, #1
 8017e90:	e042      	b.n	8017f18 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d106      	bne.n	8017eaa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8017e9c:	687b      	ldr	r3, [r7, #4]
 8017e9e:	2200      	movs	r2, #0
 8017ea0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8017ea4:	6878      	ldr	r0, [r7, #4]
 8017ea6:	f7ea f9bf 	bl	8002228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8017eaa:	687b      	ldr	r3, [r7, #4]
 8017eac:	2224      	movs	r2, #36	; 0x24
 8017eae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	681a      	ldr	r2, [r3, #0]
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	f022 0201 	bic.w	r2, r2, #1
 8017ec0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8017ec2:	6878      	ldr	r0, [r7, #4]
 8017ec4:	f000 f9c0 	bl	8018248 <UART_SetConfig>
 8017ec8:	4603      	mov	r3, r0
 8017eca:	2b01      	cmp	r3, #1
 8017ecc:	d101      	bne.n	8017ed2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8017ece:	2301      	movs	r3, #1
 8017ed0:	e022      	b.n	8017f18 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d002      	beq.n	8017ee0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f002 fb32 	bl	801a544 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	685a      	ldr	r2, [r3, #4]
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	681b      	ldr	r3, [r3, #0]
 8017eea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8017eee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	689a      	ldr	r2, [r3, #8]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8017efe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	681a      	ldr	r2, [r3, #0]
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	681b      	ldr	r3, [r3, #0]
 8017f0a:	f042 0201 	orr.w	r2, r2, #1
 8017f0e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f002 fbb9 	bl	801a688 <UART_CheckIdleState>
 8017f16:	4603      	mov	r3, r0
}
 8017f18:	4618      	mov	r0, r3
 8017f1a:	3708      	adds	r7, #8
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	bd80      	pop	{r7, pc}

08017f20 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	b088      	sub	sp, #32
 8017f24:	af00      	add	r7, sp, #0
 8017f26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	69db      	ldr	r3, [r3, #28]
 8017f2e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	681b      	ldr	r3, [r3, #0]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	689b      	ldr	r3, [r3, #8]
 8017f3e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8017f40:	69fa      	ldr	r2, [r7, #28]
 8017f42:	f640 030f 	movw	r3, #2063	; 0x80f
 8017f46:	4013      	ands	r3, r2
 8017f48:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8017f4a:	693b      	ldr	r3, [r7, #16]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d118      	bne.n	8017f82 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8017f50:	69fb      	ldr	r3, [r7, #28]
 8017f52:	f003 0320 	and.w	r3, r3, #32
 8017f56:	2b00      	cmp	r3, #0
 8017f58:	d013      	beq.n	8017f82 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8017f5a:	69bb      	ldr	r3, [r7, #24]
 8017f5c:	f003 0320 	and.w	r3, r3, #32
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	d104      	bne.n	8017f6e <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8017f64:	697b      	ldr	r3, [r7, #20]
 8017f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d009      	beq.n	8017f82 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f72:	2b00      	cmp	r3, #0
 8017f74:	f000 8145 	beq.w	8018202 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f7c:	6878      	ldr	r0, [r7, #4]
 8017f7e:	4798      	blx	r3
      }
      return;
 8017f80:	e13f      	b.n	8018202 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8017f82:	693b      	ldr	r3, [r7, #16]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	f000 80e8 	beq.w	801815a <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8017f8a:	697a      	ldr	r2, [r7, #20]
 8017f8c:	4ba1      	ldr	r3, [pc, #644]	; (8018214 <HAL_UART_IRQHandler+0x2f4>)
 8017f8e:	4013      	ands	r3, r2
 8017f90:	2b00      	cmp	r3, #0
 8017f92:	d105      	bne.n	8017fa0 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8017f94:	69ba      	ldr	r2, [r7, #24]
 8017f96:	4ba0      	ldr	r3, [pc, #640]	; (8018218 <HAL_UART_IRQHandler+0x2f8>)
 8017f98:	4013      	ands	r3, r2
 8017f9a:	2b00      	cmp	r3, #0
 8017f9c:	f000 80dd 	beq.w	801815a <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017fa0:	69fb      	ldr	r3, [r7, #28]
 8017fa2:	f003 0301 	and.w	r3, r3, #1
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d010      	beq.n	8017fcc <HAL_UART_IRQHandler+0xac>
 8017faa:	69bb      	ldr	r3, [r7, #24]
 8017fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d00b      	beq.n	8017fcc <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	2201      	movs	r2, #1
 8017fba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fc2:	f043 0201 	orr.w	r2, r3, #1
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017fcc:	69fb      	ldr	r3, [r7, #28]
 8017fce:	f003 0302 	and.w	r3, r3, #2
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	d010      	beq.n	8017ff8 <HAL_UART_IRQHandler+0xd8>
 8017fd6:	697b      	ldr	r3, [r7, #20]
 8017fd8:	f003 0301 	and.w	r3, r3, #1
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d00b      	beq.n	8017ff8 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2202      	movs	r2, #2
 8017fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017fee:	f043 0204 	orr.w	r2, r3, #4
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017ff8:	69fb      	ldr	r3, [r7, #28]
 8017ffa:	f003 0304 	and.w	r3, r3, #4
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d010      	beq.n	8018024 <HAL_UART_IRQHandler+0x104>
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	f003 0301 	and.w	r3, r3, #1
 8018008:	2b00      	cmp	r3, #0
 801800a:	d00b      	beq.n	8018024 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801800c:	687b      	ldr	r3, [r7, #4]
 801800e:	681b      	ldr	r3, [r3, #0]
 8018010:	2204      	movs	r2, #4
 8018012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801801a:	f043 0202 	orr.w	r2, r3, #2
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018024:	69fb      	ldr	r3, [r7, #28]
 8018026:	f003 0308 	and.w	r3, r3, #8
 801802a:	2b00      	cmp	r3, #0
 801802c:	d015      	beq.n	801805a <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801802e:	69bb      	ldr	r3, [r7, #24]
 8018030:	f003 0320 	and.w	r3, r3, #32
 8018034:	2b00      	cmp	r3, #0
 8018036:	d104      	bne.n	8018042 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018038:	697a      	ldr	r2, [r7, #20]
 801803a:	4b76      	ldr	r3, [pc, #472]	; (8018214 <HAL_UART_IRQHandler+0x2f4>)
 801803c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 801803e:	2b00      	cmp	r3, #0
 8018040:	d00b      	beq.n	801805a <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	2208      	movs	r2, #8
 8018048:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8018050:	f043 0208 	orr.w	r2, r3, #8
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801805a:	69fb      	ldr	r3, [r7, #28]
 801805c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018060:	2b00      	cmp	r3, #0
 8018062:	d011      	beq.n	8018088 <HAL_UART_IRQHandler+0x168>
 8018064:	69bb      	ldr	r3, [r7, #24]
 8018066:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801806a:	2b00      	cmp	r3, #0
 801806c:	d00c      	beq.n	8018088 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801807e:	f043 0220 	orr.w	r2, r3, #32
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801808e:	2b00      	cmp	r3, #0
 8018090:	f000 80b9 	beq.w	8018206 <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018094:	69fb      	ldr	r3, [r7, #28]
 8018096:	f003 0320 	and.w	r3, r3, #32
 801809a:	2b00      	cmp	r3, #0
 801809c:	d011      	beq.n	80180c2 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801809e:	69bb      	ldr	r3, [r7, #24]
 80180a0:	f003 0320 	and.w	r3, r3, #32
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	d104      	bne.n	80180b2 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80180a8:	697b      	ldr	r3, [r7, #20]
 80180aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d007      	beq.n	80180c2 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d003      	beq.n	80180c2 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180be:	6878      	ldr	r0, [r7, #4]
 80180c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80180c2:	687b      	ldr	r3, [r7, #4]
 80180c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80180c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80180ca:	687b      	ldr	r3, [r7, #4]
 80180cc:	681b      	ldr	r3, [r3, #0]
 80180ce:	689b      	ldr	r3, [r3, #8]
 80180d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180d4:	2b40      	cmp	r3, #64	; 0x40
 80180d6:	d004      	beq.n	80180e2 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80180d8:	68fb      	ldr	r3, [r7, #12]
 80180da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d031      	beq.n	8018146 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80180e2:	6878      	ldr	r0, [r7, #4]
 80180e4:	f002 fb98 	bl	801a818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681b      	ldr	r3, [r3, #0]
 80180ec:	689b      	ldr	r3, [r3, #8]
 80180ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80180f2:	2b40      	cmp	r3, #64	; 0x40
 80180f4:	d123      	bne.n	801813e <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	689a      	ldr	r2, [r3, #8]
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8018104:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801810a:	2b00      	cmp	r3, #0
 801810c:	d013      	beq.n	8018136 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801810e:	687b      	ldr	r3, [r7, #4]
 8018110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8018112:	4a42      	ldr	r2, [pc, #264]	; (801821c <HAL_UART_IRQHandler+0x2fc>)
 8018114:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801811a:	4618      	mov	r0, r3
 801811c:	f7fa fe14 	bl	8012d48 <HAL_DMA_Abort_IT>
 8018120:	4603      	mov	r3, r0
 8018122:	2b00      	cmp	r3, #0
 8018124:	d017      	beq.n	8018156 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801812c:	687a      	ldr	r2, [r7, #4]
 801812e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8018130:	4610      	mov	r0, r2
 8018132:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018134:	e00f      	b.n	8018156 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8018136:	6878      	ldr	r0, [r7, #4]
 8018138:	f000 f87c 	bl	8018234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801813c:	e00b      	b.n	8018156 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801813e:	6878      	ldr	r0, [r7, #4]
 8018140:	f000 f878 	bl	8018234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018144:	e007      	b.n	8018156 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	f000 f874 	bl	8018234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	2200      	movs	r2, #0
 8018150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8018154:	e057      	b.n	8018206 <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8018156:	bf00      	nop
    return;
 8018158:	e055      	b.n	8018206 <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801815a:	69fb      	ldr	r3, [r7, #28]
 801815c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8018160:	2b00      	cmp	r3, #0
 8018162:	d00d      	beq.n	8018180 <HAL_UART_IRQHandler+0x260>
 8018164:	697b      	ldr	r3, [r7, #20]
 8018166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801816a:	2b00      	cmp	r3, #0
 801816c:	d008      	beq.n	8018180 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8018176:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f002 fba1 	bl	801a8c0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801817e:	e045      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8018180:	69fb      	ldr	r3, [r7, #28]
 8018182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018186:	2b00      	cmp	r3, #0
 8018188:	d012      	beq.n	80181b0 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801818a:	69bb      	ldr	r3, [r7, #24]
 801818c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018190:	2b00      	cmp	r3, #0
 8018192:	d104      	bne.n	801819e <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8018194:	697b      	ldr	r3, [r7, #20]
 8018196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801819a:	2b00      	cmp	r3, #0
 801819c:	d008      	beq.n	80181b0 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 801819e:	687b      	ldr	r3, [r7, #4]
 80181a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181a2:	2b00      	cmp	r3, #0
 80181a4:	d031      	beq.n	801820a <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80181a6:	687b      	ldr	r3, [r7, #4]
 80181a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181aa:	6878      	ldr	r0, [r7, #4]
 80181ac:	4798      	blx	r3
    }
    return;
 80181ae:	e02c      	b.n	801820a <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80181b0:	69fb      	ldr	r3, [r7, #28]
 80181b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d008      	beq.n	80181cc <HAL_UART_IRQHandler+0x2ac>
 80181ba:	69bb      	ldr	r3, [r7, #24]
 80181bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181c0:	2b00      	cmp	r3, #0
 80181c2:	d003      	beq.n	80181cc <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80181c4:	6878      	ldr	r0, [r7, #4]
 80181c6:	f002 fb61 	bl	801a88c <UART_EndTransmit_IT>
    return;
 80181ca:	e01f      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80181cc:	69fb      	ldr	r3, [r7, #28]
 80181ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	d008      	beq.n	80181e8 <HAL_UART_IRQHandler+0x2c8>
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80181dc:	2b00      	cmp	r3, #0
 80181de:	d003      	beq.n	80181e8 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f002 fb81 	bl	801a8e8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80181e6:	e011      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80181e8:	69fb      	ldr	r3, [r7, #28]
 80181ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d00c      	beq.n	801820c <HAL_UART_IRQHandler+0x2ec>
 80181f2:	69bb      	ldr	r3, [r7, #24]
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	da09      	bge.n	801820c <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80181f8:	6878      	ldr	r0, [r7, #4]
 80181fa:	f002 fb6b 	bl	801a8d4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80181fe:	bf00      	nop
 8018200:	e004      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
      return;
 8018202:	bf00      	nop
 8018204:	e002      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
    return;
 8018206:	bf00      	nop
 8018208:	e000      	b.n	801820c <HAL_UART_IRQHandler+0x2ec>
    return;
 801820a:	bf00      	nop
  }
}
 801820c:	3720      	adds	r7, #32
 801820e:	46bd      	mov	sp, r7
 8018210:	bd80      	pop	{r7, pc}
 8018212:	bf00      	nop
 8018214:	10000001 	.word	0x10000001
 8018218:	04000120 	.word	0x04000120
 801821c:	0801a861 	.word	0x0801a861

08018220 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8018220:	b480      	push	{r7}
 8018222:	b083      	sub	sp, #12
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8018228:	bf00      	nop
 801822a:	370c      	adds	r7, #12
 801822c:	46bd      	mov	sp, r7
 801822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018232:	4770      	bx	lr

08018234 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8018234:	b480      	push	{r7}
 8018236:	b083      	sub	sp, #12
 8018238:	af00      	add	r7, sp, #0
 801823a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801823c:	bf00      	nop
 801823e:	370c      	adds	r7, #12
 8018240:	46bd      	mov	sp, r7
 8018242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018246:	4770      	bx	lr

08018248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8018248:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801824c:	b090      	sub	sp, #64	; 0x40
 801824e:	af00      	add	r7, sp, #0
 8018250:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8018252:	2300      	movs	r3, #0
 8018254:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 8018256:	2300      	movs	r3, #0
 8018258:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 801825c:	2300      	movs	r3, #0
 801825e:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	689a      	ldr	r2, [r3, #8]
 8018264:	687b      	ldr	r3, [r7, #4]
 8018266:	691b      	ldr	r3, [r3, #16]
 8018268:	431a      	orrs	r2, r3
 801826a:	687b      	ldr	r3, [r7, #4]
 801826c:	695b      	ldr	r3, [r3, #20]
 801826e:	431a      	orrs	r2, r3
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	69db      	ldr	r3, [r3, #28]
 8018274:	4313      	orrs	r3, r2
 8018276:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801827c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801827e:	4313      	orrs	r3, r2
 8018280:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	681a      	ldr	r2, [r3, #0]
 8018288:	4bc1      	ldr	r3, [pc, #772]	; (8018590 <UART_SetConfig+0x348>)
 801828a:	4013      	ands	r3, r2
 801828c:	687a      	ldr	r2, [r7, #4]
 801828e:	6812      	ldr	r2, [r2, #0]
 8018290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8018292:	430b      	orrs	r3, r1
 8018294:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	685b      	ldr	r3, [r3, #4]
 801829c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	68da      	ldr	r2, [r3, #12]
 80182a4:	687b      	ldr	r3, [r7, #4]
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	430a      	orrs	r2, r1
 80182aa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	699b      	ldr	r3, [r3, #24]
 80182b0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80182b2:	687b      	ldr	r3, [r7, #4]
 80182b4:	681b      	ldr	r3, [r3, #0]
 80182b6:	4ab7      	ldr	r2, [pc, #732]	; (8018594 <UART_SetConfig+0x34c>)
 80182b8:	4293      	cmp	r3, r2
 80182ba:	d004      	beq.n	80182c6 <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	6a1b      	ldr	r3, [r3, #32]
 80182c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80182c2:	4313      	orrs	r3, r2
 80182c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	689a      	ldr	r2, [r3, #8]
 80182cc:	4bb2      	ldr	r3, [pc, #712]	; (8018598 <UART_SetConfig+0x350>)
 80182ce:	4013      	ands	r3, r2
 80182d0:	687a      	ldr	r2, [r7, #4]
 80182d2:	6812      	ldr	r2, [r2, #0]
 80182d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80182d6:	430b      	orrs	r3, r1
 80182d8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	681b      	ldr	r3, [r3, #0]
 80182de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182e0:	f023 010f 	bic.w	r1, r3, #15
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	430a      	orrs	r2, r1
 80182ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	681b      	ldr	r3, [r3, #0]
 80182f4:	4aa9      	ldr	r2, [pc, #676]	; (801859c <UART_SetConfig+0x354>)
 80182f6:	4293      	cmp	r3, r2
 80182f8:	d177      	bne.n	80183ea <UART_SetConfig+0x1a2>
 80182fa:	4ba9      	ldr	r3, [pc, #676]	; (80185a0 <UART_SetConfig+0x358>)
 80182fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8018302:	2b28      	cmp	r3, #40	; 0x28
 8018304:	d86c      	bhi.n	80183e0 <UART_SetConfig+0x198>
 8018306:	a201      	add	r2, pc, #4	; (adr r2, 801830c <UART_SetConfig+0xc4>)
 8018308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801830c:	080183b1 	.word	0x080183b1
 8018310:	080183e1 	.word	0x080183e1
 8018314:	080183e1 	.word	0x080183e1
 8018318:	080183e1 	.word	0x080183e1
 801831c:	080183e1 	.word	0x080183e1
 8018320:	080183e1 	.word	0x080183e1
 8018324:	080183e1 	.word	0x080183e1
 8018328:	080183e1 	.word	0x080183e1
 801832c:	080183b9 	.word	0x080183b9
 8018330:	080183e1 	.word	0x080183e1
 8018334:	080183e1 	.word	0x080183e1
 8018338:	080183e1 	.word	0x080183e1
 801833c:	080183e1 	.word	0x080183e1
 8018340:	080183e1 	.word	0x080183e1
 8018344:	080183e1 	.word	0x080183e1
 8018348:	080183e1 	.word	0x080183e1
 801834c:	080183c1 	.word	0x080183c1
 8018350:	080183e1 	.word	0x080183e1
 8018354:	080183e1 	.word	0x080183e1
 8018358:	080183e1 	.word	0x080183e1
 801835c:	080183e1 	.word	0x080183e1
 8018360:	080183e1 	.word	0x080183e1
 8018364:	080183e1 	.word	0x080183e1
 8018368:	080183e1 	.word	0x080183e1
 801836c:	080183c9 	.word	0x080183c9
 8018370:	080183e1 	.word	0x080183e1
 8018374:	080183e1 	.word	0x080183e1
 8018378:	080183e1 	.word	0x080183e1
 801837c:	080183e1 	.word	0x080183e1
 8018380:	080183e1 	.word	0x080183e1
 8018384:	080183e1 	.word	0x080183e1
 8018388:	080183e1 	.word	0x080183e1
 801838c:	080183d1 	.word	0x080183d1
 8018390:	080183e1 	.word	0x080183e1
 8018394:	080183e1 	.word	0x080183e1
 8018398:	080183e1 	.word	0x080183e1
 801839c:	080183e1 	.word	0x080183e1
 80183a0:	080183e1 	.word	0x080183e1
 80183a4:	080183e1 	.word	0x080183e1
 80183a8:	080183e1 	.word	0x080183e1
 80183ac:	080183d9 	.word	0x080183d9
 80183b0:	2301      	movs	r3, #1
 80183b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183b6:	e233      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183b8:	2304      	movs	r3, #4
 80183ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183be:	e22f      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183c0:	2308      	movs	r3, #8
 80183c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183c6:	e22b      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183c8:	2310      	movs	r3, #16
 80183ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183ce:	e227      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183d0:	2320      	movs	r3, #32
 80183d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183d6:	e223      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183d8:	2340      	movs	r3, #64	; 0x40
 80183da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183de:	e21f      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183e0:	2380      	movs	r3, #128	; 0x80
 80183e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80183e6:	bf00      	nop
 80183e8:	e21a      	b.n	8018820 <UART_SetConfig+0x5d8>
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	681b      	ldr	r3, [r3, #0]
 80183ee:	4a6d      	ldr	r2, [pc, #436]	; (80185a4 <UART_SetConfig+0x35c>)
 80183f0:	4293      	cmp	r3, r2
 80183f2:	d132      	bne.n	801845a <UART_SetConfig+0x212>
 80183f4:	4b6a      	ldr	r3, [pc, #424]	; (80185a0 <UART_SetConfig+0x358>)
 80183f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183f8:	f003 0307 	and.w	r3, r3, #7
 80183fc:	2b05      	cmp	r3, #5
 80183fe:	d827      	bhi.n	8018450 <UART_SetConfig+0x208>
 8018400:	a201      	add	r2, pc, #4	; (adr r2, 8018408 <UART_SetConfig+0x1c0>)
 8018402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018406:	bf00      	nop
 8018408:	08018421 	.word	0x08018421
 801840c:	08018429 	.word	0x08018429
 8018410:	08018431 	.word	0x08018431
 8018414:	08018439 	.word	0x08018439
 8018418:	08018441 	.word	0x08018441
 801841c:	08018449 	.word	0x08018449
 8018420:	2300      	movs	r3, #0
 8018422:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018426:	e1fb      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018428:	2304      	movs	r3, #4
 801842a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801842e:	e1f7      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018430:	2308      	movs	r3, #8
 8018432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018436:	e1f3      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018438:	2310      	movs	r3, #16
 801843a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801843e:	e1ef      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018440:	2320      	movs	r3, #32
 8018442:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018446:	e1eb      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018448:	2340      	movs	r3, #64	; 0x40
 801844a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801844e:	e1e7      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018450:	2380      	movs	r3, #128	; 0x80
 8018452:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018456:	bf00      	nop
 8018458:	e1e2      	b.n	8018820 <UART_SetConfig+0x5d8>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4a52      	ldr	r2, [pc, #328]	; (80185a8 <UART_SetConfig+0x360>)
 8018460:	4293      	cmp	r3, r2
 8018462:	d132      	bne.n	80184ca <UART_SetConfig+0x282>
 8018464:	4b4e      	ldr	r3, [pc, #312]	; (80185a0 <UART_SetConfig+0x358>)
 8018466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018468:	f003 0307 	and.w	r3, r3, #7
 801846c:	2b05      	cmp	r3, #5
 801846e:	d827      	bhi.n	80184c0 <UART_SetConfig+0x278>
 8018470:	a201      	add	r2, pc, #4	; (adr r2, 8018478 <UART_SetConfig+0x230>)
 8018472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018476:	bf00      	nop
 8018478:	08018491 	.word	0x08018491
 801847c:	08018499 	.word	0x08018499
 8018480:	080184a1 	.word	0x080184a1
 8018484:	080184a9 	.word	0x080184a9
 8018488:	080184b1 	.word	0x080184b1
 801848c:	080184b9 	.word	0x080184b9
 8018490:	2300      	movs	r3, #0
 8018492:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018496:	e1c3      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018498:	2304      	movs	r3, #4
 801849a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801849e:	e1bf      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184a0:	2308      	movs	r3, #8
 80184a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184a6:	e1bb      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184a8:	2310      	movs	r3, #16
 80184aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184ae:	e1b7      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184b0:	2320      	movs	r3, #32
 80184b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184b6:	e1b3      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184b8:	2340      	movs	r3, #64	; 0x40
 80184ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184be:	e1af      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184c0:	2380      	movs	r3, #128	; 0x80
 80184c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80184c6:	bf00      	nop
 80184c8:	e1aa      	b.n	8018820 <UART_SetConfig+0x5d8>
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	4a37      	ldr	r2, [pc, #220]	; (80185ac <UART_SetConfig+0x364>)
 80184d0:	4293      	cmp	r3, r2
 80184d2:	d132      	bne.n	801853a <UART_SetConfig+0x2f2>
 80184d4:	4b32      	ldr	r3, [pc, #200]	; (80185a0 <UART_SetConfig+0x358>)
 80184d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184d8:	f003 0307 	and.w	r3, r3, #7
 80184dc:	2b05      	cmp	r3, #5
 80184de:	d827      	bhi.n	8018530 <UART_SetConfig+0x2e8>
 80184e0:	a201      	add	r2, pc, #4	; (adr r2, 80184e8 <UART_SetConfig+0x2a0>)
 80184e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80184e6:	bf00      	nop
 80184e8:	08018501 	.word	0x08018501
 80184ec:	08018509 	.word	0x08018509
 80184f0:	08018511 	.word	0x08018511
 80184f4:	08018519 	.word	0x08018519
 80184f8:	08018521 	.word	0x08018521
 80184fc:	08018529 	.word	0x08018529
 8018500:	2300      	movs	r3, #0
 8018502:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018506:	e18b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018508:	2304      	movs	r3, #4
 801850a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801850e:	e187      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018510:	2308      	movs	r3, #8
 8018512:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018516:	e183      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018518:	2310      	movs	r3, #16
 801851a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801851e:	e17f      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018520:	2320      	movs	r3, #32
 8018522:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018526:	e17b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018528:	2340      	movs	r3, #64	; 0x40
 801852a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801852e:	e177      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018530:	2380      	movs	r3, #128	; 0x80
 8018532:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018536:	bf00      	nop
 8018538:	e172      	b.n	8018820 <UART_SetConfig+0x5d8>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4a1c      	ldr	r2, [pc, #112]	; (80185b0 <UART_SetConfig+0x368>)
 8018540:	4293      	cmp	r3, r2
 8018542:	d144      	bne.n	80185ce <UART_SetConfig+0x386>
 8018544:	4b16      	ldr	r3, [pc, #88]	; (80185a0 <UART_SetConfig+0x358>)
 8018546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018548:	f003 0307 	and.w	r3, r3, #7
 801854c:	2b05      	cmp	r3, #5
 801854e:	d839      	bhi.n	80185c4 <UART_SetConfig+0x37c>
 8018550:	a201      	add	r2, pc, #4	; (adr r2, 8018558 <UART_SetConfig+0x310>)
 8018552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018556:	bf00      	nop
 8018558:	08018571 	.word	0x08018571
 801855c:	08018579 	.word	0x08018579
 8018560:	08018581 	.word	0x08018581
 8018564:	08018589 	.word	0x08018589
 8018568:	080185b5 	.word	0x080185b5
 801856c:	080185bd 	.word	0x080185bd
 8018570:	2300      	movs	r3, #0
 8018572:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018576:	e153      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018578:	2304      	movs	r3, #4
 801857a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801857e:	e14f      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018580:	2308      	movs	r3, #8
 8018582:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018586:	e14b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018588:	2310      	movs	r3, #16
 801858a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801858e:	e147      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018590:	cfff69f3 	.word	0xcfff69f3
 8018594:	58000c00 	.word	0x58000c00
 8018598:	11fff4ff 	.word	0x11fff4ff
 801859c:	40011000 	.word	0x40011000
 80185a0:	58024400 	.word	0x58024400
 80185a4:	40004400 	.word	0x40004400
 80185a8:	40004800 	.word	0x40004800
 80185ac:	40004c00 	.word	0x40004c00
 80185b0:	40005000 	.word	0x40005000
 80185b4:	2320      	movs	r3, #32
 80185b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185ba:	e131      	b.n	8018820 <UART_SetConfig+0x5d8>
 80185bc:	2340      	movs	r3, #64	; 0x40
 80185be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185c2:	e12d      	b.n	8018820 <UART_SetConfig+0x5d8>
 80185c4:	2380      	movs	r3, #128	; 0x80
 80185c6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80185ca:	bf00      	nop
 80185cc:	e128      	b.n	8018820 <UART_SetConfig+0x5d8>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4ac3      	ldr	r2, [pc, #780]	; (80188e0 <UART_SetConfig+0x698>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d178      	bne.n	80186ca <UART_SetConfig+0x482>
 80185d8:	4bc2      	ldr	r3, [pc, #776]	; (80188e4 <UART_SetConfig+0x69c>)
 80185da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80185dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80185e0:	2b28      	cmp	r3, #40	; 0x28
 80185e2:	d86d      	bhi.n	80186c0 <UART_SetConfig+0x478>
 80185e4:	a201      	add	r2, pc, #4	; (adr r2, 80185ec <UART_SetConfig+0x3a4>)
 80185e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80185ea:	bf00      	nop
 80185ec:	08018691 	.word	0x08018691
 80185f0:	080186c1 	.word	0x080186c1
 80185f4:	080186c1 	.word	0x080186c1
 80185f8:	080186c1 	.word	0x080186c1
 80185fc:	080186c1 	.word	0x080186c1
 8018600:	080186c1 	.word	0x080186c1
 8018604:	080186c1 	.word	0x080186c1
 8018608:	080186c1 	.word	0x080186c1
 801860c:	08018699 	.word	0x08018699
 8018610:	080186c1 	.word	0x080186c1
 8018614:	080186c1 	.word	0x080186c1
 8018618:	080186c1 	.word	0x080186c1
 801861c:	080186c1 	.word	0x080186c1
 8018620:	080186c1 	.word	0x080186c1
 8018624:	080186c1 	.word	0x080186c1
 8018628:	080186c1 	.word	0x080186c1
 801862c:	080186a1 	.word	0x080186a1
 8018630:	080186c1 	.word	0x080186c1
 8018634:	080186c1 	.word	0x080186c1
 8018638:	080186c1 	.word	0x080186c1
 801863c:	080186c1 	.word	0x080186c1
 8018640:	080186c1 	.word	0x080186c1
 8018644:	080186c1 	.word	0x080186c1
 8018648:	080186c1 	.word	0x080186c1
 801864c:	080186a9 	.word	0x080186a9
 8018650:	080186c1 	.word	0x080186c1
 8018654:	080186c1 	.word	0x080186c1
 8018658:	080186c1 	.word	0x080186c1
 801865c:	080186c1 	.word	0x080186c1
 8018660:	080186c1 	.word	0x080186c1
 8018664:	080186c1 	.word	0x080186c1
 8018668:	080186c1 	.word	0x080186c1
 801866c:	080186b1 	.word	0x080186b1
 8018670:	080186c1 	.word	0x080186c1
 8018674:	080186c1 	.word	0x080186c1
 8018678:	080186c1 	.word	0x080186c1
 801867c:	080186c1 	.word	0x080186c1
 8018680:	080186c1 	.word	0x080186c1
 8018684:	080186c1 	.word	0x080186c1
 8018688:	080186c1 	.word	0x080186c1
 801868c:	080186b9 	.word	0x080186b9
 8018690:	2301      	movs	r3, #1
 8018692:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018696:	e0c3      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018698:	2304      	movs	r3, #4
 801869a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801869e:	e0bf      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186a0:	2308      	movs	r3, #8
 80186a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80186a6:	e0bb      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186a8:	2310      	movs	r3, #16
 80186aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80186ae:	e0b7      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186b0:	2320      	movs	r3, #32
 80186b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80186b6:	e0b3      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186b8:	2340      	movs	r3, #64	; 0x40
 80186ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80186be:	e0af      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186c0:	2380      	movs	r3, #128	; 0x80
 80186c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80186c6:	bf00      	nop
 80186c8:	e0aa      	b.n	8018820 <UART_SetConfig+0x5d8>
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	4a86      	ldr	r2, [pc, #536]	; (80188e8 <UART_SetConfig+0x6a0>)
 80186d0:	4293      	cmp	r3, r2
 80186d2:	d132      	bne.n	801873a <UART_SetConfig+0x4f2>
 80186d4:	4b83      	ldr	r3, [pc, #524]	; (80188e4 <UART_SetConfig+0x69c>)
 80186d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80186d8:	f003 0307 	and.w	r3, r3, #7
 80186dc:	2b05      	cmp	r3, #5
 80186de:	d827      	bhi.n	8018730 <UART_SetConfig+0x4e8>
 80186e0:	a201      	add	r2, pc, #4	; (adr r2, 80186e8 <UART_SetConfig+0x4a0>)
 80186e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80186e6:	bf00      	nop
 80186e8:	08018701 	.word	0x08018701
 80186ec:	08018709 	.word	0x08018709
 80186f0:	08018711 	.word	0x08018711
 80186f4:	08018719 	.word	0x08018719
 80186f8:	08018721 	.word	0x08018721
 80186fc:	08018729 	.word	0x08018729
 8018700:	2300      	movs	r3, #0
 8018702:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018706:	e08b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018708:	2304      	movs	r3, #4
 801870a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801870e:	e087      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018710:	2308      	movs	r3, #8
 8018712:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018716:	e083      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018718:	2310      	movs	r3, #16
 801871a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801871e:	e07f      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018720:	2320      	movs	r3, #32
 8018722:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018726:	e07b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018728:	2340      	movs	r3, #64	; 0x40
 801872a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801872e:	e077      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018730:	2380      	movs	r3, #128	; 0x80
 8018732:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018736:	bf00      	nop
 8018738:	e072      	b.n	8018820 <UART_SetConfig+0x5d8>
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	4a6b      	ldr	r2, [pc, #428]	; (80188ec <UART_SetConfig+0x6a4>)
 8018740:	4293      	cmp	r3, r2
 8018742:	d132      	bne.n	80187aa <UART_SetConfig+0x562>
 8018744:	4b67      	ldr	r3, [pc, #412]	; (80188e4 <UART_SetConfig+0x69c>)
 8018746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018748:	f003 0307 	and.w	r3, r3, #7
 801874c:	2b05      	cmp	r3, #5
 801874e:	d827      	bhi.n	80187a0 <UART_SetConfig+0x558>
 8018750:	a201      	add	r2, pc, #4	; (adr r2, 8018758 <UART_SetConfig+0x510>)
 8018752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018756:	bf00      	nop
 8018758:	08018771 	.word	0x08018771
 801875c:	08018779 	.word	0x08018779
 8018760:	08018781 	.word	0x08018781
 8018764:	08018789 	.word	0x08018789
 8018768:	08018791 	.word	0x08018791
 801876c:	08018799 	.word	0x08018799
 8018770:	2300      	movs	r3, #0
 8018772:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018776:	e053      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018778:	2304      	movs	r3, #4
 801877a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801877e:	e04f      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018780:	2308      	movs	r3, #8
 8018782:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018786:	e04b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018788:	2310      	movs	r3, #16
 801878a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801878e:	e047      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018790:	2320      	movs	r3, #32
 8018792:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018796:	e043      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018798:	2340      	movs	r3, #64	; 0x40
 801879a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801879e:	e03f      	b.n	8018820 <UART_SetConfig+0x5d8>
 80187a0:	2380      	movs	r3, #128	; 0x80
 80187a2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187a6:	bf00      	nop
 80187a8:	e03a      	b.n	8018820 <UART_SetConfig+0x5d8>
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	4a50      	ldr	r2, [pc, #320]	; (80188f0 <UART_SetConfig+0x6a8>)
 80187b0:	4293      	cmp	r3, r2
 80187b2:	d132      	bne.n	801881a <UART_SetConfig+0x5d2>
 80187b4:	4b4b      	ldr	r3, [pc, #300]	; (80188e4 <UART_SetConfig+0x69c>)
 80187b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80187b8:	f003 0307 	and.w	r3, r3, #7
 80187bc:	2b05      	cmp	r3, #5
 80187be:	d827      	bhi.n	8018810 <UART_SetConfig+0x5c8>
 80187c0:	a201      	add	r2, pc, #4	; (adr r2, 80187c8 <UART_SetConfig+0x580>)
 80187c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80187c6:	bf00      	nop
 80187c8:	080187e1 	.word	0x080187e1
 80187cc:	080187e9 	.word	0x080187e9
 80187d0:	080187f1 	.word	0x080187f1
 80187d4:	080187f9 	.word	0x080187f9
 80187d8:	08018801 	.word	0x08018801
 80187dc:	08018809 	.word	0x08018809
 80187e0:	2302      	movs	r3, #2
 80187e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187e6:	e01b      	b.n	8018820 <UART_SetConfig+0x5d8>
 80187e8:	2304      	movs	r3, #4
 80187ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187ee:	e017      	b.n	8018820 <UART_SetConfig+0x5d8>
 80187f0:	2308      	movs	r3, #8
 80187f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187f6:	e013      	b.n	8018820 <UART_SetConfig+0x5d8>
 80187f8:	2310      	movs	r3, #16
 80187fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80187fe:	e00f      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018800:	2320      	movs	r3, #32
 8018802:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018806:	e00b      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018808:	2340      	movs	r3, #64	; 0x40
 801880a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 801880e:	e007      	b.n	8018820 <UART_SetConfig+0x5d8>
 8018810:	2380      	movs	r3, #128	; 0x80
 8018812:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8018816:	bf00      	nop
 8018818:	e002      	b.n	8018820 <UART_SetConfig+0x5d8>
 801881a:	2380      	movs	r3, #128	; 0x80
 801881c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4a32      	ldr	r2, [pc, #200]	; (80188f0 <UART_SetConfig+0x6a8>)
 8018826:	4293      	cmp	r3, r2
 8018828:	f040 86f7 	bne.w	801961a <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801882c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018830:	2b08      	cmp	r3, #8
 8018832:	f000 80c0 	beq.w	80189b6 <UART_SetConfig+0x76e>
 8018836:	2b08      	cmp	r3, #8
 8018838:	dc04      	bgt.n	8018844 <UART_SetConfig+0x5fc>
 801883a:	2b02      	cmp	r3, #2
 801883c:	d00c      	beq.n	8018858 <UART_SetConfig+0x610>
 801883e:	2b04      	cmp	r3, #4
 8018840:	d065      	beq.n	801890e <UART_SetConfig+0x6c6>
 8018842:	e27a      	b.n	8018d3a <UART_SetConfig+0xaf2>
 8018844:	2b20      	cmp	r3, #32
 8018846:	f000 81b0 	beq.w	8018baa <UART_SetConfig+0x962>
 801884a:	2b40      	cmp	r3, #64	; 0x40
 801884c:	f000 821e 	beq.w	8018c8c <UART_SetConfig+0xa44>
 8018850:	2b10      	cmp	r3, #16
 8018852:	f000 8104 	beq.w	8018a5e <UART_SetConfig+0x816>
 8018856:	e270      	b.n	8018d3a <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018858:	f7fd ff14 	bl	8016684 <HAL_RCCEx_GetD3PCLK1Freq>
 801885c:	4602      	mov	r2, r0
 801885e:	687b      	ldr	r3, [r7, #4]
 8018860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018862:	2b00      	cmp	r3, #0
 8018864:	d04e      	beq.n	8018904 <UART_SetConfig+0x6bc>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801886a:	2b01      	cmp	r3, #1
 801886c:	d048      	beq.n	8018900 <UART_SetConfig+0x6b8>
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018872:	2b02      	cmp	r3, #2
 8018874:	d042      	beq.n	80188fc <UART_SetConfig+0x6b4>
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801887a:	2b03      	cmp	r3, #3
 801887c:	d03c      	beq.n	80188f8 <UART_SetConfig+0x6b0>
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018882:	2b04      	cmp	r3, #4
 8018884:	d036      	beq.n	80188f4 <UART_SetConfig+0x6ac>
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801888a:	2b05      	cmp	r3, #5
 801888c:	d026      	beq.n	80188dc <UART_SetConfig+0x694>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018892:	2b06      	cmp	r3, #6
 8018894:	d020      	beq.n	80188d8 <UART_SetConfig+0x690>
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801889a:	2b07      	cmp	r3, #7
 801889c:	d01a      	beq.n	80188d4 <UART_SetConfig+0x68c>
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188a2:	2b08      	cmp	r3, #8
 80188a4:	d014      	beq.n	80188d0 <UART_SetConfig+0x688>
 80188a6:	687b      	ldr	r3, [r7, #4]
 80188a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188aa:	2b09      	cmp	r3, #9
 80188ac:	d00e      	beq.n	80188cc <UART_SetConfig+0x684>
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188b2:	2b0a      	cmp	r3, #10
 80188b4:	d008      	beq.n	80188c8 <UART_SetConfig+0x680>
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80188ba:	2b0b      	cmp	r3, #11
 80188bc:	d102      	bne.n	80188c4 <UART_SetConfig+0x67c>
 80188be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80188c2:	e020      	b.n	8018906 <UART_SetConfig+0x6be>
 80188c4:	2301      	movs	r3, #1
 80188c6:	e01e      	b.n	8018906 <UART_SetConfig+0x6be>
 80188c8:	2380      	movs	r3, #128	; 0x80
 80188ca:	e01c      	b.n	8018906 <UART_SetConfig+0x6be>
 80188cc:	2340      	movs	r3, #64	; 0x40
 80188ce:	e01a      	b.n	8018906 <UART_SetConfig+0x6be>
 80188d0:	2320      	movs	r3, #32
 80188d2:	e018      	b.n	8018906 <UART_SetConfig+0x6be>
 80188d4:	2310      	movs	r3, #16
 80188d6:	e016      	b.n	8018906 <UART_SetConfig+0x6be>
 80188d8:	230c      	movs	r3, #12
 80188da:	e014      	b.n	8018906 <UART_SetConfig+0x6be>
 80188dc:	230a      	movs	r3, #10
 80188de:	e012      	b.n	8018906 <UART_SetConfig+0x6be>
 80188e0:	40011400 	.word	0x40011400
 80188e4:	58024400 	.word	0x58024400
 80188e8:	40007800 	.word	0x40007800
 80188ec:	40007c00 	.word	0x40007c00
 80188f0:	58000c00 	.word	0x58000c00
 80188f4:	2308      	movs	r3, #8
 80188f6:	e006      	b.n	8018906 <UART_SetConfig+0x6be>
 80188f8:	2306      	movs	r3, #6
 80188fa:	e004      	b.n	8018906 <UART_SetConfig+0x6be>
 80188fc:	2304      	movs	r3, #4
 80188fe:	e002      	b.n	8018906 <UART_SetConfig+0x6be>
 8018900:	2302      	movs	r3, #2
 8018902:	e000      	b.n	8018906 <UART_SetConfig+0x6be>
 8018904:	2301      	movs	r3, #1
 8018906:	fbb2 f3f3 	udiv	r3, r2, r3
 801890a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801890c:	e219      	b.n	8018d42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801890e:	f107 0318 	add.w	r3, r7, #24
 8018912:	4618      	mov	r0, r3
 8018914:	f7fd fecc 	bl	80166b0 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018918:	69fa      	ldr	r2, [r7, #28]
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801891e:	2b00      	cmp	r3, #0
 8018920:	d044      	beq.n	80189ac <UART_SetConfig+0x764>
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018926:	2b01      	cmp	r3, #1
 8018928:	d03e      	beq.n	80189a8 <UART_SetConfig+0x760>
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801892e:	2b02      	cmp	r3, #2
 8018930:	d038      	beq.n	80189a4 <UART_SetConfig+0x75c>
 8018932:	687b      	ldr	r3, [r7, #4]
 8018934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018936:	2b03      	cmp	r3, #3
 8018938:	d032      	beq.n	80189a0 <UART_SetConfig+0x758>
 801893a:	687b      	ldr	r3, [r7, #4]
 801893c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801893e:	2b04      	cmp	r3, #4
 8018940:	d02c      	beq.n	801899c <UART_SetConfig+0x754>
 8018942:	687b      	ldr	r3, [r7, #4]
 8018944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018946:	2b05      	cmp	r3, #5
 8018948:	d026      	beq.n	8018998 <UART_SetConfig+0x750>
 801894a:	687b      	ldr	r3, [r7, #4]
 801894c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801894e:	2b06      	cmp	r3, #6
 8018950:	d020      	beq.n	8018994 <UART_SetConfig+0x74c>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018956:	2b07      	cmp	r3, #7
 8018958:	d01a      	beq.n	8018990 <UART_SetConfig+0x748>
 801895a:	687b      	ldr	r3, [r7, #4]
 801895c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801895e:	2b08      	cmp	r3, #8
 8018960:	d014      	beq.n	801898c <UART_SetConfig+0x744>
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018966:	2b09      	cmp	r3, #9
 8018968:	d00e      	beq.n	8018988 <UART_SetConfig+0x740>
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801896e:	2b0a      	cmp	r3, #10
 8018970:	d008      	beq.n	8018984 <UART_SetConfig+0x73c>
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018976:	2b0b      	cmp	r3, #11
 8018978:	d102      	bne.n	8018980 <UART_SetConfig+0x738>
 801897a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801897e:	e016      	b.n	80189ae <UART_SetConfig+0x766>
 8018980:	2301      	movs	r3, #1
 8018982:	e014      	b.n	80189ae <UART_SetConfig+0x766>
 8018984:	2380      	movs	r3, #128	; 0x80
 8018986:	e012      	b.n	80189ae <UART_SetConfig+0x766>
 8018988:	2340      	movs	r3, #64	; 0x40
 801898a:	e010      	b.n	80189ae <UART_SetConfig+0x766>
 801898c:	2320      	movs	r3, #32
 801898e:	e00e      	b.n	80189ae <UART_SetConfig+0x766>
 8018990:	2310      	movs	r3, #16
 8018992:	e00c      	b.n	80189ae <UART_SetConfig+0x766>
 8018994:	230c      	movs	r3, #12
 8018996:	e00a      	b.n	80189ae <UART_SetConfig+0x766>
 8018998:	230a      	movs	r3, #10
 801899a:	e008      	b.n	80189ae <UART_SetConfig+0x766>
 801899c:	2308      	movs	r3, #8
 801899e:	e006      	b.n	80189ae <UART_SetConfig+0x766>
 80189a0:	2306      	movs	r3, #6
 80189a2:	e004      	b.n	80189ae <UART_SetConfig+0x766>
 80189a4:	2304      	movs	r3, #4
 80189a6:	e002      	b.n	80189ae <UART_SetConfig+0x766>
 80189a8:	2302      	movs	r3, #2
 80189aa:	e000      	b.n	80189ae <UART_SetConfig+0x766>
 80189ac:	2301      	movs	r3, #1
 80189ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80189b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80189b4:	e1c5      	b.n	8018d42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80189b6:	f107 030c 	add.w	r3, r7, #12
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7fd ffc4 	bl	8016948 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80189c0:	693a      	ldr	r2, [r7, #16]
 80189c2:	687b      	ldr	r3, [r7, #4]
 80189c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d044      	beq.n	8018a54 <UART_SetConfig+0x80c>
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ce:	2b01      	cmp	r3, #1
 80189d0:	d03e      	beq.n	8018a50 <UART_SetConfig+0x808>
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189d6:	2b02      	cmp	r3, #2
 80189d8:	d038      	beq.n	8018a4c <UART_SetConfig+0x804>
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189de:	2b03      	cmp	r3, #3
 80189e0:	d032      	beq.n	8018a48 <UART_SetConfig+0x800>
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189e6:	2b04      	cmp	r3, #4
 80189e8:	d02c      	beq.n	8018a44 <UART_SetConfig+0x7fc>
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ee:	2b05      	cmp	r3, #5
 80189f0:	d026      	beq.n	8018a40 <UART_SetConfig+0x7f8>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189f6:	2b06      	cmp	r3, #6
 80189f8:	d020      	beq.n	8018a3c <UART_SetConfig+0x7f4>
 80189fa:	687b      	ldr	r3, [r7, #4]
 80189fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189fe:	2b07      	cmp	r3, #7
 8018a00:	d01a      	beq.n	8018a38 <UART_SetConfig+0x7f0>
 8018a02:	687b      	ldr	r3, [r7, #4]
 8018a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a06:	2b08      	cmp	r3, #8
 8018a08:	d014      	beq.n	8018a34 <UART_SetConfig+0x7ec>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a0e:	2b09      	cmp	r3, #9
 8018a10:	d00e      	beq.n	8018a30 <UART_SetConfig+0x7e8>
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a16:	2b0a      	cmp	r3, #10
 8018a18:	d008      	beq.n	8018a2c <UART_SetConfig+0x7e4>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a1e:	2b0b      	cmp	r3, #11
 8018a20:	d102      	bne.n	8018a28 <UART_SetConfig+0x7e0>
 8018a22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018a26:	e016      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a28:	2301      	movs	r3, #1
 8018a2a:	e014      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a2c:	2380      	movs	r3, #128	; 0x80
 8018a2e:	e012      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a30:	2340      	movs	r3, #64	; 0x40
 8018a32:	e010      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a34:	2320      	movs	r3, #32
 8018a36:	e00e      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a38:	2310      	movs	r3, #16
 8018a3a:	e00c      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a3c:	230c      	movs	r3, #12
 8018a3e:	e00a      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a40:	230a      	movs	r3, #10
 8018a42:	e008      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a44:	2308      	movs	r3, #8
 8018a46:	e006      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a48:	2306      	movs	r3, #6
 8018a4a:	e004      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a4c:	2304      	movs	r3, #4
 8018a4e:	e002      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a50:	2302      	movs	r3, #2
 8018a52:	e000      	b.n	8018a56 <UART_SetConfig+0x80e>
 8018a54:	2301      	movs	r3, #1
 8018a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8018a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018a5c:	e171      	b.n	8018d42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8018a5e:	4b7a      	ldr	r3, [pc, #488]	; (8018c48 <UART_SetConfig+0xa00>)
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	f003 0320 	and.w	r3, r3, #32
 8018a66:	2b00      	cmp	r3, #0
 8018a68:	d054      	beq.n	8018b14 <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018a6a:	4b77      	ldr	r3, [pc, #476]	; (8018c48 <UART_SetConfig+0xa00>)
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	08db      	lsrs	r3, r3, #3
 8018a70:	f003 0303 	and.w	r3, r3, #3
 8018a74:	4a75      	ldr	r2, [pc, #468]	; (8018c4c <UART_SetConfig+0xa04>)
 8018a76:	40da      	lsrs	r2, r3
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d044      	beq.n	8018b0a <UART_SetConfig+0x8c2>
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a84:	2b01      	cmp	r3, #1
 8018a86:	d03e      	beq.n	8018b06 <UART_SetConfig+0x8be>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a8c:	2b02      	cmp	r3, #2
 8018a8e:	d038      	beq.n	8018b02 <UART_SetConfig+0x8ba>
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a94:	2b03      	cmp	r3, #3
 8018a96:	d032      	beq.n	8018afe <UART_SetConfig+0x8b6>
 8018a98:	687b      	ldr	r3, [r7, #4]
 8018a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a9c:	2b04      	cmp	r3, #4
 8018a9e:	d02c      	beq.n	8018afa <UART_SetConfig+0x8b2>
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aa4:	2b05      	cmp	r3, #5
 8018aa6:	d026      	beq.n	8018af6 <UART_SetConfig+0x8ae>
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aac:	2b06      	cmp	r3, #6
 8018aae:	d020      	beq.n	8018af2 <UART_SetConfig+0x8aa>
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab4:	2b07      	cmp	r3, #7
 8018ab6:	d01a      	beq.n	8018aee <UART_SetConfig+0x8a6>
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018abc:	2b08      	cmp	r3, #8
 8018abe:	d014      	beq.n	8018aea <UART_SetConfig+0x8a2>
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac4:	2b09      	cmp	r3, #9
 8018ac6:	d00e      	beq.n	8018ae6 <UART_SetConfig+0x89e>
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018acc:	2b0a      	cmp	r3, #10
 8018ace:	d008      	beq.n	8018ae2 <UART_SetConfig+0x89a>
 8018ad0:	687b      	ldr	r3, [r7, #4]
 8018ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ad4:	2b0b      	cmp	r3, #11
 8018ad6:	d102      	bne.n	8018ade <UART_SetConfig+0x896>
 8018ad8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018adc:	e016      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018ade:	2301      	movs	r3, #1
 8018ae0:	e014      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018ae2:	2380      	movs	r3, #128	; 0x80
 8018ae4:	e012      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018ae6:	2340      	movs	r3, #64	; 0x40
 8018ae8:	e010      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018aea:	2320      	movs	r3, #32
 8018aec:	e00e      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018aee:	2310      	movs	r3, #16
 8018af0:	e00c      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018af2:	230c      	movs	r3, #12
 8018af4:	e00a      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018af6:	230a      	movs	r3, #10
 8018af8:	e008      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018afa:	2308      	movs	r3, #8
 8018afc:	e006      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018afe:	2306      	movs	r3, #6
 8018b00:	e004      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018b02:	2304      	movs	r3, #4
 8018b04:	e002      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018b06:	2302      	movs	r3, #2
 8018b08:	e000      	b.n	8018b0c <UART_SetConfig+0x8c4>
 8018b0a:	2301      	movs	r3, #1
 8018b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8018b10:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 8018b12:	e116      	b.n	8018d42 <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d043      	beq.n	8018ba4 <UART_SetConfig+0x95c>
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b20:	2b01      	cmp	r3, #1
 8018b22:	d03d      	beq.n	8018ba0 <UART_SetConfig+0x958>
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b28:	2b02      	cmp	r3, #2
 8018b2a:	d037      	beq.n	8018b9c <UART_SetConfig+0x954>
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b30:	2b03      	cmp	r3, #3
 8018b32:	d031      	beq.n	8018b98 <UART_SetConfig+0x950>
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b38:	2b04      	cmp	r3, #4
 8018b3a:	d02b      	beq.n	8018b94 <UART_SetConfig+0x94c>
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b40:	2b05      	cmp	r3, #5
 8018b42:	d025      	beq.n	8018b90 <UART_SetConfig+0x948>
 8018b44:	687b      	ldr	r3, [r7, #4]
 8018b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b48:	2b06      	cmp	r3, #6
 8018b4a:	d01f      	beq.n	8018b8c <UART_SetConfig+0x944>
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b50:	2b07      	cmp	r3, #7
 8018b52:	d019      	beq.n	8018b88 <UART_SetConfig+0x940>
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b58:	2b08      	cmp	r3, #8
 8018b5a:	d013      	beq.n	8018b84 <UART_SetConfig+0x93c>
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b60:	2b09      	cmp	r3, #9
 8018b62:	d00d      	beq.n	8018b80 <UART_SetConfig+0x938>
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b68:	2b0a      	cmp	r3, #10
 8018b6a:	d007      	beq.n	8018b7c <UART_SetConfig+0x934>
 8018b6c:	687b      	ldr	r3, [r7, #4]
 8018b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018b70:	2b0b      	cmp	r3, #11
 8018b72:	d101      	bne.n	8018b78 <UART_SetConfig+0x930>
 8018b74:	4b36      	ldr	r3, [pc, #216]	; (8018c50 <UART_SetConfig+0xa08>)
 8018b76:	e016      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b78:	4b34      	ldr	r3, [pc, #208]	; (8018c4c <UART_SetConfig+0xa04>)
 8018b7a:	e014      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b7c:	4b35      	ldr	r3, [pc, #212]	; (8018c54 <UART_SetConfig+0xa0c>)
 8018b7e:	e012      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b80:	4b35      	ldr	r3, [pc, #212]	; (8018c58 <UART_SetConfig+0xa10>)
 8018b82:	e010      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b84:	4b35      	ldr	r3, [pc, #212]	; (8018c5c <UART_SetConfig+0xa14>)
 8018b86:	e00e      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b88:	4b35      	ldr	r3, [pc, #212]	; (8018c60 <UART_SetConfig+0xa18>)
 8018b8a:	e00c      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b8c:	4b35      	ldr	r3, [pc, #212]	; (8018c64 <UART_SetConfig+0xa1c>)
 8018b8e:	e00a      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b90:	4b35      	ldr	r3, [pc, #212]	; (8018c68 <UART_SetConfig+0xa20>)
 8018b92:	e008      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b94:	4b35      	ldr	r3, [pc, #212]	; (8018c6c <UART_SetConfig+0xa24>)
 8018b96:	e006      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b98:	4b35      	ldr	r3, [pc, #212]	; (8018c70 <UART_SetConfig+0xa28>)
 8018b9a:	e004      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018b9c:	4b35      	ldr	r3, [pc, #212]	; (8018c74 <UART_SetConfig+0xa2c>)
 8018b9e:	e002      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018ba0:	4b35      	ldr	r3, [pc, #212]	; (8018c78 <UART_SetConfig+0xa30>)
 8018ba2:	e000      	b.n	8018ba6 <UART_SetConfig+0x95e>
 8018ba4:	4b29      	ldr	r3, [pc, #164]	; (8018c4c <UART_SetConfig+0xa04>)
 8018ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018ba8:	e0cb      	b.n	8018d42 <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d046      	beq.n	8018c40 <UART_SetConfig+0x9f8>
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bb6:	2b01      	cmp	r3, #1
 8018bb8:	d040      	beq.n	8018c3c <UART_SetConfig+0x9f4>
 8018bba:	687b      	ldr	r3, [r7, #4]
 8018bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bbe:	2b02      	cmp	r3, #2
 8018bc0:	d03a      	beq.n	8018c38 <UART_SetConfig+0x9f0>
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bc6:	2b03      	cmp	r3, #3
 8018bc8:	d034      	beq.n	8018c34 <UART_SetConfig+0x9ec>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bce:	2b04      	cmp	r3, #4
 8018bd0:	d02e      	beq.n	8018c30 <UART_SetConfig+0x9e8>
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bd6:	2b05      	cmp	r3, #5
 8018bd8:	d028      	beq.n	8018c2c <UART_SetConfig+0x9e4>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bde:	2b06      	cmp	r3, #6
 8018be0:	d022      	beq.n	8018c28 <UART_SetConfig+0x9e0>
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018be6:	2b07      	cmp	r3, #7
 8018be8:	d01c      	beq.n	8018c24 <UART_SetConfig+0x9dc>
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bee:	2b08      	cmp	r3, #8
 8018bf0:	d016      	beq.n	8018c20 <UART_SetConfig+0x9d8>
 8018bf2:	687b      	ldr	r3, [r7, #4]
 8018bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bf6:	2b09      	cmp	r3, #9
 8018bf8:	d00f      	beq.n	8018c1a <UART_SetConfig+0x9d2>
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bfe:	2b0a      	cmp	r3, #10
 8018c00:	d008      	beq.n	8018c14 <UART_SetConfig+0x9cc>
 8018c02:	687b      	ldr	r3, [r7, #4]
 8018c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c06:	2b0b      	cmp	r3, #11
 8018c08:	d102      	bne.n	8018c10 <UART_SetConfig+0x9c8>
 8018c0a:	f643 5309 	movw	r3, #15625	; 0x3d09
 8018c0e:	e018      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c10:	4b13      	ldr	r3, [pc, #76]	; (8018c60 <UART_SetConfig+0xa18>)
 8018c12:	e016      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c14:	f647 2312 	movw	r3, #31250	; 0x7a12
 8018c18:	e013      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c1a:	f24f 4324 	movw	r3, #62500	; 0xf424
 8018c1e:	e010      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c20:	4b16      	ldr	r3, [pc, #88]	; (8018c7c <UART_SetConfig+0xa34>)
 8018c22:	e00e      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c24:	4b0a      	ldr	r3, [pc, #40]	; (8018c50 <UART_SetConfig+0xa08>)
 8018c26:	e00c      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c28:	4b15      	ldr	r3, [pc, #84]	; (8018c80 <UART_SetConfig+0xa38>)
 8018c2a:	e00a      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c2c:	4b15      	ldr	r3, [pc, #84]	; (8018c84 <UART_SetConfig+0xa3c>)
 8018c2e:	e008      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c30:	4b08      	ldr	r3, [pc, #32]	; (8018c54 <UART_SetConfig+0xa0c>)
 8018c32:	e006      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c34:	4b14      	ldr	r3, [pc, #80]	; (8018c88 <UART_SetConfig+0xa40>)
 8018c36:	e004      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c38:	4b07      	ldr	r3, [pc, #28]	; (8018c58 <UART_SetConfig+0xa10>)
 8018c3a:	e002      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c3c:	4b07      	ldr	r3, [pc, #28]	; (8018c5c <UART_SetConfig+0xa14>)
 8018c3e:	e000      	b.n	8018c42 <UART_SetConfig+0x9fa>
 8018c40:	4b07      	ldr	r3, [pc, #28]	; (8018c60 <UART_SetConfig+0xa18>)
 8018c42:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018c44:	e07d      	b.n	8018d42 <UART_SetConfig+0xafa>
 8018c46:	bf00      	nop
 8018c48:	58024400 	.word	0x58024400
 8018c4c:	03d09000 	.word	0x03d09000
 8018c50:	0003d090 	.word	0x0003d090
 8018c54:	0007a120 	.word	0x0007a120
 8018c58:	000f4240 	.word	0x000f4240
 8018c5c:	001e8480 	.word	0x001e8480
 8018c60:	003d0900 	.word	0x003d0900
 8018c64:	00516155 	.word	0x00516155
 8018c68:	0061a800 	.word	0x0061a800
 8018c6c:	007a1200 	.word	0x007a1200
 8018c70:	00a2c2aa 	.word	0x00a2c2aa
 8018c74:	00f42400 	.word	0x00f42400
 8018c78:	01e84800 	.word	0x01e84800
 8018c7c:	0001e848 	.word	0x0001e848
 8018c80:	00051615 	.word	0x00051615
 8018c84:	00061a80 	.word	0x00061a80
 8018c88:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8018c8c:	687b      	ldr	r3, [r7, #4]
 8018c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d04e      	beq.n	8018d32 <UART_SetConfig+0xaea>
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018c98:	2b01      	cmp	r3, #1
 8018c9a:	d047      	beq.n	8018d2c <UART_SetConfig+0xae4>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ca0:	2b02      	cmp	r3, #2
 8018ca2:	d040      	beq.n	8018d26 <UART_SetConfig+0xade>
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ca8:	2b03      	cmp	r3, #3
 8018caa:	d039      	beq.n	8018d20 <UART_SetConfig+0xad8>
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb0:	2b04      	cmp	r3, #4
 8018cb2:	d032      	beq.n	8018d1a <UART_SetConfig+0xad2>
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cb8:	2b05      	cmp	r3, #5
 8018cba:	d02b      	beq.n	8018d14 <UART_SetConfig+0xacc>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc0:	2b06      	cmp	r3, #6
 8018cc2:	d024      	beq.n	8018d0e <UART_SetConfig+0xac6>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cc8:	2b07      	cmp	r3, #7
 8018cca:	d01d      	beq.n	8018d08 <UART_SetConfig+0xac0>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd0:	2b08      	cmp	r3, #8
 8018cd2:	d016      	beq.n	8018d02 <UART_SetConfig+0xaba>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018cd8:	2b09      	cmp	r3, #9
 8018cda:	d00f      	beq.n	8018cfc <UART_SetConfig+0xab4>
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce0:	2b0a      	cmp	r3, #10
 8018ce2:	d008      	beq.n	8018cf6 <UART_SetConfig+0xaae>
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ce8:	2b0b      	cmp	r3, #11
 8018cea:	d101      	bne.n	8018cf0 <UART_SetConfig+0xaa8>
 8018cec:	2380      	movs	r3, #128	; 0x80
 8018cee:	e022      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018cf4:	e01f      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018cfa:	e01c      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018d00:	e019      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018d06:	e016      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018d0c:	e013      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d0e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8018d12:	e010      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d14:	f640 43cc 	movw	r3, #3276	; 0xccc
 8018d18:	e00d      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8018d1e:	e00a      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d20:	f241 5355 	movw	r3, #5461	; 0x1555
 8018d24:	e007      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018d2a:	e004      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8018d30:	e001      	b.n	8018d36 <UART_SetConfig+0xaee>
 8018d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8018d36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8018d38:	e003      	b.n	8018d42 <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8018d3a:	2301      	movs	r3, #1
 8018d3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8018d40:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8018d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d44:	2b00      	cmp	r3, #0
 8018d46:	f001 83e8 	beq.w	801a51a <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	685a      	ldr	r2, [r3, #4]
 8018d4e:	4613      	mov	r3, r2
 8018d50:	005b      	lsls	r3, r3, #1
 8018d52:	4413      	add	r3, r2
 8018d54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d56:	429a      	cmp	r2, r3
 8018d58:	d305      	bcc.n	8018d66 <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8018d5a:	687b      	ldr	r3, [r7, #4]
 8018d5c:	685b      	ldr	r3, [r3, #4]
 8018d5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8018d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018d62:	429a      	cmp	r2, r3
 8018d64:	d904      	bls.n	8018d70 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 8018d66:	2301      	movs	r3, #1
 8018d68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8018d6c:	f001 bbd5 	b.w	801a51a <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8018d70:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8018d74:	2b08      	cmp	r3, #8
 8018d76:	f000 8154 	beq.w	8019022 <UART_SetConfig+0xdda>
 8018d7a:	2b08      	cmp	r3, #8
 8018d7c:	dc06      	bgt.n	8018d8c <UART_SetConfig+0xb44>
 8018d7e:	2b02      	cmp	r3, #2
 8018d80:	d00f      	beq.n	8018da2 <UART_SetConfig+0xb5a>
 8018d82:	2b04      	cmp	r3, #4
 8018d84:	f000 80ac 	beq.w	8018ee0 <UART_SetConfig+0xc98>
 8018d88:	f000 bc30 	b.w	80195ec <UART_SetConfig+0x13a4>
 8018d8c:	2b20      	cmp	r3, #32
 8018d8e:	f000 832d 	beq.w	80193ec <UART_SetConfig+0x11a4>
 8018d92:	2b40      	cmp	r3, #64	; 0x40
 8018d94:	f000 83a5 	beq.w	80194e2 <UART_SetConfig+0x129a>
 8018d98:	2b10      	cmp	r3, #16
 8018d9a:	f000 81e3 	beq.w	8019164 <UART_SetConfig+0xf1c>
 8018d9e:	f000 bc25 	b.w	80195ec <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8018da2:	f7fd fc6f 	bl	8016684 <HAL_RCCEx_GetD3PCLK1Freq>
 8018da6:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018daa:	4618      	mov	r0, r3
 8018dac:	f04f 0100 	mov.w	r1, #0
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d067      	beq.n	8018e88 <UART_SetConfig+0xc40>
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dbc:	2b01      	cmp	r3, #1
 8018dbe:	d05e      	beq.n	8018e7e <UART_SetConfig+0xc36>
 8018dc0:	687b      	ldr	r3, [r7, #4]
 8018dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc4:	2b02      	cmp	r3, #2
 8018dc6:	d055      	beq.n	8018e74 <UART_SetConfig+0xc2c>
 8018dc8:	687b      	ldr	r3, [r7, #4]
 8018dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dcc:	2b03      	cmp	r3, #3
 8018dce:	d04c      	beq.n	8018e6a <UART_SetConfig+0xc22>
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dd4:	2b04      	cmp	r3, #4
 8018dd6:	d043      	beq.n	8018e60 <UART_SetConfig+0xc18>
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ddc:	2b05      	cmp	r3, #5
 8018dde:	d03a      	beq.n	8018e56 <UART_SetConfig+0xc0e>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018de4:	2b06      	cmp	r3, #6
 8018de6:	d031      	beq.n	8018e4c <UART_SetConfig+0xc04>
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dec:	2b07      	cmp	r3, #7
 8018dee:	d028      	beq.n	8018e42 <UART_SetConfig+0xbfa>
 8018df0:	687b      	ldr	r3, [r7, #4]
 8018df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018df4:	2b08      	cmp	r3, #8
 8018df6:	d01f      	beq.n	8018e38 <UART_SetConfig+0xbf0>
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dfc:	2b09      	cmp	r3, #9
 8018dfe:	d016      	beq.n	8018e2e <UART_SetConfig+0xbe6>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e04:	2b0a      	cmp	r3, #10
 8018e06:	d00d      	beq.n	8018e24 <UART_SetConfig+0xbdc>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018e0c:	2b0b      	cmp	r3, #11
 8018e0e:	d104      	bne.n	8018e1a <UART_SetConfig+0xbd2>
 8018e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018e14:	f04f 0400 	mov.w	r4, #0
 8018e18:	e03a      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e1a:	f04f 0301 	mov.w	r3, #1
 8018e1e:	f04f 0400 	mov.w	r4, #0
 8018e22:	e035      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e24:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018e28:	f04f 0400 	mov.w	r4, #0
 8018e2c:	e030      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e2e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018e32:	f04f 0400 	mov.w	r4, #0
 8018e36:	e02b      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e38:	f04f 0320 	mov.w	r3, #32
 8018e3c:	f04f 0400 	mov.w	r4, #0
 8018e40:	e026      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e42:	f04f 0310 	mov.w	r3, #16
 8018e46:	f04f 0400 	mov.w	r4, #0
 8018e4a:	e021      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e4c:	f04f 030c 	mov.w	r3, #12
 8018e50:	f04f 0400 	mov.w	r4, #0
 8018e54:	e01c      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e56:	f04f 030a 	mov.w	r3, #10
 8018e5a:	f04f 0400 	mov.w	r4, #0
 8018e5e:	e017      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e60:	f04f 0308 	mov.w	r3, #8
 8018e64:	f04f 0400 	mov.w	r4, #0
 8018e68:	e012      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e6a:	f04f 0306 	mov.w	r3, #6
 8018e6e:	f04f 0400 	mov.w	r4, #0
 8018e72:	e00d      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e74:	f04f 0304 	mov.w	r3, #4
 8018e78:	f04f 0400 	mov.w	r4, #0
 8018e7c:	e008      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e7e:	f04f 0302 	mov.w	r3, #2
 8018e82:	f04f 0400 	mov.w	r4, #0
 8018e86:	e003      	b.n	8018e90 <UART_SetConfig+0xc48>
 8018e88:	f04f 0301 	mov.w	r3, #1
 8018e8c:	f04f 0400 	mov.w	r4, #0
 8018e90:	461a      	mov	r2, r3
 8018e92:	4623      	mov	r3, r4
 8018e94:	f7e7 fa28 	bl	80002e8 <__aeabi_uldivmod>
 8018e98:	4603      	mov	r3, r0
 8018e9a:	460c      	mov	r4, r1
 8018e9c:	4619      	mov	r1, r3
 8018e9e:	4622      	mov	r2, r4
 8018ea0:	f04f 0300 	mov.w	r3, #0
 8018ea4:	f04f 0400 	mov.w	r4, #0
 8018ea8:	0214      	lsls	r4, r2, #8
 8018eaa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018eae:	020b      	lsls	r3, r1, #8
 8018eb0:	687a      	ldr	r2, [r7, #4]
 8018eb2:	6852      	ldr	r2, [r2, #4]
 8018eb4:	0852      	lsrs	r2, r2, #1
 8018eb6:	4611      	mov	r1, r2
 8018eb8:	f04f 0200 	mov.w	r2, #0
 8018ebc:	eb13 0b01 	adds.w	fp, r3, r1
 8018ec0:	eb44 0c02 	adc.w	ip, r4, r2
 8018ec4:	4658      	mov	r0, fp
 8018ec6:	4661      	mov	r1, ip
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	685b      	ldr	r3, [r3, #4]
 8018ecc:	f04f 0400 	mov.w	r4, #0
 8018ed0:	461a      	mov	r2, r3
 8018ed2:	4623      	mov	r3, r4
 8018ed4:	f7e7 fa08 	bl	80002e8 <__aeabi_uldivmod>
 8018ed8:	4603      	mov	r3, r0
 8018eda:	460c      	mov	r4, r1
 8018edc:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8018ede:	e389      	b.n	80195f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8018ee0:	f107 0318 	add.w	r3, r7, #24
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fd fbe3 	bl	80166b0 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8018eea:	69fb      	ldr	r3, [r7, #28]
 8018eec:	4618      	mov	r0, r3
 8018eee:	f04f 0100 	mov.w	r1, #0
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	d067      	beq.n	8018fca <UART_SetConfig+0xd82>
 8018efa:	687b      	ldr	r3, [r7, #4]
 8018efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018efe:	2b01      	cmp	r3, #1
 8018f00:	d05e      	beq.n	8018fc0 <UART_SetConfig+0xd78>
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f06:	2b02      	cmp	r3, #2
 8018f08:	d055      	beq.n	8018fb6 <UART_SetConfig+0xd6e>
 8018f0a:	687b      	ldr	r3, [r7, #4]
 8018f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f0e:	2b03      	cmp	r3, #3
 8018f10:	d04c      	beq.n	8018fac <UART_SetConfig+0xd64>
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f16:	2b04      	cmp	r3, #4
 8018f18:	d043      	beq.n	8018fa2 <UART_SetConfig+0xd5a>
 8018f1a:	687b      	ldr	r3, [r7, #4]
 8018f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f1e:	2b05      	cmp	r3, #5
 8018f20:	d03a      	beq.n	8018f98 <UART_SetConfig+0xd50>
 8018f22:	687b      	ldr	r3, [r7, #4]
 8018f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f26:	2b06      	cmp	r3, #6
 8018f28:	d031      	beq.n	8018f8e <UART_SetConfig+0xd46>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f2e:	2b07      	cmp	r3, #7
 8018f30:	d028      	beq.n	8018f84 <UART_SetConfig+0xd3c>
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f36:	2b08      	cmp	r3, #8
 8018f38:	d01f      	beq.n	8018f7a <UART_SetConfig+0xd32>
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f3e:	2b09      	cmp	r3, #9
 8018f40:	d016      	beq.n	8018f70 <UART_SetConfig+0xd28>
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f46:	2b0a      	cmp	r3, #10
 8018f48:	d00d      	beq.n	8018f66 <UART_SetConfig+0xd1e>
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018f4e:	2b0b      	cmp	r3, #11
 8018f50:	d104      	bne.n	8018f5c <UART_SetConfig+0xd14>
 8018f52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8018f56:	f04f 0400 	mov.w	r4, #0
 8018f5a:	e03a      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f5c:	f04f 0301 	mov.w	r3, #1
 8018f60:	f04f 0400 	mov.w	r4, #0
 8018f64:	e035      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8018f6a:	f04f 0400 	mov.w	r4, #0
 8018f6e:	e030      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f70:	f04f 0340 	mov.w	r3, #64	; 0x40
 8018f74:	f04f 0400 	mov.w	r4, #0
 8018f78:	e02b      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f7a:	f04f 0320 	mov.w	r3, #32
 8018f7e:	f04f 0400 	mov.w	r4, #0
 8018f82:	e026      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f84:	f04f 0310 	mov.w	r3, #16
 8018f88:	f04f 0400 	mov.w	r4, #0
 8018f8c:	e021      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f8e:	f04f 030c 	mov.w	r3, #12
 8018f92:	f04f 0400 	mov.w	r4, #0
 8018f96:	e01c      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018f98:	f04f 030a 	mov.w	r3, #10
 8018f9c:	f04f 0400 	mov.w	r4, #0
 8018fa0:	e017      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018fa2:	f04f 0308 	mov.w	r3, #8
 8018fa6:	f04f 0400 	mov.w	r4, #0
 8018faa:	e012      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018fac:	f04f 0306 	mov.w	r3, #6
 8018fb0:	f04f 0400 	mov.w	r4, #0
 8018fb4:	e00d      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018fb6:	f04f 0304 	mov.w	r3, #4
 8018fba:	f04f 0400 	mov.w	r4, #0
 8018fbe:	e008      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018fc0:	f04f 0302 	mov.w	r3, #2
 8018fc4:	f04f 0400 	mov.w	r4, #0
 8018fc8:	e003      	b.n	8018fd2 <UART_SetConfig+0xd8a>
 8018fca:	f04f 0301 	mov.w	r3, #1
 8018fce:	f04f 0400 	mov.w	r4, #0
 8018fd2:	461a      	mov	r2, r3
 8018fd4:	4623      	mov	r3, r4
 8018fd6:	f7e7 f987 	bl	80002e8 <__aeabi_uldivmod>
 8018fda:	4603      	mov	r3, r0
 8018fdc:	460c      	mov	r4, r1
 8018fde:	4619      	mov	r1, r3
 8018fe0:	4622      	mov	r2, r4
 8018fe2:	f04f 0300 	mov.w	r3, #0
 8018fe6:	f04f 0400 	mov.w	r4, #0
 8018fea:	0214      	lsls	r4, r2, #8
 8018fec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8018ff0:	020b      	lsls	r3, r1, #8
 8018ff2:	687a      	ldr	r2, [r7, #4]
 8018ff4:	6852      	ldr	r2, [r2, #4]
 8018ff6:	0852      	lsrs	r2, r2, #1
 8018ff8:	4611      	mov	r1, r2
 8018ffa:	f04f 0200 	mov.w	r2, #0
 8018ffe:	eb13 0b01 	adds.w	fp, r3, r1
 8019002:	eb44 0c02 	adc.w	ip, r4, r2
 8019006:	4658      	mov	r0, fp
 8019008:	4661      	mov	r1, ip
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	685b      	ldr	r3, [r3, #4]
 801900e:	f04f 0400 	mov.w	r4, #0
 8019012:	461a      	mov	r2, r3
 8019014:	4623      	mov	r3, r4
 8019016:	f7e7 f967 	bl	80002e8 <__aeabi_uldivmod>
 801901a:	4603      	mov	r3, r0
 801901c:	460c      	mov	r4, r1
 801901e:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019020:	e2e8      	b.n	80195f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8019022:	f107 030c 	add.w	r3, r7, #12
 8019026:	4618      	mov	r0, r3
 8019028:	f7fd fc8e 	bl	8016948 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801902c:	693b      	ldr	r3, [r7, #16]
 801902e:	4618      	mov	r0, r3
 8019030:	f04f 0100 	mov.w	r1, #0
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019038:	2b00      	cmp	r3, #0
 801903a:	d067      	beq.n	801910c <UART_SetConfig+0xec4>
 801903c:	687b      	ldr	r3, [r7, #4]
 801903e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019040:	2b01      	cmp	r3, #1
 8019042:	d05e      	beq.n	8019102 <UART_SetConfig+0xeba>
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019048:	2b02      	cmp	r3, #2
 801904a:	d055      	beq.n	80190f8 <UART_SetConfig+0xeb0>
 801904c:	687b      	ldr	r3, [r7, #4]
 801904e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019050:	2b03      	cmp	r3, #3
 8019052:	d04c      	beq.n	80190ee <UART_SetConfig+0xea6>
 8019054:	687b      	ldr	r3, [r7, #4]
 8019056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019058:	2b04      	cmp	r3, #4
 801905a:	d043      	beq.n	80190e4 <UART_SetConfig+0xe9c>
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019060:	2b05      	cmp	r3, #5
 8019062:	d03a      	beq.n	80190da <UART_SetConfig+0xe92>
 8019064:	687b      	ldr	r3, [r7, #4]
 8019066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019068:	2b06      	cmp	r3, #6
 801906a:	d031      	beq.n	80190d0 <UART_SetConfig+0xe88>
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019070:	2b07      	cmp	r3, #7
 8019072:	d028      	beq.n	80190c6 <UART_SetConfig+0xe7e>
 8019074:	687b      	ldr	r3, [r7, #4]
 8019076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019078:	2b08      	cmp	r3, #8
 801907a:	d01f      	beq.n	80190bc <UART_SetConfig+0xe74>
 801907c:	687b      	ldr	r3, [r7, #4]
 801907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019080:	2b09      	cmp	r3, #9
 8019082:	d016      	beq.n	80190b2 <UART_SetConfig+0xe6a>
 8019084:	687b      	ldr	r3, [r7, #4]
 8019086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019088:	2b0a      	cmp	r3, #10
 801908a:	d00d      	beq.n	80190a8 <UART_SetConfig+0xe60>
 801908c:	687b      	ldr	r3, [r7, #4]
 801908e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019090:	2b0b      	cmp	r3, #11
 8019092:	d104      	bne.n	801909e <UART_SetConfig+0xe56>
 8019094:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019098:	f04f 0400 	mov.w	r4, #0
 801909c:	e03a      	b.n	8019114 <UART_SetConfig+0xecc>
 801909e:	f04f 0301 	mov.w	r3, #1
 80190a2:	f04f 0400 	mov.w	r4, #0
 80190a6:	e035      	b.n	8019114 <UART_SetConfig+0xecc>
 80190a8:	f04f 0380 	mov.w	r3, #128	; 0x80
 80190ac:	f04f 0400 	mov.w	r4, #0
 80190b0:	e030      	b.n	8019114 <UART_SetConfig+0xecc>
 80190b2:	f04f 0340 	mov.w	r3, #64	; 0x40
 80190b6:	f04f 0400 	mov.w	r4, #0
 80190ba:	e02b      	b.n	8019114 <UART_SetConfig+0xecc>
 80190bc:	f04f 0320 	mov.w	r3, #32
 80190c0:	f04f 0400 	mov.w	r4, #0
 80190c4:	e026      	b.n	8019114 <UART_SetConfig+0xecc>
 80190c6:	f04f 0310 	mov.w	r3, #16
 80190ca:	f04f 0400 	mov.w	r4, #0
 80190ce:	e021      	b.n	8019114 <UART_SetConfig+0xecc>
 80190d0:	f04f 030c 	mov.w	r3, #12
 80190d4:	f04f 0400 	mov.w	r4, #0
 80190d8:	e01c      	b.n	8019114 <UART_SetConfig+0xecc>
 80190da:	f04f 030a 	mov.w	r3, #10
 80190de:	f04f 0400 	mov.w	r4, #0
 80190e2:	e017      	b.n	8019114 <UART_SetConfig+0xecc>
 80190e4:	f04f 0308 	mov.w	r3, #8
 80190e8:	f04f 0400 	mov.w	r4, #0
 80190ec:	e012      	b.n	8019114 <UART_SetConfig+0xecc>
 80190ee:	f04f 0306 	mov.w	r3, #6
 80190f2:	f04f 0400 	mov.w	r4, #0
 80190f6:	e00d      	b.n	8019114 <UART_SetConfig+0xecc>
 80190f8:	f04f 0304 	mov.w	r3, #4
 80190fc:	f04f 0400 	mov.w	r4, #0
 8019100:	e008      	b.n	8019114 <UART_SetConfig+0xecc>
 8019102:	f04f 0302 	mov.w	r3, #2
 8019106:	f04f 0400 	mov.w	r4, #0
 801910a:	e003      	b.n	8019114 <UART_SetConfig+0xecc>
 801910c:	f04f 0301 	mov.w	r3, #1
 8019110:	f04f 0400 	mov.w	r4, #0
 8019114:	461a      	mov	r2, r3
 8019116:	4623      	mov	r3, r4
 8019118:	f7e7 f8e6 	bl	80002e8 <__aeabi_uldivmod>
 801911c:	4603      	mov	r3, r0
 801911e:	460c      	mov	r4, r1
 8019120:	4619      	mov	r1, r3
 8019122:	4622      	mov	r2, r4
 8019124:	f04f 0300 	mov.w	r3, #0
 8019128:	f04f 0400 	mov.w	r4, #0
 801912c:	0214      	lsls	r4, r2, #8
 801912e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8019132:	020b      	lsls	r3, r1, #8
 8019134:	687a      	ldr	r2, [r7, #4]
 8019136:	6852      	ldr	r2, [r2, #4]
 8019138:	0852      	lsrs	r2, r2, #1
 801913a:	4611      	mov	r1, r2
 801913c:	f04f 0200 	mov.w	r2, #0
 8019140:	eb13 0b01 	adds.w	fp, r3, r1
 8019144:	eb44 0c02 	adc.w	ip, r4, r2
 8019148:	4658      	mov	r0, fp
 801914a:	4661      	mov	r1, ip
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	685b      	ldr	r3, [r3, #4]
 8019150:	f04f 0400 	mov.w	r4, #0
 8019154:	461a      	mov	r2, r3
 8019156:	4623      	mov	r3, r4
 8019158:	f7e7 f8c6 	bl	80002e8 <__aeabi_uldivmod>
 801915c:	4603      	mov	r3, r0
 801915e:	460c      	mov	r4, r1
 8019160:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8019162:	e247      	b.n	80195f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019164:	4b96      	ldr	r3, [pc, #600]	; (80193c0 <UART_SetConfig+0x1178>)
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	f003 0320 	and.w	r3, r3, #32
 801916c:	2b00      	cmp	r3, #0
 801916e:	f000 80a3 	beq.w	80192b8 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019172:	4b93      	ldr	r3, [pc, #588]	; (80193c0 <UART_SetConfig+0x1178>)
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	08db      	lsrs	r3, r3, #3
 8019178:	f003 0303 	and.w	r3, r3, #3
 801917c:	4a91      	ldr	r2, [pc, #580]	; (80193c4 <UART_SetConfig+0x117c>)
 801917e:	fa22 f303 	lsr.w	r3, r2, r3
 8019182:	4618      	mov	r0, r3
 8019184:	f04f 0100 	mov.w	r1, #0
 8019188:	687b      	ldr	r3, [r7, #4]
 801918a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801918c:	2b00      	cmp	r3, #0
 801918e:	d067      	beq.n	8019260 <UART_SetConfig+0x1018>
 8019190:	687b      	ldr	r3, [r7, #4]
 8019192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019194:	2b01      	cmp	r3, #1
 8019196:	d05e      	beq.n	8019256 <UART_SetConfig+0x100e>
 8019198:	687b      	ldr	r3, [r7, #4]
 801919a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801919c:	2b02      	cmp	r3, #2
 801919e:	d055      	beq.n	801924c <UART_SetConfig+0x1004>
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191a4:	2b03      	cmp	r3, #3
 80191a6:	d04c      	beq.n	8019242 <UART_SetConfig+0xffa>
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191ac:	2b04      	cmp	r3, #4
 80191ae:	d043      	beq.n	8019238 <UART_SetConfig+0xff0>
 80191b0:	687b      	ldr	r3, [r7, #4]
 80191b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191b4:	2b05      	cmp	r3, #5
 80191b6:	d03a      	beq.n	801922e <UART_SetConfig+0xfe6>
 80191b8:	687b      	ldr	r3, [r7, #4]
 80191ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191bc:	2b06      	cmp	r3, #6
 80191be:	d031      	beq.n	8019224 <UART_SetConfig+0xfdc>
 80191c0:	687b      	ldr	r3, [r7, #4]
 80191c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191c4:	2b07      	cmp	r3, #7
 80191c6:	d028      	beq.n	801921a <UART_SetConfig+0xfd2>
 80191c8:	687b      	ldr	r3, [r7, #4]
 80191ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191cc:	2b08      	cmp	r3, #8
 80191ce:	d01f      	beq.n	8019210 <UART_SetConfig+0xfc8>
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191d4:	2b09      	cmp	r3, #9
 80191d6:	d016      	beq.n	8019206 <UART_SetConfig+0xfbe>
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191dc:	2b0a      	cmp	r3, #10
 80191de:	d00d      	beq.n	80191fc <UART_SetConfig+0xfb4>
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80191e4:	2b0b      	cmp	r3, #11
 80191e6:	d104      	bne.n	80191f2 <UART_SetConfig+0xfaa>
 80191e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80191ec:	f04f 0400 	mov.w	r4, #0
 80191f0:	e03a      	b.n	8019268 <UART_SetConfig+0x1020>
 80191f2:	f04f 0301 	mov.w	r3, #1
 80191f6:	f04f 0400 	mov.w	r4, #0
 80191fa:	e035      	b.n	8019268 <UART_SetConfig+0x1020>
 80191fc:	f04f 0380 	mov.w	r3, #128	; 0x80
 8019200:	f04f 0400 	mov.w	r4, #0
 8019204:	e030      	b.n	8019268 <UART_SetConfig+0x1020>
 8019206:	f04f 0340 	mov.w	r3, #64	; 0x40
 801920a:	f04f 0400 	mov.w	r4, #0
 801920e:	e02b      	b.n	8019268 <UART_SetConfig+0x1020>
 8019210:	f04f 0320 	mov.w	r3, #32
 8019214:	f04f 0400 	mov.w	r4, #0
 8019218:	e026      	b.n	8019268 <UART_SetConfig+0x1020>
 801921a:	f04f 0310 	mov.w	r3, #16
 801921e:	f04f 0400 	mov.w	r4, #0
 8019222:	e021      	b.n	8019268 <UART_SetConfig+0x1020>
 8019224:	f04f 030c 	mov.w	r3, #12
 8019228:	f04f 0400 	mov.w	r4, #0
 801922c:	e01c      	b.n	8019268 <UART_SetConfig+0x1020>
 801922e:	f04f 030a 	mov.w	r3, #10
 8019232:	f04f 0400 	mov.w	r4, #0
 8019236:	e017      	b.n	8019268 <UART_SetConfig+0x1020>
 8019238:	f04f 0308 	mov.w	r3, #8
 801923c:	f04f 0400 	mov.w	r4, #0
 8019240:	e012      	b.n	8019268 <UART_SetConfig+0x1020>
 8019242:	f04f 0306 	mov.w	r3, #6
 8019246:	f04f 0400 	mov.w	r4, #0
 801924a:	e00d      	b.n	8019268 <UART_SetConfig+0x1020>
 801924c:	f04f 0304 	mov.w	r3, #4
 8019250:	f04f 0400 	mov.w	r4, #0
 8019254:	e008      	b.n	8019268 <UART_SetConfig+0x1020>
 8019256:	f04f 0302 	mov.w	r3, #2
 801925a:	f04f 0400 	mov.w	r4, #0
 801925e:	e003      	b.n	8019268 <UART_SetConfig+0x1020>
 8019260:	f04f 0301 	mov.w	r3, #1
 8019264:	f04f 0400 	mov.w	r4, #0
 8019268:	461a      	mov	r2, r3
 801926a:	4623      	mov	r3, r4
 801926c:	f7e7 f83c 	bl	80002e8 <__aeabi_uldivmod>
 8019270:	4603      	mov	r3, r0
 8019272:	460c      	mov	r4, r1
 8019274:	4619      	mov	r1, r3
 8019276:	4622      	mov	r2, r4
 8019278:	f04f 0300 	mov.w	r3, #0
 801927c:	f04f 0400 	mov.w	r4, #0
 8019280:	0214      	lsls	r4, r2, #8
 8019282:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8019286:	020b      	lsls	r3, r1, #8
 8019288:	687a      	ldr	r2, [r7, #4]
 801928a:	6852      	ldr	r2, [r2, #4]
 801928c:	0852      	lsrs	r2, r2, #1
 801928e:	4611      	mov	r1, r2
 8019290:	f04f 0200 	mov.w	r2, #0
 8019294:	eb13 0b01 	adds.w	fp, r3, r1
 8019298:	eb44 0c02 	adc.w	ip, r4, r2
 801929c:	4658      	mov	r0, fp
 801929e:	4661      	mov	r1, ip
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	f04f 0400 	mov.w	r4, #0
 80192a8:	461a      	mov	r2, r3
 80192aa:	4623      	mov	r3, r4
 80192ac:	f7e7 f81c 	bl	80002e8 <__aeabi_uldivmod>
 80192b0:	4603      	mov	r3, r0
 80192b2:	460c      	mov	r4, r1
 80192b4:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80192b6:	e19d      	b.n	80195f4 <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80192b8:	687b      	ldr	r3, [r7, #4]
 80192ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192bc:	2b00      	cmp	r3, #0
 80192be:	d05b      	beq.n	8019378 <UART_SetConfig+0x1130>
 80192c0:	687b      	ldr	r3, [r7, #4]
 80192c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192c4:	2b01      	cmp	r3, #1
 80192c6:	d053      	beq.n	8019370 <UART_SetConfig+0x1128>
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192cc:	2b02      	cmp	r3, #2
 80192ce:	d04b      	beq.n	8019368 <UART_SetConfig+0x1120>
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192d4:	2b03      	cmp	r3, #3
 80192d6:	d043      	beq.n	8019360 <UART_SetConfig+0x1118>
 80192d8:	687b      	ldr	r3, [r7, #4]
 80192da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192dc:	2b04      	cmp	r3, #4
 80192de:	d03b      	beq.n	8019358 <UART_SetConfig+0x1110>
 80192e0:	687b      	ldr	r3, [r7, #4]
 80192e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192e4:	2b05      	cmp	r3, #5
 80192e6:	d033      	beq.n	8019350 <UART_SetConfig+0x1108>
 80192e8:	687b      	ldr	r3, [r7, #4]
 80192ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192ec:	2b06      	cmp	r3, #6
 80192ee:	d02b      	beq.n	8019348 <UART_SetConfig+0x1100>
 80192f0:	687b      	ldr	r3, [r7, #4]
 80192f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192f4:	2b07      	cmp	r3, #7
 80192f6:	d023      	beq.n	8019340 <UART_SetConfig+0x10f8>
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80192fc:	2b08      	cmp	r3, #8
 80192fe:	d01b      	beq.n	8019338 <UART_SetConfig+0x10f0>
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019304:	2b09      	cmp	r3, #9
 8019306:	d013      	beq.n	8019330 <UART_SetConfig+0x10e8>
 8019308:	687b      	ldr	r3, [r7, #4]
 801930a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801930c:	2b0a      	cmp	r3, #10
 801930e:	d00b      	beq.n	8019328 <UART_SetConfig+0x10e0>
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019314:	2b0b      	cmp	r3, #11
 8019316:	d103      	bne.n	8019320 <UART_SetConfig+0x10d8>
 8019318:	4b2a      	ldr	r3, [pc, #168]	; (80193c4 <UART_SetConfig+0x117c>)
 801931a:	f04f 0400 	mov.w	r4, #0
 801931e:	e02e      	b.n	801937e <UART_SetConfig+0x1136>
 8019320:	4b29      	ldr	r3, [pc, #164]	; (80193c8 <UART_SetConfig+0x1180>)
 8019322:	f04f 0403 	mov.w	r4, #3
 8019326:	e02a      	b.n	801937e <UART_SetConfig+0x1136>
 8019328:	4b28      	ldr	r3, [pc, #160]	; (80193cc <UART_SetConfig+0x1184>)
 801932a:	f04f 0400 	mov.w	r4, #0
 801932e:	e026      	b.n	801937e <UART_SetConfig+0x1136>
 8019330:	4b27      	ldr	r3, [pc, #156]	; (80193d0 <UART_SetConfig+0x1188>)
 8019332:	f04f 0400 	mov.w	r4, #0
 8019336:	e022      	b.n	801937e <UART_SetConfig+0x1136>
 8019338:	4b26      	ldr	r3, [pc, #152]	; (80193d4 <UART_SetConfig+0x118c>)
 801933a:	f04f 0400 	mov.w	r4, #0
 801933e:	e01e      	b.n	801937e <UART_SetConfig+0x1136>
 8019340:	4b25      	ldr	r3, [pc, #148]	; (80193d8 <UART_SetConfig+0x1190>)
 8019342:	f04f 0400 	mov.w	r4, #0
 8019346:	e01a      	b.n	801937e <UART_SetConfig+0x1136>
 8019348:	a419      	add	r4, pc, #100	; (adr r4, 80193b0 <UART_SetConfig+0x1168>)
 801934a:	e9d4 3400 	ldrd	r3, r4, [r4]
 801934e:	e016      	b.n	801937e <UART_SetConfig+0x1136>
 8019350:	4b22      	ldr	r3, [pc, #136]	; (80193dc <UART_SetConfig+0x1194>)
 8019352:	f04f 0400 	mov.w	r4, #0
 8019356:	e012      	b.n	801937e <UART_SetConfig+0x1136>
 8019358:	4b21      	ldr	r3, [pc, #132]	; (80193e0 <UART_SetConfig+0x1198>)
 801935a:	f04f 0400 	mov.w	r4, #0
 801935e:	e00e      	b.n	801937e <UART_SetConfig+0x1136>
 8019360:	a415      	add	r4, pc, #84	; (adr r4, 80193b8 <UART_SetConfig+0x1170>)
 8019362:	e9d4 3400 	ldrd	r3, r4, [r4]
 8019366:	e00a      	b.n	801937e <UART_SetConfig+0x1136>
 8019368:	4b1e      	ldr	r3, [pc, #120]	; (80193e4 <UART_SetConfig+0x119c>)
 801936a:	f04f 0400 	mov.w	r4, #0
 801936e:	e006      	b.n	801937e <UART_SetConfig+0x1136>
 8019370:	4b1d      	ldr	r3, [pc, #116]	; (80193e8 <UART_SetConfig+0x11a0>)
 8019372:	f04f 0401 	mov.w	r4, #1
 8019376:	e002      	b.n	801937e <UART_SetConfig+0x1136>
 8019378:	4b13      	ldr	r3, [pc, #76]	; (80193c8 <UART_SetConfig+0x1180>)
 801937a:	f04f 0403 	mov.w	r4, #3
 801937e:	687a      	ldr	r2, [r7, #4]
 8019380:	6852      	ldr	r2, [r2, #4]
 8019382:	0852      	lsrs	r2, r2, #1
 8019384:	4611      	mov	r1, r2
 8019386:	f04f 0200 	mov.w	r2, #0
 801938a:	eb13 0b01 	adds.w	fp, r3, r1
 801938e:	eb44 0c02 	adc.w	ip, r4, r2
 8019392:	4658      	mov	r0, fp
 8019394:	4661      	mov	r1, ip
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	685b      	ldr	r3, [r3, #4]
 801939a:	f04f 0400 	mov.w	r4, #0
 801939e:	461a      	mov	r2, r3
 80193a0:	4623      	mov	r3, r4
 80193a2:	f7e6 ffa1 	bl	80002e8 <__aeabi_uldivmod>
 80193a6:	4603      	mov	r3, r0
 80193a8:	460c      	mov	r4, r1
 80193aa:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80193ac:	e122      	b.n	80195f4 <UART_SetConfig+0x13ac>
 80193ae:	bf00      	nop
 80193b0:	51615500 	.word	0x51615500
 80193b4:	00000000 	.word	0x00000000
 80193b8:	a2c2aa00 	.word	0xa2c2aa00
 80193bc:	00000000 	.word	0x00000000
 80193c0:	58024400 	.word	0x58024400
 80193c4:	03d09000 	.word	0x03d09000
 80193c8:	d0900000 	.word	0xd0900000
 80193cc:	07a12000 	.word	0x07a12000
 80193d0:	0f424000 	.word	0x0f424000
 80193d4:	1e848000 	.word	0x1e848000
 80193d8:	3d090000 	.word	0x3d090000
 80193dc:	61a80000 	.word	0x61a80000
 80193e0:	7a120000 	.word	0x7a120000
 80193e4:	f4240000 	.word	0xf4240000
 80193e8:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d05b      	beq.n	80194ac <UART_SetConfig+0x1264>
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80193f8:	2b01      	cmp	r3, #1
 80193fa:	d053      	beq.n	80194a4 <UART_SetConfig+0x125c>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019400:	2b02      	cmp	r3, #2
 8019402:	d04b      	beq.n	801949c <UART_SetConfig+0x1254>
 8019404:	687b      	ldr	r3, [r7, #4]
 8019406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019408:	2b03      	cmp	r3, #3
 801940a:	d043      	beq.n	8019494 <UART_SetConfig+0x124c>
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019410:	2b04      	cmp	r3, #4
 8019412:	d03b      	beq.n	801948c <UART_SetConfig+0x1244>
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019418:	2b05      	cmp	r3, #5
 801941a:	d033      	beq.n	8019484 <UART_SetConfig+0x123c>
 801941c:	687b      	ldr	r3, [r7, #4]
 801941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019420:	2b06      	cmp	r3, #6
 8019422:	d02b      	beq.n	801947c <UART_SetConfig+0x1234>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019428:	2b07      	cmp	r3, #7
 801942a:	d023      	beq.n	8019474 <UART_SetConfig+0x122c>
 801942c:	687b      	ldr	r3, [r7, #4]
 801942e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019430:	2b08      	cmp	r3, #8
 8019432:	d01b      	beq.n	801946c <UART_SetConfig+0x1224>
 8019434:	687b      	ldr	r3, [r7, #4]
 8019436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019438:	2b09      	cmp	r3, #9
 801943a:	d013      	beq.n	8019464 <UART_SetConfig+0x121c>
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019440:	2b0a      	cmp	r3, #10
 8019442:	d00b      	beq.n	801945c <UART_SetConfig+0x1214>
 8019444:	687b      	ldr	r3, [r7, #4]
 8019446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019448:	2b0b      	cmp	r3, #11
 801944a:	d103      	bne.n	8019454 <UART_SetConfig+0x120c>
 801944c:	4bc0      	ldr	r3, [pc, #768]	; (8019750 <UART_SetConfig+0x1508>)
 801944e:	f04f 0400 	mov.w	r4, #0
 8019452:	e02e      	b.n	80194b2 <UART_SetConfig+0x126a>
 8019454:	4bbf      	ldr	r3, [pc, #764]	; (8019754 <UART_SetConfig+0x150c>)
 8019456:	f04f 0400 	mov.w	r4, #0
 801945a:	e02a      	b.n	80194b2 <UART_SetConfig+0x126a>
 801945c:	4bbe      	ldr	r3, [pc, #760]	; (8019758 <UART_SetConfig+0x1510>)
 801945e:	f04f 0400 	mov.w	r4, #0
 8019462:	e026      	b.n	80194b2 <UART_SetConfig+0x126a>
 8019464:	4bbd      	ldr	r3, [pc, #756]	; (801975c <UART_SetConfig+0x1514>)
 8019466:	f04f 0400 	mov.w	r4, #0
 801946a:	e022      	b.n	80194b2 <UART_SetConfig+0x126a>
 801946c:	4bbc      	ldr	r3, [pc, #752]	; (8019760 <UART_SetConfig+0x1518>)
 801946e:	f04f 0400 	mov.w	r4, #0
 8019472:	e01e      	b.n	80194b2 <UART_SetConfig+0x126a>
 8019474:	4bbb      	ldr	r3, [pc, #748]	; (8019764 <UART_SetConfig+0x151c>)
 8019476:	f04f 0400 	mov.w	r4, #0
 801947a:	e01a      	b.n	80194b2 <UART_SetConfig+0x126a>
 801947c:	a4b0      	add	r4, pc, #704	; (adr r4, 8019740 <UART_SetConfig+0x14f8>)
 801947e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8019482:	e016      	b.n	80194b2 <UART_SetConfig+0x126a>
 8019484:	4bb8      	ldr	r3, [pc, #736]	; (8019768 <UART_SetConfig+0x1520>)
 8019486:	f04f 0400 	mov.w	r4, #0
 801948a:	e012      	b.n	80194b2 <UART_SetConfig+0x126a>
 801948c:	4bb7      	ldr	r3, [pc, #732]	; (801976c <UART_SetConfig+0x1524>)
 801948e:	f04f 0400 	mov.w	r4, #0
 8019492:	e00e      	b.n	80194b2 <UART_SetConfig+0x126a>
 8019494:	a4ac      	add	r4, pc, #688	; (adr r4, 8019748 <UART_SetConfig+0x1500>)
 8019496:	e9d4 3400 	ldrd	r3, r4, [r4]
 801949a:	e00a      	b.n	80194b2 <UART_SetConfig+0x126a>
 801949c:	4bb4      	ldr	r3, [pc, #720]	; (8019770 <UART_SetConfig+0x1528>)
 801949e:	f04f 0400 	mov.w	r4, #0
 80194a2:	e006      	b.n	80194b2 <UART_SetConfig+0x126a>
 80194a4:	4bb3      	ldr	r3, [pc, #716]	; (8019774 <UART_SetConfig+0x152c>)
 80194a6:	f04f 0400 	mov.w	r4, #0
 80194aa:	e002      	b.n	80194b2 <UART_SetConfig+0x126a>
 80194ac:	4ba9      	ldr	r3, [pc, #676]	; (8019754 <UART_SetConfig+0x150c>)
 80194ae:	f04f 0400 	mov.w	r4, #0
 80194b2:	687a      	ldr	r2, [r7, #4]
 80194b4:	6852      	ldr	r2, [r2, #4]
 80194b6:	0852      	lsrs	r2, r2, #1
 80194b8:	4611      	mov	r1, r2
 80194ba:	f04f 0200 	mov.w	r2, #0
 80194be:	eb13 0b01 	adds.w	fp, r3, r1
 80194c2:	eb44 0c02 	adc.w	ip, r4, r2
 80194c6:	4658      	mov	r0, fp
 80194c8:	4661      	mov	r1, ip
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	685b      	ldr	r3, [r3, #4]
 80194ce:	f04f 0400 	mov.w	r4, #0
 80194d2:	461a      	mov	r2, r3
 80194d4:	4623      	mov	r3, r4
 80194d6:	f7e6 ff07 	bl	80002e8 <__aeabi_uldivmod>
 80194da:	4603      	mov	r3, r0
 80194dc:	460c      	mov	r4, r1
 80194de:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80194e0:	e088      	b.n	80195f4 <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d064      	beq.n	80195b4 <UART_SetConfig+0x136c>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194ee:	2b01      	cmp	r3, #1
 80194f0:	d05b      	beq.n	80195aa <UART_SetConfig+0x1362>
 80194f2:	687b      	ldr	r3, [r7, #4]
 80194f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194f6:	2b02      	cmp	r3, #2
 80194f8:	d052      	beq.n	80195a0 <UART_SetConfig+0x1358>
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80194fe:	2b03      	cmp	r3, #3
 8019500:	d04a      	beq.n	8019598 <UART_SetConfig+0x1350>
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019506:	2b04      	cmp	r3, #4
 8019508:	d041      	beq.n	801958e <UART_SetConfig+0x1346>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801950e:	2b05      	cmp	r3, #5
 8019510:	d039      	beq.n	8019586 <UART_SetConfig+0x133e>
 8019512:	687b      	ldr	r3, [r7, #4]
 8019514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019516:	2b06      	cmp	r3, #6
 8019518:	d031      	beq.n	801957e <UART_SetConfig+0x1336>
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801951e:	2b07      	cmp	r3, #7
 8019520:	d028      	beq.n	8019574 <UART_SetConfig+0x132c>
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019526:	2b08      	cmp	r3, #8
 8019528:	d01f      	beq.n	801956a <UART_SetConfig+0x1322>
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801952e:	2b09      	cmp	r3, #9
 8019530:	d016      	beq.n	8019560 <UART_SetConfig+0x1318>
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019536:	2b0a      	cmp	r3, #10
 8019538:	d00d      	beq.n	8019556 <UART_SetConfig+0x130e>
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801953e:	2b0b      	cmp	r3, #11
 8019540:	d104      	bne.n	801954c <UART_SetConfig+0x1304>
 8019542:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019546:	f04f 0400 	mov.w	r4, #0
 801954a:	e037      	b.n	80195bc <UART_SetConfig+0x1374>
 801954c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8019550:	f04f 0400 	mov.w	r4, #0
 8019554:	e032      	b.n	80195bc <UART_SetConfig+0x1374>
 8019556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801955a:	f04f 0400 	mov.w	r4, #0
 801955e:	e02d      	b.n	80195bc <UART_SetConfig+0x1374>
 8019560:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8019564:	f04f 0400 	mov.w	r4, #0
 8019568:	e028      	b.n	80195bc <UART_SetConfig+0x1374>
 801956a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801956e:	f04f 0400 	mov.w	r4, #0
 8019572:	e023      	b.n	80195bc <UART_SetConfig+0x1374>
 8019574:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8019578:	f04f 0400 	mov.w	r4, #0
 801957c:	e01e      	b.n	80195bc <UART_SetConfig+0x1374>
 801957e:	4b7e      	ldr	r3, [pc, #504]	; (8019778 <UART_SetConfig+0x1530>)
 8019580:	f04f 0400 	mov.w	r4, #0
 8019584:	e01a      	b.n	80195bc <UART_SetConfig+0x1374>
 8019586:	4b7d      	ldr	r3, [pc, #500]	; (801977c <UART_SetConfig+0x1534>)
 8019588:	f04f 0400 	mov.w	r4, #0
 801958c:	e016      	b.n	80195bc <UART_SetConfig+0x1374>
 801958e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8019592:	f04f 0400 	mov.w	r4, #0
 8019596:	e011      	b.n	80195bc <UART_SetConfig+0x1374>
 8019598:	4b79      	ldr	r3, [pc, #484]	; (8019780 <UART_SetConfig+0x1538>)
 801959a:	f04f 0400 	mov.w	r4, #0
 801959e:	e00d      	b.n	80195bc <UART_SetConfig+0x1374>
 80195a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80195a4:	f04f 0400 	mov.w	r4, #0
 80195a8:	e008      	b.n	80195bc <UART_SetConfig+0x1374>
 80195aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80195ae:	f04f 0400 	mov.w	r4, #0
 80195b2:	e003      	b.n	80195bc <UART_SetConfig+0x1374>
 80195b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80195b8:	f04f 0400 	mov.w	r4, #0
 80195bc:	687a      	ldr	r2, [r7, #4]
 80195be:	6852      	ldr	r2, [r2, #4]
 80195c0:	0852      	lsrs	r2, r2, #1
 80195c2:	4611      	mov	r1, r2
 80195c4:	f04f 0200 	mov.w	r2, #0
 80195c8:	eb13 0b01 	adds.w	fp, r3, r1
 80195cc:	eb44 0c02 	adc.w	ip, r4, r2
 80195d0:	4658      	mov	r0, fp
 80195d2:	4661      	mov	r1, ip
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	685b      	ldr	r3, [r3, #4]
 80195d8:	f04f 0400 	mov.w	r4, #0
 80195dc:	461a      	mov	r2, r3
 80195de:	4623      	mov	r3, r4
 80195e0:	f7e6 fe82 	bl	80002e8 <__aeabi_uldivmod>
 80195e4:	4603      	mov	r3, r0
 80195e6:	460c      	mov	r4, r1
 80195e8:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80195ea:	e003      	b.n	80195f4 <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 80195ec:	2301      	movs	r3, #1
 80195ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 80195f2:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80195f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80195fa:	d309      	bcc.n	8019610 <UART_SetConfig+0x13c8>
 80195fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80195fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019602:	d205      	bcs.n	8019610 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801960a:	60da      	str	r2, [r3, #12]
 801960c:	f000 bf85 	b.w	801a51a <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8019610:	2301      	movs	r3, #1
 8019612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019616:	f000 bf80 	b.w	801a51a <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801961a:	687b      	ldr	r3, [r7, #4]
 801961c:	69db      	ldr	r3, [r3, #28]
 801961e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019622:	f040 83da 	bne.w	8019dda <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8019626:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801962a:	2b40      	cmp	r3, #64	; 0x40
 801962c:	f200 83b3 	bhi.w	8019d96 <UART_SetConfig+0x1b4e>
 8019630:	a201      	add	r2, pc, #4	; (adr r2, 8019638 <UART_SetConfig+0x13f0>)
 8019632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019636:	bf00      	nop
 8019638:	08019785 	.word	0x08019785
 801963c:	0801983d 	.word	0x0801983d
 8019640:	08019d97 	.word	0x08019d97
 8019644:	08019d97 	.word	0x08019d97
 8019648:	080198f5 	.word	0x080198f5
 801964c:	08019d97 	.word	0x08019d97
 8019650:	08019d97 	.word	0x08019d97
 8019654:	08019d97 	.word	0x08019d97
 8019658:	080199b1 	.word	0x080199b1
 801965c:	08019d97 	.word	0x08019d97
 8019660:	08019d97 	.word	0x08019d97
 8019664:	08019d97 	.word	0x08019d97
 8019668:	08019d97 	.word	0x08019d97
 801966c:	08019d97 	.word	0x08019d97
 8019670:	08019d97 	.word	0x08019d97
 8019674:	08019d97 	.word	0x08019d97
 8019678:	08019a6d 	.word	0x08019a6d
 801967c:	08019d97 	.word	0x08019d97
 8019680:	08019d97 	.word	0x08019d97
 8019684:	08019d97 	.word	0x08019d97
 8019688:	08019d97 	.word	0x08019d97
 801968c:	08019d97 	.word	0x08019d97
 8019690:	08019d97 	.word	0x08019d97
 8019694:	08019d97 	.word	0x08019d97
 8019698:	08019d97 	.word	0x08019d97
 801969c:	08019d97 	.word	0x08019d97
 80196a0:	08019d97 	.word	0x08019d97
 80196a4:	08019d97 	.word	0x08019d97
 80196a8:	08019d97 	.word	0x08019d97
 80196ac:	08019d97 	.word	0x08019d97
 80196b0:	08019d97 	.word	0x08019d97
 80196b4:	08019d97 	.word	0x08019d97
 80196b8:	08019bdf 	.word	0x08019bdf
 80196bc:	08019d97 	.word	0x08019d97
 80196c0:	08019d97 	.word	0x08019d97
 80196c4:	08019d97 	.word	0x08019d97
 80196c8:	08019d97 	.word	0x08019d97
 80196cc:	08019d97 	.word	0x08019d97
 80196d0:	08019d97 	.word	0x08019d97
 80196d4:	08019d97 	.word	0x08019d97
 80196d8:	08019d97 	.word	0x08019d97
 80196dc:	08019d97 	.word	0x08019d97
 80196e0:	08019d97 	.word	0x08019d97
 80196e4:	08019d97 	.word	0x08019d97
 80196e8:	08019d97 	.word	0x08019d97
 80196ec:	08019d97 	.word	0x08019d97
 80196f0:	08019d97 	.word	0x08019d97
 80196f4:	08019d97 	.word	0x08019d97
 80196f8:	08019d97 	.word	0x08019d97
 80196fc:	08019d97 	.word	0x08019d97
 8019700:	08019d97 	.word	0x08019d97
 8019704:	08019d97 	.word	0x08019d97
 8019708:	08019d97 	.word	0x08019d97
 801970c:	08019d97 	.word	0x08019d97
 8019710:	08019d97 	.word	0x08019d97
 8019714:	08019d97 	.word	0x08019d97
 8019718:	08019d97 	.word	0x08019d97
 801971c:	08019d97 	.word	0x08019d97
 8019720:	08019d97 	.word	0x08019d97
 8019724:	08019d97 	.word	0x08019d97
 8019728:	08019d97 	.word	0x08019d97
 801972c:	08019d97 	.word	0x08019d97
 8019730:	08019d97 	.word	0x08019d97
 8019734:	08019d97 	.word	0x08019d97
 8019738:	08019cd5 	.word	0x08019cd5
 801973c:	f3af 8000 	nop.w
 8019740:	05161500 	.word	0x05161500
 8019744:	00000000 	.word	0x00000000
 8019748:	0a2c2a00 	.word	0x0a2c2a00
 801974c:	00000000 	.word	0x00000000
 8019750:	003d0900 	.word	0x003d0900
 8019754:	3d090000 	.word	0x3d090000
 8019758:	007a1200 	.word	0x007a1200
 801975c:	00f42400 	.word	0x00f42400
 8019760:	01e84800 	.word	0x01e84800
 8019764:	03d09000 	.word	0x03d09000
 8019768:	061a8000 	.word	0x061a8000
 801976c:	07a12000 	.word	0x07a12000
 8019770:	0f424000 	.word	0x0f424000
 8019774:	1e848000 	.word	0x1e848000
 8019778:	000aaa00 	.word	0x000aaa00
 801977c:	000ccc00 	.word	0x000ccc00
 8019780:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019784:	f7fc f874 	bl	8015870 <HAL_RCC_GetPCLK1Freq>
 8019788:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801978e:	2b00      	cmp	r3, #0
 8019790:	d044      	beq.n	801981c <UART_SetConfig+0x15d4>
 8019792:	687b      	ldr	r3, [r7, #4]
 8019794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019796:	2b01      	cmp	r3, #1
 8019798:	d03e      	beq.n	8019818 <UART_SetConfig+0x15d0>
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801979e:	2b02      	cmp	r3, #2
 80197a0:	d038      	beq.n	8019814 <UART_SetConfig+0x15cc>
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197a6:	2b03      	cmp	r3, #3
 80197a8:	d032      	beq.n	8019810 <UART_SetConfig+0x15c8>
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ae:	2b04      	cmp	r3, #4
 80197b0:	d02c      	beq.n	801980c <UART_SetConfig+0x15c4>
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197b6:	2b05      	cmp	r3, #5
 80197b8:	d026      	beq.n	8019808 <UART_SetConfig+0x15c0>
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197be:	2b06      	cmp	r3, #6
 80197c0:	d020      	beq.n	8019804 <UART_SetConfig+0x15bc>
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197c6:	2b07      	cmp	r3, #7
 80197c8:	d01a      	beq.n	8019800 <UART_SetConfig+0x15b8>
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197ce:	2b08      	cmp	r3, #8
 80197d0:	d014      	beq.n	80197fc <UART_SetConfig+0x15b4>
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197d6:	2b09      	cmp	r3, #9
 80197d8:	d00e      	beq.n	80197f8 <UART_SetConfig+0x15b0>
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197de:	2b0a      	cmp	r3, #10
 80197e0:	d008      	beq.n	80197f4 <UART_SetConfig+0x15ac>
 80197e2:	687b      	ldr	r3, [r7, #4]
 80197e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80197e6:	2b0b      	cmp	r3, #11
 80197e8:	d102      	bne.n	80197f0 <UART_SetConfig+0x15a8>
 80197ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80197ee:	e016      	b.n	801981e <UART_SetConfig+0x15d6>
 80197f0:	2301      	movs	r3, #1
 80197f2:	e014      	b.n	801981e <UART_SetConfig+0x15d6>
 80197f4:	2380      	movs	r3, #128	; 0x80
 80197f6:	e012      	b.n	801981e <UART_SetConfig+0x15d6>
 80197f8:	2340      	movs	r3, #64	; 0x40
 80197fa:	e010      	b.n	801981e <UART_SetConfig+0x15d6>
 80197fc:	2320      	movs	r3, #32
 80197fe:	e00e      	b.n	801981e <UART_SetConfig+0x15d6>
 8019800:	2310      	movs	r3, #16
 8019802:	e00c      	b.n	801981e <UART_SetConfig+0x15d6>
 8019804:	230c      	movs	r3, #12
 8019806:	e00a      	b.n	801981e <UART_SetConfig+0x15d6>
 8019808:	230a      	movs	r3, #10
 801980a:	e008      	b.n	801981e <UART_SetConfig+0x15d6>
 801980c:	2308      	movs	r3, #8
 801980e:	e006      	b.n	801981e <UART_SetConfig+0x15d6>
 8019810:	2306      	movs	r3, #6
 8019812:	e004      	b.n	801981e <UART_SetConfig+0x15d6>
 8019814:	2304      	movs	r3, #4
 8019816:	e002      	b.n	801981e <UART_SetConfig+0x15d6>
 8019818:	2302      	movs	r3, #2
 801981a:	e000      	b.n	801981e <UART_SetConfig+0x15d6>
 801981c:	2301      	movs	r3, #1
 801981e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019820:	fbb2 f3f3 	udiv	r3, r2, r3
 8019824:	005a      	lsls	r2, r3, #1
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	685b      	ldr	r3, [r3, #4]
 801982a:	085b      	lsrs	r3, r3, #1
 801982c:	441a      	add	r2, r3
 801982e:	687b      	ldr	r3, [r7, #4]
 8019830:	685b      	ldr	r3, [r3, #4]
 8019832:	fbb2 f3f3 	udiv	r3, r2, r3
 8019836:	b29b      	uxth	r3, r3
 8019838:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801983a:	e2b0      	b.n	8019d9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801983c:	f7fc f82e 	bl	801589c <HAL_RCC_GetPCLK2Freq>
 8019840:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019846:	2b00      	cmp	r3, #0
 8019848:	d044      	beq.n	80198d4 <UART_SetConfig+0x168c>
 801984a:	687b      	ldr	r3, [r7, #4]
 801984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801984e:	2b01      	cmp	r3, #1
 8019850:	d03e      	beq.n	80198d0 <UART_SetConfig+0x1688>
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019856:	2b02      	cmp	r3, #2
 8019858:	d038      	beq.n	80198cc <UART_SetConfig+0x1684>
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801985e:	2b03      	cmp	r3, #3
 8019860:	d032      	beq.n	80198c8 <UART_SetConfig+0x1680>
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019866:	2b04      	cmp	r3, #4
 8019868:	d02c      	beq.n	80198c4 <UART_SetConfig+0x167c>
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801986e:	2b05      	cmp	r3, #5
 8019870:	d026      	beq.n	80198c0 <UART_SetConfig+0x1678>
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019876:	2b06      	cmp	r3, #6
 8019878:	d020      	beq.n	80198bc <UART_SetConfig+0x1674>
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801987e:	2b07      	cmp	r3, #7
 8019880:	d01a      	beq.n	80198b8 <UART_SetConfig+0x1670>
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019886:	2b08      	cmp	r3, #8
 8019888:	d014      	beq.n	80198b4 <UART_SetConfig+0x166c>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801988e:	2b09      	cmp	r3, #9
 8019890:	d00e      	beq.n	80198b0 <UART_SetConfig+0x1668>
 8019892:	687b      	ldr	r3, [r7, #4]
 8019894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019896:	2b0a      	cmp	r3, #10
 8019898:	d008      	beq.n	80198ac <UART_SetConfig+0x1664>
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801989e:	2b0b      	cmp	r3, #11
 80198a0:	d102      	bne.n	80198a8 <UART_SetConfig+0x1660>
 80198a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80198a6:	e016      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198a8:	2301      	movs	r3, #1
 80198aa:	e014      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198ac:	2380      	movs	r3, #128	; 0x80
 80198ae:	e012      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198b0:	2340      	movs	r3, #64	; 0x40
 80198b2:	e010      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198b4:	2320      	movs	r3, #32
 80198b6:	e00e      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198b8:	2310      	movs	r3, #16
 80198ba:	e00c      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198bc:	230c      	movs	r3, #12
 80198be:	e00a      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198c0:	230a      	movs	r3, #10
 80198c2:	e008      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198c4:	2308      	movs	r3, #8
 80198c6:	e006      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198c8:	2306      	movs	r3, #6
 80198ca:	e004      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198cc:	2304      	movs	r3, #4
 80198ce:	e002      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198d0:	2302      	movs	r3, #2
 80198d2:	e000      	b.n	80198d6 <UART_SetConfig+0x168e>
 80198d4:	2301      	movs	r3, #1
 80198d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80198dc:	005a      	lsls	r2, r3, #1
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	685b      	ldr	r3, [r3, #4]
 80198e2:	085b      	lsrs	r3, r3, #1
 80198e4:	441a      	add	r2, r3
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	685b      	ldr	r3, [r3, #4]
 80198ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80198ee:	b29b      	uxth	r3, r3
 80198f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80198f2:	e254      	b.n	8019d9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80198f4:	f107 0318 	add.w	r3, r7, #24
 80198f8:	4618      	mov	r0, r3
 80198fa:	f7fc fed9 	bl	80166b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80198fe:	69fa      	ldr	r2, [r7, #28]
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019904:	2b00      	cmp	r3, #0
 8019906:	d044      	beq.n	8019992 <UART_SetConfig+0x174a>
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801990c:	2b01      	cmp	r3, #1
 801990e:	d03e      	beq.n	801998e <UART_SetConfig+0x1746>
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019914:	2b02      	cmp	r3, #2
 8019916:	d038      	beq.n	801998a <UART_SetConfig+0x1742>
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801991c:	2b03      	cmp	r3, #3
 801991e:	d032      	beq.n	8019986 <UART_SetConfig+0x173e>
 8019920:	687b      	ldr	r3, [r7, #4]
 8019922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019924:	2b04      	cmp	r3, #4
 8019926:	d02c      	beq.n	8019982 <UART_SetConfig+0x173a>
 8019928:	687b      	ldr	r3, [r7, #4]
 801992a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801992c:	2b05      	cmp	r3, #5
 801992e:	d026      	beq.n	801997e <UART_SetConfig+0x1736>
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019934:	2b06      	cmp	r3, #6
 8019936:	d020      	beq.n	801997a <UART_SetConfig+0x1732>
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801993c:	2b07      	cmp	r3, #7
 801993e:	d01a      	beq.n	8019976 <UART_SetConfig+0x172e>
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019944:	2b08      	cmp	r3, #8
 8019946:	d014      	beq.n	8019972 <UART_SetConfig+0x172a>
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801994c:	2b09      	cmp	r3, #9
 801994e:	d00e      	beq.n	801996e <UART_SetConfig+0x1726>
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019954:	2b0a      	cmp	r3, #10
 8019956:	d008      	beq.n	801996a <UART_SetConfig+0x1722>
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801995c:	2b0b      	cmp	r3, #11
 801995e:	d102      	bne.n	8019966 <UART_SetConfig+0x171e>
 8019960:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019964:	e016      	b.n	8019994 <UART_SetConfig+0x174c>
 8019966:	2301      	movs	r3, #1
 8019968:	e014      	b.n	8019994 <UART_SetConfig+0x174c>
 801996a:	2380      	movs	r3, #128	; 0x80
 801996c:	e012      	b.n	8019994 <UART_SetConfig+0x174c>
 801996e:	2340      	movs	r3, #64	; 0x40
 8019970:	e010      	b.n	8019994 <UART_SetConfig+0x174c>
 8019972:	2320      	movs	r3, #32
 8019974:	e00e      	b.n	8019994 <UART_SetConfig+0x174c>
 8019976:	2310      	movs	r3, #16
 8019978:	e00c      	b.n	8019994 <UART_SetConfig+0x174c>
 801997a:	230c      	movs	r3, #12
 801997c:	e00a      	b.n	8019994 <UART_SetConfig+0x174c>
 801997e:	230a      	movs	r3, #10
 8019980:	e008      	b.n	8019994 <UART_SetConfig+0x174c>
 8019982:	2308      	movs	r3, #8
 8019984:	e006      	b.n	8019994 <UART_SetConfig+0x174c>
 8019986:	2306      	movs	r3, #6
 8019988:	e004      	b.n	8019994 <UART_SetConfig+0x174c>
 801998a:	2304      	movs	r3, #4
 801998c:	e002      	b.n	8019994 <UART_SetConfig+0x174c>
 801998e:	2302      	movs	r3, #2
 8019990:	e000      	b.n	8019994 <UART_SetConfig+0x174c>
 8019992:	2301      	movs	r3, #1
 8019994:	fbb2 f3f3 	udiv	r3, r2, r3
 8019998:	005a      	lsls	r2, r3, #1
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	685b      	ldr	r3, [r3, #4]
 801999e:	085b      	lsrs	r3, r3, #1
 80199a0:	441a      	add	r2, r3
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80199aa:	b29b      	uxth	r3, r3
 80199ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80199ae:	e1f6      	b.n	8019d9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80199b0:	f107 030c 	add.w	r3, r7, #12
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7fc ffc7 	bl	8016948 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80199ba:	693a      	ldr	r2, [r7, #16]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	d044      	beq.n	8019a4e <UART_SetConfig+0x1806>
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199c8:	2b01      	cmp	r3, #1
 80199ca:	d03e      	beq.n	8019a4a <UART_SetConfig+0x1802>
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199d0:	2b02      	cmp	r3, #2
 80199d2:	d038      	beq.n	8019a46 <UART_SetConfig+0x17fe>
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199d8:	2b03      	cmp	r3, #3
 80199da:	d032      	beq.n	8019a42 <UART_SetConfig+0x17fa>
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e0:	2b04      	cmp	r3, #4
 80199e2:	d02c      	beq.n	8019a3e <UART_SetConfig+0x17f6>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199e8:	2b05      	cmp	r3, #5
 80199ea:	d026      	beq.n	8019a3a <UART_SetConfig+0x17f2>
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199f0:	2b06      	cmp	r3, #6
 80199f2:	d020      	beq.n	8019a36 <UART_SetConfig+0x17ee>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80199f8:	2b07      	cmp	r3, #7
 80199fa:	d01a      	beq.n	8019a32 <UART_SetConfig+0x17ea>
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a00:	2b08      	cmp	r3, #8
 8019a02:	d014      	beq.n	8019a2e <UART_SetConfig+0x17e6>
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a08:	2b09      	cmp	r3, #9
 8019a0a:	d00e      	beq.n	8019a2a <UART_SetConfig+0x17e2>
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a10:	2b0a      	cmp	r3, #10
 8019a12:	d008      	beq.n	8019a26 <UART_SetConfig+0x17de>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a18:	2b0b      	cmp	r3, #11
 8019a1a:	d102      	bne.n	8019a22 <UART_SetConfig+0x17da>
 8019a1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019a20:	e016      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a22:	2301      	movs	r3, #1
 8019a24:	e014      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a26:	2380      	movs	r3, #128	; 0x80
 8019a28:	e012      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a2a:	2340      	movs	r3, #64	; 0x40
 8019a2c:	e010      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a2e:	2320      	movs	r3, #32
 8019a30:	e00e      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a32:	2310      	movs	r3, #16
 8019a34:	e00c      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a36:	230c      	movs	r3, #12
 8019a38:	e00a      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a3a:	230a      	movs	r3, #10
 8019a3c:	e008      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a3e:	2308      	movs	r3, #8
 8019a40:	e006      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a42:	2306      	movs	r3, #6
 8019a44:	e004      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a46:	2304      	movs	r3, #4
 8019a48:	e002      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a4a:	2302      	movs	r3, #2
 8019a4c:	e000      	b.n	8019a50 <UART_SetConfig+0x1808>
 8019a4e:	2301      	movs	r3, #1
 8019a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a54:	005a      	lsls	r2, r3, #1
 8019a56:	687b      	ldr	r3, [r7, #4]
 8019a58:	685b      	ldr	r3, [r3, #4]
 8019a5a:	085b      	lsrs	r3, r3, #1
 8019a5c:	441a      	add	r2, r3
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	685b      	ldr	r3, [r3, #4]
 8019a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8019a66:	b29b      	uxth	r3, r3
 8019a68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019a6a:	e198      	b.n	8019d9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8019a6c:	4b87      	ldr	r3, [pc, #540]	; (8019c8c <UART_SetConfig+0x1a44>)
 8019a6e:	681b      	ldr	r3, [r3, #0]
 8019a70:	f003 0320 	and.w	r3, r3, #32
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d05e      	beq.n	8019b36 <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019a78:	4b84      	ldr	r3, [pc, #528]	; (8019c8c <UART_SetConfig+0x1a44>)
 8019a7a:	681b      	ldr	r3, [r3, #0]
 8019a7c:	08db      	lsrs	r3, r3, #3
 8019a7e:	f003 0303 	and.w	r3, r3, #3
 8019a82:	4a83      	ldr	r2, [pc, #524]	; (8019c90 <UART_SetConfig+0x1a48>)
 8019a84:	40da      	lsrs	r2, r3
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d044      	beq.n	8019b18 <UART_SetConfig+0x18d0>
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a92:	2b01      	cmp	r3, #1
 8019a94:	d03e      	beq.n	8019b14 <UART_SetConfig+0x18cc>
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a9a:	2b02      	cmp	r3, #2
 8019a9c:	d038      	beq.n	8019b10 <UART_SetConfig+0x18c8>
 8019a9e:	687b      	ldr	r3, [r7, #4]
 8019aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aa2:	2b03      	cmp	r3, #3
 8019aa4:	d032      	beq.n	8019b0c <UART_SetConfig+0x18c4>
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aaa:	2b04      	cmp	r3, #4
 8019aac:	d02c      	beq.n	8019b08 <UART_SetConfig+0x18c0>
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ab2:	2b05      	cmp	r3, #5
 8019ab4:	d026      	beq.n	8019b04 <UART_SetConfig+0x18bc>
 8019ab6:	687b      	ldr	r3, [r7, #4]
 8019ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aba:	2b06      	cmp	r3, #6
 8019abc:	d020      	beq.n	8019b00 <UART_SetConfig+0x18b8>
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ac2:	2b07      	cmp	r3, #7
 8019ac4:	d01a      	beq.n	8019afc <UART_SetConfig+0x18b4>
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019aca:	2b08      	cmp	r3, #8
 8019acc:	d014      	beq.n	8019af8 <UART_SetConfig+0x18b0>
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ad2:	2b09      	cmp	r3, #9
 8019ad4:	d00e      	beq.n	8019af4 <UART_SetConfig+0x18ac>
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ada:	2b0a      	cmp	r3, #10
 8019adc:	d008      	beq.n	8019af0 <UART_SetConfig+0x18a8>
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ae2:	2b0b      	cmp	r3, #11
 8019ae4:	d102      	bne.n	8019aec <UART_SetConfig+0x18a4>
 8019ae6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019aea:	e016      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019aec:	2301      	movs	r3, #1
 8019aee:	e014      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019af0:	2380      	movs	r3, #128	; 0x80
 8019af2:	e012      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019af4:	2340      	movs	r3, #64	; 0x40
 8019af6:	e010      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019af8:	2320      	movs	r3, #32
 8019afa:	e00e      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019afc:	2310      	movs	r3, #16
 8019afe:	e00c      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b00:	230c      	movs	r3, #12
 8019b02:	e00a      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b04:	230a      	movs	r3, #10
 8019b06:	e008      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b08:	2308      	movs	r3, #8
 8019b0a:	e006      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b0c:	2306      	movs	r3, #6
 8019b0e:	e004      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b10:	2304      	movs	r3, #4
 8019b12:	e002      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b14:	2302      	movs	r3, #2
 8019b16:	e000      	b.n	8019b1a <UART_SetConfig+0x18d2>
 8019b18:	2301      	movs	r3, #1
 8019b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b1e:	005a      	lsls	r2, r3, #1
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	685b      	ldr	r3, [r3, #4]
 8019b24:	085b      	lsrs	r3, r3, #1
 8019b26:	441a      	add	r2, r3
 8019b28:	687b      	ldr	r3, [r7, #4]
 8019b2a:	685b      	ldr	r3, [r3, #4]
 8019b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b30:	b29b      	uxth	r3, r3
 8019b32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 8019b34:	e133      	b.n	8019d9e <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b3a:	2b00      	cmp	r3, #0
 8019b3c:	d043      	beq.n	8019bc6 <UART_SetConfig+0x197e>
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b42:	2b01      	cmp	r3, #1
 8019b44:	d03d      	beq.n	8019bc2 <UART_SetConfig+0x197a>
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b4a:	2b02      	cmp	r3, #2
 8019b4c:	d037      	beq.n	8019bbe <UART_SetConfig+0x1976>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b52:	2b03      	cmp	r3, #3
 8019b54:	d031      	beq.n	8019bba <UART_SetConfig+0x1972>
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b5a:	2b04      	cmp	r3, #4
 8019b5c:	d02b      	beq.n	8019bb6 <UART_SetConfig+0x196e>
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b62:	2b05      	cmp	r3, #5
 8019b64:	d025      	beq.n	8019bb2 <UART_SetConfig+0x196a>
 8019b66:	687b      	ldr	r3, [r7, #4]
 8019b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b6a:	2b06      	cmp	r3, #6
 8019b6c:	d01f      	beq.n	8019bae <UART_SetConfig+0x1966>
 8019b6e:	687b      	ldr	r3, [r7, #4]
 8019b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b72:	2b07      	cmp	r3, #7
 8019b74:	d019      	beq.n	8019baa <UART_SetConfig+0x1962>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b7a:	2b08      	cmp	r3, #8
 8019b7c:	d013      	beq.n	8019ba6 <UART_SetConfig+0x195e>
 8019b7e:	687b      	ldr	r3, [r7, #4]
 8019b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b82:	2b09      	cmp	r3, #9
 8019b84:	d00d      	beq.n	8019ba2 <UART_SetConfig+0x195a>
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b8a:	2b0a      	cmp	r3, #10
 8019b8c:	d007      	beq.n	8019b9e <UART_SetConfig+0x1956>
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019b92:	2b0b      	cmp	r3, #11
 8019b94:	d101      	bne.n	8019b9a <UART_SetConfig+0x1952>
 8019b96:	4b3f      	ldr	r3, [pc, #252]	; (8019c94 <UART_SetConfig+0x1a4c>)
 8019b98:	e016      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019b9a:	4b3f      	ldr	r3, [pc, #252]	; (8019c98 <UART_SetConfig+0x1a50>)
 8019b9c:	e014      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019b9e:	4b3f      	ldr	r3, [pc, #252]	; (8019c9c <UART_SetConfig+0x1a54>)
 8019ba0:	e012      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019ba2:	4b3f      	ldr	r3, [pc, #252]	; (8019ca0 <UART_SetConfig+0x1a58>)
 8019ba4:	e010      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019ba6:	4b3f      	ldr	r3, [pc, #252]	; (8019ca4 <UART_SetConfig+0x1a5c>)
 8019ba8:	e00e      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019baa:	4b3f      	ldr	r3, [pc, #252]	; (8019ca8 <UART_SetConfig+0x1a60>)
 8019bac:	e00c      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bae:	4b3f      	ldr	r3, [pc, #252]	; (8019cac <UART_SetConfig+0x1a64>)
 8019bb0:	e00a      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bb2:	4b3f      	ldr	r3, [pc, #252]	; (8019cb0 <UART_SetConfig+0x1a68>)
 8019bb4:	e008      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bb6:	4b3f      	ldr	r3, [pc, #252]	; (8019cb4 <UART_SetConfig+0x1a6c>)
 8019bb8:	e006      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bba:	4b3f      	ldr	r3, [pc, #252]	; (8019cb8 <UART_SetConfig+0x1a70>)
 8019bbc:	e004      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bbe:	4b3f      	ldr	r3, [pc, #252]	; (8019cbc <UART_SetConfig+0x1a74>)
 8019bc0:	e002      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bc2:	4b33      	ldr	r3, [pc, #204]	; (8019c90 <UART_SetConfig+0x1a48>)
 8019bc4:	e000      	b.n	8019bc8 <UART_SetConfig+0x1980>
 8019bc6:	4b34      	ldr	r3, [pc, #208]	; (8019c98 <UART_SetConfig+0x1a50>)
 8019bc8:	687a      	ldr	r2, [r7, #4]
 8019bca:	6852      	ldr	r2, [r2, #4]
 8019bcc:	0852      	lsrs	r2, r2, #1
 8019bce:	441a      	add	r2, r3
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	685b      	ldr	r3, [r3, #4]
 8019bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8019bd8:	b29b      	uxth	r3, r3
 8019bda:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019bdc:	e0df      	b.n	8019d9e <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019bde:	687b      	ldr	r3, [r7, #4]
 8019be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019be2:	2b00      	cmp	r3, #0
 8019be4:	d045      	beq.n	8019c72 <UART_SetConfig+0x1a2a>
 8019be6:	687b      	ldr	r3, [r7, #4]
 8019be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bea:	2b01      	cmp	r3, #1
 8019bec:	d03f      	beq.n	8019c6e <UART_SetConfig+0x1a26>
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bf2:	2b02      	cmp	r3, #2
 8019bf4:	d039      	beq.n	8019c6a <UART_SetConfig+0x1a22>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019bfa:	2b03      	cmp	r3, #3
 8019bfc:	d033      	beq.n	8019c66 <UART_SetConfig+0x1a1e>
 8019bfe:	687b      	ldr	r3, [r7, #4]
 8019c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c02:	2b04      	cmp	r3, #4
 8019c04:	d02d      	beq.n	8019c62 <UART_SetConfig+0x1a1a>
 8019c06:	687b      	ldr	r3, [r7, #4]
 8019c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c0a:	2b05      	cmp	r3, #5
 8019c0c:	d027      	beq.n	8019c5e <UART_SetConfig+0x1a16>
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c12:	2b06      	cmp	r3, #6
 8019c14:	d021      	beq.n	8019c5a <UART_SetConfig+0x1a12>
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c1a:	2b07      	cmp	r3, #7
 8019c1c:	d01b      	beq.n	8019c56 <UART_SetConfig+0x1a0e>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c22:	2b08      	cmp	r3, #8
 8019c24:	d015      	beq.n	8019c52 <UART_SetConfig+0x1a0a>
 8019c26:	687b      	ldr	r3, [r7, #4]
 8019c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c2a:	2b09      	cmp	r3, #9
 8019c2c:	d00f      	beq.n	8019c4e <UART_SetConfig+0x1a06>
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c32:	2b0a      	cmp	r3, #10
 8019c34:	d008      	beq.n	8019c48 <UART_SetConfig+0x1a00>
 8019c36:	687b      	ldr	r3, [r7, #4]
 8019c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c3a:	2b0b      	cmp	r3, #11
 8019c3c:	d102      	bne.n	8019c44 <UART_SetConfig+0x19fc>
 8019c3e:	f647 2312 	movw	r3, #31250	; 0x7a12
 8019c42:	e017      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c44:	4b18      	ldr	r3, [pc, #96]	; (8019ca8 <UART_SetConfig+0x1a60>)
 8019c46:	e015      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c48:	f24f 4324 	movw	r3, #62500	; 0xf424
 8019c4c:	e012      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c4e:	4b1c      	ldr	r3, [pc, #112]	; (8019cc0 <UART_SetConfig+0x1a78>)
 8019c50:	e010      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c52:	4b1c      	ldr	r3, [pc, #112]	; (8019cc4 <UART_SetConfig+0x1a7c>)
 8019c54:	e00e      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c56:	4b0f      	ldr	r3, [pc, #60]	; (8019c94 <UART_SetConfig+0x1a4c>)
 8019c58:	e00c      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c5a:	4b1b      	ldr	r3, [pc, #108]	; (8019cc8 <UART_SetConfig+0x1a80>)
 8019c5c:	e00a      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c5e:	4b1b      	ldr	r3, [pc, #108]	; (8019ccc <UART_SetConfig+0x1a84>)
 8019c60:	e008      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c62:	4b0e      	ldr	r3, [pc, #56]	; (8019c9c <UART_SetConfig+0x1a54>)
 8019c64:	e006      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c66:	4b1a      	ldr	r3, [pc, #104]	; (8019cd0 <UART_SetConfig+0x1a88>)
 8019c68:	e004      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c6a:	4b0d      	ldr	r3, [pc, #52]	; (8019ca0 <UART_SetConfig+0x1a58>)
 8019c6c:	e002      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c6e:	4b0d      	ldr	r3, [pc, #52]	; (8019ca4 <UART_SetConfig+0x1a5c>)
 8019c70:	e000      	b.n	8019c74 <UART_SetConfig+0x1a2c>
 8019c72:	4b0d      	ldr	r3, [pc, #52]	; (8019ca8 <UART_SetConfig+0x1a60>)
 8019c74:	687a      	ldr	r2, [r7, #4]
 8019c76:	6852      	ldr	r2, [r2, #4]
 8019c78:	0852      	lsrs	r2, r2, #1
 8019c7a:	441a      	add	r2, r3
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	685b      	ldr	r3, [r3, #4]
 8019c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c84:	b29b      	uxth	r3, r3
 8019c86:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019c88:	e089      	b.n	8019d9e <UART_SetConfig+0x1b56>
 8019c8a:	bf00      	nop
 8019c8c:	58024400 	.word	0x58024400
 8019c90:	03d09000 	.word	0x03d09000
 8019c94:	0007a120 	.word	0x0007a120
 8019c98:	07a12000 	.word	0x07a12000
 8019c9c:	000f4240 	.word	0x000f4240
 8019ca0:	001e8480 	.word	0x001e8480
 8019ca4:	003d0900 	.word	0x003d0900
 8019ca8:	007a1200 	.word	0x007a1200
 8019cac:	00a2c2aa 	.word	0x00a2c2aa
 8019cb0:	00c35000 	.word	0x00c35000
 8019cb4:	00f42400 	.word	0x00f42400
 8019cb8:	01458554 	.word	0x01458554
 8019cbc:	01e84800 	.word	0x01e84800
 8019cc0:	0001e848 	.word	0x0001e848
 8019cc4:	0003d090 	.word	0x0003d090
 8019cc8:	000a2c2a 	.word	0x000a2c2a
 8019ccc:	000c3500 	.word	0x000c3500
 8019cd0:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019cd4:	687b      	ldr	r3, [r7, #4]
 8019cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d04f      	beq.n	8019d7c <UART_SetConfig+0x1b34>
 8019cdc:	687b      	ldr	r3, [r7, #4]
 8019cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce0:	2b01      	cmp	r3, #1
 8019ce2:	d048      	beq.n	8019d76 <UART_SetConfig+0x1b2e>
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	d041      	beq.n	8019d70 <UART_SetConfig+0x1b28>
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf0:	2b03      	cmp	r3, #3
 8019cf2:	d03a      	beq.n	8019d6a <UART_SetConfig+0x1b22>
 8019cf4:	687b      	ldr	r3, [r7, #4]
 8019cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019cf8:	2b04      	cmp	r3, #4
 8019cfa:	d033      	beq.n	8019d64 <UART_SetConfig+0x1b1c>
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d00:	2b05      	cmp	r3, #5
 8019d02:	d02c      	beq.n	8019d5e <UART_SetConfig+0x1b16>
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d08:	2b06      	cmp	r3, #6
 8019d0a:	d025      	beq.n	8019d58 <UART_SetConfig+0x1b10>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d10:	2b07      	cmp	r3, #7
 8019d12:	d01e      	beq.n	8019d52 <UART_SetConfig+0x1b0a>
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d18:	2b08      	cmp	r3, #8
 8019d1a:	d017      	beq.n	8019d4c <UART_SetConfig+0x1b04>
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d20:	2b09      	cmp	r3, #9
 8019d22:	d010      	beq.n	8019d46 <UART_SetConfig+0x1afe>
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d28:	2b0a      	cmp	r3, #10
 8019d2a:	d009      	beq.n	8019d40 <UART_SetConfig+0x1af8>
 8019d2c:	687b      	ldr	r3, [r7, #4]
 8019d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d30:	2b0b      	cmp	r3, #11
 8019d32:	d102      	bne.n	8019d3a <UART_SetConfig+0x1af2>
 8019d34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019d38:	e022      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019d3e:	e01f      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8019d44:	e01c      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019d4a:	e019      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019d50:	e016      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019d56:	e013      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d58:	f241 5354 	movw	r3, #5460	; 0x1554
 8019d5c:	e010      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d5e:	f641 1398 	movw	r3, #6552	; 0x1998
 8019d62:	e00d      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8019d68:	e00a      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d6a:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8019d6e:	e007      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8019d74:	e004      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8019d7a:	e001      	b.n	8019d80 <UART_SetConfig+0x1b38>
 8019d7c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8019d80:	687a      	ldr	r2, [r7, #4]
 8019d82:	6852      	ldr	r2, [r2, #4]
 8019d84:	0852      	lsrs	r2, r2, #1
 8019d86:	441a      	add	r2, r3
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	685b      	ldr	r3, [r3, #4]
 8019d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d90:	b29b      	uxth	r3, r3
 8019d92:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019d94:	e003      	b.n	8019d9e <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 8019d96:	2301      	movs	r3, #1
 8019d98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8019d9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019da0:	2b0f      	cmp	r3, #15
 8019da2:	d916      	bls.n	8019dd2 <UART_SetConfig+0x1b8a>
 8019da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019da6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019daa:	d212      	bcs.n	8019dd2 <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019dae:	b29b      	uxth	r3, r3
 8019db0:	f023 030f 	bic.w	r3, r3, #15
 8019db4:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019db6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019db8:	085b      	lsrs	r3, r3, #1
 8019dba:	b29b      	uxth	r3, r3
 8019dbc:	f003 0307 	and.w	r3, r3, #7
 8019dc0:	b29a      	uxth	r2, r3
 8019dc2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019dc4:	4313      	orrs	r3, r2
 8019dc6:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019dce:	60da      	str	r2, [r3, #12]
 8019dd0:	e3a3      	b.n	801a51a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8019dd2:	2301      	movs	r3, #1
 8019dd4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8019dd8:	e39f      	b.n	801a51a <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 8019dda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8019dde:	2b40      	cmp	r3, #64	; 0x40
 8019de0:	f200 8388 	bhi.w	801a4f4 <UART_SetConfig+0x22ac>
 8019de4:	a201      	add	r2, pc, #4	; (adr r2, 8019dec <UART_SetConfig+0x1ba4>)
 8019de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019dea:	bf00      	nop
 8019dec:	08019ef1 	.word	0x08019ef1
 8019df0:	08019fa7 	.word	0x08019fa7
 8019df4:	0801a4f5 	.word	0x0801a4f5
 8019df8:	0801a4f5 	.word	0x0801a4f5
 8019dfc:	0801a05d 	.word	0x0801a05d
 8019e00:	0801a4f5 	.word	0x0801a4f5
 8019e04:	0801a4f5 	.word	0x0801a4f5
 8019e08:	0801a4f5 	.word	0x0801a4f5
 8019e0c:	0801a117 	.word	0x0801a117
 8019e10:	0801a4f5 	.word	0x0801a4f5
 8019e14:	0801a4f5 	.word	0x0801a4f5
 8019e18:	0801a4f5 	.word	0x0801a4f5
 8019e1c:	0801a4f5 	.word	0x0801a4f5
 8019e20:	0801a4f5 	.word	0x0801a4f5
 8019e24:	0801a4f5 	.word	0x0801a4f5
 8019e28:	0801a4f5 	.word	0x0801a4f5
 8019e2c:	0801a1d1 	.word	0x0801a1d1
 8019e30:	0801a4f5 	.word	0x0801a4f5
 8019e34:	0801a4f5 	.word	0x0801a4f5
 8019e38:	0801a4f5 	.word	0x0801a4f5
 8019e3c:	0801a4f5 	.word	0x0801a4f5
 8019e40:	0801a4f5 	.word	0x0801a4f5
 8019e44:	0801a4f5 	.word	0x0801a4f5
 8019e48:	0801a4f5 	.word	0x0801a4f5
 8019e4c:	0801a4f5 	.word	0x0801a4f5
 8019e50:	0801a4f5 	.word	0x0801a4f5
 8019e54:	0801a4f5 	.word	0x0801a4f5
 8019e58:	0801a4f5 	.word	0x0801a4f5
 8019e5c:	0801a4f5 	.word	0x0801a4f5
 8019e60:	0801a4f5 	.word	0x0801a4f5
 8019e64:	0801a4f5 	.word	0x0801a4f5
 8019e68:	0801a4f5 	.word	0x0801a4f5
 8019e6c:	0801a341 	.word	0x0801a341
 8019e70:	0801a4f5 	.word	0x0801a4f5
 8019e74:	0801a4f5 	.word	0x0801a4f5
 8019e78:	0801a4f5 	.word	0x0801a4f5
 8019e7c:	0801a4f5 	.word	0x0801a4f5
 8019e80:	0801a4f5 	.word	0x0801a4f5
 8019e84:	0801a4f5 	.word	0x0801a4f5
 8019e88:	0801a4f5 	.word	0x0801a4f5
 8019e8c:	0801a4f5 	.word	0x0801a4f5
 8019e90:	0801a4f5 	.word	0x0801a4f5
 8019e94:	0801a4f5 	.word	0x0801a4f5
 8019e98:	0801a4f5 	.word	0x0801a4f5
 8019e9c:	0801a4f5 	.word	0x0801a4f5
 8019ea0:	0801a4f5 	.word	0x0801a4f5
 8019ea4:	0801a4f5 	.word	0x0801a4f5
 8019ea8:	0801a4f5 	.word	0x0801a4f5
 8019eac:	0801a4f5 	.word	0x0801a4f5
 8019eb0:	0801a4f5 	.word	0x0801a4f5
 8019eb4:	0801a4f5 	.word	0x0801a4f5
 8019eb8:	0801a4f5 	.word	0x0801a4f5
 8019ebc:	0801a4f5 	.word	0x0801a4f5
 8019ec0:	0801a4f5 	.word	0x0801a4f5
 8019ec4:	0801a4f5 	.word	0x0801a4f5
 8019ec8:	0801a4f5 	.word	0x0801a4f5
 8019ecc:	0801a4f5 	.word	0x0801a4f5
 8019ed0:	0801a4f5 	.word	0x0801a4f5
 8019ed4:	0801a4f5 	.word	0x0801a4f5
 8019ed8:	0801a4f5 	.word	0x0801a4f5
 8019edc:	0801a4f5 	.word	0x0801a4f5
 8019ee0:	0801a4f5 	.word	0x0801a4f5
 8019ee4:	0801a4f5 	.word	0x0801a4f5
 8019ee8:	0801a4f5 	.word	0x0801a4f5
 8019eec:	0801a435 	.word	0x0801a435
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019ef0:	f7fb fcbe 	bl	8015870 <HAL_RCC_GetPCLK1Freq>
 8019ef4:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019ef6:	687b      	ldr	r3, [r7, #4]
 8019ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d044      	beq.n	8019f88 <UART_SetConfig+0x1d40>
 8019efe:	687b      	ldr	r3, [r7, #4]
 8019f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f02:	2b01      	cmp	r3, #1
 8019f04:	d03e      	beq.n	8019f84 <UART_SetConfig+0x1d3c>
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f0a:	2b02      	cmp	r3, #2
 8019f0c:	d038      	beq.n	8019f80 <UART_SetConfig+0x1d38>
 8019f0e:	687b      	ldr	r3, [r7, #4]
 8019f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f12:	2b03      	cmp	r3, #3
 8019f14:	d032      	beq.n	8019f7c <UART_SetConfig+0x1d34>
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f1a:	2b04      	cmp	r3, #4
 8019f1c:	d02c      	beq.n	8019f78 <UART_SetConfig+0x1d30>
 8019f1e:	687b      	ldr	r3, [r7, #4]
 8019f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f22:	2b05      	cmp	r3, #5
 8019f24:	d026      	beq.n	8019f74 <UART_SetConfig+0x1d2c>
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f2a:	2b06      	cmp	r3, #6
 8019f2c:	d020      	beq.n	8019f70 <UART_SetConfig+0x1d28>
 8019f2e:	687b      	ldr	r3, [r7, #4]
 8019f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f32:	2b07      	cmp	r3, #7
 8019f34:	d01a      	beq.n	8019f6c <UART_SetConfig+0x1d24>
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f3a:	2b08      	cmp	r3, #8
 8019f3c:	d014      	beq.n	8019f68 <UART_SetConfig+0x1d20>
 8019f3e:	687b      	ldr	r3, [r7, #4]
 8019f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f42:	2b09      	cmp	r3, #9
 8019f44:	d00e      	beq.n	8019f64 <UART_SetConfig+0x1d1c>
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f4a:	2b0a      	cmp	r3, #10
 8019f4c:	d008      	beq.n	8019f60 <UART_SetConfig+0x1d18>
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019f52:	2b0b      	cmp	r3, #11
 8019f54:	d102      	bne.n	8019f5c <UART_SetConfig+0x1d14>
 8019f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8019f5a:	e016      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f5c:	2301      	movs	r3, #1
 8019f5e:	e014      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f60:	2380      	movs	r3, #128	; 0x80
 8019f62:	e012      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f64:	2340      	movs	r3, #64	; 0x40
 8019f66:	e010      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f68:	2320      	movs	r3, #32
 8019f6a:	e00e      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f6c:	2310      	movs	r3, #16
 8019f6e:	e00c      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f70:	230c      	movs	r3, #12
 8019f72:	e00a      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f74:	230a      	movs	r3, #10
 8019f76:	e008      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f78:	2308      	movs	r3, #8
 8019f7a:	e006      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f7c:	2306      	movs	r3, #6
 8019f7e:	e004      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f80:	2304      	movs	r3, #4
 8019f82:	e002      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f84:	2302      	movs	r3, #2
 8019f86:	e000      	b.n	8019f8a <UART_SetConfig+0x1d42>
 8019f88:	2301      	movs	r3, #1
 8019f8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8019f90:	687b      	ldr	r3, [r7, #4]
 8019f92:	685b      	ldr	r3, [r3, #4]
 8019f94:	085b      	lsrs	r3, r3, #1
 8019f96:	441a      	add	r2, r3
 8019f98:	687b      	ldr	r3, [r7, #4]
 8019f9a:	685b      	ldr	r3, [r3, #4]
 8019f9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019fa0:	b29b      	uxth	r3, r3
 8019fa2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8019fa4:	e2aa      	b.n	801a4fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019fa6:	f7fb fc79 	bl	801589c <HAL_RCC_GetPCLK2Freq>
 8019faa:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019fac:	687b      	ldr	r3, [r7, #4]
 8019fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fb0:	2b00      	cmp	r3, #0
 8019fb2:	d044      	beq.n	801a03e <UART_SetConfig+0x1df6>
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fb8:	2b01      	cmp	r3, #1
 8019fba:	d03e      	beq.n	801a03a <UART_SetConfig+0x1df2>
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc0:	2b02      	cmp	r3, #2
 8019fc2:	d038      	beq.n	801a036 <UART_SetConfig+0x1dee>
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fc8:	2b03      	cmp	r3, #3
 8019fca:	d032      	beq.n	801a032 <UART_SetConfig+0x1dea>
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fd0:	2b04      	cmp	r3, #4
 8019fd2:	d02c      	beq.n	801a02e <UART_SetConfig+0x1de6>
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fd8:	2b05      	cmp	r3, #5
 8019fda:	d026      	beq.n	801a02a <UART_SetConfig+0x1de2>
 8019fdc:	687b      	ldr	r3, [r7, #4]
 8019fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fe0:	2b06      	cmp	r3, #6
 8019fe2:	d020      	beq.n	801a026 <UART_SetConfig+0x1dde>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019fe8:	2b07      	cmp	r3, #7
 8019fea:	d01a      	beq.n	801a022 <UART_SetConfig+0x1dda>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff0:	2b08      	cmp	r3, #8
 8019ff2:	d014      	beq.n	801a01e <UART_SetConfig+0x1dd6>
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ff8:	2b09      	cmp	r3, #9
 8019ffa:	d00e      	beq.n	801a01a <UART_SetConfig+0x1dd2>
 8019ffc:	687b      	ldr	r3, [r7, #4]
 8019ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a000:	2b0a      	cmp	r3, #10
 801a002:	d008      	beq.n	801a016 <UART_SetConfig+0x1dce>
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a008:	2b0b      	cmp	r3, #11
 801a00a:	d102      	bne.n	801a012 <UART_SetConfig+0x1dca>
 801a00c:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a010:	e016      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a012:	2301      	movs	r3, #1
 801a014:	e014      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a016:	2380      	movs	r3, #128	; 0x80
 801a018:	e012      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a01a:	2340      	movs	r3, #64	; 0x40
 801a01c:	e010      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a01e:	2320      	movs	r3, #32
 801a020:	e00e      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a022:	2310      	movs	r3, #16
 801a024:	e00c      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a026:	230c      	movs	r3, #12
 801a028:	e00a      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a02a:	230a      	movs	r3, #10
 801a02c:	e008      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a02e:	2308      	movs	r3, #8
 801a030:	e006      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a032:	2306      	movs	r3, #6
 801a034:	e004      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a036:	2304      	movs	r3, #4
 801a038:	e002      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a03a:	2302      	movs	r3, #2
 801a03c:	e000      	b.n	801a040 <UART_SetConfig+0x1df8>
 801a03e:	2301      	movs	r3, #1
 801a040:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a042:	fbb2 f2f3 	udiv	r2, r2, r3
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	685b      	ldr	r3, [r3, #4]
 801a04a:	085b      	lsrs	r3, r3, #1
 801a04c:	441a      	add	r2, r3
 801a04e:	687b      	ldr	r3, [r7, #4]
 801a050:	685b      	ldr	r3, [r3, #4]
 801a052:	fbb2 f3f3 	udiv	r3, r2, r3
 801a056:	b29b      	uxth	r3, r3
 801a058:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a05a:	e24f      	b.n	801a4fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801a05c:	f107 0318 	add.w	r3, r7, #24
 801a060:	4618      	mov	r0, r3
 801a062:	f7fc fb25 	bl	80166b0 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a066:	69fa      	ldr	r2, [r7, #28]
 801a068:	687b      	ldr	r3, [r7, #4]
 801a06a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	d044      	beq.n	801a0fa <UART_SetConfig+0x1eb2>
 801a070:	687b      	ldr	r3, [r7, #4]
 801a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a074:	2b01      	cmp	r3, #1
 801a076:	d03e      	beq.n	801a0f6 <UART_SetConfig+0x1eae>
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a07c:	2b02      	cmp	r3, #2
 801a07e:	d038      	beq.n	801a0f2 <UART_SetConfig+0x1eaa>
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a084:	2b03      	cmp	r3, #3
 801a086:	d032      	beq.n	801a0ee <UART_SetConfig+0x1ea6>
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a08c:	2b04      	cmp	r3, #4
 801a08e:	d02c      	beq.n	801a0ea <UART_SetConfig+0x1ea2>
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a094:	2b05      	cmp	r3, #5
 801a096:	d026      	beq.n	801a0e6 <UART_SetConfig+0x1e9e>
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a09c:	2b06      	cmp	r3, #6
 801a09e:	d020      	beq.n	801a0e2 <UART_SetConfig+0x1e9a>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0a4:	2b07      	cmp	r3, #7
 801a0a6:	d01a      	beq.n	801a0de <UART_SetConfig+0x1e96>
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0ac:	2b08      	cmp	r3, #8
 801a0ae:	d014      	beq.n	801a0da <UART_SetConfig+0x1e92>
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0b4:	2b09      	cmp	r3, #9
 801a0b6:	d00e      	beq.n	801a0d6 <UART_SetConfig+0x1e8e>
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0bc:	2b0a      	cmp	r3, #10
 801a0be:	d008      	beq.n	801a0d2 <UART_SetConfig+0x1e8a>
 801a0c0:	687b      	ldr	r3, [r7, #4]
 801a0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a0c4:	2b0b      	cmp	r3, #11
 801a0c6:	d102      	bne.n	801a0ce <UART_SetConfig+0x1e86>
 801a0c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a0cc:	e016      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0ce:	2301      	movs	r3, #1
 801a0d0:	e014      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0d2:	2380      	movs	r3, #128	; 0x80
 801a0d4:	e012      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0d6:	2340      	movs	r3, #64	; 0x40
 801a0d8:	e010      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0da:	2320      	movs	r3, #32
 801a0dc:	e00e      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0de:	2310      	movs	r3, #16
 801a0e0:	e00c      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0e2:	230c      	movs	r3, #12
 801a0e4:	e00a      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0e6:	230a      	movs	r3, #10
 801a0e8:	e008      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0ea:	2308      	movs	r3, #8
 801a0ec:	e006      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0ee:	2306      	movs	r3, #6
 801a0f0:	e004      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0f2:	2304      	movs	r3, #4
 801a0f4:	e002      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0f6:	2302      	movs	r3, #2
 801a0f8:	e000      	b.n	801a0fc <UART_SetConfig+0x1eb4>
 801a0fa:	2301      	movs	r3, #1
 801a0fc:	fbb2 f2f3 	udiv	r2, r2, r3
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	685b      	ldr	r3, [r3, #4]
 801a104:	085b      	lsrs	r3, r3, #1
 801a106:	441a      	add	r2, r3
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	685b      	ldr	r3, [r3, #4]
 801a10c:	fbb2 f3f3 	udiv	r3, r2, r3
 801a110:	b29b      	uxth	r3, r3
 801a112:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a114:	e1f2      	b.n	801a4fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801a116:	f107 030c 	add.w	r3, r7, #12
 801a11a:	4618      	mov	r0, r3
 801a11c:	f7fc fc14 	bl	8016948 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a120:	693a      	ldr	r2, [r7, #16]
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a126:	2b00      	cmp	r3, #0
 801a128:	d044      	beq.n	801a1b4 <UART_SetConfig+0x1f6c>
 801a12a:	687b      	ldr	r3, [r7, #4]
 801a12c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a12e:	2b01      	cmp	r3, #1
 801a130:	d03e      	beq.n	801a1b0 <UART_SetConfig+0x1f68>
 801a132:	687b      	ldr	r3, [r7, #4]
 801a134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a136:	2b02      	cmp	r3, #2
 801a138:	d038      	beq.n	801a1ac <UART_SetConfig+0x1f64>
 801a13a:	687b      	ldr	r3, [r7, #4]
 801a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a13e:	2b03      	cmp	r3, #3
 801a140:	d032      	beq.n	801a1a8 <UART_SetConfig+0x1f60>
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a146:	2b04      	cmp	r3, #4
 801a148:	d02c      	beq.n	801a1a4 <UART_SetConfig+0x1f5c>
 801a14a:	687b      	ldr	r3, [r7, #4]
 801a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a14e:	2b05      	cmp	r3, #5
 801a150:	d026      	beq.n	801a1a0 <UART_SetConfig+0x1f58>
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a156:	2b06      	cmp	r3, #6
 801a158:	d020      	beq.n	801a19c <UART_SetConfig+0x1f54>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a15e:	2b07      	cmp	r3, #7
 801a160:	d01a      	beq.n	801a198 <UART_SetConfig+0x1f50>
 801a162:	687b      	ldr	r3, [r7, #4]
 801a164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a166:	2b08      	cmp	r3, #8
 801a168:	d014      	beq.n	801a194 <UART_SetConfig+0x1f4c>
 801a16a:	687b      	ldr	r3, [r7, #4]
 801a16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a16e:	2b09      	cmp	r3, #9
 801a170:	d00e      	beq.n	801a190 <UART_SetConfig+0x1f48>
 801a172:	687b      	ldr	r3, [r7, #4]
 801a174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a176:	2b0a      	cmp	r3, #10
 801a178:	d008      	beq.n	801a18c <UART_SetConfig+0x1f44>
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a17e:	2b0b      	cmp	r3, #11
 801a180:	d102      	bne.n	801a188 <UART_SetConfig+0x1f40>
 801a182:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a186:	e016      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a188:	2301      	movs	r3, #1
 801a18a:	e014      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a18c:	2380      	movs	r3, #128	; 0x80
 801a18e:	e012      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a190:	2340      	movs	r3, #64	; 0x40
 801a192:	e010      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a194:	2320      	movs	r3, #32
 801a196:	e00e      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a198:	2310      	movs	r3, #16
 801a19a:	e00c      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a19c:	230c      	movs	r3, #12
 801a19e:	e00a      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1a0:	230a      	movs	r3, #10
 801a1a2:	e008      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1a4:	2308      	movs	r3, #8
 801a1a6:	e006      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1a8:	2306      	movs	r3, #6
 801a1aa:	e004      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1ac:	2304      	movs	r3, #4
 801a1ae:	e002      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1b0:	2302      	movs	r3, #2
 801a1b2:	e000      	b.n	801a1b6 <UART_SetConfig+0x1f6e>
 801a1b4:	2301      	movs	r3, #1
 801a1b6:	fbb2 f2f3 	udiv	r2, r2, r3
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	685b      	ldr	r3, [r3, #4]
 801a1be:	085b      	lsrs	r3, r3, #1
 801a1c0:	441a      	add	r2, r3
 801a1c2:	687b      	ldr	r3, [r7, #4]
 801a1c4:	685b      	ldr	r3, [r3, #4]
 801a1c6:	fbb2 f3f3 	udiv	r3, r2, r3
 801a1ca:	b29b      	uxth	r3, r3
 801a1cc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a1ce:	e195      	b.n	801a4fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801a1d0:	4b87      	ldr	r3, [pc, #540]	; (801a3f0 <UART_SetConfig+0x21a8>)
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f003 0320 	and.w	r3, r3, #32
 801a1d8:	2b00      	cmp	r3, #0
 801a1da:	d05d      	beq.n	801a298 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a1dc:	4b84      	ldr	r3, [pc, #528]	; (801a3f0 <UART_SetConfig+0x21a8>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	08db      	lsrs	r3, r3, #3
 801a1e2:	f003 0303 	and.w	r3, r3, #3
 801a1e6:	4a83      	ldr	r2, [pc, #524]	; (801a3f4 <UART_SetConfig+0x21ac>)
 801a1e8:	40da      	lsrs	r2, r3
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d044      	beq.n	801a27c <UART_SetConfig+0x2034>
 801a1f2:	687b      	ldr	r3, [r7, #4]
 801a1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1f6:	2b01      	cmp	r3, #1
 801a1f8:	d03e      	beq.n	801a278 <UART_SetConfig+0x2030>
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1fe:	2b02      	cmp	r3, #2
 801a200:	d038      	beq.n	801a274 <UART_SetConfig+0x202c>
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a206:	2b03      	cmp	r3, #3
 801a208:	d032      	beq.n	801a270 <UART_SetConfig+0x2028>
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a20e:	2b04      	cmp	r3, #4
 801a210:	d02c      	beq.n	801a26c <UART_SetConfig+0x2024>
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a216:	2b05      	cmp	r3, #5
 801a218:	d026      	beq.n	801a268 <UART_SetConfig+0x2020>
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a21e:	2b06      	cmp	r3, #6
 801a220:	d020      	beq.n	801a264 <UART_SetConfig+0x201c>
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a226:	2b07      	cmp	r3, #7
 801a228:	d01a      	beq.n	801a260 <UART_SetConfig+0x2018>
 801a22a:	687b      	ldr	r3, [r7, #4]
 801a22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a22e:	2b08      	cmp	r3, #8
 801a230:	d014      	beq.n	801a25c <UART_SetConfig+0x2014>
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a236:	2b09      	cmp	r3, #9
 801a238:	d00e      	beq.n	801a258 <UART_SetConfig+0x2010>
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a23e:	2b0a      	cmp	r3, #10
 801a240:	d008      	beq.n	801a254 <UART_SetConfig+0x200c>
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a246:	2b0b      	cmp	r3, #11
 801a248:	d102      	bne.n	801a250 <UART_SetConfig+0x2008>
 801a24a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a24e:	e016      	b.n	801a27e <UART_SetConfig+0x2036>
 801a250:	2301      	movs	r3, #1
 801a252:	e014      	b.n	801a27e <UART_SetConfig+0x2036>
 801a254:	2380      	movs	r3, #128	; 0x80
 801a256:	e012      	b.n	801a27e <UART_SetConfig+0x2036>
 801a258:	2340      	movs	r3, #64	; 0x40
 801a25a:	e010      	b.n	801a27e <UART_SetConfig+0x2036>
 801a25c:	2320      	movs	r3, #32
 801a25e:	e00e      	b.n	801a27e <UART_SetConfig+0x2036>
 801a260:	2310      	movs	r3, #16
 801a262:	e00c      	b.n	801a27e <UART_SetConfig+0x2036>
 801a264:	230c      	movs	r3, #12
 801a266:	e00a      	b.n	801a27e <UART_SetConfig+0x2036>
 801a268:	230a      	movs	r3, #10
 801a26a:	e008      	b.n	801a27e <UART_SetConfig+0x2036>
 801a26c:	2308      	movs	r3, #8
 801a26e:	e006      	b.n	801a27e <UART_SetConfig+0x2036>
 801a270:	2306      	movs	r3, #6
 801a272:	e004      	b.n	801a27e <UART_SetConfig+0x2036>
 801a274:	2304      	movs	r3, #4
 801a276:	e002      	b.n	801a27e <UART_SetConfig+0x2036>
 801a278:	2302      	movs	r3, #2
 801a27a:	e000      	b.n	801a27e <UART_SetConfig+0x2036>
 801a27c:	2301      	movs	r3, #1
 801a27e:	fbb2 f2f3 	udiv	r2, r2, r3
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	685b      	ldr	r3, [r3, #4]
 801a286:	085b      	lsrs	r3, r3, #1
 801a288:	441a      	add	r2, r3
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	685b      	ldr	r3, [r3, #4]
 801a28e:	fbb2 f3f3 	udiv	r3, r2, r3
 801a292:	b29b      	uxth	r3, r3
 801a294:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 801a296:	e131      	b.n	801a4fc <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d043      	beq.n	801a328 <UART_SetConfig+0x20e0>
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2a4:	2b01      	cmp	r3, #1
 801a2a6:	d03d      	beq.n	801a324 <UART_SetConfig+0x20dc>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ac:	2b02      	cmp	r3, #2
 801a2ae:	d037      	beq.n	801a320 <UART_SetConfig+0x20d8>
 801a2b0:	687b      	ldr	r3, [r7, #4]
 801a2b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b4:	2b03      	cmp	r3, #3
 801a2b6:	d031      	beq.n	801a31c <UART_SetConfig+0x20d4>
 801a2b8:	687b      	ldr	r3, [r7, #4]
 801a2ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2bc:	2b04      	cmp	r3, #4
 801a2be:	d02b      	beq.n	801a318 <UART_SetConfig+0x20d0>
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2c4:	2b05      	cmp	r3, #5
 801a2c6:	d025      	beq.n	801a314 <UART_SetConfig+0x20cc>
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2cc:	2b06      	cmp	r3, #6
 801a2ce:	d01f      	beq.n	801a310 <UART_SetConfig+0x20c8>
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2d4:	2b07      	cmp	r3, #7
 801a2d6:	d019      	beq.n	801a30c <UART_SetConfig+0x20c4>
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2dc:	2b08      	cmp	r3, #8
 801a2de:	d013      	beq.n	801a308 <UART_SetConfig+0x20c0>
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e4:	2b09      	cmp	r3, #9
 801a2e6:	d00d      	beq.n	801a304 <UART_SetConfig+0x20bc>
 801a2e8:	687b      	ldr	r3, [r7, #4]
 801a2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2ec:	2b0a      	cmp	r3, #10
 801a2ee:	d007      	beq.n	801a300 <UART_SetConfig+0x20b8>
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2f4:	2b0b      	cmp	r3, #11
 801a2f6:	d101      	bne.n	801a2fc <UART_SetConfig+0x20b4>
 801a2f8:	4b3f      	ldr	r3, [pc, #252]	; (801a3f8 <UART_SetConfig+0x21b0>)
 801a2fa:	e016      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a2fc:	4b3d      	ldr	r3, [pc, #244]	; (801a3f4 <UART_SetConfig+0x21ac>)
 801a2fe:	e014      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a300:	4b3e      	ldr	r3, [pc, #248]	; (801a3fc <UART_SetConfig+0x21b4>)
 801a302:	e012      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a304:	4b3e      	ldr	r3, [pc, #248]	; (801a400 <UART_SetConfig+0x21b8>)
 801a306:	e010      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a308:	4b3e      	ldr	r3, [pc, #248]	; (801a404 <UART_SetConfig+0x21bc>)
 801a30a:	e00e      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a30c:	4b3e      	ldr	r3, [pc, #248]	; (801a408 <UART_SetConfig+0x21c0>)
 801a30e:	e00c      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a310:	4b3e      	ldr	r3, [pc, #248]	; (801a40c <UART_SetConfig+0x21c4>)
 801a312:	e00a      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a314:	4b3e      	ldr	r3, [pc, #248]	; (801a410 <UART_SetConfig+0x21c8>)
 801a316:	e008      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a318:	4b3e      	ldr	r3, [pc, #248]	; (801a414 <UART_SetConfig+0x21cc>)
 801a31a:	e006      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a31c:	4b3e      	ldr	r3, [pc, #248]	; (801a418 <UART_SetConfig+0x21d0>)
 801a31e:	e004      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a320:	4b3e      	ldr	r3, [pc, #248]	; (801a41c <UART_SetConfig+0x21d4>)
 801a322:	e002      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a324:	4b3e      	ldr	r3, [pc, #248]	; (801a420 <UART_SetConfig+0x21d8>)
 801a326:	e000      	b.n	801a32a <UART_SetConfig+0x20e2>
 801a328:	4b32      	ldr	r3, [pc, #200]	; (801a3f4 <UART_SetConfig+0x21ac>)
 801a32a:	687a      	ldr	r2, [r7, #4]
 801a32c:	6852      	ldr	r2, [r2, #4]
 801a32e:	0852      	lsrs	r2, r2, #1
 801a330:	441a      	add	r2, r3
 801a332:	687b      	ldr	r3, [r7, #4]
 801a334:	685b      	ldr	r3, [r3, #4]
 801a336:	fbb2 f3f3 	udiv	r3, r2, r3
 801a33a:	b29b      	uxth	r3, r3
 801a33c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a33e:	e0dd      	b.n	801a4fc <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a340:	687b      	ldr	r3, [r7, #4]
 801a342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a344:	2b00      	cmp	r3, #0
 801a346:	d046      	beq.n	801a3d6 <UART_SetConfig+0x218e>
 801a348:	687b      	ldr	r3, [r7, #4]
 801a34a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a34c:	2b01      	cmp	r3, #1
 801a34e:	d040      	beq.n	801a3d2 <UART_SetConfig+0x218a>
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a354:	2b02      	cmp	r3, #2
 801a356:	d03a      	beq.n	801a3ce <UART_SetConfig+0x2186>
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a35c:	2b03      	cmp	r3, #3
 801a35e:	d034      	beq.n	801a3ca <UART_SetConfig+0x2182>
 801a360:	687b      	ldr	r3, [r7, #4]
 801a362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a364:	2b04      	cmp	r3, #4
 801a366:	d02e      	beq.n	801a3c6 <UART_SetConfig+0x217e>
 801a368:	687b      	ldr	r3, [r7, #4]
 801a36a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a36c:	2b05      	cmp	r3, #5
 801a36e:	d028      	beq.n	801a3c2 <UART_SetConfig+0x217a>
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a374:	2b06      	cmp	r3, #6
 801a376:	d022      	beq.n	801a3be <UART_SetConfig+0x2176>
 801a378:	687b      	ldr	r3, [r7, #4]
 801a37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a37c:	2b07      	cmp	r3, #7
 801a37e:	d01c      	beq.n	801a3ba <UART_SetConfig+0x2172>
 801a380:	687b      	ldr	r3, [r7, #4]
 801a382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a384:	2b08      	cmp	r3, #8
 801a386:	d016      	beq.n	801a3b6 <UART_SetConfig+0x216e>
 801a388:	687b      	ldr	r3, [r7, #4]
 801a38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a38c:	2b09      	cmp	r3, #9
 801a38e:	d00f      	beq.n	801a3b0 <UART_SetConfig+0x2168>
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a394:	2b0a      	cmp	r3, #10
 801a396:	d008      	beq.n	801a3aa <UART_SetConfig+0x2162>
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a39c:	2b0b      	cmp	r3, #11
 801a39e:	d102      	bne.n	801a3a6 <UART_SetConfig+0x215e>
 801a3a0:	f643 5309 	movw	r3, #15625	; 0x3d09
 801a3a4:	e018      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3a6:	4b18      	ldr	r3, [pc, #96]	; (801a408 <UART_SetConfig+0x21c0>)
 801a3a8:	e016      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3aa:	f647 2312 	movw	r3, #31250	; 0x7a12
 801a3ae:	e013      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3b0:	f24f 4324 	movw	r3, #62500	; 0xf424
 801a3b4:	e010      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3b6:	4b1b      	ldr	r3, [pc, #108]	; (801a424 <UART_SetConfig+0x21dc>)
 801a3b8:	e00e      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3ba:	4b0f      	ldr	r3, [pc, #60]	; (801a3f8 <UART_SetConfig+0x21b0>)
 801a3bc:	e00c      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3be:	4b1a      	ldr	r3, [pc, #104]	; (801a428 <UART_SetConfig+0x21e0>)
 801a3c0:	e00a      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3c2:	4b1a      	ldr	r3, [pc, #104]	; (801a42c <UART_SetConfig+0x21e4>)
 801a3c4:	e008      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3c6:	4b0d      	ldr	r3, [pc, #52]	; (801a3fc <UART_SetConfig+0x21b4>)
 801a3c8:	e006      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3ca:	4b19      	ldr	r3, [pc, #100]	; (801a430 <UART_SetConfig+0x21e8>)
 801a3cc:	e004      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3ce:	4b0c      	ldr	r3, [pc, #48]	; (801a400 <UART_SetConfig+0x21b8>)
 801a3d0:	e002      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3d2:	4b0c      	ldr	r3, [pc, #48]	; (801a404 <UART_SetConfig+0x21bc>)
 801a3d4:	e000      	b.n	801a3d8 <UART_SetConfig+0x2190>
 801a3d6:	4b0c      	ldr	r3, [pc, #48]	; (801a408 <UART_SetConfig+0x21c0>)
 801a3d8:	687a      	ldr	r2, [r7, #4]
 801a3da:	6852      	ldr	r2, [r2, #4]
 801a3dc:	0852      	lsrs	r2, r2, #1
 801a3de:	441a      	add	r2, r3
 801a3e0:	687b      	ldr	r3, [r7, #4]
 801a3e2:	685b      	ldr	r3, [r3, #4]
 801a3e4:	fbb2 f3f3 	udiv	r3, r2, r3
 801a3e8:	b29b      	uxth	r3, r3
 801a3ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a3ec:	e086      	b.n	801a4fc <UART_SetConfig+0x22b4>
 801a3ee:	bf00      	nop
 801a3f0:	58024400 	.word	0x58024400
 801a3f4:	03d09000 	.word	0x03d09000
 801a3f8:	0003d090 	.word	0x0003d090
 801a3fc:	0007a120 	.word	0x0007a120
 801a400:	000f4240 	.word	0x000f4240
 801a404:	001e8480 	.word	0x001e8480
 801a408:	003d0900 	.word	0x003d0900
 801a40c:	00516155 	.word	0x00516155
 801a410:	0061a800 	.word	0x0061a800
 801a414:	007a1200 	.word	0x007a1200
 801a418:	00a2c2aa 	.word	0x00a2c2aa
 801a41c:	00f42400 	.word	0x00f42400
 801a420:	01e84800 	.word	0x01e84800
 801a424:	0001e848 	.word	0x0001e848
 801a428:	00051615 	.word	0x00051615
 801a42c:	00061a80 	.word	0x00061a80
 801a430:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d04e      	beq.n	801a4da <UART_SetConfig+0x2292>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a440:	2b01      	cmp	r3, #1
 801a442:	d047      	beq.n	801a4d4 <UART_SetConfig+0x228c>
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a448:	2b02      	cmp	r3, #2
 801a44a:	d040      	beq.n	801a4ce <UART_SetConfig+0x2286>
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a450:	2b03      	cmp	r3, #3
 801a452:	d039      	beq.n	801a4c8 <UART_SetConfig+0x2280>
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a458:	2b04      	cmp	r3, #4
 801a45a:	d032      	beq.n	801a4c2 <UART_SetConfig+0x227a>
 801a45c:	687b      	ldr	r3, [r7, #4]
 801a45e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a460:	2b05      	cmp	r3, #5
 801a462:	d02b      	beq.n	801a4bc <UART_SetConfig+0x2274>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a468:	2b06      	cmp	r3, #6
 801a46a:	d024      	beq.n	801a4b6 <UART_SetConfig+0x226e>
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a470:	2b07      	cmp	r3, #7
 801a472:	d01d      	beq.n	801a4b0 <UART_SetConfig+0x2268>
 801a474:	687b      	ldr	r3, [r7, #4]
 801a476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a478:	2b08      	cmp	r3, #8
 801a47a:	d016      	beq.n	801a4aa <UART_SetConfig+0x2262>
 801a47c:	687b      	ldr	r3, [r7, #4]
 801a47e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a480:	2b09      	cmp	r3, #9
 801a482:	d00f      	beq.n	801a4a4 <UART_SetConfig+0x225c>
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a488:	2b0a      	cmp	r3, #10
 801a48a:	d008      	beq.n	801a49e <UART_SetConfig+0x2256>
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a490:	2b0b      	cmp	r3, #11
 801a492:	d101      	bne.n	801a498 <UART_SetConfig+0x2250>
 801a494:	2380      	movs	r3, #128	; 0x80
 801a496:	e022      	b.n	801a4de <UART_SetConfig+0x2296>
 801a498:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a49c:	e01f      	b.n	801a4de <UART_SetConfig+0x2296>
 801a49e:	f44f 7380 	mov.w	r3, #256	; 0x100
 801a4a2:	e01c      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a4a8:	e019      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a4ae:	e016      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a4b4:	e013      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4b6:	f640 23aa 	movw	r3, #2730	; 0xaaa
 801a4ba:	e010      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4bc:	f640 43cc 	movw	r3, #3276	; 0xccc
 801a4c0:	e00d      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a4c6:	e00a      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4c8:	f241 5355 	movw	r3, #5461	; 0x1555
 801a4cc:	e007      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801a4d2:	e004      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801a4d8:	e001      	b.n	801a4de <UART_SetConfig+0x2296>
 801a4da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801a4de:	687a      	ldr	r2, [r7, #4]
 801a4e0:	6852      	ldr	r2, [r2, #4]
 801a4e2:	0852      	lsrs	r2, r2, #1
 801a4e4:	441a      	add	r2, r3
 801a4e6:	687b      	ldr	r3, [r7, #4]
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	fbb2 f3f3 	udiv	r3, r2, r3
 801a4ee:	b29b      	uxth	r3, r3
 801a4f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 801a4f2:	e003      	b.n	801a4fc <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 801a4f4:	2301      	movs	r3, #1
 801a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 801a4fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801a4fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a4fe:	2b0f      	cmp	r3, #15
 801a500:	d908      	bls.n	801a514 <UART_SetConfig+0x22cc>
 801a502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801a508:	d204      	bcs.n	801a514 <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 801a50a:	687b      	ldr	r3, [r7, #4]
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a510:	60da      	str	r2, [r3, #12]
 801a512:	e002      	b.n	801a51a <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 801a514:	2301      	movs	r3, #1
 801a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801a51a:	687b      	ldr	r3, [r7, #4]
 801a51c:	2201      	movs	r2, #1
 801a51e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	2201      	movs	r2, #1
 801a526:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	2200      	movs	r2, #0
 801a52e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	2200      	movs	r2, #0
 801a534:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801a536:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 801a53a:	4618      	mov	r0, r3
 801a53c:	3740      	adds	r7, #64	; 0x40
 801a53e:	46bd      	mov	sp, r7
 801a540:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0801a544 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801a544:	b480      	push	{r7}
 801a546:	b083      	sub	sp, #12
 801a548:	af00      	add	r7, sp, #0
 801a54a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a550:	f003 0301 	and.w	r3, r3, #1
 801a554:	2b00      	cmp	r3, #0
 801a556:	d00a      	beq.n	801a56e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a566:	687b      	ldr	r3, [r7, #4]
 801a568:	681b      	ldr	r3, [r3, #0]
 801a56a:	430a      	orrs	r2, r1
 801a56c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801a56e:	687b      	ldr	r3, [r7, #4]
 801a570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a572:	f003 0302 	and.w	r3, r3, #2
 801a576:	2b00      	cmp	r3, #0
 801a578:	d00a      	beq.n	801a590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	685b      	ldr	r3, [r3, #4]
 801a580:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801a588:	687b      	ldr	r3, [r7, #4]
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	430a      	orrs	r2, r1
 801a58e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a594:	f003 0304 	and.w	r3, r3, #4
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d00a      	beq.n	801a5b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	685b      	ldr	r3, [r3, #4]
 801a5a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801a5a6:	687b      	ldr	r3, [r7, #4]
 801a5a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	430a      	orrs	r2, r1
 801a5b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5b6:	f003 0308 	and.w	r3, r3, #8
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d00a      	beq.n	801a5d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	681b      	ldr	r3, [r3, #0]
 801a5c2:	685b      	ldr	r3, [r3, #4]
 801a5c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	430a      	orrs	r2, r1
 801a5d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801a5d4:	687b      	ldr	r3, [r7, #4]
 801a5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5d8:	f003 0310 	and.w	r3, r3, #16
 801a5dc:	2b00      	cmp	r3, #0
 801a5de:	d00a      	beq.n	801a5f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	689b      	ldr	r3, [r3, #8]
 801a5e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	430a      	orrs	r2, r1
 801a5f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a5fa:	f003 0320 	and.w	r3, r3, #32
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d00a      	beq.n	801a618 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	689b      	ldr	r3, [r3, #8]
 801a608:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	430a      	orrs	r2, r1
 801a616:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a620:	2b00      	cmp	r3, #0
 801a622:	d01a      	beq.n	801a65a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	685b      	ldr	r3, [r3, #4]
 801a62a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801a632:	687b      	ldr	r3, [r7, #4]
 801a634:	681b      	ldr	r3, [r3, #0]
 801a636:	430a      	orrs	r2, r1
 801a638:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a63e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801a642:	d10a      	bne.n	801a65a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	685b      	ldr	r3, [r3, #4]
 801a64a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	681b      	ldr	r3, [r3, #0]
 801a656:	430a      	orrs	r2, r1
 801a658:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a662:	2b00      	cmp	r3, #0
 801a664:	d00a      	beq.n	801a67c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801a666:	687b      	ldr	r3, [r7, #4]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	685b      	ldr	r3, [r3, #4]
 801a66c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801a670:	687b      	ldr	r3, [r7, #4]
 801a672:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	430a      	orrs	r2, r1
 801a67a:	605a      	str	r2, [r3, #4]
  }
}
 801a67c:	bf00      	nop
 801a67e:	370c      	adds	r7, #12
 801a680:	46bd      	mov	sp, r7
 801a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a686:	4770      	bx	lr

0801a688 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801a688:	b580      	push	{r7, lr}
 801a68a:	b086      	sub	sp, #24
 801a68c:	af02      	add	r7, sp, #8
 801a68e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a690:	687b      	ldr	r3, [r7, #4]
 801a692:	2200      	movs	r2, #0
 801a694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 801a698:	f7f8 fa0c 	bl	8012ab4 <HAL_GetTick>
 801a69c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	f003 0308 	and.w	r3, r3, #8
 801a6a8:	2b08      	cmp	r3, #8
 801a6aa:	d10e      	bne.n	801a6ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a6ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a6b0:	9300      	str	r3, [sp, #0]
 801a6b2:	68fb      	ldr	r3, [r7, #12]
 801a6b4:	2200      	movs	r2, #0
 801a6b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801a6ba:	6878      	ldr	r0, [r7, #4]
 801a6bc:	f000 f82c 	bl	801a718 <UART_WaitOnFlagUntilTimeout>
 801a6c0:	4603      	mov	r3, r0
 801a6c2:	2b00      	cmp	r3, #0
 801a6c4:	d001      	beq.n	801a6ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a6c6:	2303      	movs	r3, #3
 801a6c8:	e022      	b.n	801a710 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	f003 0304 	and.w	r3, r3, #4
 801a6d4:	2b04      	cmp	r3, #4
 801a6d6:	d10e      	bne.n	801a6f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801a6d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801a6dc:	9300      	str	r3, [sp, #0]
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801a6e6:	6878      	ldr	r0, [r7, #4]
 801a6e8:	f000 f816 	bl	801a718 <UART_WaitOnFlagUntilTimeout>
 801a6ec:	4603      	mov	r3, r0
 801a6ee:	2b00      	cmp	r3, #0
 801a6f0:	d001      	beq.n	801a6f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a6f2:	2303      	movs	r3, #3
 801a6f4:	e00c      	b.n	801a710 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	2220      	movs	r2, #32
 801a6fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	2220      	movs	r2, #32
 801a702:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801a706:	687b      	ldr	r3, [r7, #4]
 801a708:	2200      	movs	r2, #0
 801a70a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a70e:	2300      	movs	r3, #0
}
 801a710:	4618      	mov	r0, r3
 801a712:	3710      	adds	r7, #16
 801a714:	46bd      	mov	sp, r7
 801a716:	bd80      	pop	{r7, pc}

0801a718 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a718:	b580      	push	{r7, lr}
 801a71a:	b084      	sub	sp, #16
 801a71c:	af00      	add	r7, sp, #0
 801a71e:	60f8      	str	r0, [r7, #12]
 801a720:	60b9      	str	r1, [r7, #8]
 801a722:	603b      	str	r3, [r7, #0]
 801a724:	4613      	mov	r3, r2
 801a726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a728:	e062      	b.n	801a7f0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a72a:	69bb      	ldr	r3, [r7, #24]
 801a72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a730:	d05e      	beq.n	801a7f0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a732:	f7f8 f9bf 	bl	8012ab4 <HAL_GetTick>
 801a736:	4602      	mov	r2, r0
 801a738:	683b      	ldr	r3, [r7, #0]
 801a73a:	1ad3      	subs	r3, r2, r3
 801a73c:	69ba      	ldr	r2, [r7, #24]
 801a73e:	429a      	cmp	r2, r3
 801a740:	d302      	bcc.n	801a748 <UART_WaitOnFlagUntilTimeout+0x30>
 801a742:	69bb      	ldr	r3, [r7, #24]
 801a744:	2b00      	cmp	r3, #0
 801a746:	d11d      	bne.n	801a784 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a748:	68fb      	ldr	r3, [r7, #12]
 801a74a:	681b      	ldr	r3, [r3, #0]
 801a74c:	681a      	ldr	r2, [r3, #0]
 801a74e:	68fb      	ldr	r3, [r7, #12]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a756:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	689a      	ldr	r2, [r3, #8]
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	681b      	ldr	r3, [r3, #0]
 801a762:	f022 0201 	bic.w	r2, r2, #1
 801a766:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	2220      	movs	r2, #32
 801a76c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 801a770:	68fb      	ldr	r3, [r7, #12]
 801a772:	2220      	movs	r2, #32
 801a774:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 801a778:	68fb      	ldr	r3, [r7, #12]
 801a77a:	2200      	movs	r2, #0
 801a77c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 801a780:	2303      	movs	r3, #3
 801a782:	e045      	b.n	801a810 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	681b      	ldr	r3, [r3, #0]
 801a78a:	f003 0304 	and.w	r3, r3, #4
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d02e      	beq.n	801a7f0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	69db      	ldr	r3, [r3, #28]
 801a798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801a79c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801a7a0:	d126      	bne.n	801a7f0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	681b      	ldr	r3, [r3, #0]
 801a7a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a7aa:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801a7ac:	68fb      	ldr	r3, [r7, #12]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	681a      	ldr	r2, [r3, #0]
 801a7b2:	68fb      	ldr	r3, [r7, #12]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801a7ba:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	681b      	ldr	r3, [r3, #0]
 801a7c0:	689a      	ldr	r2, [r3, #8]
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	f022 0201 	bic.w	r2, r2, #1
 801a7ca:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	2220      	movs	r2, #32
 801a7d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 801a7d4:	68fb      	ldr	r3, [r7, #12]
 801a7d6:	2220      	movs	r2, #32
 801a7d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a7dc:	68fb      	ldr	r3, [r7, #12]
 801a7de:	2220      	movs	r2, #32
 801a7e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	2200      	movs	r2, #0
 801a7e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 801a7ec:	2303      	movs	r3, #3
 801a7ee:	e00f      	b.n	801a810 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a7f0:	68fb      	ldr	r3, [r7, #12]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	69da      	ldr	r2, [r3, #28]
 801a7f6:	68bb      	ldr	r3, [r7, #8]
 801a7f8:	4013      	ands	r3, r2
 801a7fa:	68ba      	ldr	r2, [r7, #8]
 801a7fc:	429a      	cmp	r2, r3
 801a7fe:	bf0c      	ite	eq
 801a800:	2301      	moveq	r3, #1
 801a802:	2300      	movne	r3, #0
 801a804:	b2db      	uxtb	r3, r3
 801a806:	461a      	mov	r2, r3
 801a808:	79fb      	ldrb	r3, [r7, #7]
 801a80a:	429a      	cmp	r2, r3
 801a80c:	d08d      	beq.n	801a72a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a80e:	2300      	movs	r3, #0
}
 801a810:	4618      	mov	r0, r3
 801a812:	3710      	adds	r7, #16
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}

0801a818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a818:	b480      	push	{r7}
 801a81a:	b083      	sub	sp, #12
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	681a      	ldr	r2, [r3, #0]
 801a826:	687b      	ldr	r3, [r7, #4]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801a82e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	681b      	ldr	r3, [r3, #0]
 801a834:	6899      	ldr	r1, [r3, #8]
 801a836:	687b      	ldr	r3, [r7, #4]
 801a838:	681a      	ldr	r2, [r3, #0]
 801a83a:	4b08      	ldr	r3, [pc, #32]	; (801a85c <UART_EndRxTransfer+0x44>)
 801a83c:	400b      	ands	r3, r1
 801a83e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	2220      	movs	r2, #32
 801a844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	2200      	movs	r2, #0
 801a84c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 801a84e:	bf00      	nop
 801a850:	370c      	adds	r7, #12
 801a852:	46bd      	mov	sp, r7
 801a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a858:	4770      	bx	lr
 801a85a:	bf00      	nop
 801a85c:	effffffe 	.word	0xeffffffe

0801a860 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a860:	b580      	push	{r7, lr}
 801a862:	b084      	sub	sp, #16
 801a864:	af00      	add	r7, sp, #0
 801a866:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a86c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	2200      	movs	r2, #0
 801a872:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	2200      	movs	r2, #0
 801a87a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a87e:	68f8      	ldr	r0, [r7, #12]
 801a880:	f7fd fcd8 	bl	8018234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a884:	bf00      	nop
 801a886:	3710      	adds	r7, #16
 801a888:	46bd      	mov	sp, r7
 801a88a:	bd80      	pop	{r7, pc}

0801a88c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a88c:	b580      	push	{r7, lr}
 801a88e:	b082      	sub	sp, #8
 801a890:	af00      	add	r7, sp, #0
 801a892:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	681a      	ldr	r2, [r3, #0]
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	681b      	ldr	r3, [r3, #0]
 801a89e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a8a2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2220      	movs	r2, #32
 801a8a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f7fd fcb4 	bl	8018220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a8b8:	bf00      	nop
 801a8ba:	3708      	adds	r7, #8
 801a8bc:	46bd      	mov	sp, r7
 801a8be:	bd80      	pop	{r7, pc}

0801a8c0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801a8c0:	b480      	push	{r7}
 801a8c2:	b083      	sub	sp, #12
 801a8c4:	af00      	add	r7, sp, #0
 801a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801a8c8:	bf00      	nop
 801a8ca:	370c      	adds	r7, #12
 801a8cc:	46bd      	mov	sp, r7
 801a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8d2:	4770      	bx	lr

0801a8d4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801a8d4:	b480      	push	{r7}
 801a8d6:	b083      	sub	sp, #12
 801a8d8:	af00      	add	r7, sp, #0
 801a8da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801a8dc:	bf00      	nop
 801a8de:	370c      	adds	r7, #12
 801a8e0:	46bd      	mov	sp, r7
 801a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8e6:	4770      	bx	lr

0801a8e8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801a8e8:	b480      	push	{r7}
 801a8ea:	b083      	sub	sp, #12
 801a8ec:	af00      	add	r7, sp, #0
 801a8ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801a8f0:	bf00      	nop
 801a8f2:	370c      	adds	r7, #12
 801a8f4:	46bd      	mov	sp, r7
 801a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8fa:	4770      	bx	lr

0801a8fc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801a8fc:	b480      	push	{r7}
 801a8fe:	b085      	sub	sp, #20
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a90a:	2b01      	cmp	r3, #1
 801a90c:	d101      	bne.n	801a912 <HAL_UARTEx_DisableFifoMode+0x16>
 801a90e:	2302      	movs	r3, #2
 801a910:	e027      	b.n	801a962 <HAL_UARTEx_DisableFifoMode+0x66>
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	2201      	movs	r2, #1
 801a916:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	2224      	movs	r2, #36	; 0x24
 801a91e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a922:	687b      	ldr	r3, [r7, #4]
 801a924:	681b      	ldr	r3, [r3, #0]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	681a      	ldr	r2, [r3, #0]
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	f022 0201 	bic.w	r2, r2, #1
 801a938:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 801a940:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	2200      	movs	r2, #0
 801a946:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	681b      	ldr	r3, [r3, #0]
 801a94c:	68fa      	ldr	r2, [r7, #12]
 801a94e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	2220      	movs	r2, #32
 801a954:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	2200      	movs	r2, #0
 801a95c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a960:	2300      	movs	r3, #0
}
 801a962:	4618      	mov	r0, r3
 801a964:	3714      	adds	r7, #20
 801a966:	46bd      	mov	sp, r7
 801a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a96c:	4770      	bx	lr

0801a96e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a96e:	b580      	push	{r7, lr}
 801a970:	b084      	sub	sp, #16
 801a972:	af00      	add	r7, sp, #0
 801a974:	6078      	str	r0, [r7, #4]
 801a976:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a97e:	2b01      	cmp	r3, #1
 801a980:	d101      	bne.n	801a986 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 801a982:	2302      	movs	r3, #2
 801a984:	e02d      	b.n	801a9e2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	2201      	movs	r2, #1
 801a98a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	2224      	movs	r2, #36	; 0x24
 801a992:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801a996:	687b      	ldr	r3, [r7, #4]
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	681b      	ldr	r3, [r3, #0]
 801a99c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	681b      	ldr	r3, [r3, #0]
 801a9a2:	681a      	ldr	r2, [r3, #0]
 801a9a4:	687b      	ldr	r3, [r7, #4]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	f022 0201 	bic.w	r2, r2, #1
 801a9ac:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	689b      	ldr	r3, [r3, #8]
 801a9b4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	683a      	ldr	r2, [r7, #0]
 801a9be:	430a      	orrs	r2, r1
 801a9c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801a9c2:	6878      	ldr	r0, [r7, #4]
 801a9c4:	f000 f850 	bl	801aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801a9c8:	687b      	ldr	r3, [r7, #4]
 801a9ca:	681b      	ldr	r3, [r3, #0]
 801a9cc:	68fa      	ldr	r2, [r7, #12]
 801a9ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	2220      	movs	r2, #32
 801a9d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	2200      	movs	r2, #0
 801a9dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801a9e0:	2300      	movs	r3, #0
}
 801a9e2:	4618      	mov	r0, r3
 801a9e4:	3710      	adds	r7, #16
 801a9e6:	46bd      	mov	sp, r7
 801a9e8:	bd80      	pop	{r7, pc}

0801a9ea <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801a9ea:	b580      	push	{r7, lr}
 801a9ec:	b084      	sub	sp, #16
 801a9ee:	af00      	add	r7, sp, #0
 801a9f0:	6078      	str	r0, [r7, #4]
 801a9f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 801a9fa:	2b01      	cmp	r3, #1
 801a9fc:	d101      	bne.n	801aa02 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801a9fe:	2302      	movs	r3, #2
 801aa00:	e02d      	b.n	801aa5e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801aa02:	687b      	ldr	r3, [r7, #4]
 801aa04:	2201      	movs	r2, #1
 801aa06:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	2224      	movs	r2, #36	; 0x24
 801aa0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	681b      	ldr	r3, [r3, #0]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	681a      	ldr	r2, [r3, #0]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	681b      	ldr	r3, [r3, #0]
 801aa24:	f022 0201 	bic.w	r2, r2, #1
 801aa28:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	681b      	ldr	r3, [r3, #0]
 801aa2e:	689b      	ldr	r3, [r3, #8]
 801aa30:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801aa34:	687b      	ldr	r3, [r7, #4]
 801aa36:	681b      	ldr	r3, [r3, #0]
 801aa38:	683a      	ldr	r2, [r7, #0]
 801aa3a:	430a      	orrs	r2, r1
 801aa3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801aa3e:	6878      	ldr	r0, [r7, #4]
 801aa40:	f000 f812 	bl	801aa68 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	681b      	ldr	r3, [r3, #0]
 801aa48:	68fa      	ldr	r2, [r7, #12]
 801aa4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	2220      	movs	r2, #32
 801aa50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	2200      	movs	r2, #0
 801aa58:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 801aa5c:	2300      	movs	r3, #0
}
 801aa5e:	4618      	mov	r0, r3
 801aa60:	3710      	adds	r7, #16
 801aa62:	46bd      	mov	sp, r7
 801aa64:	bd80      	pop	{r7, pc}
	...

0801aa68 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801aa68:	b480      	push	{r7}
 801aa6a:	b089      	sub	sp, #36	; 0x24
 801aa6c:	af00      	add	r7, sp, #0
 801aa6e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 801aa70:	4a2f      	ldr	r2, [pc, #188]	; (801ab30 <UARTEx_SetNbDataToProcess+0xc8>)
 801aa72:	f107 0314 	add.w	r3, r7, #20
 801aa76:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aa7a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 801aa7e:	4a2d      	ldr	r2, [pc, #180]	; (801ab34 <UARTEx_SetNbDataToProcess+0xcc>)
 801aa80:	f107 030c 	add.w	r3, r7, #12
 801aa84:	e892 0003 	ldmia.w	r2, {r0, r1}
 801aa88:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801aa8c:	687b      	ldr	r3, [r7, #4]
 801aa8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d108      	bne.n	801aaa6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 801aa94:	687b      	ldr	r3, [r7, #4]
 801aa96:	2201      	movs	r2, #1
 801aa98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	2201      	movs	r2, #1
 801aaa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801aaa4:	e03d      	b.n	801ab22 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801aaa6:	2308      	movs	r3, #8
 801aaa8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801aaaa:	2308      	movs	r3, #8
 801aaac:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801aaae:	687b      	ldr	r3, [r7, #4]
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	689b      	ldr	r3, [r3, #8]
 801aab4:	0e5b      	lsrs	r3, r3, #25
 801aab6:	b2db      	uxtb	r3, r3
 801aab8:	f003 0307 	and.w	r3, r3, #7
 801aabc:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	689b      	ldr	r3, [r3, #8]
 801aac4:	0f5b      	lsrs	r3, r3, #29
 801aac6:	b2db      	uxtb	r3, r3
 801aac8:	f003 0307 	and.w	r3, r3, #7
 801aacc:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 801aace:	7fbb      	ldrb	r3, [r7, #30]
 801aad0:	7f3a      	ldrb	r2, [r7, #28]
 801aad2:	f107 0120 	add.w	r1, r7, #32
 801aad6:	440a      	add	r2, r1
 801aad8:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801aadc:	fb02 f303 	mul.w	r3, r2, r3
 801aae0:	7f3a      	ldrb	r2, [r7, #28]
 801aae2:	f107 0120 	add.w	r1, r7, #32
 801aae6:	440a      	add	r2, r1
 801aae8:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801aaec:	fb93 f3f2 	sdiv	r3, r3, r2
 801aaf0:	b29a      	uxth	r2, r3
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 801aaf8:	7ffb      	ldrb	r3, [r7, #31]
 801aafa:	7f7a      	ldrb	r2, [r7, #29]
 801aafc:	f107 0120 	add.w	r1, r7, #32
 801ab00:	440a      	add	r2, r1
 801ab02:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 801ab06:	fb02 f303 	mul.w	r3, r2, r3
 801ab0a:	7f7a      	ldrb	r2, [r7, #29]
 801ab0c:	f107 0120 	add.w	r1, r7, #32
 801ab10:	440a      	add	r2, r1
 801ab12:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 801ab16:	fb93 f3f2 	sdiv	r3, r3, r2
 801ab1a:	b29a      	uxth	r2, r3
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 801ab22:	bf00      	nop
 801ab24:	3724      	adds	r7, #36	; 0x24
 801ab26:	46bd      	mov	sp, r7
 801ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab2c:	4770      	bx	lr
 801ab2e:	bf00      	nop
 801ab30:	0801f4ec 	.word	0x0801f4ec
 801ab34:	0801f4f4 	.word	0x0801f4f4

0801ab38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801ab38:	b084      	sub	sp, #16
 801ab3a:	b580      	push	{r7, lr}
 801ab3c:	b084      	sub	sp, #16
 801ab3e:	af00      	add	r7, sp, #0
 801ab40:	6078      	str	r0, [r7, #4]
 801ab42:	f107 001c 	add.w	r0, r7, #28
 801ab46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ab4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ab4c:	2b01      	cmp	r3, #1
 801ab4e:	d120      	bne.n	801ab92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	68da      	ldr	r2, [r3, #12]
 801ab60:	4b25      	ldr	r3, [pc, #148]	; (801abf8 <USB_CoreInit+0xc0>)
 801ab62:	4013      	ands	r3, r2
 801ab64:	687a      	ldr	r2, [r7, #4]
 801ab66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	68db      	ldr	r3, [r3, #12]
 801ab6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ab76:	2b01      	cmp	r3, #1
 801ab78:	d105      	bne.n	801ab86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801ab7a:	687b      	ldr	r3, [r7, #4]
 801ab7c:	68db      	ldr	r3, [r3, #12]
 801ab7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 801ab86:	6878      	ldr	r0, [r7, #4]
 801ab88:	f001 fa66 	bl	801c058 <USB_CoreReset>
 801ab8c:	4603      	mov	r3, r0
 801ab8e:	73fb      	strb	r3, [r7, #15]
 801ab90:	e01a      	b.n	801abc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	68db      	ldr	r3, [r3, #12]
 801ab96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ab9a:	687b      	ldr	r3, [r7, #4]
 801ab9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801ab9e:	6878      	ldr	r0, [r7, #4]
 801aba0:	f001 fa5a 	bl	801c058 <USB_CoreReset>
 801aba4:	4603      	mov	r3, r0
 801aba6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801aba8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801abaa:	2b00      	cmp	r3, #0
 801abac:	d106      	bne.n	801abbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801abae:	687b      	ldr	r3, [r7, #4]
 801abb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	639a      	str	r2, [r3, #56]	; 0x38
 801abba:	e005      	b.n	801abc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801abc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 801abc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801abca:	2b01      	cmp	r3, #1
 801abcc:	d10b      	bne.n	801abe6 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	689b      	ldr	r3, [r3, #8]
 801abd2:	f043 0206 	orr.w	r2, r3, #6
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801abda:	687b      	ldr	r3, [r7, #4]
 801abdc:	689b      	ldr	r3, [r3, #8]
 801abde:	f043 0220 	orr.w	r2, r3, #32
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 801abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801abe8:	4618      	mov	r0, r3
 801abea:	3710      	adds	r7, #16
 801abec:	46bd      	mov	sp, r7
 801abee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801abf2:	b004      	add	sp, #16
 801abf4:	4770      	bx	lr
 801abf6:	bf00      	nop
 801abf8:	ffbdffbf 	.word	0xffbdffbf

0801abfc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 801abfc:	b480      	push	{r7}
 801abfe:	b087      	sub	sp, #28
 801ac00:	af00      	add	r7, sp, #0
 801ac02:	60f8      	str	r0, [r7, #12]
 801ac04:	60b9      	str	r1, [r7, #8]
 801ac06:	4613      	mov	r3, r2
 801ac08:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 801ac0a:	79fb      	ldrb	r3, [r7, #7]
 801ac0c:	2b02      	cmp	r3, #2
 801ac0e:	d165      	bne.n	801acdc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	4a41      	ldr	r2, [pc, #260]	; (801ad18 <USB_SetTurnaroundTime+0x11c>)
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d906      	bls.n	801ac26 <USB_SetTurnaroundTime+0x2a>
 801ac18:	68bb      	ldr	r3, [r7, #8]
 801ac1a:	4a40      	ldr	r2, [pc, #256]	; (801ad1c <USB_SetTurnaroundTime+0x120>)
 801ac1c:	4293      	cmp	r3, r2
 801ac1e:	d802      	bhi.n	801ac26 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801ac20:	230f      	movs	r3, #15
 801ac22:	617b      	str	r3, [r7, #20]
 801ac24:	e062      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801ac26:	68bb      	ldr	r3, [r7, #8]
 801ac28:	4a3c      	ldr	r2, [pc, #240]	; (801ad1c <USB_SetTurnaroundTime+0x120>)
 801ac2a:	4293      	cmp	r3, r2
 801ac2c:	d906      	bls.n	801ac3c <USB_SetTurnaroundTime+0x40>
 801ac2e:	68bb      	ldr	r3, [r7, #8]
 801ac30:	4a3b      	ldr	r2, [pc, #236]	; (801ad20 <USB_SetTurnaroundTime+0x124>)
 801ac32:	4293      	cmp	r3, r2
 801ac34:	d802      	bhi.n	801ac3c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801ac36:	230e      	movs	r3, #14
 801ac38:	617b      	str	r3, [r7, #20]
 801ac3a:	e057      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801ac3c:	68bb      	ldr	r3, [r7, #8]
 801ac3e:	4a38      	ldr	r2, [pc, #224]	; (801ad20 <USB_SetTurnaroundTime+0x124>)
 801ac40:	4293      	cmp	r3, r2
 801ac42:	d906      	bls.n	801ac52 <USB_SetTurnaroundTime+0x56>
 801ac44:	68bb      	ldr	r3, [r7, #8]
 801ac46:	4a37      	ldr	r2, [pc, #220]	; (801ad24 <USB_SetTurnaroundTime+0x128>)
 801ac48:	4293      	cmp	r3, r2
 801ac4a:	d802      	bhi.n	801ac52 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801ac4c:	230d      	movs	r3, #13
 801ac4e:	617b      	str	r3, [r7, #20]
 801ac50:	e04c      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801ac52:	68bb      	ldr	r3, [r7, #8]
 801ac54:	4a33      	ldr	r2, [pc, #204]	; (801ad24 <USB_SetTurnaroundTime+0x128>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d906      	bls.n	801ac68 <USB_SetTurnaroundTime+0x6c>
 801ac5a:	68bb      	ldr	r3, [r7, #8]
 801ac5c:	4a32      	ldr	r2, [pc, #200]	; (801ad28 <USB_SetTurnaroundTime+0x12c>)
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	d802      	bhi.n	801ac68 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801ac62:	230c      	movs	r3, #12
 801ac64:	617b      	str	r3, [r7, #20]
 801ac66:	e041      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801ac68:	68bb      	ldr	r3, [r7, #8]
 801ac6a:	4a2f      	ldr	r2, [pc, #188]	; (801ad28 <USB_SetTurnaroundTime+0x12c>)
 801ac6c:	4293      	cmp	r3, r2
 801ac6e:	d906      	bls.n	801ac7e <USB_SetTurnaroundTime+0x82>
 801ac70:	68bb      	ldr	r3, [r7, #8]
 801ac72:	4a2e      	ldr	r2, [pc, #184]	; (801ad2c <USB_SetTurnaroundTime+0x130>)
 801ac74:	4293      	cmp	r3, r2
 801ac76:	d802      	bhi.n	801ac7e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801ac78:	230b      	movs	r3, #11
 801ac7a:	617b      	str	r3, [r7, #20]
 801ac7c:	e036      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801ac7e:	68bb      	ldr	r3, [r7, #8]
 801ac80:	4a2a      	ldr	r2, [pc, #168]	; (801ad2c <USB_SetTurnaroundTime+0x130>)
 801ac82:	4293      	cmp	r3, r2
 801ac84:	d906      	bls.n	801ac94 <USB_SetTurnaroundTime+0x98>
 801ac86:	68bb      	ldr	r3, [r7, #8]
 801ac88:	4a29      	ldr	r2, [pc, #164]	; (801ad30 <USB_SetTurnaroundTime+0x134>)
 801ac8a:	4293      	cmp	r3, r2
 801ac8c:	d802      	bhi.n	801ac94 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801ac8e:	230a      	movs	r3, #10
 801ac90:	617b      	str	r3, [r7, #20]
 801ac92:	e02b      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801ac94:	68bb      	ldr	r3, [r7, #8]
 801ac96:	4a26      	ldr	r2, [pc, #152]	; (801ad30 <USB_SetTurnaroundTime+0x134>)
 801ac98:	4293      	cmp	r3, r2
 801ac9a:	d906      	bls.n	801acaa <USB_SetTurnaroundTime+0xae>
 801ac9c:	68bb      	ldr	r3, [r7, #8]
 801ac9e:	4a25      	ldr	r2, [pc, #148]	; (801ad34 <USB_SetTurnaroundTime+0x138>)
 801aca0:	4293      	cmp	r3, r2
 801aca2:	d802      	bhi.n	801acaa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 801aca4:	2309      	movs	r3, #9
 801aca6:	617b      	str	r3, [r7, #20]
 801aca8:	e020      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801acaa:	68bb      	ldr	r3, [r7, #8]
 801acac:	4a21      	ldr	r2, [pc, #132]	; (801ad34 <USB_SetTurnaroundTime+0x138>)
 801acae:	4293      	cmp	r3, r2
 801acb0:	d906      	bls.n	801acc0 <USB_SetTurnaroundTime+0xc4>
 801acb2:	68bb      	ldr	r3, [r7, #8]
 801acb4:	4a20      	ldr	r2, [pc, #128]	; (801ad38 <USB_SetTurnaroundTime+0x13c>)
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d802      	bhi.n	801acc0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801acba:	2308      	movs	r3, #8
 801acbc:	617b      	str	r3, [r7, #20]
 801acbe:	e015      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	4a1d      	ldr	r2, [pc, #116]	; (801ad38 <USB_SetTurnaroundTime+0x13c>)
 801acc4:	4293      	cmp	r3, r2
 801acc6:	d906      	bls.n	801acd6 <USB_SetTurnaroundTime+0xda>
 801acc8:	68bb      	ldr	r3, [r7, #8]
 801acca:	4a1c      	ldr	r2, [pc, #112]	; (801ad3c <USB_SetTurnaroundTime+0x140>)
 801accc:	4293      	cmp	r3, r2
 801acce:	d802      	bhi.n	801acd6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801acd0:	2307      	movs	r3, #7
 801acd2:	617b      	str	r3, [r7, #20]
 801acd4:	e00a      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801acd6:	2306      	movs	r3, #6
 801acd8:	617b      	str	r3, [r7, #20]
 801acda:	e007      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 801acdc:	79fb      	ldrb	r3, [r7, #7]
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d102      	bne.n	801ace8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801ace2:	2309      	movs	r3, #9
 801ace4:	617b      	str	r3, [r7, #20]
 801ace6:	e001      	b.n	801acec <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 801ace8:	2309      	movs	r3, #9
 801acea:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	68db      	ldr	r3, [r3, #12]
 801acf0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 801acf8:	68fb      	ldr	r3, [r7, #12]
 801acfa:	68da      	ldr	r2, [r3, #12]
 801acfc:	697b      	ldr	r3, [r7, #20]
 801acfe:	029b      	lsls	r3, r3, #10
 801ad00:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801ad04:	431a      	orrs	r2, r3
 801ad06:	68fb      	ldr	r3, [r7, #12]
 801ad08:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801ad0a:	2300      	movs	r3, #0
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	371c      	adds	r7, #28
 801ad10:	46bd      	mov	sp, r7
 801ad12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad16:	4770      	bx	lr
 801ad18:	00d8acbf 	.word	0x00d8acbf
 801ad1c:	00e4e1bf 	.word	0x00e4e1bf
 801ad20:	00f423ff 	.word	0x00f423ff
 801ad24:	0106737f 	.word	0x0106737f
 801ad28:	011a499f 	.word	0x011a499f
 801ad2c:	01312cff 	.word	0x01312cff
 801ad30:	014ca43f 	.word	0x014ca43f
 801ad34:	016e35ff 	.word	0x016e35ff
 801ad38:	01a6ab1f 	.word	0x01a6ab1f
 801ad3c:	01e847ff 	.word	0x01e847ff

0801ad40 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ad40:	b480      	push	{r7}
 801ad42:	b083      	sub	sp, #12
 801ad44:	af00      	add	r7, sp, #0
 801ad46:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	689b      	ldr	r3, [r3, #8]
 801ad4c:	f043 0201 	orr.w	r2, r3, #1
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801ad54:	2300      	movs	r3, #0
}
 801ad56:	4618      	mov	r0, r3
 801ad58:	370c      	adds	r7, #12
 801ad5a:	46bd      	mov	sp, r7
 801ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad60:	4770      	bx	lr

0801ad62 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801ad62:	b480      	push	{r7}
 801ad64:	b083      	sub	sp, #12
 801ad66:	af00      	add	r7, sp, #0
 801ad68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	689b      	ldr	r3, [r3, #8]
 801ad6e:	f023 0201 	bic.w	r2, r3, #1
 801ad72:	687b      	ldr	r3, [r7, #4]
 801ad74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801ad76:	2300      	movs	r3, #0
}
 801ad78:	4618      	mov	r0, r3
 801ad7a:	370c      	adds	r7, #12
 801ad7c:	46bd      	mov	sp, r7
 801ad7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad82:	4770      	bx	lr

0801ad84 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801ad84:	b580      	push	{r7, lr}
 801ad86:	b082      	sub	sp, #8
 801ad88:	af00      	add	r7, sp, #0
 801ad8a:	6078      	str	r0, [r7, #4]
 801ad8c:	460b      	mov	r3, r1
 801ad8e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801ad90:	687b      	ldr	r3, [r7, #4]
 801ad92:	68db      	ldr	r3, [r3, #12]
 801ad94:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 801ad9c:	78fb      	ldrb	r3, [r7, #3]
 801ad9e:	2b01      	cmp	r3, #1
 801ada0:	d106      	bne.n	801adb0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801ada2:	687b      	ldr	r3, [r7, #4]
 801ada4:	68db      	ldr	r3, [r3, #12]
 801ada6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801adaa:	687b      	ldr	r3, [r7, #4]
 801adac:	60da      	str	r2, [r3, #12]
 801adae:	e00b      	b.n	801adc8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801adb0:	78fb      	ldrb	r3, [r7, #3]
 801adb2:	2b00      	cmp	r3, #0
 801adb4:	d106      	bne.n	801adc4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	68db      	ldr	r3, [r3, #12]
 801adba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	60da      	str	r2, [r3, #12]
 801adc2:	e001      	b.n	801adc8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 801adc4:	2301      	movs	r3, #1
 801adc6:	e003      	b.n	801add0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 801adc8:	2032      	movs	r0, #50	; 0x32
 801adca:	f7f7 fe7f 	bl	8012acc <HAL_Delay>

  return HAL_OK;
 801adce:	2300      	movs	r3, #0
}
 801add0:	4618      	mov	r0, r3
 801add2:	3708      	adds	r7, #8
 801add4:	46bd      	mov	sp, r7
 801add6:	bd80      	pop	{r7, pc}

0801add8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801add8:	b084      	sub	sp, #16
 801adda:	b580      	push	{r7, lr}
 801addc:	b086      	sub	sp, #24
 801adde:	af00      	add	r7, sp, #0
 801ade0:	6078      	str	r0, [r7, #4]
 801ade2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 801ade6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801adea:	2300      	movs	r3, #0
 801adec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801adee:	687b      	ldr	r3, [r7, #4]
 801adf0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801adf2:	2300      	movs	r3, #0
 801adf4:	613b      	str	r3, [r7, #16]
 801adf6:	e009      	b.n	801ae0c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 801adf8:	687a      	ldr	r2, [r7, #4]
 801adfa:	693b      	ldr	r3, [r7, #16]
 801adfc:	3340      	adds	r3, #64	; 0x40
 801adfe:	009b      	lsls	r3, r3, #2
 801ae00:	4413      	add	r3, r2
 801ae02:	2200      	movs	r2, #0
 801ae04:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801ae06:	693b      	ldr	r3, [r7, #16]
 801ae08:	3301      	adds	r3, #1
 801ae0a:	613b      	str	r3, [r7, #16]
 801ae0c:	693b      	ldr	r3, [r7, #16]
 801ae0e:	2b0e      	cmp	r3, #14
 801ae10:	d9f2      	bls.n	801adf8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801ae12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ae14:	2b00      	cmp	r3, #0
 801ae16:	d11c      	bne.n	801ae52 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801ae18:	68fb      	ldr	r3, [r7, #12]
 801ae1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae1e:	685b      	ldr	r3, [r3, #4]
 801ae20:	68fa      	ldr	r2, [r7, #12]
 801ae22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801ae26:	f043 0302 	orr.w	r3, r3, #2
 801ae2a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae30:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 801ae34:	687b      	ldr	r3, [r7, #4]
 801ae36:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 801ae38:	687b      	ldr	r3, [r7, #4]
 801ae3a:	681b      	ldr	r3, [r3, #0]
 801ae3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801ae44:	687b      	ldr	r3, [r7, #4]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801ae4c:	687b      	ldr	r3, [r7, #4]
 801ae4e:	601a      	str	r2, [r3, #0]
 801ae50:	e005      	b.n	801ae5e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ae56:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 801ae5a:	687b      	ldr	r3, [r7, #4]
 801ae5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801ae5e:	68fb      	ldr	r3, [r7, #12]
 801ae60:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801ae64:	461a      	mov	r2, r3
 801ae66:	2300      	movs	r3, #0
 801ae68:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 801ae6a:	68fb      	ldr	r3, [r7, #12]
 801ae6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae70:	4619      	mov	r1, r3
 801ae72:	68fb      	ldr	r3, [r7, #12]
 801ae74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801ae78:	461a      	mov	r2, r3
 801ae7a:	680b      	ldr	r3, [r1, #0]
 801ae7c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801ae7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ae80:	2b01      	cmp	r3, #1
 801ae82:	d10c      	bne.n	801ae9e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 801ae84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae86:	2b00      	cmp	r3, #0
 801ae88:	d104      	bne.n	801ae94 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 801ae8a:	2100      	movs	r1, #0
 801ae8c:	6878      	ldr	r0, [r7, #4]
 801ae8e:	f000 f949 	bl	801b124 <USB_SetDevSpeed>
 801ae92:	e008      	b.n	801aea6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 801ae94:	2101      	movs	r1, #1
 801ae96:	6878      	ldr	r0, [r7, #4]
 801ae98:	f000 f944 	bl	801b124 <USB_SetDevSpeed>
 801ae9c:	e003      	b.n	801aea6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801ae9e:	2103      	movs	r1, #3
 801aea0:	6878      	ldr	r0, [r7, #4]
 801aea2:	f000 f93f 	bl	801b124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801aea6:	2110      	movs	r1, #16
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	f000 f8f3 	bl	801b094 <USB_FlushTxFifo>
 801aeae:	4603      	mov	r3, r0
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d001      	beq.n	801aeb8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 801aeb4:	2301      	movs	r3, #1
 801aeb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 801aeb8:	6878      	ldr	r0, [r7, #4]
 801aeba:	f000 f911 	bl	801b0e0 <USB_FlushRxFifo>
 801aebe:	4603      	mov	r3, r0
 801aec0:	2b00      	cmp	r3, #0
 801aec2:	d001      	beq.n	801aec8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 801aec4:	2301      	movs	r3, #1
 801aec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aece:	461a      	mov	r2, r3
 801aed0:	2300      	movs	r3, #0
 801aed2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801aed4:	68fb      	ldr	r3, [r7, #12]
 801aed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aeda:	461a      	mov	r2, r3
 801aedc:	2300      	movs	r3, #0
 801aede:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801aee0:	68fb      	ldr	r3, [r7, #12]
 801aee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801aee6:	461a      	mov	r2, r3
 801aee8:	2300      	movs	r3, #0
 801aeea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801aeec:	2300      	movs	r3, #0
 801aeee:	613b      	str	r3, [r7, #16]
 801aef0:	e043      	b.n	801af7a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801aef2:	693b      	ldr	r3, [r7, #16]
 801aef4:	015a      	lsls	r2, r3, #5
 801aef6:	68fb      	ldr	r3, [r7, #12]
 801aef8:	4413      	add	r3, r2
 801aefa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801af08:	d118      	bne.n	801af3c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801af0a:	693b      	ldr	r3, [r7, #16]
 801af0c:	2b00      	cmp	r3, #0
 801af0e:	d10a      	bne.n	801af26 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801af10:	693b      	ldr	r3, [r7, #16]
 801af12:	015a      	lsls	r2, r3, #5
 801af14:	68fb      	ldr	r3, [r7, #12]
 801af16:	4413      	add	r3, r2
 801af18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af1c:	461a      	mov	r2, r3
 801af1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801af22:	6013      	str	r3, [r2, #0]
 801af24:	e013      	b.n	801af4e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801af26:	693b      	ldr	r3, [r7, #16]
 801af28:	015a      	lsls	r2, r3, #5
 801af2a:	68fb      	ldr	r3, [r7, #12]
 801af2c:	4413      	add	r3, r2
 801af2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af32:	461a      	mov	r2, r3
 801af34:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801af38:	6013      	str	r3, [r2, #0]
 801af3a:	e008      	b.n	801af4e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801af3c:	693b      	ldr	r3, [r7, #16]
 801af3e:	015a      	lsls	r2, r3, #5
 801af40:	68fb      	ldr	r3, [r7, #12]
 801af42:	4413      	add	r3, r2
 801af44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af48:	461a      	mov	r2, r3
 801af4a:	2300      	movs	r3, #0
 801af4c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801af4e:	693b      	ldr	r3, [r7, #16]
 801af50:	015a      	lsls	r2, r3, #5
 801af52:	68fb      	ldr	r3, [r7, #12]
 801af54:	4413      	add	r3, r2
 801af56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af5a:	461a      	mov	r2, r3
 801af5c:	2300      	movs	r3, #0
 801af5e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801af60:	693b      	ldr	r3, [r7, #16]
 801af62:	015a      	lsls	r2, r3, #5
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	4413      	add	r3, r2
 801af68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801af6c:	461a      	mov	r2, r3
 801af6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801af72:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801af74:	693b      	ldr	r3, [r7, #16]
 801af76:	3301      	adds	r3, #1
 801af78:	613b      	str	r3, [r7, #16]
 801af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af7c:	693a      	ldr	r2, [r7, #16]
 801af7e:	429a      	cmp	r2, r3
 801af80:	d3b7      	bcc.n	801aef2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801af82:	2300      	movs	r3, #0
 801af84:	613b      	str	r3, [r7, #16]
 801af86:	e043      	b.n	801b010 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801af88:	693b      	ldr	r3, [r7, #16]
 801af8a:	015a      	lsls	r2, r3, #5
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	4413      	add	r3, r2
 801af90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801af94:	681b      	ldr	r3, [r3, #0]
 801af96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801af9e:	d118      	bne.n	801afd2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801afa0:	693b      	ldr	r3, [r7, #16]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d10a      	bne.n	801afbc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801afa6:	693b      	ldr	r3, [r7, #16]
 801afa8:	015a      	lsls	r2, r3, #5
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	4413      	add	r3, r2
 801afae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afb2:	461a      	mov	r2, r3
 801afb4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801afb8:	6013      	str	r3, [r2, #0]
 801afba:	e013      	b.n	801afe4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801afbc:	693b      	ldr	r3, [r7, #16]
 801afbe:	015a      	lsls	r2, r3, #5
 801afc0:	68fb      	ldr	r3, [r7, #12]
 801afc2:	4413      	add	r3, r2
 801afc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afc8:	461a      	mov	r2, r3
 801afca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801afce:	6013      	str	r3, [r2, #0]
 801afd0:	e008      	b.n	801afe4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801afd2:	693b      	ldr	r3, [r7, #16]
 801afd4:	015a      	lsls	r2, r3, #5
 801afd6:	68fb      	ldr	r3, [r7, #12]
 801afd8:	4413      	add	r3, r2
 801afda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801afde:	461a      	mov	r2, r3
 801afe0:	2300      	movs	r3, #0
 801afe2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801afe4:	693b      	ldr	r3, [r7, #16]
 801afe6:	015a      	lsls	r2, r3, #5
 801afe8:	68fb      	ldr	r3, [r7, #12]
 801afea:	4413      	add	r3, r2
 801afec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801aff0:	461a      	mov	r2, r3
 801aff2:	2300      	movs	r3, #0
 801aff4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 801aff6:	693b      	ldr	r3, [r7, #16]
 801aff8:	015a      	lsls	r2, r3, #5
 801affa:	68fb      	ldr	r3, [r7, #12]
 801affc:	4413      	add	r3, r2
 801affe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b002:	461a      	mov	r2, r3
 801b004:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801b008:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801b00a:	693b      	ldr	r3, [r7, #16]
 801b00c:	3301      	adds	r3, #1
 801b00e:	613b      	str	r3, [r7, #16]
 801b010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b012:	693a      	ldr	r2, [r7, #16]
 801b014:	429a      	cmp	r2, r3
 801b016:	d3b7      	bcc.n	801af88 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801b018:	68fb      	ldr	r3, [r7, #12]
 801b01a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b01e:	691b      	ldr	r3, [r3, #16]
 801b020:	68fa      	ldr	r2, [r7, #12]
 801b022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801b026:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b02a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	2200      	movs	r2, #0
 801b030:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801b032:	687b      	ldr	r3, [r7, #4]
 801b034:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 801b038:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801b03a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b03c:	2b00      	cmp	r3, #0
 801b03e:	d105      	bne.n	801b04c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	699b      	ldr	r3, [r3, #24]
 801b044:	f043 0210 	orr.w	r2, r3, #16
 801b048:	687b      	ldr	r3, [r7, #4]
 801b04a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	699a      	ldr	r2, [r3, #24]
 801b050:	4b0e      	ldr	r3, [pc, #56]	; (801b08c <USB_DevInit+0x2b4>)
 801b052:	4313      	orrs	r3, r2
 801b054:	687a      	ldr	r2, [r7, #4]
 801b056:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 801b058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d005      	beq.n	801b06a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	699b      	ldr	r3, [r3, #24]
 801b062:	f043 0208 	orr.w	r2, r3, #8
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801b06a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b06c:	2b01      	cmp	r3, #1
 801b06e:	d105      	bne.n	801b07c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	699a      	ldr	r2, [r3, #24]
 801b074:	4b06      	ldr	r3, [pc, #24]	; (801b090 <USB_DevInit+0x2b8>)
 801b076:	4313      	orrs	r3, r2
 801b078:	687a      	ldr	r2, [r7, #4]
 801b07a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 801b07c:	7dfb      	ldrb	r3, [r7, #23]
}
 801b07e:	4618      	mov	r0, r3
 801b080:	3718      	adds	r7, #24
 801b082:	46bd      	mov	sp, r7
 801b084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b088:	b004      	add	sp, #16
 801b08a:	4770      	bx	lr
 801b08c:	803c3800 	.word	0x803c3800
 801b090:	40000004 	.word	0x40000004

0801b094 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 801b094:	b480      	push	{r7}
 801b096:	b085      	sub	sp, #20
 801b098:	af00      	add	r7, sp, #0
 801b09a:	6078      	str	r0, [r7, #4]
 801b09c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801b09e:	2300      	movs	r3, #0
 801b0a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801b0a2:	683b      	ldr	r3, [r7, #0]
 801b0a4:	019b      	lsls	r3, r3, #6
 801b0a6:	f043 0220 	orr.w	r2, r3, #32
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b0ae:	68fb      	ldr	r3, [r7, #12]
 801b0b0:	3301      	adds	r3, #1
 801b0b2:	60fb      	str	r3, [r7, #12]
 801b0b4:	68fb      	ldr	r3, [r7, #12]
 801b0b6:	4a09      	ldr	r2, [pc, #36]	; (801b0dc <USB_FlushTxFifo+0x48>)
 801b0b8:	4293      	cmp	r3, r2
 801b0ba:	d901      	bls.n	801b0c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 801b0bc:	2303      	movs	r3, #3
 801b0be:	e006      	b.n	801b0ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	691b      	ldr	r3, [r3, #16]
 801b0c4:	f003 0320 	and.w	r3, r3, #32
 801b0c8:	2b20      	cmp	r3, #32
 801b0ca:	d0f0      	beq.n	801b0ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 801b0cc:	2300      	movs	r3, #0
}
 801b0ce:	4618      	mov	r0, r3
 801b0d0:	3714      	adds	r7, #20
 801b0d2:	46bd      	mov	sp, r7
 801b0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b0d8:	4770      	bx	lr
 801b0da:	bf00      	nop
 801b0dc:	00030d40 	.word	0x00030d40

0801b0e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801b0e0:	b480      	push	{r7}
 801b0e2:	b085      	sub	sp, #20
 801b0e4:	af00      	add	r7, sp, #0
 801b0e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 801b0e8:	2300      	movs	r3, #0
 801b0ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	2210      	movs	r2, #16
 801b0f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801b0f2:	68fb      	ldr	r3, [r7, #12]
 801b0f4:	3301      	adds	r3, #1
 801b0f6:	60fb      	str	r3, [r7, #12]
 801b0f8:	68fb      	ldr	r3, [r7, #12]
 801b0fa:	4a09      	ldr	r2, [pc, #36]	; (801b120 <USB_FlushRxFifo+0x40>)
 801b0fc:	4293      	cmp	r3, r2
 801b0fe:	d901      	bls.n	801b104 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801b100:	2303      	movs	r3, #3
 801b102:	e006      	b.n	801b112 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801b104:	687b      	ldr	r3, [r7, #4]
 801b106:	691b      	ldr	r3, [r3, #16]
 801b108:	f003 0310 	and.w	r3, r3, #16
 801b10c:	2b10      	cmp	r3, #16
 801b10e:	d0f0      	beq.n	801b0f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801b110:	2300      	movs	r3, #0
}
 801b112:	4618      	mov	r0, r3
 801b114:	3714      	adds	r7, #20
 801b116:	46bd      	mov	sp, r7
 801b118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b11c:	4770      	bx	lr
 801b11e:	bf00      	nop
 801b120:	00030d40 	.word	0x00030d40

0801b124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 801b124:	b480      	push	{r7}
 801b126:	b085      	sub	sp, #20
 801b128:	af00      	add	r7, sp, #0
 801b12a:	6078      	str	r0, [r7, #4]
 801b12c:	460b      	mov	r3, r1
 801b12e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 801b134:	68fb      	ldr	r3, [r7, #12]
 801b136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b13a:	681a      	ldr	r2, [r3, #0]
 801b13c:	78fb      	ldrb	r3, [r7, #3]
 801b13e:	68f9      	ldr	r1, [r7, #12]
 801b140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b144:	4313      	orrs	r3, r2
 801b146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 801b148:	2300      	movs	r3, #0
}
 801b14a:	4618      	mov	r0, r3
 801b14c:	3714      	adds	r7, #20
 801b14e:	46bd      	mov	sp, r7
 801b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b154:	4770      	bx	lr

0801b156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 801b156:	b480      	push	{r7}
 801b158:	b087      	sub	sp, #28
 801b15a:	af00      	add	r7, sp, #0
 801b15c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801b162:	693b      	ldr	r3, [r7, #16]
 801b164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b168:	689b      	ldr	r3, [r3, #8]
 801b16a:	f003 0306 	and.w	r3, r3, #6
 801b16e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801b170:	68fb      	ldr	r3, [r7, #12]
 801b172:	2b00      	cmp	r3, #0
 801b174:	d102      	bne.n	801b17c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 801b176:	2300      	movs	r3, #0
 801b178:	75fb      	strb	r3, [r7, #23]
 801b17a:	e00a      	b.n	801b192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 801b17c:	68fb      	ldr	r3, [r7, #12]
 801b17e:	2b02      	cmp	r3, #2
 801b180:	d002      	beq.n	801b188 <USB_GetDevSpeed+0x32>
 801b182:	68fb      	ldr	r3, [r7, #12]
 801b184:	2b06      	cmp	r3, #6
 801b186:	d102      	bne.n	801b18e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 801b188:	2302      	movs	r3, #2
 801b18a:	75fb      	strb	r3, [r7, #23]
 801b18c:	e001      	b.n	801b192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 801b18e:	230f      	movs	r3, #15
 801b190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801b192:	7dfb      	ldrb	r3, [r7, #23]
}
 801b194:	4618      	mov	r0, r3
 801b196:	371c      	adds	r7, #28
 801b198:	46bd      	mov	sp, r7
 801b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b19e:	4770      	bx	lr

0801b1a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b1a0:	b480      	push	{r7}
 801b1a2:	b085      	sub	sp, #20
 801b1a4:	af00      	add	r7, sp, #0
 801b1a6:	6078      	str	r0, [r7, #4]
 801b1a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b1ae:	683b      	ldr	r3, [r7, #0]
 801b1b0:	781b      	ldrb	r3, [r3, #0]
 801b1b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801b1b4:	683b      	ldr	r3, [r7, #0]
 801b1b6:	785b      	ldrb	r3, [r3, #1]
 801b1b8:	2b01      	cmp	r3, #1
 801b1ba:	d139      	bne.n	801b230 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b1c2:	69da      	ldr	r2, [r3, #28]
 801b1c4:	683b      	ldr	r3, [r7, #0]
 801b1c6:	781b      	ldrb	r3, [r3, #0]
 801b1c8:	f003 030f 	and.w	r3, r3, #15
 801b1cc:	2101      	movs	r1, #1
 801b1ce:	fa01 f303 	lsl.w	r3, r1, r3
 801b1d2:	b29b      	uxth	r3, r3
 801b1d4:	68f9      	ldr	r1, [r7, #12]
 801b1d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b1da:	4313      	orrs	r3, r2
 801b1dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801b1de:	68bb      	ldr	r3, [r7, #8]
 801b1e0:	015a      	lsls	r2, r3, #5
 801b1e2:	68fb      	ldr	r3, [r7, #12]
 801b1e4:	4413      	add	r3, r2
 801b1e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d153      	bne.n	801b29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b1f4:	68bb      	ldr	r3, [r7, #8]
 801b1f6:	015a      	lsls	r2, r3, #5
 801b1f8:	68fb      	ldr	r3, [r7, #12]
 801b1fa:	4413      	add	r3, r2
 801b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b200:	681a      	ldr	r2, [r3, #0]
 801b202:	683b      	ldr	r3, [r7, #0]
 801b204:	689b      	ldr	r3, [r3, #8]
 801b206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b20a:	683b      	ldr	r3, [r7, #0]
 801b20c:	78db      	ldrb	r3, [r3, #3]
 801b20e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801b212:	68bb      	ldr	r3, [r7, #8]
 801b214:	059b      	lsls	r3, r3, #22
 801b216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801b218:	431a      	orrs	r2, r3
 801b21a:	68bb      	ldr	r3, [r7, #8]
 801b21c:	0159      	lsls	r1, r3, #5
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	440b      	add	r3, r1
 801b222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b226:	4619      	mov	r1, r3
 801b228:	4b20      	ldr	r3, [pc, #128]	; (801b2ac <USB_ActivateEndpoint+0x10c>)
 801b22a:	4313      	orrs	r3, r2
 801b22c:	600b      	str	r3, [r1, #0]
 801b22e:	e035      	b.n	801b29c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801b230:	68fb      	ldr	r3, [r7, #12]
 801b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b236:	69da      	ldr	r2, [r3, #28]
 801b238:	683b      	ldr	r3, [r7, #0]
 801b23a:	781b      	ldrb	r3, [r3, #0]
 801b23c:	f003 030f 	and.w	r3, r3, #15
 801b240:	2101      	movs	r1, #1
 801b242:	fa01 f303 	lsl.w	r3, r1, r3
 801b246:	041b      	lsls	r3, r3, #16
 801b248:	68f9      	ldr	r1, [r7, #12]
 801b24a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b24e:	4313      	orrs	r3, r2
 801b250:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801b252:	68bb      	ldr	r3, [r7, #8]
 801b254:	015a      	lsls	r2, r3, #5
 801b256:	68fb      	ldr	r3, [r7, #12]
 801b258:	4413      	add	r3, r2
 801b25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801b264:	2b00      	cmp	r3, #0
 801b266:	d119      	bne.n	801b29c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b268:	68bb      	ldr	r3, [r7, #8]
 801b26a:	015a      	lsls	r2, r3, #5
 801b26c:	68fb      	ldr	r3, [r7, #12]
 801b26e:	4413      	add	r3, r2
 801b270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b274:	681a      	ldr	r2, [r3, #0]
 801b276:	683b      	ldr	r3, [r7, #0]
 801b278:	689b      	ldr	r3, [r3, #8]
 801b27a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 801b27e:	683b      	ldr	r3, [r7, #0]
 801b280:	78db      	ldrb	r3, [r3, #3]
 801b282:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801b284:	430b      	orrs	r3, r1
 801b286:	431a      	orrs	r2, r3
 801b288:	68bb      	ldr	r3, [r7, #8]
 801b28a:	0159      	lsls	r1, r3, #5
 801b28c:	68fb      	ldr	r3, [r7, #12]
 801b28e:	440b      	add	r3, r1
 801b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b294:	4619      	mov	r1, r3
 801b296:	4b05      	ldr	r3, [pc, #20]	; (801b2ac <USB_ActivateEndpoint+0x10c>)
 801b298:	4313      	orrs	r3, r2
 801b29a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 801b29c:	2300      	movs	r3, #0
}
 801b29e:	4618      	mov	r0, r3
 801b2a0:	3714      	adds	r7, #20
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2a8:	4770      	bx	lr
 801b2aa:	bf00      	nop
 801b2ac:	10008000 	.word	0x10008000

0801b2b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801b2b0:	b480      	push	{r7}
 801b2b2:	b085      	sub	sp, #20
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801b2be:	683b      	ldr	r3, [r7, #0]
 801b2c0:	781b      	ldrb	r3, [r3, #0]
 801b2c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801b2c4:	683b      	ldr	r3, [r7, #0]
 801b2c6:	785b      	ldrb	r3, [r3, #1]
 801b2c8:	2b01      	cmp	r3, #1
 801b2ca:	d135      	bne.n	801b338 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b2cc:	68fb      	ldr	r3, [r7, #12]
 801b2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b2d4:	683b      	ldr	r3, [r7, #0]
 801b2d6:	781b      	ldrb	r3, [r3, #0]
 801b2d8:	f003 030f 	and.w	r3, r3, #15
 801b2dc:	2101      	movs	r1, #1
 801b2de:	fa01 f303 	lsl.w	r3, r1, r3
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	43db      	mvns	r3, r3
 801b2e6:	68f9      	ldr	r1, [r7, #12]
 801b2e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b2ec:	4013      	ands	r3, r2
 801b2ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b2f6:	69da      	ldr	r2, [r3, #28]
 801b2f8:	683b      	ldr	r3, [r7, #0]
 801b2fa:	781b      	ldrb	r3, [r3, #0]
 801b2fc:	f003 030f 	and.w	r3, r3, #15
 801b300:	2101      	movs	r1, #1
 801b302:	fa01 f303 	lsl.w	r3, r1, r3
 801b306:	b29b      	uxth	r3, r3
 801b308:	43db      	mvns	r3, r3
 801b30a:	68f9      	ldr	r1, [r7, #12]
 801b30c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b310:	4013      	ands	r3, r2
 801b312:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 801b314:	68bb      	ldr	r3, [r7, #8]
 801b316:	015a      	lsls	r2, r3, #5
 801b318:	68fb      	ldr	r3, [r7, #12]
 801b31a:	4413      	add	r3, r2
 801b31c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b320:	681a      	ldr	r2, [r3, #0]
 801b322:	68bb      	ldr	r3, [r7, #8]
 801b324:	0159      	lsls	r1, r3, #5
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	440b      	add	r3, r1
 801b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b32e:	4619      	mov	r1, r3
 801b330:	4b1f      	ldr	r3, [pc, #124]	; (801b3b0 <USB_DeactivateEndpoint+0x100>)
 801b332:	4013      	ands	r3, r2
 801b334:	600b      	str	r3, [r1, #0]
 801b336:	e034      	b.n	801b3a2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b33e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	781b      	ldrb	r3, [r3, #0]
 801b344:	f003 030f 	and.w	r3, r3, #15
 801b348:	2101      	movs	r1, #1
 801b34a:	fa01 f303 	lsl.w	r3, r1, r3
 801b34e:	041b      	lsls	r3, r3, #16
 801b350:	43db      	mvns	r3, r3
 801b352:	68f9      	ldr	r1, [r7, #12]
 801b354:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b358:	4013      	ands	r3, r2
 801b35a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b362:	69da      	ldr	r2, [r3, #28]
 801b364:	683b      	ldr	r3, [r7, #0]
 801b366:	781b      	ldrb	r3, [r3, #0]
 801b368:	f003 030f 	and.w	r3, r3, #15
 801b36c:	2101      	movs	r1, #1
 801b36e:	fa01 f303 	lsl.w	r3, r1, r3
 801b372:	041b      	lsls	r3, r3, #16
 801b374:	43db      	mvns	r3, r3
 801b376:	68f9      	ldr	r1, [r7, #12]
 801b378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b37c:	4013      	ands	r3, r2
 801b37e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801b380:	68bb      	ldr	r3, [r7, #8]
 801b382:	015a      	lsls	r2, r3, #5
 801b384:	68fb      	ldr	r3, [r7, #12]
 801b386:	4413      	add	r3, r2
 801b388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b38c:	681a      	ldr	r2, [r3, #0]
 801b38e:	68bb      	ldr	r3, [r7, #8]
 801b390:	0159      	lsls	r1, r3, #5
 801b392:	68fb      	ldr	r3, [r7, #12]
 801b394:	440b      	add	r3, r1
 801b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b39a:	4619      	mov	r1, r3
 801b39c:	4b05      	ldr	r3, [pc, #20]	; (801b3b4 <USB_DeactivateEndpoint+0x104>)
 801b39e:	4013      	ands	r3, r2
 801b3a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801b3a2:	2300      	movs	r3, #0
}
 801b3a4:	4618      	mov	r0, r3
 801b3a6:	3714      	adds	r7, #20
 801b3a8:	46bd      	mov	sp, r7
 801b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ae:	4770      	bx	lr
 801b3b0:	ec337800 	.word	0xec337800
 801b3b4:	eff37800 	.word	0xeff37800

0801b3b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b3b8:	b580      	push	{r7, lr}
 801b3ba:	b08a      	sub	sp, #40	; 0x28
 801b3bc:	af02      	add	r7, sp, #8
 801b3be:	60f8      	str	r0, [r7, #12]
 801b3c0:	60b9      	str	r1, [r7, #8]
 801b3c2:	4613      	mov	r3, r2
 801b3c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b3c6:	68fb      	ldr	r3, [r7, #12]
 801b3c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801b3ca:	68bb      	ldr	r3, [r7, #8]
 801b3cc:	781b      	ldrb	r3, [r3, #0]
 801b3ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	785b      	ldrb	r3, [r3, #1]
 801b3d4:	2b01      	cmp	r3, #1
 801b3d6:	f040 8163 	bne.w	801b6a0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b3da:	68bb      	ldr	r3, [r7, #8]
 801b3dc:	695b      	ldr	r3, [r3, #20]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d132      	bne.n	801b448 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b3e2:	69bb      	ldr	r3, [r7, #24]
 801b3e4:	015a      	lsls	r2, r3, #5
 801b3e6:	69fb      	ldr	r3, [r7, #28]
 801b3e8:	4413      	add	r3, r2
 801b3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3ee:	691a      	ldr	r2, [r3, #16]
 801b3f0:	69bb      	ldr	r3, [r7, #24]
 801b3f2:	0159      	lsls	r1, r3, #5
 801b3f4:	69fb      	ldr	r3, [r7, #28]
 801b3f6:	440b      	add	r3, r1
 801b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b3fc:	4619      	mov	r1, r3
 801b3fe:	4ba5      	ldr	r3, [pc, #660]	; (801b694 <USB_EPStartXfer+0x2dc>)
 801b400:	4013      	ands	r3, r2
 801b402:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b404:	69bb      	ldr	r3, [r7, #24]
 801b406:	015a      	lsls	r2, r3, #5
 801b408:	69fb      	ldr	r3, [r7, #28]
 801b40a:	4413      	add	r3, r2
 801b40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b410:	691b      	ldr	r3, [r3, #16]
 801b412:	69ba      	ldr	r2, [r7, #24]
 801b414:	0151      	lsls	r1, r2, #5
 801b416:	69fa      	ldr	r2, [r7, #28]
 801b418:	440a      	add	r2, r1
 801b41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b41e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b424:	69bb      	ldr	r3, [r7, #24]
 801b426:	015a      	lsls	r2, r3, #5
 801b428:	69fb      	ldr	r3, [r7, #28]
 801b42a:	4413      	add	r3, r2
 801b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b430:	691a      	ldr	r2, [r3, #16]
 801b432:	69bb      	ldr	r3, [r7, #24]
 801b434:	0159      	lsls	r1, r3, #5
 801b436:	69fb      	ldr	r3, [r7, #28]
 801b438:	440b      	add	r3, r1
 801b43a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b43e:	4619      	mov	r1, r3
 801b440:	4b95      	ldr	r3, [pc, #596]	; (801b698 <USB_EPStartXfer+0x2e0>)
 801b442:	4013      	ands	r3, r2
 801b444:	610b      	str	r3, [r1, #16]
 801b446:	e074      	b.n	801b532 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b448:	69bb      	ldr	r3, [r7, #24]
 801b44a:	015a      	lsls	r2, r3, #5
 801b44c:	69fb      	ldr	r3, [r7, #28]
 801b44e:	4413      	add	r3, r2
 801b450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b454:	691a      	ldr	r2, [r3, #16]
 801b456:	69bb      	ldr	r3, [r7, #24]
 801b458:	0159      	lsls	r1, r3, #5
 801b45a:	69fb      	ldr	r3, [r7, #28]
 801b45c:	440b      	add	r3, r1
 801b45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b462:	4619      	mov	r1, r3
 801b464:	4b8c      	ldr	r3, [pc, #560]	; (801b698 <USB_EPStartXfer+0x2e0>)
 801b466:	4013      	ands	r3, r2
 801b468:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b46a:	69bb      	ldr	r3, [r7, #24]
 801b46c:	015a      	lsls	r2, r3, #5
 801b46e:	69fb      	ldr	r3, [r7, #28]
 801b470:	4413      	add	r3, r2
 801b472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b476:	691a      	ldr	r2, [r3, #16]
 801b478:	69bb      	ldr	r3, [r7, #24]
 801b47a:	0159      	lsls	r1, r3, #5
 801b47c:	69fb      	ldr	r3, [r7, #28]
 801b47e:	440b      	add	r3, r1
 801b480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b484:	4619      	mov	r1, r3
 801b486:	4b83      	ldr	r3, [pc, #524]	; (801b694 <USB_EPStartXfer+0x2dc>)
 801b488:	4013      	ands	r3, r2
 801b48a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801b48c:	69bb      	ldr	r3, [r7, #24]
 801b48e:	015a      	lsls	r2, r3, #5
 801b490:	69fb      	ldr	r3, [r7, #28]
 801b492:	4413      	add	r3, r2
 801b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b498:	691a      	ldr	r2, [r3, #16]
 801b49a:	68bb      	ldr	r3, [r7, #8]
 801b49c:	6959      	ldr	r1, [r3, #20]
 801b49e:	68bb      	ldr	r3, [r7, #8]
 801b4a0:	689b      	ldr	r3, [r3, #8]
 801b4a2:	440b      	add	r3, r1
 801b4a4:	1e59      	subs	r1, r3, #1
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	689b      	ldr	r3, [r3, #8]
 801b4aa:	fbb1 f3f3 	udiv	r3, r1, r3
 801b4ae:	04d9      	lsls	r1, r3, #19
 801b4b0:	4b7a      	ldr	r3, [pc, #488]	; (801b69c <USB_EPStartXfer+0x2e4>)
 801b4b2:	400b      	ands	r3, r1
 801b4b4:	69b9      	ldr	r1, [r7, #24]
 801b4b6:	0148      	lsls	r0, r1, #5
 801b4b8:	69f9      	ldr	r1, [r7, #28]
 801b4ba:	4401      	add	r1, r0
 801b4bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b4c0:	4313      	orrs	r3, r2
 801b4c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b4c4:	69bb      	ldr	r3, [r7, #24]
 801b4c6:	015a      	lsls	r2, r3, #5
 801b4c8:	69fb      	ldr	r3, [r7, #28]
 801b4ca:	4413      	add	r3, r2
 801b4cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b4d0:	691a      	ldr	r2, [r3, #16]
 801b4d2:	68bb      	ldr	r3, [r7, #8]
 801b4d4:	695b      	ldr	r3, [r3, #20]
 801b4d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b4da:	69b9      	ldr	r1, [r7, #24]
 801b4dc:	0148      	lsls	r0, r1, #5
 801b4de:	69f9      	ldr	r1, [r7, #28]
 801b4e0:	4401      	add	r1, r0
 801b4e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b4e6:	4313      	orrs	r3, r2
 801b4e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801b4ea:	68bb      	ldr	r3, [r7, #8]
 801b4ec:	78db      	ldrb	r3, [r3, #3]
 801b4ee:	2b01      	cmp	r3, #1
 801b4f0:	d11f      	bne.n	801b532 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801b4f2:	69bb      	ldr	r3, [r7, #24]
 801b4f4:	015a      	lsls	r2, r3, #5
 801b4f6:	69fb      	ldr	r3, [r7, #28]
 801b4f8:	4413      	add	r3, r2
 801b4fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b4fe:	691b      	ldr	r3, [r3, #16]
 801b500:	69ba      	ldr	r2, [r7, #24]
 801b502:	0151      	lsls	r1, r2, #5
 801b504:	69fa      	ldr	r2, [r7, #28]
 801b506:	440a      	add	r2, r1
 801b508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b50c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 801b510:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801b512:	69bb      	ldr	r3, [r7, #24]
 801b514:	015a      	lsls	r2, r3, #5
 801b516:	69fb      	ldr	r3, [r7, #28]
 801b518:	4413      	add	r3, r2
 801b51a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b51e:	691b      	ldr	r3, [r3, #16]
 801b520:	69ba      	ldr	r2, [r7, #24]
 801b522:	0151      	lsls	r1, r2, #5
 801b524:	69fa      	ldr	r2, [r7, #28]
 801b526:	440a      	add	r2, r1
 801b528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b52c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b530:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801b532:	79fb      	ldrb	r3, [r7, #7]
 801b534:	2b01      	cmp	r3, #1
 801b536:	d14b      	bne.n	801b5d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	691b      	ldr	r3, [r3, #16]
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d009      	beq.n	801b554 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b540:	69bb      	ldr	r3, [r7, #24]
 801b542:	015a      	lsls	r2, r3, #5
 801b544:	69fb      	ldr	r3, [r7, #28]
 801b546:	4413      	add	r3, r2
 801b548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b54c:	461a      	mov	r2, r3
 801b54e:	68bb      	ldr	r3, [r7, #8]
 801b550:	691b      	ldr	r3, [r3, #16]
 801b552:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801b554:	68bb      	ldr	r3, [r7, #8]
 801b556:	78db      	ldrb	r3, [r3, #3]
 801b558:	2b01      	cmp	r3, #1
 801b55a:	d128      	bne.n	801b5ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b55c:	69fb      	ldr	r3, [r7, #28]
 801b55e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b562:	689b      	ldr	r3, [r3, #8]
 801b564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b568:	2b00      	cmp	r3, #0
 801b56a:	d110      	bne.n	801b58e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b56c:	69bb      	ldr	r3, [r7, #24]
 801b56e:	015a      	lsls	r2, r3, #5
 801b570:	69fb      	ldr	r3, [r7, #28]
 801b572:	4413      	add	r3, r2
 801b574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b578:	681b      	ldr	r3, [r3, #0]
 801b57a:	69ba      	ldr	r2, [r7, #24]
 801b57c:	0151      	lsls	r1, r2, #5
 801b57e:	69fa      	ldr	r2, [r7, #28]
 801b580:	440a      	add	r2, r1
 801b582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b586:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b58a:	6013      	str	r3, [r2, #0]
 801b58c:	e00f      	b.n	801b5ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b58e:	69bb      	ldr	r3, [r7, #24]
 801b590:	015a      	lsls	r2, r3, #5
 801b592:	69fb      	ldr	r3, [r7, #28]
 801b594:	4413      	add	r3, r2
 801b596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b59a:	681b      	ldr	r3, [r3, #0]
 801b59c:	69ba      	ldr	r2, [r7, #24]
 801b59e:	0151      	lsls	r1, r2, #5
 801b5a0:	69fa      	ldr	r2, [r7, #28]
 801b5a2:	440a      	add	r2, r1
 801b5a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b5a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b5ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b5ae:	69bb      	ldr	r3, [r7, #24]
 801b5b0:	015a      	lsls	r2, r3, #5
 801b5b2:	69fb      	ldr	r3, [r7, #28]
 801b5b4:	4413      	add	r3, r2
 801b5b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5ba:	681b      	ldr	r3, [r3, #0]
 801b5bc:	69ba      	ldr	r2, [r7, #24]
 801b5be:	0151      	lsls	r1, r2, #5
 801b5c0:	69fa      	ldr	r2, [r7, #28]
 801b5c2:	440a      	add	r2, r1
 801b5c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b5c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b5cc:	6013      	str	r3, [r2, #0]
 801b5ce:	e133      	b.n	801b838 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b5d0:	69bb      	ldr	r3, [r7, #24]
 801b5d2:	015a      	lsls	r2, r3, #5
 801b5d4:	69fb      	ldr	r3, [r7, #28]
 801b5d6:	4413      	add	r3, r2
 801b5d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b5dc:	681b      	ldr	r3, [r3, #0]
 801b5de:	69ba      	ldr	r2, [r7, #24]
 801b5e0:	0151      	lsls	r1, r2, #5
 801b5e2:	69fa      	ldr	r2, [r7, #28]
 801b5e4:	440a      	add	r2, r1
 801b5e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b5ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801b5f0:	68bb      	ldr	r3, [r7, #8]
 801b5f2:	78db      	ldrb	r3, [r3, #3]
 801b5f4:	2b01      	cmp	r3, #1
 801b5f6:	d015      	beq.n	801b624 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801b5f8:	68bb      	ldr	r3, [r7, #8]
 801b5fa:	695b      	ldr	r3, [r3, #20]
 801b5fc:	2b00      	cmp	r3, #0
 801b5fe:	f000 811b 	beq.w	801b838 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b602:	69fb      	ldr	r3, [r7, #28]
 801b604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b60a:	68bb      	ldr	r3, [r7, #8]
 801b60c:	781b      	ldrb	r3, [r3, #0]
 801b60e:	f003 030f 	and.w	r3, r3, #15
 801b612:	2101      	movs	r1, #1
 801b614:	fa01 f303 	lsl.w	r3, r1, r3
 801b618:	69f9      	ldr	r1, [r7, #28]
 801b61a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801b61e:	4313      	orrs	r3, r2
 801b620:	634b      	str	r3, [r1, #52]	; 0x34
 801b622:	e109      	b.n	801b838 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b624:	69fb      	ldr	r3, [r7, #28]
 801b626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b62a:	689b      	ldr	r3, [r3, #8]
 801b62c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b630:	2b00      	cmp	r3, #0
 801b632:	d110      	bne.n	801b656 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801b634:	69bb      	ldr	r3, [r7, #24]
 801b636:	015a      	lsls	r2, r3, #5
 801b638:	69fb      	ldr	r3, [r7, #28]
 801b63a:	4413      	add	r3, r2
 801b63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b640:	681b      	ldr	r3, [r3, #0]
 801b642:	69ba      	ldr	r2, [r7, #24]
 801b644:	0151      	lsls	r1, r2, #5
 801b646:	69fa      	ldr	r2, [r7, #28]
 801b648:	440a      	add	r2, r1
 801b64a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b64e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b652:	6013      	str	r3, [r2, #0]
 801b654:	e00f      	b.n	801b676 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801b656:	69bb      	ldr	r3, [r7, #24]
 801b658:	015a      	lsls	r2, r3, #5
 801b65a:	69fb      	ldr	r3, [r7, #28]
 801b65c:	4413      	add	r3, r2
 801b65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b662:	681b      	ldr	r3, [r3, #0]
 801b664:	69ba      	ldr	r2, [r7, #24]
 801b666:	0151      	lsls	r1, r2, #5
 801b668:	69fa      	ldr	r2, [r7, #28]
 801b66a:	440a      	add	r2, r1
 801b66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b674:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801b676:	68bb      	ldr	r3, [r7, #8]
 801b678:	68d9      	ldr	r1, [r3, #12]
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	781a      	ldrb	r2, [r3, #0]
 801b67e:	68bb      	ldr	r3, [r7, #8]
 801b680:	695b      	ldr	r3, [r3, #20]
 801b682:	b298      	uxth	r0, r3
 801b684:	79fb      	ldrb	r3, [r7, #7]
 801b686:	9300      	str	r3, [sp, #0]
 801b688:	4603      	mov	r3, r0
 801b68a:	68f8      	ldr	r0, [r7, #12]
 801b68c:	f000 fa38 	bl	801bb00 <USB_WritePacket>
 801b690:	e0d2      	b.n	801b838 <USB_EPStartXfer+0x480>
 801b692:	bf00      	nop
 801b694:	e007ffff 	.word	0xe007ffff
 801b698:	fff80000 	.word	0xfff80000
 801b69c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801b6a0:	69bb      	ldr	r3, [r7, #24]
 801b6a2:	015a      	lsls	r2, r3, #5
 801b6a4:	69fb      	ldr	r3, [r7, #28]
 801b6a6:	4413      	add	r3, r2
 801b6a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6ac:	691a      	ldr	r2, [r3, #16]
 801b6ae:	69bb      	ldr	r3, [r7, #24]
 801b6b0:	0159      	lsls	r1, r3, #5
 801b6b2:	69fb      	ldr	r3, [r7, #28]
 801b6b4:	440b      	add	r3, r1
 801b6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6ba:	4619      	mov	r1, r3
 801b6bc:	4b61      	ldr	r3, [pc, #388]	; (801b844 <USB_EPStartXfer+0x48c>)
 801b6be:	4013      	ands	r3, r2
 801b6c0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801b6c2:	69bb      	ldr	r3, [r7, #24]
 801b6c4:	015a      	lsls	r2, r3, #5
 801b6c6:	69fb      	ldr	r3, [r7, #28]
 801b6c8:	4413      	add	r3, r2
 801b6ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6ce:	691a      	ldr	r2, [r3, #16]
 801b6d0:	69bb      	ldr	r3, [r7, #24]
 801b6d2:	0159      	lsls	r1, r3, #5
 801b6d4:	69fb      	ldr	r3, [r7, #28]
 801b6d6:	440b      	add	r3, r1
 801b6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6dc:	4619      	mov	r1, r3
 801b6de:	4b5a      	ldr	r3, [pc, #360]	; (801b848 <USB_EPStartXfer+0x490>)
 801b6e0:	4013      	ands	r3, r2
 801b6e2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801b6e4:	68bb      	ldr	r3, [r7, #8]
 801b6e6:	695b      	ldr	r3, [r3, #20]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d123      	bne.n	801b734 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801b6ec:	69bb      	ldr	r3, [r7, #24]
 801b6ee:	015a      	lsls	r2, r3, #5
 801b6f0:	69fb      	ldr	r3, [r7, #28]
 801b6f2:	4413      	add	r3, r2
 801b6f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b6f8:	691a      	ldr	r2, [r3, #16]
 801b6fa:	68bb      	ldr	r3, [r7, #8]
 801b6fc:	689b      	ldr	r3, [r3, #8]
 801b6fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b702:	69b9      	ldr	r1, [r7, #24]
 801b704:	0148      	lsls	r0, r1, #5
 801b706:	69f9      	ldr	r1, [r7, #28]
 801b708:	4401      	add	r1, r0
 801b70a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b70e:	4313      	orrs	r3, r2
 801b710:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801b712:	69bb      	ldr	r3, [r7, #24]
 801b714:	015a      	lsls	r2, r3, #5
 801b716:	69fb      	ldr	r3, [r7, #28]
 801b718:	4413      	add	r3, r2
 801b71a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b71e:	691b      	ldr	r3, [r3, #16]
 801b720:	69ba      	ldr	r2, [r7, #24]
 801b722:	0151      	lsls	r1, r2, #5
 801b724:	69fa      	ldr	r2, [r7, #28]
 801b726:	440a      	add	r2, r1
 801b728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b72c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b730:	6113      	str	r3, [r2, #16]
 801b732:	e033      	b.n	801b79c <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801b734:	68bb      	ldr	r3, [r7, #8]
 801b736:	695a      	ldr	r2, [r3, #20]
 801b738:	68bb      	ldr	r3, [r7, #8]
 801b73a:	689b      	ldr	r3, [r3, #8]
 801b73c:	4413      	add	r3, r2
 801b73e:	1e5a      	subs	r2, r3, #1
 801b740:	68bb      	ldr	r3, [r7, #8]
 801b742:	689b      	ldr	r3, [r3, #8]
 801b744:	fbb2 f3f3 	udiv	r3, r2, r3
 801b748:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801b74a:	69bb      	ldr	r3, [r7, #24]
 801b74c:	015a      	lsls	r2, r3, #5
 801b74e:	69fb      	ldr	r3, [r7, #28]
 801b750:	4413      	add	r3, r2
 801b752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b756:	691a      	ldr	r2, [r3, #16]
 801b758:	8afb      	ldrh	r3, [r7, #22]
 801b75a:	04d9      	lsls	r1, r3, #19
 801b75c:	4b3b      	ldr	r3, [pc, #236]	; (801b84c <USB_EPStartXfer+0x494>)
 801b75e:	400b      	ands	r3, r1
 801b760:	69b9      	ldr	r1, [r7, #24]
 801b762:	0148      	lsls	r0, r1, #5
 801b764:	69f9      	ldr	r1, [r7, #28]
 801b766:	4401      	add	r1, r0
 801b768:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b76c:	4313      	orrs	r3, r2
 801b76e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801b770:	69bb      	ldr	r3, [r7, #24]
 801b772:	015a      	lsls	r2, r3, #5
 801b774:	69fb      	ldr	r3, [r7, #28]
 801b776:	4413      	add	r3, r2
 801b778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b77c:	691a      	ldr	r2, [r3, #16]
 801b77e:	68bb      	ldr	r3, [r7, #8]
 801b780:	689b      	ldr	r3, [r3, #8]
 801b782:	8af9      	ldrh	r1, [r7, #22]
 801b784:	fb01 f303 	mul.w	r3, r1, r3
 801b788:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b78c:	69b9      	ldr	r1, [r7, #24]
 801b78e:	0148      	lsls	r0, r1, #5
 801b790:	69f9      	ldr	r1, [r7, #28]
 801b792:	4401      	add	r1, r0
 801b794:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801b798:	4313      	orrs	r3, r2
 801b79a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b79c:	79fb      	ldrb	r3, [r7, #7]
 801b79e:	2b01      	cmp	r3, #1
 801b7a0:	d10d      	bne.n	801b7be <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801b7a2:	68bb      	ldr	r3, [r7, #8]
 801b7a4:	68db      	ldr	r3, [r3, #12]
 801b7a6:	2b00      	cmp	r3, #0
 801b7a8:	d009      	beq.n	801b7be <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801b7aa:	68bb      	ldr	r3, [r7, #8]
 801b7ac:	68d9      	ldr	r1, [r3, #12]
 801b7ae:	69bb      	ldr	r3, [r7, #24]
 801b7b0:	015a      	lsls	r2, r3, #5
 801b7b2:	69fb      	ldr	r3, [r7, #28]
 801b7b4:	4413      	add	r3, r2
 801b7b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7ba:	460a      	mov	r2, r1
 801b7bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	78db      	ldrb	r3, [r3, #3]
 801b7c2:	2b01      	cmp	r3, #1
 801b7c4:	d128      	bne.n	801b818 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801b7c6:	69fb      	ldr	r3, [r7, #28]
 801b7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b7cc:	689b      	ldr	r3, [r3, #8]
 801b7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d110      	bne.n	801b7f8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801b7d6:	69bb      	ldr	r3, [r7, #24]
 801b7d8:	015a      	lsls	r2, r3, #5
 801b7da:	69fb      	ldr	r3, [r7, #28]
 801b7dc:	4413      	add	r3, r2
 801b7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	69ba      	ldr	r2, [r7, #24]
 801b7e6:	0151      	lsls	r1, r2, #5
 801b7e8:	69fa      	ldr	r2, [r7, #28]
 801b7ea:	440a      	add	r2, r1
 801b7ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b7f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801b7f4:	6013      	str	r3, [r2, #0]
 801b7f6:	e00f      	b.n	801b818 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801b7f8:	69bb      	ldr	r3, [r7, #24]
 801b7fa:	015a      	lsls	r2, r3, #5
 801b7fc:	69fb      	ldr	r3, [r7, #28]
 801b7fe:	4413      	add	r3, r2
 801b800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	69ba      	ldr	r2, [r7, #24]
 801b808:	0151      	lsls	r1, r2, #5
 801b80a:	69fa      	ldr	r2, [r7, #28]
 801b80c:	440a      	add	r2, r1
 801b80e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b812:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801b816:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801b818:	69bb      	ldr	r3, [r7, #24]
 801b81a:	015a      	lsls	r2, r3, #5
 801b81c:	69fb      	ldr	r3, [r7, #28]
 801b81e:	4413      	add	r3, r2
 801b820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801b824:	681b      	ldr	r3, [r3, #0]
 801b826:	69ba      	ldr	r2, [r7, #24]
 801b828:	0151      	lsls	r1, r2, #5
 801b82a:	69fa      	ldr	r2, [r7, #28]
 801b82c:	440a      	add	r2, r1
 801b82e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801b832:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b836:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801b838:	2300      	movs	r3, #0
}
 801b83a:	4618      	mov	r0, r3
 801b83c:	3720      	adds	r7, #32
 801b83e:	46bd      	mov	sp, r7
 801b840:	bd80      	pop	{r7, pc}
 801b842:	bf00      	nop
 801b844:	fff80000 	.word	0xfff80000
 801b848:	e007ffff 	.word	0xe007ffff
 801b84c:	1ff80000 	.word	0x1ff80000

0801b850 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801b850:	b480      	push	{r7}
 801b852:	b087      	sub	sp, #28
 801b854:	af00      	add	r7, sp, #0
 801b856:	60f8      	str	r0, [r7, #12]
 801b858:	60b9      	str	r1, [r7, #8]
 801b85a:	4613      	mov	r3, r2
 801b85c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801b85e:	68fb      	ldr	r3, [r7, #12]
 801b860:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801b862:	68bb      	ldr	r3, [r7, #8]
 801b864:	781b      	ldrb	r3, [r3, #0]
 801b866:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801b868:	68bb      	ldr	r3, [r7, #8]
 801b86a:	785b      	ldrb	r3, [r3, #1]
 801b86c:	2b01      	cmp	r3, #1
 801b86e:	f040 80cd 	bne.w	801ba0c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801b872:	68bb      	ldr	r3, [r7, #8]
 801b874:	695b      	ldr	r3, [r3, #20]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d132      	bne.n	801b8e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b87a:	693b      	ldr	r3, [r7, #16]
 801b87c:	015a      	lsls	r2, r3, #5
 801b87e:	697b      	ldr	r3, [r7, #20]
 801b880:	4413      	add	r3, r2
 801b882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b886:	691a      	ldr	r2, [r3, #16]
 801b888:	693b      	ldr	r3, [r7, #16]
 801b88a:	0159      	lsls	r1, r3, #5
 801b88c:	697b      	ldr	r3, [r7, #20]
 801b88e:	440b      	add	r3, r1
 801b890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b894:	4619      	mov	r1, r3
 801b896:	4b98      	ldr	r3, [pc, #608]	; (801baf8 <USB_EP0StartXfer+0x2a8>)
 801b898:	4013      	ands	r3, r2
 801b89a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b89c:	693b      	ldr	r3, [r7, #16]
 801b89e:	015a      	lsls	r2, r3, #5
 801b8a0:	697b      	ldr	r3, [r7, #20]
 801b8a2:	4413      	add	r3, r2
 801b8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8a8:	691b      	ldr	r3, [r3, #16]
 801b8aa:	693a      	ldr	r2, [r7, #16]
 801b8ac:	0151      	lsls	r1, r2, #5
 801b8ae:	697a      	ldr	r2, [r7, #20]
 801b8b0:	440a      	add	r2, r1
 801b8b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b8b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b8ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b8bc:	693b      	ldr	r3, [r7, #16]
 801b8be:	015a      	lsls	r2, r3, #5
 801b8c0:	697b      	ldr	r3, [r7, #20]
 801b8c2:	4413      	add	r3, r2
 801b8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8c8:	691a      	ldr	r2, [r3, #16]
 801b8ca:	693b      	ldr	r3, [r7, #16]
 801b8cc:	0159      	lsls	r1, r3, #5
 801b8ce:	697b      	ldr	r3, [r7, #20]
 801b8d0:	440b      	add	r3, r1
 801b8d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8d6:	4619      	mov	r1, r3
 801b8d8:	4b88      	ldr	r3, [pc, #544]	; (801bafc <USB_EP0StartXfer+0x2ac>)
 801b8da:	4013      	ands	r3, r2
 801b8dc:	610b      	str	r3, [r1, #16]
 801b8de:	e04e      	b.n	801b97e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801b8e0:	693b      	ldr	r3, [r7, #16]
 801b8e2:	015a      	lsls	r2, r3, #5
 801b8e4:	697b      	ldr	r3, [r7, #20]
 801b8e6:	4413      	add	r3, r2
 801b8e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8ec:	691a      	ldr	r2, [r3, #16]
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	0159      	lsls	r1, r3, #5
 801b8f2:	697b      	ldr	r3, [r7, #20]
 801b8f4:	440b      	add	r3, r1
 801b8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b8fa:	4619      	mov	r1, r3
 801b8fc:	4b7f      	ldr	r3, [pc, #508]	; (801bafc <USB_EP0StartXfer+0x2ac>)
 801b8fe:	4013      	ands	r3, r2
 801b900:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801b902:	693b      	ldr	r3, [r7, #16]
 801b904:	015a      	lsls	r2, r3, #5
 801b906:	697b      	ldr	r3, [r7, #20]
 801b908:	4413      	add	r3, r2
 801b90a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b90e:	691a      	ldr	r2, [r3, #16]
 801b910:	693b      	ldr	r3, [r7, #16]
 801b912:	0159      	lsls	r1, r3, #5
 801b914:	697b      	ldr	r3, [r7, #20]
 801b916:	440b      	add	r3, r1
 801b918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b91c:	4619      	mov	r1, r3
 801b91e:	4b76      	ldr	r3, [pc, #472]	; (801baf8 <USB_EP0StartXfer+0x2a8>)
 801b920:	4013      	ands	r3, r2
 801b922:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801b924:	68bb      	ldr	r3, [r7, #8]
 801b926:	695a      	ldr	r2, [r3, #20]
 801b928:	68bb      	ldr	r3, [r7, #8]
 801b92a:	689b      	ldr	r3, [r3, #8]
 801b92c:	429a      	cmp	r2, r3
 801b92e:	d903      	bls.n	801b938 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801b930:	68bb      	ldr	r3, [r7, #8]
 801b932:	689a      	ldr	r2, [r3, #8]
 801b934:	68bb      	ldr	r3, [r7, #8]
 801b936:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801b938:	693b      	ldr	r3, [r7, #16]
 801b93a:	015a      	lsls	r2, r3, #5
 801b93c:	697b      	ldr	r3, [r7, #20]
 801b93e:	4413      	add	r3, r2
 801b940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b944:	691b      	ldr	r3, [r3, #16]
 801b946:	693a      	ldr	r2, [r7, #16]
 801b948:	0151      	lsls	r1, r2, #5
 801b94a:	697a      	ldr	r2, [r7, #20]
 801b94c:	440a      	add	r2, r1
 801b94e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801b956:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801b958:	693b      	ldr	r3, [r7, #16]
 801b95a:	015a      	lsls	r2, r3, #5
 801b95c:	697b      	ldr	r3, [r7, #20]
 801b95e:	4413      	add	r3, r2
 801b960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b964:	691a      	ldr	r2, [r3, #16]
 801b966:	68bb      	ldr	r3, [r7, #8]
 801b968:	695b      	ldr	r3, [r3, #20]
 801b96a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801b96e:	6939      	ldr	r1, [r7, #16]
 801b970:	0148      	lsls	r0, r1, #5
 801b972:	6979      	ldr	r1, [r7, #20]
 801b974:	4401      	add	r1, r0
 801b976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801b97a:	4313      	orrs	r3, r2
 801b97c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801b97e:	79fb      	ldrb	r3, [r7, #7]
 801b980:	2b01      	cmp	r3, #1
 801b982:	d11e      	bne.n	801b9c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	691b      	ldr	r3, [r3, #16]
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d009      	beq.n	801b9a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801b98c:	693b      	ldr	r3, [r7, #16]
 801b98e:	015a      	lsls	r2, r3, #5
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	4413      	add	r3, r2
 801b994:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b998:	461a      	mov	r2, r3
 801b99a:	68bb      	ldr	r3, [r7, #8]
 801b99c:	691b      	ldr	r3, [r3, #16]
 801b99e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b9a0:	693b      	ldr	r3, [r7, #16]
 801b9a2:	015a      	lsls	r2, r3, #5
 801b9a4:	697b      	ldr	r3, [r7, #20]
 801b9a6:	4413      	add	r3, r2
 801b9a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	693a      	ldr	r2, [r7, #16]
 801b9b0:	0151      	lsls	r1, r2, #5
 801b9b2:	697a      	ldr	r2, [r7, #20]
 801b9b4:	440a      	add	r2, r1
 801b9b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9be:	6013      	str	r3, [r2, #0]
 801b9c0:	e092      	b.n	801bae8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801b9c2:	693b      	ldr	r3, [r7, #16]
 801b9c4:	015a      	lsls	r2, r3, #5
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	4413      	add	r3, r2
 801b9ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	693a      	ldr	r2, [r7, #16]
 801b9d2:	0151      	lsls	r1, r2, #5
 801b9d4:	697a      	ldr	r2, [r7, #20]
 801b9d6:	440a      	add	r2, r1
 801b9d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801b9dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801b9e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801b9e2:	68bb      	ldr	r3, [r7, #8]
 801b9e4:	695b      	ldr	r3, [r3, #20]
 801b9e6:	2b00      	cmp	r3, #0
 801b9e8:	d07e      	beq.n	801bae8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801b9f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b9f2:	68bb      	ldr	r3, [r7, #8]
 801b9f4:	781b      	ldrb	r3, [r3, #0]
 801b9f6:	f003 030f 	and.w	r3, r3, #15
 801b9fa:	2101      	movs	r1, #1
 801b9fc:	fa01 f303 	lsl.w	r3, r1, r3
 801ba00:	6979      	ldr	r1, [r7, #20]
 801ba02:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801ba06:	4313      	orrs	r3, r2
 801ba08:	634b      	str	r3, [r1, #52]	; 0x34
 801ba0a:	e06d      	b.n	801bae8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801ba0c:	693b      	ldr	r3, [r7, #16]
 801ba0e:	015a      	lsls	r2, r3, #5
 801ba10:	697b      	ldr	r3, [r7, #20]
 801ba12:	4413      	add	r3, r2
 801ba14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba18:	691a      	ldr	r2, [r3, #16]
 801ba1a:	693b      	ldr	r3, [r7, #16]
 801ba1c:	0159      	lsls	r1, r3, #5
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	440b      	add	r3, r1
 801ba22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba26:	4619      	mov	r1, r3
 801ba28:	4b34      	ldr	r3, [pc, #208]	; (801bafc <USB_EP0StartXfer+0x2ac>)
 801ba2a:	4013      	ands	r3, r2
 801ba2c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801ba2e:	693b      	ldr	r3, [r7, #16]
 801ba30:	015a      	lsls	r2, r3, #5
 801ba32:	697b      	ldr	r3, [r7, #20]
 801ba34:	4413      	add	r3, r2
 801ba36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba3a:	691a      	ldr	r2, [r3, #16]
 801ba3c:	693b      	ldr	r3, [r7, #16]
 801ba3e:	0159      	lsls	r1, r3, #5
 801ba40:	697b      	ldr	r3, [r7, #20]
 801ba42:	440b      	add	r3, r1
 801ba44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba48:	4619      	mov	r1, r3
 801ba4a:	4b2b      	ldr	r3, [pc, #172]	; (801baf8 <USB_EP0StartXfer+0x2a8>)
 801ba4c:	4013      	ands	r3, r2
 801ba4e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 801ba50:	68bb      	ldr	r3, [r7, #8]
 801ba52:	695b      	ldr	r3, [r3, #20]
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d003      	beq.n	801ba60 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801ba58:	68bb      	ldr	r3, [r7, #8]
 801ba5a:	689a      	ldr	r2, [r3, #8]
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801ba60:	693b      	ldr	r3, [r7, #16]
 801ba62:	015a      	lsls	r2, r3, #5
 801ba64:	697b      	ldr	r3, [r7, #20]
 801ba66:	4413      	add	r3, r2
 801ba68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba6c:	691b      	ldr	r3, [r3, #16]
 801ba6e:	693a      	ldr	r2, [r7, #16]
 801ba70:	0151      	lsls	r1, r2, #5
 801ba72:	697a      	ldr	r2, [r7, #20]
 801ba74:	440a      	add	r2, r1
 801ba76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801ba7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801ba7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801ba80:	693b      	ldr	r3, [r7, #16]
 801ba82:	015a      	lsls	r2, r3, #5
 801ba84:	697b      	ldr	r3, [r7, #20]
 801ba86:	4413      	add	r3, r2
 801ba88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801ba8c:	691a      	ldr	r2, [r3, #16]
 801ba8e:	68bb      	ldr	r3, [r7, #8]
 801ba90:	689b      	ldr	r3, [r3, #8]
 801ba92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801ba96:	6939      	ldr	r1, [r7, #16]
 801ba98:	0148      	lsls	r0, r1, #5
 801ba9a:	6979      	ldr	r1, [r7, #20]
 801ba9c:	4401      	add	r1, r0
 801ba9e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801baa2:	4313      	orrs	r3, r2
 801baa4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801baa6:	79fb      	ldrb	r3, [r7, #7]
 801baa8:	2b01      	cmp	r3, #1
 801baaa:	d10d      	bne.n	801bac8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801baac:	68bb      	ldr	r3, [r7, #8]
 801baae:	68db      	ldr	r3, [r3, #12]
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	d009      	beq.n	801bac8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801bab4:	68bb      	ldr	r3, [r7, #8]
 801bab6:	68d9      	ldr	r1, [r3, #12]
 801bab8:	693b      	ldr	r3, [r7, #16]
 801baba:	015a      	lsls	r2, r3, #5
 801babc:	697b      	ldr	r3, [r7, #20]
 801babe:	4413      	add	r3, r2
 801bac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bac4:	460a      	mov	r2, r1
 801bac6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801bac8:	693b      	ldr	r3, [r7, #16]
 801baca:	015a      	lsls	r2, r3, #5
 801bacc:	697b      	ldr	r3, [r7, #20]
 801bace:	4413      	add	r3, r2
 801bad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	693a      	ldr	r2, [r7, #16]
 801bad8:	0151      	lsls	r1, r2, #5
 801bada:	697a      	ldr	r2, [r7, #20]
 801badc:	440a      	add	r2, r1
 801bade:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bae2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801bae6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bae8:	2300      	movs	r3, #0
}
 801baea:	4618      	mov	r0, r3
 801baec:	371c      	adds	r7, #28
 801baee:	46bd      	mov	sp, r7
 801baf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf4:	4770      	bx	lr
 801baf6:	bf00      	nop
 801baf8:	e007ffff 	.word	0xe007ffff
 801bafc:	fff80000 	.word	0xfff80000

0801bb00 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801bb00:	b480      	push	{r7}
 801bb02:	b089      	sub	sp, #36	; 0x24
 801bb04:	af00      	add	r7, sp, #0
 801bb06:	60f8      	str	r0, [r7, #12]
 801bb08:	60b9      	str	r1, [r7, #8]
 801bb0a:	4611      	mov	r1, r2
 801bb0c:	461a      	mov	r2, r3
 801bb0e:	460b      	mov	r3, r1
 801bb10:	71fb      	strb	r3, [r7, #7]
 801bb12:	4613      	mov	r3, r2
 801bb14:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb16:	68fb      	ldr	r3, [r7, #12]
 801bb18:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801bb1a:	68bb      	ldr	r3, [r7, #8]
 801bb1c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801bb1e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801bb22:	2b00      	cmp	r3, #0
 801bb24:	d11a      	bne.n	801bb5c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801bb26:	88bb      	ldrh	r3, [r7, #4]
 801bb28:	3303      	adds	r3, #3
 801bb2a:	089b      	lsrs	r3, r3, #2
 801bb2c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801bb2e:	2300      	movs	r3, #0
 801bb30:	61bb      	str	r3, [r7, #24]
 801bb32:	e00f      	b.n	801bb54 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801bb34:	79fb      	ldrb	r3, [r7, #7]
 801bb36:	031a      	lsls	r2, r3, #12
 801bb38:	697b      	ldr	r3, [r7, #20]
 801bb3a:	4413      	add	r3, r2
 801bb3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bb40:	461a      	mov	r2, r3
 801bb42:	69fb      	ldr	r3, [r7, #28]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	6013      	str	r3, [r2, #0]
      pSrc++;
 801bb48:	69fb      	ldr	r3, [r7, #28]
 801bb4a:	3304      	adds	r3, #4
 801bb4c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 801bb4e:	69bb      	ldr	r3, [r7, #24]
 801bb50:	3301      	adds	r3, #1
 801bb52:	61bb      	str	r3, [r7, #24]
 801bb54:	69ba      	ldr	r2, [r7, #24]
 801bb56:	693b      	ldr	r3, [r7, #16]
 801bb58:	429a      	cmp	r2, r3
 801bb5a:	d3eb      	bcc.n	801bb34 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801bb5c:	2300      	movs	r3, #0
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3724      	adds	r7, #36	; 0x24
 801bb62:	46bd      	mov	sp, r7
 801bb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb68:	4770      	bx	lr

0801bb6a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801bb6a:	b480      	push	{r7}
 801bb6c:	b089      	sub	sp, #36	; 0x24
 801bb6e:	af00      	add	r7, sp, #0
 801bb70:	60f8      	str	r0, [r7, #12]
 801bb72:	60b9      	str	r1, [r7, #8]
 801bb74:	4613      	mov	r3, r2
 801bb76:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bb78:	68fb      	ldr	r3, [r7, #12]
 801bb7a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 801bb7c:	68bb      	ldr	r3, [r7, #8]
 801bb7e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801bb80:	88fb      	ldrh	r3, [r7, #6]
 801bb82:	3303      	adds	r3, #3
 801bb84:	089b      	lsrs	r3, r3, #2
 801bb86:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 801bb88:	2300      	movs	r3, #0
 801bb8a:	61bb      	str	r3, [r7, #24]
 801bb8c:	e00b      	b.n	801bba6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801bb8e:	697b      	ldr	r3, [r7, #20]
 801bb90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801bb94:	681a      	ldr	r2, [r3, #0]
 801bb96:	69fb      	ldr	r3, [r7, #28]
 801bb98:	601a      	str	r2, [r3, #0]
    pDest++;
 801bb9a:	69fb      	ldr	r3, [r7, #28]
 801bb9c:	3304      	adds	r3, #4
 801bb9e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801bba0:	69bb      	ldr	r3, [r7, #24]
 801bba2:	3301      	adds	r3, #1
 801bba4:	61bb      	str	r3, [r7, #24]
 801bba6:	69ba      	ldr	r2, [r7, #24]
 801bba8:	693b      	ldr	r3, [r7, #16]
 801bbaa:	429a      	cmp	r2, r3
 801bbac:	d3ef      	bcc.n	801bb8e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801bbae:	69fb      	ldr	r3, [r7, #28]
}
 801bbb0:	4618      	mov	r0, r3
 801bbb2:	3724      	adds	r7, #36	; 0x24
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbba:	4770      	bx	lr

0801bbbc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bbbc:	b480      	push	{r7}
 801bbbe:	b085      	sub	sp, #20
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
 801bbc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bbca:	683b      	ldr	r3, [r7, #0]
 801bbcc:	781b      	ldrb	r3, [r3, #0]
 801bbce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bbd0:	683b      	ldr	r3, [r7, #0]
 801bbd2:	785b      	ldrb	r3, [r3, #1]
 801bbd4:	2b01      	cmp	r3, #1
 801bbd6:	d12c      	bne.n	801bc32 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	015a      	lsls	r2, r3, #5
 801bbdc:	68fb      	ldr	r3, [r7, #12]
 801bbde:	4413      	add	r3, r2
 801bbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bbe4:	681b      	ldr	r3, [r3, #0]
 801bbe6:	2b00      	cmp	r3, #0
 801bbe8:	db12      	blt.n	801bc10 <USB_EPSetStall+0x54>
 801bbea:	68bb      	ldr	r3, [r7, #8]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	d00f      	beq.n	801bc10 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801bbf0:	68bb      	ldr	r3, [r7, #8]
 801bbf2:	015a      	lsls	r2, r3, #5
 801bbf4:	68fb      	ldr	r3, [r7, #12]
 801bbf6:	4413      	add	r3, r2
 801bbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bbfc:	681b      	ldr	r3, [r3, #0]
 801bbfe:	68ba      	ldr	r2, [r7, #8]
 801bc00:	0151      	lsls	r1, r2, #5
 801bc02:	68fa      	ldr	r2, [r7, #12]
 801bc04:	440a      	add	r2, r1
 801bc06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bc0a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801bc0e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801bc10:	68bb      	ldr	r3, [r7, #8]
 801bc12:	015a      	lsls	r2, r3, #5
 801bc14:	68fb      	ldr	r3, [r7, #12]
 801bc16:	4413      	add	r3, r2
 801bc18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bc1c:	681b      	ldr	r3, [r3, #0]
 801bc1e:	68ba      	ldr	r2, [r7, #8]
 801bc20:	0151      	lsls	r1, r2, #5
 801bc22:	68fa      	ldr	r2, [r7, #12]
 801bc24:	440a      	add	r2, r1
 801bc26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bc2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801bc2e:	6013      	str	r3, [r2, #0]
 801bc30:	e02b      	b.n	801bc8a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801bc32:	68bb      	ldr	r3, [r7, #8]
 801bc34:	015a      	lsls	r2, r3, #5
 801bc36:	68fb      	ldr	r3, [r7, #12]
 801bc38:	4413      	add	r3, r2
 801bc3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc3e:	681b      	ldr	r3, [r3, #0]
 801bc40:	2b00      	cmp	r3, #0
 801bc42:	db12      	blt.n	801bc6a <USB_EPSetStall+0xae>
 801bc44:	68bb      	ldr	r3, [r7, #8]
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d00f      	beq.n	801bc6a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	015a      	lsls	r2, r3, #5
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	4413      	add	r3, r2
 801bc52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	68ba      	ldr	r2, [r7, #8]
 801bc5a:	0151      	lsls	r1, r2, #5
 801bc5c:	68fa      	ldr	r2, [r7, #12]
 801bc5e:	440a      	add	r2, r1
 801bc60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc64:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801bc68:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801bc6a:	68bb      	ldr	r3, [r7, #8]
 801bc6c:	015a      	lsls	r2, r3, #5
 801bc6e:	68fb      	ldr	r3, [r7, #12]
 801bc70:	4413      	add	r3, r2
 801bc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bc76:	681b      	ldr	r3, [r3, #0]
 801bc78:	68ba      	ldr	r2, [r7, #8]
 801bc7a:	0151      	lsls	r1, r2, #5
 801bc7c:	68fa      	ldr	r2, [r7, #12]
 801bc7e:	440a      	add	r2, r1
 801bc80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bc84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801bc88:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801bc8a:	2300      	movs	r3, #0
}
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	3714      	adds	r7, #20
 801bc90:	46bd      	mov	sp, r7
 801bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc96:	4770      	bx	lr

0801bc98 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801bc98:	b480      	push	{r7}
 801bc9a:	b085      	sub	sp, #20
 801bc9c:	af00      	add	r7, sp, #0
 801bc9e:	6078      	str	r0, [r7, #4]
 801bca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801bca6:	683b      	ldr	r3, [r7, #0]
 801bca8:	781b      	ldrb	r3, [r3, #0]
 801bcaa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801bcac:	683b      	ldr	r3, [r7, #0]
 801bcae:	785b      	ldrb	r3, [r3, #1]
 801bcb0:	2b01      	cmp	r3, #1
 801bcb2:	d128      	bne.n	801bd06 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801bcb4:	68bb      	ldr	r3, [r7, #8]
 801bcb6:	015a      	lsls	r2, r3, #5
 801bcb8:	68fb      	ldr	r3, [r7, #12]
 801bcba:	4413      	add	r3, r2
 801bcbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcc0:	681b      	ldr	r3, [r3, #0]
 801bcc2:	68ba      	ldr	r2, [r7, #8]
 801bcc4:	0151      	lsls	r1, r2, #5
 801bcc6:	68fa      	ldr	r2, [r7, #12]
 801bcc8:	440a      	add	r2, r1
 801bcca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bcce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801bcd2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801bcd4:	683b      	ldr	r3, [r7, #0]
 801bcd6:	78db      	ldrb	r3, [r3, #3]
 801bcd8:	2b03      	cmp	r3, #3
 801bcda:	d003      	beq.n	801bce4 <USB_EPClearStall+0x4c>
 801bcdc:	683b      	ldr	r3, [r7, #0]
 801bcde:	78db      	ldrb	r3, [r3, #3]
 801bce0:	2b02      	cmp	r3, #2
 801bce2:	d138      	bne.n	801bd56 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801bce4:	68bb      	ldr	r3, [r7, #8]
 801bce6:	015a      	lsls	r2, r3, #5
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	4413      	add	r3, r2
 801bcec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bcf0:	681b      	ldr	r3, [r3, #0]
 801bcf2:	68ba      	ldr	r2, [r7, #8]
 801bcf4:	0151      	lsls	r1, r2, #5
 801bcf6:	68fa      	ldr	r2, [r7, #12]
 801bcf8:	440a      	add	r2, r1
 801bcfa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801bcfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bd02:	6013      	str	r3, [r2, #0]
 801bd04:	e027      	b.n	801bd56 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 801bd06:	68bb      	ldr	r3, [r7, #8]
 801bd08:	015a      	lsls	r2, r3, #5
 801bd0a:	68fb      	ldr	r3, [r7, #12]
 801bd0c:	4413      	add	r3, r2
 801bd0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd12:	681b      	ldr	r3, [r3, #0]
 801bd14:	68ba      	ldr	r2, [r7, #8]
 801bd16:	0151      	lsls	r1, r2, #5
 801bd18:	68fa      	ldr	r2, [r7, #12]
 801bd1a:	440a      	add	r2, r1
 801bd1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801bd24:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801bd26:	683b      	ldr	r3, [r7, #0]
 801bd28:	78db      	ldrb	r3, [r3, #3]
 801bd2a:	2b03      	cmp	r3, #3
 801bd2c:	d003      	beq.n	801bd36 <USB_EPClearStall+0x9e>
 801bd2e:	683b      	ldr	r3, [r7, #0]
 801bd30:	78db      	ldrb	r3, [r3, #3]
 801bd32:	2b02      	cmp	r3, #2
 801bd34:	d10f      	bne.n	801bd56 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801bd36:	68bb      	ldr	r3, [r7, #8]
 801bd38:	015a      	lsls	r2, r3, #5
 801bd3a:	68fb      	ldr	r3, [r7, #12]
 801bd3c:	4413      	add	r3, r2
 801bd3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bd42:	681b      	ldr	r3, [r3, #0]
 801bd44:	68ba      	ldr	r2, [r7, #8]
 801bd46:	0151      	lsls	r1, r2, #5
 801bd48:	68fa      	ldr	r2, [r7, #12]
 801bd4a:	440a      	add	r2, r1
 801bd4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bd50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801bd54:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801bd56:	2300      	movs	r3, #0
}
 801bd58:	4618      	mov	r0, r3
 801bd5a:	3714      	adds	r7, #20
 801bd5c:	46bd      	mov	sp, r7
 801bd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd62:	4770      	bx	lr

0801bd64 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801bd64:	b480      	push	{r7}
 801bd66:	b085      	sub	sp, #20
 801bd68:	af00      	add	r7, sp, #0
 801bd6a:	6078      	str	r0, [r7, #4]
 801bd6c:	460b      	mov	r3, r1
 801bd6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bd70:	687b      	ldr	r3, [r7, #4]
 801bd72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801bd74:	68fb      	ldr	r3, [r7, #12]
 801bd76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd7a:	681b      	ldr	r3, [r3, #0]
 801bd7c:	68fa      	ldr	r2, [r7, #12]
 801bd7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bd82:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801bd86:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801bd88:	68fb      	ldr	r3, [r7, #12]
 801bd8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bd8e:	681a      	ldr	r2, [r3, #0]
 801bd90:	78fb      	ldrb	r3, [r7, #3]
 801bd92:	011b      	lsls	r3, r3, #4
 801bd94:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 801bd98:	68f9      	ldr	r1, [r7, #12]
 801bd9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801bd9e:	4313      	orrs	r3, r2
 801bda0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801bda2:	2300      	movs	r3, #0
}
 801bda4:	4618      	mov	r0, r3
 801bda6:	3714      	adds	r7, #20
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdae:	4770      	bx	lr

0801bdb0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bdb0:	b580      	push	{r7, lr}
 801bdb2:	b084      	sub	sp, #16
 801bdb4:	af00      	add	r7, sp, #0
 801bdb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801bdbc:	68fb      	ldr	r3, [r7, #12]
 801bdbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bdc2:	685b      	ldr	r3, [r3, #4]
 801bdc4:	68fa      	ldr	r2, [r7, #12]
 801bdc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bdca:	f023 0302 	bic.w	r3, r3, #2
 801bdce:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801bdd0:	2003      	movs	r0, #3
 801bdd2:	f7f6 fe7b 	bl	8012acc <HAL_Delay>

  return HAL_OK;
 801bdd6:	2300      	movs	r3, #0
}
 801bdd8:	4618      	mov	r0, r3
 801bdda:	3710      	adds	r7, #16
 801bddc:	46bd      	mov	sp, r7
 801bdde:	bd80      	pop	{r7, pc}

0801bde0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801bde0:	b580      	push	{r7, lr}
 801bde2:	b084      	sub	sp, #16
 801bde4:	af00      	add	r7, sp, #0
 801bde6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bde8:	687b      	ldr	r3, [r7, #4]
 801bdea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801bdec:	68fb      	ldr	r3, [r7, #12]
 801bdee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	68fa      	ldr	r2, [r7, #12]
 801bdf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bdfa:	f043 0302 	orr.w	r3, r3, #2
 801bdfe:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801be00:	2003      	movs	r0, #3
 801be02:	f7f6 fe63 	bl	8012acc <HAL_Delay>

  return HAL_OK;
 801be06:	2300      	movs	r3, #0
}
 801be08:	4618      	mov	r0, r3
 801be0a:	3710      	adds	r7, #16
 801be0c:	46bd      	mov	sp, r7
 801be0e:	bd80      	pop	{r7, pc}

0801be10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801be10:	b480      	push	{r7}
 801be12:	b085      	sub	sp, #20
 801be14:	af00      	add	r7, sp, #0
 801be16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801be18:	687b      	ldr	r3, [r7, #4]
 801be1a:	695b      	ldr	r3, [r3, #20]
 801be1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	699b      	ldr	r3, [r3, #24]
 801be22:	68fa      	ldr	r2, [r7, #12]
 801be24:	4013      	ands	r3, r2
 801be26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801be28:	68fb      	ldr	r3, [r7, #12]
}
 801be2a:	4618      	mov	r0, r3
 801be2c:	3714      	adds	r7, #20
 801be2e:	46bd      	mov	sp, r7
 801be30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be34:	4770      	bx	lr

0801be36 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801be36:	b480      	push	{r7}
 801be38:	b085      	sub	sp, #20
 801be3a:	af00      	add	r7, sp, #0
 801be3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801be3e:	687b      	ldr	r3, [r7, #4]
 801be40:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801be48:	699b      	ldr	r3, [r3, #24]
 801be4a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801be52:	69db      	ldr	r3, [r3, #28]
 801be54:	68ba      	ldr	r2, [r7, #8]
 801be56:	4013      	ands	r3, r2
 801be58:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801be5a:	68bb      	ldr	r3, [r7, #8]
 801be5c:	0c1b      	lsrs	r3, r3, #16
}
 801be5e:	4618      	mov	r0, r3
 801be60:	3714      	adds	r7, #20
 801be62:	46bd      	mov	sp, r7
 801be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be68:	4770      	bx	lr

0801be6a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 801be6a:	b480      	push	{r7}
 801be6c:	b085      	sub	sp, #20
 801be6e:	af00      	add	r7, sp, #0
 801be70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801be76:	68fb      	ldr	r3, [r7, #12]
 801be78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801be7c:	699b      	ldr	r3, [r3, #24]
 801be7e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801be80:	68fb      	ldr	r3, [r7, #12]
 801be82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801be86:	69db      	ldr	r3, [r3, #28]
 801be88:	68ba      	ldr	r2, [r7, #8]
 801be8a:	4013      	ands	r3, r2
 801be8c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801be8e:	68bb      	ldr	r3, [r7, #8]
 801be90:	b29b      	uxth	r3, r3
}
 801be92:	4618      	mov	r0, r3
 801be94:	3714      	adds	r7, #20
 801be96:	46bd      	mov	sp, r7
 801be98:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be9c:	4770      	bx	lr

0801be9e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801be9e:	b480      	push	{r7}
 801bea0:	b085      	sub	sp, #20
 801bea2:	af00      	add	r7, sp, #0
 801bea4:	6078      	str	r0, [r7, #4]
 801bea6:	460b      	mov	r3, r1
 801bea8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801beae:	78fb      	ldrb	r3, [r7, #3]
 801beb0:	015a      	lsls	r2, r3, #5
 801beb2:	68fb      	ldr	r3, [r7, #12]
 801beb4:	4413      	add	r3, r2
 801beb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801beba:	689b      	ldr	r3, [r3, #8]
 801bebc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801bebe:	68fb      	ldr	r3, [r7, #12]
 801bec0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bec4:	695b      	ldr	r3, [r3, #20]
 801bec6:	68ba      	ldr	r2, [r7, #8]
 801bec8:	4013      	ands	r3, r2
 801beca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801becc:	68bb      	ldr	r3, [r7, #8]
}
 801bece:	4618      	mov	r0, r3
 801bed0:	3714      	adds	r7, #20
 801bed2:	46bd      	mov	sp, r7
 801bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bed8:	4770      	bx	lr

0801beda <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801beda:	b480      	push	{r7}
 801bedc:	b087      	sub	sp, #28
 801bede:	af00      	add	r7, sp, #0
 801bee0:	6078      	str	r0, [r7, #4]
 801bee2:	460b      	mov	r3, r1
 801bee4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 801beea:	697b      	ldr	r3, [r7, #20]
 801beec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bef0:	691b      	ldr	r3, [r3, #16]
 801bef2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 801bef4:	697b      	ldr	r3, [r7, #20]
 801bef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801befa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801befc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801befe:	78fb      	ldrb	r3, [r7, #3]
 801bf00:	f003 030f 	and.w	r3, r3, #15
 801bf04:	68fa      	ldr	r2, [r7, #12]
 801bf06:	fa22 f303 	lsr.w	r3, r2, r3
 801bf0a:	01db      	lsls	r3, r3, #7
 801bf0c:	b2db      	uxtb	r3, r3
 801bf0e:	693a      	ldr	r2, [r7, #16]
 801bf10:	4313      	orrs	r3, r2
 801bf12:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 801bf14:	78fb      	ldrb	r3, [r7, #3]
 801bf16:	015a      	lsls	r2, r3, #5
 801bf18:	697b      	ldr	r3, [r7, #20]
 801bf1a:	4413      	add	r3, r2
 801bf1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf20:	689b      	ldr	r3, [r3, #8]
 801bf22:	693a      	ldr	r2, [r7, #16]
 801bf24:	4013      	ands	r3, r2
 801bf26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801bf28:	68bb      	ldr	r3, [r7, #8]
}
 801bf2a:	4618      	mov	r0, r3
 801bf2c:	371c      	adds	r7, #28
 801bf2e:	46bd      	mov	sp, r7
 801bf30:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf34:	4770      	bx	lr

0801bf36 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 801bf36:	b480      	push	{r7}
 801bf38:	b083      	sub	sp, #12
 801bf3a:	af00      	add	r7, sp, #0
 801bf3c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801bf3e:	687b      	ldr	r3, [r7, #4]
 801bf40:	695b      	ldr	r3, [r3, #20]
 801bf42:	f003 0301 	and.w	r3, r3, #1
}
 801bf46:	4618      	mov	r0, r3
 801bf48:	370c      	adds	r7, #12
 801bf4a:	46bd      	mov	sp, r7
 801bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf50:	4770      	bx	lr
	...

0801bf54 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 801bf54:	b480      	push	{r7}
 801bf56:	b085      	sub	sp, #20
 801bf58:	af00      	add	r7, sp, #0
 801bf5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bf5c:	687b      	ldr	r3, [r7, #4]
 801bf5e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801bf60:	68fb      	ldr	r3, [r7, #12]
 801bf62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf66:	681a      	ldr	r2, [r3, #0]
 801bf68:	68fb      	ldr	r3, [r7, #12]
 801bf6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801bf6e:	4619      	mov	r1, r3
 801bf70:	4b09      	ldr	r3, [pc, #36]	; (801bf98 <USB_ActivateSetup+0x44>)
 801bf72:	4013      	ands	r3, r2
 801bf74:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801bf76:	68fb      	ldr	r3, [r7, #12]
 801bf78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801bf7c:	685b      	ldr	r3, [r3, #4]
 801bf7e:	68fa      	ldr	r2, [r7, #12]
 801bf80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801bf84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801bf88:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801bf8a:	2300      	movs	r3, #0
}
 801bf8c:	4618      	mov	r0, r3
 801bf8e:	3714      	adds	r7, #20
 801bf90:	46bd      	mov	sp, r7
 801bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf96:	4770      	bx	lr
 801bf98:	fffff800 	.word	0xfffff800

0801bf9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 801bf9c:	b480      	push	{r7}
 801bf9e:	b087      	sub	sp, #28
 801bfa0:	af00      	add	r7, sp, #0
 801bfa2:	60f8      	str	r0, [r7, #12]
 801bfa4:	460b      	mov	r3, r1
 801bfa6:	607a      	str	r2, [r7, #4]
 801bfa8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801bfaa:	68fb      	ldr	r3, [r7, #12]
 801bfac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801bfae:	68fb      	ldr	r3, [r7, #12]
 801bfb0:	333c      	adds	r3, #60	; 0x3c
 801bfb2:	3304      	adds	r3, #4
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 801bfb8:	693b      	ldr	r3, [r7, #16]
 801bfba:	4a26      	ldr	r2, [pc, #152]	; (801c054 <USB_EP0_OutStart+0xb8>)
 801bfbc:	4293      	cmp	r3, r2
 801bfbe:	d90a      	bls.n	801bfd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801bfc0:	697b      	ldr	r3, [r7, #20]
 801bfc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801bfcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801bfd0:	d101      	bne.n	801bfd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801bfd2:	2300      	movs	r3, #0
 801bfd4:	e037      	b.n	801c046 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfdc:	461a      	mov	r2, r3
 801bfde:	2300      	movs	r3, #0
 801bfe0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801bfe2:	697b      	ldr	r3, [r7, #20]
 801bfe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bfe8:	691b      	ldr	r3, [r3, #16]
 801bfea:	697a      	ldr	r2, [r7, #20]
 801bfec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801bff0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801bff4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801bff6:	697b      	ldr	r3, [r7, #20]
 801bff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801bffc:	691b      	ldr	r3, [r3, #16]
 801bffe:	697a      	ldr	r2, [r7, #20]
 801c000:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c004:	f043 0318 	orr.w	r3, r3, #24
 801c008:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801c00a:	697b      	ldr	r3, [r7, #20]
 801c00c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c010:	691b      	ldr	r3, [r3, #16]
 801c012:	697a      	ldr	r2, [r7, #20]
 801c014:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c018:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801c01c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801c01e:	7afb      	ldrb	r3, [r7, #11]
 801c020:	2b01      	cmp	r3, #1
 801c022:	d10f      	bne.n	801c044 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801c024:	697b      	ldr	r3, [r7, #20]
 801c026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c02a:	461a      	mov	r2, r3
 801c02c:	687b      	ldr	r3, [r7, #4]
 801c02e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801c030:	697b      	ldr	r3, [r7, #20]
 801c032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801c036:	681b      	ldr	r3, [r3, #0]
 801c038:	697a      	ldr	r2, [r7, #20]
 801c03a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801c03e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801c042:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801c044:	2300      	movs	r3, #0
}
 801c046:	4618      	mov	r0, r3
 801c048:	371c      	adds	r7, #28
 801c04a:	46bd      	mov	sp, r7
 801c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c050:	4770      	bx	lr
 801c052:	bf00      	nop
 801c054:	4f54300a 	.word	0x4f54300a

0801c058 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801c058:	b480      	push	{r7}
 801c05a:	b085      	sub	sp, #20
 801c05c:	af00      	add	r7, sp, #0
 801c05e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801c060:	2300      	movs	r3, #0
 801c062:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 801c064:	68fb      	ldr	r3, [r7, #12]
 801c066:	3301      	adds	r3, #1
 801c068:	60fb      	str	r3, [r7, #12]
 801c06a:	68fb      	ldr	r3, [r7, #12]
 801c06c:	4a13      	ldr	r2, [pc, #76]	; (801c0bc <USB_CoreReset+0x64>)
 801c06e:	4293      	cmp	r3, r2
 801c070:	d901      	bls.n	801c076 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801c072:	2303      	movs	r3, #3
 801c074:	e01b      	b.n	801c0ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801c076:	687b      	ldr	r3, [r7, #4]
 801c078:	691b      	ldr	r3, [r3, #16]
 801c07a:	2b00      	cmp	r3, #0
 801c07c:	daf2      	bge.n	801c064 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801c07e:	2300      	movs	r3, #0
 801c080:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	691b      	ldr	r3, [r3, #16]
 801c086:	f043 0201 	orr.w	r2, r3, #1
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801c08e:	68fb      	ldr	r3, [r7, #12]
 801c090:	3301      	adds	r3, #1
 801c092:	60fb      	str	r3, [r7, #12]
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	4a09      	ldr	r2, [pc, #36]	; (801c0bc <USB_CoreReset+0x64>)
 801c098:	4293      	cmp	r3, r2
 801c09a:	d901      	bls.n	801c0a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 801c09c:	2303      	movs	r3, #3
 801c09e:	e006      	b.n	801c0ae <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	691b      	ldr	r3, [r3, #16]
 801c0a4:	f003 0301 	and.w	r3, r3, #1
 801c0a8:	2b01      	cmp	r3, #1
 801c0aa:	d0f0      	beq.n	801c08e <USB_CoreReset+0x36>

  return HAL_OK;
 801c0ac:	2300      	movs	r3, #0
}
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	3714      	adds	r7, #20
 801c0b2:	46bd      	mov	sp, r7
 801c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0b8:	4770      	bx	lr
 801c0ba:	bf00      	nop
 801c0bc:	00030d40 	.word	0x00030d40

0801c0c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c0c0:	b580      	push	{r7, lr}
 801c0c2:	b084      	sub	sp, #16
 801c0c4:	af00      	add	r7, sp, #0
 801c0c6:	6078      	str	r0, [r7, #4]
 801c0c8:	460b      	mov	r3, r1
 801c0ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c0cc:	2300      	movs	r3, #0
 801c0ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	7c1b      	ldrb	r3, [r3, #16]
 801c0d4:	2b00      	cmp	r3, #0
 801c0d6:	d115      	bne.n	801c104 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c0d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c0dc:	2202      	movs	r2, #2
 801c0de:	2181      	movs	r1, #129	; 0x81
 801c0e0:	6878      	ldr	r0, [r7, #4]
 801c0e2:	f001 ff6e 	bl	801dfc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2201      	movs	r2, #1
 801c0ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c0ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c0f0:	2202      	movs	r2, #2
 801c0f2:	2101      	movs	r1, #1
 801c0f4:	6878      	ldr	r0, [r7, #4]
 801c0f6:	f001 ff64 	bl	801dfc2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c0fa:	687b      	ldr	r3, [r7, #4]
 801c0fc:	2201      	movs	r2, #1
 801c0fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 801c102:	e012      	b.n	801c12a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801c104:	2340      	movs	r3, #64	; 0x40
 801c106:	2202      	movs	r2, #2
 801c108:	2181      	movs	r1, #129	; 0x81
 801c10a:	6878      	ldr	r0, [r7, #4]
 801c10c:	f001 ff59 	bl	801dfc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801c110:	687b      	ldr	r3, [r7, #4]
 801c112:	2201      	movs	r2, #1
 801c114:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801c116:	2340      	movs	r3, #64	; 0x40
 801c118:	2202      	movs	r2, #2
 801c11a:	2101      	movs	r1, #1
 801c11c:	6878      	ldr	r0, [r7, #4]
 801c11e:	f001 ff50 	bl	801dfc2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	2201      	movs	r2, #1
 801c126:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 801c12a:	2308      	movs	r3, #8
 801c12c:	2203      	movs	r2, #3
 801c12e:	2182      	movs	r1, #130	; 0x82
 801c130:	6878      	ldr	r0, [r7, #4]
 801c132:	f001 ff46 	bl	801dfc2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801c136:	687b      	ldr	r3, [r7, #4]
 801c138:	2201      	movs	r2, #1
 801c13a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801c13c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801c140:	f002 f8d6 	bl	801e2f0 <malloc>
 801c144:	4603      	mov	r3, r0
 801c146:	461a      	mov	r2, r3
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 801c14e:	687b      	ldr	r3, [r7, #4]
 801c150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c154:	2b00      	cmp	r3, #0
 801c156:	d102      	bne.n	801c15e <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 801c158:	2301      	movs	r3, #1
 801c15a:	73fb      	strb	r3, [r7, #15]
 801c15c:	e026      	b.n	801c1ac <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c164:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801c166:	687b      	ldr	r3, [r7, #4]
 801c168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 801c170:	68bb      	ldr	r3, [r7, #8]
 801c172:	2200      	movs	r2, #0
 801c174:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 801c178:	68bb      	ldr	r3, [r7, #8]
 801c17a:	2200      	movs	r2, #0
 801c17c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	7c1b      	ldrb	r3, [r3, #16]
 801c184:	2b00      	cmp	r3, #0
 801c186:	d109      	bne.n	801c19c <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c188:	68bb      	ldr	r3, [r7, #8]
 801c18a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c18e:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c192:	2101      	movs	r1, #1
 801c194:	6878      	ldr	r0, [r7, #4]
 801c196:	f002 f805 	bl	801e1a4 <USBD_LL_PrepareReceive>
 801c19a:	e007      	b.n	801c1ac <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801c19c:	68bb      	ldr	r3, [r7, #8]
 801c19e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c1a2:	2340      	movs	r3, #64	; 0x40
 801c1a4:	2101      	movs	r1, #1
 801c1a6:	6878      	ldr	r0, [r7, #4]
 801c1a8:	f001 fffc 	bl	801e1a4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 801c1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801c1ae:	4618      	mov	r0, r3
 801c1b0:	3710      	adds	r7, #16
 801c1b2:	46bd      	mov	sp, r7
 801c1b4:	bd80      	pop	{r7, pc}

0801c1b6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801c1b6:	b580      	push	{r7, lr}
 801c1b8:	b084      	sub	sp, #16
 801c1ba:	af00      	add	r7, sp, #0
 801c1bc:	6078      	str	r0, [r7, #4]
 801c1be:	460b      	mov	r3, r1
 801c1c0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 801c1c2:	2300      	movs	r3, #0
 801c1c4:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801c1c6:	2181      	movs	r1, #129	; 0x81
 801c1c8:	6878      	ldr	r0, [r7, #4]
 801c1ca:	f001 ff20 	bl	801e00e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	2200      	movs	r2, #0
 801c1d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801c1d4:	2101      	movs	r1, #1
 801c1d6:	6878      	ldr	r0, [r7, #4]
 801c1d8:	f001 ff19 	bl	801e00e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	2200      	movs	r2, #0
 801c1e0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801c1e4:	2182      	movs	r1, #130	; 0x82
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	f001 ff11 	bl	801e00e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	2200      	movs	r2, #0
 801c1f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801c1f2:	687b      	ldr	r3, [r7, #4]
 801c1f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c1f8:	2b00      	cmp	r3, #0
 801c1fa:	d00e      	beq.n	801c21a <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801c1fc:	687b      	ldr	r3, [r7, #4]
 801c1fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c202:	685b      	ldr	r3, [r3, #4]
 801c204:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c20c:	4618      	mov	r0, r3
 801c20e:	f002 f877 	bl	801e300 <free>
    pdev->pClassData = NULL;
 801c212:	687b      	ldr	r3, [r7, #4]
 801c214:	2200      	movs	r2, #0
 801c216:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 801c21a:	7bfb      	ldrb	r3, [r7, #15]
}
 801c21c:	4618      	mov	r0, r3
 801c21e:	3710      	adds	r7, #16
 801c220:	46bd      	mov	sp, r7
 801c222:	bd80      	pop	{r7, pc}

0801c224 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801c224:	b580      	push	{r7, lr}
 801c226:	b086      	sub	sp, #24
 801c228:	af00      	add	r7, sp, #0
 801c22a:	6078      	str	r0, [r7, #4]
 801c22c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c22e:	687b      	ldr	r3, [r7, #4]
 801c230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c234:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 801c236:	2300      	movs	r3, #0
 801c238:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801c23a:	2300      	movs	r3, #0
 801c23c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 801c23e:	2300      	movs	r3, #0
 801c240:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801c242:	683b      	ldr	r3, [r7, #0]
 801c244:	781b      	ldrb	r3, [r3, #0]
 801c246:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801c24a:	2b00      	cmp	r3, #0
 801c24c:	d039      	beq.n	801c2c2 <USBD_CDC_Setup+0x9e>
 801c24e:	2b20      	cmp	r3, #32
 801c250:	d17c      	bne.n	801c34c <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801c252:	683b      	ldr	r3, [r7, #0]
 801c254:	88db      	ldrh	r3, [r3, #6]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d029      	beq.n	801c2ae <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 801c25a:	683b      	ldr	r3, [r7, #0]
 801c25c:	781b      	ldrb	r3, [r3, #0]
 801c25e:	b25b      	sxtb	r3, r3
 801c260:	2b00      	cmp	r3, #0
 801c262:	da11      	bge.n	801c288 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c26a:	689b      	ldr	r3, [r3, #8]
 801c26c:	683a      	ldr	r2, [r7, #0]
 801c26e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801c270:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c272:	683a      	ldr	r2, [r7, #0]
 801c274:	88d2      	ldrh	r2, [r2, #6]
 801c276:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c278:	6939      	ldr	r1, [r7, #16]
 801c27a:	683b      	ldr	r3, [r7, #0]
 801c27c:	88db      	ldrh	r3, [r3, #6]
 801c27e:	461a      	mov	r2, r3
 801c280:	6878      	ldr	r0, [r7, #4]
 801c282:	f001 fa3f 	bl	801d704 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 801c286:	e068      	b.n	801c35a <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 801c288:	683b      	ldr	r3, [r7, #0]
 801c28a:	785a      	ldrb	r2, [r3, #1]
 801c28c:	693b      	ldr	r3, [r7, #16]
 801c28e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 801c292:	683b      	ldr	r3, [r7, #0]
 801c294:	88db      	ldrh	r3, [r3, #6]
 801c296:	b2da      	uxtb	r2, r3
 801c298:	693b      	ldr	r3, [r7, #16]
 801c29a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801c29e:	6939      	ldr	r1, [r7, #16]
 801c2a0:	683b      	ldr	r3, [r7, #0]
 801c2a2:	88db      	ldrh	r3, [r3, #6]
 801c2a4:	461a      	mov	r2, r3
 801c2a6:	6878      	ldr	r0, [r7, #4]
 801c2a8:	f001 fa5a 	bl	801d760 <USBD_CtlPrepareRx>
      break;
 801c2ac:	e055      	b.n	801c35a <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801c2ae:	687b      	ldr	r3, [r7, #4]
 801c2b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c2b4:	689b      	ldr	r3, [r3, #8]
 801c2b6:	683a      	ldr	r2, [r7, #0]
 801c2b8:	7850      	ldrb	r0, [r2, #1]
 801c2ba:	2200      	movs	r2, #0
 801c2bc:	6839      	ldr	r1, [r7, #0]
 801c2be:	4798      	blx	r3
      break;
 801c2c0:	e04b      	b.n	801c35a <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801c2c2:	683b      	ldr	r3, [r7, #0]
 801c2c4:	785b      	ldrb	r3, [r3, #1]
 801c2c6:	2b0a      	cmp	r3, #10
 801c2c8:	d017      	beq.n	801c2fa <USBD_CDC_Setup+0xd6>
 801c2ca:	2b0b      	cmp	r3, #11
 801c2cc:	d029      	beq.n	801c322 <USBD_CDC_Setup+0xfe>
 801c2ce:	2b00      	cmp	r3, #0
 801c2d0:	d133      	bne.n	801c33a <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c2d2:	687b      	ldr	r3, [r7, #4]
 801c2d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c2d8:	2b03      	cmp	r3, #3
 801c2da:	d107      	bne.n	801c2ec <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 801c2dc:	f107 030c 	add.w	r3, r7, #12
 801c2e0:	2202      	movs	r2, #2
 801c2e2:	4619      	mov	r1, r3
 801c2e4:	6878      	ldr	r0, [r7, #4]
 801c2e6:	f001 fa0d 	bl	801d704 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c2ea:	e02e      	b.n	801c34a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c2ec:	6839      	ldr	r1, [r7, #0]
 801c2ee:	6878      	ldr	r0, [r7, #4]
 801c2f0:	f001 f99d 	bl	801d62e <USBD_CtlError>
            ret = USBD_FAIL;
 801c2f4:	2302      	movs	r3, #2
 801c2f6:	75fb      	strb	r3, [r7, #23]
          break;
 801c2f8:	e027      	b.n	801c34a <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801c2fa:	687b      	ldr	r3, [r7, #4]
 801c2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c300:	2b03      	cmp	r3, #3
 801c302:	d107      	bne.n	801c314 <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 801c304:	f107 030f 	add.w	r3, r7, #15
 801c308:	2201      	movs	r2, #1
 801c30a:	4619      	mov	r1, r3
 801c30c:	6878      	ldr	r0, [r7, #4]
 801c30e:	f001 f9f9 	bl	801d704 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801c312:	e01a      	b.n	801c34a <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 801c314:	6839      	ldr	r1, [r7, #0]
 801c316:	6878      	ldr	r0, [r7, #4]
 801c318:	f001 f989 	bl	801d62e <USBD_CtlError>
            ret = USBD_FAIL;
 801c31c:	2302      	movs	r3, #2
 801c31e:	75fb      	strb	r3, [r7, #23]
          break;
 801c320:	e013      	b.n	801c34a <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801c328:	2b03      	cmp	r3, #3
 801c32a:	d00d      	beq.n	801c348 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 801c32c:	6839      	ldr	r1, [r7, #0]
 801c32e:	6878      	ldr	r0, [r7, #4]
 801c330:	f001 f97d 	bl	801d62e <USBD_CtlError>
            ret = USBD_FAIL;
 801c334:	2302      	movs	r3, #2
 801c336:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801c338:	e006      	b.n	801c348 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 801c33a:	6839      	ldr	r1, [r7, #0]
 801c33c:	6878      	ldr	r0, [r7, #4]
 801c33e:	f001 f976 	bl	801d62e <USBD_CtlError>
          ret = USBD_FAIL;
 801c342:	2302      	movs	r3, #2
 801c344:	75fb      	strb	r3, [r7, #23]
          break;
 801c346:	e000      	b.n	801c34a <USBD_CDC_Setup+0x126>
          break;
 801c348:	bf00      	nop
      }
      break;
 801c34a:	e006      	b.n	801c35a <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 801c34c:	6839      	ldr	r1, [r7, #0]
 801c34e:	6878      	ldr	r0, [r7, #4]
 801c350:	f001 f96d 	bl	801d62e <USBD_CtlError>
      ret = USBD_FAIL;
 801c354:	2302      	movs	r3, #2
 801c356:	75fb      	strb	r3, [r7, #23]
      break;
 801c358:	bf00      	nop
  }

  return ret;
 801c35a:	7dfb      	ldrb	r3, [r7, #23]
}
 801c35c:	4618      	mov	r0, r3
 801c35e:	3718      	adds	r7, #24
 801c360:	46bd      	mov	sp, r7
 801c362:	bd80      	pop	{r7, pc}

0801c364 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b084      	sub	sp, #16
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
 801c36c:	460b      	mov	r3, r1
 801c36e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801c370:	687b      	ldr	r3, [r7, #4]
 801c372:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c376:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801c378:	687b      	ldr	r3, [r7, #4]
 801c37a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801c37e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801c380:	687b      	ldr	r3, [r7, #4]
 801c382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c386:	2b00      	cmp	r3, #0
 801c388:	d03a      	beq.n	801c400 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801c38a:	78fa      	ldrb	r2, [r7, #3]
 801c38c:	6879      	ldr	r1, [r7, #4]
 801c38e:	4613      	mov	r3, r2
 801c390:	009b      	lsls	r3, r3, #2
 801c392:	4413      	add	r3, r2
 801c394:	009b      	lsls	r3, r3, #2
 801c396:	440b      	add	r3, r1
 801c398:	331c      	adds	r3, #28
 801c39a:	681b      	ldr	r3, [r3, #0]
 801c39c:	2b00      	cmp	r3, #0
 801c39e:	d029      	beq.n	801c3f4 <USBD_CDC_DataIn+0x90>
 801c3a0:	78fa      	ldrb	r2, [r7, #3]
 801c3a2:	6879      	ldr	r1, [r7, #4]
 801c3a4:	4613      	mov	r3, r2
 801c3a6:	009b      	lsls	r3, r3, #2
 801c3a8:	4413      	add	r3, r2
 801c3aa:	009b      	lsls	r3, r3, #2
 801c3ac:	440b      	add	r3, r1
 801c3ae:	331c      	adds	r3, #28
 801c3b0:	681a      	ldr	r2, [r3, #0]
 801c3b2:	78f9      	ldrb	r1, [r7, #3]
 801c3b4:	68b8      	ldr	r0, [r7, #8]
 801c3b6:	460b      	mov	r3, r1
 801c3b8:	00db      	lsls	r3, r3, #3
 801c3ba:	1a5b      	subs	r3, r3, r1
 801c3bc:	009b      	lsls	r3, r3, #2
 801c3be:	4403      	add	r3, r0
 801c3c0:	3344      	adds	r3, #68	; 0x44
 801c3c2:	681b      	ldr	r3, [r3, #0]
 801c3c4:	fbb2 f1f3 	udiv	r1, r2, r3
 801c3c8:	fb03 f301 	mul.w	r3, r3, r1
 801c3cc:	1ad3      	subs	r3, r2, r3
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d110      	bne.n	801c3f4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 801c3d2:	78fa      	ldrb	r2, [r7, #3]
 801c3d4:	6879      	ldr	r1, [r7, #4]
 801c3d6:	4613      	mov	r3, r2
 801c3d8:	009b      	lsls	r3, r3, #2
 801c3da:	4413      	add	r3, r2
 801c3dc:	009b      	lsls	r3, r3, #2
 801c3de:	440b      	add	r3, r1
 801c3e0:	331c      	adds	r3, #28
 801c3e2:	2200      	movs	r2, #0
 801c3e4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801c3e6:	78f9      	ldrb	r1, [r7, #3]
 801c3e8:	2300      	movs	r3, #0
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	6878      	ldr	r0, [r7, #4]
 801c3ee:	f001 feb6 	bl	801e15e <USBD_LL_Transmit>
 801c3f2:	e003      	b.n	801c3fc <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	2200      	movs	r2, #0
 801c3f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 801c3fc:	2300      	movs	r3, #0
 801c3fe:	e000      	b.n	801c402 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 801c400:	2302      	movs	r3, #2
  }
}
 801c402:	4618      	mov	r0, r3
 801c404:	3710      	adds	r7, #16
 801c406:	46bd      	mov	sp, r7
 801c408:	bd80      	pop	{r7, pc}

0801c40a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801c40a:	b580      	push	{r7, lr}
 801c40c:	b084      	sub	sp, #16
 801c40e:	af00      	add	r7, sp, #0
 801c410:	6078      	str	r0, [r7, #4]
 801c412:	460b      	mov	r3, r1
 801c414:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c416:	687b      	ldr	r3, [r7, #4]
 801c418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c41c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801c41e:	78fb      	ldrb	r3, [r7, #3]
 801c420:	4619      	mov	r1, r3
 801c422:	6878      	ldr	r0, [r7, #4]
 801c424:	f001 fee1 	bl	801e1ea <USBD_LL_GetRxDataSize>
 801c428:	4602      	mov	r2, r0
 801c42a:	68fb      	ldr	r3, [r7, #12]
 801c42c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 801c430:	687b      	ldr	r3, [r7, #4]
 801c432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c436:	2b00      	cmp	r3, #0
 801c438:	d00d      	beq.n	801c456 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c440:	68db      	ldr	r3, [r3, #12]
 801c442:	68fa      	ldr	r2, [r7, #12]
 801c444:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801c448:	68fa      	ldr	r2, [r7, #12]
 801c44a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801c44e:	4611      	mov	r1, r2
 801c450:	4798      	blx	r3

    return USBD_OK;
 801c452:	2300      	movs	r3, #0
 801c454:	e000      	b.n	801c458 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 801c456:	2302      	movs	r3, #2
  }
}
 801c458:	4618      	mov	r0, r3
 801c45a:	3710      	adds	r7, #16
 801c45c:	46bd      	mov	sp, r7
 801c45e:	bd80      	pop	{r7, pc}

0801c460 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801c460:	b580      	push	{r7, lr}
 801c462:	b084      	sub	sp, #16
 801c464:	af00      	add	r7, sp, #0
 801c466:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c468:	687b      	ldr	r3, [r7, #4]
 801c46a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c46e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c476:	2b00      	cmp	r3, #0
 801c478:	d015      	beq.n	801c4a6 <USBD_CDC_EP0_RxReady+0x46>
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801c480:	2bff      	cmp	r3, #255	; 0xff
 801c482:	d010      	beq.n	801c4a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801c48a:	689b      	ldr	r3, [r3, #8]
 801c48c:	68fa      	ldr	r2, [r7, #12]
 801c48e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 801c492:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 801c494:	68fa      	ldr	r2, [r7, #12]
 801c496:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801c49a:	b292      	uxth	r2, r2
 801c49c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801c49e:	68fb      	ldr	r3, [r7, #12]
 801c4a0:	22ff      	movs	r2, #255	; 0xff
 801c4a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 801c4a6:	2300      	movs	r3, #0
}
 801c4a8:	4618      	mov	r0, r3
 801c4aa:	3710      	adds	r7, #16
 801c4ac:	46bd      	mov	sp, r7
 801c4ae:	bd80      	pop	{r7, pc}

0801c4b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801c4b0:	b480      	push	{r7}
 801c4b2:	b083      	sub	sp, #12
 801c4b4:	af00      	add	r7, sp, #0
 801c4b6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	2243      	movs	r2, #67	; 0x43
 801c4bc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 801c4be:	4b03      	ldr	r3, [pc, #12]	; (801c4cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801c4c0:	4618      	mov	r0, r3
 801c4c2:	370c      	adds	r7, #12
 801c4c4:	46bd      	mov	sp, r7
 801c4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ca:	4770      	bx	lr
 801c4cc:	240000a0 	.word	0x240000a0

0801c4d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801c4d0:	b480      	push	{r7}
 801c4d2:	b083      	sub	sp, #12
 801c4d4:	af00      	add	r7, sp, #0
 801c4d6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 801c4d8:	687b      	ldr	r3, [r7, #4]
 801c4da:	2243      	movs	r2, #67	; 0x43
 801c4dc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 801c4de:	4b03      	ldr	r3, [pc, #12]	; (801c4ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801c4e0:	4618      	mov	r0, r3
 801c4e2:	370c      	adds	r7, #12
 801c4e4:	46bd      	mov	sp, r7
 801c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ea:	4770      	bx	lr
 801c4ec:	2400005c 	.word	0x2400005c

0801c4f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801c4f0:	b480      	push	{r7}
 801c4f2:	b083      	sub	sp, #12
 801c4f4:	af00      	add	r7, sp, #0
 801c4f6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801c4f8:	687b      	ldr	r3, [r7, #4]
 801c4fa:	2243      	movs	r2, #67	; 0x43
 801c4fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 801c4fe:	4b03      	ldr	r3, [pc, #12]	; (801c50c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801c500:	4618      	mov	r0, r3
 801c502:	370c      	adds	r7, #12
 801c504:	46bd      	mov	sp, r7
 801c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c50a:	4770      	bx	lr
 801c50c:	240000e4 	.word	0x240000e4

0801c510 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801c510:	b480      	push	{r7}
 801c512:	b083      	sub	sp, #12
 801c514:	af00      	add	r7, sp, #0
 801c516:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	220a      	movs	r2, #10
 801c51c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 801c51e:	4b03      	ldr	r3, [pc, #12]	; (801c52c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801c520:	4618      	mov	r0, r3
 801c522:	370c      	adds	r7, #12
 801c524:	46bd      	mov	sp, r7
 801c526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c52a:	4770      	bx	lr
 801c52c:	24000018 	.word	0x24000018

0801c530 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 801c530:	b480      	push	{r7}
 801c532:	b085      	sub	sp, #20
 801c534:	af00      	add	r7, sp, #0
 801c536:	6078      	str	r0, [r7, #4]
 801c538:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 801c53a:	2302      	movs	r3, #2
 801c53c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 801c53e:	683b      	ldr	r3, [r7, #0]
 801c540:	2b00      	cmp	r3, #0
 801c542:	d005      	beq.n	801c550 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	683a      	ldr	r2, [r7, #0]
 801c548:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 801c54c:	2300      	movs	r3, #0
 801c54e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 801c550:	7bfb      	ldrb	r3, [r7, #15]
}
 801c552:	4618      	mov	r0, r3
 801c554:	3714      	adds	r7, #20
 801c556:	46bd      	mov	sp, r7
 801c558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c55c:	4770      	bx	lr

0801c55e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 801c55e:	b480      	push	{r7}
 801c560:	b087      	sub	sp, #28
 801c562:	af00      	add	r7, sp, #0
 801c564:	60f8      	str	r0, [r7, #12]
 801c566:	60b9      	str	r1, [r7, #8]
 801c568:	4613      	mov	r3, r2
 801c56a:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c56c:	68fb      	ldr	r3, [r7, #12]
 801c56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c572:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801c574:	697b      	ldr	r3, [r7, #20]
 801c576:	68ba      	ldr	r2, [r7, #8]
 801c578:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 801c57c:	88fa      	ldrh	r2, [r7, #6]
 801c57e:	697b      	ldr	r3, [r7, #20]
 801c580:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 801c584:	2300      	movs	r3, #0
}
 801c586:	4618      	mov	r0, r3
 801c588:	371c      	adds	r7, #28
 801c58a:	46bd      	mov	sp, r7
 801c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c590:	4770      	bx	lr

0801c592 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 801c592:	b480      	push	{r7}
 801c594:	b085      	sub	sp, #20
 801c596:	af00      	add	r7, sp, #0
 801c598:	6078      	str	r0, [r7, #4]
 801c59a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c59c:	687b      	ldr	r3, [r7, #4]
 801c59e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	683a      	ldr	r2, [r7, #0]
 801c5a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 801c5ac:	2300      	movs	r3, #0
}
 801c5ae:	4618      	mov	r0, r3
 801c5b0:	3714      	adds	r7, #20
 801c5b2:	46bd      	mov	sp, r7
 801c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c5b8:	4770      	bx	lr

0801c5ba <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 801c5ba:	b580      	push	{r7, lr}
 801c5bc:	b084      	sub	sp, #16
 801c5be:	af00      	add	r7, sp, #0
 801c5c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5c8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 801c5ca:	687b      	ldr	r3, [r7, #4]
 801c5cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c5d0:	2b00      	cmp	r3, #0
 801c5d2:	d01c      	beq.n	801c60e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 801c5d4:	68fb      	ldr	r3, [r7, #12]
 801c5d6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d115      	bne.n	801c60a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 801c5de:	68fb      	ldr	r3, [r7, #12]
 801c5e0:	2201      	movs	r2, #1
 801c5e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801c5ec:	687b      	ldr	r3, [r7, #4]
 801c5ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 801c5fc:	b29b      	uxth	r3, r3
 801c5fe:	2181      	movs	r1, #129	; 0x81
 801c600:	6878      	ldr	r0, [r7, #4]
 801c602:	f001 fdac 	bl	801e15e <USBD_LL_Transmit>

      return USBD_OK;
 801c606:	2300      	movs	r3, #0
 801c608:	e002      	b.n	801c610 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 801c60a:	2301      	movs	r3, #1
 801c60c:	e000      	b.n	801c610 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 801c60e:	2302      	movs	r3, #2
  }
}
 801c610:	4618      	mov	r0, r3
 801c612:	3710      	adds	r7, #16
 801c614:	46bd      	mov	sp, r7
 801c616:	bd80      	pop	{r7, pc}

0801c618 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b084      	sub	sp, #16
 801c61c:	af00      	add	r7, sp, #0
 801c61e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c626:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 801c628:	687b      	ldr	r3, [r7, #4]
 801c62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801c62e:	2b00      	cmp	r3, #0
 801c630:	d017      	beq.n	801c662 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801c632:	687b      	ldr	r3, [r7, #4]
 801c634:	7c1b      	ldrb	r3, [r3, #16]
 801c636:	2b00      	cmp	r3, #0
 801c638:	d109      	bne.n	801c64e <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c63a:	68fb      	ldr	r3, [r7, #12]
 801c63c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c640:	f44f 7300 	mov.w	r3, #512	; 0x200
 801c644:	2101      	movs	r1, #1
 801c646:	6878      	ldr	r0, [r7, #4]
 801c648:	f001 fdac 	bl	801e1a4 <USBD_LL_PrepareReceive>
 801c64c:	e007      	b.n	801c65e <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 801c64e:	68fb      	ldr	r3, [r7, #12]
 801c650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801c654:	2340      	movs	r3, #64	; 0x40
 801c656:	2101      	movs	r1, #1
 801c658:	6878      	ldr	r0, [r7, #4]
 801c65a:	f001 fda3 	bl	801e1a4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 801c65e:	2300      	movs	r3, #0
 801c660:	e000      	b.n	801c664 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 801c662:	2302      	movs	r3, #2
  }
}
 801c664:	4618      	mov	r0, r3
 801c666:	3710      	adds	r7, #16
 801c668:	46bd      	mov	sp, r7
 801c66a:	bd80      	pop	{r7, pc}

0801c66c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b084      	sub	sp, #16
 801c670:	af00      	add	r7, sp, #0
 801c672:	60f8      	str	r0, [r7, #12]
 801c674:	60b9      	str	r1, [r7, #8]
 801c676:	4613      	mov	r3, r2
 801c678:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	2b00      	cmp	r3, #0
 801c67e:	d101      	bne.n	801c684 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801c680:	2302      	movs	r3, #2
 801c682:	e01a      	b.n	801c6ba <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 801c684:	68fb      	ldr	r3, [r7, #12]
 801c686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c68a:	2b00      	cmp	r3, #0
 801c68c:	d003      	beq.n	801c696 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	2200      	movs	r2, #0
 801c692:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801c696:	68bb      	ldr	r3, [r7, #8]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d003      	beq.n	801c6a4 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 801c69c:	68fb      	ldr	r3, [r7, #12]
 801c69e:	68ba      	ldr	r2, [r7, #8]
 801c6a0:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801c6a4:	68fb      	ldr	r3, [r7, #12]
 801c6a6:	2201      	movs	r2, #1
 801c6a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801c6ac:	68fb      	ldr	r3, [r7, #12]
 801c6ae:	79fa      	ldrb	r2, [r7, #7]
 801c6b0:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 801c6b2:	68f8      	ldr	r0, [r7, #12]
 801c6b4:	f001 fc1a 	bl	801deec <USBD_LL_Init>

  return USBD_OK;
 801c6b8:	2300      	movs	r3, #0
}
 801c6ba:	4618      	mov	r0, r3
 801c6bc:	3710      	adds	r7, #16
 801c6be:	46bd      	mov	sp, r7
 801c6c0:	bd80      	pop	{r7, pc}

0801c6c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801c6c2:	b480      	push	{r7}
 801c6c4:	b085      	sub	sp, #20
 801c6c6:	af00      	add	r7, sp, #0
 801c6c8:	6078      	str	r0, [r7, #4]
 801c6ca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 801c6cc:	2300      	movs	r3, #0
 801c6ce:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 801c6d0:	683b      	ldr	r3, [r7, #0]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d006      	beq.n	801c6e4 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	683a      	ldr	r2, [r7, #0]
 801c6da:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 801c6de:	2300      	movs	r3, #0
 801c6e0:	73fb      	strb	r3, [r7, #15]
 801c6e2:	e001      	b.n	801c6e8 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 801c6e4:	2302      	movs	r3, #2
 801c6e6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801c6e8:	7bfb      	ldrb	r3, [r7, #15]
}
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	3714      	adds	r7, #20
 801c6ee:	46bd      	mov	sp, r7
 801c6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c6f4:	4770      	bx	lr

0801c6f6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 801c6f6:	b580      	push	{r7, lr}
 801c6f8:	b082      	sub	sp, #8
 801c6fa:	af00      	add	r7, sp, #0
 801c6fc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 801c6fe:	6878      	ldr	r0, [r7, #4]
 801c700:	f001 fc44 	bl	801df8c <USBD_LL_Start>

  return USBD_OK;
 801c704:	2300      	movs	r3, #0
}
 801c706:	4618      	mov	r0, r3
 801c708:	3708      	adds	r7, #8
 801c70a:	46bd      	mov	sp, r7
 801c70c:	bd80      	pop	{r7, pc}

0801c70e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801c70e:	b480      	push	{r7}
 801c710:	b083      	sub	sp, #12
 801c712:	af00      	add	r7, sp, #0
 801c714:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801c716:	2300      	movs	r3, #0
}
 801c718:	4618      	mov	r0, r3
 801c71a:	370c      	adds	r7, #12
 801c71c:	46bd      	mov	sp, r7
 801c71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c722:	4770      	bx	lr

0801c724 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b084      	sub	sp, #16
 801c728:	af00      	add	r7, sp, #0
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	460b      	mov	r3, r1
 801c72e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 801c730:	2302      	movs	r3, #2
 801c732:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 801c734:	687b      	ldr	r3, [r7, #4]
 801c736:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d00c      	beq.n	801c758 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	78fa      	ldrb	r2, [r7, #3]
 801c748:	4611      	mov	r1, r2
 801c74a:	6878      	ldr	r0, [r7, #4]
 801c74c:	4798      	blx	r3
 801c74e:	4603      	mov	r3, r0
 801c750:	2b00      	cmp	r3, #0
 801c752:	d101      	bne.n	801c758 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 801c754:	2300      	movs	r3, #0
 801c756:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 801c758:	7bfb      	ldrb	r3, [r7, #15]
}
 801c75a:	4618      	mov	r0, r3
 801c75c:	3710      	adds	r7, #16
 801c75e:	46bd      	mov	sp, r7
 801c760:	bd80      	pop	{r7, pc}

0801c762 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 801c762:	b580      	push	{r7, lr}
 801c764:	b082      	sub	sp, #8
 801c766:	af00      	add	r7, sp, #0
 801c768:	6078      	str	r0, [r7, #4]
 801c76a:	460b      	mov	r3, r1
 801c76c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c774:	685b      	ldr	r3, [r3, #4]
 801c776:	78fa      	ldrb	r2, [r7, #3]
 801c778:	4611      	mov	r1, r2
 801c77a:	6878      	ldr	r0, [r7, #4]
 801c77c:	4798      	blx	r3

  return USBD_OK;
 801c77e:	2300      	movs	r3, #0
}
 801c780:	4618      	mov	r0, r3
 801c782:	3708      	adds	r7, #8
 801c784:	46bd      	mov	sp, r7
 801c786:	bd80      	pop	{r7, pc}

0801c788 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801c788:	b580      	push	{r7, lr}
 801c78a:	b082      	sub	sp, #8
 801c78c:	af00      	add	r7, sp, #0
 801c78e:	6078      	str	r0, [r7, #4]
 801c790:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c798:	6839      	ldr	r1, [r7, #0]
 801c79a:	4618      	mov	r0, r3
 801c79c:	f000 ff0a 	bl	801d5b4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	2201      	movs	r2, #1
 801c7a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801c7a8:	687b      	ldr	r3, [r7, #4]
 801c7aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 801c7ae:	461a      	mov	r2, r3
 801c7b0:	687b      	ldr	r3, [r7, #4]
 801c7b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c7bc:	f003 031f 	and.w	r3, r3, #31
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d00c      	beq.n	801c7de <USBD_LL_SetupStage+0x56>
 801c7c4:	2b01      	cmp	r3, #1
 801c7c6:	d302      	bcc.n	801c7ce <USBD_LL_SetupStage+0x46>
 801c7c8:	2b02      	cmp	r3, #2
 801c7ca:	d010      	beq.n	801c7ee <USBD_LL_SetupStage+0x66>
 801c7cc:	e017      	b.n	801c7fe <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c7d4:	4619      	mov	r1, r3
 801c7d6:	6878      	ldr	r0, [r7, #4]
 801c7d8:	f000 fa0a 	bl	801cbf0 <USBD_StdDevReq>
      break;
 801c7dc:	e01a      	b.n	801c814 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 801c7de:	687b      	ldr	r3, [r7, #4]
 801c7e0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	6878      	ldr	r0, [r7, #4]
 801c7e8:	f000 fa6c 	bl	801ccc4 <USBD_StdItfReq>
      break;
 801c7ec:	e012      	b.n	801c814 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 801c7f4:	4619      	mov	r1, r3
 801c7f6:	6878      	ldr	r0, [r7, #4]
 801c7f8:	f000 faaa 	bl	801cd50 <USBD_StdEPReq>
      break;
 801c7fc:	e00a      	b.n	801c814 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 801c804:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801c808:	b2db      	uxtb	r3, r3
 801c80a:	4619      	mov	r1, r3
 801c80c:	6878      	ldr	r0, [r7, #4]
 801c80e:	f001 fc1d 	bl	801e04c <USBD_LL_StallEP>
      break;
 801c812:	bf00      	nop
  }

  return USBD_OK;
 801c814:	2300      	movs	r3, #0
}
 801c816:	4618      	mov	r0, r3
 801c818:	3708      	adds	r7, #8
 801c81a:	46bd      	mov	sp, r7
 801c81c:	bd80      	pop	{r7, pc}

0801c81e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801c81e:	b580      	push	{r7, lr}
 801c820:	b086      	sub	sp, #24
 801c822:	af00      	add	r7, sp, #0
 801c824:	60f8      	str	r0, [r7, #12]
 801c826:	460b      	mov	r3, r1
 801c828:	607a      	str	r2, [r7, #4]
 801c82a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c82c:	7afb      	ldrb	r3, [r7, #11]
 801c82e:	2b00      	cmp	r3, #0
 801c830:	d14b      	bne.n	801c8ca <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 801c832:	68fb      	ldr	r3, [r7, #12]
 801c834:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801c838:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801c83a:	68fb      	ldr	r3, [r7, #12]
 801c83c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c840:	2b03      	cmp	r3, #3
 801c842:	d134      	bne.n	801c8ae <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 801c844:	697b      	ldr	r3, [r7, #20]
 801c846:	68da      	ldr	r2, [r3, #12]
 801c848:	697b      	ldr	r3, [r7, #20]
 801c84a:	691b      	ldr	r3, [r3, #16]
 801c84c:	429a      	cmp	r2, r3
 801c84e:	d919      	bls.n	801c884 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 801c850:	697b      	ldr	r3, [r7, #20]
 801c852:	68da      	ldr	r2, [r3, #12]
 801c854:	697b      	ldr	r3, [r7, #20]
 801c856:	691b      	ldr	r3, [r3, #16]
 801c858:	1ad2      	subs	r2, r2, r3
 801c85a:	697b      	ldr	r3, [r7, #20]
 801c85c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c85e:	697b      	ldr	r3, [r7, #20]
 801c860:	68da      	ldr	r2, [r3, #12]
 801c862:	697b      	ldr	r3, [r7, #20]
 801c864:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c866:	429a      	cmp	r2, r3
 801c868:	d203      	bcs.n	801c872 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c86a:	697b      	ldr	r3, [r7, #20]
 801c86c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801c86e:	b29b      	uxth	r3, r3
 801c870:	e002      	b.n	801c878 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801c872:	697b      	ldr	r3, [r7, #20]
 801c874:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 801c876:	b29b      	uxth	r3, r3
 801c878:	461a      	mov	r2, r3
 801c87a:	6879      	ldr	r1, [r7, #4]
 801c87c:	68f8      	ldr	r0, [r7, #12]
 801c87e:	f000 ff8d 	bl	801d79c <USBD_CtlContinueRx>
 801c882:	e038      	b.n	801c8f6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c884:	68fb      	ldr	r3, [r7, #12]
 801c886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c88a:	691b      	ldr	r3, [r3, #16]
 801c88c:	2b00      	cmp	r3, #0
 801c88e:	d00a      	beq.n	801c8a6 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c890:	68fb      	ldr	r3, [r7, #12]
 801c892:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 801c896:	2b03      	cmp	r3, #3
 801c898:	d105      	bne.n	801c8a6 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801c89a:	68fb      	ldr	r3, [r7, #12]
 801c89c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8a0:	691b      	ldr	r3, [r3, #16]
 801c8a2:	68f8      	ldr	r0, [r7, #12]
 801c8a4:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801c8a6:	68f8      	ldr	r0, [r7, #12]
 801c8a8:	f000 ff8a 	bl	801d7c0 <USBD_CtlSendStatus>
 801c8ac:	e023      	b.n	801c8f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 801c8ae:	68fb      	ldr	r3, [r7, #12]
 801c8b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c8b4:	2b05      	cmp	r3, #5
 801c8b6:	d11e      	bne.n	801c8f6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 801c8b8:	68fb      	ldr	r3, [r7, #12]
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 801c8c0:	2100      	movs	r1, #0
 801c8c2:	68f8      	ldr	r0, [r7, #12]
 801c8c4:	f001 fbc2 	bl	801e04c <USBD_LL_StallEP>
 801c8c8:	e015      	b.n	801c8f6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8d0:	699b      	ldr	r3, [r3, #24]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d00d      	beq.n	801c8f2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801c8dc:	2b03      	cmp	r3, #3
 801c8de:	d108      	bne.n	801c8f2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 801c8e0:	68fb      	ldr	r3, [r7, #12]
 801c8e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c8e6:	699b      	ldr	r3, [r3, #24]
 801c8e8:	7afa      	ldrb	r2, [r7, #11]
 801c8ea:	4611      	mov	r1, r2
 801c8ec:	68f8      	ldr	r0, [r7, #12]
 801c8ee:	4798      	blx	r3
 801c8f0:	e001      	b.n	801c8f6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801c8f2:	2302      	movs	r3, #2
 801c8f4:	e000      	b.n	801c8f8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 801c8f6:	2300      	movs	r3, #0
}
 801c8f8:	4618      	mov	r0, r3
 801c8fa:	3718      	adds	r7, #24
 801c8fc:	46bd      	mov	sp, r7
 801c8fe:	bd80      	pop	{r7, pc}

0801c900 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801c900:	b580      	push	{r7, lr}
 801c902:	b086      	sub	sp, #24
 801c904:	af00      	add	r7, sp, #0
 801c906:	60f8      	str	r0, [r7, #12]
 801c908:	460b      	mov	r3, r1
 801c90a:	607a      	str	r2, [r7, #4]
 801c90c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 801c90e:	7afb      	ldrb	r3, [r7, #11]
 801c910:	2b00      	cmp	r3, #0
 801c912:	d17f      	bne.n	801ca14 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 801c914:	68fb      	ldr	r3, [r7, #12]
 801c916:	3314      	adds	r3, #20
 801c918:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c920:	2b02      	cmp	r3, #2
 801c922:	d15c      	bne.n	801c9de <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 801c924:	697b      	ldr	r3, [r7, #20]
 801c926:	68da      	ldr	r2, [r3, #12]
 801c928:	697b      	ldr	r3, [r7, #20]
 801c92a:	691b      	ldr	r3, [r3, #16]
 801c92c:	429a      	cmp	r2, r3
 801c92e:	d915      	bls.n	801c95c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 801c930:	697b      	ldr	r3, [r7, #20]
 801c932:	68da      	ldr	r2, [r3, #12]
 801c934:	697b      	ldr	r3, [r7, #20]
 801c936:	691b      	ldr	r3, [r3, #16]
 801c938:	1ad2      	subs	r2, r2, r3
 801c93a:	697b      	ldr	r3, [r7, #20]
 801c93c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801c93e:	697b      	ldr	r3, [r7, #20]
 801c940:	68db      	ldr	r3, [r3, #12]
 801c942:	b29b      	uxth	r3, r3
 801c944:	461a      	mov	r2, r3
 801c946:	6879      	ldr	r1, [r7, #4]
 801c948:	68f8      	ldr	r0, [r7, #12]
 801c94a:	f000 fef7 	bl	801d73c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c94e:	2300      	movs	r3, #0
 801c950:	2200      	movs	r2, #0
 801c952:	2100      	movs	r1, #0
 801c954:	68f8      	ldr	r0, [r7, #12]
 801c956:	f001 fc25 	bl	801e1a4 <USBD_LL_PrepareReceive>
 801c95a:	e04e      	b.n	801c9fa <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c95c:	697b      	ldr	r3, [r7, #20]
 801c95e:	689b      	ldr	r3, [r3, #8]
 801c960:	697a      	ldr	r2, [r7, #20]
 801c962:	6912      	ldr	r2, [r2, #16]
 801c964:	fbb3 f1f2 	udiv	r1, r3, r2
 801c968:	fb02 f201 	mul.w	r2, r2, r1
 801c96c:	1a9b      	subs	r3, r3, r2
 801c96e:	2b00      	cmp	r3, #0
 801c970:	d11c      	bne.n	801c9ac <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 801c972:	697b      	ldr	r3, [r7, #20]
 801c974:	689a      	ldr	r2, [r3, #8]
 801c976:	697b      	ldr	r3, [r7, #20]
 801c978:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801c97a:	429a      	cmp	r2, r3
 801c97c:	d316      	bcc.n	801c9ac <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 801c97e:	697b      	ldr	r3, [r7, #20]
 801c980:	689a      	ldr	r2, [r3, #8]
 801c982:	68fb      	ldr	r3, [r7, #12]
 801c984:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801c988:	429a      	cmp	r2, r3
 801c98a:	d20f      	bcs.n	801c9ac <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801c98c:	2200      	movs	r2, #0
 801c98e:	2100      	movs	r1, #0
 801c990:	68f8      	ldr	r0, [r7, #12]
 801c992:	f000 fed3 	bl	801d73c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	2200      	movs	r2, #0
 801c99a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801c99e:	2300      	movs	r3, #0
 801c9a0:	2200      	movs	r2, #0
 801c9a2:	2100      	movs	r1, #0
 801c9a4:	68f8      	ldr	r0, [r7, #12]
 801c9a6:	f001 fbfd 	bl	801e1a4 <USBD_LL_PrepareReceive>
 801c9aa:	e026      	b.n	801c9fa <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c9ac:	68fb      	ldr	r3, [r7, #12]
 801c9ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c9b2:	68db      	ldr	r3, [r3, #12]
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d00a      	beq.n	801c9ce <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801c9b8:	68fb      	ldr	r3, [r7, #12]
 801c9ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801c9be:	2b03      	cmp	r3, #3
 801c9c0:	d105      	bne.n	801c9ce <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 801c9c2:	68fb      	ldr	r3, [r7, #12]
 801c9c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801c9c8:	68db      	ldr	r3, [r3, #12]
 801c9ca:	68f8      	ldr	r0, [r7, #12]
 801c9cc:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 801c9ce:	2180      	movs	r1, #128	; 0x80
 801c9d0:	68f8      	ldr	r0, [r7, #12]
 801c9d2:	f001 fb3b 	bl	801e04c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 801c9d6:	68f8      	ldr	r0, [r7, #12]
 801c9d8:	f000 ff05 	bl	801d7e6 <USBD_CtlReceiveStatus>
 801c9dc:	e00d      	b.n	801c9fa <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801c9e4:	2b04      	cmp	r3, #4
 801c9e6:	d004      	beq.n	801c9f2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 801c9e8:	68fb      	ldr	r3, [r7, #12]
 801c9ea:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 801c9ee:	2b00      	cmp	r3, #0
 801c9f0:	d103      	bne.n	801c9fa <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 801c9f2:	2180      	movs	r1, #128	; 0x80
 801c9f4:	68f8      	ldr	r0, [r7, #12]
 801c9f6:	f001 fb29 	bl	801e04c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 801c9fa:	68fb      	ldr	r3, [r7, #12]
 801c9fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 801ca00:	2b01      	cmp	r3, #1
 801ca02:	d11d      	bne.n	801ca40 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 801ca04:	68f8      	ldr	r0, [r7, #12]
 801ca06:	f7ff fe82 	bl	801c70e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801ca0a:	68fb      	ldr	r3, [r7, #12]
 801ca0c:	2200      	movs	r2, #0
 801ca0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 801ca12:	e015      	b.n	801ca40 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 801ca14:	68fb      	ldr	r3, [r7, #12]
 801ca16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca1a:	695b      	ldr	r3, [r3, #20]
 801ca1c:	2b00      	cmp	r3, #0
 801ca1e:	d00d      	beq.n	801ca3c <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801ca20:	68fb      	ldr	r3, [r7, #12]
 801ca22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801ca26:	2b03      	cmp	r3, #3
 801ca28:	d108      	bne.n	801ca3c <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801ca2a:	68fb      	ldr	r3, [r7, #12]
 801ca2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801ca30:	695b      	ldr	r3, [r3, #20]
 801ca32:	7afa      	ldrb	r2, [r7, #11]
 801ca34:	4611      	mov	r1, r2
 801ca36:	68f8      	ldr	r0, [r7, #12]
 801ca38:	4798      	blx	r3
 801ca3a:	e001      	b.n	801ca40 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 801ca3c:	2302      	movs	r3, #2
 801ca3e:	e000      	b.n	801ca42 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 801ca40:	2300      	movs	r3, #0
}
 801ca42:	4618      	mov	r0, r3
 801ca44:	3718      	adds	r7, #24
 801ca46:	46bd      	mov	sp, r7
 801ca48:	bd80      	pop	{r7, pc}

0801ca4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801ca4a:	b580      	push	{r7, lr}
 801ca4c:	b082      	sub	sp, #8
 801ca4e:	af00      	add	r7, sp, #0
 801ca50:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ca52:	2340      	movs	r3, #64	; 0x40
 801ca54:	2200      	movs	r2, #0
 801ca56:	2100      	movs	r1, #0
 801ca58:	6878      	ldr	r0, [r7, #4]
 801ca5a:	f001 fab2 	bl	801dfc2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	2201      	movs	r2, #1
 801ca62:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801ca66:	687b      	ldr	r3, [r7, #4]
 801ca68:	2240      	movs	r2, #64	; 0x40
 801ca6a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801ca6e:	2340      	movs	r3, #64	; 0x40
 801ca70:	2200      	movs	r2, #0
 801ca72:	2180      	movs	r1, #128	; 0x80
 801ca74:	6878      	ldr	r0, [r7, #4]
 801ca76:	f001 faa4 	bl	801dfc2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	2201      	movs	r2, #1
 801ca7e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801ca80:	687b      	ldr	r3, [r7, #4]
 801ca82:	2240      	movs	r2, #64	; 0x40
 801ca84:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	2201      	movs	r2, #1
 801ca8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	2200      	movs	r2, #0
 801ca92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	2200      	movs	r2, #0
 801ca9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 801ca9c:	687b      	ldr	r3, [r7, #4]
 801ca9e:	2200      	movs	r2, #0
 801caa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 801caa4:	687b      	ldr	r3, [r7, #4]
 801caa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801caaa:	2b00      	cmp	r3, #0
 801caac:	d009      	beq.n	801cac2 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801caae:	687b      	ldr	r3, [r7, #4]
 801cab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cab4:	685b      	ldr	r3, [r3, #4]
 801cab6:	687a      	ldr	r2, [r7, #4]
 801cab8:	6852      	ldr	r2, [r2, #4]
 801caba:	b2d2      	uxtb	r2, r2
 801cabc:	4611      	mov	r1, r2
 801cabe:	6878      	ldr	r0, [r7, #4]
 801cac0:	4798      	blx	r3
  }

  return USBD_OK;
 801cac2:	2300      	movs	r3, #0
}
 801cac4:	4618      	mov	r0, r3
 801cac6:	3708      	adds	r7, #8
 801cac8:	46bd      	mov	sp, r7
 801caca:	bd80      	pop	{r7, pc}

0801cacc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801cacc:	b480      	push	{r7}
 801cace:	b083      	sub	sp, #12
 801cad0:	af00      	add	r7, sp, #0
 801cad2:	6078      	str	r0, [r7, #4]
 801cad4:	460b      	mov	r3, r1
 801cad6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 801cad8:	687b      	ldr	r3, [r7, #4]
 801cada:	78fa      	ldrb	r2, [r7, #3]
 801cadc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801cade:	2300      	movs	r3, #0
}
 801cae0:	4618      	mov	r0, r3
 801cae2:	370c      	adds	r7, #12
 801cae4:	46bd      	mov	sp, r7
 801cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caea:	4770      	bx	lr

0801caec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801caec:	b480      	push	{r7}
 801caee:	b083      	sub	sp, #12
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801caf4:	687b      	ldr	r3, [r7, #4]
 801caf6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801cafa:	687b      	ldr	r3, [r7, #4]
 801cafc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801cb00:	687b      	ldr	r3, [r7, #4]
 801cb02:	2204      	movs	r2, #4
 801cb04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 801cb08:	2300      	movs	r3, #0
}
 801cb0a:	4618      	mov	r0, r3
 801cb0c:	370c      	adds	r7, #12
 801cb0e:	46bd      	mov	sp, r7
 801cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb14:	4770      	bx	lr

0801cb16 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801cb16:	b480      	push	{r7}
 801cb18:	b083      	sub	sp, #12
 801cb1a:	af00      	add	r7, sp, #0
 801cb1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb24:	2b04      	cmp	r3, #4
 801cb26:	d105      	bne.n	801cb34 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 801cb28:	687b      	ldr	r3, [r7, #4]
 801cb2a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 801cb2e:	687b      	ldr	r3, [r7, #4]
 801cb30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 801cb34:	2300      	movs	r3, #0
}
 801cb36:	4618      	mov	r0, r3
 801cb38:	370c      	adds	r7, #12
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb40:	4770      	bx	lr

0801cb42 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 801cb42:	b580      	push	{r7, lr}
 801cb44:	b082      	sub	sp, #8
 801cb46:	af00      	add	r7, sp, #0
 801cb48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cb50:	2b03      	cmp	r3, #3
 801cb52:	d10b      	bne.n	801cb6c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb5a:	69db      	ldr	r3, [r3, #28]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d005      	beq.n	801cb6c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 801cb60:	687b      	ldr	r3, [r7, #4]
 801cb62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cb66:	69db      	ldr	r3, [r3, #28]
 801cb68:	6878      	ldr	r0, [r7, #4]
 801cb6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801cb6c:	2300      	movs	r3, #0
}
 801cb6e:	4618      	mov	r0, r3
 801cb70:	3708      	adds	r7, #8
 801cb72:	46bd      	mov	sp, r7
 801cb74:	bd80      	pop	{r7, pc}

0801cb76 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 801cb76:	b480      	push	{r7}
 801cb78:	b083      	sub	sp, #12
 801cb7a:	af00      	add	r7, sp, #0
 801cb7c:	6078      	str	r0, [r7, #4]
 801cb7e:	460b      	mov	r3, r1
 801cb80:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cb82:	2300      	movs	r3, #0
}
 801cb84:	4618      	mov	r0, r3
 801cb86:	370c      	adds	r7, #12
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8e:	4770      	bx	lr

0801cb90 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 801cb90:	b480      	push	{r7}
 801cb92:	b083      	sub	sp, #12
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	6078      	str	r0, [r7, #4]
 801cb98:	460b      	mov	r3, r1
 801cb9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801cb9c:	2300      	movs	r3, #0
}
 801cb9e:	4618      	mov	r0, r3
 801cba0:	370c      	adds	r7, #12
 801cba2:	46bd      	mov	sp, r7
 801cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba8:	4770      	bx	lr

0801cbaa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801cbaa:	b480      	push	{r7}
 801cbac:	b083      	sub	sp, #12
 801cbae:	af00      	add	r7, sp, #0
 801cbb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801cbb2:	2300      	movs	r3, #0
}
 801cbb4:	4618      	mov	r0, r3
 801cbb6:	370c      	adds	r7, #12
 801cbb8:	46bd      	mov	sp, r7
 801cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbbe:	4770      	bx	lr

0801cbc0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 801cbc0:	b580      	push	{r7, lr}
 801cbc2:	b082      	sub	sp, #8
 801cbc4:	af00      	add	r7, sp, #0
 801cbc6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	2201      	movs	r2, #1
 801cbcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801cbd0:	687b      	ldr	r3, [r7, #4]
 801cbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cbd6:	685b      	ldr	r3, [r3, #4]
 801cbd8:	687a      	ldr	r2, [r7, #4]
 801cbda:	6852      	ldr	r2, [r2, #4]
 801cbdc:	b2d2      	uxtb	r2, r2
 801cbde:	4611      	mov	r1, r2
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	4798      	blx	r3

  return USBD_OK;
 801cbe4:	2300      	movs	r3, #0
}
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	3708      	adds	r7, #8
 801cbea:	46bd      	mov	sp, r7
 801cbec:	bd80      	pop	{r7, pc}
	...

0801cbf0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	b084      	sub	sp, #16
 801cbf4:	af00      	add	r7, sp, #0
 801cbf6:	6078      	str	r0, [r7, #4]
 801cbf8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801cbfa:	2300      	movs	r3, #0
 801cbfc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cbfe:	683b      	ldr	r3, [r7, #0]
 801cc00:	781b      	ldrb	r3, [r3, #0]
 801cc02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cc06:	2b20      	cmp	r3, #32
 801cc08:	d004      	beq.n	801cc14 <USBD_StdDevReq+0x24>
 801cc0a:	2b40      	cmp	r3, #64	; 0x40
 801cc0c:	d002      	beq.n	801cc14 <USBD_StdDevReq+0x24>
 801cc0e:	2b00      	cmp	r3, #0
 801cc10:	d008      	beq.n	801cc24 <USBD_StdDevReq+0x34>
 801cc12:	e04c      	b.n	801ccae <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801cc14:	687b      	ldr	r3, [r7, #4]
 801cc16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cc1a:	689b      	ldr	r3, [r3, #8]
 801cc1c:	6839      	ldr	r1, [r7, #0]
 801cc1e:	6878      	ldr	r0, [r7, #4]
 801cc20:	4798      	blx	r3
      break;
 801cc22:	e049      	b.n	801ccb8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801cc24:	683b      	ldr	r3, [r7, #0]
 801cc26:	785b      	ldrb	r3, [r3, #1]
 801cc28:	2b09      	cmp	r3, #9
 801cc2a:	d83a      	bhi.n	801cca2 <USBD_StdDevReq+0xb2>
 801cc2c:	a201      	add	r2, pc, #4	; (adr r2, 801cc34 <USBD_StdDevReq+0x44>)
 801cc2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cc32:	bf00      	nop
 801cc34:	0801cc85 	.word	0x0801cc85
 801cc38:	0801cc99 	.word	0x0801cc99
 801cc3c:	0801cca3 	.word	0x0801cca3
 801cc40:	0801cc8f 	.word	0x0801cc8f
 801cc44:	0801cca3 	.word	0x0801cca3
 801cc48:	0801cc67 	.word	0x0801cc67
 801cc4c:	0801cc5d 	.word	0x0801cc5d
 801cc50:	0801cca3 	.word	0x0801cca3
 801cc54:	0801cc7b 	.word	0x0801cc7b
 801cc58:	0801cc71 	.word	0x0801cc71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801cc5c:	6839      	ldr	r1, [r7, #0]
 801cc5e:	6878      	ldr	r0, [r7, #4]
 801cc60:	f000 f9d4 	bl	801d00c <USBD_GetDescriptor>
          break;
 801cc64:	e022      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801cc66:	6839      	ldr	r1, [r7, #0]
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f000 fb37 	bl	801d2dc <USBD_SetAddress>
          break;
 801cc6e:	e01d      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801cc70:	6839      	ldr	r1, [r7, #0]
 801cc72:	6878      	ldr	r0, [r7, #4]
 801cc74:	f000 fb74 	bl	801d360 <USBD_SetConfig>
          break;
 801cc78:	e018      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801cc7a:	6839      	ldr	r1, [r7, #0]
 801cc7c:	6878      	ldr	r0, [r7, #4]
 801cc7e:	f000 fbfd 	bl	801d47c <USBD_GetConfig>
          break;
 801cc82:	e013      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 801cc84:	6839      	ldr	r1, [r7, #0]
 801cc86:	6878      	ldr	r0, [r7, #4]
 801cc88:	f000 fc2c 	bl	801d4e4 <USBD_GetStatus>
          break;
 801cc8c:	e00e      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801cc8e:	6839      	ldr	r1, [r7, #0]
 801cc90:	6878      	ldr	r0, [r7, #4]
 801cc92:	f000 fc5a 	bl	801d54a <USBD_SetFeature>
          break;
 801cc96:	e009      	b.n	801ccac <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 801cc98:	6839      	ldr	r1, [r7, #0]
 801cc9a:	6878      	ldr	r0, [r7, #4]
 801cc9c:	f000 fc69 	bl	801d572 <USBD_ClrFeature>
          break;
 801cca0:	e004      	b.n	801ccac <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 801cca2:	6839      	ldr	r1, [r7, #0]
 801cca4:	6878      	ldr	r0, [r7, #4]
 801cca6:	f000 fcc2 	bl	801d62e <USBD_CtlError>
          break;
 801ccaa:	bf00      	nop
      }
      break;
 801ccac:	e004      	b.n	801ccb8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 801ccae:	6839      	ldr	r1, [r7, #0]
 801ccb0:	6878      	ldr	r0, [r7, #4]
 801ccb2:	f000 fcbc 	bl	801d62e <USBD_CtlError>
      break;
 801ccb6:	bf00      	nop
  }

  return ret;
 801ccb8:	7bfb      	ldrb	r3, [r7, #15]
}
 801ccba:	4618      	mov	r0, r3
 801ccbc:	3710      	adds	r7, #16
 801ccbe:	46bd      	mov	sp, r7
 801ccc0:	bd80      	pop	{r7, pc}
 801ccc2:	bf00      	nop

0801ccc4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	b084      	sub	sp, #16
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
 801cccc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801ccce:	2300      	movs	r3, #0
 801ccd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801ccd2:	683b      	ldr	r3, [r7, #0]
 801ccd4:	781b      	ldrb	r3, [r3, #0]
 801ccd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801ccda:	2b20      	cmp	r3, #32
 801ccdc:	d003      	beq.n	801cce6 <USBD_StdItfReq+0x22>
 801ccde:	2b40      	cmp	r3, #64	; 0x40
 801cce0:	d001      	beq.n	801cce6 <USBD_StdItfReq+0x22>
 801cce2:	2b00      	cmp	r3, #0
 801cce4:	d12a      	bne.n	801cd3c <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801cce6:	687b      	ldr	r3, [r7, #4]
 801cce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ccec:	3b01      	subs	r3, #1
 801ccee:	2b02      	cmp	r3, #2
 801ccf0:	d81d      	bhi.n	801cd2e <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801ccf2:	683b      	ldr	r3, [r7, #0]
 801ccf4:	889b      	ldrh	r3, [r3, #4]
 801ccf6:	b2db      	uxtb	r3, r3
 801ccf8:	2b01      	cmp	r3, #1
 801ccfa:	d813      	bhi.n	801cd24 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801ccfc:	687b      	ldr	r3, [r7, #4]
 801ccfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd02:	689b      	ldr	r3, [r3, #8]
 801cd04:	6839      	ldr	r1, [r7, #0]
 801cd06:	6878      	ldr	r0, [r7, #4]
 801cd08:	4798      	blx	r3
 801cd0a:	4603      	mov	r3, r0
 801cd0c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801cd0e:	683b      	ldr	r3, [r7, #0]
 801cd10:	88db      	ldrh	r3, [r3, #6]
 801cd12:	2b00      	cmp	r3, #0
 801cd14:	d110      	bne.n	801cd38 <USBD_StdItfReq+0x74>
 801cd16:	7bfb      	ldrb	r3, [r7, #15]
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	d10d      	bne.n	801cd38 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 801cd1c:	6878      	ldr	r0, [r7, #4]
 801cd1e:	f000 fd4f 	bl	801d7c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801cd22:	e009      	b.n	801cd38 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 801cd24:	6839      	ldr	r1, [r7, #0]
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f000 fc81 	bl	801d62e <USBD_CtlError>
          break;
 801cd2c:	e004      	b.n	801cd38 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 801cd2e:	6839      	ldr	r1, [r7, #0]
 801cd30:	6878      	ldr	r0, [r7, #4]
 801cd32:	f000 fc7c 	bl	801d62e <USBD_CtlError>
          break;
 801cd36:	e000      	b.n	801cd3a <USBD_StdItfReq+0x76>
          break;
 801cd38:	bf00      	nop
      }
      break;
 801cd3a:	e004      	b.n	801cd46 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 801cd3c:	6839      	ldr	r1, [r7, #0]
 801cd3e:	6878      	ldr	r0, [r7, #4]
 801cd40:	f000 fc75 	bl	801d62e <USBD_CtlError>
      break;
 801cd44:	bf00      	nop
  }

  return USBD_OK;
 801cd46:	2300      	movs	r3, #0
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3710      	adds	r7, #16
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bd80      	pop	{r7, pc}

0801cd50 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801cd50:	b580      	push	{r7, lr}
 801cd52:	b084      	sub	sp, #16
 801cd54:	af00      	add	r7, sp, #0
 801cd56:	6078      	str	r0, [r7, #4]
 801cd58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801cd5a:	2300      	movs	r3, #0
 801cd5c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 801cd5e:	683b      	ldr	r3, [r7, #0]
 801cd60:	889b      	ldrh	r3, [r3, #4]
 801cd62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801cd64:	683b      	ldr	r3, [r7, #0]
 801cd66:	781b      	ldrb	r3, [r3, #0]
 801cd68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd6c:	2b20      	cmp	r3, #32
 801cd6e:	d004      	beq.n	801cd7a <USBD_StdEPReq+0x2a>
 801cd70:	2b40      	cmp	r3, #64	; 0x40
 801cd72:	d002      	beq.n	801cd7a <USBD_StdEPReq+0x2a>
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d008      	beq.n	801cd8a <USBD_StdEPReq+0x3a>
 801cd78:	e13d      	b.n	801cff6 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801cd7a:	687b      	ldr	r3, [r7, #4]
 801cd7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd80:	689b      	ldr	r3, [r3, #8]
 801cd82:	6839      	ldr	r1, [r7, #0]
 801cd84:	6878      	ldr	r0, [r7, #4]
 801cd86:	4798      	blx	r3
      break;
 801cd88:	e13a      	b.n	801d000 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801cd8a:	683b      	ldr	r3, [r7, #0]
 801cd8c:	781b      	ldrb	r3, [r3, #0]
 801cd8e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801cd92:	2b20      	cmp	r3, #32
 801cd94:	d10a      	bne.n	801cdac <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801cd96:	687b      	ldr	r3, [r7, #4]
 801cd98:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801cd9c:	689b      	ldr	r3, [r3, #8]
 801cd9e:	6839      	ldr	r1, [r7, #0]
 801cda0:	6878      	ldr	r0, [r7, #4]
 801cda2:	4798      	blx	r3
 801cda4:	4603      	mov	r3, r0
 801cda6:	73fb      	strb	r3, [r7, #15]

        return ret;
 801cda8:	7bfb      	ldrb	r3, [r7, #15]
 801cdaa:	e12a      	b.n	801d002 <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 801cdac:	683b      	ldr	r3, [r7, #0]
 801cdae:	785b      	ldrb	r3, [r3, #1]
 801cdb0:	2b01      	cmp	r3, #1
 801cdb2:	d03e      	beq.n	801ce32 <USBD_StdEPReq+0xe2>
 801cdb4:	2b03      	cmp	r3, #3
 801cdb6:	d002      	beq.n	801cdbe <USBD_StdEPReq+0x6e>
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	d070      	beq.n	801ce9e <USBD_StdEPReq+0x14e>
 801cdbc:	e115      	b.n	801cfea <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cdc4:	2b02      	cmp	r3, #2
 801cdc6:	d002      	beq.n	801cdce <USBD_StdEPReq+0x7e>
 801cdc8:	2b03      	cmp	r3, #3
 801cdca:	d015      	beq.n	801cdf8 <USBD_StdEPReq+0xa8>
 801cdcc:	e02b      	b.n	801ce26 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801cdce:	7bbb      	ldrb	r3, [r7, #14]
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d00c      	beq.n	801cdee <USBD_StdEPReq+0x9e>
 801cdd4:	7bbb      	ldrb	r3, [r7, #14]
 801cdd6:	2b80      	cmp	r3, #128	; 0x80
 801cdd8:	d009      	beq.n	801cdee <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801cdda:	7bbb      	ldrb	r3, [r7, #14]
 801cddc:	4619      	mov	r1, r3
 801cdde:	6878      	ldr	r0, [r7, #4]
 801cde0:	f001 f934 	bl	801e04c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801cde4:	2180      	movs	r1, #128	; 0x80
 801cde6:	6878      	ldr	r0, [r7, #4]
 801cde8:	f001 f930 	bl	801e04c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801cdec:	e020      	b.n	801ce30 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 801cdee:	6839      	ldr	r1, [r7, #0]
 801cdf0:	6878      	ldr	r0, [r7, #4]
 801cdf2:	f000 fc1c 	bl	801d62e <USBD_CtlError>
              break;
 801cdf6:	e01b      	b.n	801ce30 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801cdf8:	683b      	ldr	r3, [r7, #0]
 801cdfa:	885b      	ldrh	r3, [r3, #2]
 801cdfc:	2b00      	cmp	r3, #0
 801cdfe:	d10e      	bne.n	801ce1e <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 801ce00:	7bbb      	ldrb	r3, [r7, #14]
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d00b      	beq.n	801ce1e <USBD_StdEPReq+0xce>
 801ce06:	7bbb      	ldrb	r3, [r7, #14]
 801ce08:	2b80      	cmp	r3, #128	; 0x80
 801ce0a:	d008      	beq.n	801ce1e <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801ce0c:	683b      	ldr	r3, [r7, #0]
 801ce0e:	88db      	ldrh	r3, [r3, #6]
 801ce10:	2b00      	cmp	r3, #0
 801ce12:	d104      	bne.n	801ce1e <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801ce14:	7bbb      	ldrb	r3, [r7, #14]
 801ce16:	4619      	mov	r1, r3
 801ce18:	6878      	ldr	r0, [r7, #4]
 801ce1a:	f001 f917 	bl	801e04c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801ce1e:	6878      	ldr	r0, [r7, #4]
 801ce20:	f000 fcce 	bl	801d7c0 <USBD_CtlSendStatus>

              break;
 801ce24:	e004      	b.n	801ce30 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 801ce26:	6839      	ldr	r1, [r7, #0]
 801ce28:	6878      	ldr	r0, [r7, #4]
 801ce2a:	f000 fc00 	bl	801d62e <USBD_CtlError>
              break;
 801ce2e:	bf00      	nop
          }
          break;
 801ce30:	e0e0      	b.n	801cff4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801ce32:	687b      	ldr	r3, [r7, #4]
 801ce34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801ce38:	2b02      	cmp	r3, #2
 801ce3a:	d002      	beq.n	801ce42 <USBD_StdEPReq+0xf2>
 801ce3c:	2b03      	cmp	r3, #3
 801ce3e:	d015      	beq.n	801ce6c <USBD_StdEPReq+0x11c>
 801ce40:	e026      	b.n	801ce90 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ce42:	7bbb      	ldrb	r3, [r7, #14]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	d00c      	beq.n	801ce62 <USBD_StdEPReq+0x112>
 801ce48:	7bbb      	ldrb	r3, [r7, #14]
 801ce4a:	2b80      	cmp	r3, #128	; 0x80
 801ce4c:	d009      	beq.n	801ce62 <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801ce4e:	7bbb      	ldrb	r3, [r7, #14]
 801ce50:	4619      	mov	r1, r3
 801ce52:	6878      	ldr	r0, [r7, #4]
 801ce54:	f001 f8fa 	bl	801e04c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801ce58:	2180      	movs	r1, #128	; 0x80
 801ce5a:	6878      	ldr	r0, [r7, #4]
 801ce5c:	f001 f8f6 	bl	801e04c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801ce60:	e01c      	b.n	801ce9c <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 801ce62:	6839      	ldr	r1, [r7, #0]
 801ce64:	6878      	ldr	r0, [r7, #4]
 801ce66:	f000 fbe2 	bl	801d62e <USBD_CtlError>
              break;
 801ce6a:	e017      	b.n	801ce9c <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 801ce6c:	683b      	ldr	r3, [r7, #0]
 801ce6e:	885b      	ldrh	r3, [r3, #2]
 801ce70:	2b00      	cmp	r3, #0
 801ce72:	d112      	bne.n	801ce9a <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801ce74:	7bbb      	ldrb	r3, [r7, #14]
 801ce76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d004      	beq.n	801ce88 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 801ce7e:	7bbb      	ldrb	r3, [r7, #14]
 801ce80:	4619      	mov	r1, r3
 801ce82:	6878      	ldr	r0, [r7, #4]
 801ce84:	f001 f901 	bl	801e08a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 801ce88:	6878      	ldr	r0, [r7, #4]
 801ce8a:	f000 fc99 	bl	801d7c0 <USBD_CtlSendStatus>
              }
              break;
 801ce8e:	e004      	b.n	801ce9a <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 801ce90:	6839      	ldr	r1, [r7, #0]
 801ce92:	6878      	ldr	r0, [r7, #4]
 801ce94:	f000 fbcb 	bl	801d62e <USBD_CtlError>
              break;
 801ce98:	e000      	b.n	801ce9c <USBD_StdEPReq+0x14c>
              break;
 801ce9a:	bf00      	nop
          }
          break;
 801ce9c:	e0aa      	b.n	801cff4 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801ce9e:	687b      	ldr	r3, [r7, #4]
 801cea0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801cea4:	2b02      	cmp	r3, #2
 801cea6:	d002      	beq.n	801ceae <USBD_StdEPReq+0x15e>
 801cea8:	2b03      	cmp	r3, #3
 801ceaa:	d032      	beq.n	801cf12 <USBD_StdEPReq+0x1c2>
 801ceac:	e097      	b.n	801cfde <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801ceae:	7bbb      	ldrb	r3, [r7, #14]
 801ceb0:	2b00      	cmp	r3, #0
 801ceb2:	d007      	beq.n	801cec4 <USBD_StdEPReq+0x174>
 801ceb4:	7bbb      	ldrb	r3, [r7, #14]
 801ceb6:	2b80      	cmp	r3, #128	; 0x80
 801ceb8:	d004      	beq.n	801cec4 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 801ceba:	6839      	ldr	r1, [r7, #0]
 801cebc:	6878      	ldr	r0, [r7, #4]
 801cebe:	f000 fbb6 	bl	801d62e <USBD_CtlError>
                break;
 801cec2:	e091      	b.n	801cfe8 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cec4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	da0b      	bge.n	801cee4 <USBD_StdEPReq+0x194>
 801cecc:	7bbb      	ldrb	r3, [r7, #14]
 801cece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801ced2:	4613      	mov	r3, r2
 801ced4:	009b      	lsls	r3, r3, #2
 801ced6:	4413      	add	r3, r2
 801ced8:	009b      	lsls	r3, r3, #2
 801ceda:	3310      	adds	r3, #16
 801cedc:	687a      	ldr	r2, [r7, #4]
 801cede:	4413      	add	r3, r2
 801cee0:	3304      	adds	r3, #4
 801cee2:	e00b      	b.n	801cefc <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cee4:	7bbb      	ldrb	r3, [r7, #14]
 801cee6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801ceea:	4613      	mov	r3, r2
 801ceec:	009b      	lsls	r3, r3, #2
 801ceee:	4413      	add	r3, r2
 801cef0:	009b      	lsls	r3, r3, #2
 801cef2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cef6:	687a      	ldr	r2, [r7, #4]
 801cef8:	4413      	add	r3, r2
 801cefa:	3304      	adds	r3, #4
 801cefc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801cefe:	68bb      	ldr	r3, [r7, #8]
 801cf00:	2200      	movs	r2, #0
 801cf02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cf04:	68bb      	ldr	r3, [r7, #8]
 801cf06:	2202      	movs	r2, #2
 801cf08:	4619      	mov	r1, r3
 801cf0a:	6878      	ldr	r0, [r7, #4]
 801cf0c:	f000 fbfa 	bl	801d704 <USBD_CtlSendData>
              break;
 801cf10:	e06a      	b.n	801cfe8 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801cf12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cf16:	2b00      	cmp	r3, #0
 801cf18:	da11      	bge.n	801cf3e <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801cf1a:	7bbb      	ldrb	r3, [r7, #14]
 801cf1c:	f003 020f 	and.w	r2, r3, #15
 801cf20:	6879      	ldr	r1, [r7, #4]
 801cf22:	4613      	mov	r3, r2
 801cf24:	009b      	lsls	r3, r3, #2
 801cf26:	4413      	add	r3, r2
 801cf28:	009b      	lsls	r3, r3, #2
 801cf2a:	440b      	add	r3, r1
 801cf2c:	3318      	adds	r3, #24
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	2b00      	cmp	r3, #0
 801cf32:	d117      	bne.n	801cf64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cf34:	6839      	ldr	r1, [r7, #0]
 801cf36:	6878      	ldr	r0, [r7, #4]
 801cf38:	f000 fb79 	bl	801d62e <USBD_CtlError>
                  break;
 801cf3c:	e054      	b.n	801cfe8 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801cf3e:	7bbb      	ldrb	r3, [r7, #14]
 801cf40:	f003 020f 	and.w	r2, r3, #15
 801cf44:	6879      	ldr	r1, [r7, #4]
 801cf46:	4613      	mov	r3, r2
 801cf48:	009b      	lsls	r3, r3, #2
 801cf4a:	4413      	add	r3, r2
 801cf4c:	009b      	lsls	r3, r3, #2
 801cf4e:	440b      	add	r3, r1
 801cf50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 801cf54:	681b      	ldr	r3, [r3, #0]
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d104      	bne.n	801cf64 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 801cf5a:	6839      	ldr	r1, [r7, #0]
 801cf5c:	6878      	ldr	r0, [r7, #4]
 801cf5e:	f000 fb66 	bl	801d62e <USBD_CtlError>
                  break;
 801cf62:	e041      	b.n	801cfe8 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cf64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	da0b      	bge.n	801cf84 <USBD_StdEPReq+0x234>
 801cf6c:	7bbb      	ldrb	r3, [r7, #14]
 801cf6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801cf72:	4613      	mov	r3, r2
 801cf74:	009b      	lsls	r3, r3, #2
 801cf76:	4413      	add	r3, r2
 801cf78:	009b      	lsls	r3, r3, #2
 801cf7a:	3310      	adds	r3, #16
 801cf7c:	687a      	ldr	r2, [r7, #4]
 801cf7e:	4413      	add	r3, r2
 801cf80:	3304      	adds	r3, #4
 801cf82:	e00b      	b.n	801cf9c <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801cf84:	7bbb      	ldrb	r3, [r7, #14]
 801cf86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801cf8a:	4613      	mov	r3, r2
 801cf8c:	009b      	lsls	r3, r3, #2
 801cf8e:	4413      	add	r3, r2
 801cf90:	009b      	lsls	r3, r3, #2
 801cf92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801cf96:	687a      	ldr	r2, [r7, #4]
 801cf98:	4413      	add	r3, r2
 801cf9a:	3304      	adds	r3, #4
 801cf9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801cf9e:	7bbb      	ldrb	r3, [r7, #14]
 801cfa0:	2b00      	cmp	r3, #0
 801cfa2:	d002      	beq.n	801cfaa <USBD_StdEPReq+0x25a>
 801cfa4:	7bbb      	ldrb	r3, [r7, #14]
 801cfa6:	2b80      	cmp	r3, #128	; 0x80
 801cfa8:	d103      	bne.n	801cfb2 <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 801cfaa:	68bb      	ldr	r3, [r7, #8]
 801cfac:	2200      	movs	r2, #0
 801cfae:	601a      	str	r2, [r3, #0]
 801cfb0:	e00e      	b.n	801cfd0 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801cfb2:	7bbb      	ldrb	r3, [r7, #14]
 801cfb4:	4619      	mov	r1, r3
 801cfb6:	6878      	ldr	r0, [r7, #4]
 801cfb8:	f001 f886 	bl	801e0c8 <USBD_LL_IsStallEP>
 801cfbc:	4603      	mov	r3, r0
 801cfbe:	2b00      	cmp	r3, #0
 801cfc0:	d003      	beq.n	801cfca <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 801cfc2:	68bb      	ldr	r3, [r7, #8]
 801cfc4:	2201      	movs	r2, #1
 801cfc6:	601a      	str	r2, [r3, #0]
 801cfc8:	e002      	b.n	801cfd0 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 801cfca:	68bb      	ldr	r3, [r7, #8]
 801cfcc:	2200      	movs	r2, #0
 801cfce:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801cfd0:	68bb      	ldr	r3, [r7, #8]
 801cfd2:	2202      	movs	r2, #2
 801cfd4:	4619      	mov	r1, r3
 801cfd6:	6878      	ldr	r0, [r7, #4]
 801cfd8:	f000 fb94 	bl	801d704 <USBD_CtlSendData>
              break;
 801cfdc:	e004      	b.n	801cfe8 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 801cfde:	6839      	ldr	r1, [r7, #0]
 801cfe0:	6878      	ldr	r0, [r7, #4]
 801cfe2:	f000 fb24 	bl	801d62e <USBD_CtlError>
              break;
 801cfe6:	bf00      	nop
          }
          break;
 801cfe8:	e004      	b.n	801cff4 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 801cfea:	6839      	ldr	r1, [r7, #0]
 801cfec:	6878      	ldr	r0, [r7, #4]
 801cfee:	f000 fb1e 	bl	801d62e <USBD_CtlError>
          break;
 801cff2:	bf00      	nop
      }
      break;
 801cff4:	e004      	b.n	801d000 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 801cff6:	6839      	ldr	r1, [r7, #0]
 801cff8:	6878      	ldr	r0, [r7, #4]
 801cffa:	f000 fb18 	bl	801d62e <USBD_CtlError>
      break;
 801cffe:	bf00      	nop
  }

  return ret;
 801d000:	7bfb      	ldrb	r3, [r7, #15]
}
 801d002:	4618      	mov	r0, r3
 801d004:	3710      	adds	r7, #16
 801d006:	46bd      	mov	sp, r7
 801d008:	bd80      	pop	{r7, pc}
	...

0801d00c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801d00c:	b580      	push	{r7, lr}
 801d00e:	b084      	sub	sp, #16
 801d010:	af00      	add	r7, sp, #0
 801d012:	6078      	str	r0, [r7, #4]
 801d014:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801d016:	2300      	movs	r3, #0
 801d018:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801d01a:	2300      	movs	r3, #0
 801d01c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801d01e:	2300      	movs	r3, #0
 801d020:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801d022:	683b      	ldr	r3, [r7, #0]
 801d024:	885b      	ldrh	r3, [r3, #2]
 801d026:	0a1b      	lsrs	r3, r3, #8
 801d028:	b29b      	uxth	r3, r3
 801d02a:	3b01      	subs	r3, #1
 801d02c:	2b06      	cmp	r3, #6
 801d02e:	f200 8128 	bhi.w	801d282 <USBD_GetDescriptor+0x276>
 801d032:	a201      	add	r2, pc, #4	; (adr r2, 801d038 <USBD_GetDescriptor+0x2c>)
 801d034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d038:	0801d055 	.word	0x0801d055
 801d03c:	0801d06d 	.word	0x0801d06d
 801d040:	0801d0ad 	.word	0x0801d0ad
 801d044:	0801d283 	.word	0x0801d283
 801d048:	0801d283 	.word	0x0801d283
 801d04c:	0801d223 	.word	0x0801d223
 801d050:	0801d24f 	.word	0x0801d24f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d05a:	681b      	ldr	r3, [r3, #0]
 801d05c:	687a      	ldr	r2, [r7, #4]
 801d05e:	7c12      	ldrb	r2, [r2, #16]
 801d060:	f107 0108 	add.w	r1, r7, #8
 801d064:	4610      	mov	r0, r2
 801d066:	4798      	blx	r3
 801d068:	60f8      	str	r0, [r7, #12]
      break;
 801d06a:	e112      	b.n	801d292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d06c:	687b      	ldr	r3, [r7, #4]
 801d06e:	7c1b      	ldrb	r3, [r3, #16]
 801d070:	2b00      	cmp	r3, #0
 801d072:	d10d      	bne.n	801d090 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801d074:	687b      	ldr	r3, [r7, #4]
 801d076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d07a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d07c:	f107 0208 	add.w	r2, r7, #8
 801d080:	4610      	mov	r0, r2
 801d082:	4798      	blx	r3
 801d084:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d086:	68fb      	ldr	r3, [r7, #12]
 801d088:	3301      	adds	r3, #1
 801d08a:	2202      	movs	r2, #2
 801d08c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801d08e:	e100      	b.n	801d292 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d098:	f107 0208 	add.w	r2, r7, #8
 801d09c:	4610      	mov	r0, r2
 801d09e:	4798      	blx	r3
 801d0a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801d0a2:	68fb      	ldr	r3, [r7, #12]
 801d0a4:	3301      	adds	r3, #1
 801d0a6:	2202      	movs	r2, #2
 801d0a8:	701a      	strb	r2, [r3, #0]
      break;
 801d0aa:	e0f2      	b.n	801d292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801d0ac:	683b      	ldr	r3, [r7, #0]
 801d0ae:	885b      	ldrh	r3, [r3, #2]
 801d0b0:	b2db      	uxtb	r3, r3
 801d0b2:	2b05      	cmp	r3, #5
 801d0b4:	f200 80ac 	bhi.w	801d210 <USBD_GetDescriptor+0x204>
 801d0b8:	a201      	add	r2, pc, #4	; (adr r2, 801d0c0 <USBD_GetDescriptor+0xb4>)
 801d0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0be:	bf00      	nop
 801d0c0:	0801d0d9 	.word	0x0801d0d9
 801d0c4:	0801d10d 	.word	0x0801d10d
 801d0c8:	0801d141 	.word	0x0801d141
 801d0cc:	0801d175 	.word	0x0801d175
 801d0d0:	0801d1a9 	.word	0x0801d1a9
 801d0d4:	0801d1dd 	.word	0x0801d1dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801d0d8:	687b      	ldr	r3, [r7, #4]
 801d0da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d0de:	685b      	ldr	r3, [r3, #4]
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d00b      	beq.n	801d0fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801d0e4:	687b      	ldr	r3, [r7, #4]
 801d0e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d0ea:	685b      	ldr	r3, [r3, #4]
 801d0ec:	687a      	ldr	r2, [r7, #4]
 801d0ee:	7c12      	ldrb	r2, [r2, #16]
 801d0f0:	f107 0108 	add.w	r1, r7, #8
 801d0f4:	4610      	mov	r0, r2
 801d0f6:	4798      	blx	r3
 801d0f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d0fa:	e091      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d0fc:	6839      	ldr	r1, [r7, #0]
 801d0fe:	6878      	ldr	r0, [r7, #4]
 801d100:	f000 fa95 	bl	801d62e <USBD_CtlError>
            err++;
 801d104:	7afb      	ldrb	r3, [r7, #11]
 801d106:	3301      	adds	r3, #1
 801d108:	72fb      	strb	r3, [r7, #11]
          break;
 801d10a:	e089      	b.n	801d220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 801d10c:	687b      	ldr	r3, [r7, #4]
 801d10e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d112:	689b      	ldr	r3, [r3, #8]
 801d114:	2b00      	cmp	r3, #0
 801d116:	d00b      	beq.n	801d130 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d11e:	689b      	ldr	r3, [r3, #8]
 801d120:	687a      	ldr	r2, [r7, #4]
 801d122:	7c12      	ldrb	r2, [r2, #16]
 801d124:	f107 0108 	add.w	r1, r7, #8
 801d128:	4610      	mov	r0, r2
 801d12a:	4798      	blx	r3
 801d12c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d12e:	e077      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d130:	6839      	ldr	r1, [r7, #0]
 801d132:	6878      	ldr	r0, [r7, #4]
 801d134:	f000 fa7b 	bl	801d62e <USBD_CtlError>
            err++;
 801d138:	7afb      	ldrb	r3, [r7, #11]
 801d13a:	3301      	adds	r3, #1
 801d13c:	72fb      	strb	r3, [r7, #11]
          break;
 801d13e:	e06f      	b.n	801d220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801d140:	687b      	ldr	r3, [r7, #4]
 801d142:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d146:	68db      	ldr	r3, [r3, #12]
 801d148:	2b00      	cmp	r3, #0
 801d14a:	d00b      	beq.n	801d164 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801d14c:	687b      	ldr	r3, [r7, #4]
 801d14e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d152:	68db      	ldr	r3, [r3, #12]
 801d154:	687a      	ldr	r2, [r7, #4]
 801d156:	7c12      	ldrb	r2, [r2, #16]
 801d158:	f107 0108 	add.w	r1, r7, #8
 801d15c:	4610      	mov	r0, r2
 801d15e:	4798      	blx	r3
 801d160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d162:	e05d      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d164:	6839      	ldr	r1, [r7, #0]
 801d166:	6878      	ldr	r0, [r7, #4]
 801d168:	f000 fa61 	bl	801d62e <USBD_CtlError>
            err++;
 801d16c:	7afb      	ldrb	r3, [r7, #11]
 801d16e:	3301      	adds	r3, #1
 801d170:	72fb      	strb	r3, [r7, #11]
          break;
 801d172:	e055      	b.n	801d220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d17a:	691b      	ldr	r3, [r3, #16]
 801d17c:	2b00      	cmp	r3, #0
 801d17e:	d00b      	beq.n	801d198 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 801d180:	687b      	ldr	r3, [r7, #4]
 801d182:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d186:	691b      	ldr	r3, [r3, #16]
 801d188:	687a      	ldr	r2, [r7, #4]
 801d18a:	7c12      	ldrb	r2, [r2, #16]
 801d18c:	f107 0108 	add.w	r1, r7, #8
 801d190:	4610      	mov	r0, r2
 801d192:	4798      	blx	r3
 801d194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d196:	e043      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d198:	6839      	ldr	r1, [r7, #0]
 801d19a:	6878      	ldr	r0, [r7, #4]
 801d19c:	f000 fa47 	bl	801d62e <USBD_CtlError>
            err++;
 801d1a0:	7afb      	ldrb	r3, [r7, #11]
 801d1a2:	3301      	adds	r3, #1
 801d1a4:	72fb      	strb	r3, [r7, #11]
          break;
 801d1a6:	e03b      	b.n	801d220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801d1a8:	687b      	ldr	r3, [r7, #4]
 801d1aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d1ae:	695b      	ldr	r3, [r3, #20]
 801d1b0:	2b00      	cmp	r3, #0
 801d1b2:	d00b      	beq.n	801d1cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d1ba:	695b      	ldr	r3, [r3, #20]
 801d1bc:	687a      	ldr	r2, [r7, #4]
 801d1be:	7c12      	ldrb	r2, [r2, #16]
 801d1c0:	f107 0108 	add.w	r1, r7, #8
 801d1c4:	4610      	mov	r0, r2
 801d1c6:	4798      	blx	r3
 801d1c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d1ca:	e029      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d1cc:	6839      	ldr	r1, [r7, #0]
 801d1ce:	6878      	ldr	r0, [r7, #4]
 801d1d0:	f000 fa2d 	bl	801d62e <USBD_CtlError>
            err++;
 801d1d4:	7afb      	ldrb	r3, [r7, #11]
 801d1d6:	3301      	adds	r3, #1
 801d1d8:	72fb      	strb	r3, [r7, #11]
          break;
 801d1da:	e021      	b.n	801d220 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 801d1dc:	687b      	ldr	r3, [r7, #4]
 801d1de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d1e2:	699b      	ldr	r3, [r3, #24]
 801d1e4:	2b00      	cmp	r3, #0
 801d1e6:	d00b      	beq.n	801d200 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801d1e8:	687b      	ldr	r3, [r7, #4]
 801d1ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 801d1ee:	699b      	ldr	r3, [r3, #24]
 801d1f0:	687a      	ldr	r2, [r7, #4]
 801d1f2:	7c12      	ldrb	r2, [r2, #16]
 801d1f4:	f107 0108 	add.w	r1, r7, #8
 801d1f8:	4610      	mov	r0, r2
 801d1fa:	4798      	blx	r3
 801d1fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801d1fe:	e00f      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801d200:	6839      	ldr	r1, [r7, #0]
 801d202:	6878      	ldr	r0, [r7, #4]
 801d204:	f000 fa13 	bl	801d62e <USBD_CtlError>
            err++;
 801d208:	7afb      	ldrb	r3, [r7, #11]
 801d20a:	3301      	adds	r3, #1
 801d20c:	72fb      	strb	r3, [r7, #11]
          break;
 801d20e:	e007      	b.n	801d220 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 801d210:	6839      	ldr	r1, [r7, #0]
 801d212:	6878      	ldr	r0, [r7, #4]
 801d214:	f000 fa0b 	bl	801d62e <USBD_CtlError>
          err++;
 801d218:	7afb      	ldrb	r3, [r7, #11]
 801d21a:	3301      	adds	r3, #1
 801d21c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 801d21e:	e038      	b.n	801d292 <USBD_GetDescriptor+0x286>
 801d220:	e037      	b.n	801d292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d222:	687b      	ldr	r3, [r7, #4]
 801d224:	7c1b      	ldrb	r3, [r3, #16]
 801d226:	2b00      	cmp	r3, #0
 801d228:	d109      	bne.n	801d23e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801d22a:	687b      	ldr	r3, [r7, #4]
 801d22c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d232:	f107 0208 	add.w	r2, r7, #8
 801d236:	4610      	mov	r0, r2
 801d238:	4798      	blx	r3
 801d23a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d23c:	e029      	b.n	801d292 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d23e:	6839      	ldr	r1, [r7, #0]
 801d240:	6878      	ldr	r0, [r7, #4]
 801d242:	f000 f9f4 	bl	801d62e <USBD_CtlError>
        err++;
 801d246:	7afb      	ldrb	r3, [r7, #11]
 801d248:	3301      	adds	r3, #1
 801d24a:	72fb      	strb	r3, [r7, #11]
      break;
 801d24c:	e021      	b.n	801d292 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	7c1b      	ldrb	r3, [r3, #16]
 801d252:	2b00      	cmp	r3, #0
 801d254:	d10d      	bne.n	801d272 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801d256:	687b      	ldr	r3, [r7, #4]
 801d258:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801d25c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d25e:	f107 0208 	add.w	r2, r7, #8
 801d262:	4610      	mov	r0, r2
 801d264:	4798      	blx	r3
 801d266:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801d268:	68fb      	ldr	r3, [r7, #12]
 801d26a:	3301      	adds	r3, #1
 801d26c:	2207      	movs	r2, #7
 801d26e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801d270:	e00f      	b.n	801d292 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801d272:	6839      	ldr	r1, [r7, #0]
 801d274:	6878      	ldr	r0, [r7, #4]
 801d276:	f000 f9da 	bl	801d62e <USBD_CtlError>
        err++;
 801d27a:	7afb      	ldrb	r3, [r7, #11]
 801d27c:	3301      	adds	r3, #1
 801d27e:	72fb      	strb	r3, [r7, #11]
      break;
 801d280:	e007      	b.n	801d292 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801d282:	6839      	ldr	r1, [r7, #0]
 801d284:	6878      	ldr	r0, [r7, #4]
 801d286:	f000 f9d2 	bl	801d62e <USBD_CtlError>
      err++;
 801d28a:	7afb      	ldrb	r3, [r7, #11]
 801d28c:	3301      	adds	r3, #1
 801d28e:	72fb      	strb	r3, [r7, #11]
      break;
 801d290:	bf00      	nop
  }

  if (err != 0U)
 801d292:	7afb      	ldrb	r3, [r7, #11]
 801d294:	2b00      	cmp	r3, #0
 801d296:	d11c      	bne.n	801d2d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 801d298:	893b      	ldrh	r3, [r7, #8]
 801d29a:	2b00      	cmp	r3, #0
 801d29c:	d011      	beq.n	801d2c2 <USBD_GetDescriptor+0x2b6>
 801d29e:	683b      	ldr	r3, [r7, #0]
 801d2a0:	88db      	ldrh	r3, [r3, #6]
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d00d      	beq.n	801d2c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 801d2a6:	683b      	ldr	r3, [r7, #0]
 801d2a8:	88da      	ldrh	r2, [r3, #6]
 801d2aa:	893b      	ldrh	r3, [r7, #8]
 801d2ac:	4293      	cmp	r3, r2
 801d2ae:	bf28      	it	cs
 801d2b0:	4613      	movcs	r3, r2
 801d2b2:	b29b      	uxth	r3, r3
 801d2b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801d2b6:	893b      	ldrh	r3, [r7, #8]
 801d2b8:	461a      	mov	r2, r3
 801d2ba:	68f9      	ldr	r1, [r7, #12]
 801d2bc:	6878      	ldr	r0, [r7, #4]
 801d2be:	f000 fa21 	bl	801d704 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 801d2c2:	683b      	ldr	r3, [r7, #0]
 801d2c4:	88db      	ldrh	r3, [r3, #6]
 801d2c6:	2b00      	cmp	r3, #0
 801d2c8:	d104      	bne.n	801d2d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 801d2ca:	6878      	ldr	r0, [r7, #4]
 801d2cc:	f000 fa78 	bl	801d7c0 <USBD_CtlSendStatus>
 801d2d0:	e000      	b.n	801d2d4 <USBD_GetDescriptor+0x2c8>
    return;
 801d2d2:	bf00      	nop
    }
  }
}
 801d2d4:	3710      	adds	r7, #16
 801d2d6:	46bd      	mov	sp, r7
 801d2d8:	bd80      	pop	{r7, pc}
 801d2da:	bf00      	nop

0801d2dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b084      	sub	sp, #16
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]
 801d2e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801d2e6:	683b      	ldr	r3, [r7, #0]
 801d2e8:	889b      	ldrh	r3, [r3, #4]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	d130      	bne.n	801d350 <USBD_SetAddress+0x74>
 801d2ee:	683b      	ldr	r3, [r7, #0]
 801d2f0:	88db      	ldrh	r3, [r3, #6]
 801d2f2:	2b00      	cmp	r3, #0
 801d2f4:	d12c      	bne.n	801d350 <USBD_SetAddress+0x74>
 801d2f6:	683b      	ldr	r3, [r7, #0]
 801d2f8:	885b      	ldrh	r3, [r3, #2]
 801d2fa:	2b7f      	cmp	r3, #127	; 0x7f
 801d2fc:	d828      	bhi.n	801d350 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801d2fe:	683b      	ldr	r3, [r7, #0]
 801d300:	885b      	ldrh	r3, [r3, #2]
 801d302:	b2db      	uxtb	r3, r3
 801d304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801d308:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d30a:	687b      	ldr	r3, [r7, #4]
 801d30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d310:	2b03      	cmp	r3, #3
 801d312:	d104      	bne.n	801d31e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 801d314:	6839      	ldr	r1, [r7, #0]
 801d316:	6878      	ldr	r0, [r7, #4]
 801d318:	f000 f989 	bl	801d62e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d31c:	e01c      	b.n	801d358 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801d31e:	687b      	ldr	r3, [r7, #4]
 801d320:	7bfa      	ldrb	r2, [r7, #15]
 801d322:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 801d326:	7bfb      	ldrb	r3, [r7, #15]
 801d328:	4619      	mov	r1, r3
 801d32a:	6878      	ldr	r0, [r7, #4]
 801d32c:	f000 fef8 	bl	801e120 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 801d330:	6878      	ldr	r0, [r7, #4]
 801d332:	f000 fa45 	bl	801d7c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801d336:	7bfb      	ldrb	r3, [r7, #15]
 801d338:	2b00      	cmp	r3, #0
 801d33a:	d004      	beq.n	801d346 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801d33c:	687b      	ldr	r3, [r7, #4]
 801d33e:	2202      	movs	r2, #2
 801d340:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d344:	e008      	b.n	801d358 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801d346:	687b      	ldr	r3, [r7, #4]
 801d348:	2201      	movs	r2, #1
 801d34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801d34e:	e003      	b.n	801d358 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801d350:	6839      	ldr	r1, [r7, #0]
 801d352:	6878      	ldr	r0, [r7, #4]
 801d354:	f000 f96b 	bl	801d62e <USBD_CtlError>
  }
}
 801d358:	bf00      	nop
 801d35a:	3710      	adds	r7, #16
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}

0801d360 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d360:	b580      	push	{r7, lr}
 801d362:	b082      	sub	sp, #8
 801d364:	af00      	add	r7, sp, #0
 801d366:	6078      	str	r0, [r7, #4]
 801d368:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801d36a:	683b      	ldr	r3, [r7, #0]
 801d36c:	885b      	ldrh	r3, [r3, #2]
 801d36e:	b2da      	uxtb	r2, r3
 801d370:	4b41      	ldr	r3, [pc, #260]	; (801d478 <USBD_SetConfig+0x118>)
 801d372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801d374:	4b40      	ldr	r3, [pc, #256]	; (801d478 <USBD_SetConfig+0x118>)
 801d376:	781b      	ldrb	r3, [r3, #0]
 801d378:	2b01      	cmp	r3, #1
 801d37a:	d904      	bls.n	801d386 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 801d37c:	6839      	ldr	r1, [r7, #0]
 801d37e:	6878      	ldr	r0, [r7, #4]
 801d380:	f000 f955 	bl	801d62e <USBD_CtlError>
 801d384:	e075      	b.n	801d472 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 801d386:	687b      	ldr	r3, [r7, #4]
 801d388:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d38c:	2b02      	cmp	r3, #2
 801d38e:	d002      	beq.n	801d396 <USBD_SetConfig+0x36>
 801d390:	2b03      	cmp	r3, #3
 801d392:	d023      	beq.n	801d3dc <USBD_SetConfig+0x7c>
 801d394:	e062      	b.n	801d45c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 801d396:	4b38      	ldr	r3, [pc, #224]	; (801d478 <USBD_SetConfig+0x118>)
 801d398:	781b      	ldrb	r3, [r3, #0]
 801d39a:	2b00      	cmp	r3, #0
 801d39c:	d01a      	beq.n	801d3d4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 801d39e:	4b36      	ldr	r3, [pc, #216]	; (801d478 <USBD_SetConfig+0x118>)
 801d3a0:	781b      	ldrb	r3, [r3, #0]
 801d3a2:	461a      	mov	r2, r3
 801d3a4:	687b      	ldr	r3, [r7, #4]
 801d3a6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	2203      	movs	r2, #3
 801d3ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d3b0:	4b31      	ldr	r3, [pc, #196]	; (801d478 <USBD_SetConfig+0x118>)
 801d3b2:	781b      	ldrb	r3, [r3, #0]
 801d3b4:	4619      	mov	r1, r3
 801d3b6:	6878      	ldr	r0, [r7, #4]
 801d3b8:	f7ff f9b4 	bl	801c724 <USBD_SetClassConfig>
 801d3bc:	4603      	mov	r3, r0
 801d3be:	2b02      	cmp	r3, #2
 801d3c0:	d104      	bne.n	801d3cc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 801d3c2:	6839      	ldr	r1, [r7, #0]
 801d3c4:	6878      	ldr	r0, [r7, #4]
 801d3c6:	f000 f932 	bl	801d62e <USBD_CtlError>
            return;
 801d3ca:	e052      	b.n	801d472 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 801d3cc:	6878      	ldr	r0, [r7, #4]
 801d3ce:	f000 f9f7 	bl	801d7c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d3d2:	e04e      	b.n	801d472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d3d4:	6878      	ldr	r0, [r7, #4]
 801d3d6:	f000 f9f3 	bl	801d7c0 <USBD_CtlSendStatus>
        break;
 801d3da:	e04a      	b.n	801d472 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 801d3dc:	4b26      	ldr	r3, [pc, #152]	; (801d478 <USBD_SetConfig+0x118>)
 801d3de:	781b      	ldrb	r3, [r3, #0]
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d112      	bne.n	801d40a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	2202      	movs	r2, #2
 801d3e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 801d3ec:	4b22      	ldr	r3, [pc, #136]	; (801d478 <USBD_SetConfig+0x118>)
 801d3ee:	781b      	ldrb	r3, [r3, #0]
 801d3f0:	461a      	mov	r2, r3
 801d3f2:	687b      	ldr	r3, [r7, #4]
 801d3f4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 801d3f6:	4b20      	ldr	r3, [pc, #128]	; (801d478 <USBD_SetConfig+0x118>)
 801d3f8:	781b      	ldrb	r3, [r3, #0]
 801d3fa:	4619      	mov	r1, r3
 801d3fc:	6878      	ldr	r0, [r7, #4]
 801d3fe:	f7ff f9b0 	bl	801c762 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 801d402:	6878      	ldr	r0, [r7, #4]
 801d404:	f000 f9dc 	bl	801d7c0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 801d408:	e033      	b.n	801d472 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 801d40a:	4b1b      	ldr	r3, [pc, #108]	; (801d478 <USBD_SetConfig+0x118>)
 801d40c:	781b      	ldrb	r3, [r3, #0]
 801d40e:	461a      	mov	r2, r3
 801d410:	687b      	ldr	r3, [r7, #4]
 801d412:	685b      	ldr	r3, [r3, #4]
 801d414:	429a      	cmp	r2, r3
 801d416:	d01d      	beq.n	801d454 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801d418:	687b      	ldr	r3, [r7, #4]
 801d41a:	685b      	ldr	r3, [r3, #4]
 801d41c:	b2db      	uxtb	r3, r3
 801d41e:	4619      	mov	r1, r3
 801d420:	6878      	ldr	r0, [r7, #4]
 801d422:	f7ff f99e 	bl	801c762 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 801d426:	4b14      	ldr	r3, [pc, #80]	; (801d478 <USBD_SetConfig+0x118>)
 801d428:	781b      	ldrb	r3, [r3, #0]
 801d42a:	461a      	mov	r2, r3
 801d42c:	687b      	ldr	r3, [r7, #4]
 801d42e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 801d430:	4b11      	ldr	r3, [pc, #68]	; (801d478 <USBD_SetConfig+0x118>)
 801d432:	781b      	ldrb	r3, [r3, #0]
 801d434:	4619      	mov	r1, r3
 801d436:	6878      	ldr	r0, [r7, #4]
 801d438:	f7ff f974 	bl	801c724 <USBD_SetClassConfig>
 801d43c:	4603      	mov	r3, r0
 801d43e:	2b02      	cmp	r3, #2
 801d440:	d104      	bne.n	801d44c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 801d442:	6839      	ldr	r1, [r7, #0]
 801d444:	6878      	ldr	r0, [r7, #4]
 801d446:	f000 f8f2 	bl	801d62e <USBD_CtlError>
            return;
 801d44a:	e012      	b.n	801d472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d44c:	6878      	ldr	r0, [r7, #4]
 801d44e:	f000 f9b7 	bl	801d7c0 <USBD_CtlSendStatus>
        break;
 801d452:	e00e      	b.n	801d472 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 801d454:	6878      	ldr	r0, [r7, #4]
 801d456:	f000 f9b3 	bl	801d7c0 <USBD_CtlSendStatus>
        break;
 801d45a:	e00a      	b.n	801d472 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 801d45c:	6839      	ldr	r1, [r7, #0]
 801d45e:	6878      	ldr	r0, [r7, #4]
 801d460:	f000 f8e5 	bl	801d62e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 801d464:	4b04      	ldr	r3, [pc, #16]	; (801d478 <USBD_SetConfig+0x118>)
 801d466:	781b      	ldrb	r3, [r3, #0]
 801d468:	4619      	mov	r1, r3
 801d46a:	6878      	ldr	r0, [r7, #4]
 801d46c:	f7ff f979 	bl	801c762 <USBD_ClrClassConfig>
        break;
 801d470:	bf00      	nop
    }
  }
}
 801d472:	3708      	adds	r7, #8
 801d474:	46bd      	mov	sp, r7
 801d476:	bd80      	pop	{r7, pc}
 801d478:	24000305 	.word	0x24000305

0801d47c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d47c:	b580      	push	{r7, lr}
 801d47e:	b082      	sub	sp, #8
 801d480:	af00      	add	r7, sp, #0
 801d482:	6078      	str	r0, [r7, #4]
 801d484:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801d486:	683b      	ldr	r3, [r7, #0]
 801d488:	88db      	ldrh	r3, [r3, #6]
 801d48a:	2b01      	cmp	r3, #1
 801d48c:	d004      	beq.n	801d498 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801d48e:	6839      	ldr	r1, [r7, #0]
 801d490:	6878      	ldr	r0, [r7, #4]
 801d492:	f000 f8cc 	bl	801d62e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801d496:	e021      	b.n	801d4dc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d49e:	2b01      	cmp	r3, #1
 801d4a0:	db17      	blt.n	801d4d2 <USBD_GetConfig+0x56>
 801d4a2:	2b02      	cmp	r3, #2
 801d4a4:	dd02      	ble.n	801d4ac <USBD_GetConfig+0x30>
 801d4a6:	2b03      	cmp	r3, #3
 801d4a8:	d00b      	beq.n	801d4c2 <USBD_GetConfig+0x46>
 801d4aa:	e012      	b.n	801d4d2 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 801d4ac:	687b      	ldr	r3, [r7, #4]
 801d4ae:	2200      	movs	r2, #0
 801d4b0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 801d4b2:	687b      	ldr	r3, [r7, #4]
 801d4b4:	3308      	adds	r3, #8
 801d4b6:	2201      	movs	r2, #1
 801d4b8:	4619      	mov	r1, r3
 801d4ba:	6878      	ldr	r0, [r7, #4]
 801d4bc:	f000 f922 	bl	801d704 <USBD_CtlSendData>
        break;
 801d4c0:	e00c      	b.n	801d4dc <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	3304      	adds	r3, #4
 801d4c6:	2201      	movs	r2, #1
 801d4c8:	4619      	mov	r1, r3
 801d4ca:	6878      	ldr	r0, [r7, #4]
 801d4cc:	f000 f91a 	bl	801d704 <USBD_CtlSendData>
        break;
 801d4d0:	e004      	b.n	801d4dc <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 801d4d2:	6839      	ldr	r1, [r7, #0]
 801d4d4:	6878      	ldr	r0, [r7, #4]
 801d4d6:	f000 f8aa 	bl	801d62e <USBD_CtlError>
        break;
 801d4da:	bf00      	nop
}
 801d4dc:	bf00      	nop
 801d4de:	3708      	adds	r7, #8
 801d4e0:	46bd      	mov	sp, r7
 801d4e2:	bd80      	pop	{r7, pc}

0801d4e4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801d4e4:	b580      	push	{r7, lr}
 801d4e6:	b082      	sub	sp, #8
 801d4e8:	af00      	add	r7, sp, #0
 801d4ea:	6078      	str	r0, [r7, #4]
 801d4ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d4ee:	687b      	ldr	r3, [r7, #4]
 801d4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d4f4:	3b01      	subs	r3, #1
 801d4f6:	2b02      	cmp	r3, #2
 801d4f8:	d81e      	bhi.n	801d538 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	88db      	ldrh	r3, [r3, #6]
 801d4fe:	2b02      	cmp	r3, #2
 801d500:	d004      	beq.n	801d50c <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 801d502:	6839      	ldr	r1, [r7, #0]
 801d504:	6878      	ldr	r0, [r7, #4]
 801d506:	f000 f892 	bl	801d62e <USBD_CtlError>
        break;
 801d50a:	e01a      	b.n	801d542 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	2201      	movs	r2, #1
 801d510:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 801d512:	687b      	ldr	r3, [r7, #4]
 801d514:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d005      	beq.n	801d528 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801d51c:	687b      	ldr	r3, [r7, #4]
 801d51e:	68db      	ldr	r3, [r3, #12]
 801d520:	f043 0202 	orr.w	r2, r3, #2
 801d524:	687b      	ldr	r3, [r7, #4]
 801d526:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 801d528:	687b      	ldr	r3, [r7, #4]
 801d52a:	330c      	adds	r3, #12
 801d52c:	2202      	movs	r2, #2
 801d52e:	4619      	mov	r1, r3
 801d530:	6878      	ldr	r0, [r7, #4]
 801d532:	f000 f8e7 	bl	801d704 <USBD_CtlSendData>
      break;
 801d536:	e004      	b.n	801d542 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 801d538:	6839      	ldr	r1, [r7, #0]
 801d53a:	6878      	ldr	r0, [r7, #4]
 801d53c:	f000 f877 	bl	801d62e <USBD_CtlError>
      break;
 801d540:	bf00      	nop
  }
}
 801d542:	bf00      	nop
 801d544:	3708      	adds	r7, #8
 801d546:	46bd      	mov	sp, r7
 801d548:	bd80      	pop	{r7, pc}

0801d54a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d54a:	b580      	push	{r7, lr}
 801d54c:	b082      	sub	sp, #8
 801d54e:	af00      	add	r7, sp, #0
 801d550:	6078      	str	r0, [r7, #4]
 801d552:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d554:	683b      	ldr	r3, [r7, #0]
 801d556:	885b      	ldrh	r3, [r3, #2]
 801d558:	2b01      	cmp	r3, #1
 801d55a:	d106      	bne.n	801d56a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 801d55c:	687b      	ldr	r3, [r7, #4]
 801d55e:	2201      	movs	r2, #1
 801d560:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 801d564:	6878      	ldr	r0, [r7, #4]
 801d566:	f000 f92b 	bl	801d7c0 <USBD_CtlSendStatus>
  }
}
 801d56a:	bf00      	nop
 801d56c:	3708      	adds	r7, #8
 801d56e:	46bd      	mov	sp, r7
 801d570:	bd80      	pop	{r7, pc}

0801d572 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 801d572:	b580      	push	{r7, lr}
 801d574:	b082      	sub	sp, #8
 801d576:	af00      	add	r7, sp, #0
 801d578:	6078      	str	r0, [r7, #4]
 801d57a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801d57c:	687b      	ldr	r3, [r7, #4]
 801d57e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801d582:	3b01      	subs	r3, #1
 801d584:	2b02      	cmp	r3, #2
 801d586:	d80b      	bhi.n	801d5a0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801d588:	683b      	ldr	r3, [r7, #0]
 801d58a:	885b      	ldrh	r3, [r3, #2]
 801d58c:	2b01      	cmp	r3, #1
 801d58e:	d10c      	bne.n	801d5aa <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801d590:	687b      	ldr	r3, [r7, #4]
 801d592:	2200      	movs	r2, #0
 801d594:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 801d598:	6878      	ldr	r0, [r7, #4]
 801d59a:	f000 f911 	bl	801d7c0 <USBD_CtlSendStatus>
      }
      break;
 801d59e:	e004      	b.n	801d5aa <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801d5a0:	6839      	ldr	r1, [r7, #0]
 801d5a2:	6878      	ldr	r0, [r7, #4]
 801d5a4:	f000 f843 	bl	801d62e <USBD_CtlError>
      break;
 801d5a8:	e000      	b.n	801d5ac <USBD_ClrFeature+0x3a>
      break;
 801d5aa:	bf00      	nop
  }
}
 801d5ac:	bf00      	nop
 801d5ae:	3708      	adds	r7, #8
 801d5b0:	46bd      	mov	sp, r7
 801d5b2:	bd80      	pop	{r7, pc}

0801d5b4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801d5b4:	b480      	push	{r7}
 801d5b6:	b083      	sub	sp, #12
 801d5b8:	af00      	add	r7, sp, #0
 801d5ba:	6078      	str	r0, [r7, #4]
 801d5bc:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 801d5be:	683b      	ldr	r3, [r7, #0]
 801d5c0:	781a      	ldrb	r2, [r3, #0]
 801d5c2:	687b      	ldr	r3, [r7, #4]
 801d5c4:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 801d5c6:	683b      	ldr	r3, [r7, #0]
 801d5c8:	785a      	ldrb	r2, [r3, #1]
 801d5ca:	687b      	ldr	r3, [r7, #4]
 801d5cc:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 801d5ce:	683b      	ldr	r3, [r7, #0]
 801d5d0:	3302      	adds	r3, #2
 801d5d2:	781b      	ldrb	r3, [r3, #0]
 801d5d4:	b29a      	uxth	r2, r3
 801d5d6:	683b      	ldr	r3, [r7, #0]
 801d5d8:	3303      	adds	r3, #3
 801d5da:	781b      	ldrb	r3, [r3, #0]
 801d5dc:	b29b      	uxth	r3, r3
 801d5de:	021b      	lsls	r3, r3, #8
 801d5e0:	b29b      	uxth	r3, r3
 801d5e2:	4413      	add	r3, r2
 801d5e4:	b29a      	uxth	r2, r3
 801d5e6:	687b      	ldr	r3, [r7, #4]
 801d5e8:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 801d5ea:	683b      	ldr	r3, [r7, #0]
 801d5ec:	3304      	adds	r3, #4
 801d5ee:	781b      	ldrb	r3, [r3, #0]
 801d5f0:	b29a      	uxth	r2, r3
 801d5f2:	683b      	ldr	r3, [r7, #0]
 801d5f4:	3305      	adds	r3, #5
 801d5f6:	781b      	ldrb	r3, [r3, #0]
 801d5f8:	b29b      	uxth	r3, r3
 801d5fa:	021b      	lsls	r3, r3, #8
 801d5fc:	b29b      	uxth	r3, r3
 801d5fe:	4413      	add	r3, r2
 801d600:	b29a      	uxth	r2, r3
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 801d606:	683b      	ldr	r3, [r7, #0]
 801d608:	3306      	adds	r3, #6
 801d60a:	781b      	ldrb	r3, [r3, #0]
 801d60c:	b29a      	uxth	r2, r3
 801d60e:	683b      	ldr	r3, [r7, #0]
 801d610:	3307      	adds	r3, #7
 801d612:	781b      	ldrb	r3, [r3, #0]
 801d614:	b29b      	uxth	r3, r3
 801d616:	021b      	lsls	r3, r3, #8
 801d618:	b29b      	uxth	r3, r3
 801d61a:	4413      	add	r3, r2
 801d61c:	b29a      	uxth	r2, r3
 801d61e:	687b      	ldr	r3, [r7, #4]
 801d620:	80da      	strh	r2, [r3, #6]

}
 801d622:	bf00      	nop
 801d624:	370c      	adds	r7, #12
 801d626:	46bd      	mov	sp, r7
 801d628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d62c:	4770      	bx	lr

0801d62e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 801d62e:	b580      	push	{r7, lr}
 801d630:	b082      	sub	sp, #8
 801d632:	af00      	add	r7, sp, #0
 801d634:	6078      	str	r0, [r7, #4]
 801d636:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 801d638:	2180      	movs	r1, #128	; 0x80
 801d63a:	6878      	ldr	r0, [r7, #4]
 801d63c:	f000 fd06 	bl	801e04c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 801d640:	2100      	movs	r1, #0
 801d642:	6878      	ldr	r0, [r7, #4]
 801d644:	f000 fd02 	bl	801e04c <USBD_LL_StallEP>
}
 801d648:	bf00      	nop
 801d64a:	3708      	adds	r7, #8
 801d64c:	46bd      	mov	sp, r7
 801d64e:	bd80      	pop	{r7, pc}

0801d650 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801d650:	b580      	push	{r7, lr}
 801d652:	b086      	sub	sp, #24
 801d654:	af00      	add	r7, sp, #0
 801d656:	60f8      	str	r0, [r7, #12]
 801d658:	60b9      	str	r1, [r7, #8]
 801d65a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801d65c:	2300      	movs	r3, #0
 801d65e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 801d660:	68fb      	ldr	r3, [r7, #12]
 801d662:	2b00      	cmp	r3, #0
 801d664:	d032      	beq.n	801d6cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 801d666:	68f8      	ldr	r0, [r7, #12]
 801d668:	f000 f834 	bl	801d6d4 <USBD_GetLen>
 801d66c:	4603      	mov	r3, r0
 801d66e:	3301      	adds	r3, #1
 801d670:	b29b      	uxth	r3, r3
 801d672:	005b      	lsls	r3, r3, #1
 801d674:	b29a      	uxth	r2, r3
 801d676:	687b      	ldr	r3, [r7, #4]
 801d678:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801d67a:	7dfb      	ldrb	r3, [r7, #23]
 801d67c:	1c5a      	adds	r2, r3, #1
 801d67e:	75fa      	strb	r2, [r7, #23]
 801d680:	461a      	mov	r2, r3
 801d682:	68bb      	ldr	r3, [r7, #8]
 801d684:	4413      	add	r3, r2
 801d686:	687a      	ldr	r2, [r7, #4]
 801d688:	7812      	ldrb	r2, [r2, #0]
 801d68a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 801d68c:	7dfb      	ldrb	r3, [r7, #23]
 801d68e:	1c5a      	adds	r2, r3, #1
 801d690:	75fa      	strb	r2, [r7, #23]
 801d692:	461a      	mov	r2, r3
 801d694:	68bb      	ldr	r3, [r7, #8]
 801d696:	4413      	add	r3, r2
 801d698:	2203      	movs	r2, #3
 801d69a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 801d69c:	e012      	b.n	801d6c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 801d69e:	68fb      	ldr	r3, [r7, #12]
 801d6a0:	1c5a      	adds	r2, r3, #1
 801d6a2:	60fa      	str	r2, [r7, #12]
 801d6a4:	7dfa      	ldrb	r2, [r7, #23]
 801d6a6:	1c51      	adds	r1, r2, #1
 801d6a8:	75f9      	strb	r1, [r7, #23]
 801d6aa:	4611      	mov	r1, r2
 801d6ac:	68ba      	ldr	r2, [r7, #8]
 801d6ae:	440a      	add	r2, r1
 801d6b0:	781b      	ldrb	r3, [r3, #0]
 801d6b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 801d6b4:	7dfb      	ldrb	r3, [r7, #23]
 801d6b6:	1c5a      	adds	r2, r3, #1
 801d6b8:	75fa      	strb	r2, [r7, #23]
 801d6ba:	461a      	mov	r2, r3
 801d6bc:	68bb      	ldr	r3, [r7, #8]
 801d6be:	4413      	add	r3, r2
 801d6c0:	2200      	movs	r2, #0
 801d6c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 801d6c4:	68fb      	ldr	r3, [r7, #12]
 801d6c6:	781b      	ldrb	r3, [r3, #0]
 801d6c8:	2b00      	cmp	r3, #0
 801d6ca:	d1e8      	bne.n	801d69e <USBD_GetString+0x4e>
    }
  }
}
 801d6cc:	bf00      	nop
 801d6ce:	3718      	adds	r7, #24
 801d6d0:	46bd      	mov	sp, r7
 801d6d2:	bd80      	pop	{r7, pc}

0801d6d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801d6d4:	b480      	push	{r7}
 801d6d6:	b085      	sub	sp, #20
 801d6d8:	af00      	add	r7, sp, #0
 801d6da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 801d6dc:	2300      	movs	r3, #0
 801d6de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 801d6e0:	e005      	b.n	801d6ee <USBD_GetLen+0x1a>
  {
    len++;
 801d6e2:	7bfb      	ldrb	r3, [r7, #15]
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 801d6e8:	687b      	ldr	r3, [r7, #4]
 801d6ea:	3301      	adds	r3, #1
 801d6ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 801d6ee:	687b      	ldr	r3, [r7, #4]
 801d6f0:	781b      	ldrb	r3, [r3, #0]
 801d6f2:	2b00      	cmp	r3, #0
 801d6f4:	d1f5      	bne.n	801d6e2 <USBD_GetLen+0xe>
  }

  return len;
 801d6f6:	7bfb      	ldrb	r3, [r7, #15]
}
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	3714      	adds	r7, #20
 801d6fc:	46bd      	mov	sp, r7
 801d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d702:	4770      	bx	lr

0801d704 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 801d704:	b580      	push	{r7, lr}
 801d706:	b084      	sub	sp, #16
 801d708:	af00      	add	r7, sp, #0
 801d70a:	60f8      	str	r0, [r7, #12]
 801d70c:	60b9      	str	r1, [r7, #8]
 801d70e:	4613      	mov	r3, r2
 801d710:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801d712:	68fb      	ldr	r3, [r7, #12]
 801d714:	2202      	movs	r2, #2
 801d716:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801d71a:	88fa      	ldrh	r2, [r7, #6]
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 801d720:	88fa      	ldrh	r2, [r7, #6]
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d726:	88fb      	ldrh	r3, [r7, #6]
 801d728:	68ba      	ldr	r2, [r7, #8]
 801d72a:	2100      	movs	r1, #0
 801d72c:	68f8      	ldr	r0, [r7, #12]
 801d72e:	f000 fd16 	bl	801e15e <USBD_LL_Transmit>

  return USBD_OK;
 801d732:	2300      	movs	r3, #0
}
 801d734:	4618      	mov	r0, r3
 801d736:	3710      	adds	r7, #16
 801d738:	46bd      	mov	sp, r7
 801d73a:	bd80      	pop	{r7, pc}

0801d73c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 801d73c:	b580      	push	{r7, lr}
 801d73e:	b084      	sub	sp, #16
 801d740:	af00      	add	r7, sp, #0
 801d742:	60f8      	str	r0, [r7, #12]
 801d744:	60b9      	str	r1, [r7, #8]
 801d746:	4613      	mov	r3, r2
 801d748:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801d74a:	88fb      	ldrh	r3, [r7, #6]
 801d74c:	68ba      	ldr	r2, [r7, #8]
 801d74e:	2100      	movs	r1, #0
 801d750:	68f8      	ldr	r0, [r7, #12]
 801d752:	f000 fd04 	bl	801e15e <USBD_LL_Transmit>

  return USBD_OK;
 801d756:	2300      	movs	r3, #0
}
 801d758:	4618      	mov	r0, r3
 801d75a:	3710      	adds	r7, #16
 801d75c:	46bd      	mov	sp, r7
 801d75e:	bd80      	pop	{r7, pc}

0801d760 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 801d760:	b580      	push	{r7, lr}
 801d762:	b084      	sub	sp, #16
 801d764:	af00      	add	r7, sp, #0
 801d766:	60f8      	str	r0, [r7, #12]
 801d768:	60b9      	str	r1, [r7, #8]
 801d76a:	4613      	mov	r3, r2
 801d76c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801d76e:	68fb      	ldr	r3, [r7, #12]
 801d770:	2203      	movs	r2, #3
 801d772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 801d776:	88fa      	ldrh	r2, [r7, #6]
 801d778:	68fb      	ldr	r3, [r7, #12]
 801d77a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 801d77e:	88fa      	ldrh	r2, [r7, #6]
 801d780:	68fb      	ldr	r3, [r7, #12]
 801d782:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d786:	88fb      	ldrh	r3, [r7, #6]
 801d788:	68ba      	ldr	r2, [r7, #8]
 801d78a:	2100      	movs	r1, #0
 801d78c:	68f8      	ldr	r0, [r7, #12]
 801d78e:	f000 fd09 	bl	801e1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d792:	2300      	movs	r3, #0
}
 801d794:	4618      	mov	r0, r3
 801d796:	3710      	adds	r7, #16
 801d798:	46bd      	mov	sp, r7
 801d79a:	bd80      	pop	{r7, pc}

0801d79c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801d79c:	b580      	push	{r7, lr}
 801d79e:	b084      	sub	sp, #16
 801d7a0:	af00      	add	r7, sp, #0
 801d7a2:	60f8      	str	r0, [r7, #12]
 801d7a4:	60b9      	str	r1, [r7, #8]
 801d7a6:	4613      	mov	r3, r2
 801d7a8:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801d7aa:	88fb      	ldrh	r3, [r7, #6]
 801d7ac:	68ba      	ldr	r2, [r7, #8]
 801d7ae:	2100      	movs	r1, #0
 801d7b0:	68f8      	ldr	r0, [r7, #12]
 801d7b2:	f000 fcf7 	bl	801e1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d7b6:	2300      	movs	r3, #0
}
 801d7b8:	4618      	mov	r0, r3
 801d7ba:	3710      	adds	r7, #16
 801d7bc:	46bd      	mov	sp, r7
 801d7be:	bd80      	pop	{r7, pc}

0801d7c0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b082      	sub	sp, #8
 801d7c4:	af00      	add	r7, sp, #0
 801d7c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801d7c8:	687b      	ldr	r3, [r7, #4]
 801d7ca:	2204      	movs	r2, #4
 801d7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801d7d0:	2300      	movs	r3, #0
 801d7d2:	2200      	movs	r2, #0
 801d7d4:	2100      	movs	r1, #0
 801d7d6:	6878      	ldr	r0, [r7, #4]
 801d7d8:	f000 fcc1 	bl	801e15e <USBD_LL_Transmit>

  return USBD_OK;
 801d7dc:	2300      	movs	r3, #0
}
 801d7de:	4618      	mov	r0, r3
 801d7e0:	3708      	adds	r7, #8
 801d7e2:	46bd      	mov	sp, r7
 801d7e4:	bd80      	pop	{r7, pc}

0801d7e6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801d7e6:	b580      	push	{r7, lr}
 801d7e8:	b082      	sub	sp, #8
 801d7ea:	af00      	add	r7, sp, #0
 801d7ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801d7ee:	687b      	ldr	r3, [r7, #4]
 801d7f0:	2205      	movs	r2, #5
 801d7f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801d7f6:	2300      	movs	r3, #0
 801d7f8:	2200      	movs	r2, #0
 801d7fa:	2100      	movs	r1, #0
 801d7fc:	6878      	ldr	r0, [r7, #4]
 801d7fe:	f000 fcd1 	bl	801e1a4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801d802:	2300      	movs	r3, #0
}
 801d804:	4618      	mov	r0, r3
 801d806:	3708      	adds	r7, #8
 801d808:	46bd      	mov	sp, r7
 801d80a:	bd80      	pop	{r7, pc}

0801d80c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801d80c:	b580      	push	{r7, lr}
 801d80e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801d810:	2200      	movs	r2, #0
 801d812:	4913      	ldr	r1, [pc, #76]	; (801d860 <MX_USB_DEVICE_Init+0x54>)
 801d814:	4813      	ldr	r0, [pc, #76]	; (801d864 <MX_USB_DEVICE_Init+0x58>)
 801d816:	f7fe ff29 	bl	801c66c <USBD_Init>
 801d81a:	4603      	mov	r3, r0
 801d81c:	2b00      	cmp	r3, #0
 801d81e:	d001      	beq.n	801d824 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801d820:	f7e4 fb80 	bl	8001f24 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801d824:	4910      	ldr	r1, [pc, #64]	; (801d868 <MX_USB_DEVICE_Init+0x5c>)
 801d826:	480f      	ldr	r0, [pc, #60]	; (801d864 <MX_USB_DEVICE_Init+0x58>)
 801d828:	f7fe ff4b 	bl	801c6c2 <USBD_RegisterClass>
 801d82c:	4603      	mov	r3, r0
 801d82e:	2b00      	cmp	r3, #0
 801d830:	d001      	beq.n	801d836 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801d832:	f7e4 fb77 	bl	8001f24 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801d836:	490d      	ldr	r1, [pc, #52]	; (801d86c <MX_USB_DEVICE_Init+0x60>)
 801d838:	480a      	ldr	r0, [pc, #40]	; (801d864 <MX_USB_DEVICE_Init+0x58>)
 801d83a:	f7fe fe79 	bl	801c530 <USBD_CDC_RegisterInterface>
 801d83e:	4603      	mov	r3, r0
 801d840:	2b00      	cmp	r3, #0
 801d842:	d001      	beq.n	801d848 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801d844:	f7e4 fb6e 	bl	8001f24 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801d848:	4806      	ldr	r0, [pc, #24]	; (801d864 <MX_USB_DEVICE_Init+0x58>)
 801d84a:	f7fe ff54 	bl	801c6f6 <USBD_Start>
 801d84e:	4603      	mov	r3, r0
 801d850:	2b00      	cmp	r3, #0
 801d852:	d001      	beq.n	801d858 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801d854:	f7e4 fb66 	bl	8001f24 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801d858:	f7f7 f8ca 	bl	80149f0 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801d85c:	bf00      	nop
 801d85e:	bd80      	pop	{r7, pc}
 801d860:	24000138 	.word	0x24000138
 801d864:	24000698 	.word	0x24000698
 801d868:	24000024 	.word	0x24000024
 801d86c:	24000128 	.word	0x24000128

0801d870 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801d874:	2200      	movs	r2, #0
 801d876:	4905      	ldr	r1, [pc, #20]	; (801d88c <CDC_Init_FS+0x1c>)
 801d878:	4805      	ldr	r0, [pc, #20]	; (801d890 <CDC_Init_FS+0x20>)
 801d87a:	f7fe fe70 	bl	801c55e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801d87e:	4905      	ldr	r1, [pc, #20]	; (801d894 <CDC_Init_FS+0x24>)
 801d880:	4803      	ldr	r0, [pc, #12]	; (801d890 <CDC_Init_FS+0x20>)
 801d882:	f7fe fe86 	bl	801c592 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801d886:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801d888:	4618      	mov	r0, r3
 801d88a:	bd80      	pop	{r7, pc}
 801d88c:	2400115c 	.word	0x2400115c
 801d890:	24000698 	.word	0x24000698
 801d894:	2400095c 	.word	0x2400095c

0801d898 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801d898:	b480      	push	{r7}
 801d89a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801d89c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801d89e:	4618      	mov	r0, r3
 801d8a0:	46bd      	mov	sp, r7
 801d8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d8a6:	4770      	bx	lr

0801d8a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801d8a8:	b480      	push	{r7}
 801d8aa:	b085      	sub	sp, #20
 801d8ac:	af00      	add	r7, sp, #0
 801d8ae:	4603      	mov	r3, r0
 801d8b0:	6039      	str	r1, [r7, #0]
 801d8b2:	71fb      	strb	r3, [r7, #7]
 801d8b4:	4613      	mov	r3, r2
 801d8b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 801d8b8:	f107 0308 	add.w	r3, r7, #8
 801d8bc:	2200      	movs	r2, #0
 801d8be:	601a      	str	r2, [r3, #0]
 801d8c0:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 801d8c4:	79fb      	ldrb	r3, [r7, #7]
 801d8c6:	2b23      	cmp	r3, #35	; 0x23
 801d8c8:	d87c      	bhi.n	801d9c4 <CDC_Control_FS+0x11c>
 801d8ca:	a201      	add	r2, pc, #4	; (adr r2, 801d8d0 <CDC_Control_FS+0x28>)
 801d8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d8d0:	0801d9c5 	.word	0x0801d9c5
 801d8d4:	0801d9c5 	.word	0x0801d9c5
 801d8d8:	0801d9c5 	.word	0x0801d9c5
 801d8dc:	0801d9c5 	.word	0x0801d9c5
 801d8e0:	0801d9c5 	.word	0x0801d9c5
 801d8e4:	0801d9c5 	.word	0x0801d9c5
 801d8e8:	0801d9c5 	.word	0x0801d9c5
 801d8ec:	0801d9c5 	.word	0x0801d9c5
 801d8f0:	0801d9c5 	.word	0x0801d9c5
 801d8f4:	0801d9c5 	.word	0x0801d9c5
 801d8f8:	0801d9c5 	.word	0x0801d9c5
 801d8fc:	0801d9c5 	.word	0x0801d9c5
 801d900:	0801d9c5 	.word	0x0801d9c5
 801d904:	0801d9c5 	.word	0x0801d9c5
 801d908:	0801d9c5 	.word	0x0801d9c5
 801d90c:	0801d9c5 	.word	0x0801d9c5
 801d910:	0801d9c5 	.word	0x0801d9c5
 801d914:	0801d9c5 	.word	0x0801d9c5
 801d918:	0801d9c5 	.word	0x0801d9c5
 801d91c:	0801d9c5 	.word	0x0801d9c5
 801d920:	0801d9c5 	.word	0x0801d9c5
 801d924:	0801d9c5 	.word	0x0801d9c5
 801d928:	0801d9c5 	.word	0x0801d9c5
 801d92c:	0801d9c5 	.word	0x0801d9c5
 801d930:	0801d9c5 	.word	0x0801d9c5
 801d934:	0801d9c5 	.word	0x0801d9c5
 801d938:	0801d9c5 	.word	0x0801d9c5
 801d93c:	0801d9c5 	.word	0x0801d9c5
 801d940:	0801d9c5 	.word	0x0801d9c5
 801d944:	0801d9c5 	.word	0x0801d9c5
 801d948:	0801d9c5 	.word	0x0801d9c5
 801d94c:	0801d9c5 	.word	0x0801d9c5
 801d950:	0801d961 	.word	0x0801d961
 801d954:	0801d98d 	.word	0x0801d98d
 801d958:	0801d9c5 	.word	0x0801d9c5
 801d95c:	0801d9c5 	.word	0x0801d9c5
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 801d960:	683b      	ldr	r3, [r7, #0]
 801d962:	781b      	ldrb	r3, [r3, #0]
 801d964:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 801d966:	683b      	ldr	r3, [r7, #0]
 801d968:	785b      	ldrb	r3, [r3, #1]
 801d96a:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 801d96c:	683b      	ldr	r3, [r7, #0]
 801d96e:	789b      	ldrb	r3, [r3, #2]
 801d970:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 801d972:	683b      	ldr	r3, [r7, #0]
 801d974:	78db      	ldrb	r3, [r3, #3]
 801d976:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 801d978:	683b      	ldr	r3, [r7, #0]
 801d97a:	791b      	ldrb	r3, [r3, #4]
 801d97c:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 801d97e:	683b      	ldr	r3, [r7, #0]
 801d980:	795b      	ldrb	r3, [r3, #5]
 801d982:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 801d984:	683b      	ldr	r3, [r7, #0]
 801d986:	799b      	ldrb	r3, [r3, #6]
 801d988:	73bb      	strb	r3, [r7, #14]
     	break;
 801d98a:	e01c      	b.n	801d9c6 <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 801d98c:	7a3a      	ldrb	r2, [r7, #8]
 801d98e:	683b      	ldr	r3, [r7, #0]
 801d990:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	3301      	adds	r3, #1
 801d996:	7a7a      	ldrb	r2, [r7, #9]
 801d998:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 801d99a:	683b      	ldr	r3, [r7, #0]
 801d99c:	3302      	adds	r3, #2
 801d99e:	7aba      	ldrb	r2, [r7, #10]
 801d9a0:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 801d9a2:	683b      	ldr	r3, [r7, #0]
 801d9a4:	3303      	adds	r3, #3
 801d9a6:	7afa      	ldrb	r2, [r7, #11]
 801d9a8:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 801d9aa:	683b      	ldr	r3, [r7, #0]
 801d9ac:	3304      	adds	r3, #4
 801d9ae:	7b3a      	ldrb	r2, [r7, #12]
 801d9b0:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 801d9b2:	683b      	ldr	r3, [r7, #0]
 801d9b4:	3305      	adds	r3, #5
 801d9b6:	7b7a      	ldrb	r2, [r7, #13]
 801d9b8:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 801d9ba:	683b      	ldr	r3, [r7, #0]
 801d9bc:	3306      	adds	r3, #6
 801d9be:	7bba      	ldrb	r2, [r7, #14]
 801d9c0:	701a      	strb	r2, [r3, #0]
     	break;
 801d9c2:	e000      	b.n	801d9c6 <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801d9c4:	bf00      	nop
  }

  return (USBD_OK);
 801d9c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801d9c8:	4618      	mov	r0, r3
 801d9ca:	3714      	adds	r7, #20
 801d9cc:	46bd      	mov	sp, r7
 801d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d9d2:	4770      	bx	lr

0801d9d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b082      	sub	sp, #8
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
 801d9dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801d9de:	6879      	ldr	r1, [r7, #4]
 801d9e0:	4805      	ldr	r0, [pc, #20]	; (801d9f8 <CDC_Receive_FS+0x24>)
 801d9e2:	f7fe fdd6 	bl	801c592 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801d9e6:	4804      	ldr	r0, [pc, #16]	; (801d9f8 <CDC_Receive_FS+0x24>)
 801d9e8:	f7fe fe16 	bl	801c618 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801d9ec:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801d9ee:	4618      	mov	r0, r3
 801d9f0:	3708      	adds	r7, #8
 801d9f2:	46bd      	mov	sp, r7
 801d9f4:	bd80      	pop	{r7, pc}
 801d9f6:	bf00      	nop
 801d9f8:	24000698 	.word	0x24000698

0801d9fc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 801d9fc:	b580      	push	{r7, lr}
 801d9fe:	b084      	sub	sp, #16
 801da00:	af00      	add	r7, sp, #0
 801da02:	6078      	str	r0, [r7, #4]
 801da04:	460b      	mov	r3, r1
 801da06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801da08:	2300      	movs	r3, #0
 801da0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801da0c:	4b0d      	ldr	r3, [pc, #52]	; (801da44 <CDC_Transmit_FS+0x48>)
 801da0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801da12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801da14:	68bb      	ldr	r3, [r7, #8]
 801da16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801da1a:	2b00      	cmp	r3, #0
 801da1c:	d001      	beq.n	801da22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801da1e:	2301      	movs	r3, #1
 801da20:	e00b      	b.n	801da3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801da22:	887b      	ldrh	r3, [r7, #2]
 801da24:	461a      	mov	r2, r3
 801da26:	6879      	ldr	r1, [r7, #4]
 801da28:	4806      	ldr	r0, [pc, #24]	; (801da44 <CDC_Transmit_FS+0x48>)
 801da2a:	f7fe fd98 	bl	801c55e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801da2e:	4805      	ldr	r0, [pc, #20]	; (801da44 <CDC_Transmit_FS+0x48>)
 801da30:	f7fe fdc3 	bl	801c5ba <USBD_CDC_TransmitPacket>
 801da34:	4603      	mov	r3, r0
 801da36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801da38:	7bfb      	ldrb	r3, [r7, #15]
}
 801da3a:	4618      	mov	r0, r3
 801da3c:	3710      	adds	r7, #16
 801da3e:	46bd      	mov	sp, r7
 801da40:	bd80      	pop	{r7, pc}
 801da42:	bf00      	nop
 801da44:	24000698 	.word	0x24000698

0801da48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da48:	b480      	push	{r7}
 801da4a:	b083      	sub	sp, #12
 801da4c:	af00      	add	r7, sp, #0
 801da4e:	4603      	mov	r3, r0
 801da50:	6039      	str	r1, [r7, #0]
 801da52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801da54:	683b      	ldr	r3, [r7, #0]
 801da56:	2212      	movs	r2, #18
 801da58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801da5a:	4b03      	ldr	r3, [pc, #12]	; (801da68 <USBD_FS_DeviceDescriptor+0x20>)
}
 801da5c:	4618      	mov	r0, r3
 801da5e:	370c      	adds	r7, #12
 801da60:	46bd      	mov	sp, r7
 801da62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da66:	4770      	bx	lr
 801da68:	24000154 	.word	0x24000154

0801da6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da6c:	b480      	push	{r7}
 801da6e:	b083      	sub	sp, #12
 801da70:	af00      	add	r7, sp, #0
 801da72:	4603      	mov	r3, r0
 801da74:	6039      	str	r1, [r7, #0]
 801da76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801da78:	683b      	ldr	r3, [r7, #0]
 801da7a:	2204      	movs	r2, #4
 801da7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801da7e:	4b03      	ldr	r3, [pc, #12]	; (801da8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801da80:	4618      	mov	r0, r3
 801da82:	370c      	adds	r7, #12
 801da84:	46bd      	mov	sp, r7
 801da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da8a:	4770      	bx	lr
 801da8c:	24000168 	.word	0x24000168

0801da90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801da90:	b580      	push	{r7, lr}
 801da92:	b082      	sub	sp, #8
 801da94:	af00      	add	r7, sp, #0
 801da96:	4603      	mov	r3, r0
 801da98:	6039      	str	r1, [r7, #0]
 801da9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801da9c:	79fb      	ldrb	r3, [r7, #7]
 801da9e:	2b00      	cmp	r3, #0
 801daa0:	d105      	bne.n	801daae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801daa2:	683a      	ldr	r2, [r7, #0]
 801daa4:	4907      	ldr	r1, [pc, #28]	; (801dac4 <USBD_FS_ProductStrDescriptor+0x34>)
 801daa6:	4808      	ldr	r0, [pc, #32]	; (801dac8 <USBD_FS_ProductStrDescriptor+0x38>)
 801daa8:	f7ff fdd2 	bl	801d650 <USBD_GetString>
 801daac:	e004      	b.n	801dab8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801daae:	683a      	ldr	r2, [r7, #0]
 801dab0:	4904      	ldr	r1, [pc, #16]	; (801dac4 <USBD_FS_ProductStrDescriptor+0x34>)
 801dab2:	4805      	ldr	r0, [pc, #20]	; (801dac8 <USBD_FS_ProductStrDescriptor+0x38>)
 801dab4:	f7ff fdcc 	bl	801d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 801dab8:	4b02      	ldr	r3, [pc, #8]	; (801dac4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801daba:	4618      	mov	r0, r3
 801dabc:	3708      	adds	r7, #8
 801dabe:	46bd      	mov	sp, r7
 801dac0:	bd80      	pop	{r7, pc}
 801dac2:	bf00      	nop
 801dac4:	2400195c 	.word	0x2400195c
 801dac8:	0801f4fc 	.word	0x0801f4fc

0801dacc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801dacc:	b580      	push	{r7, lr}
 801dace:	b082      	sub	sp, #8
 801dad0:	af00      	add	r7, sp, #0
 801dad2:	4603      	mov	r3, r0
 801dad4:	6039      	str	r1, [r7, #0]
 801dad6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801dad8:	683a      	ldr	r2, [r7, #0]
 801dada:	4904      	ldr	r1, [pc, #16]	; (801daec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801dadc:	4804      	ldr	r0, [pc, #16]	; (801daf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801dade:	f7ff fdb7 	bl	801d650 <USBD_GetString>
  return USBD_StrDesc;
 801dae2:	4b02      	ldr	r3, [pc, #8]	; (801daec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801dae4:	4618      	mov	r0, r3
 801dae6:	3708      	adds	r7, #8
 801dae8:	46bd      	mov	sp, r7
 801daea:	bd80      	pop	{r7, pc}
 801daec:	2400195c 	.word	0x2400195c
 801daf0:	0801f514 	.word	0x0801f514

0801daf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b082      	sub	sp, #8
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	4603      	mov	r3, r0
 801dafc:	6039      	str	r1, [r7, #0]
 801dafe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801db00:	683b      	ldr	r3, [r7, #0]
 801db02:	221a      	movs	r2, #26
 801db04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801db06:	f000 f843 	bl	801db90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801db0a:	4b02      	ldr	r3, [pc, #8]	; (801db14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801db0c:	4618      	mov	r0, r3
 801db0e:	3708      	adds	r7, #8
 801db10:	46bd      	mov	sp, r7
 801db12:	bd80      	pop	{r7, pc}
 801db14:	2400016c 	.word	0x2400016c

0801db18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db18:	b580      	push	{r7, lr}
 801db1a:	b082      	sub	sp, #8
 801db1c:	af00      	add	r7, sp, #0
 801db1e:	4603      	mov	r3, r0
 801db20:	6039      	str	r1, [r7, #0]
 801db22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801db24:	79fb      	ldrb	r3, [r7, #7]
 801db26:	2b00      	cmp	r3, #0
 801db28:	d105      	bne.n	801db36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801db2a:	683a      	ldr	r2, [r7, #0]
 801db2c:	4907      	ldr	r1, [pc, #28]	; (801db4c <USBD_FS_ConfigStrDescriptor+0x34>)
 801db2e:	4808      	ldr	r0, [pc, #32]	; (801db50 <USBD_FS_ConfigStrDescriptor+0x38>)
 801db30:	f7ff fd8e 	bl	801d650 <USBD_GetString>
 801db34:	e004      	b.n	801db40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801db36:	683a      	ldr	r2, [r7, #0]
 801db38:	4904      	ldr	r1, [pc, #16]	; (801db4c <USBD_FS_ConfigStrDescriptor+0x34>)
 801db3a:	4805      	ldr	r0, [pc, #20]	; (801db50 <USBD_FS_ConfigStrDescriptor+0x38>)
 801db3c:	f7ff fd88 	bl	801d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 801db40:	4b02      	ldr	r3, [pc, #8]	; (801db4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801db42:	4618      	mov	r0, r3
 801db44:	3708      	adds	r7, #8
 801db46:	46bd      	mov	sp, r7
 801db48:	bd80      	pop	{r7, pc}
 801db4a:	bf00      	nop
 801db4c:	2400195c 	.word	0x2400195c
 801db50:	0801f528 	.word	0x0801f528

0801db54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801db54:	b580      	push	{r7, lr}
 801db56:	b082      	sub	sp, #8
 801db58:	af00      	add	r7, sp, #0
 801db5a:	4603      	mov	r3, r0
 801db5c:	6039      	str	r1, [r7, #0]
 801db5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801db60:	79fb      	ldrb	r3, [r7, #7]
 801db62:	2b00      	cmp	r3, #0
 801db64:	d105      	bne.n	801db72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801db66:	683a      	ldr	r2, [r7, #0]
 801db68:	4907      	ldr	r1, [pc, #28]	; (801db88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801db6a:	4808      	ldr	r0, [pc, #32]	; (801db8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801db6c:	f7ff fd70 	bl	801d650 <USBD_GetString>
 801db70:	e004      	b.n	801db7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801db72:	683a      	ldr	r2, [r7, #0]
 801db74:	4904      	ldr	r1, [pc, #16]	; (801db88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801db76:	4805      	ldr	r0, [pc, #20]	; (801db8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801db78:	f7ff fd6a 	bl	801d650 <USBD_GetString>
  }
  return USBD_StrDesc;
 801db7c:	4b02      	ldr	r3, [pc, #8]	; (801db88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801db7e:	4618      	mov	r0, r3
 801db80:	3708      	adds	r7, #8
 801db82:	46bd      	mov	sp, r7
 801db84:	bd80      	pop	{r7, pc}
 801db86:	bf00      	nop
 801db88:	2400195c 	.word	0x2400195c
 801db8c:	0801f534 	.word	0x0801f534

0801db90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801db90:	b580      	push	{r7, lr}
 801db92:	b084      	sub	sp, #16
 801db94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801db96:	4b0f      	ldr	r3, [pc, #60]	; (801dbd4 <Get_SerialNum+0x44>)
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801db9c:	4b0e      	ldr	r3, [pc, #56]	; (801dbd8 <Get_SerialNum+0x48>)
 801db9e:	681b      	ldr	r3, [r3, #0]
 801dba0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801dba2:	4b0e      	ldr	r3, [pc, #56]	; (801dbdc <Get_SerialNum+0x4c>)
 801dba4:	681b      	ldr	r3, [r3, #0]
 801dba6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801dba8:	68fa      	ldr	r2, [r7, #12]
 801dbaa:	687b      	ldr	r3, [r7, #4]
 801dbac:	4413      	add	r3, r2
 801dbae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801dbb0:	68fb      	ldr	r3, [r7, #12]
 801dbb2:	2b00      	cmp	r3, #0
 801dbb4:	d009      	beq.n	801dbca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801dbb6:	2208      	movs	r2, #8
 801dbb8:	4909      	ldr	r1, [pc, #36]	; (801dbe0 <Get_SerialNum+0x50>)
 801dbba:	68f8      	ldr	r0, [r7, #12]
 801dbbc:	f000 f814 	bl	801dbe8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801dbc0:	2204      	movs	r2, #4
 801dbc2:	4908      	ldr	r1, [pc, #32]	; (801dbe4 <Get_SerialNum+0x54>)
 801dbc4:	68b8      	ldr	r0, [r7, #8]
 801dbc6:	f000 f80f 	bl	801dbe8 <IntToUnicode>
  }
}
 801dbca:	bf00      	nop
 801dbcc:	3710      	adds	r7, #16
 801dbce:	46bd      	mov	sp, r7
 801dbd0:	bd80      	pop	{r7, pc}
 801dbd2:	bf00      	nop
 801dbd4:	1ff1e800 	.word	0x1ff1e800
 801dbd8:	1ff1e804 	.word	0x1ff1e804
 801dbdc:	1ff1e808 	.word	0x1ff1e808
 801dbe0:	2400016e 	.word	0x2400016e
 801dbe4:	2400017e 	.word	0x2400017e

0801dbe8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801dbe8:	b480      	push	{r7}
 801dbea:	b087      	sub	sp, #28
 801dbec:	af00      	add	r7, sp, #0
 801dbee:	60f8      	str	r0, [r7, #12]
 801dbf0:	60b9      	str	r1, [r7, #8]
 801dbf2:	4613      	mov	r3, r2
 801dbf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801dbf6:	2300      	movs	r3, #0
 801dbf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801dbfa:	2300      	movs	r3, #0
 801dbfc:	75fb      	strb	r3, [r7, #23]
 801dbfe:	e027      	b.n	801dc50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801dc00:	68fb      	ldr	r3, [r7, #12]
 801dc02:	0f1b      	lsrs	r3, r3, #28
 801dc04:	2b09      	cmp	r3, #9
 801dc06:	d80b      	bhi.n	801dc20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801dc08:	68fb      	ldr	r3, [r7, #12]
 801dc0a:	0f1b      	lsrs	r3, r3, #28
 801dc0c:	b2da      	uxtb	r2, r3
 801dc0e:	7dfb      	ldrb	r3, [r7, #23]
 801dc10:	005b      	lsls	r3, r3, #1
 801dc12:	4619      	mov	r1, r3
 801dc14:	68bb      	ldr	r3, [r7, #8]
 801dc16:	440b      	add	r3, r1
 801dc18:	3230      	adds	r2, #48	; 0x30
 801dc1a:	b2d2      	uxtb	r2, r2
 801dc1c:	701a      	strb	r2, [r3, #0]
 801dc1e:	e00a      	b.n	801dc36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801dc20:	68fb      	ldr	r3, [r7, #12]
 801dc22:	0f1b      	lsrs	r3, r3, #28
 801dc24:	b2da      	uxtb	r2, r3
 801dc26:	7dfb      	ldrb	r3, [r7, #23]
 801dc28:	005b      	lsls	r3, r3, #1
 801dc2a:	4619      	mov	r1, r3
 801dc2c:	68bb      	ldr	r3, [r7, #8]
 801dc2e:	440b      	add	r3, r1
 801dc30:	3237      	adds	r2, #55	; 0x37
 801dc32:	b2d2      	uxtb	r2, r2
 801dc34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801dc36:	68fb      	ldr	r3, [r7, #12]
 801dc38:	011b      	lsls	r3, r3, #4
 801dc3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801dc3c:	7dfb      	ldrb	r3, [r7, #23]
 801dc3e:	005b      	lsls	r3, r3, #1
 801dc40:	3301      	adds	r3, #1
 801dc42:	68ba      	ldr	r2, [r7, #8]
 801dc44:	4413      	add	r3, r2
 801dc46:	2200      	movs	r2, #0
 801dc48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801dc4a:	7dfb      	ldrb	r3, [r7, #23]
 801dc4c:	3301      	adds	r3, #1
 801dc4e:	75fb      	strb	r3, [r7, #23]
 801dc50:	7dfa      	ldrb	r2, [r7, #23]
 801dc52:	79fb      	ldrb	r3, [r7, #7]
 801dc54:	429a      	cmp	r2, r3
 801dc56:	d3d3      	bcc.n	801dc00 <IntToUnicode+0x18>
  }
}
 801dc58:	bf00      	nop
 801dc5a:	371c      	adds	r7, #28
 801dc5c:	46bd      	mov	sp, r7
 801dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc62:	4770      	bx	lr

0801dc64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801dc64:	b580      	push	{r7, lr}
 801dc66:	b08a      	sub	sp, #40	; 0x28
 801dc68:	af00      	add	r7, sp, #0
 801dc6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801dc6c:	f107 0314 	add.w	r3, r7, #20
 801dc70:	2200      	movs	r2, #0
 801dc72:	601a      	str	r2, [r3, #0]
 801dc74:	605a      	str	r2, [r3, #4]
 801dc76:	609a      	str	r2, [r3, #8]
 801dc78:	60da      	str	r2, [r3, #12]
 801dc7a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	681b      	ldr	r3, [r3, #0]
 801dc80:	4a1e      	ldr	r2, [pc, #120]	; (801dcfc <HAL_PCD_MspInit+0x98>)
 801dc82:	4293      	cmp	r3, r2
 801dc84:	d136      	bne.n	801dcf4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801dc86:	4b1e      	ldr	r3, [pc, #120]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dc88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dc8c:	4a1c      	ldr	r2, [pc, #112]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dc8e:	f043 0301 	orr.w	r3, r3, #1
 801dc92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801dc96:	4b1a      	ldr	r3, [pc, #104]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dc98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801dc9c:	f003 0301 	and.w	r3, r3, #1
 801dca0:	613b      	str	r3, [r7, #16]
 801dca2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801dca4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801dca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801dcaa:	2302      	movs	r3, #2
 801dcac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801dcae:	2300      	movs	r3, #0
 801dcb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801dcb2:	2300      	movs	r3, #0
 801dcb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801dcb6:	230a      	movs	r3, #10
 801dcb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801dcba:	f107 0314 	add.w	r3, r7, #20
 801dcbe:	4619      	mov	r1, r3
 801dcc0:	4810      	ldr	r0, [pc, #64]	; (801dd04 <HAL_PCD_MspInit+0xa0>)
 801dcc2:	f7f5 fa85 	bl	80131d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801dcc6:	4b0e      	ldr	r3, [pc, #56]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dcc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801dccc:	4a0c      	ldr	r2, [pc, #48]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dcce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801dcd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801dcd6:	4b0a      	ldr	r3, [pc, #40]	; (801dd00 <HAL_PCD_MspInit+0x9c>)
 801dcd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801dcdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801dce0:	60fb      	str	r3, [r7, #12]
 801dce2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801dce4:	2200      	movs	r2, #0
 801dce6:	2100      	movs	r1, #0
 801dce8:	2065      	movs	r0, #101	; 0x65
 801dcea:	f7f4 fff8 	bl	8012cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801dcee:	2065      	movs	r0, #101	; 0x65
 801dcf0:	f7f5 f80f 	bl	8012d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801dcf4:	bf00      	nop
 801dcf6:	3728      	adds	r7, #40	; 0x28
 801dcf8:	46bd      	mov	sp, r7
 801dcfa:	bd80      	pop	{r7, pc}
 801dcfc:	40080000 	.word	0x40080000
 801dd00:	58024400 	.word	0x58024400
 801dd04:	58020000 	.word	0x58020000

0801dd08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd08:	b580      	push	{r7, lr}
 801dd0a:	b082      	sub	sp, #8
 801dd0c:	af00      	add	r7, sp, #0
 801dd0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801dd10:	687b      	ldr	r3, [r7, #4]
 801dd12:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801dd16:	687b      	ldr	r3, [r7, #4]
 801dd18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801dd1c:	4619      	mov	r1, r3
 801dd1e:	4610      	mov	r0, r2
 801dd20:	f7fe fd32 	bl	801c788 <USBD_LL_SetupStage>
}
 801dd24:	bf00      	nop
 801dd26:	3708      	adds	r7, #8
 801dd28:	46bd      	mov	sp, r7
 801dd2a:	bd80      	pop	{r7, pc}

0801dd2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd2c:	b580      	push	{r7, lr}
 801dd2e:	b082      	sub	sp, #8
 801dd30:	af00      	add	r7, sp, #0
 801dd32:	6078      	str	r0, [r7, #4]
 801dd34:	460b      	mov	r3, r1
 801dd36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801dd38:	687b      	ldr	r3, [r7, #4]
 801dd3a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801dd3e:	78fa      	ldrb	r2, [r7, #3]
 801dd40:	6879      	ldr	r1, [r7, #4]
 801dd42:	4613      	mov	r3, r2
 801dd44:	00db      	lsls	r3, r3, #3
 801dd46:	1a9b      	subs	r3, r3, r2
 801dd48:	009b      	lsls	r3, r3, #2
 801dd4a:	440b      	add	r3, r1
 801dd4c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801dd50:	681a      	ldr	r2, [r3, #0]
 801dd52:	78fb      	ldrb	r3, [r7, #3]
 801dd54:	4619      	mov	r1, r3
 801dd56:	f7fe fd62 	bl	801c81e <USBD_LL_DataOutStage>
}
 801dd5a:	bf00      	nop
 801dd5c:	3708      	adds	r7, #8
 801dd5e:	46bd      	mov	sp, r7
 801dd60:	bd80      	pop	{r7, pc}

0801dd62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd62:	b580      	push	{r7, lr}
 801dd64:	b082      	sub	sp, #8
 801dd66:	af00      	add	r7, sp, #0
 801dd68:	6078      	str	r0, [r7, #4]
 801dd6a:	460b      	mov	r3, r1
 801dd6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801dd74:	78fa      	ldrb	r2, [r7, #3]
 801dd76:	6879      	ldr	r1, [r7, #4]
 801dd78:	4613      	mov	r3, r2
 801dd7a:	00db      	lsls	r3, r3, #3
 801dd7c:	1a9b      	subs	r3, r3, r2
 801dd7e:	009b      	lsls	r3, r3, #2
 801dd80:	440b      	add	r3, r1
 801dd82:	3348      	adds	r3, #72	; 0x48
 801dd84:	681a      	ldr	r2, [r3, #0]
 801dd86:	78fb      	ldrb	r3, [r7, #3]
 801dd88:	4619      	mov	r1, r3
 801dd8a:	f7fe fdb9 	bl	801c900 <USBD_LL_DataInStage>
}
 801dd8e:	bf00      	nop
 801dd90:	3708      	adds	r7, #8
 801dd92:	46bd      	mov	sp, r7
 801dd94:	bd80      	pop	{r7, pc}

0801dd96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801dd96:	b580      	push	{r7, lr}
 801dd98:	b082      	sub	sp, #8
 801dd9a:	af00      	add	r7, sp, #0
 801dd9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801dd9e:	687b      	ldr	r3, [r7, #4]
 801dda0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dda4:	4618      	mov	r0, r3
 801dda6:	f7fe fecc 	bl	801cb42 <USBD_LL_SOF>
}
 801ddaa:	bf00      	nop
 801ddac:	3708      	adds	r7, #8
 801ddae:	46bd      	mov	sp, r7
 801ddb0:	bd80      	pop	{r7, pc}

0801ddb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801ddb2:	b580      	push	{r7, lr}
 801ddb4:	b084      	sub	sp, #16
 801ddb6:	af00      	add	r7, sp, #0
 801ddb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801ddba:	2301      	movs	r3, #1
 801ddbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	68db      	ldr	r3, [r3, #12]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d102      	bne.n	801ddcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801ddc6:	2300      	movs	r3, #0
 801ddc8:	73fb      	strb	r3, [r7, #15]
 801ddca:	e008      	b.n	801ddde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801ddcc:	687b      	ldr	r3, [r7, #4]
 801ddce:	68db      	ldr	r3, [r3, #12]
 801ddd0:	2b02      	cmp	r3, #2
 801ddd2:	d102      	bne.n	801ddda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801ddd4:	2301      	movs	r3, #1
 801ddd6:	73fb      	strb	r3, [r7, #15]
 801ddd8:	e001      	b.n	801ddde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801ddda:	f7e4 f8a3 	bl	8001f24 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801ddde:	687b      	ldr	r3, [r7, #4]
 801dde0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dde4:	7bfa      	ldrb	r2, [r7, #15]
 801dde6:	4611      	mov	r1, r2
 801dde8:	4618      	mov	r0, r3
 801ddea:	f7fe fe6f 	bl	801cacc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801ddf4:	4618      	mov	r0, r3
 801ddf6:	f7fe fe28 	bl	801ca4a <USBD_LL_Reset>
}
 801ddfa:	bf00      	nop
 801ddfc:	3710      	adds	r7, #16
 801ddfe:	46bd      	mov	sp, r7
 801de00:	bd80      	pop	{r7, pc}
	...

0801de04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de04:	b580      	push	{r7, lr}
 801de06:	b082      	sub	sp, #8
 801de08:	af00      	add	r7, sp, #0
 801de0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801de0c:	687b      	ldr	r3, [r7, #4]
 801de0e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801de12:	4618      	mov	r0, r3
 801de14:	f7fe fe6a 	bl	801caec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801de18:	687b      	ldr	r3, [r7, #4]
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	687a      	ldr	r2, [r7, #4]
 801de24:	6812      	ldr	r2, [r2, #0]
 801de26:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801de2a:	f043 0301 	orr.w	r3, r3, #1
 801de2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801de30:	687b      	ldr	r3, [r7, #4]
 801de32:	6a1b      	ldr	r3, [r3, #32]
 801de34:	2b00      	cmp	r3, #0
 801de36:	d005      	beq.n	801de44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801de38:	4b04      	ldr	r3, [pc, #16]	; (801de4c <HAL_PCD_SuspendCallback+0x48>)
 801de3a:	691b      	ldr	r3, [r3, #16]
 801de3c:	4a03      	ldr	r2, [pc, #12]	; (801de4c <HAL_PCD_SuspendCallback+0x48>)
 801de3e:	f043 0306 	orr.w	r3, r3, #6
 801de42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801de44:	bf00      	nop
 801de46:	3708      	adds	r7, #8
 801de48:	46bd      	mov	sp, r7
 801de4a:	bd80      	pop	{r7, pc}
 801de4c:	e000ed00 	.word	0xe000ed00

0801de50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de50:	b580      	push	{r7, lr}
 801de52:	b082      	sub	sp, #8
 801de54:	af00      	add	r7, sp, #0
 801de56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801de58:	687b      	ldr	r3, [r7, #4]
 801de5a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801de5e:	4618      	mov	r0, r3
 801de60:	f7fe fe59 	bl	801cb16 <USBD_LL_Resume>
}
 801de64:	bf00      	nop
 801de66:	3708      	adds	r7, #8
 801de68:	46bd      	mov	sp, r7
 801de6a:	bd80      	pop	{r7, pc}

0801de6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de6c:	b580      	push	{r7, lr}
 801de6e:	b082      	sub	sp, #8
 801de70:	af00      	add	r7, sp, #0
 801de72:	6078      	str	r0, [r7, #4]
 801de74:	460b      	mov	r3, r1
 801de76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801de78:	687b      	ldr	r3, [r7, #4]
 801de7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801de7e:	78fa      	ldrb	r2, [r7, #3]
 801de80:	4611      	mov	r1, r2
 801de82:	4618      	mov	r0, r3
 801de84:	f7fe fe84 	bl	801cb90 <USBD_LL_IsoOUTIncomplete>
}
 801de88:	bf00      	nop
 801de8a:	3708      	adds	r7, #8
 801de8c:	46bd      	mov	sp, r7
 801de8e:	bd80      	pop	{r7, pc}

0801de90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801de90:	b580      	push	{r7, lr}
 801de92:	b082      	sub	sp, #8
 801de94:	af00      	add	r7, sp, #0
 801de96:	6078      	str	r0, [r7, #4]
 801de98:	460b      	mov	r3, r1
 801de9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801de9c:	687b      	ldr	r3, [r7, #4]
 801de9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dea2:	78fa      	ldrb	r2, [r7, #3]
 801dea4:	4611      	mov	r1, r2
 801dea6:	4618      	mov	r0, r3
 801dea8:	f7fe fe65 	bl	801cb76 <USBD_LL_IsoINIncomplete>
}
 801deac:	bf00      	nop
 801deae:	3708      	adds	r7, #8
 801deb0:	46bd      	mov	sp, r7
 801deb2:	bd80      	pop	{r7, pc}

0801deb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801deb4:	b580      	push	{r7, lr}
 801deb6:	b082      	sub	sp, #8
 801deb8:	af00      	add	r7, sp, #0
 801deba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801debc:	687b      	ldr	r3, [r7, #4]
 801debe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dec2:	4618      	mov	r0, r3
 801dec4:	f7fe fe71 	bl	801cbaa <USBD_LL_DevConnected>
}
 801dec8:	bf00      	nop
 801deca:	3708      	adds	r7, #8
 801decc:	46bd      	mov	sp, r7
 801dece:	bd80      	pop	{r7, pc}

0801ded0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801ded0:	b580      	push	{r7, lr}
 801ded2:	b082      	sub	sp, #8
 801ded4:	af00      	add	r7, sp, #0
 801ded6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801ded8:	687b      	ldr	r3, [r7, #4]
 801deda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801dede:	4618      	mov	r0, r3
 801dee0:	f7fe fe6e 	bl	801cbc0 <USBD_LL_DevDisconnected>
}
 801dee4:	bf00      	nop
 801dee6:	3708      	adds	r7, #8
 801dee8:	46bd      	mov	sp, r7
 801deea:	bd80      	pop	{r7, pc}

0801deec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801deec:	b580      	push	{r7, lr}
 801deee:	b082      	sub	sp, #8
 801def0:	af00      	add	r7, sp, #0
 801def2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801def4:	687b      	ldr	r3, [r7, #4]
 801def6:	781b      	ldrb	r3, [r3, #0]
 801def8:	2b00      	cmp	r3, #0
 801defa:	d13e      	bne.n	801df7a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801defc:	4a21      	ldr	r2, [pc, #132]	; (801df84 <USBD_LL_Init+0x98>)
 801defe:	687b      	ldr	r3, [r7, #4]
 801df00:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	4a1f      	ldr	r2, [pc, #124]	; (801df84 <USBD_LL_Init+0x98>)
 801df08:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801df0c:	4b1d      	ldr	r3, [pc, #116]	; (801df84 <USBD_LL_Init+0x98>)
 801df0e:	4a1e      	ldr	r2, [pc, #120]	; (801df88 <USBD_LL_Init+0x9c>)
 801df10:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801df12:	4b1c      	ldr	r3, [pc, #112]	; (801df84 <USBD_LL_Init+0x98>)
 801df14:	2209      	movs	r2, #9
 801df16:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801df18:	4b1a      	ldr	r3, [pc, #104]	; (801df84 <USBD_LL_Init+0x98>)
 801df1a:	2202      	movs	r2, #2
 801df1c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801df1e:	4b19      	ldr	r3, [pc, #100]	; (801df84 <USBD_LL_Init+0x98>)
 801df20:	2200      	movs	r2, #0
 801df22:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801df24:	4b17      	ldr	r3, [pc, #92]	; (801df84 <USBD_LL_Init+0x98>)
 801df26:	2202      	movs	r2, #2
 801df28:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801df2a:	4b16      	ldr	r3, [pc, #88]	; (801df84 <USBD_LL_Init+0x98>)
 801df2c:	2201      	movs	r2, #1
 801df2e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801df30:	4b14      	ldr	r3, [pc, #80]	; (801df84 <USBD_LL_Init+0x98>)
 801df32:	2200      	movs	r2, #0
 801df34:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801df36:	4b13      	ldr	r3, [pc, #76]	; (801df84 <USBD_LL_Init+0x98>)
 801df38:	2200      	movs	r2, #0
 801df3a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 801df3c:	4b11      	ldr	r3, [pc, #68]	; (801df84 <USBD_LL_Init+0x98>)
 801df3e:	2200      	movs	r2, #0
 801df40:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801df42:	4b10      	ldr	r3, [pc, #64]	; (801df84 <USBD_LL_Init+0x98>)
 801df44:	2200      	movs	r2, #0
 801df46:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801df48:	4b0e      	ldr	r3, [pc, #56]	; (801df84 <USBD_LL_Init+0x98>)
 801df4a:	2200      	movs	r2, #0
 801df4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801df4e:	480d      	ldr	r0, [pc, #52]	; (801df84 <USBD_LL_Init+0x98>)
 801df50:	f7f5 fb39 	bl	80135c6 <HAL_PCD_Init>
 801df54:	4603      	mov	r3, r0
 801df56:	2b00      	cmp	r3, #0
 801df58:	d001      	beq.n	801df5e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801df5a:	f7e3 ffe3 	bl	8001f24 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801df5e:	2180      	movs	r1, #128	; 0x80
 801df60:	4808      	ldr	r0, [pc, #32]	; (801df84 <USBD_LL_Init+0x98>)
 801df62:	f7f6 fcca 	bl	80148fa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801df66:	2240      	movs	r2, #64	; 0x40
 801df68:	2100      	movs	r1, #0
 801df6a:	4806      	ldr	r0, [pc, #24]	; (801df84 <USBD_LL_Init+0x98>)
 801df6c:	f7f6 fc7e 	bl	801486c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801df70:	2280      	movs	r2, #128	; 0x80
 801df72:	2101      	movs	r1, #1
 801df74:	4803      	ldr	r0, [pc, #12]	; (801df84 <USBD_LL_Init+0x98>)
 801df76:	f7f6 fc79 	bl	801486c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801df7a:	2300      	movs	r3, #0
}
 801df7c:	4618      	mov	r0, r3
 801df7e:	3708      	adds	r7, #8
 801df80:	46bd      	mov	sp, r7
 801df82:	bd80      	pop	{r7, pc}
 801df84:	24001b5c 	.word	0x24001b5c
 801df88:	40080000 	.word	0x40080000

0801df8c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801df8c:	b580      	push	{r7, lr}
 801df8e:	b084      	sub	sp, #16
 801df90:	af00      	add	r7, sp, #0
 801df92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801df94:	2300      	movs	r3, #0
 801df96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801df98:	2300      	movs	r3, #0
 801df9a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	f7f5 fc33 	bl	801380e <HAL_PCD_Start>
 801dfa8:	4603      	mov	r3, r0
 801dfaa:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801dfac:	7bfb      	ldrb	r3, [r7, #15]
 801dfae:	4618      	mov	r0, r3
 801dfb0:	f000 f92e 	bl	801e210 <USBD_Get_USB_Status>
 801dfb4:	4603      	mov	r3, r0
 801dfb6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801dfb8:	7bbb      	ldrb	r3, [r7, #14]
}
 801dfba:	4618      	mov	r0, r3
 801dfbc:	3710      	adds	r7, #16
 801dfbe:	46bd      	mov	sp, r7
 801dfc0:	bd80      	pop	{r7, pc}

0801dfc2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801dfc2:	b580      	push	{r7, lr}
 801dfc4:	b084      	sub	sp, #16
 801dfc6:	af00      	add	r7, sp, #0
 801dfc8:	6078      	str	r0, [r7, #4]
 801dfca:	4608      	mov	r0, r1
 801dfcc:	4611      	mov	r1, r2
 801dfce:	461a      	mov	r2, r3
 801dfd0:	4603      	mov	r3, r0
 801dfd2:	70fb      	strb	r3, [r7, #3]
 801dfd4:	460b      	mov	r3, r1
 801dfd6:	70bb      	strb	r3, [r7, #2]
 801dfd8:	4613      	mov	r3, r2
 801dfda:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801dfdc:	2300      	movs	r3, #0
 801dfde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801dfe0:	2300      	movs	r3, #0
 801dfe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801dfea:	78bb      	ldrb	r3, [r7, #2]
 801dfec:	883a      	ldrh	r2, [r7, #0]
 801dfee:	78f9      	ldrb	r1, [r7, #3]
 801dff0:	f7f6 f844 	bl	801407c <HAL_PCD_EP_Open>
 801dff4:	4603      	mov	r3, r0
 801dff6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801dff8:	7bfb      	ldrb	r3, [r7, #15]
 801dffa:	4618      	mov	r0, r3
 801dffc:	f000 f908 	bl	801e210 <USBD_Get_USB_Status>
 801e000:	4603      	mov	r3, r0
 801e002:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801e004:	7bbb      	ldrb	r3, [r7, #14]
}
 801e006:	4618      	mov	r0, r3
 801e008:	3710      	adds	r7, #16
 801e00a:	46bd      	mov	sp, r7
 801e00c:	bd80      	pop	{r7, pc}

0801e00e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e00e:	b580      	push	{r7, lr}
 801e010:	b084      	sub	sp, #16
 801e012:	af00      	add	r7, sp, #0
 801e014:	6078      	str	r0, [r7, #4]
 801e016:	460b      	mov	r3, r1
 801e018:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e01a:	2300      	movs	r3, #0
 801e01c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e01e:	2300      	movs	r3, #0
 801e020:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e028:	78fa      	ldrb	r2, [r7, #3]
 801e02a:	4611      	mov	r1, r2
 801e02c:	4618      	mov	r0, r3
 801e02e:	f7f6 f88d 	bl	801414c <HAL_PCD_EP_Close>
 801e032:	4603      	mov	r3, r0
 801e034:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801e036:	7bfb      	ldrb	r3, [r7, #15]
 801e038:	4618      	mov	r0, r3
 801e03a:	f000 f8e9 	bl	801e210 <USBD_Get_USB_Status>
 801e03e:	4603      	mov	r3, r0
 801e040:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801e042:	7bbb      	ldrb	r3, [r7, #14]
}
 801e044:	4618      	mov	r0, r3
 801e046:	3710      	adds	r7, #16
 801e048:	46bd      	mov	sp, r7
 801e04a:	bd80      	pop	{r7, pc}

0801e04c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e04c:	b580      	push	{r7, lr}
 801e04e:	b084      	sub	sp, #16
 801e050:	af00      	add	r7, sp, #0
 801e052:	6078      	str	r0, [r7, #4]
 801e054:	460b      	mov	r3, r1
 801e056:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e058:	2300      	movs	r3, #0
 801e05a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e05c:	2300      	movs	r3, #0
 801e05e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801e060:	687b      	ldr	r3, [r7, #4]
 801e062:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e066:	78fa      	ldrb	r2, [r7, #3]
 801e068:	4611      	mov	r1, r2
 801e06a:	4618      	mov	r0, r3
 801e06c:	f7f6 f965 	bl	801433a <HAL_PCD_EP_SetStall>
 801e070:	4603      	mov	r3, r0
 801e072:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801e074:	7bfb      	ldrb	r3, [r7, #15]
 801e076:	4618      	mov	r0, r3
 801e078:	f000 f8ca 	bl	801e210 <USBD_Get_USB_Status>
 801e07c:	4603      	mov	r3, r0
 801e07e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e080:	7bbb      	ldrb	r3, [r7, #14]
}
 801e082:	4618      	mov	r0, r3
 801e084:	3710      	adds	r7, #16
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}

0801e08a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e08a:	b580      	push	{r7, lr}
 801e08c:	b084      	sub	sp, #16
 801e08e:	af00      	add	r7, sp, #0
 801e090:	6078      	str	r0, [r7, #4]
 801e092:	460b      	mov	r3, r1
 801e094:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e096:	2300      	movs	r3, #0
 801e098:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e09a:	2300      	movs	r3, #0
 801e09c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801e09e:	687b      	ldr	r3, [r7, #4]
 801e0a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e0a4:	78fa      	ldrb	r2, [r7, #3]
 801e0a6:	4611      	mov	r1, r2
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f7f6 f9aa 	bl	8014402 <HAL_PCD_EP_ClrStall>
 801e0ae:	4603      	mov	r3, r0
 801e0b0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801e0b2:	7bfb      	ldrb	r3, [r7, #15]
 801e0b4:	4618      	mov	r0, r3
 801e0b6:	f000 f8ab 	bl	801e210 <USBD_Get_USB_Status>
 801e0ba:	4603      	mov	r3, r0
 801e0bc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801e0be:	7bbb      	ldrb	r3, [r7, #14]
}
 801e0c0:	4618      	mov	r0, r3
 801e0c2:	3710      	adds	r7, #16
 801e0c4:	46bd      	mov	sp, r7
 801e0c6:	bd80      	pop	{r7, pc}

0801e0c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e0c8:	b480      	push	{r7}
 801e0ca:	b085      	sub	sp, #20
 801e0cc:	af00      	add	r7, sp, #0
 801e0ce:	6078      	str	r0, [r7, #4]
 801e0d0:	460b      	mov	r3, r1
 801e0d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801e0d4:	687b      	ldr	r3, [r7, #4]
 801e0d6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e0da:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801e0dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	da0b      	bge.n	801e0fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801e0e4:	78fb      	ldrb	r3, [r7, #3]
 801e0e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e0ea:	68f9      	ldr	r1, [r7, #12]
 801e0ec:	4613      	mov	r3, r2
 801e0ee:	00db      	lsls	r3, r3, #3
 801e0f0:	1a9b      	subs	r3, r3, r2
 801e0f2:	009b      	lsls	r3, r3, #2
 801e0f4:	440b      	add	r3, r1
 801e0f6:	333e      	adds	r3, #62	; 0x3e
 801e0f8:	781b      	ldrb	r3, [r3, #0]
 801e0fa:	e00b      	b.n	801e114 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801e0fc:	78fb      	ldrb	r3, [r7, #3]
 801e0fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801e102:	68f9      	ldr	r1, [r7, #12]
 801e104:	4613      	mov	r3, r2
 801e106:	00db      	lsls	r3, r3, #3
 801e108:	1a9b      	subs	r3, r3, r2
 801e10a:	009b      	lsls	r3, r3, #2
 801e10c:	440b      	add	r3, r1
 801e10e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801e112:	781b      	ldrb	r3, [r3, #0]
  }
}
 801e114:	4618      	mov	r0, r3
 801e116:	3714      	adds	r7, #20
 801e118:	46bd      	mov	sp, r7
 801e11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e11e:	4770      	bx	lr

0801e120 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801e120:	b580      	push	{r7, lr}
 801e122:	b084      	sub	sp, #16
 801e124:	af00      	add	r7, sp, #0
 801e126:	6078      	str	r0, [r7, #4]
 801e128:	460b      	mov	r3, r1
 801e12a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e12c:	2300      	movs	r3, #0
 801e12e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e130:	2300      	movs	r3, #0
 801e132:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801e134:	687b      	ldr	r3, [r7, #4]
 801e136:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e13a:	78fa      	ldrb	r2, [r7, #3]
 801e13c:	4611      	mov	r1, r2
 801e13e:	4618      	mov	r0, r3
 801e140:	f7f5 ff77 	bl	8014032 <HAL_PCD_SetAddress>
 801e144:	4603      	mov	r3, r0
 801e146:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801e148:	7bfb      	ldrb	r3, [r7, #15]
 801e14a:	4618      	mov	r0, r3
 801e14c:	f000 f860 	bl	801e210 <USBD_Get_USB_Status>
 801e150:	4603      	mov	r3, r0
 801e152:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801e154:	7bbb      	ldrb	r3, [r7, #14]
}
 801e156:	4618      	mov	r0, r3
 801e158:	3710      	adds	r7, #16
 801e15a:	46bd      	mov	sp, r7
 801e15c:	bd80      	pop	{r7, pc}

0801e15e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e15e:	b580      	push	{r7, lr}
 801e160:	b086      	sub	sp, #24
 801e162:	af00      	add	r7, sp, #0
 801e164:	60f8      	str	r0, [r7, #12]
 801e166:	607a      	str	r2, [r7, #4]
 801e168:	461a      	mov	r2, r3
 801e16a:	460b      	mov	r3, r1
 801e16c:	72fb      	strb	r3, [r7, #11]
 801e16e:	4613      	mov	r3, r2
 801e170:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e172:	2300      	movs	r3, #0
 801e174:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e176:	2300      	movs	r3, #0
 801e178:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801e17a:	68fb      	ldr	r3, [r7, #12]
 801e17c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e180:	893b      	ldrh	r3, [r7, #8]
 801e182:	7af9      	ldrb	r1, [r7, #11]
 801e184:	687a      	ldr	r2, [r7, #4]
 801e186:	f7f6 f88e 	bl	80142a6 <HAL_PCD_EP_Transmit>
 801e18a:	4603      	mov	r3, r0
 801e18c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801e18e:	7dfb      	ldrb	r3, [r7, #23]
 801e190:	4618      	mov	r0, r3
 801e192:	f000 f83d 	bl	801e210 <USBD_Get_USB_Status>
 801e196:	4603      	mov	r3, r0
 801e198:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801e19a:	7dbb      	ldrb	r3, [r7, #22]
}
 801e19c:	4618      	mov	r0, r3
 801e19e:	3718      	adds	r7, #24
 801e1a0:	46bd      	mov	sp, r7
 801e1a2:	bd80      	pop	{r7, pc}

0801e1a4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b086      	sub	sp, #24
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	60f8      	str	r0, [r7, #12]
 801e1ac:	607a      	str	r2, [r7, #4]
 801e1ae:	461a      	mov	r2, r3
 801e1b0:	460b      	mov	r3, r1
 801e1b2:	72fb      	strb	r3, [r7, #11]
 801e1b4:	4613      	mov	r3, r2
 801e1b6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801e1b8:	2300      	movs	r3, #0
 801e1ba:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e1bc:	2300      	movs	r3, #0
 801e1be:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 801e1c6:	893b      	ldrh	r3, [r7, #8]
 801e1c8:	7af9      	ldrb	r1, [r7, #11]
 801e1ca:	687a      	ldr	r2, [r7, #4]
 801e1cc:	f7f6 f808 	bl	80141e0 <HAL_PCD_EP_Receive>
 801e1d0:	4603      	mov	r3, r0
 801e1d2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801e1d4:	7dfb      	ldrb	r3, [r7, #23]
 801e1d6:	4618      	mov	r0, r3
 801e1d8:	f000 f81a 	bl	801e210 <USBD_Get_USB_Status>
 801e1dc:	4603      	mov	r3, r0
 801e1de:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801e1e0:	7dbb      	ldrb	r3, [r7, #22]
}
 801e1e2:	4618      	mov	r0, r3
 801e1e4:	3718      	adds	r7, #24
 801e1e6:	46bd      	mov	sp, r7
 801e1e8:	bd80      	pop	{r7, pc}

0801e1ea <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801e1ea:	b580      	push	{r7, lr}
 801e1ec:	b082      	sub	sp, #8
 801e1ee:	af00      	add	r7, sp, #0
 801e1f0:	6078      	str	r0, [r7, #4]
 801e1f2:	460b      	mov	r3, r1
 801e1f4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801e1f6:	687b      	ldr	r3, [r7, #4]
 801e1f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801e1fc:	78fa      	ldrb	r2, [r7, #3]
 801e1fe:	4611      	mov	r1, r2
 801e200:	4618      	mov	r0, r3
 801e202:	f7f6 f838 	bl	8014276 <HAL_PCD_EP_GetRxCount>
 801e206:	4603      	mov	r3, r0
}
 801e208:	4618      	mov	r0, r3
 801e20a:	3708      	adds	r7, #8
 801e20c:	46bd      	mov	sp, r7
 801e20e:	bd80      	pop	{r7, pc}

0801e210 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801e210:	b480      	push	{r7}
 801e212:	b085      	sub	sp, #20
 801e214:	af00      	add	r7, sp, #0
 801e216:	4603      	mov	r3, r0
 801e218:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801e21a:	2300      	movs	r3, #0
 801e21c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801e21e:	79fb      	ldrb	r3, [r7, #7]
 801e220:	2b03      	cmp	r3, #3
 801e222:	d817      	bhi.n	801e254 <USBD_Get_USB_Status+0x44>
 801e224:	a201      	add	r2, pc, #4	; (adr r2, 801e22c <USBD_Get_USB_Status+0x1c>)
 801e226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e22a:	bf00      	nop
 801e22c:	0801e23d 	.word	0x0801e23d
 801e230:	0801e243 	.word	0x0801e243
 801e234:	0801e249 	.word	0x0801e249
 801e238:	0801e24f 	.word	0x0801e24f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801e23c:	2300      	movs	r3, #0
 801e23e:	73fb      	strb	r3, [r7, #15]
    break;
 801e240:	e00b      	b.n	801e25a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801e242:	2302      	movs	r3, #2
 801e244:	73fb      	strb	r3, [r7, #15]
    break;
 801e246:	e008      	b.n	801e25a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801e248:	2301      	movs	r3, #1
 801e24a:	73fb      	strb	r3, [r7, #15]
    break;
 801e24c:	e005      	b.n	801e25a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801e24e:	2302      	movs	r3, #2
 801e250:	73fb      	strb	r3, [r7, #15]
    break;
 801e252:	e002      	b.n	801e25a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801e254:	2302      	movs	r3, #2
 801e256:	73fb      	strb	r3, [r7, #15]
    break;
 801e258:	bf00      	nop
  }
  return usb_status;
 801e25a:	7bfb      	ldrb	r3, [r7, #15]
}
 801e25c:	4618      	mov	r0, r3
 801e25e:	3714      	adds	r7, #20
 801e260:	46bd      	mov	sp, r7
 801e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e266:	4770      	bx	lr

0801e268 <__errno>:
 801e268:	4b01      	ldr	r3, [pc, #4]	; (801e270 <__errno+0x8>)
 801e26a:	6818      	ldr	r0, [r3, #0]
 801e26c:	4770      	bx	lr
 801e26e:	bf00      	nop
 801e270:	24000188 	.word	0x24000188

0801e274 <__libc_init_array>:
 801e274:	b570      	push	{r4, r5, r6, lr}
 801e276:	4e0d      	ldr	r6, [pc, #52]	; (801e2ac <__libc_init_array+0x38>)
 801e278:	4c0d      	ldr	r4, [pc, #52]	; (801e2b0 <__libc_init_array+0x3c>)
 801e27a:	1ba4      	subs	r4, r4, r6
 801e27c:	10a4      	asrs	r4, r4, #2
 801e27e:	2500      	movs	r5, #0
 801e280:	42a5      	cmp	r5, r4
 801e282:	d109      	bne.n	801e298 <__libc_init_array+0x24>
 801e284:	4e0b      	ldr	r6, [pc, #44]	; (801e2b4 <__libc_init_array+0x40>)
 801e286:	4c0c      	ldr	r4, [pc, #48]	; (801e2b8 <__libc_init_array+0x44>)
 801e288:	f001 f908 	bl	801f49c <_init>
 801e28c:	1ba4      	subs	r4, r4, r6
 801e28e:	10a4      	asrs	r4, r4, #2
 801e290:	2500      	movs	r5, #0
 801e292:	42a5      	cmp	r5, r4
 801e294:	d105      	bne.n	801e2a2 <__libc_init_array+0x2e>
 801e296:	bd70      	pop	{r4, r5, r6, pc}
 801e298:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e29c:	4798      	blx	r3
 801e29e:	3501      	adds	r5, #1
 801e2a0:	e7ee      	b.n	801e280 <__libc_init_array+0xc>
 801e2a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801e2a6:	4798      	blx	r3
 801e2a8:	3501      	adds	r5, #1
 801e2aa:	e7f2      	b.n	801e292 <__libc_init_array+0x1e>
 801e2ac:	0801f888 	.word	0x0801f888
 801e2b0:	0801f888 	.word	0x0801f888
 801e2b4:	0801f888 	.word	0x0801f888
 801e2b8:	0801f88c 	.word	0x0801f88c

0801e2bc <__itoa>:
 801e2bc:	1e93      	subs	r3, r2, #2
 801e2be:	2b22      	cmp	r3, #34	; 0x22
 801e2c0:	b510      	push	{r4, lr}
 801e2c2:	460c      	mov	r4, r1
 801e2c4:	d904      	bls.n	801e2d0 <__itoa+0x14>
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	700b      	strb	r3, [r1, #0]
 801e2ca:	461c      	mov	r4, r3
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	bd10      	pop	{r4, pc}
 801e2d0:	2a0a      	cmp	r2, #10
 801e2d2:	d109      	bne.n	801e2e8 <__itoa+0x2c>
 801e2d4:	2800      	cmp	r0, #0
 801e2d6:	da07      	bge.n	801e2e8 <__itoa+0x2c>
 801e2d8:	232d      	movs	r3, #45	; 0x2d
 801e2da:	700b      	strb	r3, [r1, #0]
 801e2dc:	4240      	negs	r0, r0
 801e2de:	2101      	movs	r1, #1
 801e2e0:	4421      	add	r1, r4
 801e2e2:	f000 f8ed 	bl	801e4c0 <__utoa>
 801e2e6:	e7f1      	b.n	801e2cc <__itoa+0x10>
 801e2e8:	2100      	movs	r1, #0
 801e2ea:	e7f9      	b.n	801e2e0 <__itoa+0x24>

0801e2ec <itoa>:
 801e2ec:	f7ff bfe6 	b.w	801e2bc <__itoa>

0801e2f0 <malloc>:
 801e2f0:	4b02      	ldr	r3, [pc, #8]	; (801e2fc <malloc+0xc>)
 801e2f2:	4601      	mov	r1, r0
 801e2f4:	6818      	ldr	r0, [r3, #0]
 801e2f6:	f000 b861 	b.w	801e3bc <_malloc_r>
 801e2fa:	bf00      	nop
 801e2fc:	24000188 	.word	0x24000188

0801e300 <free>:
 801e300:	4b02      	ldr	r3, [pc, #8]	; (801e30c <free+0xc>)
 801e302:	4601      	mov	r1, r0
 801e304:	6818      	ldr	r0, [r3, #0]
 801e306:	f000 b80b 	b.w	801e320 <_free_r>
 801e30a:	bf00      	nop
 801e30c:	24000188 	.word	0x24000188

0801e310 <memset>:
 801e310:	4402      	add	r2, r0
 801e312:	4603      	mov	r3, r0
 801e314:	4293      	cmp	r3, r2
 801e316:	d100      	bne.n	801e31a <memset+0xa>
 801e318:	4770      	bx	lr
 801e31a:	f803 1b01 	strb.w	r1, [r3], #1
 801e31e:	e7f9      	b.n	801e314 <memset+0x4>

0801e320 <_free_r>:
 801e320:	b538      	push	{r3, r4, r5, lr}
 801e322:	4605      	mov	r5, r0
 801e324:	2900      	cmp	r1, #0
 801e326:	d045      	beq.n	801e3b4 <_free_r+0x94>
 801e328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e32c:	1f0c      	subs	r4, r1, #4
 801e32e:	2b00      	cmp	r3, #0
 801e330:	bfb8      	it	lt
 801e332:	18e4      	addlt	r4, r4, r3
 801e334:	f000 f902 	bl	801e53c <__malloc_lock>
 801e338:	4a1f      	ldr	r2, [pc, #124]	; (801e3b8 <_free_r+0x98>)
 801e33a:	6813      	ldr	r3, [r2, #0]
 801e33c:	4610      	mov	r0, r2
 801e33e:	b933      	cbnz	r3, 801e34e <_free_r+0x2e>
 801e340:	6063      	str	r3, [r4, #4]
 801e342:	6014      	str	r4, [r2, #0]
 801e344:	4628      	mov	r0, r5
 801e346:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e34a:	f000 b8f8 	b.w	801e53e <__malloc_unlock>
 801e34e:	42a3      	cmp	r3, r4
 801e350:	d90c      	bls.n	801e36c <_free_r+0x4c>
 801e352:	6821      	ldr	r1, [r4, #0]
 801e354:	1862      	adds	r2, r4, r1
 801e356:	4293      	cmp	r3, r2
 801e358:	bf04      	itt	eq
 801e35a:	681a      	ldreq	r2, [r3, #0]
 801e35c:	685b      	ldreq	r3, [r3, #4]
 801e35e:	6063      	str	r3, [r4, #4]
 801e360:	bf04      	itt	eq
 801e362:	1852      	addeq	r2, r2, r1
 801e364:	6022      	streq	r2, [r4, #0]
 801e366:	6004      	str	r4, [r0, #0]
 801e368:	e7ec      	b.n	801e344 <_free_r+0x24>
 801e36a:	4613      	mov	r3, r2
 801e36c:	685a      	ldr	r2, [r3, #4]
 801e36e:	b10a      	cbz	r2, 801e374 <_free_r+0x54>
 801e370:	42a2      	cmp	r2, r4
 801e372:	d9fa      	bls.n	801e36a <_free_r+0x4a>
 801e374:	6819      	ldr	r1, [r3, #0]
 801e376:	1858      	adds	r0, r3, r1
 801e378:	42a0      	cmp	r0, r4
 801e37a:	d10b      	bne.n	801e394 <_free_r+0x74>
 801e37c:	6820      	ldr	r0, [r4, #0]
 801e37e:	4401      	add	r1, r0
 801e380:	1858      	adds	r0, r3, r1
 801e382:	4282      	cmp	r2, r0
 801e384:	6019      	str	r1, [r3, #0]
 801e386:	d1dd      	bne.n	801e344 <_free_r+0x24>
 801e388:	6810      	ldr	r0, [r2, #0]
 801e38a:	6852      	ldr	r2, [r2, #4]
 801e38c:	605a      	str	r2, [r3, #4]
 801e38e:	4401      	add	r1, r0
 801e390:	6019      	str	r1, [r3, #0]
 801e392:	e7d7      	b.n	801e344 <_free_r+0x24>
 801e394:	d902      	bls.n	801e39c <_free_r+0x7c>
 801e396:	230c      	movs	r3, #12
 801e398:	602b      	str	r3, [r5, #0]
 801e39a:	e7d3      	b.n	801e344 <_free_r+0x24>
 801e39c:	6820      	ldr	r0, [r4, #0]
 801e39e:	1821      	adds	r1, r4, r0
 801e3a0:	428a      	cmp	r2, r1
 801e3a2:	bf04      	itt	eq
 801e3a4:	6811      	ldreq	r1, [r2, #0]
 801e3a6:	6852      	ldreq	r2, [r2, #4]
 801e3a8:	6062      	str	r2, [r4, #4]
 801e3aa:	bf04      	itt	eq
 801e3ac:	1809      	addeq	r1, r1, r0
 801e3ae:	6021      	streq	r1, [r4, #0]
 801e3b0:	605c      	str	r4, [r3, #4]
 801e3b2:	e7c7      	b.n	801e344 <_free_r+0x24>
 801e3b4:	bd38      	pop	{r3, r4, r5, pc}
 801e3b6:	bf00      	nop
 801e3b8:	24000308 	.word	0x24000308

0801e3bc <_malloc_r>:
 801e3bc:	b570      	push	{r4, r5, r6, lr}
 801e3be:	1ccd      	adds	r5, r1, #3
 801e3c0:	f025 0503 	bic.w	r5, r5, #3
 801e3c4:	3508      	adds	r5, #8
 801e3c6:	2d0c      	cmp	r5, #12
 801e3c8:	bf38      	it	cc
 801e3ca:	250c      	movcc	r5, #12
 801e3cc:	2d00      	cmp	r5, #0
 801e3ce:	4606      	mov	r6, r0
 801e3d0:	db01      	blt.n	801e3d6 <_malloc_r+0x1a>
 801e3d2:	42a9      	cmp	r1, r5
 801e3d4:	d903      	bls.n	801e3de <_malloc_r+0x22>
 801e3d6:	230c      	movs	r3, #12
 801e3d8:	6033      	str	r3, [r6, #0]
 801e3da:	2000      	movs	r0, #0
 801e3dc:	bd70      	pop	{r4, r5, r6, pc}
 801e3de:	f000 f8ad 	bl	801e53c <__malloc_lock>
 801e3e2:	4a21      	ldr	r2, [pc, #132]	; (801e468 <_malloc_r+0xac>)
 801e3e4:	6814      	ldr	r4, [r2, #0]
 801e3e6:	4621      	mov	r1, r4
 801e3e8:	b991      	cbnz	r1, 801e410 <_malloc_r+0x54>
 801e3ea:	4c20      	ldr	r4, [pc, #128]	; (801e46c <_malloc_r+0xb0>)
 801e3ec:	6823      	ldr	r3, [r4, #0]
 801e3ee:	b91b      	cbnz	r3, 801e3f8 <_malloc_r+0x3c>
 801e3f0:	4630      	mov	r0, r6
 801e3f2:	f000 f83d 	bl	801e470 <_sbrk_r>
 801e3f6:	6020      	str	r0, [r4, #0]
 801e3f8:	4629      	mov	r1, r5
 801e3fa:	4630      	mov	r0, r6
 801e3fc:	f000 f838 	bl	801e470 <_sbrk_r>
 801e400:	1c43      	adds	r3, r0, #1
 801e402:	d124      	bne.n	801e44e <_malloc_r+0x92>
 801e404:	230c      	movs	r3, #12
 801e406:	6033      	str	r3, [r6, #0]
 801e408:	4630      	mov	r0, r6
 801e40a:	f000 f898 	bl	801e53e <__malloc_unlock>
 801e40e:	e7e4      	b.n	801e3da <_malloc_r+0x1e>
 801e410:	680b      	ldr	r3, [r1, #0]
 801e412:	1b5b      	subs	r3, r3, r5
 801e414:	d418      	bmi.n	801e448 <_malloc_r+0x8c>
 801e416:	2b0b      	cmp	r3, #11
 801e418:	d90f      	bls.n	801e43a <_malloc_r+0x7e>
 801e41a:	600b      	str	r3, [r1, #0]
 801e41c:	50cd      	str	r5, [r1, r3]
 801e41e:	18cc      	adds	r4, r1, r3
 801e420:	4630      	mov	r0, r6
 801e422:	f000 f88c 	bl	801e53e <__malloc_unlock>
 801e426:	f104 000b 	add.w	r0, r4, #11
 801e42a:	1d23      	adds	r3, r4, #4
 801e42c:	f020 0007 	bic.w	r0, r0, #7
 801e430:	1ac3      	subs	r3, r0, r3
 801e432:	d0d3      	beq.n	801e3dc <_malloc_r+0x20>
 801e434:	425a      	negs	r2, r3
 801e436:	50e2      	str	r2, [r4, r3]
 801e438:	e7d0      	b.n	801e3dc <_malloc_r+0x20>
 801e43a:	428c      	cmp	r4, r1
 801e43c:	684b      	ldr	r3, [r1, #4]
 801e43e:	bf16      	itet	ne
 801e440:	6063      	strne	r3, [r4, #4]
 801e442:	6013      	streq	r3, [r2, #0]
 801e444:	460c      	movne	r4, r1
 801e446:	e7eb      	b.n	801e420 <_malloc_r+0x64>
 801e448:	460c      	mov	r4, r1
 801e44a:	6849      	ldr	r1, [r1, #4]
 801e44c:	e7cc      	b.n	801e3e8 <_malloc_r+0x2c>
 801e44e:	1cc4      	adds	r4, r0, #3
 801e450:	f024 0403 	bic.w	r4, r4, #3
 801e454:	42a0      	cmp	r0, r4
 801e456:	d005      	beq.n	801e464 <_malloc_r+0xa8>
 801e458:	1a21      	subs	r1, r4, r0
 801e45a:	4630      	mov	r0, r6
 801e45c:	f000 f808 	bl	801e470 <_sbrk_r>
 801e460:	3001      	adds	r0, #1
 801e462:	d0cf      	beq.n	801e404 <_malloc_r+0x48>
 801e464:	6025      	str	r5, [r4, #0]
 801e466:	e7db      	b.n	801e420 <_malloc_r+0x64>
 801e468:	24000308 	.word	0x24000308
 801e46c:	2400030c 	.word	0x2400030c

0801e470 <_sbrk_r>:
 801e470:	b538      	push	{r3, r4, r5, lr}
 801e472:	4c06      	ldr	r4, [pc, #24]	; (801e48c <_sbrk_r+0x1c>)
 801e474:	2300      	movs	r3, #0
 801e476:	4605      	mov	r5, r0
 801e478:	4608      	mov	r0, r1
 801e47a:	6023      	str	r3, [r4, #0]
 801e47c:	f7e3 ffea 	bl	8002454 <_sbrk>
 801e480:	1c43      	adds	r3, r0, #1
 801e482:	d102      	bne.n	801e48a <_sbrk_r+0x1a>
 801e484:	6823      	ldr	r3, [r4, #0]
 801e486:	b103      	cbz	r3, 801e48a <_sbrk_r+0x1a>
 801e488:	602b      	str	r3, [r5, #0]
 801e48a:	bd38      	pop	{r3, r4, r5, pc}
 801e48c:	24001f64 	.word	0x24001f64

0801e490 <strcat>:
 801e490:	b510      	push	{r4, lr}
 801e492:	4603      	mov	r3, r0
 801e494:	781a      	ldrb	r2, [r3, #0]
 801e496:	1c5c      	adds	r4, r3, #1
 801e498:	b93a      	cbnz	r2, 801e4aa <strcat+0x1a>
 801e49a:	3b01      	subs	r3, #1
 801e49c:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e4a4:	2a00      	cmp	r2, #0
 801e4a6:	d1f9      	bne.n	801e49c <strcat+0xc>
 801e4a8:	bd10      	pop	{r4, pc}
 801e4aa:	4623      	mov	r3, r4
 801e4ac:	e7f2      	b.n	801e494 <strcat+0x4>

0801e4ae <strcpy>:
 801e4ae:	4603      	mov	r3, r0
 801e4b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e4b4:	f803 2b01 	strb.w	r2, [r3], #1
 801e4b8:	2a00      	cmp	r2, #0
 801e4ba:	d1f9      	bne.n	801e4b0 <strcpy+0x2>
 801e4bc:	4770      	bx	lr
	...

0801e4c0 <__utoa>:
 801e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e4c2:	4b1d      	ldr	r3, [pc, #116]	; (801e538 <__utoa+0x78>)
 801e4c4:	b08b      	sub	sp, #44	; 0x2c
 801e4c6:	4605      	mov	r5, r0
 801e4c8:	460c      	mov	r4, r1
 801e4ca:	466e      	mov	r6, sp
 801e4cc:	f103 0c20 	add.w	ip, r3, #32
 801e4d0:	6818      	ldr	r0, [r3, #0]
 801e4d2:	6859      	ldr	r1, [r3, #4]
 801e4d4:	4637      	mov	r7, r6
 801e4d6:	c703      	stmia	r7!, {r0, r1}
 801e4d8:	3308      	adds	r3, #8
 801e4da:	4563      	cmp	r3, ip
 801e4dc:	463e      	mov	r6, r7
 801e4de:	d1f7      	bne.n	801e4d0 <__utoa+0x10>
 801e4e0:	6818      	ldr	r0, [r3, #0]
 801e4e2:	791b      	ldrb	r3, [r3, #4]
 801e4e4:	713b      	strb	r3, [r7, #4]
 801e4e6:	1e93      	subs	r3, r2, #2
 801e4e8:	2b22      	cmp	r3, #34	; 0x22
 801e4ea:	6038      	str	r0, [r7, #0]
 801e4ec:	f04f 0300 	mov.w	r3, #0
 801e4f0:	d904      	bls.n	801e4fc <__utoa+0x3c>
 801e4f2:	7023      	strb	r3, [r4, #0]
 801e4f4:	461c      	mov	r4, r3
 801e4f6:	4620      	mov	r0, r4
 801e4f8:	b00b      	add	sp, #44	; 0x2c
 801e4fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e4fc:	1e66      	subs	r6, r4, #1
 801e4fe:	fbb5 f0f2 	udiv	r0, r5, r2
 801e502:	af0a      	add	r7, sp, #40	; 0x28
 801e504:	fb02 5510 	mls	r5, r2, r0, r5
 801e508:	443d      	add	r5, r7
 801e50a:	1c59      	adds	r1, r3, #1
 801e50c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 801e510:	f806 5f01 	strb.w	r5, [r6, #1]!
 801e514:	4605      	mov	r5, r0
 801e516:	b968      	cbnz	r0, 801e534 <__utoa+0x74>
 801e518:	5460      	strb	r0, [r4, r1]
 801e51a:	4423      	add	r3, r4
 801e51c:	4622      	mov	r2, r4
 801e51e:	1b19      	subs	r1, r3, r4
 801e520:	1b10      	subs	r0, r2, r4
 801e522:	4281      	cmp	r1, r0
 801e524:	dde7      	ble.n	801e4f6 <__utoa+0x36>
 801e526:	7811      	ldrb	r1, [r2, #0]
 801e528:	7818      	ldrb	r0, [r3, #0]
 801e52a:	f802 0b01 	strb.w	r0, [r2], #1
 801e52e:	f803 1901 	strb.w	r1, [r3], #-1
 801e532:	e7f4      	b.n	801e51e <__utoa+0x5e>
 801e534:	460b      	mov	r3, r1
 801e536:	e7e2      	b.n	801e4fe <__utoa+0x3e>
 801e538:	0801f648 	.word	0x0801f648

0801e53c <__malloc_lock>:
 801e53c:	4770      	bx	lr

0801e53e <__malloc_unlock>:
 801e53e:	4770      	bx	lr

0801e540 <cos>:
 801e540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e542:	eeb0 7b40 	vmov.f64	d7, d0
 801e546:	ee17 3a90 	vmov	r3, s15
 801e54a:	4a19      	ldr	r2, [pc, #100]	; (801e5b0 <cos+0x70>)
 801e54c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e550:	4293      	cmp	r3, r2
 801e552:	dc04      	bgt.n	801e55e <cos+0x1e>
 801e554:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e5a8 <cos+0x68>
 801e558:	f000 fb22 	bl	801eba0 <__kernel_cos>
 801e55c:	e004      	b.n	801e568 <cos+0x28>
 801e55e:	4a15      	ldr	r2, [pc, #84]	; (801e5b4 <cos+0x74>)
 801e560:	4293      	cmp	r3, r2
 801e562:	dd04      	ble.n	801e56e <cos+0x2e>
 801e564:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e568:	b005      	add	sp, #20
 801e56a:	f85d fb04 	ldr.w	pc, [sp], #4
 801e56e:	4668      	mov	r0, sp
 801e570:	f000 f9da 	bl	801e928 <__ieee754_rem_pio2>
 801e574:	f000 0003 	and.w	r0, r0, #3
 801e578:	2801      	cmp	r0, #1
 801e57a:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e57e:	ed9d 0b00 	vldr	d0, [sp]
 801e582:	d007      	beq.n	801e594 <cos+0x54>
 801e584:	2802      	cmp	r0, #2
 801e586:	d00a      	beq.n	801e59e <cos+0x5e>
 801e588:	2800      	cmp	r0, #0
 801e58a:	d0e5      	beq.n	801e558 <cos+0x18>
 801e58c:	2001      	movs	r0, #1
 801e58e:	f000 fe0f 	bl	801f1b0 <__kernel_sin>
 801e592:	e7e9      	b.n	801e568 <cos+0x28>
 801e594:	f000 fe0c 	bl	801f1b0 <__kernel_sin>
 801e598:	eeb1 0b40 	vneg.f64	d0, d0
 801e59c:	e7e4      	b.n	801e568 <cos+0x28>
 801e59e:	f000 faff 	bl	801eba0 <__kernel_cos>
 801e5a2:	e7f9      	b.n	801e598 <cos+0x58>
 801e5a4:	f3af 8000 	nop.w
	...
 801e5b0:	3fe921fb 	.word	0x3fe921fb
 801e5b4:	7fefffff 	.word	0x7fefffff

0801e5b8 <sin>:
 801e5b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e5ba:	eeb0 7b40 	vmov.f64	d7, d0
 801e5be:	ee17 3a90 	vmov	r3, s15
 801e5c2:	4a19      	ldr	r2, [pc, #100]	; (801e628 <sin+0x70>)
 801e5c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e5c8:	4293      	cmp	r3, r2
 801e5ca:	dc05      	bgt.n	801e5d8 <sin+0x20>
 801e5cc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 801e620 <sin+0x68>
 801e5d0:	2000      	movs	r0, #0
 801e5d2:	f000 fded 	bl	801f1b0 <__kernel_sin>
 801e5d6:	e004      	b.n	801e5e2 <sin+0x2a>
 801e5d8:	4a14      	ldr	r2, [pc, #80]	; (801e62c <sin+0x74>)
 801e5da:	4293      	cmp	r3, r2
 801e5dc:	dd04      	ble.n	801e5e8 <sin+0x30>
 801e5de:	ee30 0b40 	vsub.f64	d0, d0, d0
 801e5e2:	b005      	add	sp, #20
 801e5e4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5e8:	4668      	mov	r0, sp
 801e5ea:	f000 f99d 	bl	801e928 <__ieee754_rem_pio2>
 801e5ee:	f000 0003 	and.w	r0, r0, #3
 801e5f2:	2801      	cmp	r0, #1
 801e5f4:	ed9d 1b02 	vldr	d1, [sp, #8]
 801e5f8:	ed9d 0b00 	vldr	d0, [sp]
 801e5fc:	d004      	beq.n	801e608 <sin+0x50>
 801e5fe:	2802      	cmp	r0, #2
 801e600:	d005      	beq.n	801e60e <sin+0x56>
 801e602:	b950      	cbnz	r0, 801e61a <sin+0x62>
 801e604:	2001      	movs	r0, #1
 801e606:	e7e4      	b.n	801e5d2 <sin+0x1a>
 801e608:	f000 faca 	bl	801eba0 <__kernel_cos>
 801e60c:	e7e9      	b.n	801e5e2 <sin+0x2a>
 801e60e:	2001      	movs	r0, #1
 801e610:	f000 fdce 	bl	801f1b0 <__kernel_sin>
 801e614:	eeb1 0b40 	vneg.f64	d0, d0
 801e618:	e7e3      	b.n	801e5e2 <sin+0x2a>
 801e61a:	f000 fac1 	bl	801eba0 <__kernel_cos>
 801e61e:	e7f9      	b.n	801e614 <sin+0x5c>
	...
 801e628:	3fe921fb 	.word	0x3fe921fb
 801e62c:	7fefffff 	.word	0x7fefffff

0801e630 <exp>:
 801e630:	b510      	push	{r4, lr}
 801e632:	ed2d 8b04 	vpush	{d8-d9}
 801e636:	eeb0 8b40 	vmov.f64	d8, d0
 801e63a:	4c33      	ldr	r4, [pc, #204]	; (801e708 <exp+0xd8>)
 801e63c:	b08a      	sub	sp, #40	; 0x28
 801e63e:	f000 f86b 	bl	801e718 <__ieee754_exp>
 801e642:	f994 3000 	ldrsb.w	r3, [r4]
 801e646:	eeb0 9b40 	vmov.f64	d9, d0
 801e64a:	3301      	adds	r3, #1
 801e64c:	d029      	beq.n	801e6a2 <exp+0x72>
 801e64e:	eeb0 0b48 	vmov.f64	d0, d8
 801e652:	f000 fe0e 	bl	801f272 <finite>
 801e656:	b320      	cbz	r0, 801e6a2 <exp+0x72>
 801e658:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801e6f8 <exp+0xc8>
 801e65c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e660:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e664:	dd2e      	ble.n	801e6c4 <exp+0x94>
 801e666:	2303      	movs	r3, #3
 801e668:	9300      	str	r3, [sp, #0]
 801e66a:	4b28      	ldr	r3, [pc, #160]	; (801e70c <exp+0xdc>)
 801e66c:	9301      	str	r3, [sp, #4]
 801e66e:	2300      	movs	r3, #0
 801e670:	9308      	str	r3, [sp, #32]
 801e672:	f994 3000 	ldrsb.w	r3, [r4]
 801e676:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e67a:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e67e:	b9b3      	cbnz	r3, 801e6ae <exp+0x7e>
 801e680:	4b23      	ldr	r3, [pc, #140]	; (801e710 <exp+0xe0>)
 801e682:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801e686:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e68a:	4668      	mov	r0, sp
 801e68c:	f000 fe74 	bl	801f378 <matherr>
 801e690:	b198      	cbz	r0, 801e6ba <exp+0x8a>
 801e692:	9b08      	ldr	r3, [sp, #32]
 801e694:	b11b      	cbz	r3, 801e69e <exp+0x6e>
 801e696:	f7ff fde7 	bl	801e268 <__errno>
 801e69a:	9b08      	ldr	r3, [sp, #32]
 801e69c:	6003      	str	r3, [r0, #0]
 801e69e:	ed9d 9b06 	vldr	d9, [sp, #24]
 801e6a2:	eeb0 0b49 	vmov.f64	d0, d9
 801e6a6:	b00a      	add	sp, #40	; 0x28
 801e6a8:	ecbd 8b04 	vpop	{d8-d9}
 801e6ac:	bd10      	pop	{r4, pc}
 801e6ae:	4919      	ldr	r1, [pc, #100]	; (801e714 <exp+0xe4>)
 801e6b0:	2000      	movs	r0, #0
 801e6b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801e6b6:	2b02      	cmp	r3, #2
 801e6b8:	d1e7      	bne.n	801e68a <exp+0x5a>
 801e6ba:	f7ff fdd5 	bl	801e268 <__errno>
 801e6be:	2322      	movs	r3, #34	; 0x22
 801e6c0:	6003      	str	r3, [r0, #0]
 801e6c2:	e7e6      	b.n	801e692 <exp+0x62>
 801e6c4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801e700 <exp+0xd0>
 801e6c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e6cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e6d0:	d5e7      	bpl.n	801e6a2 <exp+0x72>
 801e6d2:	2304      	movs	r3, #4
 801e6d4:	9300      	str	r3, [sp, #0]
 801e6d6:	4b0d      	ldr	r3, [pc, #52]	; (801e70c <exp+0xdc>)
 801e6d8:	9301      	str	r3, [sp, #4]
 801e6da:	2300      	movs	r3, #0
 801e6dc:	9308      	str	r3, [sp, #32]
 801e6de:	2200      	movs	r2, #0
 801e6e0:	2300      	movs	r3, #0
 801e6e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801e6e6:	ed8d 8b04 	vstr	d8, [sp, #16]
 801e6ea:	ed8d 8b02 	vstr	d8, [sp, #8]
 801e6ee:	f994 3000 	ldrsb.w	r3, [r4]
 801e6f2:	e7e0      	b.n	801e6b6 <exp+0x86>
 801e6f4:	f3af 8000 	nop.w
 801e6f8:	fefa39ef 	.word	0xfefa39ef
 801e6fc:	40862e42 	.word	0x40862e42
 801e700:	d52d3051 	.word	0xd52d3051
 801e704:	c0874910 	.word	0xc0874910
 801e708:	240001ec 	.word	0x240001ec
 801e70c:	0801f66d 	.word	0x0801f66d
 801e710:	47efffff 	.word	0x47efffff
 801e714:	7ff00000 	.word	0x7ff00000

0801e718 <__ieee754_exp>:
 801e718:	ee10 1a90 	vmov	r1, s1
 801e71c:	4b7a      	ldr	r3, [pc, #488]	; (801e908 <__ieee754_exp+0x1f0>)
 801e71e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801e722:	429a      	cmp	r2, r3
 801e724:	b082      	sub	sp, #8
 801e726:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801e72a:	d928      	bls.n	801e77e <__ieee754_exp+0x66>
 801e72c:	4b77      	ldr	r3, [pc, #476]	; (801e90c <__ieee754_exp+0x1f4>)
 801e72e:	429a      	cmp	r2, r3
 801e730:	d90f      	bls.n	801e752 <__ieee754_exp+0x3a>
 801e732:	ee10 3a10 	vmov	r3, s0
 801e736:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801e73a:	430b      	orrs	r3, r1
 801e73c:	d003      	beq.n	801e746 <__ieee754_exp+0x2e>
 801e73e:	ee30 0b00 	vadd.f64	d0, d0, d0
 801e742:	b002      	add	sp, #8
 801e744:	4770      	bx	lr
 801e746:	ed9f 7b56 	vldr	d7, [pc, #344]	; 801e8a0 <__ieee754_exp+0x188>
 801e74a:	2800      	cmp	r0, #0
 801e74c:	fe00 0b07 	vseleq.f64	d0, d0, d7
 801e750:	e7f7      	b.n	801e742 <__ieee754_exp+0x2a>
 801e752:	ed9f 7b55 	vldr	d7, [pc, #340]	; 801e8a8 <__ieee754_exp+0x190>
 801e756:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e75a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e75e:	dd04      	ble.n	801e76a <__ieee754_exp+0x52>
 801e760:	ed9f 0b53 	vldr	d0, [pc, #332]	; 801e8b0 <__ieee754_exp+0x198>
 801e764:	ee20 0b00 	vmul.f64	d0, d0, d0
 801e768:	e7eb      	b.n	801e742 <__ieee754_exp+0x2a>
 801e76a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801e8b8 <__ieee754_exp+0x1a0>
 801e76e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801e772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e776:	d505      	bpl.n	801e784 <__ieee754_exp+0x6c>
 801e778:	ed9f 0b49 	vldr	d0, [pc, #292]	; 801e8a0 <__ieee754_exp+0x188>
 801e77c:	e7e1      	b.n	801e742 <__ieee754_exp+0x2a>
 801e77e:	4b64      	ldr	r3, [pc, #400]	; (801e910 <__ieee754_exp+0x1f8>)
 801e780:	429a      	cmp	r2, r3
 801e782:	d956      	bls.n	801e832 <__ieee754_exp+0x11a>
 801e784:	4b63      	ldr	r3, [pc, #396]	; (801e914 <__ieee754_exp+0x1fc>)
 801e786:	429a      	cmp	r2, r3
 801e788:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 801e78c:	d838      	bhi.n	801e800 <__ieee754_exp+0xe8>
 801e78e:	4b62      	ldr	r3, [pc, #392]	; (801e918 <__ieee754_exp+0x200>)
 801e790:	4413      	add	r3, r2
 801e792:	ed93 6b00 	vldr	d6, [r3]
 801e796:	4b61      	ldr	r3, [pc, #388]	; (801e91c <__ieee754_exp+0x204>)
 801e798:	ee30 6b46 	vsub.f64	d6, d0, d6
 801e79c:	4413      	add	r3, r2
 801e79e:	ed93 7b00 	vldr	d7, [r3]
 801e7a2:	f1c0 0301 	rsb	r3, r0, #1
 801e7a6:	1a1b      	subs	r3, r3, r0
 801e7a8:	ee36 0b47 	vsub.f64	d0, d6, d7
 801e7ac:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e8c0 <__ieee754_exp+0x1a8>
 801e7b0:	ee20 5b00 	vmul.f64	d5, d0, d0
 801e7b4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e8c8 <__ieee754_exp+0x1b0>
 801e7b8:	eea5 3b04 	vfma.f64	d3, d5, d4
 801e7bc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e8d0 <__ieee754_exp+0x1b8>
 801e7c0:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e7c4:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801e8d8 <__ieee754_exp+0x1c0>
 801e7c8:	eea4 3b05 	vfma.f64	d3, d4, d5
 801e7cc:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801e8e0 <__ieee754_exp+0x1c8>
 801e7d0:	eea3 4b05 	vfma.f64	d4, d3, d5
 801e7d4:	eeb0 3b40 	vmov.f64	d3, d0
 801e7d8:	eea4 3b45 	vfms.f64	d3, d4, d5
 801e7dc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 801e7e0:	eeb0 5b43 	vmov.f64	d5, d3
 801e7e4:	ee20 2b03 	vmul.f64	d2, d0, d3
 801e7e8:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
 801e7ec:	bba3      	cbnz	r3, 801e858 <__ieee754_exp+0x140>
 801e7ee:	ee35 5b44 	vsub.f64	d5, d5, d4
 801e7f2:	ee82 7b05 	vdiv.f64	d7, d2, d5
 801e7f6:	ee37 0b40 	vsub.f64	d0, d7, d0
 801e7fa:	ee33 0b40 	vsub.f64	d0, d3, d0
 801e7fe:	e7a0      	b.n	801e742 <__ieee754_exp+0x2a>
 801e800:	4b47      	ldr	r3, [pc, #284]	; (801e920 <__ieee754_exp+0x208>)
 801e802:	4413      	add	r3, r2
 801e804:	ed93 7b00 	vldr	d7, [r3]
 801e808:	ed9f 6b37 	vldr	d6, [pc, #220]	; 801e8e8 <__ieee754_exp+0x1d0>
 801e80c:	ed9f 5b38 	vldr	d5, [pc, #224]	; 801e8f0 <__ieee754_exp+0x1d8>
 801e810:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e814:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801e8f8 <__ieee754_exp+0x1e0>
 801e818:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e81c:	ee17 3a90 	vmov	r3, s15
 801e820:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e824:	eea7 0b46 	vfms.f64	d0, d7, d6
 801e828:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e82c:	eeb0 6b40 	vmov.f64	d6, d0
 801e830:	e7ba      	b.n	801e7a8 <__ieee754_exp+0x90>
 801e832:	4b3c      	ldr	r3, [pc, #240]	; (801e924 <__ieee754_exp+0x20c>)
 801e834:	429a      	cmp	r2, r3
 801e836:	d80d      	bhi.n	801e854 <__ieee754_exp+0x13c>
 801e838:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801e83c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801e8b0 <__ieee754_exp+0x198>
 801e840:	ee30 5b05 	vadd.f64	d5, d0, d5
 801e844:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801e848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e84c:	dd02      	ble.n	801e854 <__ieee754_exp+0x13c>
 801e84e:	ee30 0b04 	vadd.f64	d0, d0, d4
 801e852:	e776      	b.n	801e742 <__ieee754_exp+0x2a>
 801e854:	2300      	movs	r3, #0
 801e856:	e7a9      	b.n	801e7ac <__ieee754_exp+0x94>
 801e858:	f46f 717f 	mvn.w	r1, #1020	; 0x3fc
 801e85c:	ee34 5b45 	vsub.f64	d5, d4, d5
 801e860:	428b      	cmp	r3, r1
 801e862:	ee82 4b05 	vdiv.f64	d4, d2, d5
 801e866:	ee37 7b44 	vsub.f64	d7, d7, d4
 801e86a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e86e:	ee33 7b47 	vsub.f64	d7, d3, d7
 801e872:	ed8d 7b00 	vstr	d7, [sp]
 801e876:	9a01      	ldr	r2, [sp, #4]
 801e878:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e87c:	db04      	blt.n	801e888 <__ieee754_exp+0x170>
 801e87e:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e882:	ec41 0b10 	vmov	d0, r0, r1
 801e886:	e75c      	b.n	801e742 <__ieee754_exp+0x2a>
 801e888:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 801e88c:	eb02 5103 	add.w	r1, r2, r3, lsl #20
 801e890:	ed9f 7b1b 	vldr	d7, [pc, #108]	; 801e900 <__ieee754_exp+0x1e8>
 801e894:	ec41 0b10 	vmov	d0, r0, r1
 801e898:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e89c:	e751      	b.n	801e742 <__ieee754_exp+0x2a>
 801e89e:	bf00      	nop
	...
 801e8a8:	fefa39ef 	.word	0xfefa39ef
 801e8ac:	40862e42 	.word	0x40862e42
 801e8b0:	8800759c 	.word	0x8800759c
 801e8b4:	7e37e43c 	.word	0x7e37e43c
 801e8b8:	d52d3051 	.word	0xd52d3051
 801e8bc:	c0874910 	.word	0xc0874910
 801e8c0:	72bea4d0 	.word	0x72bea4d0
 801e8c4:	3e663769 	.word	0x3e663769
 801e8c8:	c5d26bf1 	.word	0xc5d26bf1
 801e8cc:	bebbbd41 	.word	0xbebbbd41
 801e8d0:	af25de2c 	.word	0xaf25de2c
 801e8d4:	3f11566a 	.word	0x3f11566a
 801e8d8:	16bebd93 	.word	0x16bebd93
 801e8dc:	bf66c16c 	.word	0xbf66c16c
 801e8e0:	5555553e 	.word	0x5555553e
 801e8e4:	3fc55555 	.word	0x3fc55555
 801e8e8:	652b82fe 	.word	0x652b82fe
 801e8ec:	3ff71547 	.word	0x3ff71547
 801e8f0:	35793c76 	.word	0x35793c76
 801e8f4:	3dea39ef 	.word	0x3dea39ef
 801e8f8:	fee00000 	.word	0xfee00000
 801e8fc:	3fe62e42 	.word	0x3fe62e42
 801e900:	00000000 	.word	0x00000000
 801e904:	01700000 	.word	0x01700000
 801e908:	40862e41 	.word	0x40862e41
 801e90c:	7fefffff 	.word	0x7fefffff
 801e910:	3fd62e42 	.word	0x3fd62e42
 801e914:	3ff0a2b1 	.word	0x3ff0a2b1
 801e918:	0801f688 	.word	0x0801f688
 801e91c:	0801f698 	.word	0x0801f698
 801e920:	0801f678 	.word	0x0801f678
 801e924:	3e2fffff 	.word	0x3e2fffff

0801e928 <__ieee754_rem_pio2>:
 801e928:	b570      	push	{r4, r5, r6, lr}
 801e92a:	eeb0 7b40 	vmov.f64	d7, d0
 801e92e:	ee17 5a90 	vmov	r5, s15
 801e932:	4b95      	ldr	r3, [pc, #596]	; (801eb88 <__ieee754_rem_pio2+0x260>)
 801e934:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e938:	429e      	cmp	r6, r3
 801e93a:	b088      	sub	sp, #32
 801e93c:	4604      	mov	r4, r0
 801e93e:	dc07      	bgt.n	801e950 <__ieee754_rem_pio2+0x28>
 801e940:	2200      	movs	r2, #0
 801e942:	2300      	movs	r3, #0
 801e944:	ed84 0b00 	vstr	d0, [r4]
 801e948:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e94c:	2000      	movs	r0, #0
 801e94e:	e01b      	b.n	801e988 <__ieee754_rem_pio2+0x60>
 801e950:	4b8e      	ldr	r3, [pc, #568]	; (801eb8c <__ieee754_rem_pio2+0x264>)
 801e952:	429e      	cmp	r6, r3
 801e954:	dc3b      	bgt.n	801e9ce <__ieee754_rem_pio2+0xa6>
 801e956:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e95a:	2d00      	cmp	r5, #0
 801e95c:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 801eb48 <__ieee754_rem_pio2+0x220>
 801e960:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e964:	dd19      	ble.n	801e99a <__ieee754_rem_pio2+0x72>
 801e966:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e96a:	429e      	cmp	r6, r3
 801e96c:	d00e      	beq.n	801e98c <__ieee754_rem_pio2+0x64>
 801e96e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 801eb50 <__ieee754_rem_pio2+0x228>
 801e972:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e976:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e97a:	ed84 5b00 	vstr	d5, [r4]
 801e97e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e982:	ed84 7b02 	vstr	d7, [r4, #8]
 801e986:	2001      	movs	r0, #1
 801e988:	b008      	add	sp, #32
 801e98a:	bd70      	pop	{r4, r5, r6, pc}
 801e98c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801eb58 <__ieee754_rem_pio2+0x230>
 801e990:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e994:	ed9f 6b72 	vldr	d6, [pc, #456]	; 801eb60 <__ieee754_rem_pio2+0x238>
 801e998:	e7eb      	b.n	801e972 <__ieee754_rem_pio2+0x4a>
 801e99a:	429e      	cmp	r6, r3
 801e99c:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e9a0:	d00e      	beq.n	801e9c0 <__ieee754_rem_pio2+0x98>
 801e9a2:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801eb50 <__ieee754_rem_pio2+0x228>
 801e9a6:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e9aa:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e9ae:	ed84 5b00 	vstr	d5, [r4]
 801e9b2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e9b6:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ba:	ed84 7b02 	vstr	d7, [r4, #8]
 801e9be:	e7e3      	b.n	801e988 <__ieee754_rem_pio2+0x60>
 801e9c0:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801eb58 <__ieee754_rem_pio2+0x230>
 801e9c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e9c8:	ed9f 6b65 	vldr	d6, [pc, #404]	; 801eb60 <__ieee754_rem_pio2+0x238>
 801e9cc:	e7eb      	b.n	801e9a6 <__ieee754_rem_pio2+0x7e>
 801e9ce:	4b70      	ldr	r3, [pc, #448]	; (801eb90 <__ieee754_rem_pio2+0x268>)
 801e9d0:	429e      	cmp	r6, r3
 801e9d2:	dc6c      	bgt.n	801eaae <__ieee754_rem_pio2+0x186>
 801e9d4:	f000 fc44 	bl	801f260 <fabs>
 801e9d8:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e9dc:	ed9f 6b62 	vldr	d6, [pc, #392]	; 801eb68 <__ieee754_rem_pio2+0x240>
 801e9e0:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e9e4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e9e8:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801e9ec:	ee17 0a90 	vmov	r0, s15
 801e9f0:	eeb1 5b44 	vneg.f64	d5, d4
 801e9f4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801eb48 <__ieee754_rem_pio2+0x220>
 801e9f8:	eea5 0b07 	vfma.f64	d0, d5, d7
 801e9fc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 801eb50 <__ieee754_rem_pio2+0x228>
 801ea00:	281f      	cmp	r0, #31
 801ea02:	ee24 7b07 	vmul.f64	d7, d4, d7
 801ea06:	ee30 6b47 	vsub.f64	d6, d0, d7
 801ea0a:	dc08      	bgt.n	801ea1e <__ieee754_rem_pio2+0xf6>
 801ea0c:	1e42      	subs	r2, r0, #1
 801ea0e:	4b61      	ldr	r3, [pc, #388]	; (801eb94 <__ieee754_rem_pio2+0x26c>)
 801ea10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ea14:	42b3      	cmp	r3, r6
 801ea16:	d002      	beq.n	801ea1e <__ieee754_rem_pio2+0xf6>
 801ea18:	ed84 6b00 	vstr	d6, [r4]
 801ea1c:	e022      	b.n	801ea64 <__ieee754_rem_pio2+0x13c>
 801ea1e:	ee16 3a90 	vmov	r3, s13
 801ea22:	1536      	asrs	r6, r6, #20
 801ea24:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ea28:	1af3      	subs	r3, r6, r3
 801ea2a:	2b10      	cmp	r3, #16
 801ea2c:	ddf4      	ble.n	801ea18 <__ieee754_rem_pio2+0xf0>
 801ea2e:	eeb0 6b40 	vmov.f64	d6, d0
 801ea32:	ed9f 3b49 	vldr	d3, [pc, #292]	; 801eb58 <__ieee754_rem_pio2+0x230>
 801ea36:	eea5 6b03 	vfma.f64	d6, d5, d3
 801ea3a:	ee30 7b46 	vsub.f64	d7, d0, d6
 801ea3e:	eea5 7b03 	vfma.f64	d7, d5, d3
 801ea42:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801eb60 <__ieee754_rem_pio2+0x238>
 801ea46:	ee94 7b03 	vfnms.f64	d7, d4, d3
 801ea4a:	ee36 3b47 	vsub.f64	d3, d6, d7
 801ea4e:	ee13 3a90 	vmov	r3, s7
 801ea52:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801ea56:	1af6      	subs	r6, r6, r3
 801ea58:	2e31      	cmp	r6, #49	; 0x31
 801ea5a:	dc17      	bgt.n	801ea8c <__ieee754_rem_pio2+0x164>
 801ea5c:	eeb0 0b46 	vmov.f64	d0, d6
 801ea60:	ed84 3b00 	vstr	d3, [r4]
 801ea64:	ed94 6b00 	vldr	d6, [r4]
 801ea68:	2d00      	cmp	r5, #0
 801ea6a:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ea6e:	ee30 7b47 	vsub.f64	d7, d0, d7
 801ea72:	ed84 7b02 	vstr	d7, [r4, #8]
 801ea76:	da87      	bge.n	801e988 <__ieee754_rem_pio2+0x60>
 801ea78:	eeb1 6b46 	vneg.f64	d6, d6
 801ea7c:	ed84 6b00 	vstr	d6, [r4]
 801ea80:	eeb1 7b47 	vneg.f64	d7, d7
 801ea84:	4240      	negs	r0, r0
 801ea86:	ed84 7b02 	vstr	d7, [r4, #8]
 801ea8a:	e77d      	b.n	801e988 <__ieee754_rem_pio2+0x60>
 801ea8c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 801eb70 <__ieee754_rem_pio2+0x248>
 801ea90:	eeb0 0b46 	vmov.f64	d0, d6
 801ea94:	eea5 0b03 	vfma.f64	d0, d5, d3
 801ea98:	ee36 7b40 	vsub.f64	d7, d6, d0
 801ea9c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 801eb78 <__ieee754_rem_pio2+0x250>
 801eaa0:	eea5 7b03 	vfma.f64	d7, d5, d3
 801eaa4:	ee94 7b06 	vfnms.f64	d7, d4, d6
 801eaa8:	ee30 6b47 	vsub.f64	d6, d0, d7
 801eaac:	e7b4      	b.n	801ea18 <__ieee754_rem_pio2+0xf0>
 801eaae:	4b3a      	ldr	r3, [pc, #232]	; (801eb98 <__ieee754_rem_pio2+0x270>)
 801eab0:	429e      	cmp	r6, r3
 801eab2:	dd06      	ble.n	801eac2 <__ieee754_rem_pio2+0x19a>
 801eab4:	ee30 7b40 	vsub.f64	d7, d0, d0
 801eab8:	ed80 7b02 	vstr	d7, [r0, #8]
 801eabc:	ed80 7b00 	vstr	d7, [r0]
 801eac0:	e744      	b.n	801e94c <__ieee754_rem_pio2+0x24>
 801eac2:	1532      	asrs	r2, r6, #20
 801eac4:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801eac8:	ee10 0a10 	vmov	r0, s0
 801eacc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801ead0:	ec41 0b17 	vmov	d7, r0, r1
 801ead4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801ead8:	ed9f 5b29 	vldr	d5, [pc, #164]	; 801eb80 <__ieee754_rem_pio2+0x258>
 801eadc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eae0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eae4:	ed8d 6b02 	vstr	d6, [sp, #8]
 801eae8:	ee27 7b05 	vmul.f64	d7, d7, d5
 801eaec:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801eaf0:	a908      	add	r1, sp, #32
 801eaf2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801eaf6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eafa:	ed8d 6b04 	vstr	d6, [sp, #16]
 801eafe:	ee27 7b05 	vmul.f64	d7, d7, d5
 801eb02:	ed8d 7b06 	vstr	d7, [sp, #24]
 801eb06:	2303      	movs	r3, #3
 801eb08:	ed31 7b02 	vldmdb	r1!, {d7}
 801eb0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801eb10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801eb14:	f103 30ff 	add.w	r0, r3, #4294967295
 801eb18:	d013      	beq.n	801eb42 <__ieee754_rem_pio2+0x21a>
 801eb1a:	4920      	ldr	r1, [pc, #128]	; (801eb9c <__ieee754_rem_pio2+0x274>)
 801eb1c:	9101      	str	r1, [sp, #4]
 801eb1e:	2102      	movs	r1, #2
 801eb20:	9100      	str	r1, [sp, #0]
 801eb22:	a802      	add	r0, sp, #8
 801eb24:	4621      	mov	r1, r4
 801eb26:	f000 f8a7 	bl	801ec78 <__kernel_rem_pio2>
 801eb2a:	2d00      	cmp	r5, #0
 801eb2c:	f6bf af2c 	bge.w	801e988 <__ieee754_rem_pio2+0x60>
 801eb30:	ed94 7b00 	vldr	d7, [r4]
 801eb34:	eeb1 7b47 	vneg.f64	d7, d7
 801eb38:	ed84 7b00 	vstr	d7, [r4]
 801eb3c:	ed94 7b02 	vldr	d7, [r4, #8]
 801eb40:	e79e      	b.n	801ea80 <__ieee754_rem_pio2+0x158>
 801eb42:	4603      	mov	r3, r0
 801eb44:	e7e0      	b.n	801eb08 <__ieee754_rem_pio2+0x1e0>
 801eb46:	bf00      	nop
 801eb48:	54400000 	.word	0x54400000
 801eb4c:	3ff921fb 	.word	0x3ff921fb
 801eb50:	1a626331 	.word	0x1a626331
 801eb54:	3dd0b461 	.word	0x3dd0b461
 801eb58:	1a600000 	.word	0x1a600000
 801eb5c:	3dd0b461 	.word	0x3dd0b461
 801eb60:	2e037073 	.word	0x2e037073
 801eb64:	3ba3198a 	.word	0x3ba3198a
 801eb68:	6dc9c883 	.word	0x6dc9c883
 801eb6c:	3fe45f30 	.word	0x3fe45f30
 801eb70:	2e000000 	.word	0x2e000000
 801eb74:	3ba3198a 	.word	0x3ba3198a
 801eb78:	252049c1 	.word	0x252049c1
 801eb7c:	397b839a 	.word	0x397b839a
 801eb80:	00000000 	.word	0x00000000
 801eb84:	41700000 	.word	0x41700000
 801eb88:	3fe921fb 	.word	0x3fe921fb
 801eb8c:	4002d97b 	.word	0x4002d97b
 801eb90:	413921fb 	.word	0x413921fb
 801eb94:	0801f6a8 	.word	0x0801f6a8
 801eb98:	7fefffff 	.word	0x7fefffff
 801eb9c:	0801f728 	.word	0x0801f728

0801eba0 <__kernel_cos>:
 801eba0:	ee10 1a90 	vmov	r1, s1
 801eba4:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801eba8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ebac:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 801ebb0:	da05      	bge.n	801ebbe <__kernel_cos+0x1e>
 801ebb2:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801ebb6:	ee16 3a90 	vmov	r3, s13
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d03d      	beq.n	801ec3a <__kernel_cos+0x9a>
 801ebbe:	ee20 4b00 	vmul.f64	d4, d0, d0
 801ebc2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801ebc6:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 801ec40 <__kernel_cos+0xa0>
 801ebca:	ee21 1b40 	vnmul.f64	d1, d1, d0
 801ebce:	ee24 6b06 	vmul.f64	d6, d4, d6
 801ebd2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801ec48 <__kernel_cos+0xa8>
 801ebd6:	eea4 5b03 	vfma.f64	d5, d4, d3
 801ebda:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801ec50 <__kernel_cos+0xb0>
 801ebde:	eea5 3b04 	vfma.f64	d3, d5, d4
 801ebe2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 801ec58 <__kernel_cos+0xb8>
 801ebe6:	eea3 5b04 	vfma.f64	d5, d3, d4
 801ebea:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 801ec60 <__kernel_cos+0xc0>
 801ebee:	4b20      	ldr	r3, [pc, #128]	; (801ec70 <__kernel_cos+0xd0>)
 801ebf0:	eea5 3b04 	vfma.f64	d3, d5, d4
 801ebf4:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 801ec68 <__kernel_cos+0xc8>
 801ebf8:	4299      	cmp	r1, r3
 801ebfa:	eea3 5b04 	vfma.f64	d5, d3, d4
 801ebfe:	ee25 5b04 	vmul.f64	d5, d5, d4
 801ec02:	eea4 1b05 	vfma.f64	d1, d4, d5
 801ec06:	dc04      	bgt.n	801ec12 <__kernel_cos+0x72>
 801ec08:	ee36 6b41 	vsub.f64	d6, d6, d1
 801ec0c:	ee37 0b46 	vsub.f64	d0, d7, d6
 801ec10:	4770      	bx	lr
 801ec12:	4b18      	ldr	r3, [pc, #96]	; (801ec74 <__kernel_cos+0xd4>)
 801ec14:	4299      	cmp	r1, r3
 801ec16:	dc0d      	bgt.n	801ec34 <__kernel_cos+0x94>
 801ec18:	2200      	movs	r2, #0
 801ec1a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 801ec1e:	ec43 2b15 	vmov	d5, r2, r3
 801ec22:	ee37 0b45 	vsub.f64	d0, d7, d5
 801ec26:	ee36 6b45 	vsub.f64	d6, d6, d5
 801ec2a:	ee36 6b41 	vsub.f64	d6, d6, d1
 801ec2e:	ee30 0b46 	vsub.f64	d0, d0, d6
 801ec32:	4770      	bx	lr
 801ec34:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 801ec38:	e7f3      	b.n	801ec22 <__kernel_cos+0x82>
 801ec3a:	eeb0 0b47 	vmov.f64	d0, d7
 801ec3e:	4770      	bx	lr
 801ec40:	be8838d4 	.word	0xbe8838d4
 801ec44:	bda8fae9 	.word	0xbda8fae9
 801ec48:	bdb4b1c4 	.word	0xbdb4b1c4
 801ec4c:	3e21ee9e 	.word	0x3e21ee9e
 801ec50:	809c52ad 	.word	0x809c52ad
 801ec54:	be927e4f 	.word	0xbe927e4f
 801ec58:	19cb1590 	.word	0x19cb1590
 801ec5c:	3efa01a0 	.word	0x3efa01a0
 801ec60:	16c15177 	.word	0x16c15177
 801ec64:	bf56c16c 	.word	0xbf56c16c
 801ec68:	5555554c 	.word	0x5555554c
 801ec6c:	3fa55555 	.word	0x3fa55555
 801ec70:	3fd33332 	.word	0x3fd33332
 801ec74:	3fe90000 	.word	0x3fe90000

0801ec78 <__kernel_rem_pio2>:
 801ec78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec7c:	ed2d 8b06 	vpush	{d8-d10}
 801ec80:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801ec84:	469b      	mov	fp, r3
 801ec86:	460e      	mov	r6, r1
 801ec88:	4bc7      	ldr	r3, [pc, #796]	; (801efa8 <__kernel_rem_pio2+0x330>)
 801ec8a:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801ec8c:	9002      	str	r0, [sp, #8]
 801ec8e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 801ec92:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 801ec94:	1ed1      	subs	r1, r2, #3
 801ec96:	2318      	movs	r3, #24
 801ec98:	f06f 0417 	mvn.w	r4, #23
 801ec9c:	fb91 f1f3 	sdiv	r1, r1, r3
 801eca0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 801eca4:	f10b 3aff 	add.w	sl, fp, #4294967295
 801eca8:	fb01 4404 	mla	r4, r1, r4, r4
 801ecac:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 801ef90 <__kernel_rem_pio2+0x318>
 801ecb0:	4414      	add	r4, r2
 801ecb2:	eba1 050a 	sub.w	r5, r1, sl
 801ecb6:	aa1a      	add	r2, sp, #104	; 0x68
 801ecb8:	eb09 070a 	add.w	r7, r9, sl
 801ecbc:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 801ecc0:	4696      	mov	lr, r2
 801ecc2:	2300      	movs	r3, #0
 801ecc4:	42bb      	cmp	r3, r7
 801ecc6:	dd0f      	ble.n	801ece8 <__kernel_rem_pio2+0x70>
 801ecc8:	af6a      	add	r7, sp, #424	; 0x1a8
 801ecca:	2200      	movs	r2, #0
 801eccc:	454a      	cmp	r2, r9
 801ecce:	dc28      	bgt.n	801ed22 <__kernel_rem_pio2+0xaa>
 801ecd0:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 801ecd4:	eb0b 0302 	add.w	r3, fp, r2
 801ecd8:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 801ecdc:	9d02      	ldr	r5, [sp, #8]
 801ecde:	ed9f 7bac 	vldr	d7, [pc, #688]	; 801ef90 <__kernel_rem_pio2+0x318>
 801ece2:	f04f 0c00 	mov.w	ip, #0
 801ece6:	e016      	b.n	801ed16 <__kernel_rem_pio2+0x9e>
 801ece8:	42dd      	cmn	r5, r3
 801ecea:	d409      	bmi.n	801ed00 <__kernel_rem_pio2+0x88>
 801ecec:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801ecf0:	ee07 2a90 	vmov	s15, r2
 801ecf4:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ecf8:	ecae 7b02 	vstmia	lr!, {d7}
 801ecfc:	3301      	adds	r3, #1
 801ecfe:	e7e1      	b.n	801ecc4 <__kernel_rem_pio2+0x4c>
 801ed00:	eeb0 7b46 	vmov.f64	d7, d6
 801ed04:	e7f8      	b.n	801ecf8 <__kernel_rem_pio2+0x80>
 801ed06:	ecb5 5b02 	vldmia	r5!, {d5}
 801ed0a:	ed33 6b02 	vldmdb	r3!, {d6}
 801ed0e:	f10c 0c01 	add.w	ip, ip, #1
 801ed12:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ed16:	45d4      	cmp	ip, sl
 801ed18:	ddf5      	ble.n	801ed06 <__kernel_rem_pio2+0x8e>
 801ed1a:	eca7 7b02 	vstmia	r7!, {d7}
 801ed1e:	3201      	adds	r2, #1
 801ed20:	e7d4      	b.n	801eccc <__kernel_rem_pio2+0x54>
 801ed22:	ab06      	add	r3, sp, #24
 801ed24:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801ed28:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 801ef98 <__kernel_rem_pio2+0x320>
 801ed2c:	ed9f ab9c 	vldr	d10, [pc, #624]	; 801efa0 <__kernel_rem_pio2+0x328>
 801ed30:	9304      	str	r3, [sp, #16]
 801ed32:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 801ed36:	9303      	str	r3, [sp, #12]
 801ed38:	464d      	mov	r5, r9
 801ed3a:	ab92      	add	r3, sp, #584	; 0x248
 801ed3c:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 801ed40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ed44:	3f01      	subs	r7, #1
 801ed46:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 801ed4a:	00ff      	lsls	r7, r7, #3
 801ed4c:	ab92      	add	r3, sp, #584	; 0x248
 801ed4e:	19da      	adds	r2, r3, r7
 801ed50:	3a98      	subs	r2, #152	; 0x98
 801ed52:	2300      	movs	r3, #0
 801ed54:	1ae9      	subs	r1, r5, r3
 801ed56:	2900      	cmp	r1, #0
 801ed58:	dc4e      	bgt.n	801edf8 <__kernel_rem_pio2+0x180>
 801ed5a:	4620      	mov	r0, r4
 801ed5c:	f000 fb10 	bl	801f380 <scalbn>
 801ed60:	eeb0 8b40 	vmov.f64	d8, d0
 801ed64:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801ed68:	ee28 0b00 	vmul.f64	d0, d8, d0
 801ed6c:	f000 fa8c 	bl	801f288 <floor>
 801ed70:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801ed74:	eea0 8b47 	vfms.f64	d8, d0, d7
 801ed78:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801ed7c:	2c00      	cmp	r4, #0
 801ed7e:	edcd 7a01 	vstr	s15, [sp, #4]
 801ed82:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ed86:	ee38 8b47 	vsub.f64	d8, d8, d7
 801ed8a:	dd4a      	ble.n	801ee22 <__kernel_rem_pio2+0x1aa>
 801ed8c:	1e69      	subs	r1, r5, #1
 801ed8e:	ab06      	add	r3, sp, #24
 801ed90:	f1c4 0018 	rsb	r0, r4, #24
 801ed94:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 801ed98:	9a01      	ldr	r2, [sp, #4]
 801ed9a:	fa4c f300 	asr.w	r3, ip, r0
 801ed9e:	441a      	add	r2, r3
 801eda0:	4083      	lsls	r3, r0
 801eda2:	9201      	str	r2, [sp, #4]
 801eda4:	ebac 0203 	sub.w	r2, ip, r3
 801eda8:	ab06      	add	r3, sp, #24
 801edaa:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 801edae:	f1c4 0317 	rsb	r3, r4, #23
 801edb2:	fa42 f803 	asr.w	r8, r2, r3
 801edb6:	f1b8 0f00 	cmp.w	r8, #0
 801edba:	dd43      	ble.n	801ee44 <__kernel_rem_pio2+0x1cc>
 801edbc:	9b01      	ldr	r3, [sp, #4]
 801edbe:	2000      	movs	r0, #0
 801edc0:	3301      	adds	r3, #1
 801edc2:	9301      	str	r3, [sp, #4]
 801edc4:	4601      	mov	r1, r0
 801edc6:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 801edca:	4285      	cmp	r5, r0
 801edcc:	dc6e      	bgt.n	801eeac <__kernel_rem_pio2+0x234>
 801edce:	2c00      	cmp	r4, #0
 801edd0:	dd04      	ble.n	801eddc <__kernel_rem_pio2+0x164>
 801edd2:	2c01      	cmp	r4, #1
 801edd4:	d07f      	beq.n	801eed6 <__kernel_rem_pio2+0x25e>
 801edd6:	2c02      	cmp	r4, #2
 801edd8:	f000 8087 	beq.w	801eeea <__kernel_rem_pio2+0x272>
 801eddc:	f1b8 0f02 	cmp.w	r8, #2
 801ede0:	d130      	bne.n	801ee44 <__kernel_rem_pio2+0x1cc>
 801ede2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ede6:	ee30 8b48 	vsub.f64	d8, d0, d8
 801edea:	b359      	cbz	r1, 801ee44 <__kernel_rem_pio2+0x1cc>
 801edec:	4620      	mov	r0, r4
 801edee:	f000 fac7 	bl	801f380 <scalbn>
 801edf2:	ee38 8b40 	vsub.f64	d8, d8, d0
 801edf6:	e025      	b.n	801ee44 <__kernel_rem_pio2+0x1cc>
 801edf8:	ee20 7b09 	vmul.f64	d7, d0, d9
 801edfc:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801ee00:	a806      	add	r0, sp, #24
 801ee02:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801ee06:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801ee0a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ee0e:	ee10 1a10 	vmov	r1, s0
 801ee12:	ed32 0b02 	vldmdb	r2!, {d0}
 801ee16:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 801ee1a:	ee37 0b00 	vadd.f64	d0, d7, d0
 801ee1e:	3301      	adds	r3, #1
 801ee20:	e798      	b.n	801ed54 <__kernel_rem_pio2+0xdc>
 801ee22:	d106      	bne.n	801ee32 <__kernel_rem_pio2+0x1ba>
 801ee24:	1e6b      	subs	r3, r5, #1
 801ee26:	aa06      	add	r2, sp, #24
 801ee28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801ee2c:	ea4f 58e2 	mov.w	r8, r2, asr #23
 801ee30:	e7c1      	b.n	801edb6 <__kernel_rem_pio2+0x13e>
 801ee32:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801ee36:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801ee3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee3e:	da32      	bge.n	801eea6 <__kernel_rem_pio2+0x22e>
 801ee40:	f04f 0800 	mov.w	r8, #0
 801ee44:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801ee48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ee4c:	f040 80b0 	bne.w	801efb0 <__kernel_rem_pio2+0x338>
 801ee50:	1e6b      	subs	r3, r5, #1
 801ee52:	4618      	mov	r0, r3
 801ee54:	2200      	movs	r2, #0
 801ee56:	4548      	cmp	r0, r9
 801ee58:	da4e      	bge.n	801eef8 <__kernel_rem_pio2+0x280>
 801ee5a:	2a00      	cmp	r2, #0
 801ee5c:	f000 8088 	beq.w	801ef70 <__kernel_rem_pio2+0x2f8>
 801ee60:	aa06      	add	r2, sp, #24
 801ee62:	3c18      	subs	r4, #24
 801ee64:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801ee68:	2900      	cmp	r1, #0
 801ee6a:	f000 808e 	beq.w	801ef8a <__kernel_rem_pio2+0x312>
 801ee6e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801ee72:	4620      	mov	r0, r4
 801ee74:	9302      	str	r3, [sp, #8]
 801ee76:	f000 fa83 	bl	801f380 <scalbn>
 801ee7a:	9b02      	ldr	r3, [sp, #8]
 801ee7c:	aa6a      	add	r2, sp, #424	; 0x1a8
 801ee7e:	00d9      	lsls	r1, r3, #3
 801ee80:	ed9f 6b45 	vldr	d6, [pc, #276]	; 801ef98 <__kernel_rem_pio2+0x320>
 801ee84:	1850      	adds	r0, r2, r1
 801ee86:	f100 0508 	add.w	r5, r0, #8
 801ee8a:	461c      	mov	r4, r3
 801ee8c:	2c00      	cmp	r4, #0
 801ee8e:	f280 80bd 	bge.w	801f00c <__kernel_rem_pio2+0x394>
 801ee92:	2500      	movs	r5, #0
 801ee94:	1b5c      	subs	r4, r3, r5
 801ee96:	2c00      	cmp	r4, #0
 801ee98:	f2c0 80dd 	blt.w	801f056 <__kernel_rem_pio2+0x3de>
 801ee9c:	4f43      	ldr	r7, [pc, #268]	; (801efac <__kernel_rem_pio2+0x334>)
 801ee9e:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 801ef90 <__kernel_rem_pio2+0x318>
 801eea2:	2400      	movs	r4, #0
 801eea4:	e0cb      	b.n	801f03e <__kernel_rem_pio2+0x3c6>
 801eea6:	f04f 0802 	mov.w	r8, #2
 801eeaa:	e787      	b.n	801edbc <__kernel_rem_pio2+0x144>
 801eeac:	ab06      	add	r3, sp, #24
 801eeae:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801eeb2:	b949      	cbnz	r1, 801eec8 <__kernel_rem_pio2+0x250>
 801eeb4:	b12b      	cbz	r3, 801eec2 <__kernel_rem_pio2+0x24a>
 801eeb6:	aa06      	add	r2, sp, #24
 801eeb8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801eebc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801eec0:	2301      	movs	r3, #1
 801eec2:	3001      	adds	r0, #1
 801eec4:	4619      	mov	r1, r3
 801eec6:	e780      	b.n	801edca <__kernel_rem_pio2+0x152>
 801eec8:	aa06      	add	r2, sp, #24
 801eeca:	ebac 0303 	sub.w	r3, ip, r3
 801eece:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801eed2:	460b      	mov	r3, r1
 801eed4:	e7f5      	b.n	801eec2 <__kernel_rem_pio2+0x24a>
 801eed6:	1e68      	subs	r0, r5, #1
 801eed8:	ab06      	add	r3, sp, #24
 801eeda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801eede:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801eee2:	aa06      	add	r2, sp, #24
 801eee4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 801eee8:	e778      	b.n	801eddc <__kernel_rem_pio2+0x164>
 801eeea:	1e68      	subs	r0, r5, #1
 801eeec:	ab06      	add	r3, sp, #24
 801eeee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801eef2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801eef6:	e7f4      	b.n	801eee2 <__kernel_rem_pio2+0x26a>
 801eef8:	a906      	add	r1, sp, #24
 801eefa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801eefe:	3801      	subs	r0, #1
 801ef00:	430a      	orrs	r2, r1
 801ef02:	e7a8      	b.n	801ee56 <__kernel_rem_pio2+0x1de>
 801ef04:	f10c 0c01 	add.w	ip, ip, #1
 801ef08:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801ef0c:	2a00      	cmp	r2, #0
 801ef0e:	d0f9      	beq.n	801ef04 <__kernel_rem_pio2+0x28c>
 801ef10:	eb0b 0305 	add.w	r3, fp, r5
 801ef14:	aa1a      	add	r2, sp, #104	; 0x68
 801ef16:	00db      	lsls	r3, r3, #3
 801ef18:	1898      	adds	r0, r3, r2
 801ef1a:	3008      	adds	r0, #8
 801ef1c:	1c69      	adds	r1, r5, #1
 801ef1e:	3708      	adds	r7, #8
 801ef20:	2200      	movs	r2, #0
 801ef22:	4465      	add	r5, ip
 801ef24:	9005      	str	r0, [sp, #20]
 801ef26:	428d      	cmp	r5, r1
 801ef28:	f6ff af07 	blt.w	801ed3a <__kernel_rem_pio2+0xc2>
 801ef2c:	a81a      	add	r0, sp, #104	; 0x68
 801ef2e:	eb02 0c03 	add.w	ip, r2, r3
 801ef32:	4484      	add	ip, r0
 801ef34:	9803      	ldr	r0, [sp, #12]
 801ef36:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ef3a:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 801ef3e:	9001      	str	r0, [sp, #4]
 801ef40:	ee07 0a90 	vmov	s15, r0
 801ef44:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ef48:	9805      	ldr	r0, [sp, #20]
 801ef4a:	ed8c 7b00 	vstr	d7, [ip]
 801ef4e:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ef90 <__kernel_rem_pio2+0x318>
 801ef52:	eb00 0802 	add.w	r8, r0, r2
 801ef56:	f04f 0c00 	mov.w	ip, #0
 801ef5a:	45d4      	cmp	ip, sl
 801ef5c:	dd0c      	ble.n	801ef78 <__kernel_rem_pio2+0x300>
 801ef5e:	eb02 0c07 	add.w	ip, r2, r7
 801ef62:	a86a      	add	r0, sp, #424	; 0x1a8
 801ef64:	4484      	add	ip, r0
 801ef66:	ed8c 7b02 	vstr	d7, [ip, #8]
 801ef6a:	3101      	adds	r1, #1
 801ef6c:	3208      	adds	r2, #8
 801ef6e:	e7da      	b.n	801ef26 <__kernel_rem_pio2+0x2ae>
 801ef70:	9b04      	ldr	r3, [sp, #16]
 801ef72:	f04f 0c01 	mov.w	ip, #1
 801ef76:	e7c7      	b.n	801ef08 <__kernel_rem_pio2+0x290>
 801ef78:	ecbe 5b02 	vldmia	lr!, {d5}
 801ef7c:	ed38 6b02 	vldmdb	r8!, {d6}
 801ef80:	f10c 0c01 	add.w	ip, ip, #1
 801ef84:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ef88:	e7e7      	b.n	801ef5a <__kernel_rem_pio2+0x2e2>
 801ef8a:	3b01      	subs	r3, #1
 801ef8c:	e768      	b.n	801ee60 <__kernel_rem_pio2+0x1e8>
 801ef8e:	bf00      	nop
	...
 801ef9c:	3e700000 	.word	0x3e700000
 801efa0:	00000000 	.word	0x00000000
 801efa4:	41700000 	.word	0x41700000
 801efa8:	0801f870 	.word	0x0801f870
 801efac:	0801f830 	.word	0x0801f830
 801efb0:	4260      	negs	r0, r4
 801efb2:	eeb0 0b48 	vmov.f64	d0, d8
 801efb6:	f000 f9e3 	bl	801f380 <scalbn>
 801efba:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801f198 <__kernel_rem_pio2+0x520>
 801efbe:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801efc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efc6:	db18      	blt.n	801effa <__kernel_rem_pio2+0x382>
 801efc8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801f1a0 <__kernel_rem_pio2+0x528>
 801efcc:	ee20 7b07 	vmul.f64	d7, d0, d7
 801efd0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801efd4:	aa06      	add	r2, sp, #24
 801efd6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801efda:	eea5 0b46 	vfms.f64	d0, d5, d6
 801efde:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801efe2:	a906      	add	r1, sp, #24
 801efe4:	ee10 3a10 	vmov	r3, s0
 801efe8:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801efec:	1c6b      	adds	r3, r5, #1
 801efee:	ee17 2a10 	vmov	r2, s14
 801eff2:	3418      	adds	r4, #24
 801eff4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801eff8:	e739      	b.n	801ee6e <__kernel_rem_pio2+0x1f6>
 801effa:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801effe:	aa06      	add	r2, sp, #24
 801f000:	ee10 3a10 	vmov	r3, s0
 801f004:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801f008:	462b      	mov	r3, r5
 801f00a:	e730      	b.n	801ee6e <__kernel_rem_pio2+0x1f6>
 801f00c:	aa06      	add	r2, sp, #24
 801f00e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801f012:	9202      	str	r2, [sp, #8]
 801f014:	ee07 2a90 	vmov	s15, r2
 801f018:	3c01      	subs	r4, #1
 801f01a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801f01e:	ee27 7b00 	vmul.f64	d7, d7, d0
 801f022:	ee20 0b06 	vmul.f64	d0, d0, d6
 801f026:	ed25 7b02 	vstmdb	r5!, {d7}
 801f02a:	e72f      	b.n	801ee8c <__kernel_rem_pio2+0x214>
 801f02c:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 801f030:	ecb7 5b02 	vldmia	r7!, {d5}
 801f034:	ed9c 6b00 	vldr	d6, [ip]
 801f038:	3401      	adds	r4, #1
 801f03a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801f03e:	454c      	cmp	r4, r9
 801f040:	dc01      	bgt.n	801f046 <__kernel_rem_pio2+0x3ce>
 801f042:	42a5      	cmp	r5, r4
 801f044:	daf2      	bge.n	801f02c <__kernel_rem_pio2+0x3b4>
 801f046:	aa42      	add	r2, sp, #264	; 0x108
 801f048:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 801f04c:	ed84 7b00 	vstr	d7, [r4]
 801f050:	3501      	adds	r5, #1
 801f052:	3808      	subs	r0, #8
 801f054:	e71e      	b.n	801ee94 <__kernel_rem_pio2+0x21c>
 801f056:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801f058:	2a03      	cmp	r2, #3
 801f05a:	d84e      	bhi.n	801f0fa <__kernel_rem_pio2+0x482>
 801f05c:	e8df f002 	tbb	[pc, r2]
 801f060:	021f1f3e 	.word	0x021f1f3e
 801f064:	3108      	adds	r1, #8
 801f066:	aa42      	add	r2, sp, #264	; 0x108
 801f068:	4411      	add	r1, r2
 801f06a:	4608      	mov	r0, r1
 801f06c:	461c      	mov	r4, r3
 801f06e:	2c00      	cmp	r4, #0
 801f070:	dc61      	bgt.n	801f136 <__kernel_rem_pio2+0x4be>
 801f072:	4608      	mov	r0, r1
 801f074:	461c      	mov	r4, r3
 801f076:	2c01      	cmp	r4, #1
 801f078:	dc6d      	bgt.n	801f156 <__kernel_rem_pio2+0x4de>
 801f07a:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 801f1a8 <__kernel_rem_pio2+0x530>
 801f07e:	2b01      	cmp	r3, #1
 801f080:	dc79      	bgt.n	801f176 <__kernel_rem_pio2+0x4fe>
 801f082:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801f086:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801f08a:	f1b8 0f00 	cmp.w	r8, #0
 801f08e:	d178      	bne.n	801f182 <__kernel_rem_pio2+0x50a>
 801f090:	ed86 5b00 	vstr	d5, [r6]
 801f094:	ed86 6b02 	vstr	d6, [r6, #8]
 801f098:	ed86 7b04 	vstr	d7, [r6, #16]
 801f09c:	e02d      	b.n	801f0fa <__kernel_rem_pio2+0x482>
 801f09e:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801f1a8 <__kernel_rem_pio2+0x530>
 801f0a2:	3108      	adds	r1, #8
 801f0a4:	aa42      	add	r2, sp, #264	; 0x108
 801f0a6:	4411      	add	r1, r2
 801f0a8:	4618      	mov	r0, r3
 801f0aa:	2800      	cmp	r0, #0
 801f0ac:	da34      	bge.n	801f118 <__kernel_rem_pio2+0x4a0>
 801f0ae:	f1b8 0f00 	cmp.w	r8, #0
 801f0b2:	d037      	beq.n	801f124 <__kernel_rem_pio2+0x4ac>
 801f0b4:	eeb1 7b46 	vneg.f64	d7, d6
 801f0b8:	ed86 7b00 	vstr	d7, [r6]
 801f0bc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801f0c0:	a844      	add	r0, sp, #272	; 0x110
 801f0c2:	2101      	movs	r1, #1
 801f0c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f0c8:	428b      	cmp	r3, r1
 801f0ca:	da2e      	bge.n	801f12a <__kernel_rem_pio2+0x4b2>
 801f0cc:	f1b8 0f00 	cmp.w	r8, #0
 801f0d0:	d001      	beq.n	801f0d6 <__kernel_rem_pio2+0x45e>
 801f0d2:	eeb1 7b47 	vneg.f64	d7, d7
 801f0d6:	ed86 7b02 	vstr	d7, [r6, #8]
 801f0da:	e00e      	b.n	801f0fa <__kernel_rem_pio2+0x482>
 801f0dc:	aa92      	add	r2, sp, #584	; 0x248
 801f0de:	ed9f 7b32 	vldr	d7, [pc, #200]	; 801f1a8 <__kernel_rem_pio2+0x530>
 801f0e2:	4411      	add	r1, r2
 801f0e4:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 801f0e8:	2b00      	cmp	r3, #0
 801f0ea:	da0f      	bge.n	801f10c <__kernel_rem_pio2+0x494>
 801f0ec:	f1b8 0f00 	cmp.w	r8, #0
 801f0f0:	d001      	beq.n	801f0f6 <__kernel_rem_pio2+0x47e>
 801f0f2:	eeb1 7b47 	vneg.f64	d7, d7
 801f0f6:	ed86 7b00 	vstr	d7, [r6]
 801f0fa:	9b01      	ldr	r3, [sp, #4]
 801f0fc:	f003 0007 	and.w	r0, r3, #7
 801f100:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801f104:	ecbd 8b06 	vpop	{d8-d10}
 801f108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f10c:	ed31 6b02 	vldmdb	r1!, {d6}
 801f110:	3b01      	subs	r3, #1
 801f112:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f116:	e7e7      	b.n	801f0e8 <__kernel_rem_pio2+0x470>
 801f118:	ed31 7b02 	vldmdb	r1!, {d7}
 801f11c:	3801      	subs	r0, #1
 801f11e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801f122:	e7c2      	b.n	801f0aa <__kernel_rem_pio2+0x432>
 801f124:	eeb0 7b46 	vmov.f64	d7, d6
 801f128:	e7c6      	b.n	801f0b8 <__kernel_rem_pio2+0x440>
 801f12a:	ecb0 6b02 	vldmia	r0!, {d6}
 801f12e:	3101      	adds	r1, #1
 801f130:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f134:	e7c8      	b.n	801f0c8 <__kernel_rem_pio2+0x450>
 801f136:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f13a:	ed30 5b02 	vldmdb	r0!, {d5}
 801f13e:	3c01      	subs	r4, #1
 801f140:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f144:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f148:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f14c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f150:	ed80 7b00 	vstr	d7, [r0]
 801f154:	e78b      	b.n	801f06e <__kernel_rem_pio2+0x3f6>
 801f156:	ed10 7b04 	vldr	d7, [r0, #-16]
 801f15a:	ed30 5b02 	vldmdb	r0!, {d5}
 801f15e:	3c01      	subs	r4, #1
 801f160:	ee37 6b05 	vadd.f64	d6, d7, d5
 801f164:	ee37 7b46 	vsub.f64	d7, d7, d6
 801f168:	ed00 6b02 	vstr	d6, [r0, #-8]
 801f16c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801f170:	ed80 7b00 	vstr	d7, [r0]
 801f174:	e77f      	b.n	801f076 <__kernel_rem_pio2+0x3fe>
 801f176:	ed31 6b02 	vldmdb	r1!, {d6}
 801f17a:	3b01      	subs	r3, #1
 801f17c:	ee37 7b06 	vadd.f64	d7, d7, d6
 801f180:	e77d      	b.n	801f07e <__kernel_rem_pio2+0x406>
 801f182:	eeb1 5b45 	vneg.f64	d5, d5
 801f186:	eeb1 6b46 	vneg.f64	d6, d6
 801f18a:	ed86 5b00 	vstr	d5, [r6]
 801f18e:	eeb1 7b47 	vneg.f64	d7, d7
 801f192:	ed86 6b02 	vstr	d6, [r6, #8]
 801f196:	e77f      	b.n	801f098 <__kernel_rem_pio2+0x420>
 801f198:	00000000 	.word	0x00000000
 801f19c:	41700000 	.word	0x41700000
 801f1a0:	00000000 	.word	0x00000000
 801f1a4:	3e700000 	.word	0x3e700000
	...

0801f1b0 <__kernel_sin>:
 801f1b0:	ee10 3a90 	vmov	r3, s1
 801f1b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f1b8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801f1bc:	da04      	bge.n	801f1c8 <__kernel_sin+0x18>
 801f1be:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 801f1c2:	ee17 3a90 	vmov	r3, s15
 801f1c6:	b35b      	cbz	r3, 801f220 <__kernel_sin+0x70>
 801f1c8:	ee20 6b00 	vmul.f64	d6, d0, d0
 801f1cc:	ee20 5b06 	vmul.f64	d5, d0, d6
 801f1d0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 801f228 <__kernel_sin+0x78>
 801f1d4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f230 <__kernel_sin+0x80>
 801f1d8:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f1dc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f238 <__kernel_sin+0x88>
 801f1e0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f1e4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f240 <__kernel_sin+0x90>
 801f1e8:	eea7 4b06 	vfma.f64	d4, d7, d6
 801f1ec:	ed9f 7b16 	vldr	d7, [pc, #88]	; 801f248 <__kernel_sin+0x98>
 801f1f0:	eea4 7b06 	vfma.f64	d7, d4, d6
 801f1f4:	b930      	cbnz	r0, 801f204 <__kernel_sin+0x54>
 801f1f6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 801f250 <__kernel_sin+0xa0>
 801f1fa:	eea6 4b07 	vfma.f64	d4, d6, d7
 801f1fe:	eea4 0b05 	vfma.f64	d0, d4, d5
 801f202:	4770      	bx	lr
 801f204:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801f208:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 801f20c:	eea1 7b04 	vfma.f64	d7, d1, d4
 801f210:	ee97 1b06 	vfnms.f64	d1, d7, d6
 801f214:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801f258 <__kernel_sin+0xa8>
 801f218:	eea5 1b07 	vfma.f64	d1, d5, d7
 801f21c:	ee30 0b41 	vsub.f64	d0, d0, d1
 801f220:	4770      	bx	lr
 801f222:	bf00      	nop
 801f224:	f3af 8000 	nop.w
 801f228:	5acfd57c 	.word	0x5acfd57c
 801f22c:	3de5d93a 	.word	0x3de5d93a
 801f230:	8a2b9ceb 	.word	0x8a2b9ceb
 801f234:	be5ae5e6 	.word	0xbe5ae5e6
 801f238:	57b1fe7d 	.word	0x57b1fe7d
 801f23c:	3ec71de3 	.word	0x3ec71de3
 801f240:	19c161d5 	.word	0x19c161d5
 801f244:	bf2a01a0 	.word	0xbf2a01a0
 801f248:	1110f8a6 	.word	0x1110f8a6
 801f24c:	3f811111 	.word	0x3f811111
 801f250:	55555549 	.word	0x55555549
 801f254:	bfc55555 	.word	0xbfc55555
 801f258:	55555549 	.word	0x55555549
 801f25c:	3fc55555 	.word	0x3fc55555

0801f260 <fabs>:
 801f260:	ec51 0b10 	vmov	r0, r1, d0
 801f264:	ee10 2a10 	vmov	r2, s0
 801f268:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f26c:	ec43 2b10 	vmov	d0, r2, r3
 801f270:	4770      	bx	lr

0801f272 <finite>:
 801f272:	ee10 3a90 	vmov	r3, s1
 801f276:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801f27a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801f27e:	0fc0      	lsrs	r0, r0, #31
 801f280:	4770      	bx	lr
 801f282:	0000      	movs	r0, r0
 801f284:	0000      	movs	r0, r0
	...

0801f288 <floor>:
 801f288:	ee10 1a90 	vmov	r1, s1
 801f28c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f290:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f294:	2b13      	cmp	r3, #19
 801f296:	b530      	push	{r4, r5, lr}
 801f298:	ee10 0a10 	vmov	r0, s0
 801f29c:	ee10 5a10 	vmov	r5, s0
 801f2a0:	dc33      	bgt.n	801f30a <floor+0x82>
 801f2a2:	2b00      	cmp	r3, #0
 801f2a4:	da17      	bge.n	801f2d6 <floor+0x4e>
 801f2a6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f368 <floor+0xe0>
 801f2aa:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f2ae:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f2b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2b6:	dd09      	ble.n	801f2cc <floor+0x44>
 801f2b8:	2900      	cmp	r1, #0
 801f2ba:	da50      	bge.n	801f35e <floor+0xd6>
 801f2bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f2c0:	4a2b      	ldr	r2, [pc, #172]	; (801f370 <floor+0xe8>)
 801f2c2:	4303      	orrs	r3, r0
 801f2c4:	2000      	movs	r0, #0
 801f2c6:	4283      	cmp	r3, r0
 801f2c8:	bf18      	it	ne
 801f2ca:	4611      	movne	r1, r2
 801f2cc:	460b      	mov	r3, r1
 801f2ce:	4602      	mov	r2, r0
 801f2d0:	ec43 2b10 	vmov	d0, r2, r3
 801f2d4:	e020      	b.n	801f318 <floor+0x90>
 801f2d6:	4a27      	ldr	r2, [pc, #156]	; (801f374 <floor+0xec>)
 801f2d8:	411a      	asrs	r2, r3
 801f2da:	ea01 0402 	and.w	r4, r1, r2
 801f2de:	4304      	orrs	r4, r0
 801f2e0:	d01a      	beq.n	801f318 <floor+0x90>
 801f2e2:	ed9f 7b21 	vldr	d7, [pc, #132]	; 801f368 <floor+0xe0>
 801f2e6:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f2ea:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f2f2:	ddeb      	ble.n	801f2cc <floor+0x44>
 801f2f4:	2900      	cmp	r1, #0
 801f2f6:	bfbe      	ittt	lt
 801f2f8:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f2fc:	fa40 f303 	asrlt.w	r3, r0, r3
 801f300:	18c9      	addlt	r1, r1, r3
 801f302:	ea21 0102 	bic.w	r1, r1, r2
 801f306:	2000      	movs	r0, #0
 801f308:	e7e0      	b.n	801f2cc <floor+0x44>
 801f30a:	2b33      	cmp	r3, #51	; 0x33
 801f30c:	dd05      	ble.n	801f31a <floor+0x92>
 801f30e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f312:	d101      	bne.n	801f318 <floor+0x90>
 801f314:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f318:	bd30      	pop	{r4, r5, pc}
 801f31a:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f31e:	f04f 32ff 	mov.w	r2, #4294967295
 801f322:	40e2      	lsrs	r2, r4
 801f324:	4202      	tst	r2, r0
 801f326:	d0f7      	beq.n	801f318 <floor+0x90>
 801f328:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801f368 <floor+0xe0>
 801f32c:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f330:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f338:	ddc8      	ble.n	801f2cc <floor+0x44>
 801f33a:	2900      	cmp	r1, #0
 801f33c:	da02      	bge.n	801f344 <floor+0xbc>
 801f33e:	2b14      	cmp	r3, #20
 801f340:	d103      	bne.n	801f34a <floor+0xc2>
 801f342:	3101      	adds	r1, #1
 801f344:	ea20 0002 	bic.w	r0, r0, r2
 801f348:	e7c0      	b.n	801f2cc <floor+0x44>
 801f34a:	2401      	movs	r4, #1
 801f34c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f350:	fa04 f303 	lsl.w	r3, r4, r3
 801f354:	4418      	add	r0, r3
 801f356:	42a8      	cmp	r0, r5
 801f358:	bf38      	it	cc
 801f35a:	1909      	addcc	r1, r1, r4
 801f35c:	e7f2      	b.n	801f344 <floor+0xbc>
 801f35e:	2000      	movs	r0, #0
 801f360:	4601      	mov	r1, r0
 801f362:	e7b3      	b.n	801f2cc <floor+0x44>
 801f364:	f3af 8000 	nop.w
 801f368:	8800759c 	.word	0x8800759c
 801f36c:	7e37e43c 	.word	0x7e37e43c
 801f370:	bff00000 	.word	0xbff00000
 801f374:	000fffff 	.word	0x000fffff

0801f378 <matherr>:
 801f378:	2000      	movs	r0, #0
 801f37a:	4770      	bx	lr
 801f37c:	0000      	movs	r0, r0
	...

0801f380 <scalbn>:
 801f380:	b500      	push	{lr}
 801f382:	ed2d 8b02 	vpush	{d8}
 801f386:	b083      	sub	sp, #12
 801f388:	ed8d 0b00 	vstr	d0, [sp]
 801f38c:	9b01      	ldr	r3, [sp, #4]
 801f38e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f392:	b9a2      	cbnz	r2, 801f3be <scalbn+0x3e>
 801f394:	9a00      	ldr	r2, [sp, #0]
 801f396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801f39a:	4313      	orrs	r3, r2
 801f39c:	d03a      	beq.n	801f414 <scalbn+0x94>
 801f39e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f458 <scalbn+0xd8>
 801f3a2:	4b35      	ldr	r3, [pc, #212]	; (801f478 <scalbn+0xf8>)
 801f3a4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801f3a8:	4298      	cmp	r0, r3
 801f3aa:	ed8d 7b00 	vstr	d7, [sp]
 801f3ae:	da11      	bge.n	801f3d4 <scalbn+0x54>
 801f3b0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801f460 <scalbn+0xe0>
 801f3b4:	ed9d 6b00 	vldr	d6, [sp]
 801f3b8:	ee27 7b06 	vmul.f64	d7, d7, d6
 801f3bc:	e007      	b.n	801f3ce <scalbn+0x4e>
 801f3be:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801f3c2:	428a      	cmp	r2, r1
 801f3c4:	d10a      	bne.n	801f3dc <scalbn+0x5c>
 801f3c6:	ed9d 7b00 	vldr	d7, [sp]
 801f3ca:	ee37 7b07 	vadd.f64	d7, d7, d7
 801f3ce:	ed8d 7b00 	vstr	d7, [sp]
 801f3d2:	e01f      	b.n	801f414 <scalbn+0x94>
 801f3d4:	9b01      	ldr	r3, [sp, #4]
 801f3d6:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801f3da:	3a36      	subs	r2, #54	; 0x36
 801f3dc:	4402      	add	r2, r0
 801f3de:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801f3e2:	428a      	cmp	r2, r1
 801f3e4:	dd0a      	ble.n	801f3fc <scalbn+0x7c>
 801f3e6:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801f468 <scalbn+0xe8>
 801f3ea:	eeb0 0b48 	vmov.f64	d0, d8
 801f3ee:	ed9d 1b00 	vldr	d1, [sp]
 801f3f2:	f000 f843 	bl	801f47c <copysign>
 801f3f6:	ee20 7b08 	vmul.f64	d7, d0, d8
 801f3fa:	e7e8      	b.n	801f3ce <scalbn+0x4e>
 801f3fc:	2a00      	cmp	r2, #0
 801f3fe:	dd10      	ble.n	801f422 <scalbn+0xa2>
 801f400:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f404:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f408:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f40c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f410:	e9cd 0100 	strd	r0, r1, [sp]
 801f414:	ed9d 0b00 	vldr	d0, [sp]
 801f418:	b003      	add	sp, #12
 801f41a:	ecbd 8b02 	vpop	{d8}
 801f41e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f422:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801f426:	da06      	bge.n	801f436 <scalbn+0xb6>
 801f428:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f42c:	4298      	cmp	r0, r3
 801f42e:	dcda      	bgt.n	801f3e6 <scalbn+0x66>
 801f430:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801f460 <scalbn+0xe0>
 801f434:	e7d9      	b.n	801f3ea <scalbn+0x6a>
 801f436:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f43a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f43e:	3236      	adds	r2, #54	; 0x36
 801f440:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801f444:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801f448:	ec41 0b17 	vmov	d7, r0, r1
 801f44c:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801f470 <scalbn+0xf0>
 801f450:	e7b2      	b.n	801f3b8 <scalbn+0x38>
 801f452:	bf00      	nop
 801f454:	f3af 8000 	nop.w
 801f458:	00000000 	.word	0x00000000
 801f45c:	43500000 	.word	0x43500000
 801f460:	c2f8f359 	.word	0xc2f8f359
 801f464:	01a56e1f 	.word	0x01a56e1f
 801f468:	8800759c 	.word	0x8800759c
 801f46c:	7e37e43c 	.word	0x7e37e43c
 801f470:	00000000 	.word	0x00000000
 801f474:	3c900000 	.word	0x3c900000
 801f478:	ffff3cb0 	.word	0xffff3cb0

0801f47c <copysign>:
 801f47c:	ec51 0b10 	vmov	r0, r1, d0
 801f480:	ee11 0a90 	vmov	r0, s3
 801f484:	ee10 2a10 	vmov	r2, s0
 801f488:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f48c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801f490:	ea41 0300 	orr.w	r3, r1, r0
 801f494:	ec43 2b10 	vmov	d0, r2, r3
 801f498:	4770      	bx	lr
	...

0801f49c <_init>:
 801f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f49e:	bf00      	nop
 801f4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4a2:	bc08      	pop	{r3}
 801f4a4:	469e      	mov	lr, r3
 801f4a6:	4770      	bx	lr

0801f4a8 <_fini>:
 801f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f4aa:	bf00      	nop
 801f4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f4ae:	bc08      	pop	{r3}
 801f4b0:	469e      	mov	lr, r3
 801f4b2:	4770      	bx	lr
