
Puma.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d7d8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  0800da70  0800da70  0001da70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db34  0800db34  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800db34  0800db34  0001db34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db3c  0800db3c  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db3c  0800db3c  0001db3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db40  0800db40  0001db40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  24000000  0800db44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c64  240001f0  0800dd30  000201f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24001e54  0800dd30  00021e54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a723  00000000  00000000  0002021a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004750  00000000  00000000  0004a93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  0004f090  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001600  00000000  00000000  00050848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003a36e  00000000  00000000  00051e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000179fa  00000000  00000000  0008c1b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00163b8d  00000000  00000000  000a3bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020773d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065cc  00000000  00000000  002077b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001f0 	.word	0x240001f0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800da58 	.word	0x0800da58

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001f4 	.word	0x240001f4
 80002d4:	0800da58 	.word	0x0800da58

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b972 	b.w	80005e4 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9e08      	ldr	r6, [sp, #32]
 800031e:	4604      	mov	r4, r0
 8000320:	4688      	mov	r8, r1
 8000322:	2b00      	cmp	r3, #0
 8000324:	d14b      	bne.n	80003be <__udivmoddi4+0xa6>
 8000326:	428a      	cmp	r2, r1
 8000328:	4615      	mov	r5, r2
 800032a:	d967      	bls.n	80003fc <__udivmoddi4+0xe4>
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	b14a      	cbz	r2, 8000346 <__udivmoddi4+0x2e>
 8000332:	f1c2 0720 	rsb	r7, r2, #32
 8000336:	fa01 f302 	lsl.w	r3, r1, r2
 800033a:	fa20 f707 	lsr.w	r7, r0, r7
 800033e:	4095      	lsls	r5, r2
 8000340:	ea47 0803 	orr.w	r8, r7, r3
 8000344:	4094      	lsls	r4, r2
 8000346:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000350:	fa1f fc85 	uxth.w	ip, r5
 8000354:	fb0e 8817 	mls	r8, lr, r7, r8
 8000358:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035c:	fb07 f10c 	mul.w	r1, r7, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x60>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f107 30ff 	add.w	r0, r7, #4294967295
 800036a:	f080 811b 	bcs.w	80005a4 <__udivmoddi4+0x28c>
 800036e:	4299      	cmp	r1, r3
 8000370:	f240 8118 	bls.w	80005a4 <__udivmoddi4+0x28c>
 8000374:	3f02      	subs	r7, #2
 8000376:	442b      	add	r3, r5
 8000378:	1a5b      	subs	r3, r3, r1
 800037a:	b2a4      	uxth	r4, r4
 800037c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000380:	fb0e 3310 	mls	r3, lr, r0, r3
 8000384:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000388:	fb00 fc0c 	mul.w	ip, r0, ip
 800038c:	45a4      	cmp	ip, r4
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x8c>
 8000390:	192c      	adds	r4, r5, r4
 8000392:	f100 33ff 	add.w	r3, r0, #4294967295
 8000396:	f080 8107 	bcs.w	80005a8 <__udivmoddi4+0x290>
 800039a:	45a4      	cmp	ip, r4
 800039c:	f240 8104 	bls.w	80005a8 <__udivmoddi4+0x290>
 80003a0:	3802      	subs	r0, #2
 80003a2:	442c      	add	r4, r5
 80003a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a8:	eba4 040c 	sub.w	r4, r4, ip
 80003ac:	2700      	movs	r7, #0
 80003ae:	b11e      	cbz	r6, 80003b8 <__udivmoddi4+0xa0>
 80003b0:	40d4      	lsrs	r4, r2
 80003b2:	2300      	movs	r3, #0
 80003b4:	e9c6 4300 	strd	r4, r3, [r6]
 80003b8:	4639      	mov	r1, r7
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d909      	bls.n	80003d6 <__udivmoddi4+0xbe>
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	f000 80eb 	beq.w	800059e <__udivmoddi4+0x286>
 80003c8:	2700      	movs	r7, #0
 80003ca:	e9c6 0100 	strd	r0, r1, [r6]
 80003ce:	4638      	mov	r0, r7
 80003d0:	4639      	mov	r1, r7
 80003d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d6:	fab3 f783 	clz	r7, r3
 80003da:	2f00      	cmp	r7, #0
 80003dc:	d147      	bne.n	800046e <__udivmoddi4+0x156>
 80003de:	428b      	cmp	r3, r1
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xd0>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 80fa 	bhi.w	80005dc <__udivmoddi4+0x2c4>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb61 0303 	sbc.w	r3, r1, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4698      	mov	r8, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d0e0      	beq.n	80003b8 <__udivmoddi4+0xa0>
 80003f6:	e9c6 4800 	strd	r4, r8, [r6]
 80003fa:	e7dd      	b.n	80003b8 <__udivmoddi4+0xa0>
 80003fc:	b902      	cbnz	r2, 8000400 <__udivmoddi4+0xe8>
 80003fe:	deff      	udf	#255	; 0xff
 8000400:	fab2 f282 	clz	r2, r2
 8000404:	2a00      	cmp	r2, #0
 8000406:	f040 808f 	bne.w	8000528 <__udivmoddi4+0x210>
 800040a:	1b49      	subs	r1, r1, r5
 800040c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000410:	fa1f f885 	uxth.w	r8, r5
 8000414:	2701      	movs	r7, #1
 8000416:	fbb1 fcfe 	udiv	ip, r1, lr
 800041a:	0c23      	lsrs	r3, r4, #16
 800041c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb08 f10c 	mul.w	r1, r8, ip
 8000428:	4299      	cmp	r1, r3
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x124>
 800042c:	18eb      	adds	r3, r5, r3
 800042e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x122>
 8000434:	4299      	cmp	r1, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2bc>
 800043a:	4684      	mov	ip, r0
 800043c:	1a59      	subs	r1, r3, r1
 800043e:	b2a3      	uxth	r3, r4
 8000440:	fbb1 f0fe 	udiv	r0, r1, lr
 8000444:	fb0e 1410 	mls	r4, lr, r0, r1
 8000448:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800044c:	fb08 f800 	mul.w	r8, r8, r0
 8000450:	45a0      	cmp	r8, r4
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x14c>
 8000454:	192c      	adds	r4, r5, r4
 8000456:	f100 33ff 	add.w	r3, r0, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x14a>
 800045c:	45a0      	cmp	r8, r4
 800045e:	f200 80b6 	bhi.w	80005ce <__udivmoddi4+0x2b6>
 8000462:	4618      	mov	r0, r3
 8000464:	eba4 0408 	sub.w	r4, r4, r8
 8000468:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800046c:	e79f      	b.n	80003ae <__udivmoddi4+0x96>
 800046e:	f1c7 0c20 	rsb	ip, r7, #32
 8000472:	40bb      	lsls	r3, r7
 8000474:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000478:	ea4e 0e03 	orr.w	lr, lr, r3
 800047c:	fa01 f407 	lsl.w	r4, r1, r7
 8000480:	fa20 f50c 	lsr.w	r5, r0, ip
 8000484:	fa21 f30c 	lsr.w	r3, r1, ip
 8000488:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800048c:	4325      	orrs	r5, r4
 800048e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000492:	0c2c      	lsrs	r4, r5, #16
 8000494:	fb08 3319 	mls	r3, r8, r9, r3
 8000498:	fa1f fa8e 	uxth.w	sl, lr
 800049c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a0:	fb09 f40a 	mul.w	r4, r9, sl
 80004a4:	429c      	cmp	r4, r3
 80004a6:	fa02 f207 	lsl.w	r2, r2, r7
 80004aa:	fa00 f107 	lsl.w	r1, r0, r7
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b0>
 80004b0:	eb1e 0303 	adds.w	r3, lr, r3
 80004b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b8:	f080 8087 	bcs.w	80005ca <__udivmoddi4+0x2b2>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f240 8084 	bls.w	80005ca <__udivmoddi4+0x2b2>
 80004c2:	f1a9 0902 	sub.w	r9, r9, #2
 80004c6:	4473      	add	r3, lr
 80004c8:	1b1b      	subs	r3, r3, r4
 80004ca:	b2ad      	uxth	r5, r5
 80004cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d0:	fb08 3310 	mls	r3, r8, r0, r3
 80004d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004dc:	45a2      	cmp	sl, r4
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1da>
 80004e0:	eb1e 0404 	adds.w	r4, lr, r4
 80004e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e8:	d26b      	bcs.n	80005c2 <__udivmoddi4+0x2aa>
 80004ea:	45a2      	cmp	sl, r4
 80004ec:	d969      	bls.n	80005c2 <__udivmoddi4+0x2aa>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4474      	add	r4, lr
 80004f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004f6:	fba0 8902 	umull	r8, r9, r0, r2
 80004fa:	eba4 040a 	sub.w	r4, r4, sl
 80004fe:	454c      	cmp	r4, r9
 8000500:	46c2      	mov	sl, r8
 8000502:	464b      	mov	r3, r9
 8000504:	d354      	bcc.n	80005b0 <__udivmoddi4+0x298>
 8000506:	d051      	beq.n	80005ac <__udivmoddi4+0x294>
 8000508:	2e00      	cmp	r6, #0
 800050a:	d069      	beq.n	80005e0 <__udivmoddi4+0x2c8>
 800050c:	ebb1 050a 	subs.w	r5, r1, sl
 8000510:	eb64 0403 	sbc.w	r4, r4, r3
 8000514:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000518:	40fd      	lsrs	r5, r7
 800051a:	40fc      	lsrs	r4, r7
 800051c:	ea4c 0505 	orr.w	r5, ip, r5
 8000520:	e9c6 5400 	strd	r5, r4, [r6]
 8000524:	2700      	movs	r7, #0
 8000526:	e747      	b.n	80003b8 <__udivmoddi4+0xa0>
 8000528:	f1c2 0320 	rsb	r3, r2, #32
 800052c:	fa20 f703 	lsr.w	r7, r0, r3
 8000530:	4095      	lsls	r5, r2
 8000532:	fa01 f002 	lsl.w	r0, r1, r2
 8000536:	fa21 f303 	lsr.w	r3, r1, r3
 800053a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800053e:	4338      	orrs	r0, r7
 8000540:	0c01      	lsrs	r1, r0, #16
 8000542:	fbb3 f7fe 	udiv	r7, r3, lr
 8000546:	fa1f f885 	uxth.w	r8, r5
 800054a:	fb0e 3317 	mls	r3, lr, r7, r3
 800054e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000552:	fb07 f308 	mul.w	r3, r7, r8
 8000556:	428b      	cmp	r3, r1
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x256>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f107 3cff 	add.w	ip, r7, #4294967295
 8000564:	d22f      	bcs.n	80005c6 <__udivmoddi4+0x2ae>
 8000566:	428b      	cmp	r3, r1
 8000568:	d92d      	bls.n	80005c6 <__udivmoddi4+0x2ae>
 800056a:	3f02      	subs	r7, #2
 800056c:	4429      	add	r1, r5
 800056e:	1acb      	subs	r3, r1, r3
 8000570:	b281      	uxth	r1, r0
 8000572:	fbb3 f0fe 	udiv	r0, r3, lr
 8000576:	fb0e 3310 	mls	r3, lr, r0, r3
 800057a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057e:	fb00 f308 	mul.w	r3, r0, r8
 8000582:	428b      	cmp	r3, r1
 8000584:	d907      	bls.n	8000596 <__udivmoddi4+0x27e>
 8000586:	1869      	adds	r1, r5, r1
 8000588:	f100 3cff 	add.w	ip, r0, #4294967295
 800058c:	d217      	bcs.n	80005be <__udivmoddi4+0x2a6>
 800058e:	428b      	cmp	r3, r1
 8000590:	d915      	bls.n	80005be <__udivmoddi4+0x2a6>
 8000592:	3802      	subs	r0, #2
 8000594:	4429      	add	r1, r5
 8000596:	1ac9      	subs	r1, r1, r3
 8000598:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800059c:	e73b      	b.n	8000416 <__udivmoddi4+0xfe>
 800059e:	4637      	mov	r7, r6
 80005a0:	4630      	mov	r0, r6
 80005a2:	e709      	b.n	80003b8 <__udivmoddi4+0xa0>
 80005a4:	4607      	mov	r7, r0
 80005a6:	e6e7      	b.n	8000378 <__udivmoddi4+0x60>
 80005a8:	4618      	mov	r0, r3
 80005aa:	e6fb      	b.n	80003a4 <__udivmoddi4+0x8c>
 80005ac:	4541      	cmp	r1, r8
 80005ae:	d2ab      	bcs.n	8000508 <__udivmoddi4+0x1f0>
 80005b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005b4:	eb69 020e 	sbc.w	r2, r9, lr
 80005b8:	3801      	subs	r0, #1
 80005ba:	4613      	mov	r3, r2
 80005bc:	e7a4      	b.n	8000508 <__udivmoddi4+0x1f0>
 80005be:	4660      	mov	r0, ip
 80005c0:	e7e9      	b.n	8000596 <__udivmoddi4+0x27e>
 80005c2:	4618      	mov	r0, r3
 80005c4:	e795      	b.n	80004f2 <__udivmoddi4+0x1da>
 80005c6:	4667      	mov	r7, ip
 80005c8:	e7d1      	b.n	800056e <__udivmoddi4+0x256>
 80005ca:	4681      	mov	r9, r0
 80005cc:	e77c      	b.n	80004c8 <__udivmoddi4+0x1b0>
 80005ce:	3802      	subs	r0, #2
 80005d0:	442c      	add	r4, r5
 80005d2:	e747      	b.n	8000464 <__udivmoddi4+0x14c>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	442b      	add	r3, r5
 80005da:	e72f      	b.n	800043c <__udivmoddi4+0x124>
 80005dc:	4638      	mov	r0, r7
 80005de:	e708      	b.n	80003f2 <__udivmoddi4+0xda>
 80005e0:	4637      	mov	r7, r6
 80005e2:	e6e9      	b.n	80003b8 <__udivmoddi4+0xa0>

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <HAL_GPIO_EXTI_Callback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);
//handle GPIO interrupt
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	4603      	mov	r3, r0
 80005f0:	80fb      	strh	r3, [r7, #6]
		GPIO_TypeDef* port;
		uint16_t  pin_num;
    }PINS;*/
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PA9)y, PE3(PD6)y, PD4(PC11)y, PD7(PC12)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	switch (GPIO_Pin){
 80005f2:	88fb      	ldrh	r3, [r7, #6]
 80005f4:	2b20      	cmp	r3, #32
 80005f6:	f000 80a1 	beq.w	800073c <HAL_GPIO_EXTI_Callback+0x154>
 80005fa:	2b20      	cmp	r3, #32
 80005fc:	dc10      	bgt.n	8000620 <HAL_GPIO_EXTI_Callback+0x38>
 80005fe:	2b04      	cmp	r3, #4
 8000600:	f000 80c4 	beq.w	800078c <HAL_GPIO_EXTI_Callback+0x1a4>
 8000604:	2b04      	cmp	r3, #4
 8000606:	dc04      	bgt.n	8000612 <HAL_GPIO_EXTI_Callback+0x2a>
 8000608:	2b01      	cmp	r3, #1
 800060a:	d01f      	beq.n	800064c <HAL_GPIO_EXTI_Callback+0x64>
 800060c:	2b02      	cmp	r3, #2
 800060e:	d06d      	beq.n	80006ec <HAL_GPIO_EXTI_Callback+0x104>
			motor_steps[5] --;
			delta_pos[5] --;
		}
		break;
	default:
		break;
 8000610:	e212      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
	switch (GPIO_Pin){
 8000612:	2b08      	cmp	r3, #8
 8000614:	f000 810e 	beq.w	8000834 <HAL_GPIO_EXTI_Callback+0x24c>
 8000618:	2b10      	cmp	r3, #16
 800061a:	f000 8169 	beq.w	80008f0 <HAL_GPIO_EXTI_Callback+0x308>
		break;
 800061e:	e20b      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
	switch (GPIO_Pin){
 8000620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000624:	d03a      	beq.n	800069c <HAL_GPIO_EXTI_Callback+0xb4>
 8000626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800062a:	dc06      	bgt.n	800063a <HAL_GPIO_EXTI_Callback+0x52>
 800062c:	2b40      	cmp	r3, #64	; 0x40
 800062e:	f000 8137 	beq.w	80008a0 <HAL_GPIO_EXTI_Callback+0x2b8>
 8000632:	2b80      	cmp	r3, #128	; 0x80
 8000634:	f000 81ae 	beq.w	8000994 <HAL_GPIO_EXTI_Callback+0x3ac>
		break;
 8000638:	e1fe      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
	switch (GPIO_Pin){
 800063a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800063e:	f000 8180 	beq.w	8000942 <HAL_GPIO_EXTI_Callback+0x35a>
 8000642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000646:	f000 81ce 	beq.w	80009e6 <HAL_GPIO_EXTI_Callback+0x3fe>
		break;
 800064a:	e1f5      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		if (val_encoderA[0] ^ val_encoderB[0]){
 800064c:	4b8d      	ldr	r3, [pc, #564]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800064e:	681a      	ldr	r2, [r3, #0]
 8000650:	4b8d      	ldr	r3, [pc, #564]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	429a      	cmp	r2, r3
 8000656:	d00a      	beq.n	800066e <HAL_GPIO_EXTI_Callback+0x86>
			motor_steps[0] ++;
 8000658:	4b8c      	ldr	r3, [pc, #560]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	3301      	adds	r3, #1
 800065e:	4a8b      	ldr	r2, [pc, #556]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000660:	6013      	str	r3, [r2, #0]
			delta_pos[0] ++;
 8000662:	4b8b      	ldr	r3, [pc, #556]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	3301      	adds	r3, #1
 8000668:	4a89      	ldr	r2, [pc, #548]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	e009      	b.n	8000682 <HAL_GPIO_EXTI_Callback+0x9a>
			motor_steps[0] --;
 800066e:	4b87      	ldr	r3, [pc, #540]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	3b01      	subs	r3, #1
 8000674:	4a85      	ldr	r2, [pc, #532]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000676:	6013      	str	r3, [r2, #0]
			delta_pos[0] --;
 8000678:	4b85      	ldr	r3, [pc, #532]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	3b01      	subs	r3, #1
 800067e:	4a84      	ldr	r2, [pc, #528]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000680:	6013      	str	r3, [r2, #0]
		val_encoderA[0] = HAL_GPIO_ReadPin(encoders[0].port, encoders[0].pin_num);
 8000682:	4b84      	ldr	r3, [pc, #528]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4b83      	ldr	r3, [pc, #524]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000688:	889b      	ldrh	r3, [r3, #4]
 800068a:	4619      	mov	r1, r3
 800068c:	4610      	mov	r0, r2
 800068e:	f002 fa07 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	461a      	mov	r2, r3
 8000696:	4b7b      	ldr	r3, [pc, #492]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000698:	601a      	str	r2, [r3, #0]
		break;
 800069a:	e1cd      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		val_encoderB[0] = HAL_GPIO_ReadPin(encoders[1].port, encoders[1].pin_num);
 800069c:	4b7d      	ldr	r3, [pc, #500]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800069e:	689a      	ldr	r2, [r3, #8]
 80006a0:	4b7c      	ldr	r3, [pc, #496]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80006a2:	899b      	ldrh	r3, [r3, #12]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4610      	mov	r0, r2
 80006a8:	f002 f9fa 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80006ac:	4603      	mov	r3, r0
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b75      	ldr	r3, [pc, #468]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006b2:	601a      	str	r2, [r3, #0]
		if (val_encoderA[0] ^ val_encoderB[0]){
 80006b4:	4b73      	ldr	r3, [pc, #460]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b73      	ldr	r3, [pc, #460]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	429a      	cmp	r2, r3
 80006be:	d00a      	beq.n	80006d6 <HAL_GPIO_EXTI_Callback+0xee>
			motor_steps[0] ++;
 80006c0:	4b72      	ldr	r3, [pc, #456]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	3301      	adds	r3, #1
 80006c6:	4a71      	ldr	r2, [pc, #452]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006c8:	6013      	str	r3, [r2, #0]
			delta_pos[0] ++;
 80006ca:	4b71      	ldr	r3, [pc, #452]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a6f      	ldr	r2, [pc, #444]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006d2:	6013      	str	r3, [r2, #0]
		break;
 80006d4:	e1b0      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
			motor_steps[0] --;
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3b01      	subs	r3, #1
 80006dc:	4a6b      	ldr	r2, [pc, #428]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006de:	6013      	str	r3, [r2, #0]
			delta_pos[0] --;
 80006e0:	4b6b      	ldr	r3, [pc, #428]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	3b01      	subs	r3, #1
 80006e6:	4a6a      	ldr	r2, [pc, #424]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 80006e8:	6013      	str	r3, [r2, #0]
		break;
 80006ea:	e1a5      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		if (val_encoderA[1] ^ val_encoderB[1]){
 80006ec:	4b65      	ldr	r3, [pc, #404]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80006ee:	685a      	ldr	r2, [r3, #4]
 80006f0:	4b65      	ldr	r3, [pc, #404]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80006f2:	685b      	ldr	r3, [r3, #4]
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d00a      	beq.n	800070e <HAL_GPIO_EXTI_Callback+0x126>
			motor_steps[1] ++;
 80006f8:	4b64      	ldr	r3, [pc, #400]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	3301      	adds	r3, #1
 80006fe:	4a63      	ldr	r2, [pc, #396]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000700:	6053      	str	r3, [r2, #4]
			delta_pos[1] ++;
 8000702:	4b63      	ldr	r3, [pc, #396]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	3301      	adds	r3, #1
 8000708:	4a61      	ldr	r2, [pc, #388]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800070a:	6053      	str	r3, [r2, #4]
 800070c:	e009      	b.n	8000722 <HAL_GPIO_EXTI_Callback+0x13a>
			motor_steps[1] --;
 800070e:	4b5f      	ldr	r3, [pc, #380]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	3b01      	subs	r3, #1
 8000714:	4a5d      	ldr	r2, [pc, #372]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000716:	6053      	str	r3, [r2, #4]
			delta_pos[1] --;
 8000718:	4b5d      	ldr	r3, [pc, #372]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	3b01      	subs	r3, #1
 800071e:	4a5c      	ldr	r2, [pc, #368]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000720:	6053      	str	r3, [r2, #4]
		val_encoderA[1] = HAL_GPIO_ReadPin(encoders[2].port, encoders[2].pin_num);
 8000722:	4b5c      	ldr	r3, [pc, #368]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000724:	691a      	ldr	r2, [r3, #16]
 8000726:	4b5b      	ldr	r3, [pc, #364]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000728:	8a9b      	ldrh	r3, [r3, #20]
 800072a:	4619      	mov	r1, r3
 800072c:	4610      	mov	r0, r2
 800072e:	f002 f9b7 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	461a      	mov	r2, r3
 8000736:	4b53      	ldr	r3, [pc, #332]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000738:	605a      	str	r2, [r3, #4]
		break;
 800073a:	e17d      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		val_encoderB[1] = HAL_GPIO_ReadPin(encoders[3].port, encoders[3].pin_num);
 800073c:	4b55      	ldr	r3, [pc, #340]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800073e:	699a      	ldr	r2, [r3, #24]
 8000740:	4b54      	ldr	r3, [pc, #336]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000742:	8b9b      	ldrh	r3, [r3, #28]
 8000744:	4619      	mov	r1, r3
 8000746:	4610      	mov	r0, r2
 8000748:	f002 f9aa 	bl	8002aa0 <HAL_GPIO_ReadPin>
 800074c:	4603      	mov	r3, r0
 800074e:	461a      	mov	r2, r3
 8000750:	4b4d      	ldr	r3, [pc, #308]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8000752:	605a      	str	r2, [r3, #4]
		if (val_encoderA[1] ^ val_encoderB[1]){
 8000754:	4b4b      	ldr	r3, [pc, #300]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000756:	685a      	ldr	r2, [r3, #4]
 8000758:	4b4b      	ldr	r3, [pc, #300]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800075a:	685b      	ldr	r3, [r3, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	d00a      	beq.n	8000776 <HAL_GPIO_EXTI_Callback+0x18e>
			motor_steps[1] ++;
 8000760:	4b4a      	ldr	r3, [pc, #296]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	3301      	adds	r3, #1
 8000766:	4a49      	ldr	r2, [pc, #292]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000768:	6053      	str	r3, [r2, #4]
			delta_pos[1] ++;
 800076a:	4b49      	ldr	r3, [pc, #292]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	3301      	adds	r3, #1
 8000770:	4a47      	ldr	r2, [pc, #284]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000772:	6053      	str	r3, [r2, #4]
		break;
 8000774:	e160      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
			motor_steps[1] --;
 8000776:	4b45      	ldr	r3, [pc, #276]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	3b01      	subs	r3, #1
 800077c:	4a43      	ldr	r2, [pc, #268]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800077e:	6053      	str	r3, [r2, #4]
			delta_pos[1] --;
 8000780:	4b43      	ldr	r3, [pc, #268]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	3b01      	subs	r3, #1
 8000786:	4a42      	ldr	r2, [pc, #264]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000788:	6053      	str	r3, [r2, #4]
		break;
 800078a:	e155      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		 Lstate[2] = HAL_GPIO_ReadPin(encoders[4].port, encoders[4].pin_num);
 800078c:	4b41      	ldr	r3, [pc, #260]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800078e:	6a1a      	ldr	r2, [r3, #32]
 8000790:	4b40      	ldr	r3, [pc, #256]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4610      	mov	r0, r2
 8000798:	f002 f982 	bl	8002aa0 <HAL_GPIO_ReadPin>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b3d      	ldr	r3, [pc, #244]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007a2:	609a      	str	r2, [r3, #8]
		  if((val_encoderA[2] == LOW) && Lstate[2]==HIGH)
 80007a4:	4b37      	ldr	r3, [pc, #220]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d12b      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x21c>
 80007ac:	4b3a      	ldr	r3, [pc, #232]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d127      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x21c>
			val_encoderB[2] = HAL_GPIO_ReadPin(encoders[5].port, encoders[5].pin_num);
 80007b4:	4b37      	ldr	r3, [pc, #220]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80007b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80007b8:	4b36      	ldr	r3, [pc, #216]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80007ba:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80007bc:	4619      	mov	r1, r3
 80007be:	4610      	mov	r0, r2
 80007c0:	f002 f96e 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b2f      	ldr	r3, [pc, #188]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007ca:	609a      	str	r2, [r3, #8]
		    if(val_encoderB[2] == LOW && direction[2])
 80007cc:	4b2e      	ldr	r3, [pc, #184]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007ce:	689b      	ldr	r3, [r3, #8]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d108      	bne.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1fe>
 80007d4:	4b31      	ldr	r3, [pc, #196]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007d6:	789b      	ldrb	r3, [r3, #2]
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d003      	beq.n	80007e6 <HAL_GPIO_EXTI_Callback+0x1fe>
		      direction[2] = false; //Reverse
 80007de:	4b2f      	ldr	r3, [pc, #188]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	709a      	strb	r2, [r3, #2]
 80007e4:	e00e      	b.n	8000804 <HAL_GPIO_EXTI_Callback+0x21c>
		    else if(val_encoderB[2] == HIGH && !direction[2])
 80007e6:	4b28      	ldr	r3, [pc, #160]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d10a      	bne.n	8000804 <HAL_GPIO_EXTI_Callback+0x21c>
 80007ee:	4b2b      	ldr	r3, [pc, #172]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80007f0:	789b      	ldrb	r3, [r3, #2]
 80007f2:	b2db      	uxtb	r3, r3
 80007f4:	f083 0301 	eor.w	r3, r3, #1
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d002      	beq.n	8000804 <HAL_GPIO_EXTI_Callback+0x21c>
		    	direction[2] = true;  //Forward
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8000800:	2201      	movs	r2, #1
 8000802:	709a      	strb	r2, [r3, #2]
		  val_encoderA[2] = Lstate[2];
 8000804:	4b24      	ldr	r3, [pc, #144]	; (8000898 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8000806:	689b      	ldr	r3, [r3, #8]
 8000808:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 800080a:	6093      	str	r3, [r2, #8]
		  if(!direction[2]){
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <HAL_GPIO_EXTI_Callback+0x2b4>)
 800080e:	789b      	ldrb	r3, [r3, #2]
 8000810:	b2db      	uxtb	r3, r3
 8000812:	f083 0301 	eor.w	r3, r3, #1
 8000816:	b2db      	uxtb	r3, r3
 8000818:	2b00      	cmp	r3, #0
 800081a:	d005      	beq.n	8000828 <HAL_GPIO_EXTI_Callback+0x240>
			  motor_steps[2]++;
 800081c:	4b1b      	ldr	r3, [pc, #108]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	3301      	adds	r3, #1
 8000822:	4a1a      	ldr	r2, [pc, #104]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000824:	6093      	str	r3, [r2, #8]
		break;
 8000826:	e107      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
			  motor_steps[2]--;
 8000828:	4b18      	ldr	r3, [pc, #96]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	3b01      	subs	r3, #1
 800082e:	4a17      	ldr	r2, [pc, #92]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000830:	6093      	str	r3, [r2, #8]
		break;
 8000832:	e101      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		if (val_encoderA[3] ^ val_encoderB[3]){
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000836:	68da      	ldr	r2, [r3, #12]
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_GPIO_EXTI_Callback+0x2a0>)
 800083a:	68db      	ldr	r3, [r3, #12]
 800083c:	429a      	cmp	r2, r3
 800083e:	d00a      	beq.n	8000856 <HAL_GPIO_EXTI_Callback+0x26e>
			motor_steps[3] ++;
 8000840:	4b12      	ldr	r3, [pc, #72]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	3301      	adds	r3, #1
 8000846:	4a11      	ldr	r2, [pc, #68]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000848:	60d3      	str	r3, [r2, #12]
			delta_pos[3] ++;
 800084a:	4b11      	ldr	r3, [pc, #68]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 800084c:	68db      	ldr	r3, [r3, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	4a0f      	ldr	r2, [pc, #60]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000852:	60d3      	str	r3, [r2, #12]
 8000854:	e009      	b.n	800086a <HAL_GPIO_EXTI_Callback+0x282>
			motor_steps[3] --;
 8000856:	4b0d      	ldr	r3, [pc, #52]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8000858:	68db      	ldr	r3, [r3, #12]
 800085a:	3b01      	subs	r3, #1
 800085c:	4a0b      	ldr	r2, [pc, #44]	; (800088c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800085e:	60d3      	str	r3, [r2, #12]
			delta_pos[3] --;
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	3b01      	subs	r3, #1
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8000868:	60d3      	str	r3, [r2, #12]
		val_encoderA[3] = HAL_GPIO_ReadPin(encoders[6].port, encoders[6].pin_num);
 800086a:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 800086c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8000870:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8000872:	4619      	mov	r1, r3
 8000874:	4610      	mov	r0, r2
 8000876:	f002 f913 	bl	8002aa0 <HAL_GPIO_ReadPin>
 800087a:	4603      	mov	r3, r0
 800087c:	461a      	mov	r2, r3
 800087e:	4b01      	ldr	r3, [pc, #4]	; (8000884 <HAL_GPIO_EXTI_Callback+0x29c>)
 8000880:	60da      	str	r2, [r3, #12]
		break;
 8000882:	e0d9      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
 8000884:	2400030c 	.word	0x2400030c
 8000888:	2400041c 	.word	0x2400041c
 800088c:	2400020c 	.word	0x2400020c
 8000890:	24000258 	.word	0x24000258
 8000894:	2400033c 	.word	0x2400033c
 8000898:	24000324 	.word	0x24000324
 800089c:	24000000 	.word	0x24000000
		val_encoderB[3] = HAL_GPIO_ReadPin(encoders[7].port, encoders[7].pin_num);
 80008a0:	4b67      	ldr	r3, [pc, #412]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80008a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80008a4:	4b66      	ldr	r3, [pc, #408]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80008a6:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80008a8:	4619      	mov	r1, r3
 80008aa:	4610      	mov	r0, r2
 80008ac:	f002 f8f8 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b63      	ldr	r3, [pc, #396]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80008b6:	60da      	str	r2, [r3, #12]
		if (val_encoderA[3] ^ val_encoderB[3]){
 80008b8:	4b63      	ldr	r3, [pc, #396]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008ba:	68da      	ldr	r2, [r3, #12]
 80008bc:	4b61      	ldr	r3, [pc, #388]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d00a      	beq.n	80008da <HAL_GPIO_EXTI_Callback+0x2f2>
			motor_steps[3] ++;
 80008c4:	4b61      	ldr	r3, [pc, #388]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	3301      	adds	r3, #1
 80008ca:	4a60      	ldr	r2, [pc, #384]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008cc:	60d3      	str	r3, [r2, #12]
			delta_pos[3] ++;
 80008ce:	4b60      	ldr	r3, [pc, #384]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80008d0:	68db      	ldr	r3, [r3, #12]
 80008d2:	3301      	adds	r3, #1
 80008d4:	4a5e      	ldr	r2, [pc, #376]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80008d6:	60d3      	str	r3, [r2, #12]
		break;
 80008d8:	e0ae      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
			motor_steps[3] --;
 80008da:	4b5c      	ldr	r3, [pc, #368]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	3b01      	subs	r3, #1
 80008e0:	4a5a      	ldr	r2, [pc, #360]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008e2:	60d3      	str	r3, [r2, #12]
			delta_pos[3] --;
 80008e4:	4b5a      	ldr	r3, [pc, #360]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80008e6:	68db      	ldr	r3, [r3, #12]
 80008e8:	3b01      	subs	r3, #1
 80008ea:	4a59      	ldr	r2, [pc, #356]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80008ec:	60d3      	str	r3, [r2, #12]
		break;
 80008ee:	e0a3      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		if (val_encoderA[4] ^ val_encoderB[4]){
 80008f0:	4b55      	ldr	r3, [pc, #340]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80008f2:	691a      	ldr	r2, [r3, #16]
 80008f4:	4b53      	ldr	r3, [pc, #332]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80008f6:	691b      	ldr	r3, [r3, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d00a      	beq.n	8000912 <HAL_GPIO_EXTI_Callback+0x32a>
			motor_steps[4] ++;
 80008fc:	4b53      	ldr	r3, [pc, #332]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80008fe:	691b      	ldr	r3, [r3, #16]
 8000900:	3301      	adds	r3, #1
 8000902:	4a52      	ldr	r2, [pc, #328]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000904:	6113      	str	r3, [r2, #16]
			delta_pos[4] ++;
 8000906:	4b52      	ldr	r3, [pc, #328]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000908:	691b      	ldr	r3, [r3, #16]
 800090a:	3301      	adds	r3, #1
 800090c:	4a50      	ldr	r2, [pc, #320]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 800090e:	6113      	str	r3, [r2, #16]
 8000910:	e009      	b.n	8000926 <HAL_GPIO_EXTI_Callback+0x33e>
			motor_steps[4] --;
 8000912:	4b4e      	ldr	r3, [pc, #312]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000914:	691b      	ldr	r3, [r3, #16]
 8000916:	3b01      	subs	r3, #1
 8000918:	4a4c      	ldr	r2, [pc, #304]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 800091a:	6113      	str	r3, [r2, #16]
			delta_pos[4] --;
 800091c:	4b4c      	ldr	r3, [pc, #304]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 800091e:	691b      	ldr	r3, [r3, #16]
 8000920:	3b01      	subs	r3, #1
 8000922:	4a4b      	ldr	r2, [pc, #300]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000924:	6113      	str	r3, [r2, #16]
		val_encoderA[4] = HAL_GPIO_ReadPin(encoders[8].port, encoders[8].pin_num);
 8000926:	4b46      	ldr	r3, [pc, #280]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 8000928:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800092a:	4b45      	ldr	r3, [pc, #276]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 800092c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000930:	4619      	mov	r1, r3
 8000932:	4610      	mov	r0, r2
 8000934:	f002 f8b4 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b42      	ldr	r3, [pc, #264]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 800093e:	611a      	str	r2, [r3, #16]
		break;
 8000940:	e07a      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		val_encoderB[4] = HAL_GPIO_ReadPin(encoders[9].port, encoders[9].pin_num);
 8000942:	4b3f      	ldr	r3, [pc, #252]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 8000944:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000946:	4b3e      	ldr	r3, [pc, #248]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 8000948:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800094c:	4619      	mov	r1, r3
 800094e:	4610      	mov	r0, r2
 8000950:	f002 f8a6 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b3a      	ldr	r3, [pc, #232]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 800095a:	611a      	str	r2, [r3, #16]
		if (val_encoderA[4] ^ val_encoderB[4]){
 800095c:	4b3a      	ldr	r3, [pc, #232]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 800095e:	691a      	ldr	r2, [r3, #16]
 8000960:	4b38      	ldr	r3, [pc, #224]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 8000962:	691b      	ldr	r3, [r3, #16]
 8000964:	429a      	cmp	r2, r3
 8000966:	d00a      	beq.n	800097e <HAL_GPIO_EXTI_Callback+0x396>
			motor_steps[4] ++;
 8000968:	4b38      	ldr	r3, [pc, #224]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 800096a:	691b      	ldr	r3, [r3, #16]
 800096c:	3301      	adds	r3, #1
 800096e:	4a37      	ldr	r2, [pc, #220]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000970:	6113      	str	r3, [r2, #16]
			delta_pos[4] ++;
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000974:	691b      	ldr	r3, [r3, #16]
 8000976:	3301      	adds	r3, #1
 8000978:	4a35      	ldr	r2, [pc, #212]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 800097a:	6113      	str	r3, [r2, #16]
		break;
 800097c:	e05c      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
			motor_steps[4] --;
 800097e:	4b33      	ldr	r3, [pc, #204]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000980:	691b      	ldr	r3, [r3, #16]
 8000982:	3b01      	subs	r3, #1
 8000984:	4a31      	ldr	r2, [pc, #196]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000986:	6113      	str	r3, [r2, #16]
			delta_pos[4] --;
 8000988:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	3b01      	subs	r3, #1
 800098e:	4a30      	ldr	r2, [pc, #192]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000990:	6113      	str	r3, [r2, #16]
		break;
 8000992:	e051      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		if (val_encoderA[5] ^ val_encoderB[5]){
 8000994:	4b2c      	ldr	r3, [pc, #176]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000996:	695a      	ldr	r2, [r3, #20]
 8000998:	4b2a      	ldr	r3, [pc, #168]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	429a      	cmp	r2, r3
 800099e:	d00a      	beq.n	80009b6 <HAL_GPIO_EXTI_Callback+0x3ce>
			motor_steps[5] ++;
 80009a0:	4b2a      	ldr	r3, [pc, #168]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009a2:	695b      	ldr	r3, [r3, #20]
 80009a4:	3301      	adds	r3, #1
 80009a6:	4a29      	ldr	r2, [pc, #164]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009a8:	6153      	str	r3, [r2, #20]
			delta_pos[5] ++;
 80009aa:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80009ac:	695b      	ldr	r3, [r3, #20]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a27      	ldr	r2, [pc, #156]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80009b2:	6153      	str	r3, [r2, #20]
 80009b4:	e009      	b.n	80009ca <HAL_GPIO_EXTI_Callback+0x3e2>
			motor_steps[5] --;
 80009b6:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	3b01      	subs	r3, #1
 80009bc:	4a23      	ldr	r2, [pc, #140]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 80009be:	6153      	str	r3, [r2, #20]
			delta_pos[5] --;
 80009c0:	4b23      	ldr	r3, [pc, #140]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	3b01      	subs	r3, #1
 80009c6:	4a22      	ldr	r2, [pc, #136]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 80009c8:	6153      	str	r3, [r2, #20]
		val_encoderA[5] = HAL_GPIO_ReadPin(encoders[10].port, encoders[10].pin_num);
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80009cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80009d0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80009d4:	4619      	mov	r1, r3
 80009d6:	4610      	mov	r0, r2
 80009d8:	f002 f862 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	4b19      	ldr	r3, [pc, #100]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 80009e2:	615a      	str	r2, [r3, #20]
		break;
 80009e4:	e028      	b.n	8000a38 <HAL_GPIO_EXTI_Callback+0x450>
		val_encoderB[5] = HAL_GPIO_ReadPin(encoders[11].port, encoders[11].pin_num);
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80009e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <HAL_GPIO_EXTI_Callback+0x458>)
 80009ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4610      	mov	r0, r2
 80009f4:	f002 f854 	bl	8002aa0 <HAL_GPIO_ReadPin>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 80009fe:	615a      	str	r2, [r3, #20]
		if (val_encoderA[5] ^ val_encoderB[5]){
 8000a00:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <HAL_GPIO_EXTI_Callback+0x460>)
 8000a02:	695a      	ldr	r2, [r3, #20]
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_GPIO_EXTI_Callback+0x45c>)
 8000a06:	695b      	ldr	r3, [r3, #20]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	d00a      	beq.n	8000a22 <HAL_GPIO_EXTI_Callback+0x43a>
			motor_steps[5] ++;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000a0e:	695b      	ldr	r3, [r3, #20]
 8000a10:	3301      	adds	r3, #1
 8000a12:	4a0e      	ldr	r2, [pc, #56]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000a14:	6153      	str	r3, [r2, #20]
			delta_pos[5] ++;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000a18:	695b      	ldr	r3, [r3, #20]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	4a0c      	ldr	r2, [pc, #48]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000a1e:	6153      	str	r3, [r2, #20]
		break;
 8000a20:	e009      	b.n	8000a36 <HAL_GPIO_EXTI_Callback+0x44e>
			motor_steps[5] --;
 8000a22:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	4a08      	ldr	r2, [pc, #32]	; (8000a4c <HAL_GPIO_EXTI_Callback+0x464>)
 8000a2a:	6153      	str	r3, [r2, #20]
			delta_pos[5] --;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000a2e:	695b      	ldr	r3, [r3, #20]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x468>)
 8000a34:	6153      	str	r3, [r2, #20]
		break;
 8000a36:	bf00      	nop
	}
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2400033c 	.word	0x2400033c
 8000a44:	2400041c 	.word	0x2400041c
 8000a48:	2400030c 	.word	0x2400030c
 8000a4c:	2400020c 	.word	0x2400020c
 8000a50:	24000258 	.word	0x24000258

08000a54 <PWM3_change_duty_cycle>:

void PWM3_change_duty_cycle (int valuePA6, int valuePB1, int valuePA7){
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b08c      	sub	sp, #48	; 0x30
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	60f8      	str	r0, [r7, #12]
 8000a5c:	60b9      	str	r1, [r7, #8]
 8000a5e:	607a      	str	r2, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a74:	2360      	movs	r3, #96	; 0x60
 8000a76:	617b      	str	r3, [r7, #20]
	  sConfigOC.Pulse = valuePA6;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	61bb      	str	r3, [r7, #24]
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61fb      	str	r3, [r7, #28]
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	f107 0314 	add.w	r3, r7, #20
 8000a88:	2200      	movs	r2, #0
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4819      	ldr	r0, [pc, #100]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000a8e:	f005 fe91 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <PWM3_change_duty_cycle+0x48>
	  {
	    Error_Handler();
 8000a98:	f000 fee8 	bl	800186c <Error_Handler>
	  /*sConfigOC.Pulse = valuePB0;
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }*/
	  sConfigOC.Pulse = valuePB1;
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	220c      	movs	r2, #12
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4812      	ldr	r0, [pc, #72]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000aaa:	f005 fe83 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <PWM3_change_duty_cycle+0x64>
	  {
	    Error_Handler();
 8000ab4:	f000 feda 	bl	800186c <Error_Handler>
	  }
	  sConfigOC.Pulse = valuePA7;
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	61bb      	str	r3, [r7, #24]
	  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480b      	ldr	r0, [pc, #44]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000ac6:	f005 fe75 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <PWM3_change_duty_cycle+0x80>
	  	  {
	  	    Error_Handler();
 8000ad0:	f000 fecc 	bl	800186c <Error_Handler>
	  	  }
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4807      	ldr	r0, [pc, #28]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000ad8:	f005 fcf4 	bl	80064c4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000adc:	2104      	movs	r1, #4
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000ae0:	f005 fcf0 	bl	80064c4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000ae4:	210c      	movs	r1, #12
 8000ae6:	4803      	ldr	r0, [pc, #12]	; (8000af4 <PWM3_change_duty_cycle+0xa0>)
 8000ae8:	f005 fcec 	bl	80064c4 <HAL_TIM_PWM_Start>
}
 8000aec:	bf00      	nop
 8000aee:	3730      	adds	r7, #48	; 0x30
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	240003dc 	.word	0x240003dc

08000af8 <HAL_TIM_PeriodElapsedCallback>:
  //HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
  CDC_Transmit_FS((uint8_t *)&ch, 1);
  return ch;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	int j;
	for (j = 0; j < NUM_JOINTS; j++){
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	e063      	b.n	8000bce <HAL_TIM_PeriodElapsedCallback+0xd6>
		if (j <3){
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2b02      	cmp	r3, #2
 8000b0a:	dc1c      	bgt.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x4e>
			joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_1/0.01;
 8000b0c:	4a40      	ldr	r2, [pc, #256]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b14:	ee07 3a90 	vmov	s15, r3
 8000b18:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b1c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b20:	ed9f 6b31 	vldr	d6, [pc, #196]	; 8000be8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000b24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b28:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000bf0 <HAL_TIM_PeriodElapsedCallback+0xf8>
 8000b2c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b30:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b34:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b38:	4a36      	ldr	r2, [pc, #216]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	00db      	lsls	r3, r3, #3
 8000b3e:	4413      	add	r3, r2
 8000b40:	ed83 7b00 	vstr	d7, [r3]
 8000b44:	e03b      	b.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0xc6>
		}
		else if (j < 5){
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	2b04      	cmp	r3, #4
 8000b4a:	dc1c      	bgt.n	8000b86 <HAL_TIM_PeriodElapsedCallback+0x8e>
			joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_2/0.01;
 8000b4c:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	ee07 3a90 	vmov	s15, r3
 8000b58:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b5c:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b60:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8000be8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000b64:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b68:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8000c00 <HAL_TIM_PeriodElapsedCallback+0x108>
 8000b6c:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000b70:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000b74:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b78:	4a26      	ldr	r2, [pc, #152]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	4413      	add	r3, r2
 8000b80:	ed83 7b00 	vstr	d7, [r3]
 8000b84:	e01b      	b.n	8000bbe <HAL_TIM_PeriodElapsedCallback+0xc6>
		}
		else{
			joint_speed[j] = (double)delta_pos[j] *2.0*3.1415926/REV_COUNT_3/0.01;
 8000b86:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b8e:	ee07 3a90 	vmov	s15, r3
 8000b92:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000b96:	ee37 7b07 	vadd.f64	d7, d7, d7
 8000b9a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000be8 <HAL_TIM_PeriodElapsedCallback+0xf0>
 8000b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ba2:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8000c08 <HAL_TIM_PeriodElapsedCallback+0x110>
 8000ba6:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8000baa:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8000bf8 <HAL_TIM_PeriodElapsedCallback+0x100>
 8000bae:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000bb2:	4a18      	ldr	r2, [pc, #96]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	4413      	add	r3, r2
 8000bba:	ed83 7b00 	vstr	d7, [r3]
		}
		delta_pos[j] = 0;
 8000bbe:	4a14      	ldr	r2, [pc, #80]	; (8000c10 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (j = 0; j < NUM_JOINTS; j++){
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	3301      	adds	r3, #1
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	2b05      	cmp	r3, #5
 8000bd2:	dd98      	ble.n	8000b06 <HAL_TIM_PeriodElapsedCallback+0xe>
	}

	need_control = true;
 8000bd4:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	701a      	strb	r2, [r3, #0]
}
 8000bda:	bf00      	nop
 8000bdc:	3714      	adds	r7, #20
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	4d12d84a 	.word	0x4d12d84a
 8000bec:	400921fb 	.word	0x400921fb
 8000bf0:	00000000 	.word	0x00000000
 8000bf4:	40d0e000 	.word	0x40d0e000
 8000bf8:	47ae147b 	.word	0x47ae147b
 8000bfc:	3f847ae1 	.word	0x3f847ae1
 8000c00:	00000000 	.word	0x00000000
 8000c04:	40b67c00 	.word	0x40b67c00
 8000c08:	00000000 	.word	0x00000000
 8000c0c:	405cc000 	.word	0x405cc000
 8000c10:	24000258 	.word	0x24000258
 8000c14:	24000228 	.word	0x24000228
 8000c18:	24000006 	.word	0x24000006

08000c1c <Joint_controller>:

void Joint_controller(bool homing){
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]

}
 8000c26:	bf00      	nop
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b098      	sub	sp, #96	; 0x60
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char* msg = "Hello Nucleo Fun!\n\r";
 8000c3a:	4b7c      	ldr	r3, [pc, #496]	; (8000e2c <main+0x1f8>)
 8000c3c:	65bb      	str	r3, [r7, #88]	; 0x58
	char* EOL = "]\n\r";
 8000c3e:	4b7c      	ldr	r3, [pc, #496]	; (8000e30 <main+0x1fc>)
 8000c40:	657b      	str	r3, [r7, #84]	; 0x54
	char* EOJ = ", ";
 8000c42:	4b7c      	ldr	r3, [pc, #496]	; (8000e34 <main+0x200>)
 8000c44:	653b      	str	r3, [r7, #80]	; 0x50
	char* timer_tester = "timed";
 8000c46:	4b7c      	ldr	r3, [pc, #496]	; (8000e38 <main+0x204>)
 8000c48:	64fb      	str	r3, [r7, #76]	; 0x4c
	char one_motor[10];
	char print_string[60];
	int i;
	//pins: 0,1,2,3,4,7 - PA0(PC10)y, PA1(PD5)y, PB2(PA9)y, PE3(PD6)y, PD4(PC11)y, PD7(PC12)y
	// HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
	encoders[0].port = GPIOA; encoders[0].pin_num = GPIO_PIN_0;
 8000c4a:	4b7c      	ldr	r3, [pc, #496]	; (8000e3c <main+0x208>)
 8000c4c:	4a7c      	ldr	r2, [pc, #496]	; (8000e40 <main+0x20c>)
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	4b7a      	ldr	r3, [pc, #488]	; (8000e3c <main+0x208>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	809a      	strh	r2, [r3, #4]
	encoders[1].port = GPIOC; encoders[1].pin_num = GPIO_PIN_10;
 8000c56:	4b79      	ldr	r3, [pc, #484]	; (8000e3c <main+0x208>)
 8000c58:	4a7a      	ldr	r2, [pc, #488]	; (8000e44 <main+0x210>)
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	4b77      	ldr	r3, [pc, #476]	; (8000e3c <main+0x208>)
 8000c5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c62:	819a      	strh	r2, [r3, #12]
	encoders[2].port = GPIOA; encoders[2].pin_num = GPIO_PIN_1;
 8000c64:	4b75      	ldr	r3, [pc, #468]	; (8000e3c <main+0x208>)
 8000c66:	4a76      	ldr	r2, [pc, #472]	; (8000e40 <main+0x20c>)
 8000c68:	611a      	str	r2, [r3, #16]
 8000c6a:	4b74      	ldr	r3, [pc, #464]	; (8000e3c <main+0x208>)
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	829a      	strh	r2, [r3, #20]
	encoders[3].port = GPIOD; encoders[3].pin_num = GPIO_PIN_5;
 8000c70:	4b72      	ldr	r3, [pc, #456]	; (8000e3c <main+0x208>)
 8000c72:	4a75      	ldr	r2, [pc, #468]	; (8000e48 <main+0x214>)
 8000c74:	619a      	str	r2, [r3, #24]
 8000c76:	4b71      	ldr	r3, [pc, #452]	; (8000e3c <main+0x208>)
 8000c78:	2220      	movs	r2, #32
 8000c7a:	839a      	strh	r2, [r3, #28]
	encoders[4].port = GPIOB; encoders[4].pin_num = GPIO_PIN_2;
 8000c7c:	4b6f      	ldr	r3, [pc, #444]	; (8000e3c <main+0x208>)
 8000c7e:	4a73      	ldr	r2, [pc, #460]	; (8000e4c <main+0x218>)
 8000c80:	621a      	str	r2, [r3, #32]
 8000c82:	4b6e      	ldr	r3, [pc, #440]	; (8000e3c <main+0x208>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	849a      	strh	r2, [r3, #36]	; 0x24
	encoders[5].port = GPIOC; encoders[5].pin_num = GPIO_PIN_7;
 8000c88:	4b6c      	ldr	r3, [pc, #432]	; (8000e3c <main+0x208>)
 8000c8a:	4a6e      	ldr	r2, [pc, #440]	; (8000e44 <main+0x210>)
 8000c8c:	629a      	str	r2, [r3, #40]	; 0x28
 8000c8e:	4b6b      	ldr	r3, [pc, #428]	; (8000e3c <main+0x208>)
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	859a      	strh	r2, [r3, #44]	; 0x2c
	encoders[6].port = GPIOE; encoders[6].pin_num = GPIO_PIN_3;
 8000c94:	4b69      	ldr	r3, [pc, #420]	; (8000e3c <main+0x208>)
 8000c96:	4a6e      	ldr	r2, [pc, #440]	; (8000e50 <main+0x21c>)
 8000c98:	631a      	str	r2, [r3, #48]	; 0x30
 8000c9a:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <main+0x208>)
 8000c9c:	2208      	movs	r2, #8
 8000c9e:	869a      	strh	r2, [r3, #52]	; 0x34
	encoders[7].port = GPIOD; encoders[7].pin_num = GPIO_PIN_6;
 8000ca0:	4b66      	ldr	r3, [pc, #408]	; (8000e3c <main+0x208>)
 8000ca2:	4a69      	ldr	r2, [pc, #420]	; (8000e48 <main+0x214>)
 8000ca4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ca6:	4b65      	ldr	r3, [pc, #404]	; (8000e3c <main+0x208>)
 8000ca8:	2240      	movs	r2, #64	; 0x40
 8000caa:	879a      	strh	r2, [r3, #60]	; 0x3c
	encoders[8].port = GPIOD; encoders[8].pin_num = GPIO_PIN_4;
 8000cac:	4b63      	ldr	r3, [pc, #396]	; (8000e3c <main+0x208>)
 8000cae:	4a66      	ldr	r2, [pc, #408]	; (8000e48 <main+0x214>)
 8000cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8000cb2:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <main+0x208>)
 8000cb4:	2210      	movs	r2, #16
 8000cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	encoders[9].port = GPIOC; encoders[9].pin_num = GPIO_PIN_11;
 8000cba:	4b60      	ldr	r3, [pc, #384]	; (8000e3c <main+0x208>)
 8000cbc:	4a61      	ldr	r2, [pc, #388]	; (8000e44 <main+0x210>)
 8000cbe:	649a      	str	r2, [r3, #72]	; 0x48
 8000cc0:	4b5e      	ldr	r3, [pc, #376]	; (8000e3c <main+0x208>)
 8000cc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	encoders[10].port = GPIOD; encoders[10].pin_num = GPIO_PIN_7;
 8000cca:	4b5c      	ldr	r3, [pc, #368]	; (8000e3c <main+0x208>)
 8000ccc:	4a5e      	ldr	r2, [pc, #376]	; (8000e48 <main+0x214>)
 8000cce:	651a      	str	r2, [r3, #80]	; 0x50
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <main+0x208>)
 8000cd2:	2280      	movs	r2, #128	; 0x80
 8000cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    encoders[11].port = GPIOC; encoders[11].pin_num = GPIO_PIN_12;
 8000cd8:	4b58      	ldr	r3, [pc, #352]	; (8000e3c <main+0x208>)
 8000cda:	4a5a      	ldr	r2, [pc, #360]	; (8000e44 <main+0x210>)
 8000cdc:	659a      	str	r2, [r3, #88]	; 0x58
 8000cde:	4b57      	ldr	r3, [pc, #348]	; (8000e3c <main+0x208>)
 8000ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ce4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    for(i = 0; i < NUM_JOINTS; i++){
 8000ce8:	2300      	movs	r3, #0
 8000cea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000cec:	e011      	b.n	8000d12 <main+0xde>
    	val_encoderA [i] = HIGH;
 8000cee:	4a59      	ldr	r2, [pc, #356]	; (8000e54 <main+0x220>)
 8000cf0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	val_encoderB [i] = HIGH;
 8000cf8:	4a57      	ldr	r2, [pc, #348]	; (8000e58 <main+0x224>)
 8000cfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    	direction [i] = true;
 8000d02:	4a56      	ldr	r2, [pc, #344]	; (8000e5c <main+0x228>)
 8000d04:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d06:	4413      	add	r3, r2
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < NUM_JOINTS; i++){
 8000d0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d0e:	3301      	adds	r3, #1
 8000d10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d14:	2b05      	cmp	r3, #5
 8000d16:	ddea      	ble.n	8000cee <main+0xba>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d18:	f001 f8fe 	bl	8001f18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1c:	f000 f8a6 	bl	8000e6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d20:	f000 fbf6 	bl	8001510 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000d24:	f000 fba8 	bl	8001478 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8000d28:	f000 f95e 	bl	8000fe8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d2c:	f000 f9f8 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d30:	f000 fa50 	bl	80011d4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000d34:	f000 fac0 	bl	80012b8 <MX_TIM5_Init>
  MX_USART1_UART_Init();
 8000d38:	f000 fb52 	bl	80013e0 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8000d3c:	f00b fff2 	bl	800cd24 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8000d40:	f000 fb16 	bl	8001370 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  PWM3_change_duty_cycle(1024, 500, 100);
 8000d44:	2264      	movs	r2, #100	; 0x64
 8000d46:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000d4a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d4e:	f7ff fe81 	bl	8000a54 <PWM3_change_duty_cycle>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //printf(msg);
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000d52:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d56:	483b      	ldr	r0, [pc, #236]	; (8000e44 <main+0x210>)
 8000d58:	f001 fea2 	bl	8002aa0 <HAL_GPIO_ReadPin>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d04c      	beq.n	8000dfc <main+0x1c8>
		  itoa(motor_steps[0], one_motor, 10);
 8000d62:	4b3f      	ldr	r3, [pc, #252]	; (8000e60 <main+0x22c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d6a:	220a      	movs	r2, #10
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00c fd49 	bl	800d804 <itoa>
		  strcpy(print_string, one_motor);
 8000d72:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	4611      	mov	r1, r2
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f00c fe23 	bl	800d9c6 <strcpy>
		  for (i = 1; i < NUM_JOINTS; i++){
 8000d80:	2301      	movs	r3, #1
 8000d82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000d84:	e018      	b.n	8000db8 <main+0x184>
			  itoa(motor_steps[i], one_motor, 10);
 8000d86:	4a36      	ldr	r2, [pc, #216]	; (8000e60 <main+0x22c>)
 8000d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d8e:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8000d92:	220a      	movs	r2, #10
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00c fd35 	bl	800d804 <itoa>
			  strcat(print_string, EOJ);
 8000d9a:	1d3b      	adds	r3, r7, #4
 8000d9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00c fe02 	bl	800d9a8 <strcat>
			  strcat(print_string, one_motor);
 8000da4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fdfb 	bl	800d9a8 <strcat>
		  for (i = 1; i < NUM_JOINTS; i++){
 8000db2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000db4:	3301      	adds	r3, #1
 8000db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000db8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dba:	2b05      	cmp	r3, #5
 8000dbc:	dde3      	ble.n	8000d86 <main+0x152>
		  }
		  strcat(print_string, EOL);
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f00c fdf0 	bl	800d9a8 <strcat>
		  CDC_Transmit_FS((uint8_t*)"motor is at [", strlen(msg));
 8000dc8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8000dca:	f7ff fa85 	bl	80002d8 <strlen>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4823      	ldr	r0, [pc, #140]	; (8000e64 <main+0x230>)
 8000dd6:	f00c f89d 	bl	800cf14 <CDC_Transmit_FS>
		  HAL_Delay(2);
 8000dda:	2002      	movs	r0, #2
 8000ddc:	f001 f92e 	bl	800203c <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)print_string, strlen(print_string));
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fa78 	bl	80002d8 <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	4611      	mov	r1, r2
 8000df0:	4618      	mov	r0, r3
 8000df2:	f00c f88f 	bl	800cf14 <CDC_Transmit_FS>
		  HAL_Delay(2);
 8000df6:	2002      	movs	r0, #2
 8000df8:	f001 f920 	bl	800203c <HAL_Delay>
	  }
	  if (need_control){
 8000dfc:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <main+0x234>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0a5      	beq.n	8000d52 <main+0x11e>
		  Joint_controller(false);
 8000e06:	2000      	movs	r0, #0
 8000e08:	f7ff ff08 	bl	8000c1c <Joint_controller>
		  need_control = false;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <main+0x234>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
		  CDC_Transmit_FS((uint8_t*)timer_tester, strlen(timer_tester));
 8000e12:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e14:	f7ff fa60 	bl	80002d8 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000e20:	f00c f878 	bl	800cf14 <CDC_Transmit_FS>
		  HAL_Delay(1);
 8000e24:	2001      	movs	r0, #1
 8000e26:	f001 f909 	bl	800203c <HAL_Delay>
	  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)){
 8000e2a:	e792      	b.n	8000d52 <main+0x11e>
 8000e2c:	0800da70 	.word	0x0800da70
 8000e30:	0800da84 	.word	0x0800da84
 8000e34:	0800da88 	.word	0x0800da88
 8000e38:	0800da8c 	.word	0x0800da8c
 8000e3c:	2400033c 	.word	0x2400033c
 8000e40:	58020000 	.word	0x58020000
 8000e44:	58020800 	.word	0x58020800
 8000e48:	58020c00 	.word	0x58020c00
 8000e4c:	58020400 	.word	0x58020400
 8000e50:	58021000 	.word	0x58021000
 8000e54:	2400030c 	.word	0x2400030c
 8000e58:	2400041c 	.word	0x2400041c
 8000e5c:	24000000 	.word	0x24000000
 8000e60:	2400020c 	.word	0x2400020c
 8000e64:	0800da94 	.word	0x0800da94
 8000e68:	24000006 	.word	0x24000006

08000e6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b0cc      	sub	sp, #304	; 0x130
 8000e70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e72:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000e76:	224c      	movs	r2, #76	; 0x4c
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f00c fcd4 	bl	800d828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e80:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000e84:	2220      	movs	r2, #32
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f00c fccd 	bl	800d828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4618      	mov	r0, r3
 8000e94:	23bc      	movs	r3, #188	; 0xbc
 8000e96:	461a      	mov	r2, r3
 8000e98:	2100      	movs	r1, #0
 8000e9a:	f00c fcc5 	bl	800d828 <memset>

  /** Supply configuration update enable 
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	f003 f824 	bl	8003eec <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ea4:	1d3b      	adds	r3, r7, #4
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	4b4c      	ldr	r3, [pc, #304]	; (8000fdc <SystemClock_Config+0x170>)
 8000eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eae:	4a4b      	ldr	r2, [pc, #300]	; (8000fdc <SystemClock_Config+0x170>)
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000eb6:	4b49      	ldr	r3, [pc, #292]	; (8000fdc <SystemClock_Config+0x170>)
 8000eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	1d3b      	adds	r3, r7, #4
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	4a46      	ldr	r2, [pc, #280]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ec8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ecc:	6193      	str	r3, [r2, #24]
 8000ece:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ed0:	699b      	ldr	r3, [r3, #24]
 8000ed2:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000ed6:	1d3b      	adds	r3, r7, #4
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ede:	bf00      	nop
 8000ee0:	4b3f      	ldr	r3, [pc, #252]	; (8000fe0 <SystemClock_Config+0x174>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eec:	d1f8      	bne.n	8000ee0 <SystemClock_Config+0x74>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ef4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ef8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000efc:	2302      	movs	r3, #2
 8000efe:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f02:	2302      	movs	r3, #2
 8000f04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 54;
 8000f0e:	2336      	movs	r3, #54	; 0x36
 8000f10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f14:	2302      	movs	r3, #2
 8000f16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000f1a:	2309      	movs	r3, #9
 8000f1c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f26:	230c      	movs	r3, #12
 8000f28:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f38:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 f81f 	bl	8003f80 <HAL_RCC_OscConfig>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8000f48:	f000 fc90 	bl	800186c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f4c:	233f      	movs	r3, #63	; 0x3f
 8000f4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f52:	2303      	movs	r3, #3
 8000f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f64:	2340      	movs	r3, #64	; 0x40
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f78:	2340      	movs	r3, #64	; 0x40
 8000f7a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f7e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000f82:	2103      	movs	r1, #3
 8000f84:	4618      	mov	r0, r3
 8000f86:	f003 fbd3 	bl	8004730 <HAL_RCC_ClockConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x128>
  {
    Error_Handler();
 8000f90:	f000 fc6c 	bl	800186c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USART1
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <SystemClock_Config+0x178>)
 8000f9a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f9c:	f107 0308 	add.w	r3, r7, #8
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	2200      	movs	r2, #0
 8000faa:	679a      	str	r2, [r3, #120]	; 0x78
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000fb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 ff3b 	bl	8004e38 <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x160>
  {
    Error_Handler();
 8000fc8:	f000 fc50 	bl	800186c <Error_Handler>
  }
  /** Enable USB Voltage detector 
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000fcc:	f002 ffc8 	bl	8003f60 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000fd0:	bf00      	nop
 8000fd2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	58000400 	.word	0x58000400
 8000fe0:	58024800 	.word	0x58024800
 8000fe4:	00040003 	.word	0x00040003

08000fe8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b096      	sub	sp, #88	; 0x58
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
 8001008:	611a      	str	r2, [r3, #16]
 800100a:	615a      	str	r2, [r3, #20]
 800100c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100e:	1d3b      	adds	r3, r7, #4
 8001010:	222c      	movs	r2, #44	; 0x2c
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00c fc07 	bl	800d828 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800101a:	4b3f      	ldr	r3, [pc, #252]	; (8001118 <MX_TIM1_Init+0x130>)
 800101c:	4a3f      	ldr	r2, [pc, #252]	; (800111c <MX_TIM1_Init+0x134>)
 800101e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1080-1;
 8001020:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <MX_TIM1_Init+0x130>)
 8001022:	f240 4237 	movw	r2, #1079	; 0x437
 8001026:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001028:	4b3b      	ldr	r3, [pc, #236]	; (8001118 <MX_TIM1_Init+0x130>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024-1;
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <MX_TIM1_Init+0x130>)
 8001030:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001034:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <MX_TIM1_Init+0x130>)
 8001038:	2200      	movs	r2, #0
 800103a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <MX_TIM1_Init+0x130>)
 800103e:	2200      	movs	r2, #0
 8001040:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001042:	4b35      	ldr	r3, [pc, #212]	; (8001118 <MX_TIM1_Init+0x130>)
 8001044:	2200      	movs	r2, #0
 8001046:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001048:	4833      	ldr	r0, [pc, #204]	; (8001118 <MX_TIM1_Init+0x130>)
 800104a:	f005 fa10 	bl	800646e <HAL_TIM_PWM_Init>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001054:	f000 fc0a 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001058:	2300      	movs	r3, #0
 800105a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800105c:	2300      	movs	r3, #0
 800105e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001060:	2300      	movs	r3, #0
 8001062:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001068:	4619      	mov	r1, r3
 800106a:	482b      	ldr	r0, [pc, #172]	; (8001118 <MX_TIM1_Init+0x130>)
 800106c:	f006 f870 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001076:	f000 fbf9 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800107a:	2360      	movs	r3, #96	; 0x60
 800107c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001086:	2300      	movs	r3, #0
 8001088:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800108a:	2300      	movs	r3, #0
 800108c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800108e:	2300      	movs	r3, #0
 8001090:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001092:	2300      	movs	r3, #0
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001096:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <MX_TIM1_Init+0x130>)
 80010a0:	f005 fb88 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80010aa:	f000 fbdf 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010ae:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010b2:	2208      	movs	r2, #8
 80010b4:	4619      	mov	r1, r3
 80010b6:	4818      	ldr	r0, [pc, #96]	; (8001118 <MX_TIM1_Init+0x130>)
 80010b8:	f005 fb7c 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 80010c2:	f000 fbd3 	bl	800186c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4807      	ldr	r0, [pc, #28]	; (8001118 <MX_TIM1_Init+0x130>)
 80010fc:	f006 f8b0 	bl	8007260 <HAL_TIMEx_ConfigBreakDeadTime>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM1_Init+0x122>
  {
    Error_Handler();
 8001106:	f000 fbb1 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <MX_TIM1_Init+0x130>)
 800110c:	f000 fc5e 	bl	80019cc <HAL_TIM_MspPostInit>

}
 8001110:	bf00      	nop
 8001112:	3758      	adds	r7, #88	; 0x58
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	240004c0 	.word	0x240004c0
 800111c:	40010000 	.word	0x40010000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	f107 031c 	add.w	r3, r7, #28
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
 8001140:	615a      	str	r2, [r3, #20]
 8001142:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001144:	4b22      	ldr	r3, [pc, #136]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001146:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800114a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1080-1;
 800114c:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800114e:	f240 4237 	movw	r2, #1079	; 0x437
 8001152:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024-1;
 800115a:	4b1d      	ldr	r3, [pc, #116]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800115c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001160:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800116e:	4818      	ldr	r0, [pc, #96]	; (80011d0 <MX_TIM2_Init+0xb0>)
 8001170:	f005 f97d 	bl	800646e <HAL_TIM_PWM_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0x5e>
  {
    Error_Handler();
 800117a:	f000 fb77 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001182:	2300      	movs	r3, #0
 8001184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001186:	f107 031c 	add.w	r3, r7, #28
 800118a:	4619      	mov	r1, r3
 800118c:	4810      	ldr	r0, [pc, #64]	; (80011d0 <MX_TIM2_Init+0xb0>)
 800118e:	f005 ffdf 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8001198:	f000 fb68 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119c:	2360      	movs	r3, #96	; 0x60
 800119e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a8:	2300      	movs	r3, #0
 80011aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011ac:	463b      	mov	r3, r7
 80011ae:	2200      	movs	r2, #0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4807      	ldr	r0, [pc, #28]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011b4:	f005 fafe 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80011be:	f000 fb55 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011c2:	4803      	ldr	r0, [pc, #12]	; (80011d0 <MX_TIM2_Init+0xb0>)
 80011c4:	f000 fc02 	bl	80019cc <HAL_TIM_MspPostInit>

}
 80011c8:	bf00      	nop
 80011ca:	3728      	adds	r7, #40	; 0x28
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	24000500 	.word	0x24000500

080011d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	; 0x28
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
 80011e2:	605a      	str	r2, [r3, #4]
 80011e4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
 80011f4:	615a      	str	r2, [r3, #20]
 80011f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <MX_TIM3_Init+0xdc>)
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <MX_TIM3_Init+0xe0>)
 80011fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1080-1;
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001200:	f240 4237 	movw	r2, #1079	; 0x437
 8001204:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001206:	4b2a      	ldr	r3, [pc, #168]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024-1;
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800120e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001212:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001216:	2200      	movs	r2, #0
 8001218:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800121a:	4b25      	ldr	r3, [pc, #148]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001222:	f005 f924 	bl	800646e <HAL_TIM_PWM_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 800122c:	f000 fb1e 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	481c      	ldr	r0, [pc, #112]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001240:	f005 ff86 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800124a:	f000 fb0f 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800124e:	2360      	movs	r3, #96	; 0x60
 8001250:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001256:	2300      	movs	r3, #0
 8001258:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800125e:	463b      	mov	r3, r7
 8001260:	2200      	movs	r2, #0
 8001262:	4619      	mov	r1, r3
 8001264:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001266:	f005 faa5 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8001270:	f000 fafc 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	2204      	movs	r2, #4
 8001278:	4619      	mov	r1, r3
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_TIM3_Init+0xdc>)
 800127c:	f005 fa9a 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 8001286:	f000 faf1 	bl	800186c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	220c      	movs	r2, #12
 800128e:	4619      	mov	r1, r3
 8001290:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM3_Init+0xdc>)
 8001292:	f005 fa8f 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800129c:	f000 fae6 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a0:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM3_Init+0xdc>)
 80012a2:	f000 fb93 	bl	80019cc <HAL_TIM_MspPostInit>

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	240003dc 	.word	0x240003dc
 80012b4:	40000400 	.word	0x40000400

080012b8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012be:	f107 031c 	add.w	r3, r7, #28
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
 80012c6:	605a      	str	r2, [r3, #4]
 80012c8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	463b      	mov	r3, r7
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]
 80012d8:	615a      	str	r2, [r3, #20]
 80012da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MX_TIM5_Init+0xb4>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 1080-1;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012e4:	f240 4237 	movw	r2, #1079	; 0x437
 80012e8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ea:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024-1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012f2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80012f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <MX_TIM5_Init+0xb0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001304:	4818      	ldr	r0, [pc, #96]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001306:	f005 f8b2 	bl	800646e <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM5_Init+0x5c>
  {
    Error_Handler();
 8001310:	f000 faac 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4811      	ldr	r0, [pc, #68]	; (8001368 <MX_TIM5_Init+0xb0>)
 8001324:	f005 ff14 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM5_Init+0x7a>
  {
    Error_Handler();
 800132e:	f000 fa9d 	bl	800186c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	; 0x60
 8001334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	220c      	movs	r2, #12
 8001346:	4619      	mov	r1, r3
 8001348:	4807      	ldr	r0, [pc, #28]	; (8001368 <MX_TIM5_Init+0xb0>)
 800134a:	f005 fa33 	bl	80067b4 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM5_Init+0xa0>
  {
    Error_Handler();
 8001354:	f000 fa8a 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001358:	4803      	ldr	r0, [pc, #12]	; (8001368 <MX_TIM5_Init+0xb0>)
 800135a:	f000 fb37 	bl	80019cc <HAL_TIM_MspPostInit>

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	; 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	2400039c 	.word	0x2400039c
 800136c:	40000c00 	.word	0x40000c00

08001370 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001380:	4b15      	ldr	r3, [pc, #84]	; (80013d8 <MX_TIM7_Init+0x68>)
 8001382:	4a16      	ldr	r2, [pc, #88]	; (80013dc <MX_TIM7_Init+0x6c>)
 8001384:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1080-1;
 8001386:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <MX_TIM7_Init+0x68>)
 8001388:	f240 4237 	movw	r2, #1079	; 0x437
 800138c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <MX_TIM7_Init+0x68>)
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001394:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <MX_TIM7_Init+0x68>)
 8001396:	f240 32e7 	movw	r2, #999	; 0x3e7
 800139a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <MX_TIM7_Init+0x68>)
 800139e:	2280      	movs	r2, #128	; 0x80
 80013a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013a2:	480d      	ldr	r0, [pc, #52]	; (80013d8 <MX_TIM7_Init+0x68>)
 80013a4:	f005 f838 	bl	8006418 <HAL_TIM_Base_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 80013ae:	f000 fa5d 	bl	800186c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	; (80013d8 <MX_TIM7_Init+0x68>)
 80013c0:	f005 fec6 	bl	8007150 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80013ca:	f000 fa4f 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000540 	.word	0x24000540
 80013dc:	40001400 	.word	0x40001400

080013e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e4:	4b22      	ldr	r3, [pc, #136]	; (8001470 <MX_USART1_UART_Init+0x90>)
 80013e6:	4a23      	ldr	r2, [pc, #140]	; (8001474 <MX_USART1_UART_Init+0x94>)
 80013e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80013ea:	4b21      	ldr	r3, [pc, #132]	; (8001470 <MX_USART1_UART_Init+0x90>)
 80013ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80013f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f2:	4b1f      	ldr	r3, [pc, #124]	; (8001470 <MX_USART1_UART_Init+0x90>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013f8:	4b1d      	ldr	r3, [pc, #116]	; (8001470 <MX_USART1_UART_Init+0x90>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013fe:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <MX_USART1_UART_Init+0x90>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001404:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <MX_USART1_UART_Init+0x90>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	4b17      	ldr	r3, [pc, #92]	; (8001470 <MX_USART1_UART_Init+0x90>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001416:	4b16      	ldr	r3, [pc, #88]	; (8001470 <MX_USART1_UART_Init+0x90>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800141c:	4b14      	ldr	r3, [pc, #80]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800141e:	2200      	movs	r2, #0
 8001420:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <MX_USART1_UART_Init+0x90>)
 8001424:	2200      	movs	r2, #0
 8001426:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001428:	4811      	ldr	r0, [pc, #68]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800142a:	f005 ffb5 	bl	8007398 <HAL_UART_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001434:	f000 fa1a 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001438:	2100      	movs	r1, #0
 800143a:	480d      	ldr	r0, [pc, #52]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800143c:	f008 fd23 	bl	8009e86 <HAL_UARTEx_SetTxFifoThreshold>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001446:	f000 fa11 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800144a:	2100      	movs	r1, #0
 800144c:	4808      	ldr	r0, [pc, #32]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800144e:	f008 fd58 	bl	8009f02 <HAL_UARTEx_SetRxFifoThreshold>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001458:	f000 fa08 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800145c:	4804      	ldr	r0, [pc, #16]	; (8001470 <MX_USART1_UART_Init+0x90>)
 800145e:	f008 fcd9 	bl	8009e14 <HAL_UARTEx_DisableFifoMode>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001468:	f000 fa00 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	24000434 	.word	0x24000434
 8001474:	40011000 	.word	0x40011000

08001478 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800147c:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_USART3_UART_Init+0x90>)
 800147e:	4a23      	ldr	r2, [pc, #140]	; (800150c <MX_USART3_UART_Init+0x94>)
 8001480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001482:	4b21      	ldr	r3, [pc, #132]	; (8001508 <MX_USART3_UART_Init+0x90>)
 8001484:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_USART3_UART_Init+0x90>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_USART3_UART_Init+0x90>)
 8001492:	2200      	movs	r2, #0
 8001494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_USART3_UART_Init+0x90>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_USART3_UART_Init+0x90>)
 800149e:	220c      	movs	r2, #12
 80014a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014c2:	f005 ff69 	bl	8007398 <HAL_UART_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80014cc:	f000 f9ce 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d0:	2100      	movs	r1, #0
 80014d2:	480d      	ldr	r0, [pc, #52]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014d4:	f008 fcd7 	bl	8009e86 <HAL_UARTEx_SetTxFifoThreshold>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80014de:	f000 f9c5 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014e2:	2100      	movs	r1, #0
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014e6:	f008 fd0c 	bl	8009f02 <HAL_UARTEx_SetRxFifoThreshold>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80014f0:	f000 f9bc 	bl	800186c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80014f4:	4804      	ldr	r0, [pc, #16]	; (8001508 <MX_USART3_UART_Init+0x90>)
 80014f6:	f008 fc8d 	bl	8009e14 <HAL_UARTEx_DisableFifoMode>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001500:	f000 f9b4 	bl	800186c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	24000280 	.word	0x24000280
 800150c:	40004800 	.word	0x40004800

08001510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08e      	sub	sp, #56	; 0x38
 8001514:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2200      	movs	r2, #0
 800151c:	601a      	str	r2, [r3, #0]
 800151e:	605a      	str	r2, [r3, #4]
 8001520:	609a      	str	r2, [r3, #8]
 8001522:	60da      	str	r2, [r3, #12]
 8001524:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001526:	4bc2      	ldr	r3, [pc, #776]	; (8001830 <MX_GPIO_Init+0x320>)
 8001528:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152c:	4ac0      	ldr	r2, [pc, #768]	; (8001830 <MX_GPIO_Init+0x320>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001536:	4bbe      	ldr	r3, [pc, #760]	; (8001830 <MX_GPIO_Init+0x320>)
 8001538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	623b      	str	r3, [r7, #32]
 8001542:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001544:	4bba      	ldr	r3, [pc, #744]	; (8001830 <MX_GPIO_Init+0x320>)
 8001546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800154a:	4ab9      	ldr	r2, [pc, #740]	; (8001830 <MX_GPIO_Init+0x320>)
 800154c:	f043 0304 	orr.w	r3, r3, #4
 8001550:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001554:	4bb6      	ldr	r3, [pc, #728]	; (8001830 <MX_GPIO_Init+0x320>)
 8001556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800155a:	f003 0304 	and.w	r3, r3, #4
 800155e:	61fb      	str	r3, [r7, #28]
 8001560:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001562:	4bb3      	ldr	r3, [pc, #716]	; (8001830 <MX_GPIO_Init+0x320>)
 8001564:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001568:	4ab1      	ldr	r2, [pc, #708]	; (8001830 <MX_GPIO_Init+0x320>)
 800156a:	f043 0320 	orr.w	r3, r3, #32
 800156e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001572:	4baf      	ldr	r3, [pc, #700]	; (8001830 <MX_GPIO_Init+0x320>)
 8001574:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001578:	f003 0320 	and.w	r3, r3, #32
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001580:	4bab      	ldr	r3, [pc, #684]	; (8001830 <MX_GPIO_Init+0x320>)
 8001582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001586:	4aaa      	ldr	r2, [pc, #680]	; (8001830 <MX_GPIO_Init+0x320>)
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001590:	4ba7      	ldr	r3, [pc, #668]	; (8001830 <MX_GPIO_Init+0x320>)
 8001592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	617b      	str	r3, [r7, #20]
 800159c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800159e:	4ba4      	ldr	r3, [pc, #656]	; (8001830 <MX_GPIO_Init+0x320>)
 80015a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015a4:	4aa2      	ldr	r2, [pc, #648]	; (8001830 <MX_GPIO_Init+0x320>)
 80015a6:	f043 0301 	orr.w	r3, r3, #1
 80015aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ae:	4ba0      	ldr	r3, [pc, #640]	; (8001830 <MX_GPIO_Init+0x320>)
 80015b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015bc:	4b9c      	ldr	r3, [pc, #624]	; (8001830 <MX_GPIO_Init+0x320>)
 80015be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015c2:	4a9b      	ldr	r2, [pc, #620]	; (8001830 <MX_GPIO_Init+0x320>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015cc:	4b98      	ldr	r3, [pc, #608]	; (8001830 <MX_GPIO_Init+0x320>)
 80015ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015da:	4b95      	ldr	r3, [pc, #596]	; (8001830 <MX_GPIO_Init+0x320>)
 80015dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015e0:	4a93      	ldr	r2, [pc, #588]	; (8001830 <MX_GPIO_Init+0x320>)
 80015e2:	f043 0308 	orr.w	r3, r3, #8
 80015e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80015ea:	4b91      	ldr	r3, [pc, #580]	; (8001830 <MX_GPIO_Init+0x320>)
 80015ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015f0:	f003 0308 	and.w	r3, r3, #8
 80015f4:	60bb      	str	r3, [r7, #8]
 80015f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80015f8:	4b8d      	ldr	r3, [pc, #564]	; (8001830 <MX_GPIO_Init+0x320>)
 80015fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80015fe:	4a8c      	ldr	r2, [pc, #560]	; (8001830 <MX_GPIO_Init+0x320>)
 8001600:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001604:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001608:	4b89      	ldr	r3, [pc, #548]	; (8001830 <MX_GPIO_Init+0x320>)
 800160a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800160e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001616:	2200      	movs	r2, #0
 8001618:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800161c:	4885      	ldr	r0, [pc, #532]	; (8001834 <MX_GPIO_Init+0x324>)
 800161e:	f001 fa57 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2140      	movs	r1, #64	; 0x40
 8001626:	4884      	ldr	r0, [pc, #528]	; (8001838 <MX_GPIO_Init+0x328>)
 8001628:	f001 fa52 	bl	8002ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800162c:	2314      	movs	r3, #20
 800162e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001630:	2300      	movs	r3, #0
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163c:	4619      	mov	r1, r3
 800163e:	487f      	ldr	r0, [pc, #508]	; (800183c <MX_GPIO_Init+0x32c>)
 8001640:	f001 f87e 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001644:	2308      	movs	r3, #8
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001648:	4b7d      	ldr	r3, [pc, #500]	; (8001840 <MX_GPIO_Init+0x330>)
 800164a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164c:	2301      	movs	r3, #1
 800164e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4619      	mov	r1, r3
 8001656:	4879      	ldr	r0, [pc, #484]	; (800183c <MX_GPIO_Init+0x32c>)
 8001658:	f001 f872 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800165c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001662:	2300      	movs	r3, #0
 8001664:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001666:	2302      	movs	r3, #2
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800166a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800166e:	4619      	mov	r1, r3
 8001670:	4874      	ldr	r0, [pc, #464]	; (8001844 <MX_GPIO_Init+0x334>)
 8001672:	f001 f865 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001676:	2380      	movs	r3, #128	; 0x80
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800167a:	2300      	movs	r3, #0
 800167c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001682:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001686:	4619      	mov	r1, r3
 8001688:	486f      	ldr	r0, [pc, #444]	; (8001848 <MX_GPIO_Init+0x338>)
 800168a:	f001 f859 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_7;
 800168e:	2382      	movs	r3, #130	; 0x82
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001692:	2300      	movs	r3, #0
 8001694:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	2301      	movs	r3, #1
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800169a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169e:	4619      	mov	r1, r3
 80016a0:	4868      	ldr	r0, [pc, #416]	; (8001844 <MX_GPIO_Init+0x334>)
 80016a2:	f001 f84d 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA9 PA13 
                           PA14 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_9|GPIO_PIN_13 
 80016a6:	f24e 2303 	movw	r3, #57859	; 0xe203
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016ac:	4b64      	ldr	r3, [pc, #400]	; (8001840 <MX_GPIO_Init+0x330>)
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016b0:	2301      	movs	r3, #1
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	4619      	mov	r1, r3
 80016ba:	4864      	ldr	r0, [pc, #400]	; (800184c <MX_GPIO_Init+0x33c>)
 80016bc:	f001 f840 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_MDIO_Pin */
  GPIO_InitStruct.Pin = RMII_MDIO_Pin;
 80016c0:	2304      	movs	r3, #4
 80016c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016d0:	230b      	movs	r3, #11
 80016d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_MDIO_GPIO_Port, &GPIO_InitStruct);
 80016d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d8:	4619      	mov	r1, r3
 80016da:	485c      	ldr	r0, [pc, #368]	; (800184c <MX_GPIO_Init+0x33c>)
 80016dc:	f001 f830 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016e0:	2330      	movs	r3, #48	; 0x30
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	2302      	movs	r3, #2
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016f0:	230b      	movs	r3, #11
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016f8:	4619      	mov	r1, r3
 80016fa:	4852      	ldr	r0, [pc, #328]	; (8001844 <MX_GPIO_Init+0x334>)
 80016fc:	f001 f820 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001700:	2304      	movs	r3, #4
 8001702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001704:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <MX_GPIO_Init+0x330>)
 8001706:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001708:	2301      	movs	r3, #1
 800170a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001710:	4619      	mov	r1, r3
 8001712:	4848      	ldr	r0, [pc, #288]	; (8001834 <MX_GPIO_Init+0x324>)
 8001714:	f001 f814 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001718:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800171c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171e:	2302      	movs	r3, #2
 8001720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	2300      	movs	r3, #0
 8001728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800172a:	230b      	movs	r3, #11
 800172c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800172e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001732:	4619      	mov	r1, r3
 8001734:	483f      	ldr	r0, [pc, #252]	; (8001834 <MX_GPIO_Init+0x324>)
 8001736:	f001 f803 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800173a:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001740:	2301      	movs	r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001750:	4619      	mov	r1, r3
 8001752:	4838      	ldr	r0, [pc, #224]	; (8001834 <MX_GPIO_Init+0x324>)
 8001754:	f000 fff4 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001758:	2340      	movs	r3, #64	; 0x40
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175c:	2301      	movs	r3, #1
 800175e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001764:	2300      	movs	r3, #0
 8001766:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800176c:	4619      	mov	r1, r3
 800176e:	4832      	ldr	r0, [pc, #200]	; (8001838 <MX_GPIO_Init+0x328>)
 8001770:	f000 ffe6 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001778:	2300      	movs	r3, #0
 800177a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800177c:	2301      	movs	r3, #1
 800177e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001784:	4619      	mov	r1, r3
 8001786:	482c      	ldr	r0, [pc, #176]	; (8001838 <MX_GPIO_Init+0x328>)
 8001788:	f000 ffda 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800178c:	2308      	movs	r3, #8
 800178e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179c:	4619      	mov	r1, r3
 800179e:	482c      	ldr	r0, [pc, #176]	; (8001850 <MX_GPIO_Init+0x340>)
 80017a0:	f000 ffce 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80017a4:	23f0      	movs	r3, #240	; 0xf0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80017a8:	4b25      	ldr	r3, [pc, #148]	; (8001840 <MX_GPIO_Init+0x330>)
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ac:	2301      	movs	r3, #1
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <MX_GPIO_Init+0x340>)
 80017b8:	f000 ffc2 	bl	8002740 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80017bc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80017c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c6:	2300      	movs	r3, #0
 80017c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017ce:	230b      	movs	r3, #11
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017d6:	4619      	mov	r1, r3
 80017d8:	4817      	ldr	r0, [pc, #92]	; (8001838 <MX_GPIO_Init+0x328>)
 80017da:	f000 ffb1 	bl	8002740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017de:	2200      	movs	r2, #0
 80017e0:	2100      	movs	r1, #0
 80017e2:	2006      	movs	r0, #6
 80017e4:	f000 fd33 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017e8:	2006      	movs	r0, #6
 80017ea:	f000 fd4a 	bl	8002282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2007      	movs	r0, #7
 80017f4:	f000 fd2b 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80017f8:	2007      	movs	r0, #7
 80017fa:	f000 fd42 	bl	8002282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80017fe:	2200      	movs	r2, #0
 8001800:	2100      	movs	r1, #0
 8001802:	2008      	movs	r0, #8
 8001804:	f000 fd23 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001808:	2008      	movs	r0, #8
 800180a:	f000 fd3a 	bl	8002282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2009      	movs	r0, #9
 8001814:	f000 fd1b 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001818:	2009      	movs	r0, #9
 800181a:	f000 fd32 	bl	8002282 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2100      	movs	r1, #0
 8001822:	200a      	movs	r0, #10
 8001824:	f000 fd13 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001828:	200a      	movs	r0, #10
 800182a:	f000 fd2a 	bl	8002282 <HAL_NVIC_EnableIRQ>
 800182e:	e011      	b.n	8001854 <MX_GPIO_Init+0x344>
 8001830:	58024400 	.word	0x58024400
 8001834:	58020400 	.word	0x58020400
 8001838:	58021800 	.word	0x58021800
 800183c:	58021000 	.word	0x58021000
 8001840:	11310000 	.word	0x11310000
 8001844:	58020800 	.word	0x58020800
 8001848:	58021400 	.word	0x58021400
 800184c:	58020000 	.word	0x58020000
 8001850:	58020c00 	.word	0x58020c00

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	2017      	movs	r0, #23
 800185a:	f000 fcf8 	bl	800224e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800185e:	2017      	movs	r0, #23
 8001860:	f000 fd0f 	bl	8002282 <HAL_NVIC_EnableIRQ>

}
 8001864:	bf00      	nop
 8001866:	3738      	adds	r7, #56	; 0x38
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <HAL_MspInit+0x30>)
 8001884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001888:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x30>)
 800188a:	f043 0302 	orr.w	r3, r3, #2
 800188e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x30>)
 8001894:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	58024400 	.word	0x58024400

080018b0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a2b      	ldr	r2, [pc, #172]	; (800196c <HAL_TIM_PWM_MspInit+0xbc>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d10f      	bne.n	80018e2 <HAL_TIM_PWM_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c2:	4b2b      	ldr	r3, [pc, #172]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018c8:	4a29      	ldr	r2, [pc, #164]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018ca:	f043 0301 	orr.w	r3, r3, #1
 80018ce:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80018d2:	4b27      	ldr	r3, [pc, #156]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	617b      	str	r3, [r7, #20]
 80018de:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80018e0:	e03d      	b.n	800195e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018ea:	d10f      	bne.n	800190c <HAL_TIM_PWM_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ec:	4b20      	ldr	r3, [pc, #128]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80018f2:	4a1f      	ldr	r2, [pc, #124]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80018fc:	4b1c      	ldr	r3, [pc, #112]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 80018fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]
}
 800190a:	e028      	b.n	800195e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM3)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a18      	ldr	r2, [pc, #96]	; (8001974 <HAL_TIM_PWM_MspInit+0xc4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d10f      	bne.n	8001936 <HAL_TIM_PWM_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 8001918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800191c:	4a14      	ldr	r2, [pc, #80]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 800191e:	f043 0302 	orr.w	r3, r3, #2
 8001922:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001926:	4b12      	ldr	r3, [pc, #72]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 8001928:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	e013      	b.n	800195e <HAL_TIM_PWM_MspInit+0xae>
  else if(htim_pwm->Instance==TIM5)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_TIM_PWM_MspInit+0xc8>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d10e      	bne.n	800195e <HAL_TIM_PWM_MspInit+0xae>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 8001942:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 8001948:	f043 0308 	orr.w	r3, r3, #8
 800194c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001950:	4b07      	ldr	r3, [pc, #28]	; (8001970 <HAL_TIM_PWM_MspInit+0xc0>)
 8001952:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001956:	f003 0308 	and.w	r3, r3, #8
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
}
 800195e:	bf00      	nop
 8001960:	371c      	adds	r7, #28
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40010000 	.word	0x40010000
 8001970:	58024400 	.word	0x58024400
 8001974:	40000400 	.word	0x40000400
 8001978:	40000c00 	.word	0x40000c00

0800197c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_TIM_Base_MspInit+0x48>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d116      	bne.n	80019bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001990:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001994:	4a0c      	ldr	r2, [pc, #48]	; (80019c8 <HAL_TIM_Base_MspInit+0x4c>)
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_TIM_Base_MspInit+0x4c>)
 80019a0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019a4:	f003 0320 	and.w	r3, r3, #32
 80019a8:	60fb      	str	r3, [r7, #12]
 80019aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019ac:	2200      	movs	r2, #0
 80019ae:	2100      	movs	r1, #0
 80019b0:	2037      	movs	r0, #55	; 0x37
 80019b2:	f000 fc4c 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019b6:	2037      	movs	r0, #55	; 0x37
 80019b8:	f000 fc63 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80019bc:	bf00      	nop
 80019be:	3710      	adds	r7, #16
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40001400 	.word	0x40001400
 80019c8:	58024400 	.word	0x58024400

080019cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08c      	sub	sp, #48	; 0x30
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_TIM_MspPostInit+0x188>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d120      	bne.n	8001a30 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80019ee:	4b5a      	ldr	r3, [pc, #360]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 80019f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f4:	4a58      	ldr	r2, [pc, #352]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 80019f6:	f043 0310 	orr.w	r3, r3, #16
 80019fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fe:	4b56      	ldr	r3, [pc, #344]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	61bb      	str	r3, [r7, #24]
 8001a0a:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001a0c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a22:	f107 031c 	add.w	r3, r7, #28
 8001a26:	4619      	mov	r1, r3
 8001a28:	484c      	ldr	r0, [pc, #304]	; (8001b5c <HAL_TIM_MspPostInit+0x190>)
 8001a2a:	f000 fe89 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001a2e:	e08c      	b.n	8001b4a <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a38:	d11f      	bne.n	8001a7a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3a:	4b47      	ldr	r3, [pc, #284]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a45      	ldr	r2, [pc, #276]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b43      	ldr	r3, [pc, #268]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a58:	2320      	movs	r3, #32
 8001a5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a64:	2300      	movs	r3, #0
 8001a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6c:	f107 031c 	add.w	r3, r7, #28
 8001a70:	4619      	mov	r1, r3
 8001a72:	483b      	ldr	r0, [pc, #236]	; (8001b60 <HAL_TIM_MspPostInit+0x194>)
 8001a74:	f000 fe64 	bl	8002740 <HAL_GPIO_Init>
}
 8001a78:	e067      	b.n	8001b4a <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM3)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a39      	ldr	r2, [pc, #228]	; (8001b64 <HAL_TIM_MspPostInit+0x198>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d13e      	bne.n	8001b02 <HAL_TIM_MspPostInit+0x136>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a84:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8a:	4a33      	ldr	r2, [pc, #204]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	613b      	str	r3, [r7, #16]
 8001aa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b2d      	ldr	r3, [pc, #180]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a2b      	ldr	r2, [pc, #172]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001aaa:	f043 0302 	orr.w	r3, r3, #2
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b29      	ldr	r3, [pc, #164]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	60fb      	str	r3, [r7, #12]
 8001abe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ac0:	23c0      	movs	r3, #192	; 0xc0
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4821      	ldr	r0, [pc, #132]	; (8001b60 <HAL_TIM_MspPostInit+0x194>)
 8001adc:	f000 fe30 	bl	8002740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001af0:	2302      	movs	r3, #2
 8001af2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af4:	f107 031c 	add.w	r3, r7, #28
 8001af8:	4619      	mov	r1, r3
 8001afa:	481b      	ldr	r0, [pc, #108]	; (8001b68 <HAL_TIM_MspPostInit+0x19c>)
 8001afc:	f000 fe20 	bl	8002740 <HAL_GPIO_Init>
}
 8001b00:	e023      	b.n	8001b4a <HAL_TIM_MspPostInit+0x17e>
  else if(htim->Instance==TIM5)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a19      	ldr	r2, [pc, #100]	; (8001b6c <HAL_TIM_MspPostInit+0x1a0>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d11e      	bne.n	8001b4a <HAL_TIM_MspPostInit+0x17e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001b0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b12:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_TIM_MspPostInit+0x18c>)
 8001b1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b22:	f003 0301 	and.w	r3, r3, #1
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b2a:	2308      	movs	r3, #8
 8001b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2e:	2302      	movs	r3, #2
 8001b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	4619      	mov	r1, r3
 8001b44:	4806      	ldr	r0, [pc, #24]	; (8001b60 <HAL_TIM_MspPostInit+0x194>)
 8001b46:	f000 fdfb 	bl	8002740 <HAL_GPIO_Init>
}
 8001b4a:	bf00      	nop
 8001b4c:	3730      	adds	r7, #48	; 0x30
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40010000 	.word	0x40010000
 8001b58:	58024400 	.word	0x58024400
 8001b5c:	58021000 	.word	0x58021000
 8001b60:	58020000 	.word	0x58020000
 8001b64:	40000400 	.word	0x40000400
 8001b68:	58020400 	.word	0x58020400
 8001b6c:	40000c00 	.word	0x40000c00

08001b70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b08c      	sub	sp, #48	; 0x30
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a41      	ldr	r2, [pc, #260]	; (8001c94 <HAL_UART_MspInit+0x124>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d13f      	bne.n	8001c12 <HAL_UART_MspInit+0xa2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001b98:	4a3f      	ldr	r2, [pc, #252]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ba2:	4b3d      	ldr	r3, [pc, #244]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	61bb      	str	r3, [r7, #24]
 8001bae:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb6:	4a38      	ldr	r2, [pc, #224]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bc0:	4b35      	ldr	r3, [pc, #212]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PB15     ------> USART1_RX
    PB6     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	482c      	ldr	r0, [pc, #176]	; (8001c9c <HAL_UART_MspInit+0x12c>)
 8001bec:	f000 fda8 	bl	8002740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001bf0:	2340      	movs	r3, #64	; 0x40
 8001bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c00:	2307      	movs	r3, #7
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 031c 	add.w	r3, r7, #28
 8001c08:	4619      	mov	r1, r3
 8001c0a:	4824      	ldr	r0, [pc, #144]	; (8001c9c <HAL_UART_MspInit+0x12c>)
 8001c0c:	f000 fd98 	bl	8002740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001c10:	e03b      	b.n	8001c8a <HAL_UART_MspInit+0x11a>
  else if(huart->Instance==USART3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <HAL_UART_MspInit+0x130>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d136      	bne.n	8001c8a <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c1c:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c22:	4a1d      	ldr	r2, [pc, #116]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_UART_MspInit+0x128>)
 8001c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c58:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c5e:	2302      	movs	r3, #2
 8001c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c6e:	f107 031c 	add.w	r3, r7, #28
 8001c72:	4619      	mov	r1, r3
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <HAL_UART_MspInit+0x134>)
 8001c76:	f000 fd63 	bl	8002740 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	2027      	movs	r0, #39	; 0x27
 8001c80:	f000 fae5 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c84:	2027      	movs	r0, #39	; 0x27
 8001c86:	f000 fafc 	bl	8002282 <HAL_NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	; 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40011000 	.word	0x40011000
 8001c98:	58024400 	.word	0x58024400
 8001c9c:	58020400 	.word	0x58020400
 8001ca0:	40004800 	.word	0x40004800
 8001ca4:	58020c00 	.word	0x58020c00

08001ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cba:	e7fe      	b.n	8001cba <HardFault_Handler+0x4>

08001cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <MemManage_Handler+0x4>

08001cc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cea:	b480      	push	{r7}
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cfc:	f000 f97e 	bl	8001ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d00:	bf00      	nop
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d08:	2001      	movs	r0, #1
 8001d0a:	f000 fefa 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001d16:	2002      	movs	r0, #2
 8001d18:	f000 fef3 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001d24:	2004      	movs	r0, #4
 8001d26:	f000 feec 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001d32:	2008      	movs	r0, #8
 8001d34:	f000 fee5 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001d40:	2010      	movs	r0, #16
 8001d42:	f000 fede 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001d4e:	2020      	movs	r0, #32
 8001d50:	f000 fed7 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001d54:	2040      	movs	r0, #64	; 0x40
 8001d56:	f000 fed4 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001d5a:	2080      	movs	r0, #128	; 0x80
 8001d5c:	f000 fed1 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001d60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001d64:	f000 fecd 	bl	8002b02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART3_IRQHandler+0x10>)
 8001d72:	f005 fb61 	bl	8007438 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	24000280 	.word	0x24000280

08001d80 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <TIM7_IRQHandler+0x10>)
 8001d86:	f004 fbf5 	bl	8006574 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	24000540 	.word	0x24000540

08001d94 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d98:	4802      	ldr	r0, [pc, #8]	; (8001da4 <OTG_FS_IRQHandler+0x10>)
 8001d9a:	f001 f823 	bl	8002de4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24001a48 	.word	0x24001a48

08001da8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x50>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d102      	bne.n	8001dbe <_sbrk+0x16>
		heap_end = &end;
 8001db8:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <_sbrk+0x50>)
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <_sbrk+0x54>)
 8001dbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dbe:	4b0e      	ldr	r3, [pc, #56]	; (8001df8 <_sbrk+0x50>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <_sbrk+0x50>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	466a      	mov	r2, sp
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d907      	bls.n	8001de2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dd2:	f00b fcd5 	bl	800d780 <__errno>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	230c      	movs	r3, #12
 8001dda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	e006      	b.n	8001df0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001de2:	4b05      	ldr	r3, [pc, #20]	; (8001df8 <_sbrk+0x50>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4413      	add	r3, r2
 8001dea:	4a03      	ldr	r2, [pc, #12]	; (8001df8 <_sbrk+0x50>)
 8001dec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001dee:	68fb      	ldr	r3, [r7, #12]
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	24000270 	.word	0x24000270
 8001dfc:	24001e58 	.word	0x24001e58

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001e04:	4b29      	ldr	r3, [pc, #164]	; (8001eac <SystemInit+0xac>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a28      	ldr	r2, [pc, #160]	; (8001eac <SystemInit+0xac>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001e14:	4b26      	ldr	r3, [pc, #152]	; (8001eb0 <SystemInit+0xb0>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a25      	ldr	r2, [pc, #148]	; (8001eb0 <SystemInit+0xb0>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e20:	4b23      	ldr	r3, [pc, #140]	; (8001eb0 <SystemInit+0xb0>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001e26:	4b22      	ldr	r3, [pc, #136]	; (8001eb0 <SystemInit+0xb0>)
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	4921      	ldr	r1, [pc, #132]	; (8001eb0 <SystemInit+0xb0>)
 8001e2c:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <SystemInit+0xb4>)
 8001e2e:	4013      	ands	r3, r2
 8001e30:	600b      	str	r3, [r1, #0]

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001e32:	4b1f      	ldr	r3, [pc, #124]	; (8001eb0 <SystemInit+0xb0>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001e38:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <SystemInit+0xb0>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	; (8001eb0 <SystemInit+0xb0>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <SystemInit+0xb0>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 8001e4a:	4b19      	ldr	r3, [pc, #100]	; (8001eb0 <SystemInit+0xb0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 8001e50:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <SystemInit+0xb0>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001e56:	4b16      	ldr	r3, [pc, #88]	; (8001eb0 <SystemInit+0xb0>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 8001e5c:	4b14      	ldr	r3, [pc, #80]	; (8001eb0 <SystemInit+0xb0>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001e62:	4b13      	ldr	r3, [pc, #76]	; (8001eb0 <SystemInit+0xb0>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 8001e68:	4b11      	ldr	r3, [pc, #68]	; (8001eb0 <SystemInit+0xb0>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001e6e:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <SystemInit+0xb0>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e74:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <SystemInit+0xb0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <SystemInit+0xb0>)
 8001e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e7e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <SystemInit+0xb0>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <SystemInit+0xb8>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <SystemInit+0xbc>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e92:	d202      	bcs.n	8001e9a <SystemInit+0x9a>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001e94:	4b0a      	ldr	r3, [pc, #40]	; (8001ec0 <SystemInit+0xc0>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e9a:	4b04      	ldr	r3, [pc, #16]	; (8001eac <SystemInit+0xac>)
 8001e9c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ea0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00
 8001eb0:	58024400 	.word	0x58024400
 8001eb4:	eaf6ed7f 	.word	0xeaf6ed7f
 8001eb8:	5c001000 	.word	0x5c001000
 8001ebc:	ffff0000 	.word	0xffff0000
 8001ec0:	51008108 	.word	0x51008108

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ec8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001eca:	e003      	b.n	8001ed4 <LoopCopyDataInit>

08001ecc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ece:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ed0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ed2:	3104      	adds	r1, #4

08001ed4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ed4:	480b      	ldr	r0, [pc, #44]	; (8001f04 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ed8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eda:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001edc:	d3f6      	bcc.n	8001ecc <CopyDataInit>
  ldr  r2, =_sbss
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ee0:	e002      	b.n	8001ee8 <LoopFillZerobss>

08001ee2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001ee2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ee4:	f842 3b04 	str.w	r3, [r2], #4

08001ee8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ee8:	4b09      	ldr	r3, [pc, #36]	; (8001f10 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001eea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001eec:	d3f9      	bcc.n	8001ee2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eee:	f7ff ff87 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f00b fc4b 	bl	800d78c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7fe fe9d 	bl	8000c34 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001efc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001f00:	0800db44 	.word	0x0800db44
  ldr  r0, =_sdata
 8001f04:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001f08:	240001ec 	.word	0x240001ec
  ldr  r2, =_sbss
 8001f0c:	240001f0 	.word	0x240001f0
  ldr  r3, = _ebss
 8001f10:	24001e54 	.word	0x24001e54

08001f14 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC3_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f1e:	2003      	movs	r0, #3
 8001f20:	f000 f98a 	bl	8002238 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f24:	f002 fdba 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8001f28:	4601      	mov	r1, r0
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <HAL_Init+0x68>)
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	f003 030f 	and.w	r3, r3, #15
 8001f34:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <HAL_Init+0x6c>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	f003 031f 	and.w	r3, r3, #31
 8001f3c:	fa21 f303 	lsr.w	r3, r1, r3
 8001f40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f42:	4b0f      	ldr	r3, [pc, #60]	; (8001f80 <HAL_Init+0x68>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_Init+0x6c>)
 8001f4c:	5cd3      	ldrb	r3, [r2, r3]
 8001f4e:	f003 031f 	and.w	r3, r3, #31
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <HAL_Init+0x70>)
 8001f5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f5c:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <HAL_Init+0x74>)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f62:	2000      	movs	r0, #0
 8001f64:	f000 f814 	bl	8001f90 <HAL_InitTick>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e002      	b.n	8001f78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f72:	f7ff fc83 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f76:	2300      	movs	r3, #0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	58024400 	.word	0x58024400
 8001f84:	0800dafc 	.word	0x0800dafc
 8001f88:	2400000c 	.word	0x2400000c
 8001f8c:	24000008 	.word	0x24000008

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001f98:	4b15      	ldr	r3, [pc, #84]	; (8001ff0 <HAL_InitTick+0x60>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e021      	b.n	8001fe8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <HAL_InitTick+0x64>)
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_InitTick+0x60>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f96f 	bl	800229e <HAL_SYSTICK_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e00e      	b.n	8001fe8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b0f      	cmp	r3, #15
 8001fce:	d80a      	bhi.n	8001fe6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	6879      	ldr	r1, [r7, #4]
 8001fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd8:	f000 f939 	bl	800224e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fdc:	4a06      	ldr	r2, [pc, #24]	; (8001ff8 <HAL_InitTick+0x68>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	24000014 	.word	0x24000014
 8001ff4:	24000008 	.word	0x24000008
 8001ff8:	24000010 	.word	0x24000010

08001ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002000:	4b06      	ldr	r3, [pc, #24]	; (800201c <HAL_IncTick+0x20>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x24>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4413      	add	r3, r2
 800200c:	4a04      	ldr	r2, [pc, #16]	; (8002020 <HAL_IncTick+0x24>)
 800200e:	6013      	str	r3, [r2, #0]
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	24000014 	.word	0x24000014
 8002020:	24000580 	.word	0x24000580

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <HAL_GetTick+0x14>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	24000580 	.word	0x24000580

0800203c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002044:	f7ff ffee 	bl	8002024 <HAL_GetTick>
 8002048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002054:	d005      	beq.n	8002062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002056:	4b09      	ldr	r3, [pc, #36]	; (800207c <HAL_Delay+0x40>)
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	461a      	mov	r2, r3
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	4413      	add	r3, r2
 8002060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002062:	bf00      	nop
 8002064:	f7ff ffde 	bl	8002024 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	68fa      	ldr	r2, [r7, #12]
 8002070:	429a      	cmp	r2, r3
 8002072:	d8f7      	bhi.n	8002064 <HAL_Delay+0x28>
  {
  }
}
 8002074:	bf00      	nop
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	24000014 	.word	0x24000014

08002080 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetREVID+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0c1b      	lsrs	r3, r3, #16
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	5c001000 	.word	0x5c001000

08002098 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020a8:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <__NVIC_SetPriorityGrouping+0x40>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020b4:	4013      	ands	r3, r2
 80020b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <__NVIC_SetPriorityGrouping+0x44>)
 80020c2:	4313      	orrs	r3, r2
 80020c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020c6:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <__NVIC_SetPriorityGrouping+0x40>)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	60d3      	str	r3, [r2, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3714      	adds	r7, #20
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00
 80020dc:	05fa0000 	.word	0x05fa0000

080020e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <__NVIC_GetPriorityGrouping+0x18>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	0a1b      	lsrs	r3, r3, #8
 80020ea:	f003 0307 	and.w	r3, r3, #7
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	e000ed00 	.word	0xe000ed00

080020fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	4603      	mov	r3, r0
 8002104:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800210a:	2b00      	cmp	r3, #0
 800210c:	db0b      	blt.n	8002126 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800210e:	88fb      	ldrh	r3, [r7, #6]
 8002110:	f003 021f 	and.w	r2, r3, #31
 8002114:	4907      	ldr	r1, [pc, #28]	; (8002134 <__NVIC_EnableIRQ+0x38>)
 8002116:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800211a:	095b      	lsrs	r3, r3, #5
 800211c:	2001      	movs	r0, #1
 800211e:	fa00 f202 	lsl.w	r2, r0, r2
 8002122:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	e000e100 	.word	0xe000e100

08002138 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	6039      	str	r1, [r7, #0]
 8002142:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002144:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002148:	2b00      	cmp	r3, #0
 800214a:	db0a      	blt.n	8002162 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	490c      	ldr	r1, [pc, #48]	; (8002184 <__NVIC_SetPriority+0x4c>)
 8002152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002156:	0112      	lsls	r2, r2, #4
 8002158:	b2d2      	uxtb	r2, r2
 800215a:	440b      	add	r3, r1
 800215c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002160:	e00a      	b.n	8002178 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4908      	ldr	r1, [pc, #32]	; (8002188 <__NVIC_SetPriority+0x50>)
 8002168:	88fb      	ldrh	r3, [r7, #6]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3b04      	subs	r3, #4
 8002170:	0112      	lsls	r2, r2, #4
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	440b      	add	r3, r1
 8002176:	761a      	strb	r2, [r3, #24]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	e000e100 	.word	0xe000e100
 8002188:	e000ed00 	.word	0xe000ed00

0800218c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800218c:	b480      	push	{r7}
 800218e:	b089      	sub	sp, #36	; 0x24
 8002190:	af00      	add	r7, sp, #0
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	60b9      	str	r1, [r7, #8]
 8002196:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f003 0307 	and.w	r3, r3, #7
 800219e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	f1c3 0307 	rsb	r3, r3, #7
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	bf28      	it	cs
 80021aa:	2304      	movcs	r3, #4
 80021ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3304      	adds	r3, #4
 80021b2:	2b06      	cmp	r3, #6
 80021b4:	d902      	bls.n	80021bc <NVIC_EncodePriority+0x30>
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3b03      	subs	r3, #3
 80021ba:	e000      	b.n	80021be <NVIC_EncodePriority+0x32>
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43da      	mvns	r2, r3
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	401a      	ands	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021d4:	f04f 31ff 	mov.w	r1, #4294967295
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	43d9      	mvns	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021e4:	4313      	orrs	r3, r2
         );
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	3724      	adds	r7, #36	; 0x24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
	...

080021f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3b01      	subs	r3, #1
 8002200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002204:	d301      	bcc.n	800220a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002206:	2301      	movs	r3, #1
 8002208:	e00f      	b.n	800222a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800220a:	4a0a      	ldr	r2, [pc, #40]	; (8002234 <SysTick_Config+0x40>)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002212:	210f      	movs	r1, #15
 8002214:	f04f 30ff 	mov.w	r0, #4294967295
 8002218:	f7ff ff8e 	bl	8002138 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800221c:	4b05      	ldr	r3, [pc, #20]	; (8002234 <SysTick_Config+0x40>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <SysTick_Config+0x40>)
 8002224:	2207      	movs	r2, #7
 8002226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	e000e010 	.word	0xe000e010

08002238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff ff29 	bl	8002098 <__NVIC_SetPriorityGrouping>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b086      	sub	sp, #24
 8002252:	af00      	add	r7, sp, #0
 8002254:	4603      	mov	r3, r0
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800225c:	f7ff ff40 	bl	80020e0 <__NVIC_GetPriorityGrouping>
 8002260:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	68b9      	ldr	r1, [r7, #8]
 8002266:	6978      	ldr	r0, [r7, #20]
 8002268:	f7ff ff90 	bl	800218c <NVIC_EncodePriority>
 800226c:	4602      	mov	r2, r0
 800226e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002272:	4611      	mov	r1, r2
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff5f 	bl	8002138 <__NVIC_SetPriority>
}
 800227a:	bf00      	nop
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	4603      	mov	r3, r0
 800228a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800228c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff33 	bl	80020fc <__NVIC_EnableIRQ>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b082      	sub	sp, #8
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7ff ffa4 	bl	80021f4 <SysTick_Config>
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3708      	adds	r7, #8
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
	...

080022b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e205      	b.n	80026d6 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2280      	movs	r2, #128	; 0x80
 80022da:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e1fa      	b.n	80026d6 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a8c      	ldr	r2, [pc, #560]	; (8002518 <HAL_DMA_Abort_IT+0x260>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d04a      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a8b      	ldr	r2, [pc, #556]	; (800251c <HAL_DMA_Abort_IT+0x264>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d045      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a89      	ldr	r2, [pc, #548]	; (8002520 <HAL_DMA_Abort_IT+0x268>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d040      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a88      	ldr	r2, [pc, #544]	; (8002524 <HAL_DMA_Abort_IT+0x26c>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d03b      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a86      	ldr	r2, [pc, #536]	; (8002528 <HAL_DMA_Abort_IT+0x270>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d036      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a85      	ldr	r2, [pc, #532]	; (800252c <HAL_DMA_Abort_IT+0x274>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d031      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a83      	ldr	r2, [pc, #524]	; (8002530 <HAL_DMA_Abort_IT+0x278>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d02c      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a82      	ldr	r2, [pc, #520]	; (8002534 <HAL_DMA_Abort_IT+0x27c>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d027      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a80      	ldr	r2, [pc, #512]	; (8002538 <HAL_DMA_Abort_IT+0x280>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d022      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7f      	ldr	r2, [pc, #508]	; (800253c <HAL_DMA_Abort_IT+0x284>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d01d      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a7d      	ldr	r2, [pc, #500]	; (8002540 <HAL_DMA_Abort_IT+0x288>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d018      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a7c      	ldr	r2, [pc, #496]	; (8002544 <HAL_DMA_Abort_IT+0x28c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d013      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a7a      	ldr	r2, [pc, #488]	; (8002548 <HAL_DMA_Abort_IT+0x290>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00e      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a79      	ldr	r2, [pc, #484]	; (800254c <HAL_DMA_Abort_IT+0x294>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a77      	ldr	r2, [pc, #476]	; (8002550 <HAL_DMA_Abort_IT+0x298>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d004      	beq.n	8002380 <HAL_DMA_Abort_IT+0xc8>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a76      	ldr	r2, [pc, #472]	; (8002554 <HAL_DMA_Abort_IT+0x29c>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d101      	bne.n	8002384 <HAL_DMA_Abort_IT+0xcc>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <HAL_DMA_Abort_IT+0xce>
 8002384:	2300      	movs	r3, #0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d065      	beq.n	8002456 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2204      	movs	r2, #4
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a60      	ldr	r2, [pc, #384]	; (8002518 <HAL_DMA_Abort_IT+0x260>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d04a      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5e      	ldr	r2, [pc, #376]	; (800251c <HAL_DMA_Abort_IT+0x264>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d045      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a5d      	ldr	r2, [pc, #372]	; (8002520 <HAL_DMA_Abort_IT+0x268>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d040      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5b      	ldr	r2, [pc, #364]	; (8002524 <HAL_DMA_Abort_IT+0x26c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d03b      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5a      	ldr	r2, [pc, #360]	; (8002528 <HAL_DMA_Abort_IT+0x270>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d036      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_DMA_Abort_IT+0x274>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d031      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a57      	ldr	r2, [pc, #348]	; (8002530 <HAL_DMA_Abort_IT+0x278>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d02c      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a55      	ldr	r2, [pc, #340]	; (8002534 <HAL_DMA_Abort_IT+0x27c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d027      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a54      	ldr	r2, [pc, #336]	; (8002538 <HAL_DMA_Abort_IT+0x280>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d022      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <HAL_DMA_Abort_IT+0x284>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d01d      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a51      	ldr	r2, [pc, #324]	; (8002540 <HAL_DMA_Abort_IT+0x288>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d018      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a4f      	ldr	r2, [pc, #316]	; (8002544 <HAL_DMA_Abort_IT+0x28c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d013      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_DMA_Abort_IT+0x290>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a4c      	ldr	r2, [pc, #304]	; (800254c <HAL_DMA_Abort_IT+0x294>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a4b      	ldr	r2, [pc, #300]	; (8002550 <HAL_DMA_Abort_IT+0x298>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d004      	beq.n	8002432 <HAL_DMA_Abort_IT+0x17a>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a49      	ldr	r2, [pc, #292]	; (8002554 <HAL_DMA_Abort_IT+0x29c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d108      	bne.n	8002444 <HAL_DMA_Abort_IT+0x18c>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	e147      	b.n	80026d4 <HAL_DMA_Abort_IT+0x41c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	e13e      	b.n	80026d4 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020e 	bic.w	r2, r2, #14
 8002464:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a2b      	ldr	r2, [pc, #172]	; (8002518 <HAL_DMA_Abort_IT+0x260>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d04a      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_DMA_Abort_IT+0x264>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d045      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a28      	ldr	r2, [pc, #160]	; (8002520 <HAL_DMA_Abort_IT+0x268>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d040      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a26      	ldr	r2, [pc, #152]	; (8002524 <HAL_DMA_Abort_IT+0x26c>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d03b      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a25      	ldr	r2, [pc, #148]	; (8002528 <HAL_DMA_Abort_IT+0x270>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d036      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a23      	ldr	r2, [pc, #140]	; (800252c <HAL_DMA_Abort_IT+0x274>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d031      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a22      	ldr	r2, [pc, #136]	; (8002530 <HAL_DMA_Abort_IT+0x278>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d02c      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a20      	ldr	r2, [pc, #128]	; (8002534 <HAL_DMA_Abort_IT+0x27c>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d027      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1f      	ldr	r2, [pc, #124]	; (8002538 <HAL_DMA_Abort_IT+0x280>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d022      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1d      	ldr	r2, [pc, #116]	; (800253c <HAL_DMA_Abort_IT+0x284>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d01d      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a1c      	ldr	r2, [pc, #112]	; (8002540 <HAL_DMA_Abort_IT+0x288>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d018      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1a      	ldr	r2, [pc, #104]	; (8002544 <HAL_DMA_Abort_IT+0x28c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d013      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a19      	ldr	r2, [pc, #100]	; (8002548 <HAL_DMA_Abort_IT+0x290>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d00e      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a17      	ldr	r2, [pc, #92]	; (800254c <HAL_DMA_Abort_IT+0x294>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d009      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_DMA_Abort_IT+0x298>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_DMA_Abort_IT+0x24e>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a14      	ldr	r2, [pc, #80]	; (8002554 <HAL_DMA_Abort_IT+0x29c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d128      	bne.n	8002558 <HAL_DMA_Abort_IT+0x2a0>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
 8002516:	e027      	b.n	8002568 <HAL_DMA_Abort_IT+0x2b0>
 8002518:	40020010 	.word	0x40020010
 800251c:	40020028 	.word	0x40020028
 8002520:	40020040 	.word	0x40020040
 8002524:	40020058 	.word	0x40020058
 8002528:	40020070 	.word	0x40020070
 800252c:	40020088 	.word	0x40020088
 8002530:	400200a0 	.word	0x400200a0
 8002534:	400200b8 	.word	0x400200b8
 8002538:	40020410 	.word	0x40020410
 800253c:	40020428 	.word	0x40020428
 8002540:	40020440 	.word	0x40020440
 8002544:	40020458 	.word	0x40020458
 8002548:	40020470 	.word	0x40020470
 800254c:	40020488 	.word	0x40020488
 8002550:	400204a0 	.word	0x400204a0
 8002554:	400204b8 	.word	0x400204b8
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0201 	bic.w	r2, r2, #1
 8002566:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <HAL_DMA_Abort_IT+0x428>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d072      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a5b      	ldr	r2, [pc, #364]	; (80026e4 <HAL_DMA_Abort_IT+0x42c>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d06d      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a59      	ldr	r2, [pc, #356]	; (80026e8 <HAL_DMA_Abort_IT+0x430>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d068      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_DMA_Abort_IT+0x434>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d063      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a56      	ldr	r2, [pc, #344]	; (80026f0 <HAL_DMA_Abort_IT+0x438>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d05e      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a55      	ldr	r2, [pc, #340]	; (80026f4 <HAL_DMA_Abort_IT+0x43c>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d059      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a53      	ldr	r2, [pc, #332]	; (80026f8 <HAL_DMA_Abort_IT+0x440>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d054      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a52      	ldr	r2, [pc, #328]	; (80026fc <HAL_DMA_Abort_IT+0x444>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d04f      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a50      	ldr	r2, [pc, #320]	; (8002700 <HAL_DMA_Abort_IT+0x448>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d04a      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a4f      	ldr	r2, [pc, #316]	; (8002704 <HAL_DMA_Abort_IT+0x44c>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d045      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a4d      	ldr	r2, [pc, #308]	; (8002708 <HAL_DMA_Abort_IT+0x450>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d040      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a4c      	ldr	r2, [pc, #304]	; (800270c <HAL_DMA_Abort_IT+0x454>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d03b      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a4a      	ldr	r2, [pc, #296]	; (8002710 <HAL_DMA_Abort_IT+0x458>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d036      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a49      	ldr	r2, [pc, #292]	; (8002714 <HAL_DMA_Abort_IT+0x45c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d031      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a47      	ldr	r2, [pc, #284]	; (8002718 <HAL_DMA_Abort_IT+0x460>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d02c      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a46      	ldr	r2, [pc, #280]	; (800271c <HAL_DMA_Abort_IT+0x464>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d027      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a44      	ldr	r2, [pc, #272]	; (8002720 <HAL_DMA_Abort_IT+0x468>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d022      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a43      	ldr	r2, [pc, #268]	; (8002724 <HAL_DMA_Abort_IT+0x46c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d01d      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a41      	ldr	r2, [pc, #260]	; (8002728 <HAL_DMA_Abort_IT+0x470>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d018      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a40      	ldr	r2, [pc, #256]	; (800272c <HAL_DMA_Abort_IT+0x474>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3e      	ldr	r2, [pc, #248]	; (8002730 <HAL_DMA_Abort_IT+0x478>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d00e      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3d      	ldr	r2, [pc, #244]	; (8002734 <HAL_DMA_Abort_IT+0x47c>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d009      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a3b      	ldr	r2, [pc, #236]	; (8002738 <HAL_DMA_Abort_IT+0x480>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d004      	beq.n	8002658 <HAL_DMA_Abort_IT+0x3a0>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a3a      	ldr	r2, [pc, #232]	; (800273c <HAL_DMA_Abort_IT+0x484>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d101      	bne.n	800265c <HAL_DMA_Abort_IT+0x3a4>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <HAL_DMA_Abort_IT+0x3a6>
 800265c:	2300      	movs	r3, #0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d028      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002670:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002676:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	f003 031f 	and.w	r3, r3, #31
 8002680:	2201      	movs	r2, #1
 8002682:	409a      	lsls	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002690:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00c      	beq.n	80026b4 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80026b2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40020010 	.word	0x40020010
 80026e4:	40020028 	.word	0x40020028
 80026e8:	40020040 	.word	0x40020040
 80026ec:	40020058 	.word	0x40020058
 80026f0:	40020070 	.word	0x40020070
 80026f4:	40020088 	.word	0x40020088
 80026f8:	400200a0 	.word	0x400200a0
 80026fc:	400200b8 	.word	0x400200b8
 8002700:	40020410 	.word	0x40020410
 8002704:	40020428 	.word	0x40020428
 8002708:	40020440 	.word	0x40020440
 800270c:	40020458 	.word	0x40020458
 8002710:	40020470 	.word	0x40020470
 8002714:	40020488 	.word	0x40020488
 8002718:	400204a0 	.word	0x400204a0
 800271c:	400204b8 	.word	0x400204b8
 8002720:	58025408 	.word	0x58025408
 8002724:	5802541c 	.word	0x5802541c
 8002728:	58025430 	.word	0x58025430
 800272c:	58025444 	.word	0x58025444
 8002730:	58025458 	.word	0x58025458
 8002734:	5802546c 	.word	0x5802546c
 8002738:	58025480 	.word	0x58025480
 800273c:	58025494 	.word	0x58025494

08002740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002740:	b480      	push	{r7}
 8002742:	b089      	sub	sp, #36	; 0x24
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800274e:	4b89      	ldr	r3, [pc, #548]	; (8002974 <HAL_GPIO_Init+0x234>)
 8002750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002752:	e194      	b.n	8002a7e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	2101      	movs	r1, #1
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	fa01 f303 	lsl.w	r3, r1, r3
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	2b00      	cmp	r3, #0
 8002768:	f000 8186 	beq.w	8002a78 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d00b      	beq.n	800278c <HAL_GPIO_Init+0x4c>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d007      	beq.n	800278c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002780:	2b11      	cmp	r3, #17
 8002782:	d003      	beq.n	800278c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b12      	cmp	r3, #18
 800278a:	d130      	bne.n	80027ee <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	2203      	movs	r2, #3
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43db      	mvns	r3, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4013      	ands	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68da      	ldr	r2, [r3, #12]
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027c2:	2201      	movs	r2, #1
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	091b      	lsrs	r3, r3, #4
 80027d8:	f003 0201 	and.w	r2, r3, #1
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	69ba      	ldr	r2, [r7, #24]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69ba      	ldr	r2, [r7, #24]
 80027ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d003      	beq.n	800282e <HAL_GPIO_Init+0xee>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b12      	cmp	r3, #18
 800282c:	d123      	bne.n	8002876 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	08da      	lsrs	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	3208      	adds	r2, #8
 8002836:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 0307 	and.w	r3, r3, #7
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	08da      	lsrs	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3208      	adds	r2, #8
 8002870:	69b9      	ldr	r1, [r7, #24]
 8002872:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	005b      	lsls	r3, r3, #1
 8002880:	2203      	movs	r2, #3
 8002882:	fa02 f303 	lsl.w	r3, r2, r3
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 0203 	and.w	r2, r3, #3
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	f000 80e0 	beq.w	8002a78 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_GPIO_Init+0x238>)
 80028ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028be:	4a2e      	ldr	r2, [pc, #184]	; (8002978 <HAL_GPIO_Init+0x238>)
 80028c0:	f043 0302 	orr.w	r3, r3, #2
 80028c4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028c8:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_GPIO_Init+0x238>)
 80028ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a29      	ldr	r2, [pc, #164]	; (800297c <HAL_GPIO_Init+0x23c>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a20      	ldr	r2, [pc, #128]	; (8002980 <HAL_GPIO_Init+0x240>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d052      	beq.n	80029a8 <HAL_GPIO_Init+0x268>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_GPIO_Init+0x244>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d031      	beq.n	800296e <HAL_GPIO_Init+0x22e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_GPIO_Init+0x248>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d02b      	beq.n	800296a <HAL_GPIO_Init+0x22a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1d      	ldr	r2, [pc, #116]	; (800298c <HAL_GPIO_Init+0x24c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d025      	beq.n	8002966 <HAL_GPIO_Init+0x226>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <HAL_GPIO_Init+0x250>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d01f      	beq.n	8002962 <HAL_GPIO_Init+0x222>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <HAL_GPIO_Init+0x254>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d019      	beq.n	800295e <HAL_GPIO_Init+0x21e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <HAL_GPIO_Init+0x258>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <HAL_GPIO_Init+0x21a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <HAL_GPIO_Init+0x25c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00d      	beq.n	8002956 <HAL_GPIO_Init+0x216>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <HAL_GPIO_Init+0x260>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d007      	beq.n	8002952 <HAL_GPIO_Init+0x212>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a17      	ldr	r2, [pc, #92]	; (80029a4 <HAL_GPIO_Init+0x264>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d101      	bne.n	800294e <HAL_GPIO_Init+0x20e>
 800294a:	2309      	movs	r3, #9
 800294c:	e02d      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 800294e:	230a      	movs	r3, #10
 8002950:	e02b      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 8002952:	2308      	movs	r3, #8
 8002954:	e029      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 8002956:	2307      	movs	r3, #7
 8002958:	e027      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 800295a:	2306      	movs	r3, #6
 800295c:	e025      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 800295e:	2305      	movs	r3, #5
 8002960:	e023      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 8002962:	2304      	movs	r3, #4
 8002964:	e021      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 8002966:	2303      	movs	r3, #3
 8002968:	e01f      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 800296a:	2302      	movs	r3, #2
 800296c:	e01d      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 800296e:	2301      	movs	r3, #1
 8002970:	e01b      	b.n	80029aa <HAL_GPIO_Init+0x26a>
 8002972:	bf00      	nop
 8002974:	58000080 	.word	0x58000080
 8002978:	58024400 	.word	0x58024400
 800297c:	58000400 	.word	0x58000400
 8002980:	58020000 	.word	0x58020000
 8002984:	58020400 	.word	0x58020400
 8002988:	58020800 	.word	0x58020800
 800298c:	58020c00 	.word	0x58020c00
 8002990:	58021000 	.word	0x58021000
 8002994:	58021400 	.word	0x58021400
 8002998:	58021800 	.word	0x58021800
 800299c:	58021c00 	.word	0x58021c00
 80029a0:	58022000 	.word	0x58022000
 80029a4:	58022400 	.word	0x58022400
 80029a8:	2300      	movs	r3, #0
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	f002 0203 	and.w	r2, r2, #3
 80029b0:	0092      	lsls	r2, r2, #2
 80029b2:	4093      	lsls	r3, r2
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029ba:	4938      	ldr	r1, [pc, #224]	; (8002a9c <HAL_GPIO_Init+0x35c>)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	089b      	lsrs	r3, r3, #2
 80029c0:	3302      	adds	r3, #2
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	43db      	mvns	r3, r3
 80029fc:	69ba      	ldr	r2, [r7, #24]
 80029fe:	4013      	ands	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	fa22 f303 	lsr.w	r3, r2, r3
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f47f ae63 	bne.w	8002754 <HAL_GPIO_Init+0x14>
  }
}
 8002a8e:	bf00      	nop
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	58000400 	.word	0x58000400

08002aa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	691a      	ldr	r2, [r3, #16]
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	460b      	mov	r3, r1
 8002ada:	807b      	strh	r3, [r7, #2]
 8002adc:	4613      	mov	r3, r2
 8002ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ae0:	787b      	ldrb	r3, [r7, #1]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae6:	887a      	ldrh	r2, [r7, #2]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002aec:	e003      	b.n	8002af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002aee:	887b      	ldrh	r3, [r7, #2]
 8002af0:	041a      	lsls	r2, r3, #16
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	619a      	str	r2, [r3, #24]
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002b0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d008      	beq.n	8002b2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd5d 	bl	80005e8 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002b2e:	bf00      	nop
 8002b30:	3708      	adds	r7, #8
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b38:	b08f      	sub	sp, #60	; 0x3c
 8002b3a:	af0a      	add	r7, sp, #40	; 0x28
 8002b3c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e116      	b.n	8002d76 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d106      	bne.n	8002b68 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f00a fb0a 	bl	800d17c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2203      	movs	r2, #3
 8002b6c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d102      	bne.n	8002b82 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f007 fb77 	bl	800a27a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	603b      	str	r3, [r7, #0]
 8002b92:	687e      	ldr	r6, [r7, #4]
 8002b94:	466d      	mov	r5, sp
 8002b96:	f106 0410 	add.w	r4, r6, #16
 8002b9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ba0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ba2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ba6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002baa:	1d33      	adds	r3, r6, #4
 8002bac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bae:	6838      	ldr	r0, [r7, #0]
 8002bb0:	f007 fa4e 	bl	800a050 <USB_CoreInit>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e0d7      	b.n	8002d76 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f007 fb65 	bl	800a29c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
 8002bd6:	e04a      	b.n	8002c6e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333d      	adds	r3, #61	; 0x3d
 8002be8:	2201      	movs	r2, #1
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	00db      	lsls	r3, r3, #3
 8002bf4:	1a9b      	subs	r3, r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	333c      	adds	r3, #60	; 0x3c
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c00:	7bfa      	ldrb	r2, [r7, #15]
 8002c02:	7bfb      	ldrb	r3, [r7, #15]
 8002c04:	b298      	uxth	r0, r3
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	3342      	adds	r3, #66	; 0x42
 8002c14:	4602      	mov	r2, r0
 8002c16:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	333f      	adds	r3, #63	; 0x3f
 8002c28:	2200      	movs	r2, #0
 8002c2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3344      	adds	r3, #68	; 0x44
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3348      	adds	r3, #72	; 0x48
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c54:	7bfa      	ldrb	r2, [r7, #15]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	00db      	lsls	r3, r3, #3
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	3350      	adds	r3, #80	; 0x50
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	7bfa      	ldrb	r2, [r7, #15]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3af      	bcc.n	8002bd8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
 8002c7c:	e044      	b.n	8002d08 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c7e:	7bfa      	ldrb	r2, [r7, #15]
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c90:	2200      	movs	r2, #0
 8002c92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c94:	7bfa      	ldrb	r2, [r7, #15]
 8002c96:	6879      	ldr	r1, [r7, #4]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	1a9b      	subs	r3, r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002caa:	7bfa      	ldrb	r2, [r7, #15]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cc0:	7bfa      	ldrb	r2, [r7, #15]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cd6:	7bfa      	ldrb	r2, [r7, #15]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cec:	7bfa      	ldrb	r2, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cfe:	2200      	movs	r2, #0
 8002d00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	3301      	adds	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
 8002d08:	7bfa      	ldrb	r2, [r7, #15]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d3b5      	bcc.n	8002c7e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	603b      	str	r3, [r7, #0]
 8002d18:	687e      	ldr	r6, [r7, #4]
 8002d1a:	466d      	mov	r5, sp
 8002d1c:	f106 0410 	add.w	r4, r6, #16
 8002d20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d28:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d2c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d30:	1d33      	adds	r3, r6, #4
 8002d32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d34:	6838      	ldr	r0, [r7, #0]
 8002d36:	f007 fadb 	bl	800a2f0 <USB_DevInit>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e014      	b.n	8002d76 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d102      	bne.n	8002d6a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f001 f891 	bl	8003e8c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f008 fac2 	bl	800b2f8 <USB_DevDisconnect>

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3714      	adds	r7, #20
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d7e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_PCD_Start+0x1c>
 8002d96:	2302      	movs	r3, #2
 8002d98:	e020      	b.n	8002ddc <HAL_PCD_Start+0x5e>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d109      	bne.n	8002dbe <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d005      	beq.n	8002dbe <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f008 fa80 	bl	800b2c8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f007 fa43 	bl	800a258 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002de4:	b590      	push	{r4, r7, lr}
 8002de6:	b08d      	sub	sp, #52	; 0x34
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f008 fb27 	bl	800b44e <USB_GetMode>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	f040 83ca 	bne.w	800359c <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f008 fa8b 	bl	800b328 <USB_ReadInterrupts>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 83c0 	beq.w	800359a <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f008 fa82 	bl	800b328 <USB_ReadInterrupts>
 8002e24:	4603      	mov	r3, r0
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d107      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	695a      	ldr	r2, [r3, #20]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f002 0202 	and.w	r2, r2, #2
 8002e3c:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f008 fa70 	bl	800b328 <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b10      	cmp	r3, #16
 8002e50:	d161      	bne.n	8002f16 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	699a      	ldr	r2, [r3, #24]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f022 0210 	bic.w	r2, r2, #16
 8002e60:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	6a1b      	ldr	r3, [r3, #32]
 8002e66:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	3304      	adds	r3, #4
 8002e80:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	0c5b      	lsrs	r3, r3, #17
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d124      	bne.n	8002ed8 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d035      	beq.n	8002f06 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	091b      	lsrs	r3, r3, #4
 8002ea2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ea4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	461a      	mov	r2, r3
 8002eac:	6a38      	ldr	r0, [r7, #32]
 8002eae:	f008 f8e8 	bl	800b082 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebe:	441a      	add	r2, r3
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	699a      	ldr	r2, [r3, #24]
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ed0:	441a      	add	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	619a      	str	r2, [r3, #24]
 8002ed6:	e016      	b.n	8002f06 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	0c5b      	lsrs	r3, r3, #17
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d110      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002eea:	2208      	movs	r2, #8
 8002eec:	4619      	mov	r1, r3
 8002eee:	6a38      	ldr	r0, [r7, #32]
 8002ef0:	f008 f8c7 	bl	800b082 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	699a      	ldr	r2, [r3, #24]
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f00:	441a      	add	r2, r3
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699a      	ldr	r2, [r3, #24]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0210 	orr.w	r2, r2, #16
 8002f14:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f008 fa04 	bl	800b328 <USB_ReadInterrupts>
 8002f20:	4603      	mov	r3, r0
 8002f22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f26:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f2a:	d16e      	bne.n	800300a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f008 fa0a 	bl	800b34e <USB_ReadDevAllOutEpInterrupt>
 8002f3a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002f3c:	e062      	b.n	8003004 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d057      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f008 fa2f 	bl	800b3b6 <USB_ReadDevOutEPInterrupt>
 8002f58:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00c      	beq.n	8002f7e <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f66:	015a      	lsls	r2, r3, #5
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	4413      	add	r3, r2
 8002f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f70:	461a      	mov	r2, r3
 8002f72:	2301      	movs	r3, #1
 8002f74:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fddd 	bl	8003b38 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f003 0308 	and.w	r3, r3, #8
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f94:	461a      	mov	r2, r3
 8002f96:	2308      	movs	r3, #8
 8002f98:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 fed7 	bl	8003d50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	f003 0310 	and.w	r3, r3, #16
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d008      	beq.n	8002fbe <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb8:	461a      	mov	r2, r3
 8002fba:	2310      	movs	r3, #16
 8002fbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	f003 0320 	and.w	r3, r3, #32
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2320      	movs	r3, #32
 8002fd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d009      	beq.n	8002ff8 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ff6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	2b00      	cmp	r3, #0
 8003008:	d199      	bne.n	8002f3e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f008 f98a 	bl	800b328 <USB_ReadInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800301e:	f040 80c0 	bne.w	80031a2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f008 f9ab 	bl	800b382 <USB_ReadDevAllInEpInterrupt>
 800302c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003032:	e0b2      	b.n	800319a <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	f000 80a7 	beq.w	800318e <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f008 f9d1 	bl	800b3f2 <USB_ReadDevInEPInterrupt>
 8003050:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d057      	beq.n	800310c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	2201      	movs	r2, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003070:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	43db      	mvns	r3, r3
 8003076:	69f9      	ldr	r1, [r7, #28]
 8003078:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800307c:	4013      	ands	r3, r2
 800307e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	015a      	lsls	r2, r3, #5
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4413      	add	r3, r2
 8003088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800308c:	461a      	mov	r2, r3
 800308e:	2301      	movs	r3, #1
 8003090:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d132      	bne.n	8003100 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309e:	4613      	mov	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3348      	adds	r3, #72	; 0x48
 80030aa:	6819      	ldr	r1, [r3, #0]
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b0:	4613      	mov	r3, r2
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4403      	add	r3, r0
 80030ba:	3344      	adds	r3, #68	; 0x44
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4419      	add	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c4:	4613      	mov	r3, r2
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4403      	add	r3, r0
 80030ce:	3348      	adds	r3, #72	; 0x48
 80030d0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80030d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d113      	bne.n	8003100 <HAL_PCD_IRQHandler+0x31c>
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030dc:	4613      	mov	r3, r2
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	1a9b      	subs	r3, r3, r2
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	440b      	add	r3, r1
 80030e6:	3350      	adds	r3, #80	; 0x50
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d108      	bne.n	8003100 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6818      	ldr	r0, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80030f8:	461a      	mov	r2, r3
 80030fa:	2101      	movs	r1, #1
 80030fc:	f008 f9da 	bl	800b4b4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f00a f8b7 	bl	800d27a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d008      	beq.n	8003128 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	015a      	lsls	r2, r3, #5
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	4413      	add	r3, r2
 800311e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003122:	461a      	mov	r2, r3
 8003124:	2308      	movs	r3, #8
 8003126:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0310 	and.w	r3, r3, #16
 800312e:	2b00      	cmp	r3, #0
 8003130:	d008      	beq.n	8003144 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	015a      	lsls	r2, r3, #5
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	4413      	add	r3, r2
 800313a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800313e:	461a      	mov	r2, r3
 8003140:	2310      	movs	r3, #16
 8003142:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315a:	461a      	mov	r2, r3
 800315c:	2340      	movs	r3, #64	; 0x40
 800315e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800316a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	4413      	add	r3, r2
 8003172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003176:	461a      	mov	r2, r3
 8003178:	2302      	movs	r3, #2
 800317a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fc48 	bl	8003a1e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800318e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003190:	3301      	adds	r3, #1
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800319a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800319c:	2b00      	cmp	r3, #0
 800319e:	f47f af49 	bne.w	8003034 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f008 f8be 	bl	800b328 <USB_ReadInterrupts>
 80031ac:	4603      	mov	r3, r0
 80031ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031b6:	d122      	bne.n	80031fe <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c6:	f023 0301 	bic.w	r3, r3, #1
 80031ca:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d108      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031de:	2100      	movs	r1, #0
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 fe77 	bl	8003ed4 <HAL_PCDEx_LPM_Callback>
 80031e6:	e002      	b.n	80031ee <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f00a f8bd 	bl	800d368 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f008 f890 	bl	800b328 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003212:	d112      	bne.n	800323a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b01      	cmp	r3, #1
 8003222:	d102      	bne.n	800322a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f00a f879 	bl	800d31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695a      	ldr	r2, [r3, #20]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003238:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4618      	mov	r0, r3
 8003240:	f008 f872 	bl	800b328 <USB_ReadInterrupts>
 8003244:	4603      	mov	r3, r0
 8003246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800324e:	d121      	bne.n	8003294 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	695a      	ldr	r2, [r3, #20]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800325e:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003266:	2b00      	cmp	r3, #0
 8003268:	d111      	bne.n	800328e <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003284:	2101      	movs	r1, #1
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fe24 	bl	8003ed4 <HAL_PCDEx_LPM_Callback>
 800328c:	e002      	b.n	8003294 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f00a f844 	bl	800d31c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4618      	mov	r0, r3
 800329a:	f008 f845 	bl	800b328 <USB_ReadInterrupts>
 800329e:	4603      	mov	r3, r0
 80032a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032a8:	f040 80c7 	bne.w	800343a <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2110      	movs	r1, #16
 80032c6:	4618      	mov	r0, r3
 80032c8:	f007 f970 	bl	800a5ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d0:	e056      	b.n	8003380 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032de:	461a      	mov	r2, r3
 80032e0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032e4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032f6:	0151      	lsls	r1, r2, #5
 80032f8:	69fa      	ldr	r2, [r7, #28]
 80032fa:	440a      	add	r2, r1
 80032fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003300:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003304:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003308:	015a      	lsls	r2, r3, #5
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	4413      	add	r3, r2
 800330e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003316:	0151      	lsls	r1, r2, #5
 8003318:	69fa      	ldr	r2, [r7, #28]
 800331a:	440a      	add	r2, r1
 800331c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003320:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003324:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003328:	015a      	lsls	r2, r3, #5
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	4413      	add	r3, r2
 800332e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003332:	461a      	mov	r2, r3
 8003334:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003338:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800333a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800334a:	0151      	lsls	r1, r2, #5
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	440a      	add	r2, r1
 8003350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003358:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800335a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335c:	015a      	lsls	r2, r3, #5
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	4413      	add	r3, r2
 8003362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800336a:	0151      	lsls	r1, r2, #5
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	440a      	add	r2, r1
 8003370:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003374:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003378:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800337a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800337c:	3301      	adds	r3, #1
 800337e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003386:	429a      	cmp	r2, r3
 8003388:	d3a3      	bcc.n	80032d2 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	69fa      	ldr	r2, [r7, #28]
 8003394:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003398:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800339c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b0:	69fa      	ldr	r2, [r7, #28]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b6:	f043 030b 	orr.w	r3, r3, #11
 80033ba:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c6:	69fa      	ldr	r2, [r7, #28]
 80033c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033cc:	f043 030b 	orr.w	r3, r3, #11
 80033d0:	6453      	str	r3, [r2, #68]	; 0x44
 80033d2:	e015      	b.n	8003400 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e2:	4619      	mov	r1, r3
 80033e4:	f242 032b 	movw	r3, #8235	; 0x202b
 80033e8:	4313      	orrs	r3, r2
 80033ea:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	69fa      	ldr	r2, [r7, #28]
 80033f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033fa:	f043 030b 	orr.w	r3, r3, #11
 80033fe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	69fa      	ldr	r2, [r7, #28]
 800340a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003412:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6818      	ldr	r0, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	691b      	ldr	r3, [r3, #16]
 800341c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003424:	461a      	mov	r2, r3
 8003426:	f008 f845 	bl	800b4b4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695a      	ldr	r2, [r3, #20]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003438:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f007 ff72 	bl	800b328 <USB_ReadInterrupts>
 8003444:	4603      	mov	r3, r0
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800344e:	d124      	bne.n	800349a <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f008 f809 	bl	800b46c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f007 f905 	bl	800a66e <USB_GetDevSpeed>
 8003464:	4603      	mov	r3, r0
 8003466:	461a      	mov	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681c      	ldr	r4, [r3, #0]
 8003470:	f001 fc86 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8003474:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800347a:	b2db      	uxtb	r3, r3
 800347c:	461a      	mov	r2, r3
 800347e:	4620      	mov	r0, r4
 8003480:	f006 fe48 	bl	800a114 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f009 ff20 	bl	800d2ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695a      	ldr	r2, [r3, #20]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003498:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f007 ff42 	bl	800b328 <USB_ReadInterrupts>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f003 0308 	and.w	r3, r3, #8
 80034aa:	2b08      	cmp	r3, #8
 80034ac:	d10a      	bne.n	80034c4 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f009 fefd 	bl	800d2ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f002 0208 	and.w	r2, r2, #8
 80034c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f007 ff2d 	bl	800b328 <USB_ReadInterrupts>
 80034ce:	4603      	mov	r3, r0
 80034d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034d8:	d10f      	bne.n	80034fa <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034da:	2300      	movs	r3, #0
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	4619      	mov	r1, r3
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f009 ff5f 	bl	800d3a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695a      	ldr	r2, [r3, #20]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80034f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4618      	mov	r0, r3
 8003500:	f007 ff12 	bl	800b328 <USB_ReadInterrupts>
 8003504:	4603      	mov	r3, r0
 8003506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800350e:	d10f      	bne.n	8003530 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003510:	2300      	movs	r3, #0
 8003512:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	b2db      	uxtb	r3, r3
 8003518:	4619      	mov	r1, r3
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f009 ff32 	bl	800d384 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800352e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f007 fef7 	bl	800b328 <USB_ReadInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003540:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003544:	d10a      	bne.n	800355c <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f009 ff40 	bl	800d3cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695a      	ldr	r2, [r3, #20]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800355a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f007 fee1 	bl	800b328 <USB_ReadInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d115      	bne.n	800359c <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b00      	cmp	r3, #0
 8003580:	d002      	beq.n	8003588 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f009 ff30 	bl	800d3e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6859      	ldr	r1, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	e000      	b.n	800359c <HAL_PCD_IRQHandler+0x7b8>
      return;
 800359a:	bf00      	nop
    }
  }
}
 800359c:	3734      	adds	r7, #52	; 0x34
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd90      	pop	{r4, r7, pc}

080035a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
 80035aa:	460b      	mov	r3, r1
 80035ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d101      	bne.n	80035bc <HAL_PCD_SetAddress+0x1a>
 80035b8:	2302      	movs	r3, #2
 80035ba:	e013      	b.n	80035e4 <HAL_PCD_SetAddress+0x42>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	4611      	mov	r1, r2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f007 fe51 	bl	800b27c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	4608      	mov	r0, r1
 80035f6:	4611      	mov	r1, r2
 80035f8:	461a      	mov	r2, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	70fb      	strb	r3, [r7, #3]
 80035fe:	460b      	mov	r3, r1
 8003600:	803b      	strh	r3, [r7, #0]
 8003602:	4613      	mov	r3, r2
 8003604:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003606:	2300      	movs	r3, #0
 8003608:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800360a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360e:	2b00      	cmp	r3, #0
 8003610:	da0f      	bge.n	8003632 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003612:	78fb      	ldrb	r3, [r7, #3]
 8003614:	f003 020f 	and.w	r2, r3, #15
 8003618:	4613      	mov	r3, r2
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	1a9b      	subs	r3, r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	3338      	adds	r3, #56	; 0x38
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	4413      	add	r3, r2
 8003626:	3304      	adds	r3, #4
 8003628:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2201      	movs	r2, #1
 800362e:	705a      	strb	r2, [r3, #1]
 8003630:	e00f      	b.n	8003652 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003632:	78fb      	ldrb	r3, [r7, #3]
 8003634:	f003 020f 	and.w	r2, r3, #15
 8003638:	4613      	mov	r3, r2
 800363a:	00db      	lsls	r3, r3, #3
 800363c:	1a9b      	subs	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	4413      	add	r3, r2
 8003648:	3304      	adds	r3, #4
 800364a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	f003 030f 	and.w	r3, r3, #15
 8003658:	b2da      	uxtb	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800365e:	883a      	ldrh	r2, [r7, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	78ba      	ldrb	r2, [r7, #2]
 8003668:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d004      	beq.n	800367c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	b29a      	uxth	r2, r3
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800367c:	78bb      	ldrb	r3, [r7, #2]
 800367e:	2b02      	cmp	r3, #2
 8003680:	d102      	bne.n	8003688 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_PCD_EP_Open+0xaa>
 8003692:	2302      	movs	r3, #2
 8003694:	e00e      	b.n	80036b4 <HAL_PCD_EP_Open+0xc8>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2201      	movs	r2, #1
 800369a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68f9      	ldr	r1, [r7, #12]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f007 f807 	bl	800a6b8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036b2:	7afb      	ldrb	r3, [r7, #11]
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	460b      	mov	r3, r1
 80036c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	da0f      	bge.n	80036f0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 020f 	and.w	r2, r3, #15
 80036d6:	4613      	mov	r3, r2
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	3338      	adds	r3, #56	; 0x38
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2201      	movs	r2, #1
 80036ec:	705a      	strb	r2, [r3, #1]
 80036ee:	e00f      	b.n	8003710 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036f0:	78fb      	ldrb	r3, [r7, #3]
 80036f2:	f003 020f 	and.w	r2, r3, #15
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003710:	78fb      	ldrb	r3, [r7, #3]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_PCD_EP_Close+0x6e>
 8003726:	2302      	movs	r3, #2
 8003728:	e00e      	b.n	8003748 <HAL_PCD_EP_Close+0x8c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f007 f845 	bl	800a7c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	460b      	mov	r3, r1
 800375e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003760:	7afb      	ldrb	r3, [r7, #11]
 8003762:	f003 020f 	and.w	r2, r3, #15
 8003766:	4613      	mov	r3, r2
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	4413      	add	r3, r2
 8003776:	3304      	adds	r3, #4
 8003778:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	683a      	ldr	r2, [r7, #0]
 8003784:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	2200      	movs	r2, #0
 800378a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	2200      	movs	r2, #0
 8003790:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003792:	7afb      	ldrb	r3, [r7, #11]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	b2da      	uxtb	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d102      	bne.n	80037ac <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037ac:	7afb      	ldrb	r3, [r7, #11]
 80037ae:	f003 030f 	and.w	r3, r3, #15
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6818      	ldr	r0, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	6979      	ldr	r1, [r7, #20]
 80037c4:	f007 fad0 	bl	800ad68 <USB_EP0StartXfer>
 80037c8:	e008      	b.n	80037dc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	461a      	mov	r2, r3
 80037d6:	6979      	ldr	r1, [r7, #20]
 80037d8:	f007 f87a 	bl	800a8d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037e6:	b480      	push	{r7}
 80037e8:	b083      	sub	sp, #12
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003808:	681b      	ldr	r3, [r3, #0]
}
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr

08003816 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	603b      	str	r3, [r7, #0]
 8003822:	460b      	mov	r3, r1
 8003824:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	f003 020f 	and.w	r2, r3, #15
 800382c:	4613      	mov	r3, r2
 800382e:	00db      	lsls	r3, r3, #3
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	3338      	adds	r3, #56	; 0x38
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4413      	add	r3, r2
 800383a:	3304      	adds	r3, #4
 800383c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	2201      	movs	r2, #1
 8003854:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003856:	7afb      	ldrb	r3, [r7, #11]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	b2da      	uxtb	r2, r3
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d102      	bne.n	8003870 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003870:	7afb      	ldrb	r3, [r7, #11]
 8003872:	f003 030f 	and.w	r3, r3, #15
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	b2db      	uxtb	r3, r3
 8003884:	461a      	mov	r2, r3
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	f007 fa6e 	bl	800ad68 <USB_EP0StartXfer>
 800388c:	e008      	b.n	80038a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	b2db      	uxtb	r3, r3
 8003898:	461a      	mov	r2, r3
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	f007 f818 	bl	800a8d0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b084      	sub	sp, #16
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	460b      	mov	r3, r1
 80038b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038b6:	78fb      	ldrb	r3, [r7, #3]
 80038b8:	f003 020f 	and.w	r2, r3, #15
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d901      	bls.n	80038c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e050      	b.n	800396a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	da0f      	bge.n	80038f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038d0:	78fb      	ldrb	r3, [r7, #3]
 80038d2:	f003 020f 	and.w	r2, r3, #15
 80038d6:	4613      	mov	r3, r2
 80038d8:	00db      	lsls	r3, r3, #3
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	3338      	adds	r3, #56	; 0x38
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2201      	movs	r2, #1
 80038ec:	705a      	strb	r2, [r3, #1]
 80038ee:	e00d      	b.n	800390c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	1a9b      	subs	r3, r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	3304      	adds	r3, #4
 8003904:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003912:	78fb      	ldrb	r3, [r7, #3]
 8003914:	f003 030f 	and.w	r3, r3, #15
 8003918:	b2da      	uxtb	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_PCD_EP_SetStall+0x82>
 8003928:	2302      	movs	r3, #2
 800392a:	e01e      	b.n	800396a <HAL_PCD_EP_SetStall+0xc0>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68f9      	ldr	r1, [r7, #12]
 800393a:	4618      	mov	r0, r3
 800393c:	f007 fbca 	bl	800b0d4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10a      	bne.n	8003960 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	b2d9      	uxtb	r1, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800395a:	461a      	mov	r2, r3
 800395c:	f007 fdaa 	bl	800b4b4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}

08003972 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
 800397a:	460b      	mov	r3, r1
 800397c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f003 020f 	and.w	r2, r3, #15
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	429a      	cmp	r2, r3
 800398a:	d901      	bls.n	8003990 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e042      	b.n	8003a16 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003994:	2b00      	cmp	r3, #0
 8003996:	da0f      	bge.n	80039b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	f003 020f 	and.w	r2, r3, #15
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	1a9b      	subs	r3, r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	3338      	adds	r3, #56	; 0x38
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	3304      	adds	r3, #4
 80039ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2201      	movs	r2, #1
 80039b4:	705a      	strb	r2, [r3, #1]
 80039b6:	e00f      	b.n	80039d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	f003 020f 	and.w	r2, r3, #15
 80039be:	4613      	mov	r3, r2
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4413      	add	r3, r2
 80039ce:	3304      	adds	r3, #4
 80039d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039de:	78fb      	ldrb	r3, [r7, #3]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_PCD_EP_ClrStall+0x86>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e00e      	b.n	8003a16 <HAL_PCD_EP_ClrStall+0xa4>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	68f9      	ldr	r1, [r7, #12]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f007 fbd2 	bl	800b1b0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b08a      	sub	sp, #40	; 0x28
 8003a22:	af02      	add	r7, sp, #8
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	00db      	lsls	r3, r3, #3
 8003a38:	1a9b      	subs	r3, r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	3338      	adds	r3, #56	; 0x38
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	4413      	add	r3, r2
 8003a42:	3304      	adds	r3, #4
 8003a44:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d901      	bls.n	8003a56 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06c      	b.n	8003b30 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d902      	bls.n	8003a72 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	3303      	adds	r3, #3
 8003a76:	089b      	lsrs	r3, r3, #2
 8003a78:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a7a:	e02b      	b.n	8003ad4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	695a      	ldr	r2, [r3, #20]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	69fa      	ldr	r2, [r7, #28]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d902      	bls.n	8003a98 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	3303      	adds	r3, #3
 8003a9c:	089b      	lsrs	r3, r3, #2
 8003a9e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68d9      	ldr	r1, [r3, #12]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	b2da      	uxtb	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	6978      	ldr	r0, [r7, #20]
 8003ab8:	f007 faae 	bl	800b018 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	441a      	add	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	699a      	ldr	r2, [r3, #24]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	441a      	add	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	015a      	lsls	r2, r3, #5
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ae0:	699b      	ldr	r3, [r3, #24]
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d809      	bhi.n	8003afe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	699a      	ldr	r2, [r3, #24]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d203      	bcs.n	8003afe <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1be      	bne.n	8003a7c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d811      	bhi.n	8003b2e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	2201      	movs	r2, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	6939      	ldr	r1, [r7, #16]
 8003b26:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3720      	adds	r7, #32
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	333c      	adds	r3, #60	; 0x3c
 8003b50:	3304      	adds	r3, #4
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	f040 80a0 	bne.w	8003cb0 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d015      	beq.n	8003ba6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	4a72      	ldr	r2, [pc, #456]	; (8003d48 <PCD_EP_OutXfrComplete_int+0x210>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	f240 80dd 	bls.w	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	f000 80d7 	beq.w	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	015a      	lsls	r2, r3, #5
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	4413      	add	r3, r2
 8003b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	6093      	str	r3, [r2, #8]
 8003ba4:	e0cb      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f003 0320 	and.w	r3, r3, #32
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2320      	movs	r3, #32
 8003bc0:	6093      	str	r3, [r2, #8]
 8003bc2:	e0bc      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 80b7 	bne.w	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	4a5d      	ldr	r2, [pc, #372]	; (8003d48 <PCD_EP_OutXfrComplete_int+0x210>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d90f      	bls.n	8003bf8 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	015a      	lsls	r2, r3, #5
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	4413      	add	r3, r2
 8003bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf4:	6093      	str	r3, [r2, #8]
 8003bf6:	e0a2      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c0a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	0159      	lsls	r1, r3, #5
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	440b      	add	r3, r1
 8003c14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c1e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	00db      	lsls	r3, r3, #3
 8003c28:	1a9b      	subs	r3, r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4403      	add	r3, r0
 8003c2e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c32:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c46:	6819      	ldr	r1, [r3, #0]
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	4403      	add	r3, r0
 8003c56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4419      	add	r1, r3
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	4613      	mov	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4403      	add	r3, r0
 8003c6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c70:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d114      	bne.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x16a>
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d108      	bne.n	8003ca2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2101      	movs	r1, #1
 8003c9e:	f007 fc09 	bl	800b4b4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f009 facb 	bl	800d244 <HAL_PCD_DataOutStageCallback>
 8003cae:	e046      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4a26      	ldr	r2, [pc, #152]	; (8003d4c <PCD_EP_OutXfrComplete_int+0x214>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d124      	bne.n	8003d02 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cce:	461a      	mov	r2, r3
 8003cd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd4:	6093      	str	r3, [r2, #8]
 8003cd6:	e032      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d008      	beq.n	8003cf4 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cee:	461a      	mov	r2, r3
 8003cf0:	2320      	movs	r3, #32
 8003cf2:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f009 faa2 	bl	800d244 <HAL_PCD_DataOutStageCallback>
 8003d00:	e01d      	b.n	8003d3e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d114      	bne.n	8003d32 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	683a      	ldr	r2, [r7, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d108      	bne.n	8003d32 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2100      	movs	r1, #0
 8003d2e:	f007 fbc1 	bl	800b4b4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	4619      	mov	r1, r3
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f009 fa83 	bl	800d244 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d3e:	2300      	movs	r3, #0
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	4f54300a 	.word	0x4f54300a
 8003d4c:	4f54310a 	.word	0x4f54310a

08003d50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	333c      	adds	r3, #60	; 0x3c
 8003d68:	3304      	adds	r3, #4
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	015a      	lsls	r2, r3, #5
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	4413      	add	r3, r2
 8003d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4a15      	ldr	r2, [pc, #84]	; (8003dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d90e      	bls.n	8003da4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d009      	beq.n	8003da4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003da2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f009 fa3b 	bl	800d220 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a0a      	ldr	r2, [pc, #40]	; (8003dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d90c      	bls.n	8003dcc <PCD_EP_OutSetupPacket_int+0x7c>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	2b01      	cmp	r3, #1
 8003db8:	d108      	bne.n	8003dcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6818      	ldr	r0, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	f007 fb74 	bl	800b4b4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3718      	adds	r7, #24
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	4f54300a 	.word	0x4f54300a

08003ddc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	460b      	mov	r3, r1
 8003de6:	70fb      	strb	r3, [r7, #3]
 8003de8:	4613      	mov	r3, r2
 8003dea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d107      	bne.n	8003e0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003dfa:	883b      	ldrh	r3, [r7, #0]
 8003dfc:	0419      	lsls	r1, r3, #16
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	629a      	str	r2, [r3, #40]	; 0x28
 8003e08:	e028      	b.n	8003e5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	68ba      	ldr	r2, [r7, #8]
 8003e14:	4413      	add	r3, r2
 8003e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	73fb      	strb	r3, [r7, #15]
 8003e1c:	e00d      	b.n	8003e3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	3340      	adds	r3, #64	; 0x40
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	4413      	add	r3, r2
 8003e32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	3301      	adds	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
 8003e3a:	7bfa      	ldrb	r2, [r7, #15]
 8003e3c:	78fb      	ldrb	r3, [r7, #3]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d3ec      	bcc.n	8003e1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e44:	883b      	ldrh	r3, [r7, #0]
 8003e46:	0418      	lsls	r0, r3, #16
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6819      	ldr	r1, [r3, #0]
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	4302      	orrs	r2, r0
 8003e54:	3340      	adds	r3, #64	; 0x40
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3714      	adds	r7, #20
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	460b      	mov	r3, r1
 8003e74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	699b      	ldr	r3, [r3, #24]
 8003eae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003eba:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_PCDEx_ActivateLPM+0x44>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ec2:	2300      	movs	r3, #0
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	10000003 	.word	0x10000003

08003ed4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	460b      	mov	r3, r1
 8003ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003ef4:	4b19      	ldr	r3, [pc, #100]	; (8003f5c <HAL_PWREx_ConfigSupply+0x70>)
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f003 0304 	and.w	r3, r3, #4
 8003efc:	2b04      	cmp	r3, #4
 8003efe:	d00a      	beq.n	8003f16 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003f00:	4b16      	ldr	r3, [pc, #88]	; (8003f5c <HAL_PWREx_ConfigSupply+0x70>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0307 	and.w	r3, r3, #7
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d001      	beq.n	8003f12 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e01f      	b.n	8003f52 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e01d      	b.n	8003f52 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003f16:	4b11      	ldr	r3, [pc, #68]	; (8003f5c <HAL_PWREx_ConfigSupply+0x70>)
 8003f18:	68db      	ldr	r3, [r3, #12]
 8003f1a:	f023 0207 	bic.w	r2, r3, #7
 8003f1e:	490f      	ldr	r1, [pc, #60]	; (8003f5c <HAL_PWREx_ConfigSupply+0x70>)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003f26:	f7fe f87d 	bl	8002024 <HAL_GetTick>
 8003f2a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f2c:	e009      	b.n	8003f42 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003f2e:	f7fe f879 	bl	8002024 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f3c:	d901      	bls.n	8003f42 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e007      	b.n	8003f52 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003f42:	4b06      	ldr	r3, [pc, #24]	; (8003f5c <HAL_PWREx_ConfigSupply+0x70>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f4e:	d1ee      	bne.n	8003f2e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	58024800 	.word	0x58024800

08003f60 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003f64:	4b05      	ldr	r3, [pc, #20]	; (8003f7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	4a04      	ldr	r2, [pc, #16]	; (8003f7c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003f6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f6e:	60d3      	str	r3, [r2, #12]
}
 8003f70:	bf00      	nop
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	58024800 	.word	0x58024800

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b08c      	sub	sp, #48	; 0x30
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e3c4      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	f000 8087 	beq.w	80040ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fa0:	4ba2      	ldr	r3, [pc, #648]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003faa:	4ba0      	ldr	r3, [pc, #640]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d007      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x46>
 8003fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fb8:	2b18      	cmp	r3, #24
 8003fba:	d110      	bne.n	8003fde <HAL_RCC_OscConfig+0x5e>
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d10b      	bne.n	8003fde <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc6:	4b99      	ldr	r3, [pc, #612]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d06c      	beq.n	80040ac <HAL_RCC_OscConfig+0x12c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d168      	bne.n	80040ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e39e      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe6:	d106      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x76>
 8003fe8:	4b90      	ldr	r3, [pc, #576]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a8f      	ldr	r2, [pc, #572]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	e02e      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b8b      	ldr	r3, [pc, #556]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a8a      	ldr	r2, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004004:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b88      	ldr	r3, [pc, #544]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a87      	ldr	r2, [pc, #540]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004010:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xbc>
 8004022:	4b82      	ldr	r3, [pc, #520]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a81      	ldr	r2, [pc, #516]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a7e      	ldr	r2, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xd4>
 800403c:	4b7b      	ldr	r3, [pc, #492]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a7a      	ldr	r2, [pc, #488]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b78      	ldr	r3, [pc, #480]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a77      	ldr	r2, [pc, #476]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fd ffe2 	bl	8002024 <HAL_GetTick>
 8004060:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004064:	f7fd ffde 	bl	8002024 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	; 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e352      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004076:	4b6d      	ldr	r3, [pc, #436]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xe4>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fd ffce 	bl	8002024 <HAL_GetTick>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800408c:	f7fd ffca 	bl	8002024 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	; 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e33e      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800409e:	4b63      	ldr	r3, [pc, #396]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x10c>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	f000 8092 	beq.w	80041e0 <HAL_RCC_OscConfig+0x260>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040bc:	4b5b      	ldr	r3, [pc, #364]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040c4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80040c6:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ca:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d007      	beq.n	80040e2 <HAL_RCC_OscConfig+0x162>
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	2b18      	cmp	r3, #24
 80040d6:	d12d      	bne.n	8004134 <HAL_RCC_OscConfig+0x1b4>
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d128      	bne.n	8004134 <HAL_RCC_OscConfig+0x1b4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040e2:	4b52      	ldr	r3, [pc, #328]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0304 	and.w	r3, r3, #4
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x17a>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e310      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	f7fd ffc1 	bl	8002080 <HAL_GetREVID>
 80040fe:	4602      	mov	r2, r0
 8004100:	f241 0303 	movw	r3, #4099	; 0x1003
 8004104:	429a      	cmp	r2, r3
 8004106:	d80a      	bhi.n	800411e <HAL_RCC_OscConfig+0x19e>
 8004108:	4b48      	ldr	r3, [pc, #288]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	031b      	lsls	r3, r3, #12
 8004116:	4945      	ldr	r1, [pc, #276]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	e060      	b.n	80041e0 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411e:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	061b      	lsls	r3, r3, #24
 800412c:	493f      	ldr	r1, [pc, #252]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004132:	e055      	b.n	80041e0 <HAL_RCC_OscConfig+0x260>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d038      	beq.n	80041ae <HAL_RCC_OscConfig+0x22e>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f023 0219 	bic.w	r2, r3, #25
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	4938      	ldr	r1, [pc, #224]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fd ff69 	bl	8002024 <HAL_GetTick>
 8004152:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004154:	e008      	b.n	8004168 <HAL_RCC_OscConfig+0x1e8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004156:	f7fd ff65 	bl	8002024 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCC_OscConfig+0x1e8>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e2d9      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004168:	4b30      	ldr	r3, [pc, #192]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCC_OscConfig+0x1d6>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004174:	f7fd ff84 	bl	8002080 <HAL_GetREVID>
 8004178:	4602      	mov	r2, r0
 800417a:	f241 0303 	movw	r3, #4099	; 0x1003
 800417e:	429a      	cmp	r2, r3
 8004180:	d80a      	bhi.n	8004198 <HAL_RCC_OscConfig+0x218>
 8004182:	4b2a      	ldr	r3, [pc, #168]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	031b      	lsls	r3, r3, #12
 8004190:	4926      	ldr	r1, [pc, #152]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
 8004196:	e023      	b.n	80041e0 <HAL_RCC_OscConfig+0x260>
 8004198:	4b24      	ldr	r3, [pc, #144]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	061b      	lsls	r3, r3, #24
 80041a6:	4921      	ldr	r1, [pc, #132]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	e018      	b.n	80041e0 <HAL_RCC_OscConfig+0x260>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ae:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ba:	f7fd ff33 	bl	8002024 <HAL_GetTick>
 80041be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041c0:	e008      	b.n	80041d4 <HAL_RCC_OscConfig+0x254>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041c2:	f7fd ff2f 	bl	8002024 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d901      	bls.n	80041d4 <HAL_RCC_OscConfig+0x254>
          {
            return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	e2a3      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80041d4:	4b15      	ldr	r3, [pc, #84]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1f0      	bne.n	80041c2 <HAL_RCC_OscConfig+0x242>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8091 	beq.w	8004310 <HAL_RCC_OscConfig+0x390>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041ee:	4b0f      	ldr	r3, [pc, #60]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80041f8:	4b0c      	ldr	r3, [pc, #48]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	2b08      	cmp	r3, #8
 8004202:	d007      	beq.n	8004214 <HAL_RCC_OscConfig+0x294>
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2b18      	cmp	r3, #24
 8004208:	d12f      	bne.n	800426a <HAL_RCC_OscConfig+0x2ea>
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b01      	cmp	r3, #1
 8004212:	d12a      	bne.n	800426a <HAL_RCC_OscConfig+0x2ea>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004214:	4b05      	ldr	r3, [pc, #20]	; (800422c <HAL_RCC_OscConfig+0x2ac>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421c:	2b00      	cmp	r3, #0
 800421e:	d007      	beq.n	8004230 <HAL_RCC_OscConfig+0x2b0>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	2b80      	cmp	r3, #128	; 0x80
 8004226:	d003      	beq.n	8004230 <HAL_RCC_OscConfig+0x2b0>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e277      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
 800422c:	58024400 	.word	0x58024400
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004230:	f7fd ff26 	bl	8002080 <HAL_GetREVID>
 8004234:	4602      	mov	r2, r0
 8004236:	f241 0303 	movw	r3, #4099	; 0x1003
 800423a:	429a      	cmp	r2, r3
 800423c:	d80a      	bhi.n	8004254 <HAL_RCC_OscConfig+0x2d4>
 800423e:	4ba2      	ldr	r3, [pc, #648]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	069b      	lsls	r3, r3, #26
 800424c:	499e      	ldr	r1, [pc, #632]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800424e:	4313      	orrs	r3, r2
 8004250:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004252:	e05d      	b.n	8004310 <HAL_RCC_OscConfig+0x390>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004254:	4b9c      	ldr	r3, [pc, #624]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	4999      	ldr	r1, [pc, #612]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004264:	4313      	orrs	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004268:	e052      	b.n	8004310 <HAL_RCC_OscConfig+0x390>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d035      	beq.n	80042de <HAL_RCC_OscConfig+0x35e>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004272:	4b95      	ldr	r3, [pc, #596]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a94      	ldr	r2, [pc, #592]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800427c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd fed1 	bl	8002024 <HAL_GetTick>
 8004282:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x318>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004286:	f7fd fecd 	bl	8002024 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e241      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004298:	4b8b      	ldr	r3, [pc, #556]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x306>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80042a4:	f7fd feec 	bl	8002080 <HAL_GetREVID>
 80042a8:	4602      	mov	r2, r0
 80042aa:	f241 0303 	movw	r3, #4099	; 0x1003
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d80a      	bhi.n	80042c8 <HAL_RCC_OscConfig+0x348>
 80042b2:	4b85      	ldr	r3, [pc, #532]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	069b      	lsls	r3, r3, #26
 80042c0:	4981      	ldr	r1, [pc, #516]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
 80042c6:	e023      	b.n	8004310 <HAL_RCC_OscConfig+0x390>
 80042c8:	4b7f      	ldr	r3, [pc, #508]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	061b      	lsls	r3, r3, #24
 80042d6:	497c      	ldr	r1, [pc, #496]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	60cb      	str	r3, [r1, #12]
 80042dc:	e018      	b.n	8004310 <HAL_RCC_OscConfig+0x390>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80042de:	4b7a      	ldr	r3, [pc, #488]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a79      	ldr	r2, [pc, #484]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fd fe9b 	bl	8002024 <HAL_GetTick>
 80042ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80042f2:	f7fd fe97 	bl	8002024 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e20b      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004304:	4b70      	ldr	r3, [pc, #448]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1f0      	bne.n	80042f2 <HAL_RCC_OscConfig+0x372>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d036      	beq.n	800438a <HAL_RCC_OscConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d019      	beq.n	8004358 <HAL_RCC_OscConfig+0x3d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004324:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004326:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004328:	4a67      	ldr	r2, [pc, #412]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004330:	f7fd fe78 	bl	8002024 <HAL_GetTick>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004338:	f7fd fe74 	bl	8002024 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e1e8      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800434a:	4b5f      	ldr	r3, [pc, #380]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800434c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x3b8>
 8004356:	e018      	b.n	800438a <HAL_RCC_OscConfig+0x40a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004358:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800435a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435c:	4a5a      	ldr	r2, [pc, #360]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004364:	f7fd fe5e 	bl	8002024 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436c:	f7fd fe5a 	bl	8002024 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e1ce      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800437e:	4b52      	ldr	r3, [pc, #328]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x3ec>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0320 	and.w	r3, r3, #32
 8004392:	2b00      	cmp	r3, #0
 8004394:	d036      	beq.n	8004404 <HAL_RCC_OscConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <HAL_RCC_OscConfig+0x452>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800439e:	4b4a      	ldr	r3, [pc, #296]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a49      	ldr	r2, [pc, #292]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80043a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043aa:	f7fd fe3b 	bl	8002024 <HAL_GetTick>
 80043ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043b2:	f7fd fe37 	bl	8002024 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e1ab      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80043c4:	4b40      	ldr	r3, [pc, #256]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x432>
 80043d0:	e018      	b.n	8004404 <HAL_RCC_OscConfig+0x484>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a3c      	ldr	r2, [pc, #240]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80043de:	f7fd fe21 	bl	8002024 <HAL_GetTick>
 80043e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x478>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80043e6:	f7fd fe1d 	bl	8002024 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x478>
        {
          return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e191      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80043f8:	4b33      	ldr	r3, [pc, #204]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0x466>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0304 	and.w	r3, r3, #4
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 8086 	beq.w	800451e <HAL_RCC_OscConfig+0x59e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004412:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <HAL_RCC_OscConfig+0x54c>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2d      	ldr	r2, [pc, #180]	; (80044cc <HAL_RCC_OscConfig+0x54c>)
 8004418:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800441c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800441e:	f7fd fe01 	bl	8002024 <HAL_GetTick>
 8004422:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004424:	e008      	b.n	8004438 <HAL_RCC_OscConfig+0x4b8>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004426:	f7fd fdfd 	bl	8002024 <HAL_GetTick>
 800442a:	4602      	mov	r2, r0
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	2b64      	cmp	r3, #100	; 0x64
 8004432:	d901      	bls.n	8004438 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e171      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004438:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_RCC_OscConfig+0x54c>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d0f0      	beq.n	8004426 <HAL_RCC_OscConfig+0x4a6>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d106      	bne.n	800445a <HAL_RCC_OscConfig+0x4da>
 800444c:	4b1e      	ldr	r3, [pc, #120]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800444e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004450:	4a1d      	ldr	r2, [pc, #116]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6713      	str	r3, [r2, #112]	; 0x70
 8004458:	e02d      	b.n	80044b6 <HAL_RCC_OscConfig+0x536>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10c      	bne.n	800447c <HAL_RCC_OscConfig+0x4fc>
 8004462:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	4a18      	ldr	r2, [pc, #96]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004468:	f023 0301 	bic.w	r3, r3, #1
 800446c:	6713      	str	r3, [r2, #112]	; 0x70
 800446e:	4b16      	ldr	r3, [pc, #88]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004472:	4a15      	ldr	r2, [pc, #84]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004474:	f023 0304 	bic.w	r3, r3, #4
 8004478:	6713      	str	r3, [r2, #112]	; 0x70
 800447a:	e01c      	b.n	80044b6 <HAL_RCC_OscConfig+0x536>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b05      	cmp	r3, #5
 8004482:	d10c      	bne.n	800449e <HAL_RCC_OscConfig+0x51e>
 8004484:	4b10      	ldr	r3, [pc, #64]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a0f      	ldr	r2, [pc, #60]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 800448a:	f043 0304 	orr.w	r3, r3, #4
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	4b0d      	ldr	r3, [pc, #52]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004494:	4a0c      	ldr	r2, [pc, #48]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 8004496:	f043 0301 	orr.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	; 0x70
 800449c:	e00b      	b.n	80044b6 <HAL_RCC_OscConfig+0x536>
 800449e:	4b0a      	ldr	r3, [pc, #40]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a2:	4a09      	ldr	r2, [pc, #36]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80044a4:	f023 0301 	bic.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	; 0x70
 80044aa:	4b07      	ldr	r3, [pc, #28]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80044ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ae:	4a06      	ldr	r2, [pc, #24]	; (80044c8 <HAL_RCC_OscConfig+0x548>)
 80044b0:	f023 0304 	bic.w	r3, r3, #4
 80044b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01a      	beq.n	80044f4 <HAL_RCC_OscConfig+0x574>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044be:	f7fd fdb1 	bl	8002024 <HAL_GetTick>
 80044c2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044c4:	e00f      	b.n	80044e6 <HAL_RCC_OscConfig+0x566>
 80044c6:	bf00      	nop
 80044c8:	58024400 	.word	0x58024400
 80044cc:	58024800 	.word	0x58024800
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044d0:	f7fd fda8 	bl	8002024 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	f241 3288 	movw	r2, #5000	; 0x1388
 80044de:	4293      	cmp	r3, r2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x566>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e11a      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e6:	4b8f      	ldr	r3, [pc, #572]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80044e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d0ee      	beq.n	80044d0 <HAL_RCC_OscConfig+0x550>
 80044f2:	e014      	b.n	800451e <HAL_RCC_OscConfig+0x59e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f4:	f7fd fd96 	bl	8002024 <HAL_GetTick>
 80044f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80044fa:	e00a      	b.n	8004512 <HAL_RCC_OscConfig+0x592>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044fc:	f7fd fd92 	bl	8002024 <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f241 3288 	movw	r2, #5000	; 0x1388
 800450a:	4293      	cmp	r3, r2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e104      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004512:	4b84      	ldr	r3, [pc, #528]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1ee      	bne.n	80044fc <HAL_RCC_OscConfig+0x57c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 80f9 	beq.w	800471a <HAL_RCC_OscConfig+0x79a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004530:	2b18      	cmp	r3, #24
 8004532:	f000 80b4 	beq.w	800469e <HAL_RCC_OscConfig+0x71e>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453a:	2b02      	cmp	r3, #2
 800453c:	f040 8095 	bne.w	800466a <HAL_RCC_OscConfig+0x6ea>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004540:	4b78      	ldr	r3, [pc, #480]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a77      	ldr	r2, [pc, #476]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004546:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800454a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7fd fd6a 	bl	8002024 <HAL_GetTick>
 8004550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004554:	f7fd fd66 	bl	8002024 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e0da      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004566:	4b6f      	ldr	r3, [pc, #444]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004572:	4b6c      	ldr	r3, [pc, #432]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004576:	4b6c      	ldr	r3, [pc, #432]	; (8004728 <HAL_RCC_OscConfig+0x7a8>)
 8004578:	4013      	ands	r3, r2
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004582:	0112      	lsls	r2, r2, #4
 8004584:	430a      	orrs	r2, r1
 8004586:	4967      	ldr	r1, [pc, #412]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004588:	4313      	orrs	r3, r2
 800458a:	628b      	str	r3, [r1, #40]	; 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	3b01      	subs	r3, #1
 8004592:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	3b01      	subs	r3, #1
 800459c:	025b      	lsls	r3, r3, #9
 800459e:	b29b      	uxth	r3, r3
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	3b01      	subs	r3, #1
 80045a8:	041b      	lsls	r3, r3, #16
 80045aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045ae:	431a      	orrs	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b4:	3b01      	subs	r3, #1
 80045b6:	061b      	lsls	r3, r3, #24
 80045b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045bc:	4959      	ldr	r1, [pc, #356]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045be:	4313      	orrs	r3, r2
 80045c0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80045c2:	4b58      	ldr	r3, [pc, #352]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c6:	4a57      	ldr	r2, [pc, #348]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80045ce:	4b55      	ldr	r3, [pc, #340]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d2:	4b56      	ldr	r3, [pc, #344]	; (800472c <HAL_RCC_OscConfig+0x7ac>)
 80045d4:	4013      	ands	r3, r2
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80045da:	00d2      	lsls	r2, r2, #3
 80045dc:	4951      	ldr	r1, [pc, #324]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80045e2:	4b50      	ldr	r3, [pc, #320]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	f023 020c 	bic.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	494d      	ldr	r1, [pc, #308]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80045f4:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f023 0202 	bic.w	r2, r3, #2
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004600:	4948      	ldr	r1, [pc, #288]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004602:	4313      	orrs	r3, r2
 8004604:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004606:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	4a46      	ldr	r2, [pc, #280]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004612:	4b44      	ldr	r3, [pc, #272]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004616:	4a43      	ldr	r2, [pc, #268]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004618:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800461c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800461e:	4b41      	ldr	r3, [pc, #260]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004622:	4a40      	ldr	r2, [pc, #256]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004628:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800462c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462e:	4a3d      	ldr	r2, [pc, #244]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004630:	f043 0301 	orr.w	r3, r3, #1
 8004634:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004636:	4b3b      	ldr	r3, [pc, #236]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a3a      	ldr	r2, [pc, #232]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800463c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004642:	f7fd fcef 	bl	8002024 <HAL_GetTick>
 8004646:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x6dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464a:	f7fd fceb 	bl	8002024 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x6dc>
          {
            return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e05f      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800465c:	4b31      	ldr	r3, [pc, #196]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d0f0      	beq.n	800464a <HAL_RCC_OscConfig+0x6ca>
 8004668:	e057      	b.n	800471a <HAL_RCC_OscConfig+0x79a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466a:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004670:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004674:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004676:	f7fd fcd5 	bl	8002024 <HAL_GetTick>
 800467a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x710>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467e:	f7fd fcd1 	bl	8002024 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x710>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e045      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1f0      	bne.n	800467e <HAL_RCC_OscConfig+0x6fe>
 800469c:	e03d      	b.n	800471a <HAL_RCC_OscConfig+0x79a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800469e:	4b21      	ldr	r3, [pc, #132]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80046a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a2:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80046a4:	4b1f      	ldr	r3, [pc, #124]	; (8004724 <HAL_RCC_OscConfig+0x7a4>)
 80046a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a8:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	d031      	beq.n	8004716 <HAL_RCC_OscConfig+0x796>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	f003 0203 	and.w	r2, r3, #3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046bc:	429a      	cmp	r2, r3
 80046be:	d12a      	bne.n	8004716 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	091b      	lsrs	r3, r3, #4
 80046c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d122      	bne.n	8004716 <HAL_RCC_OscConfig+0x796>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046da:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80046dc:	429a      	cmp	r2, r3
 80046de:	d11a      	bne.n	8004716 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	0a5b      	lsrs	r3, r3, #9
 80046e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d111      	bne.n	8004716 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	0c1b      	lsrs	r3, r3, #16
 80046f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004700:	429a      	cmp	r2, r3
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0x796>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	0e1b      	lsrs	r3, r3, #24
 8004708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004710:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004712:	429a      	cmp	r2, r3
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0x79a>
      {
        return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_RCC_OscConfig+0x79c>
      }
    }
  }
  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3730      	adds	r7, #48	; 0x30
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	58024400 	.word	0x58024400
 8004728:	fffffc0c 	.word	0xfffffc0c
 800472c:	ffff0007 	.word	0xffff0007

08004730 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e19c      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b8a      	ldr	r3, [pc, #552]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b87      	ldr	r3, [pc, #540]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 020f 	bic.w	r2, r3, #15
 800475a:	4985      	ldr	r1, [pc, #532]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b83      	ldr	r3, [pc, #524]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e184      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d010      	beq.n	80047a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	691a      	ldr	r2, [r3, #16]
 8004784:	4b7b      	ldr	r3, [pc, #492]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800478c:	429a      	cmp	r2, r3
 800478e:	d908      	bls.n	80047a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004790:	4b78      	ldr	r3, [pc, #480]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	4975      	ldr	r1, [pc, #468]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0308 	and.w	r3, r3, #8
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d010      	beq.n	80047d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	4b70      	ldr	r3, [pc, #448]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047b4:	69db      	ldr	r3, [r3, #28]
 80047b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d908      	bls.n	80047d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80047be:	4b6d      	ldr	r3, [pc, #436]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	496a      	ldr	r1, [pc, #424]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0310 	and.w	r3, r3, #16
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d010      	beq.n	80047fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	699a      	ldr	r2, [r3, #24]
 80047e0:	4b64      	ldr	r3, [pc, #400]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d908      	bls.n	80047fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047ee:	69db      	ldr	r3, [r3, #28]
 80047f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	495e      	ldr	r1, [pc, #376]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80047fa:	4313      	orrs	r3, r2
 80047fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d010      	beq.n	800482c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69da      	ldr	r2, [r3, #28]
 800480e:	4b59      	ldr	r3, [pc, #356]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004816:	429a      	cmp	r2, r3
 8004818:	d908      	bls.n	800482c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800481a:	4b56      	ldr	r3, [pc, #344]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	69db      	ldr	r3, [r3, #28]
 8004826:	4953      	ldr	r1, [pc, #332]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004828:	4313      	orrs	r3, r2
 800482a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d010      	beq.n	800485a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68da      	ldr	r2, [r3, #12]
 800483c:	4b4d      	ldr	r3, [pc, #308]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	429a      	cmp	r2, r3
 8004846:	d908      	bls.n	800485a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004848:	4b4a      	ldr	r3, [pc, #296]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f023 020f 	bic.w	r2, r3, #15
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4947      	ldr	r1, [pc, #284]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004856:	4313      	orrs	r3, r2
 8004858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0301 	and.w	r3, r3, #1
 8004862:	2b00      	cmp	r3, #0
 8004864:	d055      	beq.n	8004912 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004866:	4b43      	ldr	r3, [pc, #268]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	4940      	ldr	r1, [pc, #256]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004874:	4313      	orrs	r3, r2
 8004876:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	2b02      	cmp	r3, #2
 800487e:	d107      	bne.n	8004890 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004880:	4b3c      	ldr	r3, [pc, #240]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d121      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0f6      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d107      	bne.n	80048a8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004898:	4b36      	ldr	r3, [pc, #216]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d115      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e0ea      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d107      	bne.n	80048c0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048b0:	4b30      	ldr	r3, [pc, #192]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e0de      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048c0:	4b2c      	ldr	r3, [pc, #176]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0d6      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80048d0:	4b28      	ldr	r3, [pc, #160]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	f023 0207 	bic.w	r2, r3, #7
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	4925      	ldr	r1, [pc, #148]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e2:	f7fd fb9f 	bl	8002024 <HAL_GetTick>
 80048e6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048e8:	e00a      	b.n	8004900 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ea:	f7fd fb9b 	bl	8002024 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e0be      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004902:	691b      	ldr	r3, [r3, #16]
 8004904:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	429a      	cmp	r2, r3
 8004910:	d1eb      	bne.n	80048ea <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d010      	beq.n	8004940 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	4b14      	ldr	r3, [pc, #80]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004924:	699b      	ldr	r3, [r3, #24]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	429a      	cmp	r2, r3
 800492c:	d208      	bcs.n	8004940 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492e:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f023 020f 	bic.w	r2, r3, #15
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	490e      	ldr	r1, [pc, #56]	; (8004974 <HAL_RCC_ClockConfig+0x244>)
 800493c:	4313      	orrs	r3, r2
 800493e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004940:	4b0b      	ldr	r3, [pc, #44]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 030f 	and.w	r3, r3, #15
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	429a      	cmp	r2, r3
 800494c:	d214      	bcs.n	8004978 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800494e:	4b08      	ldr	r3, [pc, #32]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 020f 	bic.w	r2, r3, #15
 8004956:	4906      	ldr	r1, [pc, #24]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	4313      	orrs	r3, r2
 800495c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800495e:	4b04      	ldr	r3, [pc, #16]	; (8004970 <HAL_RCC_ClockConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 030f 	and.w	r3, r3, #15
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	429a      	cmp	r2, r3
 800496a:	d005      	beq.n	8004978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e086      	b.n	8004a7e <HAL_RCC_ClockConfig+0x34e>
 8004970:	52002000 	.word	0x52002000
 8004974:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d010      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691a      	ldr	r2, [r3, #16]
 8004988:	4b3f      	ldr	r3, [pc, #252]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004990:	429a      	cmp	r2, r3
 8004992:	d208      	bcs.n	80049a6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004994:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004996:	699b      	ldr	r3, [r3, #24]
 8004998:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	4939      	ldr	r1, [pc, #228]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d010      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	4b34      	ldr	r3, [pc, #208]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049be:	429a      	cmp	r2, r3
 80049c0:	d208      	bcs.n	80049d4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80049c2:	4b31      	ldr	r3, [pc, #196]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	492e      	ldr	r1, [pc, #184]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d010      	beq.n	8004a02 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699a      	ldr	r2, [r3, #24]
 80049e4:	4b28      	ldr	r3, [pc, #160]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d208      	bcs.n	8004a02 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049f0:	4b25      	ldr	r3, [pc, #148]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	4922      	ldr	r1, [pc, #136]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d010      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	69da      	ldr	r2, [r3, #28]
 8004a12:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d208      	bcs.n	8004a30 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004a20:	6a1b      	ldr	r3, [r3, #32]
 8004a22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69db      	ldr	r3, [r3, #28]
 8004a2a:	4917      	ldr	r1, [pc, #92]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a30:	f000 f834 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004a34:	4601      	mov	r1, r0
 8004a36:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	0a1b      	lsrs	r3, r3, #8
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	4a12      	ldr	r2, [pc, #72]	; (8004a8c <HAL_RCC_ClockConfig+0x35c>)
 8004a42:	5cd3      	ldrb	r3, [r2, r3]
 8004a44:	f003 031f 	and.w	r3, r3, #31
 8004a48:	fa21 f303 	lsr.w	r3, r1, r3
 8004a4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a4e:	4b0e      	ldr	r3, [pc, #56]	; (8004a88 <HAL_RCC_ClockConfig+0x358>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <HAL_RCC_ClockConfig+0x35c>)
 8004a58:	5cd3      	ldrb	r3, [r2, r3]
 8004a5a:	f003 031f 	and.w	r3, r3, #31
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	fa22 f303 	lsr.w	r3, r2, r3
 8004a64:	4a0a      	ldr	r2, [pc, #40]	; (8004a90 <HAL_RCC_ClockConfig+0x360>)
 8004a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a68:	4a0a      	ldr	r2, [pc, #40]	; (8004a94 <HAL_RCC_ClockConfig+0x364>)
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8004a6e:	4b0a      	ldr	r3, [pc, #40]	; (8004a98 <HAL_RCC_ClockConfig+0x368>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7fd fa8c 	bl	8001f90 <HAL_InitTick>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3718      	adds	r7, #24
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	58024400 	.word	0x58024400
 8004a8c:	0800dafc 	.word	0x0800dafc
 8004a90:	2400000c 	.word	0x2400000c
 8004a94:	24000008 	.word	0x24000008
 8004a98:	24000010 	.word	0x24000010

08004a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	; 0x24
 8004aa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aa2:	4baf      	ldr	r3, [pc, #700]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004aa4:	691b      	ldr	r3, [r3, #16]
 8004aa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aaa:	2b18      	cmp	r3, #24
 8004aac:	f200 814e 	bhi.w	8004d4c <HAL_RCC_GetSysClockFreq+0x2b0>
 8004ab0:	a201      	add	r2, pc, #4	; (adr r2, 8004ab8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab6:	bf00      	nop
 8004ab8:	08004b1d 	.word	0x08004b1d
 8004abc:	08004d4d 	.word	0x08004d4d
 8004ac0:	08004d4d 	.word	0x08004d4d
 8004ac4:	08004d4d 	.word	0x08004d4d
 8004ac8:	08004d4d 	.word	0x08004d4d
 8004acc:	08004d4d 	.word	0x08004d4d
 8004ad0:	08004d4d 	.word	0x08004d4d
 8004ad4:	08004d4d 	.word	0x08004d4d
 8004ad8:	08004b43 	.word	0x08004b43
 8004adc:	08004d4d 	.word	0x08004d4d
 8004ae0:	08004d4d 	.word	0x08004d4d
 8004ae4:	08004d4d 	.word	0x08004d4d
 8004ae8:	08004d4d 	.word	0x08004d4d
 8004aec:	08004d4d 	.word	0x08004d4d
 8004af0:	08004d4d 	.word	0x08004d4d
 8004af4:	08004d4d 	.word	0x08004d4d
 8004af8:	08004b49 	.word	0x08004b49
 8004afc:	08004d4d 	.word	0x08004d4d
 8004b00:	08004d4d 	.word	0x08004d4d
 8004b04:	08004d4d 	.word	0x08004d4d
 8004b08:	08004d4d 	.word	0x08004d4d
 8004b0c:	08004d4d 	.word	0x08004d4d
 8004b10:	08004d4d 	.word	0x08004d4d
 8004b14:	08004d4d 	.word	0x08004d4d
 8004b18:	08004b4f 	.word	0x08004b4f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b1c:	4b90      	ldr	r3, [pc, #576]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0320 	and.w	r3, r3, #32
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d009      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004b28:	4b8d      	ldr	r3, [pc, #564]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	08db      	lsrs	r3, r3, #3
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	4a8c      	ldr	r2, [pc, #560]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b34:	fa22 f303 	lsr.w	r3, r2, r3
 8004b38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8004b3a:	e10a      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004b3c:	4b89      	ldr	r3, [pc, #548]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004b3e:	61bb      	str	r3, [r7, #24]
    break;
 8004b40:	e107      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004b42:	4b89      	ldr	r3, [pc, #548]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004b44:	61bb      	str	r3, [r7, #24]
    break;
 8004b46:	e104      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004b48:	4b88      	ldr	r3, [pc, #544]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x2d0>)
 8004b4a:	61bb      	str	r3, [r7, #24]
    break;
 8004b4c:	e101      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b4e:	4b84      	ldr	r3, [pc, #528]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004b58:	4b81      	ldr	r3, [pc, #516]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	091b      	lsrs	r3, r3, #4
 8004b5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b62:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004b64:	4b7e      	ldr	r3, [pc, #504]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8004b6e:	4b7c      	ldr	r3, [pc, #496]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b72:	08db      	lsrs	r3, r3, #3
 8004b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	fb02 f303 	mul.w	r3, r2, r3
 8004b7e:	ee07 3a90 	vmov	s15, r3
 8004b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b86:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80da 	beq.w	8004d46 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d05a      	beq.n	8004c4e <HAL_RCC_GetSysClockFreq+0x1b2>
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d302      	bcc.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x106>
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d078      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x1f6>
 8004ba0:	e099      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ba2:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d02d      	beq.n	8004c0a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004bae:	4b6c      	ldr	r3, [pc, #432]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	08db      	lsrs	r3, r3, #3
 8004bb4:	f003 0303 	and.w	r3, r3, #3
 8004bb8:	4a6a      	ldr	r2, [pc, #424]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004bba:	fa22 f303 	lsr.w	r3, r2, r3
 8004bbe:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	ee07 3a90 	vmov	s15, r3
 8004bc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	ee07 3a90 	vmov	s15, r3
 8004bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004bec:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004bf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004bfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c04:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004c08:	e087      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	ee07 3a90 	vmov	s15, r3
 8004c10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c14:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004d74 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004c18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1c:	4b50      	ldr	r3, [pc, #320]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c24:	ee07 3a90 	vmov	s15, r3
 8004c28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c30:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4c:	e065      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	ee07 3a90 	vmov	s15, r3
 8004c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c58:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004d78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004c5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c60:	4b3f      	ldr	r3, [pc, #252]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c68:	ee07 3a90 	vmov	s15, r3
 8004c6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c70:	ed97 6a02 	vldr	s12, [r7, #8]
 8004c74:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004c78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c90:	e043      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	ee07 3a90 	vmov	s15, r3
 8004c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004d7c <HAL_RCC_GetSysClockFreq+0x2e0>
 8004ca0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ca4:	4b2e      	ldr	r3, [pc, #184]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cac:	ee07 3a90 	vmov	s15, r3
 8004cb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cb4:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cb8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004cbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ccc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cd4:	e021      	b.n	8004d1a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	ee07 3a90 	vmov	s15, r3
 8004cdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ce0:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004d78 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004ce4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cf0:	ee07 3a90 	vmov	s15, r3
 8004cf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf8:	ed97 6a02 	vldr	s12, [r7, #8]
 8004cfc:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004d70 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004d00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d18:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004d1a:	4b11      	ldr	r3, [pc, #68]	; (8004d60 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	0a5b      	lsrs	r3, r3, #9
 8004d20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d24:	3301      	adds	r3, #1
 8004d26:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	ee07 3a90 	vmov	s15, r3
 8004d2e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004d32:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d3e:	ee17 3a90 	vmov	r3, s15
 8004d42:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004d44:	e005      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
    break;
 8004d4a:	e002      	b.n	8004d52 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004d4c:	4b06      	ldr	r3, [pc, #24]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004d4e:	61bb      	str	r3, [r7, #24]
    break;
 8004d50:	bf00      	nop
  }

  return sysclockfreq;
 8004d52:	69bb      	ldr	r3, [r7, #24]
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3724      	adds	r7, #36	; 0x24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	58024400 	.word	0x58024400
 8004d64:	03d09000 	.word	0x03d09000
 8004d68:	003d0900 	.word	0x003d0900
 8004d6c:	007a1200 	.word	0x007a1200
 8004d70:	46000000 	.word	0x46000000
 8004d74:	4c742400 	.word	0x4c742400
 8004d78:	4a742400 	.word	0x4a742400
 8004d7c:	4af42400 	.word	0x4af42400

08004d80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004d86:	f7ff fe89 	bl	8004a9c <HAL_RCC_GetSysClockFreq>
 8004d8a:	4601      	mov	r1, r0
 8004d8c:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	0a1b      	lsrs	r3, r3, #8
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	4a0f      	ldr	r2, [pc, #60]	; (8004dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004d98:	5cd3      	ldrb	r3, [r2, r3]
 8004d9a:	f003 031f 	and.w	r3, r3, #31
 8004d9e:	fa21 f303 	lsr.w	r3, r1, r3
 8004da2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004da4:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <HAL_RCC_GetHCLKFreq+0x50>)
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	f003 030f 	and.w	r3, r3, #15
 8004dac:	4a09      	ldr	r2, [pc, #36]	; (8004dd4 <HAL_RCC_GetHCLKFreq+0x54>)
 8004dae:	5cd3      	ldrb	r3, [r2, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	fa22 f303 	lsr.w	r3, r2, r3
 8004dba:	4a07      	ldr	r2, [pc, #28]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dbc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_RCC_GetHCLKFreq+0x5c>)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004dc4:	4b04      	ldr	r3, [pc, #16]	; (8004dd8 <HAL_RCC_GetHCLKFreq+0x58>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	58024400 	.word	0x58024400
 8004dd4:	0800dafc 	.word	0x0800dafc
 8004dd8:	2400000c 	.word	0x2400000c
 8004ddc:	24000008 	.word	0x24000008

08004de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004de4:	f7ff ffcc 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004de8:	4601      	mov	r1, r0
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dec:	69db      	ldr	r3, [r3, #28]
 8004dee:	091b      	lsrs	r3, r3, #4
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004df6:	5cd3      	ldrb	r3, [r2, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	58024400 	.word	0x58024400
 8004e08:	0800dafc 	.word	0x0800dafc

08004e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004e10:	f7ff ffb6 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8004e14:	4601      	mov	r1, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e18:	69db      	ldr	r3, [r3, #28]
 8004e1a:	0a1b      	lsrs	r3, r3, #8
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4a04      	ldr	r2, [pc, #16]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e22:	5cd3      	ldrb	r3, [r2, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	58024400 	.word	0x58024400
 8004e34:	0800dafc 	.word	0x0800dafc

08004e38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e40:	2300      	movs	r3, #0
 8004e42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e44:	2300      	movs	r3, #0
 8004e46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d03d      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e5c:	d013      	beq.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004e5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e62:	d802      	bhi.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d007      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004e68:	e01f      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004e6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e6e:	d013      	beq.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004e70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004e74:	d01c      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004e76:	e018      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e78:	4baf      	ldr	r3, [pc, #700]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	4aae      	ldr	r2, [pc, #696]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e84:	e015      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2102      	movs	r1, #2
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f001 f95f 	bl	8006150 <RCCEx_PLL2_Config>
 8004e92:	4603      	mov	r3, r0
 8004e94:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004e96:	e00c      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3324      	adds	r3, #36	; 0x24
 8004e9c:	2102      	movs	r1, #2
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f001 fa08 	bl	80062b4 <RCCEx_PLL3_Config>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004ea8:	e003      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	75fb      	strb	r3, [r7, #23]
      break;
 8004eae:	e000      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004eb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eb2:	7dfb      	ldrb	r3, [r7, #23]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004eb8:	4b9f      	ldr	r3, [pc, #636]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ebc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ec4:	499c      	ldr	r1, [pc, #624]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	650b      	str	r3, [r1, #80]	; 0x50
 8004eca:	e001      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ecc:	7dfb      	ldrb	r3, [r7, #23]
 8004ece:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d03d      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ee0:	2b04      	cmp	r3, #4
 8004ee2:	d826      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004ee4:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eea:	bf00      	nop
 8004eec:	08004f01 	.word	0x08004f01
 8004ef0:	08004f0f 	.word	0x08004f0f
 8004ef4:	08004f21 	.word	0x08004f21
 8004ef8:	08004f39 	.word	0x08004f39
 8004efc:	08004f39 	.word	0x08004f39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f00:	4b8d      	ldr	r3, [pc, #564]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	4a8c      	ldr	r2, [pc, #560]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f0c:	e015      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3304      	adds	r3, #4
 8004f12:	2100      	movs	r1, #0
 8004f14:	4618      	mov	r0, r3
 8004f16:	f001 f91b 	bl	8006150 <RCCEx_PLL2_Config>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f1e:	e00c      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3324      	adds	r3, #36	; 0x24
 8004f24:	2100      	movs	r1, #0
 8004f26:	4618      	mov	r0, r3
 8004f28:	f001 f9c4 	bl	80062b4 <RCCEx_PLL3_Config>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004f30:	e003      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	75fb      	strb	r3, [r7, #23]
      break;
 8004f36:	e000      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004f38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f3a:	7dfb      	ldrb	r3, [r7, #23]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f40:	4b7d      	ldr	r3, [pc, #500]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f44:	f023 0207 	bic.w	r2, r3, #7
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4c:	497a      	ldr	r1, [pc, #488]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	650b      	str	r3, [r1, #80]	; 0x50
 8004f52:	e001      	b.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f54:	7dfb      	ldrb	r3, [r7, #23]
 8004f56:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03e      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	2b80      	cmp	r3, #128	; 0x80
 8004f6a:	d01c      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d804      	bhi.n	8004f7a <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004f74:	2b40      	cmp	r3, #64	; 0x40
 8004f76:	d00d      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004f78:	e01e      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8004f7c:	d01f      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f82:	d01e      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f84:	e018      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f86:	4b6c      	ldr	r3, [pc, #432]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f8a:	4a6b      	ldr	r2, [pc, #428]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f90:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004f92:	e017      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3304      	adds	r3, #4
 8004f98:	2100      	movs	r1, #0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f001 f8d8 	bl	8006150 <RCCEx_PLL2_Config>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fa4:	e00e      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3324      	adds	r3, #36	; 0x24
 8004faa:	2100      	movs	r1, #0
 8004fac:	4618      	mov	r0, r3
 8004fae:	f001 f981 	bl	80062b4 <RCCEx_PLL3_Config>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004fb6:	e005      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	75fb      	strb	r3, [r7, #23]
      break;
 8004fbc:	e002      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004fbe:	bf00      	nop
 8004fc0:	e000      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004fc2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fc4:	7dfb      	ldrb	r3, [r7, #23]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004fca:	4b5b      	ldr	r3, [pc, #364]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd6:	4958      	ldr	r1, [pc, #352]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	650b      	str	r3, [r1, #80]	; 0x50
 8004fdc:	e001      	b.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fde:	7dfb      	ldrb	r3, [r7, #23]
 8004fe0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d044      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004ff4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ff8:	d01f      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ffe:	d805      	bhi.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00a      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8005004:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005008:	d00e      	beq.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800500a:	e01f      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800500c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005010:	d01f      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8005012:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005016:	d01e      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005018:	e018      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800501a:	4b47      	ldr	r3, [pc, #284]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800501c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800501e:	4a46      	ldr	r2, [pc, #280]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005024:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005026:	e017      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	3304      	adds	r3, #4
 800502c:	2100      	movs	r1, #0
 800502e:	4618      	mov	r0, r3
 8005030:	f001 f88e 	bl	8006150 <RCCEx_PLL2_Config>
 8005034:	4603      	mov	r3, r0
 8005036:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005038:	e00e      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	3324      	adds	r3, #36	; 0x24
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f001 f937 	bl	80062b4 <RCCEx_PLL3_Config>
 8005046:	4603      	mov	r3, r0
 8005048:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800504a:	e005      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	75fb      	strb	r3, [r7, #23]
      break;
 8005050:	e002      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005052:	bf00      	nop
 8005054:	e000      	b.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8005056:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005058:	7dfb      	ldrb	r3, [r7, #23]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d10a      	bne.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800505e:	4b36      	ldr	r3, [pc, #216]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005062:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800506c:	4932      	ldr	r1, [pc, #200]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800506e:	4313      	orrs	r3, r2
 8005070:	658b      	str	r3, [r1, #88]	; 0x58
 8005072:	e001      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005074:	7dfb      	ldrb	r3, [r7, #23]
 8005076:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005080:	2b00      	cmp	r3, #0
 8005082:	d044      	beq.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800508a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800508e:	d01f      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005090:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005094:	d805      	bhi.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800509a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800509e:	d00e      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x286>
 80050a0:	e01f      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 80050a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80050a6:	d01f      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80050a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80050ac:	d01e      	beq.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80050ae:	e018      	b.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80050b0:	4b21      	ldr	r3, [pc, #132]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b4:	4a20      	ldr	r2, [pc, #128]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050bc:	e017      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f843 	bl	8006150 <RCCEx_PLL2_Config>
 80050ca:	4603      	mov	r3, r0
 80050cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80050ce:	e00e      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3324      	adds	r3, #36	; 0x24
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f001 f8ec 	bl	80062b4 <RCCEx_PLL3_Config>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80050e0:	e005      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	75fb      	strb	r3, [r7, #23]
      break;
 80050e6:	e002      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 80050ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050ee:	7dfb      	ldrb	r3, [r7, #23]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80050f4:	4b10      	ldr	r3, [pc, #64]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80050f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005102:	490d      	ldr	r1, [pc, #52]	; (8005138 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8005104:	4313      	orrs	r3, r2
 8005106:	658b      	str	r3, [r1, #88]	; 0x58
 8005108:	e001      	b.n	800510e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
 800510c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d035      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511e:	2b10      	cmp	r3, #16
 8005120:	d00c      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x304>
 8005122:	2b10      	cmp	r3, #16
 8005124:	d802      	bhi.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8005126:	2b00      	cmp	r3, #0
 8005128:	d01b      	beq.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800512a:	e017      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800512c:	2b20      	cmp	r3, #32
 800512e:	d00c      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8005130:	2b30      	cmp	r3, #48	; 0x30
 8005132:	d018      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8005134:	e012      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x324>
 8005136:	bf00      	nop
 8005138:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800513c:	4baf      	ldr	r3, [pc, #700]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800513e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005140:	4aae      	ldr	r2, [pc, #696]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005146:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005148:	e00e      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	3304      	adds	r3, #4
 800514e:	2102      	movs	r1, #2
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fffd 	bl	8006150 <RCCEx_PLL2_Config>
 8005156:	4603      	mov	r3, r0
 8005158:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800515a:	e005      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]
      break;
 8005160:	e002      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005162:	bf00      	nop
 8005164:	e000      	b.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8005166:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005168:	7dfb      	ldrb	r3, [r7, #23]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d109      	bne.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800516e:	4ba3      	ldr	r3, [pc, #652]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005172:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800517a:	49a0      	ldr	r1, [pc, #640]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800517c:	4313      	orrs	r3, r2
 800517e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005180:	e001      	b.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005182:	7dfb      	ldrb	r3, [r7, #23]
 8005184:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d042      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005196:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800519a:	d01f      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800519c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051a0:	d805      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x376>
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00a      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x384>
 80051a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051aa:	d00e      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x392>
 80051ac:	e01f      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80051ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80051b2:	d01f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80051b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051b8:	d01e      	beq.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80051ba:	e018      	b.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051bc:	4b8f      	ldr	r3, [pc, #572]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c0:	4a8e      	ldr	r2, [pc, #568]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80051c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051c6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051c8:	e017      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	3304      	adds	r3, #4
 80051ce:	2100      	movs	r1, #0
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 ffbd 	bl	8006150 <RCCEx_PLL2_Config>
 80051d6:	4603      	mov	r3, r0
 80051d8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051da:	e00e      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	3324      	adds	r3, #36	; 0x24
 80051e0:	2100      	movs	r1, #0
 80051e2:	4618      	mov	r0, r3
 80051e4:	f001 f866 	bl	80062b4 <RCCEx_PLL3_Config>
 80051e8:	4603      	mov	r3, r0
 80051ea:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80051ec:	e005      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ee:	2301      	movs	r3, #1
 80051f0:	75fb      	strb	r3, [r7, #23]
      break;
 80051f2:	e002      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80051f4:	bf00      	nop
 80051f6:	e000      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80051f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d109      	bne.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005200:	4b7e      	ldr	r3, [pc, #504]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005204:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800520c:	497b      	ldr	r1, [pc, #492]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800520e:	4313      	orrs	r3, r2
 8005210:	650b      	str	r3, [r1, #80]	; 0x50
 8005212:	e001      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005214:	7dfb      	ldrb	r3, [r7, #23]
 8005216:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005220:	2b00      	cmp	r3, #0
 8005222:	d042      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005228:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800522c:	d01b      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800522e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005232:	d805      	bhi.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d022      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x446>
 8005238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800523c:	d00a      	beq.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800523e:	e01b      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8005240:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005244:	d01d      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8005246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800524a:	d01c      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800524c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005250:	d01b      	beq.n	800528a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005252:	e011      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	3304      	adds	r3, #4
 8005258:	2101      	movs	r1, #1
 800525a:	4618      	mov	r0, r3
 800525c:	f000 ff78 	bl	8006150 <RCCEx_PLL2_Config>
 8005260:	4603      	mov	r3, r0
 8005262:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005264:	e012      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	3324      	adds	r3, #36	; 0x24
 800526a:	2101      	movs	r1, #1
 800526c:	4618      	mov	r0, r3
 800526e:	f001 f821 	bl	80062b4 <RCCEx_PLL3_Config>
 8005272:	4603      	mov	r3, r0
 8005274:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005276:	e009      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	75fb      	strb	r3, [r7, #23]
      break;
 800527c:	e006      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800527e:	bf00      	nop
 8005280:	e004      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005282:	bf00      	nop
 8005284:	e002      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005286:	bf00      	nop
 8005288:	e000      	b.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800528a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800528c:	7dfb      	ldrb	r3, [r7, #23]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d109      	bne.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005292:	4b5a      	ldr	r3, [pc, #360]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005296:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800529e:	4957      	ldr	r1, [pc, #348]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	650b      	str	r3, [r1, #80]	; 0x50
 80052a4:	e001      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a6:	7dfb      	ldrb	r3, [r7, #23]
 80052a8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d044      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d01b      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80052c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c6:	d805      	bhi.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d022      	beq.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80052cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80052d2:	e01b      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 80052d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052d8:	d01d      	beq.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80052da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052de:	d01c      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 80052e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80052e4:	d01b      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 80052e6:	e011      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3304      	adds	r3, #4
 80052ec:	2101      	movs	r1, #1
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ff2e 	bl	8006150 <RCCEx_PLL2_Config>
 80052f4:	4603      	mov	r3, r0
 80052f6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80052f8:	e012      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3324      	adds	r3, #36	; 0x24
 80052fe:	2101      	movs	r1, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f000 ffd7 	bl	80062b4 <RCCEx_PLL3_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800530a:	e009      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
      break;
 8005310:	e006      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005312:	bf00      	nop
 8005314:	e004      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8005316:	bf00      	nop
 8005318:	e002      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800531a:	bf00      	nop
 800531c:	e000      	b.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800531e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005326:	4b35      	ldr	r3, [pc, #212]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800532a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005334:	4931      	ldr	r1, [pc, #196]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005336:	4313      	orrs	r3, r2
 8005338:	658b      	str	r3, [r1, #88]	; 0x58
 800533a:	e001      	b.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
 800533e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d02d      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005350:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005354:	d005      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800535a:	d009      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800535c:	2b00      	cmp	r3, #0
 800535e:	d013      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005360:	e00f      	b.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005362:	4b26      	ldr	r3, [pc, #152]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	4a25      	ldr	r2, [pc, #148]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800536c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800536e:	e00c      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3304      	adds	r3, #4
 8005374:	2101      	movs	r1, #1
 8005376:	4618      	mov	r0, r3
 8005378:	f000 feea 	bl	8006150 <RCCEx_PLL2_Config>
 800537c:	4603      	mov	r3, r0
 800537e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005380:	e003      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	75fb      	strb	r3, [r7, #23]
      break;
 8005386:	e000      	b.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8005388:	bf00      	nop
    }

    if(ret == HAL_OK)
 800538a:	7dfb      	ldrb	r3, [r7, #23]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d109      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005390:	4b1a      	ldr	r3, [pc, #104]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800539c:	4917      	ldr	r1, [pc, #92]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	650b      	str	r3, [r1, #80]	; 0x50
 80053a2:	e001      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053a4:	7dfb      	ldrb	r3, [r7, #23]
 80053a6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d035      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d81b      	bhi.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80053bc:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80053be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c2:	bf00      	nop
 80053c4:	08005401 	.word	0x08005401
 80053c8:	080053d5 	.word	0x080053d5
 80053cc:	080053e3 	.word	0x080053e3
 80053d0:	08005401 	.word	0x08005401
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053d4:	4b09      	ldr	r3, [pc, #36]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d8:	4a08      	ldr	r2, [pc, #32]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80053da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053de:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053e0:	e00f      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3304      	adds	r3, #4
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 feb1 	bl	8006150 <RCCEx_PLL2_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80053f2:	e006      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	75fb      	strb	r3, [r7, #23]
      break;
 80053f8:	e003      	b.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80053fa:	bf00      	nop
 80053fc:	58024400 	.word	0x58024400
      break;
 8005400:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d109      	bne.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005408:	4bba      	ldr	r3, [pc, #744]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800540a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540c:	f023 0203 	bic.w	r2, r3, #3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005414:	49b7      	ldr	r1, [pc, #732]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	64cb      	str	r3, [r1, #76]	; 0x4c
 800541a:	e001      	b.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800541c:	7dfb      	ldrb	r3, [r7, #23]
 800541e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8086 	beq.w	800553a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800542e:	4bb2      	ldr	r3, [pc, #712]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4ab1      	ldr	r2, [pc, #708]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005438:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800543a:	f7fc fdf3 	bl	8002024 <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005440:	e009      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005442:	f7fc fdef 	bl	8002024 <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b64      	cmp	r3, #100	; 0x64
 800544e:	d902      	bls.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	75fb      	strb	r3, [r7, #23]
        break;
 8005454:	e005      	b.n	8005462 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005456:	4ba8      	ldr	r3, [pc, #672]	; (80056f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545e:	2b00      	cmp	r3, #0
 8005460:	d0ef      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d166      	bne.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005468:	4ba2      	ldr	r3, [pc, #648]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800546a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005472:	4053      	eors	r3, r2
 8005474:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005478:	2b00      	cmp	r3, #0
 800547a:	d013      	beq.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800547c:	4b9d      	ldr	r3, [pc, #628]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800547e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005480:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005484:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005486:	4b9b      	ldr	r3, [pc, #620]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800548a:	4a9a      	ldr	r2, [pc, #616]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800548c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005490:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005492:	4b98      	ldr	r3, [pc, #608]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005496:	4a97      	ldr	r2, [pc, #604]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800549c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800549e:	4a95      	ldr	r2, [pc, #596]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ae:	d115      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054b0:	f7fc fdb8 	bl	8002024 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054b6:	e00b      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b8:	f7fc fdb4 	bl	8002024 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d902      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	75fb      	strb	r3, [r7, #23]
            break;
 80054ce:	e005      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80054d0:	4b88      	ldr	r3, [pc, #544]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d0ed      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 80054dc:	7dfb      	ldrb	r3, [r7, #23]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d126      	bne.n	8005530 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80054e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054ec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054f0:	d10d      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80054f2:	4b80      	ldr	r3, [pc, #512]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005500:	0919      	lsrs	r1, r3, #4
 8005502:	4b7e      	ldr	r3, [pc, #504]	; (80056fc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8005504:	400b      	ands	r3, r1
 8005506:	497b      	ldr	r1, [pc, #492]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005508:	4313      	orrs	r3, r2
 800550a:	610b      	str	r3, [r1, #16]
 800550c:	e005      	b.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800550e:	4b79      	ldr	r3, [pc, #484]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	4a78      	ldr	r2, [pc, #480]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005514:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005518:	6113      	str	r3, [r2, #16]
 800551a:	4b76      	ldr	r3, [pc, #472]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800551c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005524:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005528:	4972      	ldr	r1, [pc, #456]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	670b      	str	r3, [r1, #112]	; 0x70
 800552e:	e004      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005530:	7dfb      	ldrb	r3, [r7, #23]
 8005532:	75bb      	strb	r3, [r7, #22]
 8005534:	e001      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
 8005538:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d07d      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800554a:	2b28      	cmp	r3, #40	; 0x28
 800554c:	d866      	bhi.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800554e:	a201      	add	r2, pc, #4	; (adr r2, 8005554 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005554:	08005623 	.word	0x08005623
 8005558:	0800561d 	.word	0x0800561d
 800555c:	0800561d 	.word	0x0800561d
 8005560:	0800561d 	.word	0x0800561d
 8005564:	0800561d 	.word	0x0800561d
 8005568:	0800561d 	.word	0x0800561d
 800556c:	0800561d 	.word	0x0800561d
 8005570:	0800561d 	.word	0x0800561d
 8005574:	080055f9 	.word	0x080055f9
 8005578:	0800561d 	.word	0x0800561d
 800557c:	0800561d 	.word	0x0800561d
 8005580:	0800561d 	.word	0x0800561d
 8005584:	0800561d 	.word	0x0800561d
 8005588:	0800561d 	.word	0x0800561d
 800558c:	0800561d 	.word	0x0800561d
 8005590:	0800561d 	.word	0x0800561d
 8005594:	0800560b 	.word	0x0800560b
 8005598:	0800561d 	.word	0x0800561d
 800559c:	0800561d 	.word	0x0800561d
 80055a0:	0800561d 	.word	0x0800561d
 80055a4:	0800561d 	.word	0x0800561d
 80055a8:	0800561d 	.word	0x0800561d
 80055ac:	0800561d 	.word	0x0800561d
 80055b0:	0800561d 	.word	0x0800561d
 80055b4:	08005623 	.word	0x08005623
 80055b8:	0800561d 	.word	0x0800561d
 80055bc:	0800561d 	.word	0x0800561d
 80055c0:	0800561d 	.word	0x0800561d
 80055c4:	0800561d 	.word	0x0800561d
 80055c8:	0800561d 	.word	0x0800561d
 80055cc:	0800561d 	.word	0x0800561d
 80055d0:	0800561d 	.word	0x0800561d
 80055d4:	08005623 	.word	0x08005623
 80055d8:	0800561d 	.word	0x0800561d
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	0800561d 	.word	0x0800561d
 80055e4:	0800561d 	.word	0x0800561d
 80055e8:	0800561d 	.word	0x0800561d
 80055ec:	0800561d 	.word	0x0800561d
 80055f0:	0800561d 	.word	0x0800561d
 80055f4:	08005623 	.word	0x08005623
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	2101      	movs	r1, #1
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 fda6 	bl	8006150 <RCCEx_PLL2_Config>
 8005604:	4603      	mov	r3, r0
 8005606:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8005608:	e00c      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3324      	adds	r3, #36	; 0x24
 800560e:	2101      	movs	r1, #1
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fe4f 	bl	80062b4 <RCCEx_PLL3_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800561a:	e003      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	75fb      	strb	r3, [r7, #23]
      break;
 8005620:	e000      	b.n	8005624 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8005622:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005624:	7dfb      	ldrb	r3, [r7, #23]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d109      	bne.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800562a:	4b32      	ldr	r3, [pc, #200]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800562c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800562e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005636:	492f      	ldr	r1, [pc, #188]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005638:	4313      	orrs	r3, r2
 800563a:	654b      	str	r3, [r1, #84]	; 0x54
 800563c:	e001      	b.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800563e:	7dfb      	ldrb	r3, [r7, #23]
 8005640:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0302 	and.w	r3, r3, #2
 800564a:	2b00      	cmp	r3, #0
 800564c:	d037      	beq.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005652:	2b05      	cmp	r3, #5
 8005654:	d820      	bhi.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8005656:	a201      	add	r2, pc, #4	; (adr r2, 800565c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	0800569f 	.word	0x0800569f
 8005660:	08005675 	.word	0x08005675
 8005664:	08005687 	.word	0x08005687
 8005668:	0800569f 	.word	0x0800569f
 800566c:	0800569f 	.word	0x0800569f
 8005670:	0800569f 	.word	0x0800569f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	3304      	adds	r3, #4
 8005678:	2101      	movs	r1, #1
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fd68 	bl	8006150 <RCCEx_PLL2_Config>
 8005680:	4603      	mov	r3, r0
 8005682:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005684:	e00c      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	3324      	adds	r3, #36	; 0x24
 800568a:	2101      	movs	r1, #1
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fe11 	bl	80062b4 <RCCEx_PLL3_Config>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005696:	e003      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
      break;
 800569c:	e000      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800569e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a0:	7dfb      	ldrb	r3, [r7, #23]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d109      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056aa:	f023 0207 	bic.w	r2, r3, #7
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	4910      	ldr	r1, [pc, #64]	; (80056f4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80056b4:	4313      	orrs	r3, r2
 80056b6:	654b      	str	r3, [r1, #84]	; 0x54
 80056b8:	e001      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056ba:	7dfb      	ldrb	r3, [r7, #23]
 80056bc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0304 	and.w	r3, r3, #4
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d040      	beq.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d827      	bhi.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	0800572b 	.word	0x0800572b
 80056e0:	08005701 	.word	0x08005701
 80056e4:	08005713 	.word	0x08005713
 80056e8:	0800572b 	.word	0x0800572b
 80056ec:	0800572b 	.word	0x0800572b
 80056f0:	0800572b 	.word	0x0800572b
 80056f4:	58024400 	.word	0x58024400
 80056f8:	58024800 	.word	0x58024800
 80056fc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	3304      	adds	r3, #4
 8005704:	2101      	movs	r1, #1
 8005706:	4618      	mov	r0, r3
 8005708:	f000 fd22 	bl	8006150 <RCCEx_PLL2_Config>
 800570c:	4603      	mov	r3, r0
 800570e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005710:	e00c      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	3324      	adds	r3, #36	; 0x24
 8005716:	2101      	movs	r1, #1
 8005718:	4618      	mov	r0, r3
 800571a:	f000 fdcb 	bl	80062b4 <RCCEx_PLL3_Config>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8005722:	e003      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	75fb      	strb	r3, [r7, #23]
      break;
 8005728:	e000      	b.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800572a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800572c:	7dfb      	ldrb	r3, [r7, #23]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d10a      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005732:	4bb2      	ldr	r3, [pc, #712]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	f023 0207 	bic.w	r2, r3, #7
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005740:	49ae      	ldr	r1, [pc, #696]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	658b      	str	r3, [r1, #88]	; 0x58
 8005746:	e001      	b.n	800574c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0320 	and.w	r3, r3, #32
 8005754:	2b00      	cmp	r3, #0
 8005756:	d044      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800575e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005762:	d01b      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005768:	d805      	bhi.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800576a:	2b00      	cmp	r3, #0
 800576c:	d022      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800576e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005772:	d00a      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005774:	e01b      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x976>
 8005776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577a:	d01d      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800577c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005780:	d01c      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005782:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005786:	d01b      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x988>
 8005788:	e011      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3304      	adds	r3, #4
 800578e:	2100      	movs	r1, #0
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fcdd 	bl	8006150 <RCCEx_PLL2_Config>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800579a:	e012      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3324      	adds	r3, #36	; 0x24
 80057a0:	2102      	movs	r1, #2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f000 fd86 	bl	80062b4 <RCCEx_PLL3_Config>
 80057a8:	4603      	mov	r3, r0
 80057aa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80057ac:	e009      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	75fb      	strb	r3, [r7, #23]
      break;
 80057b2:	e006      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057b4:	bf00      	nop
 80057b6:	e004      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057b8:	bf00      	nop
 80057ba:	e002      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057bc:	bf00      	nop
 80057be:	e000      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80057c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c2:	7dfb      	ldrb	r3, [r7, #23]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10a      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80057c8:	4b8c      	ldr	r3, [pc, #560]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057cc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d6:	4989      	ldr	r1, [pc, #548]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	654b      	str	r3, [r1, #84]	; 0x54
 80057dc:	e001      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057de:	7dfb      	ldrb	r3, [r7, #23]
 80057e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d044      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057f8:	d01b      	beq.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80057fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057fe:	d805      	bhi.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8005800:	2b00      	cmp	r3, #0
 8005802:	d022      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800580a:	e01b      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800580c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005810:	d01d      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8005812:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8005816:	d01c      	beq.n	8005852 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8005818:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800581c:	d01b      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800581e:	e011      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fc92 	bl	8006150 <RCCEx_PLL2_Config>
 800582c:	4603      	mov	r3, r0
 800582e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005830:	e012      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3324      	adds	r3, #36	; 0x24
 8005836:	2102      	movs	r1, #2
 8005838:	4618      	mov	r0, r3
 800583a:	f000 fd3b 	bl	80062b4 <RCCEx_PLL3_Config>
 800583e:	4603      	mov	r3, r0
 8005840:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8005842:	e009      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	e006      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800584a:	bf00      	nop
 800584c:	e004      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800584e:	bf00      	nop
 8005850:	e002      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005852:	bf00      	nop
 8005854:	e000      	b.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005856:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005858:	7dfb      	ldrb	r3, [r7, #23]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d10a      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800585e:	4b67      	ldr	r3, [pc, #412]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005862:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800586c:	4963      	ldr	r1, [pc, #396]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800586e:	4313      	orrs	r3, r2
 8005870:	658b      	str	r3, [r1, #88]	; 0x58
 8005872:	e001      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7dfb      	ldrb	r3, [r7, #23]
 8005876:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d044      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800588a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800588e:	d01b      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005890:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005894:	d805      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8005896:	2b00      	cmp	r3, #0
 8005898:	d022      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800589a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800589e:	d00a      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80058a0:	e01b      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80058a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058a6:	d01d      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80058a8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80058ac:	d01c      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80058ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80058b2:	d01b      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80058b4:	e011      	b.n	80058da <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	3304      	adds	r3, #4
 80058ba:	2100      	movs	r1, #0
 80058bc:	4618      	mov	r0, r3
 80058be:	f000 fc47 	bl	8006150 <RCCEx_PLL2_Config>
 80058c2:	4603      	mov	r3, r0
 80058c4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058c6:	e012      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	2102      	movs	r1, #2
 80058ce:	4618      	mov	r0, r3
 80058d0:	f000 fcf0 	bl	80062b4 <RCCEx_PLL3_Config>
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80058d8:	e009      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	75fb      	strb	r3, [r7, #23]
      break;
 80058de:	e006      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80058e0:	bf00      	nop
 80058e2:	e004      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80058e4:	bf00      	nop
 80058e6:	e002      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80058ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80058f4:	4b41      	ldr	r3, [pc, #260]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005902:	493e      	ldr	r1, [pc, #248]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005904:	4313      	orrs	r3, r2
 8005906:	658b      	str	r3, [r1, #88]	; 0x58
 8005908:	e001      	b.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ I2C1/2/3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0308 	and.w	r3, r3, #8
 8005916:	2b00      	cmp	r3, #0
 8005918:	d01a      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005924:	d10a      	bne.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3324      	adds	r3, #36	; 0x24
 800592a:	2102      	movs	r1, #2
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fcc1 	bl	80062b4 <RCCEx_PLL3_Config>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800593c:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800593e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005940:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800594a:	492c      	ldr	r1, [pc, #176]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800594c:	4313      	orrs	r3, r2
 800594e:	654b      	str	r3, [r1, #84]	; 0x54

  }

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f003 0310 	and.w	r3, r3, #16
 8005958:	2b00      	cmp	r3, #0
 800595a:	d01a      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005962:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005966:	d10a      	bne.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	3324      	adds	r3, #36	; 0x24
 800596c:	2102      	movs	r1, #2
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fca0 	bl	80062b4 <RCCEx_PLL3_Config>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800597e:	4b1f      	ldr	r3, [pc, #124]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005982:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800598c:	491b      	ldr	r1, [pc, #108]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800598e:	4313      	orrs	r3, r2
 8005990:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d032      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059a8:	d00d      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80059aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059ae:	d016      	beq.n	80059de <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d111      	bne.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	3304      	adds	r3, #4
 80059b8:	2100      	movs	r1, #0
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 fbc8 	bl	8006150 <RCCEx_PLL2_Config>
 80059c0:	4603      	mov	r3, r0
 80059c2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059c4:	e00c      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	3324      	adds	r3, #36	; 0x24
 80059ca:	2102      	movs	r1, #2
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fc71 	bl	80062b4 <RCCEx_PLL3_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80059d6:	e003      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	75fb      	strb	r3, [r7, #23]
      break;
 80059dc:	e000      	b.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 80059de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059e0:	7dfb      	ldrb	r3, [r7, #23]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10c      	bne.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80059e6:	4b05      	ldr	r3, [pc, #20]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80059f4:	4901      	ldr	r1, [pc, #4]	; (80059fc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80059f6:	4313      	orrs	r3, r2
 80059f8:	658b      	str	r3, [r1, #88]	; 0x58
 80059fa:	e003      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80059fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a00:	7dfb      	ldrb	r3, [r7, #23]
 8005a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d02f      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a1a:	d00c      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8005a1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005a20:	d015      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8005a22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a26:	d10f      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a28:	4b71      	ldr	r3, [pc, #452]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4a70      	ldr	r2, [pc, #448]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a34:	e00c      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3324      	adds	r3, #36	; 0x24
 8005a3a:	2101      	movs	r1, #1
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f000 fc39 	bl	80062b4 <RCCEx_PLL3_Config>
 8005a42:	4603      	mov	r3, r0
 8005a44:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8005a46:	e003      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
      break;
 8005a4c:	e000      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a50:	7dfb      	ldrb	r3, [r7, #23]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10a      	bne.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a56:	4b66      	ldr	r3, [pc, #408]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a64:	4962      	ldr	r1, [pc, #392]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	654b      	str	r3, [r1, #84]	; 0x54
 8005a6a:	e001      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a6c:	7dfb      	ldrb	r3, [r7, #23]
 8005a6e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d029      	beq.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a88:	d007      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8005a8a:	e00f      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a8c:	4b58      	ldr	r3, [pc, #352]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	4a57      	ldr	r2, [pc, #348]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005a98:	e00b      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	2102      	movs	r1, #2
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f000 fb55 	bl	8006150 <RCCEx_PLL2_Config>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8005aaa:	e002      	b.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	75fb      	strb	r3, [r7, #23]
      break;
 8005ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ab2:	7dfb      	ldrb	r3, [r7, #23]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d109      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005aba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005abc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ac4:	494a      	ldr	r1, [pc, #296]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005aca:	e001      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005acc:	7dfb      	ldrb	r3, [r7, #23]
 8005ace:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00a      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3324      	adds	r3, #36	; 0x24
 8005ae0:	2102      	movs	r1, #2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f000 fbe6 	bl	80062b4 <RCCEx_PLL3_Config>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d02f      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b06:	d00c      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005b08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b0c:	d802      	bhi.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d011      	beq.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8005b12:	e00d      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d00f      	beq.n	8005b3a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8005b1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b1e:	d00e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8005b20:	e006      	b.n	8005b30 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b22:	4b33      	ldr	r3, [pc, #204]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a32      	ldr	r2, [pc, #200]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b2c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8005b2e:	e007      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	75fb      	strb	r3, [r7, #23]
      break;
 8005b34:	e004      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b36:	bf00      	nop
 8005b38:	e002      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b3a:	bf00      	nop
 8005b3c:	e000      	b.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8005b3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b46:	4b2a      	ldr	r3, [pc, #168]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b52:	4927      	ldr	r1, [pc, #156]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	654b      	str	r3, [r1, #84]	; 0x54
 8005b58:	e001      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5a:	7dfb      	ldrb	r3, [r7, #23]
 8005b5c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d008      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b6a:	4b21      	ldr	r3, [pc, #132]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	491e      	ldr	r1, [pc, #120]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	650b      	str	r3, [r1, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d008      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0xd62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b88:	4b19      	ldr	r3, [pc, #100]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b94:	4916      	ldr	r1, [pc, #88]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005b96:	4313      	orrs	r3, r2
 8005b98:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d00d      	beq.n	8005bc2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ba6:	4b12      	ldr	r3, [pc, #72]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	4a11      	ldr	r2, [pc, #68]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005bb0:	6113      	str	r3, [r2, #16]
 8005bb2:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bb4:	691a      	ldr	r2, [r3, #16]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005bbc:	490c      	ldr	r1, [pc, #48]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da08      	bge.n	8005bdc <HAL_RCCEx_PeriphCLKConfig+0xda4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005bca:	4b09      	ldr	r3, [pc, #36]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd6:	4906      	ldr	r1, [pc, #24]	; (8005bf0 <HAL_RCCEx_PeriphCLKConfig+0xdb8>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8005bdc:	7dbb      	ldrb	r3, [r7, #22]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d101      	bne.n	8005be6 <HAL_RCCEx_PeriphCLKConfig+0xdae>
  {
    return HAL_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	e000      	b.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
  }
  return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	58024400 	.word	0x58024400

08005bf4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005bf8:	f7ff f8c2 	bl	8004d80 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4601      	mov	r1, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	; (8005c18 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c00:	6a1b      	ldr	r3, [r3, #32]
 8005c02:	091b      	lsrs	r3, r3, #4
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4a04      	ldr	r2, [pc, #16]	; (8005c1c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c0a:	5cd3      	ldrb	r3, [r2, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	0800dafc 	.word	0x0800dafc

08005c20 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b089      	sub	sp, #36	; 0x24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c28:	4b9d      	ldr	r3, [pc, #628]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c2c:	f003 0303 	and.w	r3, r3, #3
 8005c30:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005c32:	4b9b      	ldr	r3, [pc, #620]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c36:	0b1b      	lsrs	r3, r3, #12
 8005c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005c3c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005c3e:	4b98      	ldr	r3, [pc, #608]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c42:	091b      	lsrs	r3, r3, #4
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005c4a:	4b95      	ldr	r3, [pc, #596]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4e:	08db      	lsrs	r3, r3, #3
 8005c50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	ee07 3a90 	vmov	s15, r3
 8005c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c62:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f000 810a 	beq.w	8005e82 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d05a      	beq.n	8005d2a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d302      	bcc.n	8005c7e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d078      	beq.n	8005d6e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005c7c:	e099      	b.n	8005db2 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c7e:	4b88      	ldr	r3, [pc, #544]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0320 	and.w	r3, r3, #32
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d02d      	beq.n	8005ce6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005c8a:	4b85      	ldr	r3, [pc, #532]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	08db      	lsrs	r3, r3, #3
 8005c90:	f003 0303 	and.w	r3, r3, #3
 8005c94:	4a83      	ldr	r2, [pc, #524]	; (8005ea4 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	ee07 3a90 	vmov	s15, r3
 8005ca2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	ee07 3a90 	vmov	s15, r3
 8005cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cb4:	4b7a      	ldr	r3, [pc, #488]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbc:	ee07 3a90 	vmov	s15, r3
 8005cc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005cc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005cc8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ccc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005cd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005cd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005cd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ce0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ce4:	e087      	b.n	8005df6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	ee07 3a90 	vmov	s15, r3
 8005cec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cf0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005eac <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005cf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005cf8:	4b69      	ldr	r3, [pc, #420]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d00:	ee07 3a90 	vmov	s15, r3
 8005d04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d08:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d0c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d24:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d28:	e065      	b.n	8005df6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	ee07 3a90 	vmov	s15, r3
 8005d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d34:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005d38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d3c:	4b58      	ldr	r3, [pc, #352]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d44:	ee07 3a90 	vmov	s15, r3
 8005d48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d4c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d50:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d68:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d6c:	e043      	b.n	8005df6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	ee07 3a90 	vmov	s15, r3
 8005d74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d78:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005eb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005d7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d80:	4b47      	ldr	r3, [pc, #284]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d88:	ee07 3a90 	vmov	s15, r3
 8005d8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d90:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d94:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005d98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005da0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005da4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005db0:	e021      	b.n	8005df6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	ee07 3a90 	vmov	s15, r3
 8005db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dbc:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005eb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005dc0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dc4:	4b36      	ldr	r3, [pc, #216]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dcc:	ee07 3a90 	vmov	s15, r3
 8005dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dd8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ddc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005de0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005de4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005de8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005df0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005df4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005df6:	4b2a      	ldr	r3, [pc, #168]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfa:	0a5b      	lsrs	r3, r3, #9
 8005dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e00:	ee07 3a90 	vmov	s15, r3
 8005e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e08:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e1c:	ee17 2a90 	vmov	r2, s15
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005e24:	4b1e      	ldr	r3, [pc, #120]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e28:	0c1b      	lsrs	r3, r3, #16
 8005e2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e2e:	ee07 3a90 	vmov	s15, r3
 8005e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e4a:	ee17 2a90 	vmov	r2, s15
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005e52:	4b13      	ldr	r3, [pc, #76]	; (8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	0e1b      	lsrs	r3, r3, #24
 8005e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5c:	ee07 3a90 	vmov	s15, r3
 8005e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 2a90 	vmov	r2, s15
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005e80:	e008      	b.n	8005e94 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	609a      	str	r2, [r3, #8]
}
 8005e94:	bf00      	nop
 8005e96:	3724      	adds	r7, #36	; 0x24
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	03d09000 	.word	0x03d09000
 8005ea8:	46000000 	.word	0x46000000
 8005eac:	4c742400 	.word	0x4c742400
 8005eb0:	4a742400 	.word	0x4a742400
 8005eb4:	4af42400 	.word	0x4af42400

08005eb8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b089      	sub	sp, #36	; 0x24
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ec0:	4b9d      	ldr	r3, [pc, #628]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec4:	f003 0303 	and.w	r3, r3, #3
 8005ec8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005eca:	4b9b      	ldr	r3, [pc, #620]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	0d1b      	lsrs	r3, r3, #20
 8005ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005ed6:	4b98      	ldr	r3, [pc, #608]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eda:	0a1b      	lsrs	r3, r3, #8
 8005edc:	f003 0301 	and.w	r3, r3, #1
 8005ee0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005ee2:	4b95      	ldr	r3, [pc, #596]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ee6:	08db      	lsrs	r3, r3, #3
 8005ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005eec:	693a      	ldr	r2, [r7, #16]
 8005eee:	fb02 f303 	mul.w	r3, r2, r3
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 810a 	beq.w	800611a <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d05a      	beq.n	8005fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d302      	bcc.n	8005f16 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d078      	beq.n	8006006 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005f14:	e099      	b.n	800604a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f16:	4b88      	ldr	r3, [pc, #544]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d02d      	beq.n	8005f7e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f22:	4b85      	ldr	r3, [pc, #532]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	08db      	lsrs	r3, r3, #3
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	4a83      	ldr	r2, [pc, #524]	; (800613c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f32:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	ee07 3a90 	vmov	s15, r3
 8005f3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	ee07 3a90 	vmov	s15, r3
 8005f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4c:	4b7a      	ldr	r3, [pc, #488]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f54:	ee07 3a90 	vmov	s15, r3
 8005f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f60:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f78:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005f7c:	e087      	b.n	800608e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	ee07 3a90 	vmov	s15, r3
 8005f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f88:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006144 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f90:	4b69      	ldr	r3, [pc, #420]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f98:	ee07 3a90 	vmov	s15, r3
 8005f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fa4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005fb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005fc0:	e065      	b.n	800608e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fcc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd4:	4b58      	ldr	r3, [pc, #352]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fdc:	ee07 3a90 	vmov	s15, r3
 8005fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006000:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006004:	e043      	b.n	800608e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	ee07 3a90 	vmov	s15, r3
 800600c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006010:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800614c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8006014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006018:	4b47      	ldr	r3, [pc, #284]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800601a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006020:	ee07 3a90 	vmov	s15, r3
 8006024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006028:	ed97 6a03 	vldr	s12, [r7, #12]
 800602c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800603c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006044:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006048:	e021      	b.n	800608e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8006058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605c:	4b36      	ldr	r3, [pc, #216]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800605e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006064:	ee07 3a90 	vmov	s15, r3
 8006068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006070:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006140 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8006074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006084:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006088:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800608c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800608e:	4b2a      	ldr	r3, [pc, #168]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006092:	0a5b      	lsrs	r3, r3, #9
 8006094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80060ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060b4:	ee17 2a90 	vmov	r2, s15
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 80060bc:	4b1e      	ldr	r3, [pc, #120]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060c6:	ee07 3a90 	vmov	s15, r3
 80060ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80060d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80060da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060e2:	ee17 2a90 	vmov	r2, s15
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80060ea:	4b13      	ldr	r3, [pc, #76]	; (8006138 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	0e1b      	lsrs	r3, r3, #24
 80060f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006100:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006104:	edd7 6a07 	vldr	s13, [r7, #28]
 8006108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800610c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006110:	ee17 2a90 	vmov	r2, s15
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006118:	e008      	b.n	800612c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	609a      	str	r2, [r3, #8]
}
 800612c:	bf00      	nop
 800612e:	3724      	adds	r7, #36	; 0x24
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr
 8006138:	58024400 	.word	0x58024400
 800613c:	03d09000 	.word	0x03d09000
 8006140:	46000000 	.word	0x46000000
 8006144:	4c742400 	.word	0x4c742400
 8006148:	4a742400 	.word	0x4a742400
 800614c:	4af42400 	.word	0x4af42400

08006150 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800615a:	2300      	movs	r3, #0
 800615c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800615e:	4b53      	ldr	r3, [pc, #332]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	f003 0303 	and.w	r3, r3, #3
 8006166:	2b03      	cmp	r3, #3
 8006168:	d101      	bne.n	800616e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e099      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800616e:	4b4f      	ldr	r3, [pc, #316]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a4e      	ldr	r2, [pc, #312]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006174:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800617a:	f7fb ff53 	bl	8002024 <HAL_GetTick>
 800617e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006180:	e008      	b.n	8006194 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006182:	f7fb ff4f 	bl	8002024 <HAL_GetTick>
 8006186:	4602      	mov	r2, r0
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	1ad3      	subs	r3, r2, r3
 800618c:	2b02      	cmp	r3, #2
 800618e:	d901      	bls.n	8006194 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006190:	2303      	movs	r3, #3
 8006192:	e086      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006194:	4b45      	ldr	r3, [pc, #276]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f0      	bne.n	8006182 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80061a0:	4b42      	ldr	r3, [pc, #264]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	031b      	lsls	r3, r3, #12
 80061ae:	493f      	ldr	r1, [pc, #252]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	628b      	str	r3, [r1, #40]	; 0x28
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	025b      	lsls	r3, r3, #9
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	3b01      	subs	r3, #1
 80061d0:	041b      	lsls	r3, r3, #16
 80061d2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80061d6:	431a      	orrs	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	691b      	ldr	r3, [r3, #16]
 80061dc:	3b01      	subs	r3, #1
 80061de:	061b      	lsls	r3, r3, #24
 80061e0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80061e4:	4931      	ldr	r1, [pc, #196]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061e6:	4313      	orrs	r3, r2
 80061e8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80061ea:	4b30      	ldr	r3, [pc, #192]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	492d      	ldr	r1, [pc, #180]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80061fc:	4b2b      	ldr	r3, [pc, #172]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	f023 0220 	bic.w	r2, r3, #32
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	4928      	ldr	r1, [pc, #160]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 800620a:	4313      	orrs	r3, r2
 800620c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006212:	4a26      	ldr	r2, [pc, #152]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006214:	f023 0310 	bic.w	r3, r3, #16
 8006218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800621a:	4b24      	ldr	r3, [pc, #144]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 800621c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800621e:	4b24      	ldr	r3, [pc, #144]	; (80062b0 <RCCEx_PLL2_Config+0x160>)
 8006220:	4013      	ands	r3, r2
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	69d2      	ldr	r2, [r2, #28]
 8006226:	00d2      	lsls	r2, r2, #3
 8006228:	4920      	ldr	r1, [pc, #128]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 800622a:	4313      	orrs	r3, r2
 800622c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800622e:	4b1f      	ldr	r3, [pc, #124]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006234:	f043 0310 	orr.w	r3, r3, #16
 8006238:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d106      	bne.n	800624e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006240:	4b1a      	ldr	r3, [pc, #104]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006244:	4a19      	ldr	r2, [pc, #100]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006246:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800624a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800624c:	e00f      	b.n	800626e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d106      	bne.n	8006262 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006254:	4b15      	ldr	r3, [pc, #84]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	4a14      	ldr	r2, [pc, #80]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 800625a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800625e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006260:	e005      	b.n	800626e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006262:	4b12      	ldr	r3, [pc, #72]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006266:	4a11      	ldr	r2, [pc, #68]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006268:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800626c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800626e:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a0e      	ldr	r2, [pc, #56]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006278:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800627a:	f7fb fed3 	bl	8002024 <HAL_GetTick>
 800627e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006280:	e008      	b.n	8006294 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006282:	f7fb fecf 	bl	8002024 <HAL_GetTick>
 8006286:	4602      	mov	r2, r0
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	2b02      	cmp	r3, #2
 800628e:	d901      	bls.n	8006294 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e006      	b.n	80062a2 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006294:	4b05      	ldr	r3, [pc, #20]	; (80062ac <RCCEx_PLL2_Config+0x15c>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0f0      	beq.n	8006282 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	58024400 	.word	0x58024400
 80062b0:	ffff0007 	.word	0xffff0007

080062b4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062be:	2300      	movs	r3, #0
 80062c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80062c2:	4b53      	ldr	r3, [pc, #332]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f003 0303 	and.w	r3, r3, #3
 80062ca:	2b03      	cmp	r3, #3
 80062cc:	d101      	bne.n	80062d2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e099      	b.n	8006406 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80062d2:	4b4f      	ldr	r3, [pc, #316]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a4e      	ldr	r2, [pc, #312]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062de:	f7fb fea1 	bl	8002024 <HAL_GetTick>
 80062e2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062e4:	e008      	b.n	80062f8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80062e6:	f7fb fe9d 	bl	8002024 <HAL_GetTick>
 80062ea:	4602      	mov	r2, r0
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d901      	bls.n	80062f8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e086      	b.n	8006406 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80062f8:	4b45      	ldr	r3, [pc, #276]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1f0      	bne.n	80062e6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006304:	4b42      	ldr	r3, [pc, #264]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006308:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	051b      	lsls	r3, r3, #20
 8006312:	493f      	ldr	r1, [pc, #252]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006314:	4313      	orrs	r3, r2
 8006316:	628b      	str	r3, [r1, #40]	; 0x28
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	3b01      	subs	r3, #1
 8006328:	025b      	lsls	r3, r3, #9
 800632a:	b29b      	uxth	r3, r3
 800632c:	431a      	orrs	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	3b01      	subs	r3, #1
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800633a:	431a      	orrs	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	3b01      	subs	r3, #1
 8006342:	061b      	lsls	r3, r3, #24
 8006344:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006348:	4931      	ldr	r1, [pc, #196]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 800634a:	4313      	orrs	r3, r2
 800634c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800634e:	4b30      	ldr	r3, [pc, #192]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006352:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	492d      	ldr	r1, [pc, #180]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 800635c:	4313      	orrs	r3, r2
 800635e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006360:	4b2b      	ldr	r3, [pc, #172]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006364:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	4928      	ldr	r1, [pc, #160]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 800636e:	4313      	orrs	r3, r2
 8006370:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006372:	4b27      	ldr	r3, [pc, #156]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006376:	4a26      	ldr	r2, [pc, #152]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800637c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800637e:	4b24      	ldr	r3, [pc, #144]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	4b24      	ldr	r3, [pc, #144]	; (8006414 <RCCEx_PLL3_Config+0x160>)
 8006384:	4013      	ands	r3, r2
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	69d2      	ldr	r2, [r2, #28]
 800638a:	00d2      	lsls	r2, r2, #3
 800638c:	4920      	ldr	r1, [pc, #128]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 800638e:	4313      	orrs	r3, r2
 8006390:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006392:	4b1f      	ldr	r3, [pc, #124]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	4a1e      	ldr	r2, [pc, #120]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 8006398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800639c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	4a19      	ldr	r2, [pc, #100]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80063ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063b0:	e00f      	b.n	80063d2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d106      	bne.n	80063c6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80063b8:	4b15      	ldr	r3, [pc, #84]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063bc:	4a14      	ldr	r2, [pc, #80]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80063c4:	e005      	b.n	80063d2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ca:	4a11      	ldr	r2, [pc, #68]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80063d2:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a0e      	ldr	r2, [pc, #56]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063de:	f7fb fe21 	bl	8002024 <HAL_GetTick>
 80063e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063e4:	e008      	b.n	80063f8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80063e6:	f7fb fe1d 	bl	8002024 <HAL_GetTick>
 80063ea:	4602      	mov	r2, r0
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	1ad3      	subs	r3, r2, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d901      	bls.n	80063f8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80063f4:	2303      	movs	r3, #3
 80063f6:	e006      	b.n	8006406 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80063f8:	4b05      	ldr	r3, [pc, #20]	; (8006410 <RCCEx_PLL3_Config+0x15c>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006400:	2b00      	cmp	r3, #0
 8006402:	d0f0      	beq.n	80063e6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006404:	7bfb      	ldrb	r3, [r7, #15]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	58024400 	.word	0x58024400
 8006414:	ffff0007 	.word	0xffff0007

08006418 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b082      	sub	sp, #8
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d101      	bne.n	800642a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	e01d      	b.n	8006466 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f7fb fa9c 	bl	800197c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3304      	adds	r3, #4
 8006454:	4619      	mov	r1, r3
 8006456:	4610      	mov	r0, r2
 8006458:	f000 faec 	bl	8006a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}

0800646e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800646e:	b580      	push	{r7, lr}
 8006470:	b082      	sub	sp, #8
 8006472:	af00      	add	r7, sp, #0
 8006474:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e01d      	b.n	80064bc <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006486:	b2db      	uxtb	r3, r3
 8006488:	2b00      	cmp	r3, #0
 800648a:	d106      	bne.n	800649a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f7fb fa0b 	bl	80018b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	4619      	mov	r1, r3
 80064ac:	4610      	mov	r0, r2
 80064ae:	f000 fac1 	bl	8006a34 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2201      	movs	r2, #1
 80064d4:	6839      	ldr	r1, [r7, #0]
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fe14 	bl	8007104 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1e      	ldr	r2, [pc, #120]	; (800655c <HAL_TIM_PWM_Start+0x98>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d013      	beq.n	800650e <HAL_TIM_PWM_Start+0x4a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1d      	ldr	r2, [pc, #116]	; (8006560 <HAL_TIM_PWM_Start+0x9c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d00e      	beq.n	800650e <HAL_TIM_PWM_Start+0x4a>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a1b      	ldr	r2, [pc, #108]	; (8006564 <HAL_TIM_PWM_Start+0xa0>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d009      	beq.n	800650e <HAL_TIM_PWM_Start+0x4a>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a1a      	ldr	r2, [pc, #104]	; (8006568 <HAL_TIM_PWM_Start+0xa4>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d004      	beq.n	800650e <HAL_TIM_PWM_Start+0x4a>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_TIM_PWM_Start+0xa8>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d101      	bne.n	8006512 <HAL_TIM_PWM_Start+0x4e>
 800650e:	2301      	movs	r3, #1
 8006510:	e000      	b.n	8006514 <HAL_TIM_PWM_Start+0x50>
 8006512:	2300      	movs	r3, #0
 8006514:	2b00      	cmp	r3, #0
 8006516:	d007      	beq.n	8006528 <HAL_TIM_PWM_Start+0x64>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006526:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	4b10      	ldr	r3, [pc, #64]	; (8006570 <HAL_TIM_PWM_Start+0xac>)
 8006530:	4013      	ands	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2b06      	cmp	r3, #6
 8006538:	d00b      	beq.n	8006552 <HAL_TIM_PWM_Start+0x8e>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006540:	d007      	beq.n	8006552 <HAL_TIM_PWM_Start+0x8e>
  {
    __HAL_TIM_ENABLE(htim);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0201 	orr.w	r2, r2, #1
 8006550:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3710      	adds	r7, #16
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}
 800655c:	40010000 	.word	0x40010000
 8006560:	40010400 	.word	0x40010400
 8006564:	40014000 	.word	0x40014000
 8006568:	40014400 	.word	0x40014400
 800656c:	40014800 	.word	0x40014800
 8006570:	00010007 	.word	0x00010007

08006574 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0302 	and.w	r3, r3, #2
 8006586:	2b02      	cmp	r3, #2
 8006588:	d122      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b02      	cmp	r3, #2
 8006596:	d11b      	bne.n	80065d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0202 	mvn.w	r2, #2
 80065a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	699b      	ldr	r3, [r3, #24]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d003      	beq.n	80065be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa1e 	bl	80069f8 <HAL_TIM_IC_CaptureCallback>
 80065bc:	e005      	b.n	80065ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fa10 	bl	80069e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fa21 	bl	8006a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691b      	ldr	r3, [r3, #16]
 80065d6:	f003 0304 	and.w	r3, r3, #4
 80065da:	2b04      	cmp	r3, #4
 80065dc:	d122      	bne.n	8006624 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b04      	cmp	r3, #4
 80065ea:	d11b      	bne.n	8006624 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f06f 0204 	mvn.w	r2, #4
 80065f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f9f4 	bl	80069f8 <HAL_TIM_IC_CaptureCallback>
 8006610:	e005      	b.n	800661e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 f9e6 	bl	80069e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f9f7 	bl	8006a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	691b      	ldr	r3, [r3, #16]
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b08      	cmp	r3, #8
 8006630:	d122      	bne.n	8006678 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d11b      	bne.n	8006678 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f06f 0208 	mvn.w	r2, #8
 8006648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2204      	movs	r2, #4
 800664e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f003 0303 	and.w	r3, r3, #3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d003      	beq.n	8006666 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9ca 	bl	80069f8 <HAL_TIM_IC_CaptureCallback>
 8006664:	e005      	b.n	8006672 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f9bc 	bl	80069e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9cd 	bl	8006a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	f003 0310 	and.w	r3, r3, #16
 8006682:	2b10      	cmp	r3, #16
 8006684:	d122      	bne.n	80066cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	f003 0310 	and.w	r3, r3, #16
 8006690:	2b10      	cmp	r3, #16
 8006692:	d11b      	bne.n	80066cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0210 	mvn.w	r2, #16
 800669c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2208      	movs	r2, #8
 80066a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d003      	beq.n	80066ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f000 f9a0 	bl	80069f8 <HAL_TIM_IC_CaptureCallback>
 80066b8:	e005      	b.n	80066c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f000 f992 	bl	80069e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f9a3 	bl	8006a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d10e      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	f003 0301 	and.w	r3, r3, #1
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d107      	bne.n	80066f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0201 	mvn.w	r2, #1
 80066f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f7fa fa00 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006702:	2b80      	cmp	r3, #128	; 0x80
 8006704:	d10e      	bne.n	8006724 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	68db      	ldr	r3, [r3, #12]
 800670c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006710:	2b80      	cmp	r3, #128	; 0x80
 8006712:	d107      	bne.n	8006724 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800671c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fe26 	bl	8007370 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800672e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006732:	d10e      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68db      	ldr	r3, [r3, #12]
 800673a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800673e:	2b80      	cmp	r3, #128	; 0x80
 8006740:	d107      	bne.n	8006752 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800674a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fe19 	bl	8007384 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d10e      	bne.n	800677e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68db      	ldr	r3, [r3, #12]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b40      	cmp	r3, #64	; 0x40
 800676c:	d107      	bne.n	800677e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006776:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 f951 	bl	8006a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	f003 0320 	and.w	r3, r3, #32
 8006788:	2b20      	cmp	r3, #32
 800678a:	d10e      	bne.n	80067aa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f003 0320 	and.w	r3, r3, #32
 8006796:	2b20      	cmp	r3, #32
 8006798:	d107      	bne.n	80067aa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f06f 0220 	mvn.w	r2, #32
 80067a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f000 fdd9 	bl	800735c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80067aa:	bf00      	nop
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
	...

080067b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067c6:	2b01      	cmp	r3, #1
 80067c8:	d101      	bne.n	80067ce <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067ca:	2302      	movs	r3, #2
 80067cc:	e105      	b.n	80069da <HAL_TIM_PWM_ConfigChannel+0x226>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	2201      	movs	r2, #1
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2202      	movs	r2, #2
 80067da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b14      	cmp	r3, #20
 80067e2:	f200 80f0 	bhi.w	80069c6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80067e6:	a201      	add	r2, pc, #4	; (adr r2, 80067ec <HAL_TIM_PWM_ConfigChannel+0x38>)
 80067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ec:	08006841 	.word	0x08006841
 80067f0:	080069c7 	.word	0x080069c7
 80067f4:	080069c7 	.word	0x080069c7
 80067f8:	080069c7 	.word	0x080069c7
 80067fc:	08006881 	.word	0x08006881
 8006800:	080069c7 	.word	0x080069c7
 8006804:	080069c7 	.word	0x080069c7
 8006808:	080069c7 	.word	0x080069c7
 800680c:	080068c3 	.word	0x080068c3
 8006810:	080069c7 	.word	0x080069c7
 8006814:	080069c7 	.word	0x080069c7
 8006818:	080069c7 	.word	0x080069c7
 800681c:	08006903 	.word	0x08006903
 8006820:	080069c7 	.word	0x080069c7
 8006824:	080069c7 	.word	0x080069c7
 8006828:	080069c7 	.word	0x080069c7
 800682c:	08006945 	.word	0x08006945
 8006830:	080069c7 	.word	0x080069c7
 8006834:	080069c7 	.word	0x080069c7
 8006838:	080069c7 	.word	0x080069c7
 800683c:	08006985 	.word	0x08006985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68b9      	ldr	r1, [r7, #8]
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f98e 	bl	8006b68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f042 0208 	orr.w	r2, r2, #8
 800685a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0204 	bic.w	r2, r2, #4
 800686a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	6999      	ldr	r1, [r3, #24]
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691a      	ldr	r2, [r3, #16]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	430a      	orrs	r2, r1
 800687c:	619a      	str	r2, [r3, #24]
      break;
 800687e:	e0a3      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	68b9      	ldr	r1, [r7, #8]
 8006886:	4618      	mov	r0, r3
 8006888:	f000 f9fe 	bl	8006c88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	699a      	ldr	r2, [r3, #24]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800689a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	699a      	ldr	r2, [r3, #24]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	6999      	ldr	r1, [r3, #24]
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	021a      	lsls	r2, r3, #8
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	430a      	orrs	r2, r1
 80068be:	619a      	str	r2, [r3, #24]
      break;
 80068c0:	e082      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	4618      	mov	r0, r3
 80068ca:	f000 fa67 	bl	8006d9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	69da      	ldr	r2, [r3, #28]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0208 	orr.w	r2, r2, #8
 80068dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69da      	ldr	r2, [r3, #28]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f022 0204 	bic.w	r2, r2, #4
 80068ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69d9      	ldr	r1, [r3, #28]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	61da      	str	r2, [r3, #28]
      break;
 8006900:	e062      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	4618      	mov	r0, r3
 800690a:	f000 facd 	bl	8006ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	69da      	ldr	r2, [r3, #28]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800691c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	69da      	ldr	r2, [r3, #28]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800692c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	69d9      	ldr	r1, [r3, #28]
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	021a      	lsls	r2, r3, #8
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	430a      	orrs	r2, r1
 8006940:	61da      	str	r2, [r3, #28]
      break;
 8006942:	e041      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68b9      	ldr	r1, [r7, #8]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 fb14 	bl	8006f78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f042 0208 	orr.w	r2, r2, #8
 800695e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f022 0204 	bic.w	r2, r2, #4
 800696e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	691a      	ldr	r2, [r3, #16]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	430a      	orrs	r2, r1
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006982:	e021      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68b9      	ldr	r1, [r7, #8]
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fb56 	bl	800703c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800699e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	021a      	lsls	r2, r3, #8
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	430a      	orrs	r2, r1
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069c4:	e000      	b.n	80069c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80069c6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3710      	adds	r7, #16
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop

080069e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a00:	bf00      	nop
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr

08006a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b083      	sub	sp, #12
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a40      	ldr	r2, [pc, #256]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a52:	d00f      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a3d      	ldr	r2, [pc, #244]	; (8006b4c <TIM_Base_SetConfig+0x118>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00b      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a3c      	ldr	r2, [pc, #240]	; (8006b50 <TIM_Base_SetConfig+0x11c>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a3b      	ldr	r2, [pc, #236]	; (8006b54 <TIM_Base_SetConfig+0x120>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_Base_SetConfig+0x40>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a3a      	ldr	r2, [pc, #232]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d108      	bne.n	8006a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a2f      	ldr	r2, [pc, #188]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d01f      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a94:	d01b      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	4a2c      	ldr	r2, [pc, #176]	; (8006b4c <TIM_Base_SetConfig+0x118>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d017      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	4a2b      	ldr	r2, [pc, #172]	; (8006b50 <TIM_Base_SetConfig+0x11c>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d013      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a2a      	ldr	r2, [pc, #168]	; (8006b54 <TIM_Base_SetConfig+0x120>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d00f      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4a29      	ldr	r2, [pc, #164]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d00b      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	4a28      	ldr	r2, [pc, #160]	; (8006b5c <TIM_Base_SetConfig+0x128>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d007      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d003      	beq.n	8006ace <TIM_Base_SetConfig+0x9a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <TIM_Base_SetConfig+0x130>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d108      	bne.n	8006ae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	68fa      	ldr	r2, [r7, #12]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	689a      	ldr	r2, [r3, #8]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a10      	ldr	r2, [pc, #64]	; (8006b48 <TIM_Base_SetConfig+0x114>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a12      	ldr	r2, [pc, #72]	; (8006b58 <TIM_Base_SetConfig+0x124>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <TIM_Base_SetConfig+0x128>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a10      	ldr	r2, [pc, #64]	; (8006b60 <TIM_Base_SetConfig+0x12c>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_Base_SetConfig+0xf8>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a0f      	ldr	r2, [pc, #60]	; (8006b64 <TIM_Base_SetConfig+0x130>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d103      	bne.n	8006b34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	615a      	str	r2, [r3, #20]
}
 8006b3a:	bf00      	nop
 8006b3c:	3714      	adds	r7, #20
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	40010000 	.word	0x40010000
 8006b4c:	40000400 	.word	0x40000400
 8006b50:	40000800 	.word	0x40000800
 8006b54:	40000c00 	.word	0x40000c00
 8006b58:	40010400 	.word	0x40010400
 8006b5c:	40014000 	.word	0x40014000
 8006b60:	40014400 	.word	0x40014400
 8006b64:	40014800 	.word	0x40014800

08006b68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b68:	b480      	push	{r7}
 8006b6a:	b087      	sub	sp, #28
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	f023 0201 	bic.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	699b      	ldr	r3, [r3, #24]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	4b37      	ldr	r3, [pc, #220]	; (8006c70 <TIM_OC1_SetConfig+0x108>)
 8006b94:	4013      	ands	r3, r2
 8006b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0303 	bic.w	r3, r3, #3
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	f023 0302 	bic.w	r3, r3, #2
 8006bb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4a2d      	ldr	r2, [pc, #180]	; (8006c74 <TIM_OC1_SetConfig+0x10c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d00f      	beq.n	8006be4 <TIM_OC1_SetConfig+0x7c>
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	4a2c      	ldr	r2, [pc, #176]	; (8006c78 <TIM_OC1_SetConfig+0x110>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d00b      	beq.n	8006be4 <TIM_OC1_SetConfig+0x7c>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4a2b      	ldr	r2, [pc, #172]	; (8006c7c <TIM_OC1_SetConfig+0x114>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d007      	beq.n	8006be4 <TIM_OC1_SetConfig+0x7c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	4a2a      	ldr	r2, [pc, #168]	; (8006c80 <TIM_OC1_SetConfig+0x118>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d003      	beq.n	8006be4 <TIM_OC1_SetConfig+0x7c>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a29      	ldr	r2, [pc, #164]	; (8006c84 <TIM_OC1_SetConfig+0x11c>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d10c      	bne.n	8006bfe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	f023 0308 	bic.w	r3, r3, #8
 8006bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	68db      	ldr	r3, [r3, #12]
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f023 0304 	bic.w	r3, r3, #4
 8006bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a1c      	ldr	r2, [pc, #112]	; (8006c74 <TIM_OC1_SetConfig+0x10c>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00f      	beq.n	8006c26 <TIM_OC1_SetConfig+0xbe>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <TIM_OC1_SetConfig+0x110>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <TIM_OC1_SetConfig+0xbe>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <TIM_OC1_SetConfig+0x114>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <TIM_OC1_SetConfig+0xbe>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a19      	ldr	r2, [pc, #100]	; (8006c80 <TIM_OC1_SetConfig+0x118>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_OC1_SetConfig+0xbe>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a18      	ldr	r2, [pc, #96]	; (8006c84 <TIM_OC1_SetConfig+0x11c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d111      	bne.n	8006c4a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	693a      	ldr	r2, [r7, #16]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	621a      	str	r2, [r3, #32]
}
 8006c64:	bf00      	nop
 8006c66:	371c      	adds	r7, #28
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	fffeff8f 	.word	0xfffeff8f
 8006c74:	40010000 	.word	0x40010000
 8006c78:	40010400 	.word	0x40010400
 8006c7c:	40014000 	.word	0x40014000
 8006c80:	40014400 	.word	0x40014400
 8006c84:	40014800 	.word	0x40014800

08006c88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a1b      	ldr	r3, [r3, #32]
 8006c96:	f023 0210 	bic.w	r2, r3, #16
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4b34      	ldr	r3, [pc, #208]	; (8006d84 <TIM_OC2_SetConfig+0xfc>)
 8006cb4:	4013      	ands	r3, r2
 8006cb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	021b      	lsls	r3, r3, #8
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0320 	bic.w	r3, r3, #32
 8006cd2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	689b      	ldr	r3, [r3, #8]
 8006cd8:	011b      	lsls	r3, r3, #4
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <TIM_OC2_SetConfig+0x100>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d003      	beq.n	8006cf0 <TIM_OC2_SetConfig+0x68>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <TIM_OC2_SetConfig+0x104>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d10d      	bne.n	8006d0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	011b      	lsls	r3, r3, #4
 8006cfe:	697a      	ldr	r2, [r7, #20]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d0a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	; (8006d88 <TIM_OC2_SetConfig+0x100>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00f      	beq.n	8006d34 <TIM_OC2_SetConfig+0xac>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a1d      	ldr	r2, [pc, #116]	; (8006d8c <TIM_OC2_SetConfig+0x104>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <TIM_OC2_SetConfig+0xac>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a1c      	ldr	r2, [pc, #112]	; (8006d90 <TIM_OC2_SetConfig+0x108>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d007      	beq.n	8006d34 <TIM_OC2_SetConfig+0xac>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a1b      	ldr	r2, [pc, #108]	; (8006d94 <TIM_OC2_SetConfig+0x10c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC2_SetConfig+0xac>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a1a      	ldr	r2, [pc, #104]	; (8006d98 <TIM_OC2_SetConfig+0x110>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d113      	bne.n	8006d5c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	695b      	ldr	r3, [r3, #20]
 8006d48:	009b      	lsls	r3, r3, #2
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	009b      	lsls	r3, r3, #2
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	621a      	str	r2, [r3, #32]
}
 8006d76:	bf00      	nop
 8006d78:	371c      	adds	r7, #28
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	feff8fff 	.word	0xfeff8fff
 8006d88:	40010000 	.word	0x40010000
 8006d8c:	40010400 	.word	0x40010400
 8006d90:	40014000 	.word	0x40014000
 8006d94:	40014400 	.word	0x40014400
 8006d98:	40014800 	.word	0x40014800

08006d9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6a1b      	ldr	r3, [r3, #32]
 8006daa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6a1b      	ldr	r3, [r3, #32]
 8006db6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	69db      	ldr	r3, [r3, #28]
 8006dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	021b      	lsls	r3, r3, #8
 8006dec:	697a      	ldr	r2, [r7, #20]
 8006dee:	4313      	orrs	r3, r2
 8006df0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	4a27      	ldr	r2, [pc, #156]	; (8006e94 <TIM_OC3_SetConfig+0xf8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d003      	beq.n	8006e02 <TIM_OC3_SetConfig+0x66>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a26      	ldr	r2, [pc, #152]	; (8006e98 <TIM_OC3_SetConfig+0xfc>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d10d      	bne.n	8006e1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a1c      	ldr	r2, [pc, #112]	; (8006e94 <TIM_OC3_SetConfig+0xf8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d00f      	beq.n	8006e46 <TIM_OC3_SetConfig+0xaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <TIM_OC3_SetConfig+0xfc>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d00b      	beq.n	8006e46 <TIM_OC3_SetConfig+0xaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <TIM_OC3_SetConfig+0x100>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d007      	beq.n	8006e46 <TIM_OC3_SetConfig+0xaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a19      	ldr	r2, [pc, #100]	; (8006ea0 <TIM_OC3_SetConfig+0x104>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d003      	beq.n	8006e46 <TIM_OC3_SetConfig+0xaa>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a18      	ldr	r2, [pc, #96]	; (8006ea4 <TIM_OC3_SetConfig+0x108>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d113      	bne.n	8006e6e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	011b      	lsls	r3, r3, #4
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	011b      	lsls	r3, r3, #4
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4313      	orrs	r3, r2
 8006e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	693a      	ldr	r2, [r7, #16]
 8006e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68fa      	ldr	r2, [r7, #12]
 8006e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	685a      	ldr	r2, [r3, #4]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	621a      	str	r2, [r3, #32]
}
 8006e88:	bf00      	nop
 8006e8a:	371c      	adds	r7, #28
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e92:	4770      	bx	lr
 8006e94:	40010000 	.word	0x40010000
 8006e98:	40010400 	.word	0x40010400
 8006e9c:	40014000 	.word	0x40014000
 8006ea0:	40014400 	.word	0x40014400
 8006ea4:	40014800 	.word	0x40014800

08006ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b087      	sub	sp, #28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6a1b      	ldr	r3, [r3, #32]
 8006ec2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	685b      	ldr	r3, [r3, #4]
 8006ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	021b      	lsls	r3, r3, #8
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	031b      	lsls	r3, r3, #12
 8006efa:	693a      	ldr	r2, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	4a18      	ldr	r2, [pc, #96]	; (8006f64 <TIM_OC4_SetConfig+0xbc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d00f      	beq.n	8006f28 <TIM_OC4_SetConfig+0x80>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	4a17      	ldr	r2, [pc, #92]	; (8006f68 <TIM_OC4_SetConfig+0xc0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d00b      	beq.n	8006f28 <TIM_OC4_SetConfig+0x80>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4a16      	ldr	r2, [pc, #88]	; (8006f6c <TIM_OC4_SetConfig+0xc4>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d007      	beq.n	8006f28 <TIM_OC4_SetConfig+0x80>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	4a15      	ldr	r2, [pc, #84]	; (8006f70 <TIM_OC4_SetConfig+0xc8>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d003      	beq.n	8006f28 <TIM_OC4_SetConfig+0x80>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4a14      	ldr	r2, [pc, #80]	; (8006f74 <TIM_OC4_SetConfig+0xcc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d109      	bne.n	8006f3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	019b      	lsls	r3, r3, #6
 8006f36:	697a      	ldr	r2, [r7, #20]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	693a      	ldr	r2, [r7, #16]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	40010000 	.word	0x40010000
 8006f68:	40010400 	.word	0x40010400
 8006f6c:	40014000 	.word	0x40014000
 8006f70:	40014400 	.word	0x40014400
 8006f74:	40014800 	.word	0x40014800

08006f78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b087      	sub	sp, #28
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a1b      	ldr	r3, [r3, #32]
 8006f92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68fa      	ldr	r2, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006fb2:	693b      	ldr	r3, [r7, #16]
 8006fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	041b      	lsls	r3, r3, #16
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a17      	ldr	r2, [pc, #92]	; (8007028 <TIM_OC5_SetConfig+0xb0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00f      	beq.n	8006fee <TIM_OC5_SetConfig+0x76>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a16      	ldr	r2, [pc, #88]	; (800702c <TIM_OC5_SetConfig+0xb4>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d00b      	beq.n	8006fee <TIM_OC5_SetConfig+0x76>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a15      	ldr	r2, [pc, #84]	; (8007030 <TIM_OC5_SetConfig+0xb8>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d007      	beq.n	8006fee <TIM_OC5_SetConfig+0x76>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a14      	ldr	r2, [pc, #80]	; (8007034 <TIM_OC5_SetConfig+0xbc>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d003      	beq.n	8006fee <TIM_OC5_SetConfig+0x76>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	4a13      	ldr	r2, [pc, #76]	; (8007038 <TIM_OC5_SetConfig+0xc0>)
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d109      	bne.n	8007002 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	021b      	lsls	r3, r3, #8
 8006ffc:	697a      	ldr	r2, [r7, #20]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	697a      	ldr	r2, [r7, #20]
 8007006:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	685a      	ldr	r2, [r3, #4]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	693a      	ldr	r2, [r7, #16]
 800701a:	621a      	str	r2, [r3, #32]
}
 800701c:	bf00      	nop
 800701e:	371c      	adds	r7, #28
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	40010000 	.word	0x40010000
 800702c:	40010400 	.word	0x40010400
 8007030:	40014000 	.word	0x40014000
 8007034:	40014400 	.word	0x40014400
 8007038:	40014800 	.word	0x40014800

0800703c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800703c:	b480      	push	{r7}
 800703e:	b087      	sub	sp, #28
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a1b      	ldr	r3, [r3, #32]
 800704a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	021b      	lsls	r3, r3, #8
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007078:	693b      	ldr	r3, [r7, #16]
 800707a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800707e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	051b      	lsls	r3, r3, #20
 8007086:	693a      	ldr	r2, [r7, #16]
 8007088:	4313      	orrs	r3, r2
 800708a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <TIM_OC6_SetConfig+0xb4>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00f      	beq.n	80070b4 <TIM_OC6_SetConfig+0x78>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a17      	ldr	r2, [pc, #92]	; (80070f4 <TIM_OC6_SetConfig+0xb8>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d00b      	beq.n	80070b4 <TIM_OC6_SetConfig+0x78>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a16      	ldr	r2, [pc, #88]	; (80070f8 <TIM_OC6_SetConfig+0xbc>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d007      	beq.n	80070b4 <TIM_OC6_SetConfig+0x78>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a15      	ldr	r2, [pc, #84]	; (80070fc <TIM_OC6_SetConfig+0xc0>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d003      	beq.n	80070b4 <TIM_OC6_SetConfig+0x78>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a14      	ldr	r2, [pc, #80]	; (8007100 <TIM_OC6_SetConfig+0xc4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d109      	bne.n	80070c8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	695b      	ldr	r3, [r3, #20]
 80070c0:	029b      	lsls	r3, r3, #10
 80070c2:	697a      	ldr	r2, [r7, #20]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	685a      	ldr	r2, [r3, #4]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	621a      	str	r2, [r3, #32]
}
 80070e2:	bf00      	nop
 80070e4:	371c      	adds	r7, #28
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	40010000 	.word	0x40010000
 80070f4:	40010400 	.word	0x40010400
 80070f8:	40014000 	.word	0x40014000
 80070fc:	40014400 	.word	0x40014400
 8007100:	40014800 	.word	0x40014800

08007104 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	f003 031f 	and.w	r3, r3, #31
 8007116:	2201      	movs	r2, #1
 8007118:	fa02 f303 	lsl.w	r3, r2, r3
 800711c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	6a1a      	ldr	r2, [r3, #32]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	43db      	mvns	r3, r3
 8007126:	401a      	ands	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	6a1a      	ldr	r2, [r3, #32]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f003 031f 	and.w	r3, r3, #31
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	fa01 f303 	lsl.w	r3, r1, r3
 800713c:	431a      	orrs	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	621a      	str	r2, [r3, #32]
}
 8007142:	bf00      	nop
 8007144:	371c      	adds	r7, #28
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
	...

08007150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007160:	2b01      	cmp	r3, #1
 8007162:	d101      	bne.n	8007168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007164:	2302      	movs	r3, #2
 8007166:	e068      	b.n	800723a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2202      	movs	r2, #2
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a2e      	ldr	r2, [pc, #184]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d004      	beq.n	800719c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a2d      	ldr	r2, [pc, #180]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d108      	bne.n	80071ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80071a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	4313      	orrs	r3, r2
 80071be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1e      	ldr	r2, [pc, #120]	; (8007248 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01d      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071da:	d018      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a1b      	ldr	r2, [pc, #108]	; (8007250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d013      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00e      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a18      	ldr	r2, [pc, #96]	; (8007258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d009      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a13      	ldr	r2, [pc, #76]	; (800724c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d004      	beq.n	800720e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a14      	ldr	r2, [pc, #80]	; (800725c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d10c      	bne.n	8007228 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007214:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	68ba      	ldr	r2, [r7, #8]
 800721c:	4313      	orrs	r3, r2
 800721e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	68ba      	ldr	r2, [r7, #8]
 8007226:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2200      	movs	r2, #0
 8007234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40010000 	.word	0x40010000
 800724c:	40010400 	.word	0x40010400
 8007250:	40000400 	.word	0x40000400
 8007254:	40000800 	.word	0x40000800
 8007258:	40000c00 	.word	0x40000c00
 800725c:	40001800 	.word	0x40001800

08007260 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800726a:	2300      	movs	r3, #0
 800726c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007278:	2302      	movs	r3, #2
 800727a:	e065      	b.n	8007348 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	4313      	orrs	r3, r2
 8007290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	4313      	orrs	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	4313      	orrs	r3, r2
 80072c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e2:	4313      	orrs	r3, r2
 80072e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	699b      	ldr	r3, [r3, #24]
 80072f0:	041b      	lsls	r3, r3, #16
 80072f2:	4313      	orrs	r3, r2
 80072f4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a16      	ldr	r2, [pc, #88]	; (8007354 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d004      	beq.n	800730a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a14      	ldr	r2, [pc, #80]	; (8007358 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d115      	bne.n	8007336 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007314:	051b      	lsls	r3, r3, #20
 8007316:	4313      	orrs	r3, r2
 8007318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	69db      	ldr	r3, [r3, #28]
 8007324:	4313      	orrs	r3, r2
 8007326:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	4313      	orrs	r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40010000 	.word	0x40010000
 8007358:	40010400 	.word	0x40010400

0800735c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007364:	bf00      	nop
 8007366:	370c      	adds	r7, #12
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr

08007370 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d101      	bne.n	80073aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e042      	b.n	8007430 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d106      	bne.n	80073c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f7fa fbd7 	bl	8001b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2224      	movs	r2, #36	; 0x24
 80073c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681a      	ldr	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f022 0201 	bic.w	r2, r2, #1
 80073d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f000 f9c0 	bl	8007760 <UART_SetConfig>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b01      	cmp	r3, #1
 80073e4:	d101      	bne.n	80073ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073e6:	2301      	movs	r3, #1
 80073e8:	e022      	b.n	8007430 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d002      	beq.n	80073f8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f002 fb32 	bl	8009a5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007406:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007416:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0201 	orr.w	r2, r2, #1
 8007426:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f002 fbb9 	bl	8009ba0 <UART_CheckIdleState>
 800742e:	4603      	mov	r3, r0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b088      	sub	sp, #32
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007458:	69fa      	ldr	r2, [r7, #28]
 800745a:	f640 030f 	movw	r3, #2063	; 0x80f
 800745e:	4013      	ands	r3, r2
 8007460:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d118      	bne.n	800749a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f003 0320 	and.w	r3, r3, #32
 800746e:	2b00      	cmp	r3, #0
 8007470:	d013      	beq.n	800749a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007472:	69bb      	ldr	r3, [r7, #24]
 8007474:	f003 0320 	and.w	r3, r3, #32
 8007478:	2b00      	cmp	r3, #0
 800747a:	d104      	bne.n	8007486 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d009      	beq.n	800749a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800748a:	2b00      	cmp	r3, #0
 800748c:	f000 8145 	beq.w	800771a <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
      }
      return;
 8007498:	e13f      	b.n	800771a <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80e8 	beq.w	8007672 <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80074a2:	697a      	ldr	r2, [r7, #20]
 80074a4:	4ba1      	ldr	r3, [pc, #644]	; (800772c <HAL_UART_IRQHandler+0x2f4>)
 80074a6:	4013      	ands	r3, r2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80074ac:	69ba      	ldr	r2, [r7, #24]
 80074ae:	4ba0      	ldr	r3, [pc, #640]	; (8007730 <HAL_UART_IRQHandler+0x2f8>)
 80074b0:	4013      	ands	r3, r2
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80dd 	beq.w	8007672 <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d010      	beq.n	80074e4 <HAL_UART_IRQHandler+0xac>
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00b      	beq.n	80074e4 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2201      	movs	r2, #1
 80074d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074da:	f043 0201 	orr.w	r2, r3, #1
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e4:	69fb      	ldr	r3, [r7, #28]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d010      	beq.n	8007510 <HAL_UART_IRQHandler+0xd8>
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d00b      	beq.n	8007510 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	2202      	movs	r2, #2
 80074fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007506:	f043 0204 	orr.w	r2, r3, #4
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f003 0304 	and.w	r3, r3, #4
 8007516:	2b00      	cmp	r3, #0
 8007518:	d010      	beq.n	800753c <HAL_UART_IRQHandler+0x104>
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00b      	beq.n	800753c <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2204      	movs	r2, #4
 800752a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007532:	f043 0202 	orr.w	r2, r3, #2
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	f003 0308 	and.w	r3, r3, #8
 8007542:	2b00      	cmp	r3, #0
 8007544:	d015      	beq.n	8007572 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	f003 0320 	and.w	r3, r3, #32
 800754c:	2b00      	cmp	r3, #0
 800754e:	d104      	bne.n	800755a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007550:	697a      	ldr	r2, [r7, #20]
 8007552:	4b76      	ldr	r3, [pc, #472]	; (800772c <HAL_UART_IRQHandler+0x2f4>)
 8007554:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007556:	2b00      	cmp	r3, #0
 8007558:	d00b      	beq.n	8007572 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2208      	movs	r2, #8
 8007560:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007568:	f043 0208 	orr.w	r2, r3, #8
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007578:	2b00      	cmp	r3, #0
 800757a:	d011      	beq.n	80075a0 <HAL_UART_IRQHandler+0x168>
 800757c:	69bb      	ldr	r3, [r7, #24]
 800757e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00c      	beq.n	80075a0 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800758e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	f043 0220 	orr.w	r2, r3, #32
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 80b9 	beq.w	800771e <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	f003 0320 	and.w	r3, r3, #32
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d011      	beq.n	80075da <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d104      	bne.n	80075ca <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d007      	beq.n	80075da <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075e0:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	689b      	ldr	r3, [r3, #8]
 80075e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ec:	2b40      	cmp	r3, #64	; 0x40
 80075ee:	d004      	beq.n	80075fa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d031      	beq.n	800765e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f002 fb98 	bl	8009d30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d123      	bne.n	8007656 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	689a      	ldr	r2, [r3, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800761c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007622:	2b00      	cmp	r3, #0
 8007624:	d013      	beq.n	800764e <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800762a:	4a42      	ldr	r2, [pc, #264]	; (8007734 <HAL_UART_IRQHandler+0x2fc>)
 800762c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007632:	4618      	mov	r0, r3
 8007634:	f7fa fe40 	bl	80022b8 <HAL_DMA_Abort_IT>
 8007638:	4603      	mov	r3, r0
 800763a:	2b00      	cmp	r3, #0
 800763c:	d017      	beq.n	800766e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007642:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8007648:	4610      	mov	r0, r2
 800764a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800764c:	e00f      	b.n	800766e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 f87c 	bl	800774c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007654:	e00b      	b.n	800766e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f000 f878 	bl	800774c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800765c:	e007      	b.n	800766e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 f874 	bl	800774c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 800766c:	e057      	b.n	800771e <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800766e:	bf00      	nop
    return;
 8007670:	e055      	b.n	800771e <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00d      	beq.n	8007698 <HAL_UART_IRQHandler+0x260>
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d008      	beq.n	8007698 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800768e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007690:	6878      	ldr	r0, [r7, #4]
 8007692:	f002 fba1 	bl	8009dd8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007696:	e045      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007698:	69fb      	ldr	r3, [r7, #28]
 800769a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d012      	beq.n	80076c8 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d104      	bne.n	80076b6 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d008      	beq.n	80076c8 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d031      	beq.n	8007722 <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	4798      	blx	r3
    }
    return;
 80076c6:	e02c      	b.n	8007722 <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <HAL_UART_IRQHandler+0x2ac>
 80076d2:	69bb      	ldr	r3, [r7, #24]
 80076d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f002 fb61 	bl	8009da4 <UART_EndTransmit_IT>
    return;
 80076e2:	e01f      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d008      	beq.n	8007700 <HAL_UART_IRQHandler+0x2c8>
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d003      	beq.n	8007700 <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f002 fb81 	bl	8009e00 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076fe:	e011      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007700:	69fb      	ldr	r3, [r7, #28]
 8007702:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d00c      	beq.n	8007724 <HAL_UART_IRQHandler+0x2ec>
 800770a:	69bb      	ldr	r3, [r7, #24]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da09      	bge.n	8007724 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f002 fb6b 	bl	8009dec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007716:	bf00      	nop
 8007718:	e004      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
      return;
 800771a:	bf00      	nop
 800771c:	e002      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
    return;
 800771e:	bf00      	nop
 8007720:	e000      	b.n	8007724 <HAL_UART_IRQHandler+0x2ec>
    return;
 8007722:	bf00      	nop
  }
}
 8007724:	3720      	adds	r7, #32
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
 800772a:	bf00      	nop
 800772c:	10000001 	.word	0x10000001
 8007730:	04000120 	.word	0x04000120
 8007734:	08009d79 	.word	0x08009d79

08007738 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007760:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007764:	b090      	sub	sp, #64	; 0x40
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800776a:	2300      	movs	r3, #0
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_StatusTypeDef ret               = HAL_OK;
 800776e:	2300      	movs	r3, #0
 8007770:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8007774:	2300      	movs	r3, #0
 8007776:	62fb      	str	r3, [r7, #44]	; 0x2c
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	689a      	ldr	r2, [r3, #8]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	691b      	ldr	r3, [r3, #16]
 8007780:	431a      	orrs	r2, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	431a      	orrs	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	69db      	ldr	r3, [r3, #28]
 800778c:	4313      	orrs	r3, r2
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
  tmpreg |= (uint32_t)huart->FifoMode;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007794:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007796:	4313      	orrs	r3, r2
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	4bc1      	ldr	r3, [pc, #772]	; (8007aa8 <UART_SetConfig+0x348>)
 80077a2:	4013      	ands	r3, r2
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	6812      	ldr	r2, [r2, #0]
 80077a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077aa:	430b      	orrs	r3, r1
 80077ac:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	685b      	ldr	r3, [r3, #4]
 80077b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	68da      	ldr	r2, [r3, #12]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	430a      	orrs	r2, r1
 80077c2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4ab7      	ldr	r2, [pc, #732]	; (8007aac <UART_SetConfig+0x34c>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d004      	beq.n	80077de <UART_SetConfig+0x7e>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a1b      	ldr	r3, [r3, #32]
 80077d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077da:	4313      	orrs	r3, r2
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689a      	ldr	r2, [r3, #8]
 80077e4:	4bb2      	ldr	r3, [pc, #712]	; (8007ab0 <UART_SetConfig+0x350>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	687a      	ldr	r2, [r7, #4]
 80077ea:	6812      	ldr	r2, [r2, #0]
 80077ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ee:	430b      	orrs	r3, r1
 80077f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f8:	f023 010f 	bic.w	r1, r3, #15
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	430a      	orrs	r2, r1
 8007806:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4aa9      	ldr	r2, [pc, #676]	; (8007ab4 <UART_SetConfig+0x354>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d177      	bne.n	8007902 <UART_SetConfig+0x1a2>
 8007812:	4ba9      	ldr	r3, [pc, #676]	; (8007ab8 <UART_SetConfig+0x358>)
 8007814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007816:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800781a:	2b28      	cmp	r3, #40	; 0x28
 800781c:	d86c      	bhi.n	80078f8 <UART_SetConfig+0x198>
 800781e:	a201      	add	r2, pc, #4	; (adr r2, 8007824 <UART_SetConfig+0xc4>)
 8007820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007824:	080078c9 	.word	0x080078c9
 8007828:	080078f9 	.word	0x080078f9
 800782c:	080078f9 	.word	0x080078f9
 8007830:	080078f9 	.word	0x080078f9
 8007834:	080078f9 	.word	0x080078f9
 8007838:	080078f9 	.word	0x080078f9
 800783c:	080078f9 	.word	0x080078f9
 8007840:	080078f9 	.word	0x080078f9
 8007844:	080078d1 	.word	0x080078d1
 8007848:	080078f9 	.word	0x080078f9
 800784c:	080078f9 	.word	0x080078f9
 8007850:	080078f9 	.word	0x080078f9
 8007854:	080078f9 	.word	0x080078f9
 8007858:	080078f9 	.word	0x080078f9
 800785c:	080078f9 	.word	0x080078f9
 8007860:	080078f9 	.word	0x080078f9
 8007864:	080078d9 	.word	0x080078d9
 8007868:	080078f9 	.word	0x080078f9
 800786c:	080078f9 	.word	0x080078f9
 8007870:	080078f9 	.word	0x080078f9
 8007874:	080078f9 	.word	0x080078f9
 8007878:	080078f9 	.word	0x080078f9
 800787c:	080078f9 	.word	0x080078f9
 8007880:	080078f9 	.word	0x080078f9
 8007884:	080078e1 	.word	0x080078e1
 8007888:	080078f9 	.word	0x080078f9
 800788c:	080078f9 	.word	0x080078f9
 8007890:	080078f9 	.word	0x080078f9
 8007894:	080078f9 	.word	0x080078f9
 8007898:	080078f9 	.word	0x080078f9
 800789c:	080078f9 	.word	0x080078f9
 80078a0:	080078f9 	.word	0x080078f9
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078f9 	.word	0x080078f9
 80078ac:	080078f9 	.word	0x080078f9
 80078b0:	080078f9 	.word	0x080078f9
 80078b4:	080078f9 	.word	0x080078f9
 80078b8:	080078f9 	.word	0x080078f9
 80078bc:	080078f9 	.word	0x080078f9
 80078c0:	080078f9 	.word	0x080078f9
 80078c4:	080078f1 	.word	0x080078f1
 80078c8:	2301      	movs	r3, #1
 80078ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ce:	e233      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078d0:	2304      	movs	r3, #4
 80078d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078d6:	e22f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078d8:	2308      	movs	r3, #8
 80078da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078de:	e22b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078e0:	2310      	movs	r3, #16
 80078e2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078e6:	e227      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078e8:	2320      	movs	r3, #32
 80078ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078ee:	e223      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078f0:	2340      	movs	r3, #64	; 0x40
 80078f2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078f6:	e21f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80078f8:	2380      	movs	r3, #128	; 0x80
 80078fa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80078fe:	bf00      	nop
 8007900:	e21a      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a6d      	ldr	r2, [pc, #436]	; (8007abc <UART_SetConfig+0x35c>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d132      	bne.n	8007972 <UART_SetConfig+0x212>
 800790c:	4b6a      	ldr	r3, [pc, #424]	; (8007ab8 <UART_SetConfig+0x358>)
 800790e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007910:	f003 0307 	and.w	r3, r3, #7
 8007914:	2b05      	cmp	r3, #5
 8007916:	d827      	bhi.n	8007968 <UART_SetConfig+0x208>
 8007918:	a201      	add	r2, pc, #4	; (adr r2, 8007920 <UART_SetConfig+0x1c0>)
 800791a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791e:	bf00      	nop
 8007920:	08007939 	.word	0x08007939
 8007924:	08007941 	.word	0x08007941
 8007928:	08007949 	.word	0x08007949
 800792c:	08007951 	.word	0x08007951
 8007930:	08007959 	.word	0x08007959
 8007934:	08007961 	.word	0x08007961
 8007938:	2300      	movs	r3, #0
 800793a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800793e:	e1fb      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007940:	2304      	movs	r3, #4
 8007942:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007946:	e1f7      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007948:	2308      	movs	r3, #8
 800794a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800794e:	e1f3      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007950:	2310      	movs	r3, #16
 8007952:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007956:	e1ef      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007958:	2320      	movs	r3, #32
 800795a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800795e:	e1eb      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007966:	e1e7      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007968:	2380      	movs	r3, #128	; 0x80
 800796a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 800796e:	bf00      	nop
 8007970:	e1e2      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a52      	ldr	r2, [pc, #328]	; (8007ac0 <UART_SetConfig+0x360>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d132      	bne.n	80079e2 <UART_SetConfig+0x282>
 800797c:	4b4e      	ldr	r3, [pc, #312]	; (8007ab8 <UART_SetConfig+0x358>)
 800797e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	2b05      	cmp	r3, #5
 8007986:	d827      	bhi.n	80079d8 <UART_SetConfig+0x278>
 8007988:	a201      	add	r2, pc, #4	; (adr r2, 8007990 <UART_SetConfig+0x230>)
 800798a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800798e:	bf00      	nop
 8007990:	080079a9 	.word	0x080079a9
 8007994:	080079b1 	.word	0x080079b1
 8007998:	080079b9 	.word	0x080079b9
 800799c:	080079c1 	.word	0x080079c1
 80079a0:	080079c9 	.word	0x080079c9
 80079a4:	080079d1 	.word	0x080079d1
 80079a8:	2300      	movs	r3, #0
 80079aa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ae:	e1c3      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079b0:	2304      	movs	r3, #4
 80079b2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079b6:	e1bf      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079b8:	2308      	movs	r3, #8
 80079ba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079be:	e1bb      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079c0:	2310      	movs	r3, #16
 80079c2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079c6:	e1b7      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079c8:	2320      	movs	r3, #32
 80079ca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079ce:	e1b3      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079d0:	2340      	movs	r3, #64	; 0x40
 80079d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079d6:	e1af      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079d8:	2380      	movs	r3, #128	; 0x80
 80079da:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80079de:	bf00      	nop
 80079e0:	e1aa      	b.n	8007d38 <UART_SetConfig+0x5d8>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a37      	ldr	r2, [pc, #220]	; (8007ac4 <UART_SetConfig+0x364>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d132      	bne.n	8007a52 <UART_SetConfig+0x2f2>
 80079ec:	4b32      	ldr	r3, [pc, #200]	; (8007ab8 <UART_SetConfig+0x358>)
 80079ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f0:	f003 0307 	and.w	r3, r3, #7
 80079f4:	2b05      	cmp	r3, #5
 80079f6:	d827      	bhi.n	8007a48 <UART_SetConfig+0x2e8>
 80079f8:	a201      	add	r2, pc, #4	; (adr r2, 8007a00 <UART_SetConfig+0x2a0>)
 80079fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079fe:	bf00      	nop
 8007a00:	08007a19 	.word	0x08007a19
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a1e:	e18b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a26:	e187      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a2e:	e183      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a36:	e17f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a3e:	e17b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a40:	2340      	movs	r3, #64	; 0x40
 8007a42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a46:	e177      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a48:	2380      	movs	r3, #128	; 0x80
 8007a4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a4e:	bf00      	nop
 8007a50:	e172      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <UART_SetConfig+0x368>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d144      	bne.n	8007ae6 <UART_SetConfig+0x386>
 8007a5c:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <UART_SetConfig+0x358>)
 8007a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a60:	f003 0307 	and.w	r3, r3, #7
 8007a64:	2b05      	cmp	r3, #5
 8007a66:	d839      	bhi.n	8007adc <UART_SetConfig+0x37c>
 8007a68:	a201      	add	r2, pc, #4	; (adr r2, 8007a70 <UART_SetConfig+0x310>)
 8007a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6e:	bf00      	nop
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007a91 	.word	0x08007a91
 8007a78:	08007a99 	.word	0x08007a99
 8007a7c:	08007aa1 	.word	0x08007aa1
 8007a80:	08007acd 	.word	0x08007acd
 8007a84:	08007ad5 	.word	0x08007ad5
 8007a88:	2300      	movs	r3, #0
 8007a8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a8e:	e153      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a90:	2304      	movs	r3, #4
 8007a92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a96:	e14f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007a98:	2308      	movs	r3, #8
 8007a9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007a9e:	e14b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007aa0:	2310      	movs	r3, #16
 8007aa2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007aa6:	e147      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007aa8:	cfff69f3 	.word	0xcfff69f3
 8007aac:	58000c00 	.word	0x58000c00
 8007ab0:	11fff4ff 	.word	0x11fff4ff
 8007ab4:	40011000 	.word	0x40011000
 8007ab8:	58024400 	.word	0x58024400
 8007abc:	40004400 	.word	0x40004400
 8007ac0:	40004800 	.word	0x40004800
 8007ac4:	40004c00 	.word	0x40004c00
 8007ac8:	40005000 	.word	0x40005000
 8007acc:	2320      	movs	r3, #32
 8007ace:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ad2:	e131      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007ad4:	2340      	movs	r3, #64	; 0x40
 8007ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ada:	e12d      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007adc:	2380      	movs	r3, #128	; 0x80
 8007ade:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ae2:	bf00      	nop
 8007ae4:	e128      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4ac3      	ldr	r2, [pc, #780]	; (8007df8 <UART_SetConfig+0x698>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d178      	bne.n	8007be2 <UART_SetConfig+0x482>
 8007af0:	4bc2      	ldr	r3, [pc, #776]	; (8007dfc <UART_SetConfig+0x69c>)
 8007af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007af8:	2b28      	cmp	r3, #40	; 0x28
 8007afa:	d86d      	bhi.n	8007bd8 <UART_SetConfig+0x478>
 8007afc:	a201      	add	r2, pc, #4	; (adr r2, 8007b04 <UART_SetConfig+0x3a4>)
 8007afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b02:	bf00      	nop
 8007b04:	08007ba9 	.word	0x08007ba9
 8007b08:	08007bd9 	.word	0x08007bd9
 8007b0c:	08007bd9 	.word	0x08007bd9
 8007b10:	08007bd9 	.word	0x08007bd9
 8007b14:	08007bd9 	.word	0x08007bd9
 8007b18:	08007bd9 	.word	0x08007bd9
 8007b1c:	08007bd9 	.word	0x08007bd9
 8007b20:	08007bd9 	.word	0x08007bd9
 8007b24:	08007bb1 	.word	0x08007bb1
 8007b28:	08007bd9 	.word	0x08007bd9
 8007b2c:	08007bd9 	.word	0x08007bd9
 8007b30:	08007bd9 	.word	0x08007bd9
 8007b34:	08007bd9 	.word	0x08007bd9
 8007b38:	08007bd9 	.word	0x08007bd9
 8007b3c:	08007bd9 	.word	0x08007bd9
 8007b40:	08007bd9 	.word	0x08007bd9
 8007b44:	08007bb9 	.word	0x08007bb9
 8007b48:	08007bd9 	.word	0x08007bd9
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007bd9 	.word	0x08007bd9
 8007b54:	08007bd9 	.word	0x08007bd9
 8007b58:	08007bd9 	.word	0x08007bd9
 8007b5c:	08007bd9 	.word	0x08007bd9
 8007b60:	08007bd9 	.word	0x08007bd9
 8007b64:	08007bc1 	.word	0x08007bc1
 8007b68:	08007bd9 	.word	0x08007bd9
 8007b6c:	08007bd9 	.word	0x08007bd9
 8007b70:	08007bd9 	.word	0x08007bd9
 8007b74:	08007bd9 	.word	0x08007bd9
 8007b78:	08007bd9 	.word	0x08007bd9
 8007b7c:	08007bd9 	.word	0x08007bd9
 8007b80:	08007bd9 	.word	0x08007bd9
 8007b84:	08007bc9 	.word	0x08007bc9
 8007b88:	08007bd9 	.word	0x08007bd9
 8007b8c:	08007bd9 	.word	0x08007bd9
 8007b90:	08007bd9 	.word	0x08007bd9
 8007b94:	08007bd9 	.word	0x08007bd9
 8007b98:	08007bd9 	.word	0x08007bd9
 8007b9c:	08007bd9 	.word	0x08007bd9
 8007ba0:	08007bd9 	.word	0x08007bd9
 8007ba4:	08007bd1 	.word	0x08007bd1
 8007ba8:	2301      	movs	r3, #1
 8007baa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bae:	e0c3      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bb0:	2304      	movs	r3, #4
 8007bb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bb6:	e0bf      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bb8:	2308      	movs	r3, #8
 8007bba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bbe:	e0bb      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bc6:	e0b7      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bc8:	2320      	movs	r3, #32
 8007bca:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bce:	e0b3      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bd0:	2340      	movs	r3, #64	; 0x40
 8007bd2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bd6:	e0af      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007bd8:	2380      	movs	r3, #128	; 0x80
 8007bda:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007bde:	bf00      	nop
 8007be0:	e0aa      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a86      	ldr	r2, [pc, #536]	; (8007e00 <UART_SetConfig+0x6a0>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d132      	bne.n	8007c52 <UART_SetConfig+0x4f2>
 8007bec:	4b83      	ldr	r3, [pc, #524]	; (8007dfc <UART_SetConfig+0x69c>)
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	2b05      	cmp	r3, #5
 8007bf6:	d827      	bhi.n	8007c48 <UART_SetConfig+0x4e8>
 8007bf8:	a201      	add	r2, pc, #4	; (adr r2, 8007c00 <UART_SetConfig+0x4a0>)
 8007bfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bfe:	bf00      	nop
 8007c00:	08007c19 	.word	0x08007c19
 8007c04:	08007c21 	.word	0x08007c21
 8007c08:	08007c29 	.word	0x08007c29
 8007c0c:	08007c31 	.word	0x08007c31
 8007c10:	08007c39 	.word	0x08007c39
 8007c14:	08007c41 	.word	0x08007c41
 8007c18:	2300      	movs	r3, #0
 8007c1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c1e:	e08b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c20:	2304      	movs	r3, #4
 8007c22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c26:	e087      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c28:	2308      	movs	r3, #8
 8007c2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c2e:	e083      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c30:	2310      	movs	r3, #16
 8007c32:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c36:	e07f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c38:	2320      	movs	r3, #32
 8007c3a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c3e:	e07b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c40:	2340      	movs	r3, #64	; 0x40
 8007c42:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c46:	e077      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c48:	2380      	movs	r3, #128	; 0x80
 8007c4a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c4e:	bf00      	nop
 8007c50:	e072      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a6b      	ldr	r2, [pc, #428]	; (8007e04 <UART_SetConfig+0x6a4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d132      	bne.n	8007cc2 <UART_SetConfig+0x562>
 8007c5c:	4b67      	ldr	r3, [pc, #412]	; (8007dfc <UART_SetConfig+0x69c>)
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	2b05      	cmp	r3, #5
 8007c66:	d827      	bhi.n	8007cb8 <UART_SetConfig+0x558>
 8007c68:	a201      	add	r2, pc, #4	; (adr r2, 8007c70 <UART_SetConfig+0x510>)
 8007c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6e:	bf00      	nop
 8007c70:	08007c89 	.word	0x08007c89
 8007c74:	08007c91 	.word	0x08007c91
 8007c78:	08007c99 	.word	0x08007c99
 8007c7c:	08007ca1 	.word	0x08007ca1
 8007c80:	08007ca9 	.word	0x08007ca9
 8007c84:	08007cb1 	.word	0x08007cb1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c8e:	e053      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c90:	2304      	movs	r3, #4
 8007c92:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c96:	e04f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007c98:	2308      	movs	r3, #8
 8007c9a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007c9e:	e04b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007ca0:	2310      	movs	r3, #16
 8007ca2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007ca6:	e047      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007ca8:	2320      	movs	r3, #32
 8007caa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cae:	e043      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007cb0:	2340      	movs	r3, #64	; 0x40
 8007cb2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cb6:	e03f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007cb8:	2380      	movs	r3, #128	; 0x80
 8007cba:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cbe:	bf00      	nop
 8007cc0:	e03a      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a50      	ldr	r2, [pc, #320]	; (8007e08 <UART_SetConfig+0x6a8>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d132      	bne.n	8007d32 <UART_SetConfig+0x5d2>
 8007ccc:	4b4b      	ldr	r3, [pc, #300]	; (8007dfc <UART_SetConfig+0x69c>)
 8007cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	2b05      	cmp	r3, #5
 8007cd6:	d827      	bhi.n	8007d28 <UART_SetConfig+0x5c8>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0x580>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007cf9 	.word	0x08007cf9
 8007ce4:	08007d01 	.word	0x08007d01
 8007ce8:	08007d09 	.word	0x08007d09
 8007cec:	08007d11 	.word	0x08007d11
 8007cf0:	08007d19 	.word	0x08007d19
 8007cf4:	08007d21 	.word	0x08007d21
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007cfe:	e01b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d00:	2304      	movs	r3, #4
 8007d02:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d06:	e017      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d08:	2308      	movs	r3, #8
 8007d0a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d0e:	e013      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d10:	2310      	movs	r3, #16
 8007d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d16:	e00f      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d18:	2320      	movs	r3, #32
 8007d1a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d1e:	e00b      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d20:	2340      	movs	r3, #64	; 0x40
 8007d22:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d26:	e007      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d28:	2380      	movs	r3, #128	; 0x80
 8007d2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007d2e:	bf00      	nop
 8007d30:	e002      	b.n	8007d38 <UART_SetConfig+0x5d8>
 8007d32:	2380      	movs	r3, #128	; 0x80
 8007d34:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a32      	ldr	r2, [pc, #200]	; (8007e08 <UART_SetConfig+0x6a8>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	f040 86f7 	bne.w	8008b32 <UART_SetConfig+0x13d2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d44:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007d48:	2b08      	cmp	r3, #8
 8007d4a:	f000 80c0 	beq.w	8007ece <UART_SetConfig+0x76e>
 8007d4e:	2b08      	cmp	r3, #8
 8007d50:	dc04      	bgt.n	8007d5c <UART_SetConfig+0x5fc>
 8007d52:	2b02      	cmp	r3, #2
 8007d54:	d00c      	beq.n	8007d70 <UART_SetConfig+0x610>
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d065      	beq.n	8007e26 <UART_SetConfig+0x6c6>
 8007d5a:	e27a      	b.n	8008252 <UART_SetConfig+0xaf2>
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	f000 81b0 	beq.w	80080c2 <UART_SetConfig+0x962>
 8007d62:	2b40      	cmp	r3, #64	; 0x40
 8007d64:	f000 821e 	beq.w	80081a4 <UART_SetConfig+0xa44>
 8007d68:	2b10      	cmp	r3, #16
 8007d6a:	f000 8104 	beq.w	8007f76 <UART_SetConfig+0x816>
 8007d6e:	e270      	b.n	8008252 <UART_SetConfig+0xaf2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        lpuart_ker_ck_pres = (HAL_RCCEx_GetD3PCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007d70:	f7fd ff40 	bl	8005bf4 <HAL_RCCEx_GetD3PCLK1Freq>
 8007d74:	4602      	mov	r2, r0
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d04e      	beq.n	8007e1c <UART_SetConfig+0x6bc>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d048      	beq.n	8007e18 <UART_SetConfig+0x6b8>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d042      	beq.n	8007e14 <UART_SetConfig+0x6b4>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d92:	2b03      	cmp	r3, #3
 8007d94:	d03c      	beq.n	8007e10 <UART_SetConfig+0x6b0>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9a:	2b04      	cmp	r3, #4
 8007d9c:	d036      	beq.n	8007e0c <UART_SetConfig+0x6ac>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d026      	beq.n	8007df4 <UART_SetConfig+0x694>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007daa:	2b06      	cmp	r3, #6
 8007dac:	d020      	beq.n	8007df0 <UART_SetConfig+0x690>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007db2:	2b07      	cmp	r3, #7
 8007db4:	d01a      	beq.n	8007dec <UART_SetConfig+0x68c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dba:	2b08      	cmp	r3, #8
 8007dbc:	d014      	beq.n	8007de8 <UART_SetConfig+0x688>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc2:	2b09      	cmp	r3, #9
 8007dc4:	d00e      	beq.n	8007de4 <UART_SetConfig+0x684>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dca:	2b0a      	cmp	r3, #10
 8007dcc:	d008      	beq.n	8007de0 <UART_SetConfig+0x680>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd2:	2b0b      	cmp	r3, #11
 8007dd4:	d102      	bne.n	8007ddc <UART_SetConfig+0x67c>
 8007dd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007dda:	e020      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e01e      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007de0:	2380      	movs	r3, #128	; 0x80
 8007de2:	e01c      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	e01a      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007de8:	2320      	movs	r3, #32
 8007dea:	e018      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007dec:	2310      	movs	r3, #16
 8007dee:	e016      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007df0:	230c      	movs	r3, #12
 8007df2:	e014      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007df4:	230a      	movs	r3, #10
 8007df6:	e012      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007df8:	40011400 	.word	0x40011400
 8007dfc:	58024400 	.word	0x58024400
 8007e00:	40007800 	.word	0x40007800
 8007e04:	40007c00 	.word	0x40007c00
 8007e08:	58000c00 	.word	0x58000c00
 8007e0c:	2308      	movs	r3, #8
 8007e0e:	e006      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007e10:	2306      	movs	r3, #6
 8007e12:	e004      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007e14:	2304      	movs	r3, #4
 8007e16:	e002      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007e18:	2302      	movs	r3, #2
 8007e1a:	e000      	b.n	8007e1e <UART_SetConfig+0x6be>
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e22:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007e24:	e219      	b.n	800825a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e26:	f107 0318 	add.w	r3, r7, #24
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fd fef8 	bl	8005c20 <HAL_RCCEx_GetPLL2ClockFreq>
        lpuart_ker_ck_pres = (pll2_clocks.PLL2_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007e30:	69fa      	ldr	r2, [r7, #28]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d044      	beq.n	8007ec4 <UART_SetConfig+0x764>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d03e      	beq.n	8007ec0 <UART_SetConfig+0x760>
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d038      	beq.n	8007ebc <UART_SetConfig+0x75c>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e4e:	2b03      	cmp	r3, #3
 8007e50:	d032      	beq.n	8007eb8 <UART_SetConfig+0x758>
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	2b04      	cmp	r3, #4
 8007e58:	d02c      	beq.n	8007eb4 <UART_SetConfig+0x754>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5e:	2b05      	cmp	r3, #5
 8007e60:	d026      	beq.n	8007eb0 <UART_SetConfig+0x750>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e66:	2b06      	cmp	r3, #6
 8007e68:	d020      	beq.n	8007eac <UART_SetConfig+0x74c>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	2b07      	cmp	r3, #7
 8007e70:	d01a      	beq.n	8007ea8 <UART_SetConfig+0x748>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	2b08      	cmp	r3, #8
 8007e78:	d014      	beq.n	8007ea4 <UART_SetConfig+0x744>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e7e:	2b09      	cmp	r3, #9
 8007e80:	d00e      	beq.n	8007ea0 <UART_SetConfig+0x740>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e86:	2b0a      	cmp	r3, #10
 8007e88:	d008      	beq.n	8007e9c <UART_SetConfig+0x73c>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e8e:	2b0b      	cmp	r3, #11
 8007e90:	d102      	bne.n	8007e98 <UART_SetConfig+0x738>
 8007e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e96:	e016      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e014      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007e9c:	2380      	movs	r3, #128	; 0x80
 8007e9e:	e012      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ea0:	2340      	movs	r3, #64	; 0x40
 8007ea2:	e010      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ea4:	2320      	movs	r3, #32
 8007ea6:	e00e      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	e00c      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007eac:	230c      	movs	r3, #12
 8007eae:	e00a      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007eb0:	230a      	movs	r3, #10
 8007eb2:	e008      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007eb4:	2308      	movs	r3, #8
 8007eb6:	e006      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007eb8:	2306      	movs	r3, #6
 8007eba:	e004      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	e002      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e000      	b.n	8007ec6 <UART_SetConfig+0x766>
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007ecc:	e1c5      	b.n	800825a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ece:	f107 030c 	add.w	r3, r7, #12
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fd fff0 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        lpuart_ker_ck_pres = (pll3_clocks.PLL3_Q_Frequency / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d044      	beq.n	8007f6c <UART_SetConfig+0x80c>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d03e      	beq.n	8007f68 <UART_SetConfig+0x808>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eee:	2b02      	cmp	r3, #2
 8007ef0:	d038      	beq.n	8007f64 <UART_SetConfig+0x804>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef6:	2b03      	cmp	r3, #3
 8007ef8:	d032      	beq.n	8007f60 <UART_SetConfig+0x800>
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efe:	2b04      	cmp	r3, #4
 8007f00:	d02c      	beq.n	8007f5c <UART_SetConfig+0x7fc>
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f06:	2b05      	cmp	r3, #5
 8007f08:	d026      	beq.n	8007f58 <UART_SetConfig+0x7f8>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0e:	2b06      	cmp	r3, #6
 8007f10:	d020      	beq.n	8007f54 <UART_SetConfig+0x7f4>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f16:	2b07      	cmp	r3, #7
 8007f18:	d01a      	beq.n	8007f50 <UART_SetConfig+0x7f0>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d014      	beq.n	8007f4c <UART_SetConfig+0x7ec>
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f26:	2b09      	cmp	r3, #9
 8007f28:	d00e      	beq.n	8007f48 <UART_SetConfig+0x7e8>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2e:	2b0a      	cmp	r3, #10
 8007f30:	d008      	beq.n	8007f44 <UART_SetConfig+0x7e4>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f36:	2b0b      	cmp	r3, #11
 8007f38:	d102      	bne.n	8007f40 <UART_SetConfig+0x7e0>
 8007f3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f3e:	e016      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f40:	2301      	movs	r3, #1
 8007f42:	e014      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f44:	2380      	movs	r3, #128	; 0x80
 8007f46:	e012      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f48:	2340      	movs	r3, #64	; 0x40
 8007f4a:	e010      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f4c:	2320      	movs	r3, #32
 8007f4e:	e00e      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f50:	2310      	movs	r3, #16
 8007f52:	e00c      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f54:	230c      	movs	r3, #12
 8007f56:	e00a      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f58:	230a      	movs	r3, #10
 8007f5a:	e008      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	e006      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f60:	2306      	movs	r3, #6
 8007f62:	e004      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f64:	2304      	movs	r3, #4
 8007f66:	e002      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f68:	2302      	movs	r3, #2
 8007f6a:	e000      	b.n	8007f6e <UART_SetConfig+0x80e>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007f74:	e171      	b.n	800825a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007f76:	4b7a      	ldr	r3, [pc, #488]	; (8008160 <UART_SetConfig+0xa00>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0320 	and.w	r3, r3, #32
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d054      	beq.n	800802c <UART_SetConfig+0x8cc>
        {
          lpuart_ker_ck_pres = ((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)) / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8007f82:	4b77      	ldr	r3, [pc, #476]	; (8008160 <UART_SetConfig+0xa00>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	08db      	lsrs	r3, r3, #3
 8007f88:	f003 0303 	and.w	r3, r3, #3
 8007f8c:	4a75      	ldr	r2, [pc, #468]	; (8008164 <UART_SetConfig+0xa04>)
 8007f8e:	40da      	lsrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d044      	beq.n	8008022 <UART_SetConfig+0x8c2>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d03e      	beq.n	800801e <UART_SetConfig+0x8be>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fa4:	2b02      	cmp	r3, #2
 8007fa6:	d038      	beq.n	800801a <UART_SetConfig+0x8ba>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fac:	2b03      	cmp	r3, #3
 8007fae:	d032      	beq.n	8008016 <UART_SetConfig+0x8b6>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fb4:	2b04      	cmp	r3, #4
 8007fb6:	d02c      	beq.n	8008012 <UART_SetConfig+0x8b2>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	2b05      	cmp	r3, #5
 8007fbe:	d026      	beq.n	800800e <UART_SetConfig+0x8ae>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b06      	cmp	r3, #6
 8007fc6:	d020      	beq.n	800800a <UART_SetConfig+0x8aa>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	2b07      	cmp	r3, #7
 8007fce:	d01a      	beq.n	8008006 <UART_SetConfig+0x8a6>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fd4:	2b08      	cmp	r3, #8
 8007fd6:	d014      	beq.n	8008002 <UART_SetConfig+0x8a2>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fdc:	2b09      	cmp	r3, #9
 8007fde:	d00e      	beq.n	8007ffe <UART_SetConfig+0x89e>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fe4:	2b0a      	cmp	r3, #10
 8007fe6:	d008      	beq.n	8007ffa <UART_SetConfig+0x89a>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fec:	2b0b      	cmp	r3, #11
 8007fee:	d102      	bne.n	8007ff6 <UART_SetConfig+0x896>
 8007ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff4:	e016      	b.n	8008024 <UART_SetConfig+0x8c4>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e014      	b.n	8008024 <UART_SetConfig+0x8c4>
 8007ffa:	2380      	movs	r3, #128	; 0x80
 8007ffc:	e012      	b.n	8008024 <UART_SetConfig+0x8c4>
 8007ffe:	2340      	movs	r3, #64	; 0x40
 8008000:	e010      	b.n	8008024 <UART_SetConfig+0x8c4>
 8008002:	2320      	movs	r3, #32
 8008004:	e00e      	b.n	8008024 <UART_SetConfig+0x8c4>
 8008006:	2310      	movs	r3, #16
 8008008:	e00c      	b.n	8008024 <UART_SetConfig+0x8c4>
 800800a:	230c      	movs	r3, #12
 800800c:	e00a      	b.n	8008024 <UART_SetConfig+0x8c4>
 800800e:	230a      	movs	r3, #10
 8008010:	e008      	b.n	8008024 <UART_SetConfig+0x8c4>
 8008012:	2308      	movs	r3, #8
 8008014:	e006      	b.n	8008024 <UART_SetConfig+0x8c4>
 8008016:	2306      	movs	r3, #6
 8008018:	e004      	b.n	8008024 <UART_SetConfig+0x8c4>
 800801a:	2304      	movs	r3, #4
 800801c:	e002      	b.n	8008024 <UART_SetConfig+0x8c4>
 800801e:	2302      	movs	r3, #2
 8008020:	e000      	b.n	8008024 <UART_SetConfig+0x8c4>
 8008022:	2301      	movs	r3, #1
 8008024:	fbb2 f3f3 	udiv	r3, r2, r3
 8008028:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
        }
        break;
 800802a:	e116      	b.n	800825a <UART_SetConfig+0xafa>
          lpuart_ker_ck_pres = ((uint32_t) HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d043      	beq.n	80080bc <UART_SetConfig+0x95c>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008038:	2b01      	cmp	r3, #1
 800803a:	d03d      	beq.n	80080b8 <UART_SetConfig+0x958>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008040:	2b02      	cmp	r3, #2
 8008042:	d037      	beq.n	80080b4 <UART_SetConfig+0x954>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008048:	2b03      	cmp	r3, #3
 800804a:	d031      	beq.n	80080b0 <UART_SetConfig+0x950>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008050:	2b04      	cmp	r3, #4
 8008052:	d02b      	beq.n	80080ac <UART_SetConfig+0x94c>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008058:	2b05      	cmp	r3, #5
 800805a:	d025      	beq.n	80080a8 <UART_SetConfig+0x948>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008060:	2b06      	cmp	r3, #6
 8008062:	d01f      	beq.n	80080a4 <UART_SetConfig+0x944>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008068:	2b07      	cmp	r3, #7
 800806a:	d019      	beq.n	80080a0 <UART_SetConfig+0x940>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008070:	2b08      	cmp	r3, #8
 8008072:	d013      	beq.n	800809c <UART_SetConfig+0x93c>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008078:	2b09      	cmp	r3, #9
 800807a:	d00d      	beq.n	8008098 <UART_SetConfig+0x938>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b0a      	cmp	r3, #10
 8008082:	d007      	beq.n	8008094 <UART_SetConfig+0x934>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008088:	2b0b      	cmp	r3, #11
 800808a:	d101      	bne.n	8008090 <UART_SetConfig+0x930>
 800808c:	4b36      	ldr	r3, [pc, #216]	; (8008168 <UART_SetConfig+0xa08>)
 800808e:	e016      	b.n	80080be <UART_SetConfig+0x95e>
 8008090:	4b34      	ldr	r3, [pc, #208]	; (8008164 <UART_SetConfig+0xa04>)
 8008092:	e014      	b.n	80080be <UART_SetConfig+0x95e>
 8008094:	4b35      	ldr	r3, [pc, #212]	; (800816c <UART_SetConfig+0xa0c>)
 8008096:	e012      	b.n	80080be <UART_SetConfig+0x95e>
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <UART_SetConfig+0xa10>)
 800809a:	e010      	b.n	80080be <UART_SetConfig+0x95e>
 800809c:	4b35      	ldr	r3, [pc, #212]	; (8008174 <UART_SetConfig+0xa14>)
 800809e:	e00e      	b.n	80080be <UART_SetConfig+0x95e>
 80080a0:	4b35      	ldr	r3, [pc, #212]	; (8008178 <UART_SetConfig+0xa18>)
 80080a2:	e00c      	b.n	80080be <UART_SetConfig+0x95e>
 80080a4:	4b35      	ldr	r3, [pc, #212]	; (800817c <UART_SetConfig+0xa1c>)
 80080a6:	e00a      	b.n	80080be <UART_SetConfig+0x95e>
 80080a8:	4b35      	ldr	r3, [pc, #212]	; (8008180 <UART_SetConfig+0xa20>)
 80080aa:	e008      	b.n	80080be <UART_SetConfig+0x95e>
 80080ac:	4b35      	ldr	r3, [pc, #212]	; (8008184 <UART_SetConfig+0xa24>)
 80080ae:	e006      	b.n	80080be <UART_SetConfig+0x95e>
 80080b0:	4b35      	ldr	r3, [pc, #212]	; (8008188 <UART_SetConfig+0xa28>)
 80080b2:	e004      	b.n	80080be <UART_SetConfig+0x95e>
 80080b4:	4b35      	ldr	r3, [pc, #212]	; (800818c <UART_SetConfig+0xa2c>)
 80080b6:	e002      	b.n	80080be <UART_SetConfig+0x95e>
 80080b8:	4b35      	ldr	r3, [pc, #212]	; (8008190 <UART_SetConfig+0xa30>)
 80080ba:	e000      	b.n	80080be <UART_SetConfig+0x95e>
 80080bc:	4b29      	ldr	r3, [pc, #164]	; (8008164 <UART_SetConfig+0xa04>)
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80080c0:	e0cb      	b.n	800825a <UART_SetConfig+0xafa>
      case UART_CLOCKSOURCE_CSI:
        lpuart_ker_ck_pres = ((uint32_t)CSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d046      	beq.n	8008158 <UART_SetConfig+0x9f8>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d040      	beq.n	8008154 <UART_SetConfig+0x9f4>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080d6:	2b02      	cmp	r3, #2
 80080d8:	d03a      	beq.n	8008150 <UART_SetConfig+0x9f0>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d034      	beq.n	800814c <UART_SetConfig+0x9ec>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e6:	2b04      	cmp	r3, #4
 80080e8:	d02e      	beq.n	8008148 <UART_SetConfig+0x9e8>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ee:	2b05      	cmp	r3, #5
 80080f0:	d028      	beq.n	8008144 <UART_SetConfig+0x9e4>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f6:	2b06      	cmp	r3, #6
 80080f8:	d022      	beq.n	8008140 <UART_SetConfig+0x9e0>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fe:	2b07      	cmp	r3, #7
 8008100:	d01c      	beq.n	800813c <UART_SetConfig+0x9dc>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008106:	2b08      	cmp	r3, #8
 8008108:	d016      	beq.n	8008138 <UART_SetConfig+0x9d8>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800810e:	2b09      	cmp	r3, #9
 8008110:	d00f      	beq.n	8008132 <UART_SetConfig+0x9d2>
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008116:	2b0a      	cmp	r3, #10
 8008118:	d008      	beq.n	800812c <UART_SetConfig+0x9cc>
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800811e:	2b0b      	cmp	r3, #11
 8008120:	d102      	bne.n	8008128 <UART_SetConfig+0x9c8>
 8008122:	f643 5309 	movw	r3, #15625	; 0x3d09
 8008126:	e018      	b.n	800815a <UART_SetConfig+0x9fa>
 8008128:	4b13      	ldr	r3, [pc, #76]	; (8008178 <UART_SetConfig+0xa18>)
 800812a:	e016      	b.n	800815a <UART_SetConfig+0x9fa>
 800812c:	f647 2312 	movw	r3, #31250	; 0x7a12
 8008130:	e013      	b.n	800815a <UART_SetConfig+0x9fa>
 8008132:	f24f 4324 	movw	r3, #62500	; 0xf424
 8008136:	e010      	b.n	800815a <UART_SetConfig+0x9fa>
 8008138:	4b16      	ldr	r3, [pc, #88]	; (8008194 <UART_SetConfig+0xa34>)
 800813a:	e00e      	b.n	800815a <UART_SetConfig+0x9fa>
 800813c:	4b0a      	ldr	r3, [pc, #40]	; (8008168 <UART_SetConfig+0xa08>)
 800813e:	e00c      	b.n	800815a <UART_SetConfig+0x9fa>
 8008140:	4b15      	ldr	r3, [pc, #84]	; (8008198 <UART_SetConfig+0xa38>)
 8008142:	e00a      	b.n	800815a <UART_SetConfig+0x9fa>
 8008144:	4b15      	ldr	r3, [pc, #84]	; (800819c <UART_SetConfig+0xa3c>)
 8008146:	e008      	b.n	800815a <UART_SetConfig+0x9fa>
 8008148:	4b08      	ldr	r3, [pc, #32]	; (800816c <UART_SetConfig+0xa0c>)
 800814a:	e006      	b.n	800815a <UART_SetConfig+0x9fa>
 800814c:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <UART_SetConfig+0xa40>)
 800814e:	e004      	b.n	800815a <UART_SetConfig+0x9fa>
 8008150:	4b07      	ldr	r3, [pc, #28]	; (8008170 <UART_SetConfig+0xa10>)
 8008152:	e002      	b.n	800815a <UART_SetConfig+0x9fa>
 8008154:	4b07      	ldr	r3, [pc, #28]	; (8008174 <UART_SetConfig+0xa14>)
 8008156:	e000      	b.n	800815a <UART_SetConfig+0x9fa>
 8008158:	4b07      	ldr	r3, [pc, #28]	; (8008178 <UART_SetConfig+0xa18>)
 800815a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800815c:	e07d      	b.n	800825a <UART_SetConfig+0xafa>
 800815e:	bf00      	nop
 8008160:	58024400 	.word	0x58024400
 8008164:	03d09000 	.word	0x03d09000
 8008168:	0003d090 	.word	0x0003d090
 800816c:	0007a120 	.word	0x0007a120
 8008170:	000f4240 	.word	0x000f4240
 8008174:	001e8480 	.word	0x001e8480
 8008178:	003d0900 	.word	0x003d0900
 800817c:	00516155 	.word	0x00516155
 8008180:	0061a800 	.word	0x0061a800
 8008184:	007a1200 	.word	0x007a1200
 8008188:	00a2c2aa 	.word	0x00a2c2aa
 800818c:	00f42400 	.word	0x00f42400
 8008190:	01e84800 	.word	0x01e84800
 8008194:	0001e848 	.word	0x0001e848
 8008198:	00051615 	.word	0x00051615
 800819c:	00061a80 	.word	0x00061a80
 80081a0:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d04e      	beq.n	800824a <UART_SetConfig+0xaea>
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d047      	beq.n	8008244 <UART_SetConfig+0xae4>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b8:	2b02      	cmp	r3, #2
 80081ba:	d040      	beq.n	800823e <UART_SetConfig+0xade>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c0:	2b03      	cmp	r3, #3
 80081c2:	d039      	beq.n	8008238 <UART_SetConfig+0xad8>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c8:	2b04      	cmp	r3, #4
 80081ca:	d032      	beq.n	8008232 <UART_SetConfig+0xad2>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d0:	2b05      	cmp	r3, #5
 80081d2:	d02b      	beq.n	800822c <UART_SetConfig+0xacc>
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d8:	2b06      	cmp	r3, #6
 80081da:	d024      	beq.n	8008226 <UART_SetConfig+0xac6>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e0:	2b07      	cmp	r3, #7
 80081e2:	d01d      	beq.n	8008220 <UART_SetConfig+0xac0>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d016      	beq.n	800821a <UART_SetConfig+0xaba>
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d00f      	beq.n	8008214 <UART_SetConfig+0xab4>
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081f8:	2b0a      	cmp	r3, #10
 80081fa:	d008      	beq.n	800820e <UART_SetConfig+0xaae>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008200:	2b0b      	cmp	r3, #11
 8008202:	d101      	bne.n	8008208 <UART_SetConfig+0xaa8>
 8008204:	2380      	movs	r3, #128	; 0x80
 8008206:	e022      	b.n	800824e <UART_SetConfig+0xaee>
 8008208:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820c:	e01f      	b.n	800824e <UART_SetConfig+0xaee>
 800820e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008212:	e01c      	b.n	800824e <UART_SetConfig+0xaee>
 8008214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008218:	e019      	b.n	800824e <UART_SetConfig+0xaee>
 800821a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800821e:	e016      	b.n	800824e <UART_SetConfig+0xaee>
 8008220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008224:	e013      	b.n	800824e <UART_SetConfig+0xaee>
 8008226:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800822a:	e010      	b.n	800824e <UART_SetConfig+0xaee>
 800822c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8008230:	e00d      	b.n	800824e <UART_SetConfig+0xaee>
 8008232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008236:	e00a      	b.n	800824e <UART_SetConfig+0xaee>
 8008238:	f241 5355 	movw	r3, #5461	; 0x1555
 800823c:	e007      	b.n	800824e <UART_SetConfig+0xaee>
 800823e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008242:	e004      	b.n	800824e <UART_SetConfig+0xaee>
 8008244:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008248:	e001      	b.n	800824e <UART_SetConfig+0xaee>
 800824a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800824e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8008250:	e003      	b.n	800825a <UART_SetConfig+0xafa>
      default:
        ret = HAL_ERROR;
 8008252:	2301      	movs	r3, #1
 8008254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8008258:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	2b00      	cmp	r3, #0
 800825e:	f001 83e8 	beq.w	8009a32 <UART_SetConfig+0x22d2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	4613      	mov	r3, r2
 8008268:	005b      	lsls	r3, r3, #1
 800826a:	4413      	add	r3, r2
 800826c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800826e:	429a      	cmp	r2, r3
 8008270:	d305      	bcc.n	800827e <UART_SetConfig+0xb1e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008278:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800827a:	429a      	cmp	r2, r3
 800827c:	d904      	bls.n	8008288 <UART_SetConfig+0xb28>
      {
        ret = HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008284:	f001 bbd5 	b.w	8009a32 <UART_SetConfig+0x22d2>
      }
      else
      {
        switch (clocksource)
 8008288:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800828c:	2b08      	cmp	r3, #8
 800828e:	f000 8154 	beq.w	800853a <UART_SetConfig+0xdda>
 8008292:	2b08      	cmp	r3, #8
 8008294:	dc06      	bgt.n	80082a4 <UART_SetConfig+0xb44>
 8008296:	2b02      	cmp	r3, #2
 8008298:	d00f      	beq.n	80082ba <UART_SetConfig+0xb5a>
 800829a:	2b04      	cmp	r3, #4
 800829c:	f000 80ac 	beq.w	80083f8 <UART_SetConfig+0xc98>
 80082a0:	f000 bc30 	b.w	8008b04 <UART_SetConfig+0x13a4>
 80082a4:	2b20      	cmp	r3, #32
 80082a6:	f000 832d 	beq.w	8008904 <UART_SetConfig+0x11a4>
 80082aa:	2b40      	cmp	r3, #64	; 0x40
 80082ac:	f000 83a5 	beq.w	80089fa <UART_SetConfig+0x129a>
 80082b0:	2b10      	cmp	r3, #16
 80082b2:	f000 81e3 	beq.w	800867c <UART_SetConfig+0xf1c>
 80082b6:	f000 bc25 	b.w	8008b04 <UART_SetConfig+0x13a4>
        {
          case UART_CLOCKSOURCE_D3PCLK1:
            pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80082ba:	f7fd fc9b 	bl	8005bf4 <HAL_RCCEx_GetD3PCLK1Freq>
 80082be:	62b8      	str	r0, [r7, #40]	; 0x28
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c2:	4618      	mov	r0, r3
 80082c4:	f04f 0100 	mov.w	r1, #0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d067      	beq.n	80083a0 <UART_SetConfig+0xc40>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d05e      	beq.n	8008396 <UART_SetConfig+0xc36>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d055      	beq.n	800838c <UART_SetConfig+0xc2c>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d04c      	beq.n	8008382 <UART_SetConfig+0xc22>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ec:	2b04      	cmp	r3, #4
 80082ee:	d043      	beq.n	8008378 <UART_SetConfig+0xc18>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f4:	2b05      	cmp	r3, #5
 80082f6:	d03a      	beq.n	800836e <UART_SetConfig+0xc0e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082fc:	2b06      	cmp	r3, #6
 80082fe:	d031      	beq.n	8008364 <UART_SetConfig+0xc04>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008304:	2b07      	cmp	r3, #7
 8008306:	d028      	beq.n	800835a <UART_SetConfig+0xbfa>
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800830c:	2b08      	cmp	r3, #8
 800830e:	d01f      	beq.n	8008350 <UART_SetConfig+0xbf0>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	2b09      	cmp	r3, #9
 8008316:	d016      	beq.n	8008346 <UART_SetConfig+0xbe6>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	2b0a      	cmp	r3, #10
 800831e:	d00d      	beq.n	800833c <UART_SetConfig+0xbdc>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008324:	2b0b      	cmp	r3, #11
 8008326:	d104      	bne.n	8008332 <UART_SetConfig+0xbd2>
 8008328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800832c:	f04f 0400 	mov.w	r4, #0
 8008330:	e03a      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008332:	f04f 0301 	mov.w	r3, #1
 8008336:	f04f 0400 	mov.w	r4, #0
 800833a:	e035      	b.n	80083a8 <UART_SetConfig+0xc48>
 800833c:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008340:	f04f 0400 	mov.w	r4, #0
 8008344:	e030      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008346:	f04f 0340 	mov.w	r3, #64	; 0x40
 800834a:	f04f 0400 	mov.w	r4, #0
 800834e:	e02b      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008350:	f04f 0320 	mov.w	r3, #32
 8008354:	f04f 0400 	mov.w	r4, #0
 8008358:	e026      	b.n	80083a8 <UART_SetConfig+0xc48>
 800835a:	f04f 0310 	mov.w	r3, #16
 800835e:	f04f 0400 	mov.w	r4, #0
 8008362:	e021      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008364:	f04f 030c 	mov.w	r3, #12
 8008368:	f04f 0400 	mov.w	r4, #0
 800836c:	e01c      	b.n	80083a8 <UART_SetConfig+0xc48>
 800836e:	f04f 030a 	mov.w	r3, #10
 8008372:	f04f 0400 	mov.w	r4, #0
 8008376:	e017      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008378:	f04f 0308 	mov.w	r3, #8
 800837c:	f04f 0400 	mov.w	r4, #0
 8008380:	e012      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008382:	f04f 0306 	mov.w	r3, #6
 8008386:	f04f 0400 	mov.w	r4, #0
 800838a:	e00d      	b.n	80083a8 <UART_SetConfig+0xc48>
 800838c:	f04f 0304 	mov.w	r3, #4
 8008390:	f04f 0400 	mov.w	r4, #0
 8008394:	e008      	b.n	80083a8 <UART_SetConfig+0xc48>
 8008396:	f04f 0302 	mov.w	r3, #2
 800839a:	f04f 0400 	mov.w	r4, #0
 800839e:	e003      	b.n	80083a8 <UART_SetConfig+0xc48>
 80083a0:	f04f 0301 	mov.w	r3, #1
 80083a4:	f04f 0400 	mov.w	r4, #0
 80083a8:	461a      	mov	r2, r3
 80083aa:	4623      	mov	r3, r4
 80083ac:	f7f7 ff9c 	bl	80002e8 <__aeabi_uldivmod>
 80083b0:	4603      	mov	r3, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	4619      	mov	r1, r3
 80083b6:	4622      	mov	r2, r4
 80083b8:	f04f 0300 	mov.w	r3, #0
 80083bc:	f04f 0400 	mov.w	r4, #0
 80083c0:	0214      	lsls	r4, r2, #8
 80083c2:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80083c6:	020b      	lsls	r3, r1, #8
 80083c8:	687a      	ldr	r2, [r7, #4]
 80083ca:	6852      	ldr	r2, [r2, #4]
 80083cc:	0852      	lsrs	r2, r2, #1
 80083ce:	4611      	mov	r1, r2
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	eb13 0b01 	adds.w	fp, r3, r1
 80083d8:	eb44 0c02 	adc.w	ip, r4, r2
 80083dc:	4658      	mov	r0, fp
 80083de:	4661      	mov	r1, ip
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f04f 0400 	mov.w	r4, #0
 80083e8:	461a      	mov	r2, r3
 80083ea:	4623      	mov	r3, r4
 80083ec:	f7f7 ff7c 	bl	80002e8 <__aeabi_uldivmod>
 80083f0:	4603      	mov	r3, r0
 80083f2:	460c      	mov	r4, r1
 80083f4:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80083f6:	e389      	b.n	8008b0c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL2:
            HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80083f8:	f107 0318 	add.w	r3, r7, #24
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fd fc0f 	bl	8005c20 <HAL_RCCEx_GetPLL2ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	4618      	mov	r0, r3
 8008406:	f04f 0100 	mov.w	r1, #0
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840e:	2b00      	cmp	r3, #0
 8008410:	d067      	beq.n	80084e2 <UART_SetConfig+0xd82>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008416:	2b01      	cmp	r3, #1
 8008418:	d05e      	beq.n	80084d8 <UART_SetConfig+0xd78>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841e:	2b02      	cmp	r3, #2
 8008420:	d055      	beq.n	80084ce <UART_SetConfig+0xd6e>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008426:	2b03      	cmp	r3, #3
 8008428:	d04c      	beq.n	80084c4 <UART_SetConfig+0xd64>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842e:	2b04      	cmp	r3, #4
 8008430:	d043      	beq.n	80084ba <UART_SetConfig+0xd5a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008436:	2b05      	cmp	r3, #5
 8008438:	d03a      	beq.n	80084b0 <UART_SetConfig+0xd50>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800843e:	2b06      	cmp	r3, #6
 8008440:	d031      	beq.n	80084a6 <UART_SetConfig+0xd46>
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008446:	2b07      	cmp	r3, #7
 8008448:	d028      	beq.n	800849c <UART_SetConfig+0xd3c>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	2b08      	cmp	r3, #8
 8008450:	d01f      	beq.n	8008492 <UART_SetConfig+0xd32>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	2b09      	cmp	r3, #9
 8008458:	d016      	beq.n	8008488 <UART_SetConfig+0xd28>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800845e:	2b0a      	cmp	r3, #10
 8008460:	d00d      	beq.n	800847e <UART_SetConfig+0xd1e>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008466:	2b0b      	cmp	r3, #11
 8008468:	d104      	bne.n	8008474 <UART_SetConfig+0xd14>
 800846a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800846e:	f04f 0400 	mov.w	r4, #0
 8008472:	e03a      	b.n	80084ea <UART_SetConfig+0xd8a>
 8008474:	f04f 0301 	mov.w	r3, #1
 8008478:	f04f 0400 	mov.w	r4, #0
 800847c:	e035      	b.n	80084ea <UART_SetConfig+0xd8a>
 800847e:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008482:	f04f 0400 	mov.w	r4, #0
 8008486:	e030      	b.n	80084ea <UART_SetConfig+0xd8a>
 8008488:	f04f 0340 	mov.w	r3, #64	; 0x40
 800848c:	f04f 0400 	mov.w	r4, #0
 8008490:	e02b      	b.n	80084ea <UART_SetConfig+0xd8a>
 8008492:	f04f 0320 	mov.w	r3, #32
 8008496:	f04f 0400 	mov.w	r4, #0
 800849a:	e026      	b.n	80084ea <UART_SetConfig+0xd8a>
 800849c:	f04f 0310 	mov.w	r3, #16
 80084a0:	f04f 0400 	mov.w	r4, #0
 80084a4:	e021      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084a6:	f04f 030c 	mov.w	r3, #12
 80084aa:	f04f 0400 	mov.w	r4, #0
 80084ae:	e01c      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084b0:	f04f 030a 	mov.w	r3, #10
 80084b4:	f04f 0400 	mov.w	r4, #0
 80084b8:	e017      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084ba:	f04f 0308 	mov.w	r3, #8
 80084be:	f04f 0400 	mov.w	r4, #0
 80084c2:	e012      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084c4:	f04f 0306 	mov.w	r3, #6
 80084c8:	f04f 0400 	mov.w	r4, #0
 80084cc:	e00d      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084ce:	f04f 0304 	mov.w	r3, #4
 80084d2:	f04f 0400 	mov.w	r4, #0
 80084d6:	e008      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084d8:	f04f 0302 	mov.w	r3, #2
 80084dc:	f04f 0400 	mov.w	r4, #0
 80084e0:	e003      	b.n	80084ea <UART_SetConfig+0xd8a>
 80084e2:	f04f 0301 	mov.w	r3, #1
 80084e6:	f04f 0400 	mov.w	r4, #0
 80084ea:	461a      	mov	r2, r3
 80084ec:	4623      	mov	r3, r4
 80084ee:	f7f7 fefb 	bl	80002e8 <__aeabi_uldivmod>
 80084f2:	4603      	mov	r3, r0
 80084f4:	460c      	mov	r4, r1
 80084f6:	4619      	mov	r1, r3
 80084f8:	4622      	mov	r2, r4
 80084fa:	f04f 0300 	mov.w	r3, #0
 80084fe:	f04f 0400 	mov.w	r4, #0
 8008502:	0214      	lsls	r4, r2, #8
 8008504:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8008508:	020b      	lsls	r3, r1, #8
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6852      	ldr	r2, [r2, #4]
 800850e:	0852      	lsrs	r2, r2, #1
 8008510:	4611      	mov	r1, r2
 8008512:	f04f 0200 	mov.w	r2, #0
 8008516:	eb13 0b01 	adds.w	fp, r3, r1
 800851a:	eb44 0c02 	adc.w	ip, r4, r2
 800851e:	4658      	mov	r0, fp
 8008520:	4661      	mov	r1, ip
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	685b      	ldr	r3, [r3, #4]
 8008526:	f04f 0400 	mov.w	r4, #0
 800852a:	461a      	mov	r2, r3
 800852c:	4623      	mov	r3, r4
 800852e:	f7f7 fedb 	bl	80002e8 <__aeabi_uldivmod>
 8008532:	4603      	mov	r3, r0
 8008534:	460c      	mov	r4, r1
 8008536:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008538:	e2e8      	b.n	8008b0c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_PLL3:
            HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800853a:	f107 030c 	add.w	r3, r7, #12
 800853e:	4618      	mov	r0, r3
 8008540:	f7fd fcba 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	4618      	mov	r0, r3
 8008548:	f04f 0100 	mov.w	r1, #0
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008550:	2b00      	cmp	r3, #0
 8008552:	d067      	beq.n	8008624 <UART_SetConfig+0xec4>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008558:	2b01      	cmp	r3, #1
 800855a:	d05e      	beq.n	800861a <UART_SetConfig+0xeba>
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008560:	2b02      	cmp	r3, #2
 8008562:	d055      	beq.n	8008610 <UART_SetConfig+0xeb0>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008568:	2b03      	cmp	r3, #3
 800856a:	d04c      	beq.n	8008606 <UART_SetConfig+0xea6>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	2b04      	cmp	r3, #4
 8008572:	d043      	beq.n	80085fc <UART_SetConfig+0xe9c>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008578:	2b05      	cmp	r3, #5
 800857a:	d03a      	beq.n	80085f2 <UART_SetConfig+0xe92>
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008580:	2b06      	cmp	r3, #6
 8008582:	d031      	beq.n	80085e8 <UART_SetConfig+0xe88>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008588:	2b07      	cmp	r3, #7
 800858a:	d028      	beq.n	80085de <UART_SetConfig+0xe7e>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008590:	2b08      	cmp	r3, #8
 8008592:	d01f      	beq.n	80085d4 <UART_SetConfig+0xe74>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008598:	2b09      	cmp	r3, #9
 800859a:	d016      	beq.n	80085ca <UART_SetConfig+0xe6a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a0:	2b0a      	cmp	r3, #10
 80085a2:	d00d      	beq.n	80085c0 <UART_SetConfig+0xe60>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a8:	2b0b      	cmp	r3, #11
 80085aa:	d104      	bne.n	80085b6 <UART_SetConfig+0xe56>
 80085ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80085b0:	f04f 0400 	mov.w	r4, #0
 80085b4:	e03a      	b.n	800862c <UART_SetConfig+0xecc>
 80085b6:	f04f 0301 	mov.w	r3, #1
 80085ba:	f04f 0400 	mov.w	r4, #0
 80085be:	e035      	b.n	800862c <UART_SetConfig+0xecc>
 80085c0:	f04f 0380 	mov.w	r3, #128	; 0x80
 80085c4:	f04f 0400 	mov.w	r4, #0
 80085c8:	e030      	b.n	800862c <UART_SetConfig+0xecc>
 80085ca:	f04f 0340 	mov.w	r3, #64	; 0x40
 80085ce:	f04f 0400 	mov.w	r4, #0
 80085d2:	e02b      	b.n	800862c <UART_SetConfig+0xecc>
 80085d4:	f04f 0320 	mov.w	r3, #32
 80085d8:	f04f 0400 	mov.w	r4, #0
 80085dc:	e026      	b.n	800862c <UART_SetConfig+0xecc>
 80085de:	f04f 0310 	mov.w	r3, #16
 80085e2:	f04f 0400 	mov.w	r4, #0
 80085e6:	e021      	b.n	800862c <UART_SetConfig+0xecc>
 80085e8:	f04f 030c 	mov.w	r3, #12
 80085ec:	f04f 0400 	mov.w	r4, #0
 80085f0:	e01c      	b.n	800862c <UART_SetConfig+0xecc>
 80085f2:	f04f 030a 	mov.w	r3, #10
 80085f6:	f04f 0400 	mov.w	r4, #0
 80085fa:	e017      	b.n	800862c <UART_SetConfig+0xecc>
 80085fc:	f04f 0308 	mov.w	r3, #8
 8008600:	f04f 0400 	mov.w	r4, #0
 8008604:	e012      	b.n	800862c <UART_SetConfig+0xecc>
 8008606:	f04f 0306 	mov.w	r3, #6
 800860a:	f04f 0400 	mov.w	r4, #0
 800860e:	e00d      	b.n	800862c <UART_SetConfig+0xecc>
 8008610:	f04f 0304 	mov.w	r3, #4
 8008614:	f04f 0400 	mov.w	r4, #0
 8008618:	e008      	b.n	800862c <UART_SetConfig+0xecc>
 800861a:	f04f 0302 	mov.w	r3, #2
 800861e:	f04f 0400 	mov.w	r4, #0
 8008622:	e003      	b.n	800862c <UART_SetConfig+0xecc>
 8008624:	f04f 0301 	mov.w	r3, #1
 8008628:	f04f 0400 	mov.w	r4, #0
 800862c:	461a      	mov	r2, r3
 800862e:	4623      	mov	r3, r4
 8008630:	f7f7 fe5a 	bl	80002e8 <__aeabi_uldivmod>
 8008634:	4603      	mov	r3, r0
 8008636:	460c      	mov	r4, r1
 8008638:	4619      	mov	r1, r3
 800863a:	4622      	mov	r2, r4
 800863c:	f04f 0300 	mov.w	r3, #0
 8008640:	f04f 0400 	mov.w	r4, #0
 8008644:	0214      	lsls	r4, r2, #8
 8008646:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800864a:	020b      	lsls	r3, r1, #8
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	6852      	ldr	r2, [r2, #4]
 8008650:	0852      	lsrs	r2, r2, #1
 8008652:	4611      	mov	r1, r2
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	eb13 0b01 	adds.w	fp, r3, r1
 800865c:	eb44 0c02 	adc.w	ip, r4, r2
 8008660:	4658      	mov	r0, fp
 8008662:	4661      	mov	r1, ip
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f04f 0400 	mov.w	r4, #0
 800866c:	461a      	mov	r2, r3
 800866e:	4623      	mov	r3, r4
 8008670:	f7f7 fe3a 	bl	80002e8 <__aeabi_uldivmod>
 8008674:	4603      	mov	r3, r0
 8008676:	460c      	mov	r4, r1
 8008678:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 800867a:	e247      	b.n	8008b0c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_HSI:
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800867c:	4b96      	ldr	r3, [pc, #600]	; (80088d8 <UART_SetConfig+0x1178>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f003 0320 	and.w	r3, r3, #32
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 80a3 	beq.w	80087d0 <UART_SetConfig+0x1070>
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART((uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800868a:	4b93      	ldr	r3, [pc, #588]	; (80088d8 <UART_SetConfig+0x1178>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	08db      	lsrs	r3, r3, #3
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	4a91      	ldr	r2, [pc, #580]	; (80088dc <UART_SetConfig+0x117c>)
 8008696:	fa22 f303 	lsr.w	r3, r2, r3
 800869a:	4618      	mov	r0, r3
 800869c:	f04f 0100 	mov.w	r1, #0
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d067      	beq.n	8008778 <UART_SetConfig+0x1018>
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d05e      	beq.n	800876e <UART_SetConfig+0x100e>
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086b4:	2b02      	cmp	r3, #2
 80086b6:	d055      	beq.n	8008764 <UART_SetConfig+0x1004>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	2b03      	cmp	r3, #3
 80086be:	d04c      	beq.n	800875a <UART_SetConfig+0xffa>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d043      	beq.n	8008750 <UART_SetConfig+0xff0>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086cc:	2b05      	cmp	r3, #5
 80086ce:	d03a      	beq.n	8008746 <UART_SetConfig+0xfe6>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086d4:	2b06      	cmp	r3, #6
 80086d6:	d031      	beq.n	800873c <UART_SetConfig+0xfdc>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086dc:	2b07      	cmp	r3, #7
 80086de:	d028      	beq.n	8008732 <UART_SetConfig+0xfd2>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d01f      	beq.n	8008728 <UART_SetConfig+0xfc8>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d016      	beq.n	800871e <UART_SetConfig+0xfbe>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	2b0a      	cmp	r3, #10
 80086f6:	d00d      	beq.n	8008714 <UART_SetConfig+0xfb4>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fc:	2b0b      	cmp	r3, #11
 80086fe:	d104      	bne.n	800870a <UART_SetConfig+0xfaa>
 8008700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008704:	f04f 0400 	mov.w	r4, #0
 8008708:	e03a      	b.n	8008780 <UART_SetConfig+0x1020>
 800870a:	f04f 0301 	mov.w	r3, #1
 800870e:	f04f 0400 	mov.w	r4, #0
 8008712:	e035      	b.n	8008780 <UART_SetConfig+0x1020>
 8008714:	f04f 0380 	mov.w	r3, #128	; 0x80
 8008718:	f04f 0400 	mov.w	r4, #0
 800871c:	e030      	b.n	8008780 <UART_SetConfig+0x1020>
 800871e:	f04f 0340 	mov.w	r3, #64	; 0x40
 8008722:	f04f 0400 	mov.w	r4, #0
 8008726:	e02b      	b.n	8008780 <UART_SetConfig+0x1020>
 8008728:	f04f 0320 	mov.w	r3, #32
 800872c:	f04f 0400 	mov.w	r4, #0
 8008730:	e026      	b.n	8008780 <UART_SetConfig+0x1020>
 8008732:	f04f 0310 	mov.w	r3, #16
 8008736:	f04f 0400 	mov.w	r4, #0
 800873a:	e021      	b.n	8008780 <UART_SetConfig+0x1020>
 800873c:	f04f 030c 	mov.w	r3, #12
 8008740:	f04f 0400 	mov.w	r4, #0
 8008744:	e01c      	b.n	8008780 <UART_SetConfig+0x1020>
 8008746:	f04f 030a 	mov.w	r3, #10
 800874a:	f04f 0400 	mov.w	r4, #0
 800874e:	e017      	b.n	8008780 <UART_SetConfig+0x1020>
 8008750:	f04f 0308 	mov.w	r3, #8
 8008754:	f04f 0400 	mov.w	r4, #0
 8008758:	e012      	b.n	8008780 <UART_SetConfig+0x1020>
 800875a:	f04f 0306 	mov.w	r3, #6
 800875e:	f04f 0400 	mov.w	r4, #0
 8008762:	e00d      	b.n	8008780 <UART_SetConfig+0x1020>
 8008764:	f04f 0304 	mov.w	r3, #4
 8008768:	f04f 0400 	mov.w	r4, #0
 800876c:	e008      	b.n	8008780 <UART_SetConfig+0x1020>
 800876e:	f04f 0302 	mov.w	r3, #2
 8008772:	f04f 0400 	mov.w	r4, #0
 8008776:	e003      	b.n	8008780 <UART_SetConfig+0x1020>
 8008778:	f04f 0301 	mov.w	r3, #1
 800877c:	f04f 0400 	mov.w	r4, #0
 8008780:	461a      	mov	r2, r3
 8008782:	4623      	mov	r3, r4
 8008784:	f7f7 fdb0 	bl	80002e8 <__aeabi_uldivmod>
 8008788:	4603      	mov	r3, r0
 800878a:	460c      	mov	r4, r1
 800878c:	4619      	mov	r1, r3
 800878e:	4622      	mov	r2, r4
 8008790:	f04f 0300 	mov.w	r3, #0
 8008794:	f04f 0400 	mov.w	r4, #0
 8008798:	0214      	lsls	r4, r2, #8
 800879a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800879e:	020b      	lsls	r3, r1, #8
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6852      	ldr	r2, [r2, #4]
 80087a4:	0852      	lsrs	r2, r2, #1
 80087a6:	4611      	mov	r1, r2
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	eb13 0b01 	adds.w	fp, r3, r1
 80087b0:	eb44 0c02 	adc.w	ip, r4, r2
 80087b4:	4658      	mov	r0, fp
 80087b6:	4661      	mov	r1, ip
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	f04f 0400 	mov.w	r4, #0
 80087c0:	461a      	mov	r2, r3
 80087c2:	4623      	mov	r3, r4
 80087c4:	f7f7 fd90 	bl	80002e8 <__aeabi_uldivmod>
 80087c8:	4603      	mov	r3, r0
 80087ca:	460c      	mov	r4, r1
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
            }
            else
            {
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
            }
            break;
 80087ce:	e19d      	b.n	8008b0c <UART_SetConfig+0x13ac>
              usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d05b      	beq.n	8008890 <UART_SetConfig+0x1130>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d053      	beq.n	8008888 <UART_SetConfig+0x1128>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d04b      	beq.n	8008880 <UART_SetConfig+0x1120>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ec:	2b03      	cmp	r3, #3
 80087ee:	d043      	beq.n	8008878 <UART_SetConfig+0x1118>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d03b      	beq.n	8008870 <UART_SetConfig+0x1110>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d033      	beq.n	8008868 <UART_SetConfig+0x1108>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008804:	2b06      	cmp	r3, #6
 8008806:	d02b      	beq.n	8008860 <UART_SetConfig+0x1100>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800880c:	2b07      	cmp	r3, #7
 800880e:	d023      	beq.n	8008858 <UART_SetConfig+0x10f8>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008814:	2b08      	cmp	r3, #8
 8008816:	d01b      	beq.n	8008850 <UART_SetConfig+0x10f0>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881c:	2b09      	cmp	r3, #9
 800881e:	d013      	beq.n	8008848 <UART_SetConfig+0x10e8>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008824:	2b0a      	cmp	r3, #10
 8008826:	d00b      	beq.n	8008840 <UART_SetConfig+0x10e0>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800882c:	2b0b      	cmp	r3, #11
 800882e:	d103      	bne.n	8008838 <UART_SetConfig+0x10d8>
 8008830:	4b2a      	ldr	r3, [pc, #168]	; (80088dc <UART_SetConfig+0x117c>)
 8008832:	f04f 0400 	mov.w	r4, #0
 8008836:	e02e      	b.n	8008896 <UART_SetConfig+0x1136>
 8008838:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <UART_SetConfig+0x1180>)
 800883a:	f04f 0403 	mov.w	r4, #3
 800883e:	e02a      	b.n	8008896 <UART_SetConfig+0x1136>
 8008840:	4b28      	ldr	r3, [pc, #160]	; (80088e4 <UART_SetConfig+0x1184>)
 8008842:	f04f 0400 	mov.w	r4, #0
 8008846:	e026      	b.n	8008896 <UART_SetConfig+0x1136>
 8008848:	4b27      	ldr	r3, [pc, #156]	; (80088e8 <UART_SetConfig+0x1188>)
 800884a:	f04f 0400 	mov.w	r4, #0
 800884e:	e022      	b.n	8008896 <UART_SetConfig+0x1136>
 8008850:	4b26      	ldr	r3, [pc, #152]	; (80088ec <UART_SetConfig+0x118c>)
 8008852:	f04f 0400 	mov.w	r4, #0
 8008856:	e01e      	b.n	8008896 <UART_SetConfig+0x1136>
 8008858:	4b25      	ldr	r3, [pc, #148]	; (80088f0 <UART_SetConfig+0x1190>)
 800885a:	f04f 0400 	mov.w	r4, #0
 800885e:	e01a      	b.n	8008896 <UART_SetConfig+0x1136>
 8008860:	a419      	add	r4, pc, #100	; (adr r4, 80088c8 <UART_SetConfig+0x1168>)
 8008862:	e9d4 3400 	ldrd	r3, r4, [r4]
 8008866:	e016      	b.n	8008896 <UART_SetConfig+0x1136>
 8008868:	4b22      	ldr	r3, [pc, #136]	; (80088f4 <UART_SetConfig+0x1194>)
 800886a:	f04f 0400 	mov.w	r4, #0
 800886e:	e012      	b.n	8008896 <UART_SetConfig+0x1136>
 8008870:	4b21      	ldr	r3, [pc, #132]	; (80088f8 <UART_SetConfig+0x1198>)
 8008872:	f04f 0400 	mov.w	r4, #0
 8008876:	e00e      	b.n	8008896 <UART_SetConfig+0x1136>
 8008878:	a415      	add	r4, pc, #84	; (adr r4, 80088d0 <UART_SetConfig+0x1170>)
 800887a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800887e:	e00a      	b.n	8008896 <UART_SetConfig+0x1136>
 8008880:	4b1e      	ldr	r3, [pc, #120]	; (80088fc <UART_SetConfig+0x119c>)
 8008882:	f04f 0400 	mov.w	r4, #0
 8008886:	e006      	b.n	8008896 <UART_SetConfig+0x1136>
 8008888:	4b1d      	ldr	r3, [pc, #116]	; (8008900 <UART_SetConfig+0x11a0>)
 800888a:	f04f 0401 	mov.w	r4, #1
 800888e:	e002      	b.n	8008896 <UART_SetConfig+0x1136>
 8008890:	4b13      	ldr	r3, [pc, #76]	; (80088e0 <UART_SetConfig+0x1180>)
 8008892:	f04f 0403 	mov.w	r4, #3
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	6852      	ldr	r2, [r2, #4]
 800889a:	0852      	lsrs	r2, r2, #1
 800889c:	4611      	mov	r1, r2
 800889e:	f04f 0200 	mov.w	r2, #0
 80088a2:	eb13 0b01 	adds.w	fp, r3, r1
 80088a6:	eb44 0c02 	adc.w	ip, r4, r2
 80088aa:	4658      	mov	r0, fp
 80088ac:	4661      	mov	r1, ip
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	f04f 0400 	mov.w	r4, #0
 80088b6:	461a      	mov	r2, r3
 80088b8:	4623      	mov	r3, r4
 80088ba:	f7f7 fd15 	bl	80002e8 <__aeabi_uldivmod>
 80088be:	4603      	mov	r3, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80088c4:	e122      	b.n	8008b0c <UART_SetConfig+0x13ac>
 80088c6:	bf00      	nop
 80088c8:	51615500 	.word	0x51615500
 80088cc:	00000000 	.word	0x00000000
 80088d0:	a2c2aa00 	.word	0xa2c2aa00
 80088d4:	00000000 	.word	0x00000000
 80088d8:	58024400 	.word	0x58024400
 80088dc:	03d09000 	.word	0x03d09000
 80088e0:	d0900000 	.word	0xd0900000
 80088e4:	07a12000 	.word	0x07a12000
 80088e8:	0f424000 	.word	0x0f424000
 80088ec:	1e848000 	.word	0x1e848000
 80088f0:	3d090000 	.word	0x3d090000
 80088f4:	61a80000 	.word	0x61a80000
 80088f8:	7a120000 	.word	0x7a120000
 80088fc:	f4240000 	.word	0xf4240000
 8008900:	e8480000 	.word	0xe8480000
          case UART_CLOCKSOURCE_CSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008908:	2b00      	cmp	r3, #0
 800890a:	d05b      	beq.n	80089c4 <UART_SetConfig+0x1264>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008910:	2b01      	cmp	r3, #1
 8008912:	d053      	beq.n	80089bc <UART_SetConfig+0x125c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008918:	2b02      	cmp	r3, #2
 800891a:	d04b      	beq.n	80089b4 <UART_SetConfig+0x1254>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008920:	2b03      	cmp	r3, #3
 8008922:	d043      	beq.n	80089ac <UART_SetConfig+0x124c>
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008928:	2b04      	cmp	r3, #4
 800892a:	d03b      	beq.n	80089a4 <UART_SetConfig+0x1244>
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	2b05      	cmp	r3, #5
 8008932:	d033      	beq.n	800899c <UART_SetConfig+0x123c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008938:	2b06      	cmp	r3, #6
 800893a:	d02b      	beq.n	8008994 <UART_SetConfig+0x1234>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008940:	2b07      	cmp	r3, #7
 8008942:	d023      	beq.n	800898c <UART_SetConfig+0x122c>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008948:	2b08      	cmp	r3, #8
 800894a:	d01b      	beq.n	8008984 <UART_SetConfig+0x1224>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	2b09      	cmp	r3, #9
 8008952:	d013      	beq.n	800897c <UART_SetConfig+0x121c>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008958:	2b0a      	cmp	r3, #10
 800895a:	d00b      	beq.n	8008974 <UART_SetConfig+0x1214>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2b0b      	cmp	r3, #11
 8008962:	d103      	bne.n	800896c <UART_SetConfig+0x120c>
 8008964:	4bc0      	ldr	r3, [pc, #768]	; (8008c68 <UART_SetConfig+0x1508>)
 8008966:	f04f 0400 	mov.w	r4, #0
 800896a:	e02e      	b.n	80089ca <UART_SetConfig+0x126a>
 800896c:	4bbf      	ldr	r3, [pc, #764]	; (8008c6c <UART_SetConfig+0x150c>)
 800896e:	f04f 0400 	mov.w	r4, #0
 8008972:	e02a      	b.n	80089ca <UART_SetConfig+0x126a>
 8008974:	4bbe      	ldr	r3, [pc, #760]	; (8008c70 <UART_SetConfig+0x1510>)
 8008976:	f04f 0400 	mov.w	r4, #0
 800897a:	e026      	b.n	80089ca <UART_SetConfig+0x126a>
 800897c:	4bbd      	ldr	r3, [pc, #756]	; (8008c74 <UART_SetConfig+0x1514>)
 800897e:	f04f 0400 	mov.w	r4, #0
 8008982:	e022      	b.n	80089ca <UART_SetConfig+0x126a>
 8008984:	4bbc      	ldr	r3, [pc, #752]	; (8008c78 <UART_SetConfig+0x1518>)
 8008986:	f04f 0400 	mov.w	r4, #0
 800898a:	e01e      	b.n	80089ca <UART_SetConfig+0x126a>
 800898c:	4bbb      	ldr	r3, [pc, #748]	; (8008c7c <UART_SetConfig+0x151c>)
 800898e:	f04f 0400 	mov.w	r4, #0
 8008992:	e01a      	b.n	80089ca <UART_SetConfig+0x126a>
 8008994:	a4b0      	add	r4, pc, #704	; (adr r4, 8008c58 <UART_SetConfig+0x14f8>)
 8008996:	e9d4 3400 	ldrd	r3, r4, [r4]
 800899a:	e016      	b.n	80089ca <UART_SetConfig+0x126a>
 800899c:	4bb8      	ldr	r3, [pc, #736]	; (8008c80 <UART_SetConfig+0x1520>)
 800899e:	f04f 0400 	mov.w	r4, #0
 80089a2:	e012      	b.n	80089ca <UART_SetConfig+0x126a>
 80089a4:	4bb7      	ldr	r3, [pc, #732]	; (8008c84 <UART_SetConfig+0x1524>)
 80089a6:	f04f 0400 	mov.w	r4, #0
 80089aa:	e00e      	b.n	80089ca <UART_SetConfig+0x126a>
 80089ac:	a4ac      	add	r4, pc, #688	; (adr r4, 8008c60 <UART_SetConfig+0x1500>)
 80089ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80089b2:	e00a      	b.n	80089ca <UART_SetConfig+0x126a>
 80089b4:	4bb4      	ldr	r3, [pc, #720]	; (8008c88 <UART_SetConfig+0x1528>)
 80089b6:	f04f 0400 	mov.w	r4, #0
 80089ba:	e006      	b.n	80089ca <UART_SetConfig+0x126a>
 80089bc:	4bb3      	ldr	r3, [pc, #716]	; (8008c8c <UART_SetConfig+0x152c>)
 80089be:	f04f 0400 	mov.w	r4, #0
 80089c2:	e002      	b.n	80089ca <UART_SetConfig+0x126a>
 80089c4:	4ba9      	ldr	r3, [pc, #676]	; (8008c6c <UART_SetConfig+0x150c>)
 80089c6:	f04f 0400 	mov.w	r4, #0
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	6852      	ldr	r2, [r2, #4]
 80089ce:	0852      	lsrs	r2, r2, #1
 80089d0:	4611      	mov	r1, r2
 80089d2:	f04f 0200 	mov.w	r2, #0
 80089d6:	eb13 0b01 	adds.w	fp, r3, r1
 80089da:	eb44 0c02 	adc.w	ip, r4, r2
 80089de:	4658      	mov	r0, fp
 80089e0:	4661      	mov	r1, ip
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	685b      	ldr	r3, [r3, #4]
 80089e6:	f04f 0400 	mov.w	r4, #0
 80089ea:	461a      	mov	r2, r3
 80089ec:	4623      	mov	r3, r4
 80089ee:	f7f7 fc7b 	bl	80002e8 <__aeabi_uldivmod>
 80089f2:	4603      	mov	r3, r0
 80089f4:	460c      	mov	r4, r1
 80089f6:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 80089f8:	e088      	b.n	8008b0c <UART_SetConfig+0x13ac>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d064      	beq.n	8008acc <UART_SetConfig+0x136c>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d05b      	beq.n	8008ac2 <UART_SetConfig+0x1362>
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d052      	beq.n	8008ab8 <UART_SetConfig+0x1358>
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a16:	2b03      	cmp	r3, #3
 8008a18:	d04a      	beq.n	8008ab0 <UART_SetConfig+0x1350>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	d041      	beq.n	8008aa6 <UART_SetConfig+0x1346>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a26:	2b05      	cmp	r3, #5
 8008a28:	d039      	beq.n	8008a9e <UART_SetConfig+0x133e>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	2b06      	cmp	r3, #6
 8008a30:	d031      	beq.n	8008a96 <UART_SetConfig+0x1336>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a36:	2b07      	cmp	r3, #7
 8008a38:	d028      	beq.n	8008a8c <UART_SetConfig+0x132c>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	2b08      	cmp	r3, #8
 8008a40:	d01f      	beq.n	8008a82 <UART_SetConfig+0x1322>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a46:	2b09      	cmp	r3, #9
 8008a48:	d016      	beq.n	8008a78 <UART_SetConfig+0x1318>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a4e:	2b0a      	cmp	r3, #10
 8008a50:	d00d      	beq.n	8008a6e <UART_SetConfig+0x130e>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a56:	2b0b      	cmp	r3, #11
 8008a58:	d104      	bne.n	8008a64 <UART_SetConfig+0x1304>
 8008a5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a5e:	f04f 0400 	mov.w	r4, #0
 8008a62:	e037      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008a68:	f04f 0400 	mov.w	r4, #0
 8008a6c:	e032      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008a72:	f04f 0400 	mov.w	r4, #0
 8008a76:	e02d      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a78:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008a7c:	f04f 0400 	mov.w	r4, #0
 8008a80:	e028      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a82:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a86:	f04f 0400 	mov.w	r4, #0
 8008a8a:	e023      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a8c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008a90:	f04f 0400 	mov.w	r4, #0
 8008a94:	e01e      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a96:	4b7e      	ldr	r3, [pc, #504]	; (8008c90 <UART_SetConfig+0x1530>)
 8008a98:	f04f 0400 	mov.w	r4, #0
 8008a9c:	e01a      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008a9e:	4b7d      	ldr	r3, [pc, #500]	; (8008c94 <UART_SetConfig+0x1534>)
 8008aa0:	f04f 0400 	mov.w	r4, #0
 8008aa4:	e016      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008aa6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008aaa:	f04f 0400 	mov.w	r4, #0
 8008aae:	e011      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008ab0:	4b79      	ldr	r3, [pc, #484]	; (8008c98 <UART_SetConfig+0x1538>)
 8008ab2:	f04f 0400 	mov.w	r4, #0
 8008ab6:	e00d      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008ab8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008abc:	f04f 0400 	mov.w	r4, #0
 8008ac0:	e008      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008ac2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008ac6:	f04f 0400 	mov.w	r4, #0
 8008aca:	e003      	b.n	8008ad4 <UART_SetConfig+0x1374>
 8008acc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008ad0:	f04f 0400 	mov.w	r4, #0
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	6852      	ldr	r2, [r2, #4]
 8008ad8:	0852      	lsrs	r2, r2, #1
 8008ada:	4611      	mov	r1, r2
 8008adc:	f04f 0200 	mov.w	r2, #0
 8008ae0:	eb13 0b01 	adds.w	fp, r3, r1
 8008ae4:	eb44 0c02 	adc.w	ip, r4, r2
 8008ae8:	4658      	mov	r0, fp
 8008aea:	4661      	mov	r1, ip
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	f04f 0400 	mov.w	r4, #0
 8008af4:	461a      	mov	r2, r3
 8008af6:	4623      	mov	r3, r4
 8008af8:	f7f7 fbf6 	bl	80002e8 <__aeabi_uldivmod>
 8008afc:	4603      	mov	r3, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	637b      	str	r3, [r7, #52]	; 0x34
            break;
 8008b02:	e003      	b.n	8008b0c <UART_SetConfig+0x13ac>
          default:
            ret = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            break;
 8008b0a:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008b12:	d309      	bcc.n	8008b28 <UART_SetConfig+0x13c8>
 8008b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b1a:	d205      	bcs.n	8008b28 <UART_SetConfig+0x13c8>
        {
          huart->Instance->BRR = usartdiv;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b22:	60da      	str	r2, [r3, #12]
 8008b24:	f000 bf85 	b.w	8009a32 <UART_SetConfig+0x22d2>
        }
        else
        {
          ret = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008b2e:	f000 bf80 	b.w	8009a32 <UART_SetConfig+0x22d2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b3a:	f040 83da 	bne.w	80092f2 <UART_SetConfig+0x1b92>
  {
    switch (clocksource)
 8008b3e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008b42:	2b40      	cmp	r3, #64	; 0x40
 8008b44:	f200 83b3 	bhi.w	80092ae <UART_SetConfig+0x1b4e>
 8008b48:	a201      	add	r2, pc, #4	; (adr r2, 8008b50 <UART_SetConfig+0x13f0>)
 8008b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4e:	bf00      	nop
 8008b50:	08008c9d 	.word	0x08008c9d
 8008b54:	08008d55 	.word	0x08008d55
 8008b58:	080092af 	.word	0x080092af
 8008b5c:	080092af 	.word	0x080092af
 8008b60:	08008e0d 	.word	0x08008e0d
 8008b64:	080092af 	.word	0x080092af
 8008b68:	080092af 	.word	0x080092af
 8008b6c:	080092af 	.word	0x080092af
 8008b70:	08008ec9 	.word	0x08008ec9
 8008b74:	080092af 	.word	0x080092af
 8008b78:	080092af 	.word	0x080092af
 8008b7c:	080092af 	.word	0x080092af
 8008b80:	080092af 	.word	0x080092af
 8008b84:	080092af 	.word	0x080092af
 8008b88:	080092af 	.word	0x080092af
 8008b8c:	080092af 	.word	0x080092af
 8008b90:	08008f85 	.word	0x08008f85
 8008b94:	080092af 	.word	0x080092af
 8008b98:	080092af 	.word	0x080092af
 8008b9c:	080092af 	.word	0x080092af
 8008ba0:	080092af 	.word	0x080092af
 8008ba4:	080092af 	.word	0x080092af
 8008ba8:	080092af 	.word	0x080092af
 8008bac:	080092af 	.word	0x080092af
 8008bb0:	080092af 	.word	0x080092af
 8008bb4:	080092af 	.word	0x080092af
 8008bb8:	080092af 	.word	0x080092af
 8008bbc:	080092af 	.word	0x080092af
 8008bc0:	080092af 	.word	0x080092af
 8008bc4:	080092af 	.word	0x080092af
 8008bc8:	080092af 	.word	0x080092af
 8008bcc:	080092af 	.word	0x080092af
 8008bd0:	080090f7 	.word	0x080090f7
 8008bd4:	080092af 	.word	0x080092af
 8008bd8:	080092af 	.word	0x080092af
 8008bdc:	080092af 	.word	0x080092af
 8008be0:	080092af 	.word	0x080092af
 8008be4:	080092af 	.word	0x080092af
 8008be8:	080092af 	.word	0x080092af
 8008bec:	080092af 	.word	0x080092af
 8008bf0:	080092af 	.word	0x080092af
 8008bf4:	080092af 	.word	0x080092af
 8008bf8:	080092af 	.word	0x080092af
 8008bfc:	080092af 	.word	0x080092af
 8008c00:	080092af 	.word	0x080092af
 8008c04:	080092af 	.word	0x080092af
 8008c08:	080092af 	.word	0x080092af
 8008c0c:	080092af 	.word	0x080092af
 8008c10:	080092af 	.word	0x080092af
 8008c14:	080092af 	.word	0x080092af
 8008c18:	080092af 	.word	0x080092af
 8008c1c:	080092af 	.word	0x080092af
 8008c20:	080092af 	.word	0x080092af
 8008c24:	080092af 	.word	0x080092af
 8008c28:	080092af 	.word	0x080092af
 8008c2c:	080092af 	.word	0x080092af
 8008c30:	080092af 	.word	0x080092af
 8008c34:	080092af 	.word	0x080092af
 8008c38:	080092af 	.word	0x080092af
 8008c3c:	080092af 	.word	0x080092af
 8008c40:	080092af 	.word	0x080092af
 8008c44:	080092af 	.word	0x080092af
 8008c48:	080092af 	.word	0x080092af
 8008c4c:	080092af 	.word	0x080092af
 8008c50:	080091ed 	.word	0x080091ed
 8008c54:	f3af 8000 	nop.w
 8008c58:	05161500 	.word	0x05161500
 8008c5c:	00000000 	.word	0x00000000
 8008c60:	0a2c2a00 	.word	0x0a2c2a00
 8008c64:	00000000 	.word	0x00000000
 8008c68:	003d0900 	.word	0x003d0900
 8008c6c:	3d090000 	.word	0x3d090000
 8008c70:	007a1200 	.word	0x007a1200
 8008c74:	00f42400 	.word	0x00f42400
 8008c78:	01e84800 	.word	0x01e84800
 8008c7c:	03d09000 	.word	0x03d09000
 8008c80:	061a8000 	.word	0x061a8000
 8008c84:	07a12000 	.word	0x07a12000
 8008c88:	0f424000 	.word	0x0f424000
 8008c8c:	1e848000 	.word	0x1e848000
 8008c90:	000aaa00 	.word	0x000aaa00
 8008c94:	000ccc00 	.word	0x000ccc00
 8008c98:	00155500 	.word	0x00155500
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008c9c:	f7fc f8a0 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8008ca0:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d044      	beq.n	8008d34 <UART_SetConfig+0x15d4>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	2b01      	cmp	r3, #1
 8008cb0:	d03e      	beq.n	8008d30 <UART_SetConfig+0x15d0>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d038      	beq.n	8008d2c <UART_SetConfig+0x15cc>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d032      	beq.n	8008d28 <UART_SetConfig+0x15c8>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc6:	2b04      	cmp	r3, #4
 8008cc8:	d02c      	beq.n	8008d24 <UART_SetConfig+0x15c4>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cce:	2b05      	cmp	r3, #5
 8008cd0:	d026      	beq.n	8008d20 <UART_SetConfig+0x15c0>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd6:	2b06      	cmp	r3, #6
 8008cd8:	d020      	beq.n	8008d1c <UART_SetConfig+0x15bc>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cde:	2b07      	cmp	r3, #7
 8008ce0:	d01a      	beq.n	8008d18 <UART_SetConfig+0x15b8>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce6:	2b08      	cmp	r3, #8
 8008ce8:	d014      	beq.n	8008d14 <UART_SetConfig+0x15b4>
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	2b09      	cmp	r3, #9
 8008cf0:	d00e      	beq.n	8008d10 <UART_SetConfig+0x15b0>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	2b0a      	cmp	r3, #10
 8008cf8:	d008      	beq.n	8008d0c <UART_SetConfig+0x15ac>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cfe:	2b0b      	cmp	r3, #11
 8008d00:	d102      	bne.n	8008d08 <UART_SetConfig+0x15a8>
 8008d02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d06:	e016      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	e014      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d0c:	2380      	movs	r3, #128	; 0x80
 8008d0e:	e012      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d10:	2340      	movs	r3, #64	; 0x40
 8008d12:	e010      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d14:	2320      	movs	r3, #32
 8008d16:	e00e      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d18:	2310      	movs	r3, #16
 8008d1a:	e00c      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d1c:	230c      	movs	r3, #12
 8008d1e:	e00a      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d20:	230a      	movs	r3, #10
 8008d22:	e008      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d24:	2308      	movs	r3, #8
 8008d26:	e006      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d28:	2306      	movs	r3, #6
 8008d2a:	e004      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d2c:	2304      	movs	r3, #4
 8008d2e:	e002      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d30:	2302      	movs	r3, #2
 8008d32:	e000      	b.n	8008d36 <UART_SetConfig+0x15d6>
 8008d34:	2301      	movs	r3, #1
 8008d36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3c:	005a      	lsls	r2, r3, #1
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	085b      	lsrs	r3, r3, #1
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	685b      	ldr	r3, [r3, #4]
 8008d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d4e:	b29b      	uxth	r3, r3
 8008d50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008d52:	e2b0      	b.n	80092b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d54:	f7fc f85a 	bl	8004e0c <HAL_RCC_GetPCLK2Freq>
 8008d58:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d044      	beq.n	8008dec <UART_SetConfig+0x168c>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d66:	2b01      	cmp	r3, #1
 8008d68:	d03e      	beq.n	8008de8 <UART_SetConfig+0x1688>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d6e:	2b02      	cmp	r3, #2
 8008d70:	d038      	beq.n	8008de4 <UART_SetConfig+0x1684>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d032      	beq.n	8008de0 <UART_SetConfig+0x1680>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d7e:	2b04      	cmp	r3, #4
 8008d80:	d02c      	beq.n	8008ddc <UART_SetConfig+0x167c>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d86:	2b05      	cmp	r3, #5
 8008d88:	d026      	beq.n	8008dd8 <UART_SetConfig+0x1678>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8e:	2b06      	cmp	r3, #6
 8008d90:	d020      	beq.n	8008dd4 <UART_SetConfig+0x1674>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d96:	2b07      	cmp	r3, #7
 8008d98:	d01a      	beq.n	8008dd0 <UART_SetConfig+0x1670>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b08      	cmp	r3, #8
 8008da0:	d014      	beq.n	8008dcc <UART_SetConfig+0x166c>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2b09      	cmp	r3, #9
 8008da8:	d00e      	beq.n	8008dc8 <UART_SetConfig+0x1668>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dae:	2b0a      	cmp	r3, #10
 8008db0:	d008      	beq.n	8008dc4 <UART_SetConfig+0x1664>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db6:	2b0b      	cmp	r3, #11
 8008db8:	d102      	bne.n	8008dc0 <UART_SetConfig+0x1660>
 8008dba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dbe:	e016      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e014      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dc4:	2380      	movs	r3, #128	; 0x80
 8008dc6:	e012      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	e010      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dcc:	2320      	movs	r3, #32
 8008dce:	e00e      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dd0:	2310      	movs	r3, #16
 8008dd2:	e00c      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dd4:	230c      	movs	r3, #12
 8008dd6:	e00a      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dd8:	230a      	movs	r3, #10
 8008dda:	e008      	b.n	8008dee <UART_SetConfig+0x168e>
 8008ddc:	2308      	movs	r3, #8
 8008dde:	e006      	b.n	8008dee <UART_SetConfig+0x168e>
 8008de0:	2306      	movs	r3, #6
 8008de2:	e004      	b.n	8008dee <UART_SetConfig+0x168e>
 8008de4:	2304      	movs	r3, #4
 8008de6:	e002      	b.n	8008dee <UART_SetConfig+0x168e>
 8008de8:	2302      	movs	r3, #2
 8008dea:	e000      	b.n	8008dee <UART_SetConfig+0x168e>
 8008dec:	2301      	movs	r3, #1
 8008dee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008df4:	005a      	lsls	r2, r3, #1
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	085b      	lsrs	r3, r3, #1
 8008dfc:	441a      	add	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e06:	b29b      	uxth	r3, r3
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008e0a:	e254      	b.n	80092b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e0c:	f107 0318 	add.w	r3, r7, #24
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fc ff05 	bl	8005c20 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008e16:	69fa      	ldr	r2, [r7, #28]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d044      	beq.n	8008eaa <UART_SetConfig+0x174a>
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d03e      	beq.n	8008ea6 <UART_SetConfig+0x1746>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2c:	2b02      	cmp	r3, #2
 8008e2e:	d038      	beq.n	8008ea2 <UART_SetConfig+0x1742>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e34:	2b03      	cmp	r3, #3
 8008e36:	d032      	beq.n	8008e9e <UART_SetConfig+0x173e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e3c:	2b04      	cmp	r3, #4
 8008e3e:	d02c      	beq.n	8008e9a <UART_SetConfig+0x173a>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e44:	2b05      	cmp	r3, #5
 8008e46:	d026      	beq.n	8008e96 <UART_SetConfig+0x1736>
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e4c:	2b06      	cmp	r3, #6
 8008e4e:	d020      	beq.n	8008e92 <UART_SetConfig+0x1732>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e54:	2b07      	cmp	r3, #7
 8008e56:	d01a      	beq.n	8008e8e <UART_SetConfig+0x172e>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5c:	2b08      	cmp	r3, #8
 8008e5e:	d014      	beq.n	8008e8a <UART_SetConfig+0x172a>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e64:	2b09      	cmp	r3, #9
 8008e66:	d00e      	beq.n	8008e86 <UART_SetConfig+0x1726>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6c:	2b0a      	cmp	r3, #10
 8008e6e:	d008      	beq.n	8008e82 <UART_SetConfig+0x1722>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e74:	2b0b      	cmp	r3, #11
 8008e76:	d102      	bne.n	8008e7e <UART_SetConfig+0x171e>
 8008e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e7c:	e016      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e014      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e82:	2380      	movs	r3, #128	; 0x80
 8008e84:	e012      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e86:	2340      	movs	r3, #64	; 0x40
 8008e88:	e010      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e8a:	2320      	movs	r3, #32
 8008e8c:	e00e      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e8e:	2310      	movs	r3, #16
 8008e90:	e00c      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e92:	230c      	movs	r3, #12
 8008e94:	e00a      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e96:	230a      	movs	r3, #10
 8008e98:	e008      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e9a:	2308      	movs	r3, #8
 8008e9c:	e006      	b.n	8008eac <UART_SetConfig+0x174c>
 8008e9e:	2306      	movs	r3, #6
 8008ea0:	e004      	b.n	8008eac <UART_SetConfig+0x174c>
 8008ea2:	2304      	movs	r3, #4
 8008ea4:	e002      	b.n	8008eac <UART_SetConfig+0x174c>
 8008ea6:	2302      	movs	r3, #2
 8008ea8:	e000      	b.n	8008eac <UART_SetConfig+0x174c>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8008eb0:	005a      	lsls	r2, r3, #1
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	085b      	lsrs	r3, r3, #1
 8008eb8:	441a      	add	r2, r3
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ec2:	b29b      	uxth	r3, r3
 8008ec4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ec6:	e1f6      	b.n	80092b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008ec8:	f107 030c 	add.w	r3, r7, #12
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fc fff3 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d044      	beq.n	8008f66 <UART_SetConfig+0x1806>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d03e      	beq.n	8008f62 <UART_SetConfig+0x1802>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d038      	beq.n	8008f5e <UART_SetConfig+0x17fe>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	2b03      	cmp	r3, #3
 8008ef2:	d032      	beq.n	8008f5a <UART_SetConfig+0x17fa>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d02c      	beq.n	8008f56 <UART_SetConfig+0x17f6>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f00:	2b05      	cmp	r3, #5
 8008f02:	d026      	beq.n	8008f52 <UART_SetConfig+0x17f2>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	2b06      	cmp	r3, #6
 8008f0a:	d020      	beq.n	8008f4e <UART_SetConfig+0x17ee>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f10:	2b07      	cmp	r3, #7
 8008f12:	d01a      	beq.n	8008f4a <UART_SetConfig+0x17ea>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f18:	2b08      	cmp	r3, #8
 8008f1a:	d014      	beq.n	8008f46 <UART_SetConfig+0x17e6>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f20:	2b09      	cmp	r3, #9
 8008f22:	d00e      	beq.n	8008f42 <UART_SetConfig+0x17e2>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f28:	2b0a      	cmp	r3, #10
 8008f2a:	d008      	beq.n	8008f3e <UART_SetConfig+0x17de>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	2b0b      	cmp	r3, #11
 8008f32:	d102      	bne.n	8008f3a <UART_SetConfig+0x17da>
 8008f34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f38:	e016      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e014      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f3e:	2380      	movs	r3, #128	; 0x80
 8008f40:	e012      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f42:	2340      	movs	r3, #64	; 0x40
 8008f44:	e010      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f46:	2320      	movs	r3, #32
 8008f48:	e00e      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f4a:	2310      	movs	r3, #16
 8008f4c:	e00c      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f4e:	230c      	movs	r3, #12
 8008f50:	e00a      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f52:	230a      	movs	r3, #10
 8008f54:	e008      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f56:	2308      	movs	r3, #8
 8008f58:	e006      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f5a:	2306      	movs	r3, #6
 8008f5c:	e004      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f5e:	2304      	movs	r3, #4
 8008f60:	e002      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e000      	b.n	8008f68 <UART_SetConfig+0x1808>
 8008f66:	2301      	movs	r3, #1
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	005a      	lsls	r2, r3, #1
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	085b      	lsrs	r3, r3, #1
 8008f74:	441a      	add	r2, r3
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008f82:	e198      	b.n	80092b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008f84:	4b87      	ldr	r3, [pc, #540]	; (80091a4 <UART_SetConfig+0x1a44>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0320 	and.w	r3, r3, #32
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d05e      	beq.n	800904e <UART_SetConfig+0x18ee>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008f90:	4b84      	ldr	r3, [pc, #528]	; (80091a4 <UART_SetConfig+0x1a44>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	08db      	lsrs	r3, r3, #3
 8008f96:	f003 0303 	and.w	r3, r3, #3
 8008f9a:	4a83      	ldr	r2, [pc, #524]	; (80091a8 <UART_SetConfig+0x1a48>)
 8008f9c:	40da      	lsrs	r2, r3
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d044      	beq.n	8009030 <UART_SetConfig+0x18d0>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d03e      	beq.n	800902c <UART_SetConfig+0x18cc>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d038      	beq.n	8009028 <UART_SetConfig+0x18c8>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	2b03      	cmp	r3, #3
 8008fbc:	d032      	beq.n	8009024 <UART_SetConfig+0x18c4>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fc2:	2b04      	cmp	r3, #4
 8008fc4:	d02c      	beq.n	8009020 <UART_SetConfig+0x18c0>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fca:	2b05      	cmp	r3, #5
 8008fcc:	d026      	beq.n	800901c <UART_SetConfig+0x18bc>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd2:	2b06      	cmp	r3, #6
 8008fd4:	d020      	beq.n	8009018 <UART_SetConfig+0x18b8>
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fda:	2b07      	cmp	r3, #7
 8008fdc:	d01a      	beq.n	8009014 <UART_SetConfig+0x18b4>
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	2b08      	cmp	r3, #8
 8008fe4:	d014      	beq.n	8009010 <UART_SetConfig+0x18b0>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fea:	2b09      	cmp	r3, #9
 8008fec:	d00e      	beq.n	800900c <UART_SetConfig+0x18ac>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	2b0a      	cmp	r3, #10
 8008ff4:	d008      	beq.n	8009008 <UART_SetConfig+0x18a8>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	2b0b      	cmp	r3, #11
 8008ffc:	d102      	bne.n	8009004 <UART_SetConfig+0x18a4>
 8008ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009002:	e016      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009004:	2301      	movs	r3, #1
 8009006:	e014      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009008:	2380      	movs	r3, #128	; 0x80
 800900a:	e012      	b.n	8009032 <UART_SetConfig+0x18d2>
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	e010      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009010:	2320      	movs	r3, #32
 8009012:	e00e      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009014:	2310      	movs	r3, #16
 8009016:	e00c      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009018:	230c      	movs	r3, #12
 800901a:	e00a      	b.n	8009032 <UART_SetConfig+0x18d2>
 800901c:	230a      	movs	r3, #10
 800901e:	e008      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009020:	2308      	movs	r3, #8
 8009022:	e006      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009024:	2306      	movs	r3, #6
 8009026:	e004      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009028:	2304      	movs	r3, #4
 800902a:	e002      	b.n	8009032 <UART_SetConfig+0x18d2>
 800902c:	2302      	movs	r3, #2
 800902e:	e000      	b.n	8009032 <UART_SetConfig+0x18d2>
 8009030:	2301      	movs	r3, #1
 8009032:	fbb2 f3f3 	udiv	r3, r2, r3
 8009036:	005a      	lsls	r2, r3, #1
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	085b      	lsrs	r3, r3, #1
 800903e:	441a      	add	r2, r3
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	fbb2 f3f3 	udiv	r3, r2, r3
 8009048:	b29b      	uxth	r3, r3
 800904a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 800904c:	e133      	b.n	80092b6 <UART_SetConfig+0x1b56>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	2b00      	cmp	r3, #0
 8009054:	d043      	beq.n	80090de <UART_SetConfig+0x197e>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905a:	2b01      	cmp	r3, #1
 800905c:	d03d      	beq.n	80090da <UART_SetConfig+0x197a>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009062:	2b02      	cmp	r3, #2
 8009064:	d037      	beq.n	80090d6 <UART_SetConfig+0x1976>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800906a:	2b03      	cmp	r3, #3
 800906c:	d031      	beq.n	80090d2 <UART_SetConfig+0x1972>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009072:	2b04      	cmp	r3, #4
 8009074:	d02b      	beq.n	80090ce <UART_SetConfig+0x196e>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	2b05      	cmp	r3, #5
 800907c:	d025      	beq.n	80090ca <UART_SetConfig+0x196a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	2b06      	cmp	r3, #6
 8009084:	d01f      	beq.n	80090c6 <UART_SetConfig+0x1966>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800908a:	2b07      	cmp	r3, #7
 800908c:	d019      	beq.n	80090c2 <UART_SetConfig+0x1962>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009092:	2b08      	cmp	r3, #8
 8009094:	d013      	beq.n	80090be <UART_SetConfig+0x195e>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	2b09      	cmp	r3, #9
 800909c:	d00d      	beq.n	80090ba <UART_SetConfig+0x195a>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a2:	2b0a      	cmp	r3, #10
 80090a4:	d007      	beq.n	80090b6 <UART_SetConfig+0x1956>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090aa:	2b0b      	cmp	r3, #11
 80090ac:	d101      	bne.n	80090b2 <UART_SetConfig+0x1952>
 80090ae:	4b3f      	ldr	r3, [pc, #252]	; (80091ac <UART_SetConfig+0x1a4c>)
 80090b0:	e016      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090b2:	4b3f      	ldr	r3, [pc, #252]	; (80091b0 <UART_SetConfig+0x1a50>)
 80090b4:	e014      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090b6:	4b3f      	ldr	r3, [pc, #252]	; (80091b4 <UART_SetConfig+0x1a54>)
 80090b8:	e012      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090ba:	4b3f      	ldr	r3, [pc, #252]	; (80091b8 <UART_SetConfig+0x1a58>)
 80090bc:	e010      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090be:	4b3f      	ldr	r3, [pc, #252]	; (80091bc <UART_SetConfig+0x1a5c>)
 80090c0:	e00e      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090c2:	4b3f      	ldr	r3, [pc, #252]	; (80091c0 <UART_SetConfig+0x1a60>)
 80090c4:	e00c      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090c6:	4b3f      	ldr	r3, [pc, #252]	; (80091c4 <UART_SetConfig+0x1a64>)
 80090c8:	e00a      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090ca:	4b3f      	ldr	r3, [pc, #252]	; (80091c8 <UART_SetConfig+0x1a68>)
 80090cc:	e008      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090ce:	4b3f      	ldr	r3, [pc, #252]	; (80091cc <UART_SetConfig+0x1a6c>)
 80090d0:	e006      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090d2:	4b3f      	ldr	r3, [pc, #252]	; (80091d0 <UART_SetConfig+0x1a70>)
 80090d4:	e004      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090d6:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <UART_SetConfig+0x1a74>)
 80090d8:	e002      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090da:	4b33      	ldr	r3, [pc, #204]	; (80091a8 <UART_SetConfig+0x1a48>)
 80090dc:	e000      	b.n	80090e0 <UART_SetConfig+0x1980>
 80090de:	4b34      	ldr	r3, [pc, #208]	; (80091b0 <UART_SetConfig+0x1a50>)
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	6852      	ldr	r2, [r2, #4]
 80090e4:	0852      	lsrs	r2, r2, #1
 80090e6:	441a      	add	r2, r3
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80090f0:	b29b      	uxth	r3, r3
 80090f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090f4:	e0df      	b.n	80092b6 <UART_SetConfig+0x1b56>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d045      	beq.n	800918a <UART_SetConfig+0x1a2a>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009102:	2b01      	cmp	r3, #1
 8009104:	d03f      	beq.n	8009186 <UART_SetConfig+0x1a26>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	2b02      	cmp	r3, #2
 800910c:	d039      	beq.n	8009182 <UART_SetConfig+0x1a22>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	2b03      	cmp	r3, #3
 8009114:	d033      	beq.n	800917e <UART_SetConfig+0x1a1e>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800911a:	2b04      	cmp	r3, #4
 800911c:	d02d      	beq.n	800917a <UART_SetConfig+0x1a1a>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009122:	2b05      	cmp	r3, #5
 8009124:	d027      	beq.n	8009176 <UART_SetConfig+0x1a16>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912a:	2b06      	cmp	r3, #6
 800912c:	d021      	beq.n	8009172 <UART_SetConfig+0x1a12>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009132:	2b07      	cmp	r3, #7
 8009134:	d01b      	beq.n	800916e <UART_SetConfig+0x1a0e>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800913a:	2b08      	cmp	r3, #8
 800913c:	d015      	beq.n	800916a <UART_SetConfig+0x1a0a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009142:	2b09      	cmp	r3, #9
 8009144:	d00f      	beq.n	8009166 <UART_SetConfig+0x1a06>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b0a      	cmp	r3, #10
 800914c:	d008      	beq.n	8009160 <UART_SetConfig+0x1a00>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009152:	2b0b      	cmp	r3, #11
 8009154:	d102      	bne.n	800915c <UART_SetConfig+0x19fc>
 8009156:	f647 2312 	movw	r3, #31250	; 0x7a12
 800915a:	e017      	b.n	800918c <UART_SetConfig+0x1a2c>
 800915c:	4b18      	ldr	r3, [pc, #96]	; (80091c0 <UART_SetConfig+0x1a60>)
 800915e:	e015      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009160:	f24f 4324 	movw	r3, #62500	; 0xf424
 8009164:	e012      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009166:	4b1c      	ldr	r3, [pc, #112]	; (80091d8 <UART_SetConfig+0x1a78>)
 8009168:	e010      	b.n	800918c <UART_SetConfig+0x1a2c>
 800916a:	4b1c      	ldr	r3, [pc, #112]	; (80091dc <UART_SetConfig+0x1a7c>)
 800916c:	e00e      	b.n	800918c <UART_SetConfig+0x1a2c>
 800916e:	4b0f      	ldr	r3, [pc, #60]	; (80091ac <UART_SetConfig+0x1a4c>)
 8009170:	e00c      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009172:	4b1b      	ldr	r3, [pc, #108]	; (80091e0 <UART_SetConfig+0x1a80>)
 8009174:	e00a      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009176:	4b1b      	ldr	r3, [pc, #108]	; (80091e4 <UART_SetConfig+0x1a84>)
 8009178:	e008      	b.n	800918c <UART_SetConfig+0x1a2c>
 800917a:	4b0e      	ldr	r3, [pc, #56]	; (80091b4 <UART_SetConfig+0x1a54>)
 800917c:	e006      	b.n	800918c <UART_SetConfig+0x1a2c>
 800917e:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <UART_SetConfig+0x1a88>)
 8009180:	e004      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009182:	4b0d      	ldr	r3, [pc, #52]	; (80091b8 <UART_SetConfig+0x1a58>)
 8009184:	e002      	b.n	800918c <UART_SetConfig+0x1a2c>
 8009186:	4b0d      	ldr	r3, [pc, #52]	; (80091bc <UART_SetConfig+0x1a5c>)
 8009188:	e000      	b.n	800918c <UART_SetConfig+0x1a2c>
 800918a:	4b0d      	ldr	r3, [pc, #52]	; (80091c0 <UART_SetConfig+0x1a60>)
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6852      	ldr	r2, [r2, #4]
 8009190:	0852      	lsrs	r2, r2, #1
 8009192:	441a      	add	r2, r3
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	fbb2 f3f3 	udiv	r3, r2, r3
 800919c:	b29b      	uxth	r3, r3
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091a0:	e089      	b.n	80092b6 <UART_SetConfig+0x1b56>
 80091a2:	bf00      	nop
 80091a4:	58024400 	.word	0x58024400
 80091a8:	03d09000 	.word	0x03d09000
 80091ac:	0007a120 	.word	0x0007a120
 80091b0:	07a12000 	.word	0x07a12000
 80091b4:	000f4240 	.word	0x000f4240
 80091b8:	001e8480 	.word	0x001e8480
 80091bc:	003d0900 	.word	0x003d0900
 80091c0:	007a1200 	.word	0x007a1200
 80091c4:	00a2c2aa 	.word	0x00a2c2aa
 80091c8:	00c35000 	.word	0x00c35000
 80091cc:	00f42400 	.word	0x00f42400
 80091d0:	01458554 	.word	0x01458554
 80091d4:	01e84800 	.word	0x01e84800
 80091d8:	0001e848 	.word	0x0001e848
 80091dc:	0003d090 	.word	0x0003d090
 80091e0:	000a2c2a 	.word	0x000a2c2a
 80091e4:	000c3500 	.word	0x000c3500
 80091e8:	00145854 	.word	0x00145854
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d04f      	beq.n	8009294 <UART_SetConfig+0x1b34>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d048      	beq.n	800928e <UART_SetConfig+0x1b2e>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009200:	2b02      	cmp	r3, #2
 8009202:	d041      	beq.n	8009288 <UART_SetConfig+0x1b28>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009208:	2b03      	cmp	r3, #3
 800920a:	d03a      	beq.n	8009282 <UART_SetConfig+0x1b22>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	2b04      	cmp	r3, #4
 8009212:	d033      	beq.n	800927c <UART_SetConfig+0x1b1c>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009218:	2b05      	cmp	r3, #5
 800921a:	d02c      	beq.n	8009276 <UART_SetConfig+0x1b16>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009220:	2b06      	cmp	r3, #6
 8009222:	d025      	beq.n	8009270 <UART_SetConfig+0x1b10>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009228:	2b07      	cmp	r3, #7
 800922a:	d01e      	beq.n	800926a <UART_SetConfig+0x1b0a>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009230:	2b08      	cmp	r3, #8
 8009232:	d017      	beq.n	8009264 <UART_SetConfig+0x1b04>
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009238:	2b09      	cmp	r3, #9
 800923a:	d010      	beq.n	800925e <UART_SetConfig+0x1afe>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009240:	2b0a      	cmp	r3, #10
 8009242:	d009      	beq.n	8009258 <UART_SetConfig+0x1af8>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009248:	2b0b      	cmp	r3, #11
 800924a:	d102      	bne.n	8009252 <UART_SetConfig+0x1af2>
 800924c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009250:	e022      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009256:	e01f      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009258:	f44f 7300 	mov.w	r3, #512	; 0x200
 800925c:	e01c      	b.n	8009298 <UART_SetConfig+0x1b38>
 800925e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009262:	e019      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009268:	e016      	b.n	8009298 <UART_SetConfig+0x1b38>
 800926a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800926e:	e013      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009270:	f241 5354 	movw	r3, #5460	; 0x1554
 8009274:	e010      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009276:	f641 1398 	movw	r3, #6552	; 0x1998
 800927a:	e00d      	b.n	8009298 <UART_SetConfig+0x1b38>
 800927c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009280:	e00a      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009282:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8009286:	e007      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009288:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800928c:	e004      	b.n	8009298 <UART_SetConfig+0x1b38>
 800928e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009292:	e001      	b.n	8009298 <UART_SetConfig+0x1b38>
 8009294:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	6852      	ldr	r2, [r2, #4]
 800929c:	0852      	lsrs	r2, r2, #1
 800929e:	441a      	add	r2, r3
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80092a8:	b29b      	uxth	r3, r3
 80092aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092ac:	e003      	b.n	80092b6 <UART_SetConfig+0x1b56>
      default:
        ret = HAL_ERROR;
 80092ae:	2301      	movs	r3, #1
 80092b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 80092b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80092b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092b8:	2b0f      	cmp	r3, #15
 80092ba:	d916      	bls.n	80092ea <UART_SetConfig+0x1b8a>
 80092bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c2:	d212      	bcs.n	80092ea <UART_SetConfig+0x1b8a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80092c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	f023 030f 	bic.w	r3, r3, #15
 80092cc:	84fb      	strh	r3, [r7, #38]	; 0x26
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80092ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092d0:	085b      	lsrs	r3, r3, #1
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	f003 0307 	and.w	r3, r3, #7
 80092d8:	b29a      	uxth	r2, r3
 80092da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80092dc:	4313      	orrs	r3, r2
 80092de:	84fb      	strh	r3, [r7, #38]	; 0x26
      huart->Instance->BRR = brrtemp;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80092e6:	60da      	str	r2, [r3, #12]
 80092e8:	e3a3      	b.n	8009a32 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80092f0:	e39f      	b.n	8009a32 <UART_SetConfig+0x22d2>
    }
  }
  else
  {
    switch (clocksource)
 80092f2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80092f6:	2b40      	cmp	r3, #64	; 0x40
 80092f8:	f200 8388 	bhi.w	8009a0c <UART_SetConfig+0x22ac>
 80092fc:	a201      	add	r2, pc, #4	; (adr r2, 8009304 <UART_SetConfig+0x1ba4>)
 80092fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009302:	bf00      	nop
 8009304:	08009409 	.word	0x08009409
 8009308:	080094bf 	.word	0x080094bf
 800930c:	08009a0d 	.word	0x08009a0d
 8009310:	08009a0d 	.word	0x08009a0d
 8009314:	08009575 	.word	0x08009575
 8009318:	08009a0d 	.word	0x08009a0d
 800931c:	08009a0d 	.word	0x08009a0d
 8009320:	08009a0d 	.word	0x08009a0d
 8009324:	0800962f 	.word	0x0800962f
 8009328:	08009a0d 	.word	0x08009a0d
 800932c:	08009a0d 	.word	0x08009a0d
 8009330:	08009a0d 	.word	0x08009a0d
 8009334:	08009a0d 	.word	0x08009a0d
 8009338:	08009a0d 	.word	0x08009a0d
 800933c:	08009a0d 	.word	0x08009a0d
 8009340:	08009a0d 	.word	0x08009a0d
 8009344:	080096e9 	.word	0x080096e9
 8009348:	08009a0d 	.word	0x08009a0d
 800934c:	08009a0d 	.word	0x08009a0d
 8009350:	08009a0d 	.word	0x08009a0d
 8009354:	08009a0d 	.word	0x08009a0d
 8009358:	08009a0d 	.word	0x08009a0d
 800935c:	08009a0d 	.word	0x08009a0d
 8009360:	08009a0d 	.word	0x08009a0d
 8009364:	08009a0d 	.word	0x08009a0d
 8009368:	08009a0d 	.word	0x08009a0d
 800936c:	08009a0d 	.word	0x08009a0d
 8009370:	08009a0d 	.word	0x08009a0d
 8009374:	08009a0d 	.word	0x08009a0d
 8009378:	08009a0d 	.word	0x08009a0d
 800937c:	08009a0d 	.word	0x08009a0d
 8009380:	08009a0d 	.word	0x08009a0d
 8009384:	08009859 	.word	0x08009859
 8009388:	08009a0d 	.word	0x08009a0d
 800938c:	08009a0d 	.word	0x08009a0d
 8009390:	08009a0d 	.word	0x08009a0d
 8009394:	08009a0d 	.word	0x08009a0d
 8009398:	08009a0d 	.word	0x08009a0d
 800939c:	08009a0d 	.word	0x08009a0d
 80093a0:	08009a0d 	.word	0x08009a0d
 80093a4:	08009a0d 	.word	0x08009a0d
 80093a8:	08009a0d 	.word	0x08009a0d
 80093ac:	08009a0d 	.word	0x08009a0d
 80093b0:	08009a0d 	.word	0x08009a0d
 80093b4:	08009a0d 	.word	0x08009a0d
 80093b8:	08009a0d 	.word	0x08009a0d
 80093bc:	08009a0d 	.word	0x08009a0d
 80093c0:	08009a0d 	.word	0x08009a0d
 80093c4:	08009a0d 	.word	0x08009a0d
 80093c8:	08009a0d 	.word	0x08009a0d
 80093cc:	08009a0d 	.word	0x08009a0d
 80093d0:	08009a0d 	.word	0x08009a0d
 80093d4:	08009a0d 	.word	0x08009a0d
 80093d8:	08009a0d 	.word	0x08009a0d
 80093dc:	08009a0d 	.word	0x08009a0d
 80093e0:	08009a0d 	.word	0x08009a0d
 80093e4:	08009a0d 	.word	0x08009a0d
 80093e8:	08009a0d 	.word	0x08009a0d
 80093ec:	08009a0d 	.word	0x08009a0d
 80093f0:	08009a0d 	.word	0x08009a0d
 80093f4:	08009a0d 	.word	0x08009a0d
 80093f8:	08009a0d 	.word	0x08009a0d
 80093fc:	08009a0d 	.word	0x08009a0d
 8009400:	08009a0d 	.word	0x08009a0d
 8009404:	0800994d 	.word	0x0800994d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009408:	f7fb fcea 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 800940c:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	2b00      	cmp	r3, #0
 8009414:	d044      	beq.n	80094a0 <UART_SetConfig+0x1d40>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800941a:	2b01      	cmp	r3, #1
 800941c:	d03e      	beq.n	800949c <UART_SetConfig+0x1d3c>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009422:	2b02      	cmp	r3, #2
 8009424:	d038      	beq.n	8009498 <UART_SetConfig+0x1d38>
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800942a:	2b03      	cmp	r3, #3
 800942c:	d032      	beq.n	8009494 <UART_SetConfig+0x1d34>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009432:	2b04      	cmp	r3, #4
 8009434:	d02c      	beq.n	8009490 <UART_SetConfig+0x1d30>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943a:	2b05      	cmp	r3, #5
 800943c:	d026      	beq.n	800948c <UART_SetConfig+0x1d2c>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009442:	2b06      	cmp	r3, #6
 8009444:	d020      	beq.n	8009488 <UART_SetConfig+0x1d28>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	2b07      	cmp	r3, #7
 800944c:	d01a      	beq.n	8009484 <UART_SetConfig+0x1d24>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009452:	2b08      	cmp	r3, #8
 8009454:	d014      	beq.n	8009480 <UART_SetConfig+0x1d20>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800945a:	2b09      	cmp	r3, #9
 800945c:	d00e      	beq.n	800947c <UART_SetConfig+0x1d1c>
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009462:	2b0a      	cmp	r3, #10
 8009464:	d008      	beq.n	8009478 <UART_SetConfig+0x1d18>
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	2b0b      	cmp	r3, #11
 800946c:	d102      	bne.n	8009474 <UART_SetConfig+0x1d14>
 800946e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009472:	e016      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009474:	2301      	movs	r3, #1
 8009476:	e014      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009478:	2380      	movs	r3, #128	; 0x80
 800947a:	e012      	b.n	80094a2 <UART_SetConfig+0x1d42>
 800947c:	2340      	movs	r3, #64	; 0x40
 800947e:	e010      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009480:	2320      	movs	r3, #32
 8009482:	e00e      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009484:	2310      	movs	r3, #16
 8009486:	e00c      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009488:	230c      	movs	r3, #12
 800948a:	e00a      	b.n	80094a2 <UART_SetConfig+0x1d42>
 800948c:	230a      	movs	r3, #10
 800948e:	e008      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009490:	2308      	movs	r3, #8
 8009492:	e006      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009494:	2306      	movs	r3, #6
 8009496:	e004      	b.n	80094a2 <UART_SetConfig+0x1d42>
 8009498:	2304      	movs	r3, #4
 800949a:	e002      	b.n	80094a2 <UART_SetConfig+0x1d42>
 800949c:	2302      	movs	r3, #2
 800949e:	e000      	b.n	80094a2 <UART_SetConfig+0x1d42>
 80094a0:	2301      	movs	r3, #1
 80094a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80094a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	085b      	lsrs	r3, r3, #1
 80094ae:	441a      	add	r2, r3
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094b8:	b29b      	uxth	r3, r3
 80094ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80094bc:	e2aa      	b.n	8009a14 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094be:	f7fb fca5 	bl	8004e0c <HAL_RCC_GetPCLK2Freq>
 80094c2:	62b8      	str	r0, [r7, #40]	; 0x28
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d044      	beq.n	8009556 <UART_SetConfig+0x1df6>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d0:	2b01      	cmp	r3, #1
 80094d2:	d03e      	beq.n	8009552 <UART_SetConfig+0x1df2>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d8:	2b02      	cmp	r3, #2
 80094da:	d038      	beq.n	800954e <UART_SetConfig+0x1dee>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e0:	2b03      	cmp	r3, #3
 80094e2:	d032      	beq.n	800954a <UART_SetConfig+0x1dea>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e8:	2b04      	cmp	r3, #4
 80094ea:	d02c      	beq.n	8009546 <UART_SetConfig+0x1de6>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f0:	2b05      	cmp	r3, #5
 80094f2:	d026      	beq.n	8009542 <UART_SetConfig+0x1de2>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094f8:	2b06      	cmp	r3, #6
 80094fa:	d020      	beq.n	800953e <UART_SetConfig+0x1dde>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b07      	cmp	r3, #7
 8009502:	d01a      	beq.n	800953a <UART_SetConfig+0x1dda>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009508:	2b08      	cmp	r3, #8
 800950a:	d014      	beq.n	8009536 <UART_SetConfig+0x1dd6>
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009510:	2b09      	cmp	r3, #9
 8009512:	d00e      	beq.n	8009532 <UART_SetConfig+0x1dd2>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009518:	2b0a      	cmp	r3, #10
 800951a:	d008      	beq.n	800952e <UART_SetConfig+0x1dce>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	2b0b      	cmp	r3, #11
 8009522:	d102      	bne.n	800952a <UART_SetConfig+0x1dca>
 8009524:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009528:	e016      	b.n	8009558 <UART_SetConfig+0x1df8>
 800952a:	2301      	movs	r3, #1
 800952c:	e014      	b.n	8009558 <UART_SetConfig+0x1df8>
 800952e:	2380      	movs	r3, #128	; 0x80
 8009530:	e012      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009532:	2340      	movs	r3, #64	; 0x40
 8009534:	e010      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009536:	2320      	movs	r3, #32
 8009538:	e00e      	b.n	8009558 <UART_SetConfig+0x1df8>
 800953a:	2310      	movs	r3, #16
 800953c:	e00c      	b.n	8009558 <UART_SetConfig+0x1df8>
 800953e:	230c      	movs	r3, #12
 8009540:	e00a      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009542:	230a      	movs	r3, #10
 8009544:	e008      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009546:	2308      	movs	r3, #8
 8009548:	e006      	b.n	8009558 <UART_SetConfig+0x1df8>
 800954a:	2306      	movs	r3, #6
 800954c:	e004      	b.n	8009558 <UART_SetConfig+0x1df8>
 800954e:	2304      	movs	r3, #4
 8009550:	e002      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009552:	2302      	movs	r3, #2
 8009554:	e000      	b.n	8009558 <UART_SetConfig+0x1df8>
 8009556:	2301      	movs	r3, #1
 8009558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800955a:	fbb2 f2f3 	udiv	r2, r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	085b      	lsrs	r3, r3, #1
 8009564:	441a      	add	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	fbb2 f3f3 	udiv	r3, r2, r3
 800956e:	b29b      	uxth	r3, r3
 8009570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009572:	e24f      	b.n	8009a14 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009574:	f107 0318 	add.w	r3, r7, #24
 8009578:	4618      	mov	r0, r3
 800957a:	f7fc fb51 	bl	8005c20 <HAL_RCCEx_GetPLL2ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll2_clocks.PLL2_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800957e:	69fa      	ldr	r2, [r7, #28]
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	2b00      	cmp	r3, #0
 8009586:	d044      	beq.n	8009612 <UART_SetConfig+0x1eb2>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800958c:	2b01      	cmp	r3, #1
 800958e:	d03e      	beq.n	800960e <UART_SetConfig+0x1eae>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009594:	2b02      	cmp	r3, #2
 8009596:	d038      	beq.n	800960a <UART_SetConfig+0x1eaa>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800959c:	2b03      	cmp	r3, #3
 800959e:	d032      	beq.n	8009606 <UART_SetConfig+0x1ea6>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	2b04      	cmp	r3, #4
 80095a6:	d02c      	beq.n	8009602 <UART_SetConfig+0x1ea2>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	2b05      	cmp	r3, #5
 80095ae:	d026      	beq.n	80095fe <UART_SetConfig+0x1e9e>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b4:	2b06      	cmp	r3, #6
 80095b6:	d020      	beq.n	80095fa <UART_SetConfig+0x1e9a>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095bc:	2b07      	cmp	r3, #7
 80095be:	d01a      	beq.n	80095f6 <UART_SetConfig+0x1e96>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	2b08      	cmp	r3, #8
 80095c6:	d014      	beq.n	80095f2 <UART_SetConfig+0x1e92>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095cc:	2b09      	cmp	r3, #9
 80095ce:	d00e      	beq.n	80095ee <UART_SetConfig+0x1e8e>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095d4:	2b0a      	cmp	r3, #10
 80095d6:	d008      	beq.n	80095ea <UART_SetConfig+0x1e8a>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095dc:	2b0b      	cmp	r3, #11
 80095de:	d102      	bne.n	80095e6 <UART_SetConfig+0x1e86>
 80095e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095e4:	e016      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095e6:	2301      	movs	r3, #1
 80095e8:	e014      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095ea:	2380      	movs	r3, #128	; 0x80
 80095ec:	e012      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095ee:	2340      	movs	r3, #64	; 0x40
 80095f0:	e010      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095f2:	2320      	movs	r3, #32
 80095f4:	e00e      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095f6:	2310      	movs	r3, #16
 80095f8:	e00c      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095fa:	230c      	movs	r3, #12
 80095fc:	e00a      	b.n	8009614 <UART_SetConfig+0x1eb4>
 80095fe:	230a      	movs	r3, #10
 8009600:	e008      	b.n	8009614 <UART_SetConfig+0x1eb4>
 8009602:	2308      	movs	r3, #8
 8009604:	e006      	b.n	8009614 <UART_SetConfig+0x1eb4>
 8009606:	2306      	movs	r3, #6
 8009608:	e004      	b.n	8009614 <UART_SetConfig+0x1eb4>
 800960a:	2304      	movs	r3, #4
 800960c:	e002      	b.n	8009614 <UART_SetConfig+0x1eb4>
 800960e:	2302      	movs	r3, #2
 8009610:	e000      	b.n	8009614 <UART_SetConfig+0x1eb4>
 8009612:	2301      	movs	r3, #1
 8009614:	fbb2 f2f3 	udiv	r2, r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	085b      	lsrs	r3, r3, #1
 800961e:	441a      	add	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	fbb2 f3f3 	udiv	r3, r2, r3
 8009628:	b29b      	uxth	r3, r3
 800962a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800962c:	e1f2      	b.n	8009a14 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800962e:	f107 030c 	add.w	r3, r7, #12
 8009632:	4618      	mov	r0, r3
 8009634:	f7fc fc40 	bl	8005eb8 <HAL_RCCEx_GetPLL3ClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pll3_clocks.PLL3_Q_Frequency, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009638:	693a      	ldr	r2, [r7, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d044      	beq.n	80096cc <UART_SetConfig+0x1f6c>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009646:	2b01      	cmp	r3, #1
 8009648:	d03e      	beq.n	80096c8 <UART_SetConfig+0x1f68>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964e:	2b02      	cmp	r3, #2
 8009650:	d038      	beq.n	80096c4 <UART_SetConfig+0x1f64>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009656:	2b03      	cmp	r3, #3
 8009658:	d032      	beq.n	80096c0 <UART_SetConfig+0x1f60>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800965e:	2b04      	cmp	r3, #4
 8009660:	d02c      	beq.n	80096bc <UART_SetConfig+0x1f5c>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009666:	2b05      	cmp	r3, #5
 8009668:	d026      	beq.n	80096b8 <UART_SetConfig+0x1f58>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800966e:	2b06      	cmp	r3, #6
 8009670:	d020      	beq.n	80096b4 <UART_SetConfig+0x1f54>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009676:	2b07      	cmp	r3, #7
 8009678:	d01a      	beq.n	80096b0 <UART_SetConfig+0x1f50>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967e:	2b08      	cmp	r3, #8
 8009680:	d014      	beq.n	80096ac <UART_SetConfig+0x1f4c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	2b09      	cmp	r3, #9
 8009688:	d00e      	beq.n	80096a8 <UART_SetConfig+0x1f48>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968e:	2b0a      	cmp	r3, #10
 8009690:	d008      	beq.n	80096a4 <UART_SetConfig+0x1f44>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009696:	2b0b      	cmp	r3, #11
 8009698:	d102      	bne.n	80096a0 <UART_SetConfig+0x1f40>
 800969a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969e:	e016      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096a0:	2301      	movs	r3, #1
 80096a2:	e014      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096a4:	2380      	movs	r3, #128	; 0x80
 80096a6:	e012      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096a8:	2340      	movs	r3, #64	; 0x40
 80096aa:	e010      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096ac:	2320      	movs	r3, #32
 80096ae:	e00e      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096b0:	2310      	movs	r3, #16
 80096b2:	e00c      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096b4:	230c      	movs	r3, #12
 80096b6:	e00a      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096b8:	230a      	movs	r3, #10
 80096ba:	e008      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096bc:	2308      	movs	r3, #8
 80096be:	e006      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096c0:	2306      	movs	r3, #6
 80096c2:	e004      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096c4:	2304      	movs	r3, #4
 80096c6:	e002      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096c8:	2302      	movs	r3, #2
 80096ca:	e000      	b.n	80096ce <UART_SetConfig+0x1f6e>
 80096cc:	2301      	movs	r3, #1
 80096ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
 80096d6:	085b      	lsrs	r3, r3, #1
 80096d8:	441a      	add	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80096e6:	e195      	b.n	8009a14 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096e8:	4b87      	ldr	r3, [pc, #540]	; (8009908 <UART_SetConfig+0x21a8>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f003 0320 	and.w	r3, r3, #32
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d05d      	beq.n	80097b0 <UART_SetConfig+0x2050>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U)), huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096f4:	4b84      	ldr	r3, [pc, #528]	; (8009908 <UART_SetConfig+0x21a8>)
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	08db      	lsrs	r3, r3, #3
 80096fa:	f003 0303 	and.w	r3, r3, #3
 80096fe:	4a83      	ldr	r2, [pc, #524]	; (800990c <UART_SetConfig+0x21ac>)
 8009700:	40da      	lsrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009706:	2b00      	cmp	r3, #0
 8009708:	d044      	beq.n	8009794 <UART_SetConfig+0x2034>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	2b01      	cmp	r3, #1
 8009710:	d03e      	beq.n	8009790 <UART_SetConfig+0x2030>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009716:	2b02      	cmp	r3, #2
 8009718:	d038      	beq.n	800978c <UART_SetConfig+0x202c>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800971e:	2b03      	cmp	r3, #3
 8009720:	d032      	beq.n	8009788 <UART_SetConfig+0x2028>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009726:	2b04      	cmp	r3, #4
 8009728:	d02c      	beq.n	8009784 <UART_SetConfig+0x2024>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800972e:	2b05      	cmp	r3, #5
 8009730:	d026      	beq.n	8009780 <UART_SetConfig+0x2020>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009736:	2b06      	cmp	r3, #6
 8009738:	d020      	beq.n	800977c <UART_SetConfig+0x201c>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800973e:	2b07      	cmp	r3, #7
 8009740:	d01a      	beq.n	8009778 <UART_SetConfig+0x2018>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009746:	2b08      	cmp	r3, #8
 8009748:	d014      	beq.n	8009774 <UART_SetConfig+0x2014>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	2b09      	cmp	r3, #9
 8009750:	d00e      	beq.n	8009770 <UART_SetConfig+0x2010>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009756:	2b0a      	cmp	r3, #10
 8009758:	d008      	beq.n	800976c <UART_SetConfig+0x200c>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b0b      	cmp	r3, #11
 8009760:	d102      	bne.n	8009768 <UART_SetConfig+0x2008>
 8009762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009766:	e016      	b.n	8009796 <UART_SetConfig+0x2036>
 8009768:	2301      	movs	r3, #1
 800976a:	e014      	b.n	8009796 <UART_SetConfig+0x2036>
 800976c:	2380      	movs	r3, #128	; 0x80
 800976e:	e012      	b.n	8009796 <UART_SetConfig+0x2036>
 8009770:	2340      	movs	r3, #64	; 0x40
 8009772:	e010      	b.n	8009796 <UART_SetConfig+0x2036>
 8009774:	2320      	movs	r3, #32
 8009776:	e00e      	b.n	8009796 <UART_SetConfig+0x2036>
 8009778:	2310      	movs	r3, #16
 800977a:	e00c      	b.n	8009796 <UART_SetConfig+0x2036>
 800977c:	230c      	movs	r3, #12
 800977e:	e00a      	b.n	8009796 <UART_SetConfig+0x2036>
 8009780:	230a      	movs	r3, #10
 8009782:	e008      	b.n	8009796 <UART_SetConfig+0x2036>
 8009784:	2308      	movs	r3, #8
 8009786:	e006      	b.n	8009796 <UART_SetConfig+0x2036>
 8009788:	2306      	movs	r3, #6
 800978a:	e004      	b.n	8009796 <UART_SetConfig+0x2036>
 800978c:	2304      	movs	r3, #4
 800978e:	e002      	b.n	8009796 <UART_SetConfig+0x2036>
 8009790:	2302      	movs	r3, #2
 8009792:	e000      	b.n	8009796 <UART_SetConfig+0x2036>
 8009794:	2301      	movs	r3, #1
 8009796:	fbb2 f2f3 	udiv	r2, r2, r3
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	685b      	ldr	r3, [r3, #4]
 800979e:	085b      	lsrs	r3, r3, #1
 80097a0:	441a      	add	r2, r3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097aa:	b29b      	uxth	r3, r3
 80097ac:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
        }
        break;
 80097ae:	e131      	b.n	8009a14 <UART_SetConfig+0x22b4>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d043      	beq.n	8009840 <UART_SetConfig+0x20e0>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097bc:	2b01      	cmp	r3, #1
 80097be:	d03d      	beq.n	800983c <UART_SetConfig+0x20dc>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d037      	beq.n	8009838 <UART_SetConfig+0x20d8>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097cc:	2b03      	cmp	r3, #3
 80097ce:	d031      	beq.n	8009834 <UART_SetConfig+0x20d4>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097d4:	2b04      	cmp	r3, #4
 80097d6:	d02b      	beq.n	8009830 <UART_SetConfig+0x20d0>
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097dc:	2b05      	cmp	r3, #5
 80097de:	d025      	beq.n	800982c <UART_SetConfig+0x20cc>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	2b06      	cmp	r3, #6
 80097e6:	d01f      	beq.n	8009828 <UART_SetConfig+0x20c8>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ec:	2b07      	cmp	r3, #7
 80097ee:	d019      	beq.n	8009824 <UART_SetConfig+0x20c4>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097f4:	2b08      	cmp	r3, #8
 80097f6:	d013      	beq.n	8009820 <UART_SetConfig+0x20c0>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097fc:	2b09      	cmp	r3, #9
 80097fe:	d00d      	beq.n	800981c <UART_SetConfig+0x20bc>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009804:	2b0a      	cmp	r3, #10
 8009806:	d007      	beq.n	8009818 <UART_SetConfig+0x20b8>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800980c:	2b0b      	cmp	r3, #11
 800980e:	d101      	bne.n	8009814 <UART_SetConfig+0x20b4>
 8009810:	4b3f      	ldr	r3, [pc, #252]	; (8009910 <UART_SetConfig+0x21b0>)
 8009812:	e016      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009814:	4b3d      	ldr	r3, [pc, #244]	; (800990c <UART_SetConfig+0x21ac>)
 8009816:	e014      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009818:	4b3e      	ldr	r3, [pc, #248]	; (8009914 <UART_SetConfig+0x21b4>)
 800981a:	e012      	b.n	8009842 <UART_SetConfig+0x20e2>
 800981c:	4b3e      	ldr	r3, [pc, #248]	; (8009918 <UART_SetConfig+0x21b8>)
 800981e:	e010      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009820:	4b3e      	ldr	r3, [pc, #248]	; (800991c <UART_SetConfig+0x21bc>)
 8009822:	e00e      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009824:	4b3e      	ldr	r3, [pc, #248]	; (8009920 <UART_SetConfig+0x21c0>)
 8009826:	e00c      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009828:	4b3e      	ldr	r3, [pc, #248]	; (8009924 <UART_SetConfig+0x21c4>)
 800982a:	e00a      	b.n	8009842 <UART_SetConfig+0x20e2>
 800982c:	4b3e      	ldr	r3, [pc, #248]	; (8009928 <UART_SetConfig+0x21c8>)
 800982e:	e008      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009830:	4b3e      	ldr	r3, [pc, #248]	; (800992c <UART_SetConfig+0x21cc>)
 8009832:	e006      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009834:	4b3e      	ldr	r3, [pc, #248]	; (8009930 <UART_SetConfig+0x21d0>)
 8009836:	e004      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009838:	4b3e      	ldr	r3, [pc, #248]	; (8009934 <UART_SetConfig+0x21d4>)
 800983a:	e002      	b.n	8009842 <UART_SetConfig+0x20e2>
 800983c:	4b3e      	ldr	r3, [pc, #248]	; (8009938 <UART_SetConfig+0x21d8>)
 800983e:	e000      	b.n	8009842 <UART_SetConfig+0x20e2>
 8009840:	4b32      	ldr	r3, [pc, #200]	; (800990c <UART_SetConfig+0x21ac>)
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	6852      	ldr	r2, [r2, #4]
 8009846:	0852      	lsrs	r2, r2, #1
 8009848:	441a      	add	r2, r3
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009852:	b29b      	uxth	r3, r3
 8009854:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009856:	e0dd      	b.n	8009a14 <UART_SetConfig+0x22b4>
      case UART_CLOCKSOURCE_CSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(CSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d046      	beq.n	80098ee <UART_SetConfig+0x218e>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009864:	2b01      	cmp	r3, #1
 8009866:	d040      	beq.n	80098ea <UART_SetConfig+0x218a>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986c:	2b02      	cmp	r3, #2
 800986e:	d03a      	beq.n	80098e6 <UART_SetConfig+0x2186>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009874:	2b03      	cmp	r3, #3
 8009876:	d034      	beq.n	80098e2 <UART_SetConfig+0x2182>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800987c:	2b04      	cmp	r3, #4
 800987e:	d02e      	beq.n	80098de <UART_SetConfig+0x217e>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009884:	2b05      	cmp	r3, #5
 8009886:	d028      	beq.n	80098da <UART_SetConfig+0x217a>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988c:	2b06      	cmp	r3, #6
 800988e:	d022      	beq.n	80098d6 <UART_SetConfig+0x2176>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009894:	2b07      	cmp	r3, #7
 8009896:	d01c      	beq.n	80098d2 <UART_SetConfig+0x2172>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	2b08      	cmp	r3, #8
 800989e:	d016      	beq.n	80098ce <UART_SetConfig+0x216e>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098a4:	2b09      	cmp	r3, #9
 80098a6:	d00f      	beq.n	80098c8 <UART_SetConfig+0x2168>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ac:	2b0a      	cmp	r3, #10
 80098ae:	d008      	beq.n	80098c2 <UART_SetConfig+0x2162>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	2b0b      	cmp	r3, #11
 80098b6:	d102      	bne.n	80098be <UART_SetConfig+0x215e>
 80098b8:	f643 5309 	movw	r3, #15625	; 0x3d09
 80098bc:	e018      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098be:	4b18      	ldr	r3, [pc, #96]	; (8009920 <UART_SetConfig+0x21c0>)
 80098c0:	e016      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098c2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80098c6:	e013      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098c8:	f24f 4324 	movw	r3, #62500	; 0xf424
 80098cc:	e010      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098ce:	4b1b      	ldr	r3, [pc, #108]	; (800993c <UART_SetConfig+0x21dc>)
 80098d0:	e00e      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098d2:	4b0f      	ldr	r3, [pc, #60]	; (8009910 <UART_SetConfig+0x21b0>)
 80098d4:	e00c      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <UART_SetConfig+0x21e0>)
 80098d8:	e00a      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098da:	4b1a      	ldr	r3, [pc, #104]	; (8009944 <UART_SetConfig+0x21e4>)
 80098dc:	e008      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098de:	4b0d      	ldr	r3, [pc, #52]	; (8009914 <UART_SetConfig+0x21b4>)
 80098e0:	e006      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098e2:	4b19      	ldr	r3, [pc, #100]	; (8009948 <UART_SetConfig+0x21e8>)
 80098e4:	e004      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098e6:	4b0c      	ldr	r3, [pc, #48]	; (8009918 <UART_SetConfig+0x21b8>)
 80098e8:	e002      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098ea:	4b0c      	ldr	r3, [pc, #48]	; (800991c <UART_SetConfig+0x21bc>)
 80098ec:	e000      	b.n	80098f0 <UART_SetConfig+0x2190>
 80098ee:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <UART_SetConfig+0x21c0>)
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	6852      	ldr	r2, [r2, #4]
 80098f4:	0852      	lsrs	r2, r2, #1
 80098f6:	441a      	add	r2, r3
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009900:	b29b      	uxth	r3, r3
 8009902:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009904:	e086      	b.n	8009a14 <UART_SetConfig+0x22b4>
 8009906:	bf00      	nop
 8009908:	58024400 	.word	0x58024400
 800990c:	03d09000 	.word	0x03d09000
 8009910:	0003d090 	.word	0x0003d090
 8009914:	0007a120 	.word	0x0007a120
 8009918:	000f4240 	.word	0x000f4240
 800991c:	001e8480 	.word	0x001e8480
 8009920:	003d0900 	.word	0x003d0900
 8009924:	00516155 	.word	0x00516155
 8009928:	0061a800 	.word	0x0061a800
 800992c:	007a1200 	.word	0x007a1200
 8009930:	00a2c2aa 	.word	0x00a2c2aa
 8009934:	00f42400 	.word	0x00f42400
 8009938:	01e84800 	.word	0x01e84800
 800993c:	0001e848 	.word	0x0001e848
 8009940:	00051615 	.word	0x00051615
 8009944:	00061a80 	.word	0x00061a80
 8009948:	000a2c2a 	.word	0x000a2c2a
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009950:	2b00      	cmp	r3, #0
 8009952:	d04e      	beq.n	80099f2 <UART_SetConfig+0x2292>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009958:	2b01      	cmp	r3, #1
 800995a:	d047      	beq.n	80099ec <UART_SetConfig+0x228c>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	2b02      	cmp	r3, #2
 8009962:	d040      	beq.n	80099e6 <UART_SetConfig+0x2286>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	2b03      	cmp	r3, #3
 800996a:	d039      	beq.n	80099e0 <UART_SetConfig+0x2280>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009970:	2b04      	cmp	r3, #4
 8009972:	d032      	beq.n	80099da <UART_SetConfig+0x227a>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009978:	2b05      	cmp	r3, #5
 800997a:	d02b      	beq.n	80099d4 <UART_SetConfig+0x2274>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009980:	2b06      	cmp	r3, #6
 8009982:	d024      	beq.n	80099ce <UART_SetConfig+0x226e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009988:	2b07      	cmp	r3, #7
 800998a:	d01d      	beq.n	80099c8 <UART_SetConfig+0x2268>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009990:	2b08      	cmp	r3, #8
 8009992:	d016      	beq.n	80099c2 <UART_SetConfig+0x2262>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	2b09      	cmp	r3, #9
 800999a:	d00f      	beq.n	80099bc <UART_SetConfig+0x225c>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a0:	2b0a      	cmp	r3, #10
 80099a2:	d008      	beq.n	80099b6 <UART_SetConfig+0x2256>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	2b0b      	cmp	r3, #11
 80099aa:	d101      	bne.n	80099b0 <UART_SetConfig+0x2250>
 80099ac:	2380      	movs	r3, #128	; 0x80
 80099ae:	e022      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099b4:	e01f      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80099ba:	e01c      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099c0:	e019      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099c6:	e016      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80099cc:	e013      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099ce:	f640 23aa 	movw	r3, #2730	; 0xaaa
 80099d2:	e010      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099d4:	f640 43cc 	movw	r3, #3276	; 0xccc
 80099d8:	e00d      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80099de:	e00a      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099e0:	f241 5355 	movw	r3, #5461	; 0x1555
 80099e4:	e007      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80099ea:	e004      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80099f0:	e001      	b.n	80099f6 <UART_SetConfig+0x2296>
 80099f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099f6:	687a      	ldr	r2, [r7, #4]
 80099f8:	6852      	ldr	r2, [r2, #4]
 80099fa:	0852      	lsrs	r2, r2, #1
 80099fc:	441a      	add	r2, r3
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a0a:	e003      	b.n	8009a14 <UART_SetConfig+0x22b4>
      default:
        ret = HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        break;
 8009a12:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a16:	2b0f      	cmp	r3, #15
 8009a18:	d908      	bls.n	8009a2c <UART_SetConfig+0x22cc>
 8009a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a20:	d204      	bcs.n	8009a2c <UART_SetConfig+0x22cc>
    {
      huart->Instance->BRR = usartdiv;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009a28:	60da      	str	r2, [r3, #12]
 8009a2a:	e002      	b.n	8009a32 <UART_SetConfig+0x22d2>
    }
    else
    {
      ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2201      	movs	r2, #1
 8009a36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2200      	movs	r2, #0
 8009a46:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8009a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3740      	adds	r7, #64	; 0x40
 8009a56:	46bd      	mov	sp, r7
 8009a58:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009a5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a5c:	b480      	push	{r7}
 8009a5e:	b083      	sub	sp, #12
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a68:	f003 0301 	and.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d00a      	beq.n	8009a86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a8a:	f003 0302 	and.w	r3, r3, #2
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d00a      	beq.n	8009aa8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	685b      	ldr	r3, [r3, #4]
 8009a98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aac:	f003 0304 	and.w	r3, r3, #4
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ace:	f003 0308 	and.w	r3, r3, #8
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009af0:	f003 0310 	and.w	r3, r3, #16
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	689b      	ldr	r3, [r3, #8]
 8009afe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b12:	f003 0320 	and.w	r3, r3, #32
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01a      	beq.n	8009b72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b5a:	d10a      	bne.n	8009b72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	685b      	ldr	r3, [r3, #4]
 8009b62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d00a      	beq.n	8009b94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	430a      	orrs	r2, r1
 8009b92:	605a      	str	r2, [r3, #4]
  }
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af02      	add	r7, sp, #8
 8009ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009bb0:	f7f8 fa38 	bl	8002024 <HAL_GetTick>
 8009bb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f003 0308 	and.w	r3, r3, #8
 8009bc0:	2b08      	cmp	r3, #8
 8009bc2:	d10e      	bne.n	8009be2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bc8:	9300      	str	r3, [sp, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f82c 	bl	8009c30 <UART_WaitOnFlagUntilTimeout>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d001      	beq.n	8009be2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bde:	2303      	movs	r3, #3
 8009be0:	e022      	b.n	8009c28 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f003 0304 	and.w	r3, r3, #4
 8009bec:	2b04      	cmp	r3, #4
 8009bee:	d10e      	bne.n	8009c0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bf0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bf4:	9300      	str	r3, [sp, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f816 	bl	8009c30 <UART_WaitOnFlagUntilTimeout>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d001      	beq.n	8009c0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c0a:	2303      	movs	r3, #3
 8009c0c:	e00c      	b.n	8009c28 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2220      	movs	r2, #32
 8009c12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c26:	2300      	movs	r3, #0
}
 8009c28:	4618      	mov	r0, r3
 8009c2a:	3710      	adds	r7, #16
 8009c2c:	46bd      	mov	sp, r7
 8009c2e:	bd80      	pop	{r7, pc}

08009c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c30:	b580      	push	{r7, lr}
 8009c32:	b084      	sub	sp, #16
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	60f8      	str	r0, [r7, #12]
 8009c38:	60b9      	str	r1, [r7, #8]
 8009c3a:	603b      	str	r3, [r7, #0]
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c40:	e062      	b.n	8009d08 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c48:	d05e      	beq.n	8009d08 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c4a:	f7f8 f9eb 	bl	8002024 <HAL_GetTick>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	69ba      	ldr	r2, [r7, #24]
 8009c56:	429a      	cmp	r2, r3
 8009c58:	d302      	bcc.n	8009c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d11d      	bne.n	8009c9c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009c6e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689a      	ldr	r2, [r3, #8]
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e045      	b.n	8009d28 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f003 0304 	and.w	r3, r3, #4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d02e      	beq.n	8009d08 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cb8:	d126      	bne.n	8009d08 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cc2:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	681a      	ldr	r2, [r3, #0]
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009cd2:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 0201 	bic.w	r2, r2, #1
 8009ce2:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2220      	movs	r2, #32
 8009ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e00f      	b.n	8009d28 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69da      	ldr	r2, [r3, #28]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4013      	ands	r3, r2
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	bf0c      	ite	eq
 8009d18:	2301      	moveq	r3, #1
 8009d1a:	2300      	movne	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d08d      	beq.n	8009c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d26:	2300      	movs	r3, #0
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3710      	adds	r7, #16
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009d46:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6899      	ldr	r1, [r3, #8]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	4b08      	ldr	r3, [pc, #32]	; (8009d74 <UART_EndRxTransfer+0x44>)
 8009d54:	400b      	ands	r3, r1
 8009d56:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8009d66:	bf00      	nop
 8009d68:	370c      	adds	r7, #12
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d70:	4770      	bx	lr
 8009d72:	bf00      	nop
 8009d74:	effffffe 	.word	0xeffffffe

08009d78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	f7fd fcd8 	bl	800774c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009d9c:	bf00      	nop
 8009d9e:	3710      	adds	r7, #16
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b082      	sub	sp, #8
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dba:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2220      	movs	r2, #32
 8009dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f7fd fcb4 	bl	8007738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009dd0:	bf00      	nop
 8009dd2:	3708      	adds	r7, #8
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009de0:	bf00      	nop
 8009de2:	370c      	adds	r7, #12
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr

08009dec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b085      	sub	sp, #20
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d101      	bne.n	8009e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8009e26:	2302      	movs	r3, #2
 8009e28:	e027      	b.n	8009e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2224      	movs	r2, #36	; 0x24
 8009e36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	681a      	ldr	r2, [r3, #0]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f022 0201 	bic.w	r2, r2, #1
 8009e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2220      	movs	r2, #32
 8009e6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2200      	movs	r2, #0
 8009e74:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009e78:	2300      	movs	r3, #0
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e86:	b580      	push	{r7, lr}
 8009e88:	b084      	sub	sp, #16
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d101      	bne.n	8009e9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	e02d      	b.n	8009efa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2224      	movs	r2, #36	; 0x24
 8009eaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f022 0201 	bic.w	r2, r2, #1
 8009ec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	683a      	ldr	r2, [r7, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f000 f850 	bl	8009f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68fa      	ldr	r2, [r7, #12]
 8009ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2220      	movs	r2, #32
 8009eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3710      	adds	r7, #16
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f02:	b580      	push	{r7, lr}
 8009f04:	b084      	sub	sp, #16
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
 8009f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e02d      	b.n	8009f76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2224      	movs	r2, #36	; 0x24
 8009f26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	681a      	ldr	r2, [r3, #0]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f022 0201 	bic.w	r2, r2, #1
 8009f40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	683a      	ldr	r2, [r7, #0]
 8009f52:	430a      	orrs	r2, r1
 8009f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f812 	bl	8009f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	68fa      	ldr	r2, [r7, #12]
 8009f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2220      	movs	r2, #32
 8009f68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2200      	movs	r2, #0
 8009f70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}
	...

08009f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b089      	sub	sp, #36	; 0x24
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8009f88:	4a2f      	ldr	r2, [pc, #188]	; (800a048 <UARTEx_SetNbDataToProcess+0xc8>)
 8009f8a:	f107 0314 	add.w	r3, r7, #20
 8009f8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009f92:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8009f96:	4a2d      	ldr	r2, [pc, #180]	; (800a04c <UARTEx_SetNbDataToProcess+0xcc>)
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009fa0:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d108      	bne.n	8009fbe <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2201      	movs	r2, #1
 8009fb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fbc:	e03d      	b.n	800a03a <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fbe:	2308      	movs	r3, #8
 8009fc0:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fc2:	2308      	movs	r3, #8
 8009fc4:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	689b      	ldr	r3, [r3, #8]
 8009fcc:	0e5b      	lsrs	r3, r3, #25
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	f003 0307 	and.w	r3, r3, #7
 8009fd4:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	0f5b      	lsrs	r3, r3, #29
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8009fe6:	7fbb      	ldrb	r3, [r7, #30]
 8009fe8:	7f3a      	ldrb	r2, [r7, #28]
 8009fea:	f107 0120 	add.w	r1, r7, #32
 8009fee:	440a      	add	r2, r1
 8009ff0:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8009ff4:	fb02 f303 	mul.w	r3, r2, r3
 8009ff8:	7f3a      	ldrb	r2, [r7, #28]
 8009ffa:	f107 0120 	add.w	r1, r7, #32
 8009ffe:	440a      	add	r2, r1
 800a000:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a004:	fb93 f3f2 	sdiv	r3, r3, r2
 800a008:	b29a      	uxth	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a010:	7ffb      	ldrb	r3, [r7, #31]
 800a012:	7f7a      	ldrb	r2, [r7, #29]
 800a014:	f107 0120 	add.w	r1, r7, #32
 800a018:	440a      	add	r2, r1
 800a01a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a01e:	fb02 f303 	mul.w	r3, r2, r3
 800a022:	7f7a      	ldrb	r2, [r7, #29]
 800a024:	f107 0120 	add.w	r1, r7, #32
 800a028:	440a      	add	r2, r1
 800a02a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a02e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a032:	b29a      	uxth	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a03a:	bf00      	nop
 800a03c:	3724      	adds	r7, #36	; 0x24
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	0800daa4 	.word	0x0800daa4
 800a04c:	0800daac 	.word	0x0800daac

0800a050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a050:	b084      	sub	sp, #16
 800a052:	b580      	push	{r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	6078      	str	r0, [r7, #4]
 800a05a:	f107 001c 	add.w	r0, r7, #28
 800a05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a064:	2b01      	cmp	r3, #1
 800a066:	d120      	bne.n	800a0aa <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	4b25      	ldr	r3, [pc, #148]	; (800a110 <USB_CoreInit+0xc0>)
 800a07a:	4013      	ands	r3, r2
 800a07c:	687a      	ldr	r2, [r7, #4]
 800a07e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a08c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d105      	bne.n	800a09e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f001 fa66 	bl	800b570 <USB_CoreReset>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	73fb      	strb	r3, [r7, #15]
 800a0a8:	e01a      	b.n	800a0e0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f001 fa5a 	bl	800b570 <USB_CoreReset>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a0c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d106      	bne.n	800a0d4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	639a      	str	r2, [r3, #56]	; 0x38
 800a0d2:	e005      	b.n	800a0e0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a0e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d10b      	bne.n	800a0fe <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f043 0206 	orr.w	r2, r3, #6
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	689b      	ldr	r3, [r3, #8]
 800a0f6:	f043 0220 	orr.w	r2, r3, #32
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a10a:	b004      	add	sp, #16
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	ffbdffbf 	.word	0xffbdffbf

0800a114 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a114:	b480      	push	{r7}
 800a116:	b087      	sub	sp, #28
 800a118:	af00      	add	r7, sp, #0
 800a11a:	60f8      	str	r0, [r7, #12]
 800a11c:	60b9      	str	r1, [r7, #8]
 800a11e:	4613      	mov	r3, r2
 800a120:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a122:	79fb      	ldrb	r3, [r7, #7]
 800a124:	2b02      	cmp	r3, #2
 800a126:	d165      	bne.n	800a1f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	4a41      	ldr	r2, [pc, #260]	; (800a230 <USB_SetTurnaroundTime+0x11c>)
 800a12c:	4293      	cmp	r3, r2
 800a12e:	d906      	bls.n	800a13e <USB_SetTurnaroundTime+0x2a>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	4a40      	ldr	r2, [pc, #256]	; (800a234 <USB_SetTurnaroundTime+0x120>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d802      	bhi.n	800a13e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a138:	230f      	movs	r3, #15
 800a13a:	617b      	str	r3, [r7, #20]
 800a13c:	e062      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a13e:	68bb      	ldr	r3, [r7, #8]
 800a140:	4a3c      	ldr	r2, [pc, #240]	; (800a234 <USB_SetTurnaroundTime+0x120>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d906      	bls.n	800a154 <USB_SetTurnaroundTime+0x40>
 800a146:	68bb      	ldr	r3, [r7, #8]
 800a148:	4a3b      	ldr	r2, [pc, #236]	; (800a238 <USB_SetTurnaroundTime+0x124>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d802      	bhi.n	800a154 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a14e:	230e      	movs	r3, #14
 800a150:	617b      	str	r3, [r7, #20]
 800a152:	e057      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	4a38      	ldr	r2, [pc, #224]	; (800a238 <USB_SetTurnaroundTime+0x124>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d906      	bls.n	800a16a <USB_SetTurnaroundTime+0x56>
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	4a37      	ldr	r2, [pc, #220]	; (800a23c <USB_SetTurnaroundTime+0x128>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d802      	bhi.n	800a16a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a164:	230d      	movs	r3, #13
 800a166:	617b      	str	r3, [r7, #20]
 800a168:	e04c      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a16a:	68bb      	ldr	r3, [r7, #8]
 800a16c:	4a33      	ldr	r2, [pc, #204]	; (800a23c <USB_SetTurnaroundTime+0x128>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d906      	bls.n	800a180 <USB_SetTurnaroundTime+0x6c>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	4a32      	ldr	r2, [pc, #200]	; (800a240 <USB_SetTurnaroundTime+0x12c>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d802      	bhi.n	800a180 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a17a:	230c      	movs	r3, #12
 800a17c:	617b      	str	r3, [r7, #20]
 800a17e:	e041      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	4a2f      	ldr	r2, [pc, #188]	; (800a240 <USB_SetTurnaroundTime+0x12c>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d906      	bls.n	800a196 <USB_SetTurnaroundTime+0x82>
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	4a2e      	ldr	r2, [pc, #184]	; (800a244 <USB_SetTurnaroundTime+0x130>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d802      	bhi.n	800a196 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a190:	230b      	movs	r3, #11
 800a192:	617b      	str	r3, [r7, #20]
 800a194:	e036      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	4a2a      	ldr	r2, [pc, #168]	; (800a244 <USB_SetTurnaroundTime+0x130>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d906      	bls.n	800a1ac <USB_SetTurnaroundTime+0x98>
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	4a29      	ldr	r2, [pc, #164]	; (800a248 <USB_SetTurnaroundTime+0x134>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d802      	bhi.n	800a1ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a1a6:	230a      	movs	r3, #10
 800a1a8:	617b      	str	r3, [r7, #20]
 800a1aa:	e02b      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	4a26      	ldr	r2, [pc, #152]	; (800a248 <USB_SetTurnaroundTime+0x134>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d906      	bls.n	800a1c2 <USB_SetTurnaroundTime+0xae>
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4a25      	ldr	r2, [pc, #148]	; (800a24c <USB_SetTurnaroundTime+0x138>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d802      	bhi.n	800a1c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a1bc:	2309      	movs	r3, #9
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	e020      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	4a21      	ldr	r2, [pc, #132]	; (800a24c <USB_SetTurnaroundTime+0x138>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d906      	bls.n	800a1d8 <USB_SetTurnaroundTime+0xc4>
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	4a20      	ldr	r2, [pc, #128]	; (800a250 <USB_SetTurnaroundTime+0x13c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d802      	bhi.n	800a1d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a1d2:	2308      	movs	r3, #8
 800a1d4:	617b      	str	r3, [r7, #20]
 800a1d6:	e015      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	4a1d      	ldr	r2, [pc, #116]	; (800a250 <USB_SetTurnaroundTime+0x13c>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d906      	bls.n	800a1ee <USB_SetTurnaroundTime+0xda>
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	4a1c      	ldr	r2, [pc, #112]	; (800a254 <USB_SetTurnaroundTime+0x140>)
 800a1e4:	4293      	cmp	r3, r2
 800a1e6:	d802      	bhi.n	800a1ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a1e8:	2307      	movs	r3, #7
 800a1ea:	617b      	str	r3, [r7, #20]
 800a1ec:	e00a      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a1ee:	2306      	movs	r3, #6
 800a1f0:	617b      	str	r3, [r7, #20]
 800a1f2:	e007      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d102      	bne.n	800a200 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a1fa:	2309      	movs	r3, #9
 800a1fc:	617b      	str	r3, [r7, #20]
 800a1fe:	e001      	b.n	800a204 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a200:	2309      	movs	r3, #9
 800a202:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	68db      	ldr	r3, [r3, #12]
 800a208:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	68da      	ldr	r2, [r3, #12]
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	029b      	lsls	r3, r3, #10
 800a218:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a21c:	431a      	orrs	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	371c      	adds	r7, #28
 800a228:	46bd      	mov	sp, r7
 800a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22e:	4770      	bx	lr
 800a230:	00d8acbf 	.word	0x00d8acbf
 800a234:	00e4e1bf 	.word	0x00e4e1bf
 800a238:	00f423ff 	.word	0x00f423ff
 800a23c:	0106737f 	.word	0x0106737f
 800a240:	011a499f 	.word	0x011a499f
 800a244:	01312cff 	.word	0x01312cff
 800a248:	014ca43f 	.word	0x014ca43f
 800a24c:	016e35ff 	.word	0x016e35ff
 800a250:	01a6ab1f 	.word	0x01a6ab1f
 800a254:	01e847ff 	.word	0x01e847ff

0800a258 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a258:	b480      	push	{r7}
 800a25a:	b083      	sub	sp, #12
 800a25c:	af00      	add	r7, sp, #0
 800a25e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	f043 0201 	orr.w	r2, r3, #1
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	370c      	adds	r7, #12
 800a272:	46bd      	mov	sp, r7
 800a274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a278:	4770      	bx	lr

0800a27a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	689b      	ldr	r3, [r3, #8]
 800a286:	f023 0201 	bic.w	r2, r3, #1
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	4618      	mov	r0, r3
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a2b4:	78fb      	ldrb	r3, [r7, #3]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d106      	bne.n	800a2c8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	60da      	str	r2, [r3, #12]
 800a2c6:	e00b      	b.n	800a2e0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a2c8:	78fb      	ldrb	r3, [r7, #3]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	60da      	str	r2, [r3, #12]
 800a2da:	e001      	b.n	800a2e0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e003      	b.n	800a2e8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a2e0:	2032      	movs	r0, #50	; 0x32
 800a2e2:	f7f7 feab 	bl	800203c <HAL_Delay>

  return HAL_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3708      	adds	r7, #8
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b086      	sub	sp, #24
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a2fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a30a:	2300      	movs	r3, #0
 800a30c:	613b      	str	r3, [r7, #16]
 800a30e:	e009      	b.n	800a324 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	693b      	ldr	r3, [r7, #16]
 800a314:	3340      	adds	r3, #64	; 0x40
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	2200      	movs	r2, #0
 800a31c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	3301      	adds	r3, #1
 800a322:	613b      	str	r3, [r7, #16]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	2b0e      	cmp	r3, #14
 800a328:	d9f2      	bls.n	800a310 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d11c      	bne.n	800a36a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	68fa      	ldr	r2, [r7, #12]
 800a33a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a33e:	f043 0302 	orr.w	r3, r3, #2
 800a342:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a348:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	601a      	str	r2, [r3, #0]
 800a368:	e005      	b.n	800a376 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a37c:	461a      	mov	r2, r3
 800a37e:	2300      	movs	r3, #0
 800a380:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a388:	4619      	mov	r1, r3
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a390:	461a      	mov	r2, r3
 800a392:	680b      	ldr	r3, [r1, #0]
 800a394:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d10c      	bne.n	800a3b6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d104      	bne.n	800a3ac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f949 	bl	800a63c <USB_SetDevSpeed>
 800a3aa:	e008      	b.n	800a3be <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a3ac:	2101      	movs	r1, #1
 800a3ae:	6878      	ldr	r0, [r7, #4]
 800a3b0:	f000 f944 	bl	800a63c <USB_SetDevSpeed>
 800a3b4:	e003      	b.n	800a3be <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3b6:	2103      	movs	r1, #3
 800a3b8:	6878      	ldr	r0, [r7, #4]
 800a3ba:	f000 f93f 	bl	800a63c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3be:	2110      	movs	r1, #16
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f8f3 	bl	800a5ac <USB_FlushTxFifo>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f911 	bl	800a5f8 <USB_FlushRxFifo>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3f2:	461a      	mov	r2, r3
 800a3f4:	2300      	movs	r3, #0
 800a3f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fe:	461a      	mov	r2, r3
 800a400:	2300      	movs	r3, #0
 800a402:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a404:	2300      	movs	r3, #0
 800a406:	613b      	str	r3, [r7, #16]
 800a408:	e043      	b.n	800a492 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a40a:	693b      	ldr	r3, [r7, #16]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	4413      	add	r3, r2
 800a412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a41c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a420:	d118      	bne.n	800a454 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d10a      	bne.n	800a43e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a434:	461a      	mov	r2, r3
 800a436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a43a:	6013      	str	r3, [r2, #0]
 800a43c:	e013      	b.n	800a466 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	015a      	lsls	r2, r3, #5
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	4413      	add	r3, r2
 800a446:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44a:	461a      	mov	r2, r3
 800a44c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a450:	6013      	str	r3, [r2, #0]
 800a452:	e008      	b.n	800a466 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	015a      	lsls	r2, r3, #5
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4413      	add	r3, r2
 800a45c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a460:	461a      	mov	r2, r3
 800a462:	2300      	movs	r3, #0
 800a464:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a466:	693b      	ldr	r3, [r7, #16]
 800a468:	015a      	lsls	r2, r3, #5
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	4413      	add	r3, r2
 800a46e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a472:	461a      	mov	r2, r3
 800a474:	2300      	movs	r3, #0
 800a476:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	015a      	lsls	r2, r3, #5
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	4413      	add	r3, r2
 800a480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a484:	461a      	mov	r2, r3
 800a486:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a48a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	3301      	adds	r3, #1
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	429a      	cmp	r2, r3
 800a498:	d3b7      	bcc.n	800a40a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a49a:	2300      	movs	r3, #0
 800a49c:	613b      	str	r3, [r7, #16]
 800a49e:	e043      	b.n	800a528 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a4a0:	693b      	ldr	r3, [r7, #16]
 800a4a2:	015a      	lsls	r2, r3, #5
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a4b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4b6:	d118      	bne.n	800a4ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d10a      	bne.n	800a4d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	015a      	lsls	r2, r3, #5
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	4413      	add	r3, r2
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4ca:	461a      	mov	r2, r3
 800a4cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e013      	b.n	800a4fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	015a      	lsls	r2, r3, #5
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	4413      	add	r3, r2
 800a4dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4e6:	6013      	str	r3, [r2, #0]
 800a4e8:	e008      	b.n	800a4fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	015a      	lsls	r2, r3, #5
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	015a      	lsls	r2, r3, #5
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	4413      	add	r3, r2
 800a504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a508:	461a      	mov	r2, r3
 800a50a:	2300      	movs	r3, #0
 800a50c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	015a      	lsls	r2, r3, #5
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	4413      	add	r3, r2
 800a516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51a:	461a      	mov	r2, r3
 800a51c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a520:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	3301      	adds	r3, #1
 800a526:	613b      	str	r3, [r7, #16]
 800a528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a52a:	693a      	ldr	r2, [r7, #16]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d3b7      	bcc.n	800a4a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	68fa      	ldr	r2, [r7, #12]
 800a53a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a53e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a542:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2200      	movs	r2, #0
 800a548:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a550:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a554:	2b00      	cmp	r3, #0
 800a556:	d105      	bne.n	800a564 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	f043 0210 	orr.w	r2, r3, #16
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699a      	ldr	r2, [r3, #24]
 800a568:	4b0e      	ldr	r3, [pc, #56]	; (800a5a4 <USB_DevInit+0x2b4>)
 800a56a:	4313      	orrs	r3, r2
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a570:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a572:	2b00      	cmp	r3, #0
 800a574:	d005      	beq.n	800a582 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	699b      	ldr	r3, [r3, #24]
 800a57a:	f043 0208 	orr.w	r2, r3, #8
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a584:	2b01      	cmp	r3, #1
 800a586:	d105      	bne.n	800a594 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	699a      	ldr	r2, [r3, #24]
 800a58c:	4b06      	ldr	r3, [pc, #24]	; (800a5a8 <USB_DevInit+0x2b8>)
 800a58e:	4313      	orrs	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a594:	7dfb      	ldrb	r3, [r7, #23]
}
 800a596:	4618      	mov	r0, r3
 800a598:	3718      	adds	r7, #24
 800a59a:	46bd      	mov	sp, r7
 800a59c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5a0:	b004      	add	sp, #16
 800a5a2:	4770      	bx	lr
 800a5a4:	803c3800 	.word	0x803c3800
 800a5a8:	40000004 	.word	0x40000004

0800a5ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b085      	sub	sp, #20
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	019b      	lsls	r3, r3, #6
 800a5be:	f043 0220 	orr.w	r2, r3, #32
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	60fb      	str	r3, [r7, #12]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <USB_FlushTxFifo+0x48>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d901      	bls.n	800a5d8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a5d4:	2303      	movs	r3, #3
 800a5d6:	e006      	b.n	800a5e6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	f003 0320 	and.w	r3, r3, #32
 800a5e0:	2b20      	cmp	r3, #32
 800a5e2:	d0f0      	beq.n	800a5c6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a5e4:	2300      	movs	r3, #0
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr
 800a5f2:	bf00      	nop
 800a5f4:	00030d40 	.word	0x00030d40

0800a5f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a600:	2300      	movs	r3, #0
 800a602:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2210      	movs	r2, #16
 800a608:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	3301      	adds	r3, #1
 800a60e:	60fb      	str	r3, [r7, #12]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	4a09      	ldr	r2, [pc, #36]	; (800a638 <USB_FlushRxFifo+0x40>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d901      	bls.n	800a61c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a618:	2303      	movs	r3, #3
 800a61a:	e006      	b.n	800a62a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	691b      	ldr	r3, [r3, #16]
 800a620:	f003 0310 	and.w	r3, r3, #16
 800a624:	2b10      	cmp	r3, #16
 800a626:	d0f0      	beq.n	800a60a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a628:	2300      	movs	r3, #0
}
 800a62a:	4618      	mov	r0, r3
 800a62c:	3714      	adds	r7, #20
 800a62e:	46bd      	mov	sp, r7
 800a630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a634:	4770      	bx	lr
 800a636:	bf00      	nop
 800a638:	00030d40 	.word	0x00030d40

0800a63c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b085      	sub	sp, #20
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
 800a644:	460b      	mov	r3, r1
 800a646:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a652:	681a      	ldr	r2, [r3, #0]
 800a654:	78fb      	ldrb	r3, [r7, #3]
 800a656:	68f9      	ldr	r1, [r7, #12]
 800a658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a65c:	4313      	orrs	r3, r2
 800a65e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a660:	2300      	movs	r3, #0
}
 800a662:	4618      	mov	r0, r3
 800a664:	3714      	adds	r7, #20
 800a666:	46bd      	mov	sp, r7
 800a668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66c:	4770      	bx	lr

0800a66e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a66e:	b480      	push	{r7}
 800a670:	b087      	sub	sp, #28
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f003 0306 	and.w	r3, r3, #6
 800a686:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a68e:	2300      	movs	r3, #0
 800a690:	75fb      	strb	r3, [r7, #23]
 800a692:	e00a      	b.n	800a6aa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2b02      	cmp	r3, #2
 800a698:	d002      	beq.n	800a6a0 <USB_GetDevSpeed+0x32>
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	2b06      	cmp	r3, #6
 800a69e:	d102      	bne.n	800a6a6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6a0:	2302      	movs	r3, #2
 800a6a2:	75fb      	strb	r3, [r7, #23]
 800a6a4:	e001      	b.n	800a6aa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6a6:	230f      	movs	r3, #15
 800a6a8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	371c      	adds	r7, #28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b085      	sub	sp, #20
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	785b      	ldrb	r3, [r3, #1]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d139      	bne.n	800a748 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6da:	69da      	ldr	r2, [r3, #28]
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	781b      	ldrb	r3, [r3, #0]
 800a6e0:	f003 030f 	and.w	r3, r3, #15
 800a6e4:	2101      	movs	r1, #1
 800a6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	68f9      	ldr	r1, [r7, #12]
 800a6ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d153      	bne.n	800a7b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a718:	681a      	ldr	r2, [r3, #0]
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	689b      	ldr	r3, [r3, #8]
 800a71e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	78db      	ldrb	r3, [r3, #3]
 800a726:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a728:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	059b      	lsls	r3, r3, #22
 800a72e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a730:	431a      	orrs	r2, r3
 800a732:	68bb      	ldr	r3, [r7, #8]
 800a734:	0159      	lsls	r1, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	440b      	add	r3, r1
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	4619      	mov	r1, r3
 800a740:	4b20      	ldr	r3, [pc, #128]	; (800a7c4 <USB_ActivateEndpoint+0x10c>)
 800a742:	4313      	orrs	r3, r2
 800a744:	600b      	str	r3, [r1, #0]
 800a746:	e035      	b.n	800a7b4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a74e:	69da      	ldr	r2, [r3, #28]
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	781b      	ldrb	r3, [r3, #0]
 800a754:	f003 030f 	and.w	r3, r3, #15
 800a758:	2101      	movs	r1, #1
 800a75a:	fa01 f303 	lsl.w	r3, r1, r3
 800a75e:	041b      	lsls	r3, r3, #16
 800a760:	68f9      	ldr	r1, [r7, #12]
 800a762:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a766:	4313      	orrs	r3, r2
 800a768:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d119      	bne.n	800a7b4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	689b      	ldr	r3, [r3, #8]
 800a792:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	78db      	ldrb	r3, [r3, #3]
 800a79a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a79c:	430b      	orrs	r3, r1
 800a79e:	431a      	orrs	r2, r3
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	0159      	lsls	r1, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	440b      	add	r3, r1
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ac:	4619      	mov	r1, r3
 800a7ae:	4b05      	ldr	r3, [pc, #20]	; (800a7c4 <USB_ActivateEndpoint+0x10c>)
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7b4:	2300      	movs	r3, #0
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	3714      	adds	r7, #20
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	10008000 	.word	0x10008000

0800a7c8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7d6:	683b      	ldr	r3, [r7, #0]
 800a7d8:	781b      	ldrb	r3, [r3, #0]
 800a7da:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a7dc:	683b      	ldr	r3, [r7, #0]
 800a7de:	785b      	ldrb	r3, [r3, #1]
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d135      	bne.n	800a850 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	781b      	ldrb	r3, [r3, #0]
 800a7f0:	f003 030f 	and.w	r3, r3, #15
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	43db      	mvns	r3, r3
 800a7fe:	68f9      	ldr	r1, [r7, #12]
 800a800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a804:	4013      	ands	r3, r2
 800a806:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	f003 030f 	and.w	r3, r3, #15
 800a818:	2101      	movs	r1, #1
 800a81a:	fa01 f303 	lsl.w	r3, r1, r3
 800a81e:	b29b      	uxth	r3, r3
 800a820:	43db      	mvns	r3, r3
 800a822:	68f9      	ldr	r1, [r7, #12]
 800a824:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a828:	4013      	ands	r3, r2
 800a82a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	015a      	lsls	r2, r3, #5
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4413      	add	r3, r2
 800a834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a838:	681a      	ldr	r2, [r3, #0]
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	0159      	lsls	r1, r3, #5
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	440b      	add	r3, r1
 800a842:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a846:	4619      	mov	r1, r3
 800a848:	4b1f      	ldr	r3, [pc, #124]	; (800a8c8 <USB_DeactivateEndpoint+0x100>)
 800a84a:	4013      	ands	r3, r2
 800a84c:	600b      	str	r3, [r1, #0]
 800a84e:	e034      	b.n	800a8ba <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a856:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	f003 030f 	and.w	r3, r3, #15
 800a860:	2101      	movs	r1, #1
 800a862:	fa01 f303 	lsl.w	r3, r1, r3
 800a866:	041b      	lsls	r3, r3, #16
 800a868:	43db      	mvns	r3, r3
 800a86a:	68f9      	ldr	r1, [r7, #12]
 800a86c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a870:	4013      	ands	r3, r2
 800a872:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a87a:	69da      	ldr	r2, [r3, #28]
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	2101      	movs	r1, #1
 800a886:	fa01 f303 	lsl.w	r3, r1, r3
 800a88a:	041b      	lsls	r3, r3, #16
 800a88c:	43db      	mvns	r3, r3
 800a88e:	68f9      	ldr	r1, [r7, #12]
 800a890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a894:	4013      	ands	r3, r2
 800a896:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a898:	68bb      	ldr	r3, [r7, #8]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	0159      	lsls	r1, r3, #5
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	440b      	add	r3, r1
 800a8ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8b2:	4619      	mov	r1, r3
 800a8b4:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <USB_DeactivateEndpoint+0x104>)
 800a8b6:	4013      	ands	r3, r2
 800a8b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	ec337800 	.word	0xec337800
 800a8cc:	eff37800 	.word	0xeff37800

0800a8d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08a      	sub	sp, #40	; 0x28
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a8e2:	68bb      	ldr	r3, [r7, #8]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	785b      	ldrb	r3, [r3, #1]
 800a8ec:	2b01      	cmp	r3, #1
 800a8ee:	f040 8163 	bne.w	800abb8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a8f2:	68bb      	ldr	r3, [r7, #8]
 800a8f4:	695b      	ldr	r3, [r3, #20]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d132      	bne.n	800a960 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a8fa:	69bb      	ldr	r3, [r7, #24]
 800a8fc:	015a      	lsls	r2, r3, #5
 800a8fe:	69fb      	ldr	r3, [r7, #28]
 800a900:	4413      	add	r3, r2
 800a902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a906:	691a      	ldr	r2, [r3, #16]
 800a908:	69bb      	ldr	r3, [r7, #24]
 800a90a:	0159      	lsls	r1, r3, #5
 800a90c:	69fb      	ldr	r3, [r7, #28]
 800a90e:	440b      	add	r3, r1
 800a910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a914:	4619      	mov	r1, r3
 800a916:	4ba5      	ldr	r3, [pc, #660]	; (800abac <USB_EPStartXfer+0x2dc>)
 800a918:	4013      	ands	r3, r2
 800a91a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a91c:	69bb      	ldr	r3, [r7, #24]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a928:	691b      	ldr	r3, [r3, #16]
 800a92a:	69ba      	ldr	r2, [r7, #24]
 800a92c:	0151      	lsls	r1, r2, #5
 800a92e:	69fa      	ldr	r2, [r7, #28]
 800a930:	440a      	add	r2, r1
 800a932:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a93a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	015a      	lsls	r2, r3, #5
 800a940:	69fb      	ldr	r3, [r7, #28]
 800a942:	4413      	add	r3, r2
 800a944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a948:	691a      	ldr	r2, [r3, #16]
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	0159      	lsls	r1, r3, #5
 800a94e:	69fb      	ldr	r3, [r7, #28]
 800a950:	440b      	add	r3, r1
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	4619      	mov	r1, r3
 800a958:	4b95      	ldr	r3, [pc, #596]	; (800abb0 <USB_EPStartXfer+0x2e0>)
 800a95a:	4013      	ands	r3, r2
 800a95c:	610b      	str	r3, [r1, #16]
 800a95e:	e074      	b.n	800aa4a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	015a      	lsls	r2, r3, #5
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	4413      	add	r3, r2
 800a968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a96c:	691a      	ldr	r2, [r3, #16]
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	0159      	lsls	r1, r3, #5
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	440b      	add	r3, r1
 800a976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a97a:	4619      	mov	r1, r3
 800a97c:	4b8c      	ldr	r3, [pc, #560]	; (800abb0 <USB_EPStartXfer+0x2e0>)
 800a97e:	4013      	ands	r3, r2
 800a980:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	015a      	lsls	r2, r3, #5
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	4413      	add	r3, r2
 800a98a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a98e:	691a      	ldr	r2, [r3, #16]
 800a990:	69bb      	ldr	r3, [r7, #24]
 800a992:	0159      	lsls	r1, r3, #5
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	440b      	add	r3, r1
 800a998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a99c:	4619      	mov	r1, r3
 800a99e:	4b83      	ldr	r3, [pc, #524]	; (800abac <USB_EPStartXfer+0x2dc>)
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b0:	691a      	ldr	r2, [r3, #16]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	6959      	ldr	r1, [r3, #20]
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	689b      	ldr	r3, [r3, #8]
 800a9ba:	440b      	add	r3, r1
 800a9bc:	1e59      	subs	r1, r3, #1
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	689b      	ldr	r3, [r3, #8]
 800a9c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a9c6:	04d9      	lsls	r1, r3, #19
 800a9c8:	4b7a      	ldr	r3, [pc, #488]	; (800abb4 <USB_EPStartXfer+0x2e4>)
 800a9ca:	400b      	ands	r3, r1
 800a9cc:	69b9      	ldr	r1, [r7, #24]
 800a9ce:	0148      	lsls	r0, r1, #5
 800a9d0:	69f9      	ldr	r1, [r7, #28]
 800a9d2:	4401      	add	r1, r0
 800a9d4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a9dc:	69bb      	ldr	r3, [r7, #24]
 800a9de:	015a      	lsls	r2, r3, #5
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	4413      	add	r3, r2
 800a9e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9e8:	691a      	ldr	r2, [r3, #16]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a9f2:	69b9      	ldr	r1, [r7, #24]
 800a9f4:	0148      	lsls	r0, r1, #5
 800a9f6:	69f9      	ldr	r1, [r7, #28]
 800a9f8:	4401      	add	r1, r0
 800a9fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	78db      	ldrb	r3, [r3, #3]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d11f      	bne.n	800aa4a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	015a      	lsls	r2, r3, #5
 800aa0e:	69fb      	ldr	r3, [r7, #28]
 800aa10:	4413      	add	r3, r2
 800aa12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	69ba      	ldr	r2, [r7, #24]
 800aa1a:	0151      	lsls	r1, r2, #5
 800aa1c:	69fa      	ldr	r2, [r7, #28]
 800aa1e:	440a      	add	r2, r1
 800aa20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa24:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aa28:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	015a      	lsls	r2, r3, #5
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	4413      	add	r3, r2
 800aa32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	69ba      	ldr	r2, [r7, #24]
 800aa3a:	0151      	lsls	r1, r2, #5
 800aa3c:	69fa      	ldr	r2, [r7, #28]
 800aa3e:	440a      	add	r2, r1
 800aa40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa44:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aa48:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aa4a:	79fb      	ldrb	r3, [r7, #7]
 800aa4c:	2b01      	cmp	r3, #1
 800aa4e:	d14b      	bne.n	800aae8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d009      	beq.n	800aa6c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	015a      	lsls	r2, r3, #5
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	4413      	add	r3, r2
 800aa60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa64:	461a      	mov	r2, r3
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	691b      	ldr	r3, [r3, #16]
 800aa6a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	78db      	ldrb	r3, [r3, #3]
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d128      	bne.n	800aac6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aa74:	69fb      	ldr	r3, [r7, #28]
 800aa76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa7a:	689b      	ldr	r3, [r3, #8]
 800aa7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d110      	bne.n	800aaa6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aa84:	69bb      	ldr	r3, [r7, #24]
 800aa86:	015a      	lsls	r2, r3, #5
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	4413      	add	r3, r2
 800aa8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	69ba      	ldr	r2, [r7, #24]
 800aa94:	0151      	lsls	r1, r2, #5
 800aa96:	69fa      	ldr	r2, [r7, #28]
 800aa98:	440a      	add	r2, r1
 800aa9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aaa2:	6013      	str	r3, [r2, #0]
 800aaa4:	e00f      	b.n	800aac6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aaa6:	69bb      	ldr	r3, [r7, #24]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	69fb      	ldr	r3, [r7, #28]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	69ba      	ldr	r2, [r7, #24]
 800aab6:	0151      	lsls	r1, r2, #5
 800aab8:	69fa      	ldr	r2, [r7, #28]
 800aaba:	440a      	add	r2, r1
 800aabc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aac4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aac6:	69bb      	ldr	r3, [r7, #24]
 800aac8:	015a      	lsls	r2, r3, #5
 800aaca:	69fb      	ldr	r3, [r7, #28]
 800aacc:	4413      	add	r3, r2
 800aace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	0151      	lsls	r1, r2, #5
 800aad8:	69fa      	ldr	r2, [r7, #28]
 800aada:	440a      	add	r2, r1
 800aadc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aae0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aae4:	6013      	str	r3, [r2, #0]
 800aae6:	e133      	b.n	800ad50 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	015a      	lsls	r2, r3, #5
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	69ba      	ldr	r2, [r7, #24]
 800aaf8:	0151      	lsls	r1, r2, #5
 800aafa:	69fa      	ldr	r2, [r7, #28]
 800aafc:	440a      	add	r2, r1
 800aafe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ab06:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	78db      	ldrb	r3, [r3, #3]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d015      	beq.n	800ab3c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	f000 811b 	beq.w	800ad50 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	781b      	ldrb	r3, [r3, #0]
 800ab26:	f003 030f 	and.w	r3, r3, #15
 800ab2a:	2101      	movs	r1, #1
 800ab2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab30:	69f9      	ldr	r1, [r7, #28]
 800ab32:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab36:	4313      	orrs	r3, r2
 800ab38:	634b      	str	r3, [r1, #52]	; 0x34
 800ab3a:	e109      	b.n	800ad50 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab3c:	69fb      	ldr	r3, [r7, #28]
 800ab3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab42:	689b      	ldr	r3, [r3, #8]
 800ab44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d110      	bne.n	800ab6e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab4c:	69bb      	ldr	r3, [r7, #24]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	69fb      	ldr	r3, [r7, #28]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	69ba      	ldr	r2, [r7, #24]
 800ab5c:	0151      	lsls	r1, r2, #5
 800ab5e:	69fa      	ldr	r2, [r7, #28]
 800ab60:	440a      	add	r2, r1
 800ab62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab6a:	6013      	str	r3, [r2, #0]
 800ab6c:	e00f      	b.n	800ab8e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab6e:	69bb      	ldr	r3, [r7, #24]
 800ab70:	015a      	lsls	r2, r3, #5
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	4413      	add	r3, r2
 800ab76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	69ba      	ldr	r2, [r7, #24]
 800ab7e:	0151      	lsls	r1, r2, #5
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	440a      	add	r2, r1
 800ab84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab8c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	68d9      	ldr	r1, [r3, #12]
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	781a      	ldrb	r2, [r3, #0]
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	695b      	ldr	r3, [r3, #20]
 800ab9a:	b298      	uxth	r0, r3
 800ab9c:	79fb      	ldrb	r3, [r7, #7]
 800ab9e:	9300      	str	r3, [sp, #0]
 800aba0:	4603      	mov	r3, r0
 800aba2:	68f8      	ldr	r0, [r7, #12]
 800aba4:	f000 fa38 	bl	800b018 <USB_WritePacket>
 800aba8:	e0d2      	b.n	800ad50 <USB_EPStartXfer+0x480>
 800abaa:	bf00      	nop
 800abac:	e007ffff 	.word	0xe007ffff
 800abb0:	fff80000 	.word	0xfff80000
 800abb4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	015a      	lsls	r2, r3, #5
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	4413      	add	r3, r2
 800abc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc4:	691a      	ldr	r2, [r3, #16]
 800abc6:	69bb      	ldr	r3, [r7, #24]
 800abc8:	0159      	lsls	r1, r3, #5
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	440b      	add	r3, r1
 800abce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd2:	4619      	mov	r1, r3
 800abd4:	4b61      	ldr	r3, [pc, #388]	; (800ad5c <USB_EPStartXfer+0x48c>)
 800abd6:	4013      	ands	r3, r2
 800abd8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	015a      	lsls	r2, r3, #5
 800abde:	69fb      	ldr	r3, [r7, #28]
 800abe0:	4413      	add	r3, r2
 800abe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe6:	691a      	ldr	r2, [r3, #16]
 800abe8:	69bb      	ldr	r3, [r7, #24]
 800abea:	0159      	lsls	r1, r3, #5
 800abec:	69fb      	ldr	r3, [r7, #28]
 800abee:	440b      	add	r3, r1
 800abf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf4:	4619      	mov	r1, r3
 800abf6:	4b5a      	ldr	r3, [pc, #360]	; (800ad60 <USB_EPStartXfer+0x490>)
 800abf8:	4013      	ands	r3, r2
 800abfa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	695b      	ldr	r3, [r3, #20]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d123      	bne.n	800ac4c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	69fb      	ldr	r3, [r7, #28]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac10:	691a      	ldr	r2, [r3, #16]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	689b      	ldr	r3, [r3, #8]
 800ac16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ac1a:	69b9      	ldr	r1, [r7, #24]
 800ac1c:	0148      	lsls	r0, r1, #5
 800ac1e:	69f9      	ldr	r1, [r7, #28]
 800ac20:	4401      	add	r1, r0
 800ac22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac26:	4313      	orrs	r3, r2
 800ac28:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	015a      	lsls	r2, r3, #5
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	4413      	add	r3, r2
 800ac32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac36:	691b      	ldr	r3, [r3, #16]
 800ac38:	69ba      	ldr	r2, [r7, #24]
 800ac3a:	0151      	lsls	r1, r2, #5
 800ac3c:	69fa      	ldr	r2, [r7, #28]
 800ac3e:	440a      	add	r2, r1
 800ac40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac48:	6113      	str	r3, [r2, #16]
 800ac4a:	e033      	b.n	800acb4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	695a      	ldr	r2, [r3, #20]
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	4413      	add	r3, r2
 800ac56:	1e5a      	subs	r2, r3, #1
 800ac58:	68bb      	ldr	r3, [r7, #8]
 800ac5a:	689b      	ldr	r3, [r3, #8]
 800ac5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac60:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ac62:	69bb      	ldr	r3, [r7, #24]
 800ac64:	015a      	lsls	r2, r3, #5
 800ac66:	69fb      	ldr	r3, [r7, #28]
 800ac68:	4413      	add	r3, r2
 800ac6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac6e:	691a      	ldr	r2, [r3, #16]
 800ac70:	8afb      	ldrh	r3, [r7, #22]
 800ac72:	04d9      	lsls	r1, r3, #19
 800ac74:	4b3b      	ldr	r3, [pc, #236]	; (800ad64 <USB_EPStartXfer+0x494>)
 800ac76:	400b      	ands	r3, r1
 800ac78:	69b9      	ldr	r1, [r7, #24]
 800ac7a:	0148      	lsls	r0, r1, #5
 800ac7c:	69f9      	ldr	r1, [r7, #28]
 800ac7e:	4401      	add	r1, r0
 800ac80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ac84:	4313      	orrs	r3, r2
 800ac86:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	015a      	lsls	r2, r3, #5
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	4413      	add	r3, r2
 800ac90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac94:	691a      	ldr	r2, [r3, #16]
 800ac96:	68bb      	ldr	r3, [r7, #8]
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	8af9      	ldrh	r1, [r7, #22]
 800ac9c:	fb01 f303 	mul.w	r3, r1, r3
 800aca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aca4:	69b9      	ldr	r1, [r7, #24]
 800aca6:	0148      	lsls	r0, r1, #5
 800aca8:	69f9      	ldr	r1, [r7, #28]
 800acaa:	4401      	add	r1, r0
 800acac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acb0:	4313      	orrs	r3, r2
 800acb2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acb4:	79fb      	ldrb	r3, [r7, #7]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d10d      	bne.n	800acd6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	68db      	ldr	r3, [r3, #12]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d009      	beq.n	800acd6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	68d9      	ldr	r1, [r3, #12]
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd2:	460a      	mov	r2, r1
 800acd4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	78db      	ldrb	r3, [r3, #3]
 800acda:	2b01      	cmp	r3, #1
 800acdc:	d128      	bne.n	800ad30 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace4:	689b      	ldr	r3, [r3, #8]
 800ace6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acea:	2b00      	cmp	r3, #0
 800acec:	d110      	bne.n	800ad10 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800acee:	69bb      	ldr	r3, [r7, #24]
 800acf0:	015a      	lsls	r2, r3, #5
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	4413      	add	r3, r2
 800acf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69ba      	ldr	r2, [r7, #24]
 800acfe:	0151      	lsls	r1, r2, #5
 800ad00:	69fa      	ldr	r2, [r7, #28]
 800ad02:	440a      	add	r2, r1
 800ad04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ad0c:	6013      	str	r3, [r2, #0]
 800ad0e:	e00f      	b.n	800ad30 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ad10:	69bb      	ldr	r3, [r7, #24]
 800ad12:	015a      	lsls	r2, r3, #5
 800ad14:	69fb      	ldr	r3, [r7, #28]
 800ad16:	4413      	add	r3, r2
 800ad18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	69ba      	ldr	r2, [r7, #24]
 800ad20:	0151      	lsls	r1, r2, #5
 800ad22:	69fa      	ldr	r2, [r7, #28]
 800ad24:	440a      	add	r2, r1
 800ad26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ad2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	015a      	lsls	r2, r3, #5
 800ad34:	69fb      	ldr	r3, [r7, #28]
 800ad36:	4413      	add	r3, r2
 800ad38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	69ba      	ldr	r2, [r7, #24]
 800ad40:	0151      	lsls	r1, r2, #5
 800ad42:	69fa      	ldr	r2, [r7, #28]
 800ad44:	440a      	add	r2, r1
 800ad46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ad50:	2300      	movs	r3, #0
}
 800ad52:	4618      	mov	r0, r3
 800ad54:	3720      	adds	r7, #32
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bd80      	pop	{r7, pc}
 800ad5a:	bf00      	nop
 800ad5c:	fff80000 	.word	0xfff80000
 800ad60:	e007ffff 	.word	0xe007ffff
 800ad64:	1ff80000 	.word	0x1ff80000

0800ad68 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	60f8      	str	r0, [r7, #12]
 800ad70:	60b9      	str	r1, [r7, #8]
 800ad72:	4613      	mov	r3, r2
 800ad74:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	785b      	ldrb	r3, [r3, #1]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	f040 80cd 	bne.w	800af24 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d132      	bne.n	800adf8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad92:	693b      	ldr	r3, [r7, #16]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad9e:	691a      	ldr	r2, [r3, #16]
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	0159      	lsls	r1, r3, #5
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	440b      	add	r3, r1
 800ada8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adac:	4619      	mov	r1, r3
 800adae:	4b98      	ldr	r3, [pc, #608]	; (800b010 <USB_EP0StartXfer+0x2a8>)
 800adb0:	4013      	ands	r3, r2
 800adb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	691b      	ldr	r3, [r3, #16]
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	0151      	lsls	r1, r2, #5
 800adc6:	697a      	ldr	r2, [r7, #20]
 800adc8:	440a      	add	r2, r1
 800adca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800adce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800add2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	015a      	lsls	r2, r3, #5
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	4413      	add	r3, r2
 800addc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade0:	691a      	ldr	r2, [r3, #16]
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	0159      	lsls	r1, r3, #5
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	440b      	add	r3, r1
 800adea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adee:	4619      	mov	r1, r3
 800adf0:	4b88      	ldr	r3, [pc, #544]	; (800b014 <USB_EP0StartXfer+0x2ac>)
 800adf2:	4013      	ands	r3, r2
 800adf4:	610b      	str	r3, [r1, #16]
 800adf6:	e04e      	b.n	800ae96 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae04:	691a      	ldr	r2, [r3, #16]
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	0159      	lsls	r1, r3, #5
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	440b      	add	r3, r1
 800ae0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae12:	4619      	mov	r1, r3
 800ae14:	4b7f      	ldr	r3, [pc, #508]	; (800b014 <USB_EP0StartXfer+0x2ac>)
 800ae16:	4013      	ands	r3, r2
 800ae18:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae1a:	693b      	ldr	r3, [r7, #16]
 800ae1c:	015a      	lsls	r2, r3, #5
 800ae1e:	697b      	ldr	r3, [r7, #20]
 800ae20:	4413      	add	r3, r2
 800ae22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae26:	691a      	ldr	r2, [r3, #16]
 800ae28:	693b      	ldr	r3, [r7, #16]
 800ae2a:	0159      	lsls	r1, r3, #5
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	440b      	add	r3, r1
 800ae30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae34:	4619      	mov	r1, r3
 800ae36:	4b76      	ldr	r3, [pc, #472]	; (800b010 <USB_EP0StartXfer+0x2a8>)
 800ae38:	4013      	ands	r3, r2
 800ae3a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	695a      	ldr	r2, [r3, #20]
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	689b      	ldr	r3, [r3, #8]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d903      	bls.n	800ae50 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	689a      	ldr	r2, [r3, #8]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	693a      	ldr	r2, [r7, #16]
 800ae60:	0151      	lsls	r1, r2, #5
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	440a      	add	r2, r1
 800ae66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae70:	693b      	ldr	r3, [r7, #16]
 800ae72:	015a      	lsls	r2, r3, #5
 800ae74:	697b      	ldr	r3, [r7, #20]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7c:	691a      	ldr	r2, [r3, #16]
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	695b      	ldr	r3, [r3, #20]
 800ae82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae86:	6939      	ldr	r1, [r7, #16]
 800ae88:	0148      	lsls	r0, r1, #5
 800ae8a:	6979      	ldr	r1, [r7, #20]
 800ae8c:	4401      	add	r1, r0
 800ae8e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae92:	4313      	orrs	r3, r2
 800ae94:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	2b01      	cmp	r3, #1
 800ae9a:	d11e      	bne.n	800aeda <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	691b      	ldr	r3, [r3, #16]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d009      	beq.n	800aeb8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	693a      	ldr	r2, [r7, #16]
 800aec8:	0151      	lsls	r1, r2, #5
 800aeca:	697a      	ldr	r2, [r7, #20]
 800aecc:	440a      	add	r2, r1
 800aece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aed6:	6013      	str	r3, [r2, #0]
 800aed8:	e092      	b.n	800b000 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aeda:	693b      	ldr	r3, [r7, #16]
 800aedc:	015a      	lsls	r2, r3, #5
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	4413      	add	r3, r2
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	693a      	ldr	r2, [r7, #16]
 800aeea:	0151      	lsls	r1, r2, #5
 800aeec:	697a      	ldr	r2, [r7, #20]
 800aeee:	440a      	add	r2, r1
 800aef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aef4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aef8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	695b      	ldr	r3, [r3, #20]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d07e      	beq.n	800b000 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	f003 030f 	and.w	r3, r3, #15
 800af12:	2101      	movs	r1, #1
 800af14:	fa01 f303 	lsl.w	r3, r1, r3
 800af18:	6979      	ldr	r1, [r7, #20]
 800af1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af1e:	4313      	orrs	r3, r2
 800af20:	634b      	str	r3, [r1, #52]	; 0x34
 800af22:	e06d      	b.n	800b000 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800af24:	693b      	ldr	r3, [r7, #16]
 800af26:	015a      	lsls	r2, r3, #5
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	4413      	add	r3, r2
 800af2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af30:	691a      	ldr	r2, [r3, #16]
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	0159      	lsls	r1, r3, #5
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	440b      	add	r3, r1
 800af3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af3e:	4619      	mov	r1, r3
 800af40:	4b34      	ldr	r3, [pc, #208]	; (800b014 <USB_EP0StartXfer+0x2ac>)
 800af42:	4013      	ands	r3, r2
 800af44:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af52:	691a      	ldr	r2, [r3, #16]
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	0159      	lsls	r1, r3, #5
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	440b      	add	r3, r1
 800af5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af60:	4619      	mov	r1, r3
 800af62:	4b2b      	ldr	r3, [pc, #172]	; (800b010 <USB_EP0StartXfer+0x2a8>)
 800af64:	4013      	ands	r3, r2
 800af66:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d003      	beq.n	800af78 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800af70:	68bb      	ldr	r3, [r7, #8]
 800af72:	689a      	ldr	r2, [r3, #8]
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	015a      	lsls	r2, r3, #5
 800af7c:	697b      	ldr	r3, [r7, #20]
 800af7e:	4413      	add	r3, r2
 800af80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af84:	691b      	ldr	r3, [r3, #16]
 800af86:	693a      	ldr	r2, [r7, #16]
 800af88:	0151      	lsls	r1, r2, #5
 800af8a:	697a      	ldr	r2, [r7, #20]
 800af8c:	440a      	add	r2, r1
 800af8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	015a      	lsls	r2, r3, #5
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	4413      	add	r3, r2
 800afa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	68bb      	ldr	r3, [r7, #8]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afae:	6939      	ldr	r1, [r7, #16]
 800afb0:	0148      	lsls	r0, r1, #5
 800afb2:	6979      	ldr	r1, [r7, #20]
 800afb4:	4401      	add	r1, r0
 800afb6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800afba:	4313      	orrs	r3, r2
 800afbc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800afbe:	79fb      	ldrb	r3, [r7, #7]
 800afc0:	2b01      	cmp	r3, #1
 800afc2:	d10d      	bne.n	800afe0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800afc4:	68bb      	ldr	r3, [r7, #8]
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d009      	beq.n	800afe0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	68d9      	ldr	r1, [r3, #12]
 800afd0:	693b      	ldr	r3, [r7, #16]
 800afd2:	015a      	lsls	r2, r3, #5
 800afd4:	697b      	ldr	r3, [r7, #20]
 800afd6:	4413      	add	r3, r2
 800afd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afdc:	460a      	mov	r2, r1
 800afde:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	015a      	lsls	r2, r3, #5
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	4413      	add	r3, r2
 800afe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	693a      	ldr	r2, [r7, #16]
 800aff0:	0151      	lsls	r1, r2, #5
 800aff2:	697a      	ldr	r2, [r7, #20]
 800aff4:	440a      	add	r2, r1
 800aff6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800affa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800affe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	371c      	adds	r7, #28
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	e007ffff 	.word	0xe007ffff
 800b014:	fff80000 	.word	0xfff80000

0800b018 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b018:	b480      	push	{r7}
 800b01a:	b089      	sub	sp, #36	; 0x24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	60f8      	str	r0, [r7, #12]
 800b020:	60b9      	str	r1, [r7, #8]
 800b022:	4611      	mov	r1, r2
 800b024:	461a      	mov	r2, r3
 800b026:	460b      	mov	r3, r1
 800b028:	71fb      	strb	r3, [r7, #7]
 800b02a:	4613      	mov	r3, r2
 800b02c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d11a      	bne.n	800b074 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b03e:	88bb      	ldrh	r3, [r7, #4]
 800b040:	3303      	adds	r3, #3
 800b042:	089b      	lsrs	r3, r3, #2
 800b044:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b046:	2300      	movs	r3, #0
 800b048:	61bb      	str	r3, [r7, #24]
 800b04a:	e00f      	b.n	800b06c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b04c:	79fb      	ldrb	r3, [r7, #7]
 800b04e:	031a      	lsls	r2, r3, #12
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	4413      	add	r3, r2
 800b054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b058:	461a      	mov	r2, r3
 800b05a:	69fb      	ldr	r3, [r7, #28]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	3304      	adds	r3, #4
 800b064:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	3301      	adds	r3, #1
 800b06a:	61bb      	str	r3, [r7, #24]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	429a      	cmp	r2, r3
 800b072:	d3eb      	bcc.n	800b04c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3724      	adds	r7, #36	; 0x24
 800b07a:	46bd      	mov	sp, r7
 800b07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b080:	4770      	bx	lr

0800b082 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b082:	b480      	push	{r7}
 800b084:	b089      	sub	sp, #36	; 0x24
 800b086:	af00      	add	r7, sp, #0
 800b088:	60f8      	str	r0, [r7, #12]
 800b08a:	60b9      	str	r1, [r7, #8]
 800b08c:	4613      	mov	r3, r2
 800b08e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b098:	88fb      	ldrh	r3, [r7, #6]
 800b09a:	3303      	adds	r3, #3
 800b09c:	089b      	lsrs	r3, r3, #2
 800b09e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61bb      	str	r3, [r7, #24]
 800b0a4:	e00b      	b.n	800b0be <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0ac:	681a      	ldr	r2, [r3, #0]
 800b0ae:	69fb      	ldr	r3, [r7, #28]
 800b0b0:	601a      	str	r2, [r3, #0]
    pDest++;
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	3304      	adds	r3, #4
 800b0b6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	3301      	adds	r3, #1
 800b0bc:	61bb      	str	r3, [r7, #24]
 800b0be:	69ba      	ldr	r2, [r7, #24]
 800b0c0:	693b      	ldr	r3, [r7, #16]
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d3ef      	bcc.n	800b0a6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b0c6:	69fb      	ldr	r3, [r7, #28]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3724      	adds	r7, #36	; 0x24
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d2:	4770      	bx	lr

0800b0d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d12c      	bne.n	800b14a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	db12      	blt.n	800b128 <USB_EPSetStall+0x54>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00f      	beq.n	800b128 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	0151      	lsls	r1, r2, #5
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	440a      	add	r2, r1
 800b11e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b122:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b126:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b142:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b146:	6013      	str	r3, [r2, #0]
 800b148:	e02b      	b.n	800b1a2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	db12      	blt.n	800b182 <USB_EPSetStall+0xae>
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00f      	beq.n	800b182 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	015a      	lsls	r2, r3, #5
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	4413      	add	r3, r2
 800b16a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	68ba      	ldr	r2, [r7, #8]
 800b172:	0151      	lsls	r1, r2, #5
 800b174:	68fa      	ldr	r2, [r7, #12]
 800b176:	440a      	add	r2, r1
 800b178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b17c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b180:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b182:	68bb      	ldr	r3, [r7, #8]
 800b184:	015a      	lsls	r2, r3, #5
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	4413      	add	r3, r2
 800b18a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	68ba      	ldr	r2, [r7, #8]
 800b192:	0151      	lsls	r1, r2, #5
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	440a      	add	r2, r1
 800b198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b19c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1a0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1a2:	2300      	movs	r3, #0
}
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	3714      	adds	r7, #20
 800b1a8:	46bd      	mov	sp, r7
 800b1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ae:	4770      	bx	lr

0800b1b0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1be:	683b      	ldr	r3, [r7, #0]
 800b1c0:	781b      	ldrb	r3, [r3, #0]
 800b1c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	785b      	ldrb	r3, [r3, #1]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d128      	bne.n	800b21e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	0151      	lsls	r1, r2, #5
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	440a      	add	r2, r1
 800b1e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b1ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b1ec:	683b      	ldr	r3, [r7, #0]
 800b1ee:	78db      	ldrb	r3, [r3, #3]
 800b1f0:	2b03      	cmp	r3, #3
 800b1f2:	d003      	beq.n	800b1fc <USB_EPClearStall+0x4c>
 800b1f4:	683b      	ldr	r3, [r7, #0]
 800b1f6:	78db      	ldrb	r3, [r3, #3]
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d138      	bne.n	800b26e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	015a      	lsls	r2, r3, #5
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4413      	add	r3, r2
 800b204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	0151      	lsls	r1, r2, #5
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	440a      	add	r2, r1
 800b212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b216:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	e027      	b.n	800b26e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	015a      	lsls	r2, r3, #5
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	4413      	add	r3, r2
 800b226:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	68fa      	ldr	r2, [r7, #12]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b238:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b23c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	78db      	ldrb	r3, [r3, #3]
 800b242:	2b03      	cmp	r3, #3
 800b244:	d003      	beq.n	800b24e <USB_EPClearStall+0x9e>
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	78db      	ldrb	r3, [r3, #3]
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d10f      	bne.n	800b26e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	015a      	lsls	r2, r3, #5
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	4413      	add	r3, r2
 800b256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	0151      	lsls	r1, r2, #5
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	440a      	add	r2, r1
 800b264:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b26c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b26e:	2300      	movs	r3, #0
}
 800b270:	4618      	mov	r0, r3
 800b272:	3714      	adds	r7, #20
 800b274:	46bd      	mov	sp, r7
 800b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b27a:	4770      	bx	lr

0800b27c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b27c:	b480      	push	{r7}
 800b27e:	b085      	sub	sp, #20
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	460b      	mov	r3, r1
 800b286:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	68fa      	ldr	r2, [r7, #12]
 800b296:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b29a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b29e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2a6:	681a      	ldr	r2, [r3, #0]
 800b2a8:	78fb      	ldrb	r3, [r7, #3]
 800b2aa:	011b      	lsls	r3, r3, #4
 800b2ac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b2b0:	68f9      	ldr	r1, [r7, #12]
 800b2b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b2ba:	2300      	movs	r3, #0
}
 800b2bc:	4618      	mov	r0, r3
 800b2be:	3714      	adds	r7, #20
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2da:	685b      	ldr	r3, [r3, #4]
 800b2dc:	68fa      	ldr	r2, [r7, #12]
 800b2de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2e2:	f023 0302 	bic.w	r3, r3, #2
 800b2e6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b2e8:	2003      	movs	r0, #3
 800b2ea:	f7f6 fea7 	bl	800203c <HAL_Delay>

  return HAL_OK;
 800b2ee:	2300      	movs	r3, #0
}
 800b2f0:	4618      	mov	r0, r3
 800b2f2:	3710      	adds	r7, #16
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	68fa      	ldr	r2, [r7, #12]
 800b30e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b312:	f043 0302 	orr.w	r3, r3, #2
 800b316:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800b318:	2003      	movs	r0, #3
 800b31a:	f7f6 fe8f 	bl	800203c <HAL_Delay>

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3710      	adds	r7, #16
 800b324:	46bd      	mov	sp, r7
 800b326:	bd80      	pop	{r7, pc}

0800b328 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b328:	b480      	push	{r7}
 800b32a:	b085      	sub	sp, #20
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	695b      	ldr	r3, [r3, #20]
 800b334:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	699b      	ldr	r3, [r3, #24]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4013      	ands	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b340:	68fb      	ldr	r3, [r7, #12]
}
 800b342:	4618      	mov	r0, r3
 800b344:	3714      	adds	r7, #20
 800b346:	46bd      	mov	sp, r7
 800b348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34c:	4770      	bx	lr

0800b34e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b34e:	b480      	push	{r7}
 800b350:	b085      	sub	sp, #20
 800b352:	af00      	add	r7, sp, #0
 800b354:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b36a:	69db      	ldr	r3, [r3, #28]
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	4013      	ands	r3, r2
 800b370:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	0c1b      	lsrs	r3, r3, #16
}
 800b376:	4618      	mov	r0, r3
 800b378:	3714      	adds	r7, #20
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr

0800b382 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b382:	b480      	push	{r7}
 800b384:	b085      	sub	sp, #20
 800b386:	af00      	add	r7, sp, #0
 800b388:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b394:	699b      	ldr	r3, [r3, #24]
 800b396:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	68ba      	ldr	r2, [r7, #8]
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	b29b      	uxth	r3, r3
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3714      	adds	r7, #20
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b085      	sub	sp, #20
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	460b      	mov	r3, r1
 800b3c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b3c6:	78fb      	ldrb	r3, [r7, #3]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	689b      	ldr	r3, [r3, #8]
 800b3d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b3e4:	68bb      	ldr	r3, [r7, #8]
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3714      	adds	r7, #20
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b087      	sub	sp, #28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
 800b3fa:	460b      	mov	r3, r1
 800b3fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b402:	697b      	ldr	r3, [r7, #20]
 800b404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b408:	691b      	ldr	r3, [r3, #16]
 800b40a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b40c:	697b      	ldr	r3, [r7, #20]
 800b40e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b414:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	f003 030f 	and.w	r3, r3, #15
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	fa22 f303 	lsr.w	r3, r2, r3
 800b422:	01db      	lsls	r3, r3, #7
 800b424:	b2db      	uxtb	r3, r3
 800b426:	693a      	ldr	r2, [r7, #16]
 800b428:	4313      	orrs	r3, r2
 800b42a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b42c:	78fb      	ldrb	r3, [r7, #3]
 800b42e:	015a      	lsls	r2, r3, #5
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	4413      	add	r3, r2
 800b434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b438:	689b      	ldr	r3, [r3, #8]
 800b43a:	693a      	ldr	r2, [r7, #16]
 800b43c:	4013      	ands	r3, r2
 800b43e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b440:	68bb      	ldr	r3, [r7, #8]
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b44e:	b480      	push	{r7}
 800b450:	b083      	sub	sp, #12
 800b452:	af00      	add	r7, sp, #0
 800b454:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	695b      	ldr	r3, [r3, #20]
 800b45a:	f003 0301 	and.w	r3, r3, #1
}
 800b45e:	4618      	mov	r0, r3
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
	...

0800b46c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b085      	sub	sp, #20
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b486:	4619      	mov	r1, r3
 800b488:	4b09      	ldr	r3, [pc, #36]	; (800b4b0 <USB_ActivateSetup+0x44>)
 800b48a:	4013      	ands	r3, r2
 800b48c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	68fa      	ldr	r2, [r7, #12]
 800b498:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b49c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3714      	adds	r7, #20
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	fffff800 	.word	0xfffff800

0800b4b4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b087      	sub	sp, #28
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	60f8      	str	r0, [r7, #12]
 800b4bc:	460b      	mov	r3, r1
 800b4be:	607a      	str	r2, [r7, #4]
 800b4c0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	333c      	adds	r3, #60	; 0x3c
 800b4ca:	3304      	adds	r3, #4
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b4d0:	693b      	ldr	r3, [r7, #16]
 800b4d2:	4a26      	ldr	r2, [pc, #152]	; (800b56c <USB_EP0_OutStart+0xb8>)
 800b4d4:	4293      	cmp	r3, r2
 800b4d6:	d90a      	bls.n	800b4ee <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4e8:	d101      	bne.n	800b4ee <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	e037      	b.n	800b55e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	697a      	ldr	r2, [r7, #20]
 800b504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b50c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	697a      	ldr	r2, [r7, #20]
 800b518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b51c:	f043 0318 	orr.w	r3, r3, #24
 800b520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b528:	691b      	ldr	r3, [r3, #16]
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b530:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b534:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b536:	7afb      	ldrb	r3, [r7, #11]
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d10f      	bne.n	800b55c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b542:	461a      	mov	r2, r3
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	697a      	ldr	r2, [r7, #20]
 800b552:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b556:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b55a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	4f54300a 	.word	0x4f54300a

0800b570 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b570:	b480      	push	{r7}
 800b572:	b085      	sub	sp, #20
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	3301      	adds	r3, #1
 800b580:	60fb      	str	r3, [r7, #12]
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	4a13      	ldr	r2, [pc, #76]	; (800b5d4 <USB_CoreReset+0x64>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d901      	bls.n	800b58e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b58a:	2303      	movs	r3, #3
 800b58c:	e01b      	b.n	800b5c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	691b      	ldr	r3, [r3, #16]
 800b592:	2b00      	cmp	r3, #0
 800b594:	daf2      	bge.n	800b57c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	691b      	ldr	r3, [r3, #16]
 800b59e:	f043 0201 	orr.w	r2, r3, #1
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	3301      	adds	r3, #1
 800b5aa:	60fb      	str	r3, [r7, #12]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4a09      	ldr	r2, [pc, #36]	; (800b5d4 <USB_CoreReset+0x64>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d901      	bls.n	800b5b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e006      	b.n	800b5c6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	691b      	ldr	r3, [r3, #16]
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d0f0      	beq.n	800b5a6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b5c4:	2300      	movs	r3, #0
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	00030d40 	.word	0x00030d40

0800b5d8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b5e4:	2300      	movs	r3, #0
 800b5e6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	7c1b      	ldrb	r3, [r3, #16]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d115      	bne.n	800b61c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b5f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b5f4:	2202      	movs	r2, #2
 800b5f6:	2181      	movs	r1, #129	; 0x81
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f001 ff6e 	bl	800d4da <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b604:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b608:	2202      	movs	r2, #2
 800b60a:	2101      	movs	r1, #1
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f001 ff64 	bl	800d4da <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2201      	movs	r2, #1
 800b616:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800b61a:	e012      	b.n	800b642 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800b61c:	2340      	movs	r3, #64	; 0x40
 800b61e:	2202      	movs	r2, #2
 800b620:	2181      	movs	r1, #129	; 0x81
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f001 ff59 	bl	800d4da <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800b62e:	2340      	movs	r3, #64	; 0x40
 800b630:	2202      	movs	r2, #2
 800b632:	2101      	movs	r1, #1
 800b634:	6878      	ldr	r0, [r7, #4]
 800b636:	f001 ff50 	bl	800d4da <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	2201      	movs	r2, #1
 800b63e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b642:	2308      	movs	r3, #8
 800b644:	2203      	movs	r2, #3
 800b646:	2182      	movs	r1, #130	; 0x82
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f001 ff46 	bl	800d4da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2201      	movs	r2, #1
 800b652:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b654:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b658:	f002 f8d6 	bl	800d808 <malloc>
 800b65c:	4603      	mov	r3, r0
 800b65e:	461a      	mov	r2, r3
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d102      	bne.n	800b676 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 800b670:	2301      	movs	r3, #1
 800b672:	73fb      	strb	r3, [r7, #15]
 800b674:	e026      	b.n	800b6c4 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67c:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	2200      	movs	r2, #0
 800b68c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	7c1b      	ldrb	r3, [r3, #16]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d109      	bne.n	800b6b4 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6a0:	68bb      	ldr	r3, [r7, #8]
 800b6a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6aa:	2101      	movs	r1, #1
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f002 f805 	bl	800d6bc <USBD_LL_PrepareReceive>
 800b6b2:	e007      	b.n	800b6c4 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b6b4:	68bb      	ldr	r3, [r7, #8]
 800b6b6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b6ba:	2340      	movs	r3, #64	; 0x40
 800b6bc:	2101      	movs	r1, #1
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f001 fffc 	bl	800d6bc <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800b6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3710      	adds	r7, #16
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}

0800b6ce <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b6ce:	b580      	push	{r7, lr}
 800b6d0:	b084      	sub	sp, #16
 800b6d2:	af00      	add	r7, sp, #0
 800b6d4:	6078      	str	r0, [r7, #4]
 800b6d6:	460b      	mov	r3, r1
 800b6d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800b6da:	2300      	movs	r3, #0
 800b6dc:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800b6de:	2181      	movs	r1, #129	; 0x81
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	f001 ff20 	bl	800d526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800b6ec:	2101      	movs	r1, #1
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f001 ff19 	bl	800d526 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800b6fc:	2182      	movs	r1, #130	; 0x82
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f001 ff11 	bl	800d526 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2200      	movs	r2, #0
 800b708:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b710:	2b00      	cmp	r3, #0
 800b712:	d00e      	beq.n	800b732 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b71a:	685b      	ldr	r3, [r3, #4]
 800b71c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b724:	4618      	mov	r0, r3
 800b726:	f002 f877 	bl	800d818 <free>
    pdev->pClassData = NULL;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800b732:	7bfb      	ldrb	r3, [r7, #15]
}
 800b734:	4618      	mov	r0, r3
 800b736:	3710      	adds	r7, #16
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b086      	sub	sp, #24
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
 800b744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b74c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800b74e:	2300      	movs	r3, #0
 800b750:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800b752:	2300      	movs	r3, #0
 800b754:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800b756:	2300      	movs	r3, #0
 800b758:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b762:	2b00      	cmp	r3, #0
 800b764:	d039      	beq.n	800b7da <USBD_CDC_Setup+0x9e>
 800b766:	2b20      	cmp	r3, #32
 800b768:	d17c      	bne.n	800b864 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800b76a:	683b      	ldr	r3, [r7, #0]
 800b76c:	88db      	ldrh	r3, [r3, #6]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d029      	beq.n	800b7c6 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	781b      	ldrb	r3, [r3, #0]
 800b776:	b25b      	sxtb	r3, r3
 800b778:	2b00      	cmp	r3, #0
 800b77a:	da11      	bge.n	800b7a0 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	683a      	ldr	r2, [r7, #0]
 800b786:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800b788:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	88d2      	ldrh	r2, [r2, #6]
 800b78e:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b790:	6939      	ldr	r1, [r7, #16]
 800b792:	683b      	ldr	r3, [r7, #0]
 800b794:	88db      	ldrh	r3, [r3, #6]
 800b796:	461a      	mov	r2, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 fa3f 	bl	800cc1c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800b79e:	e068      	b.n	800b872 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	785a      	ldrb	r2, [r3, #1]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	88db      	ldrh	r3, [r3, #6]
 800b7ae:	b2da      	uxtb	r2, r3
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800b7b6:	6939      	ldr	r1, [r7, #16]
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	88db      	ldrh	r3, [r3, #6]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f001 fa5a 	bl	800cc78 <USBD_CtlPrepareRx>
      break;
 800b7c4:	e055      	b.n	800b872 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b7cc:	689b      	ldr	r3, [r3, #8]
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	7850      	ldrb	r0, [r2, #1]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	6839      	ldr	r1, [r7, #0]
 800b7d6:	4798      	blx	r3
      break;
 800b7d8:	e04b      	b.n	800b872 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	785b      	ldrb	r3, [r3, #1]
 800b7de:	2b0a      	cmp	r3, #10
 800b7e0:	d017      	beq.n	800b812 <USBD_CDC_Setup+0xd6>
 800b7e2:	2b0b      	cmp	r3, #11
 800b7e4:	d029      	beq.n	800b83a <USBD_CDC_Setup+0xfe>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d133      	bne.n	800b852 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7f0:	2b03      	cmp	r3, #3
 800b7f2:	d107      	bne.n	800b804 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	2202      	movs	r2, #2
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f001 fa0d 	bl	800cc1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b802:	e02e      	b.n	800b862 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b804:	6839      	ldr	r1, [r7, #0]
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f001 f99d 	bl	800cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 800b80c:	2302      	movs	r3, #2
 800b80e:	75fb      	strb	r3, [r7, #23]
          break;
 800b810:	e027      	b.n	800b862 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d107      	bne.n	800b82c <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800b81c:	f107 030f 	add.w	r3, r7, #15
 800b820:	2201      	movs	r2, #1
 800b822:	4619      	mov	r1, r3
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 f9f9 	bl	800cc1c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800b82a:	e01a      	b.n	800b862 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 800b82c:	6839      	ldr	r1, [r7, #0]
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f001 f989 	bl	800cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 800b834:	2302      	movs	r3, #2
 800b836:	75fb      	strb	r3, [r7, #23]
          break;
 800b838:	e013      	b.n	800b862 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b840:	2b03      	cmp	r3, #3
 800b842:	d00d      	beq.n	800b860 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 800b844:	6839      	ldr	r1, [r7, #0]
 800b846:	6878      	ldr	r0, [r7, #4]
 800b848:	f001 f97d 	bl	800cb46 <USBD_CtlError>
            ret = USBD_FAIL;
 800b84c:	2302      	movs	r3, #2
 800b84e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800b850:	e006      	b.n	800b860 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 800b852:	6839      	ldr	r1, [r7, #0]
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f001 f976 	bl	800cb46 <USBD_CtlError>
          ret = USBD_FAIL;
 800b85a:	2302      	movs	r3, #2
 800b85c:	75fb      	strb	r3, [r7, #23]
          break;
 800b85e:	e000      	b.n	800b862 <USBD_CDC_Setup+0x126>
          break;
 800b860:	bf00      	nop
      }
      break;
 800b862:	e006      	b.n	800b872 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 800b864:	6839      	ldr	r1, [r7, #0]
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 f96d 	bl	800cb46 <USBD_CtlError>
      ret = USBD_FAIL;
 800b86c:	2302      	movs	r3, #2
 800b86e:	75fb      	strb	r3, [r7, #23]
      break;
 800b870:	bf00      	nop
  }

  return ret;
 800b872:	7dfb      	ldrb	r3, [r7, #23]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3718      	adds	r7, #24
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
 800b884:	460b      	mov	r3, r1
 800b886:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b88e:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b896:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d03a      	beq.n	800b918 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b8a2:	78fa      	ldrb	r2, [r7, #3]
 800b8a4:	6879      	ldr	r1, [r7, #4]
 800b8a6:	4613      	mov	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	4413      	add	r3, r2
 800b8ac:	009b      	lsls	r3, r3, #2
 800b8ae:	440b      	add	r3, r1
 800b8b0:	331c      	adds	r3, #28
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d029      	beq.n	800b90c <USBD_CDC_DataIn+0x90>
 800b8b8:	78fa      	ldrb	r2, [r7, #3]
 800b8ba:	6879      	ldr	r1, [r7, #4]
 800b8bc:	4613      	mov	r3, r2
 800b8be:	009b      	lsls	r3, r3, #2
 800b8c0:	4413      	add	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	440b      	add	r3, r1
 800b8c6:	331c      	adds	r3, #28
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	78f9      	ldrb	r1, [r7, #3]
 800b8cc:	68b8      	ldr	r0, [r7, #8]
 800b8ce:	460b      	mov	r3, r1
 800b8d0:	00db      	lsls	r3, r3, #3
 800b8d2:	1a5b      	subs	r3, r3, r1
 800b8d4:	009b      	lsls	r3, r3, #2
 800b8d6:	4403      	add	r3, r0
 800b8d8:	3344      	adds	r3, #68	; 0x44
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	fbb2 f1f3 	udiv	r1, r2, r3
 800b8e0:	fb03 f301 	mul.w	r3, r3, r1
 800b8e4:	1ad3      	subs	r3, r2, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d110      	bne.n	800b90c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800b8ea:	78fa      	ldrb	r2, [r7, #3]
 800b8ec:	6879      	ldr	r1, [r7, #4]
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	440b      	add	r3, r1
 800b8f8:	331c      	adds	r3, #28
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b8fe:	78f9      	ldrb	r1, [r7, #3]
 800b900:	2300      	movs	r3, #0
 800b902:	2200      	movs	r2, #0
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f001 feb6 	bl	800d676 <USBD_LL_Transmit>
 800b90a:	e003      	b.n	800b914 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	2200      	movs	r2, #0
 800b910:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800b914:	2300      	movs	r3, #0
 800b916:	e000      	b.n	800b91a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800b918:	2302      	movs	r3, #2
  }
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b922:	b580      	push	{r7, lr}
 800b924:	b084      	sub	sp, #16
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	460b      	mov	r3, r1
 800b92c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b934:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b936:	78fb      	ldrb	r3, [r7, #3]
 800b938:	4619      	mov	r1, r3
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f001 fee1 	bl	800d702 <USBD_LL_GetRxDataSize>
 800b940:	4602      	mov	r2, r0
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d00d      	beq.n	800b96e <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b958:	68db      	ldr	r3, [r3, #12]
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b960:	68fa      	ldr	r2, [r7, #12]
 800b962:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b966:	4611      	mov	r1, r2
 800b968:	4798      	blx	r3

    return USBD_OK;
 800b96a:	2300      	movs	r3, #0
 800b96c:	e000      	b.n	800b970 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800b96e:	2302      	movs	r3, #2
  }
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bd80      	pop	{r7, pc}

0800b978 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b986:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d015      	beq.n	800b9be <USBD_CDC_EP0_RxReady+0x46>
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b998:	2bff      	cmp	r3, #255	; 0xff
 800b99a:	d010      	beq.n	800b9be <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	68fa      	ldr	r2, [r7, #12]
 800b9a6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800b9aa:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b9ac:	68fa      	ldr	r2, [r7, #12]
 800b9ae:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b9b2:	b292      	uxth	r2, r2
 800b9b4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	22ff      	movs	r2, #255	; 0xff
 800b9ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3710      	adds	r7, #16
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b083      	sub	sp, #12
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2243      	movs	r2, #67	; 0x43
 800b9d4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800b9d6:	4b03      	ldr	r3, [pc, #12]	; (800b9e4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	370c      	adds	r7, #12
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	240000a0 	.word	0x240000a0

0800b9e8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	2243      	movs	r2, #67	; 0x43
 800b9f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800b9f6:	4b03      	ldr	r3, [pc, #12]	; (800ba04 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	370c      	adds	r7, #12
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba02:	4770      	bx	lr
 800ba04:	2400005c 	.word	0x2400005c

0800ba08 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	2243      	movs	r2, #67	; 0x43
 800ba14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800ba16:	4b03      	ldr	r3, [pc, #12]	; (800ba24 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	370c      	adds	r7, #12
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr
 800ba24:	240000e4 	.word	0x240000e4

0800ba28 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	220a      	movs	r2, #10
 800ba34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800ba36:	4b03      	ldr	r3, [pc, #12]	; (800ba44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ba38:	4618      	mov	r0, r3
 800ba3a:	370c      	adds	r7, #12
 800ba3c:	46bd      	mov	sp, r7
 800ba3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba42:	4770      	bx	lr
 800ba44:	24000018 	.word	0x24000018

0800ba48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800ba52:	2302      	movs	r3, #2
 800ba54:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d005      	beq.n	800ba68 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 800ba64:	2300      	movs	r3, #0
 800ba66:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3714      	adds	r7, #20
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba74:	4770      	bx	lr

0800ba76 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800ba76:	b480      	push	{r7}
 800ba78:	b087      	sub	sp, #28
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	4613      	mov	r3, r2
 800ba82:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba8a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ba94:	88fa      	ldrh	r2, [r7, #6]
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	371c      	adds	r7, #28
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800baaa:	b480      	push	{r7}
 800baac:	b085      	sub	sp, #20
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
 800bab2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800baba:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	683a      	ldr	r2, [r7, #0]
 800bac0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	3714      	adds	r7, #20
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr

0800bad2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d01c      	beq.n	800bb26 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d115      	bne.n	800bb22 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2201      	movs	r2, #1
 800bafa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800bb14:	b29b      	uxth	r3, r3
 800bb16:	2181      	movs	r1, #129	; 0x81
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f001 fdac 	bl	800d676 <USBD_LL_Transmit>

      return USBD_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	e002      	b.n	800bb28 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800bb22:	2301      	movs	r3, #1
 800bb24:	e000      	b.n	800bb28 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800bb26:	2302      	movs	r3, #2
  }
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb3e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d017      	beq.n	800bb7a <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	7c1b      	ldrb	r3, [r3, #16]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d109      	bne.n	800bb66 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb5c:	2101      	movs	r1, #1
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f001 fdac 	bl	800d6bc <USBD_LL_PrepareReceive>
 800bb64:	e007      	b.n	800bb76 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb6c:	2340      	movs	r3, #64	; 0x40
 800bb6e:	2101      	movs	r1, #1
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f001 fda3 	bl	800d6bc <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800bb76:	2300      	movs	r3, #0
 800bb78:	e000      	b.n	800bb7c <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800bb7a:	2302      	movs	r3, #2
  }
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b084      	sub	sp, #16
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	60f8      	str	r0, [r7, #12]
 800bb8c:	60b9      	str	r1, [r7, #8]
 800bb8e:	4613      	mov	r3, r2
 800bb90:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d101      	bne.n	800bb9c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800bb98:	2302      	movs	r3, #2
 800bb9a:	e01a      	b.n	800bbd2 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d003      	beq.n	800bbbc <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	68ba      	ldr	r2, [r7, #8]
 800bbb8:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	2201      	movs	r2, #1
 800bbc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	79fa      	ldrb	r2, [r7, #7]
 800bbc8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800bbca:	68f8      	ldr	r0, [r7, #12]
 800bbcc:	f001 fc1a 	bl	800d404 <USBD_LL_Init>

  return USBD_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}

0800bbda <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800bbda:	b480      	push	{r7}
 800bbdc:	b085      	sub	sp, #20
 800bbde:	af00      	add	r7, sp, #0
 800bbe0:	6078      	str	r0, [r7, #4]
 800bbe2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d006      	beq.n	800bbfc <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	683a      	ldr	r2, [r7, #0]
 800bbf2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73fb      	strb	r3, [r7, #15]
 800bbfa:	e001      	b.n	800bc00 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800bbfc:	2302      	movs	r3, #2
 800bbfe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bc00:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b082      	sub	sp, #8
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800bc16:	6878      	ldr	r0, [r7, #4]
 800bc18:	f001 fc44 	bl	800d4a4 <USBD_LL_Start>

  return USBD_OK;
 800bc1c:	2300      	movs	r3, #0
}
 800bc1e:	4618      	mov	r0, r3
 800bc20:	3708      	adds	r7, #8
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800bc26:	b480      	push	{r7}
 800bc28:	b083      	sub	sp, #12
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	370c      	adds	r7, #12
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	460b      	mov	r3, r1
 800bc46:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d00c      	beq.n	800bc70 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	78fa      	ldrb	r2, [r7, #3]
 800bc60:	4611      	mov	r1, r2
 800bc62:	6878      	ldr	r0, [r7, #4]
 800bc64:	4798      	blx	r3
 800bc66:	4603      	mov	r3, r0
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d101      	bne.n	800bc70 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800bc6c:	2300      	movs	r3, #0
 800bc6e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800bc70:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3710      	adds	r7, #16
 800bc76:	46bd      	mov	sp, r7
 800bc78:	bd80      	pop	{r7, pc}

0800bc7a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800bc7a:	b580      	push	{r7, lr}
 800bc7c:	b082      	sub	sp, #8
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
 800bc82:	460b      	mov	r3, r1
 800bc84:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bc8c:	685b      	ldr	r3, [r3, #4]
 800bc8e:	78fa      	ldrb	r2, [r7, #3]
 800bc90:	4611      	mov	r1, r2
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	4798      	blx	r3

  return USBD_OK;
 800bc96:	2300      	movs	r3, #0
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3708      	adds	r7, #8
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b082      	sub	sp, #8
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcb0:	6839      	ldr	r1, [r7, #0]
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f000 ff0a 	bl	800cacc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bcd4:	f003 031f 	and.w	r3, r3, #31
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d00c      	beq.n	800bcf6 <USBD_LL_SetupStage+0x56>
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d302      	bcc.n	800bce6 <USBD_LL_SetupStage+0x46>
 800bce0:	2b02      	cmp	r3, #2
 800bce2:	d010      	beq.n	800bd06 <USBD_LL_SetupStage+0x66>
 800bce4:	e017      	b.n	800bd16 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcec:	4619      	mov	r1, r3
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f000 fa0a 	bl	800c108 <USBD_StdDevReq>
      break;
 800bcf4:	e01a      	b.n	800bd2c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f000 fa6c 	bl	800c1dc <USBD_StdItfReq>
      break;
 800bd04:	e012      	b.n	800bd2c <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 faaa 	bl	800c268 <USBD_StdEPReq>
      break;
 800bd14:	e00a      	b.n	800bd2c <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800bd1c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	4619      	mov	r1, r3
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f001 fc1d 	bl	800d564 <USBD_LL_StallEP>
      break;
 800bd2a:	bf00      	nop
  }

  return USBD_OK;
 800bd2c:	2300      	movs	r3, #0
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3708      	adds	r7, #8
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	460b      	mov	r3, r1
 800bd40:	607a      	str	r2, [r7, #4]
 800bd42:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800bd44:	7afb      	ldrb	r3, [r7, #11]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d14b      	bne.n	800bde2 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800bd50:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bd58:	2b03      	cmp	r3, #3
 800bd5a:	d134      	bne.n	800bdc6 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	68da      	ldr	r2, [r3, #12]
 800bd60:	697b      	ldr	r3, [r7, #20]
 800bd62:	691b      	ldr	r3, [r3, #16]
 800bd64:	429a      	cmp	r2, r3
 800bd66:	d919      	bls.n	800bd9c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800bd68:	697b      	ldr	r3, [r7, #20]
 800bd6a:	68da      	ldr	r2, [r3, #12]
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	691b      	ldr	r3, [r3, #16]
 800bd70:	1ad2      	subs	r2, r2, r3
 800bd72:	697b      	ldr	r3, [r7, #20]
 800bd74:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	68da      	ldr	r2, [r3, #12]
 800bd7a:	697b      	ldr	r3, [r7, #20]
 800bd7c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bd7e:	429a      	cmp	r2, r3
 800bd80:	d203      	bcs.n	800bd8a <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800bd86:	b29b      	uxth	r3, r3
 800bd88:	e002      	b.n	800bd90 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	461a      	mov	r2, r3
 800bd92:	6879      	ldr	r1, [r7, #4]
 800bd94:	68f8      	ldr	r0, [r7, #12]
 800bd96:	f000 ff8d 	bl	800ccb4 <USBD_CtlContinueRx>
 800bd9a:	e038      	b.n	800be0e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d00a      	beq.n	800bdbe <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d105      	bne.n	800bdbe <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	68f8      	ldr	r0, [r7, #12]
 800bdbc:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800bdbe:	68f8      	ldr	r0, [r7, #12]
 800bdc0:	f000 ff8a 	bl	800ccd8 <USBD_CtlSendStatus>
 800bdc4:	e023      	b.n	800be0e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800bdcc:	2b05      	cmp	r3, #5
 800bdce:	d11e      	bne.n	800be0e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800bdd8:	2100      	movs	r1, #0
 800bdda:	68f8      	ldr	r0, [r7, #12]
 800bddc:	f001 fbc2 	bl	800d564 <USBD_LL_StallEP>
 800bde0:	e015      	b.n	800be0e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bde8:	699b      	ldr	r3, [r3, #24]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00d      	beq.n	800be0a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d108      	bne.n	800be0a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdfe:	699b      	ldr	r3, [r3, #24]
 800be00:	7afa      	ldrb	r2, [r7, #11]
 800be02:	4611      	mov	r1, r2
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	4798      	blx	r3
 800be08:	e001      	b.n	800be0e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800be0a:	2302      	movs	r3, #2
 800be0c:	e000      	b.n	800be10 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800be0e:	2300      	movs	r3, #0
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	460b      	mov	r3, r1
 800be22:	607a      	str	r2, [r7, #4]
 800be24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800be26:	7afb      	ldrb	r3, [r7, #11]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d17f      	bne.n	800bf2c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	3314      	adds	r3, #20
 800be30:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800be38:	2b02      	cmp	r3, #2
 800be3a:	d15c      	bne.n	800bef6 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	68da      	ldr	r2, [r3, #12]
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	691b      	ldr	r3, [r3, #16]
 800be44:	429a      	cmp	r2, r3
 800be46:	d915      	bls.n	800be74 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	68da      	ldr	r2, [r3, #12]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	1ad2      	subs	r2, r2, r3
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	68db      	ldr	r3, [r3, #12]
 800be5a:	b29b      	uxth	r3, r3
 800be5c:	461a      	mov	r2, r3
 800be5e:	6879      	ldr	r1, [r7, #4]
 800be60:	68f8      	ldr	r0, [r7, #12]
 800be62:	f000 fef7 	bl	800cc54 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800be66:	2300      	movs	r3, #0
 800be68:	2200      	movs	r2, #0
 800be6a:	2100      	movs	r1, #0
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f001 fc25 	bl	800d6bc <USBD_LL_PrepareReceive>
 800be72:	e04e      	b.n	800bf12 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	689b      	ldr	r3, [r3, #8]
 800be78:	697a      	ldr	r2, [r7, #20]
 800be7a:	6912      	ldr	r2, [r2, #16]
 800be7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800be80:	fb02 f201 	mul.w	r2, r2, r1
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	2b00      	cmp	r3, #0
 800be88:	d11c      	bne.n	800bec4 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800be92:	429a      	cmp	r2, r3
 800be94:	d316      	bcc.n	800bec4 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	689a      	ldr	r2, [r3, #8]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800bea0:	429a      	cmp	r2, r3
 800bea2:	d20f      	bcs.n	800bec4 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800bea4:	2200      	movs	r2, #0
 800bea6:	2100      	movs	r1, #0
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	f000 fed3 	bl	800cc54 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	2200      	movs	r2, #0
 800beb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800beb6:	2300      	movs	r3, #0
 800beb8:	2200      	movs	r2, #0
 800beba:	2100      	movs	r1, #0
 800bebc:	68f8      	ldr	r0, [r7, #12]
 800bebe:	f001 fbfd 	bl	800d6bc <USBD_LL_PrepareReceive>
 800bec2:	e026      	b.n	800bf12 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d00a      	beq.n	800bee6 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800bed6:	2b03      	cmp	r3, #3
 800bed8:	d105      	bne.n	800bee6 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	68f8      	ldr	r0, [r7, #12]
 800bee4:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800bee6:	2180      	movs	r1, #128	; 0x80
 800bee8:	68f8      	ldr	r0, [r7, #12]
 800beea:	f001 fb3b 	bl	800d564 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800beee:	68f8      	ldr	r0, [r7, #12]
 800bef0:	f000 ff05 	bl	800ccfe <USBD_CtlReceiveStatus>
 800bef4:	e00d      	b.n	800bf12 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800befc:	2b04      	cmp	r3, #4
 800befe:	d004      	beq.n	800bf0a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d103      	bne.n	800bf12 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800bf0a:	2180      	movs	r1, #128	; 0x80
 800bf0c:	68f8      	ldr	r0, [r7, #12]
 800bf0e:	f001 fb29 	bl	800d564 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d11d      	bne.n	800bf58 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800bf1c:	68f8      	ldr	r0, [r7, #12]
 800bf1e:	f7ff fe82 	bl	800bc26 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800bf2a:	e015      	b.n	800bf58 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf32:	695b      	ldr	r3, [r3, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d00d      	beq.n	800bf54 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d108      	bne.n	800bf54 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bf48:	695b      	ldr	r3, [r3, #20]
 800bf4a:	7afa      	ldrb	r2, [r7, #11]
 800bf4c:	4611      	mov	r1, r2
 800bf4e:	68f8      	ldr	r0, [r7, #12]
 800bf50:	4798      	blx	r3
 800bf52:	e001      	b.n	800bf58 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800bf54:	2302      	movs	r3, #2
 800bf56:	e000      	b.n	800bf5a <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800bf58:	2300      	movs	r3, #0
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3718      	adds	r7, #24
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf6a:	2340      	movs	r3, #64	; 0x40
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	2100      	movs	r1, #0
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f001 fab2 	bl	800d4da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	2240      	movs	r2, #64	; 0x40
 800bf82:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800bf86:	2340      	movs	r3, #64	; 0x40
 800bf88:	2200      	movs	r2, #0
 800bf8a:	2180      	movs	r1, #128	; 0x80
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f001 faa4 	bl	800d4da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	2201      	movs	r2, #1
 800bf96:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	2240      	movs	r2, #64	; 0x40
 800bf9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	2200      	movs	r2, #0
 800bfb2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d009      	beq.n	800bfda <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	6852      	ldr	r2, [r2, #4]
 800bfd2:	b2d2      	uxtb	r2, r2
 800bfd4:	4611      	mov	r1, r2
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	4798      	blx	r3
  }

  return USBD_OK;
 800bfda:	2300      	movs	r3, #0
}
 800bfdc:	4618      	mov	r0, r3
 800bfde:	3708      	adds	r7, #8
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	78fa      	ldrb	r2, [r7, #3]
 800bff4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	370c      	adds	r7, #12
 800bffc:	46bd      	mov	sp, r7
 800bffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c002:	4770      	bx	lr

0800c004 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2204      	movs	r2, #4
 800c01c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c020:	2300      	movs	r3, #0
}
 800c022:	4618      	mov	r0, r3
 800c024:	370c      	adds	r7, #12
 800c026:	46bd      	mov	sp, r7
 800c028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c02c:	4770      	bx	lr

0800c02e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c02e:	b480      	push	{r7}
 800c030:	b083      	sub	sp, #12
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c03c:	2b04      	cmp	r3, #4
 800c03e:	d105      	bne.n	800c04c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c04c:	2300      	movs	r3, #0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c068:	2b03      	cmp	r3, #3
 800c06a:	d10b      	bne.n	800c084 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c072:	69db      	ldr	r3, [r3, #28]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d005      	beq.n	800c084 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c07e:	69db      	ldr	r3, [r3, #28]
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}

0800c08e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c08e:	b480      	push	{r7}
 800c090:	b083      	sub	sp, #12
 800c092:	af00      	add	r7, sp, #0
 800c094:	6078      	str	r0, [r7, #4]
 800c096:	460b      	mov	r3, r1
 800c098:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr

0800c0a8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b083      	sub	sp, #12
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	460b      	mov	r3, r1
 800c0b2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800c0b4:	2300      	movs	r3, #0
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b083      	sub	sp, #12
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	370c      	adds	r7, #12
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b082      	sub	sp, #8
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	6852      	ldr	r2, [r2, #4]
 800c0f4:	b2d2      	uxtb	r2, r2
 800c0f6:	4611      	mov	r1, r2
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	4798      	blx	r3

  return USBD_OK;
 800c0fc:	2300      	movs	r3, #0
}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800c108:	b580      	push	{r7, lr}
 800c10a:	b084      	sub	sp, #16
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c112:	2300      	movs	r3, #0
 800c114:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c11e:	2b20      	cmp	r3, #32
 800c120:	d004      	beq.n	800c12c <USBD_StdDevReq+0x24>
 800c122:	2b40      	cmp	r3, #64	; 0x40
 800c124:	d002      	beq.n	800c12c <USBD_StdDevReq+0x24>
 800c126:	2b00      	cmp	r3, #0
 800c128:	d008      	beq.n	800c13c <USBD_StdDevReq+0x34>
 800c12a:	e04c      	b.n	800c1c6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c132:	689b      	ldr	r3, [r3, #8]
 800c134:	6839      	ldr	r1, [r7, #0]
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	4798      	blx	r3
      break;
 800c13a:	e049      	b.n	800c1d0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	785b      	ldrb	r3, [r3, #1]
 800c140:	2b09      	cmp	r3, #9
 800c142:	d83a      	bhi.n	800c1ba <USBD_StdDevReq+0xb2>
 800c144:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <USBD_StdDevReq+0x44>)
 800c146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14a:	bf00      	nop
 800c14c:	0800c19d 	.word	0x0800c19d
 800c150:	0800c1b1 	.word	0x0800c1b1
 800c154:	0800c1bb 	.word	0x0800c1bb
 800c158:	0800c1a7 	.word	0x0800c1a7
 800c15c:	0800c1bb 	.word	0x0800c1bb
 800c160:	0800c17f 	.word	0x0800c17f
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c1bb 	.word	0x0800c1bb
 800c16c:	0800c193 	.word	0x0800c193
 800c170:	0800c189 	.word	0x0800c189
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c174:	6839      	ldr	r1, [r7, #0]
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f9d4 	bl	800c524 <USBD_GetDescriptor>
          break;
 800c17c:	e022      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fb37 	bl	800c7f4 <USBD_SetAddress>
          break;
 800c186:	e01d      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800c188:	6839      	ldr	r1, [r7, #0]
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f000 fb74 	bl	800c878 <USBD_SetConfig>
          break;
 800c190:	e018      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fbfd 	bl	800c994 <USBD_GetConfig>
          break;
 800c19a:	e013      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c19c:	6839      	ldr	r1, [r7, #0]
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 fc2c 	bl	800c9fc <USBD_GetStatus>
          break;
 800c1a4:	e00e      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c1a6:	6839      	ldr	r1, [r7, #0]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fc5a 	bl	800ca62 <USBD_SetFeature>
          break;
 800c1ae:	e009      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fc69 	bl	800ca8a <USBD_ClrFeature>
          break;
 800c1b8:	e004      	b.n	800c1c4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f000 fcc2 	bl	800cb46 <USBD_CtlError>
          break;
 800c1c2:	bf00      	nop
      }
      break;
 800c1c4:	e004      	b.n	800c1d0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800c1c6:	6839      	ldr	r1, [r7, #0]
 800c1c8:	6878      	ldr	r0, [r7, #4]
 800c1ca:	f000 fcbc 	bl	800cb46 <USBD_CtlError>
      break;
 800c1ce:	bf00      	nop
  }

  return ret;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop

0800c1dc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b084      	sub	sp, #16
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
 800c1e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	781b      	ldrb	r3, [r3, #0]
 800c1ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c1f2:	2b20      	cmp	r3, #32
 800c1f4:	d003      	beq.n	800c1fe <USBD_StdItfReq+0x22>
 800c1f6:	2b40      	cmp	r3, #64	; 0x40
 800c1f8:	d001      	beq.n	800c1fe <USBD_StdItfReq+0x22>
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d12a      	bne.n	800c254 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c204:	3b01      	subs	r3, #1
 800c206:	2b02      	cmp	r3, #2
 800c208:	d81d      	bhi.n	800c246 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c20a:	683b      	ldr	r3, [r7, #0]
 800c20c:	889b      	ldrh	r3, [r3, #4]
 800c20e:	b2db      	uxtb	r3, r3
 800c210:	2b01      	cmp	r3, #1
 800c212:	d813      	bhi.n	800c23c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c21a:	689b      	ldr	r3, [r3, #8]
 800c21c:	6839      	ldr	r1, [r7, #0]
 800c21e:	6878      	ldr	r0, [r7, #4]
 800c220:	4798      	blx	r3
 800c222:	4603      	mov	r3, r0
 800c224:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	88db      	ldrh	r3, [r3, #6]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d110      	bne.n	800c250 <USBD_StdItfReq+0x74>
 800c22e:	7bfb      	ldrb	r3, [r7, #15]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d10d      	bne.n	800c250 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 800c234:	6878      	ldr	r0, [r7, #4]
 800c236:	f000 fd4f 	bl	800ccd8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c23a:	e009      	b.n	800c250 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fc81 	bl	800cb46 <USBD_CtlError>
          break;
 800c244:	e004      	b.n	800c250 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800c246:	6839      	ldr	r1, [r7, #0]
 800c248:	6878      	ldr	r0, [r7, #4]
 800c24a:	f000 fc7c 	bl	800cb46 <USBD_CtlError>
          break;
 800c24e:	e000      	b.n	800c252 <USBD_StdItfReq+0x76>
          break;
 800c250:	bf00      	nop
      }
      break;
 800c252:	e004      	b.n	800c25e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 800c254:	6839      	ldr	r1, [r7, #0]
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fc75 	bl	800cb46 <USBD_CtlError>
      break;
 800c25c:	bf00      	nop
  }

  return USBD_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3710      	adds	r7, #16
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b084      	sub	sp, #16
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800c272:	2300      	movs	r3, #0
 800c274:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	889b      	ldrh	r3, [r3, #4]
 800c27a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c27c:	683b      	ldr	r3, [r7, #0]
 800c27e:	781b      	ldrb	r3, [r3, #0]
 800c280:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c284:	2b20      	cmp	r3, #32
 800c286:	d004      	beq.n	800c292 <USBD_StdEPReq+0x2a>
 800c288:	2b40      	cmp	r3, #64	; 0x40
 800c28a:	d002      	beq.n	800c292 <USBD_StdEPReq+0x2a>
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d008      	beq.n	800c2a2 <USBD_StdEPReq+0x3a>
 800c290:	e13d      	b.n	800c50e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	6839      	ldr	r1, [r7, #0]
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	4798      	blx	r3
      break;
 800c2a0:	e13a      	b.n	800c518 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800c2a2:	683b      	ldr	r3, [r7, #0]
 800c2a4:	781b      	ldrb	r3, [r3, #0]
 800c2a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	d10a      	bne.n	800c2c4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c2b4:	689b      	ldr	r3, [r3, #8]
 800c2b6:	6839      	ldr	r1, [r7, #0]
 800c2b8:	6878      	ldr	r0, [r7, #4]
 800c2ba:	4798      	blx	r3
 800c2bc:	4603      	mov	r3, r0
 800c2be:	73fb      	strb	r3, [r7, #15]

        return ret;
 800c2c0:	7bfb      	ldrb	r3, [r7, #15]
 800c2c2:	e12a      	b.n	800c51a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	785b      	ldrb	r3, [r3, #1]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d03e      	beq.n	800c34a <USBD_StdEPReq+0xe2>
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d002      	beq.n	800c2d6 <USBD_StdEPReq+0x6e>
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d070      	beq.n	800c3b6 <USBD_StdEPReq+0x14e>
 800c2d4:	e115      	b.n	800c502 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2dc:	2b02      	cmp	r3, #2
 800c2de:	d002      	beq.n	800c2e6 <USBD_StdEPReq+0x7e>
 800c2e0:	2b03      	cmp	r3, #3
 800c2e2:	d015      	beq.n	800c310 <USBD_StdEPReq+0xa8>
 800c2e4:	e02b      	b.n	800c33e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c2e6:	7bbb      	ldrb	r3, [r7, #14]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00c      	beq.n	800c306 <USBD_StdEPReq+0x9e>
 800c2ec:	7bbb      	ldrb	r3, [r7, #14]
 800c2ee:	2b80      	cmp	r3, #128	; 0x80
 800c2f0:	d009      	beq.n	800c306 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f001 f934 	bl	800d564 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c2fc:	2180      	movs	r1, #128	; 0x80
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f001 f930 	bl	800d564 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c304:	e020      	b.n	800c348 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800c306:	6839      	ldr	r1, [r7, #0]
 800c308:	6878      	ldr	r0, [r7, #4]
 800c30a:	f000 fc1c 	bl	800cb46 <USBD_CtlError>
              break;
 800c30e:	e01b      	b.n	800c348 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	885b      	ldrh	r3, [r3, #2]
 800c314:	2b00      	cmp	r3, #0
 800c316:	d10e      	bne.n	800c336 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800c318:	7bbb      	ldrb	r3, [r7, #14]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d00b      	beq.n	800c336 <USBD_StdEPReq+0xce>
 800c31e:	7bbb      	ldrb	r3, [r7, #14]
 800c320:	2b80      	cmp	r3, #128	; 0x80
 800c322:	d008      	beq.n	800c336 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	88db      	ldrh	r3, [r3, #6]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d104      	bne.n	800c336 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800c32c:	7bbb      	ldrb	r3, [r7, #14]
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 f917 	bl	800d564 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f000 fcce 	bl	800ccd8 <USBD_CtlSendStatus>

              break;
 800c33c:	e004      	b.n	800c348 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800c33e:	6839      	ldr	r1, [r7, #0]
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f000 fc00 	bl	800cb46 <USBD_CtlError>
              break;
 800c346:	bf00      	nop
          }
          break;
 800c348:	e0e0      	b.n	800c50c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c350:	2b02      	cmp	r3, #2
 800c352:	d002      	beq.n	800c35a <USBD_StdEPReq+0xf2>
 800c354:	2b03      	cmp	r3, #3
 800c356:	d015      	beq.n	800c384 <USBD_StdEPReq+0x11c>
 800c358:	e026      	b.n	800c3a8 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c35a:	7bbb      	ldrb	r3, [r7, #14]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00c      	beq.n	800c37a <USBD_StdEPReq+0x112>
 800c360:	7bbb      	ldrb	r3, [r7, #14]
 800c362:	2b80      	cmp	r3, #128	; 0x80
 800c364:	d009      	beq.n	800c37a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800c366:	7bbb      	ldrb	r3, [r7, #14]
 800c368:	4619      	mov	r1, r3
 800c36a:	6878      	ldr	r0, [r7, #4]
 800c36c:	f001 f8fa 	bl	800d564 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800c370:	2180      	movs	r1, #128	; 0x80
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	f001 f8f6 	bl	800d564 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c378:	e01c      	b.n	800c3b4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800c37a:	6839      	ldr	r1, [r7, #0]
 800c37c:	6878      	ldr	r0, [r7, #4]
 800c37e:	f000 fbe2 	bl	800cb46 <USBD_CtlError>
              break;
 800c382:	e017      	b.n	800c3b4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c384:	683b      	ldr	r3, [r7, #0]
 800c386:	885b      	ldrh	r3, [r3, #2]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d112      	bne.n	800c3b2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c38c:	7bbb      	ldrb	r3, [r7, #14]
 800c38e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c392:	2b00      	cmp	r3, #0
 800c394:	d004      	beq.n	800c3a0 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800c396:	7bbb      	ldrb	r3, [r7, #14]
 800c398:	4619      	mov	r1, r3
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f001 f901 	bl	800d5a2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800c3a0:	6878      	ldr	r0, [r7, #4]
 800c3a2:	f000 fc99 	bl	800ccd8 <USBD_CtlSendStatus>
              }
              break;
 800c3a6:	e004      	b.n	800c3b2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f000 fbcb 	bl	800cb46 <USBD_CtlError>
              break;
 800c3b0:	e000      	b.n	800c3b4 <USBD_StdEPReq+0x14c>
              break;
 800c3b2:	bf00      	nop
          }
          break;
 800c3b4:	e0aa      	b.n	800c50c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d002      	beq.n	800c3c6 <USBD_StdEPReq+0x15e>
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d032      	beq.n	800c42a <USBD_StdEPReq+0x1c2>
 800c3c4:	e097      	b.n	800c4f6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c3c6:	7bbb      	ldrb	r3, [r7, #14]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d007      	beq.n	800c3dc <USBD_StdEPReq+0x174>
 800c3cc:	7bbb      	ldrb	r3, [r7, #14]
 800c3ce:	2b80      	cmp	r3, #128	; 0x80
 800c3d0:	d004      	beq.n	800c3dc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 800c3d2:	6839      	ldr	r1, [r7, #0]
 800c3d4:	6878      	ldr	r0, [r7, #4]
 800c3d6:	f000 fbb6 	bl	800cb46 <USBD_CtlError>
                break;
 800c3da:	e091      	b.n	800c500 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c3dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	da0b      	bge.n	800c3fc <USBD_StdEPReq+0x194>
 800c3e4:	7bbb      	ldrb	r3, [r7, #14]
 800c3e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ea:	4613      	mov	r3, r2
 800c3ec:	009b      	lsls	r3, r3, #2
 800c3ee:	4413      	add	r3, r2
 800c3f0:	009b      	lsls	r3, r3, #2
 800c3f2:	3310      	adds	r3, #16
 800c3f4:	687a      	ldr	r2, [r7, #4]
 800c3f6:	4413      	add	r3, r2
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	e00b      	b.n	800c414 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c3fc:	7bbb      	ldrb	r3, [r7, #14]
 800c3fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c402:	4613      	mov	r3, r2
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	4413      	add	r3, r2
 800c412:	3304      	adds	r3, #4
 800c414:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	2200      	movs	r2, #0
 800c41a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	2202      	movs	r2, #2
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 fbfa 	bl	800cc1c <USBD_CtlSendData>
              break;
 800c428:	e06a      	b.n	800c500 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c42a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	da11      	bge.n	800c456 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c432:	7bbb      	ldrb	r3, [r7, #14]
 800c434:	f003 020f 	and.w	r2, r3, #15
 800c438:	6879      	ldr	r1, [r7, #4]
 800c43a:	4613      	mov	r3, r2
 800c43c:	009b      	lsls	r3, r3, #2
 800c43e:	4413      	add	r3, r2
 800c440:	009b      	lsls	r3, r3, #2
 800c442:	440b      	add	r3, r1
 800c444:	3318      	adds	r3, #24
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d117      	bne.n	800c47c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800c44c:	6839      	ldr	r1, [r7, #0]
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f000 fb79 	bl	800cb46 <USBD_CtlError>
                  break;
 800c454:	e054      	b.n	800c500 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c456:	7bbb      	ldrb	r3, [r7, #14]
 800c458:	f003 020f 	and.w	r2, r3, #15
 800c45c:	6879      	ldr	r1, [r7, #4]
 800c45e:	4613      	mov	r3, r2
 800c460:	009b      	lsls	r3, r3, #2
 800c462:	4413      	add	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	440b      	add	r3, r1
 800c468:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d104      	bne.n	800c47c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800c472:	6839      	ldr	r1, [r7, #0]
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f000 fb66 	bl	800cb46 <USBD_CtlError>
                  break;
 800c47a:	e041      	b.n	800c500 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c47c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c480:	2b00      	cmp	r3, #0
 800c482:	da0b      	bge.n	800c49c <USBD_StdEPReq+0x234>
 800c484:	7bbb      	ldrb	r3, [r7, #14]
 800c486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c48a:	4613      	mov	r3, r2
 800c48c:	009b      	lsls	r3, r3, #2
 800c48e:	4413      	add	r3, r2
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	3310      	adds	r3, #16
 800c494:	687a      	ldr	r2, [r7, #4]
 800c496:	4413      	add	r3, r2
 800c498:	3304      	adds	r3, #4
 800c49a:	e00b      	b.n	800c4b4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c49c:	7bbb      	ldrb	r3, [r7, #14]
 800c49e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	009b      	lsls	r3, r3, #2
 800c4a6:	4413      	add	r3, r2
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800c4ae:	687a      	ldr	r2, [r7, #4]
 800c4b0:	4413      	add	r3, r2
 800c4b2:	3304      	adds	r3, #4
 800c4b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c4b6:	7bbb      	ldrb	r3, [r7, #14]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d002      	beq.n	800c4c2 <USBD_StdEPReq+0x25a>
 800c4bc:	7bbb      	ldrb	r3, [r7, #14]
 800c4be:	2b80      	cmp	r3, #128	; 0x80
 800c4c0:	d103      	bne.n	800c4ca <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	601a      	str	r2, [r3, #0]
 800c4c8:	e00e      	b.n	800c4e8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800c4ca:	7bbb      	ldrb	r3, [r7, #14]
 800c4cc:	4619      	mov	r1, r3
 800c4ce:	6878      	ldr	r0, [r7, #4]
 800c4d0:	f001 f886 	bl	800d5e0 <USBD_LL_IsStallEP>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d003      	beq.n	800c4e2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2201      	movs	r2, #1
 800c4de:	601a      	str	r2, [r3, #0]
 800c4e0:	e002      	b.n	800c4e8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800c4e8:	68bb      	ldr	r3, [r7, #8]
 800c4ea:	2202      	movs	r2, #2
 800c4ec:	4619      	mov	r1, r3
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fb94 	bl	800cc1c <USBD_CtlSendData>
              break;
 800c4f4:	e004      	b.n	800c500 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 800c4f6:	6839      	ldr	r1, [r7, #0]
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fb24 	bl	800cb46 <USBD_CtlError>
              break;
 800c4fe:	bf00      	nop
          }
          break;
 800c500:	e004      	b.n	800c50c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 800c502:	6839      	ldr	r1, [r7, #0]
 800c504:	6878      	ldr	r0, [r7, #4]
 800c506:	f000 fb1e 	bl	800cb46 <USBD_CtlError>
          break;
 800c50a:	bf00      	nop
      }
      break;
 800c50c:	e004      	b.n	800c518 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 800c50e:	6839      	ldr	r1, [r7, #0]
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fb18 	bl	800cb46 <USBD_CtlError>
      break;
 800c516:	bf00      	nop
  }

  return ret;
 800c518:	7bfb      	ldrb	r3, [r7, #15]
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
 800c52c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c52e:	2300      	movs	r3, #0
 800c530:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c532:	2300      	movs	r3, #0
 800c534:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c536:	2300      	movs	r3, #0
 800c538:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	885b      	ldrh	r3, [r3, #2]
 800c53e:	0a1b      	lsrs	r3, r3, #8
 800c540:	b29b      	uxth	r3, r3
 800c542:	3b01      	subs	r3, #1
 800c544:	2b06      	cmp	r3, #6
 800c546:	f200 8128 	bhi.w	800c79a <USBD_GetDescriptor+0x276>
 800c54a:	a201      	add	r2, pc, #4	; (adr r2, 800c550 <USBD_GetDescriptor+0x2c>)
 800c54c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c550:	0800c56d 	.word	0x0800c56d
 800c554:	0800c585 	.word	0x0800c585
 800c558:	0800c5c5 	.word	0x0800c5c5
 800c55c:	0800c79b 	.word	0x0800c79b
 800c560:	0800c79b 	.word	0x0800c79b
 800c564:	0800c73b 	.word	0x0800c73b
 800c568:	0800c767 	.word	0x0800c767
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	7c12      	ldrb	r2, [r2, #16]
 800c578:	f107 0108 	add.w	r1, r7, #8
 800c57c:	4610      	mov	r0, r2
 800c57e:	4798      	blx	r3
 800c580:	60f8      	str	r0, [r7, #12]
      break;
 800c582:	e112      	b.n	800c7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	7c1b      	ldrb	r3, [r3, #16]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10d      	bne.n	800c5a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c594:	f107 0208 	add.w	r2, r7, #8
 800c598:	4610      	mov	r0, r2
 800c59a:	4798      	blx	r3
 800c59c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	2202      	movs	r2, #2
 800c5a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c5a6:	e100      	b.n	800c7aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b0:	f107 0208 	add.w	r2, r7, #8
 800c5b4:	4610      	mov	r0, r2
 800c5b6:	4798      	blx	r3
 800c5b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	3301      	adds	r3, #1
 800c5be:	2202      	movs	r2, #2
 800c5c0:	701a      	strb	r2, [r3, #0]
      break;
 800c5c2:	e0f2      	b.n	800c7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	885b      	ldrh	r3, [r3, #2]
 800c5c8:	b2db      	uxtb	r3, r3
 800c5ca:	2b05      	cmp	r3, #5
 800c5cc:	f200 80ac 	bhi.w	800c728 <USBD_GetDescriptor+0x204>
 800c5d0:	a201      	add	r2, pc, #4	; (adr r2, 800c5d8 <USBD_GetDescriptor+0xb4>)
 800c5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d6:	bf00      	nop
 800c5d8:	0800c5f1 	.word	0x0800c5f1
 800c5dc:	0800c625 	.word	0x0800c625
 800c5e0:	0800c659 	.word	0x0800c659
 800c5e4:	0800c68d 	.word	0x0800c68d
 800c5e8:	0800c6c1 	.word	0x0800c6c1
 800c5ec:	0800c6f5 	.word	0x0800c6f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d00b      	beq.n	800c614 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c602:	685b      	ldr	r3, [r3, #4]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	7c12      	ldrb	r2, [r2, #16]
 800c608:	f107 0108 	add.w	r1, r7, #8
 800c60c:	4610      	mov	r0, r2
 800c60e:	4798      	blx	r3
 800c610:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c612:	e091      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c614:	6839      	ldr	r1, [r7, #0]
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f000 fa95 	bl	800cb46 <USBD_CtlError>
            err++;
 800c61c:	7afb      	ldrb	r3, [r7, #11]
 800c61e:	3301      	adds	r3, #1
 800c620:	72fb      	strb	r3, [r7, #11]
          break;
 800c622:	e089      	b.n	800c738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c62a:	689b      	ldr	r3, [r3, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d00b      	beq.n	800c648 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c636:	689b      	ldr	r3, [r3, #8]
 800c638:	687a      	ldr	r2, [r7, #4]
 800c63a:	7c12      	ldrb	r2, [r2, #16]
 800c63c:	f107 0108 	add.w	r1, r7, #8
 800c640:	4610      	mov	r0, r2
 800c642:	4798      	blx	r3
 800c644:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c646:	e077      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c648:	6839      	ldr	r1, [r7, #0]
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f000 fa7b 	bl	800cb46 <USBD_CtlError>
            err++;
 800c650:	7afb      	ldrb	r3, [r7, #11]
 800c652:	3301      	adds	r3, #1
 800c654:	72fb      	strb	r3, [r7, #11]
          break;
 800c656:	e06f      	b.n	800c738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c65e:	68db      	ldr	r3, [r3, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d00b      	beq.n	800c67c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c66a:	68db      	ldr	r3, [r3, #12]
 800c66c:	687a      	ldr	r2, [r7, #4]
 800c66e:	7c12      	ldrb	r2, [r2, #16]
 800c670:	f107 0108 	add.w	r1, r7, #8
 800c674:	4610      	mov	r0, r2
 800c676:	4798      	blx	r3
 800c678:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c67a:	e05d      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c67c:	6839      	ldr	r1, [r7, #0]
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f000 fa61 	bl	800cb46 <USBD_CtlError>
            err++;
 800c684:	7afb      	ldrb	r3, [r7, #11]
 800c686:	3301      	adds	r3, #1
 800c688:	72fb      	strb	r3, [r7, #11]
          break;
 800c68a:	e055      	b.n	800c738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c692:	691b      	ldr	r3, [r3, #16]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d00b      	beq.n	800c6b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	687a      	ldr	r2, [r7, #4]
 800c6a2:	7c12      	ldrb	r2, [r2, #16]
 800c6a4:	f107 0108 	add.w	r1, r7, #8
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4798      	blx	r3
 800c6ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6ae:	e043      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6b0:	6839      	ldr	r1, [r7, #0]
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f000 fa47 	bl	800cb46 <USBD_CtlError>
            err++;
 800c6b8:	7afb      	ldrb	r3, [r7, #11]
 800c6ba:	3301      	adds	r3, #1
 800c6bc:	72fb      	strb	r3, [r7, #11]
          break;
 800c6be:	e03b      	b.n	800c738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6c6:	695b      	ldr	r3, [r3, #20]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d00b      	beq.n	800c6e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	687a      	ldr	r2, [r7, #4]
 800c6d6:	7c12      	ldrb	r2, [r2, #16]
 800c6d8:	f107 0108 	add.w	r1, r7, #8
 800c6dc:	4610      	mov	r0, r2
 800c6de:	4798      	blx	r3
 800c6e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c6e2:	e029      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c6e4:	6839      	ldr	r1, [r7, #0]
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f000 fa2d 	bl	800cb46 <USBD_CtlError>
            err++;
 800c6ec:	7afb      	ldrb	r3, [r7, #11]
 800c6ee:	3301      	adds	r3, #1
 800c6f0:	72fb      	strb	r3, [r7, #11]
          break;
 800c6f2:	e021      	b.n	800c738 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c6fa:	699b      	ldr	r3, [r3, #24]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d00b      	beq.n	800c718 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	7c12      	ldrb	r2, [r2, #16]
 800c70c:	f107 0108 	add.w	r1, r7, #8
 800c710:	4610      	mov	r0, r2
 800c712:	4798      	blx	r3
 800c714:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c716:	e00f      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c718:	6839      	ldr	r1, [r7, #0]
 800c71a:	6878      	ldr	r0, [r7, #4]
 800c71c:	f000 fa13 	bl	800cb46 <USBD_CtlError>
            err++;
 800c720:	7afb      	ldrb	r3, [r7, #11]
 800c722:	3301      	adds	r3, #1
 800c724:	72fb      	strb	r3, [r7, #11]
          break;
 800c726:	e007      	b.n	800c738 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	f000 fa0b 	bl	800cb46 <USBD_CtlError>
          err++;
 800c730:	7afb      	ldrb	r3, [r7, #11]
 800c732:	3301      	adds	r3, #1
 800c734:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800c736:	e038      	b.n	800c7aa <USBD_GetDescriptor+0x286>
 800c738:	e037      	b.n	800c7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	7c1b      	ldrb	r3, [r3, #16]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d109      	bne.n	800c756 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c74a:	f107 0208 	add.w	r2, r7, #8
 800c74e:	4610      	mov	r0, r2
 800c750:	4798      	blx	r3
 800c752:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c754:	e029      	b.n	800c7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c756:	6839      	ldr	r1, [r7, #0]
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f000 f9f4 	bl	800cb46 <USBD_CtlError>
        err++;
 800c75e:	7afb      	ldrb	r3, [r7, #11]
 800c760:	3301      	adds	r3, #1
 800c762:	72fb      	strb	r3, [r7, #11]
      break;
 800c764:	e021      	b.n	800c7aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	7c1b      	ldrb	r3, [r3, #16]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d10d      	bne.n	800c78a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800c774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c776:	f107 0208 	add.w	r2, r7, #8
 800c77a:	4610      	mov	r0, r2
 800c77c:	4798      	blx	r3
 800c77e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	3301      	adds	r3, #1
 800c784:	2207      	movs	r2, #7
 800c786:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c788:	e00f      	b.n	800c7aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c78a:	6839      	ldr	r1, [r7, #0]
 800c78c:	6878      	ldr	r0, [r7, #4]
 800c78e:	f000 f9da 	bl	800cb46 <USBD_CtlError>
        err++;
 800c792:	7afb      	ldrb	r3, [r7, #11]
 800c794:	3301      	adds	r3, #1
 800c796:	72fb      	strb	r3, [r7, #11]
      break;
 800c798:	e007      	b.n	800c7aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c79a:	6839      	ldr	r1, [r7, #0]
 800c79c:	6878      	ldr	r0, [r7, #4]
 800c79e:	f000 f9d2 	bl	800cb46 <USBD_CtlError>
      err++;
 800c7a2:	7afb      	ldrb	r3, [r7, #11]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	72fb      	strb	r3, [r7, #11]
      break;
 800c7a8:	bf00      	nop
  }

  if (err != 0U)
 800c7aa:	7afb      	ldrb	r3, [r7, #11]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d11c      	bne.n	800c7ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800c7b0:	893b      	ldrh	r3, [r7, #8]
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	d011      	beq.n	800c7da <USBD_GetDescriptor+0x2b6>
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	88db      	ldrh	r3, [r3, #6]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d00d      	beq.n	800c7da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800c7be:	683b      	ldr	r3, [r7, #0]
 800c7c0:	88da      	ldrh	r2, [r3, #6]
 800c7c2:	893b      	ldrh	r3, [r7, #8]
 800c7c4:	4293      	cmp	r3, r2
 800c7c6:	bf28      	it	cs
 800c7c8:	4613      	movcs	r3, r2
 800c7ca:	b29b      	uxth	r3, r3
 800c7cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c7ce:	893b      	ldrh	r3, [r7, #8]
 800c7d0:	461a      	mov	r2, r3
 800c7d2:	68f9      	ldr	r1, [r7, #12]
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 fa21 	bl	800cc1c <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800c7da:	683b      	ldr	r3, [r7, #0]
 800c7dc:	88db      	ldrh	r3, [r3, #6]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d104      	bne.n	800c7ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f000 fa78 	bl	800ccd8 <USBD_CtlSendStatus>
 800c7e8:	e000      	b.n	800c7ec <USBD_GetDescriptor+0x2c8>
    return;
 800c7ea:	bf00      	nop
    }
  }
}
 800c7ec:	3710      	adds	r7, #16
 800c7ee:	46bd      	mov	sp, r7
 800c7f0:	bd80      	pop	{r7, pc}
 800c7f2:	bf00      	nop

0800c7f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b084      	sub	sp, #16
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
 800c7fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	889b      	ldrh	r3, [r3, #4]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d130      	bne.n	800c868 <USBD_SetAddress+0x74>
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	88db      	ldrh	r3, [r3, #6]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d12c      	bne.n	800c868 <USBD_SetAddress+0x74>
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	885b      	ldrh	r3, [r3, #2]
 800c812:	2b7f      	cmp	r3, #127	; 0x7f
 800c814:	d828      	bhi.n	800c868 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	885b      	ldrh	r3, [r3, #2]
 800c81a:	b2db      	uxtb	r3, r3
 800c81c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c820:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c828:	2b03      	cmp	r3, #3
 800c82a:	d104      	bne.n	800c836 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800c82c:	6839      	ldr	r1, [r7, #0]
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f000 f989 	bl	800cb46 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c834:	e01c      	b.n	800c870 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	7bfa      	ldrb	r2, [r7, #15]
 800c83a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c83e:	7bfb      	ldrb	r3, [r7, #15]
 800c840:	4619      	mov	r1, r3
 800c842:	6878      	ldr	r0, [r7, #4]
 800c844:	f000 fef8 	bl	800d638 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f000 fa45 	bl	800ccd8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c84e:	7bfb      	ldrb	r3, [r7, #15]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d004      	beq.n	800c85e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2202      	movs	r2, #2
 800c858:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c85c:	e008      	b.n	800c870 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2201      	movs	r2, #1
 800c862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c866:	e003      	b.n	800c870 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c868:	6839      	ldr	r1, [r7, #0]
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f000 f96b 	bl	800cb46 <USBD_CtlError>
  }
}
 800c870:	bf00      	nop
 800c872:	3710      	adds	r7, #16
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c882:	683b      	ldr	r3, [r7, #0]
 800c884:	885b      	ldrh	r3, [r3, #2]
 800c886:	b2da      	uxtb	r2, r3
 800c888:	4b41      	ldr	r3, [pc, #260]	; (800c990 <USBD_SetConfig+0x118>)
 800c88a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c88c:	4b40      	ldr	r3, [pc, #256]	; (800c990 <USBD_SetConfig+0x118>)
 800c88e:	781b      	ldrb	r3, [r3, #0]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d904      	bls.n	800c89e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800c894:	6839      	ldr	r1, [r7, #0]
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f955 	bl	800cb46 <USBD_CtlError>
 800c89c:	e075      	b.n	800c98a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8a4:	2b02      	cmp	r3, #2
 800c8a6:	d002      	beq.n	800c8ae <USBD_SetConfig+0x36>
 800c8a8:	2b03      	cmp	r3, #3
 800c8aa:	d023      	beq.n	800c8f4 <USBD_SetConfig+0x7c>
 800c8ac:	e062      	b.n	800c974 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800c8ae:	4b38      	ldr	r3, [pc, #224]	; (800c990 <USBD_SetConfig+0x118>)
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d01a      	beq.n	800c8ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800c8b6:	4b36      	ldr	r3, [pc, #216]	; (800c990 <USBD_SetConfig+0x118>)
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	461a      	mov	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2203      	movs	r2, #3
 800c8c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c8c8:	4b31      	ldr	r3, [pc, #196]	; (800c990 <USBD_SetConfig+0x118>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff f9b4 	bl	800bc3c <USBD_SetClassConfig>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	d104      	bne.n	800c8e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f932 	bl	800cb46 <USBD_CtlError>
            return;
 800c8e2:	e052      	b.n	800c98a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f000 f9f7 	bl	800ccd8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c8ea:	e04e      	b.n	800c98a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f000 f9f3 	bl	800ccd8 <USBD_CtlSendStatus>
        break;
 800c8f2:	e04a      	b.n	800c98a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800c8f4:	4b26      	ldr	r3, [pc, #152]	; (800c990 <USBD_SetConfig+0x118>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d112      	bne.n	800c922 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2202      	movs	r2, #2
 800c900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800c904:	4b22      	ldr	r3, [pc, #136]	; (800c990 <USBD_SetConfig+0x118>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	461a      	mov	r2, r3
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800c90e:	4b20      	ldr	r3, [pc, #128]	; (800c990 <USBD_SetConfig+0x118>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff f9b0 	bl	800bc7a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f9dc 	bl	800ccd8 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800c920:	e033      	b.n	800c98a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800c922:	4b1b      	ldr	r3, [pc, #108]	; (800c990 <USBD_SetConfig+0x118>)
 800c924:	781b      	ldrb	r3, [r3, #0]
 800c926:	461a      	mov	r2, r3
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	685b      	ldr	r3, [r3, #4]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d01d      	beq.n	800c96c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	685b      	ldr	r3, [r3, #4]
 800c934:	b2db      	uxtb	r3, r3
 800c936:	4619      	mov	r1, r3
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff f99e 	bl	800bc7a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800c93e:	4b14      	ldr	r3, [pc, #80]	; (800c990 <USBD_SetConfig+0x118>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	461a      	mov	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800c948:	4b11      	ldr	r3, [pc, #68]	; (800c990 <USBD_SetConfig+0x118>)
 800c94a:	781b      	ldrb	r3, [r3, #0]
 800c94c:	4619      	mov	r1, r3
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f7ff f974 	bl	800bc3c <USBD_SetClassConfig>
 800c954:	4603      	mov	r3, r0
 800c956:	2b02      	cmp	r3, #2
 800c958:	d104      	bne.n	800c964 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800c95a:	6839      	ldr	r1, [r7, #0]
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f8f2 	bl	800cb46 <USBD_CtlError>
            return;
 800c962:	e012      	b.n	800c98a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 f9b7 	bl	800ccd8 <USBD_CtlSendStatus>
        break;
 800c96a:	e00e      	b.n	800c98a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f000 f9b3 	bl	800ccd8 <USBD_CtlSendStatus>
        break;
 800c972:	e00a      	b.n	800c98a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800c974:	6839      	ldr	r1, [r7, #0]
 800c976:	6878      	ldr	r0, [r7, #4]
 800c978:	f000 f8e5 	bl	800cb46 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800c97c:	4b04      	ldr	r3, [pc, #16]	; (800c990 <USBD_SetConfig+0x118>)
 800c97e:	781b      	ldrb	r3, [r3, #0]
 800c980:	4619      	mov	r1, r3
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff f979 	bl	800bc7a <USBD_ClrClassConfig>
        break;
 800c988:	bf00      	nop
    }
  }
}
 800c98a:	3708      	adds	r7, #8
 800c98c:	46bd      	mov	sp, r7
 800c98e:	bd80      	pop	{r7, pc}
 800c990:	24000274 	.word	0x24000274

0800c994 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b082      	sub	sp, #8
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]
 800c99c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	88db      	ldrh	r3, [r3, #6]
 800c9a2:	2b01      	cmp	r3, #1
 800c9a4:	d004      	beq.n	800c9b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c9a6:	6839      	ldr	r1, [r7, #0]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f000 f8cc 	bl	800cb46 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c9ae:	e021      	b.n	800c9f4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b6:	2b01      	cmp	r3, #1
 800c9b8:	db17      	blt.n	800c9ea <USBD_GetConfig+0x56>
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	dd02      	ble.n	800c9c4 <USBD_GetConfig+0x30>
 800c9be:	2b03      	cmp	r3, #3
 800c9c0:	d00b      	beq.n	800c9da <USBD_GetConfig+0x46>
 800c9c2:	e012      	b.n	800c9ea <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	3308      	adds	r3, #8
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f000 f922 	bl	800cc1c <USBD_CtlSendData>
        break;
 800c9d8:	e00c      	b.n	800c9f4 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	3304      	adds	r3, #4
 800c9de:	2201      	movs	r2, #1
 800c9e0:	4619      	mov	r1, r3
 800c9e2:	6878      	ldr	r0, [r7, #4]
 800c9e4:	f000 f91a 	bl	800cc1c <USBD_CtlSendData>
        break;
 800c9e8:	e004      	b.n	800c9f4 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 800c9ea:	6839      	ldr	r1, [r7, #0]
 800c9ec:	6878      	ldr	r0, [r7, #4]
 800c9ee:	f000 f8aa 	bl	800cb46 <USBD_CtlError>
        break;
 800c9f2:	bf00      	nop
}
 800c9f4:	bf00      	nop
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d81e      	bhi.n	800ca50 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	88db      	ldrh	r3, [r3, #6]
 800ca16:	2b02      	cmp	r3, #2
 800ca18:	d004      	beq.n	800ca24 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f000 f892 	bl	800cb46 <USBD_CtlError>
        break;
 800ca22:	e01a      	b.n	800ca5a <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2201      	movs	r2, #1
 800ca28:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d005      	beq.n	800ca40 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68db      	ldr	r3, [r3, #12]
 800ca38:	f043 0202 	orr.w	r2, r3, #2
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	330c      	adds	r3, #12
 800ca44:	2202      	movs	r2, #2
 800ca46:	4619      	mov	r1, r3
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f000 f8e7 	bl	800cc1c <USBD_CtlSendData>
      break;
 800ca4e:	e004      	b.n	800ca5a <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ca50:	6839      	ldr	r1, [r7, #0]
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f000 f877 	bl	800cb46 <USBD_CtlError>
      break;
 800ca58:	bf00      	nop
  }
}
 800ca5a:	bf00      	nop
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}

0800ca62 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ca62:	b580      	push	{r7, lr}
 800ca64:	b082      	sub	sp, #8
 800ca66:	af00      	add	r7, sp, #0
 800ca68:	6078      	str	r0, [r7, #4]
 800ca6a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	885b      	ldrh	r3, [r3, #2]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d106      	bne.n	800ca82 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2201      	movs	r2, #1
 800ca78:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800ca7c:	6878      	ldr	r0, [r7, #4]
 800ca7e:	f000 f92b 	bl	800ccd8 <USBD_CtlSendStatus>
  }
}
 800ca82:	bf00      	nop
 800ca84:	3708      	adds	r7, #8
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b082      	sub	sp, #8
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	2b02      	cmp	r3, #2
 800ca9e:	d80b      	bhi.n	800cab8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	885b      	ldrh	r3, [r3, #2]
 800caa4:	2b01      	cmp	r3, #1
 800caa6:	d10c      	bne.n	800cac2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2200      	movs	r2, #0
 800caac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f000 f911 	bl	800ccd8 <USBD_CtlSendStatus>
      }
      break;
 800cab6:	e004      	b.n	800cac2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800cab8:	6839      	ldr	r1, [r7, #0]
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 f843 	bl	800cb46 <USBD_CtlError>
      break;
 800cac0:	e000      	b.n	800cac4 <USBD_ClrFeature+0x3a>
      break;
 800cac2:	bf00      	nop
  }
}
 800cac4:	bf00      	nop
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}

0800cacc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800cacc:	b480      	push	{r7}
 800cace:	b083      	sub	sp, #12
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
 800cad4:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	781a      	ldrb	r2, [r3, #0]
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	785a      	ldrb	r2, [r3, #1]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	3302      	adds	r3, #2
 800caea:	781b      	ldrb	r3, [r3, #0]
 800caec:	b29a      	uxth	r2, r3
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	3303      	adds	r3, #3
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	b29b      	uxth	r3, r3
 800caf6:	021b      	lsls	r3, r3, #8
 800caf8:	b29b      	uxth	r3, r3
 800cafa:	4413      	add	r3, r2
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	3304      	adds	r3, #4
 800cb06:	781b      	ldrb	r3, [r3, #0]
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	3305      	adds	r3, #5
 800cb0e:	781b      	ldrb	r3, [r3, #0]
 800cb10:	b29b      	uxth	r3, r3
 800cb12:	021b      	lsls	r3, r3, #8
 800cb14:	b29b      	uxth	r3, r3
 800cb16:	4413      	add	r3, r2
 800cb18:	b29a      	uxth	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	3306      	adds	r3, #6
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	b29a      	uxth	r2, r3
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	3307      	adds	r3, #7
 800cb2a:	781b      	ldrb	r3, [r3, #0]
 800cb2c:	b29b      	uxth	r3, r3
 800cb2e:	021b      	lsls	r3, r3, #8
 800cb30:	b29b      	uxth	r3, r3
 800cb32:	4413      	add	r3, r2
 800cb34:	b29a      	uxth	r2, r3
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	80da      	strh	r2, [r3, #6]

}
 800cb3a:	bf00      	nop
 800cb3c:	370c      	adds	r7, #12
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr

0800cb46 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b082      	sub	sp, #8
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800cb50:	2180      	movs	r1, #128	; 0x80
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f000 fd06 	bl	800d564 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800cb58:	2100      	movs	r1, #0
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f000 fd02 	bl	800d564 <USBD_LL_StallEP>
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b086      	sub	sp, #24
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	60f8      	str	r0, [r7, #12]
 800cb70:	60b9      	str	r1, [r7, #8]
 800cb72:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800cb74:	2300      	movs	r3, #0
 800cb76:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d032      	beq.n	800cbe4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	f000 f834 	bl	800cbec <USBD_GetLen>
 800cb84:	4603      	mov	r3, r0
 800cb86:	3301      	adds	r3, #1
 800cb88:	b29b      	uxth	r3, r3
 800cb8a:	005b      	lsls	r3, r3, #1
 800cb8c:	b29a      	uxth	r2, r3
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	1c5a      	adds	r2, r3, #1
 800cb96:	75fa      	strb	r2, [r7, #23]
 800cb98:	461a      	mov	r2, r3
 800cb9a:	68bb      	ldr	r3, [r7, #8]
 800cb9c:	4413      	add	r3, r2
 800cb9e:	687a      	ldr	r2, [r7, #4]
 800cba0:	7812      	ldrb	r2, [r2, #0]
 800cba2:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	1c5a      	adds	r2, r3, #1
 800cba8:	75fa      	strb	r2, [r7, #23]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	68bb      	ldr	r3, [r7, #8]
 800cbae:	4413      	add	r3, r2
 800cbb0:	2203      	movs	r2, #3
 800cbb2:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800cbb4:	e012      	b.n	800cbdc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	1c5a      	adds	r2, r3, #1
 800cbba:	60fa      	str	r2, [r7, #12]
 800cbbc:	7dfa      	ldrb	r2, [r7, #23]
 800cbbe:	1c51      	adds	r1, r2, #1
 800cbc0:	75f9      	strb	r1, [r7, #23]
 800cbc2:	4611      	mov	r1, r2
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	440a      	add	r2, r1
 800cbc8:	781b      	ldrb	r3, [r3, #0]
 800cbca:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800cbcc:	7dfb      	ldrb	r3, [r7, #23]
 800cbce:	1c5a      	adds	r2, r3, #1
 800cbd0:	75fa      	strb	r2, [r7, #23]
 800cbd2:	461a      	mov	r2, r3
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	2200      	movs	r2, #0
 800cbda:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	781b      	ldrb	r3, [r3, #0]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e8      	bne.n	800cbb6 <USBD_GetString+0x4e>
    }
  }
}
 800cbe4:	bf00      	nop
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}

0800cbec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800cbec:	b480      	push	{r7}
 800cbee:	b085      	sub	sp, #20
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800cbf8:	e005      	b.n	800cc06 <USBD_GetLen+0x1a>
  {
    len++;
 800cbfa:	7bfb      	ldrb	r3, [r7, #15]
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	73fb      	strb	r3, [r7, #15]
    buf++;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	3301      	adds	r3, #1
 800cc04:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	781b      	ldrb	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d1f5      	bne.n	800cbfa <USBD_GetLen+0xe>
  }

  return len;
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3714      	adds	r7, #20
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b084      	sub	sp, #16
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	60f8      	str	r0, [r7, #12]
 800cc24:	60b9      	str	r1, [r7, #8]
 800cc26:	4613      	mov	r3, r2
 800cc28:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	2202      	movs	r2, #2
 800cc2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800cc32:	88fa      	ldrh	r2, [r7, #6]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800cc38:	88fa      	ldrh	r2, [r7, #6]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc3e:	88fb      	ldrh	r3, [r7, #6]
 800cc40:	68ba      	ldr	r2, [r7, #8]
 800cc42:	2100      	movs	r1, #0
 800cc44:	68f8      	ldr	r0, [r7, #12]
 800cc46:	f000 fd16 	bl	800d676 <USBD_LL_Transmit>

  return USBD_OK;
 800cc4a:	2300      	movs	r3, #0
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800cc62:	88fb      	ldrh	r3, [r7, #6]
 800cc64:	68ba      	ldr	r2, [r7, #8]
 800cc66:	2100      	movs	r1, #0
 800cc68:	68f8      	ldr	r0, [r7, #12]
 800cc6a:	f000 fd04 	bl	800d676 <USBD_LL_Transmit>

  return USBD_OK;
 800cc6e:	2300      	movs	r3, #0
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3710      	adds	r7, #16
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	60f8      	str	r0, [r7, #12]
 800cc80:	60b9      	str	r1, [r7, #8]
 800cc82:	4613      	mov	r3, r2
 800cc84:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2203      	movs	r2, #3
 800cc8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800cc8e:	88fa      	ldrh	r2, [r7, #6]
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800cc96:	88fa      	ldrh	r2, [r7, #6]
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800cc9e:	88fb      	ldrh	r3, [r7, #6]
 800cca0:	68ba      	ldr	r2, [r7, #8]
 800cca2:	2100      	movs	r1, #0
 800cca4:	68f8      	ldr	r0, [r7, #12]
 800cca6:	f000 fd09 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccaa:	2300      	movs	r3, #0
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	60f8      	str	r0, [r7, #12]
 800ccbc:	60b9      	str	r1, [r7, #8]
 800ccbe:	4613      	mov	r3, r2
 800ccc0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ccc2:	88fb      	ldrh	r3, [r7, #6]
 800ccc4:	68ba      	ldr	r2, [r7, #8]
 800ccc6:	2100      	movs	r1, #0
 800ccc8:	68f8      	ldr	r0, [r7, #12]
 800ccca:	f000 fcf7 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ccce:	2300      	movs	r3, #0
}
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	3710      	adds	r7, #16
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	bd80      	pop	{r7, pc}

0800ccd8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b082      	sub	sp, #8
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2204      	movs	r2, #4
 800cce4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cce8:	2300      	movs	r3, #0
 800ccea:	2200      	movs	r2, #0
 800ccec:	2100      	movs	r1, #0
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f000 fcc1 	bl	800d676 <USBD_LL_Transmit>

  return USBD_OK;
 800ccf4:	2300      	movs	r3, #0
}
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	3708      	adds	r7, #8
 800ccfa:	46bd      	mov	sp, r7
 800ccfc:	bd80      	pop	{r7, pc}

0800ccfe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ccfe:	b580      	push	{r7, lr}
 800cd00:	b082      	sub	sp, #8
 800cd02:	af00      	add	r7, sp, #0
 800cd04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	2205      	movs	r2, #5
 800cd0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd0e:	2300      	movs	r3, #0
 800cd10:	2200      	movs	r2, #0
 800cd12:	2100      	movs	r1, #0
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fcd1 	bl	800d6bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	4913      	ldr	r1, [pc, #76]	; (800cd78 <MX_USB_DEVICE_Init+0x54>)
 800cd2c:	4813      	ldr	r0, [pc, #76]	; (800cd7c <MX_USB_DEVICE_Init+0x58>)
 800cd2e:	f7fe ff29 	bl	800bb84 <USBD_Init>
 800cd32:	4603      	mov	r3, r0
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d001      	beq.n	800cd3c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cd38:	f7f4 fd98 	bl	800186c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cd3c:	4910      	ldr	r1, [pc, #64]	; (800cd80 <MX_USB_DEVICE_Init+0x5c>)
 800cd3e:	480f      	ldr	r0, [pc, #60]	; (800cd7c <MX_USB_DEVICE_Init+0x58>)
 800cd40:	f7fe ff4b 	bl	800bbda <USBD_RegisterClass>
 800cd44:	4603      	mov	r3, r0
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d001      	beq.n	800cd4e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cd4a:	f7f4 fd8f 	bl	800186c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cd4e:	490d      	ldr	r1, [pc, #52]	; (800cd84 <MX_USB_DEVICE_Init+0x60>)
 800cd50:	480a      	ldr	r0, [pc, #40]	; (800cd7c <MX_USB_DEVICE_Init+0x58>)
 800cd52:	f7fe fe79 	bl	800ba48 <USBD_CDC_RegisterInterface>
 800cd56:	4603      	mov	r3, r0
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d001      	beq.n	800cd60 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cd5c:	f7f4 fd86 	bl	800186c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cd60:	4806      	ldr	r0, [pc, #24]	; (800cd7c <MX_USB_DEVICE_Init+0x58>)
 800cd62:	f7fe ff54 	bl	800bc0e <USBD_Start>
 800cd66:	4603      	mov	r3, r0
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d001      	beq.n	800cd70 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cd6c:	f7f4 fd7e 	bl	800186c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800cd70:	f7f7 f8f6 	bl	8003f60 <HAL_PWREx_EnableUSBVoltageDetector>
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cd74:	bf00      	nop
 800cd76:	bd80      	pop	{r7, pc}
 800cd78:	24000138 	.word	0x24000138
 800cd7c:	24000584 	.word	0x24000584
 800cd80:	24000024 	.word	0x24000024
 800cd84:	24000128 	.word	0x24000128

0800cd88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	4905      	ldr	r1, [pc, #20]	; (800cda4 <CDC_Init_FS+0x1c>)
 800cd90:	4805      	ldr	r0, [pc, #20]	; (800cda8 <CDC_Init_FS+0x20>)
 800cd92:	f7fe fe70 	bl	800ba76 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cd96:	4905      	ldr	r1, [pc, #20]	; (800cdac <CDC_Init_FS+0x24>)
 800cd98:	4803      	ldr	r0, [pc, #12]	; (800cda8 <CDC_Init_FS+0x20>)
 800cd9a:	f7fe fe86 	bl	800baaa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cd9e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	24001048 	.word	0x24001048
 800cda8:	24000584 	.word	0x24000584
 800cdac:	24000848 	.word	0x24000848

0800cdb0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cdb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdbe:	4770      	bx	lr

0800cdc0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	6039      	str	r1, [r7, #0]
 800cdca:	71fb      	strb	r3, [r7, #7]
 800cdcc:	4613      	mov	r3, r2
 800cdce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t tempbuf[7] = {0,0,0,0,0,0,0};
 800cdd0:	f107 0308 	add.w	r3, r7, #8
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
 800cdd8:	f8c3 2003 	str.w	r2, [r3, #3]
  switch(cmd)
 800cddc:	79fb      	ldrb	r3, [r7, #7]
 800cdde:	2b23      	cmp	r3, #35	; 0x23
 800cde0:	d87c      	bhi.n	800cedc <CDC_Control_FS+0x11c>
 800cde2:	a201      	add	r2, pc, #4	; (adr r2, 800cde8 <CDC_Control_FS+0x28>)
 800cde4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cde8:	0800cedd 	.word	0x0800cedd
 800cdec:	0800cedd 	.word	0x0800cedd
 800cdf0:	0800cedd 	.word	0x0800cedd
 800cdf4:	0800cedd 	.word	0x0800cedd
 800cdf8:	0800cedd 	.word	0x0800cedd
 800cdfc:	0800cedd 	.word	0x0800cedd
 800ce00:	0800cedd 	.word	0x0800cedd
 800ce04:	0800cedd 	.word	0x0800cedd
 800ce08:	0800cedd 	.word	0x0800cedd
 800ce0c:	0800cedd 	.word	0x0800cedd
 800ce10:	0800cedd 	.word	0x0800cedd
 800ce14:	0800cedd 	.word	0x0800cedd
 800ce18:	0800cedd 	.word	0x0800cedd
 800ce1c:	0800cedd 	.word	0x0800cedd
 800ce20:	0800cedd 	.word	0x0800cedd
 800ce24:	0800cedd 	.word	0x0800cedd
 800ce28:	0800cedd 	.word	0x0800cedd
 800ce2c:	0800cedd 	.word	0x0800cedd
 800ce30:	0800cedd 	.word	0x0800cedd
 800ce34:	0800cedd 	.word	0x0800cedd
 800ce38:	0800cedd 	.word	0x0800cedd
 800ce3c:	0800cedd 	.word	0x0800cedd
 800ce40:	0800cedd 	.word	0x0800cedd
 800ce44:	0800cedd 	.word	0x0800cedd
 800ce48:	0800cedd 	.word	0x0800cedd
 800ce4c:	0800cedd 	.word	0x0800cedd
 800ce50:	0800cedd 	.word	0x0800cedd
 800ce54:	0800cedd 	.word	0x0800cedd
 800ce58:	0800cedd 	.word	0x0800cedd
 800ce5c:	0800cedd 	.word	0x0800cedd
 800ce60:	0800cedd 	.word	0x0800cedd
 800ce64:	0800cedd 	.word	0x0800cedd
 800ce68:	0800ce79 	.word	0x0800ce79
 800ce6c:	0800cea5 	.word	0x0800cea5
 800ce70:	0800cedd 	.word	0x0800cedd
 800ce74:	0800cedd 	.word	0x0800cedd
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
     	tempbuf[0] = pbuf[0];
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	723b      	strb	r3, [r7, #8]
     	tempbuf[1] = pbuf[1];
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	785b      	ldrb	r3, [r3, #1]
 800ce82:	727b      	strb	r3, [r7, #9]
     	tempbuf[2] = pbuf[2];
 800ce84:	683b      	ldr	r3, [r7, #0]
 800ce86:	789b      	ldrb	r3, [r3, #2]
 800ce88:	72bb      	strb	r3, [r7, #10]
     	tempbuf[3] = pbuf[3];
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	78db      	ldrb	r3, [r3, #3]
 800ce8e:	72fb      	strb	r3, [r7, #11]
     	tempbuf[4] = pbuf[4];
 800ce90:	683b      	ldr	r3, [r7, #0]
 800ce92:	791b      	ldrb	r3, [r3, #4]
 800ce94:	733b      	strb	r3, [r7, #12]
     	tempbuf[5] = pbuf[5];
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	795b      	ldrb	r3, [r3, #5]
 800ce9a:	737b      	strb	r3, [r7, #13]
     	tempbuf[6] = pbuf[6];
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	799b      	ldrb	r3, [r3, #6]
 800cea0:	73bb      	strb	r3, [r7, #14]
     	break;
 800cea2:	e01c      	b.n	800cede <CDC_Control_FS+0x11e>

     case CDC_GET_LINE_CODING:
     	pbuf[0] = tempbuf[0];
 800cea4:	7a3a      	ldrb	r2, [r7, #8]
 800cea6:	683b      	ldr	r3, [r7, #0]
 800cea8:	701a      	strb	r2, [r3, #0]
     	pbuf[1] = tempbuf[1];
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	3301      	adds	r3, #1
 800ceae:	7a7a      	ldrb	r2, [r7, #9]
 800ceb0:	701a      	strb	r2, [r3, #0]
     	pbuf[2] = tempbuf[2];
 800ceb2:	683b      	ldr	r3, [r7, #0]
 800ceb4:	3302      	adds	r3, #2
 800ceb6:	7aba      	ldrb	r2, [r7, #10]
 800ceb8:	701a      	strb	r2, [r3, #0]
     	pbuf[3] = tempbuf[3];
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	3303      	adds	r3, #3
 800cebe:	7afa      	ldrb	r2, [r7, #11]
 800cec0:	701a      	strb	r2, [r3, #0]
     	pbuf[4] = tempbuf[4];
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	3304      	adds	r3, #4
 800cec6:	7b3a      	ldrb	r2, [r7, #12]
 800cec8:	701a      	strb	r2, [r3, #0]
     	pbuf[5] = tempbuf[5];
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	3305      	adds	r3, #5
 800cece:	7b7a      	ldrb	r2, [r7, #13]
 800ced0:	701a      	strb	r2, [r3, #0]
     	pbuf[6] = tempbuf[6];
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	3306      	adds	r3, #6
 800ced6:	7bba      	ldrb	r2, [r7, #14]
 800ced8:	701a      	strb	r2, [r3, #0]
     	break;
 800ceda:	e000      	b.n	800cede <CDC_Control_FS+0x11e>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cedc:	bf00      	nop
  }

  return (USBD_OK);
 800cede:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3714      	adds	r7, #20
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	b082      	sub	sp, #8
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
 800cef4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cef6:	6879      	ldr	r1, [r7, #4]
 800cef8:	4805      	ldr	r0, [pc, #20]	; (800cf10 <CDC_Receive_FS+0x24>)
 800cefa:	f7fe fdd6 	bl	800baaa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cefe:	4804      	ldr	r0, [pc, #16]	; (800cf10 <CDC_Receive_FS+0x24>)
 800cf00:	f7fe fe16 	bl	800bb30 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cf04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3708      	adds	r7, #8
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}
 800cf0e:	bf00      	nop
 800cf10:	24000584 	.word	0x24000584

0800cf14 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cf20:	2300      	movs	r3, #0
 800cf22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cf24:	4b0d      	ldr	r3, [pc, #52]	; (800cf5c <CDC_Transmit_FS+0x48>)
 800cf26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf2a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d001      	beq.n	800cf3a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cf36:	2301      	movs	r3, #1
 800cf38:	e00b      	b.n	800cf52 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cf3a:	887b      	ldrh	r3, [r7, #2]
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	4806      	ldr	r0, [pc, #24]	; (800cf5c <CDC_Transmit_FS+0x48>)
 800cf42:	f7fe fd98 	bl	800ba76 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cf46:	4805      	ldr	r0, [pc, #20]	; (800cf5c <CDC_Transmit_FS+0x48>)
 800cf48:	f7fe fdc3 	bl	800bad2 <USBD_CDC_TransmitPacket>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cf50:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf52:	4618      	mov	r0, r3
 800cf54:	3710      	adds	r7, #16
 800cf56:	46bd      	mov	sp, r7
 800cf58:	bd80      	pop	{r7, pc}
 800cf5a:	bf00      	nop
 800cf5c:	24000584 	.word	0x24000584

0800cf60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b083      	sub	sp, #12
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	4603      	mov	r3, r0
 800cf68:	6039      	str	r1, [r7, #0]
 800cf6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2212      	movs	r2, #18
 800cf70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cf72:	4b03      	ldr	r3, [pc, #12]	; (800cf80 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	370c      	adds	r7, #12
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	24000154 	.word	0x24000154

0800cf84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	6039      	str	r1, [r7, #0]
 800cf8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	2204      	movs	r2, #4
 800cf94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cf96:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	24000168 	.word	0x24000168

0800cfa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	6039      	str	r1, [r7, #0]
 800cfb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d105      	bne.n	800cfc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	4907      	ldr	r1, [pc, #28]	; (800cfdc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfbe:	4808      	ldr	r0, [pc, #32]	; (800cfe0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfc0:	f7ff fdd2 	bl	800cb68 <USBD_GetString>
 800cfc4:	e004      	b.n	800cfd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800cfc6:	683a      	ldr	r2, [r7, #0]
 800cfc8:	4904      	ldr	r1, [pc, #16]	; (800cfdc <USBD_FS_ProductStrDescriptor+0x34>)
 800cfca:	4805      	ldr	r0, [pc, #20]	; (800cfe0 <USBD_FS_ProductStrDescriptor+0x38>)
 800cfcc:	f7ff fdcc 	bl	800cb68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cfd0:	4b02      	ldr	r3, [pc, #8]	; (800cfdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3708      	adds	r7, #8
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	24001848 	.word	0x24001848
 800cfe0:	0800dab4 	.word	0x0800dab4

0800cfe4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	6039      	str	r1, [r7, #0]
 800cfee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800cff0:	683a      	ldr	r2, [r7, #0]
 800cff2:	4904      	ldr	r1, [pc, #16]	; (800d004 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800cff4:	4804      	ldr	r0, [pc, #16]	; (800d008 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800cff6:	f7ff fdb7 	bl	800cb68 <USBD_GetString>
  return USBD_StrDesc;
 800cffa:	4b02      	ldr	r3, [pc, #8]	; (800d004 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3708      	adds	r7, #8
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}
 800d004:	24001848 	.word	0x24001848
 800d008:	0800dacc 	.word	0x0800dacc

0800d00c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	4603      	mov	r3, r0
 800d014:	6039      	str	r1, [r7, #0]
 800d016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	221a      	movs	r2, #26
 800d01c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d01e:	f000 f843 	bl	800d0a8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800d022:	4b02      	ldr	r3, [pc, #8]	; (800d02c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}
 800d02c:	2400016c 	.word	0x2400016c

0800d030 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b082      	sub	sp, #8
 800d034:	af00      	add	r7, sp, #0
 800d036:	4603      	mov	r3, r0
 800d038:	6039      	str	r1, [r7, #0]
 800d03a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d03c:	79fb      	ldrb	r3, [r7, #7]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d105      	bne.n	800d04e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	4907      	ldr	r1, [pc, #28]	; (800d064 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d046:	4808      	ldr	r0, [pc, #32]	; (800d068 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d048:	f7ff fd8e 	bl	800cb68 <USBD_GetString>
 800d04c:	e004      	b.n	800d058 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800d04e:	683a      	ldr	r2, [r7, #0]
 800d050:	4904      	ldr	r1, [pc, #16]	; (800d064 <USBD_FS_ConfigStrDescriptor+0x34>)
 800d052:	4805      	ldr	r0, [pc, #20]	; (800d068 <USBD_FS_ConfigStrDescriptor+0x38>)
 800d054:	f7ff fd88 	bl	800cb68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d058:	4b02      	ldr	r3, [pc, #8]	; (800d064 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3708      	adds	r7, #8
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	24001848 	.word	0x24001848
 800d068:	0800dae0 	.word	0x0800dae0

0800d06c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	4603      	mov	r3, r0
 800d074:	6039      	str	r1, [r7, #0]
 800d076:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d105      	bne.n	800d08a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d07e:	683a      	ldr	r2, [r7, #0]
 800d080:	4907      	ldr	r1, [pc, #28]	; (800d0a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d082:	4808      	ldr	r0, [pc, #32]	; (800d0a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d084:	f7ff fd70 	bl	800cb68 <USBD_GetString>
 800d088:	e004      	b.n	800d094 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800d08a:	683a      	ldr	r2, [r7, #0]
 800d08c:	4904      	ldr	r1, [pc, #16]	; (800d0a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800d08e:	4805      	ldr	r0, [pc, #20]	; (800d0a4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800d090:	f7ff fd6a 	bl	800cb68 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d094:	4b02      	ldr	r3, [pc, #8]	; (800d0a0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800d096:	4618      	mov	r0, r3
 800d098:	3708      	adds	r7, #8
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	24001848 	.word	0x24001848
 800d0a4:	0800daec 	.word	0x0800daec

0800d0a8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d0ae:	4b0f      	ldr	r3, [pc, #60]	; (800d0ec <Get_SerialNum+0x44>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d0b4:	4b0e      	ldr	r3, [pc, #56]	; (800d0f0 <Get_SerialNum+0x48>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d0ba:	4b0e      	ldr	r3, [pc, #56]	; (800d0f4 <Get_SerialNum+0x4c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d0c0:	68fa      	ldr	r2, [r7, #12]
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4413      	add	r3, r2
 800d0c6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d009      	beq.n	800d0e2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d0ce:	2208      	movs	r2, #8
 800d0d0:	4909      	ldr	r1, [pc, #36]	; (800d0f8 <Get_SerialNum+0x50>)
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f000 f814 	bl	800d100 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d0d8:	2204      	movs	r2, #4
 800d0da:	4908      	ldr	r1, [pc, #32]	; (800d0fc <Get_SerialNum+0x54>)
 800d0dc:	68b8      	ldr	r0, [r7, #8]
 800d0de:	f000 f80f 	bl	800d100 <IntToUnicode>
  }
}
 800d0e2:	bf00      	nop
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	1ff1e800 	.word	0x1ff1e800
 800d0f0:	1ff1e804 	.word	0x1ff1e804
 800d0f4:	1ff1e808 	.word	0x1ff1e808
 800d0f8:	2400016e 	.word	0x2400016e
 800d0fc:	2400017e 	.word	0x2400017e

0800d100 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d100:	b480      	push	{r7}
 800d102:	b087      	sub	sp, #28
 800d104:	af00      	add	r7, sp, #0
 800d106:	60f8      	str	r0, [r7, #12]
 800d108:	60b9      	str	r1, [r7, #8]
 800d10a:	4613      	mov	r3, r2
 800d10c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d112:	2300      	movs	r3, #0
 800d114:	75fb      	strb	r3, [r7, #23]
 800d116:	e027      	b.n	800d168 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	0f1b      	lsrs	r3, r3, #28
 800d11c:	2b09      	cmp	r3, #9
 800d11e:	d80b      	bhi.n	800d138 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	0f1b      	lsrs	r3, r3, #28
 800d124:	b2da      	uxtb	r2, r3
 800d126:	7dfb      	ldrb	r3, [r7, #23]
 800d128:	005b      	lsls	r3, r3, #1
 800d12a:	4619      	mov	r1, r3
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	440b      	add	r3, r1
 800d130:	3230      	adds	r2, #48	; 0x30
 800d132:	b2d2      	uxtb	r2, r2
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	e00a      	b.n	800d14e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	0f1b      	lsrs	r3, r3, #28
 800d13c:	b2da      	uxtb	r2, r3
 800d13e:	7dfb      	ldrb	r3, [r7, #23]
 800d140:	005b      	lsls	r3, r3, #1
 800d142:	4619      	mov	r1, r3
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	440b      	add	r3, r1
 800d148:	3237      	adds	r2, #55	; 0x37
 800d14a:	b2d2      	uxtb	r2, r2
 800d14c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	011b      	lsls	r3, r3, #4
 800d152:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800d154:	7dfb      	ldrb	r3, [r7, #23]
 800d156:	005b      	lsls	r3, r3, #1
 800d158:	3301      	adds	r3, #1
 800d15a:	68ba      	ldr	r2, [r7, #8]
 800d15c:	4413      	add	r3, r2
 800d15e:	2200      	movs	r2, #0
 800d160:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800d162:	7dfb      	ldrb	r3, [r7, #23]
 800d164:	3301      	adds	r3, #1
 800d166:	75fb      	strb	r3, [r7, #23]
 800d168:	7dfa      	ldrb	r2, [r7, #23]
 800d16a:	79fb      	ldrb	r3, [r7, #7]
 800d16c:	429a      	cmp	r2, r3
 800d16e:	d3d3      	bcc.n	800d118 <IntToUnicode+0x18>
  }
}
 800d170:	bf00      	nop
 800d172:	371c      	adds	r7, #28
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr

0800d17c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800d17c:	b580      	push	{r7, lr}
 800d17e:	b08a      	sub	sp, #40	; 0x28
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d184:	f107 0314 	add.w	r3, r7, #20
 800d188:	2200      	movs	r2, #0
 800d18a:	601a      	str	r2, [r3, #0]
 800d18c:	605a      	str	r2, [r3, #4]
 800d18e:	609a      	str	r2, [r3, #8]
 800d190:	60da      	str	r2, [r3, #12]
 800d192:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a1e      	ldr	r2, [pc, #120]	; (800d214 <HAL_PCD_MspInit+0x98>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d136      	bne.n	800d20c <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d19e:	4b1e      	ldr	r3, [pc, #120]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1a4:	4a1c      	ldr	r2, [pc, #112]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1a6:	f043 0301 	orr.w	r3, r3, #1
 800d1aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800d1ae:	4b1a      	ldr	r3, [pc, #104]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d1b4:	f003 0301 	and.w	r3, r3, #1
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800d1bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800d1c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1c2:	2302      	movs	r3, #2
 800d1c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1c6:	2300      	movs	r3, #0
 800d1c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800d1ce:	230a      	movs	r3, #10
 800d1d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d1d2:	f107 0314 	add.w	r3, r7, #20
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	4810      	ldr	r0, [pc, #64]	; (800d21c <HAL_PCD_MspInit+0xa0>)
 800d1da:	f7f5 fab1 	bl	8002740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d1de:	4b0e      	ldr	r3, [pc, #56]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d1e4:	4a0c      	ldr	r2, [pc, #48]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d1ea:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800d1ee:	4b0a      	ldr	r3, [pc, #40]	; (800d218 <HAL_PCD_MspInit+0x9c>)
 800d1f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d1f8:	60fb      	str	r3, [r7, #12]
 800d1fa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	2100      	movs	r1, #0
 800d200:	2065      	movs	r0, #101	; 0x65
 800d202:	f7f5 f824 	bl	800224e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d206:	2065      	movs	r0, #101	; 0x65
 800d208:	f7f5 f83b 	bl	8002282 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d20c:	bf00      	nop
 800d20e:	3728      	adds	r7, #40	; 0x28
 800d210:	46bd      	mov	sp, r7
 800d212:	bd80      	pop	{r7, pc}
 800d214:	40080000 	.word	0x40080000
 800d218:	58024400 	.word	0x58024400
 800d21c:	58020000 	.word	0x58020000

0800d220 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800d234:	4619      	mov	r1, r3
 800d236:	4610      	mov	r0, r2
 800d238:	f7fe fd32 	bl	800bca0 <USBD_LL_SetupStage>
}
 800d23c:	bf00      	nop
 800d23e:	3708      	adds	r7, #8
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}

0800d244 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b082      	sub	sp, #8
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
 800d24c:	460b      	mov	r3, r1
 800d24e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d256:	78fa      	ldrb	r2, [r7, #3]
 800d258:	6879      	ldr	r1, [r7, #4]
 800d25a:	4613      	mov	r3, r2
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	1a9b      	subs	r3, r3, r2
 800d260:	009b      	lsls	r3, r3, #2
 800d262:	440b      	add	r3, r1
 800d264:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800d268:	681a      	ldr	r2, [r3, #0]
 800d26a:	78fb      	ldrb	r3, [r7, #3]
 800d26c:	4619      	mov	r1, r3
 800d26e:	f7fe fd62 	bl	800bd36 <USBD_LL_DataOutStage>
}
 800d272:	bf00      	nop
 800d274:	3708      	adds	r7, #8
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d27a:	b580      	push	{r7, lr}
 800d27c:	b082      	sub	sp, #8
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	460b      	mov	r3, r1
 800d284:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800d28c:	78fa      	ldrb	r2, [r7, #3]
 800d28e:	6879      	ldr	r1, [r7, #4]
 800d290:	4613      	mov	r3, r2
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	1a9b      	subs	r3, r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	440b      	add	r3, r1
 800d29a:	3348      	adds	r3, #72	; 0x48
 800d29c:	681a      	ldr	r2, [r3, #0]
 800d29e:	78fb      	ldrb	r3, [r7, #3]
 800d2a0:	4619      	mov	r1, r3
 800d2a2:	f7fe fdb9 	bl	800be18 <USBD_LL_DataInStage>
}
 800d2a6:	bf00      	nop
 800d2a8:	3708      	adds	r7, #8
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}

0800d2ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d2ae:	b580      	push	{r7, lr}
 800d2b0:	b082      	sub	sp, #8
 800d2b2:	af00      	add	r7, sp, #0
 800d2b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fe fecc 	bl	800c05a <USBD_LL_SOF>
}
 800d2c2:	bf00      	nop
 800d2c4:	3708      	adds	r7, #8
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	bd80      	pop	{r7, pc}

0800d2ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800d2ca:	b580      	push	{r7, lr}
 800d2cc:	b084      	sub	sp, #16
 800d2ce:	af00      	add	r7, sp, #0
 800d2d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d102      	bne.n	800d2e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	73fb      	strb	r3, [r7, #15]
 800d2e2:	e008      	b.n	800d2f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d102      	bne.n	800d2f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800d2ec:	2301      	movs	r3, #1
 800d2ee:	73fb      	strb	r3, [r7, #15]
 800d2f0:	e001      	b.n	800d2f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800d2f2:	f7f4 fabb 	bl	800186c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d2fc:	7bfa      	ldrb	r2, [r7, #15]
 800d2fe:	4611      	mov	r1, r2
 800d300:	4618      	mov	r0, r3
 800d302:	f7fe fe6f 	bl	800bfe4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d30c:	4618      	mov	r0, r3
 800d30e:	f7fe fe28 	bl	800bf62 <USBD_LL_Reset>
}
 800d312:	bf00      	nop
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}
	...

0800d31c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fe6a 	bl	800c004 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	687a      	ldr	r2, [r7, #4]
 800d33c:	6812      	ldr	r2, [r2, #0]
 800d33e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d342:	f043 0301 	orr.w	r3, r3, #1
 800d346:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6a1b      	ldr	r3, [r3, #32]
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d005      	beq.n	800d35c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d350:	4b04      	ldr	r3, [pc, #16]	; (800d364 <HAL_PCD_SuspendCallback+0x48>)
 800d352:	691b      	ldr	r3, [r3, #16]
 800d354:	4a03      	ldr	r2, [pc, #12]	; (800d364 <HAL_PCD_SuspendCallback+0x48>)
 800d356:	f043 0306 	orr.w	r3, r3, #6
 800d35a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d35c:	bf00      	nop
 800d35e:	3708      	adds	r7, #8
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}
 800d364:	e000ed00 	.word	0xe000ed00

0800d368 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d368:	b580      	push	{r7, lr}
 800d36a:	b082      	sub	sp, #8
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d376:	4618      	mov	r0, r3
 800d378:	f7fe fe59 	bl	800c02e <USBD_LL_Resume>
}
 800d37c:	bf00      	nop
 800d37e:	3708      	adds	r7, #8
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}

0800d384 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d384:	b580      	push	{r7, lr}
 800d386:	b082      	sub	sp, #8
 800d388:	af00      	add	r7, sp, #0
 800d38a:	6078      	str	r0, [r7, #4]
 800d38c:	460b      	mov	r3, r1
 800d38e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d396:	78fa      	ldrb	r2, [r7, #3]
 800d398:	4611      	mov	r1, r2
 800d39a:	4618      	mov	r0, r3
 800d39c:	f7fe fe84 	bl	800c0a8 <USBD_LL_IsoOUTIncomplete>
}
 800d3a0:	bf00      	nop
 800d3a2:	3708      	adds	r7, #8
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b082      	sub	sp, #8
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3ba:	78fa      	ldrb	r2, [r7, #3]
 800d3bc:	4611      	mov	r1, r2
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe fe65 	bl	800c08e <USBD_LL_IsoINIncomplete>
}
 800d3c4:	bf00      	nop
 800d3c6:	3708      	adds	r7, #8
 800d3c8:	46bd      	mov	sp, r7
 800d3ca:	bd80      	pop	{r7, pc}

0800d3cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3da:	4618      	mov	r0, r3
 800d3dc:	f7fe fe71 	bl	800c0c2 <USBD_LL_DevConnected>
}
 800d3e0:	bf00      	nop
 800d3e2:	3708      	adds	r7, #8
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe fe6e 	bl	800c0d8 <USBD_LL_DevDisconnected>
}
 800d3fc:	bf00      	nop
 800d3fe:	3708      	adds	r7, #8
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d13e      	bne.n	800d492 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d414:	4a21      	ldr	r2, [pc, #132]	; (800d49c <USBD_LL_Init+0x98>)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	4a1f      	ldr	r2, [pc, #124]	; (800d49c <USBD_LL_Init+0x98>)
 800d420:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d424:	4b1d      	ldr	r3, [pc, #116]	; (800d49c <USBD_LL_Init+0x98>)
 800d426:	4a1e      	ldr	r2, [pc, #120]	; (800d4a0 <USBD_LL_Init+0x9c>)
 800d428:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800d42a:	4b1c      	ldr	r3, [pc, #112]	; (800d49c <USBD_LL_Init+0x98>)
 800d42c:	2209      	movs	r2, #9
 800d42e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d430:	4b1a      	ldr	r3, [pc, #104]	; (800d49c <USBD_LL_Init+0x98>)
 800d432:	2202      	movs	r2, #2
 800d434:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d436:	4b19      	ldr	r3, [pc, #100]	; (800d49c <USBD_LL_Init+0x98>)
 800d438:	2200      	movs	r2, #0
 800d43a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d43c:	4b17      	ldr	r3, [pc, #92]	; (800d49c <USBD_LL_Init+0x98>)
 800d43e:	2202      	movs	r2, #2
 800d440:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800d442:	4b16      	ldr	r3, [pc, #88]	; (800d49c <USBD_LL_Init+0x98>)
 800d444:	2201      	movs	r2, #1
 800d446:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d448:	4b14      	ldr	r3, [pc, #80]	; (800d49c <USBD_LL_Init+0x98>)
 800d44a:	2200      	movs	r2, #0
 800d44c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d44e:	4b13      	ldr	r3, [pc, #76]	; (800d49c <USBD_LL_Init+0x98>)
 800d450:	2200      	movs	r2, #0
 800d452:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800d454:	4b11      	ldr	r3, [pc, #68]	; (800d49c <USBD_LL_Init+0x98>)
 800d456:	2200      	movs	r2, #0
 800d458:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d45a:	4b10      	ldr	r3, [pc, #64]	; (800d49c <USBD_LL_Init+0x98>)
 800d45c:	2200      	movs	r2, #0
 800d45e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d460:	4b0e      	ldr	r3, [pc, #56]	; (800d49c <USBD_LL_Init+0x98>)
 800d462:	2200      	movs	r2, #0
 800d464:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d466:	480d      	ldr	r0, [pc, #52]	; (800d49c <USBD_LL_Init+0x98>)
 800d468:	f7f5 fb65 	bl	8002b36 <HAL_PCD_Init>
 800d46c:	4603      	mov	r3, r0
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d001      	beq.n	800d476 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800d472:	f7f4 f9fb 	bl	800186c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d476:	2180      	movs	r1, #128	; 0x80
 800d478:	4808      	ldr	r0, [pc, #32]	; (800d49c <USBD_LL_Init+0x98>)
 800d47a:	f7f6 fcf6 	bl	8003e6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d47e:	2240      	movs	r2, #64	; 0x40
 800d480:	2100      	movs	r1, #0
 800d482:	4806      	ldr	r0, [pc, #24]	; (800d49c <USBD_LL_Init+0x98>)
 800d484:	f7f6 fcaa 	bl	8003ddc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d488:	2280      	movs	r2, #128	; 0x80
 800d48a:	2101      	movs	r1, #1
 800d48c:	4803      	ldr	r0, [pc, #12]	; (800d49c <USBD_LL_Init+0x98>)
 800d48e:	f7f6 fca5 	bl	8003ddc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	24001a48 	.word	0x24001a48
 800d4a0:	40080000 	.word	0x40080000

0800d4a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b084      	sub	sp, #16
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f5 fc5f 	bl	8002d7e <HAL_PCD_Start>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 800d4c4:	7bfb      	ldrb	r3, [r7, #15]
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	f000 f92e 	bl	800d728 <USBD_Get_USB_Status>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d4d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b084      	sub	sp, #16
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
 800d4e2:	4608      	mov	r0, r1
 800d4e4:	4611      	mov	r1, r2
 800d4e6:	461a      	mov	r2, r3
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	70fb      	strb	r3, [r7, #3]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	70bb      	strb	r3, [r7, #2]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d502:	78bb      	ldrb	r3, [r7, #2]
 800d504:	883a      	ldrh	r2, [r7, #0]
 800d506:	78f9      	ldrb	r1, [r7, #3]
 800d508:	f7f6 f870 	bl	80035ec <HAL_PCD_EP_Open>
 800d50c:	4603      	mov	r3, r0
 800d50e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d510:	7bfb      	ldrb	r3, [r7, #15]
 800d512:	4618      	mov	r0, r3
 800d514:	f000 f908 	bl	800d728 <USBD_Get_USB_Status>
 800d518:	4603      	mov	r3, r0
 800d51a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800d51c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	3710      	adds	r7, #16
 800d522:	46bd      	mov	sp, r7
 800d524:	bd80      	pop	{r7, pc}

0800d526 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d526:	b580      	push	{r7, lr}
 800d528:	b084      	sub	sp, #16
 800d52a:	af00      	add	r7, sp, #0
 800d52c:	6078      	str	r0, [r7, #4]
 800d52e:	460b      	mov	r3, r1
 800d530:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d536:	2300      	movs	r3, #0
 800d538:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d540:	78fa      	ldrb	r2, [r7, #3]
 800d542:	4611      	mov	r1, r2
 800d544:	4618      	mov	r0, r3
 800d546:	f7f6 f8b9 	bl	80036bc <HAL_PCD_EP_Close>
 800d54a:	4603      	mov	r3, r0
 800d54c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800d54e:	7bfb      	ldrb	r3, [r7, #15]
 800d550:	4618      	mov	r0, r3
 800d552:	f000 f8e9 	bl	800d728 <USBD_Get_USB_Status>
 800d556:	4603      	mov	r3, r0
 800d558:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800d55a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3710      	adds	r7, #16
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b084      	sub	sp, #16
 800d568:	af00      	add	r7, sp, #0
 800d56a:	6078      	str	r0, [r7, #4]
 800d56c:	460b      	mov	r3, r1
 800d56e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d570:	2300      	movs	r3, #0
 800d572:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d574:	2300      	movs	r3, #0
 800d576:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d57e:	78fa      	ldrb	r2, [r7, #3]
 800d580:	4611      	mov	r1, r2
 800d582:	4618      	mov	r0, r3
 800d584:	f7f6 f991 	bl	80038aa <HAL_PCD_EP_SetStall>
 800d588:	4603      	mov	r3, r0
 800d58a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d58c:	7bfb      	ldrb	r3, [r7, #15]
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 f8ca 	bl	800d728 <USBD_Get_USB_Status>
 800d594:	4603      	mov	r3, r0
 800d596:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d598:	7bbb      	ldrb	r3, [r7, #14]
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5bc:	78fa      	ldrb	r2, [r7, #3]
 800d5be:	4611      	mov	r1, r2
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7f6 f9d6 	bl	8003972 <HAL_PCD_EP_ClrStall>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800d5ca:	7bfb      	ldrb	r3, [r7, #15]
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f000 f8ab 	bl	800d728 <USBD_Get_USB_Status>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d5e0:	b480      	push	{r7}
 800d5e2:	b085      	sub	sp, #20
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d5f2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 800d5f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	da0b      	bge.n	800d614 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800d5fc:	78fb      	ldrb	r3, [r7, #3]
 800d5fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d602:	68f9      	ldr	r1, [r7, #12]
 800d604:	4613      	mov	r3, r2
 800d606:	00db      	lsls	r3, r3, #3
 800d608:	1a9b      	subs	r3, r3, r2
 800d60a:	009b      	lsls	r3, r3, #2
 800d60c:	440b      	add	r3, r1
 800d60e:	333e      	adds	r3, #62	; 0x3e
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	e00b      	b.n	800d62c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800d614:	78fb      	ldrb	r3, [r7, #3]
 800d616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d61a:	68f9      	ldr	r1, [r7, #12]
 800d61c:	4613      	mov	r3, r2
 800d61e:	00db      	lsls	r3, r3, #3
 800d620:	1a9b      	subs	r3, r3, r2
 800d622:	009b      	lsls	r3, r3, #2
 800d624:	440b      	add	r3, r1
 800d626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d62a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3714      	adds	r7, #20
 800d630:	46bd      	mov	sp, r7
 800d632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d636:	4770      	bx	lr

0800d638 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	460b      	mov	r3, r1
 800d642:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d652:	78fa      	ldrb	r2, [r7, #3]
 800d654:	4611      	mov	r1, r2
 800d656:	4618      	mov	r0, r3
 800d658:	f7f5 ffa3 	bl	80035a2 <HAL_PCD_SetAddress>
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 800d660:	7bfb      	ldrb	r3, [r7, #15]
 800d662:	4618      	mov	r0, r3
 800d664:	f000 f860 	bl	800d728 <USBD_Get_USB_Status>
 800d668:	4603      	mov	r3, r0
 800d66a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800d66c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3710      	adds	r7, #16
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}

0800d676 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d676:	b580      	push	{r7, lr}
 800d678:	b086      	sub	sp, #24
 800d67a:	af00      	add	r7, sp, #0
 800d67c:	60f8      	str	r0, [r7, #12]
 800d67e:	607a      	str	r2, [r7, #4]
 800d680:	461a      	mov	r2, r3
 800d682:	460b      	mov	r3, r1
 800d684:	72fb      	strb	r3, [r7, #11]
 800d686:	4613      	mov	r3, r2
 800d688:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d68e:	2300      	movs	r3, #0
 800d690:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d698:	893b      	ldrh	r3, [r7, #8]
 800d69a:	7af9      	ldrb	r1, [r7, #11]
 800d69c:	687a      	ldr	r2, [r7, #4]
 800d69e:	f7f6 f8ba 	bl	8003816 <HAL_PCD_EP_Transmit>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 800d6a6:	7dfb      	ldrb	r3, [r7, #23]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f000 f83d 	bl	800d728 <USBD_Get_USB_Status>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 800d6b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	607a      	str	r2, [r7, #4]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	72fb      	strb	r3, [r7, #11]
 800d6cc:	4613      	mov	r3, r2
 800d6ce:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800d6de:	893b      	ldrh	r3, [r7, #8]
 800d6e0:	7af9      	ldrb	r1, [r7, #11]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	f7f6 f834 	bl	8003750 <HAL_PCD_EP_Receive>
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 800d6ec:	7dfb      	ldrb	r3, [r7, #23]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f81a 	bl	800d728 <USBD_Get_USB_Status>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 800d6f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3718      	adds	r7, #24
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	460b      	mov	r3, r1
 800d70c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d714:	78fa      	ldrb	r2, [r7, #3]
 800d716:	4611      	mov	r1, r2
 800d718:	4618      	mov	r0, r3
 800d71a:	f7f6 f864 	bl	80037e6 <HAL_PCD_EP_GetRxCount>
 800d71e:	4603      	mov	r3, r0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d728:	b480      	push	{r7}
 800d72a:	b085      	sub	sp, #20
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	4603      	mov	r3, r0
 800d730:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	2b03      	cmp	r3, #3
 800d73a:	d817      	bhi.n	800d76c <USBD_Get_USB_Status+0x44>
 800d73c:	a201      	add	r2, pc, #4	; (adr r2, 800d744 <USBD_Get_USB_Status+0x1c>)
 800d73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d742:	bf00      	nop
 800d744:	0800d755 	.word	0x0800d755
 800d748:	0800d75b 	.word	0x0800d75b
 800d74c:	0800d761 	.word	0x0800d761
 800d750:	0800d767 	.word	0x0800d767
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d754:	2300      	movs	r3, #0
 800d756:	73fb      	strb	r3, [r7, #15]
    break;
 800d758:	e00b      	b.n	800d772 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d75a:	2302      	movs	r3, #2
 800d75c:	73fb      	strb	r3, [r7, #15]
    break;
 800d75e:	e008      	b.n	800d772 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d760:	2301      	movs	r3, #1
 800d762:	73fb      	strb	r3, [r7, #15]
    break;
 800d764:	e005      	b.n	800d772 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d766:	2302      	movs	r3, #2
 800d768:	73fb      	strb	r3, [r7, #15]
    break;
 800d76a:	e002      	b.n	800d772 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d76c:	2302      	movs	r3, #2
 800d76e:	73fb      	strb	r3, [r7, #15]
    break;
 800d770:	bf00      	nop
  }
  return usb_status;
 800d772:	7bfb      	ldrb	r3, [r7, #15]
}
 800d774:	4618      	mov	r0, r3
 800d776:	3714      	adds	r7, #20
 800d778:	46bd      	mov	sp, r7
 800d77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d77e:	4770      	bx	lr

0800d780 <__errno>:
 800d780:	4b01      	ldr	r3, [pc, #4]	; (800d788 <__errno+0x8>)
 800d782:	6818      	ldr	r0, [r3, #0]
 800d784:	4770      	bx	lr
 800d786:	bf00      	nop
 800d788:	24000188 	.word	0x24000188

0800d78c <__libc_init_array>:
 800d78c:	b570      	push	{r4, r5, r6, lr}
 800d78e:	4e0d      	ldr	r6, [pc, #52]	; (800d7c4 <__libc_init_array+0x38>)
 800d790:	4c0d      	ldr	r4, [pc, #52]	; (800d7c8 <__libc_init_array+0x3c>)
 800d792:	1ba4      	subs	r4, r4, r6
 800d794:	10a4      	asrs	r4, r4, #2
 800d796:	2500      	movs	r5, #0
 800d798:	42a5      	cmp	r5, r4
 800d79a:	d109      	bne.n	800d7b0 <__libc_init_array+0x24>
 800d79c:	4e0b      	ldr	r6, [pc, #44]	; (800d7cc <__libc_init_array+0x40>)
 800d79e:	4c0c      	ldr	r4, [pc, #48]	; (800d7d0 <__libc_init_array+0x44>)
 800d7a0:	f000 f95a 	bl	800da58 <_init>
 800d7a4:	1ba4      	subs	r4, r4, r6
 800d7a6:	10a4      	asrs	r4, r4, #2
 800d7a8:	2500      	movs	r5, #0
 800d7aa:	42a5      	cmp	r5, r4
 800d7ac:	d105      	bne.n	800d7ba <__libc_init_array+0x2e>
 800d7ae:	bd70      	pop	{r4, r5, r6, pc}
 800d7b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7b4:	4798      	blx	r3
 800d7b6:	3501      	adds	r5, #1
 800d7b8:	e7ee      	b.n	800d798 <__libc_init_array+0xc>
 800d7ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d7be:	4798      	blx	r3
 800d7c0:	3501      	adds	r5, #1
 800d7c2:	e7f2      	b.n	800d7aa <__libc_init_array+0x1e>
 800d7c4:	0800db3c 	.word	0x0800db3c
 800d7c8:	0800db3c 	.word	0x0800db3c
 800d7cc:	0800db3c 	.word	0x0800db3c
 800d7d0:	0800db40 	.word	0x0800db40

0800d7d4 <__itoa>:
 800d7d4:	1e93      	subs	r3, r2, #2
 800d7d6:	2b22      	cmp	r3, #34	; 0x22
 800d7d8:	b510      	push	{r4, lr}
 800d7da:	460c      	mov	r4, r1
 800d7dc:	d904      	bls.n	800d7e8 <__itoa+0x14>
 800d7de:	2300      	movs	r3, #0
 800d7e0:	700b      	strb	r3, [r1, #0]
 800d7e2:	461c      	mov	r4, r3
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	bd10      	pop	{r4, pc}
 800d7e8:	2a0a      	cmp	r2, #10
 800d7ea:	d109      	bne.n	800d800 <__itoa+0x2c>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	da07      	bge.n	800d800 <__itoa+0x2c>
 800d7f0:	232d      	movs	r3, #45	; 0x2d
 800d7f2:	700b      	strb	r3, [r1, #0]
 800d7f4:	4240      	negs	r0, r0
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	4421      	add	r1, r4
 800d7fa:	f000 f8ed 	bl	800d9d8 <__utoa>
 800d7fe:	e7f1      	b.n	800d7e4 <__itoa+0x10>
 800d800:	2100      	movs	r1, #0
 800d802:	e7f9      	b.n	800d7f8 <__itoa+0x24>

0800d804 <itoa>:
 800d804:	f7ff bfe6 	b.w	800d7d4 <__itoa>

0800d808 <malloc>:
 800d808:	4b02      	ldr	r3, [pc, #8]	; (800d814 <malloc+0xc>)
 800d80a:	4601      	mov	r1, r0
 800d80c:	6818      	ldr	r0, [r3, #0]
 800d80e:	f000 b861 	b.w	800d8d4 <_malloc_r>
 800d812:	bf00      	nop
 800d814:	24000188 	.word	0x24000188

0800d818 <free>:
 800d818:	4b02      	ldr	r3, [pc, #8]	; (800d824 <free+0xc>)
 800d81a:	4601      	mov	r1, r0
 800d81c:	6818      	ldr	r0, [r3, #0]
 800d81e:	f000 b80b 	b.w	800d838 <_free_r>
 800d822:	bf00      	nop
 800d824:	24000188 	.word	0x24000188

0800d828 <memset>:
 800d828:	4402      	add	r2, r0
 800d82a:	4603      	mov	r3, r0
 800d82c:	4293      	cmp	r3, r2
 800d82e:	d100      	bne.n	800d832 <memset+0xa>
 800d830:	4770      	bx	lr
 800d832:	f803 1b01 	strb.w	r1, [r3], #1
 800d836:	e7f9      	b.n	800d82c <memset+0x4>

0800d838 <_free_r>:
 800d838:	b538      	push	{r3, r4, r5, lr}
 800d83a:	4605      	mov	r5, r0
 800d83c:	2900      	cmp	r1, #0
 800d83e:	d045      	beq.n	800d8cc <_free_r+0x94>
 800d840:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d844:	1f0c      	subs	r4, r1, #4
 800d846:	2b00      	cmp	r3, #0
 800d848:	bfb8      	it	lt
 800d84a:	18e4      	addlt	r4, r4, r3
 800d84c:	f000 f902 	bl	800da54 <__malloc_lock>
 800d850:	4a1f      	ldr	r2, [pc, #124]	; (800d8d0 <_free_r+0x98>)
 800d852:	6813      	ldr	r3, [r2, #0]
 800d854:	4610      	mov	r0, r2
 800d856:	b933      	cbnz	r3, 800d866 <_free_r+0x2e>
 800d858:	6063      	str	r3, [r4, #4]
 800d85a:	6014      	str	r4, [r2, #0]
 800d85c:	4628      	mov	r0, r5
 800d85e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d862:	f000 b8f8 	b.w	800da56 <__malloc_unlock>
 800d866:	42a3      	cmp	r3, r4
 800d868:	d90c      	bls.n	800d884 <_free_r+0x4c>
 800d86a:	6821      	ldr	r1, [r4, #0]
 800d86c:	1862      	adds	r2, r4, r1
 800d86e:	4293      	cmp	r3, r2
 800d870:	bf04      	itt	eq
 800d872:	681a      	ldreq	r2, [r3, #0]
 800d874:	685b      	ldreq	r3, [r3, #4]
 800d876:	6063      	str	r3, [r4, #4]
 800d878:	bf04      	itt	eq
 800d87a:	1852      	addeq	r2, r2, r1
 800d87c:	6022      	streq	r2, [r4, #0]
 800d87e:	6004      	str	r4, [r0, #0]
 800d880:	e7ec      	b.n	800d85c <_free_r+0x24>
 800d882:	4613      	mov	r3, r2
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	b10a      	cbz	r2, 800d88c <_free_r+0x54>
 800d888:	42a2      	cmp	r2, r4
 800d88a:	d9fa      	bls.n	800d882 <_free_r+0x4a>
 800d88c:	6819      	ldr	r1, [r3, #0]
 800d88e:	1858      	adds	r0, r3, r1
 800d890:	42a0      	cmp	r0, r4
 800d892:	d10b      	bne.n	800d8ac <_free_r+0x74>
 800d894:	6820      	ldr	r0, [r4, #0]
 800d896:	4401      	add	r1, r0
 800d898:	1858      	adds	r0, r3, r1
 800d89a:	4282      	cmp	r2, r0
 800d89c:	6019      	str	r1, [r3, #0]
 800d89e:	d1dd      	bne.n	800d85c <_free_r+0x24>
 800d8a0:	6810      	ldr	r0, [r2, #0]
 800d8a2:	6852      	ldr	r2, [r2, #4]
 800d8a4:	605a      	str	r2, [r3, #4]
 800d8a6:	4401      	add	r1, r0
 800d8a8:	6019      	str	r1, [r3, #0]
 800d8aa:	e7d7      	b.n	800d85c <_free_r+0x24>
 800d8ac:	d902      	bls.n	800d8b4 <_free_r+0x7c>
 800d8ae:	230c      	movs	r3, #12
 800d8b0:	602b      	str	r3, [r5, #0]
 800d8b2:	e7d3      	b.n	800d85c <_free_r+0x24>
 800d8b4:	6820      	ldr	r0, [r4, #0]
 800d8b6:	1821      	adds	r1, r4, r0
 800d8b8:	428a      	cmp	r2, r1
 800d8ba:	bf04      	itt	eq
 800d8bc:	6811      	ldreq	r1, [r2, #0]
 800d8be:	6852      	ldreq	r2, [r2, #4]
 800d8c0:	6062      	str	r2, [r4, #4]
 800d8c2:	bf04      	itt	eq
 800d8c4:	1809      	addeq	r1, r1, r0
 800d8c6:	6021      	streq	r1, [r4, #0]
 800d8c8:	605c      	str	r4, [r3, #4]
 800d8ca:	e7c7      	b.n	800d85c <_free_r+0x24>
 800d8cc:	bd38      	pop	{r3, r4, r5, pc}
 800d8ce:	bf00      	nop
 800d8d0:	24000278 	.word	0x24000278

0800d8d4 <_malloc_r>:
 800d8d4:	b570      	push	{r4, r5, r6, lr}
 800d8d6:	1ccd      	adds	r5, r1, #3
 800d8d8:	f025 0503 	bic.w	r5, r5, #3
 800d8dc:	3508      	adds	r5, #8
 800d8de:	2d0c      	cmp	r5, #12
 800d8e0:	bf38      	it	cc
 800d8e2:	250c      	movcc	r5, #12
 800d8e4:	2d00      	cmp	r5, #0
 800d8e6:	4606      	mov	r6, r0
 800d8e8:	db01      	blt.n	800d8ee <_malloc_r+0x1a>
 800d8ea:	42a9      	cmp	r1, r5
 800d8ec:	d903      	bls.n	800d8f6 <_malloc_r+0x22>
 800d8ee:	230c      	movs	r3, #12
 800d8f0:	6033      	str	r3, [r6, #0]
 800d8f2:	2000      	movs	r0, #0
 800d8f4:	bd70      	pop	{r4, r5, r6, pc}
 800d8f6:	f000 f8ad 	bl	800da54 <__malloc_lock>
 800d8fa:	4a21      	ldr	r2, [pc, #132]	; (800d980 <_malloc_r+0xac>)
 800d8fc:	6814      	ldr	r4, [r2, #0]
 800d8fe:	4621      	mov	r1, r4
 800d900:	b991      	cbnz	r1, 800d928 <_malloc_r+0x54>
 800d902:	4c20      	ldr	r4, [pc, #128]	; (800d984 <_malloc_r+0xb0>)
 800d904:	6823      	ldr	r3, [r4, #0]
 800d906:	b91b      	cbnz	r3, 800d910 <_malloc_r+0x3c>
 800d908:	4630      	mov	r0, r6
 800d90a:	f000 f83d 	bl	800d988 <_sbrk_r>
 800d90e:	6020      	str	r0, [r4, #0]
 800d910:	4629      	mov	r1, r5
 800d912:	4630      	mov	r0, r6
 800d914:	f000 f838 	bl	800d988 <_sbrk_r>
 800d918:	1c43      	adds	r3, r0, #1
 800d91a:	d124      	bne.n	800d966 <_malloc_r+0x92>
 800d91c:	230c      	movs	r3, #12
 800d91e:	6033      	str	r3, [r6, #0]
 800d920:	4630      	mov	r0, r6
 800d922:	f000 f898 	bl	800da56 <__malloc_unlock>
 800d926:	e7e4      	b.n	800d8f2 <_malloc_r+0x1e>
 800d928:	680b      	ldr	r3, [r1, #0]
 800d92a:	1b5b      	subs	r3, r3, r5
 800d92c:	d418      	bmi.n	800d960 <_malloc_r+0x8c>
 800d92e:	2b0b      	cmp	r3, #11
 800d930:	d90f      	bls.n	800d952 <_malloc_r+0x7e>
 800d932:	600b      	str	r3, [r1, #0]
 800d934:	50cd      	str	r5, [r1, r3]
 800d936:	18cc      	adds	r4, r1, r3
 800d938:	4630      	mov	r0, r6
 800d93a:	f000 f88c 	bl	800da56 <__malloc_unlock>
 800d93e:	f104 000b 	add.w	r0, r4, #11
 800d942:	1d23      	adds	r3, r4, #4
 800d944:	f020 0007 	bic.w	r0, r0, #7
 800d948:	1ac3      	subs	r3, r0, r3
 800d94a:	d0d3      	beq.n	800d8f4 <_malloc_r+0x20>
 800d94c:	425a      	negs	r2, r3
 800d94e:	50e2      	str	r2, [r4, r3]
 800d950:	e7d0      	b.n	800d8f4 <_malloc_r+0x20>
 800d952:	428c      	cmp	r4, r1
 800d954:	684b      	ldr	r3, [r1, #4]
 800d956:	bf16      	itet	ne
 800d958:	6063      	strne	r3, [r4, #4]
 800d95a:	6013      	streq	r3, [r2, #0]
 800d95c:	460c      	movne	r4, r1
 800d95e:	e7eb      	b.n	800d938 <_malloc_r+0x64>
 800d960:	460c      	mov	r4, r1
 800d962:	6849      	ldr	r1, [r1, #4]
 800d964:	e7cc      	b.n	800d900 <_malloc_r+0x2c>
 800d966:	1cc4      	adds	r4, r0, #3
 800d968:	f024 0403 	bic.w	r4, r4, #3
 800d96c:	42a0      	cmp	r0, r4
 800d96e:	d005      	beq.n	800d97c <_malloc_r+0xa8>
 800d970:	1a21      	subs	r1, r4, r0
 800d972:	4630      	mov	r0, r6
 800d974:	f000 f808 	bl	800d988 <_sbrk_r>
 800d978:	3001      	adds	r0, #1
 800d97a:	d0cf      	beq.n	800d91c <_malloc_r+0x48>
 800d97c:	6025      	str	r5, [r4, #0]
 800d97e:	e7db      	b.n	800d938 <_malloc_r+0x64>
 800d980:	24000278 	.word	0x24000278
 800d984:	2400027c 	.word	0x2400027c

0800d988 <_sbrk_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4c06      	ldr	r4, [pc, #24]	; (800d9a4 <_sbrk_r+0x1c>)
 800d98c:	2300      	movs	r3, #0
 800d98e:	4605      	mov	r5, r0
 800d990:	4608      	mov	r0, r1
 800d992:	6023      	str	r3, [r4, #0]
 800d994:	f7f4 fa08 	bl	8001da8 <_sbrk>
 800d998:	1c43      	adds	r3, r0, #1
 800d99a:	d102      	bne.n	800d9a2 <_sbrk_r+0x1a>
 800d99c:	6823      	ldr	r3, [r4, #0]
 800d99e:	b103      	cbz	r3, 800d9a2 <_sbrk_r+0x1a>
 800d9a0:	602b      	str	r3, [r5, #0]
 800d9a2:	bd38      	pop	{r3, r4, r5, pc}
 800d9a4:	24001e50 	.word	0x24001e50

0800d9a8 <strcat>:
 800d9a8:	b510      	push	{r4, lr}
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	781a      	ldrb	r2, [r3, #0]
 800d9ae:	1c5c      	adds	r4, r3, #1
 800d9b0:	b93a      	cbnz	r2, 800d9c2 <strcat+0x1a>
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9bc:	2a00      	cmp	r2, #0
 800d9be:	d1f9      	bne.n	800d9b4 <strcat+0xc>
 800d9c0:	bd10      	pop	{r4, pc}
 800d9c2:	4623      	mov	r3, r4
 800d9c4:	e7f2      	b.n	800d9ac <strcat+0x4>

0800d9c6 <strcpy>:
 800d9c6:	4603      	mov	r3, r0
 800d9c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9cc:	f803 2b01 	strb.w	r2, [r3], #1
 800d9d0:	2a00      	cmp	r2, #0
 800d9d2:	d1f9      	bne.n	800d9c8 <strcpy+0x2>
 800d9d4:	4770      	bx	lr
	...

0800d9d8 <__utoa>:
 800d9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9da:	4b1d      	ldr	r3, [pc, #116]	; (800da50 <__utoa+0x78>)
 800d9dc:	b08b      	sub	sp, #44	; 0x2c
 800d9de:	4605      	mov	r5, r0
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	466e      	mov	r6, sp
 800d9e4:	f103 0c20 	add.w	ip, r3, #32
 800d9e8:	6818      	ldr	r0, [r3, #0]
 800d9ea:	6859      	ldr	r1, [r3, #4]
 800d9ec:	4637      	mov	r7, r6
 800d9ee:	c703      	stmia	r7!, {r0, r1}
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	4563      	cmp	r3, ip
 800d9f4:	463e      	mov	r6, r7
 800d9f6:	d1f7      	bne.n	800d9e8 <__utoa+0x10>
 800d9f8:	6818      	ldr	r0, [r3, #0]
 800d9fa:	791b      	ldrb	r3, [r3, #4]
 800d9fc:	713b      	strb	r3, [r7, #4]
 800d9fe:	1e93      	subs	r3, r2, #2
 800da00:	2b22      	cmp	r3, #34	; 0x22
 800da02:	6038      	str	r0, [r7, #0]
 800da04:	f04f 0300 	mov.w	r3, #0
 800da08:	d904      	bls.n	800da14 <__utoa+0x3c>
 800da0a:	7023      	strb	r3, [r4, #0]
 800da0c:	461c      	mov	r4, r3
 800da0e:	4620      	mov	r0, r4
 800da10:	b00b      	add	sp, #44	; 0x2c
 800da12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da14:	1e66      	subs	r6, r4, #1
 800da16:	fbb5 f0f2 	udiv	r0, r5, r2
 800da1a:	af0a      	add	r7, sp, #40	; 0x28
 800da1c:	fb02 5510 	mls	r5, r2, r0, r5
 800da20:	443d      	add	r5, r7
 800da22:	1c59      	adds	r1, r3, #1
 800da24:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 800da28:	f806 5f01 	strb.w	r5, [r6, #1]!
 800da2c:	4605      	mov	r5, r0
 800da2e:	b968      	cbnz	r0, 800da4c <__utoa+0x74>
 800da30:	5460      	strb	r0, [r4, r1]
 800da32:	4423      	add	r3, r4
 800da34:	4622      	mov	r2, r4
 800da36:	1b19      	subs	r1, r3, r4
 800da38:	1b10      	subs	r0, r2, r4
 800da3a:	4281      	cmp	r1, r0
 800da3c:	dde7      	ble.n	800da0e <__utoa+0x36>
 800da3e:	7811      	ldrb	r1, [r2, #0]
 800da40:	7818      	ldrb	r0, [r3, #0]
 800da42:	f802 0b01 	strb.w	r0, [r2], #1
 800da46:	f803 1901 	strb.w	r1, [r3], #-1
 800da4a:	e7f4      	b.n	800da36 <__utoa+0x5e>
 800da4c:	460b      	mov	r3, r1
 800da4e:	e7e2      	b.n	800da16 <__utoa+0x3e>
 800da50:	0800db0c 	.word	0x0800db0c

0800da54 <__malloc_lock>:
 800da54:	4770      	bx	lr

0800da56 <__malloc_unlock>:
 800da56:	4770      	bx	lr

0800da58 <_init>:
 800da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da5a:	bf00      	nop
 800da5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da5e:	bc08      	pop	{r3}
 800da60:	469e      	mov	lr, r3
 800da62:	4770      	bx	lr

0800da64 <_fini>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr
